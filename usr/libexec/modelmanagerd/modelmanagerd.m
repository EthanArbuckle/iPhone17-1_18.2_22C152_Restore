int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v34;
  long long v35;
  uint64_t v36;

  v3 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v3 - 8, v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003A70(&qword_10015B210);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100128650;
  *(void *)(v7 + 56) = &type metadata for String;
  strcpy((char *)(v7 + 32), "Entered Daemon");
  *(unsigned char *)(v7 + 47) = -18;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _OSActivity();
  qword_10015B050 = _OSActivity.__allocating_init(_:)();
  v8 = type metadata accessor for Logger();
  sub_100003AB4(v8, qword_10015B058);
  v9 = sub_100003B18(v8, (uint64_t)qword_10015B058);
  sub_100008678();
  v11 = v10;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v9, v15, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Initializing Daemon...", v18, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for ModelCatalogProvider(0);
  swift_allocObject();
  sub_1000E974C();
  v20 = v19;
  type metadata accessor for FilesystemProvider();
  v21 = swift_allocObject();
  type metadata accessor for RunningBoardProvider();
  swift_allocObject();
  v22 = sub_1000D35A8();
  type metadata accessor for TrialFrameworkProvider();
  swift_allocObject();
  v23 = sub_100071F98();
  type metadata accessor for NeuralEngine();
  v24 = swift_allocObject();
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1000040CC((unint64_t)&_swiftEmptyArrayStorage, &qword_10015B288, (void (*)(unsigned char *))sub_1000C95D4, (void (*)(void))type metadata accessor for InferenceProviderAsset, (uint64_t (*)(uint64_t, uint64_t))sub_1000C9418);
    v25 = v34;
  }
  else
  {
    v25 = &_swiftEmptySetSingleton;
  }
  type metadata accessor for TelemetryManager();
  v26 = (void *)swift_allocObject();
  v27 = sub_1000F8A00(v26);
  *((void *)&v35 + 1) = v25;
  *(void *)&v35 = 0;
  qword_10015B070 = sub_1000064F4(v20, v24, v21, v22, v23, 0, 0, 0, v35, (uint64_t)v27);
  type metadata accessor for Daemon();
  swift_allocObject();
  v28 = swift_retain();
  qword_10015B078 = sub_100030E10(v28);
  _OSActivity.close()();
  v29 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v6, 1, 1, v29);
  type metadata accessor for MainActor();
  v30 = static MainActor.shared.getter();
  v31 = swift_allocObject();
  *(void *)(v31 + 16) = v30;
  *(void *)(v31 + 24) = &protocol witness table for MainActor;
  sub_1000037AC((uint64_t)v6, (uint64_t)&unk_10015B220, v31);
  swift_release();
  v32 = [self mainRunLoop];
  [v32 run];

  return 0;
}

uint64_t sub_10000349C()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_100003530, v2, v1);
}

uint64_t sub_100003530()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000035C0;
  return sub_100031818();
}

uint64_t sub_1000035C0()
{
  sub_1000086E0();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 24);
  return _swift_task_switch(sub_1000036D4, v5, v4);
}

uint64_t sub_1000036D4()
{
  sub_1000086E0();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100003730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000037AC(a1, a2, a3);
}

uint64_t sub_10000375C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000037AC(a1, a2, a3);
}

uint64_t sub_100003784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000037AC(a1, a2, a3);
}

uint64_t sub_1000037AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_100006AE8(a1, 1, v6) == 1)
  {
    sub_100006B10(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t variable initialization expression of InferenceProviderManager.ConnectionCollection.groupsByIdentifier()
{
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t variable initialization expression of InferenceProviderManager.waitingForFirstUpdate()
{
  return 0;
}

void *variable initialization expression of InferenceProviderManager.firstUpdateContinuations()
{
  return &_swiftEmptyArrayStorage;
}

_UNKNOWN **variable initialization expression of InferenceProviderManager.eligibilityControlledIPs()
{
  return &off_100152D68;
}

void *sub_100003974(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100008714();
    result = (void *)sub_1000087C8();
    __break(1u);
  }
  else if (a1)
  {
    result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000039EC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100008714();
    uint64_t result = sub_1000087C8();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for InferenceProviderAsset(0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return (uint64_t)&_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100003A70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t *sub_100003AB4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100003B18(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_100003B50(unint64_t a1)
{
}

void sub_100003B98(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep();
  sub_100008678();
  uint64_t v39 = v4;
  __chkstk_darwin(v5, v6);
  sub_1000086F8();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  sub_100008820(v9, v10, v11, v12, v13, v14, v15, v16, v36);
  if (*(void *)(a1 + 16)
    && (sub_100003A70(&qword_10015B248),
        uint64_t v17 = static _SetStorage.allocate(capacity:)(),
        (uint64_t v38 = *(void *)(a1 + 16)) != 0))
  {
    unint64_t v18 = 0;
    sub_1000087F8();
    v20 = (void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v37 = a1;
    while (v18 < *(void *)(a1 + 16))
    {
      v21 = *(void (**)(void))(v39 + 16);
      sub_1000086BC();
      v21();
      sub_100006AA4(&qword_10015B250);
      uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v17 + 32));
      sub_100008798();
      if ((v26 & v25) != 0)
      {
        unint64_t v40 = v18;
        uint64_t v27 = ~v24;
        while (1)
        {
          sub_1000086BC();
          v21();
          sub_100006AA4(&qword_10015B258);
          char v28 = sub_100008774();
          v29 = *v20;
          (*v20)(v1, v3);
          if (v28) {
            break;
          }
          uint64_t v22 = (v22 + 1) & v27;
          sub_100008798();
          if ((v30 & v31) == 0)
          {
            a1 = v37;
            unint64_t v18 = v40;
            goto LABEL_10;
          }
        }
        v29(v41, v3);
        a1 = v37;
        unint64_t v18 = v40;
      }
      else
      {
LABEL_10:
        sub_10000880C(v23);
        sub_100008744();
        v32();
        uint64_t v33 = *(void *)(v17 + 16);
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_16;
        }
        *(void *)(v17 + 16) = v35;
      }
      if (++v18 == v38) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

void sub_100003E04(uint64_t a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015B228);
  sub_100008678();
  uint64_t v39 = v4;
  __chkstk_darwin(v5, v6);
  sub_1000086F8();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  sub_100008820(v9, v10, v11, v12, v13, v14, v15, v16, v36);
  if (*(void *)(a1 + 16)
    && (sub_100003A70(&qword_10015B230),
        uint64_t v17 = static _SetStorage.allocate(capacity:)(),
        (uint64_t v38 = *(void *)(a1 + 16)) != 0))
  {
    sub_1000087F8();
    v20 = (void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v37 = a1;
    while (v18 < *(void *)(a1 + 16))
    {
      unint64_t v40 = v18;
      v21 = *(void (**)(void))(v39 + 16);
      sub_1000086BC();
      v21();
      sub_10000841C(&qword_10015B238, &qword_10015B228);
      uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v17 + 32));
      sub_1000087B0();
      if ((v26 & v25) != 0)
      {
        uint64_t v27 = ~v24;
        while (1)
        {
          sub_1000086BC();
          v21();
          sub_10000841C(&qword_10015B240, &qword_10015B228);
          char v28 = sub_100008774();
          v29 = *v20;
          (*v20)(v1, v3);
          if (v28) {
            break;
          }
          uint64_t v22 = (v22 + 1) & v27;
          sub_1000087B0();
          if ((v30 & v31) == 0)
          {
            a1 = v37;
            goto LABEL_10;
          }
        }
        v29(v41, v3);
        a1 = v37;
      }
      else
      {
LABEL_10:
        sub_10000880C(v23);
        sub_100008744();
        v32();
        uint64_t v33 = *(void *)(v17 + 16);
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_16;
        }
        *(void *)(v17 + 16) = v35;
      }
      unint64_t v18 = v40 + 1;
      if (v40 + 1 == v38) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

void sub_100004084(unint64_t a1)
{
}

void sub_1000040CC(unint64_t a1, uint64_t *a2, void (*a3)(unsigned char *), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  unint64_t v8 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v9 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_100003A70(a2);
  uint64_t v9 = (unsigned char *)static _SetStorage.allocate(capacity:)();
LABEL_6:
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      goto LABEL_26;
    }
  }
  unint64_t v12 = 0;
  unint64_t v32 = a1 & 0xC000000000000001;
  unint64_t v28 = a1 + 32;
  uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v30 = v11;
  while (1)
  {
    if (v32)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v12 >= *(void *)(v29 + 16)) {
        goto LABEL_29;
      }
      uint64_t v13 = *(void *)(v28 + 8 * v12);
      swift_retain();
    }
    BOOL v14 = __OFADD__(v12++, 1);
    if (v14) {
      break;
    }
    Hasher.init(_seed:)();
    a3(v34);
    Swift::Int v15 = Hasher._finalize()();
    uint64_t v16 = -1 << v9[32];
    uint64_t v17 = v15 & ~v16;
    sub_100008834();
    if ((v20 & v19) != 0)
    {
      a4(0);
      uint64_t v21 = swift_retain();
      char v22 = a5(v21, v13);
      swift_release();
      if (v22)
      {
LABEL_21:
        swift_release();
        uint64_t v11 = v30;
        goto LABEL_25;
      }
      uint64_t v23 = ~v16;
      while (1)
      {
        uint64_t v17 = (v17 + 1) & v23;
        sub_100008834();
        if ((v19 & v20) == 0) {
          break;
        }
        uint64_t v24 = swift_retain();
        char v25 = a5(v24, v13);
        swift_release();
        if (v25) {
          goto LABEL_21;
        }
      }
      uint64_t v11 = v30;
    }
    *(void *)&v9[8 * v18 + 56] = v20 | v19;
    *(void *)(*((void *)v9 + 6) + 8 * v17) = v13;
    uint64_t v26 = *((void *)v9 + 2);
    BOOL v14 = __OFADD__(v26, 1);
    uint64_t v27 = v26 + 1;
    if (v14) {
      goto LABEL_28;
    }
    *((void *)v9 + 2) = v27;
LABEL_25:
    if (v12 == v11) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_100004340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v18 = &off_100154C88;
  *(void *)&long long v16 = a1;
  swift_defaultActor_initialize();
  type metadata accessor for WorkQueueState();
  uint64_t v14 = swift_allocObject();
  *(void *)(a7 + 112) = v14;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask) = 0;
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask) = 0;
  *(unsigned char *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) = 0;
  sub_10000831C(&v16, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_providerManager) = a2;
  sub_10000831C(a5, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager);
  *(void *)(a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_neuralEngine) = a6;
  sub_100008580(a3, a7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy);
  *(void *)(a7 + 120) = a4;
  return a7;
}

uint64_t sub_100004484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[3] = type metadata accessor for InferenceProviderAssetManager(0);
  v27[4] = &off_100154298;
  v27[0] = a1;
  uint64_t v10 = type metadata accessor for ModelCatalogProvider(0);
  v26[3] = v10;
  v26[4] = &off_100154C88;
  v26[0] = a4;
  swift_defaultActor_initialize();
  uint64_t v11 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
  unint64_t v12 = (char *)v11 + *(int *)(type metadata accessor for RequestManagerPolicy(0) + 20);
  uint64_t v13 = enum case for RequestPriority.none(_:);
  uint64_t v14 = type metadata accessor for RequestPriority();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  *uint64_t v11 = &_swiftEmptySetSingleton;
  Swift::Int v15 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    uint64_t v23 = sub_100116AD0((uint64_t)&_swiftEmptyArrayStorage);
    *Swift::Int v15 = 0;
    v15[1] = &_swiftEmptyArrayStorage;
    v15[2] = v23;
    uint64_t v24 = sub_100116AD0((uint64_t)&_swiftEmptyArrayStorage);
    char v25 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *char v25 = 0;
    v25[1] = &_swiftEmptyArrayStorage;
    v25[2] = v24;
    uint64_t v17 = (void *)sub_100116AD0((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    *Swift::Int v15 = 0;
    v15[1] = &_swiftEmptyArrayStorage;
    v15[2] = &_swiftEmptyArrayStorage;
    long long v16 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    *long long v16 = 0;
    v16[1] = &_swiftEmptyArrayStorage;
    v16[2] = &_swiftEmptyArrayStorage;
    uint64_t v17 = &_swiftEmptyArrayStorage;
  }
  uint64_t v18 = (void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  *uint64_t v18 = 0;
  v18[1] = &_swiftEmptyArrayStorage;
  v18[2] = v17;
  uint64_t v19 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_workQueueState;
  type metadata accessor for WorkQueueState();
  uint64_t v20 = swift_allocObject();
  *(void *)(a5 + v19) = v20;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_inferenceMonitors) = &_swiftEmptySetSingleton;
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire) = 0;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests) = &_swiftEmptySetSingleton;
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests) = &_swiftEmptySetSingleton;
  sub_100008334((uint64_t)v27, a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager);
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_neuralEngine) = a2;
  sub_100008334(a3, a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_telemetryManager);
  uint64_t v21 = *(void *)(*sub_10000853C(v26, v10) + 120);
  sub_100008130(a3);
  sub_100008130((uint64_t)v27);
  *(void *)(a5 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_foregroundOvercommitBudget) = v21;
  sub_100008130((uint64_t)v26);
  return a5;
}

uint64_t sub_100004704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = type metadata accessor for FilesystemProvider();
  unint64_t v12 = &off_100154738;
  *(void *)&long long v10 = a1;
  uint64_t v8 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v9 = &off_100154C88;
  *(void *)&long long v7 = a2;
  swift_defaultActor_initialize();
  *(void *)(a3 + 192) = &_swiftEmptySetSingleton;
  sub_10000831C(&v10, a3 + 112);
  sub_10000831C(&v7, a3 + 152);
  return a3;
}

void *sub_10000479C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v30 = a8;
  uint64_t v31 = a4;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v32 = a5;
  uint64_t v12 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v12 - 8, v13);
  Swift::Int v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[3] = type metadata accessor for RunningBoardProvider();
  v37[4] = &off_100154770;
  v37[0] = a1;
  v36[3] = type metadata accessor for ModelCatalogProvider(0);
  v36[4] = &off_100154C88;
  v36[0] = a3;
  swift_defaultActor_initialize();
  sub_100008398();
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8, v17);
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v18, v19);
  uint64_t v35 = &_swiftEmptyArrayStorage;
  sub_1000083D8();
  sub_100003A70(&qword_10015B2B8);
  sub_10000841C(&qword_10015B2C0, &qword_10015B2B8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v20, v21);
  (*(void (**)(char *, void))(v23 + 104))((char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a9[35] = 0;
  a9[14] = v30;
  a9[15] = v24;
  sub_100008334((uint64_t)v37, (uint64_t)(a9 + 16));
  a9[21] = a2;
  sub_100008334((uint64_t)v36, (uint64_t)(a9 + 22));
  uint64_t v25 = v32;
  a9[27] = v31;
  sub_100008334(v25, (uint64_t)(a9 + 28));
  uint64_t v26 = v34;
  a9[33] = v33;
  a9[34] = v26;
  uint64_t v27 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v15, 1, 1, v27);
  unint64_t v28 = (void *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = a9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000037AC((uint64_t)v15, (uint64_t)&unk_10015B2C8, (uint64_t)v28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100008130(v25);
  sub_100008130((uint64_t)v36);
  sub_100008130((uint64_t)v37);
  return a9;
}

void *sub_100004B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = type metadata accessor for RequestPriority();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v18 = type metadata accessor for AssetPolicy();
  __chkstk_darwin(v18 - 8, v19);
  v29[3] = type metadata accessor for FilesystemProvider();
  v29[4] = &off_100154738;
  v29[0] = a1;
  uint64_t v27 = &type metadata for OSVariantProvider;
  unint64_t v28 = &off_100154670;
  v25[3] = type metadata accessor for InferenceProviderAssetManager(0);
  v25[4] = &off_100154298;
  v25[0] = a3;
  v24[3] = type metadata accessor for ModelCatalogProvider(0);
  v24[4] = &off_100154C88;
  v24[0] = a4;
  swift_defaultActor_initialize();
  type metadata accessor for WorkQueueState();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  a8[39] = v20;
  a8[40] = &_swiftEmptySetSingleton;
  default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  sub_100008334((uint64_t)v29, (uint64_t)(a8 + 14));
  sub_100008334((uint64_t)v26, (uint64_t)(a8 + 19));
  a8[24] = a2;
  sub_100008334((uint64_t)v25, (uint64_t)(a8 + 25));
  sub_100008334((uint64_t)v24, (uint64_t)(a8 + 30));
  a8[35] = a5;
  a8[36] = a6;
  swift_bridgeObjectRetain_n();
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_100011E9C(v21, a5, a5);
  sub_100008130((uint64_t)v24);
  sub_100008130((uint64_t)v25);
  sub_100008130((uint64_t)v26);
  sub_100008130((uint64_t)v29);
  a8[37] = v22;
  a8[38] = a7;
  return a8;
}

void *sub_100004DDC(long long *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = type metadata accessor for PolicyManager();
  uint64_t v12 = &off_100153208;
  *(void *)&long long v10 = a2;
  swift_defaultActor_initialize();
  type metadata accessor for WorkQueueState();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  a4[24] = v8;
  type metadata accessor for Policy();
  a4[26] = Dictionary.init(dictionaryLiteral:)();
  sub_10000831C(a1, (uint64_t)(a4 + 14));
  sub_10000831C(&v10, (uint64_t)(a4 + 19));
  a4[25] = a3;
  return a4;
}

uint64_t sub_100004EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a7;
  uint64_t v15 = type metadata accessor for RunningBoardProvider();
  v48[3] = v15;
  v48[4] = &off_100154770;
  v48[0] = a1;
  v46 = &type metadata for OSVariantProvider;
  v47 = &off_100154670;
  v44[3] = type metadata accessor for ModelCatalogProvider(0);
  v44[4] = &off_100154C88;
  v44[0] = a5;
  uint64_t v16 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_logHandle;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v16, v21, v17);
  sub_100008334((uint64_t)v48, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_100008334((uint64_t)v45, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager) = a2;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager) = a4;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager) = a3;
  sub_100008334((uint64_t)v44, a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  uint64_t v22 = a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  *(void *)(v22 + 48) = *(void *)(a6 + 48);
  long long v23 = *(_OWORD *)(a6 + 32);
  long long v24 = *(_OWORD *)a6;
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v22 + 32) = v23;
  *(_OWORD *)uint64_t v22 = v24;
  sub_100008334((uint64_t)v48, (uint64_t)v42);
  uint64_t v25 = sub_1000080E0((uint64_t)v42, v43);
  __chkstk_darwin(v25, v25);
  uint64_t v27 = (uint64_t *)((char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = *v27;
  v41[4] = &off_100154770;
  v41[3] = v15;
  v41[0] = v29;
  type metadata accessor for AssertionRequestDispatcher();
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = sub_1000080E0((uint64_t)v41, v15);
  __chkstk_darwin(v31, v31);
  uint64_t v33 = (uint64_t *)((char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  uint64_t v35 = *v33;
  unint64_t v40 = &off_100154770;
  uint64_t v39 = v15;
  *(void *)&long long v38 = v35;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000821C(a6);
  swift_defaultActor_initialize();
  sub_10000831C(&v38, v30 + 112);
  *(void *)(v30 + 152) = a4;
  sub_100008130((uint64_t)v41);
  sub_100008130((uint64_t)v42);
  sub_10000829C(a6);
  swift_release();
  swift_release();
  sub_100008130((uint64_t)v44);
  sub_100008130((uint64_t)v45);
  sub_100008130((uint64_t)v48);
  *(void *)(a8 + 16) = v30;
  *(void *)(a8 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager) = v37;
  return a8;
}

uint64_t sub_1000052C0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18[3] = type metadata accessor for PolicyManager();
  v18[4] = &off_100153208;
  v18[0] = a1;
  uint64_t v16 = &type metadata for MemoryPressureEventProvider;
  uint64_t v17 = &off_100155228;
  swift_defaultActor_initialize();
  uint64_t v10 = a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
  uint64_t v11 = sub_100003A70(&qword_10015B228);
  sub_100006960(v10, 1, 1, v11);
  *(void *)(a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask) = 0;
  sub_100008334((uint64_t)v18, a2 + 112);
  sub_100008334((uint64_t)v15, a2 + 152);
  *(double *)(a2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogInterval) = a3;
  uint64_t v12 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v9, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a2;
  swift_retain();
  sub_1000037AC((uint64_t)v9, (uint64_t)&unk_10015B2A0, (uint64_t)v13);
  swift_release();
  sub_100008130((uint64_t)v15);
  sub_100008130((uint64_t)v18);
  return a2;
}

uint64_t sub_100005488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v21 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v22 = &off_100154C88;
  v20[0] = a1;
  type metadata accessor for InferenceProviderAssetManager(0);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_1000080E0((uint64_t)v20, v21);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_100004340(*v15, a2, a3, a4, a5, a6, v12);
  sub_100008130((uint64_t)v20);
  return v17;
}

uint64_t sub_1000055D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = type metadata accessor for InferenceProviderAssetManager(0);
  long long v24 = &off_100154298;
  v22[0] = a1;
  uint64_t v20 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v21 = &off_100154C88;
  v19[0] = a4;
  type metadata accessor for RequestManager(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_1000080E0((uint64_t)v22, v23);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_1000080E0((uint64_t)v19, v20);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_100004484(*v11, a2, a3, *v15, v8);
  sub_100008130((uint64_t)v19);
  sub_100008130((uint64_t)v22);
  return v17;
}

uint64_t sub_1000057C0(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for FilesystemProvider();
  uint64_t v20 = &off_100154738;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v17 = &off_100154C88;
  v15[0] = a2;
  type metadata accessor for UseCaseManager();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_1000080E0((uint64_t)v18, v19);
  __chkstk_darwin(v5, v5);
  uint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_1000080E0((uint64_t)v15, v16);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100004704(*v7, *v11, v4);
  sub_100008130((uint64_t)v15);
  sub_100008130((uint64_t)v18);
  return v13;
}

void *sub_100005994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = type metadata accessor for RunningBoardProvider();
  uint64_t v32 = &off_100154770;
  v30[0] = a1;
  uint64_t v28 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v29 = &off_100154C88;
  v27[0] = a3;
  type metadata accessor for SessionManager();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = sub_1000080E0((uint64_t)v30, v31);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_1000080E0((uint64_t)v27, v28);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (void *)((char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_10000479C(*v19, a2, *v23, a4, a5, a6, a7, a8, v16);
  sub_100008130((uint64_t)v27);
  sub_100008130((uint64_t)v30);
  return v25;
}

void *sub_100005BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = type metadata accessor for FilesystemProvider();
  uint64_t v43 = &off_100154738;
  v41[0] = a1;
  uint64_t v39 = &type metadata for OSVariantProvider;
  unint64_t v40 = &off_100154670;
  uint64_t v36 = type metadata accessor for InferenceProviderAssetManager(0);
  uint64_t v37 = &off_100154298;
  v35[0] = a3;
  uint64_t v33 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v34 = &off_100154C88;
  v32[0] = a4;
  type metadata accessor for PolicyManager();
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = sub_1000080E0((uint64_t)v41, v42);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_1000080E0((uint64_t)v38, (uint64_t)v39);
  __chkstk_darwin(v19, v19);
  (*(void (**)(char *))(v21 + 16))((char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = sub_1000080E0((uint64_t)v35, v36);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (void *)((char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_1000080E0((uint64_t)v32, v33);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (void *)((char *)v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = sub_100004B90(*v17, a2, *v24, *v28, a5, a6, a7, v14);
  sub_100008130((uint64_t)v32);
  sub_100008130((uint64_t)v35);
  sub_100008130((uint64_t)v38);
  sub_100008130((uint64_t)v41);
  return v30;
}

void *sub_100005F30(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = type metadata accessor for PolicyManager();
  uint64_t v16 = &off_100153208;
  v14[0] = a2;
  type metadata accessor for TrialManager();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_1000080E0((uint64_t)v14, v15);
  __chkstk_darwin(v7, v7);
  uint64_t v9 = (void *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_100004DDC(a1, *v9, a3, v6);
  sub_100008130((uint64_t)v14);
  return v11;
}

uint64_t sub_10000605C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = type metadata accessor for RunningBoardProvider();
  uint64_t v36 = &off_100154770;
  v34[0] = a1;
  uint64_t v32 = &type metadata for OSVariantProvider;
  uint64_t v33 = &off_100154670;
  uint64_t v29 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v30 = &off_100154C88;
  v28[0] = a5;
  type metadata accessor for ModelXPCDispatcher();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = sub_1000080E0((uint64_t)v34, v35);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_1000080E0((uint64_t)v31, (uint64_t)v32);
  __chkstk_darwin(v19, v19);
  (*(void (**)(void))(v20 + 16))();
  uint64_t v21 = sub_1000080E0((uint64_t)v28, v29);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (void *)((char *)&v28[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_100004EA0(*v17, a2, a3, a4, *v23, a6, a7, v14);
  sub_100008130((uint64_t)v28);
  sub_100008130((uint64_t)v31);
  sub_100008130((uint64_t)v34);
  return v25;
}

uint64_t sub_100006320(uint64_t a1, double a2)
{
  uint64_t v17 = type metadata accessor for PolicyManager();
  uint64_t v18 = &off_100153208;
  v16[0] = a1;
  uint64_t v14 = &type metadata for MemoryPressureEventProvider;
  uint64_t v15 = &off_100155228;
  type metadata accessor for MemoryPressureObserver();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_1000080E0((uint64_t)v16, v17);
  __chkstk_darwin(v5, v5);
  uint64_t v7 = (uint64_t *)&v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_1000080E0((uint64_t)v13, (uint64_t)v14);
  __chkstk_darwin(v9, v9);
  (*(void (**)(void))(v10 + 16))();
  uint64_t v11 = sub_1000052C0(*v7, v4, a2);
  sub_100008130((uint64_t)v13);
  sub_100008130((uint64_t)v16);
  return v11;
}

uint64_t sub_1000064F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  uint64_t v37 = a8;
  long long v36 = a9;
  uint64_t v51 = type metadata accessor for ModelCatalogProvider(0);
  v52 = &off_100154C88;
  v50[0] = a1;
  uint64_t v48 = type metadata accessor for FilesystemProvider();
  v49 = &off_100154738;
  v47[0] = a3;
  uint64_t v45 = type metadata accessor for RunningBoardProvider();
  v46 = &off_100154770;
  v44[0] = a4;
  uint64_t v42 = &type metadata for OSVariantProvider;
  uint64_t v43 = &off_100154670;
  uint64_t v39 = &type metadata for MemoryPressureEventProvider;
  unint64_t v40 = &off_100155228;
  type metadata accessor for DaemonContext();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = sub_1000080E0((uint64_t)v50, v51);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (uint64_t *)((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000080E0((uint64_t)v47, v48);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (uint64_t *)((char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_1000080E0((uint64_t)v44, v45);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (uint64_t *)((char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = sub_1000080E0((uint64_t)v41, (uint64_t)v42);
  __chkstk_darwin(v30, v30);
  (*(void (**)(void))(v31 + 16))();
  uint64_t v32 = sub_1000080E0((uint64_t)v38, (uint64_t)v39);
  __chkstk_darwin(v32, v32);
  (*(void (**)(void))(v33 + 16))();
  uint64_t v34 = sub_100006B70(*v20, a2, *v24, *v28, a5, a6, a7, v37, v36, *((uint64_t *)&v36 + 1), a10, v17);
  sub_100008130((uint64_t)v38);
  sub_100008130((uint64_t)v41);
  sub_100008130((uint64_t)v44);
  sub_100008130((uint64_t)v47);
  sub_100008130((uint64_t)v50);
  return v34;
}

uint64_t sub_100006960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100006988()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000069C0()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  return sub_10000349C();
}

uint64_t sub_100006A5C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006AA4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Assertion.DaemonRep();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100006B10(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100006B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v133 = a8;
  uint64_t v134 = a7;
  v136 = (void *)a10;
  uint64_t v18 = type metadata accessor for AssetPolicy();
  v125 = *(void (***)(char *, void, uint64_t))(v18 - 8);
  uint64_t v126 = v18;
  __chkstk_darwin(v18, v19);
  v124 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  __chkstk_darwin(v123, v21);
  uint64_t v23 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149[3] = type metadata accessor for TelemetryManager();
  v149[4] = &off_1001550D8;
  v149[0] = a11;
  v148[3] = type metadata accessor for TrialFrameworkProvider();
  v148[4] = &off_1001541D0;
  v148[0] = a5;
  v147[3] = type metadata accessor for ModelCatalogProvider(0);
  v147[4] = &off_100154C88;
  v147[0] = a1;
  v146[3] = type metadata accessor for FilesystemProvider();
  v146[4] = &off_100154738;
  v146[0] = a3;
  uint64_t v24 = type metadata accessor for RunningBoardProvider();
  v145[4] = &off_100154770;
  v145[3] = v24;
  v145[0] = a4;
  v144[3] = &type metadata for OSVariantProvider;
  v144[4] = &off_100154670;
  v143[3] = &type metadata for MemoryPressureEventProvider;
  v143[4] = &off_100155228;
  uint64_t v25 = a12 + 64;
  sub_100008334((uint64_t)v147, a12 + 64);
  *(void *)(a12 + 152) = a2;
  v128 = (uint64_t *)(a12 + 160);
  sub_100008334((uint64_t)v146, a12 + 160);
  v132 = (uint64_t *)(a12 + 200);
  sub_100008334((uint64_t)v145, a12 + 200);
  uint64_t v127 = a12 + 240;
  sub_100008334((uint64_t)v148, a12 + 240);
  v129 = (uint64_t *)(a12 + 280);
  sub_100008334((uint64_t)v144, a12 + 280);
  uint64_t v135 = a6;
  uint64_t v131 = a2;
  if (a6)
  {
    swift_retain();
    uint64_t v26 = a6;
  }
  else
  {
    type metadata accessor for InferenceProviderManager();
    swift_retain();
    uint64_t v26 = sub_10006A1F4();
  }
  *(void *)(a12 + 16) = v26;
  uint64_t v27 = a12 + 112;
  sub_100008334((uint64_t)v149, a12 + 112);
  sub_100008334((uint64_t)v147, (uint64_t)&v150);
  uint64_t v29 = v133;
  uint64_t v28 = v134;
  v130 = (uint64_t *)(a12 + 64);
  if (v134)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    sub_100008130((uint64_t)&v150);
    uint64_t v30 = v28;
  }
  else
  {
    sub_100008334((uint64_t)&v150, (uint64_t)v141);
    uint64_t v32 = v125;
    uint64_t v31 = v126;
    uint64_t v33 = v125[13];
    uint64_t v122 = a12 + 112;
    uint64_t v34 = v124;
    v33(v124, enum case for AssetPolicy.standard(_:), v126);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v35 = static Policy.defaultMemoryBudgetMarker.getter();
    ((void (**)(char *, char *, uint64_t))v32)[2](v23, v34, v31);
    uint64_t v36 = v29;
    uint64_t v37 = (int *)v123;
    *(void *)&v23[*(int *)(v123 + 20)] = v35;
    *(void *)&v23[v37[8]] = &_swiftEmptySetSingleton;
    static Policy.defaultInactiveAssetTimeout.getter();
    *(void *)&v23[v37[6]] = 0x408C200000000000;
    sub_100075824();
    uint64_t v39 = v38;
    unint64_t v40 = v34;
    uint64_t v27 = v122;
    ((void (*)(char *, uint64_t))v32[1])(v40, v31);
    uint64_t v41 = v37[7];
    uint64_t v29 = v36;
    *(void *)&v23[v41] = v39;
    sub_100008334(v27, (uint64_t)&v139);
    uint64_t v42 = sub_1000080E0((uint64_t)v141, v142);
    __chkstk_darwin(v42, v42);
    v44 = (uint64_t *)((char *)&v121 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v45 + 16))(v44);
    uint64_t v25 = (uint64_t)v130;
    uint64_t v30 = sub_100005488(*v44, v26, (uint64_t)v23, (uint64_t)v136, &v139, v131);
    sub_100008130((uint64_t)v141);
    sub_100008130((uint64_t)&v150);
  }
  *(void *)(a12 + 24) = v30;
  if (v29)
  {
    uint64_t v46 = v29;
  }
  else
  {
    uint64_t v47 = *(void *)(a12 + 152);
    sub_100008334(v27, (uint64_t)v141);
    sub_100008334(v25, (uint64_t)&v139);
    uint64_t v48 = sub_1000080E0((uint64_t)&v139, v140);
    __chkstk_darwin(v48, v48);
    v50 = (uint64_t *)((char *)&v121 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v51 + 16))(v50);
    uint64_t v52 = *v50;
    swift_retain_n();
    swift_retain();
    uint64_t v46 = sub_1000055D4(v30, v47, (uint64_t)v141, v52);
    sub_100008130((uint64_t)&v139);
    swift_release();
  }
  v136 = (void *)a9;
  *(void *)(a12 + 32) = v46;
  sub_100008334((uint64_t)v128, (uint64_t)v141);
  sub_100008334(v25, (uint64_t)&v139);
  uint64_t v53 = sub_1000080E0((uint64_t)v141, v142);
  __chkstk_darwin(v53, v53);
  v55 = (uint64_t *)((char *)&v121 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v56 + 16))(v55);
  uint64_t v57 = sub_1000080E0((uint64_t)&v139, v140);
  __chkstk_darwin(v57, v57);
  v59 = (uint64_t *)((char *)&v121 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v60 + 16))(v59);
  uint64_t v61 = *v55;
  uint64_t v62 = *v59;
  swift_retain();
  uint64_t v63 = sub_1000057C0(v61, v62);
  sub_100008130((uint64_t)&v139);
  sub_100008130((uint64_t)v141);
  *(void *)(a12 + 320) = v63;
  sub_100008334((uint64_t)v132, (uint64_t)v141);
  uint64_t v64 = *(void *)(a12 + 24);
  sub_100008334(v25, (uint64_t)&v139);
  uint64_t v65 = *(void *)(a12 + 32);
  sub_100008334(v27, (uint64_t)v137);
  uint64_t v66 = *(void *)(a12 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v126 = v64;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1000040CC((unint64_t)&_swiftEmptyArrayStorage, &qword_10015B298, (void (*)(unsigned char *))sub_1000E6F68, (void (*)(void))type metadata accessor for DaemonSession, (uint64_t (*)(uint64_t, uint64_t))sub_1000E6E54);
    v125 = v120;
  }
  else
  {
    v125 = (void (**)(char *, void, uint64_t))&_swiftEmptySetSingleton;
  }
  uint64_t v67 = sub_1000080E0((uint64_t)v141, v142);
  __chkstk_darwin(v67, v67);
  v69 = (uint64_t *)((char *)&v121 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v70 + 16))(v69);
  uint64_t v71 = sub_1000080E0((uint64_t)&v139, v140);
  __chkstk_darwin(v71, v71);
  v73 = (uint64_t *)((char *)&v121 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v74 + 16))(v73);
  v75 = sub_100005994(*v69, v126, *v73, v65, (uint64_t)v137, v63, v66, (uint64_t)v125);
  sub_100008130((uint64_t)&v139);
  sub_100008130((uint64_t)v141);
  *(void *)(a12 + 40) = v75;
  if (v136)
  {
    v76 = v136;
    uint64_t v77 = (uint64_t)v130;
  }
  else
  {
    sub_100008334((uint64_t)v128, (uint64_t)v141);
    sub_100008334((uint64_t)v129, (uint64_t)&v139);
    uint64_t v79 = *(void *)(a12 + 24);
    uint64_t v78 = *(void *)(a12 + 32);
    uint64_t v80 = (uint64_t)v130;
    sub_100008334((uint64_t)v130, (uint64_t)v137);
    type metadata accessor for Policy();
    swift_retain();
    swift_retain();
    uint64_t v126 = Dictionary.init(dictionaryLiteral:)();
    v125 = (void (**)(char *, void, uint64_t))Dictionary.init(dictionaryLiteral:)();
    uint64_t v81 = sub_1000080E0((uint64_t)v141, v142);
    v128 = &v121;
    __chkstk_darwin(v81, v81);
    v83 = (uint64_t *)((char *)&v121 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v84 + 16))(v83);
    uint64_t v85 = sub_1000080E0((uint64_t)&v139, v140);
    __chkstk_darwin(v85, v85);
    (*(void (**)(void))(v86 + 16))();
    uint64_t v87 = sub_1000080E0((uint64_t)v137, v138);
    __chkstk_darwin(v87, v87);
    v89 = (uint64_t *)((char *)&v121 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v90 + 16))(v89);
    uint64_t v91 = *v83;
    uint64_t v92 = *v89;
    uint64_t v77 = v80;
    swift_retain();
    v76 = sub_100005BB4(v91, v78, v79, v92, v126, (uint64_t)v125, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100008130((uint64_t)v137);
    swift_release();
    sub_100008130((uint64_t)&v139);
    sub_100008130((uint64_t)v141);
  }
  *(void *)(a12 + 48) = v76;
  sub_100008334(v127, (uint64_t)&v150);
  uint64_t v93 = qword_10015B100;
  swift_retain();
  swift_retain();
  if (v93 != -1) {
    swift_once();
  }
  uint64_t v94 = qword_1001600C0;
  swift_bridgeObjectRetain();
  v95 = sub_100005F30(&v150, (uint64_t)v76, v94);
  *(void *)(a12 + 56) = v95;
  uint64_t v96 = *(void *)(a12 + 24);
  uint64_t v98 = *(void *)(a12 + 40);
  uint64_t v97 = *(void *)(a12 + 48);
  uint64_t v99 = *(void *)(a12 + 32);
  uint64_t v100 = *(void *)(a12 + 320);
  uint64_t v127 = *(void *)(a12 + 16);
  v128 = (uint64_t *)v100;
  *(void *)&long long v150 = v96;
  *((void *)&v150 + 1) = v127;
  *(void *)&long long v151 = v97;
  *((void *)&v151 + 1) = v98;
  *(void *)&long long v152 = v99;
  *((void *)&v152 + 1) = v100;
  v153 = v95;
  *(void *)(a12 + 384) = v95;
  long long v101 = v151;
  *(_OWORD *)(a12 + 336) = v150;
  *(_OWORD *)(a12 + 352) = v101;
  *(_OWORD *)(a12 + 368) = v152;
  sub_100008334((uint64_t)v132, (uint64_t)v141);
  sub_100008334((uint64_t)v129, (uint64_t)&v139);
  sub_100008334(v77, (uint64_t)v137);
  uint64_t v102 = sub_1000080E0((uint64_t)v141, v142);
  v132 = &v121;
  __chkstk_darwin(v102, v102);
  v104 = (uint64_t *)((char *)&v121 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v105 + 16))(v104);
  uint64_t v106 = sub_1000080E0((uint64_t)&v139, v140);
  v130 = &v121;
  __chkstk_darwin(v106, v106);
  (*(void (**)(void))(v107 + 16))();
  uint64_t v108 = sub_1000080E0((uint64_t)v137, v138);
  v129 = &v121;
  __chkstk_darwin(v108, v108);
  v110 = (uint64_t *)((char *)&v121 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v111 + 16))(v110);
  uint64_t v112 = *v104;
  uint64_t v113 = *v110;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v114 = sub_10000605C(v112, v96, v98, v97, v113, (uint64_t)&v150, v99);
  sub_100008130((uint64_t)v137);
  sub_100008130((uint64_t)&v139);
  sub_100008130((uint64_t)v141);
  *(void *)(a12 + 104) = v114;
  sub_100008334((uint64_t)v143, (uint64_t)v141);
  uint64_t v115 = sub_1000080E0((uint64_t)v141, v142);
  __chkstk_darwin(v115, v115);
  (*(void (**)(void))(v116 + 16))();
  uint64_t v117 = swift_retain_n();
  uint64_t v118 = sub_100006320(v117, 600.0);
  sub_100008130((uint64_t)v141);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100008130((uint64_t)v149);
  sub_100008130((uint64_t)v143);
  sub_100008130((uint64_t)v144);
  sub_100008130((uint64_t)v148);
  sub_100008130((uint64_t)v145);
  sub_100008130((uint64_t)v146);
  sub_100008130((uint64_t)v147);
  *(void *)(a12 + 328) = v118;
  return a12;
}

uint64_t sub_100007C74(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100007D54;
  return v5(v2 + 32);
}

uint64_t sub_100007D54()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000872C();
  return v3();
}

uint64_t sub_100007E28()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100007E60()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_100008690();
  return v4(v3);
}

uint64_t sub_100007EF4()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100007F88;
  uint64_t v3 = sub_100008690();
  return v4(v3);
}

uint64_t sub_100007F88()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10000804C()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_100008690();
  return v4(v3);
}

uint64_t sub_1000080E0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100008130(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100008184()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_10000875C();
  return sub_100122344(v3, v4, v5, v6);
}

uint64_t sub_10000821C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000829C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000831C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100008334(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100008398()
{
  unint64_t result = qword_10015B2A8;
  if (!qword_10015B2A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015B2A8);
  }
  return result;
}

unint64_t sub_1000083D8()
{
  unint64_t result = qword_10015B2B0;
  if (!qword_10015B2B0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015B2B0);
  }
  return result;
}

uint64_t sub_10000841C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100008464()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000084A4()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100007F88;
  sub_10000875C();
  return sub_100032400();
}

void *sub_10000853C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100008580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void sub_10000860C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100008690()
{
  return v0;
}

uint64_t sub_1000086AC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10000872C()
{
  unsigned char *v0 = *(unsigned char *)(v1 + 32);
  return v2 + 8;
}

uint64_t sub_10000875C()
{
  return v0;
}

uint64_t sub_100008774()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_1000087C8()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void sub_10000880C(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v3 - 96) + 8 * a1) = v2 | v1;
}

void sub_100008820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 88) = (char *)&a9 - v9;
}

uint64_t sub_100008848()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015B2E0);
  sub_100003B18(v0, (uint64_t)qword_10015B2E0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

BOOL sub_1000088BC(char a1, char a2)
{
  return a1 == a2;
}

void sub_1000088CC(uint64_t a1, unsigned __int8 a2)
{
}

BOOL sub_1000088F4(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

Swift::Int sub_100008904(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_10000894C(char *a1, char *a2)
{
  return sub_1000088BC(*a1, *a2);
}

Swift::Int sub_100008958()
{
  return sub_100008904(*v0);
}

void sub_100008960(uint64_t a1)
{
  sub_1000088CC(a1, *v1);
}

Swift::Int sub_100008968()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_1000089AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000088F4(*a1, *a2);
}

BOOL sub_1000089B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000089C4(*a1, *a2);
}

BOOL sub_1000089C4(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

BOOL sub_1000089D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100101AF8(*a1, *a2);
}

BOOL sub_1000089E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000089EC(*a1, *a2);
}

BOOL sub_1000089EC(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

uint64_t sub_1000089FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v65 = a1;
  uint64_t v66 = a5;
  uint64_t v64 = a3;
  uint64_t v69 = a2;
  uint64_t v9 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v68 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8, v10);
  sub_10000F0C0();
  uint64_t v13 = (uint64_t *)(v11 - v12);
  __chkstk_darwin(v14, v15);
  uint64_t v67 = (uint64_t)&v54 - v16;
  uint64_t v17 = v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  type metadata accessor for DaemonRequest();
  sub_100003A70(&qword_10015B470);
  sub_10000EB0C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v19 = v6;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  *(unsigned char *)uint64_t v17 = 0;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  uint64_t v21 = v69;
  uint64_t v22 = v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v22, v65, v23);
  *(void *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets) = v21;
  uint64_t v24 = (void *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_acquireBlock);
  *uint64_t v24 = v64;
  v24[1] = a4;
  uint64_t v25 = (uint64_t *)(v6 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_releaseBlock);
  *uint64_t v25 = v66;
  v25[1] = a6;
  uint64_t v26 = qword_10015B080;
  swift_bridgeObjectRetain();
  uint64_t v63 = a4;
  swift_retain();
  uint64_t v64 = a6;
  swift_retain();
  if (v26 != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v27 = type metadata accessor for Logger();
    sub_100003B18(v27, (uint64_t)qword_10015B2E0);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.logObject.getter();
    int v29 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

      swift_release();
      swift_release();
      goto LABEL_17;
    }
    int v58 = v29;
    os_log_t v60 = v28;
    uint64_t v30 = sub_10000EFE8();
    uint64_t v57 = sub_10000EFC8();
    uint64_t v71 = v57;
    *(_DWORD *)uint64_t v30 = 136315394;
    sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v61 = v23;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v70 = (void *)sub_10001DF20(v31, v32, &v71);
    uint64_t v56 = &v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    v59 = (uint8_t *)v30;
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v23 = *(void *)(v21 + 16);
    if (!v23) {
      break;
    }
    uint64_t v55 = v19;
    uint64_t v70 = _swiftEmptyArrayStorage;
    sub_10001EDA8(0, v23, 0);
    uint64_t v33 = sub_10002E3C4(v21);
    uint64_t v19 = v34;
    char v36 = v35 & 1;
    uint64_t v66 = v21 + 56;
    while ((v33 & 0x8000000000000000) == 0 && v33 < 1 << *(unsigned char *)(v21 + 32))
    {
      if (((*(void *)(v66 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_19;
      }
      if (*(_DWORD *)(v21 + 36) != v19) {
        goto LABEL_20;
      }
      uint64_t v37 = v67;
      sub_10000E4E8(*(void *)(v21 + 48) + *(void *)(v68 + 72) * v33, v67);
      sub_10000E54C(v37, (uint64_t)v13);
      uint64_t v39 = *v13;
      uint64_t v38 = v13[1];
      swift_bridgeObjectRetain();
      sub_10000E5B0((uint64_t)v13);
      unint64_t v40 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EDA8(0, v40[2] + 1, 1);
        unint64_t v40 = v70;
      }
      unint64_t v42 = v40[2];
      unint64_t v41 = v40[3];
      if (v42 >= v41 >> 1)
      {
        sub_10001EDA8(v41 > 1, v42 + 1, 1);
        unint64_t v40 = v70;
      }
      v40[2] = v42 + 1;
      uint64_t v43 = &v40[2 * v42];
      v43[4] = v39;
      v43[5] = v38;
      uint64_t v21 = v69;
      uint64_t v44 = sub_10002E2DC(v33, v19, v36 & 1, v69);
      uint64_t v33 = v44;
      uint64_t v19 = v45;
      char v36 = v46 & 1;
      if (!--v23)
      {
        sub_10000E60C(v44, v45, v46 & 1);
        uint64_t v19 = v55;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
LABEL_16:
  uint64_t v47 = v59;
  uint64_t v48 = Array.description.getter();
  unint64_t v50 = v49;
  swift_bridgeObjectRelease();
  uint64_t v70 = (void *)sub_10001DF20(v48, v50, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  os_log_t v51 = v60;
  _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v58, "Created new execution group %s with assets %s", v47, 0x16u);
  sub_10000EFA4();
  sub_10000ED7C();
  sub_10000ED7C();

  swift_release();
  swift_release();
LABEL_17:
  sub_10000EFBC();
  v52();
  return v19;
}

uint64_t sub_100009018()
{
  type metadata accessor for UUID();
  sub_10000EFBC();
  v1();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000090FC()
{
  sub_100009018();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100009154()
{
  return _s14ExecutionGroupCMa();
}

uint64_t _s14ExecutionGroupCMa()
{
  uint64_t result = qword_10015B320;
  if (!qword_10015B320) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000091A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AssetInferenceProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwxx()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s14ExecutionGroupC17ManagerOwnedStateVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s14ExecutionGroupC17ManagerOwnedStateVMa()
{
  return &_s14ExecutionGroupC17ManagerOwnedStateVN;
}

uint64_t sub_10000952C()
{
  return sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
}

uint64_t sub_100009574(char a1)
{
  uint64_t result = 0x6C616974696E69;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x726975716361;
      goto LABEL_5;
    case 2:
      uint64_t v3 = 0x747563657865;
      goto LABEL_5;
    case 3:
      uint64_t v3 = 0x7361656C6572;
LABEL_5:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
      break;
    case 4:
      uint64_t result = 1701736292;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100009610()
{
  return sub_100009574(*v0);
}

void sub_100009618()
{
  type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_10000F0C0();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  uint64_t v13 = *(void *)(v12 + 56);
  uint64_t v33 = v12 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v18 = 0;
  uint64_t v19 = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v20 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v18 << 6))
  {
    sub_10000E4E8(*(void *)(v12 + 48) + *(void *)(v2 + 72) * i, (uint64_t)v11);
    sub_10000E54C((uint64_t)v11, v7);
    uint64_t v30 = AssetCost.onDeviceMemory.getter();
    BOOL v31 = __CFADD__(v19, v30);
    v19 += v30;
    if (v31)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    sub_10000E5B0(v7);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_28;
    }
    if (v22 >= v17) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_26;
      }
      sub_10000F044();
      if (!v23)
      {
        int64_t v18 = v24 + 2;
        if (v24 + 2 >= v17) {
          goto LABEL_26;
        }
        sub_10000F044();
        if (!v23)
        {
          int64_t v18 = v25 + 3;
          if (v25 + 3 >= v17) {
            goto LABEL_26;
          }
          sub_10000F044();
          if (!v23)
          {
            int64_t v18 = v26 + 4;
            if (v26 + 4 >= v17) {
              goto LABEL_26;
            }
            sub_10000F044();
            if (!v23) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v23 - 1) & v23;
  }
  int64_t v28 = v27 + 5;
  if (v28 >= v17)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v23 = *(void *)(v33 + 8 * v28);
  if (v23)
  {
    int64_t v18 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v17) {
      goto LABEL_26;
    }
    sub_10000F044();
    int64_t v28 = v29 + 1;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100009858(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_10000EFE0((uint64_t)sub_100009874, a1);
}

uint64_t sub_100009874()
{
  sub_1000086EC();
  uint64_t v2 = sub_10000F1FC();
  if (*v0 <= 1u)
  {
    uint64_t v9 = *((void *)v0 + 1);
    *(void *)(v1 + 56) = v9;
    if (v9)
    {
      swift_retain();
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v1 + 64) = v10;
      uint64_t v5 = sub_100003A70(&qword_10015B468);
      *uint64_t v10 = v1;
      v10[1] = sub_1000099A4;
      uint64_t v4 = &type metadata for Bool;
      uint64_t v6 = &protocol self-conformance witness table for Error;
      uint64_t v2 = v1 + 72;
      uint64_t v3 = v9;
    }
    else
    {
      __break(1u);
    }
    return Task.value.getter(v2, v3, v4, v5, v6);
  }
  else
  {
    sub_10000EF7C();
    return v7();
  }
}

uint64_t sub_1000099A4()
{
  sub_1000086EC();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100009AF4(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_10000EFE0((uint64_t)sub_100009B10, a1);
}

uint64_t sub_100009B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  uint64_t v14 = (void *)sub_10000F1FC();
  if (*(unsigned char *)v12 == 4)
  {
    sub_10000EF7C();
    return v22();
  }
  else
  {
    uint64_t v24 = *(void *)(v12 + 24);
    *(void *)(v13 + 56) = v24;
    if (v24)
    {
      swift_retain();
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v13 + 64) = v14;
      *uint64_t v14 = v13;
      v14[1] = sub_100009C14;
      unint64_t v16 = (char *)&type metadata for () + 8;
      uint64_t v15 = v24;
    }
    else
    {
      __break(1u);
    }
    return Task<>.value.getter(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
  }
}

uint64_t sub_100009C14()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100009D0C()
{
  uint64_t v7 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_100116B0C();
  uint64_t v2 = v1;
  sub_10000E054((uint64_t)&v7);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_100116B0C();
  uint64_t v4 = v3;
  sub_10000E054((uint64_t)&v6);
  sub_100116744(v4);
  return v2;
}

uint64_t sub_100009D84()
{
  uint64_t v0 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v2 = v1;
  __chkstk_darwin(v3, v4);
  sub_10000F0C0();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = sub_100009D0C();
  unint64_t v13 = v12;
  if (v12 >> 62) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v14)
  {
    unint64_t v28 = v13 & 0xC000000000000001;
    unsigned int v26 = enum case for RequestPriority.foreground(_:);
    unint64_t v24 = v13;
    uint64_t v25 = (void (**)(uint64_t, void, uint64_t))(v2 + 104);
    uint64_t v27 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    uint64_t v15 = 4;
    while (1)
    {
      if (v28)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v16 = *(void *)(v13 + 8 * v15);
        swift_retain();
      }
      if (__OFADD__(v15 - 4, 1)) {
        break;
      }
      uint64_t v31 = v15 - 3;
      uint64_t v17 = (os_unfair_lock_s *)(*(void *)(v16 + 64)
                               + ((*(unsigned int *)(**(void **)(v16 + 64) + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v17);
      sub_10011EF8C();
      os_unfair_lock_unlock(v17);
      (*v25)(v7, v26, v0);
      sub_10000EB0C(&qword_10015B4D0, (void (*)(uint64_t))&type metadata accessor for RequestPriority);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v34 == v32 && v35 == v33)
      {
        sub_10000F1F0();
        swift_bridgeObjectRelease_n();
        uint64_t v21 = *v27;
        (*v27)(v7, v0);
        v21((uint64_t)v11, v0);
        swift_release();
        uint64_t v20 = 1;
        goto LABEL_17;
      }
      uint64_t v30 = v16;
      int v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = *v27;
      uint64_t v2 = v7;
      (*v27)(v7, v0);
      v19((uint64_t)v11, v0);
      swift_release();
      if (v29)
      {
        uint64_t v20 = 1;
        goto LABEL_17;
      }
      ++v15;
      unint64_t v13 = v24;
      if (v31 == v14) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain_n();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_14:
  uint64_t v20 = 0;
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v20;
}

uint64_t sub_10000A0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v9, v10);
  sub_10000F0D0();
  uint64_t v11 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v11 - 8, v12);
  sub_10000F0D0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = (unsigned __int8 *)(v4 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
  uint64_t result = swift_beginAccess();
  int v18 = *v16;
  if ((v18 - 1) >= 2)
  {
    if ((v18 - 3) < 2)
    {
      if (qword_10015B080 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100003B18(v19, (uint64_t)qword_10015B2E0);
      swift_retain_n();
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315650;
        uint64_t v54 = v20;
        RequestMetadata.id.getter();
        sub_10000E080();
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v25 = v24;
        sub_10000EFBC();
        v26();
        sub_10001DF20(v23, v25, &v58);
        sub_10000F000();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        type metadata accessor for UUID();
        sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        sub_10001DF20(v27, v28, &v58);
        sub_10000F000();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        uint64_t v29 = sub_100009574(v18);
        sub_10001DF20(v29, v30, &v58);
        sub_10000F000();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v21, "Tried to add request %s to execution group %s in illegal state %s", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
      uint64_t v51 = type metadata accessor for ModelManagerError();
      sub_10000EB0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v51 - 8) + 104))(v52, enum case for ModelManagerError.internalError(_:), v51);
      return swift_willThrow();
    }
    uint64_t result = sub_10000A9D8(a1);
  }
  uint64_t v31 = *((void *)v16 + 1);
  if (v31)
  {
    uint64_t v32 = type metadata accessor for TaskPriority();
    sub_100006960(v15, 1, 1, v32);
    uint64_t v33 = sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
    uint64_t v34 = (void *)swift_allocObject();
    v34[2] = a1;
    void v34[3] = v33;
    v34[4] = a1;
    v34[5] = v31;
    v34[6] = v5;
    v34[7] = a2;
    v34[8] = a3;
    v34[9] = a4;
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v35 = sub_10000F8FC(v15, (uint64_t)&unk_10015B430, (uint64_t)v34);
    unsigned __int8 v56 = *v16;
    uint64_t v36 = *((void *)v16 + 1);
    uint64_t v37 = *((void *)v16 + 2);
    uint64_t v39 = *((void *)v16 + 3);
    uint64_t v38 = *((void *)v16 + 4);
    uint64_t v55 = *((void *)v16 + 5);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v58 = v38;
    uint64_t v53 = v35;
    sub_1000D091C(v35, a2, isUniquelyReferenced_nonNull_native);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    *uint64_t v16 = v56;
    *((void *)v16 + 1) = v36;
    *((void *)v16 + 2) = v37;
    *((void *)v16 + 3) = v39;
    *((void *)v16 + 4) = v38;
    *((void *)v16 + 5) = v55;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    if (qword_10015B080 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100003B18(v41, (uint64_t)qword_10015B2E0);
    swift_retain_n();
    swift_retain_n();
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315394;
      RequestMetadata.id.getter();
      sub_10000E080();
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v47 = v46;
      sub_10000EFBC();
      v48();
      sub_10001DF20(v45, v47, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10000F1F0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_10001DF20(v49, v50, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Added request %s to execution group %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
      swift_release();
    }
    else
    {

      swift_release_n();
      swift_release_n();
      swift_release();
    }
    return v53;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000A9D8(uint64_t a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v3 - 8, v4);
  sub_10000F0D0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = v1 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  sub_10000F1B0();
  *(unsigned char *)uint64_t v8 = 1;
  type metadata accessor for TaskPriority();
  sub_10000EF5C();
  uint64_t v9 = sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = v9;
  v10[4] = a1;
  v10[5] = v1;
  swift_retain_n();
  swift_retain();
  uint64_t v11 = sub_10000F8F0(v7, (uint64_t)&unk_10015B440, (uint64_t)v10);
  sub_10000EF5C();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v9;
  v12[4] = a1;
  v12[5] = v11;
  v12[6] = v1;
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_10000F8FC(v7, (uint64_t)&unk_10015B450, (uint64_t)v12);
  sub_10000EF5C();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  void v14[3] = v9;
  v14[4] = a1;
  v14[5] = v13;
  v14[6] = v1;
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_100003730(v7, (uint64_t)&unk_10015B460, (uint64_t)v14);
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v13;
  *(void *)(v8 + 24) = v15;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10000AC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a8;
  v8[8] = v15;
  v8[5] = a6;
  v8[6] = a7;
  v8[4] = a4;
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  v8[9] = v10;
  v8[10] = *(void *)(v10 - 8);
  v8[11] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v8[12] = v11;
  uint64_t v12 = sub_100003A70(&qword_10015B468);
  *uint64_t v11 = v8;
  v11[1] = sub_10000AD68;
  return ((uint64_t (*)(void *, uint64_t, void *, uint64_t, void *))Task.value.getter)(v8 + 15, a5, &type metadata for Bool, v12, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000AD68()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 104) = v0;
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10000AE58()
{
  uint64_t v16 = v0;
  if (qword_10015B080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015B2E0);
  swift_retain_n();
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = sub_10000EFE8();
    uint64_t v15 = sub_10000EFC8();
    *(_DWORD *)uint64_t v4 = 136315394;
    os_log_type_t type = v3;
    type metadata accessor for UUID();
    sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_10001DF20(v5, v6, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    RequestMetadata.id.getter();
    sub_10000E080();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    sub_10000EFBC();
    v10();
    v0[3] = sub_10001DF20(v7, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "ExecutionGroup %s executing request %s", (uint8_t *)v4, 0x16u);
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
    sub_10000F1F0();
    swift_release_n();
  }

  uint64_t v14 = (uint64_t (*)(void))(v0[7] + *(int *)v0[7]);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10000B198;
  return v14();
}

uint64_t sub_10000B198()
{
  sub_1000086EC();
  sub_10000EDB8();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10000B280()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10000B2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[14] = a1;
  v5[17] = *(void *)(type metadata accessor for ModelCatalogAsset(0) - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_10000B3B0, a4, 0);
}

#error "10000B614: call analysis failed (funcsize=233)"

uint64_t sub_10000B770()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *(void *)(v3 + 56) = v0;
  *(unsigned char *)(v3 + 48) = v5;
  *(void *)(v3 + 40) = v2;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v1 + 120);
  if (v0) {
    uint64_t v7 = sub_10000BBAC;
  }
  else {
    uint64_t v7 = (void (*)())sub_10000B87C;
  }
  return _swift_task_switch(v7, v6, 0);
}

#error "10000BAB0: call analysis failed (funcsize=201)"

void sub_10000BBAC()
{
  uint64_t v41 = v0;
  uint64_t v1 = v0;
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v2, v3))
  {
    swift_release_n();
LABEL_17:

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (void (*)(void))v1[1];
    v33();
    return;
  }
  os_log_type_t v35 = v3;
  uint64_t v4 = v1[16];
  uint64_t v5 = sub_10000EFE8();
  uint64_t v39 = sub_10000EFC8();
  *(_DWORD *)uint64_t v5 = 136315394;
  type metadata accessor for UUID();
  sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
  v1[9] = sub_10001DF20(v6, v7, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v36 = (uint8_t *)v5;
  *(_WORD *)(v5 + 12) = 2080;
  uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
LABEL_16:
    uint64_t v30 = Array.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    v1[8] = sub_10001DF20(v30, v32, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v35, "ExecutionGroup %s failed to acquire assets %s", v36, 0x16u);
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
    goto LABEL_17;
  }
  uint64_t v34 = v2;
  uint64_t v38 = v1;
  uint64_t v37 = v1[18];
  unint64_t v40 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_10000EF20();
  uint64_t v10 = sub_10002E3C4(v8);
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  while ((v10 & 0x8000000000000000) == 0)
  {
    sub_10000EEF0();
    if (v15 == v16) {
      break;
    }
    sub_10000EDA0();
    if ((v17 & 1) == 0) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v8 + 36) != v12) {
      goto LABEL_22;
    }
    uint64_t v19 = (uint64_t *)v38[18];
    uint64_t v18 = v38[19];
    uint64_t v20 = v8;
    sub_10000EEB4(*(void *)(v8 + 48));
    sub_10000E54C(v18, (uint64_t)v19);
    uint64_t v21 = *v19;
    uint64_t v22 = *(void *)(v37 + 8);
    swift_bridgeObjectRetain();
    sub_10000E5B0((uint64_t)v19);
    uint64_t v23 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10001EDA8(0, v23[2] + 1, 1);
      uint64_t v23 = v40;
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1)
    {
      sub_10001EDA8(v24 > 1, v25 + 1, 1);
      uint64_t v23 = v40;
    }
    v23[2] = v25 + 1;
    unsigned int v26 = (char *)&v23[2 * v25];
    *((void *)v26 + 4) = v21;
    *((void *)v26 + 5) = v22;
    uint64_t v8 = v20;
    uint64_t v27 = sub_10002E2DC(v10, v12, v14 & 1, v20);
    uint64_t v10 = v27;
    uint64_t v12 = v28;
    char v14 = v29 & 1;
    if (!--v9)
    {
      sub_10000E60C(v27, v28, v29 & 1);
      swift_bridgeObjectRelease();
      uint64_t v1 = v38;
      uint64_t v2 = v34;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_10000BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a4;
  v6[10] = a6;
  uint64_t v8 = (void *)swift_task_alloc();
  v6[11] = v8;
  uint64_t v9 = sub_100003A70(&qword_10015B468);
  *uint64_t v8 = v6;
  v8[1] = sub_10000C06C;
  return Task.value.getter(v6 + 17, a5, &type metadata for Bool, v9, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000C06C()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *os_log_type_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10000C15C()
{
  sub_10000F13C();
  uint64_t v24 = v1;
  uint64_t v2 = v0[10];
  uint64_t v3 = OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  v0[13] = OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  uint64_t v4 = v2 + v3;
  sub_10000F1B0();
  if (*(void *)(*(void *)(v4 + 32) + 16))
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v7 = v6 + v0[13];
    swift_beginAccess();
    *(void *)(v7 + 40) = *(void *)(v7 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for DaemonRequest();
    sub_100003A70(&qword_10015B470);
    sub_10000EB0C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
    uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v9 = *(void *)(v7 + 40);
    *(void *)(v7 + 32) = v8;
    v0[14] = v9;
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    v10[2] = v9;
    v10[3] = v6;
    v10[4] = v5;
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[16] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10000C50C;
    sub_10000EED0();
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    if (qword_10015B080 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003B18(v13, (uint64_t)qword_10015B2E0);
    swift_retain_n();
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      sub_10000F098();
      uint64_t v16 = swift_slowAlloc();
      sub_10000F1DC(v16, 4.8149e-34);
      sub_10000F068();
      sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v19 = sub_10001DF20(v17, v18, &v25);
      sub_10000F0FC(v19);
      swift_bridgeObjectRelease();
      sub_10000EE7C();
      sub_10000F190((void *)&_mh_execute_header, v20, v21, "Execution group %s finished all executions");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_10000EE7C();
    }

    sub_10000EF00();
    return v22();
  }
}

uint64_t sub_10000C50C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10000C62C, v2, 0);
}

uint64_t sub_10000C62C()
{
  sub_10000F13C();
  uint64_t v21 = v1;
  uint64_t v2 = v0[10];
  uint64_t v3 = v2 + v0[13];
  if (*(void *)(*(void *)(v3 + 32) + 16))
  {
    uint64_t v4 = v0[9];
    swift_beginAccess();
    *(void *)(v3 + 40) = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for DaemonRequest();
    sub_100003A70(&qword_10015B470);
    sub_10000EB0C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
    uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v6 = *(void *)(v3 + 40);
    *(void *)(v3 + 32) = v5;
    v0[14] = v6;
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[15] = v7;
    v7[2] = v6;
    v7[3] = v2;
    v7[4] = v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[16] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10000C50C;
    sub_10000EED0();
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    if (qword_10015B080 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003B18(v10, (uint64_t)qword_10015B2E0);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      sub_10000F098();
      uint64_t v13 = swift_slowAlloc();
      sub_10000F1DC(v13, 4.8149e-34);
      sub_10000F068();
      sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v16 = sub_10001DF20(v14, v15, &v22);
      sub_10000F0FC(v16);
      swift_bridgeObjectRelease();
      sub_10000EE7C();
      sub_10000F190((void *)&_mh_execute_header, v17, v18, "Execution group %s finished all executions");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_10000EE7C();
    }

    sub_10000EF00();
    return v19();
  }
}

uint64_t sub_10000C9C0()
{
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10000C9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  sub_100003A70(&qword_10015B208);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015B490);
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_10000CAE8, a5, 0);
}

uint64_t sub_10000CAE8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v36 = v1 + 64;
  uint64_t v38 = v1;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & v2;
  int64_t v37 = (unint64_t)(63 - v4) >> 6;
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(*(void *)(v38 + 48) + 8 * i);
    uint64_t v19 = *(void *)(*(void *)(v38 + 56) + 8 * i);
    uint64_t v20 = type metadata accessor for TaskPriority();
    sub_100006960(v16, 1, 1, v20);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v19;
    v21[5] = v18;
    sub_10000E7BC(v16, v17);
    LODWORD(v17) = sub_100006AE8(v17, 1, v20);
    swift_retain_n();
    swift_retain_n();
    if (v17 == 1)
    {
      sub_100006B10(*(void *)(v0 + 136));
    }
    else
    {
      TaskPriority.rawValue.getter();
      sub_10000EFBC();
      v22();
    }
    if (v21[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v25 = v24;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v26 = **(void **)(v0 + 104);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = &unk_10015B4A0;
    *(void *)(v27 + 24) = v21;
    type metadata accessor for DaemonRequest();
    uint64_t v28 = v25 | v23;
    if (v25 | v23)
    {
      uint64_t v28 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v23;
      *(void *)(v0 + 40) = v25;
    }
    uint64_t v29 = *(void *)(v0 + 144);
    *(void *)(v0 + 48) = 1;
    *(void *)(v0 + 56) = v28;
    *(void *)(v0 + 64) = v26;
    swift_task_create();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v6 = sub_100006B10(v29);
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return TaskGroup.Iterator.next(isolation:)(v6, v7, v8, v9);
    }
    if (v13 >= v37) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v36 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v37) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v36 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v37) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v36 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 < v37)
  {
    unint64_t v14 = *(void *)(v36 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_33;
        }
        if (v10 >= v37) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v36 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_18;
        }
      }
    }
    int64_t v10 = v15;
    goto LABEL_18;
  }
LABEL_29:
  swift_release();
  *(void *)(v0 + 176) = type metadata accessor for DaemonRequest();
  TaskGroup.makeAsyncIterator()();
  uint64_t v30 = sub_10000EB0C(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v31 = OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  *(void *)(v0 + 184) = v30;
  *(void *)(v0 + 192) = v31;
  sub_10000F1B0();
  uint64_t v32 = *(void *)(v0 + 184);
  uint64_t v33 = *(void *)(v0 + 128);
  uint64_t v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_10000CF60;
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v6 = v0 + 96;
  uint64_t v7 = v33;
  uint64_t v8 = v32;
  return TaskGroup.Iterator.next(isolation:)(v6, v7, v8, v9);
}

uint64_t sub_10000CF60()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000D040, v2, 0);
}

uint64_t sub_10000D040()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    uint64_t v2 = (char *)(v0[15] + v0[24]);
    char v22 = *v2;
    uint64_t v3 = *((void *)v2 + 1);
    uint64_t v4 = *((void *)v2 + 2);
    uint64_t v5 = *((void *)v2 + 3);
    uint64_t v6 = *((void *)v2 + 4);
    uint64_t v7 = *((void *)v2 + 5);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10000F1F0();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    uint64_t v23 = v3;
    swift_retain();
    uint64_t v21 = v4;
    swift_retain();
    sub_10001E6C0(v1);
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v11 = *(void *)(v7 + 24);
      sub_100003A70(&qword_10015B4B8);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
      swift_release();
      sub_100003A70(&qword_10015B470);
      sub_10000EB0C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
      _NativeDictionary._delete(at:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_release();
    uint64_t v14 = v0[24];
    uint64_t v15 = v0[15];
    swift_release();
    uint64_t v16 = v15 + v14;
    *(unsigned char *)uint64_t v16 = v22;
    *(void *)(v16 + 8) = v23;
    *(void *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = v5;
    *(void *)(v16 + 32) = v6;
    *(void *)(v16 + 40) = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v17 = v0[23];
    uint64_t v18 = v0[16];
    uint64_t v19 = (void *)swift_task_alloc();
    v0[25] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10000CF60;
    uint64_t v20 = v0[19];
    return TaskGroup.Iterator.next(isolation:)(v0 + 12, v18, v17, v20);
  }
  else
  {
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v12();
  }
}

uint64_t sub_10000D33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a5;
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  uint64_t v8 = sub_100003A70(&qword_10015B468);
  *uint64_t v7 = v5;
  v7[1] = sub_10000D400;
  return Task.value.getter(v8, a4, (char *)&type metadata for () + 8, v8, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000D400()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_10000ED5C;
  }
  else
  {
    uint64_t v4 = sub_10000D4E8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000D4E8()
{
  sub_1000086EC();
  **(void **)(v0 + 16) = *(void *)(v0 + 24);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v2();
}

uint64_t sub_10000D550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a4;
  v6[5] = a6;
  v6[6] = *(void *)(type metadata accessor for ModelCatalogAsset(0) - 8);
  v6[7] = swift_task_alloc();
  v6[8] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[9] = v8;
  uint64_t v9 = sub_100003A70(&qword_10015B468);
  *uint64_t v8 = v6;
  v8[1] = sub_10000D67C;
  return Task.value.getter(v9, a5, (char *)&type metadata for () + 8, v9, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000D67C()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v7, v8, v9);
}

#error "10000DA0C: call analysis failed (funcsize=249)"

uint64_t sub_10000DB6C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000DC4C, v2, 0);
}

uint64_t sub_10000DC4C()
{
  sub_1000086EC();
  sub_10000DD3C();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10000DCC0()
{
  sub_1000086EC();
  swift_errorRelease();
  sub_10000DD3C();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10000DD3C()
{
  if (qword_10015B080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015B2E0);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_10000F098();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v10[0] = v5;
    type metadata accessor for UUID();
    sub_10000EB0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_10001DF20(v6, v7, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10000F050();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Execution group %s done", v4, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000F050();
  }
  uint64_t v8 = v0 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_10000DF44(v8);
  return swift_endAccess();
}

uint64_t sub_10000DF44(uint64_t a1)
{
  *(unsigned char *)a1 = 4;
  swift_release();
  *(void *)(a1 + 8) = 0;
  swift_release();
  *(void *)(a1 + 16) = 0;
  swift_release();
  *(void *)(a1 + 24) = 0;
  type metadata accessor for DaemonRequest();
  sub_100003A70(&qword_10015B470);
  sub_10000EB0C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v2;
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_10000E054(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000E080()
{
  unint64_t result = qword_10015B418;
  if (!qword_10015B418)
  {
    sub_100006A5C(&qword_10015B408);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015B418);
  }
  return result;
}

uint64_t sub_10000E0D4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10000E134()
{
  sub_10000F13C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  sub_10000EED0();
  return sub_10000AC28(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10000E1FC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_10000E2C0()
{
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_10000B2DC(v3, v4, v5, v6, v7);
}

uint64_t sub_10000E364()
{
  sub_10000F01C();
  sub_10000F1C8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EE94();
  return sub_10000BF9C(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10000E400()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000E450()
{
  sub_10000F01C();
  sub_10000F1C8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EE94();
  return sub_10000D550(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10000E4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E5B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000E60C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000E618()
{
  sub_10000F01C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)sub_1000086AC(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_10000ED54;
  return sub_10000C9DC(v4, v2, v5, v6, v7);
}

uint64_t sub_10000E6D4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000E71C()
{
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  uint64_t v3 = sub_10000EF88();
  return sub_10000D33C(v3, v4, v5, v6, v7);
}

uint64_t sub_10000E7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E824(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10000E904;
  return v5(v2 + 16);
}

uint64_t sub_10000E904()
{
  sub_1000086EC();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t sub_10000EA28()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000EA60()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000086AC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10000ED54;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10015B4A8 + dword_10015B4A8);
  return v7(v2, v3);
}

uint64_t sub_10000EB0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s14ExecutionGroupC17ManagerOwnedStateV5StateOwCP(unsigned char *result, unsigned char *a2)
{
  void *result = *a2;
  return result;
}

uint64_t _s14ExecutionGroupC17ManagerOwnedStateV5StateOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s14ExecutionGroupC17ManagerOwnedStateV5StateOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000ECB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_10000ECE0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000ECEC(unsigned char *result, char a2)
{
  void *result = a2;
  return result;
}

ValueMetadata *_s14ExecutionGroupC17ManagerOwnedStateV5StateOMa()
{
  return &_s14ExecutionGroupC17ManagerOwnedStateV5StateON;
}

unint64_t sub_10000ED08()
{
  unint64_t result = qword_10015B4D8;
  if (!qword_10015B4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015B4D8);
  }
  return result;
}

uint64_t sub_10000ED7C()
{
  return swift_slowDealloc();
}

void sub_10000EDE8()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_10001EDA8(0, v2, 1);
}

uint64_t sub_10000EE0C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EE20()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v10 = v1 + 16 * v7;
  *(void *)(v10 + 32) = v2;
  *(void *)(v10 + 40) = v4;
  return sub_10002E2DC(v8, v6, v5 & 1, v3);
}

uint64_t sub_10000EE50()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000EE7C()
{
  return swift_release_n();
}

uint64_t sub_10000EE94()
{
  return v0;
}

uint64_t sub_10000EEB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = a1 + *(void *)(v1 + 72) * v3;
  return sub_10000E4E8(v5, v2);
}

uint64_t sub_10000EF00()
{
  *(unsigned char *)(*(void *)(v0 + 80) + *(void *)(v0 + 104)) = 3;
  return v0 + 8;
}

void sub_10000EF20()
{
  sub_10001EDA8(0, v0, 0);
}

uint64_t sub_10000EF3C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000EF5C()
{
  return sub_100006960(v0, 1, 1, v1);
}

uint64_t sub_10000EF7C()
{
  return v0 + 8;
}

uint64_t sub_10000EF88()
{
  return v0;
}

uint64_t sub_10000EFA4()
{
  return swift_arrayDestroy();
}

uint64_t sub_10000EFC8()
{
  return swift_slowAlloc();
}

uint64_t sub_10000EFE0(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

uint64_t sub_10000EFE8()
{
  return swift_slowAlloc();
}

uint64_t sub_10000F000()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10000F028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return sub_10001DF20(v9, v10, (uint64_t *)va);
}

uint64_t sub_10000F050()
{
  return swift_release_n();
}

uint64_t sub_10000F068()
{
  return type metadata accessor for UUID();
}

uint64_t sub_10000F098()
{
  return swift_slowAlloc();
}

uint64_t sub_10000F0FC(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_10000F158(char a1)
{
  sub_10001EDA8(a1, v1, 1);
}

uint64_t sub_10000F174()
{
  return swift_bridgeObjectRelease();
}

void sub_10000F190(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10000F1B0()
{
  return swift_beginAccess();
}

uint64_t sub_10000F1DC(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 + 24) = result;
  return result;
}

uint64_t sub_10000F1F0()
{
  return v0;
}

uint64_t sub_10000F1FC()
{
  return swift_beginAccess();
}

void sub_10000F21C(uint64_t a1)
{
  uint64_t v36 = type metadata accessor for Assertion.DaemonRep();
  sub_10000ED60();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_100030158();
  uint64_t v35 = v7;
  sub_100030514();
  __chkstk_darwin(v8, v9);
  uint64_t v34 = (char *)v31 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v31[0] = v1;
    int64_t v37 = &_swiftEmptyArrayStorage;
    sub_10001EDA8(0, v11, 0);
    int64_t v12 = sub_10002E428(a1);
    int v14 = v13;
    char v16 = v15 & 1;
    uint64_t v32 = a1;
    uint64_t v33 = a1 + 56;
    v31[2] = v4 + 32;
    v31[3] = v4 + 16;
    v31[1] = v4 + 8;
    v31[4] = v4;
    while ((v12 & 0x8000000000000000) == 0)
    {
      sub_100030344();
      if (v12 >= v17) {
        break;
      }
      if (((*(void *)(v33 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(a1 + 36) != v14) {
        goto LABEL_16;
      }
      sub_100030274();
      v18();
      sub_100030BD0();
      sub_100030658();
      v19();
      uint64_t v20 = Assertion.DaemonRep.policy.getter();
      uint64_t v22 = v21;
      sub_10000EFBC();
      v23();
      uint64_t v24 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EDA8(0, v24[2] + 1, 1);
        uint64_t v24 = v37;
      }
      unint64_t v26 = v24[2];
      unint64_t v25 = v24[3];
      if (v26 >= v25 >> 1)
      {
        sub_10001EDA8(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v37;
      }
      v24[2] = v26 + 1;
      uint64_t v27 = (char *)&v24[2 * v26];
      *((void *)v27 + 4) = v20;
      *((void *)v27 + 5) = v22;
      a1 = v32;
      int64_t v28 = sub_10002E2E0(v12, v14, v16 & 1, v32);
      int64_t v12 = v28;
      int v14 = v29;
      char v16 = v30 & 1;
      if (!--v11)
      {
        sub_10000E60C(v28, v29, v30 & 1);
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

uint64_t sub_10000F498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v41 = a4;
  uint64_t v7 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  int64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v50 = (char *)&v41 - v14;
  uint64_t v15 = type metadata accessor for Policy();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v49 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 16);
  uint64_t v23 = v16 + 16;
  uint64_t v51 = v25;
  v24((char *)&v41 - v21, a1);
  uint64_t v26 = *(void *)(a2 + 56);
  uint64_t v42 = a2 + 56;
  uint64_t v27 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  uint64_t v45 = v8 + 32;
  uint64_t v46 = v8 + 16;
  unint64_t v47 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v48 = (void (**)(char *, uint64_t))(v23 - 8);
  int64_t v43 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v44 = (uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v52 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  uint64_t v32 = (uint64_t)v49;
  if (!v29) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v33 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  for (unint64_t i = v33 | (v31 << 6); ; unint64_t i = __clz(__rbit64(v36)) + (v31 << 6))
  {
    uint64_t v38 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v50, *(void *)(v52 + 48) + *(void *)(v8 + 72) * i, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v38, v7);
    sub_100019BDC((uint64_t)v22, (uint64_t)v12, v53, v32);
    if (v4)
    {
      (*v47)(v12, v7);
      swift_release();
      (*v48)(v22, v51);
      return swift_release();
    }
    (*v47)(v12, v7);
    uint64_t v39 = v51;
    (*v48)(v22, v51);
    uint64_t result = (*v44)(v22, v32, v39);
    if (v29) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v31++, 1)) {
      break;
    }
    if (v31 >= v43) {
      goto LABEL_26;
    }
    unint64_t v36 = *(void *)(v42 + 8 * v31);
    if (!v36)
    {
      int64_t v37 = v31 + 1;
      if (v31 + 1 >= v43) {
        goto LABEL_26;
      }
      unint64_t v36 = *(void *)(v42 + 8 * v37);
      if (v36) {
        goto LABEL_16;
      }
      int64_t v37 = v31 + 2;
      if (v31 + 2 >= v43) {
        goto LABEL_26;
      }
      unint64_t v36 = *(void *)(v42 + 8 * v37);
      if (v36) {
        goto LABEL_16;
      }
      int64_t v37 = v31 + 3;
      if (v31 + 3 >= v43) {
        goto LABEL_26;
      }
      unint64_t v36 = *(void *)(v42 + 8 * v37);
      if (v36)
      {
LABEL_16:
        int64_t v31 = v37;
        goto LABEL_17;
      }
      int64_t v37 = v31 + 4;
      if (v31 + 4 < v43)
      {
        unint64_t v36 = *(void *)(v42 + 8 * v37);
        if (!v36)
        {
          while (1)
          {
            int64_t v31 = v37 + 1;
            if (__OFADD__(v37, 1)) {
              goto LABEL_29;
            }
            if (v31 >= v43) {
              goto LABEL_26;
            }
            unint64_t v36 = *(void *)(v42 + 8 * v31);
            ++v37;
            if (v36) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_26:
      unint64_t v40 = v41;
      swift_release();
      (*v44)(v40, (uint64_t)v22, v51);
      return swift_release();
    }
LABEL_17:
    unint64_t v29 = (v36 - 1) & v36;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10000F8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F90C(a1, a2, a3);
}

uint64_t sub_10000F8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F90C(a1, a2, a3);
}

uint64_t sub_10000F90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_100006AE8(a1, 1, v5) == 1)
  {
    sub_10002EB50(a1, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_100030BD0();
    sub_10000EFBC();
    v6();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10000FA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F90C(a1, a2, a3);
}

uint64_t sub_10000FA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_100006AE8(a1, 1, v5) == 1)
  {
    sub_10002EB50(a1, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  sub_100003A70(&qword_10015B938);
  return swift_task_create();
}

uint64_t sub_10000FB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_100006AE8(a1, 1, v5) == 1)
  {
    sub_10002EB50(a1, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_10000EFBC();
    v6();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  return swift_task_create();
}

uint64_t sub_10000FCDC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015B4E0);
  sub_100003B18(v0, (uint64_t)qword_10015B4E0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10000FD50()
{
  sub_100008130(v0 + 112);
  sub_100008130(v0 + 152);
  swift_release();
  sub_100008130(v0 + 200);
  sub_100008130(v0 + 240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for Policy();
  sub_10002FB84();
  sub_10000EFBC();
  v1();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10000FE08()
{
  sub_10000FD50();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10000FE34()
{
  return type metadata accessor for PolicyManager();
}

uint64_t type metadata accessor for PolicyManager()
{
  uint64_t result = qword_10015B520;
  if (!qword_10015B520) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000FE84()
{
  uint64_t result = type metadata accessor for Policy();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000FF54(uint64_t a1)
{
  uint64_t result = sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t InferenceProviderManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10000FFB8()
{
  return InferenceProviderManager.unownedExecutor.getter();
}

uint64_t sub_10000FFD4()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B728);
  sub_10002FA4C(v4);
  v0[6] = v5;
  v0[7] = *(void *)(v6 + 64);
  v0[8] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100010068()
{
  sub_100030AFC();
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[2];
  sub_10002E894(v0[4], v1);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[9] = v9;
  sub_10002EAF8(v1, v9 + v7, &qword_10015B728);
  *(void *)(v9 + v8) = v3;
  uint64_t v10 = (void *)(v9 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v10 = v6;
  v10[1] = v5;
  sub_100030AE8();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[10] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000101B8;
  return v13();
}

uint64_t sub_1000101B8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000102B0()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100010308()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep();
  v1[4] = v3;
  sub_10002FA4C(v3);
  v1[5] = v4;
  v1[6] = *(void *)(v5 + 64);
  v1[7] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10001039C()
{
  sub_10002FC60();
  uint64_t v2 = sub_1000301A0();
  v3(v2);
  uint64_t v4 = swift_allocObject();
  *(void *)(v1 + 64) = v4;
  *(void *)(v4 + 16) = v0;
  uint64_t v5 = sub_100030594(v4);
  v6(v5);
  uint64_t v11 = (uint64_t (*)(void))((char *)&dword_10015B790 + dword_10015B790);
  swift_retain();
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_1000305B0(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_1000104AC;
  return v11();
}

uint64_t sub_1000104AC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    uint64_t v8 = sub_1000105F8;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 24);
    swift_release();
    uint64_t v8 = sub_1000105A0;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1000105A0()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000105F8()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10003090C();
  return v0();
}

uint64_t sub_100010658()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B228);
  v1[4] = v3;
  sub_10002FA4C(v3);
  v1[5] = v4;
  v1[6] = *(void *)(v5 + 64);
  v1[7] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000106F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v14 = sub_1000301A0();
  v15(v14);
  unint64_t v16 = (v12 + ((*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v11 + 64) = v17;
  uint64_t v18 = sub_100030594(v17);
  v19(v18);
  *(void *)(v17 + v16) = v10;
  uint64_t v32 = (char *)&dword_10015B6D0 + dword_10015B6D0;
  swift_retain();
  uint64_t v20 = swift_task_alloc();
  uint64_t v21 = (void *)sub_1000305B0(v20);
  *uint64_t v21 = v22;
  v21[1] = sub_100010800;
  sub_10002FEAC();
  return v23(v23, v24, v25, v26, v27, v28, v29, v30, v32, a10);
}

uint64_t sub_100010800()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000108F8()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100010950()
{
  *(void *)(v1 + 96) = v0;
  return sub_10000EFE0((uint64_t)sub_10001096C, v0);
}

uint64_t sub_10001096C()
{
  sub_1000086EC();
  sub_10000853C((void *)(v0[12] + 112), *(void *)(v0[12] + 136));
  if (qword_10015B1E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for FilePath();
  v0[13] = v1;
  v0[14] = sub_100003B18(v1, (uint64_t)qword_1001602F8);
  uint64_t v2 = (void *)sub_100030A40();
  v0[15] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100010A64;
  uint64_t v3 = sub_10003069C();
  return v5(v3);
}

uint64_t sub_100010A64()
{
  sub_10000F01C();
  sub_10002FF54();
  uint64_t v6 = v5;
  sub_1000086D0();
  *uint64_t v7 = v6;
  *uint64_t v7 = *v2;
  v6[16] = v1;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v4 + 96);
  if (v1)
  {
    uint64_t v9 = sub_100010EF8;
  }
  else
  {
    v6[17] = v0;
    v6[18] = v3;
    uint64_t v9 = sub_100010B6C;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100010B6C()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[12];
  *(void *)(v2 + 280) = v0[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v2 + 304) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (os_variant_has_internal_content())
  {
    sub_10000853C((void *)(v0[12] + 112), *(void *)(v0[12] + 136));
    if (qword_10015B1E8 != -1) {
      swift_once();
    }
    v0[19] = sub_100003B18(v0[13], (uint64_t)qword_100160310);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[20] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100010D00;
    sub_10003069C();
    sub_10002FE64();
  }
  else
  {
    sub_100012044();
    sub_10000EF7C();
    sub_10002FE64();
  }
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100010D00()
{
  sub_10000F01C();
  sub_10002FF54();
  uint64_t v6 = v5;
  sub_1000086D0();
  *uint64_t v7 = v6;
  *uint64_t v7 = *v2;
  v6[21] = v1;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v4 + 96);
  if (v1)
  {
    uint64_t v9 = sub_100011220;
  }
  else
  {
    v6[22] = v0;
    v6[23] = v3;
    uint64_t v9 = sub_100010E08;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100010E08()
{
  sub_10002FC60();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 280);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  *(void *)(v1 + 280) = sub_100011F70(v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_100030BD0();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100116944();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100012044();
  sub_10000EF7C();
  return v4();
}

uint64_t sub_100010EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  if (qword_10015B088 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003B18(v25, (uint64_t)qword_10015B4E0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    a9 = v22 + 11;
    a10 = v22 + 10;
    uint64_t v28 = (_DWORD *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    a11 = sub_10002FF90();
    *uint64_t v28 = 136315394;
    sub_10002F90C(&qword_10015BA50, (void (*)(uint64_t))&type metadata accessor for FilePath);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v22[10] = sub_10001DF20(v30, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100030C74();
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
    v22[11] = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v32;
    swift_errorRelease();
    swift_errorRelease();
    sub_100030B80((void *)&_mh_execute_header, v33, v34, "Failed to load policy file %s: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100030B28();
    sub_10000ED7C();
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  if (os_variant_has_internal_content())
  {
    sub_10000853C((void *)(v22[12] + 112), *(void *)(v22[12] + 136));
    if (qword_10015B1E8 != -1) {
      swift_once();
    }
    v22[19] = sub_100003B18(v22[13], (uint64_t)qword_100160310);
    uint64_t v35 = (void *)sub_100030A40();
    v22[20] = v35;
    *uint64_t v35 = v22;
    v35[1] = sub_100010D00;
    sub_10003069C();
    sub_10002FE48();
  }
  else
  {
    sub_100012044();
    sub_10000EF7C();
    sub_10002FE48();
  }
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100011220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  if (qword_10015B088 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003B18(v25, (uint64_t)qword_10015B4E0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    a9 = v22 + 72;
    a10 = v22 + 64;
    uint64_t v28 = (_DWORD *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    a11 = sub_10002FF90();
    *uint64_t v28 = 136315394;
    sub_10002F90C(&qword_10015BA50, (void (*)(uint64_t))&type metadata accessor for FilePath);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v22 + 64) = sub_10001DF20(v30, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100030C74();
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v22 + 72) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v32;
    swift_errorRelease();
    swift_errorRelease();
    sub_100030B80((void *)&_mh_execute_header, v33, v34, "Failed to load policy file %s: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100030B28();
    sub_10000ED7C();
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100012044();
  sub_10000EF7C();
  sub_10002FE48();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100011474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100003A70(&qword_10015B858);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (void *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void *)(a2 + 280);
  uint64_t v28 = a1;
  swift_bridgeObjectRetain();
  sub_10001177C((uint64_t (*)(char *))sub_10002FA2C, v11, (uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100003A70(&qword_10015B830);
  uint64_t result = sub_100006AE8((uint64_t)v10, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = *v10;
    unint64_t v14 = v10[1];
    unint64_t v16 = (char *)v10 + *(int *)(v12 + 48);
    uint64_t v17 = type metadata accessor for Policy();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100003B18(v19, (uint64_t)qword_10015B4E0);
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v27 = a1;
      uint64_t v22 = swift_slowAlloc();
      v25[1] = v3;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v26 = a3;
      uint64_t v30 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_10001DF20(v15, v14, &v30);
      a1 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Internal policy file contains policy with same name as existing policy: %s", v23, 0xCu);
      swift_arrayDestroy();
      a3 = v26;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a3, a1, v17);
  }
  return result;
}

uint64_t sub_10001177C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v31 = a3;
  uint64_t v35 = sub_100003A70(&qword_10015B830);
  uint64_t v6 = __chkstk_darwin(v35, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v30 - v10;
  sub_10002E2A4(a2, v37);
  uint64_t v36 = v37[0];
  int64_t v38 = v37[3];
  unint64_t v12 = v37[4];
  uint64_t v32 = v37[1];
  int64_t v33 = (unint64_t)(v37[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  unint64_t v15 = v14 | (v38 << 6);
  while (1)
  {
    uint64_t v19 = *(void *)(v36 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = type metadata accessor for Policy();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(&v11[*(int *)(v35 + 48)], v19 + *(void *)(*(void *)(v23 - 8) + 72) * v15, v23);
    *(void *)uint64_t v11 = v21;
    *((void *)v11 + 1) = v22;
    sub_10002EAF8((uint64_t)v11, (uint64_t)v8, &qword_10015B830);
    swift_bridgeObjectRetain();
    char v24 = v34(v8);
    if (v3)
    {
      sub_10002EB50((uint64_t)v8, &qword_10015B830);
      return swift_release();
    }
    if (v24)
    {
      swift_release();
      uint64_t v26 = v31;
      sub_10002EAF8((uint64_t)v8, v31, &qword_10015B830);
      uint64_t v27 = v26;
      uint64_t v28 = 0;
      return sub_100006960(v27, v28, 1, v35);
    }
    uint64_t result = sub_10002EB50((uint64_t)v8, &qword_10015B830);
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v32 + 8 * v16);
    if (!v17)
    {
      int64_t v18 = v38 + 2;
      if (v38 + 2 >= v33) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v18);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v18 = v38 + 3;
      if (v38 + 3 >= v33) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v18);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v18 = v38 + 4;
      if (v38 + 4 >= v33) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v32 + 8 * v18);
      if (v17)
      {
LABEL_12:
        int64_t v16 = v18;
      }
      else
      {
        int64_t v16 = v38 + 5;
        if (v38 + 5 >= v33) {
          goto LABEL_26;
        }
        unint64_t v17 = *(void *)(v32 + 8 * v16);
        if (!v17)
        {
          int64_t v25 = v38 + 6;
          while (v25 < v33)
          {
            unint64_t v17 = *(void *)(v32 + 8 * v25++);
            if (v17)
            {
              int64_t v16 = v25 - 1;
              goto LABEL_13;
            }
          }
LABEL_26:
          uint64_t v29 = v31;
          swift_release();
          uint64_t v27 = v29;
          uint64_t v28 = 1;
          return sub_100006960(v27, v28, 1, v35);
        }
      }
    }
LABEL_13:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v38 = v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100011A98(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_100011B50(a1, a2, a3, (void (*)(void))type metadata accessor for InferenceProviderAsset, &qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
}

uint64_t sub_100011AF4(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_100011B50(a1, a2, a3, (void (*)(void))type metadata accessor for DaemonSession, &qword_10015BA40, (void (*)(uint64_t))type metadata accessor for DaemonSession);
}

uint64_t sub_100011B50(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v8 = v6;
  uint64_t v9 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = a5;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    a4(0);
    sub_10002F90C(v7, a6);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v9 = v38;
    uint64_t v37 = v39;
    uint64_t v14 = v40;
    int64_t v15 = v41;
    unint64_t v16 = v42;
  }
  else
  {
    sub_1000304C4();
    uint64_t v37 = v9 + 56;
    uint64_t v18 = ~v17;
    sub_100030BDC();
    unint64_t v16 = v19 & v20;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v14 = v18;
    int64_t v15 = 0;
  }
  int64_t v36 = (unint64_t)(v14 + 64) >> 6;
  if (v9 < 0) {
    goto LABEL_7;
  }
LABEL_5:
  if (v16)
  {
    uint64_t v7 = (unint64_t *)((v16 - 1) & v16);
    unint64_t v21 = __clz(__rbit64(v16)) | (v15 << 6);
    int64_t v22 = v15;
    goto LABEL_24;
  }
  int64_t v22 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v22 >= v36) {
      goto LABEL_37;
    }
    if (!*(void *)(v37 + 8 * v22))
    {
      sub_100030BAC();
      if (v24 == v25) {
        goto LABEL_37;
      }
      sub_100030BA0();
      if (v27) {
        goto LABEL_22;
      }
      sub_100030BAC();
      if (v24 == v25) {
        goto LABEL_37;
      }
      sub_100030BA0();
      if (v28) {
        goto LABEL_22;
      }
      sub_100030BAC();
      if (v24 == v25) {
        goto LABEL_37;
      }
      sub_100030BA0();
      if (v29)
      {
LABEL_22:
        int64_t v22 = v26;
      }
      else
      {
        int64_t v22 = v15 + 5;
        if (v15 + 5 >= v36) {
          goto LABEL_37;
        }
        if (!*(void *)(v37 + 8 * v22))
        {
          while (1)
          {
            sub_100030BAC();
            if (v24 == v25) {
              goto LABEL_37;
            }
            sub_100030BA0();
            uint64_t v33 = v32 + 1;
            if (v34)
            {
              int64_t v22 = v33 - 1;
              break;
            }
          }
        }
      }
    }
    sub_100030B6C();
    unint64_t v21 = v30 + (v22 << 6);
LABEL_24:
    uint64_t v23 = *(void *)(*(void *)(v9 + 48) + 8 * v21);
    swift_retain();
    if (v23)
    {
      while (1)
      {
        uint64_t v43 = v23;
        char v31 = a1(&v43);
        if (v8) {
          break;
        }
        if (v31) {
          goto LABEL_36;
        }
        uint64_t result = swift_release();
        int64_t v15 = v22;
        unint64_t v16 = (unint64_t)v7;
        if ((v9 & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
LABEL_7:
        if (__CocoaSet.Iterator.next()())
        {
          a4(0);
          sub_100030BB8();
          swift_dynamicCast();
          uint64_t v23 = v43;
          swift_unknownObjectRelease();
          int64_t v22 = v15;
          uint64_t v7 = (unint64_t *)v16;
          if (v23) {
            continue;
          }
        }
        goto LABEL_37;
      }
      swift_release();
LABEL_36:
      sub_10002EAF0();
      return v23;
    }
LABEL_37:
    sub_10002EAF0();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100011E40(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  return sub_100011B50(a1, a2, a3, (void (*)(void))type metadata accessor for DaemonRequest, &qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
}

uint64_t sub_100011E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = a2;
  sub_10001FC34(a1, (uint64_t)sub_10001FBD0, 0, isUniquelyReferenced_nonNull_native, &v10, a3, (uint64_t)&_swift_bridgeObjectRelease, (void (*)(uint64_t, char *, uint64_t))sub_10001915C);
  uint64_t v8 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_100011F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = a2;
  sub_10001FC34(a1, (uint64_t)sub_10001FBD0, 0, isUniquelyReferenced_nonNull_native, &v10, a3, (uint64_t)&_swift_release, (void (*)(uint64_t, char *, uint64_t))sub_100011474);
  uint64_t v8 = v10;
  swift_bridgeObjectRelease();
  swift_release();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_100012044()
{
  uint64_t v1 = *(void *)(v0 + 280);
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = swift_bridgeObjectRetain();
  *(void *)(v0 + 296) = sub_100011E9C(v2, v1, v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000120C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  sub_100003A70(&qword_10015B728);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_10001215C, a3, 0);
}

uint64_t sub_10001215C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  uint64_t v25 = v22[7];
  uint64_t v26 = type metadata accessor for Policy();
  if (sub_100006AE8(v25, 1, v26) == 1)
  {
    uint64_t v28 = v22[9];
    uint64_t v27 = v22[10];
    uint64_t v29 = swift_bridgeObjectRetain();
    sub_10000F21C(v29);
    char v31 = v30;
    swift_bridgeObjectRelease();
    char v32 = sub_1000123E4(v28, v27, v31);
    swift_bridgeObjectRelease();
    if (v32)
    {
      if (qword_10015B088 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_100003B18(v33, (uint64_t)qword_10015B4E0);
      swift_bridgeObjectRetain_n();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.fault.getter();
      BOOL v36 = os_log_type_enabled(v34, v35);
      unint64_t v37 = v22[10];
      if (v36)
      {
        a9 = v22 + 6;
        uint64_t v38 = v22[9];
        uint64_t v39 = (uint8_t *)sub_100030314();
        a10 = sub_10002FF90();
        *(_DWORD *)uint64_t v39 = 136315138;
        swift_bridgeObjectRetain();
        v22[6] = sub_10001DF20(v38, v37, &a10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Removed trial policy %s while it was still in use by an assertion", v39, 0xCu);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
  }
  uint64_t v40 = v22[10];
  uint64_t v41 = v22[11];
  uint64_t v42 = v22[9];
  sub_10002E894(v22[7], v41);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1000D939C(v41, v42, v40);
  swift_endAccess();
  sub_100012044();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000123E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000124AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_100003A70(&qword_10015B208);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_100012544, v3, 0);
}

uint64_t sub_100012544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10003042C(*(void *)(*(void *)(v12 + 40) + 312));
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  uint64_t v13 = (void *)sub_100030228();
  sub_10002FBF0(v13);
  sub_10002FC78();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 64) = sub_100030890(v14, (uint64_t)&unk_10015B6E0);
  sub_10002FAF0();
  int64_t v15 = (void *)sub_100030210();
  sub_10002FBA8(v15);
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003045C(v16, (uint64_t)&unk_10015B6F0);
  sub_10002FED4(v17);
  swift_release();
  sub_100030204();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 24) = v27;
    uint64_t v29 = swift_task_alloc();
    uint64_t v30 = (void *)sub_1000305B0(v29);
    *uint64_t v30 = v31;
    v30[1] = sub_1000126D0;
    sub_1000301F4();
    sub_10002FE94();
  }
  return Task<>.value.getter(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_1000126D0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_1000127AC()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    v2();
  }
}

uint64_t sub_100012824()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  *(void *)(v0 + 48) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000128A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10003042C(*(void *)(*(void *)(v12 + 40) + 192));
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B868, (void (*)(uint64_t))type metadata accessor for TrialManager);
  uint64_t v13 = (void *)sub_100030228();
  sub_10002FBF0(v13);
  sub_10002FC78();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 64) = sub_100030890(v14, (uint64_t)&unk_10015B878);
  sub_10002FAF0();
  int64_t v15 = (void *)sub_100030210();
  sub_10002FBA8(v15);
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003045C(v16, (uint64_t)&unk_10015B888);
  sub_10002FED4(v17);
  swift_release();
  sub_100030204();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 24) = v27;
    uint64_t v29 = swift_task_alloc();
    uint64_t v30 = (void *)sub_1000305B0(v29);
    *uint64_t v30 = v31;
    v30[1] = sub_100012A30;
    sub_1000301F4();
    sub_10002FE94();
  }
  return Task<>.value.getter(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_100012A30()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100012B0C()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    v2();
  }
}

uint64_t sub_100012B84()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  v1[5] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100012C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10002FEF0();
  sub_10002FC60();
  uint64_t v14 = v12[5];
  v12[6] = *(void *)(*(void *)(v12[4] + 112) + 16);
  type metadata accessor for TaskPriority();
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  int64_t v15 = (void *)sub_100030228();
  sub_10002FBF0(v15);
  sub_10002FC78();
  swift_retain();
  v12[7] = sub_100003784(v14, (uint64_t)&unk_10015B958, v13);
  sub_10002FAF0();
  uint64_t v16 = (void *)sub_100030210();
  sub_10002FBA8(v16);
  swift_retain();
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_10003045C(v17, (uint64_t)&unk_10015B968);
  sub_10002FED4(v18);
  swift_release();
  sub_100030204();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v27 + 24) = v28;
    uint64_t v30 = swift_task_alloc();
    uint64_t v31 = (void *)sub_10002FB1C(v30);
    *uint64_t v31 = v32;
    v31[1] = sub_100012DAC;
    sub_10002FE94();
  }
  return Task<>.value.getter(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t sub_100012DAC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100012E88()
{
  sub_1000086E0();
  sub_100030008();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 24) = v2;
    swift_release();
    swift_release();
    uint64_t v4 = *(unsigned __int8 *)(v0 + 72);
    swift_task_dealloc();
    uint64_t v5 = *(void (**)(uint64_t))(v0 + 8);
    v5(v4);
  }
}

uint64_t sub_100012F18()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  *(void *)(v0 + 48) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100012F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_1000307E4();
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v13 = (void *)sub_100030228();
  sub_100030608(v13);
  sub_10002FC78();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 72) = sub_100030890(v14, (uint64_t)&unk_10015BA18);
  sub_10002FAF0();
  int64_t v15 = (void *)sub_100030210();
  sub_10002FBA8(v15);
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003045C(v16, (uint64_t)&unk_10015BA28);
  sub_10002FED4(v17);
  swift_release();
  sub_100030204();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 24) = v27;
    char v29 = (void *)swift_task_alloc();
    *(void *)(v12 + 80) = v29;
    *char v29 = v12;
    v29[1] = sub_100013130;
    sub_1000301F4();
    sub_1000307C8();
  }
  return Task<>.value.getter(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_100013130()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001320C()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  *(void *)(v0 + 48) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10001328C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10003042C(*(void *)(*(void *)(v12 + 40) + 112));
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  uint64_t v13 = (void *)sub_100030228();
  sub_10002FBF0(v13);
  sub_10002FC78();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 64) = sub_100030890(v14, (uint64_t)&unk_10015B8F0);
  sub_10002FAF0();
  int64_t v15 = (void *)sub_100030210();
  sub_10002FBA8(v15);
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003045C(v16, (uint64_t)&unk_10015B900);
  sub_10002FED4(v17);
  swift_release();
  sub_100030204();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 24) = v27;
    uint64_t v29 = swift_task_alloc();
    uint64_t v30 = (void *)sub_1000305B0(v29);
    *uint64_t v30 = v31;
    v30[1] = sub_100013418;
    sub_1000301F4();
    sub_10002FE94();
  }
  return Task<>.value.getter(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_100013418()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_1000134F4()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    v2();
  }
}

uint64_t sub_10001356C()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  *(void *)(v0 + 48) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000135EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_1000307E4();
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B898, (void (*)(uint64_t))type metadata accessor for RunningBoardProvider);
  uint64_t v13 = (void *)sub_100030228();
  sub_100030608(v13);
  sub_10002FC78();
  uint64_t v14 = swift_retain();
  *(void *)(v12 + 72) = sub_100030890(v14, (uint64_t)&unk_10015B8A8);
  sub_10002FAF0();
  int64_t v15 = (void *)sub_100030210();
  sub_10002FBA8(v15);
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003045C(v16, (uint64_t)&unk_10015B8B8);
  sub_10002FED4(v17);
  swift_release();
  sub_100030204();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 24) = v27;
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v12 + 80) = v29;
    *uint64_t v29 = v12;
    v29[1] = sub_100013784;
    sub_1000301F4();
    sub_1000307C8();
  }
  return Task<>.value.getter(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_100013784()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100013860()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_1000307AC(v0);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    v2();
  }
}

uint64_t sub_1000138DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  sub_100003A70(&qword_10015B728);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000139F8, a2, 0);
}

uint64_t sub_1000139F8()
{
  uint64_t v54 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[13];
  uint64_t v3 = Assertion.DaemonRep.policy.getter();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v1 + 296);
  swift_bridgeObjectRetain();
  sub_1000142D8(v3, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for Policy();
  LODWORD(v3) = sub_100006AE8(v2, 1, v7);
  sub_10002EB50(v2, &qword_10015B728);
  if (v3 == 1)
  {
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v11 = v0[6];
    uint64_t v10 = v0[7];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003B18(v12, (uint64_t)qword_10015B4E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      int64_t v15 = (uint8_t *)sub_100030314();
      v53[0] = sub_10002FF90();
      *(_DWORD *)int64_t v15 = 136315138;
      uint64_t v16 = Assertion.DaemonRep.policy.getter();
      v0[2] = sub_10001DF20(v16, v17, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000303D4();
      v18();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to acquire assertion: Policy %s does not exist", v15, 0xCu);
      sub_100030B28();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    }

    type metadata accessor for ModelManagerError();
    sub_10002F90C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    uint64_t v31 = v30;
    *uint64_t v30 = Assertion.DaemonRep.policy.getter();
    v31[1] = v32;
    sub_10002FC6C();
    (*(void (**)(uint64_t *))(v33 + 104))(v31);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  sub_100044B38();
  char v20 = v19;
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v21 = v0[8];
    uint64_t v22 = type metadata accessor for Logger();
    sub_100003B18(v22, (uint64_t)qword_10015B4E0);
    uint64_t v23 = *(void (**)(void))(v21 + 16);
    sub_1000303C8();
    v23();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)sub_100030314();
      v53[0] = sub_10002FF90();
      *(_DWORD *)uint64_t v26 = 136315138;
      sub_1000303C8();
      v23();
      uint64_t v27 = String.init<A>(describing:)();
      v0[4] = sub_10001DF20(v27, v28, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10003056C();
      v29();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to acquire assetion: redundant assertion ID: %s", v26, 0xCu);
      sub_100030C24();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(v0[8] + 8))(v0[10], v0[7]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
LABEL_19:
    sub_1000306EC();
    __asm { BRAA            X1, X16 }
  }
  if (qword_10015B088 != -1) {
    swift_once();
  }
  uint64_t v34 = v0[6];
  uint64_t v35 = type metadata accessor for Logger();
  sub_100003B18(v35, (uint64_t)qword_10015B4E0);
  sub_1000303C8();
  v36();
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (sub_1000306C4(v38))
  {
    uint64_t v39 = (uint8_t *)sub_100030314();
    v53[0] = sub_10002FF90();
    *(_DWORD *)uint64_t v39 = 136315138;
    sub_1000303C8();
    v40();
    uint64_t v41 = String.init<A>(describing:)();
    v0[3] = sub_10001DF20(v41, v42, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000303D4();
    v43();
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v34, "Acquiring assertion: %s", v39, 0xCu);
    sub_100030C24();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    (*(void (**)(void, void))(v0[8] + 8))(v0[12], v0[7]);
  }

  sub_100003A70(&qword_10015B7B8);
  uint64_t v46 = (__n128 *)sub_100030544();
  sub_100030A0C(v46, (__n128)xmmword_100128650);
  sub_1000303C8();
  v47();
  sub_100003B98((uint64_t)v46);
  v0[14] = v48;
  uint64_t v49 = (void *)swift_task_alloc();
  v0[15] = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_10001416C;
  sub_10003069C();
  sub_1000306EC();
  return sub_10001460C(v50);
}

uint64_t sub_10001416C()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FB6C();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100030A00();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100030808();
  sub_10002FE64();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000142D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10001E648(a1, a2), (v3 & 1) != 0))
  {
    sub_1000308D0();
    type metadata accessor for Policy();
    sub_10002FB84();
    sub_100030274();
    v4();
    uint64_t v5 = sub_100030448();
  }
  else
  {
    type metadata accessor for Policy();
    uint64_t v5 = sub_100030370();
  }

  return sub_100006960(v5, v6, v7, v8);
}

uint64_t sub_100014370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_10001E648(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_retain();
  return v6;
}

double sub_1000143C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10001E648(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 40 * v6;
    sub_100008334(v8, a4);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100014434(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10001E748(a1, &qword_10015B408, &qword_10015B9B0), (v2 & 1) != 0))
  {
    sub_1000308D0();
    type metadata accessor for RequestPriority();
    sub_10002FB84();
    sub_100030274();
    v3();
    uint64_t v4 = sub_100030448();
  }
  else
  {
    type metadata accessor for RequestPriority();
    uint64_t v4 = sub_100030370();
  }

  return sub_100006960(v4, v5, v6, v7);
}

uint64_t sub_1000144E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10001E648(a1, a2), (v3 & 1) != 0))
  {
    uint64_t v4 = sub_1000308D0();
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(v4);
    sub_10002FB84();
    sub_10002F814();
    uint64_t v5 = sub_100030448();
  }
  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    uint64_t v5 = sub_100030370();
  }

  return sub_100006960(v5, v6, v7, v8);
}

uint64_t sub_100014580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_10001E648(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000145C8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10001E7EC(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10001460C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000EFE0((uint64_t)sub_100014628, v1);
}

uint64_t sub_100014628()
{
  sub_1000086EC();
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 320);
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000182C8(v3, v2);
  v0[4] = v4;
  uint64_t v5 = *(void *)(v1 + 320);
  swift_bridgeObjectRetain();
  LOBYTE(v1) = sub_10001A228(v4, v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_10000EF7C();
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[5] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100014748;
    return sub_100018788();
  }
}

uint64_t sub_100014748()
{
  sub_1000086E0();
  sub_10002FB6C();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100030A00();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100014824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_100003A70(&qword_10015B208);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000148BC, v3, 0);
}

uint64_t sub_1000148BC()
{
  sub_10002FEF0();
  sub_10002FC60();
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void *)(*(void *)(v2 + 312) + 16);
  v0[7] = v5;
  type metadata accessor for TaskPriority();
  sub_100030110();
  uint64_t v6 = sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  uint64_t v7 = (void *)sub_100030228();
  v7[2] = v2;
  v7[3] = v6;
  v7[4] = v2;
  v7[5] = v5;
  v7[6] = v4;
  v7[7] = v3;
  swift_retain_n();
  sub_10002FC78();
  swift_retain();
  uint64_t v8 = sub_10000F90C(v1, (uint64_t)&unk_10015B7A0, (uint64_t)v7);
  v0[8] = v8;
  uint64_t v9 = *(void *)(v2 + 312);
  sub_100030110();
  uint64_t v10 = (void *)sub_100030210();
  v10[2] = v2;
  uint64_t v10[3] = v6;
  v10[4] = v2;
  v10[5] = v8;
  sub_10002FC78();
  swift_retain();
  swift_retain();
  *(void *)(v9 + 16) = sub_100003730(v1, (uint64_t)&unk_10015B7B0, (uint64_t)v10);
  swift_release();
  swift_release();
  sub_100030204();
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v16 + 24) = v17;
    char v19 = (void *)swift_task_alloc();
    v0[9] = v19;
    sub_100003A70(&qword_10015B468);
    sub_100030AC8();
    *char v19 = v20;
    v19[1] = sub_100014AB8;
    sub_1000308E0();
    sub_10002FE94();
  }
  return Task.value.getter(v11, v12, v13, v14, v15);
}

uint64_t sub_100014AB8()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

void sub_100014BB0()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_1000304E0();
    v2();
  }
}

void sub_100014C28()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_10003090C();
    v2();
  }
}

uint64_t sub_100014CA0()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  v1[6] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100014D24()
{
  sub_10002FEF0();
  sub_10002FC60();
  uint64_t v2 = v0[6];
  sub_10003042C(*(void *)(v0[5] + 112));
  sub_10002FAF0();
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  uint64_t v3 = (void *)sub_100030228();
  sub_10002FBF0(v3);
  sub_10002FC78();
  swift_retain();
  v0[8] = sub_10000FA50(v2, (uint64_t)&unk_10015B920, v1);
  sub_10002FAF0();
  uint64_t v4 = (void *)sub_100030210();
  sub_10002FBA8(v4);
  swift_retain();
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_10003045C(v5, (uint64_t)&unk_10015B930);
  sub_10002FED4(v6);
  swift_release();
  sub_100030204();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v12 + 24) = v13;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[9] = v15;
    sub_100003A70(&qword_10015B938);
    sub_100003A70(&qword_10015B468);
    *uint64_t v15 = v0;
    v15[1] = sub_100014EE8;
    sub_10002FE94();
  }
  return Task.value.getter(v7, v8, v9, v10, v11);
}

uint64_t sub_100014EE8()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

void sub_100014FE0()
{
  sub_1000086E0();
  sub_100030008();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v1);
    swift_release();
    uint64_t v3 = *(void *)(v0 + 16);
    swift_task_dealloc();
    uint64_t v4 = *(void (**)(uint64_t))(v0 + 8);
    v4(v3);
  }
}

void sub_100015068()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10002FE78(v0);
    swift_release();
    swift_task_dealloc();
    sub_10003090C();
    v2();
  }
}

uint64_t sub_1000150E0()
{
  sub_1000086E0();
  sub_1000305FC(v1, v2, v3);
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  *(void *)(v0 + 48) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100015160()
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  v0[7] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  uint64_t v6 = *(void *)(*(void *)(v2 + v5) + 16);
  v0[8] = v6;
  type metadata accessor for TaskPriority();
  sub_100030110();
  uint64_t v7 = sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v8 = (void *)sub_100030228();
  v8[2] = v2;
  v8[3] = v7;
  v8[4] = v2;
  v8[5] = v6;
  v8[6] = v4;
  v8[7] = v3;
  swift_retain_n();
  sub_10002FC78();
  swift_retain();
  uint64_t v9 = sub_10000F90C(v1, (uint64_t)&unk_10015B9F0, (uint64_t)v8);
  v0[9] = v9;
  uint64_t v10 = *(void *)(v2 + v5);
  sub_100030110();
  uint64_t v11 = (void *)sub_100030210();
  v11[2] = v2;
  v11[3] = v7;
  v11[4] = v2;
  v11[5] = v9;
  sub_10002FC78();
  swift_retain();
  swift_retain();
  *(void *)(v10 + 16) = sub_100003730(v1, (uint64_t)&unk_10015BA00, (uint64_t)v11);
  swift_release();
  swift_release();
  sub_100030204();
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v17 + 24) = v18;
    uint64_t v20 = (void *)swift_task_alloc();
    v0[10] = v20;
    sub_100003A70(&qword_10015B468);
    sub_100030AC8();
    *uint64_t v20 = v21;
    v20[1] = sub_10001536C;
    sub_1000308E0();
    sub_1000307C8();
  }
  return Task.value.getter(v12, v13, v14, v15, v16);
}

uint64_t sub_10001536C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

void sub_100015464()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_1000307AC(v0);
    swift_release();
    swift_task_dealloc();
    sub_1000304E0();
    v2();
  }
}

void sub_1000154E0()
{
  sub_1000086E0();
  sub_100030008();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_1000307AC(v0);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    v2();
  }
}

uint64_t sub_100015560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v5 = sub_100003A70(&qword_10015B228);
  v3[5] = v5;
  v3[6] = *(void *)(v5 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_100015628, a3, 0);
}

uint64_t sub_100015628()
{
  uint64_t v21 = v0;
  if (qword_10015B088 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003B18(v2, (uint64_t)qword_10015B4E0);
  uint64_t v3 = *(void (**)(void))(v1 + 16);
  sub_1000303C8();
  v3();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    log = v4;
    uint64_t v6 = (uint8_t *)sub_100030314();
    uint64_t v20 = sub_10002FF90();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_10000841C(&qword_10015B770, &qword_10015B228);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_10001DF20(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000303D4();
    v9();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Releasing assertion: %s", v6, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000303D4();
    v10();
  }
  sub_100003A70(&qword_10015B748);
  uint64_t v11 = (__n128 *)sub_100030544();
  sub_100030A0C(v11, (__n128)xmmword_100128650);
  sub_1000303C8();
  v3();
  sub_100003E04((uint64_t)v11);
  v0[8] = v12;
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = (void *)sub_1000305B0(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_1000158D0;
  sub_10003069C();
  sub_1000306EC();
  return sub_1000159C8(v16);
}

uint64_t sub_1000158D0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_1000159C8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000EFE0((uint64_t)sub_1000159E4, v1);
}

uint64_t sub_1000159E4()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002C398(v3, v1);
  v0[4] = v4;
  uint64_t v5 = *(void *)(v2 + 320);
  swift_bridgeObjectRetain();
  char v6 = sub_10001A228(v4, v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_release();
    sub_10000EF7C();
    sub_10002FE64();
    return v8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    uint64_t v16 = (void *)swift_task_alloc();
    v0[5] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100015B08;
    sub_10002FE64();
    return sub_100018788();
  }
}

uint64_t sub_100015B08()
{
  sub_1000086E0();
  sub_10002FB6C();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100030A00();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100015BE4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000EFE0((uint64_t)sub_100015C00, v1);
}

uint64_t sub_100015C00()
{
  sub_10000F01C();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_allocObject();
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  sub_100030AE8();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100015CF0;
  return v6();
}

uint64_t sub_100015CF0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100015DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return _swift_task_switch(sub_100015E08, a3, 0);
}

uint64_t sub_100015E08()
{
  uint64_t v17 = v0;
  uint64_t v2 = v0[4];
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002C56C(v3, v2);
  v0[5] = v4;
  if (*(void *)(v4 + 16))
  {
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100003B18(v5, (uint64_t)qword_10015B4E0);
    swift_retain_n();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (sub_1000306C4(v7))
    {
      unint64_t v8 = (uint8_t *)sub_100030314();
      uint64_t v16 = sub_10002FF90();
      *(_DWORD *)unint64_t v8 = 136315138;
      type metadata accessor for Assertion.DaemonRep();
      sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      swift_retain();
      uint64_t v9 = Set.description.getter();
      unint64_t v11 = v10;
      swift_release();
      v0[2] = sub_10001DF20(v9, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v1, "Restoring assertions: %s", v8, 0xCu);
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v14 = (void *)swift_task_alloc();
    v0[6] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000160C8;
    uint64_t v15 = sub_10003069C();
    return sub_10001460C(v15);
  }
  else
  {
    swift_release();
    sub_10000EF7C();
    return v12();
  }
}

uint64_t sub_1000160C8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000EF7C();
  return v3();
}

#error "1000161C0: call analysis failed (funcsize=13)"

uint64_t sub_1000161D8(int a1)
{
  *(void *)(v2 + 16) = v1;
  *(_DWORD *)(v2 + 40) = a1;
  return sub_10000EFE0((uint64_t)sub_1000161F8, v1);
}

uint64_t sub_1000161F8()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 16);
  int v2 = *(_DWORD *)(v0 + 40);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 24) = v3;
  *(void *)(v3 + 16) = v1;
  *(_DWORD *)(v3 + 24) = v2;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015B6D0 + dword_10015B6D0);
  swift_retain();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000305BC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000162EC;
  return v8((uint64_t)v8, (uint64_t)&unk_10015B6C8, v3);
}

uint64_t sub_1000162EC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *int v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000163E4(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(v3 + 108) = a3;
  *(void *)(v3 + 24) = a2;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = *(void *)(v5 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  *(void *)(v3 + 56) = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015B228);
  *(void *)(v3 + 64) = v6;
  *(void *)(v3 + 72) = *(void *)(v6 - 8);
  *(void *)(v3 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_10001651C, a2, 0);
}

uint64_t sub_10001651C()
{
  uint64_t v39 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(unsigned int *)(v0 + 108);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002C740(v3, v2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v1 + 40);
    os_log_type_t v38 = _swiftEmptyArrayStorage;
    sub_10001EDC8(0, v5, 0);
    int64_t v7 = sub_10002E428(v4);
    int v9 = v8;
    char v11 = v10 & 1;
    uint64_t v37 = v4;
    while ((v7 & 0x8000000000000000) == 0)
    {
      sub_100030344();
      if (v7 >= v12) {
        break;
      }
      sub_100030BF0();
      if ((v13 & 1) == 0) {
        goto LABEL_26;
      }
      if (*(_DWORD *)(v4 + 36) != v9) {
        goto LABEL_27;
      }
      sub_100030274();
      v14();
      sub_100030658();
      v15();
      Assertion.DaemonRep.id.getter();
      sub_100030BD0();
      sub_10000EFBC();
      v16();
      uint64_t v17 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EDC8(0, v38[2] + 1, 1);
        uint64_t v17 = v38;
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1)
      {
        sub_10001EDC8(v18 > 1, v19 + 1, 1);
        uint64_t v17 = v38;
      }
      v17[2] = v19 + 1;
      sub_100030B1C();
      sub_100030658();
      v20();
      uint64_t v4 = v37;
      int64_t v21 = sub_10002E2E0(v7, v9, v11 & 1, v37);
      int64_t v7 = v21;
      int v9 = v22;
      char v11 = v23 & 1;
      if (!--v5)
      {
        sub_10000E60C(v21, v22, v23 & 1);
        swift_release();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_release();
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v6 = sub_100016CF8((uint64_t)v17);
  *(void *)(v1 + 88) = v6;
  if (*(void *)(v6 + 16))
  {
    if (qword_10015B088 == -1)
    {
LABEL_16:
      uint64_t v24 = type metadata accessor for Logger();
      sub_100003B18(v24, (uint64_t)qword_10015B4E0);
      swift_bridgeObjectRetain_n();
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (sub_1000306C4(v26))
      {
        uint64_t v27 = v1;
        int v28 = *(_DWORD *)(v1 + 108);
        uint64_t v29 = swift_slowAlloc();
        os_log_type_t v38 = (void *)sub_10002FF90();
        *(_DWORD *)uint64_t v29 = 67109378;
        *(_DWORD *)(v1 + 104) = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v29 + 8) = 2080;
        sub_10000841C(&qword_10015B238, &qword_10015B228);
        swift_bridgeObjectRetain();
        uint64_t v30 = Set.description.getter();
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        uint64_t v33 = v30;
        uint64_t v1 = v27;
        *(void *)(v27 + 16) = sub_10001DF20(v33, v32, (uint64_t *)&v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v5, "Releasing all assertions from pid %d: %s", (uint8_t *)v29, 0x12u);
        sub_100030B28();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      BOOL v36 = (void *)swift_task_alloc();
      *(void *)(v1 + 96) = v36;
      *BOOL v36 = v1;
      v36[1] = sub_100016A40;
      return sub_1000159C8(v6);
    }
LABEL_28:
    swift_once();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v1 + 8);
  return v34();
}

uint64_t sub_100016A40()
{
  sub_1000086EC();
  sub_10002FB6C();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100030A00();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100030808();
  return v3();
}

uint64_t sub_100016B70()
{
  swift_release();

  return _swift_deallocObject(v0, 28, 7);
}

uint64_t sub_100016BA8()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  int v4 = *(_DWORD *)(v0 + 24);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_1000086AC(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_10000ED54;
  return sub_1000163E4(v2, v3, v4);
}

uint64_t sub_100016C4C(uint64_t a1)
{
  uint64_t v6 = Set.init(minimumCapacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_100020654();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    sub_10003032C();
  }
  return v1;
}

uint64_t sub_100016CF8(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B228);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v10 = (char *)&v22 - v9;
  uint64_t v11 = sub_100003A70(&qword_10015B740);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000841C(&qword_10015B238, &qword_10015B228);
  uint64_t v25 = Set.init(minimumCapacity:)();
  uint64_t v22 = a1;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = v3 + 16;
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v18 = v22 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    unint64_t v19 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v20 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v23 = *(void *)(v16 + 56);
    uint64_t v24 = v17;
    while (1)
    {
      v24(v14, v18, v2);
      sub_100006960((uint64_t)v14, 0, 1, v2);
      if (sub_100006AE8((uint64_t)v14, 1, v2) == 1) {
        break;
      }
      (*v19)(v7, v14, v2);
      sub_100021EBC();
      (*v20)(v10, v2);
      v18 += v23;
      if (!--v15) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_100006960((uint64_t)v14, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_100016F7C(uint64_t a1)
{
  type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_10000F0C0();
  __chkstk_darwin(v6, v7);
  sub_10002F90C(&qword_10015B800, (void (*)(uint64_t))type metadata accessor for ModelCatalogAsset);
  uint64_t v8 = Set.init(minimumCapacity:)();
  uint64_t v15 = v8;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    sub_100030B1C();
    uint64_t v11 = a1 + v10;
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_10002F814();
      sub_100020AC8();
      sub_10002F868();
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    uint64_t v13 = v8;
    swift_bridgeObjectRelease();
  }
  return v13;
}

void sub_100017100()
{
  sub_10002FAAC();
  sub_100030194();
  type metadata accessor for InferenceProviderAssetDescriptor();
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  sub_10002FB2C();
  __chkstk_darwin(v6, v7);
  sub_100030500();
  sub_10002F90C(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
  sub_10002FD0C();
  uint64_t v8 = *(void *)(v0 + 16);
  if (v8)
  {
    sub_10002FDAC();
    do
    {
      uint64_t v9 = sub_100030280();
      v2(v9);
      uint64_t v10 = sub_10002FEC4();
      sub_1000210B8(v10, v11);
      uint64_t v12 = sub_1000301C8();
      v13(v12);
      v1 += v3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003032C();
  }
  sub_10002FAC4();
}

void sub_10001720C()
{
  sub_100030708();
  if (v1)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_10003032C();
  }
  type metadata accessor for InferenceProviderAsset(0);
  sub_10002F90C(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
  sub_10002FD0C();
  sub_1000308C0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
LABEL_5:
  if (v3 >= 1)
  {
    while (1)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      sub_100030AB4();
      sub_1000201DC(v4, v5);
      swift_release();
    }
  }
  __break(1u);
}

void sub_100017358()
{
  sub_10002FAAC();
  sub_100030194();
  type metadata accessor for StateDump.AssetState();
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  sub_10002FB2C();
  __chkstk_darwin(v6, v7);
  sub_100030500();
  sub_10002F90C(&qword_10015BAF8, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
  sub_10002FD0C();
  uint64_t v8 = *(void *)(v0 + 16);
  if (v8)
  {
    sub_10002FDAC();
    do
    {
      uint64_t v9 = sub_100030280();
      v2(v9);
      uint64_t v10 = sub_10002FEC4();
      sub_10002152C(v10, v11);
      uint64_t v12 = sub_1000301C8();
      v13(v12);
      v1 += v3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003032C();
  }
  sub_10002FAC4();
}

void sub_100017464()
{
  sub_10002FAAC();
  sub_100030194();
  type metadata accessor for StateDump.SessionState();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_10002FB2C();
  __chkstk_darwin(v3, v4);
  sub_1000304F0();
  uint64_t v5 = sub_100003A70(&qword_10015BAD0);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_100030664();
  sub_10002F90C(&qword_10015BAD8, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
  sub_10002FD0C();
  if (*(void *)(v0 + 16))
  {
    sub_10002FF20();
    while (1)
    {
      uint64_t v8 = sub_100030630();
      v9(v8);
      sub_10002FD74();
      if (v10) {
        break;
      }
      uint64_t v11 = sub_100030578();
      v12(v11);
      uint64_t v13 = sub_10002FEC4();
      sub_100021850(v13, v14);
      uint64_t v15 = sub_100030794();
      v16(v15);
      sub_100030784();
      if (v10) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    sub_100030488();
  }
  swift_bridgeObjectRelease();
  sub_100030A94();
  sub_10002FAC4();
}

void sub_1000175A8()
{
  sub_10002FAAC();
  sub_100030194();
  type metadata accessor for StateDump.RequestState();
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  sub_10002FB2C();
  __chkstk_darwin(v6, v7);
  sub_100030500();
  sub_10002F90C(&qword_10015BAB0, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
  sub_10002FD0C();
  uint64_t v8 = *(void *)(v0 + 16);
  if (v8)
  {
    sub_10002FDAC();
    do
    {
      uint64_t v9 = sub_100030280();
      v2(v9);
      uint64_t v10 = sub_10002FEC4();
      sub_100021B74(v10, v11);
      uint64_t v12 = sub_1000301C8();
      v13(v12);
      v1 += v3;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003032C();
  }
  sub_10002FAC4();
}

void sub_1000176B4()
{
  sub_10002FAAC();
  uint64_t v4 = v3;
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  sub_10002FB2C();
  __chkstk_darwin(v10, v11);
  sub_1000304F0();
  uint64_t v12 = sub_100003A70(&qword_10015BAA8);
  uint64_t v13 = sub_10002FDD0(v12);
  __chkstk_darwin(v13, v14);
  sub_100030298();
  sub_10000841C(&qword_10015B9B0, &qword_10015B408);
  sub_10002FD0C();
  if (*(void *)(v4 + 16))
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v16 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    uint64_t v18 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v20 = v15;
    while (1)
    {
      v20(v2, v16, v5);
      sub_10002FD74();
      if (v19) {
        break;
      }
      (*v17)(v0, v2, v5);
      sub_10002FEC4();
      sub_100021EBC();
      (*v18)(v1, v5);
      sub_100030784();
      if (v19) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    sub_100030488();
  }
  swift_bridgeObjectRelease();
  sub_100030A94();
  sub_10002FAC4();
}

void sub_10001787C()
{
  sub_10002FAAC();
  sub_100030194();
  type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_10002FB2C();
  __chkstk_darwin(v3, v4);
  sub_1000304F0();
  uint64_t v5 = sub_100003A70(&qword_10015BA78);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_100030664();
  sub_10002F90C(&qword_10015BA80, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
  sub_10002FD0C();
  if (*(void *)(v0 + 16))
  {
    sub_10002FF20();
    while (1)
    {
      uint64_t v8 = sub_100030630();
      v9(v8);
      sub_10002FD74();
      if (v10) {
        break;
      }
      uint64_t v11 = sub_100030578();
      v12(v11);
      uint64_t v13 = sub_10002FEC4();
      sub_100022184(v13, v14);
      uint64_t v15 = sub_100030794();
      v16(v15);
      sub_100030784();
      if (v10) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    sub_100030488();
  }
  swift_bridgeObjectRelease();
  sub_100030A94();
  sub_10002FAC4();
}

void sub_1000179C0()
{
  sub_100030708();
  if (v1)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_10003032C();
  }
  sub_10002EE10();
  sub_10002EE50();
  sub_10002FD0C();
  sub_1000308C0();
  if (!v1)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_5:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v0 + 8 * i + 32);
      }
      sub_1000229CC(&v6, v5);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_100017AE0()
{
  sub_100030708();
  if (v1)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_10003032C();
  }
  type metadata accessor for DaemonRequest();
  sub_10002F90C(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
  sub_10002FD0C();
  sub_1000308C0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
LABEL_5:
  if (v3 >= 1)
  {
    while (1)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      sub_100030AB4();
      sub_100020418(v4, v5);
      swift_release();
    }
  }
  __break(1u);
}

void sub_100017C2C()
{
  sub_10002FAAC();
  uint64_t v61 = v2;
  uint64_t v58 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v63 = v3;
  __chkstk_darwin(v4, v5);
  sub_100030158();
  uint64_t v60 = v6;
  sub_100030514();
  __chkstk_darwin(v7, v8);
  uint64_t v57 = (char *)v49 - v9;
  sub_100030514();
  __chkstk_darwin(v10, v11);
  uint64_t v54 = (char *)v49 - v12;
  sub_100030514();
  __chkstk_darwin(v13, v14);
  uint64_t v62 = (char *)v49 - v15;
  uint64_t v16 = type metadata accessor for AssetPolicy();
  sub_10000ED60();
  uint64_t v18 = v17;
  __chkstk_darwin(v19, v20);
  sub_100030158();
  uint64_t v59 = v21;
  sub_100030514();
  __chkstk_darwin(v22, v23);
  sub_100030C10();
  uint64_t v26 = __chkstk_darwin(v24, v25);
  int v28 = (char *)v49 - v27;
  __chkstk_darwin(v26, v29);
  unint64_t v31 = (char *)v49 - v30;
  uint64_t v53 = (char *)v49 - v30;
  v49[0] = v0;
  uint64_t v32 = Policy.memoryBudget.getter();
  uint64_t v33 = Policy.memoryBudget.getter();
  Policy.assetPolicy.getter();
  Policy.assetPolicy.getter();
  sub_10002F90C(&qword_10015B730, (void (*)(uint64_t))&type metadata accessor for AssetPolicy);
  char v34 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
  uint64_t v51 = v35;
  uint64_t v52 = v18 + 16;
  if (v34) {
    BOOL v36 = v1;
  }
  else {
    BOOL v36 = v28;
  }
  v35((uint64_t)v31, v36, v16);
  uint64_t v37 = *(void (**)(void))(v18 + 8);
  uint64_t v55 = v18 + 8;
  unsigned __int8 v56 = v37;
  sub_10003056C();
  v37();
  sub_10003056C();
  v37();
  os_log_type_t v38 = v54;
  Policy.cancelPriority.getter();
  uint64_t v39 = v57;
  Policy.cancelPriority.getter();
  sub_10002F90C(&qword_10015B738, (void (*)(uint64_t))&type metadata accessor for RequestPriority);
  uint64_t v40 = v58;
  char v41 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v42 = v63;
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 16);
  uint64_t v50 = v43;
  if (v41) {
    uint64_t v44 = v39;
  }
  else {
    uint64_t v44 = v38;
  }
  v43((uint64_t)v62, v44, v40);
  if (v33 >= v32) {
    uint64_t v45 = v32;
  }
  else {
    uint64_t v45 = v33;
  }
  if (v33 == -1) {
    uint64_t v45 = v32;
  }
  if (v32 == -1) {
    uint64_t v45 = v33;
  }
  v49[1] = v45;
  uint64_t v46 = *(void (**)(void))(v42 + 8);
  uint64_t v63 = v42 + 8;
  sub_10003056C();
  v46();
  sub_10003056C();
  v46();
  Policy.inactiveAssetTimeout.getter();
  Policy.inactiveAssetTimeout.getter();
  Policy.assetTransitionDelay.getter();
  Policy.assetTransitionDelay.getter();
  v51(v59, v53, v16);
  uint64_t v47 = v62;
  v50(v60, v62, v40);
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  ((void (*)(char *, uint64_t))v46)(v47, v40);
  sub_10000EFBC();
  v48();
  sub_10002FAC4();
}

void sub_10001804C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_100030064();
  a29 = v30;
  a30 = v31;
  uint64_t v33 = v32;
  a13 = v34;
  if ((v32 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    uint64_t v35 = sub_100030194();
    type metadata accessor for InferenceProviderAsset(v35);
    sub_10002F90C(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    Set.Iterator.init(_cocoa:)();
    uint64_t v33 = a14;
    uint64_t v52 = a15;
    uint64_t v36 = a16;
    int64_t v37 = a17;
    unint64_t v38 = a18;
  }
  else
  {
    int64_t v37 = 0;
    sub_1000304C4();
    uint64_t v52 = v33 + 56;
    sub_100030BDC();
    unint64_t v38 = v39 & v40;
  }
  int64_t v41 = (unint64_t)(v36 + 64) >> 6;
  if (v33 < 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v38)
    {
      uint64_t v42 = (v38 - 1) & v38;
      unint64_t v43 = __clz(__rbit64(v38)) | (v37 << 6);
      int64_t v44 = v37;
      goto LABEL_26;
    }
    int64_t v46 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v46 >= v41) {
      goto LABEL_29;
    }
    int64_t v44 = v37 + 1;
    if (!*(void *)(v52 + 8 * v46))
    {
      int64_t v44 = v37 + 2;
      if (v37 + 2 >= v41) {
        goto LABEL_29;
      }
      if (!*(void *)(v52 + 8 * v44))
      {
        int64_t v44 = v37 + 3;
        if (v37 + 3 >= v41) {
          goto LABEL_29;
        }
        if (!*(void *)(v52 + 8 * v44))
        {
          int64_t v44 = v37 + 4;
          if (v37 + 4 >= v41) {
            goto LABEL_29;
          }
          if (!*(void *)(v52 + 8 * v44))
          {
            int64_t v44 = v37 + 5;
            if (v37 + 5 >= v41) {
              goto LABEL_29;
            }
            if (!*(void *)(v52 + 8 * v44))
            {
              int64_t v47 = v37 + 6;
              while (v47 < v41)
              {
                if (*(void *)(v52 + 8 * v47++))
                {
                  int64_t v44 = v47 - 1;
                  goto LABEL_25;
                }
              }
LABEL_29:
              sub_10002EAF0();
              sub_100030080();
              return;
            }
          }
        }
      }
    }
LABEL_25:
    sub_100030534();
    uint64_t v42 = v50 & v49;
    unint64_t v43 = v51 + (v44 << 6);
LABEL_26:
    uint64_t v45 = *(void *)(*(void *)(v33 + 48) + 8 * v43);
    swift_retain();
    if (!v45) {
      goto LABEL_29;
    }
    while (1)
    {
      sub_1000201DC(&a12, v45);
      swift_release();
      int64_t v37 = v44;
      unint64_t v38 = v42;
      if ((v33 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for InferenceProviderAsset(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v45 = a12;
        swift_unknownObjectRelease();
        int64_t v44 = v37;
        uint64_t v42 = v38;
        if (v45) {
          continue;
        }
      }
      goto LABEL_29;
    }
  }
  __break(1u);
}

uint64_t sub_1000182C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t result = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v30 - v16;
  int64_t v18 = 0;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v20 = a1 + 56;
  uint64_t v19 = v21;
  uint64_t v22 = 1 << *(unsigned char *)(v20 - 24);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v19;
  uint64_t v31 = v20;
  int64_t v32 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v33 = v5 + 16;
  if ((v23 & v19) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v25 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (unint64_t i = v25 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v17, *(void *)(v34 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v17, v4);
    sub_1000207A4((uint64_t)v13, v9);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    if (v24) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v27 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v27 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v18;
    if (!v28)
    {
      int64_t v18 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v18);
      if (!v28)
      {
        int64_t v18 = v27 + 2;
        if (v27 + 2 >= v32) {
          goto LABEL_23;
        }
        unint64_t v28 = *(void *)(v31 + 8 * v18);
        if (!v28)
        {
          int64_t v18 = v27 + 3;
          if (v27 + 3 >= v32) {
            goto LABEL_23;
          }
          unint64_t v28 = *(void *)(v31 + 8 * v18);
          if (!v28) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v24 = (v28 - 1) & v28;
  }
  int64_t v29 = v27 + 4;
  if (v29 >= v32)
  {
LABEL_23:
    swift_release();
    return v35;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v18 = v29;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v18 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v18 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v18);
    ++v29;
    if (v28) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100018590()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v3 = sub_10002FA4C(v2);
  __chkstk_darwin(v3, v4);
  sub_10002FB2C();
  __chkstk_darwin(v5, v6);
  sub_100030C10();
  __chkstk_darwin(v7, v8);
  int64_t v9 = 0;
  uint64_t v10 = v1 + 56;
  sub_100030680();
  uint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  sub_100030BFC();
  while (1)
  {
    sub_10002F814();
    sub_10002F8B8();
    sub_10002FEC4();
    sub_100020AC8();
    sub_10002F868();
    if (v13) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v15) {
      goto LABEL_21;
    }
    ++v9;
    if (!*(void *)(v10 + 8 * v16))
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v15) {
        goto LABEL_21;
      }
      if (!*(void *)(v10 + 8 * v9))
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v15) {
          goto LABEL_21;
        }
        if (!*(void *)(v10 + 8 * v9))
        {
          int64_t v9 = v16 + 3;
          if (v16 + 3 >= v15) {
            goto LABEL_21;
          }
          if (!*(void *)(v10 + 8 * v9)) {
            break;
          }
        }
      }
    }
LABEL_18:
    sub_100030C94();
  }
  int64_t v17 = v16 + 4;
  if (v17 >= v15)
  {
LABEL_21:
    swift_release();
    sub_100030A94();
    sub_10002FAC4();
    return;
  }
  if (*(void *)(v10 + 8 * v17))
  {
    int64_t v9 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v15) {
      goto LABEL_21;
    }
    ++v17;
    if (*(void *)(v10 + 8 * v9)) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100018788()
{
  sub_1000086E0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = type metadata accessor for RequestPriority();
  v1[9] = v3;
  sub_10002FA4C(v3);
  v1[10] = v4;
  v1[11] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for RequestManagerPolicy(0);
  v1[12] = v5;
  sub_10002FDD0(v5);
  v1[13] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for AssetPolicy();
  v1[14] = v6;
  sub_10002FA4C(v6);
  v1[15] = v7;
  v1[16] = sub_10002FE18();
  uint64_t v8 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  v1[17] = v8;
  sub_10002FDD0(v8);
  v1[18] = sub_10002FE18();
  uint64_t v9 = type metadata accessor for Policy();
  v1[19] = v9;
  sub_10002FA4C(v9);
  v1[20] = v10;
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000188EC()
{
  unint64_t v43 = v0;
  sub_1000194A4();
  if (qword_10015B088 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  v0[25] = sub_100003B18(v5, (uint64_t)qword_10015B4E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[26] = v6;
  v0[27] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  int64_t v41 = v6;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[23];
  if (v9)
  {
    loga = v7;
    uint64_t v11 = v0[22];
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v14 = (uint8_t *)sub_100030314();
    uint64_t v42 = sub_10002FF90();
    *(_DWORD *)uint64_t v14 = 136315138;
    v41(v11, v10, v13);
    uint64_t v15 = String.init<A>(describing:)();
    v0[6] = sub_10001DF20(v15, v16, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int64_t v17 = *(void (**)(void))(v12 + 8);
    uint64_t v40 = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_10003056C();
    v17();
    uint64_t v7 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v8, "Applying new policy: %s", v14, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v18 = v0[20];
    int64_t v17 = *(void (**)(void))(v18 + 8);
    uint64_t v40 = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    ((void (*)(uint64_t, void))v17)(v10, v0[19]);
  }

  os_log_t log = (os_log_t)v17;
  v0[28] = v17;
  uint64_t v19 = v0[24];
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[18];
  uint64_t v22 = v0[19];
  uint64_t v24 = v0[16];
  uint64_t v23 = (int *)v0[17];
  uint64_t v25 = v0[15];
  uint64_t v36 = v0[14];
  uint64_t v37 = v0[8];
  sub_10000F21C(v0[7]);
  uint64_t v27 = sub_100016C4C(v26);
  v0[29] = v27;
  v41(v20, v19, v22);
  swift_bridgeObjectRetain();
  Policy.assetPolicy.getter();
  uint64_t v28 = Policy.memoryBudget.getter();
  double v29 = (double)Policy.inactiveAssetTimeout.getter();
  Policy.assetTransitionDelay.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v21, v24, v36);
  *(void *)(v21 + v23[5]) = v28;
  *(void *)(v21 + v23[8]) = v27;
  uint64_t v30 = static Policy.defaultInactiveAssetTimeout.getter();
  double v31 = 900.0;
  if (v29 != (double)v30) {
    double v31 = v29;
  }
  *(double *)(v21 + v23[6]) = v31;
  sub_100075824();
  uint64_t v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v36);
  *(void *)(v21 + v23[7]) = v33;
  v0[30] = v40;
  ((void (*)(uint64_t, uint64_t))log)(v20, v22);
  sub_10000853C((void *)(v37 + 200), *(void *)(v37 + 224));
  uint64_t v34 = (void *)swift_task_alloc();
  v0[31] = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_100018CC4;
  return sub_1000859E8();
}

uint64_t sub_100018CC4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100018DA0()
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(char **)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 232);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 208))(v2, *(void *)(v0 + 192), v3);
  Policy.cancelPriority.getter();
  v1(v2, v3);
  *(void *)uint64_t v4 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v4[*(int *)(v5 + 20)], v6, v8);
  BOOL v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v9;
  *BOOL v9 = v0;
  v9[1] = sub_100018EB0;
  sub_10002FE48();
  return sub_1001119DC();
}

uint64_t sub_100018EB0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100018F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = v14[24];
  uint64_t v16 = v14[19];
  uint64_t v17 = v14[20];
  uint64_t v18 = v14[8];
  *(void *)(v18 + 320) = v14[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v18 + OBJC_IVAR____TtC13modelmanagerd13PolicyManager__currentPolicy;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(v19, v15, v16);
  swift_endAccess();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Finished applying policy", v22, 2u);
    sub_10000ED7C();
  }
  uint64_t v23 = (void (*)(uint64_t, uint64_t))v14[28];
  uint64_t v24 = v14[24];
  uint64_t v25 = v14[19];
  uint64_t v35 = v14[21];
  uint64_t v36 = v14[16];
  uint64_t v37 = v14[11];

  sub_10002F868();
  sub_10002F868();
  v23(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, v35, v36, v37, a12, a13, a14);
}

uint64_t sub_10001915C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100003A70(&qword_10015B858);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (void *)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = a1;
  sub_10001177C((uint64_t (*)(char *))sub_10002EBA0, a2, (uint64_t)v10);
  uint64_t v11 = sub_100003A70(&qword_10015B830);
  uint64_t result = sub_100006AE8((uint64_t)v10, 1, v11);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = *v10;
    unint64_t v13 = v10[1];
    uint64_t v15 = (char *)v10 + *(int *)(v11 + 48);
    uint64_t v16 = type metadata accessor for Policy();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003B18(v18, (uint64_t)qword_10015B4E0);
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v25 = a3;
      uint64_t v21 = swift_slowAlloc();
      v24[1] = v3;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = a1;
      uint64_t v29 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_10001DF20(v14, v13, &v29);
      a3 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Trial policy with same name as file policy: %s", v22, 0xCu);
      swift_arrayDestroy();
      a1 = v26;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, a1, v16);
  }
  return result;
}

uint64_t sub_100019450()
{
  return static Policy.== infix(_:_:)() & 1;
}

void sub_1000194A4()
{
  sub_10002FAAC();
  uint64_t v98 = v2;
  uint64_t v99 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for RequestPriority();
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_100030144();
  uint64_t v97 = v8;
  uint64_t v9 = type metadata accessor for AssetPolicy();
  uint64_t v10 = sub_10002FDD0(v9);
  __chkstk_darwin(v10, v11);
  sub_100030144();
  uint64_t v94 = v12;
  uint64_t v96 = type metadata accessor for Policy();
  sub_10000ED60();
  uint64_t v95 = v13;
  __chkstk_darwin(v14, v15);
  sub_100030144();
  uint64_t v93 = v16;
  uint64_t v17 = sub_100003A70(&qword_10015B228);
  sub_10000ED60();
  uint64_t v19 = v18;
  __chkstk_darwin(v20, v21);
  sub_100030964();
  uint64_t v22 = type metadata accessor for Assertion.DaemonRep();
  sub_10000ED60();
  uint64_t v24 = v23;
  __chkstk_darwin(v25, v26);
  sub_10000F0C0();
  uint64_t v29 = v27 - v28;
  __chkstk_darwin(v30, v31);
  uint64_t v108 = (char *)&v92 - v32;
  uint64_t v33 = sub_10000841C(&qword_10015B238, &qword_10015B228);
  uint64_t v111 = v17;
  uint64_t v92 = v33;
  uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v101 = v19;
  uint64_t v102 = v4 + 56;
  sub_100030680();
  uint64_t v37 = v36 & v35;
  uint64_t v106 = v24 + 32;
  uint64_t v107 = v24 + 16;
  uint64_t v100 = v19 + 16;
  uint64_t v105 = v19 + 8;
  uint64_t v109 = v24;
  uint64_t v110 = v4;
  int64_t v103 = (unint64_t)(v38 + 63) >> 6;
  uint64_t v104 = v24 + 8;
  swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  if (!v37) {
    goto LABEL_3;
  }
LABEL_2:
  sub_1000309EC();
  uint64_t v112 = v37;
  for (uint64_t i = v40; ; uint64_t i = v53)
  {
    sub_100030274();
    v54();
    uint64_t v55 = v22;
    sub_100030658();
    v56();
    Assertion.DaemonRep.id.getter();
    uint64_t v57 = v29;
    uint64_t v58 = Assertion.DaemonRep.policy.getter();
    uint64_t v60 = v59;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v62 = v1;
    Swift::Bool v63 = isUniquelyReferenced_nonNull_native;
    uint64_t v115 = v34;
    uint64_t v64 = v62;
    sub_10001E748(v62, &qword_10015B228, &qword_10015B238);
    uint64_t v67 = *(void *)(v34 + 16);
    BOOL v68 = (v66 & 1) == 0;
    Swift::Int v69 = v67 + v68;
    if (__OFADD__(v67, v68))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v70 = v65;
    char v71 = v66;
    sub_100003A70(&qword_10015B720);
    Swift::Bool v72 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v63, v69);
    uint64_t v1 = v64;
    if (v72)
    {
      sub_10001E748(v64, &qword_10015B228, &qword_10015B238);
      if ((v71 & 1) != (v74 & 1)) {
        goto LABEL_45;
      }
      unint64_t v70 = v73;
    }
    uint64_t v34 = v115;
    if (v71)
    {
      v75 = (uint64_t *)(*(void *)(v115 + 56) + 16 * v70);
      swift_bridgeObjectRelease();
      uint64_t *v75 = v58;
      v75[1] = v60;
    }
    else
    {
      *(void *)(v115 + 8 * (v70 >> 6) + 64) |= 1 << v70;
      sub_100030274();
      v76();
      uint64_t v77 = (uint64_t *)(*(void *)(v34 + 56) + 16 * v70);
      *uint64_t v77 = v58;
      v77[1] = v60;
      uint64_t v78 = *(void *)(v34 + 16);
      BOOL v43 = __OFADD__(v78, 1);
      uint64_t v79 = v78 + 1;
      if (v43) {
        goto LABEL_41;
      }
      *(void *)(v34 + 16) = v79;
    }
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v80();
    uint64_t v29 = v57;
    uint64_t v22 = v55;
    sub_10000EFBC();
    v81();
    uint64_t v37 = v112;
    uint64_t v39 = i;
    if (v112) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v41 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      goto LABEL_42;
    }
    if (v41 >= v103) {
      goto LABEL_35;
    }
    if (!*(void *)(v102 + 8 * v41))
    {
      sub_100030844();
      if (v42 == v43) {
        goto LABEL_35;
      }
      sub_100030838();
      if (!v44)
      {
        sub_100030844();
        if (v42 == v43) {
          goto LABEL_35;
        }
        sub_100030838();
        if (!v45)
        {
          sub_100030844();
          if (v42 == v43) {
            goto LABEL_35;
          }
          sub_100030838();
          if (!v46)
          {
            sub_100030844();
            if (v42 == v43) {
              goto LABEL_35;
            }
            sub_100030838();
            if (!v48) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    sub_100030CA8();
    uint64_t v112 = v52;
  }
  int64_t v49 = v47 + 5;
  if (v49 < v103)
  {
    if (!*(void *)(v102 + 8 * v49))
    {
      while (!__OFADD__(v49, 1))
      {
        sub_100030844();
        if (v42 == v43) {
          goto LABEL_35;
        }
        sub_100030838();
        int64_t v49 = v50 + 1;
        if (v51) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_45:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    goto LABEL_24;
  }
LABEL_35:
  swift_release();
  if (qword_10015B088 == -1) {
    goto LABEL_36;
  }
LABEL_43:
  swift_once();
LABEL_36:
  uint64_t v82 = type metadata accessor for Logger();
  sub_100003B18(v82, (uint64_t)qword_10015B4E0);
  swift_bridgeObjectRetain();
  v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = (uint8_t *)sub_100030314();
    uint64_t v115 = sub_10002FF90();
    *(_DWORD *)uint64_t v85 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v86 = Dictionary.description.getter();
    unint64_t v88 = v87;
    swift_bridgeObjectRelease();
    uint64_t v114 = sub_10001DF20(v86, v88, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Building effective policy from assertions: %s", v85, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v89 = v93;
  Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
  uint64_t v90 = v99;
  swift_retain();
  sub_10000F498(v89, v110, v90, v98);
  sub_10000EFBC();
  v91();
  sub_10002FAC4();
}

uint64_t sub_100019BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v38 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100003A70(&qword_10015B728);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Policy();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = Assertion.DaemonRep.policy.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)(a3 + 296);
  swift_bridgeObjectRetain();
  sub_1000142D8(v20, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (sub_100006AE8((uint64_t)v14, 1, v15) == 1)
  {
    uint64_t v36 = a1;
    uint64_t v37 = a4;
    sub_10002EB50((uint64_t)v14, &qword_10015B728);
    if (qword_10015B088 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100003B18(v24, (uint64_t)qword_10015B4E0);
    uint64_t v25 = v38;
    uint64_t v26 = v39;
    uint64_t v27 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, a2, v40);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v42 = v35;
      *(_DWORD *)uint64_t v30 = 136315138;
      v34[1] = v30 + 4;
      uint64_t v31 = Assertion.DaemonRep.policy.getter();
      uint64_t v41 = sub_10001DF20(v31, v32, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v40);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error while building policy: No such policy %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v37, v36, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
    sub_100017C2C();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
}

void sub_100019FE0()
{
  sub_10002FFC4();
  if (v0 == v1 || (uint64_t v2 = v1, *(void *)(v0 + 16) != *(void *)(v1 + 16)))
  {
LABEL_40:
    sub_10002FFA8();
    return;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v29 = v0 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(v0 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v4;
  int64_t v30 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v1 + 56;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v31 = v3;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = v0;
    uint64_t v16 = *(void *)(*(void *)(v0 + 48) + 16 * i + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v8 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v20 = *(void *)(v2 + 48);
    sub_100030A34(v20 + 16 * v19);
    BOOL v22 = v22 && v21 == v16;
    if (!v22 && (sub_1000304A8() & 1) == 0)
    {
      uint64_t v23 = ~v18;
      for (unint64_t j = v19 + 1; ; unint64_t j = v25 + 1)
      {
        uint64_t v25 = j & v23;
        sub_10002FC34();
        if ((v26 & 1) == 0) {
          break;
        }
        sub_100030A34(v20 + 16 * v25);
        BOOL v28 = v22 && v27 == v16;
        if (v28 || (sub_1000304A8() & 1) != 0) {
          goto LABEL_28;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v0 = v15;
    int64_t v3 = v31;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v30) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v30) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v30) {
          goto LABEL_40;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v31 = v13;
  }
  uint64_t v14 = v3 + 4;
  if (v3 + 4 >= v30) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_10001A228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  unint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v48 = (char *)&v37 - v12;
  uint64_t result = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v37 - v15;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v17 = 0;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v39 = a1;
  uint64_t v40 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v18;
  int64_t v41 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v45 = v5 + 32;
  uint64_t v46 = a2 + 56;
  uint64_t v47 = v5 + 16;
  BOOL v22 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v37 = v16;
  uint64_t v38 = v5;
  if (!v21) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v43 = (v21 - 1) & v21;
  int64_t v44 = v17;
  for (unint64_t i = __clz(__rbit64(v21)) | (v17 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v26 << 6))
  {
    uint64_t v28 = *(void *)(v5 + 72);
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v29(v16, *(void *)(a1 + 48) + v28 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v48, v16, v4);
    sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v32 = v30 & ~v31;
    if (((*(void *)(v46 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      (*v22)(v48, v4);
      return 0;
    }
    uint64_t v42 = (unint64_t)v22 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v33 = a2;
    uint64_t v34 = ~v31;
    while (1)
    {
      v29(v9, *(void *)(v33 + 48) + v32 * v28, v4);
      sub_10002F90C(&qword_10015B258, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v36 = *v22;
      (*v22)(v9, v4);
      if (v35) {
        break;
      }
      unint64_t v32 = (v32 + 1) & v34;
      if (((*(void *)(v46 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v36(v48, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v48, v4);
    a2 = v33;
    uint64_t v5 = v38;
    a1 = v39;
    uint64_t v16 = v37;
    unint64_t v21 = v43;
    int64_t v17 = v44;
    if (v43) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v41) {
      return 1;
    }
    unint64_t v25 = *(void *)(v40 + 8 * v24);
    int64_t v26 = v17 + 1;
    if (!v25)
    {
      int64_t v26 = v17 + 2;
      if (v17 + 2 >= v41) {
        return 1;
      }
      unint64_t v25 = *(void *)(v40 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v17 + 3;
        if (v17 + 3 >= v41) {
          return 1;
        }
        unint64_t v25 = *(void *)(v40 + 8 * v26);
        if (!v25)
        {
          int64_t v26 = v17 + 4;
          if (v17 + 4 >= v41) {
            return 1;
          }
          unint64_t v25 = *(void *)(v40 + 8 * v26);
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v43 = (v25 - 1) & v25;
    int64_t v44 = v26;
  }
  uint64_t v27 = v17 + 5;
  if (v17 + 5 >= v41) {
    return 1;
  }
  unint64_t v25 = *(void *)(v40 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v17 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v41) {
      return 1;
    }
    unint64_t v25 = *(void *)(v40 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_10001A674()
{
  sub_10002FAAC();
  uint64_t v2 = sub_1000308FC();
  uint64_t v77 = type metadata accessor for ModelCatalogAsset(v2);
  sub_10000ED60();
  __chkstk_darwin(v3, v4);
  sub_10000F0C0();
  uint64_t v7 = (void *)(v5 - v6);
  __chkstk_darwin(v8, v9);
  uint64_t v85 = (uint64_t *)((char *)&v70 - v10);
  sub_100030514();
  __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v70 - v14;
  if (v1 == v0 || *(void *)(v1 + 16) != *(void *)(v0 + 16)) {
    goto LABEL_103;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(v1 + 32);
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  uint64_t v20 = v19 & *(void *)(v1 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v84 = v0 + 56;
  int64_t v75 = v21;
  uint64_t v76 = v1 + 56;
  if (!v20) {
    goto LABEL_8;
  }
  while (2)
  {
    uint64_t v70 = (v20 - 1) & v20;
    uint64_t v71 = v16;
LABEL_23:
    uint64_t v74 = v1;
    uint64_t v73 = v13;
    uint64_t v83 = *(void *)(v13 + 72);
    sub_10002F814();
    Swift::Bool v72 = v15;
    sub_10002F8B8();
    Hasher.init(_seed:)();
    sub_100070998();
    Swift::Int v27 = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v0 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v84 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
      goto LABEL_102;
    }
    uint64_t v81 = ~v28;
    uint64_t v82 = v0;
    while (1)
    {
      sub_10002F814();
      BOOL v30 = *v7 == *v85 && v7[1] == v85[1];
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_97;
      }
      uint64_t v31 = (void *)v7[2];
      unint64_t v32 = (void *)v85[2];
      unint64_t v33 = v31[2];
      if (v33 != v32[2]) {
        goto LABEL_97;
      }
      if (v33) {
        BOOL v34 = v31 == v32;
      }
      else {
        BOOL v34 = 1;
      }
      if (!v34)
      {
        BOOL v39 = v31[4] == v32[4] && v31[5] == v32[5];
        if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_97;
        }
        if (v33 != 1)
        {
          BOOL v40 = v31[6] == v32[6] && v31[7] == v32[7];
          if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_97;
          }
          if (v33 != 2)
          {
            int64_t v41 = v31 + 9;
            uint64_t v42 = v32 + 9;
            for (unint64_t i = 2; i != v33; ++i)
            {
              if (i >= v33) {
                goto LABEL_106;
              }
              BOOL v44 = *(v41 - 1) == *(v42 - 1) && *v41 == *v42;
              if (!v44 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_97;
              }
              v41 += 2;
              v42 += 2;
            }
          }
        }
      }
      uint64_t v35 = v7[3];
      uint64_t v36 = v85[3];
      unint64_t v37 = *(void *)(v35 + 16);
      if (v37 != *(void *)(v36 + 16)) {
        goto LABEL_97;
      }
      if (!v37 || v35 == v36) {
        break;
      }
      uint64_t v45 = *(void *)(v35 + 48);
      uint64_t v46 = *(void *)(v35 + 56);
      int v47 = *(unsigned __int8 *)(v35 + 64);
      uint64_t v49 = *(void *)(v36 + 48);
      uint64_t v48 = *(void *)(v36 + 56);
      int v50 = *(unsigned __int8 *)(v36 + 64);
      if (*(void *)(v35 + 32) != *(void *)(v36 + 32) || *(void *)(v35 + 40) != *(void *)(v36 + 40))
      {
        int v52 = *(unsigned __int8 *)(v35 + 64);
        uint64_t v53 = *(void *)(v36 + 56);
        uint64_t v80 = *(void *)(v36 + 48);
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v49 = v80;
        uint64_t v48 = v53;
        int v47 = v52;
        if ((v54 & 1) == 0) {
          goto LABEL_97;
        }
      }
      uint64_t v55 = 0;
      unint64_t v56 = 1;
      if (v46)
      {
LABEL_77:
        if (v48)
        {
          if (v45 != v49 || v46 != v48)
          {
            int v58 = v50;
            int v59 = v47;
            if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || ((v58 ^ v59)) {
              goto LABEL_97;
            }
            goto LABEL_87;
          }
          goto LABEL_86;
        }
      }
      else
      {
        while (!v48)
        {
LABEL_86:
          if ((v50 ^ v47)) {
            break;
          }
LABEL_87:
          if (v37 == v56) {
            goto LABEL_42;
          }
          if (v56 >= v37)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
          if (v56 >= *(void *)(v36 + 16)) {
            goto LABEL_105;
          }
          uint64_t v45 = *(void *)(v35 + v55 + 88);
          uint64_t v46 = *(void *)(v35 + v55 + 96);
          int v47 = *(unsigned __int8 *)(v35 + v55 + 104);
          uint64_t v49 = *(void *)(v36 + v55 + 88);
          uint64_t v48 = *(void *)(v36 + v55 + 96);
          int v50 = *(unsigned __int8 *)(v36 + v55 + 104);
          if (*(void *)(v35 + v55 + 72) != *(void *)(v36 + v55 + 72)
            || *(void *)(v35 + v55 + 80) != *(void *)(v36 + v55 + 80))
          {
            uint64_t v79 = *(void *)(v35 + v55 + 96);
            uint64_t v80 = v55;
            uint64_t v78 = v45;
            uint64_t v61 = v36;
            unint64_t v62 = v37;
            Swift::Bool v63 = v7;
            uint64_t v64 = v35;
            int v65 = v50;
            int v66 = v47;
            uint64_t v67 = v48;
            uint64_t v68 = v49;
            char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v49 = v68;
            uint64_t v48 = v67;
            int v47 = v66;
            int v50 = v65;
            uint64_t v35 = v64;
            uint64_t v7 = v63;
            unint64_t v37 = v62;
            uint64_t v36 = v61;
            uint64_t v45 = v78;
            uint64_t v46 = v79;
            uint64_t v55 = v80;
            if ((v69 & 1) == 0) {
              break;
            }
          }
          v55 += 40;
          ++v56;
          if (v46) {
            goto LABEL_77;
          }
        }
      }
LABEL_97:
      sub_10002F868();
      unint64_t v29 = (v29 + 1) & v81;
      if (((*(void *)(v84 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
LABEL_102:
        sub_10002F868();
LABEL_103:
        sub_10002FAC4();
        return;
      }
    }
LABEL_42:
    if ((static AssetCost.== infix(_:_:)() & 1) == 0) {
      goto LABEL_97;
    }
    sub_100030520();
    if (!v30) {
      goto LABEL_97;
    }
    sub_100030520();
    if (!v30) {
      goto LABEL_97;
    }
    sub_100030520();
    if (!v30) {
      goto LABEL_97;
    }
    sub_10002F868();
    sub_10002F868();
    uint64_t v0 = v82;
    uint64_t v1 = v74;
    int64_t v21 = v75;
    uint64_t v13 = v73;
    uint64_t v15 = v72;
    uint64_t v17 = v76;
    uint64_t v16 = v71;
    uint64_t v20 = v70;
    if (v70) {
      continue;
    }
    break;
  }
LABEL_8:
  int64_t v22 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_107;
  }
  if (v22 >= v21) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 8 * v22)) {
    goto LABEL_22;
  }
  if (v16 + 2 >= v21) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 8 * (v16 + 2))) {
    goto LABEL_22;
  }
  if (v16 + 3 >= v21) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 8 * (v16 + 3))) {
    goto LABEL_22;
  }
  if (v16 + 4 >= v21) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 8 * (v16 + 4))) {
    goto LABEL_22;
  }
  uint64_t v23 = v16 + 5;
  if (v16 + 5 >= v21) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 8 * v23))
  {
LABEL_22:
    sub_100030CA8();
    uint64_t v70 = v25;
    uint64_t v71 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v24 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v24 >= v21) {
      goto LABEL_103;
    }
    ++v23;
    if (*(void *)(v17 + 8 * v24)) {
      goto LABEL_22;
    }
  }
LABEL_108:
  __break(1u);
}

uint64_t sub_10001ACD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001ACF8, a4, 0);
}

uint64_t sub_10001ACF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for PolicyManager();
  sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001AE9C;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10002FA48;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001AE9C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001AF78()
{
  sub_1000086E0();
  sub_10002FA64();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002FB1C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10002FA48;
  uint64_t v3 = sub_10002FADC();
  return v4(v3);
}

uint64_t sub_10001B01C()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001ACD0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10001B0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001B0D4, a4, 0);
}

uint64_t sub_10001B0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for TrialManager();
  sub_10002F90C(&qword_10015B868, (void (*)(uint64_t))type metadata accessor for TrialManager);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001B278;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10001B3F4;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001B278()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001B354()
{
  sub_1000086E0();
  sub_10002FA64();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002FB1C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10001B3F4;
  uint64_t v3 = sub_10002FADC();
  return v4(v3);
}

uint64_t sub_10001B3F4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_10001B4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a3;
  v6[3] = a4;
  return _swift_task_switch(sub_10001B4D8, a3, 0);
}

uint64_t sub_10001B4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v12 + 48) = v15;
    *uint64_t v15 = v12;
    v15[1] = sub_10001B674;
    sub_10002FD28();
    return Task<>.value.getter(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
  }
  else
  {
    sub_100030130();
    unint64_t v29 = (uint64_t (*)(uint64_t))((char *)v24 + *v24);
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_100030104(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10001B804;
    return v29(v14);
  }
}

uint64_t sub_10001B674()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001B750()
{
  sub_1000086EC();
  sub_100030130();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_100030104(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_10001B804;
  return v6(v0);
}

uint64_t sub_10001B804()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001B8E0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_10001B8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001B920, a4, 0);
}

uint64_t sub_10001B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for InferenceProviderExtensionConnection(0);
  sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001AE9C;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10002FA48;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001BAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001BAEC, a4, 0);
}

uint64_t sub_10001BAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001AE9C;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10002FA48;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001BC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001BCB8, a4, 0);
}

uint64_t sub_10001BCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for RunningBoardProvider();
  sub_10002F90C(&qword_10015B898, (void (*)(uint64_t))type metadata accessor for RunningBoardProvider);
  sub_10002FBCC();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001AE9C;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10002FA48;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001BE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001BE7C, a4, 0);
}

uint64_t sub_10001BE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  type metadata accessor for PolicyManager();
  sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  sub_10002FCE8();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000305BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10001BF78;
  sub_10003097C();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10001BF78()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001C058()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001BE5C(v3, v4, v5, v6, v7);
}

uint64_t sub_10001C0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001C108, a4, 0);
}

uint64_t sub_10001C108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  type metadata accessor for TrialManager();
  sub_10002F90C(&qword_10015B868, (void (*)(uint64_t))type metadata accessor for TrialManager);
  sub_10002FCE8();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000305BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10001C204;
  sub_10003097C();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10001C204()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001C2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001C300, a4, 0);
}

uint64_t sub_10001C300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v12 + 32) = v18;
  *uint64_t v18 = v12;
  v18[1] = sub_10001C204;
  uint64_t v19 = *(void *)(v12 + 24);
  return Task<>.value.getter(v12 + 40, v19, &type metadata for Bool, v13, v14, v15, v16, v17, a9, a10, a11, a12);
}

uint64_t sub_10001C42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001C44C, a4, 0);
}

uint64_t sub_10001C44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  type metadata accessor for InferenceProviderExtensionConnection(0);
  sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  sub_10002FCE8();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000305BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10001BF78;
  sub_10003097C();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10001C548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001C568, a4, 0);
}

uint64_t sub_10001C568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  sub_10002FCE8();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000305BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10001BF78;
  sub_10003097C();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10001C664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001C684, a4, 0);
}

uint64_t sub_10001C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  type metadata accessor for RunningBoardProvider();
  sub_10002F90C(&qword_10015B898, (void (*)(uint64_t))type metadata accessor for RunningBoardProvider);
  sub_10002FCE8();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1000305BC(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10001BF78;
  sub_10003097C();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10001C780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001C7A8, a4, 0);
}

uint64_t sub_10001C7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for PolicyManager();
  sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  sub_100030240();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001B278;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10001B3F4;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001C94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  return _swift_task_switch(sub_10001C970, a3, 0);
}

uint64_t sub_10001C970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  sub_100030240();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001CB08;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10002FA64();
    uint64_t v30 = (uint64_t (*)(uint64_t))((char *)v25 + *v25);
    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)sub_10002FB1C(v26);
    *uint64_t v27 = v28;
    v27[1] = sub_10001CC98;
    return v30(v12 + 16);
  }
}

uint64_t sub_10001CB08()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10001CBE4()
{
  sub_1000086EC();
  sub_10002FA64();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_10002FB1C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_10001CC98;
  return v6(v0 + 16);
}

uint64_t sub_10001CC98()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10001CD90()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_10001CDAC()
{
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10001CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return _swift_task_switch(sub_10001CDF0, a4, 0);
}

uint64_t sub_10001CDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086EC();
  uint64_t v13 = *(void *)(v12 + 32);
  type metadata accessor for InferenceProviderExtensionConnection(0);
  sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  sub_100030240();
  if (v13)
  {
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100030104(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10001AE9C;
    sub_10002FD28();
    return Task<>.value.getter(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_10002FB1C(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_10002FA48;
    uint64_t v28 = sub_10002FADC();
    return v29(v28);
  }
}

uint64_t sub_10001CF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001CFB4, a4, 0);
}

uint64_t sub_10001CFB4()
{
  sub_1000086E0();
  type metadata accessor for PolicyManager();
  sub_10002F90C(&qword_10015B6B0, (void (*)(uint64_t))type metadata accessor for PolicyManager);
  sub_10003086C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  sub_100003A70(&qword_10015B468);
  sub_100030AC8();
  *uint64_t v1 = v3;
  v1[1] = sub_10001D0D0;
  uint64_t v4 = *(void *)(v0 + 24);
  return Task.value.getter(v2, v4, (char *)&type metadata for () + 8, v2, &protocol self-conformance witness table for Error);
}

uint64_t sub_10001D0D0()
{
  sub_1000086EC();
  sub_10002FC48();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10001D1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_10001D1F4, a4, 0);
}

uint64_t sub_10001D1F4()
{
  sub_1000086EC();
  type metadata accessor for InferenceProviderAssetManager(0);
  sub_10002F90C(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  Actor.assertIsolated(_:file:line:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = sub_100003A70(&qword_10015B938);
  uint64_t v3 = sub_100003A70(&qword_10015B468);
  *uint64_t v1 = v0;
  v1[1] = sub_10001D344;
  uint64_t v4 = *(void *)(v0 + 32);
  return Task.value.getter(v0 + 16, v4, v2, v3, &protocol self-conformance witness table for Error);
}

uint64_t sub_10001D344()
{
  sub_1000086EC();
  sub_10002FC48();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10001D448()
{
  sub_1000086E0();
  swift_bridgeObjectRelease();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10001D4A0()
{
  sub_1000086E0();
  *(void *)(v0 + 16) = 0;
  swift_bridgeObjectRelease();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10001D4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10001D51C, a4, 0);
}

uint64_t sub_10001D51C()
{
  sub_1000086E0();
  type metadata accessor for InferenceProviderExtensionConnection(0);
  sub_10002F90C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  sub_10003086C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  sub_100003A70(&qword_10015B468);
  sub_100030AC8();
  *uint64_t v1 = v3;
  v1[1] = sub_10001D0D0;
  uint64_t v4 = *(void *)(v0 + 24);
  return Task.value.getter(v2, v4, (char *)&type metadata for () + 8, v2, &protocol self-conformance witness table for Error);
}

uint64_t sub_10001D638()
{
  return 0;
}

char *sub_10001D644(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    uint64_t result = (char *)sub_10002FB48();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10002FC18(a3, result);
  }
  return result;
}

void sub_10001D6A4(uint64_t a1, uint64_t a2)
{
}

char *sub_10001D6BC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    uint64_t result = (char *)sub_10002FB48();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10002FC18(a3, result);
  }
  return result;
}

void sub_10001D71C(uint64_t a1, uint64_t a2)
{
}

void sub_10001D734(uint64_t a1, uint64_t a2)
{
}

char *sub_10001D74C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    uint64_t result = (char *)sub_10002FB48();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10002FC18(a3, result);
  }
  return result;
}

char *sub_10001D7A8(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    sub_10002FA74();
    __src = (char *)sub_10002FB48();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void sub_10001D81C(uint64_t a1, uint64_t a2)
{
}

void sub_10001D828(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_10002FB48();
    __break(1u);
  }
  else
  {
    sub_1000308A8();
    if (v6 && (sub_100003A70(v5), sub_10002FB84(), v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_1000300B0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      sub_100003A70(v5);
      sub_1000300B0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *sub_10001D90C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    uint64_t result = (char *)sub_10002FB48();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10002FC18(a3, result);
  }
  return result;
}

void sub_10001D970(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_10002FB48();
    __break(1u);
  }
  else
  {
    sub_1000308A8();
    if (v6 && (v5(0), sub_10002FB84(), v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_1000300B0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      v5(0);
      sub_1000300B0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

uint64_t sub_10001DA5C(uint64_t a1, uint64_t a2)
{
  return sub_10001DDA0(a1, a2);
}

uint64_t sub_10001DA74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DB24(uint64_t a1, uint64_t a2)
{
  return sub_10001DDA0(a1, a2);
}

uint64_t sub_10001DB3C(uint64_t a1, uint64_t a2)
{
  return sub_10001DE5C(a1, a2);
}

uint64_t sub_10001DB54(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  if (a3 + 40 * a2 > a1 && a1 + 40 * a2 > a3)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DC08(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  sub_100030384();
  sub_100003A70(v3);
  sub_10002FB84();
  sub_100030B08();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }
  sub_10003009C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DCC8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  sub_100030384();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }
  sub_100003A70(&qword_10015BB38);
  sub_10003009C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DD88(uint64_t a1, uint64_t a2)
{
  return sub_10001DDA0(a1, a2);
}

uint64_t sub_10001DDA0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  sub_100030384();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }
  v5(0);
  sub_10003009C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DE5C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10002FA74();
    sub_100030054();
LABEL_11:
    uint64_t result = sub_10002FE30();
    __break(1u);
    return result;
  }
  sub_100030384();
  v3(0);
  sub_10002FB84();
  sub_100030B08();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_10002FA74();
    sub_100030044();
    goto LABEL_11;
  }
  sub_10003009C();

  return swift_arrayInitWithCopy();
}

uint64_t sub_10001DF20(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10001DFF4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10002E3C8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10002E3C8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100008130((uint64_t)v12);
  return v7;
}

uint64_t sub_10001DFF4(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10001E14C((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_10001E224(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_10001E14C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_10001E224(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10001E2BC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = sub_10001E498(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_10001E498((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10001E2BC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_10001E430(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10001E430(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100003A70(&qword_10015B700);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_10001E498(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003A70(&qword_10015B700);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10001D7A8(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001E570(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10001E570(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

unint64_t sub_10001E648(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10001E884(a1, a2, v4);
}

unint64_t sub_10001E6C0(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100121BC0();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10001E968(a1, v2);
}

void sub_10001E72C(uint64_t a1)
{
}

void sub_10001E748(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
}

unint64_t sub_10001E7EC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10002F90C(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10001EBE8(a1, v2);
}

unint64_t sub_10001E884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001E968(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for DaemonRequest();
    swift_retain();
    char v6 = sub_100121AB0();
    swift_release();
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = ~v4;
      for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
      {
        swift_retain();
        char v8 = sub_100121AB0();
        swift_release();
        if (v8) {
          break;
        }
      }
    }
  }
  return i;
}

void sub_10001EA7C()
{
  sub_10002FAAC();
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  uint64_t v4 = v3;
  uint64_t v23 = v5;
  uint64_t v6 = sub_100003A70(v1);
  sub_10000ED60();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v0;
  sub_1000304C4();
  unint64_t v14 = v4 & ~v13;
  uint64_t v22 = v15;
  if ((*(void *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v16 = ~v13;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v18 = *(void *)(v8 + 72);
    do
    {
      v17(v12, *(void *)(v24 + 48) + v18 * v14, v6);
      sub_10000841C(v26, v25);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100030420();
      v20();
      if (v19) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v16;
    }
    while (((*(void *)(v22 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  sub_10002FAC4();
}

unint64_t sub_10001EBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_10002F90C(&qword_10015B7F8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void sub_10001EDA8(char a1, uint64_t a2, char a3)
{
  sub_10001F294(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

void sub_10001EDC8(char a1, uint64_t a2, char a3)
{
  sub_10001F610(a1, a2, a3, *v3, &qword_10015B748, &qword_10015B228);
  *uint64_t v3 = v4;
}

void sub_10001EDF8()
{
  sub_10001F454();
  void *v0 = v1;
}

char *sub_10001EE5C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10001F368(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_10001EE7C()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001EEE0()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001EF44()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001EFA8()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F00C()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F070()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F0D4()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F138(char a1, uint64_t a2, char a3)
{
  sub_10001F610(a1, a2, a3, *v3, &qword_10015B7D8, &qword_10015B408);
  *uint64_t v3 = v4;
}

void sub_10001F168()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F1CC()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F230()
{
  sub_10001F454();
  void *v0 = v1;
}

void sub_10001F294(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100030828();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_100003A70(&qword_10015B718);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = (char *)(a4 + 32);
  if (a1)
  {
    sub_10001D644(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001DA74((unint64_t)v14, v9, (unint64_t)v13);
  }
  swift_release();
}

char *sub_10001F368(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003A70(&qword_10015B810);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10001D6BC(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001DB54((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_10001F454()
{
  sub_10002FAAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  if (v8)
  {
    sub_100030828();
    if (v10 != v11)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v9 = v0;
  }
  uint64_t v12 = *(void *)(v5 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v5 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  sub_100003A70(v1);
  uint64_t v14 = v3(0);
  sub_10002FA4C(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v19[2] = v12;
  void v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_17:
  v3(0);
  sub_100030B1C();
  uint64_t v23 = v5 + v22;
  if (v7)
  {
    sub_10001D970(v23, v12);
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    sub_10001DE5C(v23, v12);
  }
  swift_release();
  sub_10002FAC4();
}

void sub_10001F5C8()
{
}

void sub_10001F610(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    sub_100030828();
    if (v10 != v11)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  sub_100003A70(a5);
  uint64_t v14 = sub_100003A70(a6);
  sub_10002FA4C(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v19[2] = v12;
  void v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_17:
  uint64_t v22 = sub_100003A70(a6);
  sub_1000301E0(v22);
  sub_100030B1C();
  uint64_t v24 = a4 + v23;
  if (a1)
  {
    sub_10001D828(v24, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001DC08(v24, v12);
  }
  swift_release();
}

uint64_t sub_10001F758(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for Policy();
  uint64_t v5 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v6);
  uint64_t v49 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100003A70(&qword_10015B850);
  int v48 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_40;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v45 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v47 = v5;
  uint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  if (!v14) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v18 << 6))
  {
    uint64_t v25 = *(void *)(v8 + 56);
    uint64_t v26 = v8;
    uint64_t v27 = (uint64_t *)(*(void *)(v8 + 48) + 16 * i);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = *(void *)(v47 + 72);
    uint64_t v31 = v25 + v30 * i;
    if (v48)
    {
      (*v15)(v49, v31, v50);
    }
    else
    {
      (*v46)(v49, v31, v50);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) == 0)
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v32) >> 6;
      while (++v34 != v37 || (v36 & 1) == 0)
      {
        BOOL v38 = v34 == v37;
        if (v34 == v37) {
          unint64_t v34 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v34);
        if (v39 != -1)
        {
          unint64_t v35 = __clz(__rbit64(~v39)) + (v34 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    unint64_t v35 = __clz(__rbit64((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)(v16 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    BOOL v40 = (void *)(*(void *)(v10 + 48) + 16 * v35);
    *BOOL v40 = v28;
    v40[1] = v29;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v30 * v35, v49, v50);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v26;
    if (v14) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_42;
    }
    if (v21 >= v44)
    {
      swift_release();
      uint64_t v3 = v43;
      uint64_t v22 = v45;
      goto LABEL_35;
    }
    uint64_t v22 = v45;
    unint64_t v23 = v45[v21];
    ++v18;
    if (!v23)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v44) {
        goto LABEL_33;
      }
      unint64_t v23 = v45[v18];
      if (!v23) {
        break;
      }
    }
LABEL_18:
    unint64_t v14 = (v23 - 1) & v23;
  }
  int64_t v24 = v21 + 2;
  if (v24 < v44)
  {
    unint64_t v23 = v45[v24];
    if (!v23)
    {
      while (1)
      {
        int64_t v18 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_43;
        }
        if (v18 >= v44) {
          goto LABEL_33;
        }
        unint64_t v23 = v45[v18];
        ++v24;
        if (v23) {
          goto LABEL_18;
        }
      }
    }
    int64_t v18 = v24;
    goto LABEL_18;
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v43;
LABEL_35:
  if (v48)
  {
    uint64_t v41 = 1 << *(unsigned char *)(v8 + 32);
    if (v41 >= 64) {
      sub_10001FB34(0, (unint64_t)(v41 + 63) >> 6, v22);
    }
    else {
      *uint64_t v22 = -1 << v41;
    }
    *(void *)(v8 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10001FB34(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_10001FB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Policy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a4, v7);
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_10001FBD0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_100003A70(&qword_10015B830) + 48);
  uint64_t v5 = sub_100003A70(&qword_10015B838);
  uint64_t result = sub_10001FB50((uint64_t)a2 + *(int *)(v5 + 48), *a1, a1[1], v4);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t sub_10001FC34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, char *, uint64_t))
{
  uint64_t v74 = a8;
  v69[3] = a7;
  uint64_t v75 = a6;
  uint64_t v81 = a5;
  uint64_t v77 = type metadata accessor for Policy();
  sub_10000ED60();
  uint64_t v14 = v13;
  __chkstk_darwin(v15, v16);
  sub_100030158();
  uint64_t v73 = v17;
  sub_100030514();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)v69 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)v69 - v24;
  uint64_t v26 = sub_100003A70(&qword_10015B840);
  uint64_t v27 = sub_10002FDD0(v26);
  __chkstk_darwin(v27, v28);
  sub_10003094C();
  sub_10002DF14(a1, a2, a3, v86);
  v69[2] = a1;
  swift_bridgeObjectRetain();
  v69[1] = a3;
  swift_retain();
  sub_10002DF50((uint64_t)v8);
  uint64_t v29 = sub_100003A70(&qword_10015B838);
  if (sub_100006AE8((uint64_t)v8, 1, v29) == 1)
  {
LABEL_2:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10002EAF0();
    uint64_t v30 = sub_1000300F0();
    v31(v30);
    return swift_release();
  }
  uint64_t v79 = *(void *)(v14 + 32);
  uint64_t v71 = v14 + 16;
  Swift::Bool v72 = (void (**)(void))(v14 + 8);
  uint64_t v80 = v14 + 32;
  uint64_t v70 = (void (**)(unint64_t, char *, uint64_t))(v14 + 40);
  uint64_t v76 = v8;
  while (1)
  {
    uint64_t v33 = v14;
    uint64_t v35 = v8[1];
    uint64_t v84 = *v8;
    uint64_t v34 = v84;
    uint64_t v85 = v35;
    char v36 = v25;
    sub_100030B4C();
    v37();
    uint64_t v38 = *v81;
    unint64_t v40 = sub_10001E648(v34, v35);
    uint64_t v41 = *(void *)(v38 + 16);
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v63 = sub_1000300F0();
      v64(v63);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_22;
    }
    char v44 = v39;
    if (*(void *)(v38 + 24) >= v43)
    {
      if ((a4 & 1) == 0)
      {
        sub_100003A70(&qword_10015B848);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_10001F758(v43, a4 & 1);
      unint64_t v45 = sub_10001E648(v34, v35);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_21;
      }
      unint64_t v40 = v45;
    }
    uint64_t v47 = *v81;
    if (v44) {
      break;
    }
    *(void *)(v47 + 8 * (v40 >> 6) + 64) |= 1 << v40;
    char v54 = (uint64_t *)(*(void *)(v47 + 48) + 16 * v40);
    *char v54 = v34;
    v54[1] = v35;
    uint64_t v14 = v33;
    uint64_t v25 = v36;
    sub_100030B4C();
    v55();
    uint64_t v56 = *(void *)(v47 + 16);
    BOOL v57 = __OFADD__(v56, 1);
    uint64_t v58 = v56 + 1;
    if (v57) {
      goto LABEL_20;
    }
    *(void *)(v47 + 16) = v58;
LABEL_15:
    uint64_t v8 = v76;
    sub_10002DF50((uint64_t)v76);
    uint64_t v59 = sub_100003A70(&qword_10015B838);
    a4 = 1;
    if (sub_100006AE8((uint64_t)v8, 1, v59) == 1) {
      goto LABEL_2;
    }
  }
  uint64_t v14 = v33;
  unint64_t v48 = *(void *)(v33 + 72) * v40;
  uint64_t v49 = v73;
  uint64_t v50 = v77;
  sub_100030274();
  v51();
  uint64_t v25 = v36;
  uint64_t v52 = v78;
  v74(v49, v36, v75);
  uint64_t v78 = v52;
  if (!v52)
  {
    uint64_t v53 = *v72;
    ((void (*)(uint64_t, uint64_t))*v72)(v49, v50);
    ((void (*)(char *, uint64_t))v53)(v36, v50);
    swift_bridgeObjectRelease();
    (*v70)(*(void *)(*v81 + 56) + v48, v22, v50);
    goto LABEL_15;
  }
  uint64_t v60 = *v72;
  sub_100030420();
  v60();
  v86[9] = v78;
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_100030420();
    v60();
    swift_bridgeObjectRelease();
    sub_10002EAF0();
    swift_release();
    swift_errorRelease();
    uint64_t v61 = sub_1000300F0();
    return v62(v61);
  }
LABEL_22:
  uint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v65._object = (void *)0x800000010012B2D0;
  v65._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v65);
  _print_unlocked<A, B>(_:_:)();
  v66._countAndFlagsBits = 39;
  v66._object = (void *)0xE100000000000000;
  String.append(_:)(v66);
  uint64_t v67 = sub_1000300F0();
  v68(v67);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

#error "1000202AC: call analysis failed (funcsize=136)"

#error "1000205C8: call analysis failed (funcsize=136)"

void sub_100020654()
{
  sub_100030064();
  Swift::Int v4 = v3;
  Swift::Int v6 = v5;
  sub_100030A60();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = v7 & ~v8;
  sub_100030A20();
  if ((v10 & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_1000267F4(v6, v4, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v1 = v21;
    swift_bridgeObjectRelease();
    Swift::Int *v0 = v6;
    v0[1] = v4;
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(v2 + 48);
  sub_100030A34(v11 + 16 * v9);
  BOOL v13 = v13 && v12 == v4;
  if (!v13 && (sub_1000304A8() & 1) == 0)
  {
    uint64_t v16 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v16;
      sub_100030A20();
      if ((v17 & 1) == 0) {
        goto LABEL_16;
      }
      sub_100030A34(v11 + 16 * v9);
      BOOL v19 = v13 && v18 == v4;
    }
    while (!v19 && (sub_1000304A8() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = (Swift::Int *)(*(void *)(*v1 + 48) + 16 * v9);
  Swift::Int v15 = v14[1];
  Swift::Int *v0 = *v14;
  v0[1] = v15;
  swift_bridgeObjectRetain();
LABEL_17:
  sub_100030080();
}

uint64_t sub_1000207A4(uint64_t a1, char *a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    Swift::Int v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_10002F90C(&qword_10015B258, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      Swift::Int v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        Swift::Int v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Int v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *Swift::Int v3 = 0x8000000000000000;
    sub_100026990((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *Swift::Int v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

void sub_100020AC8()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  Swift::Int v4 = v3;
  type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  __chkstk_darwin(v5, v6);
  sub_10000F0C0();
  uint64_t v9 = (void *)(v7 - v8);
  __chkstk_darwin(v10, v11);
  sub_1000304F0();
  uint64_t v12 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100070998();
  Hasher._finalize()();
  sub_1000304C4();
  unint64_t v15 = v14 & ~v13;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v28 = ~v13;
    while (1)
    {
      sub_10002F814();
      BOOL v16 = *v9 == *v4 && v9[1] == v4[1];
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        char v17 = (void *)v9[2];
        uint64_t v18 = (void *)v4[2];
        unint64_t v19 = v17[2];
        if (v19 == v18[2])
        {
          if (v19) {
            BOOL v20 = v17 == v18;
          }
          else {
            BOOL v20 = 1;
          }
          if (v20) {
            goto LABEL_14;
          }
          BOOL v21 = v17[4] == v18[4] && v17[5] == v18[5];
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            if (v19 == 1) {
              goto LABEL_14;
            }
            BOOL v22 = v17[6] == v18[6] && v17[7] == v18[7];
            if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
          }
        }
      }
LABEL_44:
      sub_10002F868();
      unint64_t v15 = (v15 + 1) & v28;
      if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v0;
        goto LABEL_47;
      }
    }
    if (v19 != 2)
    {
      uint64_t v23 = v17 + 9;
      uint64_t v24 = v18 + 9;
      unint64_t v25 = 2;
      while (v25 < v19)
      {
        BOOL v26 = *(v23 - 1) == *(v24 - 1) && *v23 == *v24;
        if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_44;
        }
        ++v25;
        v23 += 2;
        v24 += 2;
        if (v19 == v25) {
          goto LABEL_14;
        }
      }
      __break(1u);
      return;
    }
LABEL_14:
    if (sub_1000716D8(v9[3], v4[3]) & 1) != 0 && (static AssetCost.== infix(_:_:)())
    {
      sub_1000308EC();
      if (v16)
      {
        sub_1000308EC();
        if (v16)
        {
          sub_1000308EC();
          if (v16)
          {
            sub_10002F868();
            swift_bridgeObjectRelease();
            sub_10002F868();
            sub_10002F814();
            goto LABEL_48;
          }
        }
      }
    }
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
LABEL_47:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10002F814();
  uint64_t v29 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_100026C4C(v1, v15, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v29;
  swift_bridgeObjectRelease();
  sub_10002F8B8();
LABEL_48:
  sub_10002FAC4();
}

#error "10002102C: call analysis failed (funcsize=136)"

uint64_t sub_1000210B8(uint64_t a1, char *a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    unint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      BOOL v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_10002F90C(&qword_10015B980, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      unint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        Swift::Int v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *Swift::Int v3 = 0x8000000000000000;
    sub_100027204((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *Swift::Int v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1000213DC(uint64_t a1, Swift::UInt a2, int a3)
{
  uint64_t v6 = v4;
  sub_100030A60();
  Hasher._combine(_:)(a2);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v11 = v9 & ~v10;
  if ((*(void *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v13 = 16 * v11;
    if (*(void *)(v12 + 16 * v11) == a2)
    {
LABEL_6:
      swift_release();
      uint64_t v15 = *(void *)(*v6 + 48) + v13;
      uint64_t v16 = *(void *)v15;
      LODWORD(v15) = *(_DWORD *)(v15 + 8);
      *(void *)uint64_t v3 = v16;
      *(_DWORD *)(v3 + 8) = v15;
      swift_retain();
      return 0;
    }
    uint64_t v14 = ~v10;
    while (1)
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        break;
      }
      uint64_t v13 = 16 * v11;
      if (*(void *)(v12 + 16 * v11) == a2) {
        goto LABEL_6;
      }
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  Swift::UInt v19 = swift_retain();
  sub_1000274C0(v19, a3, v11, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v20;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v3 = a2;
  *(_DWORD *)(v3 + 8) = a3;
  return 1;
}

uint64_t sub_10002152C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.AssetState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015BAF8, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      BOOL v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_10002F90C(&qword_10015BB00, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100027624((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100021850(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.SessionState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015BAD8, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      BOOL v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_10002F90C(&qword_10015BAE0, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000278E0((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100021B74(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for StateDump.RequestState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015BAB0, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      BOOL v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_10002F90C(&qword_10015BAB8, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100027B9C((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

void sub_100021E98()
{
}

void sub_100021EBC()
{
  sub_10002FAAC();
  uint64_t v43 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  uint64_t v10 = v9;
  uint64_t v38 = v11;
  uint64_t v12 = sub_100003A70(v6);
  sub_10000ED60();
  uint64_t v14 = v13;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = v5;
  BOOL v42 = v7;
  uint64_t v19 = sub_10000841C(v5, v7);
  swift_bridgeObjectRetain();
  uint64_t v44 = v10;
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_1000304D0();
  sub_100030B60();
  uint64_t v41 = v22;
  uint64_t v24 = *(void *)(v22 + v23) >> v19;
  uint64_t v37 = v3;
  if (v24)
  {
    void v34[2] = v14;
    uint64_t v35 = v0;
    uint64_t v39 = ~v21;
    unint64_t v25 = *(void (**)(void, void, void))(v14 + 16);
    uint64_t v40 = *(void *)(v14 + 72);
    BOOL v26 = (void (**)(void))(v14 + 8);
    v34[1] = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v27 = v20;
      uint64_t v28 = v40 * v19;
      uint64_t v29 = v25;
      v25(v18, *(void *)(v20 + 48) + v40 * v19, v12);
      sub_10000841C(v43, v42);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *v26;
      sub_100030420();
      v31();
      if (v30) {
        break;
      }
      uint64_t v19 = (v19 + 1) & v39;
      sub_100030B40();
      sub_100030BF0();
      unint64_t v25 = v29;
      uint64_t v20 = v27;
      if ((v32 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100030420();
    v31();
    v29(v38, *(void *)(*v35 + 48) + v28, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void (**)(void, void, void))(v14 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_1000308E0();
    ((void (*)(void))v25)();
    uint64_t v45 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    sub_100028650();
    *uint64_t v8 = v45;
    swift_bridgeObjectRelease();
    sub_1000308E0();
    v33();
  }
  sub_10002FAC4();
}

uint64_t sub_100022184(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  uint64_t v7 = *(void *)(active - 8);
  __chkstk_darwin(active, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002F90C(&qword_10015BA80, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, active);
      sub_10002F90C(&qword_10015BA88, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, active);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      uint64_t v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, active);
    v21(v30, *(void *)(*v29 + 48) + v20, active);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v34;
    v15(v10, v34, active);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100027E58((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, active);
    return 1;
  }
}

void sub_1000224A8()
{
  sub_10002FAAC();
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  sub_100030194();
  uint64_t v6 = type metadata accessor for StateDump.InferenceProviderState();
  sub_10000ED60();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  sub_100030298();
  uint64_t v11 = *v1;
  unint64_t v12 = sub_10002F90C(&qword_10015BA60, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_1000304D0();
  sub_100030B60();
  if ((*(void *)(v15 + v14) >> v12))
  {
    uint64_t v26 = v0;
    uint64_t v27 = ~v13;
    uint64_t v25 = v8;
    uint64_t v18 = *(void (**)(void, void, void))(v8 + 16);
    uint64_t v17 = v8 + 16;
    uint64_t v16 = v18;
    uint64_t v28 = *(void *)(v17 + 56);
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v16;
      v16(v2, *(void *)(v11 + 48) + v28 * v12, v6);
      sub_10002F90C(&qword_10015BA68, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *(void (**)(void))(v17 - 8);
      sub_100030420();
      v22();
      if (v21) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      sub_100030B40();
      sub_100030BF0();
      uint64_t v11 = v19;
      uint64_t v16 = v20;
      if ((v23 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v0 = v26;
        uint64_t v8 = v25;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100030420();
    v22();
    v20(v26, *(void *)(*v3 + 48) + v28 * v12, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(void, void, void))(v8 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16(v2, v5, v6);
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100028114(v2, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v0, v5, v6);
  }
  sub_10002FAC4();
}

void sub_100022764()
{
  sub_10002FAAC();
  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  sub_10000ED60();
  __chkstk_darwin(v3, v4);
  sub_100030964();
  unint64_t v12 = v0;
  uint64_t v5 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  UUID.hash(into:)();
  Hasher._finalize()();
  sub_1000304D0();
  sub_100030B60();
  if ((*(void *)(v5 + 56 + v7) >> v2))
  {
    uint64_t v8 = ~v6;
    while (1)
    {
      sub_10002F814();
      char v9 = static UUID.== infix(_:_:)();
      sub_10002F868();
      if (v9) {
        break;
      }
      unint64_t v2 = (v2 + 1) & v8;
      sub_100030B40();
      if (((*(void *)(v5 + 56 + v10) >> v2) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_10002F868();
    sub_10002F814();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10002F814();
    uint64_t v13 = *v12;
    *unint64_t v12 = 0x8000000000000000;
    sub_1000283D0(v1, v2, isUniquelyReferenced_nonNull_native);
    *unint64_t v12 = v13;
    swift_bridgeObjectRelease();
    sub_10002F8B8();
  }
  sub_10002FAC4();
}

void sub_1000229A8()
{
}

uint64_t sub_1000229CC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10002EE10();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_100022F1C(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_10002606C();
      char v23 = v28;
    }
    else
    {
      char v23 = (void *)v22;
      id v24 = v8;
    }
    sub_1000263A8((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v10 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      sub_10002EE10();
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v19 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000288A0((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100022C48(uint64_t a1, uint64_t a2)
{
  return sub_100022CD8(a1, a2, &qword_10015B288, type metadata accessor for InferenceProviderAsset, sub_1000C95D4, sub_1000C95D4);
}

uint64_t sub_100022C90(uint64_t a1, uint64_t a2)
{
  return sub_100022CD8(a1, a2, &qword_10015B260, type metadata accessor for DaemonRequest, sub_100121BC0, sub_100121BC0);
}

#error "100022DAC: call analysis failed (funcsize=127)"

uint64_t sub_100022ED4(uint64_t a1, uint64_t a2)
{
  return sub_100022CD8(a1, a2, &qword_10015B298, type metadata accessor for DaemonSession, sub_1000E6F68, sub_1000E6F68);
}

Swift::Int sub_100022F1C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptySetSingleton;
  }
  sub_100003A70(&qword_10015B8D0);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  sub_10002EE10();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      sub_10002606C();
      uint64_t v2 = v14;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_1000230F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_100023C8C(a1, (uint64_t)&qword_10015B288, (uint64_t)sub_1000C95D4, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

uint64_t sub_100023114()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B710);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_10001FB34(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000233F0()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  BOOL v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015B248);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1000237E8()
{
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v31 = *(void *)(v1 - 8);
  unint64_t v32 = (int *)v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v0;
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015B7E0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    unint64_t v28 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & v9;
    int64_t v29 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v30 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    for (v11 &= v11 - 1; ; uint64_t v11 = (v15 - 1) & v15)
    {
      sub_10002F8B8();
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *((void *)v4 + 2);
      Hasher._combine(_:)(*(void *)(v17 + 16));
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v33 = v11;
        uint64_t v19 = v5;
        swift_bridgeObjectRetain();
        uint64_t v20 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        uint64_t v5 = v19;
        uint64_t v11 = v33;
      }
      uint64_t v21 = *((void *)v4 + 3);
      swift_bridgeObjectRetain();
      sub_1000717DC((uint64_t)v34, v21);
      swift_bridgeObjectRelease();
      uint64_t v22 = v32;
      type metadata accessor for AssetCost();
      sub_10002F90C(&qword_10015B7E8, (void (*)(uint64_t))&type metadata accessor for AssetCost);
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(v4[v22[8]]);
      Hasher._combine(_:)(v4[v22[9]]);
      Hasher._combine(_:)(v4[v22[10]]);
      Hasher._finalize()();
      uint64_t v23 = v30;
      unint64_t v24 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v23 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      uint64_t result = sub_10002F8B8();
      ++*(void *)(v7 + 16);
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_34:
        __break(1u);
        return result;
      }
      if (v14 >= v29) {
        goto LABEL_27;
      }
      uint64_t v15 = v28[v14];
      ++v13;
      if (!v15)
      {
        int64_t v13 = v14 + 1;
        if (v14 + 1 >= v29) {
          goto LABEL_27;
        }
        uint64_t v15 = v28[v13];
        if (!v15)
        {
          int64_t v13 = v14 + 2;
          if (v14 + 2 >= v29) {
            goto LABEL_27;
          }
          uint64_t v15 = v28[v13];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v29)
            {
LABEL_27:
              swift_release();
              uint64_t v25 = v27;
              uint64_t v26 = 1 << *(unsigned char *)(v5 + 32);
              if (v26 > 63) {
                sub_10001FB34(0, (unint64_t)(v26 + 63) >> 6, v28);
              }
              else {
                *unint64_t v28 = -1 << v26;
              }
              *(void *)(v5 + 16) = 0;
              uint64_t result = swift_release();
              goto LABEL_32;
            }
            uint64_t v15 = v28[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v13 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_34;
                }
                if (v13 >= v29) {
                  goto LABEL_27;
                }
                uint64_t v15 = v28[v13];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v13 = v16;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  uint64_t result = swift_release();
  uint64_t v25 = v27;
LABEL_32:
  *uint64_t v25 = v7;
  return result;
}

void sub_100023C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_100023C8C(a1, (uint64_t)&qword_10015B298, (uint64_t)sub_1000E6F68, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

void sub_100023C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10002FFC4();
  a31 = v33;
  a32 = v34;
  char v36 = v35;
  uint64_t v37 = *v32;
  sub_100003A70(v38);
  uint64_t v39 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v37 + 16))
  {
    sub_100030344();
    unint64_t v62 = (void *)(v37 + 56);
    sub_100030AD4();
    unint64_t v42 = v41 & v40;
    int64_t v44 = (unint64_t)(v43 + 63) >> 6;
    swift_retain();
    int64_t v45 = 0;
    if (!v42) {
      goto LABEL_4;
    }
LABEL_3:
    unint64_t v46 = __clz(__rbit64(v42));
    v42 &= v42 - 1;
    for (unint64_t i = v46 | (v45 << 6); ; unint64_t i = v52 + (v45 << 6))
    {
      uint64_t v53 = *(void *)(*(void *)(v37 + 48) + 8 * i);
      Hasher.init(_seed:)();
      v36(&a12);
      Hasher._finalize()();
      sub_1000305C8();
      if (v54)
      {
        sub_10002FD4C();
        while (1)
        {
          sub_10003064C();
          if (v54)
          {
            if (v56) {
              break;
            }
          }
          if (v57 == v58) {
            uint64_t v57 = 0;
          }
          if (*(void *)(v39 + 56 + 8 * v57) != -1)
          {
            sub_10002FD38();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10002FD60();
LABEL_28:
      sub_1000303E0(v55);
      *(void *)(*(void *)(v39 + 48) + 8 * v59) = v53;
      ++*(void *)(v39 + 16);
      if (v42) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v48 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        goto LABEL_36;
      }
      if (v48 >= v44) {
        goto LABEL_30;
      }
      ++v45;
      if (!v62[v48])
      {
        int64_t v45 = v48 + 1;
        if (v48 + 1 >= v44) {
          goto LABEL_30;
        }
        if (!v62[v45])
        {
          int64_t v45 = v48 + 2;
          if (v48 + 2 >= v44) {
            goto LABEL_30;
          }
          if (!v62[v45])
          {
            int64_t v49 = v48 + 3;
            if (v49 >= v44)
            {
LABEL_30:
              swift_release();
              uint64_t v60 = 1 << *(unsigned char *)(v37 + 32);
              if (v60 > 63)
              {
                sub_10001FB34(0, (unint64_t)(v60 + 63) >> 6, v62);
              }
              else
              {
                sub_1000304C4();
                *unint64_t v62 = v61;
              }
              *(void *)(v37 + 16) = 0;
              break;
            }
            if (!v62[v49])
            {
              while (1)
              {
                int64_t v45 = v49 + 1;
                if (__OFADD__(v49, 1)) {
                  goto LABEL_37;
                }
                if (v45 >= v44) {
                  goto LABEL_30;
                }
                ++v49;
                if (v62[v45]) {
                  goto LABEL_17;
                }
              }
            }
            int64_t v45 = v49;
          }
        }
      }
LABEL_17:
      sub_100030534();
      unint64_t v42 = v51 & v50;
    }
  }
  swift_release();
  *unint64_t v32 = v39;
  sub_10002FFA8();
}

uint64_t sub_100023ED8()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for InferenceProviderAssetDescriptor();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  unint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015B988);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    uint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1000242D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B7C8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 56);
    unint64_t v30 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v6;
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    if ((v8 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
    {
      uint64_t v17 = *(void *)(v2 + 48) + 16 * i;
      Swift::UInt v18 = *(void *)v17;
      int v19 = *(_DWORD *)(v17 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = *(void *)(v4 + 48) + 16 * v23;
      *(void *)uint64_t v28 = v18;
      *(_DWORD *)(v28 + 8) = v19;
      ++*(void *)(v4 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v5;
      if (!v15)
      {
        int64_t v5 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v5];
        if (!v15)
        {
          int64_t v5 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v5];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_32:
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_10001FB34(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *unint64_t v30 = -1 << v29;
              }
              uint64_t v1 = v0;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v5 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v10) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v5];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v9 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000245A4()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for StateDump.AssetState();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  unint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015BB08);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015BAF8, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_10002499C()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for StateDump.SessionState();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  unint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015BAE8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015BAD8, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100024D94()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for StateDump.RequestState();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  unint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015BAC0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    char v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015BAB0, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

void sub_10002518C()
{
  sub_10002FAAC();
  uint64_t v47 = v1;
  int64_t v48 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v51 = sub_100003A70(v1);
  sub_10000ED60();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  sub_100030144();
  uint64_t v50 = v10;
  uint64_t v11 = *v0;
  sub_100003A70(v4);
  uint64_t v12 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v11 + 16))
  {
    sub_100030344();
    int64_t v44 = (void *)(v11 + 56);
    sub_100030A80();
    uint64_t v15 = v14 & v13;
    int64_t v43 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v46 = v7;
    uint64_t v17 = v12 + 56;
    swift_retain();
    uint64_t v18 = 0;
    uint64_t v45 = v12;
    if (!v15) {
      goto LABEL_4;
    }
LABEL_3:
    sub_1000309EC();
    uint64_t v49 = v19;
    for (uint64_t i = v20 | (v19 << 6); ; uint64_t i = v28 + (v27 << 6))
    {
      uint64_t v29 = v11;
      uint64_t v30 = *(void *)(v11 + 48);
      uint64_t v31 = *(void *)(v46 + 72);
      unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
      v32(v50, v30 + v31 * i, v51);
      uint64_t v12 = v45;
      sub_10000841C(v48, v47);
      dispatch thunk of Hashable._rawHashValue(seed:)();
      sub_1000303B4();
      if (((v35 << v34) & ~*(void *)(v17 + 8 * v33)) == 0)
      {
        sub_10002FD4C();
        while (1)
        {
          sub_10003064C();
          if (v40)
          {
            if (v37) {
              break;
            }
          }
          if (v38 == v39) {
            uint64_t v38 = 0;
          }
          if (*(void *)(v17 + 8 * v38) != -1)
          {
            sub_10002FD38();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      sub_10002FD60();
LABEL_27:
      *(void *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
      v32(*(void *)(v45 + 48) + v36 * v31, v50, v51);
      ++*(void *)(v45 + 16);
      uint64_t v11 = v29;
      uint64_t v18 = v49;
      if (v15) {
        goto LABEL_3;
      }
LABEL_4:
      int64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_35;
      }
      if (v22 >= v43) {
        goto LABEL_29;
      }
      if (!v44[v22])
      {
        if (v18 + 2 >= v43) {
          goto LABEL_29;
        }
        if (!v44[v18 + 2])
        {
          if (v18 + 3 >= v43) {
            goto LABEL_29;
          }
          if (!v44[v18 + 3])
          {
            uint64_t v23 = v18 + 4;
            if (v18 + 4 >= v43)
            {
LABEL_29:
              swift_release();
              uint64_t v5 = v0;
              uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
              if (v41 > 63)
              {
                sub_10001FB34(0, (unint64_t)(v41 + 63) >> 6, v44);
              }
              else
              {
                sub_1000304C4();
                void *v44 = v42;
              }
              *(void *)(v11 + 16) = 0;
              break;
            }
            if (!v44[v23])
            {
              do
              {
                int64_t v24 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_36;
                }
                if (v24 >= v43) {
                  goto LABEL_29;
                }
                ++v23;
              }
              while (!v44[v24]);
            }
          }
        }
      }
      sub_100030534();
      uint64_t v15 = v26 & v25;
      uint64_t v49 = v27;
    }
  }
  swift_release();
  *uint64_t v5 = v12;
  sub_10002FAC4();
}

uint64_t sub_1000254D0()
{
  uint64_t v1 = v0;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  uint64_t v2 = *(void *)(active - 8);
  __chkstk_darwin(active, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015BA90);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    unint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    uint64_t v15 = v42;
    uint64_t v16 = active;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015BA80, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, active);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1000258C8()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for StateDump.InferenceProviderState();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015BA70);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    unint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    uint64_t v15 = v42;
    uint64_t v16 = v43;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    int64_t v41 = v14;
    for (unint64_t i = v17 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
    {
      uint64_t v23 = v5;
      uint64_t v24 = *(void *)(v5 + 48);
      uint64_t v25 = *(void *)(v40 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v26(v15, v24 + v25 * i, v16);
      uint64_t v7 = v39;
      sub_10002F90C(&qword_10015BA60, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v7 + 48) + v30 * v25, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v23;
      int64_t v14 = v41;
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_38;
      }
      if (v19 >= v37) {
        goto LABEL_32;
      }
      unint64_t v20 = v38[v19];
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_32;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v36;
              uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 > 63) {
                sub_10001FB34(0, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_39;
                }
                if (v21 >= v37) {
                  goto LABEL_32;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v21 = v14 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v20 - 1) & v20;
      int64_t v41 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100025CC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  __chkstk_darwin(v2, v3);
  uint64_t v4 = *v0;
  sub_100003A70(&qword_10015BA30);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v26 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v25 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    for (v9 &= v9 - 1; ; uint64_t v9 = (v14 - 1) & v14)
    {
      sub_10002F8B8();
      Hasher.init(_seed:)();
      UUID.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v10 + 8 * (v17 >> 6))) == 0)
      {
        char v20 = 0;
        unint64_t v21 = (unint64_t)(63 - v16) >> 6;
        while (++v18 != v21 || (v20 & 1) == 0)
        {
          BOOL v22 = v18 == v21;
          if (v18 == v21) {
            unint64_t v18 = 0;
          }
          v20 |= v22;
          uint64_t v23 = *(void *)(v10 + 8 * v18);
          if (v23 != -1)
          {
            unint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v10 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = sub_10002F8B8();
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v13 >= v25) {
        goto LABEL_32;
      }
      uint64_t v14 = v26[v13];
      ++v12;
      if (!v14)
      {
        int64_t v12 = v13 + 1;
        if (v13 + 1 >= v25) {
          goto LABEL_32;
        }
        uint64_t v14 = v26[v12];
        if (!v14)
        {
          int64_t v12 = v13 + 2;
          if (v13 + 2 >= v25) {
            goto LABEL_32;
          }
          uint64_t v14 = v26[v12];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v25)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v24 = 1 << *(unsigned char *)(v4 + 32);
              if (v24 > 63) {
                sub_10001FB34(0, (unint64_t)(v24 + 63) >> 6, v26);
              }
              else {
                *uint64_t v26 = -1 << v24;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            uint64_t v14 = v26[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v12 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v25) {
                  goto LABEL_32;
                }
                uint64_t v14 = v26[v12];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v15;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10002606C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B8D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    unint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v28;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                sub_10001FB34(0, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void sub_100026308(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v7);
  Hasher._finalize()();
  sub_1000304C4();
  unint64_t v6 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  *(void *)(*(void *)(a2 + 48) + 8 * v6) = a1;
  sub_100030264();
}

unint64_t sub_1000263A8(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

#error "1000264DC: call analysis failed (funcsize=116)"

#error "1000266C0: call analysis failed (funcsize=116)"

Swift::Int sub_1000267F4(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100023114();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_100028A30();
      goto LABEL_22;
    }
    sub_10002958C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100026990(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000233F0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_100029838();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015B258, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100026C4C(void *a1, unint64_t a2, char a3)
{
  uint64_t v34 = (int *)type metadata accessor for ModelCatalogAsset(0);
  uint64_t v7 = *((void *)v34 - 1);
  __chkstk_darwin(v34, v8);
  unint64_t v10 = (void *)((char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  v32[1] = v7;
  BOOL v33 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1000237E8();
    }
    else
    {
      if (v12 > v11)
      {
        sub_100029020();
        goto LABEL_49;
      }
      sub_100029BE4();
    }
    uint64_t v13 = *v3;
    Hasher.init(_seed:)();
    sub_100070998();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
    a2 = v14 & ~v15;
    if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v35 = ~v15;
      do
      {
        sub_10002F814();
        BOOL v16 = *v10 == *a1 && v10[1] == a1[1];
        if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v17 = (void *)v10[2];
        uint64_t v18 = (void *)a1[2];
        unint64_t v19 = v17[2];
        if (v19 != v18[2]) {
          goto LABEL_48;
        }
        if (v19) {
          BOOL v20 = v17 == v18;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          BOOL v21 = v17[4] == v18[4] && v17[5] == v18[5];
          if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_48;
          }
          if (v19 != 1)
          {
            BOOL v22 = v17[6] == v18[6] && v17[7] == v18[7];
            if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_48;
            }
            if (v19 != 2)
            {
              uint64_t v23 = v17 + 9;
              uint64_t v24 = v18 + 9;
              unint64_t v25 = 2;
              while (v25 < v19)
              {
                BOOL v26 = *(v23 - 1) == *(v24 - 1) && *v23 == *v24;
                if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  goto LABEL_48;
                }
                ++v25;
                v23 += 2;
                v24 += 2;
                if (v19 == v25) {
                  goto LABEL_21;
                }
              }
              __break(1u);
              goto LABEL_52;
            }
          }
        }
LABEL_21:
        if ((sub_1000716D8(v10[3], a1[3]) & 1) != 0
          && (static AssetCost.== infix(_:_:)() & 1) != 0
          && *((unsigned __int8 *)v10 + v34[8]) == *((unsigned __int8 *)a1 + v34[8])
          && *((unsigned __int8 *)v10 + v34[9]) == *((unsigned __int8 *)a1 + v34[9])
          && *((unsigned __int8 *)v10 + v34[10]) == *((unsigned __int8 *)a1 + v34[10]))
        {
          goto LABEL_53;
        }
LABEL_48:
        sub_10002F868();
        a2 = (a2 + 1) & v35;
      }
      while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_49:
  uint64_t v27 = *v33;
  *(void *)(*v33 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10002F8B8();
  uint64_t v29 = *(void *)(v27 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    sub_10002F868();
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v27 + 16) = v31;
  }
  return result;
}

#error "1000270D0: call analysis failed (funcsize=116)"

uint64_t sub_100027204(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100023ED8();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002A22C();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015B980, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000274C0(Swift::UInt a1, int a2, unint64_t a3, char a4)
{
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_14;
  }
  if (a4)
  {
    sub_1000242D0();
  }
  else
  {
    if (v9 > v8)
    {
      sub_100028D20();
      goto LABEL_14;
    }
    sub_10002A5D8();
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  a3 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v13 = *(void *)(v10 + 48);
    if (*(void *)(v13 + 16 * a3) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v14;
        if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 16 * a3) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = *(void *)(v15 + 48) + 16 * a3;
  *(void *)uint64_t v16 = a1;
  *(_DWORD *)(v16 + 8) = a2;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v19;
  }
}

uint64_t sub_100027624(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for StateDump.AssetState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000245A4();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002A880();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015BAF8, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    BOOL v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015BB00, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000278E0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for StateDump.SessionState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10002499C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002AC2C();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015BAD8, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    BOOL v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015BAE0, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100027B9C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for StateDump.RequestState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100024D94();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002AFD8();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015BAB0, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    BOOL v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015BAB8, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100027E58(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  uint64_t v7 = *(void *)(active - 8);
  __chkstk_darwin(active, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000254D0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002B658();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015BA80, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    BOOL v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, active);
      sub_10002F90C(&qword_10015BA88, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, active);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, active);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100028114(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for StateDump.InferenceProviderState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000258C8();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100028E7C();
      goto LABEL_12;
    }
    sub_10002BA04();
  }
  uint64_t v13 = *v3;
  sub_10002F90C(&qword_10015BA60, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    BOOL v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    BOOL v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002F90C(&qword_10015BA68, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000283D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  __chkstk_darwin(v7, v8);
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100025CC0();
  }
  else
  {
    if (v10 > v9)
    {
      sub_100029020();
      goto LABEL_12;
    }
    sub_10002BDB0();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  a2 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v14 = ~v13;
    do
    {
      sub_10002F814();
      char v15 = static UUID.== infix(_:_:)();
      sub_10002F868();
      if (v15) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }
    while (((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v16 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10002F8B8();
  uint64_t v18 = *(void *)(v16 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v16 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100028650()
{
  sub_10002FAAC();
  uint64_t v38 = v3;
  uint64_t v39 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  unint64_t v11 = v10;
  uint64_t v12 = sub_100003A70(v6);
  sub_10000ED60();
  uint64_t v14 = v13;
  __chkstk_darwin(v15, v16);
  sub_10003094C();
  unint64_t v17 = *(void *)(*v0 + 16);
  unint64_t v18 = *(void *)(*v0 + 24);
  uint64_t v35 = v0;
  uint64_t v36 = v14;
  if (v18 > v17 && (v9 & 1) != 0) {
    goto LABEL_12;
  }
  if (v9)
  {
    sub_10002518C();
  }
  else
  {
    if (v18 > v17)
    {
      sub_100029254();
      goto LABEL_12;
    }
    sub_10002B384();
  }
  uint64_t v19 = *v0;
  sub_10000841C(v5, v7);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_1000304D0();
  sub_100030B60();
  uint64_t v37 = v19;
  if ((*(void *)(v22 + v21) >> v11))
  {
    uint64_t v23 = v7;
    uint64_t v24 = ~v20;
    BOOL v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    uint64_t v26 = v14 + 16;
    unint64_t v25 = v27;
    uint64_t v28 = *(void *)(v26 + 56);
    do
    {
      v25(v1, *(void *)(v37 + 48) + v28 * v11, v12);
      sub_10000841C(v38, v23);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v26 - 8))(v1, v12);
      if (v29) {
        goto LABEL_15;
      }
      unint64_t v11 = (v11 + 1) & v24;
      sub_100030B40();
      sub_100030BF0();
    }
    while ((v30 & 1) != 0);
  }
LABEL_12:
  uint64_t v31 = *v35;
  *(void *)(v31 + 8 * (v11 >> 6) + 56) |= 1 << v11;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v36 + 32))(*(void *)(v31 + 48) + *(void *)(v36 + 72) * v11, v39, v12);
  uint64_t v32 = *(void *)(v31 + 16);
  BOOL v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (!v33)
  {
    *(void *)(v31 + 16) = v34;
    sub_10002FAC4();
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000288A0(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10002606C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1000293E0();
      goto LABEL_14;
    }
    sub_10002C120();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10002EE10();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void sub_100028A18()
{
}

void sub_100028A24()
{
}

void *sub_100028A30()
{
  uint64_t v1 = v0;
  sub_100003A70(&qword_10015B710);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100028BE4()
{
}

void sub_100028BF0(uint64_t *a1)
{
  uint64_t v6 = v1;
  sub_100003A70(a1);
  uint64_t v7 = *v1;
  uint64_t v8 = static _SetStorage.copy(original:)();
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    swift_release();
    *uint64_t v6 = v8;
    return;
  }
  int64_t v9 = (void *)sub_10003016C();
  if (v12) {
    BOOL v13 = (unint64_t)v9 >= v11;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    memmove(v9, v2, 8 * v10);
  }
  sub_10002FDDC();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_10003076C();
  while (1)
  {
    *(void *)(*(void *)(v8 + 48) + 8 * v14) = *(void *)(*(void *)(v7 + 48) + 8 * v14);
    swift_retain();
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v3) {
      goto LABEL_26;
    }
    ++v4;
    if (!*((void *)v2 + v15))
    {
      uint64_t v4 = v15 + 1;
      if (v15 + 1 >= v3) {
        goto LABEL_26;
      }
      if (!*((void *)v2 + v4))
      {
        uint64_t v4 = v15 + 2;
        if (v15 + 2 >= v3) {
          goto LABEL_26;
        }
        if (!*((void *)v2 + v4)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1000309BC();
  }
  uint64_t v16 = v15 + 3;
  if (v16 >= v3) {
    goto LABEL_26;
  }
  if (*((void *)v2 + v16))
  {
    uint64_t v4 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_26;
    }
    ++v16;
    if (*((void *)v2 + v4)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_100028D20()
{
  uint64_t v5 = v0;
  sub_100003A70(&qword_10015B7C8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    swift_release();
    *uint64_t v5 = v7;
    return;
  }
  uint64_t v8 = (void *)sub_10003016C();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    memmove(v8, v1, 8 * v9);
  }
  sub_10002FDDC();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_9:
  sub_10003076C();
  while (1)
  {
    uint64_t v16 = *(void *)(v6 + 48) + 16 * v13;
    uint64_t v17 = *(void *)v16;
    LODWORD(v16) = *(_DWORD *)(v16 + 8);
    uint64_t v18 = *(void *)(v7 + 48) + 16 * v13;
    *(void *)uint64_t v18 = v17;
    *(_DWORD *)(v18 + 8) = v16;
    swift_retain();
    if (v4) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v2) {
      goto LABEL_26;
    }
    ++v3;
    if (!*((void *)v1 + v14))
    {
      uint64_t v3 = v14 + 1;
      if (v14 + 1 >= v2) {
        goto LABEL_26;
      }
      if (!*((void *)v1 + v3))
      {
        uint64_t v3 = v14 + 2;
        if (v14 + 2 >= v2) {
          goto LABEL_26;
        }
        if (!*((void *)v1 + v3)) {
          break;
        }
      }
    }
LABEL_23:
    sub_1000309BC();
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v2) {
    goto LABEL_26;
  }
  if (*((void *)v1 + v15))
  {
    uint64_t v3 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v3 >= v2) {
      goto LABEL_26;
    }
    ++v15;
    if (*((void *)v1 + v3)) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_100028E68()
{
}

void sub_100028E7C()
{
  sub_10002FAAC();
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  v5(0);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100003A70(v3);
  uint64_t v8 = *v0;
  uint64_t v9 = static _SetStorage.copy(original:)();
  if (!*(void *)(v8 + 16))
  {
    swift_release();
LABEL_33:
    *uint64_t v4 = v9;
    sub_10002FAC4();
    return;
  }
  unint64_t v10 = (void *)sub_1000300C4();
  if (v13) {
    BOOL v14 = (unint64_t)v10 >= v12;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    memmove(v10, v28, 8 * v11);
  }
  sub_10002FC90();
  if (!v1) {
    goto LABEL_10;
  }
LABEL_9:
  sub_100030754();
  while (1)
  {
    uint64_t v23 = sub_1000302B0();
    v24(v23);
    uint64_t v25 = sub_100030394();
    v26(v25);
    if (v1) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_100030C5C();
    if (v16 == v17) {
      goto LABEL_31;
    }
    uint64_t v4 = v15;
    if (!*((void *)v28 + (void)v15))
    {
      uint64_t v4 = (uint64_t *)((char *)v15 + 1);
      sub_1000306A8();
      if (v16 == v17) {
        goto LABEL_31;
      }
      sub_100030C50();
      if (!v19)
      {
        uint64_t v4 = (uint64_t *)(v18 + 2);
        sub_1000306A8();
        if (v16 == v17) {
          goto LABEL_31;
        }
        sub_100030C50();
        if (!v20) {
          break;
        }
      }
    }
LABEL_28:
    sub_1000309A4();
  }
  sub_100030C5C();
  if (v16 == v17)
  {
LABEL_31:
    swift_release();
    uint64_t v4 = v27;
    goto LABEL_33;
  }
  if (*((void *)v28 + (void)v21))
  {
    uint64_t v4 = v21;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v4 = (uint64_t *)((char *)v21 + 1);
    if (__OFADD__(v21, 1)) {
      break;
    }
    sub_1000306A8();
    if (v16 == v17) {
      goto LABEL_31;
    }
    uint64_t v21 = (uint64_t *)(v22 + 1);
    if (*((void *)v28 + (void)v4)) {
      goto LABEL_28;
    }
  }
LABEL_35:
  __break(1u);
}

void sub_100029020()
{
  sub_10002FAAC();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4(0);
  uint64_t v6 = sub_10002FA4C(v5);
  __chkstk_darwin(v6, v7);
  sub_100003A70(v2);
  uint64_t v8 = *v0;
  uint64_t v9 = static _SetStorage.copy(original:)();
  if (!*(void *)(v8 + 16))
  {
    swift_release();
LABEL_30:
    *uint64_t v3 = v9;
    sub_10002FAC4();
    return;
  }
  sub_100030344();
  unint64_t v12 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v22 = v3;
  uint64_t v23 = (const void *)(v8 + 56);
  if (v9 != v8 || (unint64_t)v10 >= v8 + 56 + 8 * v12) {
    memmove(v10, v23, 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v9 + 16) = *(void *)(v8 + 16);
  sub_100030344();
  uint64_t v16 = *(void *)(v8 + 56);
  uint64_t v17 = -1;
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  uint64_t v18 = v17 & v16;
  int64_t v19 = (unint64_t)(v15 + 63) >> 6;
  if ((v17 & v16) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  sub_10003091C();
  while (1)
  {
    sub_10002F814();
    sub_10002F8B8();
    if (v18) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v19) {
      goto LABEL_28;
    }
    ++v14;
    if (!*((void *)v23 + v20))
    {
      int64_t v14 = v20 + 1;
      if (v20 + 1 >= v19) {
        goto LABEL_28;
      }
      if (!*((void *)v23 + v14))
      {
        int64_t v14 = v20 + 2;
        if (v20 + 2 >= v19) {
          goto LABEL_28;
        }
        if (!*((void *)v23 + v14)) {
          break;
        }
      }
    }
LABEL_25:
    sub_1000309D4();
  }
  int64_t v21 = v20 + 3;
  if (v21 >= v19)
  {
LABEL_28:
    swift_release();
    uint64_t v3 = v22;
    goto LABEL_30;
  }
  if (*((void *)v23 + v21))
  {
    int64_t v14 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v14 >= v19) {
      goto LABEL_28;
    }
    ++v21;
    if (*((void *)v23 + v14)) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
}

void sub_100029240()
{
}

void sub_100029254()
{
  sub_10002FAAC();
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  sub_100003A70(v5);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100030298();
  sub_100003A70(v3);
  uint64_t v8 = *v0;
  uint64_t v9 = static _SetStorage.copy(original:)();
  if (!*(void *)(v8 + 16))
  {
    swift_release();
LABEL_33:
    *uint64_t v4 = v9;
    sub_10002FAC4();
    return;
  }
  unint64_t v10 = (void *)sub_1000300C4();
  if (v13) {
    BOOL v14 = (unint64_t)v10 >= v12;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    memmove(v10, v28, 8 * v11);
  }
  sub_10002FC90();
  if (!v1) {
    goto LABEL_10;
  }
LABEL_9:
  sub_100030754();
  while (1)
  {
    uint64_t v23 = sub_1000302B0();
    v24(v23);
    uint64_t v25 = sub_100030394();
    v26(v25);
    if (v1) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_100030C5C();
    if (v16 == v17) {
      goto LABEL_31;
    }
    uint64_t v4 = v15;
    if (!*((void *)v28 + (void)v15))
    {
      uint64_t v4 = (uint64_t *)((char *)v15 + 1);
      sub_1000306A8();
      if (v16 == v17) {
        goto LABEL_31;
      }
      sub_100030C50();
      if (!v19)
      {
        uint64_t v4 = (uint64_t *)(v18 + 2);
        sub_1000306A8();
        if (v16 == v17) {
          goto LABEL_31;
        }
        sub_100030C50();
        if (!v20) {
          break;
        }
      }
    }
LABEL_28:
    sub_1000309A4();
  }
  sub_100030C5C();
  if (v16 == v17)
  {
LABEL_31:
    swift_release();
    uint64_t v4 = v27;
    goto LABEL_33;
  }
  if (*((void *)v28 + (void)v21))
  {
    uint64_t v4 = v21;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v4 = (uint64_t *)((char *)v21 + 1);
    if (__OFADD__(v21, 1)) {
      break;
    }
    sub_1000306A8();
    if (v16 == v17) {
      goto LABEL_31;
    }
    int64_t v21 = (uint64_t *)(v22 + 1);
    if (*((void *)v28 + (void)v4)) {
      goto LABEL_28;
    }
  }
LABEL_35:
  __break(1u);
}

id sub_1000293E0()
{
  uint64_t v1 = v0;
  sub_100003A70(&qword_10015B8D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10002958C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B710);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100029838()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015B248);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100029BE4()
{
  uint64_t v1 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v31 = *(void *)(v1 - 8);
  BOOL v32 = (int *)v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = v0;
  uint64_t v5 = *v0;
  sub_100003A70(&qword_10015B7E0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_29:
    *unint64_t v27 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v28 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & v9;
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v30 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v11) {
    goto LABEL_7;
  }
LABEL_6:
  for (v11 &= v11 - 1; ; uint64_t v11 = (v15 - 1) & v15)
  {
    sub_10002F814();
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *((void *)v4 + 2);
    Hasher._combine(_:)(*(void *)(v17 + 16));
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v33 = v11;
      uint64_t v19 = v7;
      int64_t v20 = v13;
      uint64_t v21 = v5;
      swift_bridgeObjectRetain();
      uint64_t v22 = v17 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v22 += 16;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
      uint64_t v5 = v21;
      int64_t v13 = v20;
      uint64_t v7 = v19;
      uint64_t v11 = v33;
    }
    uint64_t v23 = *((void *)v4 + 3);
    swift_bridgeObjectRetain();
    sub_1000717DC((uint64_t)v34, v23);
    swift_bridgeObjectRelease();
    uint64_t v24 = v32;
    type metadata accessor for AssetCost();
    sub_10002F90C(&qword_10015B7E8, (void (*)(uint64_t))&type metadata accessor for AssetCost);
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(v4[v24[8]]);
    Hasher._combine(_:)(v4[v24[9]]);
    Hasher._combine(_:)(v4[v24[10]]);
    Hasher._finalize()();
    uint64_t v25 = v30;
    unint64_t v26 = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v25 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = sub_10002F8B8();
    ++*(void *)(v7 + 16);
    if (v11) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v29) {
      goto LABEL_27;
    }
    uint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v13;
    if (!v15)
    {
      int64_t v13 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_27;
      }
      uint64_t v15 = *(void *)(v28 + 8 * v13);
      if (!v15)
      {
        int64_t v13 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_27;
        }
        uint64_t v15 = *(void *)(v28 + 8 * v13);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_27:
    uint64_t result = swift_release_n();
    goto LABEL_29;
  }
  uint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v13 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v13 >= v29) {
      goto LABEL_27;
    }
    uint64_t v15 = *(void *)(v28 + 8 * v13);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_10002A024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10002FFC4();
  a31 = v33;
  a32 = v34;
  uint64_t v36 = v35;
  uint64_t v37 = *v32;
  sub_100003A70(v38);
  uint64_t v39 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v37 + 16))
  {
    swift_release();
LABEL_32:
    *BOOL v32 = v39;
    sub_10002FFA8();
    return;
  }
  sub_100030344();
  uint64_t v40 = v37 + 56;
  sub_100030AD4();
  uint64_t v43 = v42 & v41;
  int64_t v58 = (unint64_t)(v44 + 63) >> 6;
  swift_retain();
  int64_t v45 = 0;
  if (!v43) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100030BFC();
  for (int64_t i = v46 | (v45 << 6); ; int64_t i = v50 + (v45 << 6))
  {
    uint64_t v51 = *(void *)(*(void *)(v37 + 48) + 8 * i);
    Hasher.init(_seed:)();
    swift_retain();
    v36(&a12);
    Hasher._finalize()();
    sub_1000305C8();
    if (v52)
    {
      sub_10002FD4C();
      while (1)
      {
        sub_10003064C();
        if (v52)
        {
          if (v54) {
            break;
          }
        }
        if (v55 == v56) {
          uint64_t v55 = 0;
        }
        if (*(void *)(v39 + 56 + 8 * v55) != -1)
        {
          sub_10002FD38();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10002FD60();
LABEL_28:
    sub_1000303E0(v53);
    *(void *)(*(void *)(v39 + 48) + 8 * v57) = v51;
    sub_100030264();
    if (v43) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v48 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      goto LABEL_34;
    }
    if (v48 >= v58) {
      goto LABEL_30;
    }
    ++v45;
    if (!*(void *)(v40 + 8 * v48))
    {
      int64_t v45 = v48 + 1;
      if (v48 + 1 >= v58) {
        goto LABEL_30;
      }
      if (!*(void *)(v40 + 8 * v45))
      {
        int64_t v45 = v48 + 2;
        if (v48 + 2 >= v58) {
          goto LABEL_30;
        }
        if (!*(void *)(v40 + 8 * v45)) {
          break;
        }
      }
    }
LABEL_17:
    sub_100030C94();
  }
  int64_t v49 = v48 + 3;
  if (v49 >= v58)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_32;
  }
  if (*(void *)(v40 + 8 * v49))
  {
    int64_t v45 = v49;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v45 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v45 >= v58) {
      goto LABEL_30;
    }
    ++v49;
    if (*(void *)(v40 + 8 * v45)) {
      goto LABEL_17;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_10002A22C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderAssetDescriptor();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015B988);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  uint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002A5D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B7C8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    uint64_t v16 = *(void *)(v2 + 48) + 16 * i;
    Swift::UInt v17 = *(void *)v16;
    int v18 = *(_DWORD *)(v16 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v21);
        if (v26 != -1)
        {
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t v27 = *(void *)(v4 + 48) + 16 * v22;
    *(void *)uint64_t v27 = v17;
    *(_DWORD *)(v27 + 8) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v28)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002A880()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StateDump.AssetState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015BB08);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015BAF8, (void (*)(uint64_t))&type metadata accessor for StateDump.AssetState);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002AC2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StateDump.SessionState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015BAE8);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015BAD8, (void (*)(uint64_t))&type metadata accessor for StateDump.SessionState);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002AFD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StateDump.RequestState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015BAC0);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015BAB0, (void (*)(uint64_t))&type metadata accessor for StateDump.RequestState);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_10002B384()
{
  sub_10002FAAC();
  uint64_t v39 = v2;
  uint64_t v40 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = v0;
  uint64_t v7 = sub_100003A70(v2);
  sub_10000ED60();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100030934();
  uint64_t v12 = *v0;
  sub_100003A70(v5);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v12 + 16))
  {
    swift_release();
LABEL_32:
    *uint64_t v6 = v13;
    sub_10002FAC4();
    return;
  }
  sub_100030344();
  uint64_t v36 = v12 + 56;
  sub_100030A80();
  uint64_t v16 = v15 & v14;
  int64_t v37 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v18 = v13 + 56;
  uint64_t v38 = v9;
  uint64_t v19 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  int64_t v20 = 0;
  if (!v16) {
    goto LABEL_4;
  }
LABEL_3:
  sub_10003091C();
  while (1)
  {
    uint64_t v23 = v12;
    uint64_t v24 = *(void *)(v38 + 72);
    sub_100030274();
    v25();
    sub_10000841C(v40, v39);
    dispatch thunk of Hashable._rawHashValue(seed:)();
    sub_1000303B4();
    if (((v28 << v27) & ~*(void *)(v18 + 8 * v26)) == 0)
    {
      sub_10002FD4C();
      while (1)
      {
        sub_10003064C();
        if (v32)
        {
          if (v29) {
            break;
          }
        }
        if (v30 == v31) {
          uint64_t v30 = 0;
        }
        if (*(void *)(v18 + 8 * v30) != -1)
        {
          sub_10002FD38();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10002FD60();
LABEL_28:
    sub_100030AA0();
    *(void *)(v18 + v33) |= v34;
    (*v19)(*(void *)(v13 + 48) + v35 * v24, v1, v7);
    sub_100030264();
    uint64_t v12 = v23;
    if (v16) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_34;
    }
    if (v21 >= v37) {
      goto LABEL_30;
    }
    ++v20;
    if (!*(void *)(v36 + 8 * v21))
    {
      int64_t v20 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_30;
      }
      if (!*(void *)(v36 + 8 * v20))
      {
        int64_t v20 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_30;
        }
        if (!*(void *)(v36 + 8 * v20)) {
          break;
        }
      }
    }
LABEL_17:
    sub_1000309D4();
  }
  int64_t v22 = v21 + 3;
  if (v22 >= v37)
  {
LABEL_30:
    swift_release_n();
    uint64_t v6 = v0;
    goto LABEL_32;
  }
  if (*(void *)(v36 + 8 * v22))
  {
    int64_t v20 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v20 >= v37) {
      goto LABEL_30;
    }
    ++v22;
    if (*(void *)(v36 + 8 * v20)) {
      goto LABEL_17;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_10002B658()
{
  uint64_t v1 = v0;
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  uint64_t v3 = *(void *)(active - 8);
  __chkstk_darwin(active, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015BA90);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  uint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, active);
    sub_10002F90C(&qword_10015BA80, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState.ActiveRequest);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, active);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002BA04()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StateDump.InferenceProviderState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100003A70(&qword_10015BA70);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  uint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v18 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = v7;
    uint64_t v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v24 + v25 * i, v2);
    sub_10002F90C(&qword_10015BA60, (void (*)(uint64_t))&type metadata accessor for StateDump.InferenceProviderState);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v14 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v29 * v25, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
    if (v13) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_36;
    }
    if (v20 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_34;
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002BDB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  __chkstk_darwin(v2, v3);
  uint64_t v4 = *v0;
  sub_100003A70(&qword_10015BA30);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v24 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  for (v9 &= v9 - 1; ; uint64_t v9 = (v14 - 1) & v14)
  {
    sub_10002F814();
    Hasher.init(_seed:)();
    UUID.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v10 + 8 * (v17 >> 6))) == 0)
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v16) >> 6;
      while (++v18 != v21 || (v20 & 1) == 0)
      {
        BOOL v22 = v18 == v21;
        if (v18 == v21) {
          unint64_t v18 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v10 + 8 * v18);
        if (v23 != -1)
        {
          unint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v10 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = sub_10002F8B8();
    ++*(void *)(v6 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v25) {
      goto LABEL_32;
    }
    uint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v12;
    if (!v14)
    {
      int64_t v12 = v13 + 1;
      if (v13 + 1 >= v25) {
        goto LABEL_32;
      }
      uint64_t v14 = *(void *)(v24 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_32;
        }
        uint64_t v14 = *(void *)(v24 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  uint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_32;
    }
    uint64_t v14 = *(void *)(v24 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002C120()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003A70(&qword_10015B8D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    Swift::Int v18 = *(void *)(v4 + 40);
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v4 + 48) + 8 * v23) = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002C398(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v9);
    uint64_t v10 = (unint64_t *)((char *)&v14 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v7, v10);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_10002C8BC(v10, v7, a1, a2);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int64_t v12 = (unint64_t *)swift_slowAlloc();
    sub_10001FB34(0, v7, v12);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_10002C8BC(v12, v7, a1, a2);
    swift_release();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10002C56C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v10);
    uint64_t v11 = (unint64_t *)((char *)&v15 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v8, v11);
    swift_retain();
    uint64_t v12 = sub_10002CDE8(v11, v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v13 = (unint64_t *)swift_slowAlloc();
    sub_10001FB34(0, v8, v13);
    swift_retain();
    uint64_t v12 = sub_10002CDE8(v13, v8, a1, a2);
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  swift_release();
  return v12;
}

uint64_t sub_10002C740(uint64_t isStackAllocationSafe, uint64_t a2)
{
  int v3 = a2;
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    unsigned int v7 = (unint64_t *)((char *)&v11 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v6, v7);
    uint64_t v8 = sub_10002D3F0(v7, v6, v4, v3);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v9 = (unint64_t *)swift_slowAlloc();
    sub_10001FB34(0, v6, v9);
    uint64_t v8 = sub_10002D3F0(v9, v6, v4, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_10002C8BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a2;
  int64_t v48 = a1;
  uint64_t v68 = sub_100003A70(&qword_10015B228);
  uint64_t v6 = *(void *)(v68 - 8);
  uint64_t v8 = __chkstk_darwin(v68, v7);
  uint64_t v64 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = type metadata accessor for Assertion.DaemonRep();
  uint64_t result = __chkstk_darwin(v13, v14);
  Swift::Int v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a3;
  uint64_t v58 = 0;
  int64_t v19 = 0;
  uint64_t v22 = *(void *)(a3 + 56);
  uint64_t v21 = a3 + 56;
  uint64_t v20 = v22;
  uint64_t v23 = 1 << *(unsigned char *)(v21 - 24);
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  unint64_t v25 = v24 & v20;
  uint64_t v49 = v21;
  int64_t v50 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v55 = v16 + 16;
  uint64_t v56 = v16;
  uint64_t v65 = a4 + 56;
  uint64_t v66 = a4;
  uint64_t v63 = v6 + 16;
  uint64_t v67 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v53 = v6;
  char v54 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v51 = v18;
  uint64_t v52 = result;
  do
  {
    while (1)
    {
      if (v25)
      {
        unint64_t v26 = __clz(__rbit64(v25));
        v25 &= v25 - 1;
        unint64_t v27 = v26 | (v19 << 6);
      }
      else
      {
        int64_t v28 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_33;
        }
        if (v28 >= v50)
        {
LABEL_32:
          uint64_t v44 = v57;
          swift_retain();
          uint64_t v45 = sub_10002D6A4(v48, v47, v58, v44);
          swift_bridgeObjectRelease();
          return v45;
        }
        unint64_t v29 = *(void *)(v49 + 8 * v28);
        ++v19;
        if (!v29)
        {
          int64_t v19 = v28 + 1;
          if (v28 + 1 >= v50) {
            goto LABEL_32;
          }
          unint64_t v29 = *(void *)(v49 + 8 * v19);
          if (!v29)
          {
            int64_t v19 = v28 + 2;
            if (v28 + 2 >= v50) {
              goto LABEL_32;
            }
            unint64_t v29 = *(void *)(v49 + 8 * v19);
            if (!v29)
            {
              int64_t v30 = v28 + 3;
              if (v30 >= v50) {
                goto LABEL_32;
              }
              unint64_t v29 = *(void *)(v49 + 8 * v30);
              if (!v29)
              {
                while (1)
                {
                  int64_t v19 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_34;
                  }
                  if (v19 >= v50) {
                    goto LABEL_32;
                  }
                  unint64_t v29 = *(void *)(v49 + 8 * v19);
                  ++v30;
                  if (v29) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v19 = v30;
            }
          }
        }
LABEL_20:
        unint64_t v25 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v19 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v18, *(void *)(v57 + 48) + *(void *)(v56 + 72) * v27, v13);
      Assertion.DaemonRep.id.getter();
      uint64_t v31 = *(void *)(a4 + 16);
      uint64_t v59 = (unint64_t)v67 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v60 = v27;
      if (!v31) {
        break;
      }
      sub_10000841C(&qword_10015B238, &qword_10015B228);
      uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v34 = v32 & ~v33;
      if (((*(void *)(v65 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
        break;
      }
      unint64_t v61 = v25;
      int64_t v62 = v19;
      uint64_t v35 = v12;
      uint64_t v36 = ~v33;
      uint64_t v37 = *(void *)(v53 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
      while (1)
      {
        uint64_t v39 = v64;
        uint64_t v40 = v68;
        v38(v64, *(void *)(v66 + 48) + v37 * v34, v68);
        sub_10000841C(&qword_10015B240, &qword_10015B228);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v42 = *v67;
        (*v67)(v39, v40);
        if (v41) {
          break;
        }
        unint64_t v34 = (v34 + 1) & v36;
        if (((*(void *)(v65 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
        {
          a4 = v66;
          uint64_t v12 = v35;
          Swift::Int v18 = v51;
          uint64_t v13 = v52;
          unint64_t v25 = v61;
          int64_t v19 = v62;
          v42(v12, v68);
          goto LABEL_27;
        }
      }
      uint64_t v12 = v35;
      v42(v35, v68);
      Swift::Int v18 = v51;
      uint64_t v13 = v52;
      uint64_t result = (*v54)(v51, v52);
      a4 = v66;
      unint64_t v25 = v61;
      int64_t v19 = v62;
    }
    (*v67)(v12, v68);
LABEL_27:
    uint64_t result = (*v54)(v18, v13);
    *(unint64_t *)((char *)v48 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
  }
  while (!__OFADD__(v58++, 1));
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10002CDE8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a2;
  uint64_t v71 = a4;
  int64_t v62 = a1;
  uint64_t v5 = sub_100003A70(&qword_10015B728);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11, v14);
  uint64_t v77 = (char *)&v60 - v18;
  uint64_t v63 = 0;
  int64_t v19 = 0;
  uint64_t v69 = v16;
  uint64_t v70 = a3;
  uint64_t v20 = *(void *)(a3 + 56);
  uint64_t v66 = a3 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v74 = v16 + 16;
  int64_t v67 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v68 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v24 = qword_10015B4E0;
  *(void *)&long long v17 = 136315138;
  long long v65 = v17;
  uint64_t v64 = (char *)&type metadata for Any + 8;
  Swift::Bool v72 = v8;
  uint64_t v73 = result;
  while (v23)
  {
    uint64_t v75 = (v23 - 1) & v23;
    int64_t v76 = v19;
    unint64_t v25 = __clz(__rbit64(v23)) | (v19 << 6);
LABEL_20:
    int64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
    v30(v77, *(void *)(v70 + 48) + *(void *)(v69 + 72) * v25, v9);
    uint64_t v31 = Assertion.DaemonRep.policy.getter();
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)(v71 + 296);
    if (*(void *)(v34 + 16))
    {
      uint64_t v35 = v31;
      swift_bridgeObjectRetain();
      unint64_t v36 = sub_10001E648(v35, v33);
      if (v37)
      {
        unint64_t v38 = v36;
        unint64_t v39 = v25;
        uint64_t v40 = *(void *)(v34 + 56);
        uint64_t v41 = type metadata accessor for Policy();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = v40 + *(void *)(v42 + 72) * v38;
        unint64_t v25 = v39;
        uint64_t v8 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v72, v43, v41);
        uint64_t v44 = (uint64_t)v8;
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v41 = type metadata accessor for Policy();
        uint64_t v44 = (uint64_t)v8;
        uint64_t v45 = 1;
      }
      sub_100006960(v44, v45, 1, v41);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v41 = type metadata accessor for Policy();
      sub_100006960((uint64_t)v8, 1, 1, v41);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Policy();
    int v46 = sub_100006AE8((uint64_t)v8, 1, v41);
    sub_10002EB50((uint64_t)v8, &qword_10015B728);
    if (v46 == 1)
    {
      if (qword_10015B088 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_100003B18(v47, (uint64_t)v24);
      uint64_t v9 = v73;
      v30(v13, (unint64_t)v77, v73);
      int64_t v48 = Logger.logObject.getter();
      uint64_t v49 = v13;
      os_log_type_t v50 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v50))
      {
        uint64_t v51 = v24;
        uint64_t v52 = v68;
        uint64_t v53 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = v65;
        uint64_t v54 = Assertion.DaemonRep.policy.getter();
        *(void *)(v53 + 4) = sub_10001DF20(v54, v55, &v78);
        swift_bridgeObjectRelease();
        uint64_t v56 = *v52;
        (*v52)(v49, v73);
        uint64_t v24 = v51;
        _os_log_impl((void *)&_mh_execute_header, v48, v50, "Cannot restore assertion with non-existent policy: %s", (uint8_t *)v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v9 = v73;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v56 = *v68;
        (*v68)(v13, v9);
      }

      uint64_t v13 = v49;
      unint64_t v23 = v75;
      uint64_t result = v56(v77, v9);
      uint64_t v8 = v72;
      int64_t v19 = v76;
    }
    else
    {
      uint64_t v9 = v73;
      uint64_t result = (*v68)(v77, v73);
      *(unint64_t *)((char *)v62 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      BOOL v57 = __OFADD__(v63++, 1);
      unint64_t v23 = v75;
      int64_t v19 = v76;
      if (v57) {
        goto LABEL_39;
      }
    }
  }
  int64_t v26 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v26 >= v67) {
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v66 + 8 * v26);
  int64_t v28 = v19 + 1;
  if (v27) {
    goto LABEL_19;
  }
  int64_t v28 = v19 + 2;
  if (v19 + 2 >= v67) {
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v66 + 8 * v28);
  if (v27) {
    goto LABEL_19;
  }
  int64_t v28 = v19 + 3;
  if (v19 + 3 >= v67) {
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v66 + 8 * v28);
  if (v27)
  {
LABEL_19:
    uint64_t v75 = (v27 - 1) & v27;
    int64_t v76 = v28;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
    goto LABEL_20;
  }
  uint64_t v29 = v19 + 4;
  if (v19 + 4 >= v67)
  {
LABEL_36:
    uint64_t v58 = v70;
    swift_retain();
    uint64_t v59 = sub_10002D6A4(v62, v61, v63, v58);
    swift_release();
    return v59;
  }
  unint64_t v27 = *(void *)(v66 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v19 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v67) {
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v66 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10002D3F0(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = a2;
  int v30 = a4;
  int64_t v26 = a1;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  uint64_t v31 = a3;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_20;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v29) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v28 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v28 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, *(void *)(v31 + 48) + *(void *)(v6 + 72) * v17, v5);
    int v21 = Assertion.DaemonRep.acquirerPID.getter();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    if (v21 == v30)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v23 = v31;
        swift_retain();
        return sub_10002D6A4(v26, v25, v27, v23);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v29) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10002D684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10002DA48(a1, a2, a3, a4, (uint64_t)&qword_10015B288, (uint64_t)sub_1000C95D4, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

uint64_t sub_10002D6A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100003A70(&qword_10015B248);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v35;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  unint64_t v36 = (uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v37 = v38 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v34)
      {
LABEL_36:
        swift_release();
        return v11;
      }
      unint64_t v19 = v35[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v34) {
          goto LABEL_36;
        }
        unint64_t v19 = v35[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v34) {
            goto LABEL_36;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v34) {
              goto LABEL_36;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v19 = v35[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = a4;
    uint64_t v22 = *(void *)(a4 + 48);
    uint64_t v23 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v10, v22 + v23 * v17, v7);
    sub_10002F90C(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v24 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) == 0) {
      break;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t result = (*v36)(*(void *)(v11 + 48) + v27 * v23, v10, v7);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      goto LABEL_39;
    }
    a4 = v21;
    if (!a3) {
      goto LABEL_36;
    }
  }
  char v28 = 0;
  unint64_t v29 = (unint64_t)(63 - v24) >> 6;
  while (++v26 != v29 || (v28 & 1) == 0)
  {
    BOOL v30 = v26 == v29;
    if (v26 == v29) {
      unint64_t v26 = 0;
    }
    v28 |= v30;
    uint64_t v31 = *(void *)(v15 + 8 * v26);
    if (v31 != -1)
    {
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_10002DA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10002DA48(a1, a2, a3, a4, (uint64_t)&qword_10015B298, (uint64_t)sub_1000E6F68, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

void sub_10002DA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10002FFC4();
  a31 = v32;
  a32 = v38;
  uint64_t v39 = v35;
  long long v65 = v40;
  if (!v34)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v41 = v34;
  if (*(void *)(v35 + 16) == v34)
  {
LABEL_37:
    sub_10002FFA8();
    return;
  }
  uint64_t v42 = v37;
  uint64_t v43 = v33;
  sub_100003A70(v36);
  uint64_t v44 = static _SetStorage.allocate(capacity:)();
  uint64_t v45 = v44;
  uint64_t v64 = v43;
  if (v43 < 1) {
    unint64_t v46 = 0;
  }
  else {
    unint64_t v46 = *v65;
  }
  uint64_t v47 = 0;
  uint64_t v48 = v44 + 56;
  while (1)
  {
    if (v46)
    {
      unint64_t v49 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      unint64_t v50 = v49 | (v47 << 6);
      goto LABEL_24;
    }
    uint64_t v51 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      goto LABEL_40;
    }
    if (v51 >= v64) {
      goto LABEL_36;
    }
    ++v47;
    if (!v65[v51])
    {
      uint64_t v47 = v51 + 1;
      if (v51 + 1 >= v64) {
        goto LABEL_36;
      }
      if (!v65[v47])
      {
        uint64_t v47 = v51 + 2;
        if (v51 + 2 >= v64) {
          goto LABEL_36;
        }
        if (!v65[v47]) {
          break;
        }
      }
    }
LABEL_23:
    sub_100030B6C();
    unint64_t v50 = v53 + (v47 << 6);
LABEL_24:
    uint64_t v54 = *(void *)(*(void *)(v39 + 48) + 8 * v50);
    Hasher.init(_seed:)();
    swift_retain();
    v42(&a12);
    unint64_t v55 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v45 + 32));
    if (((-1 << v55) & ~*(void *)(v48 + 8 * (v55 >> 6))) == 0)
    {
      sub_10002FD4C();
      while (1)
      {
        sub_10003064C();
        if (v59)
        {
          if (v56) {
            break;
          }
        }
        if (v57 == v58) {
          uint64_t v57 = 0;
        }
        if (*(void *)(v48 + 8 * v57) != -1)
        {
          sub_10002FD38();
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_10002FD60();
LABEL_34:
    sub_100030AA0();
    *(void *)(v48 + v60) |= v61;
    *(void *)(*(void *)(v45 + 48) + 8 * v62) = v54;
    sub_100030264();
    if (__OFSUB__(v41--, 1)) {
      goto LABEL_39;
    }
    if (!v41) {
      goto LABEL_36;
    }
  }
  uint64_t v52 = v51 + 3;
  if (v52 >= v64) {
    goto LABEL_36;
  }
  if (v65[v52])
  {
    uint64_t v47 = v52;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v47 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    if (v47 >= v64) {
      goto LABEL_36;
    }
    ++v52;
    if (v65[v47]) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_10002DC70()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  sub_10000ED60();
  __chkstk_darwin(v8, v9);
  sub_100030934();
  if (!v3)
  {
LABEL_37:
    swift_release();
LABEL_38:
    sub_10002FAC4();
    return;
  }
  if (*(void *)(v1 + 16) == v3) {
    goto LABEL_38;
  }
  sub_100003A70(&qword_10015BA30);
  uint64_t v10 = static _SetStorage.allocate(capacity:)();
  uint64_t v27 = v5;
  if (v5 < 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *v7;
  }
  uint64_t v12 = 0;
  uint64_t v13 = v10 + 56;
  while (1)
  {
    if (v11)
    {
      v11 &= v11 - 1;
      goto LABEL_25;
    }
    uint64_t v14 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_41;
    }
    if (v14 >= v27) {
      goto LABEL_37;
    }
    ++v12;
    if (!v7[v14])
    {
      uint64_t v12 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_37;
      }
      if (!v7[v12])
      {
        uint64_t v12 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_37;
        }
        if (!v7[v12]) {
          break;
        }
      }
    }
LABEL_24:
    sub_100030534();
    uint64_t v11 = v17 & v16;
LABEL_25:
    sub_10002F814();
    Hasher.init(_seed:)();
    UUID.hash(into:)();
    Hasher._finalize()();
    sub_1000303B4();
    if (((v20 << v19) & ~*(void *)(v13 + 8 * v18)) == 0)
    {
      sub_10002FD4C();
      while (1)
      {
        sub_10003064C();
        if (v25)
        {
          if (v22) {
            break;
          }
        }
        if (v23 == v24) {
          uint64_t v23 = 0;
        }
        if (*(void *)(v13 + 8 * v23) != -1)
        {
          sub_10002FD38();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    sub_10002FD60();
LABEL_35:
    *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_10002F8B8();
    sub_100030264();
    if (__OFSUB__(v3--, 1)) {
      goto LABEL_40;
    }
    if (!v3) {
      goto LABEL_37;
    }
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v27) {
    goto LABEL_37;
  }
  if (v7[v15])
  {
    uint64_t v12 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_37;
    }
    ++v15;
    if (v7[v12]) {
      goto LABEL_24;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_10002DF14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10002DF50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A70(&qword_10015B830);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003A70(&qword_10015B858);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t result = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  uint64_t v41 = v6;
  uint64_t v45 = v20;
  if (!v19)
  {
    int64_t v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v30 = (unint64_t)(v17 + 64) >> 6;
    if (v29 < v30)
    {
      unint64_t v31 = *(void *)(v15 + 8 * v29);
      if (v31)
      {
LABEL_7:
        uint64_t v42 = v17;
        uint64_t v43 = v15;
        uint64_t v44 = a1;
        uint64_t v21 = (v31 - 1) & v31;
        unint64_t v22 = __clz(__rbit64(v31)) + (v29 << 6);
        int64_t v18 = v29;
        goto LABEL_3;
      }
      int64_t v32 = v16 + 2;
      int64_t v18 = v16 + 1;
      if (v16 + 2 < v30)
      {
        unint64_t v31 = *(void *)(v15 + 8 * v32);
        if (v31)
        {
LABEL_10:
          int64_t v29 = v32;
          goto LABEL_7;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 3 < v30)
        {
          unint64_t v31 = *(void *)(v15 + 8 * (v16 + 3));
          if (v31)
          {
            int64_t v29 = v16 + 3;
            goto LABEL_7;
          }
          int64_t v32 = v16 + 4;
          int64_t v18 = v16 + 3;
          if (v16 + 4 < v30)
          {
            unint64_t v31 = *(void *)(v15 + 8 * v32);
            if (v31) {
              goto LABEL_10;
            }
            int64_t v29 = v16 + 5;
            int64_t v18 = v16 + 4;
            if (v16 + 5 < v30)
            {
              unint64_t v31 = *(void *)(v15 + 8 * v29);
              if (v31) {
                goto LABEL_7;
              }
              int64_t v18 = v30 - 1;
              int64_t v33 = v16 + 6;
              while (v33 < v30)
              {
                unint64_t v31 = *(void *)(v15 + 8 * v33++);
                if (v31)
                {
                  int64_t v29 = v33 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    sub_100006960((uint64_t)v13, 1, 1, v3);
    uint64_t v21 = 0;
    goto LABEL_23;
  }
  uint64_t v42 = v17;
  uint64_t v43 = v15;
  uint64_t v44 = a1;
  uint64_t v21 = (v19 - 1) & v19;
  unint64_t v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
  uint64_t v23 = *(void *)(v14 + 56);
  uint64_t v24 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v22);
  uint64_t v25 = v14;
  uint64_t v26 = *v24;
  uint64_t v27 = v24[1];
  uint64_t v28 = type metadata accessor for Policy();
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(&v13[*(int *)(v3 + 48)], v23 + *(void *)(*(void *)(v28 - 8) + 72) * v22, v28);
  *(void *)uint64_t v13 = v26;
  *((void *)v13 + 1) = v27;
  sub_100006960((uint64_t)v13, 0, 1, v3);
  uint64_t v14 = v25;
  swift_bridgeObjectRetain();
  uint64_t v15 = v43;
  a1 = v44;
  uint64_t v17 = v42;
LABEL_23:
  *uint64_t v1 = v14;
  v1[1] = v15;
  v1[2] = v17;
  v1[3] = v18;
  v1[4] = v21;
  uint64_t v34 = (void (*)(uint64_t))v1[5];
  uint64_t v35 = v45;
  sub_10002EAF8((uint64_t)v13, v45, &qword_10015B858);
  uint64_t v36 = 1;
  if (sub_100006AE8(v35, 1, v3) != 1)
  {
    uint64_t v37 = v35;
    uint64_t v38 = (uint64_t)v41;
    sub_10002EAF8(v37, (uint64_t)v41, &qword_10015B830);
    v34(v38);
    sub_10002EB50(v38, &qword_10015B830);
    uint64_t v36 = 0;
  }
  uint64_t v39 = sub_100003A70(&qword_10015B838);
  return sub_100006960(a1, v36, 1, v39);
}

uint64_t sub_10002E2A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

int64_t sub_10002E2E0(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10002E3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002E428(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10002E4A8()
{
  sub_100003A70(&qword_10015B228);
  sub_10002FB84();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = ((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10000EFBC();
  v5();
  swift_release();

  return _swift_deallocObject(v0, v4, v3);
}

uint64_t sub_10002E544()
{
  sub_1000086EC();
  uint64_t v0 = sub_100003A70(&qword_10015B228);
  sub_10002FA4C(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000ED54;
  uint64_t v4 = sub_100030474();
  return sub_100015560(v4, v5, v6);
}

uint64_t sub_10002E61C()
{
  uint64_t v1 = type metadata accessor for Assertion.DaemonRep();
  sub_10000ED60();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_10002E6C0()
{
  sub_1000086EC();
  sub_100030194();
  uint64_t v0 = type metadata accessor for Assertion.DaemonRep();
  sub_1000301E0(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000E1FC;
  uint64_t v4 = sub_100030474();
  return sub_1000138DC(v4, v5, v6);
}

uint64_t sub_10002E770()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001C780(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002E804()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001CF94(v3, v4, v5, v6, v7);
}

uint64_t sub_10002E894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E8FC()
{
  uint64_t v1 = sub_100003A70(&qword_10015B728);
  sub_10002FA4C(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for Policy();
  if (!sub_100006AE8(v0 + v4, 1, v7))
  {
    sub_10002FC6C();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v6 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10002E9F8()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = sub_100003A70(&qword_10015B728);
  sub_10002FA4C(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000E1FC;
  sub_1000308E0();
  sub_10002FE64();
  return sub_1000120C0(v4, v5, v6, v7, v8);
}

uint64_t sub_10002EAF0()
{
  return swift_release();
}

uint64_t sub_10002EAF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FB84();
  sub_100030658();
  v4();
  return a2;
}

uint64_t sub_10002EB50(uint64_t a1, uint64_t *a2)
{
  sub_100003A70(a2);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_10002EBA0()
{
  return sub_100019450() & 1;
}

uint64_t sub_10002EBC4()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001B0AC(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002EC58()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001C0E8(v3, v4, v5, v6, v7);
}

uint64_t sub_10002ECEC()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001BC90(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002ED80()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001C664(v3, v4, v5, v6, v7);
}

unint64_t sub_10002EE10()
{
  unint64_t result = qword_10015B8C0;
  if (!qword_10015B8C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015B8C0);
  }
  return result;
}

unint64_t sub_10002EE50()
{
  unint64_t result = qword_10015B8C8;
  if (!qword_10015B8C8)
  {
    sub_10002EE10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015B8C8);
  }
  return result;
}

uint64_t sub_10002EE98()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001BAC4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002EF2C()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001C548(v3, v4, v5, v6, v7);
}

uint64_t sub_10002EFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_10002F08C;
  return sub_10001C94C(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10002F08C()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  sub_100030808();
  return v9();
}

uint64_t sub_10002F164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000086AC(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FE94();
  return v20(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10002F204()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001D1D4(v3, v4, v5, v6, v7);
}

uint64_t sub_10002F294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_10002F364;
  return sub_10001B4B4(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10002F364()
{
  sub_1000086E0();
  char v2 = v1;
  sub_100008660();
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  uint64_t v5 = *v0;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = v2;
  sub_10000EF7C();
  return v7();
}

uint64_t sub_10002F444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000086AC(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FE94();
  return v20(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10002F4E4()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_1000086AC(v0);
  *char v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001C2E0(v3, v4, v5, v6, v7);
}

uint64_t sub_10002F578()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_1000086AC(v0);
  *char v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001CDC8(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002F60C()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_1000086AC(v0);
  *char v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001D4FC(v3, v4, v5, v6, v7);
}

uint64_t sub_10002F6A0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10002F6F0()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10002FB94();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_1000086AC(v0);
  *char v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FA88();
  sub_10002FEAC();
  return sub_10001B8F8(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10002F784()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_1000086AC(v0);
  *char v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10001C42C(v3, v4, v5, v6, v7);
}

uint64_t sub_10002F814()
{
  uint64_t v1 = sub_1000308FC();
  v2(v1);
  sub_10002FB84();
  sub_100030274();
  v3();
  return v0;
}

uint64_t sub_10002F868()
{
  uint64_t v1 = sub_100030194();
  v2(v1);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return v0;
}

uint64_t sub_10002F8B8()
{
  uint64_t v1 = sub_1000308FC();
  v2(v1);
  sub_10002FB84();
  sub_100030658();
  v3();
  return v0;
}

uint64_t sub_10002F90C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002F954()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F994()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_100030474();
  return sub_100015DE8(v3, v4, v5);
}

uint64_t sub_10002FA2C()
{
  return sub_10002EBA0() & 1;
}

uint64_t sub_10002FA4C(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_10002FA88()
{
  return v0;
}

uint64_t sub_10002FADC()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10002FAF0()
{
  return sub_100006960(v0, 1, 1, v1);
}

uint64_t sub_10002FB1C(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_10002FB48()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_10002FBA8(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v1;
  a1[5] = v2;
  return swift_retain_n();
}

uint64_t sub_10002FBCC()
{
  return Actor.assertIsolated(_:file:line:)();
}

uint64_t sub_10002FBF0(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v1;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v2;
  return swift_retain_n();
}

void *sub_10002FC18@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10002FC78()
{
  return swift_retain_n();
}

void sub_10002FC90()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
  *(void *)(v2 - 88) = (unint64_t)((1 << *(unsigned char *)(v1 + 32)) + 63) >> 6;
}

uint64_t sub_10002FCE8()
{
  return Actor.assertIsolated(_:file:line:)();
}

uint64_t sub_10002FD0C()
{
  return Set.init(minimumCapacity:)();
}

uint64_t sub_10002FD74()
{
  sub_100006960(v1, 0, 1, v0);
  return sub_100006AE8(v1, 1, v0);
}

void sub_10002FDAC()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_10002FDD0(uint64_t a1)
{
  return a1 - 8;
}

void sub_10002FDDC()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_10002FE18()
{
  return swift_task_alloc();
}

uint64_t sub_10002FE30()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_10002FE78@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = v1;
  return swift_release();
}

uint64_t sub_10002FEC4()
{
  return v0;
}

uint64_t sub_10002FED4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

void sub_10002FF20()
{
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(v1 - 104) = *(void *)(v0 + 72);
  *(void *)(v1 - 96) = v2;
}

uint64_t sub_10002FF74()
{
  return swift_retain();
}

uint64_t sub_10002FF90()
{
  return swift_slowAlloc();
}

uint64_t sub_10002FFE0()
{
  void *v0 = 0x8000000000000000;
  return swift_retain();
}

uint64_t sub_10003009C()
{
  return v0;
}

uint64_t sub_1000300B0()
{
  return v0;
}

uint64_t sub_1000300C4()
{
  uint64_t result = v1 + 56;
  *(void *)(v3 - 104) = v0;
  *(void *)(v3 - 96) = v2 + 56;
  return result;
}

uint64_t sub_1000300F0()
{
  return *(void *)(v0 - 232);
}

uint64_t sub_100030104(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_100030110()
{
  return sub_100006960(v0, 1, 1, v1);
}

uint64_t sub_10003016C()
{
  return v0 + 56;
}

uint64_t sub_100030194()
{
  return 0;
}

uint64_t sub_1000301A0()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_1000301C8()
{
  return v0;
}

uint64_t sub_1000301E0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100030210()
{
  return swift_allocObject();
}

uint64_t sub_100030228()
{
  return swift_allocObject();
}

uint64_t sub_100030240()
{
  return Actor.assertIsolated(_:file:line:)();
}

void sub_100030264()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_100030280()
{
  return v0;
}

uint64_t sub_1000302B0()
{
  return v0;
}

uint64_t sub_1000302D8()
{
  return swift_dynamicCast();
}

uint64_t sub_100030314()
{
  return swift_slowAlloc();
}

uint64_t sub_10003032C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100030350()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100030370()
{
  return v0;
}

uint64_t sub_100030394()
{
  return *(void *)(v0 + 48) + v1;
}

void sub_1000303E0(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_100030400()
{
  void *v0 = *(void *)(*(void *)(*(void *)v1 + 48) + 8 * v2);
  return swift_retain();
}

uint64_t sub_10003042C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 56) = *(void *)(a1 + 16);
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100030448()
{
  return v0;
}

uint64_t sub_10003045C(uint64_t a1, uint64_t a2)
{
  return sub_100003730(v2, a2, v3);
}

uint64_t sub_100030474()
{
  return v0;
}

uint64_t sub_100030488()
{
  return sub_100006960(v1, 1, 1, v0);
}

uint64_t sub_1000304A8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000304E0()
{
  return v0 + 8;
}

uint64_t sub_100030544()
{
  return swift_allocObject();
}

uint64_t sub_100030578()
{
  return v0;
}

uint64_t sub_100030594(uint64_t a1)
{
  return a1 + v1;
}

uint64_t sub_1000305B0(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_1000305BC(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t sub_1000305E4()
{
  return swift_release();
}

uint64_t sub_1000305FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = result;
  v4[3] = a2;
  return result;
}

uint64_t sub_100030608(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v1;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v2;
  return swift_retain_n();
}

uint64_t sub_100030630()
{
  return v0;
}

uint64_t sub_10003069C()
{
  return v0;
}

BOOL sub_1000306C4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100030718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = *v9;
  *uint64_t v9 = a9;
  return result;
}

uint64_t sub_100030728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *uint64_t v9 = a9;
  return swift_unknownObjectRelease();
}

uint64_t sub_100030794()
{
  return v0;
}

uint64_t sub_1000307AC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = v1;
  return swift_release();
}

uint64_t sub_1000307E4()
{
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = *(void *)(*(void *)(v0 + v2) + 16);
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100030808()
{
  return v0 + 8;
}

uint64_t sub_10003086C()
{
  return Actor.assertIsolated(_:file:line:)();
}

uint64_t sub_100030890(uint64_t a1, uint64_t a2)
{
  return sub_100003730(v2, a2, v3);
}

uint64_t sub_1000308D0()
{
  return 0;
}

uint64_t sub_1000308FC()
{
  return 0;
}

uint64_t sub_10003090C()
{
  return v0 + 8;
}

uint64_t sub_100030988()
{
  return swift_arrayDestroy();
}

char *sub_100030A0C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return (char *)a1 + v2;
}

uint64_t sub_100030A34@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_100030A40()
{
  return swift_task_alloc();
}

uint64_t sub_100030A60()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_100030A94()
{
  return *(void *)(v0 - 88);
}

uint64_t sub_100030AE8()
{
  return v0;
}

uint64_t sub_100030B28()
{
  return swift_arrayDestroy();
}

void sub_100030B80(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_100030BB8()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100030BD0()
{
  return v0;
}

uint64_t sub_100030C24()
{
  return swift_arrayDestroy();
}

uint64_t sub_100030C74()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

uint64_t sub_100030CBC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100008130(v0 + 64);
  swift_release();
  sub_100008130(v0 + 112);
  swift_release();
  sub_100008130(v0 + 160);
  sub_100008130(v0 + 200);
  sub_100008130(v0 + 240);
  sub_100008130(v0 + 280);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100030DB8()
{
  sub_100030CBC();

  return _swift_deallocClassInstance(v0, 392, 7);
}

uint64_t type metadata accessor for DaemonContext()
{
  return self;
}

uint64_t sub_100030E10(uint64_t a1)
{
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = [objc_allocWithZone((Class)NSProcessInfo) init];
  uint64_t v3 = v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v3, v8, v4);
  *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) = a1;
  return v1;
}

uint64_t sub_100030F20()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_100030F3C, 0);
}

uint64_t sub_100030F3C()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031004;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100031004()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000EE0C, 0, 0);
}

uint64_t sub_1000310D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  sub_100003A70(&qword_10015B208);
  v3[4] = swift_task_alloc();
  return _swift_task_switch(sub_100031164, 0, 0);
}

uint64_t sub_100031164()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for TaskPriority();
  sub_10002FAF0();
  uint64_t v2 = (void *)sub_100032374();
  sub_10003232C(v2);
  sub_100101EC8(v1, (uint64_t)&unk_10015BD70, (uint64_t)v2);
  sub_100006B10(v1);
  sub_10002FAF0();
  uint64_t v3 = (void *)sub_100032374();
  sub_10003232C(v3);
  sub_100101EC8(v1, (uint64_t)&unk_10015BD80, (uint64_t)v3);
  sub_100006B10(v1);
  sub_10002FAF0();
  uint64_t v4 = (void *)sub_100032374();
  sub_10003232C(v4);
  sub_100101EC8(v1, (uint64_t)&unk_10015BD90, (uint64_t)v4);
  sub_100006B10(v1);
  sub_10002FAF0();
  uint64_t v5 = (void *)sub_100032374();
  sub_10003232C(v5);
  sub_100101EC8(v1, (uint64_t)&unk_10015BDA0, (uint64_t)v5);
  sub_100006B10(v1);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  uint64_t v7 = sub_100003A70(&qword_10015BDA8);
  *uint64_t v6 = v0;
  v6[1] = sub_100031338;
  return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v7);
}

uint64_t sub_100031338()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100031418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100031438, 0, 0);
}

uint64_t sub_100031438()
{
  sub_1000086E0();
  *(void *)(v0 + 24) = *(void *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13modelmanagerd6Daemon_context)
                                   + 56);
  swift_retain();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000305BC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_100032328;
  return sub_1000D97C4();
}

uint64_t sub_1000314E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100031500, 0, 0);
}

uint64_t sub_100031500()
{
  sub_1000086E0();
  *(void *)(v0 + 24) = *(void *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13modelmanagerd6Daemon_context)
                                   + 48);
  swift_retain();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000305BC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000315A8;
  return sub_100010950();
}

uint64_t sub_1000315A8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_100031688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000316A8, 0, 0);
}

uint64_t sub_1000316A8()
{
  sub_1000086E0();
  *(void *)(v0 + 24) = *(void *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13modelmanagerd6Daemon_context)
                                   + 320);
  swift_retain();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000305BC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_100032328;
  return sub_100058950();
}

uint64_t sub_100031750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100031770, 0, 0);
}

uint64_t sub_100031770()
{
  sub_1000086E0();
  *(void *)(v0 + 24) = *(void *)(*(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13modelmanagerd6Daemon_context)
                                   + 24);
  swift_retain();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000305BC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_100032328;
  return sub_10008CF88();
}

uint64_t sub_100031818()
{
  *(void *)(v1 + 24) = v0;
  return sub_10000EFE0((uint64_t)sub_100031834, v0);
}

uint64_t sub_100031834()
{
  type metadata accessor for _OSActivity();
  uint64_t v1 = _OSActivity.__allocating_init(_:)();
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109120;
    *(_DWORD *)(v0 + 56) = [*(id *)(v5 + 112) processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Daemon started with pid: %d", v6, 8u);
    sub_100032358();
  }
  else
  {
    swift_release();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000319C8;
  return sub_100030F20();
}

uint64_t sub_1000319C8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *os_log_type_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100031AA8, v2, 0);
}

uint64_t sub_100031AA8()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Daemon setup complete", v3, 2u);
    sub_100032358();
  }

  static ModelXPCRequest.serviceName.getter();
  type metadata accessor for XPCListener.InitializationOptions();
  swift_task_alloc();
  swift_retain();
  static XPCListener.InitializationOptions.none.getter();
  type metadata accessor for XPCListener();
  swift_allocObject();
  XPCListener.init(service:targetQueue:options:incomingSessionHandler:)();
  swift_release();
  swift_task_dealloc();
  _OSActivity.close()();
  swift_release();
  os_log_type_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100031D90(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a2 + OBJC_IVAR____TtC13modelmanagerd6Daemon_context) + 104))
  {
    swift_retain();
    sub_100003A70(&qword_10015BD48);
    sub_100031FF0();
    dispatch thunk of XPCListener.IncomingSessionRequest.accept<A>(_:)();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100031E2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd6Daemon_logHandle;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100031EB0()
{
  sub_100031E2C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100031EDC()
{
  return type metadata accessor for Daemon();
}

uint64_t type metadata accessor for Daemon()
{
  uint64_t result = qword_10015BC88;
  if (!qword_10015BC88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100031F2C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100031FE0(uint64_t a1)
{
  return sub_100031D90(a1, v1);
}

uint64_t sub_100031FE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004B5F0(v1, a1);
}

unint64_t sub_100031FF0()
{
  unint64_t result = qword_10015BD50;
  if (!qword_10015BD50)
  {
    sub_100006A5C(&qword_10015BD48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015BD50);
  }
  return result;
}

uint64_t sub_100032038()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_1000086AC(v5);
  *uint64_t v6 = v7;
  v6[1] = sub_100007F88;
  return sub_1000310D0(v4, v2, v0);
}

uint64_t sub_1000320DC()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_10000875C();
  return sub_100031418(v3, v4, v5, v6);
}

uint64_t sub_100032170()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_10000875C();
  return sub_1000314E0(v3, v4, v5, v6);
}

uint64_t sub_100032204()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_10000875C();
  return sub_100031688(v3, v4, v5, v6);
}

uint64_t sub_100032298()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008654;
  uint64_t v3 = sub_10000875C();
  return sub_100031750(v3, v4, v5, v6);
}

uint64_t sub_10003232C(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return swift_retain();
}

uint64_t sub_100032358()
{
  return swift_slowDealloc();
}

uint64_t sub_100032374()
{
  return swift_allocObject();
}

uint64_t sub_10003238C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015BDB0);
  sub_100003B18(v0, (uint64_t)qword_10015BDB0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100032400()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_1000375F0();
}

uint64_t sub_10003248C()
{
  sub_1000086E0();
  v1[26] = v2;
  v1[27] = v0;
  v1[24] = v3;
  v1[25] = v4;
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult();
  v1[28] = v5;
  sub_10002FA4C(v5);
  v1[29] = v6;
  v1[30] = sub_10002FE18();
  uint64_t v7 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v7);
  v1[31] = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015C010);
  sub_10002FDD0(v8);
  v1[32] = sub_10002FE18();
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor();
  v1[33] = v9;
  sub_10002FA4C(v9);
  v1[34] = v10;
  v1[35] = sub_1000436D8();
  v1[36] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AuditToken();
  v1[37] = v11;
  sub_10002FA4C(v11);
  v1[38] = v12;
  v1[39] = sub_10002FE18();
  uint64_t v13 = type metadata accessor for Session.Metadata();
  v1[40] = v13;
  sub_10002FA4C(v13);
  v1[41] = v14;
  v1[42] = sub_1000436D8();
  v1[43] = swift_task_alloc();
  uint64_t v15 = sub_100003A70(&qword_10015B9A0);
  v1[44] = v15;
  sub_10002FA4C(v15);
  v1[45] = v16;
  v1[46] = sub_1000436D8();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_100032664()
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v1 = *(void **)(v0 + 216);
  *(void *)(v0 + 400) = Session.Metadata.supportedAssetBundleIdentifiers.getter();
  *(void *)(v0 + 408) = Session.Metadata.useCaseID.getter();
  *(void *)(v0 + 416) = v2;
  *(void *)(v0 + 424) = Session.Metadata.onBehalfOfPID.getter();
  Session.Metadata.id.getter();
  *(_DWORD *)(v0 + 552) = AuditToken.processIdentifier.getter();
  sub_10000853C(v1 + 28, v1[31]);
  uint64_t v3 = sub_100043F9C();
  *(void *)(v0 + 432) = v4(v3);
  *(void *)(v0 + 440) = v1[33];
  sub_1000307C8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100032768()
{
  sub_1000086E0();
  *(void *)(v0 + 448) = *(void *)(*(void *)(v0 + 440) + 192);
  swift_bridgeObjectRetain();
  sub_10002FB10();
  return _swift_task_switch(v1, v2, v3);
}

void *sub_1000327D8()
{
  uint64_t v42 = v0;
  sub_100044CFC(*(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 448));
  char v2 = v1;
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003B18(v7, (uint64_t)qword_10015BDB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v38 = *(int *)(v0 + 552);
      unint64_t v10 = *(void *)(v0 + 416);
      uint64_t v39 = *(void *)(v0 + 408);
      uint64_t v11 = sub_10002FF90();
      v41[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v11 = 136315650;
      sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 184) = sub_10001DF20(v12, v13, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v14 = sub_1000443CC();
      uint64_t v40 = v15;
      ((void (*)(uint64_t))v15)(v14);
      *(_WORD *)(v11 + 12) = 2048;
      *(void *)(v0 + 152) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 136) = sub_10001DF20(v39, v10, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Blocking creation of session %s for pid %ld: Use case %s has been disabled", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 360) + 8);
      sub_10004381C();
      v22();

      swift_bridgeObjectRelease_n();
    }
    uint64_t v23 = *(void *)(v0 + 432);
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 352);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v27 = *(void **)(v0 + 216);
    uint64_t v28 = v27[31];
    uint64_t v29 = v27[32];
    sub_10000853C(v27 + 28, v28);
    sub_100043E68();
    v30();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 64))(v25, v26, v23, v28, v29);
    sub_100044468();
    sub_100043924();
    v31();
    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    *int64_t v32 = v24;
    v32[1] = v36;
    sub_10002FC6C();
    sub_100043E9C();
    v33();
    swift_willThrow();
    swift_release();
    v40(v25, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043EA8();
    __asm { BRAA            X1, X16 }
  }
  int64_t v16 = *(void *)(v0 + 424);
  unint64_t result = sub_10000853C((void *)(*(void *)(v0 + 216) + 128), *(void *)(*(void *)(v0 + 216) + 152));
  if (v16 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(uint64_t *)(v0 + 424) > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v18 = swift_task_alloc();
  uint64_t v19 = (void *)sub_10004419C(v18);
  *uint64_t v19 = v20;
  v19[1] = sub_100032D58;
  sub_100043EA8();
  return (void *)sub_1000D4284();
}

uint64_t sub_100032D58()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *char v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100032E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  uint64_t v27 = v24[43];
  uint64_t v28 = v24[40];
  uint64_t v29 = v24[41];
  uint64_t v31 = v24[38];
  uint64_t v30 = v24[39];
  uint64_t v32 = v24[37];
  uint64_t v33 = v24[27];
  uint64_t v34 = v24[24];
  uint64_t v35 = v24[25];
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v24[58] = v36;
  v24[59] = (v29 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v36(v27, v34, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v35, v32);
  uint64_t v37 = *(void *)(v33 + 216);
  uint64_t v38 = sub_100044474();
  sub_100042C34(v38, v39);
  swift_retain();
  uint64_t v73 = v33 + 176;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100004084((unint64_t)_swiftEmptyArrayStorage);
    uint64_t v70 = v68;
  }
  else
  {
    uint64_t v70 = _swiftEmptySetSingleton;
  }
  uint64_t v40 = v24[43];
  uint64_t v41 = v24[39];
  uint64_t v42 = v24[32];
  uint64_t v71 = v24[26];
  uint64_t v72 = v24[33];
  uint64_t v43 = sub_100043EDC();
  sub_1000080E0(v43, v44);
  sub_100008678();
  uint64_t v45 = (uint64_t *)sub_10002FE18();
  sub_1000441C4();
  v46();
  uint64_t v47 = sub_100042A8C(v40, v41, v37, *v45, (uint64_t)v70);
  v24[60] = v47;
  sub_100008130((uint64_t)(v24 + 2));
  swift_task_dealloc();
  sub_100043174(v71, v42, &qword_10015C010);
  if (sub_100006AE8(v42, 1, v72) == 1)
  {
    sub_100042EDC(v24[32], &qword_10015C010);
  }
  else
  {
    sub_1000446BC();
    v48();
    sub_1000E15C4();
    uint64_t v49 = sub_100044784();
    v50(v49);
  }
  uint64_t v51 = v24[53];
  uint64_t v52 = v24[31];
  uint64_t v53 = v24[27];
  sub_100043EDC();
  sub_100043F38();
  swift_retain();
  sub_100020E7C(&a13, v47);
  swift_endAccess();
  swift_release();
  uint64_t v54 = type metadata accessor for TaskPriority();
  sub_10004388C(v54);
  uint64_t v56 = sub_100042F68(&qword_10015C050, v55, (void (*)(uint64_t))type metadata accessor for SessionManager);
  uint64_t v57 = (void *)sub_100030210();
  v57[2] = v53;
  v57[3] = v56;
  v57[4] = v53;
  v57[5] = v51;
  swift_retain_n();
  v24[61] = sub_10000375C(v52, (uint64_t)&unk_10015C090, (uint64_t)v57);
  uint64_t v58 = (void *)swift_task_alloc();
  v24[62] = v58;
  v58[2] = v53;
  v58[3] = v47;
  v58[4] = v73;
  char v59 = (void *)swift_task_alloc();
  v24[63] = v59;
  void *v59 = v24;
  v59[1] = sub_1000331B8;
  sub_100043638();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v60, v61, v62, v63, v64, v65, v66, v67, v70, v71, v72, v73, a13, a14, a15, a16);
}

uint64_t sub_1000331B8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 512) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 216);
    uint64_t v8 = sub_100034048;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 216);
    swift_task_dealloc();
    uint64_t v8 = sub_1000332AC;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1000332AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v28;
  a24 = v29;
  sub_100043E90();
  a22 = v24;
  uint64_t v30 = v24[64];
  v24[65] = sub_1000E1AF8();
  if (v30)
  {
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_10004451C();
    sub_100003B18(v32, (uint64_t)qword_10015BDB0);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (sub_100044098(v34))
    {
      a9 = v24 + 22;
      a10 = v24 + 21;
      sub_10000EFE8();
      uint64_t v35 = (void *)sub_100043994();
      a11 = sub_10002FF90();
      a12 = a11;
      sub_100044370(4.8151e-34);
      sub_1000E712C();
      sub_1000444C4();
      v24[21] = sub_10001DF20(v27, v26, &a12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043604();
      sub_100030C74();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      sub_100043AEC(v36);
      *uint64_t v35 = v26;
      swift_errorRelease();
      swift_errorRelease();
      sub_100043EC4((void *)&_mh_execute_header, v33, v25, "Session %s couldn't mark assets as in use by the session: %@");
      sub_100003A70(&qword_10015BA58);
      sub_100044038();
      sub_10000ED7C();
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_100043604();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v37 = swift_task_alloc();
    uint64_t v38 = (void *)sub_100044028(v37);
    *uint64_t v38 = v39;
    v38[1] = sub_100033810;
    sub_1000446B0();
    sub_100043638();
    return Task<>.value.getter(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v31 = v24[35];
    Session.Metadata.id.getter();
    sub_1000E1B50(v31);
    uint64_t v48 = (void *)swift_task_alloc();
    v24[66] = v48;
    *uint64_t v48 = v24;
    v48[1] = sub_1000335C4;
    sub_100043638();
    return sub_1000779EC();
  }
}

uint64_t sub_1000335C4()
{
  sub_100030850();
  sub_100030AFC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 536) = v0;
  swift_task_dealloc();
  sub_100044174();
  swift_bridgeObjectRelease();
  sub_100043AE0();
  v4();
  sub_100043F00();
  v5();
  sub_10000F0B4();
  sub_1000307C8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100033778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  uint64_t v12 = swift_task_alloc();
  unint64_t v13 = (void *)sub_100044028(v12);
  *unint64_t v13 = v14;
  v13[1] = sub_100033810;
  uint64_t v15 = sub_1000446B0();
  return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_100033810()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000338EC()
{
  uint64_t v58 = v0;
  char v1 = *(unsigned char *)(v0 + 557);
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10004451C();
  sub_1000437EC(v2, (uint64_t)qword_10015BDB0);
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_10004361C(v4))
  {
    uint64_t v52 = *(void *)(v0 + 424);
    char v54 = v1;
    uint64_t v5 = sub_10002FF90();
    uint64_t v57 = sub_10000EFC8();
    *(_DWORD *)uint64_t v5 = 136315650;
    swift_retain();
    uint64_t v6 = sub_1000E712C();
    unint64_t v8 = v7;
    swift_release();
    *(void *)(v0 + 80) = sub_10001DF20(v6, v8, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043604();
    *(_WORD *)(v5 + 12) = 2048;
    *(void *)(v0 + 144) = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2080;
    *(unsigned char *)(v0 + 556) = v54;
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = sub_10001DF20(v9, v10, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044144();
    _os_log_impl(v11, v12, v13, v14, (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100043604();
  }

  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v55 = *(void (**)(void, uint64_t, uint64_t))(v0 + 464);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v48 = *(void *)(v0 + 352);
  uint64_t v49 = *(void *)(v0 + 376);
  *(void *)os_log_type_t type = *(void *)(v0 + 336);
  uint64_t v53 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = *(void **)(v0 + 216);
  uint64_t v47 = *(void *)(v0 + 192);
  uint64_t v21 = v19[31];
  uint64_t v20 = v19[32];
  sub_10000853C(v19 + 28, v21);
  sub_100043E68();
  v22();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 64))(v16, v18, v15, v21, v20);
  sub_1000437DC();
  v23();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v49, v16, v48);
  v55(*(void *)type, v47, v53);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    os_log_type_t typea = v25;
    uint64_t v43 = *(int *)(v0 + 552);
    uint64_t v44 = *(void *)(v0 + 424);
    unint64_t v45 = *(void *)(v0 + 416);
    uint64_t v46 = *(void *)(v0 + 408);
    uint64_t v56 = *(void *)(v0 + 360);
    uint64_t v26 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136316418;
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 88) = sub_10001DF20(v27, v28, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(void))(v56 + 8);
    sub_10004381C();
    v29();
    *(_WORD *)(v26 + 12) = 2048;
    *(void *)(v0 + 96) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 22) = 2048;
    *(void *)(v0 + 104) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 32) = 2080;
    uint64_t v30 = Session.Metadata.loggingIdentifier.getter();
    *(void *)(v0 + 112) = sub_10001DF20(v30, v31, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043924();
    v32();
    *(_WORD *)(v26 + 42) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 120) = sub_10001DF20(v46, v45, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 52) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 128) = sub_10001DF20(v33, v35, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, typea, "Added session %s for pid %ld (on behalf of pid %ld), loggingIdentifier: %s, useCaseIdentifier: %s, supportedAssets: %s", (uint8_t *)v26, 0x3Eu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
    swift_release();
    swift_release();

    swift_release();
    sub_10004381C();
    v29();
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 392);
    uint64_t v38 = *(void *)(v0 + 352);
    uint64_t v37 = *(void *)(v0 + 360);
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_100043AE0();
    v39();
    uint64_t v40 = *(void (**)(void))(v37 + 8);
    sub_100044648();
    sub_100043924();
    v40();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v40)(v36, v38);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v41();
}

uint64_t sub_100034048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v27;
  a24 = v28;
  sub_100043E90();
  a22 = v24;
  swift_task_dealloc();
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_10004451C();
  sub_100003B18(v29, (uint64_t)qword_10015BDB0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    a10 = v24 + 176;
    a11 = v24 + 168;
    sub_10000EFE8();
    uint64_t v32 = (void *)sub_100043994();
    a12 = sub_10002FF90();
    a13 = a12;
    sub_100044370(4.8151e-34);
    sub_1000E712C();
    sub_1000444C4();
    uint64_t v33 = sub_10001DF20(v26, v25, &a13);
    sub_100044330(v33);
    sub_100043604();
    swift_bridgeObjectRelease();
    sub_1000447C8();
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    sub_100043AEC(v34);
    *uint64_t v32 = v25;
    swift_errorRelease();
    swift_errorRelease();
    sub_100043EC4((void *)&_mh_execute_header, v30, v31, "Session %s couldn't mark assets as in use by the session: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100044038();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100043604();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v35 = swift_task_alloc();
  uint64_t v36 = (void *)sub_100044028(v35);
  *uint64_t v36 = v37;
  v36[1] = sub_100033810;
  sub_1000446B0();
  sub_100043638();
  return Task<>.value.getter(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
}

uint64_t sub_100034280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v27;
  a24 = v28;
  sub_100043E90();
  a22 = v24;
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_10004451C();
  sub_100003B18(v29, (uint64_t)qword_10015BDB0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    a10 = v24 + 176;
    a11 = v24 + 168;
    sub_10000EFE8();
    uint64_t v32 = (void *)sub_100043994();
    a12 = sub_10002FF90();
    a13 = a12;
    sub_100044370(4.8151e-34);
    sub_1000E712C();
    sub_1000444C4();
    uint64_t v33 = sub_10001DF20(v26, v25, &a13);
    sub_100044330(v33);
    sub_100043604();
    swift_bridgeObjectRelease();
    sub_1000447C8();
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    sub_100043AEC(v34);
    *uint64_t v32 = v25;
    swift_errorRelease();
    swift_errorRelease();
    sub_100043EC4((void *)&_mh_execute_header, v30, v31, "Session %s couldn't mark assets as in use by the session: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100044038();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100043604();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v35 = swift_task_alloc();
  uint64_t v36 = (void *)sub_100044028(v35);
  *uint64_t v36 = v37;
  v36[1] = sub_100033810;
  sub_1000446B0();
  sub_100043638();
  return Task<>.value.getter(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12);
}

uint64_t sub_1000344B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return _swift_task_switch(sub_1000344D4, a4, 0);
}

void *sub_1000344D4()
{
  sub_1000086E0();
  int64_t v1 = v0[4];
  unint64_t result = sub_10000853C((void *)(v0[3] + 128), *(void *)(v0[3] + 152));
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v0[4];
  if (v3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_100034598;
  return (void *)sub_1000D54F4(v3);
}

uint64_t sub_100034598()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *os_log_type_t v4 = v3;
  *(unsigned char *)(v6 + 48) = v5;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100034678()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 48);
  return sub_10000EE0C();
}

uint64_t sub_100034688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100003A70(&qword_10015C098);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v26[1] = *(void *)(a2 + 120);
  sub_100042C34(a4, (uint64_t)v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  sub_10000831C(v28, v13 + 24);
  *(void *)(v13 + 64) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_100043368;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E9618;
  aBlock[3] = &unk_100153778;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[2] = _swiftEmptyArrayStorage;
  sub_1000433D0();
  sub_100003A70(&qword_10015C0A0);
  sub_10000841C(&qword_10015F160, &qword_10015C0A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return swift_release();
}

uint64_t sub_100034A10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v7 = sub_100003A70(&qword_10015C098);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  uint64_t v11 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000E164C();
  unint64_t v18 = v17;
  uint64_t v29 = a1;
  uint64_t v30 = a4;
  uint64_t v19 = v16;
  sub_10000853C(a2, a2[3]);
  uint64_t v28 = v19;
  uint64_t v27 = sub_1000E9E14(v19, v18);
  uint64_t v20 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v15, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v30, v7);
  unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = 0;
  uint64_t v23 = v28;
  uint64_t v24 = v29;
  *((void *)v22 + 4) = v31;
  *((void *)v22 + 5) = v24;
  *((void *)v22 + 6) = v23;
  *((void *)v22 + 7) = v18;
  *((void *)v22 + 8) = v27;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v22[v21], v11, v7);
  swift_retain();
  swift_retain();
  sub_100003730((uint64_t)v15, (uint64_t)&unk_10015C0B0, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_100034C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v12;
  v8[4] = a6;
  v8[5] = a7;
  v8[3] = a5;
  type metadata accessor for DaemonSession.LazyState(0);
  v8[8] = swift_task_alloc();
  return _swift_task_switch(sub_100034CFC, a4, 0);
}

uint64_t sub_100034CFC()
{
  sub_1000086EC();
  sub_1000E13AC(v0[4], v0[5], v0[6]);
  v0[9] = 0;
  sub_100042DD8(v0[8], (void (*)(void))type metadata accessor for DaemonSession.LazyState);
  return _swift_task_switch(sub_100034DA8, 0, 0);
}

uint64_t sub_100034DA8()
{
  sub_1000086E0();
  sub_100003A70(&qword_10015C098);
  CheckedContinuation.resume(returning:)();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100034E18()
{
  sub_1000086E0();
  *(void *)(v0 + 16) = *(void *)(v0 + 72);
  sub_100003A70(&qword_10015C098);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_100034E98()
{
  sub_1000086E0();
  v1[14] = v2;
  v1[15] = v0;
  v1[13] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B9A0);
  v1[16] = v4;
  sub_10002FA4C(v4);
  v1[17] = v5;
  v1[18] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100034F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint8_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  uint64_t v85 = v24 + 96;
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100003B18(v27, (uint64_t)qword_10015BDB0);
  *(void *)(v24 + 152) = v28;
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    a9 = v24 + 216;
    a11 = (uint8_t *)v28;
    uint64_t v31 = swift_slowAlloc();
    a10 = sub_10002FF90();
    a13 = a10;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_retain();
    sub_1000E712C();
    swift_release();
    uint64_t v32 = sub_1000443CC();
    *(void *)(v24 + 96) = sub_10001DF20(v32, v33, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044204();
    *(_WORD *)(v31 + 12) = 1024;
    int v35 = AuditToken.processIdentifier.getter();
    swift_release();
    *(_DWORD *)(v24 + 216) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Removing session %s for pid %d", (uint8_t *)v31, 0x12u);
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v36 = *(void *)(v24 + 104);
  sub_100043F38();
  uint64_t v37 = sub_10011739C(v36);
  swift_endAccess();
  if (v37)
  {
    uint64_t v38 = v24 + 88;
    swift_release();
    swift_retain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    uint64_t v41 = objc_retain_x21;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = (uint8_t *)sub_100030314();
      a13 = sub_10002FF90();
      *(_DWORD *)uint64_t v42 = 136315138;
      a11 = v42 + 4;
      swift_retain();
      uint64_t v43 = sub_1000E712C();
      unint64_t v45 = v44;
      swift_release();
      uint64_t v46 = v43;
      uint64_t v38 = v24 + 88;
      *(void *)(v24 + 88) = sub_10001DF20(v46, v45, &a13);
      uint64_t v41 = objc_retain_x21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043604();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Removing session %s waiting on update task", v42, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_100043604();
    }

    uint64_t v55 = *(void *)(*(void *)(v24 + 120) + 280);
    *(void *)(v24 + 160) = v55;
    if (v55)
    {
      swift_retain();
      uint64_t v56 = (void *)swift_task_alloc();
      *(void *)(v24 + 168) = v56;
      *uint64_t v56 = v24;
      v56[1] = sub_1000355C0;
      sub_100043638();
      return Task<>.value.getter(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, v85);
    }
    sub_100043B14();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (sub_100044098(v66))
    {
      uint64_t v85 = v24 + 80;
      uint64_t v67 = (_DWORD *)sub_100030314();
      a13 = sub_10002FF90();
      *uint64_t v67 = *((void *)v41 + 217);
      a11 = (uint8_t *)(v67 + 1);
      swift_retain();
      sub_1000E712C();
      sub_100043BF0();
      uint64_t v68 = sub_10001DF20(v38, 0xCuLL, &a13);
      sub_10004458C(v68, (void *)(v24 + 80));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043604();
      sub_10004377C((void *)&_mh_execute_header, v65, (os_log_type_t)v39, "Removing session %s stopping monitoring process events");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_100043604();
    }

    sub_1000445F0(*(void *)(v24 + 120));
    *(void *)(v24 + 176) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
    Session.Metadata.onBehalfOfPID.getter();
    sub_1000445E4();
    if (v78 != v79)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return Task<>.value.getter(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, v85);
    }
    sub_10004424C();
    if (!(v78 ^ v79 | v80)) {
      goto LABEL_30;
    }
    uint64_t v81 = swift_task_alloc();
    uint64_t v82 = (void *)sub_1000447F4(v81);
    *uint64_t v82 = v83;
    v82[1] = sub_100035830;
    sub_100043638();
    return sub_1000D4630();
  }
  else
  {
    swift_retain_n();
    uint64_t v47 = (void *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.fault.getter();
    if (sub_10004361C(v48))
    {
      uint64_t v85 = v24 + 40;
      uint64_t v49 = (_DWORD *)sub_100030314();
      a13 = sub_10002FF90();
      *uint64_t v49 = 136315138;
      swift_retain();
      uint64_t v50 = sub_1000E712C();
      unint64_t v52 = v51;
      swift_release();
      *(void *)(v24 + 40) = sub_10001DF20(v50, v52, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043604();
      sub_10000F190((void *)&_mh_execute_header, v53, v54, "Session manager was not managing session %s");
      sub_1000436BC();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_100043604();
    }

    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043638();
    return v70(v69, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, v85, a13, a14, a15, a16);
  }
}

uint64_t sub_1000355C0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

void sub_1000356B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  sub_100030AFC();
  a18 = v20;
  sub_100043B14();
  uint64_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (sub_10004361C(v24))
  {
    sub_100043690();
    sub_10002FF90();
    sub_100044418();
    sub_100043760(4.8149e-34);
    sub_1000E712C();
    uint64_t v25 = sub_100043728();
    v20[10] = sub_100043BB0(v25, v26, &a9);
    sub_100043948();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_10000F190((void *)&_mh_execute_header, v27, v28, "Removing session %s stopping monitoring process events");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000441D0();
  }

  sub_1000445F0(v20[15]);
  v20[22] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  Session.Metadata.onBehalfOfPID.getter();
  sub_1000445E4();
  if (v29 != v30)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  sub_10004424C();
  if (!(v29 ^ v30 | v31)) {
    goto LABEL_11;
  }
  uint64_t v32 = swift_task_alloc();
  unint64_t v33 = (void *)sub_1000447F4(v32);
  *unint64_t v33 = v34;
  v33[1] = sub_100035830;
  sub_1000307C8();
  sub_1000D4630();
}

uint64_t sub_100035830()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10003590C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  sub_100030AFC();
  a18 = v20;
  sub_100043B14();
  uint64_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (sub_10004361C(v24))
  {
    sub_100043690();
    sub_10002FF90();
    sub_100044418();
    sub_100043760(4.8149e-34);
    sub_1000E712C();
    uint64_t v25 = sub_100043728();
    v20[9] = sub_100043BB0(v25, v26, &a9);
    sub_100043948();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_10000F190((void *)&_mh_execute_header, v27, v28, "Removing session %s cancelling all requests");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000441D0();
  }

  char v29 = (void *)swift_task_alloc();
  v20[24] = v29;
  *char v29 = v20;
  v29[1] = sub_100035A4C;
  sub_100044070(v20[15]);
  sub_1000307C8();
  return sub_1000E1BA8();
}

uint64_t sub_100035A4C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100035B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  sub_100030AFC();
  a18 = v20;
  sub_100043B14();
  uint64_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (sub_10004361C(v24))
  {
    sub_100043690();
    sub_10002FF90();
    sub_100044418();
    sub_100043760(4.8149e-34);
    sub_1000E712C();
    uint64_t v25 = sub_100043728();
    *(void *)(v20 + 64) = sub_100043BB0(v25, v26, &a9);
    sub_100043948();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_10000F190((void *)&_mh_execute_header, v27, v28, "Removing session %s waiting for fully cancelled unloads");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000441D0();
  }

  char v29 = (void *)swift_task_alloc();
  *(void *)(v20 + 200) = v29;
  *char v29 = v20;
  v29[1] = sub_100035C68;
  sub_1000307C8();
  return sub_10010AED8();
}

uint64_t sub_100035C68()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100035D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  sub_100030AFC();
  a18 = v20;
  sub_100043B14();
  uint64_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (sub_10004361C(v24))
  {
    sub_100043690();
    sub_10002FF90();
    sub_100044418();
    sub_100043760(4.8149e-34);
    sub_1000E712C();
    uint64_t v25 = sub_100043728();
    *(void *)(v20 + 56) = sub_100043BB0(v25, v26, &a9);
    sub_100043948();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_10000F190((void *)&_mh_execute_header, v27, v28, "Removing session %s releasing assets");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000441D0();
  }

  Session.Metadata.id.getter();
  char v29 = (void *)swift_task_alloc();
  *(void *)(v20 + 208) = v29;
  *char v29 = v20;
  v29[1] = sub_100035EA4;
  sub_1000307C8();
  return sub_100084500();
}

uint64_t sub_100035EA4()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100035FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  sub_100030AFC();
  a18 = v20;
  sub_100043B14();
  uint64_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (sub_10004361C(v24))
  {
    sub_100043690();
    sub_10002FF90();
    sub_100044418();
    sub_100043760(4.8149e-34);
    sub_1000E712C();
    uint64_t v25 = sub_100043728();
    *(void *)(v20 + 48) = sub_100043BB0(v25, v26, &a9);
    sub_100043948();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_10000F190((void *)&_mh_execute_header, v27, v28, "Removing session %s complete");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000441D0();
  }

  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12);
}

uint64_t sub_1000360D4()
{
  sub_1000086E0();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult();
  v1[7] = v3;
  sub_10002FA4C(v3);
  v1[8] = v4;
  v1[9] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for RequestCancellationReason();
  v1[10] = v5;
  sub_10002FA4C(v5);
  v1[11] = v6;
  v1[12] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100036190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v13 = v12[5];
  uint64_t v14 = (void *)v12[6];
  sub_10000853C(v14 + 28, v14[31]);
  uint64_t v15 = sub_10004468C();
  v12[13] = v16(v15);
  sub_10000F0B4();
  swift_beginAccess();
  uint64_t v17 = v14[14];
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v13;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_100011AF4((uint64_t (*)(uint64_t *))sub_1000435CC, v18, v17);
  v12[14] = v19;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v19)
  {
    sub_100043E58();
    v20();
    uint64_t v21 = (void *)swift_task_alloc();
    v12[15] = v21;
    *uint64_t v21 = v12;
    v21[1] = sub_100036378;
    sub_1000447E8();
    sub_1000307C8();
    return sub_100034E98();
  }
  else
  {
    sub_1000440B4();
    sub_100043E68();
    v24();
    uint64_t v25 = sub_100043D00();
    v26(v25);
    swift_release();
    sub_100043AE0();
    v27();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12);
  }
}

uint64_t sub_100036378()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000364A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  swift_release();
  sub_1000440B4();
  sub_100043E68();
  v12();
  uint64_t v13 = sub_100043D00();
  v14(v13);
  swift_release();
  sub_100043AE0();
  v15();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

uint64_t sub_10003655C()
{
  sub_1000086E0();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = type metadata accessor for RequestCancellationReason();
  v1[14] = v3;
  sub_10002FA4C(v3);
  v1[15] = v4;
  v1[16] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000365E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v14 = *(void *)(v12 + 104);
  sub_100043D2C();
  uint64_t v15 = *(void *)(v14 + 112);
  if ((v15 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DaemonSession(0);
    sub_100042F68(&qword_10015BA40, 255, (void (*)(uint64_t))type metadata accessor for DaemonSession);
    sub_100044468();
    Set.Iterator.init(_cocoa:)();
    uint64_t result = *(void *)(v12 + 16);
    uint64_t v17 = *(void *)(v12 + 24);
    uint64_t v19 = *(void *)(v12 + 32);
    uint64_t v18 = *(void *)(v12 + 40);
    uint64_t v20 = *(void *)(v12 + 48);
  }
  else
  {
    uint64_t v21 = -1 << *(unsigned char *)(v15 + 32);
    uint64_t v17 = v15 + 56;
    uint64_t v19 = ~v21;
    uint64_t v22 = -v21;
    if (v22 < 64) {
      uint64_t v23 = ~(-1 << v22);
    }
    else {
      uint64_t v23 = -1;
    }
    uint64_t v20 = v23 & *(void *)(v15 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v18 = 0;
  }
  *(void *)(v12 + 144) = v17;
  *(void *)(v12 + 152) = v19;
  *(void *)(v12 + 136) = result;
  *(_DWORD *)(v12 + 192) = enum case for RequestCancellationReason.clientTermination(_:);
  if (result < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v20)
  {
    sub_100044180();
    goto LABEL_26;
  }
  int64_t v28 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
    return result;
  }
  unint64_t v29 = *(void *)(v12 + 152) + 64;
  if (v28 < (uint64_t)(v29 >> 6))
  {
    uint64_t v30 = *(void *)(v12 + 144);
    int64_t v13 = v18 + 1;
    if (*(void *)(v30 + 8 * v28)) {
      goto LABEL_25;
    }
    int64_t v31 = v29 >> 6;
    int64_t v13 = v18 + 2;
    if (v18 + 2 >= v31) {
      goto LABEL_34;
    }
    if (*(void *)(v30 + 8 * v13)) {
      goto LABEL_25;
    }
    int64_t v13 = v18 + 3;
    if (v18 + 3 >= v31) {
      goto LABEL_34;
    }
    if (*(void *)(v30 + 8 * v13))
    {
LABEL_25:
      sub_100044440();
LABEL_26:
      uint64_t v27 = *(void *)(*(void *)(v24 + 48) + 8 * v25);
      swift_retain();
      while (1)
      {
        *(void *)(v12 + 168) = v13;
        *(void *)(v12 + 176) = v19;
        *(void *)(v12 + 160) = v27;
        if (!v27) {
          goto LABEL_34;
        }
        uint64_t v34 = *(void *)(v12 + 96);
        if (v34 == (int)AuditToken.processIdentifier.getter())
        {
          sub_100043E58();
          v35();
          uint64_t v36 = swift_task_alloc();
          uint64_t v37 = (void *)sub_1000447F4(v36);
          *uint64_t v37 = v38;
          v37[1] = sub_10003691C;
          sub_100044708();
          sub_1000307C8();
          return sub_100034E98();
        }
        swift_release();
        uint64_t result = *(void *)(v12 + 136);
        uint64_t v18 = v13;
        uint64_t v20 = v19;
        if ((result & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
LABEL_10:
        uint64_t v26 = __CocoaSet.Iterator.next()();
        if (!v26) {
          goto LABEL_34;
        }
        *(void *)(v12 + 88) = v26;
        type metadata accessor for DaemonSession(0);
        swift_unknownObjectRetain();
        sub_1000443F4();
        uint64_t v27 = *(void *)(v12 + 80);
        swift_unknownObjectRelease();
        int64_t v13 = v18;
        uint64_t v19 = v20;
      }
    }
    int64_t v13 = v18 + 4;
    if (v18 + 4 < v31)
    {
      if (!*(void *)(v30 + 8 * v13))
      {
        int64_t v32 = v18 + 5;
        while (v32 < v31)
        {
          sub_10004401C();
          if (v33)
          {
            int64_t v13 = v32 - 1;
            goto LABEL_25;
          }
        }
        goto LABEL_34;
      }
      goto LABEL_25;
    }
  }
LABEL_34:
  sub_10002EAF0();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, &type metadata for Swift.AnyObject[8], a10, a11, a12);
}

uint64_t sub_10003691C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100036A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  swift_release();
  uint64_t v15 = v13[21];
  for (uint64_t i = v13[22]; ; uint64_t i = v12)
  {
    uint64_t result = v13[17];
    if ((result & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v20 = __CocoaSet.Iterator.next()();
    if (!v20) {
      goto LABEL_28;
    }
    v13[11] = v20;
    type metadata accessor for DaemonSession(0);
    swift_unknownObjectRetain();
    sub_1000443F4();
    uint64_t v21 = v13[10];
    swift_unknownObjectRelease();
    int64_t v14 = v15;
    uint64_t v12 = i;
LABEL_22:
    v13[21] = v14;
    v13[22] = v12;
    v13[20] = v21;
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v28 = v13[12];
    if (v28 == (int)AuditToken.processIdentifier.getter())
    {
      sub_100043E58();
      v29();
      uint64_t v30 = swift_task_alloc();
      int64_t v31 = (void *)sub_1000447F4(v30);
      *int64_t v31 = v32;
      v31[1] = sub_10003691C;
      sub_100044708();
      sub_1000307C8();
      return sub_100034E98();
    }
    swift_release();
    uint64_t v15 = v14;
  }
  if (i)
  {
    sub_100044180();
LABEL_21:
    uint64_t v21 = *(void *)(*(void *)(v18 + 48) + 8 * v19);
    swift_retain();
    goto LABEL_22;
  }
  int64_t v22 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    return result;
  }
  unint64_t v23 = v13[19] + 64;
  if (v22 >= (uint64_t)(v23 >> 6)) {
    goto LABEL_28;
  }
  uint64_t v24 = v13[18];
  int64_t v14 = v15 + 1;
  if (*(void *)(v24 + 8 * v22)) {
    goto LABEL_20;
  }
  int64_t v25 = v23 >> 6;
  int64_t v14 = v15 + 2;
  if (v15 + 2 >= v25) {
    goto LABEL_28;
  }
  if (*(void *)(v24 + 8 * v14)) {
    goto LABEL_20;
  }
  int64_t v14 = v15 + 3;
  if (v15 + 3 >= v25) {
    goto LABEL_28;
  }
  if (*(void *)(v24 + 8 * v14)) {
    goto LABEL_20;
  }
  int64_t v14 = v15 + 4;
  if (v15 + 4 >= v25) {
    goto LABEL_28;
  }
  if (*(void *)(v24 + 8 * v14))
  {
LABEL_20:
    sub_100044440();
    goto LABEL_21;
  }
  int64_t v26 = v15 + 5;
  while (v26 < v25)
  {
    sub_10004401C();
    if (v27)
    {
      int64_t v14 = v26 - 1;
      goto LABEL_20;
    }
  }
LABEL_28:
  sub_10002EAF0();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v35(v34, v35, v36, v37, v38, v39, v40, v41, (char *)&type metadata for Swift.AnyObject + 8, a10, a11, a12);
}

uint64_t sub_100036C94()
{
  sub_1000086E0();
  v1[6] = v2;
  v1[7] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B9A0);
  v1[8] = v3;
  sub_10002FA4C(v3);
  v1[9] = v4;
  v1[10] = sub_1000436D8();
  v1[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RequestCancellationReason();
  v1[12] = v5;
  sub_10002FA4C(v5);
  v1[13] = v6;
  v1[14] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100036D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  uint64_t v27 = v24[6];
  uint64_t v28 = v24[7];
  sub_100043D2C();
  uint64_t v29 = *(void *)(v28 + 112);
  uint64_t v30 = swift_task_alloc();
  *(void *)(v30 + 16) = v27;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_100011AF4((uint64_t (*)(uint64_t *))sub_100043154, v30, v29);
  v24[15] = v31;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v31)
  {
    sub_100043E58();
    v32();
    uint64_t v33 = (void *)swift_task_alloc();
    v24[16] = v33;
    *uint64_t v33 = v24;
    v33[1] = sub_100037100;
    sub_100044070(v24[7]);
    sub_100043638();
    return sub_1000E1BA8();
  }
  else
  {
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100003B18(v36, (uint64_t)qword_10015BDB0);
    uint64_t v37 = sub_100043FB4();
    v38(v37);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      a10 = v24 + 5;
      uint64_t v41 = (uint8_t *)sub_100030314();
      a11 = sub_10002FF90();
      a12 = a11;
      *(_DWORD *)uint64_t v41 = 136315138;
      a9 = v41 + 4;
      sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      void v24[5] = sub_10001DF20(v42, v43, &a12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = sub_100044634();
      v45(v44);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to find session for %s", v41, 0xCu);
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v46 = sub_100044634();
      v47(v46);
    }

    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    UUIDIdentifier.uuid.getter();
    sub_10002FC6C();
    sub_100043E9C();
    v48();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000441E8();
    sub_100043638();
    return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_100037100()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100037228()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000372B8;
  return sub_10010AED8();
}

uint64_t sub_1000372B8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100037394()
{
  sub_1000086E0();
  Session.Metadata.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003744C;
  return sub_100084500();
}

uint64_t sub_10003744C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100037574()
{
  sub_1000086EC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000375F0()
{
  sub_1000086E0();
  v1[6] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v2);
  v1[7] = sub_10002FE18();
  uint64_t v3 = sub_100003A70(&qword_10015C040);
  v1[8] = v3;
  sub_10002FA4C(v3);
  v1[9] = v4;
  v1[10] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015C048);
  v1[11] = v5;
  sub_10002FA4C(v5);
  v1[12] = v6;
  v1[13] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000376D8()
{
  sub_1000086E0();
  uint64_t v1 = sub_10000853C((void *)(*(void *)(v0 + 48) + 128), *(void *)(*(void *)(v0 + 48) + 152));
  *(void *)(v0 + 112) = v1;
  uint64_t v2 = *v1;
  return _swift_task_switch(sub_100037748, v2, 0);
}

uint64_t sub_100037748()
{
  sub_1000086E0();
  sub_1000D39E0(*(void *)(v0 + 80));
  sub_10000F0B4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000377B4()
{
  sub_1000086EC();
  AsyncStream.makeAsyncIterator()();
  sub_100043924();
  v1();
  *(void *)(v0 + 120) = sub_100042F68(&qword_10015C050, v2, (void (*)(uint64_t))type metadata accessor for SessionManager);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100044498(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1000378B0;
  uint64_t v6 = sub_100043B6C();
  return AsyncStream.Iterator.next(isolation:)(v6, v7, v8, v9);
}

uint64_t sub_1000378B0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10003798C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  unint64_t v13 = *(unsigned int *)(v12 + 160) | ((unint64_t)*(unsigned __int8 *)(v12 + 164) << 32);
  if ((v13 & 0xFF00000000) == 0x500000000)
  {
    sub_10004381C();
    v14();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
  }
  uint64_t v24 = *(void *)(v12 + 120);
  uint64_t v25 = *(void *)(v12 + 48);
  uint64_t v26 = *(void *)(v12 + 56);
  type metadata accessor for _OSActivity();
  *(void *)(v12 + 136) = _OSActivity.__allocating_init(_:)();
  uint64_t v27 = type metadata accessor for TaskPriority();
  sub_100006960(v26, 1, 1, v27);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v25;
  *(void *)(v28 + 24) = v24;
  *(void *)(v28 + 32) = v25;
  *(_DWORD *)(v28 + 40) = v13;
  *(unsigned char *)(v28 + 44) = BYTE4(v13);
  LODWORD(v26) = sub_100006AE8(v26, 1, v27);
  swift_retain_n();
  if (v26 != 1)
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_1000443CC();
    sub_10000EFBC();
    v32();
    if (*(void *)(v28 + 16)) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    goto LABEL_10;
  }
  sub_100042EDC(*(void *)(v12 + 56), &qword_10015B208);
  if (!v25) {
    goto LABEL_9;
  }
LABEL_7:
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
LABEL_10:
  uint64_t v33 = sub_10004412C();
  *(void *)(v33 + 16) = &unk_10015C060;
  *(void *)(v33 + 24) = v28;
  if (v31 | v29)
  {
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = v29;
    *(void *)(v12 + 40) = v31;
  }
  uint64_t v34 = *(void *)(v12 + 48);
  *(void *)(v34 + 280) = swift_task_create();
  swift_release();
  uint64_t v35 = *(void *)(v34 + 280);
  *(void *)(v12 + 144) = v35;
  if (v35)
  {
    swift_retain();
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v12 + 152) = v36;
    *uint64_t v36 = v12;
    v36[1] = sub_100037D08;
    sub_1000307C8();
    return Task<>.value.getter(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12);
  }
  else
  {
    *(void *)(*(void *)(v12 + 48) + 280) = 0;
    _OSActivity.close()();
    swift_release();
    uint64_t v45 = swift_task_alloc();
    uint64_t v46 = (void *)sub_100044498(v45);
    void *v46 = v47;
    v46[1] = sub_1000378B0;
    sub_100043B6C();
    sub_1000307C8();
    return AsyncStream.Iterator.next(isolation:)(v48, v49, v50, v51);
  }
}

uint64_t sub_100037D08()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100037E00()
{
  sub_1000086EC();
  *(void *)(*(void *)(v0 + 48) + 280) = 0;
  swift_release();
  _OSActivity.close()();
  swift_release();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100044498(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_1000378B0;
  uint64_t v4 = sub_100043B6C();
  return AsyncStream.Iterator.next(isolation:)(v4, v5, v6, v7);
}

uint64_t sub_100037EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[28] = a4;
  v5[29] = a5;
  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor();
  v5[30] = v7;
  v5[31] = *(void *)(v7 - 8);
  v5[32] = swift_task_alloc();
  sub_100003A70(&qword_10015B208);
  v5[33] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  v5[34] = v8;
  v5[35] = *(void *)(v8 - 8);
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  return _swift_task_switch(sub_100038020, a4, 0);
}

uint64_t sub_100038020()
{
  uint64_t v169 = v0;
  uint64_t v3 = *(void *)(v0 + 224);
  sub_100043D2C();
  if ((*(void *)(v3 + 112) & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (uint64_t)_swiftEmptySetSingleton;
    v167 = _swiftEmptySetSingleton;
    sub_100043AC4();
    __CocoaSet.makeIterator()();
    uint64_t v5 = __CocoaSet.Iterator.next()();
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v2 = *(int *)(v0 + 232);
      type metadata accessor for DaemonSession(0);
      do
      {
        *(void *)(v0 + 216) = v6;
        sub_10004468C();
        swift_dynamicCast();
        uint64_t v7 = Session.Metadata.onBehalfOfPID.getter();
        unint64_t v1 = *(void *)(v0 + 208);
        if (v7 == v2)
        {
          unint64_t v15 = *(void *)(v4 + 16);
          if (*(void *)(v4 + 24) <= v15)
          {
            sub_100023C6C(v15 + 1, v8, v9, v10, v11, v12, v13, v14, v133, v134, v136, v138, v140, v142, v144, v146, v147, v148, v150,
              v152,
              v154,
              v156,
              v157,
              v158,
              v159,
              v160,
              v161,
              v162,
              v164,
              v165,
              v166,
              (uint64_t)v167);
            uint64_t v4 = (uint64_t)v167;
          }
          Hasher.init(_seed:)();
          sub_1000E6F68();
          Swift::Int v16 = Hasher._finalize()();
          uint64_t v17 = v4 + 56;
          uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
          unint64_t v19 = v16 & ~v18;
          unint64_t v20 = v19 >> 6;
          if (((-1 << v19) & ~*(void *)(v4 + 56 + 8 * (v19 >> 6))) != 0)
          {
            unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v4 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v22 = 0;
            unint64_t v23 = (unint64_t)(63 - v18) >> 6;
            do
            {
              if (++v20 == v23 && (v22 & 1) != 0)
              {
                __break(1u);
LABEL_102:
                sub_10002EAF0();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                sub_10000EF7C();
                sub_100043E74();
                __asm { BRAA            X1, X16 }
              }
              BOOL v24 = v20 == v23;
              if (v20 == v23) {
                unint64_t v20 = 0;
              }
              v22 |= v24;
              uint64_t v25 = *(void *)(v17 + 8 * v20);
            }
            while (v25 == -1);
            unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          }
          *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(void *)(*(void *)(v4 + 48) + 8 * v21) = v1;
          ++*(void *)(v4 + 16);
        }
        else
        {
          swift_release();
        }
        uint64_t v6 = __CocoaSet.Iterator.next()();
      }
      while (v6);
    }
    swift_release();
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 232) & 0xFFFFFFFFFFLL;
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_10004244C(v28, v27);
  }
  uint64_t v153 = v0 + 152;
  uint64_t v149 = v0 + 160;
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for DaemonSession(0);
    sub_100042F68(&qword_10015BA40, 255, (void (*)(uint64_t))type metadata accessor for DaemonSession);
    sub_100044784();
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v31 = *(void *)(v0 + 80);
    unint64_t v32 = *(void *)(v0 + 88);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = -1;
    uint64_t v34 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v29 = v4 + 56;
    uint64_t v30 = ~v34;
    uint64_t v35 = -v34;
    if (v35 < 64) {
      uint64_t v33 = ~(-1 << v35);
    }
    unint64_t v32 = v33 & *(void *)(v4 + 56);
  }
  uint64_t v135 = (void *)(v0 + 144);
  v143 = (uint64_t *)(v0 + 192);
  long long v139 = (void *)(v0 + 184);
  v141 = (uint64_t *)(v0 + 200);
  *(void *)(v0 + 312) = v29;
  *(void *)(v0 + 320) = v30;
  *(void *)(v0 + 304) = v4;
  int v155 = 136315138;
  long long v151 = (char *)&type metadata for Any + 8;
  *(void *)&long long v26 = 136315394;
  long long v145 = v26;
  v137 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    *(void *)(v0 + 328) = 0;
    if (v4 < 0)
    {
      uint64_t v39 = __CocoaSet.Iterator.next()();
      if (!v39) {
        goto LABEL_102;
      }
      uint64_t *v141 = v39;
      type metadata accessor for DaemonSession(0);
      swift_unknownObjectRetain();
      uint64_t v4 = (uint64_t)v143;
      sub_100044648();
      swift_dynamicCast();
      uint64_t v40 = *v143;
      swift_unknownObjectRelease();
      uint64_t v38 = v31;
      uint64_t v36 = v32;
    }
    else
    {
      if (v32)
      {
        uint64_t v36 = (v32 - 1) & v32;
        unint64_t v37 = __clz(__rbit64(v32)) | (v31 << 6);
        uint64_t v38 = v31;
      }
      else
      {
        if (__OFADD__(v31, 1))
        {
          __break(1u);
LABEL_111:
          __break(1u);
          goto LABEL_112;
        }
        sub_100043E48();
        if (v43 == v44) {
          goto LABEL_102;
        }
        uint64_t v45 = *(void *)(v0 + 312);
        unint64_t v46 = *(void *)(v45 + 8 * v42);
        uint64_t v38 = v42;
        if (!v46)
        {
          int64_t v47 = v41 >> 6;
          uint64_t v38 = v42 + 1;
          if (v42 + 1 >= v47) {
            goto LABEL_102;
          }
          unint64_t v46 = *(void *)(v45 + 8 * v38);
          if (!v46)
          {
            uint64_t v38 = v42 + 2;
            if (v42 + 2 >= v47) {
              goto LABEL_102;
            }
            unint64_t v46 = *(void *)(v45 + 8 * v38);
            if (!v46)
            {
              uint64_t v38 = v42 + 3;
              if (v42 + 3 >= v47) {
                goto LABEL_102;
              }
              unint64_t v46 = *(void *)(v45 + 8 * v38);
              if (!v46)
              {
                uint64_t v48 = v31 + 5;
                do
                {
                  if (v48 >= v47) {
                    goto LABEL_102;
                  }
                  sub_10004401C();
                }
                while (!v46);
                uint64_t v38 = v48 - 1;
              }
            }
          }
        }
        uint64_t v36 = (v46 - 1) & v46;
        unint64_t v37 = __clz(__rbit64(v46)) + (v38 << 6);
      }
      uint64_t v40 = *(void *)(*(void *)(v4 + 48) + 8 * v37);
      swift_retain();
    }
    *(void *)(v0 + 344) = v38;
    *(void *)(v0 + 352) = v36;
    *(void *)(v0 + 336) = v40;
    if (!v40) {
      goto LABEL_102;
    }
    *(void *)(v0 + 360) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
    sub_100043D2C();
    uint64_t v49 = sub_1000441F8();
    if (v50)
    {
      uint64_t v56 = -1 << *(unsigned char *)(v49 + 32);
      uint64_t v52 = v49 + 56;
      uint64_t v54 = ~v56;
      uint64_t v57 = -v56;
      uint64_t v58 = v57 < 64 ? ~(-1 << v57) : -1;
      unint64_t v55 = v58 & *(void *)(v49 + 56);
      uint64_t v51 = swift_bridgeObjectRetain();
      uint64_t v53 = 0;
    }
    else
    {
      sub_100043AC4();
      __CocoaSet.makeIterator()();
      sub_10004429C();
      sub_100042F68(&qword_10015B478, 255, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
      Set.Iterator.init(_cocoa:)();
      uint64_t v51 = *(void *)(v0 + 16);
      uint64_t v52 = *(void *)(v0 + 24);
      uint64_t v54 = *(void *)(v0 + 32);
      uint64_t v53 = *(void *)(v0 + 40);
      unint64_t v55 = *(void *)(v0 + 48);
    }
    *(void *)(v0 + 376) = v52;
    *(void *)(v0 + 384) = v54;
    *(void *)(v0 + 368) = v51;
    if (v51 < 0) {
      break;
    }
    if (v55)
    {
      uint64_t v59 = (v55 - 1) & v55;
      unint64_t v60 = __clz(__rbit64(v55)) | (v53 << 6);
      uint64_t v4 = v53;
      goto LABEL_58;
    }
    int64_t v99 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      goto LABEL_111;
    }
    if (v99 < (uint64_t)((unint64_t)(v54 + 64) >> 6))
    {
      unint64_t v100 = *(void *)(v52 + 8 * v99);
      uint64_t v4 = v53 + 1;
      if (v100) {
        goto LABEL_80;
      }
      int64_t v101 = (unint64_t)(v54 + 64) >> 6;
      uint64_t v4 = v53 + 2;
      if (v53 + 2 < v101)
      {
        unint64_t v100 = *(void *)(v52 + 8 * v4);
        if (v100) {
          goto LABEL_80;
        }
        uint64_t v4 = v53 + 3;
        if (v53 + 3 < v101)
        {
          unint64_t v100 = *(void *)(v52 + 8 * v4);
          if (v100) {
            goto LABEL_80;
          }
          uint64_t v4 = v53 + 4;
          if (v53 + 4 < v101)
          {
            unint64_t v100 = *(void *)(v52 + 8 * v4);
            if (!v100)
            {
              int64_t v102 = v53 + 5;
              do
              {
                if (v102 >= v101) {
                  goto LABEL_91;
                }
                sub_100044560();
              }
              while (!v100);
              uint64_t v4 = v102 - 1;
            }
LABEL_80:
            uint64_t v59 = (v100 - 1) & v100;
            unint64_t v60 = __clz(__rbit64(v100)) + (v4 << 6);
LABEL_58:
            uint64_t v54 = *(void *)(*(void *)(v51 + 48) + 8 * v60);
            swift_retain();
            goto LABEL_61;
          }
        }
      }
    }
LABEL_91:
    unint64_t v55 = 0;
LABEL_62:
    unint64_t v69 = (unint64_t)*(unsigned __int8 *)(v0 + 236) << 32;
    sub_10002EAF0();
    if (v69)
    {
      if (qword_10015B090 == -1)
      {
LABEL_93:
        uint64_t v103 = sub_100043C70();
        sub_1000437EC(v103, (uint64_t)qword_10015BDB0);
        uint64_t v104 = (void *)Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.default.getter();
        if (sub_10004361C(v105))
        {
          sub_100043690();
          v168[0] = sub_10002FF90();
          sub_100043760(*(float *)&v155);
          sub_1000E712C();
          uint64_t v106 = sub_100043728();
          uint64_t v108 = sub_100043BB0(v106, v107, v168);
          sub_1000438FC(v108, v109, v110, v111, v112, v113, v114, v115, v133, v135);
          sub_100043604();
          swift_bridgeObjectRelease();
          sub_10000F190((void *)&_mh_execute_header, v116, v117, "Client state reporter event: session %s is not foreground, releasing assets");
          sub_1000436BC();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_100043604();
        }
        sub_100043A30();
        Session.Metadata.id.getter();
        uint64_t v122 = swift_task_alloc();
        uint64_t v123 = (void *)sub_100044510(v122);
        *uint64_t v123 = v124;
        v123[1] = sub_100039654;
        sub_1000439E8();
        sub_100043E74();
        return sub_100084500();
      }
LABEL_112:
      swift_once();
      goto LABEL_93;
    }
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_100043C70();
    sub_100043960(v70, (uint64_t)qword_10015BDB0);
    uint64_t v71 = (void *)Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (sub_10004361C(v72))
    {
      unint64_t v55 = sub_100030314();
      uint64_t v4 = sub_10002FF90();
      v168[0] = v4;
      sub_1000438AC(v4, v73, v74, v75, v76, v77, v78, v79, v133, (uint64_t)v135, (uint64_t)v137, (uint64_t)v139, (uint64_t)v141, (uint64_t)v143, v145, *((uint64_t *)&v145 + 1), v147, v149, (uint64_t)v151,
        v153,
        v155);
      sub_1000E712C();
      sub_100043BF0();
      uint64_t v80 = sub_10001DF20(v2, v1, v168);
      sub_10004458C(v80, (void *)(v0 + 168));
      sub_100043948();
      sub_100043604();
      swift_bridgeObjectRelease();
      sub_100044144();
      sub_10004377C(v81, v82, v83, "Client state reporter event: session %s is foreground, marking assets as in use by the session");
      sub_100043F80();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100043604();
    }
    *(void *)(v0 + 440) = sub_100043DDC();
    if (!v55)
    {
      sub_100043A44();
      Session.Metadata.id.getter();
      uint64_t v84 = type metadata accessor for TaskPriority();
      sub_10004388C(v84);
      uint64_t v85 = sub_10004412C();
      sub_1000444A8(v85);
      uint64_t v87 = sub_10000375C(v4, (uint64_t)&unk_10015C080, v86);
      sub_100043828(v87);
      uint64_t v128 = swift_task_alloc();
      v129 = (void *)sub_10004419C(v128);
      void *v129 = v130;
      v129[1] = sub_100039FB0;
      sub_1000436F4();
      sub_100043E74();
      return sub_1000779EC();
    }
    sub_100043DB0();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    unint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v2 = *(void *)(v0 + 336);
    if (v90)
    {
      unint64_t v1 = *(void *)(v0 + 296);
      sub_10000EFE8();
      v163 = (void *)sub_100043994();
      v168[0] = sub_10002FF90();
      *(_DWORD *)uint64_t v54 = v145;
      Session.Metadata.id.getter();
      sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
      sub_100044354();
      sub_1000303D4();
      uint64_t v92 = v91();
      *(void *)(v0 + 152) = sub_100044698(v92, v93, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044204();
      swift_bridgeObjectRelease();
      sub_100030C74();
      uint64_t v94 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v163 = v94;
      swift_errorRelease();
      swift_errorRelease();
      sub_100043EC4((void *)&_mh_execute_header, v88, v89, "Session %s is foreground but couldn't claim assets: %@");
      sub_100003A70(&qword_10015BA58);
      swift_arrayDestroy();
      sub_10000ED7C();
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_100044204();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100043A1C();
    if (v50)
    {
      uint64_t v95 = sub_100043D7C();
      sub_1000439FC(v95);
      sub_100042F68(&qword_10015C050, v96, (void (*)(uint64_t))type metadata accessor for SessionManager);
      uint64_t v97 = (void *)sub_100030210();
      uint64_t v98 = sub_10004384C(v97);
      sub_100044480(v98, (uint64_t)&unk_10015C070);
    }
    swift_release();
    uint64_t v31 = *(void *)(v0 + 344);
    unint64_t v32 = *(void *)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 304);
  }
  uint64_t v61 = __CocoaSet.Iterator.next()();
  if (!v61) {
    goto LABEL_62;
  }
  sub_100043C88(v61, v62, v63, v64, v65, v66, v67, v68, v133, (uint64_t)v135, (uint64_t)v137, v139);
  swift_unknownObjectRetain();
  sub_100044648();
  swift_dynamicCast();
  uint64_t v54 = *(void *)(v0 + 176);
  swift_unknownObjectRelease();
  uint64_t v4 = v53;
  uint64_t v59 = v55;
LABEL_61:
  *(void *)(v0 + 400) = v4;
  *(void *)(v0 + 408) = v59;
  *(void *)(v0 + 392) = v54;
  if (!v54) {
    goto LABEL_62;
  }
  sub_100043DCC();
  sub_100043E74();
  return _swift_task_switch(v118, v119, v120);
}

uint64_t sub_100038D0C()
{
  sub_1000086E0();
  sub_10011FF0C();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "100038EF0: call analysis failed (funcsize=538)"

uint64_t sub_100039654()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043710();
  v4(v3);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

#error "10003981C: call analysis failed (funcsize=496)"

uint64_t sub_100039FB0()
{
  sub_100030850();
  sub_100030AFC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 464) = v0;
  swift_task_dealloc();
  sub_100044174();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100043FA8();
  v4();
  sub_100043AE0();
  v5();
  sub_10000F0B4();
  sub_1000307C8();
  return _swift_task_switch(v6, v7, v8);
}

#error "10003A294: call analysis failed (funcsize=495)"

#error "10003ACCC: call analysis failed (funcsize=535)"

uint64_t sub_10003B280(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10003B2A0, 0, 0);
}

uint64_t sub_10003B2A0()
{
  **(unsigned char **)(v0 + 16) = 0;
  return sub_10000EE0C();
}

uint64_t sub_10003B2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_100003A70(&qword_10015B9A0);
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10003B374, a5, 0);
}

uint64_t sub_10003B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v24;
  a22 = v25;
  a20 = v22;
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  v22[10] = sub_100003B18(v26, (uint64_t)qword_10015BDB0);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_100044098(v28))
  {
    uint64_t v29 = (uint8_t *)sub_100043690();
    a11 = sub_10002FF90();
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_retain();
    uint64_t v30 = sub_1000E712C();
    unint64_t v32 = v31;
    swift_release();
    uint64_t v33 = sub_10001DF20(v30, v32, &a11);
    sub_10004458C(v33, v22 + 4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043604();
    _os_log_impl((void *)&_mh_execute_header, v27, v23, "Session %s is foreground and been previously pre-warmed, pre-warming assets", v29, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100043604();
  }

  Session.Metadata.id.getter();
  uint64_t v34 = (void *)swift_task_alloc();
  v22[11] = v34;
  *uint64_t v34 = v22;
  v34[1] = sub_10003B580;
  sub_100044070(v22[9]);
  sub_10002FE48();
  return sub_100040B54();
}

uint64_t sub_10003B580()
{
  sub_100030014();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  sub_10004468C();
  sub_100043DF8();
  v7();
  if (v0)
  {
    sub_10002FE64();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE64();
    return v13(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t sub_10003B6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v25;
  a22 = v26;
  a20 = v22;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (sub_100044098(v28))
  {
    sub_10000EFE8();
    uint64_t v29 = (void *)sub_100043994();
    a10 = sub_10002FF90();
    a11 = a10;
    *os_log_type_t v23 = 136315394;
    swift_retain();
    sub_1000E712C();
    uint64_t v30 = sub_100043728();
    *(void *)(v22 + 16) = sub_100043BB0(v30, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043604();
    sub_100030C74();
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v22 + 24) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v32;
    swift_errorRelease();
    swift_errorRelease();
    sub_100043EC4((void *)&_mh_execute_header, v27, v24, "Failed to pre-warm assets for newly-foregrounded session %s: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100044038();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10003B8C0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  v8[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100011AF4((uint64_t (*)(uint64_t *))sub_1000435CC, (uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_retain();
    sub_1000E2430();
    swift_release();
    if (v2) {
      swift_release();
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    sub_100003A70(&qword_10015B9A0);
    UUIDIdentifier.uuid.getter();
    sub_10002FC6C();
    sub_100043E9C();
    v6();
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_10003BA48()
{
  sub_100003A70(&qword_10015B9A0);
  sub_100008678();
  __chkstk_darwin(v0, v1);
  sub_100030298();
  Session.Metadata.id.getter();
  type metadata accessor for Session();
  char v2 = static UUIDIdentifier.== infix(_:_:)();
  sub_100043CF4();
  v3();
  return v2 & 1;
}

uint64_t sub_10003BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v10 = sub_10002FA4C(v9);
  unint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v80 = (uint64_t *)((char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v16);
  uint64_t v79 = (uint64_t)&v71 - v17;
  uint64_t v18 = sub_1000E2808();
  if (!v4)
  {
    BOOL v20 = v18 == a2 && v19 == a3;
    if (v20)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100044324();
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        type metadata accessor for ModelManagerError();
        sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_100044654();
        *uint64_t v22 = a2;
        v22[1] = a3;
LABEL_45:
        sub_10002FC6C();
        sub_100043E9C();
        v59();
        swift_bridgeObjectRetain();
        swift_willThrow();
        return v5;
      }
    }
    uint64_t v5 = sub_1000E1AF8();
    unint64_t v78 = v12;
    if (!a4)
    {
      if (qword_10015B090 != -1) {
        goto LABEL_59;
      }
      goto LABEL_29;
    }
    swift_bridgeObjectRetain_n();
    os_log_type_t v23 = sub_10003C2E0(v5, a4);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100016F7C((uint64_t)v23);
    if (*(void *)(v5 + 16) != *(void *)(a4 + 16))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ModelManagerError();
      sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_100044654();
      *uint64_t v58 = a2;
      v58[1] = a3;
      v58[2] = a4;
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100003B18(v24, (uint64_t)qword_10015BDB0);
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    int v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      LODWORD(v75) = v26;
      uint64_t v76 = 0;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v82 = v74;
      *(_DWORD *)uint64_t v27 = 136315138;
      if (*(void *)(v5 + 16))
      {
        uint64_t v72 = v27;
        uint64_t v73 = v25;
        sub_1000442E4();
        sub_10002E3C4(v5);
        sub_1000444F8();
        while ((v27 & 0x8000000000000000) == 0)
        {
          sub_1000445D0();
          if (v28 == v29) {
            break;
          }
          sub_1000442CC();
          if ((v30 & 1) == 0) {
            goto LABEL_57;
          }
          if (*(_DWORD *)(v5 + 36) != v25) {
            goto LABEL_58;
          }
          uint64_t v31 = v79;
          sub_100042D80(*(void *)(v5 + 48) + *(void *)(v12 + 72) * v27, v79, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v32 = v80;
          sub_10000E54C(v31, (uint64_t)v80);
          uint64_t v33 = v32[1];
          uint64_t v77 = *v32;
          swift_bridgeObjectRetain();
          sub_100042DD8((uint64_t)v32, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v34 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100044278();
            uint64_t v34 = v81;
          }
          unint64_t v36 = *(void *)(v34 + 16);
          unint64_t v35 = *(void *)(v34 + 24);
          unint64_t v12 = v36 + 1;
          if (v36 >= v35 >> 1)
          {
            sub_100044228(v35);
            uint64_t v34 = v81;
          }
          *(void *)(v34 + 16) = v12;
          uint64_t v37 = v34 + 16 * v36;
          *(void *)(v37 + 32) = v77;
          *(void *)(v37 + 40) = v33;
          uint64_t v38 = sub_100044324();
          sub_10002E2DC(v38, v39, v40, v5);
          sub_1000444E0();
          if (v20)
          {
            uint64_t v66 = v5;
            sub_10000E60C(v27, (uint64_t)v25, 0);
            uint64_t v27 = v72;
            uint64_t v25 = v73;
            goto LABEL_52;
          }
        }
        while (1)
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          swift_once();
LABEL_29:
          uint64_t v41 = type metadata accessor for Logger();
          sub_100003B18(v41, (uint64_t)qword_10015BDB0);
          swift_bridgeObjectRetain_n();
          uint64_t v42 = Logger.logObject.getter();
          uint64_t v43 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v42, (os_log_type_t)v43))
          {

            goto LABEL_49;
          }
          uint64_t v76 = 0;
          char v44 = (uint8_t *)swift_slowAlloc();
          uint64_t v75 = swift_slowAlloc();
          uint64_t v82 = v75;
          *(_DWORD *)char v44 = 136315138;
          uint64_t v45 = *(void *)(v5 + 16);
          uint64_t v77 = v5;
          if (!v45) {
            break;
          }
          LODWORD(v72) = v43;
          uint64_t v73 = v44;
          uint64_t v74 = (uint64_t)v42;
          sub_1000442E4();
          sub_10002E3C4(v5);
          sub_1000444F8();
          while ((v43 & 0x8000000000000000) == 0)
          {
            sub_1000445D0();
            if (v28 == v29) {
              break;
            }
            sub_1000442CC();
            if ((v46 & 1) == 0) {
              goto LABEL_54;
            }
            if (*(_DWORD *)(v5 + 36) != v44) {
              goto LABEL_55;
            }
            uint64_t v47 = v79;
            sub_100042D80(*(void *)(v5 + 48) + *(void *)(v12 + 72) * v43, v79, (void (*)(void))type metadata accessor for ModelCatalogAsset);
            uint64_t v48 = v80;
            sub_10000E54C(v47, (uint64_t)v80);
            uint64_t v50 = *v48;
            uint64_t v49 = v48[1];
            swift_bridgeObjectRetain();
            sub_100042DD8((uint64_t)v48, (void (*)(void))type metadata accessor for ModelCatalogAsset);
            uint64_t v51 = v81;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100044278();
              uint64_t v51 = v81;
            }
            unint64_t v53 = *(void *)(v51 + 16);
            unint64_t v52 = *(void *)(v51 + 24);
            unint64_t v12 = v53 + 1;
            if (v53 >= v52 >> 1)
            {
              sub_100044228(v52);
              uint64_t v51 = v81;
            }
            *(void *)(v51 + 16) = v12;
            uint64_t v54 = v51 + 16 * v53;
            *(void *)(v54 + 32) = v50;
            *(void *)(v54 + 40) = v49;
            uint64_t v55 = sub_100044324();
            uint64_t v5 = v77;
            sub_10002E2DC(v55, v56, v57, v77);
            sub_1000444E0();
            if (v20)
            {
              sub_10000E60C(v43, (uint64_t)v44, 0);
              char v44 = (uint8_t *)v73;
              uint64_t v42 = v74;
              LOBYTE(v43) = v72;
              goto LABEL_50;
            }
          }
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
LABEL_50:
        uint64_t v61 = Array.description.getter();
        unint64_t v63 = v62;
        swift_bridgeObjectRelease();
        uint64_t v64 = sub_10001DF20(v61, v63, &v82);
        sub_10004438C(v64);
        uint64_t v65 = v77;
        swift_bridgeObjectRelease_n();
        uint64_t v5 = v65;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "Request didn't specify required asset IDs, using full asset bundle: %s", v44, 0xCu);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        uint64_t v66 = v5;
LABEL_52:
        uint64_t v67 = Array.description.getter();
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
        uint64_t v70 = sub_10001DF20(v67, v69, &v82);
        sub_10004438C(v70);
        swift_bridgeObjectRelease_n();
        uint64_t v5 = v66;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v75, "Request specified required asset IDs, using asset subset: %s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
    }
    else
    {

LABEL_49:
      swift_bridgeObjectRelease_n();
    }
  }
  return v5;
}

void *sub_10003C2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v3 = sub_100003A70(&qword_10015C038);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v48 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v47 = (uint64_t)&v46 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (uint64_t *)((char *)&v46 - v16);
  __chkstk_darwin(v15, v18);
  BOOL v20 = (char *)&v46 - v19;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v51 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v53 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v26 = 0;
  uint64_t v49 = _swiftEmptyArrayStorage;
  while (v24)
  {
    unint64_t v27 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    unint64_t v28 = v27 | (v26 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v54 + 72);
    sub_100042D80(*(void *)(v53 + 48) + v32 * v28, (uint64_t)v20, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    sub_10000E54C((uint64_t)v20, (uint64_t)v17);
    uint64_t v33 = *v17;
    uint64_t v34 = v17[1];
    swift_bridgeObjectRetain();
    sub_100044CFC(v33, v34, v52);
    char v36 = v35;
    swift_bridgeObjectRelease();
    if (v36)
    {
      sub_100042D80((uint64_t)v17, (uint64_t)v6, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = 1;
    }
    sub_100006960((uint64_t)v6, v37, 1, v7);
    sub_100042DD8((uint64_t)v17, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    if (sub_100006AE8((uint64_t)v6, 1, v7) == 1)
    {
      uint64_t result = (void *)sub_100042EDC((uint64_t)v6, &qword_10015C038);
    }
    else
    {
      uint64_t v38 = v47;
      sub_10000E54C((uint64_t)v6, v47);
      sub_10000E54C(v38, v48);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v49 = (void *)sub_1000F5A7C(0, v49[2] + 1, 1, (uint64_t)v49, v39, v40, v41);
      }
      unint64_t v43 = v49[2];
      unint64_t v42 = v49[3];
      if (v43 >= v42 >> 1) {
        uint64_t v49 = (void *)sub_1000F5A7C(v42 > 1, v43 + 1, 1, (uint64_t)v49, v39, v40, v41);
      }
      uint64_t v44 = v48;
      uint64_t v45 = v49;
      void v49[2] = v43 + 1;
      uint64_t result = (void *)sub_10000E54C(v44, (uint64_t)v45+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ v43 * v32);
    }
  }
  int64_t v29 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v29 >= v51) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v29);
  ++v26;
  if (v30) {
    goto LABEL_21;
  }
  int64_t v26 = v29 + 1;
  if (v29 + 1 >= v51) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v26);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v26 = v29 + 2;
  if (v29 + 2 >= v51) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v26);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v26 = v29 + 3;
  if (v29 + 3 >= v51) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v26);
  if (v30)
  {
LABEL_21:
    unint64_t v24 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
    goto LABEL_22;
  }
  int64_t v31 = v29 + 4;
  if (v31 >= v51)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_release();
    return v49;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v31);
  if (v30)
  {
    int64_t v26 = v31;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v26 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v26 >= v51) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v50 + 8 * v26);
    ++v31;
    if (v30) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10003C74C()
{
  sub_1000086E0();
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v0;
  *(unsigned char *)(v1 + 376) = v3;
  *(void *)(v1 + 208) = v4;
  *(void *)(v1 + 216) = v5;
  *(void *)(v1 + 192) = v6;
  *(void *)(v1 + 200) = v7;
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  *(void *)(v1 + 240) = v8;
  sub_10002FA4C(v8);
  *(void *)(v1 + 248) = v9;
  *(void *)(v1 + 256) = sub_10002FE18();
  uint64_t v10 = type metadata accessor for RequestMetadata();
  *(void *)(v1 + 264) = v10;
  sub_10002FA4C(v10);
  *(void *)(v1 + 272) = v11;
  *(void *)(v1 + 280) = sub_1000436D8();
  *(void *)(v1 + 288) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for TaskPriority();
  *(void *)(v1 + 296) = v12;
  sub_10002FA4C(v12);
  *(void *)(v1 + 304) = v13;
  *(void *)(v1 + 312) = sub_10002FE18();
  uint64_t v14 = type metadata accessor for InferenceProviderDescriptor();
  *(void *)(v1 + 320) = v14;
  sub_10002FA4C(v14);
  *(void *)(v1 + 328) = v15;
  *(void *)(v1 + 336) = sub_1000436D8();
  *(void *)(v1 + 344) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v16, v17, v18);
}

uint64_t sub_10003C890()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = RequestMetadata.requiredAssetIDs.getter();
  v0[44] = sub_10003BB28(v1, v3, v2, v4);
  uint64_t v5 = v0[43];
  swift_bridgeObjectRelease();
  sub_1000E1B50(v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[45] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10003CA14;
  sub_100043D98();
  return sub_10006D334(v7, v8);
}

uint64_t sub_10003CA14()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 232);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10003D148;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 232);
    uint64_t v8 = sub_10003CB08;
  }
  return _swift_task_switch(v8, v9, 0);
}

void sub_10003CB08()
{
  sub_100043174((uint64_t)(v0 + 2), (uint64_t)(v0 + 12), &qword_10015C018);
  if (v0[15])
  {
    uint64_t v1 = v0[46];
    uint64_t v2 = (long long *)sub_100043F9C();
    sub_10000831C(v2, v3);
    sub_1000E2808();
    if (!v1)
    {
      uint64_t v24 = v0[34];
      uint64_t v38 = v0[33];
      uint64_t v39 = v0[36];
      uint64_t v37 = v0[28];
      type metadata accessor for DaemonRequest();
      sub_100042C34((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
      sub_1000441C4();
      v25();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v39, v37, v38);
      swift_retain();
      sub_10011E98C();
      sub_100008130((uint64_t)(v0 + 7));
      sub_100042EDC((uint64_t)(v0 + 2), &qword_10015C018);
      sub_10000EFBC();
      v26();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_100044628();
      sub_100043EA8();
      __asm { BRAA            X2, X16 }
    }
    swift_bridgeObjectRelease();
    sub_100008130((uint64_t)(v0 + 7));
    sub_100042EDC((uint64_t)(v0 + 2), &qword_10015C018);
    sub_100043EDC();
    sub_100043FA8();
    v4();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100042EDC((uint64_t)(v0 + 12), &qword_10015C018);
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[35];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003B18(v6, (uint64_t)qword_10015BDB0);
    sub_1000446E8();
    sub_1000441C4();
    v7();
    uint64_t v8 = sub_100044474();
    v9(v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = sub_100044424(v11);
    uint64_t v14 = v0[41];
    uint64_t v13 = v0[42];
    uint64_t v15 = v0[40];
    if (v12)
    {
      uint64_t v16 = swift_slowAlloc();
      v40[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v16 = 136315394;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      dispatch thunk of CustomStringConvertible.description.getter();
      sub_100044784();
      sub_100043F00();
      uint64_t v18 = v17();
      v0[22] = sub_100044698(v18, v19, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043DF8();
      v20();
      *(_WORD *)(v16 + 12) = 2080;
      sub_100042F68(&qword_10015C020, 255, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[23] = sub_10001DF20(v21, v22, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void (**)(void))(v14 + 8);
      sub_100043F9C();
      sub_100043FA8();
      v23();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v5, "request %s made with unrecognized InferenceProvider %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_100043DF8();
      v29();
      uint64_t v23 = *(void (**)(void))(v14 + 8);
      ((void (*)(uint64_t, uint64_t))v23)(v13, v15);
    }

    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    int64_t v31 = v30;
    *unint64_t v30 = InferenceProviderDescriptor.description.getter();
    v31[1] = v32;
    sub_10002FC6C();
    sub_100043E9C();
    v33();
    swift_willThrow();
    sub_100042EDC((uint64_t)(v0 + 2), &qword_10015C018);
    uint64_t v34 = sub_1000443CC();
    ((void (*)(uint64_t))v23)(v34);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100043EA8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10003D148()
{
  sub_10000F01C();
  sub_1000436AC();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10003D1F8()
{
  sub_1000086E0();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(_DWORD *)(v1 + 152) = v3;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  *(void *)(v1 + 72) = v8;
  sub_10002FA4C(v8);
  *(void *)(v1 + 80) = v9;
  *(void *)(v1 + 88) = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  *(void *)(v1 + 96) = v10;
  sub_10002FA4C(v10);
  *(void *)(v1 + 104) = v11;
  *(void *)(v1 + 112) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v12, v13, v14);
}

void sub_10003D2C8()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015BDB0);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_100030314();
    *(_DWORD *)uint64_t v4 = 134217984;
    v0[2] = Session.Metadata.onBehalfOfPID.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Forming DaemonRequest for session with obop %ld", v4, 0xCu);
    sub_10000ED7C();
  }
  else
  {
    swift_release();
  }

  sub_1000445F0(v0[8]);
  v0[15] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  Session.Metadata.onBehalfOfPID.getter();
  sub_1000445E4();
  if (v5 != v6)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  sub_10004424C();
  if (!(v5 ^ v6 | v7)) {
    goto LABEL_13;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10003D4A4;
  sub_1000307C8();
  sub_1000D54F4(v9);
}

uint64_t sub_10003D4A4()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 156) = v5;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10003D584()
{
  if (*(unsigned char *)(v0 + 156) == 3 || !Session.Metadata.onBehalfOfPID.getter())
  {
    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    sub_10002FC6C();
    sub_100043E9C();
    v4();
    swift_willThrow();
    sub_10004471C();
    Session.Metadata.id.getter();
    uint64_t v5 = sub_100043A58();
    v6(v5);
    sub_1000303D4();
    v7();
    sub_100043F00();
    v8();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000441E8();
    sub_1000306EC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003D7A0;
  sub_100044070(*(void *)(v0 + 24));
  sub_1000306EC();
  return sub_10003C74C();
}

uint64_t sub_10003D7A0()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v5 + 64);
    return _swift_task_switch(sub_10003D8C8, v9, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100044628();
    return v10(v3);
  }
}

void sub_10003D8C8()
{
  sub_10004471C();
  Session.Metadata.id.getter();
  uint64_t v0 = sub_100043A58();
  v1(v0);
  sub_1000303D4();
  v2();
  sub_100043F00();
  v3();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000441E8();
  sub_1000306EC();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10003D9C4()
{
  sub_1000086E0();
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v0;
  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 96) = v4;
  *(unsigned char *)(v1 + 304) = v5;
  *(void *)(v1 + 72) = v6;
  *(void *)(v1 + 80) = v7;
  *(void *)(v1 + 64) = v8;
  uint64_t v9 = sub_100003A70(&qword_10015B9A0);
  *(void *)(v1 + 120) = v9;
  sub_10002FA4C(v9);
  *(void *)(v1 + 128) = v10;
  *(void *)(v1 + 136) = sub_10002FE18();
  uint64_t v11 = sub_100003A70(&qword_10015B408);
  *(void *)(v1 + 144) = v11;
  sub_10002FA4C(v11);
  *(void *)(v1 + 152) = v12;
  *(void *)(v1 + 160) = sub_10002FE18();
  uint64_t v13 = type metadata accessor for InferenceProviderDescriptor();
  *(void *)(v1 + 168) = v13;
  sub_10002FA4C(v13);
  *(void *)(v1 + 176) = v14;
  *(void *)(v1 + 184) = sub_1000436D8();
  *(void *)(v1 + 192) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_10003DAD4()
{
  sub_100030014();
  sub_10000F01C();
  sub_10000853C((void *)(*(void *)(v0 + 64) + 24), *(void *)(*(void *)(v0 + 64) + 48));
  sub_100043F9C();
  sub_10004421C();
  v1();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003DBAC;
  sub_1000447E8();
  sub_10002FE64();
  return sub_100086C6C();
}

uint64_t sub_10003DBAC()
{
  sub_1000086EC();
  sub_10002FC48();
  uint64_t v4 = v3;
  sub_1000086D0();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_10000ED94();
  *uint64_t v7 = v6;
  v4[26] = v8;
  v4[27] = v1;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v13 = *(void (**)(void, void))(v10 + 8);
  uint64_t v11 = v10 + 8;
  uint64_t v12 = v13;
  if (v1)
  {
    v12(*(void *)(v9 + 192), *(void *)(v0 + 168));
  }
  else
  {
    v4[28] = v12;
    v4[29] = v11 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_10004381C();
    v14();
  }
  sub_10000F0B4();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_10003DD08()
{
  uint64_t v55 = v0;
  if (static Task<>.isCancelled.getter())
  {
    swift_bridgeObjectRelease();
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1000437EC(v1, (uint64_t)qword_10015BDB0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)sub_100030314();
      v54[0] = sub_10002FF90();
      *(_DWORD *)uint64_t v4 = 136315138;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      dispatch thunk of CustomStringConvertible.description.getter();
      sub_100043F00();
      uint64_t v6 = v5();
      *(void *)(v0 + 56) = sub_100044698(v6, v7, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Task for request %s cancelled, cancelling request before execution", v4, 0xCu);
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
    }

    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    sub_10002FC6C();
    sub_100043E9C();
    v9();
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v0 + 216);
  sub_1000E2430();
  if (v8)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    sub_1000443D8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v10();
  }
  unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v49 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v41 = *(void *)(v0 + 168);
  uint64_t v44 = *(void *)(v0 + 160);
  uint64_t v50 = *(void *)(v0 + 152);
  uint64_t v51 = *(void *)(v0 + 144);
  uint64_t v39 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v52 = *(void *)(v0 + 96);
  uint64_t v53 = *(void *)(v0 + 104);
  char v46 = *(unsigned char *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v47 = *(void *)(v0 + 80);
  uint64_t v48 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 72);
  sub_1000E2868(v14);
  sub_100042C34(v13 + 224, v0 + 16);
  uint64_t v42 = *(void *)(v0 + 40);
  uint64_t v40 = *(void *)(v0 + 48);
  sub_10000853C((void *)(v0 + 16), v42);
  *(void *)(v0 + 240) = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  RequestMetadata.id.getter();
  uint64_t v16 = v15;
  uint64_t v45 = v15;
  Session.Metadata.id.getter();
  uint64_t v17 = RequestMetadata.loggingIdentifier.getter();
  uint64_t v37 = v18;
  uint64_t v38 = v17;
  uint64_t v19 = Session.Metadata.useCaseID.getter();
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  sub_10000853C((void *)(v14 + 24), *(void *)(v14 + 48));
  sub_10004421C();
  v21();
  uint64_t v22 = InferenceProviderDescriptor.id.getter();
  uint64_t v24 = v23;
  v43(v12, v41);
  uint64_t v25 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  *(void *)(v0 + 248) = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  uint64_t v26 = v16 + v25;
  uint64_t v27 = (int)AuditToken.processIdentifier.getter();
  uint64_t v28 = Session.Metadata.onBehalfOfPID.getter();
  char v29 = RequestMetadata.isStream.getter();
  BYTE2(v34) = RequestMetadata.isInference.getter() & 1;
  BYTE1(v34) = v46;
  LOBYTE(v34) = (v29 & 1) == 0;
  *(void *)(v0 + 256) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t))(v40 + 8))(v44, v39, v38, v37, v36, v35, v47, v48, v49, v22, v24, v27, v28, v34, v26, v42, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000EFBC();
  v30();
  int64_t v31 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  *(void *)(v0 + 264) = v31;
  *(void *)(v0 + 272) = (v50 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v31(v44, v51);
  uint64_t v32 = (void *)sub_100030210();
  *(void *)(v0 + 280) = v32;
  void v32[2] = v45;
  void v32[3] = v14;
  v32[4] = v52;
  v32[5] = v53;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_10003E358;
  return sub_100110510();
}

uint64_t sub_10003E358()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *os_log_type_t v3 = v2;
  *os_log_type_t v3 = *v1;
  *(void *)(v2 + 296) = v0;
  swift_task_dealloc();
  sub_100044174();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

void sub_10003E46C()
{
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[33];
  uint64_t v15 = v0[32];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[20];
  uint64_t v12 = v0[21];
  uint64_t v16 = v0[18];
  uint64_t v3 = v0[8];
  uint64_t v14 = v0[9] + v0[31];
  sub_1000E49F4(v3);
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  sub_10000853C(v0 + 2, v4);
  RequestMetadata.id.getter();
  sub_10000853C((void *)(v3 + 24), *(void *)(v3 + 48));
  sub_10004421C();
  v6();
  uint64_t v7 = InferenceProviderDescriptor.id.getter();
  uint64_t v9 = v8;
  v13(v1, v12);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v15, 0, v7, v9, v14, v4, v5);
  swift_bridgeObjectRelease();
  v17(v2, v16);
  swift_release();
  sub_100008130((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100044628();
  sub_100044308();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_10003E634()
{
  sub_1000086EC();
  sub_1000443D8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

void sub_10003E6AC()
{
  uint64_t v47 = (void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 296);
  char v3 = *(unsigned char *)(v1 + 304);
  swift_errorRetain();
  uint64_t v46 = v2;
  if ((v3 & 1) == 0)
  {
    swift_errorRetain();
    uint64_t v0 = sub_1000406DC(v2);
    swift_errorRelease();
    if (v0)
    {
      sub_100043CA8();
      uint64_t v36 = *(void *)(v1 + 168);
      uint64_t v34 = *(void *)(v1 + 160);
      uint64_t v41 = v4;
      uint64_t v43 = *(void *)(v1 + 144);
      uint64_t v5 = *(void *)(v1 + 64);
      uint64_t v39 = *(void *)(v1 + 72) + v6;
      uint64_t v7 = (void *)(v5 + 24);
      sub_1000E49F4(v5);
      uint64_t v9 = *(void *)(v1 + 40);
      uint64_t v8 = *(void *)(v1 + 48);
      sub_10000853C(v47, v9);
      RequestMetadata.id.getter();
      uint64_t v11 = *(void *)(v5 + 48);
      uint64_t v10 = *(void *)(v5 + 56);
      sub_10000853C(v7, v11);
      uint64_t v12 = *(void (**)(uint64_t))(v10 + 8);
      swift_errorRetain();
      uint64_t v13 = sub_100044324();
      v12(v13);
      uint64_t v14 = InferenceProviderDescriptor.id.getter();
      uint64_t v16 = v15;
      v38(v0, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v34, v41, v46, v14, v16, v39, v9, v8);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      v45(v34, v43);
      swift_release();
      swift_errorRelease();
      sub_100008130((uint64_t)v47);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_100044628();
      sub_10004425C();
      __asm { BRAA            X2, X16 }
    }
  }
  sub_100043CA8();
  uint64_t v37 = *(void *)(v1 + 168);
  uint64_t v33 = *(void *)(v1 + 160);
  uint64_t v42 = v19;
  uint64_t v44 = *(void *)(v1 + 144);
  uint64_t v20 = *(void **)(v1 + 64);
  uint64_t v40 = *(void *)(v1 + 72) + v21;
  uint64_t v22 = v20 + 3;
  swift_willThrow();
  uint64_t v23 = sub_1000446E8();
  sub_1000E49F4(v23);
  uint64_t v24 = *(void *)(v1 + 48);
  uint64_t v35 = *(void *)(v1 + 40);
  sub_10000853C(v47, v35);
  RequestMetadata.id.getter();
  uint64_t v26 = v20[6];
  uint64_t v25 = v20[7];
  sub_10000853C(v22, v26);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  swift_errorRetain();
  v27(v26, v25);
  uint64_t v28 = InferenceProviderDescriptor.id.getter();
  uint64_t v30 = v29;
  v38(v0, v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 16))(v33, v42, v2, v28, v30, v40, v35, v24);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  v45(v33, v44);
  swift_release();
  swift_errorRelease();
  sub_100008130((uint64_t)v47);
  sub_1000443D8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10004425C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10003EA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10003EB04, 0, 0);
}

uint64_t sub_10003EB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v13 = v12[8];
  uint64_t v14 = v12[4];
  uint64_t v28 = (int *)v12[5];
  sub_10000853C((void *)(v14 + 24), *(void *)(v14 + 48));
  sub_10004421C();
  v15();
  sub_1000E15C4();
  v12[10] = *(void *)(v13 + 8);
  v12[11] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100044468();
  sub_100043AE0();
  v16();
  sub_10000853C((void *)(v14 + 24), *(void *)(v14 + 48));
  sub_10004421C();
  v17();
  uint64_t v29 = (char *)v28 + *v28;
  uint64_t v18 = (void *)swift_task_alloc();
  v12[12] = (uint64_t)v18;
  *uint64_t v18 = v12;
  v18[1] = sub_10003EC7C;
  sub_100044070(v12[2]);
  sub_1000307C8();
  return v21(v19, v20, v21, v22, v23, v24, v25, v26, v29, a10, a11, a12);
}

uint64_t sub_10003EC7C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 80);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = sub_100043EDC();
  v2(v5);
  swift_task_dealloc();
  sub_10000EF7C();
  return v6();
}

uint64_t sub_10003EDA4()
{
  sub_1000086E0();
  *(void *)(v1 + 232) = v2;
  *(void *)(v1 + 240) = v0;
  *(void *)(v1 + 216) = v3;
  *(void *)(v1 + 224) = v4;
  *(_DWORD *)(v1 + 456) = v5;
  *(void *)(v1 + 200) = v6;
  *(void *)(v1 + 208) = v7;
  *(void *)(v1 + 192) = v8;
  uint64_t v9 = sub_100003A70(&qword_10015B408);
  *(void *)(v1 + 248) = v9;
  sub_10002FA4C(v9);
  *(void *)(v1 + 256) = v10;
  *(void *)(v1 + 264) = sub_10002FE18();
  uint64_t v11 = type metadata accessor for RequestMetadata();
  *(void *)(v1 + 272) = v11;
  sub_10002FA4C(v11);
  *(void *)(v1 + 280) = v12;
  *(void *)(v1 + 288) = sub_10002FE18();
  uint64_t v13 = sub_100003A70(&qword_10015C010);
  sub_10002FDD0(v13);
  *(void *)(v1 + 296) = sub_10002FE18();
  uint64_t v14 = type metadata accessor for InferenceProviderDescriptor();
  *(void *)(v1 + 304) = v14;
  sub_10002FA4C(v14);
  *(void *)(v1 + 312) = v15;
  *(void *)(v1 + 320) = sub_1000436D8();
  *(void *)(v1 + 328) = swift_task_alloc();
  uint64_t v16 = sub_100003A70(&qword_10015B9A0);
  *(void *)(v1 + 336) = v16;
  sub_10002FA4C(v16);
  *(void *)(v1 + 344) = v17;
  *(void *)(v1 + 352) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_10003EF08()
{
  uint64_t v1 = v0[44];
  RequestMetadata.sessionID.getter();
  v0[45] = sub_10003B8C0(v1);
  sub_1000436AC();
  v2();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10003F068;
  sub_100043D98();
  return sub_10003D1F8();
}

uint64_t sub_10003F068()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_100008660();
  int v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  v5[47] = v3;
  v5[48] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100030C68();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    uint64_t v12 = (void *)swift_task_alloc();
    v5[49] = v12;
    *uint64_t v12 = v7;
    v12[1] = sub_10003F1C0;
    sub_1000447E8();
    return sub_10003D9C4();
  }
}

uint64_t sub_10003F1C0()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000ED94();
  *int v5 = v4;
  *(void *)(v7 + 400) = v6;
  *(void *)(v7 + 408) = v0;
  swift_task_dealloc();
  sub_100030C68();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10003F2C0()
{
  if (!v0[50])
  {
    swift_release();
    swift_release();
    sub_10004456C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
LABEL_5:
    sub_100043D98();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = swift_errorRetain();
  sub_1000E29BC(v3);
  if (sub_100006AE8(v2, 1, v1) == 1)
  {
    sub_100042EDC(v0[37], &qword_10015C010);
    swift_willThrow();
    swift_errorRelease();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    goto LABEL_5;
  }
  sub_1000446BC();
  v6();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[52] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003F4B4;
  sub_100043D98();
  return sub_10006D334(v8, v9);
}

uint64_t sub_10003F4B4()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 424) = v0;
  swift_task_dealloc();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10003F5B0()
{
  uint64_t v44 = v0;
  uint64_t v1 = sub_100044474();
  sub_100043174(v1, v2, v3);
  if (!v0[15])
  {
    sub_100042EDC((uint64_t)(v0 + 12), &qword_10015C018);
    if (qword_10015B090 != -1) {
      swift_once();
    }
    uint64_t v13 = v0[40];
    uint64_t v12 = v0[41];
    uint64_t v15 = v0[38];
    uint64_t v14 = v0[39];
    uint64_t v16 = type metadata accessor for Logger();
    sub_100003B18(v16, (uint64_t)qword_10015BDB0);
    sub_1000441C4();
    v17();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = sub_100044424(v19);
    uint64_t v22 = v0[39];
    uint64_t v21 = v0[40];
    uint64_t v23 = v0[38];
    if (v20)
    {
      uint64_t v24 = swift_slowAlloc();
      v43[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v24 = 136315394;
      os_log_t log = v18;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v27 = v26;
      sub_100043F00();
      v28();
      v0[22] = sub_10001DF20(v25, v27, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000303D4();
      v29();
      *(_WORD *)(v24 + 12) = 2080;
      sub_100042F68(&qword_10015C020, 255, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[23] = sub_10001DF20(v30, v31, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      sub_100043CF4();
      v32();
      uint64_t v18 = log;
      _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v15, "request %s made with unrecognized InferenceProvider %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_1000303D4();
      v33();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v42(v21, v23);
    }

    type metadata accessor for ModelManagerError();
    sub_100042F68((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    uint64_t v35 = v34;
    *uint64_t v34 = InferenceProviderDescriptor.description.getter();
    v35[1] = v36;
    sub_10002FC6C();
    sub_100043E9C();
    v37();
    swift_willThrow();
    swift_errorRelease();
    swift_release();
    swift_release();
    swift_errorRelease();
    sub_100042EDC((uint64_t)(v0 + 2), &qword_10015C018);
    uint64_t v38 = sub_1000443CC();
    ((void (*)(uint64_t))v42)(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000441A8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = (long long *)sub_100043EDC();
  sub_10000831C(v4, v5);
  type metadata accessor for DaemonRequest();
  uint64_t v6 = sub_100044468();
  sub_100042C34(v6, v7);
  uint64_t v8 = swift_retain();
  v0[54] = sub_10011EC9C(v8, (uint64_t)(v0 + 17));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[55] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10003FB28;
  sub_1000441A8();
  return sub_10003D9C4();
}

uint64_t sub_10003FB28()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 448) = v0;
  swift_task_dealloc();
  sub_100044174();
  if (!v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10003FC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_100043E04();
  swift_release();
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_100008130(v12);
  sub_100042EDC(v13, &qword_10015C018);
  sub_100043AE0();
  v14();
  sub_10004456C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_1000307C8();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10003FD04()
{
  sub_10000F01C();
  swift_release();
  sub_100043C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10003FD9C()
{
  sub_10000F01C();
  swift_release();
  swift_release();
  sub_100043C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10003FE40()
{
  sub_10000F01C();
  swift_errorRelease();
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_100043F9C();
  sub_100043CF4();
  v0();
  sub_100043C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10003FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_100043E04();
  swift_release();
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_100008130(v12);
  sub_100042EDC(v13, &qword_10015C018);
  sub_100043AE0();
  v14();
  sub_100043C50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_10003FFEC()
{
  sub_1000086E0();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  uint64_t v4 = type metadata accessor for RequestCancellationReason();
  v1[7] = v4;
  sub_10002FA4C(v4);
  v1[8] = v5;
  v1[9] = sub_10002FE18();
  uint64_t v6 = sub_100003A70(&qword_10015B9A0);
  v1[10] = v6;
  sub_10002FA4C(v6);
  v1[11] = v7;
  v1[12] = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  v1[13] = v8;
  sub_10002FA4C(v8);
  v1[14] = v9;
  v1[15] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_1000400E4()
{
  uint64_t v28 = v0;
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v1 = v0 + 4;
  unint64_t v26 = v0;
  uint64_t v2 = v0[12];
  uint64_t v4 = v1[6];
  uint64_t v3 = v1[7];
  uint64_t v5 = v1[1];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003B18(v6, (uint64_t)qword_10015BDB0);
  sub_100044474();
  sub_1000441C4();
  v7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = sub_10000EFE8();
    v27[0] = sub_10000EFC8();
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v26[2] = sub_10001DF20(v11, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043CF4();
    v13();
    *(_WORD *)(v10 + 12) = 2080;
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    void v26[3] = sub_10001DF20(v14, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043AE0();
    v16();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cancelling request %s for session %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100043CF4();
    v17();
    sub_100043AE0();
    v18();
  }
  v26[16] = sub_10003B8C0(v26[5]);
  sub_100043E58();
  v19();
  uint64_t v20 = (void *)swift_task_alloc();
  v26[17] = v20;
  *uint64_t v20 = v26;
  v20[1] = sub_100040498;
  sub_100044070(v26[4]);
  sub_100044308();
  return sub_1000E2AE4(v21, v22, v23);
}

uint64_t sub_100040498()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  sub_100044174();
  sub_1000436AC();
  v4();
  sub_10000F0B4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000405D8()
{
  sub_1000086EC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100040658()
{
  sub_1000086EC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000406DC(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015BFF8);
  uint64_t v3 = sub_10002FDD0(v2);
  __chkstk_darwin(v3, v4);
  sub_100030144();
  uint64_t v51 = v5;
  type metadata accessor for InferenceError.Context();
  sub_100008678();
  void v49[2] = v7;
  uint64_t v50 = v6;
  __chkstk_darwin(v6, v8);
  sub_100030144();
  v49[1] = v9;
  uint64_t v10 = sub_100003A70(&qword_10015C000);
  uint64_t v11 = sub_10002FDD0(v10);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100003A70(&qword_10015C008);
  uint64_t v16 = sub_10002FDD0(v15);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ModelManagerError();
  sub_100008678();
  uint64_t v22 = v21;
  uint64_t v25 = __chkstk_darwin(v23, v24);
  unint64_t v27 = (char *)v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)v49 - v29;
  uint64_t v31 = type metadata accessor for InferenceError();
  sub_100008678();
  __chkstk_darwin(v32, v33);
  sub_100030298();
  if (!a1)
  {
    sub_100006960((uint64_t)v19, 1, 1, v20);
LABEL_6:
    sub_100042EDC((uint64_t)v19, &qword_10015C008);
    if (a1)
    {
      uint64_t v52 = a1;
      swift_errorRetain();
      sub_100003A70(&qword_10015B468);
      int v38 = swift_dynamicCast();
      sub_100006960((uint64_t)v14, v38 ^ 1u, 1, v31);
      if (sub_100006AE8((uint64_t)v14, 1, v31) != 1) {
        goto LABEL_8;
      }
    }
    else
    {
      sub_100006960((uint64_t)v14, 1, 1, v31);
    }
    uint64_t v42 = &qword_10015C000;
    uint64_t v43 = (uint64_t)v14;
    goto LABEL_12;
  }
  uint64_t v52 = a1;
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  int v34 = swift_dynamicCast();
  sub_100006960((uint64_t)v19, v34 ^ 1u, 1, v20);
  if (sub_100006AE8((uint64_t)v19, 1, v20) == 1) {
    goto LABEL_6;
  }
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v35(v30, v19, v20);
  v35(v27, v30, v20);
  uint64_t v36 = sub_100044324();
  if (v37(v36) != enum case for ModelManagerError.inferenceError(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v20);
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v22 + 96))(v27, v20);
LABEL_8:
  sub_1000446BC();
  v39();
  uint64_t v40 = v51;
  InferenceError.context.getter();
  if (sub_100006AE8(v40, 1, v50) == 1)
  {
    sub_100043FA8();
    v41();
    uint64_t v42 = &qword_10015BFF8;
    uint64_t v43 = v40;
LABEL_12:
    sub_100042EDC(v43, v42);
LABEL_15:
    char v45 = 0;
    return v45 & 1;
  }
  sub_100043EDC();
  sub_1000446BC();
  v44();
  char v45 = InferenceError.Context.fallbackAllowed.getter();
  sub_100043CF4();
  v46();
  sub_100043FA8();
  v47();
  return v45 & 1;
}

uint64_t sub_100040B54()
{
  sub_1000086E0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[11] = v3;
  sub_10002FA4C(v3);
  v1[12] = v4;
  v1[13] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for UUID();
  sub_10002FDD0(v5);
  v1[14] = sub_10002FE18();
  uint64_t v6 = sub_100003A70(&qword_10015B9A0);
  v1[15] = v6;
  sub_10002FA4C(v6);
  v1[16] = v7;
  v1[17] = sub_1000436D8();
  v1[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AuditToken();
  v1[19] = v8;
  sub_10002FA4C(v8);
  v1[20] = v9;
  v1[21] = sub_10002FE18();
  uint64_t v10 = type metadata accessor for InferenceProviderPrewarmInformation();
  v1[22] = v10;
  sub_10002FA4C(v10);
  v1[23] = v11;
  v1[24] = sub_10002FE18();
  uint64_t v12 = type metadata accessor for InferenceProviderDescriptor();
  v1[25] = v12;
  sub_10002FA4C(v12);
  v1[26] = v13;
  v1[27] = sub_10002FE18();
  uint64_t v14 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  sub_10002FDD0(v14);
  v1[28] = sub_1000436D8();
  v1[29] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v15, v16, v17);
}

void sub_100040CFC()
{
  sub_100030028();
  uint64_t v1 = sub_10003B8C0(v0[9]);
  v0[30] = v1;
  uint64_t v2 = (unsigned char *)v0[29];
  uint64_t v3 = v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_100043D2C();
  sub_100042D80(v3, (uint64_t)v2, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  *uint64_t v2 = 1;
  uint64_t v4 = sub_100043F9C();
  sub_100042D80(v4, v5, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  sub_100043F38();
  uint64_t v6 = sub_100044648();
  sub_100042BD0(v6, v7);
  swift_endAccess();
  sub_100042DD8((uint64_t)v2, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  v0[31] = sub_1000E1AF8();
  sub_1000E1B50(v0[27]);
  v0[32] = sub_1000E2808();
  v0[33] = v8;
  uint64_t v10 = v0[20];
  uint64_t v9 = v0[21];
  uint64_t v11 = v0[16];
  v0[34] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  (*(void (**)(uint64_t))(v10 + 16))(v9);
  swift_bridgeObjectRetain();
  Session.Metadata.id.getter();
  UUIDIdentifier.uuid.getter();
  v0[35] = *(void *)(v11 + 8);
  v0[36] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043FA8();
  v12();
  Session.Metadata.useCaseID.getter();
  Session.Metadata.onBehalfOfPID.getter();
  sub_1000445E4();
  if (v14 != v15)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v13 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v16 = v0[13];
  uint64_t v18 = v0[11];
  uint64_t v17 = v0[12];
  sub_100043F9C();
  InferenceProviderPrewarmInformation.init(bundleIdentifier:requestorAuditToken:sessionUUID:useCaseIdentifier:onBehalfOfPid:)();
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.prewarm(_:), v18);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[37] = (uint64_t)v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100041028;
  sub_10002FE48();
  sub_10007D310();
}

uint64_t sub_100041028()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100043924();
    v7();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100043924();
    v8();
  }
  sub_10000F0B4();
  return _swift_task_switch(v9, v10, v11);
}

void sub_100041174()
{
  uint64_t v28 = v0[9];
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[32];
  uint64_t v3 = (void *)v0[10];
  uint64_t v4 = v0[30] + v0[34];
  uint64_t v5 = v3[31];
  uint64_t v6 = v3[32];
  sub_10000853C(v3 + 28, v5);
  uint64_t v7 = InferenceProviderDescriptor.id.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88))(v28, v7, v8, v2, v1, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10015B090 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100003B18(v9, (uint64_t)qword_10015BDB0);
  uint64_t v10 = sub_100043FB4();
  v11(v10);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v12, type);
  unint64_t v27 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v15 = v0[26];
  uint64_t v14 = v0[27];
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[17];
  uint64_t v18 = v0[15];
  if (v13)
  {
    uint64_t v19 = (uint8_t *)sub_100043690();
    uint64_t v29 = sub_10002FF90();
    *(_DWORD *)uint64_t v19 = 136315138;
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_10001DF20(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v27(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "Prewarmed assets for session %s", v19, 0xCu);
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_release();
    sub_100043CF4();
    v22();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  else
  {

    swift_release();
    v27(v17, v18);
    sub_100043CF4();
    v23();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_1000441A8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000414D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  swift_release();
  sub_100043CF4();
  v12();
  sub_100043EDC();
  sub_100043DF8();
  v13();
  sub_100044598();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t sub_1000415B8()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor();
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_1000436D8();
  v1[8] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100041654()
{
  sub_100030AFC();
  sub_10003B8C0(v0[3]);
  sub_1000E1B50(v0[8]);
  sub_1000E15C4();
  sub_1000E2808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[6] + 16))(v0[7], v0[8], v0[5]);
  sub_100044784();
  ModelInstance.init(assetBundleIdentifier:inferenceProvider:)();
  swift_release();
  sub_100043F00();
  v2();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v3();
}

uint64_t sub_10004179C()
{
  sub_1000086E0();
  v1[21] = v2;
  v1[22] = v0;
  v1[19] = v3;
  v1[20] = v4;
  uint64_t v5 = type metadata accessor for TaskPriority();
  v1[23] = v5;
  sub_10002FA4C(v5);
  v1[24] = v6;
  v1[25] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for ClientData();
  sub_10002FDD0(v7);
  v1[26] = sub_10002FE18();
  uint64_t v8 = type metadata accessor for RequestMetadata();
  v1[27] = v8;
  sub_10002FA4C(v8);
  v1[28] = v9;
  v1[29] = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  v1[30] = v10;
  sub_10002FA4C(v10);
  v1[31] = v11;
  v1[32] = sub_10002FE18();
  uint64_t v12 = type metadata accessor for AuditToken();
  v1[33] = v12;
  sub_10002FA4C(v12);
  v1[34] = v13;
  v1[35] = sub_10002FE18();
  uint64_t v14 = type metadata accessor for UUID();
  sub_10002FDD0(v14);
  v1[36] = sub_10002FE18();
  uint64_t v15 = sub_100003A70(&qword_10015B9A0);
  sub_10002FDD0(v15);
  v1[37] = sub_10002FE18();
  uint64_t v16 = type metadata accessor for Session.Metadata();
  v1[38] = v16;
  sub_10002FA4C(v16);
  v1[39] = v17;
  v1[40] = sub_1000436D8();
  v1[41] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_100041960()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[39];
  uint64_t v24 = v0[38];
  uint64_t v25 = v0[40];
  uint64_t v3 = v0[34];
  uint64_t v27 = v0[35];
  uint64_t v26 = v0[33];
  uint64_t v4 = v0[22];
  uint64_t v23 = v0[21];
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  sub_100003A70(&qword_10015B718);
  uint64_t v7 = sub_100030210();
  *(_OWORD *)(v7 + 16) = xmmword_100128650;
  *(void *)(v7 + 32) = v6;
  *(void *)(v7 + 40) = v5;
  type metadata accessor for Session();
  swift_bridgeObjectRetain();
  UUIDIdentifier.init()();
  UUID.init()();
  Session.Metadata.init(supportedAssetBundleIdentifiers:useCaseID:onBehalfOfPID:parentOfOnBehalfOfPID:loggingIdentifier:id:sessionSetID:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v25, v1, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v27, v23, v26);
  uint64_t v8 = *(void *)(v4 + 216);
  v0[42] = v8;
  uint64_t v9 = (uint64_t)(v0 + 2);
  sub_100042C34(v4 + 176, (uint64_t)(v0 + 2));
  swift_retain();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100004084((unint64_t)_swiftEmptyArrayStorage);
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = _swiftEmptySetSingleton;
  }
  uint64_t v10 = v0[40];
  uint64_t v11 = v0[35];
  uint64_t v12 = v0[5];
  uint64_t v13 = sub_1000080E0(v9, v12);
  sub_100008678();
  uint64_t v15 = v14;
  uint64_t v16 = (uint64_t *)sub_10002FE18();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v16, v13, v12);
  uint64_t v17 = sub_100042A8C(v10, v11, v8, *v16, (uint64_t)v22);
  v0[43] = v17;
  sub_100008130(v9);
  swift_task_dealloc();
  sub_100043F38();
  swift_retain();
  sub_100020E7C(&v28, v17);
  swift_endAccess();
  swift_release();
  UUIDIdentifier.init()();
  default argument 0 of ClientData.init(_:)();
  ClientData.init(_:)();
  UUIDIdentifier.uuid.getter();
  Session.Metadata.id.getter();
  RequestMetadata.init(loggingIdentifier:clientData:UUID:sessionID:requiredAssetIDs:isInference:isStream:)();
  static TaskPriority.userInitiated.getter();
  AuditToken.auditUserIdentifier.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[44] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100041D08;
  sub_100044070(v0[19]);
  sub_10004425C();
  return sub_10003C74C();
}

uint64_t sub_100041D08()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)*v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  uint64_t v6 = (void *)*v1;
  *uint64_t v5 = *v1;
  v4[45] = v3;
  v4[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000436AC();
    v7();
    sub_10002FB10();
    sub_10002FE64();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    sub_1000436AC();
    v12();
    uint64_t v13 = (void *)swift_task_alloc();
    v4[47] = v13;
    *uint64_t v13 = v6;
    v13[1] = sub_100041EC4;
    sub_1000447E8();
    sub_10002FE64();
    return sub_10010DBE8();
  }
}

uint64_t sub_100041EC4()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 384) = v0;
  swift_task_dealloc();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100041FC0()
{
  uint64_t v6 = *(void *)(v0 + 344);
  swift_release();
  sub_100043DF8();
  v1();
  sub_100043924();
  v2();
  sub_100043F38();
  sub_10011739C(v6);
  swift_endAccess();
  swift_release();
  swift_release();
  sub_100043FA8();
  v3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v4();
}

uint64_t sub_100042144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  uint64_t v17 = *(void *)(v16 + 344);
  sub_1000436AC();
  v18();
  sub_100043CF4();
  v19();
  sub_100043F38();
  sub_10011739C(v17);
  swift_endAccess();
  sub_100043B30();
  swift_release();
  uint64_t v20 = sub_1000442B4();
  v21(v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100043638();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_100042260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  uint64_t v17 = *(void *)(v16 + 344);
  swift_release();
  sub_100043AE0();
  v18();
  sub_10004468C();
  sub_100043F00();
  v19();
  sub_100043F38();
  sub_10011739C(v17);
  swift_endAccess();
  sub_100043B30();
  swift_release();
  uint64_t v20 = sub_1000442B4();
  v21(v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100043638();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10004238C()
{
  swift_bridgeObjectRelease();

  sub_100008130(v0 + 128);
  swift_release();
  sub_100008130(v0 + 176);
  swift_release();
  sub_100008130(v0 + 224);
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000423FC()
{
  sub_10004238C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SessionManager()
{
  return self;
}

uint64_t sub_10004244C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    uint64_t v7 = (uint64_t *)((char *)&v11 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v6, v7);
    uint64_t v8 = sub_1000425C8(v7, v6, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    sub_10001FB34(0, v6, v9);
    uint64_t v8 = sub_1000425C8(v9, v6, v4, a2 & 0xFFFFFFFFFFLL);
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

#error "100042760: call analysis failed (funcsize=113)"

uint64_t sub_100042790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DaemonSession.LazyState(0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v33 = &off_100154C88;
  *(void *)&long long v31 = a4;
  uint64_t v17 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState;
  v16[1] = 0;
  v16[2] = 0;
  *uint64_t v16 = 0;
  uint64_t v18 = (uint64_t)v16 + *(int *)(v13 + 32);
  uint64_t v19 = type metadata accessor for InferenceProviderDescriptor();
  sub_100006960(v18, 1, 1, v19);
  *((unsigned char *)v16 + *(int *)(v13 + 36)) = 0;
  sub_100003A70(&qword_10015BFE8);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + ((*(unsigned int *)(*(void *)v20 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_100042D80((uint64_t)v16, v20 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v20 + 16), (void (*)(void))type metadata accessor for DaemonSession.LazyState);
  sub_100042DD8((uint64_t)v16, (void (*)(void))type metadata accessor for DaemonSession.LazyState);
  *(void *)(a6 + v17) = v20;
  uint64_t v21 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_metadata;
  uint64_t v22 = type metadata accessor for Session.Metadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a1, v22);
  uint64_t v23 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken;
  uint64_t v24 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, a2, v24);
  *(void *)(a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager) = a3;
  sub_10000831C(&v31, a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog);
  uint64_t v25 = a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  *(unsigned char *)(a6 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState) = 0;
  uint64_t v26 = v25 + *(int *)(type metadata accessor for DaemonSession.ManagerOwnedState(0) + 24);
  uint64_t v27 = enum case for DaemonSessionState.none(_:);
  uint64_t v28 = type metadata accessor for DaemonSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
  *(void *)(v25 + 8) = a5;
  return a6;
}

uint64_t sub_100042A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = type metadata accessor for ModelCatalogProvider(0);
  uint64_t v20 = &off_100154C88;
  v18[0] = a4;
  type metadata accessor for DaemonSession(0);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = sub_1000080E0((uint64_t)v18, v19);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)&v18[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_100042790(a1, a2, a3, *v13, a5, v10);
  sub_100008130((uint64_t)v18);
  return v15;
}

uint64_t sub_100042BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042C34(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_10002FC6C();
  (*v3)(a2);
  return a2;
}

uint64_t sub_100042C94()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100042CDC()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  sub_100044468();
  sub_10002FE64();
  return sub_10003EA3C(v2, v3, v4, v5, v6);
}

uint64_t sub_100042D80(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FC6C();
  uint64_t v4 = sub_100044790();
  v5(v4);
  return a2;
}

uint64_t sub_100042DD8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FC6C();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_100042E30()
{
  return sub_1000431D0();
}

uint64_t sub_100042E38()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_100037EBC(v3, v4, v5, v6, v7);
}

uint64_t sub_100042EDC(uint64_t a1, uint64_t *a2)
{
  sub_100003A70(a2);
  sub_10002FC6C();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_100042F30()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100042F68(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100042FB0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100042FF8()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000EF88();
  sub_10002FE64();
  return sub_10003B2AC(v3, v4, v5, v6, v7);
}

uint64_t sub_100043088()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000430C0()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_100030474();
  return sub_10003B280(v3);
}

uint64_t sub_100043154()
{
  return sub_10003BA48() & 1;
}

uint64_t sub_100043174(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FC6C();
  uint64_t v4 = sub_100044790();
  v5(v4);
  return a2;
}

uint64_t sub_1000431C8()
{
  return sub_1000431D0();
}

uint64_t sub_1000431D0()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = sub_100043EDC();

  return _swift_deallocObject(v0, v1, 7);
}

uint64_t sub_100043218()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  sub_10000EF88();
  sub_10002FE64();
  return sub_1000344B0(v3, v4, v5, v6, v7);
}

uint64_t sub_1000432A8(uint64_t a1)
{
  return sub_100034688(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000432B4()
{
  sub_100003A70(&qword_10015C098);
  sub_100008678();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 72) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  sub_100008130(v0 + 24);
  swift_release();
  sub_1000437DC();
  v8();

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_100043368()
{
  uint64_t v1 = sub_100003A70(&qword_10015C098);
  sub_1000301E0(v1);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[8];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return sub_100034A10(v3, v0 + 3, v4, v5);
}

uint64_t sub_1000433B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000433C8()
{
  return swift_release();
}

unint64_t sub_1000433D0()
{
  unint64_t result = qword_10015F150;
  if (!qword_10015F150)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F150);
  }
  return result;
}

uint64_t sub_100043414()
{
  sub_100003A70(&qword_10015C098);
  sub_100008678();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 72) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000437DC();
  v8();

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_1000434D8()
{
  sub_100030AFC();
  uint64_t v0 = sub_100003A70(&qword_10015C098);
  sub_1000301E0(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000ED54;
  sub_1000307C8();
  return sub_100034C58(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000435CC()
{
  return sub_100043154() & 1;
}

uint64_t sub_100043604()
{
  return swift_release_n();
}

BOOL sub_10004361C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100043654()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100043690()
{
  return swift_slowAlloc();
}

uint64_t sub_1000436BC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000436D8()
{
  return swift_task_alloc();
}

uint64_t sub_1000436F4()
{
  return v0;
}

uint64_t sub_100043710()
{
  return v0;
}

uint64_t sub_100043728()
{
  return swift_release();
}

uint64_t sub_100043760(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

void sub_10004377C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_100043794()
{
  *(void *)(v1 - 104) = v0 + 120;
  *(void *)(v1 - 112) = v0 + 168;
}

uint64_t sub_1000437EC(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return swift_retain_n();
}

uint64_t sub_100043828(uint64_t a1)
{
  *(void *)(v1 + 448) = a1;
  return sub_1000E1B50(v2);
}

uint64_t sub_10004384C(void *a1)
{
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v1;
  a1[5] = v2;
  return swift_retain_n();
}

uint64_t sub_10004388C(uint64_t a1)
{
  return sub_100006960(v1, 1, 1, a1);
}

uint64_t sub_1000438AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  *uint64_t v21 = a21;
  return swift_retain();
}

uint64_t sub_1000438D4()
{
  return sub_10002EAF0();
}

uint64_t sub_1000438FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100043930()
{
  return swift_arrayDestroy();
}

uint64_t sub_100043948()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100043960(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 432) = sub_100003B18(a1, a2);
  return swift_retain_n();
}

uint64_t sub_100043994()
{
  return swift_slowAlloc();
}

uint64_t sub_1000439B0()
{
  sub_10002EAF0();
  return swift_task_dealloc();
}

uint64_t sub_1000439E8()
{
  return *(void *)(v0 + 296);
}

uint64_t sub_1000439FC(uint64_t a1)
{
  return sub_100006960(v1, 1, 1, a1);
}

uint64_t sub_100043A58()
{
  return v0;
}

uint64_t sub_100043AC4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100043AEC(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100043B14()
{
  return swift_retain_n();
}

uint64_t sub_100043B30()
{
  return swift_release();
}

uint64_t sub_100043B6C()
{
  return v0;
}

uint64_t sub_100043B88()
{
  return swift_dynamicCast();
}

uint64_t sub_100043BB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001DF20(v3, v4, a3);
}

uint64_t sub_100043BC8(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100043BF0()
{
  return swift_release();
}

__n128 sub_100043C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  *(void *)(v16 - 120) = a1;
  *(void *)(v16 - 96) = a1;
  __n128 result = a15;
  *uint64_t v15 = a15.n128_u32[0];
  return result;
}

uint64_t sub_100043C28()
{
  return swift_dynamicCast();
}

uint64_t sub_100043C50()
{
  return swift_task_dealloc();
}

uint64_t sub_100043C70()
{
  return type metadata accessor for Logger();
}

uint64_t sub_100043C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  return type metadata accessor for DaemonRequest();
}

uint64_t sub_100043CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = a1;
  return type metadata accessor for DaemonSession(0);
}

uint64_t sub_100043D00()
{
  return v0;
}

uint64_t sub_100043D2C()
{
  return swift_beginAccess();
}

uint64_t sub_100043D44()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t sub_100043D7C()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100043DB0()
{
  return swift_retain();
}

void sub_100043DCC()
{
  *(void *)(v0 + 416) = *(void *)(*(void *)(v0 + 224) + 216);
}

uint64_t sub_100043DDC()
{
  return sub_1000E1AF8();
}

uint64_t sub_100043E04()
{
  return swift_errorRelease();
}

uint64_t sub_100043E38()
{
  return v0 + 8;
}

void sub_100043EC4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_100043EDC()
{
  return v0;
}

uint64_t sub_100043EE8()
{
  return swift_arrayDestroy();
}

uint64_t sub_100043F28()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100043F38()
{
  return swift_beginAccess();
}

uint64_t sub_100043F60()
{
  return swift_arrayDestroy();
}

uint64_t sub_100043F80()
{
  return swift_arrayDestroy();
}

uint64_t sub_100043F9C()
{
  return v0;
}

uint64_t sub_100043FB4()
{
  return v0;
}

uint64_t sub_100043FD4()
{
  return swift_retain();
}

uint64_t sub_100043FF0()
{
  return swift_retain();
}

uint64_t sub_100044028(uint64_t result)
{
  *(void *)(v1 + 544) = result;
  return result;
}

uint64_t sub_100044038()
{
  return swift_arrayDestroy();
}

uint64_t sub_100044054()
{
  **(void **)(v1 - 128) = v0;
  return swift_errorRelease();
}

uint64_t sub_100044070@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10004407C()
{
  return sub_10001DF20(v1, v0, (uint64_t *)(v2 - 96));
}

BOOL sub_100044098(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void *sub_1000440B4()
{
  return sub_10000853C((void *)(*(void *)(v0 + 48) + 224), *(void *)(*(void *)(v0 + 48) + 248));
}

uint64_t sub_1000440E8(uint64_t a1)
{
  *(void *)(v1 + 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100044110()
{
  *(void *)(v1 - 112) = v0 + 120;
}

uint64_t sub_10004412C()
{
  return swift_allocObject();
}

uint64_t sub_10004415C()
{
  return swift_allocError();
}

uint64_t sub_10004419C(uint64_t result)
{
  *(void *)(v1 + 456) = result;
  return result;
}

uint64_t sub_1000441D0()
{
  return swift_release_n();
}

uint64_t sub_1000441E8()
{
  return v0 + 8;
}

uint64_t sub_1000441F8()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100044204()
{
  return swift_release_n();
}

void sub_100044228(unint64_t a1@<X8>)
{
  sub_10001EDA8(a1 > 1, v1, 1);
}

void sub_100044278()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_10001EDA8(0, v2, 1);
}

uint64_t sub_10004429C()
{
  return type metadata accessor for DaemonRequest();
}

uint64_t sub_1000442B4()
{
  return v0;
}

void sub_1000442E4()
{
  *(void *)(v2 - 88) = v0;
  sub_10001EDA8(0, v1, 0);
}

uint64_t sub_100044324()
{
  return v0;
}

uint64_t sub_100044330(uint64_t a1)
{
  *(void *)(v1 + 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100044354()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_100044370(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_10004438C(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_1000443B0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000443CC()
{
  return v0;
}

uint64_t sub_1000443D8()
{
  return swift_task_dealloc();
}

uint64_t sub_1000443F4()
{
  return swift_dynamicCast();
}

BOOL sub_100044424(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100044468()
{
  return v0;
}

uint64_t sub_100044474()
{
  return v0;
}

uint64_t sub_100044480(uint64_t a1, uint64_t a2)
{
  return sub_100003730(v2, a2, v3);
}

uint64_t sub_100044498(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000444A8(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_1000444C4()
{
  return swift_release();
}

void sub_1000444F8()
{
  *(void *)(v1 - 128) = v0 + 56;
}

uint64_t sub_100044510(uint64_t result)
{
  *(void *)(v1 + 424) = result;
  return result;
}

uint64_t sub_10004451C()
{
  return type metadata accessor for Logger();
}

void sub_100044534()
{
  *(void *)(v1 - 104) = v0 + 168;
}

uint64_t sub_100044554()
{
  return *(void *)(v0 + 304);
}

uint64_t sub_10004456C()
{
  return swift_task_dealloc();
}

void *sub_10004458C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_100044598()
{
  return swift_task_dealloc();
}

uint64_t sub_1000445B8()
{
  return swift_unknownObjectRetain();
}

void *sub_1000445F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10000853C((void *)(a1 + 128), *(void *)(a1 + 152));
}

uint64_t sub_100044610()
{
  return swift_release_n();
}

uint64_t sub_100044634()
{
  return v0;
}

uint64_t sub_100044648()
{
  return v0;
}

uint64_t sub_100044654()
{
  return swift_allocError();
}

uint64_t sub_100044674()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10004468C()
{
  return v0;
}

uint64_t sub_100044698(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001DF20(v3, v4, a3);
}

uint64_t sub_1000446B0()
{
  return v0;
}

uint64_t sub_1000446C8(uint64_t a1)
{
  *(void *)(v1 + 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000446E8()
{
  return v0;
}

__n128 sub_1000446F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15)
{
  *(void *)(v15 - 96) = a1;
  return (__n128)a15;
}

uint64_t sub_100044708()
{
  return v0;
}

uint64_t sub_10004471C()
{
  sub_10000853C((void *)(v0 + 224), *(void *)(v0 + 248));
  return RequestMetadata.id.getter();
}

uint64_t sub_100044754(uint64_t result)
{
  v3[47] = v2;
  v3[48] = v1;
  v3[46] = result;
  return result;
}

void sub_100044760()
{
  v2[43] = v0;
  v2[44] = v3;
  v2[42] = v1;
}

uint64_t sub_100044784()
{
  return v0;
}

uint64_t sub_100044790()
{
  return v0;
}

uint64_t sub_1000447A4()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1000447C8()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

uint64_t sub_1000447E8()
{
  return v0;
}

uint64_t sub_1000447F4(uint64_t result)
{
  *(void *)(v1 + 184) = result;
  return result;
}

uint64_t sub_100044800()
{
  return swift_unknownObjectRelease();
}

void *sub_100044818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetInfo();
  sub_10000ED60();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v42 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = __CocoaSet.count.getter();
    if (v11) {
      goto LABEL_3;
    }
LABEL_6:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_10001EFA8();
  if (v42)
  {
    __n128 result = (void *)__CocoaSet.startIndex.getter();
    char v18 = 1;
  }
  else
  {
    __n128 result = (void *)sub_10002E3C4(a1);
    char v18 = v19 & 1;
  }
  uint64_t v44 = result;
  uint64_t v45 = v13;
  LOBYTE(v46) = v18;
  if (v11 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
    uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    uint64_t v40 = v20;
    uint64_t v41 = v6 + 32;
    uint64_t v38 = v6;
    uint64_t v39 = v4;
    uint64_t v37 = v10;
    do
    {
      sub_10011BF1C((uint64_t)v44, v45, v46, a1, v14, v15, v16, v17, v36, (uint64_t)v37, v38, v39, v40, v41, v42, v43[0], v43[1], v43[2], v43[3],
        (uint64_t)v44,
        v45,
        v46,
        v47,
        (uint64_t)v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54);
      sub_1000BB76C();
      swift_release();
      uint64_t v21 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EFA8();
        uint64_t v21 = v48;
      }
      unint64_t v22 = v21[2];
      if (v22 >= v21[3] >> 1)
      {
        sub_10001EFA8();
        uint64_t v21 = v48;
      }
      v21[2] = v22 + 1;
      __n128 result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v22, v10, v4);
      uint64_t v48 = v21;
      if (v42)
      {
        if ((v46 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015C6B0);
        uint64_t v35 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v35(v43, 0);
      }
      else
      {
        uint64_t v23 = (uint64_t)v44;
        uint64_t v24 = v45;
        char v25 = v46;
        uint64_t v26 = sub_10002E2DC(v44, v45, v46, a1);
        uint64_t v27 = a1;
        uint64_t v29 = v28;
        uint64_t v30 = a2;
        char v32 = v31;
        char v33 = v25;
        uint64_t v10 = v37;
        sub_10000E60C(v23, v24, v33);
        uint64_t v44 = (void *)v26;
        uint64_t v45 = v29;
        a1 = v27;
        char v34 = v32 & 1;
        a2 = v30;
        uint64_t v6 = v38;
        uint64_t v4 = v39;
        LOBYTE(v46) = v34;
      }
      --v11;
    }
    while (v11);
    sub_10000E60C((uint64_t)v44, v45, v46);
    swift_release();
    return v48;
  }
  return result;
}

void sub_100044B38()
{
  sub_10002FAAC();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep();
  sub_10000ED60();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100030964();
  if (*(void *)(v2 + 16))
  {
    sub_100057828(&qword_10015B250, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
    dispatch thunk of Hashable._rawHashValue(seed:)();
    sub_1000304C4();
    unint64_t v10 = v9 & ~v8;
    uint64_t v11 = v2 + 56;
    if ((*(void *)(v2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
    {
      uint64_t v17 = ~v8;
      uint64_t v18 = v2;
      uint64_t v12 = v5 + 16;
      uint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      uint64_t v14 = *(void *)(v12 + 56);
      do
      {
        v13(v0, *(void *)(v18 + 48) + v14 * v10, v3);
        sub_100057828(&qword_10015B258, (void (*)(uint64_t))&type metadata accessor for Assertion.DaemonRep);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_100043CF4();
        v16();
        if (v15) {
          break;
        }
        unint64_t v10 = (v10 + 1) & v17;
      }
      while (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
  }
  sub_10002FAC4();
}

void sub_100044CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_100030A20();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_100030A20();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_100030A20();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void sub_100044E10()
{
  sub_10002FAAC();
  uint64_t v2 = v1;
  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  sub_10000ED60();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_100057F20();
  if (*(void *)(v2 + 16))
  {
    Hasher.init(_seed:)();
    UUID.hash(into:)();
    Hasher._finalize()();
    sub_1000304C4();
    unint64_t v9 = v8 & ~v7;
    if ((*(void *)(v2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
    {
      uint64_t v10 = ~v7;
      uint64_t v11 = *(void *)(v4 + 72);
      do
      {
        sub_100057114(*(void *)(v2 + 48) + v11 * v9, v0, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
        char v12 = static UUID.== infix(_:_:)();
        sub_100057170(v0, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
        if (v12) {
          break;
        }
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
  }
  sub_10002FAC4();
}

uint64_t sub_100044F5C(uint64_t a1, uint64_t a2)
{
  return sub_1000451D0(a1, a2, (void (*)(unsigned char *))sub_1000C95D4, (void (*)(void))type metadata accessor for InferenceProviderAsset, (uint64_t (*)(uint64_t, uint64_t))sub_1000C9418);
}

void sub_100044F9C()
{
}

void sub_100044FB8()
{
}

void sub_100044FD4()
{
  sub_10002FAAC();
  uint64_t v27 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100003A70(v3);
  sub_10000ED60();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  char v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v6 + 16))
  {
    sub_10000841C(v2, v4);
    dispatch thunk of Hashable._rawHashValue(seed:)();
    sub_1000304C4();
    unint64_t v18 = v17 & ~v16;
    uint64_t v19 = v6 + 56;
    if ((*(void *)(v6 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
    {
      v25[1] = v8;
      uint64_t v26 = v6;
      v25[0] = ~v16;
      uint64_t v20 = v11 + 16;
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      uint64_t v22 = *(void *)(v20 + 56);
      do
      {
        v21(v15, *(void *)(v26 + 48) + v22 * v18, v9);
        sub_10000841C(v27, v4);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_100043F00();
        v24();
        if (v23) {
          break;
        }
        unint64_t v18 = (v18 + 1) & v25[0];
      }
      while (((*(void *)(v19 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    }
  }
  sub_10002FAC4();
}

uint64_t sub_100045190(uint64_t a1, uint64_t a2)
{
  return sub_1000451D0(a1, a2, (void (*)(unsigned char *))sub_100121BC0, (void (*)(void))type metadata accessor for DaemonRequest, (uint64_t (*)(uint64_t, uint64_t))sub_100121AB0);
}

uint64_t sub_1000451D0(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    char v7 = __CocoaSet.contains(_:)();
    swift_release();
    return v7 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Hasher.init(_seed:)(),
        a3(v24),
        Swift::Int v12 = Hasher._finalize()(),
        uint64_t v13 = -1 << *(unsigned char *)(a2 + 32),
        Swift::Int v14 = v12 & ~v13,
        sub_100057D20(),
        (v15 & 1) == 0))
  {
LABEL_11:
    char v18 = 0;
    return v18 & 1;
  }
  a4(0);
  uint64_t v16 = swift_retain();
  char v17 = a5(v16, a1);
  swift_release();
  if ((v17 & 1) == 0)
  {
    uint64_t v19 = ~v13;
    uint64_t v20 = (v14 + 1) & v19;
    sub_100057D20();
    if (v21)
    {
      do
      {
        uint64_t v22 = swift_retain();
        char v18 = a5(v22, a1);
        swift_release();
        if (v18) {
          break;
        }
        uint64_t v20 = (v20 + 1) & v19;
        sub_100057D20();
      }
      while ((v23 & 1) != 0);
      return v18 & 1;
    }
    goto LABEL_11;
  }
  char v18 = 1;
  return v18 & 1;
}

uint64_t sub_100045348()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015C0C0);
  uint64_t v1 = sub_100003B18(v0, (uint64_t)qword_10015C0C0);
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_10004542C()
{
  return _swift_task_switch(sub_100045448, 0, 0);
}

uint64_t sub_100045448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100057900();
  a19 = v22;
  a20 = v23;
  sub_100030AFC();
  a18 = v21;
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  char v25 = (void *)sub_100057A88(v24, (uint64_t)qword_10015C0C0);
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v26))
  {
    sub_100030314();
    a9 = sub_1000579CC();
    *uint64_t v20 = 136315138;
    *(void *)(v21 + 16) = type metadata accessor for ModelXPCRequest.ExecuteRequest();
    sub_100003A70(&qword_10015C7F0);
    uint64_t v27 = sub_100057AB0();
    *(void *)(v21 + 16) = sub_10001DF20(v27, v28, &a9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v29, v30, "Unhandled message with direct reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  type metadata accessor for ModelManagerError();
  sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10004415C();
  sub_10002FC6C();
  sub_100043E9C();
  v31();
  swift_willThrow();
  sub_10000EF7C();
  sub_10005791C();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_10004562C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_10004564C, 0, 0);
}

uint64_t sub_10004564C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.FetchModelInstance();
    sub_100003A70(&qword_10015C5C8);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_10004582C;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_10004582C()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  sub_10000EF7C();
  return v6();
}

uint64_t sub_1000458F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100045910, 0, 0);
}

uint64_t sub_100045910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.CancelRequest();
    sub_100003A70(&qword_10015C760);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100045AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100045B10, 0, 0);
}

uint64_t sub_100045B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.AcquireRequest();
    sub_100003A70(&qword_10015C740);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100045CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100045D10, 0, 0);
}

uint64_t sub_100045D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.PrewarmSession();
    sub_100003A70(&qword_10015C820);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100045EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100045F10, 0, 0);
}

uint64_t sub_100045F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.ReleaseRequest();
    sub_100003A70(&qword_10015C720);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000460F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046110, 0, 0);
}

uint64_t sub_100046110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.HoldAssetBundle();
    sub_100003A70(&qword_10015C630);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000462F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046310, 0, 0);
}

uint64_t sub_100046310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.LoadAssetBundle();
    sub_100003A70(&qword_10015C650);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000464F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046510, 0, 0);
}

uint64_t sub_100046510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.FetchAssetsRequest();
    sub_100003A70(&qword_10015C6C0);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000466F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046710, 0, 0);
}

uint64_t sub_100046710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.FetchPolicyRequest();
    sub_100003A70(&qword_10015C670);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000468F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046910, 0, 0);
}

uint64_t sub_100046910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.CancelSessionRequest();
    sub_100003A70(&qword_10015C800);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100046AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046B10, 0, 0);
}

uint64_t sub_100046B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.CreateSessionRequest();
    sub_100003A70(&qword_10015C870);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100046CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046D10, 0, 0);
}

uint64_t sub_100046D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.DeleteSessionRequest();
    sub_100003A70(&qword_10015C850);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100046EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100046F10, 0, 0);
}

uint64_t sub_100046F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated();
    sub_100003A70(&qword_10015C5A8);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000470F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047110, 0, 0);
}

uint64_t sub_100047110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest();
    sub_100003A70(&qword_10015C700);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000472F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047310, 0, 0);
}

uint64_t sub_100047310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch();
    sub_100003A70(&qword_10015C608);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000474F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047510, 0, 0);
}

uint64_t sub_100047510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest();
    sub_100003A70(&qword_10015C6E0);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000476F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047710, 0, 0);
}

uint64_t sub_100047710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest();
    sub_100003A70(&qword_10015C698);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_1000478F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047910, 0, 0);
}

uint64_t sub_100047910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.StartMonitoringInferences();
    sub_100003A70(&qword_10015C588);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100047AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a3;
  *(void *)(v4 + 80) = a4;
  return _swift_task_switch(sub_100047B10, 0, 0);
}

uint64_t sub_100047B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  Swift::Int v14 = (void *)sub_100057A88(v13, (uint64_t)qword_10015C0C0);
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_1000579B0(v15))
  {
    sub_1000578A8();
    sub_1000579CC();
    sub_100057AEC();
    sub_100057960(4.8149e-34);
    *(void *)(v12 + 56) = type metadata accessor for ModelXPCRequest.DumpState();
    sub_100003A70(&qword_10015C5E8);
    uint64_t v16 = sub_100057AB0();
    uint64_t v19 = sub_100057AF8(v16, v17, v18);
    sub_100057884(v19);
    swift_bridgeObjectRelease();
    sub_1000578E0((void *)&_mh_execute_header, v20, v21, "Unhandled message with callback reply of type: %s");
    sub_1000579E8();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  sub_100057B28();
  uint64_t v22 = sub_100003A70(&qword_10015C500);
  sub_100057AE0(v22);
  uint64_t v23 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v23);
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  uint64_t v24 = sub_10005794C();
  v25(v24);
  sub_100057A04();
  sub_100057874();
  uint64_t v39 = (char *)v26 + *v26;
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_100057A7C(v27);
  *unint64_t v28 = v29;
  v28[1] = sub_100057870;
  sub_100057938();
  sub_10005791C();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, v39, a10, a11, a12);
}

uint64_t sub_100047CF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelXPCRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == enum case for ModelXPCRequest.executeRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ExecuteRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C168;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.ExecuteRequest;
LABEL_41:
    a1[4] = sub_100057828(v11, (void (*)(uint64_t))v12);
    uint64_t v13 = sub_100057080(a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(SessionRequest - 8) + 32))(v13, v8, SessionRequest);
  }
  if (v9 == enum case for ModelXPCRequest.cancelRequest(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CancelRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C188;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.CancelRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.createSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CreateSessionRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C0E8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.CreateSessionRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.deleteSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.DeleteSessionRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C108;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.DeleteSessionRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.prewarmSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.PrewarmSession();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C128;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.PrewarmSession;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.cancelSession(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.CancelSessionRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C148;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.CancelSessionRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.acquireAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.AcquireRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C1A8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.AcquireRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.releaseAssertion(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ReleaseRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C1C8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.ReleaseRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.fetchAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssertionsRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C1E8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.FetchAssertionsRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.restoreAssertions(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C208;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.fetchAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchAssetsRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C228;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.FetchAssetsRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.fetchDynamicAssets(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C248;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.fetchPolicy(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchPolicyRequest();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C268;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.FetchPolicyRequest;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.loadAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.LoadAssetBundle();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C8B8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.LoadAssetBundle;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.holdAssetBundle(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.HoldAssetBundle();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C8A0;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.HoldAssetBundle;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.forceAssetVersionSwitch(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C890;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.dumpState(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.DumpState();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C8B0;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.DumpState;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.fetchModelInstance(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.FetchModelInstance();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C8A8;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.FetchModelInstance;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.setAssetsHaveUpdated(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C898;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated;
    goto LABEL_41;
  }
  if (v9 == enum case for ModelXPCRequest.startMonitoringInferences(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t SessionRequest = type metadata accessor for ModelXPCRequest.StartMonitoringInferences();
    a1[3] = SessionRequest;
    uint64_t v11 = (unint64_t *)&unk_10015C888;
    uint64_t v12 = &type metadata accessor for ModelXPCRequest.StartMonitoringInferences;
    goto LABEL_41;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000486D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) & 1) != 0
    && (os_variant_has_internal_content() & 1) == 0)
  {
    type metadata accessor for ModelManagerError();
    sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    sub_10002FC6C();
    uint64_t v33 = *(void (**)(void))(v32 + 104);
    goto LABEL_19;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  unint64_t v11 = v10;
  uint64_t v56 = __chkstk_darwin(v9, v10);
  uint64_t v12 = (os_unfair_lock_s *)(a3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 24));
  sub_100056F30((uint64_t *)(a3 + 16), &token);
  if (!v5)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 24));
    if (token.val[0])
    {
      swift_bridgeObjectRelease();
      return;
    }
    unsigned int v13 = AuditToken.processIdentifier.getter();
    *(void *)token.val = AuditToken.token.getter();
    token.val[2] = v14;
    token.val[3] = v15;
    token.val[4] = v16;
    token.val[5] = v17;
    token.val[6] = v18;
    token.val[7] = v19;
    SecTaskRef v20 = SecTaskCreateWithAuditToken(0, &token);
    if (v20)
    {
      *(void *)token.val = 0;
      uint64_t v21 = v20;
      uint64_t v22 = v56;
      unint64_t v55 = v11;
      uint64_t v23 = (__CFString *)String._bridgeToObjectiveC()();
      CFTypeRef v24 = SecTaskCopyValueForEntitlement(v21, v23, (CFErrorRef *)&token);

      char v25 = *(void **)token.val;
      if (*(void *)token.val)
      {
        if (qword_10015B098 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_100003B18(v26, (uint64_t)qword_10015C0C0);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v22 = 8;
          uint64_t v29 = (float *)swift_slowAlloc();
          sub_100057F84(v29, 1.5047e-36);
          LODWORD(v58) = v13;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "SecTaskCopyValueForEntitlement failed for client %d", (uint8_t *)v29, 8u);
          sub_10000ED7C();
        }

        type metadata accessor for ModelManagerError();
        sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_100057D34();
        *uint64_t v30 = v22;
        v30[1] = v55;
        sub_10002FC6C();
        sub_100043E9C();
        v31();
        swift_willThrow();
        goto LABEL_35;
      }
      uint64_t v41 = (uint64_t)v24;
      unint64_t v42 = v55;
      if (v41 && (v58 = v41, swift_unknownObjectRetain(), uint64_t v43 = swift_dynamicCast(), (v43 & 1) != 0))
      {
        if (v57)
        {
          __chkstk_darwin(v43, v44);
          os_unfair_lock_lock(v12);
          sub_100056F70();
          os_unfair_lock_unlock(v12);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          return;
        }
        if (qword_10015B098 != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        sub_100003B18(v51, (uint64_t)qword_10015C0C0);
        swift_bridgeObjectRetain_n();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          sub_100057CF4(1.5047e-36);
          sub_100057F38();
          uint64_t v52 = sub_10001DF20(v56, v55, &v58);
          sub_100057E20(v52);
          swift_bridgeObjectRelease_n();
          uint64_t v50 = "Client %d has entitlement %s set to false";
          goto LABEL_28;
        }
      }
      else
      {
        if (qword_10015B098 != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        sub_100003B18(v45, (uint64_t)qword_10015C0C0);
        swift_bridgeObjectRetain_n();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          sub_100057CF4(1.5047e-36);
          sub_100057F38();
          uint64_t v49 = sub_10001DF20(v56, v55, &v58);
          sub_100057E20(v49);
          swift_bridgeObjectRelease_n();
          uint64_t v50 = "Client %d missing entitlement %s";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, v46, v47, v50, v48, 0x12u);
          swift_arrayDestroy();
          unint64_t v42 = v55;
          sub_10000ED7C();
          sub_10000ED7C();

LABEL_34:
          type metadata accessor for ModelManagerError();
          sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
          sub_100057D34();
          *uint64_t v53 = v56;
          v53[1] = v42;
          sub_10002FC6C();
          sub_100043E9C();
          v54();
          swift_willThrow();
LABEL_35:
          swift_unknownObjectRelease();

          return;
        }
      }

      swift_bridgeObjectRelease_n();
      goto LABEL_34;
    }
    uint64_t v34 = v56;
    if (qword_10015B098 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100003B18(v35, (uint64_t)qword_10015C0C0);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v34 = 8;
      uint64_t v38 = (float *)swift_slowAlloc();
      sub_100057F84(v38, 1.5047e-36);
      token.val[0] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Could not find secTask for client %d", (uint8_t *)v38, 8u);
      sub_10000ED7C();
    }

    type metadata accessor for ModelManagerError();
    sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100057D34();
    *uint64_t v39 = v34;
    v39[1] = v11;
    sub_10002FC6C();
    uint64_t v33 = *(void (**)(void))(v40 + 104);
LABEL_19:
    v33();
    swift_willThrow();
    return;
  }
  os_unfair_lock_unlock(v12);
  __break(1u);
}

uint64_t ModelXPCRequest.needsCallback.getter()
{
  sub_100047CF0(v4);
  sub_10000853C(v4, v4[3]);
  uint64_t v0 = sub_100044468();
  char v2 = v1(v0);
  sub_100008130((uint64_t)v4);
  return v2 & 1;
}

uint64_t sub_100048FBC()
{
  return sub_100057828(&qword_10015C0D8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

uint64_t sub_100049004()
{
  return sub_100057828(&qword_10015C0E0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

void *sub_10004904C()
{
  return &protocol witness table for Never;
}

void *sub_100049058()
{
  return &protocol witness table for Never;
}

uint64_t sub_100049064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  return sub_100057A20((uint64_t)sub_100049080);
}

uint64_t sub_100049080()
{
  sub_1000086EC();
  sub_100047CF0(v0 + 2);
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = sub_10000853C(v0 + 2, v1);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100057A7C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100049148;
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  return sub_1000492D8(v9, (uint64_t)v3, v7, v8, v1, v2);
}

uint64_t sub_100049148()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100049224()
{
  sub_1000086E0();
  sub_100008130(v0 + 16);
  sub_1000304E0();
  return v1();
}

uint64_t sub_10004927C()
{
  sub_1000086E0();
  sub_100008130(v0 + 16);
  sub_10000EF7C();
  return v1();
}

uint64_t sub_1000492D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  return _swift_task_switch(sub_100049300, 0, 0);
}

uint64_t sub_100049300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = v14[15];
  unsigned int v16 = (uint64_t *)v14[10];
  unsigned int v17 = *(int **)(v15 + 32);
  uint64_t v34 = v15 + 32;
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModelManagerError();
  sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  void v16[3] = type metadata accessor for ModelXPCResult();
  uint64_t v18 = sub_100058004();
  uint64_t v19 = sub_100058004();
  uint64_t v20 = sub_100057828(&qword_10015C510, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  uint64_t v21 = sub_100057828(&qword_10015C518, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  v14[2] = v18;
  void v14[3] = v19;
  v14[4] = v20;
  v14[5] = v21;
  v16[4] = swift_getWitnessTable();
  v14[6] = v18;
  v14[7] = v19;
  v14[8] = v20;
  v14[9] = v21;
  v16[5] = swift_getWitnessTable();
  sub_100057080(v16);
  uint64_t v33 = (char *)v17 + *v17;
  swift_task_alloc();
  sub_100057E8C();
  v14[16] = v22;
  *uint64_t v22 = v23;
  v22[1] = sub_100049568;
  sub_10002FE48();
  return v30(v24, v25, v26, v27, v28, v29, v30, v31, a9, v33, v34, a12, a13, a14);
}

uint64_t sub_100049568()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000579A4();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    sub_10000EF7C();
    return v10();
  }
}

uint64_t sub_100049660()
{
  sub_1000086E0();
  sub_1000570C0(*(void *)(v0 + 80));
  sub_10000EF7C();
  return v1();
}

uint64_t sub_1000496BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return sub_100057A20((uint64_t)sub_1000496DC);
}

void sub_1000496DC()
{
  sub_10002FC60();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  sub_100047CF0(v0 + 2);
  sub_10000853C(v0 + 2, v0[5]);
  uint64_t v3 = swift_allocObject();
  v0[12] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100057F04(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100049838;
  sub_100044070(v0[7]);
  sub_100043D98();
  __asm { BRAA            X7, X16 }
}

uint64_t sub_100049838()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004991C()
{
  sub_1000086E0();
  sub_100008130(v0 + 16);
  sub_10000EF7C();
  return v1();
}

uint64_t sub_100049974(void *a1, int *a2)
{
  long long v9 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = a1[3];
  uint64_t v5 = sub_10000853C(a1, v4);
  *(_OWORD *)(v2 + 40) = v9;
  uint64_t v6 = sub_100057080((uint64_t *)(v2 + 16));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v6, v5, v4);
  unint64_t v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100049AB4;
  return v10(v2 + 16);
}

uint64_t sub_100049AB4()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  sub_10000EF7C();
  return v6();
}

uint64_t sub_100049B7C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C0E8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100049BD4()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_100049C38()
{
  return 0xD000000000000020;
}

unint64_t sub_100049C54()
{
  return 0xD000000000000020;
}

unint64_t sub_100049C70()
{
  return 0xD00000000000001CLL;
}

void *sub_100049C8C(uint64_t a1)
{
  sub_100003A70(&qword_10015C570);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  v1[3] = v3;
  sub_100003A70(&qword_10015C578);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = &_swiftEmptySetSingleton;
  v1[4] = v4;
  v1[2] = a1;
  return v1;
}

void sub_100049D00()
{
  type metadata accessor for AuditToken();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_100057F20();
  TaskCancellingXPCReceivedMessage.auditToken.getter();
  AuditToken.processIdentifier.getter();
  sub_100043924();
  v3();
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 5;
  os_unfair_lock_lock(v4 + 5);
  sub_100056F8C(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_100049DD4()
{
  sub_1000086E0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  uint64_t v4 = type metadata accessor for AuditToken();
  v1[10] = v4;
  sub_10002FA4C(v4);
  v1[11] = v5;
  v1[12] = sub_100057A60();
  v1[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ModelXPCRequest();
  v1[14] = v6;
  sub_10002FA4C(v6);
  v1[15] = v7;
  v1[16] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100049EA0()
{
  sub_10002FC60();
  uint64_t v1 = v0[16];
  sub_100049D00();
  TaskCancellingXPCReceivedMessage.decode()();
  TaskCancellingXPCReceivedMessage.auditToken.getter();
  sub_100047CF0(v0 + 2);
  sub_100057DBC();
  if (v1)
  {
    sub_100008130((uint64_t)(v0 + 2));
    sub_100043924();
    v2();
    uint64_t v3 = (uint64_t *)v0[7];
    v3[3] = sub_100003A70(&qword_10015C500);
    v3[4] = sub_100056FA4(&qword_10015C558);
    v3[5] = sub_100056FA4(&qword_10015C508);
    sub_100057080(v3);
    swift_errorRetain();
    ModelManagerError.init(wrapping:)();
    swift_storeEnumTagMultiPayload();
    swift_errorRelease();
    uint64_t v4 = sub_100057B44();
    v5(v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043D98();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v8 = v0[11];
  sub_100008130((uint64_t)(v0 + 2));
  v0[17] = *(void *)(v8 + 8);
  v0[18] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043CF4();
  v9();
  TaskCancellingXPCReceivedMessage.auditToken.getter();
  swift_task_alloc();
  sub_100057E8C();
  v0[19] = (uint64_t)v10;
  *uint64_t v10 = v11;
  v10[1] = sub_10004A0E4;
  sub_100043D98();
  return sub_100049064(v12, v13, v14);
}

uint64_t sub_10004A0E4()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v1 + 136))(*(void *)(v1 + 96), *(void *)(v1 + 80));
  sub_1000579A4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10004A224()
{
  sub_1000086EC();
  uint64_t v0 = sub_100057B44();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v2();
}

uint64_t sub_10004A2A8()
{
  sub_1000086EC();
  uint64_t v1 = *(uint64_t **)(v0 + 56);
  v1[3] = sub_100003A70(&qword_10015C500);
  v1[4] = sub_100056FA4(&qword_10015C558);
  v1[5] = sub_100056FA4(&qword_10015C508);
  sub_100057080(v1);
  swift_errorRetain();
  ModelManagerError.init(wrapping:)();
  sub_100044468();
  swift_storeEnumTagMultiPayload();
  swift_errorRelease();
  uint64_t v2 = sub_100057B44();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v4();
}

uint64_t sub_10004A3C4()
{
  sub_1000086E0();
  v1[14] = v2;
  v1[15] = v0;
  v1[12] = v3;
  v1[13] = v4;
  uint64_t v5 = type metadata accessor for AuditToken();
  v1[16] = v5;
  sub_10002FA4C(v5);
  v1[17] = v6;
  v1[18] = sub_100057A60();
  v1[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ModelXPCRequest();
  v1[20] = v7;
  sub_10002FA4C(v7);
  v1[21] = v8;
  v1[22] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10004A490()
{
  sub_100030AFC();
  uint64_t v1 = v0[22];
  sub_100049D00();
  TaskCancellingXPCReceivedMessage.decode()();
  TaskCancellingXPCReceivedMessage.auditToken.getter();
  sub_100047CF0(v0 + 2);
  sub_100057DBC();
  v0[23] = v1;
  if (v1)
  {
    uint64_t v2 = v0[17];
    uint64_t v3 = (int *)v0[13];
    sub_100008130((uint64_t)(v0 + 2));
    v0[24] = *(void *)(v2 + 8);
    uint64_t v4 = sub_100043F9C();
    v5(v4);
    v0[10] = sub_100003A70(&qword_10015C500);
    v0[11] = sub_100056FA4(&qword_10015C508);
    sub_100057080(v0 + 7);
    swift_errorRetain();
    ModelManagerError.init(wrapping:)();
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = (uint64_t (*)(uint64_t *))((char *)v3 + *v3);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[25] = (uint64_t)v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10004A70C;
    return v15(v0 + 7);
  }
  else
  {
    uint64_t v8 = v0[17];
    sub_100008130((uint64_t)(v0 + 2));
    uint64_t v9 = *(void (**)(void))(v8 + 8);
    sub_100057ECC();
    sub_100043924();
    v9();
    v0[26] = v8 + 8;
    v0[27] = (uint64_t)v9;
    TaskCancellingXPCReceivedMessage.auditToken.getter();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[28] = (uint64_t)v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10004A890;
    uint64_t v11 = sub_100044070(v0[15]);
    return sub_1000496BC(v11, v12, v13, v14);
  }
}

uint64_t sub_10004A70C()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004A7D8()
{
  sub_1000086E0();
  swift_errorRelease();
  uint64_t v1 = v0[24];
  v0[26] = v0[17] + 8;
  v0[27] = v1;
  TaskCancellingXPCReceivedMessage.auditToken.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[28] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10004A890;
  uint64_t v3 = sub_100044070(v0[15]);
  return sub_1000496BC(v3, v4, v5, v6);
}

uint64_t sub_10004A890()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void (**)(void))(v1 + 216);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_100043924();
  v2();
  sub_1000579A4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10004A9C0()
{
  sub_1000086EC();
  uint64_t v0 = sub_100057B44();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v2();
}

uint64_t sub_10004AA44@<X0>(uint64_t *a1@<X8>)
{
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003B18(v3, (uint64_t)qword_10015C0C0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (sub_100044424(v5))
  {
    uint64_t v6 = (uint8_t *)sub_100030314();
    uint64_t v7 = (void *)sub_100057C20();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v1, "Error during decoding the message %@", v6, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a1[3] = sub_100003A70(&qword_10015C500);
  a1[4] = sub_100056FA4(&qword_10015C508);
  uint64_t v8 = sub_100057080(a1);
  sub_100003A70(&qword_10015B468);
  _print_unlocked<A, B>(_:_:)();
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  sub_100043E9C();
  v9();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10004AC9C(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return sub_100057A20((uint64_t)sub_10004ACB4);
}

uint64_t sub_10004ACB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, uint64_t a12, uint64_t a13, os_log_type_t type, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_100057CCC();
  a26 = v28;
  a27 = v29;
  sub_100058050();
  a25 = v27;
  uint64_t v30 = *(void *)(v27 + 40);
  type metadata accessor for _OSActivity();
  *(void *)(v27 + 48) = _OSActivity.__allocating_init(_:)();
  uint64_t v31 = *(os_unfair_lock_s **)(v30 + 24);
  uint64_t v32 = v31 + 4;
  uint64_t v33 = v31 + 5;
  os_unfair_lock_lock(v31 + 5);
  sub_10004B2C4(v32, &a15);
  os_unfair_lock_unlock(v33);
  uint64_t v34 = a15;
  *(_DWORD *)(v27 + 96) = a15;
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100003B18(v35, (uint64_t)qword_10015C0C0);
  type metadata accessor for XPCRichError();
  sub_10000ED60();
  uint64_t v37 = v36;
  sub_10002FE18();
  uint64_t v38 = *(void (**)(void))(v37 + 16);
  sub_100057F10();
  v38();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    os_log_type_t type = v40;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v50 = (void *)sub_100057C20();
    *(_DWORD *)uint64_t v41 = 138412546;
    sub_100056E08();
    sub_10004415C();
    loga = v39;
    uint64_t v42 = v34;
    sub_100057F10();
    v38();
    uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v27 + 16) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v50 = v43;
    sub_100043AE0();
    v44();
    swift_task_dealloc();
    *(_WORD *)(v41 + 12) = 2048;
    *(void *)(v27 + 24) = v42;
    sub_100044468();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, loga, type, "Cancellation Handler with error %@, sessionManager invoked for removeAllSession with pid %ld", (uint8_t *)v41, 0x16u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100043AE0();
    v45();

    swift_task_dealloc();
  }
  uint64_t v46 = *(void *)(*(void *)(v27 + 40) + 16);
  *(void *)(v27 + 56) = v46;
  *(void *)(v27 + 64) = *(void *)(v46 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  os_log_type_t v47 = (void *)swift_task_alloc();
  *(void *)(v27 + 72) = v47;
  *os_log_type_t v47 = v27;
  v47[1] = sub_10004AFF0;
  sub_1000306EC();
  return sub_10003655C();
}

uint64_t sub_10004AFF0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004B0D4()
{
  sub_1000086E0();
  *(void *)(v0 + 80) = *(void *)(*(void *)(v0 + 56)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  swift_retain();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100057A7C(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10004B180;
  int v4 = *(_DWORD *)(v0 + 96);
  return sub_1000161D8(v4);
}

uint64_t sub_10004B180()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004B264()
{
  sub_1000086E0();
  _OSActivity.close()();
  swift_release();
  sub_10000EF7C();
  return v0();
}

_DWORD *sub_10004B2C4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10004B2D0()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10004B300()
{
  sub_10004B2D0();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10004B334()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100049DD4();
}

uint64_t sub_10004B3E0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004A3C4();
}

uint64_t sub_10004B490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000ED54;
  return TaskCancellablePeerHandler.handleIncomingRequest(_:)(a1, a2, a3);
}

uint64_t sub_10004B540(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000E1FC;
  return sub_10004AC9C(a1);
}

uint64_t sub_10004B5D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004AA44(a1);
}

uint64_t sub_10004B5F0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  sub_100003A70(&qword_10015BD48);
  type metadata accessor for ModelXPCMessageHandler();
  swift_allocObject();
  sub_100049C8C(a1);
  swift_retain();
  uint64_t result = TaskCancellingXPCPeerHandler.__allocating_init(handler:)();
  *a2 = result;
  return result;
}

uint64_t sub_10004B66C()
{
  swift_release();
  type metadata accessor for Logger();
  sub_10002FB84();
  sub_10000EFBC();
  v1();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_runningBoard);
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_osVariant);
  swift_release();
  swift_release();
  swift_release();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10004B7A4()
{
  sub_10004B66C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10004B7FC()
{
  sub_1000086E0();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015C010);
  sub_10002FDD0(v5);
  v1[8] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for Session.Metadata();
  v1[9] = v6;
  sub_10002FA4C(v6);
  v1[10] = v7;
  v1[11] = sub_100057A60();
  v1[12] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  v1[13] = v8;
  sub_10002FA4C(v8);
  v1[14] = v9;
  v1[15] = sub_100057A60();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10004B914()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void *)(v0 + 80);
  int v2 = AuditToken.processIdentifier.getter();
  ModelXPCRequest.CreateSessionRequest.metadata.getter();
  Session.Metadata.id.getter();
  *(void *)(v0 + 152) = *(void *)(v1 + 8);
  *(void *)(v0 + 160) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v3 = sub_100043F9C();
  v4(v3);
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = sub_100003B18(v6, (uint64_t)qword_10015C0C0);
  *(void *)(v0 + 176) = *(void *)(v5 + 16);
  *(void *)(v0 + 184) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_100057F10();
  v7();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 112);
  if (v10)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = sub_10002FF90();
    *(_DWORD *)uint64_t v12 = 136315394;
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = sub_10001DF20(v13, v14, &v20);
    sub_100057F78(v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(void))(v11 + 8);
    sub_100043AE0();
    v16();
    *(_WORD *)(v12 + 12) = 1024;
    *(_DWORD *)(v0 + 224) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "XPC Handling createSessionRequest for client session %s from proceess %d", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v16 = *(void (**)(void))(v11 + 8);
    ((void (*)(void, void))v16)(*(void *)(v0 + 136), *(void *)(v0 + 104));
  }

  *(void *)(v0 + 192) = v16;
  *(void *)(v0 + 200) = *(void *)(*(void *)(*(void *)(v0 + 40) + 16)
                                    + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.CreateSessionRequest.metadata.getter();
  ModelXPCRequest.CreateSessionRequest.alreadyLockedInferenceProvider.getter();
  unsigned int v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v17;
  *unsigned int v17 = v0;
  v17[1] = sub_10004BC30;
  sub_100043638();
  return sub_10003248C();
}

uint64_t sub_10004BC30()
{
  sub_10002FC60();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v4[19];
  uint64_t v6 = v4[11];
  uint64_t v7 = v4[9];
  uint64_t v8 = v4[8];
  uint64_t v9 = *v1;
  sub_1000086D0();
  *BOOL v10 = v9;
  *(void *)(v11 + 216) = v0;
  swift_task_dealloc();
  swift_release();
  sub_10002EB50(v8, &qword_10015C010);
  v5(v6, v7);
  sub_1000579A4();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_10004BDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  (*(void (**)(void, void, void))(v22 + 176))(*(void *)(v22 + 128), *(void *)(v22 + 144), *(void *)(v22 + 104));
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)sub_100030314();
    a11 = sub_10002FF90();
    *(_DWORD *)uint64_t v27 = 136315138;
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v22 + 16) = sub_10001DF20(v28, v29, &a11);
    sub_100057A48();
    swift_bridgeObjectRelease();
    sub_10004381C();
    v30();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Completion of CreateSession for client session %s", v27, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    (*(void (**)(void, void))(v22 + 192))(*(void *)(v22 + 128), *(void *)(v22 + 104));
  }

  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 192);
  uint64_t v32 = *(void *)(v22 + 144);
  uint64_t v33 = *(void *)(v22 + 104);
  uint64_t v43 = *(void *)(v22 + 88);
  uint64_t v44 = *(void *)(v22 + 64);
  (*(void (**)(void, uint64_t, uint64_t))(v22 + 176))(*(void *)(v22 + 120), v32, v33);
  ModelXPCRequest.CreateSessionRequest.Response.init(sessionID:)();
  v31(v32, v33);
  sub_100003A70(&qword_10015C880);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE48();
  return v35(v34, v35, v36, v37, v38, v39, v40, v41, v43, v44, a11, a12, a13, a14);
}

uint64_t sub_10004C020()
{
  sub_10002FC60();
  sub_10000EFBC();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10004C0F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004B7FC();
}

uint64_t sub_10004C1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C868 + dword_10015C868);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10004C274(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C100, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CreateSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004C2CC(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C108, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004C324()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B9A0);
  v1[6] = v4;
  sub_10002FA4C(v4);
  v1[7] = v5;
  v1[8] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for ModelXPCRequest.DeleteSessionRequest();
  v1[9] = v6;
  sub_10002FA4C(v6);
  v1[10] = v7;
  v1[11] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v8, v9, v10);
}

#error "10004C508: call analysis failed (funcsize=122)"

uint64_t sub_10004C5F0()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100043924();
  v3();
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10004C72C()
{
  sub_1000086EC();
  ModelXPCRequest.DeleteSessionRequest.Response.init()();
  sub_100003A70(&qword_10015C860);
  sub_100057BE8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_10004C7B8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004C324();
}

uint64_t sub_10004C860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C848 + dword_10015C848);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10004C930(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C120, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DeleteSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004C988(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C128, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004C9E0()
{
  sub_1000086E0();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v4);
  v1[7] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for ModelManagerError();
  v1[8] = v5;
  sub_10002FA4C(v5);
  v1[9] = v6;
  v1[10] = sub_10002FE18();
  uint64_t v7 = sub_100003A70(&qword_10015B9A0);
  v1[11] = v7;
  sub_10002FA4C(v7);
  v1[12] = v8;
  v1[13] = sub_100057A60();
  v1[14] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.PrewarmSession();
  v1[15] = v9;
  sub_10002FA4C(v9);
  v1[16] = v10;
  v1[17] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v11, v12, v13);
}

#error "10004CC30: call analysis failed (funcsize=126)"

uint64_t sub_10004CD1C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  sub_10004381C();
  v4();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10004CE6C()
{
  sub_10000F01C();
  ModelXPCRequest.PrewarmSession.Response.init()();
  sub_100003A70(&qword_10015C840);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

void sub_10004CF2C()
{
  sub_10002FC60();
  v0[2] = v0[20];
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(v0[9] + 88))(v0[10], v0[8]) == enum case for ModelManagerError.inferenceError(_:))
    {
      uint64_t v1 = sub_100057FBC();
      v2(v1);
      uint64_t v3 = type metadata accessor for InferenceError();
      sub_100057B10();
      uint64_t v5 = v4;
      uint64_t v6 = sub_100057EB4();
      uint64_t v8 = v7(v6);
      if (v8 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        uint64_t v9 = v8;
        uint64_t v10 = v0[7];
        uint64_t v11 = v0[5];
        swift_errorRelease();
        uint64_t v12 = type metadata accessor for TaskPriority();
        sub_100006960(v10, 1, 1, v12);
        uint64_t v13 = (void *)swift_allocObject();
        v13[2] = 0;
        v13[3] = 0;
        v13[4] = v11;
        swift_retain();
        sub_100003730(v10, (uint64_t)&unk_10015C838, (uint64_t)v13);
        swift_release();
        sub_100057828((unint64_t *)&qword_10015C7C0, (void (*)(uint64_t))&type metadata accessor for InferenceError);
        sub_10004415C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(v14, v9, v3);
        swift_willThrow();
      }
      else
      {
        (*(void (**)(void, uint64_t))(v5 + 8))(v0[10], v3);
      }
    }
    else
    {
      uint64_t v15 = sub_100057B44();
      v16(v15);
    }
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_100043D98();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10004D18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10000ED54;
  return sub_10004D220(a4);
}

uint64_t sub_10004D220(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_100057A20((uint64_t)sub_10004D238);
}

uint64_t sub_10004D238()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(v0[2] + 16);
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager;
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager;
  v0[6] = 0;
  v0[7] = *(void *)(v1 + v2);
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100058024(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_10004D2F0;
  return sub_1001047E4();
}

uint64_t sub_10004D2F0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004D3D4()
{
  sub_1000086E0();
  v0[9] = *(void *)(v0[3] + v0[5]);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004D478;
  return sub_100087C48();
}

uint64_t sub_10004D478()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 88) = v5;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10004D560()
{
  sub_1000086EC();
  if (*(unsigned char *)(v0 + 88))
  {
    if (qword_10015B098 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    uint64_t v2 = sub_100057A88(v1, (uint64_t)qword_10015C0C0);
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_12;
    }
    uint64_t v4 = "Successfully forced an asset version switch";
LABEL_11:
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, v4, v6, 2u);
    sub_10000ED7C();
LABEL_12:

    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v8 = *(unsigned __int8 *)(v0 + 88);
    return v7(v8);
  }
  if (*(void *)(v0 + 48) == 9)
  {
    if (qword_10015B098 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v2 = sub_100057A88(v5, (uint64_t)qword_10015C0C0);
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_12;
    }
    uint64_t v4 = "Failed to force an asset version switch, multiple attempts to quiesce requests & asssets failed";
    goto LABEL_11;
  }
  ++*(void *)(v0 + 48);
  *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 24) + *(void *)(v0 + 32));
  swift_retain();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_100058024(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10004D2F0;
  return sub_1001047E4();
}

uint64_t sub_10004D76C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004C9E0();
}

uint64_t sub_10004D814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C818 + dword_10015C818);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10004D8E4(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C140, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.PrewarmSession);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004D93C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C148, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004D994()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B9A0);
  v1[6] = v4;
  sub_10002FA4C(v4);
  v1[7] = v5;
  v1[8] = sub_100057A60();
  v1[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ModelXPCRequest.CancelSessionRequest();
  v1[10] = v6;
  sub_10002FA4C(v6);
  v1[11] = v7;
  v1[12] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v8, v9, v10);
}

#error "10004DB84: call analysis failed (funcsize=123)"

uint64_t sub_10004DC70()
{
  sub_100030014();
  sub_10000F01C();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  sub_100057B34();
  v7();
  swift_release();
  sub_1000579A4();
  sub_10002FE64();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10004DDBC()
{
  sub_1000086EC();
  ModelXPCRequest.CancelSessionRequest.Response.init()();
  sub_100003A70(&qword_10015C810);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_10004DE5C()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10004DECC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004D994();
}

uint64_t sub_10004DF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C7F8 + dword_10015C7F8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10004E044(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C160, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelSessionRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004E09C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C168, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004E0F4()
{
  sub_1000086E0();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  v1[4] = v5;
  uint64_t v6 = sub_100003A70(&qword_10015B9A0);
  v1[9] = v6;
  sub_10002FA4C(v6);
  v1[10] = v7;
  v1[11] = sub_10002FE18();
  uint64_t v8 = type metadata accessor for RequestMetadata();
  v1[12] = v8;
  sub_10002FA4C(v8);
  v1[13] = v9;
  v1[14] = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  v1[15] = v10;
  sub_10002FA4C(v10);
  v1[16] = v11;
  v1[17] = sub_10002FE18();
  uint64_t v12 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  v1[18] = v12;
  sub_10002FA4C(v12);
  v1[19] = v13;
  v1[20] = sub_100057A60();
  v1[21] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10004E22C()
{
  uint64_t v35 = v0;
  int v33 = AuditToken.auditUserIdentifier.getter();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003B18(v3, (uint64_t)qword_10015C0C0);
  uint64_t v4 = *(void (**)(void))(v2 + 16);
  sub_100057C38();
  v4();
  sub_100057C38();
  v4();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v32 = v5;
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    os_log_type_t type = v1;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.id.getter();
    sub_100043924();
    v10();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v30);
    *(void *)(v0 + 16) = sub_10001DF20(v11, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043CF4();
    v14();
    *(_WORD *)(v9 + 12) = 2080;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.sessionID.getter();
    sub_10000EFBC();
    v15();
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v18 = v17;
    sub_10000EFBC();
    v19();
    uint64_t v20 = sub_10001DF20(v16, v18, &v34);
    sub_100057F78(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043CF4();
    v21();
    _os_log_impl((void *)&_mh_execute_header, v32, type, "Received request %s (Session: %s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v22 = *(void (**)(void))(*(void *)(v0 + 152) + 8);
    sub_100043CF4();
    v22();
    sub_100043CF4();
    v22();
  }
  uint64_t v23 = *(void *)(v0 + 64);
  uint64_t v24 = *(void *)(v0 + 32);
  uint64_t v25 = swift_task_alloc();
  *(void *)(v0 + 176) = v25;
  long long v26 = *(_OWORD *)(v0 + 48);
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  *(_DWORD *)(v25 + 32) = v33;
  *(_OWORD *)(v25 + 40) = v26;
  uint64_t v27 = swift_task_alloc();
  *(void *)(v0 + 184) = v27;
  *(void *)(v27 + 16) = v23;
  *(void *)(v27 + 24) = v24;
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10004E6A8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t sub_10004E6A8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004E7A8()
{
  sub_100030014();
  sub_10000F01C();
  sub_10004E840(*(void *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

void sub_10004E840(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B9A0);
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v44 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for RequestMetadata();
  uint64_t v43 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v5);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v48 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v38 - v18;
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003B18(v20, (uint64_t)qword_10015C0C0);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v19, a1, v12);
  v21(v48, a1, v12);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    int v40 = v24;
    uint64_t v26 = v25;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v50 = v41;
    *(_DWORD *)uint64_t v26 = 136315394;
    v38[0] = v26 + 4;
    os_log_t v39 = v22;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.id.getter();
    uint64_t v43 = *(void *)(v43 + 8);
    ((void (*)(char *, uint64_t))v43)(v7, v47);
    v38[1] = &protocol conformance descriptor for UUIDIdentifier<A>;
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v8);
    uint64_t v49 = sub_10001DF20(v27, v29, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v13 + 8);
    v30(v19, v12);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v42 = v26 + 14;
    uint64_t v31 = v48;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    uint64_t v32 = v44;
    RequestMetadata.sessionID.getter();
    ((void (*)(char *, uint64_t))v43)(v7, v47);
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v33 = v46;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v33);
    uint64_t v49 = sub_10001DF20(v34, v36, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v30(v31, v12);
    uint64_t v22 = v39;
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v40, "Finished request %s (Session: %s)", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v13 + 8);
    v37(v19, v12);
    v37(v48, v12);
  }
}

uint64_t sub_10004EDD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 144) = a5;
  *(void *)(v6 + 152) = a6;
  *(_DWORD *)(v6 + 408) = a4;
  *(void *)(v6 + 128) = a2;
  *(void *)(v6 + 136) = a3;
  uint64_t v7 = type metadata accessor for ModelManagerError();
  *(void *)(v6 + 160) = v7;
  *(void *)(v6 + 168) = *(void *)(v7 - 8);
  *(void *)(v6 + 176) = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  *(void *)(v6 + 184) = v8;
  *(void *)(v6 + 192) = *(void *)(v8 - 8);
  *(void *)(v6 + 200) = swift_task_alloc();
  sub_100003A70(&qword_10015B208);
  *(void *)(v6 + 208) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  *(void *)(v6 + 216) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 224) = v10;
  *(void *)(v6 + 232) = *(void *)(v10 + 64);
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  *(void *)(v6 + 256) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for RequestMetadata();
  *(void *)(v6 + 264) = v11;
  *(void *)(v6 + 272) = *(void *)(v11 - 8);
  *(void *)(v6 + 280) = swift_task_alloc();
  *(void *)(v6 + 288) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for TaskPriority();
  *(void *)(v6 + 296) = v12;
  *(void *)(v6 + 304) = *(void *)(v12 - 8);
  *(void *)(v6 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_10004F070, 0, 0);
}

uint64_t sub_10004F070()
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[19];
  uint64_t v14 = v0[29];
  uint64_t v15 = v0[18];
  uint64_t v5 = v0[17];
  v0[40] = *(void *)(*(void *)(v0[16] + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.ExecuteRequest.modelBundleID.getter();
  v0[41] = v6;
  ModelXPCRequest.ExecuteRequest.taskPriority.getter();
  TaskPriority.init(rawValue:)();
  ModelXPCRequest.ExecuteRequest.metadata.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[42] = v7;
  v0[43] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v5, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v9 = swift_allocObject();
  v0[44] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + v8, v1, v3);
  uint64_t v10 = (void *)(v9 + ((v14 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v10 = v15;
  v10[1] = v4;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[45] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10004F228;
  sub_10002FE48();
  return sub_10003EDA4();
}

uint64_t sub_10004F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  sub_100008660();
  uint64_t v17 = v16;
  sub_10000ED94();
  *uint64_t v18 = v17;
  uint64_t v41 = *(void *)(v19 + 312);
  sub_100057CE8();
  uint64_t v40 = *(void *)(v20 + 296);
  sub_100057CE8();
  uint64_t v22 = *(void *)(v21 + 272);
  uint64_t v23 = *v15;
  sub_1000086D0();
  *int v24 = v23;
  v17[46] = v14;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v17[47] = *(void *)(v22 + 8);
  v17[48] = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100057FE4();
  v25();
  sub_100043FA8();
  v26();
  if (v14)
  {
    sub_1000579A4();
    sub_10002FE48();
    return _swift_task_switch(v27, v28, v29);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, v40, v41, a12, a13, a14);
  }
}

uint64_t sub_10004F484()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004F550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  swift_errorRelease();
  sub_100057E64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE94();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t sub_10004F5F4()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004F6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  swift_errorRelease();
  sub_100057E64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE94();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t sub_10004F764()
{
  v0[12] = v0[46];
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(v0[21] + 88))(v0[22], v0[20]) == enum case for ModelManagerError.inferenceError(_:))
    {
      uint64_t v1 = sub_100057FBC();
      v2(v1);
      uint64_t v3 = type metadata accessor for InferenceError();
      sub_100057B10();
      uint64_t v5 = v4;
      uint64_t v6 = sub_100057EB4();
      unsigned int v8 = v7(v6);
      if (v8 == enum case for InferenceError.assetVersionMismatch(_:))
      {
        unsigned int v55 = v8;
        uint64_t v9 = v0[16];
        uint64_t v10 = v0[37];
        uint64_t v11 = v0[26];
        swift_errorRelease();
        sub_100006960(v11, 1, 1, v10);
        uint64_t v12 = (void *)swift_allocObject();
        v12[2] = 0;
        void v12[3] = 0;
        v12[4] = v9;
        swift_retain();
        sub_100003730(v11, (uint64_t)&unk_10015C7B8, (uint64_t)v12);
        swift_release();
        if (qword_10015B098 != -1) {
          swift_once();
        }
        uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
        uint64_t v14 = v0[31];
        uint64_t v15 = v0[27];
        uint64_t v16 = v0[17];
        uint64_t v17 = type metadata accessor for Logger();
        sub_100003B18(v17, (uint64_t)qword_10015C0C0);
        v13(v14, v16, v15);
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v50 = (void (*)(uint64_t, uint64_t))v0[47];
          os_log_type_t type = v19;
          uint64_t v20 = v0[35];
          uint64_t v49 = v0[33];
          uint64_t v21 = (uint8_t *)sub_100030314();
          sub_10002FF90();
          *(_DWORD *)uint64_t v21 = 136315138;
          ModelXPCRequest.ExecuteRequest.metadata.getter();
          RequestMetadata.id.getter();
          v50(v20, v49);
          sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
          dispatch thunk of CustomStringConvertible.description.getter();
          sub_100043CF4();
          v22();
          v0[15] = sub_100057E98();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000EFBC();
          v23();
          _os_log_impl((void *)&_mh_execute_header, v18, type, "Responding to request: %s with assetVersionMismatch", v21, 0xCu);
          swift_arrayDestroy();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {
          sub_10004381C();
          v45();
        }

        v0[10] = sub_100003A70(&qword_10015C500);
        v0[11] = sub_100056FA4(&qword_10015C508);
        sub_100057080(v0 + 7);
        sub_100057828((unint64_t *)&qword_10015C7C0, (void (*)(uint64_t))&type metadata accessor for InferenceError);
        sub_10004415C();
        (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v46, v55, v3);
        ModelManagerError.init(wrapping:)();
        swift_storeEnumTagMultiPayload();
        sub_100057874();
        char v57 = (uint64_t (*)(void))((char *)v47 + *v47);
        uint64_t v48 = (void *)swift_task_alloc();
        v0[49] = v48;
        *uint64_t v48 = v0;
        v48[1] = sub_10004F484;
        uint64_t v43 = v0 + 7;
        goto LABEL_16;
      }
      sub_100043AE0();
      v26();
    }
    else
    {
      uint64_t v24 = sub_100057B44();
      v25(v24);
    }
  }
  swift_errorRelease();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v27 = (void (*)(uint64_t, uint64_t, uint64_t))v0[42];
  uint64_t v28 = v0[30];
  uint64_t v29 = v0[27];
  uint64_t v30 = v0[17];
  uint64_t v31 = type metadata accessor for Logger();
  sub_100003B18(v31, (uint64_t)qword_10015C0C0);
  v27(v28, v30, v29);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v52 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v56 = v32;
    uint64_t v34 = v0[35];
    uint64_t v51 = v0[33];
    uint64_t v35 = swift_slowAlloc();
    os_log_t log = (os_log_t)sub_100057C20();
    sub_10002FF90();
    *(_DWORD *)uint64_t v35 = 136315394;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.id.getter();
    v52(v34, v51);
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100043FA8();
    v36();
    v0[13] = sub_100057E98();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v37();
    *(_WORD *)(v35 + 12) = 2112;
    swift_errorRetain();
    uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
    v0[14] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    log->isa = (Class)v38;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v33, "Responding to request: %s withError %@", (uint8_t *)v35, 0x16u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_10004381C();
    v39();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v40 = (int *)v0[18];
  v0[5] = sub_100003A70(&qword_10015C500);
  uint64_t v41 = sub_100056FA4(&qword_10015C508);
  sub_100057AC8(v41);
  swift_errorRetain();
  ModelManagerError.init(wrapping:)();
  swift_storeEnumTagMultiPayload();
  char v57 = (uint64_t (*)(void))((char *)v40 + *v40);
  uint64_t v42 = (void *)swift_task_alloc();
  v0[50] = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_10004F5F4;
  uint64_t v43 = v0 + 2;
LABEL_16:
  return v57(v43);
}

uint64_t sub_100050048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InferenceProviderRequestResult();
  v5[16] = v7;
  v5[17] = *(void *)(v7 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestMetadata();
  v5[19] = v8;
  v5[20] = *(void *)(v8 - 8);
  v5[21] = swift_task_alloc();
  uint64_t v9 = sub_100003A70(&qword_10015B408);
  v5[22] = v9;
  v5[23] = *(void *)(v9 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  v5[25] = v10;
  v5[26] = *(void *)(v10 - 8);
  v5[27] = swift_task_alloc();
  return _swift_task_switch(sub_100050284, 0, 0);
}

uint64_t sub_100050284()
{
  uint64_t v28 = v0;
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (sub_100057CB0(v6))
  {
    os_log_type_t type = v1;
    uint64_t v7 = (uint8_t *)sub_100030314();
    uint64_t v27 = sub_10002FF90();
    *(_DWORD *)uint64_t v7 = 136315138;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.id.getter();
    sub_100043CF4();
    v8();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v11 = v10;
    sub_100043FA8();
    v12();
    v0[7] = sub_10001DF20(v9, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043F00();
    v13();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Responding to request: %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v0[26] + 8))(v0[27], v0[25]);
  }

  uint64_t v15 = v0[17];
  uint64_t v14 = v0[18];
  uint64_t v17 = v0[15];
  uint64_t v16 = v0[16];
  uint64_t v18 = v0[14];
  uint64_t v23 = v0[13];
  uint64_t v24 = (int *)v0[11];
  uint64_t v20 = v0[8];
  uint64_t v19 = v0[9];
  v0[5] = sub_100003A70(&qword_10015C7C8);
  v0[6] = sub_100057644();
  sub_100057080(v0 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v20, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v19, v23);
  ModelXPCRequest.ExecuteRequest.Response.init(result:lockedInferenceProvider:)();
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = (uint64_t (*)(uint64_t *))((char *)v24 + *v24);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[28] = (uint64_t)v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100050610;
  return v25(v0 + 2);
}

uint64_t sub_100050610()
{
  sub_10000F01C();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  sub_100057CE8();
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100008130(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v6();
}

uint64_t sub_100050770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *os_log_type_t v6 = v4;
  v6[1] = sub_10000E1FC;
  return sub_10004D220(a4);
}

uint64_t sub_100050804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v8 - 8, v9);
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v14 + ((v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_retain();
  sub_100003730((uint64_t)v11, (uint64_t)&unk_10015C798, v14);
  return swift_release();
}

uint64_t sub_1000509C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = sub_100003A70(&qword_10015B9A0);
  v5[6] = v6;
  v5[7] = *(void *)(v6 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015B408);
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestMetadata();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  v5[18] = v9;
  v5[19] = *(void *)(v9 - 8);
  v5[20] = swift_task_alloc();
  return _swift_task_switch(sub_100050BC8, 0, 0);
}

uint64_t sub_100050BC8()
{
  uint64_t v24 = v0;
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = type metadata accessor for Logger();
  v0[21] = sub_100003B18(v5, (uint64_t)qword_10015C0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = sub_100044424(v7);
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[20];
  if (v8)
  {
    uint64_t v21 = v0[18];
    os_log_t log = v6;
    uint64_t v11 = (uint8_t *)sub_100030314();
    uint64_t v23 = sub_10002FF90();
    *(_DWORD *)uint64_t v11 = 136315138;
    ModelXPCRequest.ExecuteRequest.metadata.getter();
    RequestMetadata.id.getter();
    sub_100043924();
    v12();
    uint64_t v13 = UUIDIdentifier.uuidString.getter();
    unint64_t v15 = v14;
    sub_100043F00();
    v16();
    v0[3] = sub_10001DF20(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v21);
    uint64_t v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v4, "xpcdispatcher: Request TaskCancellation handler, id: %s.", v11, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[20], v0[18]);
  }

  uint64_t v17 = v0[14];
  v0[22] = *(void *)(*(void *)(v0[5] + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.ExecuteRequest.metadata.getter();
  RequestMetadata.id.getter();
  uint64_t v18 = *(void (**)(void))(v17 + 8);
  sub_100043AE0();
  v18();
  ModelXPCRequest.ExecuteRequest.metadata.getter();
  RequestMetadata.sessionID.getter();
  sub_100043F9C();
  sub_100043AE0();
  v18();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[23] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100050F04;
  sub_100044070(v0[11]);
  return sub_10003FFEC();
}

uint64_t sub_100050F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_100008660();
  uint64_t v15 = v14;
  sub_10000ED94();
  *uint64_t v16 = v15;
  uint64_t v17 = *v13;
  sub_1000086D0();
  *uint64_t v18 = v17;
  *(void *)(v15 + 192) = v12;
  swift_task_dealloc();
  swift_release();
  sub_100043AE0();
  v19();
  sub_100043F9C();
  sub_100043F00();
  v20();
  if (v12)
  {
    sub_1000579A4();
    sub_1000307C8();
    return _swift_task_switch(v21, v22, v23);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
}

uint64_t sub_100051108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (sub_100044424(v13))
  {
    uint64_t v14 = (uint8_t *)sub_100030314();
    uint64_t v15 = (void *)sub_100057C20();
    *(_DWORD *)uint64_t v14 = 138412290;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v10 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v11, "xpcdispatcher: Request TaskCancellation error %@", v14, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE94();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t sub_1000512C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015C7E8 + dword_10015C7E8);
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = sub_10000ED54;
  return v9(a1, a2, a3);
}

uint64_t sub_100051388()
{
  return 1;
}

uint64_t sub_100051390()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10004E0F4();
}

uint64_t sub_10005144C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C180, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000514A4(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C188, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000514FC()
{
  sub_1000086E0();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B9A0);
  v1[8] = v5;
  sub_10002FA4C(v5);
  v1[9] = v6;
  v1[10] = sub_100057A60();
  v1[11] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015B408);
  v1[12] = v7;
  sub_10002FA4C(v7);
  v1[13] = v8;
  v1[14] = sub_100057A60();
  v1[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ModelXPCRequest.CancelRequest();
  v1[16] = v9;
  sub_10002FA4C(v9);
  v1[17] = v10;
  v1[18] = sub_100057A60();
  v1[19] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_100051618()
{
  uint64_t v24 = v0;
  int v1 = AuditToken.processIdentifier.getter();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = type metadata accessor for Logger();
  os_log_type_t v4 = sub_100003B18(v3, (uint64_t)qword_10015C0C0);
  uint64_t v5 = *(void (**)(void))(v2 + 16);
  sub_100057C38();
  v5();
  sub_100057C38();
  v5();
  os_log_type_t v6 = v4;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (sub_100057CB0(v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315650;
    os_log_type_t type = v6;
    ModelXPCRequest.CancelRequest.id.getter();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100057FE4();
    v10();
    *(void *)(v0 + 16) = sub_100057E98();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043FA8();
    v11();
    *(_WORD *)(v9 + 12) = 2080;
    ModelXPCRequest.CancelRequest.sessionID.getter();
    sub_10000841C(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    sub_10000EFBC();
    v15();
    uint64_t v16 = sub_10001DF20(v12, v14, &v23);
    sub_100057F78(v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043FA8();
    v17();
    *(_WORD *)(v9 + 22) = 1024;
    *(_DWORD *)(v0 + 184) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "XPC Handling CancelRequest %s in client session %s from proceess %d", (uint8_t *)v9, 0x1Cu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v18 = *(void (**)(void))(*(void *)(v0 + 136) + 8);
    sub_100043FA8();
    v18();
    uint64_t v19 = sub_100043F9C();
    ((void (*)(uint64_t))v18)(v19);
  }

  *(void *)(v0 + 160) = *(void *)(*(void *)(*(void *)(v0 + 40) + 16)
                                    + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.CancelRequest.id.getter();
  ModelXPCRequest.CancelRequest.sessionID.getter();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100051A1C;
  return sub_10003FFEC();
}

uint64_t sub_100051A1C()
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  swift_release();
  sub_100043F00();
  v7();
  sub_100057FE4();
  v8();
  sub_1000579A4();
  sub_10002FE94();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_100051BBC()
{
  sub_10002FC60();
  ModelXPCRequest.CancelRequest.Response.init()();
  sub_100003A70(&qword_10015C770);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100051C88()
{
  sub_100030014();
  sub_10000F01C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100051D1C()
{
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *int v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_1000514FC();
}

uint64_t sub_100051DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C758 + dword_10015C758);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100051E9C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1A0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.CancelRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100051EF4(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1A8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100051F4C()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for Assertion.DaemonRep();
  v1[6] = v5;
  sub_10002FA4C(v5);
  v1[7] = v6;
  v1[8] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for AuditToken();
  v1[9] = v7;
  sub_10002FA4C(v7);
  v1[10] = v8;
  v1[11] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10005200C()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100057FA4();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v7 = (float *)sub_100057BA8();
    sub_100057C4C(v7, 1.5047e-36);
    uint64_t v8 = sub_100057A2C();
    v9(v8);
    *(_DWORD *)(v0 + 120) = v1;
    sub_100057A48();
    sub_100057B6C((void *)&_mh_execute_header, v10, v11, "XPC Handling acquireAssertion for pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v12 = sub_100057B58();
    v13(v12);
  }

  sub_100057D90();
  ModelXPCRequest.AcquireRequest.assertion.getter();
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_100057F04(v14);
  *uint64_t v15 = v16;
  v15[1] = sub_100052178;
  sub_100057D70(*(void *)(v0 + 64));
  sub_1000307C8();
  return sub_1000D859C();
}

uint64_t sub_100052178()
{
  sub_100030014();
  sub_10000F01C();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  sub_100057B34();
  v7();
  swift_release();
  sub_1000579A4();
  sub_10002FE64();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000522C4()
{
  sub_1000086EC();
  sub_100057FF0();
  ModelXPCRequest.AcquireRequest.Response.init()();
  sub_100003A70(&qword_10015C750);
  sub_100057BE8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100052344()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000523B4()
{
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *int v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100051F4C();
}

uint64_t sub_100052464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C738 + dword_10015C738);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100052534(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1C0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.AcquireRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10005258C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1C8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000525E4()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B228);
  v1[6] = v5;
  sub_10002FA4C(v5);
  v1[7] = v6;
  v1[8] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for AuditToken();
  v1[9] = v7;
  sub_10002FA4C(v7);
  v1[10] = v8;
  v1[11] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000526A8()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100057FA4();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v7 = (float *)sub_100057BA8();
    sub_100057C4C(v7, 1.5047e-36);
    uint64_t v8 = sub_100057A2C();
    v9(v8);
    *(_DWORD *)(v0 + 112) = v1;
    sub_100057A48();
    sub_100057B6C((void *)&_mh_execute_header, v10, v11, "XPC Handling releaseAssertion for pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v12 = sub_100057B58();
    v13(v12);
  }

  sub_100057D90();
  ModelXPCRequest.ReleaseRequest.id.getter();
  sub_1000307C8();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_1000527E4()
{
  sub_1000086E0();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100057F04(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_100052874;
  sub_100044070(*(void *)(v0 + 64));
  return sub_100010658();
}

uint64_t sub_100052874()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100043924();
  v3();
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000529B0()
{
  sub_1000086EC();
  sub_100057FF0();
  ModelXPCRequest.ReleaseRequest.Response.init()();
  sub_100003A70(&qword_10015C730);
  sub_100057BE8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100052A30()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_1000525E4();
}

uint64_t sub_100052AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C718 + dword_10015C718);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100052BB0(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1E0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ReleaseRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100052C08(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C1E8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100052C60()
{
  sub_1000086E0();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = type metadata accessor for AuditToken();
  v0[5] = v4;
  sub_10002FA4C(v4);
  v0[6] = v5;
  v0[7] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100052CF0()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v7 = (float *)sub_100057BA8();
    sub_100057C4C(v7, 1.5047e-36);
    uint64_t v8 = sub_100057A2C();
    v9(v8);
    *(_DWORD *)(v0 + 88) = v1;
    sub_100057A48();
    sub_100057B6C((void *)&_mh_execute_header, v10, v11, "XPC Handling fetchAssertions for pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v12 = sub_100057B58();
    v13(v12);
  }

  sub_100057F98();
  *(void *)(v0 + 64) = *(void *)(v14 + 16);
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100052E68;
  sub_1000307C8();
  return sub_1000D8C88();
}

uint64_t sub_100052E68()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *(void *)(v6 + 80) = v5;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100052F50()
{
  sub_1000086E0();
  ModelXPCRequest.FetchAssertionsRequest.Response.init(assertions:)();
  sub_100003A70(&qword_10015C710);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100052FD8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100052C60();
}

uint64_t sub_100053088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C6F8 + dword_10015C6F8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100053158(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C200, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssertionsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000531B0(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C208, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100053208()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for AuditToken();
  v1[6] = v5;
  sub_10002FA4C(v5);
  v1[7] = v6;
  v1[8] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100053298()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100057FA4();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v7 = (float *)sub_100057BA8();
    sub_100057C4C(v7, 1.5047e-36);
    uint64_t v8 = sub_100057A2C();
    v9(v8);
    *(_DWORD *)(v0 + 96) = v1;
    sub_100057A48();
    sub_100057B6C((void *)&_mh_execute_header, v10, v11, "XPC Handling restoreAssertions for pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v12 = sub_100057B58();
    v13(v12);
  }

  sub_100057F98();
  *(void *)(v0 + 72) = *(void *)(v14 + 16);
  swift_retain();
  *(void *)(v0 + 80) = ModelXPCRequest.RestoreAssertionsRequest.assertions.getter();
  sub_1000307C8();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_1000533E8()
{
  sub_1000086E0();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100057A7C(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_100053478;
  uint64_t v4 = sub_100044070(*(void *)(v0 + 80));
  return sub_100015BE4(v4);
}

uint64_t sub_100053478()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100053578()
{
  sub_1000086E0();
  ModelXPCRequest.RestoreAssertionsRequest.Response.init()();
  sub_100003A70(&qword_10015C6F0);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000535FC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100053208();
}

uint64_t sub_1000536AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C6D8 + dword_10015C6D8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10005377C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C220, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000537D4(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C228, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10005382C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return sub_100057A20((uint64_t)sub_100053844);
}

uint64_t sub_100053844()
{
  sub_1000086E0();
  *(void *)(v0 + 40) = *(void *)(*(void *)(*(void *)(v0 + 32) + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  swift_retain();
  uint64_t v1 = sub_100057D80();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000538BC()
{
  sub_10000F01C();
  sub_100075A50();
  swift_retain();
  *(void *)(v0 + 48) = sub_100058030();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100053954()
{
  sub_1000086E0();
  ModelXPCRequest.FetchAssetsRequest.Response.init(assetInfo:)();
  sub_100003A70(&qword_10015C6D0);
  sub_100057D54();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000539C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000ED54;
  return sub_10005382C(a1, a2);
}

uint64_t sub_100053A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C6B8 + dword_10015C6B8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100053B38(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C240, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchAssetsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100053B90(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C248, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100053BE8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return sub_100057A20((uint64_t)sub_100053C00);
}

uint64_t sub_100053C00()
{
  sub_1000086E0();
  *(void *)(v0 + 40) = *(void *)(*(void *)(*(void *)(v0 + 32) + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_assetManager);
  swift_retain();
  uint64_t v1 = sub_100057D80();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100053C78()
{
  sub_10000F01C();
  sub_100075D10();
  swift_retain();
  *(void *)(v0 + 48) = sub_100058030();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100053D10()
{
  sub_1000086E0();
  ModelXPCRequest.FetchDynamicAssetsRequest.Response.init(assetInfo:)();
  sub_100003A70(&qword_10015C6A8);
  sub_100057D54();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100053D80(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000ED54;
  return sub_100053BE8(a1, a2);
}

uint64_t sub_100053E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C690 + dword_10015C690);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100053EF0(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C260, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100053F48(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C268, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100053FA0()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  v1[2] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B728);
  sub_10002FDD0(v5);
  v1[3] = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  v1[4] = v6;
  swift_task_alloc();
  sub_100057E8C();
  v1[5] = v7;
  *uint64_t v7 = v8;
  v7[1] = sub_100054084;
  return sub_1000541F4(v6, v0, v3);
}

uint64_t sub_100054084()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005414C()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10002E894(v1, *(void *)(v0 + 24));
  ModelXPCRequest.FetchPolicyRequest.Response.init(policy:)();
  sub_10002EB50(v1, &qword_10015B728);
  sub_100003A70(&qword_10015C688);
  sub_100057BE8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v2();
}

uint64_t sub_1000541F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(sub_100054218, 0, 0);
}

uint64_t sub_100054218()
{
  sub_1000086E0();
  uint64_t Policy = ModelXPCRequest.FetchPolicyRequest.policyName.getter();
  v0[8] = v2;
  uint64_t v3 = v0[7];
  if (v2)
  {
    v0[9] = Policy;
    v0[10] = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }
  else
  {
    v0[12] = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_policyManager);
  }
  swift_retain();
  uint64_t v4 = sub_100057D80();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000542C8()
{
  sub_1000086E0();
  *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 80) + 296);
  swift_bridgeObjectRetain();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100054338()
{
  sub_1000086E0();
  sub_1000142D8(v0[9], v0[8], v0[11]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_1000543B0()
{
  sub_1000086EC();
  swift_beginAccess();
  *(void *)(v0 + 104) = type metadata accessor for Policy();
  sub_10002FB84();
  uint64_t v1 = sub_100044468();
  v2(v1);
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100054478()
{
  sub_1000086E0();
  sub_100006960(*(void *)(v0 + 40), 0, 1, *(void *)(v0 + 104));
  sub_10000EF7C();
  return v1();
}

uint64_t sub_1000544DC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100053FA0();
}

uint64_t sub_100054584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C668 + dword_10015C668);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100054654(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C280, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchPolicyRequest);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000546AC()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor();
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

#error "1000547C8: call analysis failed (funcsize=92)"

uint64_t sub_1000548B0()
{
  sub_1000086EC();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100054A08()
{
  sub_1000086EC();
  ModelXPCRequest.LoadAssetBundle.Response.init()();
  sub_100043924();
  v0();
  sub_100003A70(&qword_10015C660);
  sub_100057BE8();
  swift_task_dealloc();
  sub_1000304E0();
  return v1();
}

uint64_t sub_100054AA0()
{
  sub_1000086E0();
  sub_10004381C();
  v0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

unint64_t sub_100054B10()
{
  return 0xD000000000000021;
}

uint64_t sub_100054B2C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_1000546AC();
}

uint64_t sub_100054BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C648 + dword_10015C648);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100054CA4(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C298, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.LoadAssetBundle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100054CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100057A20((uint64_t)sub_100054D18);
}

uint64_t sub_100054D18()
{
  sub_1000086EC();
  sub_100057F98();
  *(void *)(v0 + 48) = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.HoldAssetBundle.assetBundleIdentifier.getter();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100058024(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_100054DE0;
  sub_100057ECC();
  return sub_10004179C();
}

uint64_t sub_100054DE0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100054ECC()
{
  sub_1000086E0();
  ModelXPCRequest.HoldAssetBundle.Response.init()();
  sub_100003A70(&qword_10015C640);
  sub_100057D54();
  sub_1000304E0();
  return v0();
}

uint64_t sub_100054F38()
{
  sub_1000086E0();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100054F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000ED54;
  return sub_100054CFC(a1, a2, a3);
}

uint64_t sub_10005504C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C628 + dword_10015C628);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10005511C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C2B0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.HoldAssetBundle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100055174()
{
  sub_1000086E0();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = type metadata accessor for AuditToken();
  v0[5] = v4;
  sub_10002FA4C(v4);
  v0[6] = v5;
  v0[7] = sub_10002FE18();
  sub_1000579A4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100055204()
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100057974(v2, (uint64_t)qword_10015C0C0);
  v4(v3);
  uint64_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v6))
  {
    uint64_t v7 = (float *)sub_100057BA8();
    sub_100057C4C(v7, 1.5047e-36);
    uint64_t v8 = sub_100057A2C();
    v9(v8);
    *(_DWORD *)(v0 + 72) = v1;
    sub_100057A48();
    sub_100057B6C((void *)&_mh_execute_header, v10, v11, "XPC Handling forceAssetVersionSwitch for pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v12 = sub_100057B58();
    v13(v12);
  }

  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_100058024(v14);
  *uint64_t v15 = v16;
  v15[1] = sub_100055364;
  sub_100044070(*(void *)(v0 + 24));
  sub_1000307C8();
  return sub_10004D220(v17);
}

uint64_t sub_100055364()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 76) = v3;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100055434()
{
  sub_1000086EC();
  if (*(unsigned char *)(v0 + 76) == 1)
  {
    ModelXPCRequest.ForceAssetVersionSwitch.Response.init()();
  }
  else
  {
    type metadata accessor for ModelManagerError();
    sub_100057828((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    sub_10002FC6C();
    sub_100043E9C();
    v1();
    ModelManagerError.init(wrapping:)();
  }
  sub_100003A70(&qword_10015C620);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  sub_1000304E0();
  return v2();
}

unint64_t sub_10005556C()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100055588()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100055174();
}

uint64_t sub_100055638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C600 + dword_10015C600);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100055708(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C2C8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100055760()
{
  sub_1000086E0();
  v0[9] = v1;
  v0[10] = v2;
  uint64_t v3 = type metadata accessor for StateDump();
  v0[11] = v3;
  sub_10002FA4C(v3);
  v0[12] = v4;
  v0[13] = sub_100057A60();
  v0[14] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000557F8()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_stateDumpManager;
  long long v3 = *(_OWORD *)(v1 + 16);
  long long v2 = *(_OWORD *)(v1 + 32);
  long long v4 = *(_OWORD *)v1;
  *(void *)(v0 + 64) = *(void *)(v1 + 48);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 16) = v4;
  sub_10000821C(v0 + 16);
  swift_task_alloc();
  sub_100057E8C();
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_1000558BC;
  return sub_1000DE340();
}

uint64_t sub_1000558BC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *long long v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_10000829C(v3 + 16);
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000559A0()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = sub_100057E48();
  v1(v0);
  ModelXPCRequest.DumpState.Response.init(stateDump:)();
  uint64_t v2 = sub_100057ECC();
  v3(v2);
  sub_100003A70(&qword_10015C5F8);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE64();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100055A5C()
{
  sub_1000086E0();
  sub_10000829C(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

unint64_t sub_100055ACC()
{
  return 0xD000000000000020;
}

uint64_t sub_100055AE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100055760();
}

uint64_t sub_100055B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C5E0 + dword_10015C5E0);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100055C58(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C2E0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.DumpState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100055CB0()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B9A0);
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for ModelInstance();
  v1[8] = v6;
  sub_10002FA4C(v6);
  v1[9] = v7;
  v1[10] = sub_100057A60();
  v1[11] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100055D80()
{
  sub_1000086EC();
  v0[12] = *(void *)(*(void *)(v0[3] + 16) + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_sessionManager);
  swift_retain();
  ModelXPCRequest.FetchModelInstance.session.getter();
  swift_task_alloc();
  sub_100057E8C();
  v0[13] = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_100055E48;
  return sub_1000415B8();
}

uint64_t sub_100055E48()
{
  sub_100030014();
  sub_10000F01C();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  sub_100057B34();
  v7();
  swift_release();
  sub_1000579A4();
  sub_10002FE64();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100055F94()
{
  sub_10000F01C();
  uint64_t v0 = sub_100057E48();
  v1(v0);
  ModelXPCRequest.FetchModelInstance.Response.init(modelInstance:)();
  sub_100057ECC();
  sub_100043CF4();
  v2();
  sub_100003A70(&qword_10015C5D8);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v3();
}

uint64_t sub_100056060()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000560D4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000E1FC;
  return sub_100055CB0();
}

uint64_t sub_10005617C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C5C0 + dword_10015C5C0);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10005624C(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C2F8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.FetchModelInstance);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000562A4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100057A20((uint64_t)sub_1000562BC);
}

uint64_t sub_1000562BC()
{
  sub_1000086E0();
  sub_100057F98();
  sub_10000853C((void *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog), *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_modelCatalog + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100056360;
  return sub_1000F25D4();
}

uint64_t sub_100056360()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100056428()
{
  sub_1000086E0();
  ModelXPCRequest.SetAssetsHaveUpdated.Response.init()();
  sub_100003A70(&qword_10015C5B8);
  sub_100057D54();
  sub_1000304E0();
  return v0();
}

unint64_t sub_100056494()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000564B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000ED54;
  return sub_1000562A4(a1, a2);
}

uint64_t sub_100056550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C5A0 + dword_10015C5A0);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100056620(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C310, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100056678()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for AuditToken();
  v1[6] = v5;
  sub_10002FA4C(v5);
  v1[7] = v6;
  v1[8] = sub_100057A60();
  v1[9] = swift_task_alloc();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100056714()
{
  if (qword_10015B098 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = sub_100057FA4();
  sub_100003B18(v5, (uint64_t)qword_10015C0C0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v0, v3);
  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (sub_100057B8C(v8))
  {
    *(_DWORD *)sub_100057C20() = 67109120;
    AuditToken.processIdentifier.getter();
    uint64_t v9 = sub_100057A2C();
    v10(v9);
    *(_DWORD *)(v1 + 96) = 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100057B6C((void *)&_mh_execute_header, v11, v12, "Adding inference monitor client from pid %d");
    sub_10000ED7C();
  }
  else
  {
    uint64_t v13 = sub_100057B58();
    v14(v13);
  }

  uint64_t v15 = *(void *)(v1 + 64);
  uint64_t v16 = *(void *)(v1 + 48);
  uint64_t v17 = *(void *)(v1 + 32);
  uint64_t v18 = type metadata accessor for XPCEndpoint();
  sub_10002FDD0(v18);
  sub_10002FE18();
  ModelXPCRequest.StartMonitoringInferences.endpoint.getter();
  v6(v15, v17, v16);
  uint64_t v19 = sub_100044468();
  uint64_t v21 = sub_1000E878C(v19, v20);
  uint64_t v22 = *(void *)(v1 + 24);
  *(_DWORD *)(v1 + 100) = v23;
  *(void *)(v1 + 80) = v21;
  swift_task_dealloc();
  *(void *)(v1 + 88) = *(void *)(*(void *)(v22 + 16)
                                   + OBJC_IVAR____TtC13modelmanagerd18ModelXPCDispatcher_requestManager);
  swift_retain();
  sub_100057D80();
  sub_100043638();
  return _swift_task_switch(v24, v25, v26);
}

uint64_t sub_100056998()
{
  sub_1000086E0();
  sub_10011321C(*(void *)(v0 + 80), *(_DWORD *)(v0 + 100));
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100056A04()
{
  sub_1000086EC();
  swift_release();
  ModelXPCRequest.StartMonitoringInferences.Response.init()();
  sub_100003A70(&qword_10015C598);
  sub_100057BE8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

unint64_t sub_100056A98()
{
  return 0xD000000000000027;
}

uint64_t sub_100056AB4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100056678();
}

uint64_t sub_100056B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10015C580 + dword_10015C580);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000ED54;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100056C34(uint64_t a1)
{
  uint64_t result = sub_100057828(&qword_10015C328, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.StartMonitoringInferences);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ModelXPCMessageHandler()
{
  return self;
}

uint64_t sub_100056CB0()
{
  return type metadata accessor for ModelXPCDispatcher();
}

uint64_t type metadata accessor for ModelXPCDispatcher()
{
  uint64_t result = qword_10015C408;
  if (!qword_10015C408) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100056D00()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100056DC0()
{
  return sub_100057828(qword_10015C4D8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest);
}

unint64_t sub_100056E08()
{
  unint64_t result = qword_10015C528;
  if (!qword_10015C528)
  {
    type metadata accessor for XPCRichError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015C528);
  }
  return result;
}

uint64_t sub_100056E4C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100056E84()
{
  sub_1000086EC();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  uint64_t v2 = sub_100044468();
  return v3(v2);
}

void sub_100056F30(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_100044CFC(*(void *)(v2 + 16), *(void *)(v2 + 24), *a1);
  *a2 = v4 & 1;
}

uint64_t sub_100056F70()
{
  return sub_100049BD4();
}

_DWORD *sub_100056F8C(_DWORD *result)
{
  if (!*result) {
    void *result = *(_DWORD *)(v1 + 16);
  }
  return result;
}

uint64_t sub_100056FA4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(&qword_10015C500);
    sub_100057828(&qword_10015C510, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100057828(&qword_10015C518, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100057ECC();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100057080(uint64_t *a1)
{
  sub_100057B10();
  if ((*(unsigned char *)(v2 + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v3;
  }
  return a1;
}

uint64_t sub_1000570C0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100057114(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000578CC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100057170(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_1000571C4()
{
  sub_10000F01C();
  int v1 = *(_DWORD *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000086AC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10000E1FC;
  uint64_t v7 = sub_100057FD0();
  return sub_10004EDD0(v7, v8, v9, v1, v3, v2);
}

uint64_t sub_100057274()
{
  return sub_100050804(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005727C()
{
  type metadata accessor for ModelXPCRequest.ExecuteRequest();
  sub_10000ED60();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = ((*(void *)(v4 + 64) + ((v5 + 32) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  sub_100043924();
  v8();
  swift_release();

  return _swift_deallocObject(v0, v7, v6);
}

uint64_t sub_100057338()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  sub_10002FA4C(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000ED54;
  sub_100057FD0();
  sub_10002FE64();
  return sub_1000509C0(v4, v5, v6, v7, v8);
}

uint64_t sub_100057418()
{
  type metadata accessor for ModelXPCRequest.ExecuteRequest();
  sub_10002FB84();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = ((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_10000EFBC();
  v5();
  swift_release();

  return _swift_deallocObject(v0, v4, v3);
}

uint64_t sub_1000574B4()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = type metadata accessor for ModelXPCRequest.ExecuteRequest();
  sub_10002FA4C(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10000ED54;
  sub_10002FE64();
  return sub_100050048(v3, v4, v5, v6, v7);
}

uint64_t sub_1000575AC()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_100050770(v3, v4, v5, v6);
}

unint64_t sub_100057644()
{
  unint64_t result = qword_10015C7D0;
  if (!qword_10015C7D0)
  {
    sub_100006A5C(&qword_10015C7C8);
    sub_100057828(&qword_10015C7D8, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100057828(&qword_10015C7E0, (void (*)(uint64_t))&type metadata accessor for ModelXPCRequest.ExecuteRequest.Response);
    sub_100057828(&qword_10015C510, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100057828(&qword_10015C518, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015C7D0);
  }
  return result;
}

uint64_t sub_100057790()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_10004D18C(v3, v4, v5, v6);
}

uint64_t sub_100057828(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100057884(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000578A8()
{
  return swift_slowAlloc();
}

void sub_1000578E0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_100057938()
{
  return v0;
}

uint64_t sub_10005794C()
{
  return v0;
}

uint64_t sub_100057960(float a1)
{
  *uint64_t v1 = a1;
  return 0;
}

uint64_t sub_100057974(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return v2;
}

BOOL sub_1000579B0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000579CC()
{
  return swift_slowAlloc();
}

uint64_t sub_1000579E8()
{
  return swift_arrayDestroy();
}

uint64_t sub_100057A04()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100057A20(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_100057A2C()
{
  return v0;
}

uint64_t sub_100057A48()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100057A60()
{
  return swift_task_alloc();
}

uint64_t sub_100057A7C(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t sub_100057A88(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_100057AB0()
{
  return String.init<A>(describing:)();
}

uint64_t *sub_100057AC8(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return sub_100057080(v2);
}

uint64_t sub_100057AE0(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_100057AF8(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return sub_10001DF20(a1, a2, (uint64_t *)va);
}

uint64_t sub_100057B44()
{
  return v0;
}

uint64_t sub_100057B58()
{
  return v0;
}

void sub_100057B6C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

BOOL sub_100057B8C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100057BA8()
{
  return swift_slowAlloc();
}

uint64_t sub_100057BC8()
{
  return v0;
}

uint64_t sub_100057BE8()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_100057C04(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100057C20()
{
  return swift_slowAlloc();
}

uint64_t sub_100057C4C(float *a1, float a2)
{
  *a1 = a2;
  return AuditToken.processIdentifier.getter();
}

uint64_t sub_100057C68()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void sub_100057C8C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, os_log_t log, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v15, 0xCu);
}

BOOL sub_100057CB0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100057CF4(float a1)
{
  *uint64_t v2 = a1;
  *(_DWORD *)(v3 - 136) = v1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100057D34()
{
  return swift_allocError();
}

uint64_t sub_100057D54()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100057D70@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100057D80()
{
  return v0;
}

uint64_t sub_100057D90()
{
  *(void *)(v0 + 96) = *(void *)(*(void *)(*(void *)(v0 + 24) + 16) + 16);
  return swift_retain();
}

void sub_100057DBC()
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  os_log_type_t v6 = sub_10000853C(v0, v4);
  sub_1000486D0((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_100057E00()
{
  return swift_arrayDestroy();
}

uint64_t sub_100057E20(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100057E48()
{
  return v0;
}

uint64_t sub_100057E64()
{
  return swift_task_dealloc();
}

uint64_t sub_100057E98()
{
  return sub_10001DF20(v1, v0, (uint64_t *)(v2 - 80));
}

uint64_t sub_100057EB4()
{
  return v0;
}

uint64_t sub_100057ECC()
{
  return v0;
}

uint64_t sub_100057ED8()
{
  return v0;
}

uint64_t sub_100057EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return sub_10001DF20(v6, v7, (uint64_t *)va);
}

uint64_t sub_100057F04(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t sub_100057F38()
{
  *(_WORD *)(v0 + 8) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100057F58(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100057F78(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

float *sub_100057F84(float *result, float a2)
{
  void *result = a2;
  return result;
}

uint64_t sub_100057FA4()
{
  return type metadata accessor for Logger();
}

uint64_t sub_100057FBC()
{
  return v0;
}

uint64_t sub_100057FD0()
{
  return v0;
}

uint64_t sub_100058004()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_100058024(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

void *sub_100058030()
{
  return sub_100044818(v1, v0);
}

uint64_t sub_10005805C()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000580EC;
  return sub_1000D16A0();
}

uint64_t sub_1000580EC()
{
  sub_1000086E0();
  sub_100008660();
  v3[3] = v1;
  v3[4] = v2;
  v3[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10000EF7C();
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1000581F8, 0, 0);
  }
}

uint64_t sub_1000581F8()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = sub_10005A1D4();
  uint64_t v4 = v3;
  uint64_t v5 = v0[3];
  unint64_t v6 = v0[4];
  if (v1)
  {
    sub_10005A3FC(v5, v6);
    sub_10000EF7C();
    return v7();
  }
  else
  {
    sub_10005A3FC(v5, v6);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v9(v2, v4);
  }
}

uint64_t sub_1000582BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100058350;
  return sub_1000D16A0();
}

uint64_t sub_100058350()
{
  sub_10000F01C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_100008660();
  unint64_t v7 = v6;
  uint64_t v8 = *v1;
  sub_1000086D0();
  *uint64_t v9 = v8;
  v7[3] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(v8 + 8);
    return v10();
  }
  else
  {
    v7[4] = v3;
    v7[5] = v5;
    return _swift_task_switch(sub_100058480, 0, 0);
  }
}

uint64_t sub_100058480()
{
  sub_10000F01C();
  unint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_10005A270();
  uint64_t v5 = sub_10005A3FC(v1, v2);
  unint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  if (!v3) {
    uint64_t v5 = v4;
  }
  return v6(v5);
}

uint64_t sub_10005851C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015C8C0);
  sub_100003B18(v0, (uint64_t)qword_10015C8C0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

BOOL sub_100058588(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100152D30, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL sub_1000585E4@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100058588(*a1);
  *a2 = result;
  return result;
}

void sub_10005861C(void *a1@<X8>)
{
  *a1 = 0x64656C6261736964;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_100058638()
{
  return 0x64656C6261736964;
}

uint64_t sub_100058650@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_1000585D0(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_100058680()
{
  return 0;
}

void sub_10005868C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100058698(uint64_t a1)
{
  unint64_t v2 = sub_10005A5EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000586D4(uint64_t a1)
{
  unint64_t v2 = sub_10005A5EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100058710(void *a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015CA28);
  sub_10000ED60();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000853C(a1, a1[3]);
  sub_10005A5EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100008130((uint64_t)a1);
  }
  else
  {
    sub_100003A70(&qword_10015CA38);
    sub_10005A638();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
    uint64_t v10 = (void *)v12[1];
    sub_100008130((uint64_t)a1);
  }
  return v10;
}

void sub_100058860()
{
}

Swift::Int sub_100058888()
{
  return Hasher._finalize()();
}

void *sub_1000588CC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100058710(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

Swift::Int sub_100058900()
{
  return Hasher._finalize()();
}

uint64_t sub_100058950()
{
  sub_1000086E0();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000589DC;
  return sub_100058DF4();
}

uint64_t sub_1000589DC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100058ABC, v2, 0);
}

uint64_t sub_100058ABC()
{
  sub_10000F01C();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10000853C((void *)(v1 + 152), *(void *)(v1 + 176));
  swift_retain();
  sub_1000F1D7C((uint64_t)&unk_10015CA08, v1);
  swift_release();
  sub_10000EF7C();
  return v2();
}

uint64_t sub_100058BF4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100058C14, 0, 0);
}

uint64_t sub_100058C14()
{
  if (qword_10015B0A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015C8C0);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    *(_WORD *)sub_10005A928() = 0;
    sub_10005A960((void *)&_mh_execute_header, v4, v5, "Disabled use case asset has updated");
    sub_10000ED7C();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100058D34;
  return sub_100058DF4();
}

uint64_t sub_100058D34()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_100058DF4()
{
  sub_1000086E0();
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for FilePath();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_100058EC0, v0, 0);
}

uint64_t sub_100058EC0()
{
  uint64_t v18 = v0;
  uint64_t v1 = (void (*)(uint64_t))(v0 + 6);
  sub_1000599E4(v0[10]);
  if (qword_10015B0A0 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = type metadata accessor for Logger();
  v0[11] = sub_100003B18(v6, (uint64_t)qword_10015C8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_10005A8E4();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_10005A3B4(&qword_10015BA50, (void (*)(uint64_t))&type metadata accessor for FilePath);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_10001DF20(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_10005A900();
    v1(v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Loading disabled use case asset plist: %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v13 = sub_10005A900();
    v1(v13);
  }

  v0[12] = v1;
  sub_10000853C((void *)(v0[6] + 112), *(void *)(v0[6] + 136));
  uint64_t v16 = (uint64_t (__cdecl *)())((char *)&dword_10015C9F0 + dword_10015C9F0);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[13] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1000593CC;
  return v16();
}

uint64_t sub_1000593CC()
{
  sub_10000F01C();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 48);
  if (v0)
  {
    os_log_type_t v8 = sub_100059728;
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    os_log_type_t v8 = sub_1000594FC;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1000594FC()
{
  uint64_t v17 = v0;
  *(void *)(v0[6] + 192) = v0[15];
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_100044424(v3))
  {
    uint64_t v14 = v0[10];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v13 = v0[7];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[4] = sub_10001DF20(v5, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v1, "Updated disabled use case identifiers to: %s", v4, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    v15(v14, v13);
  }
  else
  {
    os_log_type_t v8 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[7];

    swift_release_n();
    v8(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v11();
}

uint64_t sub_100059728()
{
  (*(void (**)(void, void))(v0 + 96))(*(void *)(v0 + 80), *(void *)(v0 + 56));
  *(void *)(v0 + 16) = *(void *)(v0 + 112);
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    if (qword_10015B0A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003B18(v3, (uint64_t)qword_10015C8C0);
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (sub_1000443B0(v5))
    {
      *(_WORD *)sub_10005A928() = 0;
      sub_10005A940((void *)&_mh_execute_header, v6, v7, "Not updating disabled use case identifiers");
      sub_10000ED7C();
    }

    goto LABEL_11;
  }
  swift_errorRelease();
  if (qword_10015B0A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003B18(v8, (uint64_t)qword_10015C8C0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (sub_100044424(v10))
  {
    unint64_t v11 = (uint8_t *)sub_10005A8E4();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    sub_10005A8B4(v13);
    *uint64_t v12 = v2;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v1, "Failed to load disabled use case identifiers: %@", v11, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

LABEL_11:
    swift_errorRelease();
    goto LABEL_13;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v14();
}

uint64_t sub_1000599E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v2 = sub_100003A70(&qword_10015C9D0);
  __chkstk_darwin(v2 - 8, v3);
  sub_100030144();
  uint64_t v64 = v4;
  uint64_t v65 = type metadata accessor for FilePath();
  sub_10000ED60();
  uint64_t v62 = v5;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v61 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  unint64_t v60 = (char *)v59 - v11;
  uint64_t v12 = sub_100003A70(&qword_10015C9D8);
  __chkstk_darwin(v12 - 8, v13);
  sub_100030144();
  uint64_t v67 = v14;
  uint64_t v15 = type metadata accessor for URL();
  sub_10000ED60();
  uint64_t v66 = v16;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v25 = (char *)v59 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)v59 - v27;
  sub_10000853C((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v29 = sub_1000E9DAC();
  unint64_t v31 = v30;
  sub_10000853C((void *)(v1 + 152), *(void *)(v1 + 176));
  uint64_t v32 = v68;
  char v33 = sub_1000EB5D0();
  if (v32) {
    return swift_bridgeObjectRelease();
  }
  v59[0] = v21;
  v59[1] = v25;
  uint64_t v36 = v66;
  uint64_t v35 = (uint64_t)v67;
  unint64_t v68 = v28;
  if ((v33 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_10015B0A0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100003B18(v43, (uint64_t)qword_10015C8C0);
    os_log_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_14;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Disabled use case list asset is not available";
    goto LABEL_13;
  }
  sub_10000853C((void *)(v1 + 152), *(void *)(v1 + 176));
  sub_1000EBA3C(v29, v31);
  swift_bridgeObjectRelease();
  uint64_t v37 = v15;
  if (sub_100006AE8(v35, 1, v15) == 1)
  {
    sub_10005A358(v35, &qword_10015C9D8);
    if (qword_10015B0A0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100003B18(v38, (uint64_t)qword_10015C8C0);
    os_log_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_14;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    uint64_t v42 = "Disabled use case list asset is available, but has no location";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc();
LABEL_14:

    sub_10005A30C();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v44 = v36;
  uint64_t v45 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v68, v35, v37);
  uint64_t v46 = *(void (**)(void))(v36 + 16);
  sub_10005A914();
  v46();
  uint64_t v47 = v64;
  FilePath.init(_:)();
  uint64_t v48 = v65;
  if (sub_100006AE8(v47, 1, v65) == 1)
  {
    sub_10005A358(v47, &qword_10015C9D0);
    if (qword_10015B0A0 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100003B18(v49, (uint64_t)qword_10015C8C0);
    uint64_t v50 = v59[0];
    sub_10005A914();
    v46();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v67 = v53 + 4;
      sub_10005A3B4(&qword_10015C9E8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v69 = sub_10001DF20(v54, v55, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v56(v59[0], v37);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Disabled use case list asset location is not valid: %s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v56(v50, v37);
    }

    sub_10005A30C();
    swift_allocError();
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v56)(v45, v37);
  }
  else
  {
    uint64_t v57 = v62;
    uint64_t v58 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v60, v47, v48);
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v61, v58, v48);
    FilePath.appending(_:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v37);
  }
}

uint64_t sub_10005A128()
{
  sub_100008130(v0 + 112);
  sub_100008130(v0 + 152);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10005A160()
{
  sub_10005A128();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UseCaseManager()
{
  return self;
}

void sub_10005A1B0()
{
}

void sub_10005A1B8()
{
}

uint64_t sub_10005A1D4()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10005A52C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005A270()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10005A454();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

unint64_t sub_10005A30C()
{
  unint64_t result = qword_10015C9E0;
  if (!qword_10015C9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015C9E0);
  }
  return result;
}

uint64_t sub_10005A358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003A70(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005A3B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005A3FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_10005A454()
{
  unint64_t result = qword_10015C9F8;
  if (!qword_10015C9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015C9F8);
  }
  return result;
}

uint64_t sub_10005A4A0()
{
  sub_1000086E0();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000E1FC;
  return sub_100058BF4(v0);
}

unint64_t sub_10005A52C()
{
  unint64_t result = qword_10015CA18;
  if (!qword_10015CA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA18);
  }
  return result;
}

void type metadata accessor for DisabledUseCaseFile()
{
}

void type metadata accessor for DisabledUseCaseInternalError()
{
}

unint64_t sub_10005A5A0()
{
  unint64_t result = qword_10015CA20;
  if (!qword_10015CA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA20);
  }
  return result;
}

unint64_t sub_10005A5EC()
{
  unint64_t result = qword_10015CA30;
  if (!qword_10015CA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA30);
  }
  return result;
}

unint64_t sub_10005A638()
{
  unint64_t result = qword_10015CA40;
  if (!qword_10015CA40)
  {
    sub_100006A5C(&qword_10015CA38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA40);
  }
  return result;
}

uint64_t sub_10005A6A4(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_10005A6F4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005A790);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for DisabledUseCaseFile.CodingKeys()
{
}

unint64_t sub_10005A7C8()
{
  unint64_t result = qword_10015CA48;
  if (!qword_10015CA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA48);
  }
  return result;
}

unint64_t sub_10005A818()
{
  unint64_t result = qword_10015CA50;
  if (!qword_10015CA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA50);
  }
  return result;
}

unint64_t sub_10005A868()
{
  unint64_t result = qword_10015CA58;
  if (!qword_10015CA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015CA58);
  }
  return result;
}

uint64_t sub_10005A8B4(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10005A8E4()
{
  return swift_slowAlloc();
}

uint64_t sub_10005A900()
{
  return v0;
}

uint64_t sub_10005A928()
{
  return swift_slowAlloc();
}

void sub_10005A940(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void sub_10005A960(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_10005A980(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10005A9BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015CA60);
  uint64_t v1 = sub_100003B18(v0, (uint64_t)qword_10015CA60);
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_10005AAA0()
{
  sub_1000086E0();
  v1[6] = v2;
  v1[7] = v0;
  v1[5] = v3;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  v1[8] = v4;
  sub_10002FA4C(v4);
  v1[9] = v5;
  v1[10] = *(void *)(v6 + 64);
  v1[11] = sub_1000436D8();
  v1[12] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10005AB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v13 = v12[12];
  uint64_t v14 = v12[6];
  *(void *)(v13 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v13 + 8) = v14;
  swift_unknownObjectWeakAssign();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  swift_unknownObjectRetain();
  v16(ObjectType, v14);
  swift_unknownObjectRelease();
  sub_10000F0B4();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100044E10();
  LOBYTE(v13) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = v12[11];
  if (v13)
  {
    sub_1000698B8(v12[12], (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v28 = v12[9];
    uint64_t v29 = v12[7];
    sub_1000697F8(v12[12], v12[11], (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v31 = swift_allocObject();
    v12[13] = v31;
    *(void *)(v31 + 16) = v29;
    sub_100069854(v18, v31 + v30);
    uint64_t v41 = (char *)&dword_10015BA08 + dword_10015BA08;
    swift_retain();
    uint64_t v32 = (void *)swift_task_alloc();
    v12[14] = v32;
    *uint64_t v32 = v12;
    v32[1] = sub_10005AD84;
    sub_1000307C8();
    return v33(v33, v34, v35, v36, v37, v38, v39, v40, v41, a10, a11, a12);
  }
}

uint64_t sub_10005AD84()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005AE7C()
{
  sub_1000086E0();
  sub_1000698B8(*(void *)(v0 + 96), (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10005AEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_10005AFA0, a2, 0);
}

uint64_t sub_10005AFA0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = (uint64_t *)(v0[8] + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers);
  swift_beginAccess();
  uint64_t v5 = swift_bridgeObjectRetain();
  *uint64_t v4 = sub_100069080(v5, v6);
  swift_bridgeObjectRelease();
  sub_1000697F8(v3, v1, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  sub_100043F38();
  sub_100022764();
  sub_1000698B8(v2, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v7();
}

uint64_t sub_10005B0BC()
{
  sub_1000086E0();
  v1[11] = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  sub_10002FA4C(v2);
  v1[12] = v3;
  v1[13] = sub_1000436D8();
  v1[14] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005B150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  *(void *)(v16 + 120) = sub_100003B18(v17, (uint64_t)qword_10015CA60);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v16 + 88);
  p_vtable = &OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine.vtable;
  if (v20)
  {
    a10 = v16 + 40;
    uint64_t v23 = sub_10000EFE8();
    a11 = sub_10002FF90();
    a13 = a11;
    *(_DWORD *)uint64_t v23 = 136315394;
    a9 = v23 + 4;
    type metadata accessor for InferenceProviderDescriptor();
    a12 = v16 + 16;
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v16 + 72) = sub_100069D24(v24, v25, v26, v27, v28, v29);
    sub_100069E00();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2048;
    uint64_t v30 = v21 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers;
    sub_100043D2C();
    uint64_t v31 = *(void *)(*(void *)v30 + 16);
    swift_release();
    *(void *)(v16 + 80) = v31;
    p_vtable = (void **)(&OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Inference Provider extension %s calling %ld terminationHandlers", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v32 = (uint64_t *)((char *)p_vtable[499] + *(void *)(v16 + 88));
  sub_100043D2C();
  uint64_t v33 = *v32;
  *(void *)(v16 + 128) = *v32;
  char v34 = *(unsigned char *)(v33 + 32);
  *(unsigned char *)(v16 + 168) = v34;
  uint64_t v35 = -1;
  uint64_t v36 = -1 << v34;
  if (-(-1 << v34) < 64) {
    uint64_t v35 = ~(-1 << -(char)v36);
  }
  uint64_t v37 = v35 & *(void *)(v33 + 56);
  uint64_t v38 = (void *)swift_bridgeObjectRetain();
  if (v37)
  {
    uint64_t v39 = 0;
LABEL_10:
    uint64_t v40 = sub_100069E0C((uint64_t)v38, v39);
    sub_1000697F8(v40, v36, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    sub_100069854(v36, v37);
    sub_100043638();
    return _swift_task_switch(v41, v42, v43);
  }
  unint64_t v45 = 63 - v36;
  if ((unint64_t)(63 - v36) > 0x7F)
  {
    if (v38[8])
    {
LABEL_15:
      sub_10006A168();
      goto LABEL_10;
    }
    if (v45 >= 0xC0)
    {
      if (v38[9]) {
        goto LABEL_15;
      }
      if (v45 >= 0x100)
      {
        if (v38[10]) {
          goto LABEL_15;
        }
        if (v45 >= 0x140)
        {
          if (v38[11]) {
            goto LABEL_15;
          }
          unint64_t v46 = v45 >> 6;
          uint64_t v47 = 12;
          while (v47 - 7 < v46)
          {
            if (v38[v47++]) {
              goto LABEL_15;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_retain_n();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    a12 = v16 + 64;
    uint64_t v51 = (uint8_t *)sub_100030314();
    a13 = sub_10002FF90();
    *(_DWORD *)uint64_t v51 = 136315138;
    a11 = (uint64_t)(v51 + 4);
    sub_10006A004();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v16 + 64) = sub_100069D24(v52, v53, v54, v55, v56, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10000EE7C();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Inference Provider extension %s finished calling terminationHandlers", v51, 0xCu);
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000EE7C();
  }
  *(unsigned char *)(*(void *)(v16 + 88) + 148) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_100043638();
  return v59(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10005B680()
{
  sub_10000F01C();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[19] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(v0[13] + 8);
    swift_getObjectType();
    uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[20] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10005B7C4;
    uint64_t v4 = sub_100069E00();
    return v7(v4);
  }
  else
  {
    uint64_t v6 = v0[11];
    return _swift_task_switch(sub_10005B8EC, v6, 0);
  }
}

uint64_t sub_10005B7C4()
{
  sub_1000086EC();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_10005B8EC, v4, 0);
}

uint64_t sub_10005B8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v17 = sub_1000698B8(*(void *)(v16 + 104), (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
  uint64_t v20 = *(void *)(v16 + 136);
  if (*(void *)(v16 + 144))
  {
    sub_10006A168();
    uint64_t v17 = *(void *)(v16 + 128);
    goto LABEL_3;
  }
  int64_t v24 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v25 = (1 << *(unsigned char *)(v16 + 168)) + 63;
  uint64_t v17 = *(void *)(v16 + 128);
  if (v24 < (uint64_t)(v25 >> 6))
  {
    uint64_t v26 = v17 + 56;
    uint64_t v21 = v20 + 1;
    if (*(void *)(v17 + 56 + 8 * v24)) {
      goto LABEL_3;
    }
    int64_t v27 = v25 >> 6;
    uint64_t v21 = v24 + 1;
    if (v24 + 1 < v27)
    {
      if (*(void *)(v26 + 8 * v21)) {
        goto LABEL_3;
      }
      uint64_t v21 = v24 + 2;
      if (v24 + 2 >= v27) {
        goto LABEL_20;
      }
      if (*(void *)(v26 + 8 * v21))
      {
LABEL_3:
        uint64_t v22 = sub_100069E0C(v17, v21);
        sub_1000697F8(v22, v15, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
        sub_100069854(v15, v14);
        sub_10002FE48();
        return _swift_task_switch(v17, v18, v19);
      }
      uint64_t v28 = v24 + 3;
      if (v28 < v27)
      {
        if (*(void *)(v26 + 8 * v28))
        {
          uint64_t v21 = v28;
          goto LABEL_3;
        }
        while (1)
        {
          uint64_t v21 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            break;
          }
          if (v21 >= v27) {
            goto LABEL_20;
          }
          ++v28;
          if (*(void *)(v26 + 8 * v21)) {
            goto LABEL_3;
          }
        }
LABEL_27:
        __break(1u);
        return _swift_task_switch(v17, v18, v19);
      }
    }
  }
LABEL_20:
  swift_release();
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_10004361C(v30))
  {
    a10 = v16 + 64;
    sub_100030314();
    sub_10002FF90();
    sub_100069C1C(4.8149e-34);
    sub_10006A004();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v31 = sub_100069C04();
    *(void *)(v16 + 64) = sub_100069E64(v31, v32, v33, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10000EE7C();
    swift_bridgeObjectRelease();
    sub_100069B74((void *)&_mh_execute_header, v29, v35, "Inference Provider extension %s finished calling terminationHandlers");
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000EE7C();
  }
  *(unsigned char *)(*(void *)(v16 + 88) + 148) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10005BBB8()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v3);
  v1[5] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005BC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100003B18(v16, (uint64_t)qword_10015CA60);
  sub_10002FC78();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (sub_10004361C(v18))
  {
    a10 = v14 + 2;
    sub_100030314();
    sub_10002FF90();
    sub_100069C1C(4.8149e-34);
    sub_10006A004();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v19 = sub_100069C04();
    uint64_t v23 = sub_100069E64(v19, v20, v21, v22);
    sub_100069C60(v23);
    sub_10000EE7C();
    swift_bridgeObjectRelease();
    sub_100069B74((void *)&_mh_execute_header, v17, v24, "Inference Provider extension %s terminated");
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000EE7C();
  }
  uint64_t v25 = v14[4];
  uint64_t v26 = *(void *)(v25 + 112);
  v14[6] = v26;
  if (v26)
  {
    sub_100069BA8();
    int64_t v27 = (void *)swift_task_alloc();
    v14[7] = v27;
    *int64_t v27 = v14;
    v27[1] = sub_10005BF04;
    sub_10002FE48();
    return v28(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    *(void *)(v25 + 112) = 0;
    uint64_t v37 = *(void **)(v25 + 120);
    if (v37) {
      LODWORD(v37) = [v37 pid];
    }
    sub_100069E98((int)v37);

    uint64_t v38 = *(void **)(v25 + 120);
    *(void *)(v25 + 120) = 0;

    *(unsigned char *)(v17 + 148) = 1;
    uint64_t v39 = type metadata accessor for TaskPriority();
    sub_100069D3C(0, v40, v41, v39);
    sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
    uint64_t v42 = (void *)sub_100032374();
    sub_100069ED8(v42);
    sub_100003730(0, (uint64_t)&unk_10015D018, (uint64_t)v15);
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE48();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_10005BF04()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005BFFC()
{
  sub_1000086EC();
  uint64_t v4 = *(void *)(v2 + 32);
  *(void *)(v4 + 112) = 0;
  swift_release();
  uint64_t v5 = *(void **)(v4 + 120);
  if (v5) {
    LODWORD(v5) = [v5 pid];
  }
  sub_100069E98((int)v5);

  uint64_t v6 = *(void **)(v4 + 120);
  *(void *)(v4 + 120) = 0;

  *(unsigned char *)(v0 + 148) = 1;
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_100069D3C(v1, v8, v9, v7);
  sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v10 = (void *)sub_100032374();
  sub_100069ED8(v10);
  sub_100003730(v1, (uint64_t)&unk_10015D018, (uint64_t)v3);
  swift_release();
  swift_task_dealloc();
  sub_10000EF7C();
  return v11();
}

uint64_t sub_10005C11C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10005B0BC();
}

uint64_t sub_10005C1AC(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return sub_10000EFE0((uint64_t)sub_10005C1C8, v1);
}

uint64_t sub_10005C1C8()
{
  sub_1000086EC();
  type metadata accessor for TimeoutExecutor();
  uint64_t v1 = swift_allocObject();
  v0[6] = v1;
  swift_defaultActor_initialize();
  uint64_t v2 = v1 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  uint64_t v3 = sub_100003A70(&qword_10015C098);
  sub_100069D3C(v2, v4, v5, v3);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 0;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005C2E8;
  uint64_t v7 = v0[5];
  return sub_100100620(0x8AC7230489E80000, 0, (uint64_t)&unk_10015D008, v7);
}

uint64_t sub_10005C2E8()
{
  sub_100030014();
  sub_10000F01C();
  char v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    *(unsigned char *)(v5 + 80) = v3 & 1;
  }
  sub_10002FE64();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10005C400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, NSObject *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  sub_100043E90();
  if (*(unsigned char *)(v24 + 80) == 1)
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = (void *)sub_100057A88(v25, (uint64_t)qword_10015CA60);
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (!sub_1000443B0(v27)) {
      goto LABEL_22;
    }
    uint64_t v28 = (_WORD *)sub_10005A928();
    sub_100069CF8(v28);
    uint64_t v31 = "terminatedExtensionError TimeoutExecutor timed out";
LABEL_21:
    sub_10005A960((void *)&_mh_execute_header, v29, v30, v31);
    sub_10000ED7C();
LABEL_22:
    uint64_t v61 = *(void *)(v24 + 32);

    uint64_t v62 = enum case for ModelManagerError.internalError(_:);
    type metadata accessor for ModelManagerError();
    sub_1000578CC();
    (*(void (**)(uint64_t, uint64_t))(v63 + 104))(v61, v62);
    goto LABEL_31;
  }
  uint64_t v32 = *(void **)(*(void *)(v24 + 40) + 136);
  if (!v32)
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    uint64_t v26 = (void *)sub_100057A88(v58, (uint64_t)qword_10015CA60);
    os_log_type_t v59 = static os_log_type_t.fault.getter();
    if (!sub_1000443B0(v59)) {
      goto LABEL_22;
    }
    uint64_t v60 = (_WORD *)sub_10005A928();
    sub_100069CF8(v60);
    uint64_t v31 = "terminatedExtensionError called with no exit context";
    goto LABEL_21;
  }
  uint64_t v33 = v32;
  p_base_props = &TelemetryManager.base_props;
  id v35 = [v33 status];
  if (v35 && (uint64_t v36 = v35, v37 = [v35 isJetsam], v36, v37))
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_10006A17C();
    os_log_type_t v39 = sub_100003B18(v38, (uint64_t)qword_10015CA60);
    swift_retain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    BOOL v42 = sub_100044424(v41);
    uint64_t v43 = *(void *)(v24 + 40);
    if (v42)
    {
      uint64_t v44 = (uint8_t *)sub_100057C20();
      *(_DWORD *)uint64_t v44 = 67109120;
      *(_DWORD *)(v24 + 76) = *(_DWORD *)(v43 + 144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v40, v39, "terminatedExtensionError found process %d jettisoned", v44, 8u);
      sub_10000ED7C();
      uint64_t v45 = v40;
    }
    else
    {
      swift_release();
      uint64_t v45 = v33;
      uint64_t v33 = v40;
    }

    uint64_t v82 = *(void *)(v24 + 32);
    uint64_t v83 = enum case for ModelManagerError.insufficientSystemResources(_:);
    type metadata accessor for ModelManagerError();
    sub_1000578CC();
    (*(void (**)(uint64_t, uint64_t))(v84 + 104))(v82, v83);
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v46 = sub_10006A17C();
    int v47 = sub_100003B18(v46, (uint64_t)qword_10015CA60);
    sub_10002FC78();
    uint64_t v48 = v33;
    int v49 = v47;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    BOOL v52 = sub_100057CB0(v51);
    uint64_t v53 = *(void *)(v24 + 40);
    if (v52)
    {
      a10 = v24 + 24;
      a12 = v24 + 72;
      uint64_t v54 = swift_slowAlloc();
      HIDWORD(a11) = v49;
      uint64_t v55 = (void *)sub_100057C20();
      *(_DWORD *)uint64_t v54 = 138412546;
      a13 = v50;
      a9 = v24 + 76;
      *(void *)(v24 + 24) = v48;
      uint64_t v56 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v55 = v32;

      p_base_props = (__objc2_prop_list **)(&TelemetryManager + 64);
      *(_WORD *)(v54 + 12) = 1024;
      int v57 = *(_DWORD *)(v53 + 144);
      swift_release();
      *(_DWORD *)(v24 + 72) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v50, BYTE4(a11), "terminatedExtensionError returning abnormal extension termination with %@ for %d", (uint8_t *)v54, 0x12u);
      sub_100003A70(&qword_10015BA58);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
    }
    id v64 = [v48 p_base_props[343]];
    if (v64)
    {
      uint64_t v65 = v64;
      unsigned int v66 = [v64 domain];
    }
    else
    {
      unsigned int v66 = 0;
    }
    id v67 = [v48 p_base_props[343]];
    if (v67)
    {
      unint64_t v68 = v67;
      id v69 = [v67 code];
    }
    else
    {
      id v69 = 0;
    }
    uint64_t v70 = *(void *)(v24 + 32);

    *(_DWORD *)uint64_t v70 = v66;
    *(void *)(v70 + 8) = v69;
    uint64_t v71 = enum case for ModelManagerError.inferenceProviderCrashed(_:);
    type metadata accessor for ModelManagerError();
    sub_1000578CC();
    (*(void (**)(uint64_t, uint64_t))(v72 + 104))(v70, v71);
  }
LABEL_31:
  sub_10000EF7C();
  sub_100043638();
  return v74(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10005C948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  swift_release();
  swift_release();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003B18(v13, (uint64_t)qword_10015CA60);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (sub_100044424(v15))
  {
    sub_100030314();
    uint64_t v16 = (void *)sub_100057C20();
    sub_10006A100(5.7779e-34);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    sub_100069D54(v17);
    *uint64_t v16 = v12;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v14, v18, "terminatedExtensionError TimeoutExecutor threw %@");
    sub_100003A70(&qword_10015BA58);
    sub_100069CDC();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for ModelManagerError();
  sub_1000578CC();
  sub_100043E9C();
  v19();
  sub_10000EF7C();
  sub_1000307C8();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
}

uint64_t sub_10005CB0C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10005CB2C, a1, 0);
}

uint64_t sub_10005CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  uint64_t v13 = *(void *)(v12[2] + 128);
  void v12[3] = v13;
  swift_retain();
  if (v13)
  {
    uint64_t v14 = (void *)swift_task_alloc();
    v12[4] = v14;
    *uint64_t v14 = v12;
    v14[1] = sub_10005CC0C;
    return Task<>.value.getter(v14, v13, (char *)&type metadata for () + 8, v15, v16, v17, v18, v19, a9, a10, a11, a12);
  }
  else
  {
    sub_10000EF7C();
    return v20();
  }
}

uint64_t sub_10005CC0C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *char v2 = v1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10005CCF4, 0, 0);
}

uint64_t sub_10005CCF8(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_10000F0D0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = (void *)v2[15];
  v2[15] = a1;
  id v12 = a1;

  v2[14] = a2;
  swift_retain();
  swift_release();
  uint64_t v13 = type metadata accessor for TaskPriority();
  sub_100069D3C(v10, v14, v15, v13);
  uint64_t v16 = sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v2;
  v17[3] = v16;
  v17[4] = v12;
  v17[5] = v2;
  sub_10002FC78();
  id v18 = v12;
  v2[16] = sub_100003730(v10, (uint64_t)&unk_10015CFE8, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_10005CE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_10005CE5C, a5, 0);
}

uint64_t sub_10005CE5C()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = v0[3];
  sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v2 = swift_task_alloc();
  v0[5] = v2;
  *(void *)(v2 + 16) = v1;
  char v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  sub_1000695A0(0, &qword_10015CFF0);
  *char v3 = v0;
  v3[1] = sub_10005CFA4;
  sub_10002FE64();
  return withCheckedContinuation<A>(isolation:function:_:)(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10005CFA4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005D09C()
{
  sub_1000086EC();
  v0[7] = v0[2];
  type metadata accessor for _OSActivity();
  v0[8] = _OSActivity.__allocating_init(_:)();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)sub_100057A88(v1, (uint64_t)qword_10015CA60);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (sub_1000579B0(v3))
  {
    *(_WORD *)sub_10005A928() = 0;
    sub_10006A194((void *)&_mh_execute_header, v4, v5, "Extension marked terminated");
    sub_10000ED7C();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005D1E0;
  return sub_10005BBB8();
}

uint64_t sub_10005D1E0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005D2BC()
{
  sub_1000086E0();
  uint64_t v1 = *(void **)(v0 + 56);
  _OSActivity.close()();
  swift_release();

  sub_10000EF7C();
  return v2();
}

void sub_10005D320(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015CFF8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100069660;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005D510;
  aBlock[3] = &unk_100154030;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 monitorForDeath:v10];
  _Block_release(v10);
}

uint64_t sub_10005D4C8(uint64_t a1, void *a2)
{
  id v2 = a2;
  sub_100003A70(&qword_10015CFF8);
  return CheckedContinuation.resume(returning:)();
}

void sub_10005D510(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, v6);
  swift_release();
}

uint64_t sub_10005D594()
{
  sub_1000086E0();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(void *)(v1 + 32) = v3;
  *(_DWORD *)(v1 + 84) = v4;
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10005D624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  id v17 = [self identifierWithPid:*(unsigned int *)(v16 + 84)];
  if (v17)
  {
    id v18 = v17;
    sub_1000695A0(0, &qword_10015CFC0);
    id v19 = v18;
    id v32 = sub_1000D3400((uint64_t)v19);
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = sub_100057A88(v33, (uint64_t)qword_10015CA60);
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (sub_1000579B0(v35))
    {
      uint64_t v36 = (uint8_t *)sub_10005A928();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "InferenceProviderExtensionConnection setCurrentState acquiring assertion", v36, 2u);
      sub_10000ED7C();
    }

    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    type metadata accessor for InferenceProviderDescriptor();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    v37._countAndFlagsBits = sub_100069C04();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    os_log_type_t v59 = v32;
    id v38 = [self targetWithPid:[v32 pid]];
    sub_100003A70(&qword_10015CFC8);
    uint64_t v39 = sub_100032374();
    *(_OWORD *)(v39 + 16) = xmmword_100129310;
    sub_1000695A0(0, &qword_10015CFD0);
    swift_bridgeObjectRetain();
    *(void *)(v39 + 32) = sub_10005DE54();
    specialized Array._endMutation()();
    id v40 = objc_allocWithZone((Class)RBSAssertion);
    id v41 = sub_100068C54(0xD00000000000001CLL, 0x800000010012BB80, v38);
    *(void *)(v16 + 24) = 0;
    unsigned int v42 = [v41 acquireWithError:v16 + 24];
    uint64_t v43 = *(void **)(v16 + 24);
    if (v42)
    {
      uint64_t v44 = *(void *)(*(void *)(v16 + 48) + 152);
      *(void *)(swift_task_alloc() + 16) = v41;
      id v45 = v43;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
      sub_100069488((id *)(v44 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 24));

      swift_release();
      swift_task_dealloc();
      sub_100043638();
      return v53(v51, v52, v53, v54, v55, v56, v57, v58, v59, a10, v39, 0x800000010012BB80, a13, a14, a15, a16);
    }
    id v46 = v43;
    uint64_t v30 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = sub_100057A88(v20, (uint64_t)qword_10015CA60);
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      int v23 = *(_DWORD *)(v16 + 84);
      uint64_t v24 = (_DWORD *)sub_100030314();
      sub_10002FF90();
      *uint64_t v24 = 136315138;
      *(_DWORD *)(v16 + 80) = v23;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v16 + 16) = sub_100069E64(v25, v26, v27, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100069E7C((void *)&_mh_execute_header, v21, v29, "launchIfNeededAndTake failed to get process identifier for %s.");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }

    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v30 = sub_10004415C();
    sub_100043E9C();
    v31();
    swift_willThrow();
  }
  *(void *)(v16 + 56) = v30;
  type metadata accessor for ModelManagerError();
  sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  *(void *)(v16 + 64) = sub_100057D34();
  int v47 = (void *)swift_task_alloc();
  *(void *)(v16 + 72) = v47;
  *int v47 = v16;
  v47[1] = sub_10005DCB0;
  sub_100069C84();
  sub_100043638();
  return sub_10005C1AC(v48);
}

uint64_t sub_10005DCB0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005DDB8()
{
  sub_1000086EC();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10005DE54()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [(id)swift_getObjCClassFromMetadata() attributeWithDomain:v0 name:v1];

  return v2;
}

id sub_10005DEE8(id *a1, void *a2)
{
  *a1 = a2;
  return a2;
}

uint64_t sub_10005DF2C()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for BuiltInInferenceProvider();
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_1000436D8();
  v1[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  v1[9] = v6;
  sub_10002FDD0(v6);
  v1[10] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for AppExtensionProcess();
  v1[11] = v7;
  sub_10002FA4C(v7);
  v1[12] = v8;
  v1[13] = sub_10002FE18();
  uint64_t v9 = type metadata accessor for AppExtensionProcess._InstanceIdentifier();
  sub_10002FDD0(v9);
  v1[14] = sub_10002FE18();
  uint64_t v10 = type metadata accessor for AppExtensionProcess.Configuration();
  v1[15] = v10;
  sub_10002FA4C(v10);
  v1[16] = v11;
  v1[17] = sub_1000436D8();
  v1[18] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for AppExtensionIdentity();
  v1[19] = v12;
  sub_10002FA4C(v12);
  v1[20] = v13;
  v1[21] = sub_1000436D8();
  v1[22] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10005E0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = v14[4];
  type metadata accessor for _OSActivity();
  v14[23] = _OSActivity.__allocating_init(_:)();
  uint64_t v16 = v14[4];
  if (*(void *)(v15 + 112))
  {
    id v17 = *(void **)(v16 + 120);
    if (v17)
    {
      [v17 pid];
      uint64_t v18 = (void *)swift_task_alloc();
      v14[33] = v18;
      *uint64_t v18 = v14;
      v18[1] = sub_10005F000;
      sub_10002FE48();
      return sub_10005D594();
    }
    else
    {
      if (qword_10015B0A8 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      id v32 = (void *)sub_100057A88(v31, (uint64_t)qword_10015CA60);
      os_log_type_t v33 = static os_log_type_t.fault.getter();
      if (sub_1000443B0(v33))
      {
        uint64_t v34 = (_WORD *)sub_10005A928();
        sub_100069CF8(v34);
        sub_10005A960((void *)&_mh_execute_header, v35, v36, "InferenceProviderExtensionConnection doesn't have pid when trying to take assertion");
        sub_10000ED7C();
      }

      type metadata accessor for ModelManagerError();
      sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v56 = sub_100057D34();
      sub_100043E9C();
      v37();
      swift_willThrow();
      sub_10006A140();
      uint64_t v55 = v38;
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10002FE48();
      return v40(v39, v40, v41, v42, v43, v44, v45, v46, v55, v56, a11, a12, a13, a14);
    }
  }
  else if (*(unsigned char *)(v16 + 148) == 1)
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    os_log_type_t v22 = (void *)sub_100057A88(v21, (uint64_t)qword_10015CA60);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (sub_1000443B0(v23))
    {
      uint64_t v24 = (_WORD *)sub_10005A928();
      sub_100069CF8(v24);
      sub_10005A960((void *)&_mh_execute_header, v25, v26, "Failing launch of extension because previous extension instance is cleaning up");
      sub_10000ED7C();
    }

    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v14[24] = sub_100057D34();
    swift_task_alloc();
    sub_100057E8C();
    v14[25] = v27;
    *uint64_t v27 = v28;
    v27[1] = sub_10005E564;
    sub_100069C84();
    sub_10002FE48();
    return sub_10005C1AC(v29);
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = (void *)sub_100057A88(v47, (uint64_t)qword_10015CA60);
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (sub_1000443B0(v49))
    {
      uint64_t v50 = (_WORD *)sub_10005A928();
      sub_100069CF8(v50);
      sub_10005A960((void *)&_mh_execute_header, v51, v52, "InferenceProviderExtensionConnection setCurrentState creating new sender part");
      sub_10000ED7C();
    }

    uint64_t v53 = (void *)swift_task_alloc();
    v14[26] = v53;
    *uint64_t v53 = v14;
    v53[1] = sub_10005E70C;
    sub_10002FE48();
    return sub_1000626A8();
  }
}

uint64_t sub_10005E564()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10005E640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  swift_willThrow();
  sub_10006A140();
  uint64_t v25 = v14;
  uint64_t v26 = v15;
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002FE48();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, v25, v26, a11, a12, a13, a14);
}

uint64_t sub_10005E70C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 216) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005E804()
{
  sub_10000F01C();
  sub_100069DF4();
  v1();
  AppExtensionProcess.Configuration.init(appExtensionIdentity:onInterruption:)();
  AppExtensionProcess._InstanceIdentifier.init()();
  AppExtensionProcess.Configuration._instanceIdentifier.setter();
  uint64_t v2 = sub_100069E00();
  v3(v2);
  swift_task_alloc();
  sub_100057E8C();
  v0[28] = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_10005E91C;
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[13];
  return AppExtensionProcess.init(configuration:)(v7, v6);
}

uint64_t sub_10005E91C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005EA14()
{
  sub_1000086E0();
  uint64_t result = AppExtensionProcess._auditToken.getter();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10005EABC;
    return sub_10005D594();
  }
  return result;
}

uint64_t sub_10005EABC()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000ED94();
  *uint64_t v5 = v4;
  *(void *)(v7 + 248) = v6;
  *(void *)(v7 + 256) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10005EBB8()
{
  uint64_t v1 = *(void *)(v0 + 256);
  AppExtensionProcess._makeLibXPCConnection()();
  if (v1)
  {

    uint64_t v2 = sub_10006A0F4();
    v3(v2);
    sub_100043F00();
    v4();
    uint64_t v5 = sub_100069FB4();
    v6(v5);
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
  }
  else
  {
    type metadata accessor for XPCSession();
    uint64_t v7 = type metadata accessor for XPCSession.InitializationOptions();
    sub_10002FDD0(v7);
    sub_10002FE18();
    swift_unknownObjectRetain();
    static XPCSession.InitializationOptions.none.getter();
    XPCSession.__allocating_init(fromConnection:targetQueue:options:incomingMessageHandler:cancellationHandler:)();
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 32);
    swift_task_dealloc();
    sub_1000697F8(v11 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification, v10, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    sub_100057ECC();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v13 = *(void *)(v0 + 80);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for InferenceProviderXPCSender();
      swift_retain();
      uint64_t v14 = InferenceProviderXPCSender.__allocating_init(session:)();
      sub_1000698B8(v13, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 48) + 32))(*(void *)(v0 + 64), *(void *)(v0 + 80), *(void *)(v0 + 40));
      type metadata accessor for InferenceProviderXPCSender();
      sub_100069DF4();
      v15();
      swift_retain();
      uint64_t v14 = InferenceProviderXPCSender.__allocating_init(builtInProvider:session:)();
      uint64_t v16 = sub_10006A0F4();
      v17(v16);
    }
    uint64_t v18 = *(void **)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v23 = *(void *)(v0 + 144);
    sub_10005CCF8(v18, v14);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();

    sub_100043924();
    v20();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v22);
    sub_100043F00();
    v21();
    sub_100069DC0();
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
  }
  return v8();
}

uint64_t sub_10005F000()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 272) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  sub_10000F0B4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005F108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_100069DC0();
  uint64_t v22 = v12;
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_1000307C8();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, v22, a10, a11, a12);
}

uint64_t sub_10005F1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  sub_100069B48();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10005F26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  sub_10004381C();
  v14();
  uint64_t v15 = sub_100069FB4();
  v16(v15);
  sub_100069B48();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10005F340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = v14[18];
  uint64_t v16 = v14[15];
  uint64_t v17 = v14[16];
  sub_10004381C();
  v18();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  uint64_t v19 = sub_100043EDC();
  v20(v19);
  sub_100069B48();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10005F440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  sub_100069B48();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
}

void sub_10005F4F0(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003B18(v4, (uint64_t)qword_10015CA60);
  uint64_t v5 = type metadata accessor for XPCReceivedMessage();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10((char *)v20 - v9, a1, v5);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    os_log_t v21 = v11;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v15;
    v20[1] = v20;
    uint64_t v25 = v15;
    uint64_t v23 = a2;
    *(_DWORD *)uint64_t v14 = 136315138;
    v20[2] = v14 + 4;
    __chkstk_darwin(v15, v16);
    v10((char *)v20 - v9, (uint64_t)v20 - v9, v5);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v24 = sub_10001DF20(v17, v18, &v25);
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v20 - v9, v5);
    os_log_t v19 = v21;
    _os_log_impl((void *)&_mh_execute_header, v21, v12, "Unexpected message received from InferenceProvider XPC service: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v20 - v9, v5);
  }
  a2[3] = &type metadata for String;
  a2[4] = &protocol witness table for String;
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

void sub_10005F7CC(uint64_t a1)
{
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003B18(v2, (uint64_t)qword_10015CA60);
  uint64_t v3 = type metadata accessor for XPCRichError();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8(v7, a1, v3);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = &v14;
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v14 = v11 + 4;
    sub_100056E08();
    swift_allocError();
    v8(v12, (uint64_t)v7, v3);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Connection to InferenceProvider XPC service cancelled: %@", v11, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t sub_10005FA68()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_10005FA84, v0);
}

uint64_t sub_10005FA84()
{
  sub_1000086E0();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10015B9D8 + dword_10015B9D8);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005FB48;
  return v3();
}

uint64_t sub_10005FB48()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10005FC50()
{
  sub_1000086E0();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10005FCAC(uint64_t a1, uint64_t a2)
{
  v2[19] = a2;
  sub_100003A70(&qword_10015CFA0);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RequestPriority();
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_10005FDE4, a2, 0);
}

uint64_t sub_10005FDE4()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v85 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount;
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void (**)(void))(v5 + 104);
  uint64_t v8 = (uint8_t *)enum case for RequestPriority.none(_:);
  sub_100043E9C();
  v7();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v9(v2, v3, v4);
  sub_100003A70(&qword_10015CFB8);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100129320;
  unint64_t v12 = v11 + v10;
  uint64_t v86 = v1;
  uint64_t v13 = v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest;
  sub_100043D2C();
  uint64_t v84 = v13;
  uint64_t v14 = swift_bridgeObjectRetain();
  sub_100060A1C(v14, v6);
  swift_bridgeObjectRelease();
  if (sub_100006AE8(v6, 1, v4) == 1)
  {
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = v7;
    ((void (*)(unint64_t, uint8_t *, void))v7)(v12, v8, *(void *)(v0 + 176));
    sub_100068F94(v15);
  }
  else
  {
    uint64_t v16 = v7;
    v9(v12, *(void *)(v0 + 160), *(void *)(v0 + 176));
  }
  uint64_t v17 = v8;
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v20 = *(void (**)(void))(*(void *)(v0 + 184) + 16);
  sub_100069BF4();
  v20();
  sub_100060EE4(v11, v19);
  swift_setDeallocating();
  sub_100068DF0();
  int v21 = sub_100006AE8(v19, 1, v18);
  uint64_t v22 = *(void *)(v0 + 208);
  if (v21 == 1)
  {
    uint64_t v23 = *(void *)(v0 + 168);
    ((void (*)(uint64_t, uint8_t *, void))v16)(v22, v8, *(void *)(v0 + 176));
    sub_100068F94(v23);
  }
  else
  {
    v9(v22, *(void *)(v0 + 168), *(void *)(v0 + 176));
  }
  uint64_t v24 = v20;
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v25 = *(void *)(v0 + 200);
  uint64_t v26 = *(void *)(v0 + 208);
  uint64_t v27 = *(void *)(v0 + 176);
  uint64_t v28 = type metadata accessor for Logger();
  os_log_type_t v29 = sub_100003B18(v28, (uint64_t)qword_10015CA60);
  uint64_t v87 = v20;
  ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v25, v26, v27);
  swift_retain_n();
  os_log_type_t v83 = v29;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  unsigned int v82 = v8;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v17 = *(uint8_t **)(v0 + 192);
    uint64_t v81 = *(void *)(v0 + 184);
    uint64_t v32 = swift_slowAlloc();
    v88[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136316162;
    sub_100069DDC();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v33 = sub_100069C04();
    *(void *)(v0 + 120) = sub_10001DF20(v33, v34, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044610();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    sub_100069DF4();
    v24();
    uint64_t v35 = String.init<A>(describing:)();
    *(void *)(v0 + 112) = sub_10001DF20(v35, v36, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Swift::String v37 = *(void (**)(void))(v81 + 8);
    uint64_t v38 = (v81 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_10004381C();
    v37();
    *(_WORD *)(v32 + 22) = 2080;
    sub_100043D2C();
    sub_100069DF4();
    v87();
    uint64_t v39 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_10001DF20(v39, v40, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044610();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 32) = 2048;
    uint64_t v41 = *(void *)(v86 + v85);
    swift_release();
    *(void *)(v0 + 136) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v32 + 42) = 2048;
    uint64_t v42 = *(void *)(*(void *)v84 + 16);
    swift_release();
    *(void *)(v0 + 144) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v43 = v37;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "InferenceProviderExtensionConnection %s setCurrentState to %s from %s [%ld, %ld", (uint8_t *)v32, 0x34u);
    sub_10006A1D4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v44 = *(void *)(v0 + 184);
    swift_release_n();
    uint64_t v43 = *(void (**)(void))(v44 + 8);
    uint64_t v38 = (v44 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100043924();
    v43();

    swift_release_n();
  }
  *(void *)(v0 + 232) = v43;
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v46 = *(void *)(v0 + 192);
  uint64_t v47 = *(void *)(v0 + 176);
  uint64_t v48 = *(void *)(v0 + 152) + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activePriority;
  sub_100043D2C();
  ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v46, v48, v47);
  LOBYTE(v45) = sub_100101B50(v45, v46);
  *(void *)(v0 + 240) = v38;
  ((void (*)(uint64_t, uint64_t))v43)(v46, v47);
  uint64_t v49 = *(void *)(v0 + 152);
  if ((v45 & 1) != 0 && *(void *)(v49 + 112))
  {
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (sub_100057CB0(v51))
    {
      uint64_t v52 = (_WORD *)sub_10005A928();
      sub_100069CF8(v52);
      _os_log_impl((void *)&_mh_execute_header, v50, v83, "InferenceProviderExtensionConnection setCurrentState not updating state", v17, 2u);
      sub_10000ED7C();
    }
    goto LABEL_20;
  }
  uint64_t v53 = v43;
  sub_100043F38();
  uint64_t v54 = sub_100057ECC();
  v55(v54);
  swift_endAccess();
  uint64_t v56 = *(void *)(v49 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v56 + 24));
  sub_100061164((uint64_t *)(v56 + 16), v88);
  os_unfair_lock_unlock((os_unfair_lock_t)(v56 + 24));
  uint64_t v58 = *(void *)(v0 + 184);
  uint64_t v57 = *(void *)(v0 + 192);
  uint64_t v59 = *(void *)(v0 + 176);
  uint64_t v50 = v88[0];
  *(void *)(v0 + 248) = v88[0];
  swift_release();
  uint64_t v60 = *(void (**)(uint64_t, void, uint64_t))(v58 + 104);
  v60(v57, v82, v59);
  uint64_t v61 = sub_100057ECC();
  char v63 = sub_100101B50(v61, v62);
  ((void (*)(uint64_t, uint64_t))v53)(v57, v59);
  if (v63)
  {
    id v64 = (void *)Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (sub_1000579B0(v65))
    {
      *(_WORD *)sub_10005A928() = 0;
      sub_10006A194((void *)&_mh_execute_header, v66, v67, "InferenceProviderExtensionConnection setCurrentState no active requests");
      sub_10000ED7C();
    }

    sub_100061174(v50);
LABEL_20:
    unint64_t v68 = *(void (**)(uint64_t))(v0 + 232);
    uint64_t v69 = *(void *)(v0 + 224);
    uint64_t v70 = *(void *)(v0 + 176);

    uint64_t v71 = sub_10006A0D4();
    v68(v71);
    ((void (*)(uint64_t, uint64_t))v68)(v69, v70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_100069EBC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v74 = *(void *)(v0 + 192);
  uint64_t v75 = *(void *)(v0 + 176);
  v60(v74, enum case for RequestPriority.foreground(_:), v75);
  uint64_t v76 = sub_100043EDC();
  *(unsigned char *)(v0 + 272) = sub_100101B50(v76, v77) & 1;
  ((void (*)(uint64_t, uint64_t))v53)(v74, v75);
  uint64_t v78 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v78;
  *uint64_t v78 = v0;
  v78[1] = sub_100060750;
  sub_100069EBC();
  return sub_10005DF2C();
}

uint64_t sub_100060750()
{
  sub_1000086EC();
  sub_10002FC48();
  uint64_t v3 = v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 264) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F0B4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10006087C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = (void *)v14[31];
  sub_100061174(v15);
  uint64_t v16 = (void (*)(uint64_t))v14[29];
  uint64_t v17 = v14[28];
  uint64_t v18 = v14[22];
  uint64_t v29 = v14[21];
  uint64_t v30 = v14[20];

  uint64_t v19 = sub_10006A0D4();
  v16(v19);
  ((void (*)(uint64_t, uint64_t))v16)(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE48();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29, v30, a12, a13, a14);
}

uint64_t sub_10006094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = (void *)v14[31];
  uint64_t v16 = v14[28];
  uint64_t v17 = (void (*)(uint64_t))v14[29];
  uint64_t v18 = v14[22];
  uint64_t v29 = v14[21];
  uint64_t v30 = v14[20];
  sub_100061174(v15);

  uint64_t v19 = sub_10006A0D4();
  v17(v19);
  ((void (*)(uint64_t, uint64_t))v17)(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29, v30, a12, a13, a14);
}

void *sub_100060A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RequestPriority();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v42 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t result = sub_10002E2A0(v49, a1);
  uint64_t v43 = v49[1];
  if (!v52)
  {
    int64_t v39 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      goto LABEL_45;
    }
    int64_t v44 = (unint64_t)(v50 + 64) >> 6;
    if (v39 < v44)
    {
      unint64_t v40 = *(void *)(v43 + 8 * v39);
      int64_t v24 = v51 + 1;
      if (v40)
      {
LABEL_29:
        uint64_t v42 = a2;
        unint64_t v22 = (v40 - 1) & v40;
        unint64_t v23 = __clz(__rbit64(v40)) + (v24 << 6);
        goto LABEL_3;
      }
      int64_t v24 = v51 + 2;
      if (v51 + 2 < v44)
      {
        unint64_t v40 = *(void *)(v43 + 8 * v24);
        if (v40) {
          goto LABEL_29;
        }
        int64_t v24 = v51 + 3;
        if (v51 + 3 < v44)
        {
          unint64_t v40 = *(void *)(v43 + 8 * v24);
          if (v40) {
            goto LABEL_29;
          }
          int64_t v24 = v51 + 4;
          if (v51 + 4 < v44)
          {
            unint64_t v40 = *(void *)(v43 + 8 * v24);
            if (v40) {
              goto LABEL_29;
            }
            int64_t v24 = v51 + 5;
            if (v51 + 5 < v44)
            {
              unint64_t v40 = *(void *)(v43 + 8 * v24);
              if (!v40)
              {
                int64_t v41 = v51 + 6;
                do
                {
                  if (v41 >= v44) {
                    goto LABEL_42;
                  }
                  unint64_t v40 = *(void *)(v43 + 8 * v41++);
                }
                while (!v40);
                int64_t v24 = v41 - 1;
              }
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_42:
    swift_bridgeObjectRetain();
    sub_10006945C((uint64_t)v49);
    uint64_t v38 = 1;
    return (void *)sub_100006960(a2, v38, 1, v4);
  }
  uint64_t v42 = a2;
  unint64_t v22 = (v52 - 1) & v52;
  unint64_t v23 = __clz(__rbit64(v52)) | (v51 << 6);
  int64_t v44 = (unint64_t)(v50 + 64) >> 6;
  int64_t v24 = v51;
LABEL_3:
  uint64_t v47 = v49[0];
  uint64_t v25 = v5[9];
  unint64_t v26 = *(void *)(v49[0] + 56) + v25 * v23;
  uint64_t v45 = (void (*)(char *, unint64_t, uint64_t))v5[2];
  uint64_t v46 = v25;
  v45(v17, v26, v4);
  uint64_t v27 = v17;
  uint64_t v28 = (void (*)(char *, char *, uint64_t))v5[4];
  v28(v20, v27, v4);
  uint64_t v48 = v5 + 4;
  uint64_t v29 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t result = (void *)swift_bridgeObjectRetain();
  while (1)
  {
    if (v22)
    {
      unint64_t v30 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v31 = v30 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v32 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v32 >= v44) {
      goto LABEL_25;
    }
    unint64_t v33 = *(void *)(v43 + 8 * v32);
    int64_t v34 = v24 + 1;
    if (!v33)
    {
      int64_t v34 = v24 + 2;
      if (v24 + 2 >= v44) {
        goto LABEL_25;
      }
      unint64_t v33 = *(void *)(v43 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v24 + 3;
        if (v24 + 3 >= v44) {
          goto LABEL_25;
        }
        unint64_t v33 = *(void *)(v43 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v24 + 4;
          if (v24 + 4 >= v44) {
            goto LABEL_25;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v34);
          if (!v33)
          {
            int64_t v34 = v24 + 5;
            if (v24 + 5 >= v44) {
              goto LABEL_25;
            }
            unint64_t v33 = *(void *)(v43 + 8 * v34);
            if (!v33)
            {
              int64_t v35 = v24 + 6;
              while (v35 < v44)
              {
                unint64_t v33 = *(void *)(v43 + 8 * v35++);
                if (v33)
                {
                  int64_t v34 = v35 - 1;
                  goto LABEL_21;
                }
              }
LABEL_25:
              swift_release();
              a2 = v42;
              v28((char *)v42, v20, v4);
              uint64_t v38 = 0;
              return (void *)sub_100006960(a2, v38, 1, v4);
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v22 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v34 << 6);
    int64_t v24 = v34;
LABEL_22:
    v45(v9, *(void *)(v47 + 56) + v31 * v46, v4);
    v28(v13, v9, v4);
    sub_100068C0C(&qword_10015B738, (void (*)(uint64_t))&type metadata accessor for RequestPriority);
    char v36 = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::String v37 = *v29;
    if (v36)
    {
      v37(v20, v4);
      uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v28)(v20, v13, v4);
    }
    else
    {
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v37)(v13, v4);
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100060EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RequestPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v26 = a2;
    uint64_t v27 = v5;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v14((char *)&v25 - v11, a1 + v15, v4);
    uint64_t v28 = a1;
    swift_bridgeObjectRetain();
    uint64_t v16 = v13 - 1;
    if (v16)
    {
      uint64_t v17 = *(void *)(v27 + 72);
      uint64_t v18 = (void (**)(char *, uint64_t))(v27 + 8);
      uint64_t v19 = (void (**)(char *, char *, uint64_t))(v27 + 32);
      unint64_t v20 = v28 + v17 + v15;
      do
      {
        v14(v9, v20, v4);
        sub_100068C0C(&qword_10015B738, (void (*)(uint64_t))&type metadata accessor for RequestPriority);
        char v21 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v22 = *v18;
        if (v21)
        {
          v22(v12, v4);
          (*v19)(v12, v9, v4);
        }
        else
        {
          v22(v9, v4);
        }
        v20 += v17;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v12, v4);
    return sub_100006960(v23, 0, 1, v4);
  }
  else
  {
    return sub_100006960(a2, 1, 1, v4);
  }
}

uint64_t *sub_100061164@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  void *result = 0;
  *a2 = v2;
  return result;
}

void sub_100061174(void *a1)
{
  if (a1)
  {
    uint64_t v1 = qword_10015B0A8;
    id v2 = a1;
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003B18(v3, (uint64_t)qword_10015CA60);
    id v4 = v2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      id v8 = [v4 description];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      uint64_t v12 = sub_10001DF20(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "InferenceProviderExtensionConnection setCurrentState invalidating assertion %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    [v4 invalidate:v12];
  }
}

uint64_t sub_100061364()
{
  sub_1000086E0();
  v1[14] = v2;
  v1[15] = v0;
  v1[13] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B408);
  v1[16] = v4;
  sub_10002FA4C(v4);
  v1[17] = v5;
  v1[18] = sub_1000436D8();
  v1[19] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015CFA0);
  sub_10002FDD0(v6);
  v1[20] = sub_1000436D8();
  v1[21] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100061434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  uint64_t v27 = v24[13];
  uint64_t v28 = v24[21];
  uint64_t v29 = v24[15];
  type metadata accessor for _OSActivity();
  uint64_t v30 = _OSActivity.__allocating_init(_:)();
  uint64_t v31 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest;
  v24[22] = v30;
  v24[23] = v31;
  int64_t v32 = (uint64_t *)(v29 + v31);
  sub_100043D2C();
  uint64_t v33 = *v32;
  swift_bridgeObjectRetain();
  sub_100014434(v27, v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = type metadata accessor for RequestPriority();
  v24[24] = v34;
  LODWORD(v33) = sub_100006AE8(v28, 1, v34);
  sub_100068F94(v28);
  if (v33 == 1)
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    v24[25] = sub_100003B18(v35, (uint64_t)qword_10015CA60);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (sub_1000443B0(v37))
    {
      uint64_t v38 = (uint8_t *)sub_10005A928();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)((_BYTE)v24 + 104), "In InferenceProviderExtensionConnection addActiveRequest", v38, 2u);
      sub_10000ED7C();
    }
    uint64_t v40 = v24[19];
    uint64_t v39 = v24[20];
    uint64_t v42 = v24[16];
    uint64_t v41 = v24[17];
    uint64_t v44 = v24[13];
    uint64_t v43 = v24[14];

    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    v24[26] = v45;
    v24[27] = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v45(v40, v44, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v39, v43, v34);
    sub_100006960(v39, 0, 1, v34);
    sub_100043F38();
    sub_1000D9574(v39, v40);
    swift_endAccess();
    uint64_t v46 = (void *)swift_task_alloc();
    v24[28] = v46;
    void *v46 = v24;
    v46[1] = sub_100061884;
    sub_100043638();
    return sub_10005FA68();
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v50 = v24[17];
    uint64_t v49 = v24[18];
    uint64_t v51 = v24[16];
    uint64_t v52 = v24[13];
    uint64_t v53 = type metadata accessor for Logger();
    sub_100003B18(v53, (uint64_t)qword_10015CA60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v52, v51);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      a11 = v24 + 12;
      uint64_t v56 = (uint8_t *)sub_100030314();
      a12 = sub_10002FF90();
      a13 = a12;
      *(_DWORD *)uint64_t v56 = 136315138;
      a10 = v56 + 4;
      sub_10000E080();
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      v24[12] = sub_10001DF20(v57, v58, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = sub_100044634();
      v60(v59);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "InferenceProviderExtensionConnection addActiveRequest called multiple times for %s", v56, 0xCu);
      sub_100069D04();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v61 = sub_100044634();
      v62(v61);
    }

    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_100043638();
    return v64(v63, v64, v65, v66, v67, v68, v69, v70, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_100061884()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 232) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10006197C()
{
  sub_100030014();
  sub_10000F01C();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100061A0C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)sub_100030314();
    uint64_t v4 = (void *)sub_100057C20();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "InferenceProviderExtensionConnection addActiveRequest failed with %@", v3, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[26];
  uint64_t v13 = v0[24];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[19];
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[13];

  v6(v8, v10, v9);
  sub_100006960(v7, 1, 1, v13);
  sub_10006A0F4();
  sub_100043F38();
  sub_1000D9574(v7, v8);
  swift_endAccess();
  swift_willThrow();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v11();
}

uint64_t sub_100061C48()
{
  sub_1000086E0();
  v1[10] = v2;
  v1[11] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B408);
  v1[12] = v3;
  sub_10002FA4C(v3);
  v1[13] = v4;
  v1[14] = sub_1000436D8();
  v1[15] = swift_task_alloc();
  uint64_t v5 = sub_100003A70(&qword_10015CFA0);
  sub_10002FDD0(v5);
  v1[16] = sub_1000436D8();
  v1[17] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100061D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  uint64_t v25 = v22[17];
  uint64_t v26 = v22[10];
  uint64_t v27 = v22[11];
  type metadata accessor for _OSActivity();
  v22[18] = _OSActivity.__allocating_init(_:)();
  uint64_t v28 = (uint64_t *)(v27 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_100043D2C();
  uint64_t v29 = *v28;
  swift_bridgeObjectRetain();
  sub_100014434(v26, v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for RequestPriority();
  LODWORD(v26) = sub_100006AE8(v25, 1, v30);
  sub_100068F94(v25);
  if (v26 == 1)
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003B18(v31, (uint64_t)qword_10015CA60);
    uint64_t v32 = sub_100069C90();
    v33(v32);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      a10 = v22 + 8;
      char v36 = (uint8_t *)sub_100030314();
      a11 = sub_10002FF90();
      *(_DWORD *)char v36 = 136315138;
      a9 = v36 + 4;
      sub_10000E080();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v22[8] = sub_10001DF20(v37, v38, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_10006A0E0();
      v40(v39);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "InferenceProviderExtensionConnection removeActiveRequest called for nonactive %s", v36, 0xCu);
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v47 = sub_10006A0E0();
      v48(v47);
    }

    sub_100069FE8();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE48();
    return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v42 = v22[15];
    uint64_t v41 = v22[16];
    sub_100069DF4();
    v43();
    sub_100006960(v41, 1, 1, v30);
    sub_100043F38();
    sub_1000D9574(v41, v42);
    swift_endAccess();
    uint64_t v44 = (void *)swift_task_alloc();
    v22[19] = v44;
    void *v44 = v22;
    v44[1] = sub_100062048;
    sub_10002FE48();
    return sub_10005FA68();
  }
}

uint64_t sub_100062048()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100062140()
{
  sub_100030014();
  sub_10000F01C();
  sub_100069FE8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000621C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003B18(v13, (uint64_t)qword_10015CA60);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (sub_100044424(v15))
  {
    sub_100030314();
    uint64_t v16 = (void *)sub_100057C20();
    sub_10006A100(5.7779e-34);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v12 + 72) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v17;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v14, v18, "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100003A70(&qword_10015BA58);
    sub_100069CDC();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100069FE8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t sub_100062380()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 141) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  sub_100003A70(&qword_10015CF60);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v0 + 152) = v1;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  type metadata accessor for RequestPriority();
  sub_1000578CC();
  sub_100043E9C();
  v2();
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  type metadata accessor for WorkQueueState();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v0 + v3) = v4;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  type metadata accessor for InferenceProviderDescriptor();
  sub_1000578CC();
  sub_100030658();
  v5();
  type metadata accessor for BuiltInInferenceProvider();
  sub_1000578CC();
  sub_100030658();
  v6();
  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_100062514()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 141) = 0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  sub_100003A70(&qword_10015CF60);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v0 + 152) = v1;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest) = &_swiftEmptyDictionarySingleton;
  type metadata accessor for RequestPriority();
  sub_1000578CC();
  sub_100043E9C();
  v2();
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_workQueueState;
  type metadata accessor for WorkQueueState();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v0 + v3) = v4;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_terminationHandlers) = _swiftEmptySetSingleton;
  type metadata accessor for InferenceProviderDescriptor();
  sub_1000578CC();
  sub_100030658();
  v5();
  type metadata accessor for AppExtensionIdentity();
  sub_1000578CC();
  sub_100030658();
  v6();
  type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_1000626A8()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(0);
  v1[4] = v3;
  sub_10002FDD0(v3);
  v1[5] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100062728()
{
  sub_1000086EC();
  sub_1000697F8(v0[3] + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification, v0[5], (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
  sub_100043EDC();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for AppExtensionIdentity();
    sub_1000578CC();
    sub_100030658();
    v1();
    swift_task_dealloc();
    sub_1000304E0();
    return v2();
  }
  else
  {
    type metadata accessor for InferenceProviderXPCSender();
    uint64_t v4 = static InferenceProviderXPCSender.builtInInferenceProviderExtensionIdentityCache.getter();
    v0[6] = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[7] = v5;
    uint64_t v6 = type metadata accessor for AppExtensionIdentity();
    uint64_t v7 = sub_100003A70(&qword_10015B468);
    *uint64_t v5 = v0;
    v5[1] = sub_1000628B4;
    uint64_t v8 = v0[2];
    return Task.value.getter(v8, v4, v6, v7, &protocol self-conformance witness table for Error);
  }
}

uint64_t sub_1000628B4()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000629AC()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  sub_1000698B8(v1, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
  swift_task_dealloc();
  sub_1000304E0();
  return v2();
}

uint64_t sub_100062A28()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  sub_1000698B8(v1, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100062AAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  uint64_t v3 = sub_10002FDD0(v2);
  __chkstk_darwin(v3, v4);
  sub_10000F0D0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = *(void *)(v0 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  sub_100062CC0((id *)(v8 + 16), &v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  swift_release();
  uint64_t v9 = *(void *)(v0 + 112);
  if (v9)
  {
    uint64_t v10 = type metadata accessor for TaskPriority();
    sub_100069D3C(v7, v11, v12, v10);
    uint64_t v13 = (void *)sub_100032374();
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v9;
    swift_retain();
    sub_100003730(v7, (uint64_t)&unk_10015D038, (uint64_t)v13);
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  type metadata accessor for InferenceProviderDescriptor();
  sub_10002FB84();
  sub_10000EFBC();
  v14();
  sub_1000698B8(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_providerIdentification, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
  swift_bridgeObjectRelease();
  type metadata accessor for RequestPriority();
  sub_10002FB84();
  sub_10000EFBC();
  v15();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v1;
}

id *sub_100062CC0@<X0>(id *result@<X0>, BOOL *a2@<X8>)
{
  id v3 = *result;
  if (*result) {
    uint64_t result = (id *)[*result invalidate];
  }
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_100062D14()
{
  id v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.invalidate()
                         + async function pointer to dispatch thunk of InferenceProviderXPCSender.invalidate());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return v3();
}

uint64_t sub_100062DB8()
{
  sub_100062AAC();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100062DE4()
{
  return type metadata accessor for InferenceProviderExtensionConnection(0);
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection(uint64_t a1)
{
  return sub_100067BD8(a1, (uint64_t *)&unk_10015CAA0);
}

uint64_t sub_100062E0C()
{
  uint64_t result = type metadata accessor for InferenceProviderDescriptor();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for RequestPriority();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_100062F7C()
{
  *(void *)(v1 + 40) = v0;
  return sub_10000EFE0((uint64_t)sub_100062F98, v0);
}

uint64_t sub_100062F98()
{
  sub_100043744();
  sub_100043E90();
  uint64_t v1 = v0[5];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount;
  v0[6] = OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount;
  uint64_t v3 = *(void *)(v1 + v2);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + v2) = v5;
    if (qword_10015B0A8 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v6 = sub_10006A17C();
  uint64_t v7 = sub_100003B18(v6, (uint64_t)qword_10015CA60);
  os_log_type_t v8 = v7;
  v0[7] = v7;
  swift_retain_n();
  os_log_type_t v9 = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_10006A05C(v11))
  {
    sub_10000EFE8();
    sub_10002FF90();
    sub_100069FA4(4.8151e-34);
    sub_100069DDC();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v12 = sub_100069C04();
    uint64_t v18 = sub_100069D24(v12, v13, v14, v15, v16, v17);
    sub_100069F80(v18);
    sub_100044610();
    swift_bridgeObjectRelease();
    sub_100069E40();
    sub_100069EFC();
    swift_release();
    sub_100069E28((void *)&_mh_execute_header, v10, v9, "markUsingConnectionForLoading %s setting loading count to %ld");
    sub_100069D04();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v19 = (void *)swift_task_alloc();
  v0[8] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_1000631AC;
  sub_100043638();
  return sub_10005FA68();
}

uint64_t sub_1000631AC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *BOOL v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    return _swift_task_switch(sub_1000632A8, v7, 0);
  }
  else
  {
    sub_10000EF7C();
    return v8();
  }
}

void sub_1000632A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v16 = *(void *)(v13 + 40);
  uint64_t v15 = *(void *)(v13 + 48);
  uint64_t v17 = *(void *)(v16 + v15);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v16 + v15) = v19;
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (sub_1000579B0(v21))
    {
      uint64_t v22 = (uint8_t *)sub_100030314();
      uint64_t v23 = (void *)sub_100057C20();
      *(_DWORD *)uint64_t v22 = 138412290;
      swift_errorRetain();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      sub_100069D54(v24);
      *uint64_t v23 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v12, "markUsingConnectionForLoading failed setCurrentState with %@", v22, 0xCu);
      sub_100003A70(&qword_10015BA58);
      sub_100069CDC();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    sub_10000EF7C();
    sub_1000307C8();
    v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
  }
}

uint64_t sub_100063404()
{
  *(void *)(v1 + 40) = v0;
  return sub_10000EFE0((uint64_t)sub_100063420, v0);
}

uint64_t sub_100063420()
{
  sub_100043744();
  sub_100043E90();
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount);
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount) = v4;
    if (qword_10015B0A8 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v5 = sub_10006A17C();
  uint64_t v6 = sub_100003B18(v5, (uint64_t)qword_10015CA60);
  os_log_type_t v7 = v6;
  v0[6] = v6;
  swift_retain_n();
  os_log_type_t v8 = v7;
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (sub_10006A05C(v10))
  {
    sub_10000EFE8();
    sub_10002FF90();
    sub_100069FA4(4.8151e-34);
    sub_100069DDC();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v11 = sub_100069C04();
    uint64_t v17 = sub_100069D24(v11, v12, v13, v14, v15, v16);
    sub_100069F80(v17);
    sub_100044610();
    swift_bridgeObjectRelease();
    sub_100069E40();
    sub_100069EFC();
    swift_release();
    sub_100069E28((void *)&_mh_execute_header, v9, v8, "markDoneUsingConnectionForLoading %s setting loading count to %ld");
    sub_100069D04();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_release_n();
  }
  BOOL v18 = (void *)swift_task_alloc();
  v0[7] = v18;
  *BOOL v18 = v0;
  v18[1] = sub_100063630;
  sub_100043638();
  return sub_10005FA68();
}

uint64_t sub_100063630()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    return _swift_task_switch(sub_10006372C, v7, 0);
  }
  else
  {
    sub_10000EF7C();
    return v8();
  }
}

uint64_t sub_10006372C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (sub_100044424(v2))
  {
    uint64_t v3 = (_DWORD *)sub_100030314();
    uint64_t v4 = (void *)sub_100057C20();
    *uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v1, v6, "InferenceProviderExtensionConnection removeActiveRequest failed with %@");
    sub_100003A70(&qword_10015BA58);
    sub_100069CDC();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000EF7C();
  return v7();
}

uint64_t sub_100063898()
{
  sub_1000086E0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = type metadata accessor for InferenceProviderPrewarmInformation();
  v1[9] = v3;
  sub_10002FA4C(v3);
  v1[10] = v4;
  v1[11] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100063924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v27 = v24[9];
  uint64_t v28 = type metadata accessor for Logger();
  v24[12] = sub_100003B18(v28, (uint64_t)qword_10015CA60);
  uint64_t v29 = sub_100069D7C();
  v30(v29);
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = sub_10004361C(v32);
  uint64_t v34 = v24[8];
  if (v33)
  {
    sub_10000EFE8();
    a13 = sub_10006A040();
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v35 = InferenceProviderPrewarmInformation.modelBundleIdentifier.getter();
    uint64_t v37 = sub_10001DF20(v35, v36, &a13);
    sub_100069F5C(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_100069B90();
    v39(v38);
    *(_WORD *)(v34 + 12) = 2080;
    sub_100069DDC();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v40 = sub_100069C04();
    uint64_t v46 = sub_100069D24(v40, v41, v42, v43, v44, v45);
    sub_100069F20(v46);
    sub_100044610();
    swift_bridgeObjectRelease();
    sub_100069E28((void *)&_mh_execute_header, v31, (os_log_type_t)v27, "InferenceProvider prewarmBundle %s executing on %s");
    sub_10006A1B4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v47 = sub_100069B90();
    v48(v47);

    sub_10000EE7C();
  }
  uint64_t v49 = (void *)swift_task_alloc();
  v24[13] = v49;
  *uint64_t v49 = v24;
  v49[1] = sub_100063B5C;
  sub_100043638();
  return sub_100062F7C();
}

uint64_t sub_100063B5C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    sub_100030C68();
    return _swift_task_switch(v9, v10, v11);
  }
}

uint64_t sub_100063C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = *(void *)(v14[8] + 112);
  v14[14] = v15;
  if (v15)
  {
    sub_100069BA8();
    uint64_t v16 = (void *)swift_task_alloc();
    v14[15] = (uint64_t)v16;
    *uint64_t v16 = v14;
    v16[1] = sub_100063E74;
    sub_100044070(v14[7]);
    sub_10002FE48();
  }
  else
  {
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (sub_10004361C(v26))
    {
      a10 = v14 + 2;
      sub_100030314();
      sub_10002FF90();
      sub_100069C1C(4.8149e-34);
      sub_10006A004();
      sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v27 = sub_100069C04();
      uint64_t v31 = sub_100069E64(v27, v28, v29, v30);
      sub_100069C60(v31);
      sub_10000EE7C();
      swift_bridgeObjectRelease();
      sub_100069B74((void *)&_mh_execute_header, v25, v32, "Implicitly succeeding a prewarmBundle for an exited InferenceProvider %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_10000EE7C();
    }
    sub_100065A44(v14[8], (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_100153FC8, (uint64_t)&unk_10015CF98);
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
  }
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100063E74()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100063F6C()
{
  sub_1000086E0();
  swift_release();
  sub_100065A44(*(void *)(v0 + 64), (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_100153FC8, (uint64_t)&unk_10015CF98);
  swift_task_dealloc();
  sub_1000304E0();
  return v1();
}

uint64_t sub_100063FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  void v16[3] = v16[16];
  v16[17] = type metadata accessor for XPCRichError();
  sub_10000ED60();
  uint64_t v19 = v18;
  v16[18] = sub_10006A078();
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (sub_10006A01C())
  {
    swift_errorRelease();
    v16[19] = swift_task_alloc();
    sub_100069C48();
    v20();
    swift_task_alloc();
    uint64_t v21 = *(void (**)(void))(v19 + 16);
    sub_100069BF4();
    v21();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (sub_1000306C4(v23))
    {
      sub_100030314();
      uint64_t v42 = (void *)sub_100057C20();
      sub_10006A094(5.7779e-34);
      uint64_t v17 = (void (*)(uint64_t))sub_10004415C();
      sub_100069BF4();
      v21();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      sub_100069D98(v24);
      *uint64_t v42 = v17;
      uint64_t v25 = sub_100069BDC();
      v17(v25);
      swift_task_dealloc();
      sub_100069E7C((void *)&_mh_execute_header, v22, v26, "transitionAsset failed with XPC Error %@, checking exit status");
      sub_100003A70(&qword_10015BA58);
      sub_10006A120();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v37 = sub_100069BDC();
      v17(v37);

      swift_task_dealloc();
    }
    v16[20] = v19;
    v16[21] = v17;
    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v16[22] = sub_100057D34();
    swift_task_alloc();
    sub_100057E8C();
    v16[23] = v38;
    *uint64_t v38 = v39;
    v38[1] = sub_1000642E0;
    sub_100069C84();
    sub_100043638();
    return sub_10005C1AC(v40);
  }
  else
  {
    uint64_t v27 = v16[8];
    swift_release();
    swift_task_dealloc();
    swift_errorRelease();
    sub_100065A44(v27, (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_100153FC8, (uint64_t)&unk_10015CF98);
    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043638();
    return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_1000642E0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000643BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  uint64_t v13 = *(void (**)(void))(v12 + 168);
  uint64_t v14 = *(void *)(v12 + 64);
  swift_willThrow();
  swift_release();
  sub_100043F00();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_errorRelease();
  sub_100065A44(v14, (uint64_t (*)(void))&static os_log_type_t.info.getter, (uint64_t)&unk_100153FC8, (uint64_t)&unk_10015CF98);
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10005791C();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_100064494()
{
  sub_1000086E0();
  v1[12] = v2;
  v1[13] = v0;
  v1[10] = v3;
  v1[11] = v4;
  v1[9] = v5;
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor();
  v1[14] = v6;
  sub_10002FA4C(v6);
  v1[15] = v7;
  v1[16] = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  v1[17] = State;
  sub_10002FA4C(State);
  v1[18] = v9;
  v1[19] = sub_1000436D8();
  v1[20] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_100064564()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  *(void *)(v0 + 168) = sub_1000658CC();
  *(_DWORD *)(v0 + 328) = enum case for LoadState.loaded(_:);
  uint64_t v3 = *(void (**)(uint64_t))(v2 + 104);
  *(void *)(v0 + 176) = v3;
  *(void *)(v0 + 184) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v3(v1);
  sub_100068C0C(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
  sub_100043EDC();
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v5 = *(void (**)(void))(v2 + 8);
  *(void *)(v0 + 192) = v5;
  *(void *)(v0 + 200) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043924();
  v5();
  if ((v4 & 1) != 0 || *(void *)(*(void *)(v0 + 104) + 112))
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = type metadata accessor for Logger();
    *(void *)(v0 + 208) = sub_100003B18(v10, (uint64_t)qword_10015CA60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    sub_100069BF4();
    v11();
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = sub_10002FF90();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      sub_100068C0C(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_10001DF20(v15, v16, &v38);
      sub_10006A0D4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = sub_100069F44();
      v18(v17);
      *(_WORD *)(v14 + 12) = 2080;
      sub_100068C0C(&qword_10015CF78, (void (*)(uint64_t))&type metadata accessor for LoadState);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 48) = sub_10001DF20(v19, v20, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10004381C();
      v21();
      *(_WORD *)(v14 + 22) = 2080;
      type metadata accessor for InferenceProviderDescriptor();
      sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_10001DF20(v22, v23, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "InferenceProvider transition asset %s to %s executing on %s", (uint8_t *)v14, 0x20u);
      sub_10006A1D4();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v24 = sub_100069F44();
      v25(v24);
      sub_10004381C();
      v26();

      swift_release_n();
    }
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_100064BEC;
    return sub_100062F7C();
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100003B18(v29, (uint64_t)qword_10015CA60);
    sub_10002FC78();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (sub_10004361C(v31))
    {
      uint64_t v32 = (_DWORD *)sub_100030314();
      uint64_t v33 = sub_10002FF90();
      *uint64_t v32 = 136315138;
      uint64_t v38 = v33;
      sub_100069DDC();
      sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = sub_10001DF20(v34, v35, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044610();
      swift_bridgeObjectRelease();
      sub_100069B74((void *)&_mh_execute_header, v30, v36, "Implicitly succeeding a loadOut for an exited InferenceProvider %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100044610();
    }
    sub_100069FCC();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    return v37();
  }
}

uint64_t sub_100064BEC()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 224) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100064CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v15 = *(void *)(*(void *)(v14 + 104) + 112);
  *(void *)(v14 + 232) = v15;
  if (v15)
  {
    sub_100069BA8();
    unint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v14 + 240) = v16;
    *unint64_t v16 = v14;
    v16[1] = sub_10006503C;
    sub_100044070(*(void *)(v14 + 72));
    sub_10002FE48();
    return v21(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t))(v14 + 192);
    uint64_t v27 = *(void *)(v14 + 160);
    uint64_t v28 = *(void *)(v14 + 80);
    (*(void (**)(uint64_t, void, void))(v14 + 176))(v27, *(unsigned int *)(v14 + 328), *(void *)(v14 + 136));
    LOBYTE(v28) = sub_100101C40(v28, v27);
    uint64_t v29 = sub_100043EDC();
    v26(v29);
    if (v28)
    {
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (sub_1000443B0(v31))
      {
        uint64_t v32 = (_WORD *)sub_10005A928();
        sub_100069CF8(v32);
        sub_10005A960((void *)&_mh_execute_header, v33, v34, "Load in called for terminated extension");
        sub_10000ED7C();
      }

      type metadata accessor for ModelManagerError();
      sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      *(void *)(v14 + 256) = sub_100057D34();
      swift_task_alloc();
      sub_100057E8C();
      *(void *)(v14 + 264) = v35;
      *unint64_t v35 = v36;
      v35[1] = sub_1000651E8;
      sub_100069C84();
      sub_10002FE48();
      return sub_10005C1AC(v37);
    }
    else
    {
      swift_retain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (sub_10004361C(v40))
      {
        a10 = v14 + 16;
        sub_100030314();
        sub_10002FF90();
        sub_100069C1C(4.8149e-34);
        sub_10006A004();
        sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        uint64_t v41 = sub_100069C04();
        uint64_t v45 = sub_100069E64(v41, v42, v43, v44);
        sub_100069C60(v45);
        sub_10000EE7C();
        swift_bridgeObjectRelease();
        sub_100069B74((void *)&_mh_execute_header, v39, v46, "Implicitly succeeding a loadOut for an exited InferenceProvider %s");
        sub_100030988();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_10000EE7C();
      }
      sub_100065A44(*(void *)(v14 + 104), (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_100153FA0, (uint64_t)&unk_10015CF88);
      sub_100069FCC();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000304E0();
      sub_10002FE48();
      return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14);
    }
  }
}

uint64_t sub_10006503C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 248) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100065134()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 104);
  swift_release();
  sub_100065A44(v1, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_100153FA0, (uint64_t)&unk_10015CF88);
  sub_100069FCC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v2();
}

uint64_t sub_1000651E8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000652C4()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = *(void *)(v0 + 104);
  swift_willThrow();
  sub_100065A44(v1, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_100153FA0, (uint64_t)&unk_10015CF88);
  sub_100069CB0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069BCC();
  sub_10002FE64();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10006537C()
{
  sub_100030014();
  sub_10000F01C();
  sub_100069CB0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069BCC();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000653FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  void v16[3] = v16[31];
  v16[34] = type metadata accessor for XPCRichError();
  sub_10000ED60();
  uint64_t v19 = v18;
  v16[35] = sub_10006A078();
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (sub_10006A01C())
  {
    swift_errorRelease();
    v16[36] = swift_task_alloc();
    sub_100069C48();
    v20();
    swift_task_alloc();
    uint64_t v21 = *(void (**)(void))(v19 + 16);
    sub_100069BF4();
    v21();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (sub_1000306C4(v23))
    {
      sub_100030314();
      unint64_t v42 = (void *)sub_100057C20();
      sub_10006A094(5.7779e-34);
      uint64_t v17 = (void (*)(uint64_t))sub_10004415C();
      sub_100069BF4();
      v21();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      sub_100069D98(v24);
      *unint64_t v42 = v17;
      uint64_t v25 = sub_100069BDC();
      v17(v25);
      swift_task_dealloc();
      sub_100069E7C((void *)&_mh_execute_header, v22, v26, "transitionAsset failed with XPC Error %@, checking exit status");
      sub_100003A70(&qword_10015BA58);
      sub_10006A120();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v37 = sub_100069BDC();
      v17(v37);

      swift_task_dealloc();
    }
    v16[37] = v19;
    v16[38] = v17;
    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v16[39] = sub_100057D34();
    swift_task_alloc();
    sub_100057E8C();
    v16[40] = v38;
    *uint64_t v38 = v39;
    v38[1] = sub_1000656FC;
    sub_100069C84();
    sub_100043638();
    return sub_10005C1AC(v40);
  }
  else
  {
    uint64_t v27 = v16[13];
    swift_release();
    swift_task_dealloc();
    swift_errorRelease();
    sub_100065A44(v27, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_100153FA0, (uint64_t)&unk_10015CF88);
    sub_100069CB0();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100069BCC();
    sub_100043638();
    return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_1000656FC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000657D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  os_log_type_t v13 = *(void (**)(void))(v12 + 304);
  uint64_t v14 = *(void *)(v12 + 104);
  swift_willThrow();
  swift_release();
  sub_100043F00();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_errorRelease();
  sub_100065A44(v14, (uint64_t (*)(void))&static os_log_type_t.default.getter, (uint64_t)&unk_100153FA0, (uint64_t)&unk_10015CF88);
  sub_100069CB0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069BCC();
  sub_10005791C();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_1000658CC()
{
  type metadata accessor for LoadState();
  sub_10000ED60();
  __chkstk_darwin(v0, v1);
  sub_10000F0D0();
  sub_100069DF4();
  v2();
  uint64_t v3 = sub_100069E00();
  int v5 = v4(v3);
  if (v5 == enum case for LoadState.unloaded(_:) || (int v6 = v5, v5 == enum case for LoadState.dynamicMode(_:)))
  {
    type metadata accessor for _OSActivity();
  }
  else
  {
    int v7 = enum case for LoadState.loaded(_:);
    type metadata accessor for _OSActivity();
    if (v6 != v7)
    {
      uint64_t v8 = _OSActivity.__allocating_init(_:)();
      sub_100069E00();
      sub_100043924();
      v10();
      return v8;
    }
  }
  return _OSActivity.__allocating_init(_:)();
}

uint64_t sub_100065A44(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100003A70(&qword_10015B208);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_10000F0D0();
  uint64_t v12 = v11 - v10;
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100057A88(v13, (uint64_t)qword_10015CA60);
  os_log_type_t v15 = a2();
  if (sub_1000306C4(v15))
  {
    unint64_t v16 = (uint8_t *)sub_10005A928();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)a2, "InferenceProvider transition asset finished", v16, 2u);
    sub_10000ED7C();
  }

  uint64_t v17 = type metadata accessor for TaskPriority();
  sub_100069D3C(v12, v18, v19, v17);
  uint64_t v20 = sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  uint64_t v21 = (void *)sub_100032374();
  v21[2] = a1;
  v21[3] = v20;
  v21[4] = a1;
  swift_retain_n();
  sub_100003730(v12, a4, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100065BDC()
{
  sub_1000086E0();
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  *(unsigned char *)(v1 + 296) = v3;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v1 + 96) = v6;
  sub_10002FA4C(v6);
  *(void *)(v1 + 104) = v7;
  *(void *)(v1 + 112) = sub_10002FE18();
  uint64_t v8 = type metadata accessor for InferenceProviderRequestConfiguration();
  *(void *)(v1 + 120) = v8;
  sub_10002FA4C(v8);
  *(void *)(v1 + 128) = v9;
  *(void *)(v1 + 136) = sub_1000436D8();
  *(void *)(v1 + 144) = swift_task_alloc();
  *(void *)(v1 + 152) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_100065CB8()
{
  uint64_t v51 = v0;
  uint64_t v2 = *(void *)(v0 + 88);
  type metadata accessor for _OSActivity();
  *(void *)(v0 + 160) = _OSActivity.__allocating_init(_:)();
  uint64_t v3 = *(void *)(v2 + 112);
  *(void *)(v0 + 168) = v3;
  if (v3)
  {
    uint64_t v4 = qword_10015B0A8;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_100003B18(v9, (uint64_t)qword_10015CA60);
    *(void *)(v0 + 176) = v10;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    *(void *)(v0 + 184) = v11;
    *(void *)(v0 + 192) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v5, v8, v6);
    swift_retain_n();
    os_log_type_t v12 = v10;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = sub_10006A05C(v14);
    uint64_t v16 = *(void *)(v0 + 128);
    if (v15)
    {
      uint64_t v17 = *(void *)(v0 + 104);
      uint64_t v18 = *(void *)(v0 + 112);
      uint64_t v19 = *(void *)(v0 + 96);
      sub_10000EFE8();
      uint64_t v50 = sub_10006A040();
      sub_100069FA4(4.8151e-34);
      InferenceProviderRequestConfiguration.requestUUID.getter();
      sub_100068C0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of CustomStringConvertible.description.getter();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
      uint64_t v20 = sub_100057ECC();
      *(void *)(v0 + 48) = sub_10001DF20(v20, v21, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v23 = *(void (**)(void))(v16 + 8);
      sub_100043924();
      v23();
      *(_WORD *)(v8 + 12) = 2080;
      type metadata accessor for InferenceProviderDescriptor();
      sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_10001DF20(v24, v25, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      sub_100069E28((void *)&_mh_execute_header, v13, v12, "InferenceProvider requestInference (%s) executing on %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      os_log_type_t v23 = *(void (**)(void))(v16 + 8);
      sub_100043924();
      v23();
      swift_release_n();
    }

    *(void *)(v0 + 200) = v23;
    os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.requestInference(asStream:clientData:configuration:)
                                                                      + async function pointer to dispatch thunk of InferenceProviderXPCSender.requestInference(asStream:clientData:configuration:));
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v39;
    *uint64_t v39 = v0;
    v39[1] = sub_100066318;
    uint64_t v40 = *(void *)(v0 + 72);
    uint64_t v41 = *(void *)(v0 + 80);
    uint64_t v42 = *(unsigned __int8 *)(v0 + 296);
    uint64_t v43 = *(void *)(v0 + 64);
    return type(v43, v42, v40, v41);
  }
  else
  {
    if (qword_10015B0A8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100003B18(v26, (uint64_t)qword_10015CA60);
    uint64_t v27 = sub_100069C90();
    v28(v27);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = sub_100057CB0(v30);
    uint64_t v32 = *(void *)(v0 + 144);
    uint64_t v33 = *(void *)(v0 + 128);
    if (v31)
    {
      uint64_t v48 = *(void *)(v0 + 120);
      uint64_t v34 = (uint8_t *)sub_100030314();
      uint64_t v50 = sub_10002FF90();
      *(_DWORD *)uint64_t v34 = 136315138;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      sub_100068C0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v37 = v36;
      sub_100043F00();
      v38();
      *(void *)(v0 + 16) = sub_10001DF20(v35, v37, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v48);
      _os_log_impl((void *)&_mh_execute_header, v29, v1, "requestInference (%s) called for exited extension", v34, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(v33 + 8))(*(void *)(v0 + 144), *(void *)(v0 + 120));
    }

    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    *(void *)(v0 + 224) = sub_100057D34();
    swift_task_alloc();
    sub_100057E8C();
    *(void *)(v0 + 232) = v45;
    *uint64_t v45 = v46;
    v45[1] = sub_1000664C0;
    uint64_t v47 = sub_100069C84();
    return sub_10005C1AC(v47);
  }
}

uint64_t sub_100066318()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 216) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100066410()
{
  sub_10000F01C();
  sub_100066CE8(*(void *)(v0 + 80));
  swift_release();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v1();
}

uint64_t sub_1000664C0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10006659C()
{
  swift_willThrow();
  sub_10006A0B8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069BCC();
  return v0();
}

uint64_t sub_100066640()
{
  uint64_t v43 = v0;
  v0[3] = v0[27];
  uint64_t v1 = type metadata accessor for XPCRichError();
  v0[30] = v1;
  sub_10000ED60();
  uint64_t v3 = v2;
  v0[31] = sub_10006A078();
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (swift_dynamicCast())
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
    uint64_t v5 = v0[17];
    uint64_t v41 = v3;
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[10];
    swift_errorRelease();
    uint64_t v8 = swift_task_alloc();
    v0[32] = v8;
    sub_100069C48();
    v9();
    uint64_t v10 = v6;
    uint64_t v11 = v41;
    v4(v5, v7, v10);
    uint64_t v12 = swift_task_alloc();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    v13(v12, v8, v1);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = (void (*)(uint64_t))v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v39 = v13;
      uint64_t v17 = v0[13];
      uint64_t v18 = v0[14];
      uint64_t v40 = v12;
      uint64_t v19 = v0[12];
      uint64_t v20 = swift_slowAlloc();
      uint64_t v38 = (void *)sub_100057C20();
      uint64_t v42 = sub_10002FF90();
      *(_DWORD *)uint64_t v20 = 136315394;
      os_log_type_t v37 = v16;
      InferenceProviderRequestConfiguration.requestUUID.getter();
      sub_100068C0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v36 = v14;
      unint64_t v23 = v22;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
      uint64_t v11 = v41;
      v0[4] = sub_10001DF20(v21, v23, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10004381C();
      v24();
      *(_WORD *)(v20 + 12) = 2112;
      uint64_t v16 = (void (*)(uint64_t))(v20 + 14);
      sub_100056E08();
      sub_10004415C();
      v39(v25, v40, v1);
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v26;
      uint64_t v27 = sub_10006A154();
      ((void (*)(uint64_t))(v20 + 14))(v27);
      os_log_type_t v14 = v36;
      sub_100069E28((void *)&_mh_execute_header, v36, v37, "requestInference (%s) failed with XPC Error %@, checking exit status");
      sub_100003A70(&qword_10015BA58);
      swift_arrayDestroy();
      sub_10000ED7C();
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_10004381C();
      v31();
      uint64_t v32 = sub_10006A154();
      v16(v32);
    }

    v0[33] = v11;
    v0[34] = v16;
    swift_task_dealloc();
    type metadata accessor for ModelManagerError();
    sub_100068C0C((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    v0[35] = sub_100057D34();
    swift_task_alloc();
    sub_100057E8C();
    v0[36] = v33;
    *uint64_t v33 = v34;
    v33[1] = sub_100066B34;
    uint64_t v35 = sub_100069C84();
    return sub_10005C1AC(v35);
  }
  else
  {
    uint64_t v28 = v0[10];
    swift_task_dealloc();
    swift_errorRelease();
    sub_100066CE8(v28);
    swift_release();
    sub_10006A0B8();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100069BCC();
    return v29();
  }
}

uint64_t sub_100066B34()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100066C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100057900();
  sub_100030AFC();
  uint64_t v13 = *(void (**)(void))(v12 + 272);
  uint64_t v14 = *(void *)(v12 + 80);
  swift_willThrow();
  sub_100043F00();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_errorRelease();
  sub_100066CE8(v14);
  swift_release();
  sub_10006A0B8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069BCC();
  sub_10005791C();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

void sub_100066CE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003B18(v12, (uint64_t)qword_10015CA60);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    uint64_t v21 = v15;
    *(_DWORD *)uint64_t v15 = 136315138;
    v20[1] = v15 + 4;
    InferenceProviderRequestConfiguration.requestUUID.getter();
    sub_100068C0C(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v17 = v2;
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v17);
    uint64_t v23 = sub_10001DF20(v16, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "InferenceProvider requestInference (%s) finished", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_100067034(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10006705C()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0[4] + 112);
  v0[5] = v1;
  if (v1)
  {
    sub_100069BA8();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[6] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100067138;
    uint64_t v3 = sub_100044070(v0[2]);
    return v6(v3);
  }
  else
  {
    sub_10000EF7C();
    return v5();
  }
}

uint64_t sub_100067138()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_release();
  uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

uint64_t sub_100067218()
{
  sub_1000086E0();
  v1[4] = v2;
  v1[5] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B408);
  v1[6] = v3;
  sub_10002FA4C(v3);
  v1[7] = v4;
  v1[8] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000672A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, NSObject *a11, char *a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  type metadata accessor for _OSActivity();
  v24[9] = _OSActivity.__allocating_init(_:)();
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v27 = v24[6];
  uint64_t v28 = type metadata accessor for Logger();
  sub_100003B18(v28, (uint64_t)qword_10015CA60);
  uint64_t v29 = sub_100069D7C();
  v30(v29);
  swift_retain_n();
  BOOL v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = sub_10004361C(v32);
  uint64_t v34 = v24[5];
  if (v33)
  {
    a11 = v31;
    sub_10000EFE8();
    a9 = v34;
    a12 = (char *)sub_10006A040();
    a13 = a12;
    *(_DWORD *)uint64_t v34 = 136315394;
    HIDWORD(a10) = v27;
    sub_10000E080();
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_10001DF20(v35, v36, (uint64_t *)&a13);
    sub_100069F5C(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_100069B90();
    v39(v38);
    *(_WORD *)(v34 + 12) = 2080;
    sub_100069DDC();
    sub_100068C0C(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v40 = sub_100069C04();
    uint64_t v46 = sub_100069D24(v40, v41, v42, v43, v44, v45);
    sub_100069F20(v46);
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_100069E28((void *)&_mh_execute_header, v31, (os_log_type_t)v27, "InferenceProvider awaiting endOfStream (%s) on %s");
    sub_10006A1B4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v47 = sub_100069B90();
    v48(v47);
    sub_10000EE7C();
  }

  uint64_t v49 = *(void *)(v24[5] + 112);
  v24[10] = v49;
  if (v49)
  {
    a12 = (char *)&async function pointer to dispatch thunk of InferenceProviderXPCSender.endOfStream(_:)
        + async function pointer to dispatch thunk of InferenceProviderXPCSender.endOfStream(_:);
    swift_retain();
    uint64_t v50 = (void *)swift_task_alloc();
    v24[11] = (uint64_t)v50;
    void *v50 = v24;
    v50[1] = sub_100067588;
    sub_100044070(v24[4]);
    sub_100043638();
  }
  else
  {
    sub_100068228(v24[4]);
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043638();
  }
  return v52(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_100067588()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100067680()
{
  sub_1000086E0();
  sub_100068228(*(void *)(v0 + 32));
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015CEE0);
}

uint64_t *sub_100067710(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000677F0(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100067864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyInit();
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000678EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakCopyAssign();
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100067974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeInit();
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000679FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_unknownObjectWeakTakeAssign();
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100067A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067A98);
}

uint64_t sub_100067A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
      return (*(_DWORD *)a1 & 0x7FFFFFFFu) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = a1 + *(int *)(a3 + 20);
    return sub_100006AE8(v8, a2, v7);
  }
}

uint64_t sub_100067B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067B34);
}

void *sub_100067B34(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    void *result = (a2 - 1);
    result[1] = 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)sub_100006960(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015CE38);
}

uint64_t sub_100067BD8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100067C0C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100067CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = type metadata accessor for AppExtensionIdentity();
    }
    else {
      uint64_t v6 = type metadata accessor for BuiltInInferenceProvider();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100067DD4(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = type metadata accessor for AppExtensionIdentity();
  }
  else {
    uint64_t v2 = type metadata accessor for BuiltInInferenceProvider();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100067E50(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for AppExtensionIdentity();
  }
  else {
    uint64_t v4 = type metadata accessor for BuiltInInferenceProvider();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100067EFC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000698B8(a1, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for AppExtensionIdentity();
    }
    else {
      uint64_t v4 = type metadata accessor for BuiltInInferenceProvider();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100067FCC(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for AppExtensionIdentity();
  }
  else {
    uint64_t v4 = type metadata accessor for BuiltInInferenceProvider();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100068078(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000698B8(a1, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.ProviderIdentification);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for AppExtensionIdentity();
    }
    else {
      uint64_t v4 = type metadata accessor for BuiltInInferenceProvider();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100068154()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100068164()
{
  uint64_t result = type metadata accessor for BuiltInInferenceProvider();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AppExtensionIdentity();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void sub_100068228(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B408);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10015B0A8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003B18(v7, (uint64_t)qword_10015CA60);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_10000E080();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = sub_10001DF20(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "InferenceProvider await endOfStream (%s) finished", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_10006848C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100068504()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100063898();
}

uint64_t sub_10006859C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100064494();
}

uint64_t sub_10006865C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000E1FC;
  return sub_100065BDC();
}

uint64_t sub_100068720()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100061364();
}

uint64_t sub_1000687C8()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100061C48();
}

uint64_t sub_100068860(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000ED54;
  return sub_100067034(a1, a2);
}

uint64_t sub_100068908()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10005AAA0();
}

uint64_t sub_1000689B0()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100067218();
}

uint64_t sub_100068A48()
{
  type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);

  return static UUID.== infix(_:_:)();
}

uint64_t sub_100068A90()
{
  return UUID.hash(into:)();
}

Swift::Int sub_100068AC8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100068B20()
{
  return Hasher._finalize()();
}

uint64_t sub_100068B6C()
{
  return sub_100068C0C(&qword_10015CF18, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
}

uint64_t sub_100068BB4(uint64_t a1)
{
  uint64_t result = sub_100068C0C(&qword_10015B9E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderExtensionConnection);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100068C0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100068C54(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1000695A0(0, &qword_10015CFD8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v3 initWithExplanation:v5 target:a3 attributes:isa];

  return v7;
}

uint64_t sub_100068CFC()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100063404();
}

uint64_t sub_100068D8C()
{
  sub_100003A70(&qword_10015D040);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100068DF0()
{
  type metadata accessor for RequestPriority();
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100068E70()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1000086AC(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000875C();
  return sub_100068CFC();
}

uint64_t sub_100068F04()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1000086AC(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000875C();
  return sub_100068CFC();
}

uint64_t sub_100068F94(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015CFA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100068FF4()
{
  sub_1000086E0();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000086AC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10000ED54;
  uint64_t v4 = sub_100069C84();
  return sub_10005FCAC(v4, v0);
}

uint64_t sub_100069080(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    uint64_t v6 = (uint64_t *)((char *)&v12 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v5, v6);
    sub_1000691F0((uint64_t)v6, v5, v3);
    uint64_t v8 = v7;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    os_log_type_t v9 = (void *)swift_slowAlloc();
    sub_10001FB34(0, v5, v9);
    sub_1000691F0((uint64_t)v9, v5, v3);
    uint64_t v8 = v10;
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

void sub_1000691F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = 0;
  int64_t v10 = 0;
  uint64_t v11 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a3 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_20:
    sub_1000697F8(*(void *)(a3 + 48) + *(void *)(v5 + 72) * v17, (uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    if (swift_unknownObjectWeakLoadStrong())
    {
      swift_unknownObjectRelease();
      sub_1000698B8((uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
      *(void *)(v23 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v9++, 1))
      {
        __break(1u);
LABEL_25:
        swift_retain();
        sub_10002DC70();
        return;
      }
    }
    else
    {
      sub_1000698B8((uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper);
    }
  }
  int64_t v18 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v18 >= v15) {
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v18);
  ++v10;
  if (v19) {
    goto LABEL_19;
  }
  int64_t v10 = v18 + 1;
  if (v18 + 1 >= v15) {
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v10);
  if (v19) {
    goto LABEL_19;
  }
  int64_t v10 = v18 + 2;
  if (v18 + 2 >= v15) {
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v10);
  if (v19)
  {
LABEL_19:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_20;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v11 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10006945C(uint64_t a1)
{
  return a1;
}

id sub_100069488(id *a1)
{
  return sub_10005DEE8(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000694A4()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000694EC()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FE64();
  return sub_10005CE3C(v3, v4, v5, v6, v7);
}

void sub_100069598(uint64_t a1)
{
  sub_10005D320(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000695A0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000695DC()
{
  sub_100003A70(&qword_10015CFF8);
  sub_10002FB84();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  sub_10000EFBC();
  v2();
  uint64_t v3 = sub_100043EDC();

  return _swift_deallocObject(v3, v4, v1);
}

uint64_t sub_100069660()
{
  uint64_t v0 = sub_100003A70(&qword_10015CFF8);
  sub_1000301E0(v0);
  uint64_t v1 = sub_100069E00();

  return sub_10005D4C8(v1, v2);
}

uint64_t sub_1000696C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000696D0()
{
  return swift_release();
}

uint64_t sub_1000696D8()
{
  sub_1000086E0();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10000E1FC;
  return sub_10005CB0C(v0);
}

uint64_t sub_100069768()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  sub_10000875C();
  return sub_10005C11C();
}

uint64_t sub_1000697F8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000578CC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100069854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000698B8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_10006990C()
{
  uint64_t v0 = *(unsigned __int8 *)(*(void *)(type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0)
                                      - 8)
                          + 80) | 7;
  swift_release();
  swift_unknownObjectWeakDestroy();
  type metadata accessor for UUID();
  sub_10002FB84();
  sub_10000EFBC();
  v1();
  uint64_t v2 = sub_100057ECC();

  return _swift_deallocObject(v2, v3, v0);
}

uint64_t sub_1000699F8()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for InferenceProviderExtensionConnection.TerminationHandlerWrapper(0);
  sub_1000301E0(v3);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)sub_1000086AC(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_10000ED54;
  return sub_10005AEFC(v2, v5, v6);
}

uint64_t sub_100069AB8()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10000875C();
  return sub_100062D14();
}

void sub_100069B48()
{
  _OSActivity.close()();
}

void sub_100069B74(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_100069B90()
{
  return v0;
}

uint64_t sub_100069BA8()
{
  return swift_retain();
}

uint64_t sub_100069BCC()
{
  return v0 + 8;
}

uint64_t sub_100069BDC()
{
  return v0;
}

uint64_t sub_100069C04()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void sub_100069C1C(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100069C30()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069C60(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069C84()
{
  return v0;
}

uint64_t sub_100069C90()
{
  return v0;
}

void sub_100069CB0()
{
  _OSActivity.close()();
}

uint64_t sub_100069CCC()
{
  return v0 + 8;
}

uint64_t sub_100069CDC()
{
  return swift_arrayDestroy();
}

_WORD *sub_100069CF8(_WORD *result)
{
  void *result = 0;
  return result;
}

uint64_t sub_100069D04()
{
  return swift_arrayDestroy();
}

uint64_t sub_100069D24(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return sub_10001DF20(a1, a2, (uint64_t *)va);
}

uint64_t sub_100069D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006960(a1, 1, 1, a4);
}

uint64_t sub_100069D54(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069D7C()
{
  return v0;
}

uint64_t sub_100069D98(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069DDC()
{
  return type metadata accessor for InferenceProviderDescriptor();
}

uint64_t sub_100069E00()
{
  return v0;
}

uint64_t sub_100069E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4[17] = a2;
  v4[18] = v3;
  return *(void *)(a1 + 48) + *(void *)(v4[12] + 72) * v2;
}

void sub_100069E28(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_100069E40()
{
  *(_WORD *)(v0 + 12) = 2048;
  return swift_release();
}

uint64_t sub_100069E64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_10001DF20(a1, a2, (uint64_t *)va);
}

void sub_100069E7C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

id sub_100069E98(int a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void **)(v1 + 24);
  *(_DWORD *)(v3 + 144) = a1;
  *(void *)(v3 + 136) = v4;
  return v4;
}

uint64_t sub_100069ED8(void *a1)
{
  a1[2] = v1;
  a1[3] = v2;
  a1[4] = v1;
  return swift_retain_n();
}

uint64_t sub_100069EFC()
{
  void *v0 = v1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069F20(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069F44()
{
  return v0;
}

uint64_t sub_100069F5C(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100069F80(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100069FA4(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100069FB4()
{
  return v0;
}

void sub_100069FCC()
{
  _OSActivity.close()();
}

void sub_100069FE8()
{
  _OSActivity.close()();
}

uint64_t sub_10006A004()
{
  return type metadata accessor for InferenceProviderDescriptor();
}

uint64_t sub_10006A01C()
{
  return swift_dynamicCast();
}

uint64_t sub_10006A040()
{
  return swift_slowAlloc();
}

BOOL sub_10006A05C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006A078()
{
  return swift_task_alloc();
}

unint64_t sub_10006A094(float a1)
{
  *uint64_t v1 = a1;
  return sub_100056E08();
}

void sub_10006A0B8()
{
  _OSActivity.close()();
}

uint64_t sub_10006A0D4()
{
  return v0;
}

uint64_t sub_10006A0E0()
{
  return v0;
}

uint64_t sub_10006A0F4()
{
  return v0;
}

uint64_t sub_10006A100(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

uint64_t sub_10006A120()
{
  return swift_arrayDestroy();
}

uint64_t sub_10006A154()
{
  return v0;
}

uint64_t sub_10006A17C()
{
  return type metadata accessor for Logger();
}

void sub_10006A194(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10006A1B4()
{
  return swift_arrayDestroy();
}

uint64_t sub_10006A1D4()
{
  return swift_arrayDestroy();
}

uint64_t sub_10006A1F4()
{
  static BuiltInInferenceProvider.allCases.getter();
  sub_10006ABAC();
  sub_100030194();
  type metadata accessor for OSEligibilityChecker();
  uint64_t v1 = static OSEligibilityChecker.shared.getter();
  type metadata accessor for InferenceProviderManager();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = sub_10006E14C(v0, 1, v1, v2);
  swift_retain();
  sub_10006BB08();
  swift_release();
  return v3;
}

uint64_t sub_10006A268()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015D048);
  sub_100003B18(v0, (uint64_t)qword_10015D048);
  return generalLogger.getter();
}

uint64_t sub_10006A2B4()
{
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  sub_10002FB84();
  __chkstk_darwin(v2, v3);
  sub_10006FE24();
  sub_10006FC7C(v1, v0, (void (*)(void))type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      sub_100003A70(&qword_10015D1A0);
      type metadata accessor for AppExtensionIdentity();
      sub_10002FB84();
      sub_10000EFBC();
      v5();
      return 0;
    }
  }
  else
  {
    sub_10006FA38();
  }
  return 1;
}

double sub_10006A3B8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AppExtensionIdentity();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  int64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for BuiltInInferenceProvider();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  int64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006FC7C(v3, (uint64_t)v24, (void (*)(void))type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_100003A70(&qword_10015D1A0);
      uint64_t v27 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v15, &v24[*(int *)(v26 + 48)], v8);
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v7, v41, v39);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v12, v15, v8);
      uint64_t v28 = type metadata accessor for InferenceProviderExtensionConnection(0);
      swift_allocObject();
      uint64_t v29 = sub_100062514();
      os_log_type_t v30 = v42;
      v42[3] = v28;
      v30[4] = (uint64_t)&off_100153F18;
      *os_log_type_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v8);
    }
    else
    {
      if (qword_10015B0B0 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100003B18(v32, (uint64_t)qword_10015D048);
      BOOL v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Cannot make an instanceID connection from a direct connection", v35, 2u);
        swift_slowDealloc();
      }

      unint64_t v36 = v42;
      v42[4] = 0;
      double result = 0.0;
      *(_OWORD *)unint64_t v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v24, v16);
    type metadata accessor for InferenceProviderManager();
    sub_10006A7E0((uint64_t)v20, v41, v42);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  }
  return result;
}

uint64_t sub_10006A7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor();
  sub_100008678();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BuiltInInferenceProvider();
  sub_100008678();
  __chkstk_darwin(v14, v15);
  sub_100030298();
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v3, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v7);
  uint64_t v17 = type metadata accessor for InferenceProviderExtensionConnection(0);
  swift_allocObject();
  uint64_t result = sub_100062380();
  a3[3] = v17;
  a3[4] = (uint64_t)&off_100153F18;
  *a3 = result;
  return result;
}

void sub_10006A928(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for InferenceProviderDescriptor.Instance();
  sub_100008678();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100030298();
  InferenceProviderDescriptor.instance.getter();
  int v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v3, v7);
  if (v12 == enum case for InferenceProviderDescriptor.Instance.specificInstance(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v3, v7);
    uint64_t v14 = *v3;
    uint64_t v13 = v3[1];
    uint64_t v15 = *(void *)(v4
                    + *(int *)(type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0) + 24));
    swift_bridgeObjectRetain();
    sub_1000143C8(v14, v13, v15, (uint64_t)&v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      sub_10000831C(&v17, (uint64_t)v19);
LABEL_7:
      sub_10000831C(v19, a2);
      return;
    }
    sub_10002EB50((uint64_t)&v17, &qword_10015C018);
    sub_10006A3B8(a1, (uint64_t *)&v17);
    if (v18)
    {
      sub_10000831C(&v17, (uint64_t)v19);
      sub_100008334((uint64_t)v19, (uint64_t)&v17);
      sub_1000D94E4((uint64_t)&v17, v14, v13);
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    sub_10002EB50((uint64_t)&v17, &qword_10015C018);
    sub_10006FE3C();
  }
  else if (v12 == enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:))
  {
    uint64_t v16 = v4 + *(int *)(type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0) + 20);
    sub_10006F9D8(v16, (uint64_t)&v17, &qword_10015C018);
    if (v18) {
      goto LABEL_6;
    }
    sub_10002EB50((uint64_t)&v17, &qword_10015C018);
    sub_10006A3B8(a1, (uint64_t *)v19);
    sub_10006F90C((uint64_t)v19, v16);
    sub_10006FCD0((uint64_t)v19, a2, &qword_10015C018);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_10006ABAC()
{
  uint64_t v1 = sub_100030194();
  uint64_t v2 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(v1);
  sub_100008678();
  uint64_t v70 = v3;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v73 = (char *)v62 - v10;
  sub_100030514();
  __chkstk_darwin(v11, v12);
  uint64_t v72 = (uint64_t)v62 - v13;
  uint64_t v14 = type metadata accessor for BuiltInInferenceProvider();
  sub_100008678();
  uint64_t v16 = v15;
  __chkstk_darwin(v17, v18);
  sub_100030158();
  uint64_t v71 = v19;
  sub_100030514();
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)v62 - v22;
  uint64_t v74 = v2;
  uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v25 = *(void *)(v0 + 16);
  if (v25)
  {
    uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
    uint64_t v26 = v16 + 16;
    uint64_t v69 = v27;
    unint64_t v28 = (*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64);
    v62[1] = v0;
    uint64_t v29 = (char *)(v0 + v28);
    uint64_t v67 = v8;
    uint64_t v68 = (void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    uint64_t v63 = *(void *)(v26 + 56);
    uint64_t v64 = v26 - 8;
    uint64_t v65 = v23;
    uint64_t v66 = v26;
    while (1)
    {
      uint64_t v75 = v25;
      os_log_type_t v30 = v69;
      v69((uint64_t)v23, v29, v14);
      uint64_t v31 = BuiltInInferenceProvider.rawValue.getter();
      uint64_t v33 = v32;
      uint64_t v34 = v71;
      v30(v71, v23, v14);
      uint64_t v36 = (uint64_t)v73;
      uint64_t v35 = v74;
      uint64_t v37 = (uint64_t)&v73[*(int *)(v74 + 20)];
      *(void *)(v37 + 32) = 0;
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)(v37 + 16) = 0u;
      uint64_t v38 = *(int *)(v35 + 24);
      sub_100003A70(&qword_10015BB38);
      *(void *)(v36 + v38) = Dictionary.init(dictionaryLiteral:)();
      uint64_t v39 = v34;
      uint64_t v40 = v14;
      (*v68)(v36, v39, v14);
      type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
      swift_storeEnumTagMultiPayload();
      sub_10002EB50(v37, &qword_10015C018);
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)(v37 + 16) = 0u;
      *(void *)(v37 + 32) = 0;
      uint64_t v41 = v72;
      sub_10006F974(v36, v72);
      sub_10006F974(v41, (uint64_t)v67);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v76 = v24;
      unint64_t v43 = sub_10001E648(v31, v33);
      uint64_t v45 = *(void *)(v24 + 16);
      BOOL v46 = (v44 & 1) == 0;
      Swift::Int v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        break;
      }
      unint64_t v48 = v43;
      char v49 = v44;
      sub_100003A70(&qword_10015D2F8);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v47))
      {
        unint64_t v50 = sub_10001E648(v31, v33);
        if ((v49 & 1) != (v51 & 1)) {
          goto LABEL_15;
        }
        unint64_t v48 = v50;
      }
      uint64_t v24 = v76;
      if (v49)
      {
        uint64_t v52 = sub_10006FE4C();
        sub_10006FD2C(v52, v53);
      }
      else
      {
        *(void *)(v76 + 8 * (v48 >> 6) + 64) |= 1 << v48;
        uint64_t v54 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v48);
        *uint64_t v54 = v31;
        v54[1] = v33;
        uint64_t v55 = sub_10006FE4C();
        sub_10006F974(v55, v56);
        uint64_t v57 = *(void *)(v24 + 16);
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_14;
        }
        *(void *)(v24 + 16) = v59;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = v65;
      uint64_t v14 = v40;
      sub_10000EFBC();
      v60();
      v29 += v63;
      uint64_t v25 = v75 - 1;
      if (v75 == 1) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

uint64_t sub_10006AFB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_100003A70(&qword_10015D2F0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (void *)((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v33 - v15;
  uint64_t v17 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  sub_10002FB84();
  __chkstk_darwin(v18, v19);
  sub_10003094C();
  uint64_t v20 = *v5;
  swift_bridgeObjectRetain();
  sub_1000144E4(a1, a2, v20);
  swift_bridgeObjectRelease();
  if (sub_100006AE8((uint64_t)v16, 1, v17) == 1)
  {
    sub_10002EB50((uint64_t)v16, &qword_10015D2F0);
  }
  else
  {
    sub_10006F974((uint64_t)v16, v4);
    char v21 = sub_10006A2B4();
    uint64_t result = sub_10006FA38();
    if ((v21 & 1) == 0) {
      return result;
    }
  }
  if (qword_10015B0B0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100003B18(v23, (uint64_t)qword_10015D048);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = sub_100030314();
    v33[1] = v5;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = sub_10002FF90();
    v33[0] = a3;
    uint64_t v34 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    v33[2] = sub_10001DF20(a1, a2, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Found inference provider extension: %s", v27, 0xCu);
    swift_arrayDestroy();
    a3 = v33[0];
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v29 = (char *)v13 + *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
  type metadata accessor for AppExtensionIdentity();
  sub_10002FB84();
  (*(void (**)(char *, uint64_t))(v30 + 16))(v29, a3);
  uint64_t v31 = (uint64_t)v13 + *(int *)(v17 + 20);
  sub_10006FE3C();
  uint64_t v32 = *(int *)(v17 + 24);
  swift_bridgeObjectRetain_n();
  sub_100003A70(&qword_10015BB38);
  *(uint64_t *)((char *)v13 + v32) = Dictionary.init(dictionaryLiteral:)();
  *uint64_t v13 = a1;
  v13[1] = a2;
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  swift_storeEnumTagMultiPayload();
  sub_10002EB50(v31, &qword_10015C018);
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(void *)(v31 + 32) = 0;
  sub_100006960((uint64_t)v13, 0, 1, v17);
  return sub_1000D928C((uint64_t)v13, a1, a2);
}

void sub_10006B374(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = InferenceProviderDescriptor.id.getter();
  uint64_t v6 = sub_10006B434(v28, v4, v5);
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  uint64_t v10 = sub_100006AE8(v8, 1, v9);
  if (v10)
  {
    uint64_t v18 = sub_10006FE7C(v10, v11, v12, v13, v14, v15, v16, v17, v28[0]);
    v6((void **)v18);
    swift_bridgeObjectRelease();
    sub_10006FE3C();
  }
  else
  {
    sub_10006A928(a1, a2);
    uint64_t v27 = sub_10006FE7C(v19, v20, v21, v22, v23, v24, v25, v26, v28[0]);
    v6((void **)v27);
    swift_bridgeObjectRelease();
  }
}

void (*sub_10006B434(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_10006DAB8(v6, a2, a3);
  return sub_10006B4B4;
}

void sub_10006B4B4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_10006FEB0();
  v3(v2);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_10006B4FC(uint64_t a1)
{
  uint64_t v49 = sub_100003A70(&qword_10015D338);
  uint64_t v3 = __chkstk_darwin(v49, v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (uint64_t *)((char *)&v44 - v7);
  sub_10002E2A0(v59, a1);
  uint64_t v50 = v59[0];
  uint64_t v45 = v59[1];
  uint64_t v60 = v59[3];
  unint64_t v9 = v59[4];
  uint64_t v48 = (unint64_t)(v59[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v10 = _swiftEmptyArrayStorage;
  long long v46 = xmmword_100128650;
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v60 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v50 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v50 + 48) + 16 * v12);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    uint64_t v22 = v17 + *(void *)(*(void *)(v21 - 8) + 72) * v12;
    uint64_t v23 = v49;
    sub_10006FC7C(v22, (uint64_t)v8 + *(int *)(v49 + 48), (void (*)(void))type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    *uint64_t v8 = v20;
    v8[1] = v19;
    sub_10006FCD0((uint64_t)v8, (uint64_t)v5, &qword_10015D338);
    sub_10006F9D8((uint64_t)&v5[*(int *)(v23 + 48) + *(int *)(v21 + 20)], (uint64_t)&v55, &qword_10015C018);
    if (v57)
    {
      sub_10000831C(&v55, (uint64_t)&v51);
      sub_100003A70(&qword_10015D340);
      uint64_t v24 = (void *)swift_allocObject();
      *((_OWORD *)v24 + 1) = v46;
      sub_10000831C(&v51, (uint64_t)(v24 + 4));
    }
    else
    {
      uint64_t v24 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_bridgeObjectRetain();
    sub_100116FD4(v25, v26, v27, v28, v29, v30, v31, v32, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50, v51, *((uint64_t *)&v51 + 1), v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      v57,
      v58);
    swift_bridgeObjectRelease();
    *(void *)&long long v55 = v24;
    sub_100116A08();
    uint64_t v33 = v55;
    sub_10002EB50((uint64_t)v5, &qword_10015D338);
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = v10[2];
    if (__OFADD__(v35, v34)) {
      break;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v35 + v34 > v10[3] >> 1)
    {
      sub_1000F5CA0();
      uint64_t v10 = v36;
    }
    if (*(void *)(v33 + 16))
    {
      uint64_t v37 = v10[2];
      if ((v10[3] >> 1) - v37 < v34) {
        goto LABEL_42;
      }
      unint64_t v38 = (unint64_t)&v10[5 * v37 + 4];
      if (v33 + 32 < v38 + 40 * v34 && v38 < v33 + 32 + 40 * v34) {
        goto LABEL_45;
      }
      sub_100003A70(&qword_10015BB38);
      swift_arrayInitWithCopy();
      if (v34)
      {
        uint64_t v40 = v10[2];
        BOOL v41 = __OFADD__(v40, v34);
        uint64_t v42 = v40 + v34;
        if (v41) {
          goto LABEL_43;
        }
        v10[2] = v42;
      }
    }
    else if (v34)
    {
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v13 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_44;
    }
    if (v13 >= v48) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v45 + 8 * v13);
    uint64_t v15 = v60 + 1;
    if (!v14)
    {
      uint64_t v15 = v60 + 2;
      if (v60 + 2 >= v48) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v45 + 8 * v15);
      if (!v14)
      {
        uint64_t v15 = v60 + 3;
        if (v60 + 3 >= v48) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v45 + 8 * v15);
        if (!v14)
        {
          uint64_t v15 = v60 + 4;
          if (v60 + 4 >= v48) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v45 + 8 * v15);
          if (!v14)
          {
            uint64_t v15 = v60 + 5;
            if (v60 + 5 >= v48) {
              goto LABEL_39;
            }
            unint64_t v14 = *(void *)(v45 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v60 + 6;
              while (v16 < v48)
              {
                unint64_t v14 = *(void *)(v45 + 8 * v16++);
                if (v14)
                {
                  uint64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
LABEL_39:
              swift_release();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    uint64_t v60 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t InferenceProviderManager.allConnections.getter()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10006B4FC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t InferenceProviderManager.__allocating_init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006BA2C(a1, a2, a3, sub_10006E024);
}

uint64_t InferenceProviderManager.init(connectionCollection:waitingForFirstUpdate:osEligibilityChecker:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006BA2C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E204);
}

uint64_t sub_10006BA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  sub_1000080E0(a3, v10);
  sub_100008678();
  __chkstk_darwin(v12, v13);
  sub_10003094C();
  (*(void (**)(uint64_t))(v14 + 16))(v5);
  uint64_t v15 = a4(a1, a2, v5, v4, v10, v11);
  sub_100008130(a3);
  return v15;
}

uint64_t sub_10006BB08()
{
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v2 - 8, v3);
  sub_10006FE24();
  type metadata accessor for TaskPriority();
  sub_10006FE90();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  uint64_t v4[4] = v1;
  swift_retain();
  sub_100003730(v0, (uint64_t)&unk_10015D318, (uint64_t)v4);
  swift_release();
  sub_10006FE90();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  swift_retain();
  sub_100003730(v0, (uint64_t)&unk_10015D328, (uint64_t)v5);
  return swift_release();
}

uint64_t sub_10006BC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for _AppExtensionQuery.Results();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for _AppExtensionQuery.Results.AsyncIterator();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for _AppExtensionQuery();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_10006BD8C, 0, 0);
}

uint64_t sub_10006BD8C()
{
  uint64_t v14 = v0;
  if (qword_10015B0B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[16] = sub_100003B18(v1, (uint64_t)qword_10015D048);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_100030314();
    uint64_t v13 = sub_10002FF90();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for InferenceProviderXPCSender();
    uint64_t v5 = static InferenceProviderXPCSender.extensionPointIdentifier.getter();
    v0[5] = sub_10001DF20(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Started query for extension point: %s", v4, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  uint64_t v8 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[7];
  type metadata accessor for InferenceProviderXPCSender();
  static InferenceProviderXPCSender.extensionPointIdentifier.getter();
  _AppExtensionQuery.init(extensionPointIdentifier:)();
  _AppExtensionQuery.results.getter();
  _AppExtensionQuery.Results.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_10006FBD0(&qword_10015D330, 255, (void (*)(uint64_t))&type metadata accessor for _AppExtensionQuery.Results.AsyncIterator);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[17] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10006C000;
  uint64_t v11 = sub_10006FE64();
  return dispatch thunk of AsyncIteratorProtocol.next()(v11);
}

uint64_t sub_10006C000()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *os_log_type_t v3 = v2;
  *(void *)(v4 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = sub_10006C3AC;
  }
  else {
    uint64_t v5 = sub_10006C0E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10006C0E4()
{
  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return sub_10000EFE0((uint64_t)sub_10006C104, 0);
}

uint64_t sub_10006C104()
{
  sub_1000086EC();
  if (*(void *)(v0 + 152))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    return _swift_task_switch(sub_10006C1D0, v1, 0);
  }
  else
  {
    sub_1000436AC();
    v2();
    uint64_t v3 = sub_10006FDC4();
    v4(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v5();
  }
}

uint64_t sub_10006C1D0()
{
  sub_1000086EC();
  sub_10006C900(*(void *)(v0 + 152));
  swift_bridgeObjectRelease();
  sub_10006FBD0(&qword_10015D330, 255, (void (*)(uint64_t))&type metadata accessor for _AppExtensionQuery.Results.AsyncIterator);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006C000;
  uint64_t v2 = sub_10006FE64();
  return dispatch thunk of AsyncIteratorProtocol.next()(v2);
}

uint64_t sub_10006C2C0()
{
  sub_1000086E0();
  sub_10006C900((uint64_t)_swiftEmptyArrayStorage);
  return _swift_task_switch(sub_10006C32C, 0, 0);
}

uint64_t sub_10006C32C()
{
  sub_1000086EC();
  swift_errorRelease();
  uint64_t v0 = sub_10006FDC4();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v2();
}

uint64_t sub_10006C3AC()
{
  sub_1000086E0();
  *(void *)(v0 + 24) = *(void *)(v0 + 144);
  sub_100003A70(&qword_10015B468);
  swift_willThrowTypedImpl();
  return _swift_task_switch(sub_10006C434, 0, 0);
}

uint64_t sub_10006C434()
{
  sub_1000436AC();
  v1();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_100030314();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error from _AppExtensionQuery: %@", v4, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 48);

  return _swift_task_switch(sub_10006C2C0, v7, 0);
}

uint64_t sub_10006C5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  uint64_t v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_10006C698, 0, 0);
}

uint64_t sub_10006C698()
{
  sub_1000086E0();
  static Clock<>.continuous.getter();
  os_log_type_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10015FEB8 + dword_10015FEB8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006C75C;
  return v3(5000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10006C75C()
{
  sub_1000086EC();
  sub_100008660();
  os_log_type_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[4];
    uint64_t v6 = v3[5];
    uint64_t v8 = v3[3];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = sub_10006C884;
    uint64_t v10 = 0;
  }
  else
  {
    sub_1000436AC();
    v11();
    uint64_t v10 = v3[2];
    uint64_t v9 = sub_10006C89C;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_10006C884()
{
  return sub_10000EFE0((uint64_t)sub_10006C89C, *(void *)(v0 + 16));
}

uint64_t sub_10006C89C()
{
  sub_1000086E0();
  sub_10006D238();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10006C900(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v93 = sub_100003A70(&qword_10015B9D0);
  sub_100008678();
  uint64_t v81 = v4;
  __chkstk_darwin(v5, v6);
  sub_100030144();
  uint64_t v94 = v7;
  uint64_t v77 = type metadata accessor for AppExtensionIdentity();
  sub_100008678();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100030144();
  uint64_t v76 = v12;
  uint64_t v13 = type metadata accessor for _AppExtensionIdentity();
  sub_100008678();
  uint64_t v91 = v14;
  __chkstk_darwin(v15, v16);
  sub_100030158();
  uint64_t v83 = v17;
  sub_100030514();
  __chkstk_darwin(v18, v19);
  v75[3] = (char *)v75 - v20;
  sub_100030514();
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)v75 - v23;
  uint64_t v25 = sub_100003A70(&qword_10015D300);
  __chkstk_darwin(v25 - 8, v26);
  uint64_t v28 = (char *)v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = *(void *)(a1 + 16);
  p_ivar_base_size = &MemoryPressureObserver.ivar_base_size;
  if (v29)
  {
    unint64_t v79 = v2;
    v75[2] = v2 + 112;
    uint64_t v90 = a1 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
    uint64_t v92 = v91 + 16;
    uint64_t v89 = (void (**)(char *, char *, uint64_t))(v91 + 32);
    uint64_t v87 = v91 + 8;
    v75[1] = v9 + 8;
    uint64_t v78 = a1;
    swift_bridgeObjectRetain();
    int v80 = 0;
    unint64_t v31 = 0;
    v75[0] = v29 - 1;
    *(void *)&long long v32 = 136315138;
    long long v84 = v32;
    unsigned int v82 = (char *)&type metadata for Any + 8;
    uint64_t v86 = v24;
    uint64_t v85 = v28;
    unint64_t v88 = v29;
LABEL_3:
    unint64_t v2 = v31;
    while (1)
    {
      if (v2 >= v29)
      {
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v33 = *(void (**)(void))(v91 + 16);
      sub_10006FDB0();
      v33();
      sub_100006960((uint64_t)v28, 0, 1, v13);
      if (sub_100006AE8((uint64_t)v28, 1, v13) == 1) {
        break;
      }
      (*v89)(v24, v28, v13);
      uint64_t v34 = _AppExtensionIdentity.attributes.getter();
      type metadata accessor for InferenceProviderXPCSender();
      uint64_t v35 = static InferenceProviderXPCSender.inferenceProviderIdentifierKey.getter();
      if (*(void *)(v34 + 16) && (unint64_t v37 = sub_10001E648(v35, v36), (v38 & 1) != 0))
      {
        sub_10002E3C8(*(void *)(v34 + 56) + 32 * v37, (uint64_t)&v97);
      }
      else
      {
        long long v97 = 0u;
        long long v98 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v98 + 1))
      {
        sub_10006FA28(&v97, &v99);
        sub_10002E3C8((uint64_t)&v99, (uint64_t)&v97);
        if (swift_dynamicCast())
        {
          uint64_t v56 = v95[0];
          unint64_t v57 = v95[1];
          sub_10006FDB0();
          v33();
          uint64_t v58 = v76;
          uint64_t v24 = v86;
          AppExtensionIdentity.init(_:)();
          swift_beginAccess();
          sub_10006AFB4(v56, v57, v58);
          sub_10000EFBC();
          v59();
          swift_endAccess();
          swift_bridgeObjectRelease();
          sub_100008130((uint64_t)&v99);
          sub_10000EFBC();
          v60();
          unint64_t v31 = v2 + 1;
          int v80 = 1;
          unint64_t v29 = v88;
          if (v75[0] != v2) {
            goto LABEL_3;
          }
          sub_10006FD90();
          swift_bridgeObjectRelease();
          sub_10006FEC4();
          goto LABEL_34;
        }
        if (*((void *)p_ivar_base_size + 22) != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100003B18(v39, (uint64_t)qword_10015D048);
        sub_10002E3C8((uint64_t)&v99, (uint64_t)&v97);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = sub_100030314();
          uint64_t v96 = sub_10002FF90();
          *(_DWORD *)uint64_t v42 = v84;
          sub_10002E3C8((uint64_t)&v97, (uint64_t)v95);
          uint64_t v43 = String.init<A>(describing:)();
          *(void *)(v42 + 4) = sub_10001DF20(v43, v44, &v96);
          swift_bridgeObjectRelease();
          sub_100008130((uint64_t)&v97);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Found inference provider extension, but with invalid InferenceProviderIdentifier value: %s", (uint8_t *)v42, 0xCu);
          p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
          swift_arrayDestroy();
          uint64_t v28 = v85;
          uint64_t v24 = v86;
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_100008130((uint64_t)&v97);
        }
        sub_100008130((uint64_t)&v99);
        sub_10000EFBC();
        v54();
        unint64_t v29 = v88;
      }
      else
      {
        sub_10002EB50((uint64_t)&v97, &qword_10015D308);
        if (*((void *)p_ivar_base_size + 22) != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        long long v46 = (void (*)(uint64_t))sub_100003B18(v45, (uint64_t)qword_10015D048);
        uint64_t v47 = v86;
        sub_10006FDB0();
        v33();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = sub_100030314();
          *(void *)&long long v99 = sub_10002FF90();
          *(_DWORD *)uint64_t v50 = v84;
          uint64_t v51 = _AppExtensionIdentity.bundleIdentifier.getter();
          long long v46 = (void (*)(uint64_t))v52;
          *(void *)(v50 + 4) = sub_10001DF20(v51, v52, (uint64_t *)&v99);
          swift_bridgeObjectRelease();
          uint64_t v53 = sub_10006FDE4();
          v46(v53);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Found inference provider extension %s, but it lacks an InferenceProviderIdentifier key", (uint8_t *)v50, 0xCu);
          swift_arrayDestroy();
          p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          uint64_t v55 = sub_10006FDE4();
          v46(v55);
        }
        ((void (*)(char *, uint64_t))v46)(v47, v13);
        uint64_t v24 = v47;
        uint64_t v28 = v85;
        unint64_t v29 = v88;
      }
      if (v29 == ++v2)
      {
        sub_10006FD90();
        break;
      }
    }
    swift_bridgeObjectRelease();
    sub_10006FEC4();
    if (v80) {
      goto LABEL_34;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10006FD90();
    swift_bridgeObjectRelease();
    uint64_t v13 = v81;
  }
  if (*((void *)p_ivar_base_size + 22) != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v61 = type metadata accessor for Logger();
  sub_100003B18(v61, (uint64_t)qword_10015D048);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Query found no inference provider extensions", v64, 2u);
    sub_10000ED7C();
  }

LABEL_34:
  *(unsigned char *)(v2 + 120) = 0;
  uint64_t v65 = (void *)(v2 + 128);
  swift_beginAccess();
  uint64_t v66 = *(void *)(v2 + 128);
  uint64_t v67 = *(void *)(v66 + 16);
  if (v67)
  {
    uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    uint64_t v69 = v13 + 16;
    uint64_t v70 = v66 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v71 = *(void *)(v69 + 56);
    swift_bridgeObjectRetain();
    uint64_t v73 = v93;
    uint64_t v72 = v94;
    do
    {
      v68(v72, v70, v73);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(uint64_t, uint64_t))(v69 - 8))(v72, v73);
      v70 += v71;
      --v67;
    }
    while (v67);
    swift_bridgeObjectRelease();
  }
  *uint64_t v65 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

void sub_10006D238()
{
  if (*(unsigned char *)(v0 + 120) == 1)
  {
    if (qword_10015B0B0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100003B18(v1, (uint64_t)qword_10015D048);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Inference provider extension query is stalling! Still waiting to discover XPC inference providers.", v3, 2u);
      sub_10000ED7C();
    }
  }
}

uint64_t sub_10006D334(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_10000EFE0((uint64_t)sub_10006D354, v2);
}

uint64_t sub_10006D354()
{
  sub_1000086EC();
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v3 = v1[20];
  uint64_t v2 = v1[21];
  sub_10000853C(v1 + 17, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006D40C;
  return OSEligibilityChecking.isGreymatterEligible.getter(v3, v2);
}

uint64_t sub_10006D40C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 80) = v5;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D4F4, v2, 0);
}

uint64_t sub_10006D4F4()
{
  if ((*(unsigned char *)(v0 + 80) & 1) == 0)
  {
    uint64_t v1 = *(void **)(*(void *)(v0 + 56) + 176);
    swift_bridgeObjectRetain();
    uint64_t v2 = InferenceProviderDescriptor.id.getter();
    char v4 = sub_1000123E4(v2, v3, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t v5 = type metadata accessor for ModelManagerError();
      sub_10006FBD0((unint64_t *)&qword_10015B410, 255, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for ModelManagerError.deviceNotEligible(_:), v5);
      swift_willThrow();
      sub_10000EF7C();
LABEL_13:
      return v7();
    }
  }
  if (*(unsigned char *)(*(void *)(v0 + 56) + 120) != 1)
  {
    uint64_t v15 = *(void *)(v0 + 40);
    uint64_t v14 = *(void *)(v0 + 48);
    sub_10006FE00();
    sub_10006B374(v14, v15);
    swift_endAccess();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  if (qword_10015B0B0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003B18(v8, (uint64_t)qword_10015D048);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Waiting for first extension query to finish", v11, 2u);
    sub_10000ED7C();
  }

  sub_10006FBD0(&qword_10015D2E8, v12, (void (*)(uint64_t))type metadata accessor for InferenceProviderManager);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10006D81C;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10006D81C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *v0;
  sub_1000086D0();
  *char v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D8FC, v2, 0);
}

uint64_t sub_10006D8FC()
{
  sub_1000086EC();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  sub_10006FE00();
  sub_10006B374(v1, v2);
  swift_endAccess();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10006D984(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  sub_1000F5760();
  uint64_t v4 = *(void *)(*(void *)(a2 + 128) + 16);
  sub_1000F581C(v4);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(v5 + 16) = v4 + 1;
  uint64_t v6 = sub_100003A70(&qword_10015B9D0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess();
}

uint64_t InferenceProviderManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100008130(v0 + 136);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t InferenceProviderManager.__deallocating_deinit()
{
  InferenceProviderManager.deinit();

  return _swift_defaultActor_deallocate(v0);
}

void (*sub_10006DAB8(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10006DDD8(v6);
  v6[10] = sub_10006DBCC(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10006DB64;
}

void sub_10006DB64(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_10006FEB0();
  v2(v3);

  free(v1);
}

void (*sub_10006DBCC(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  os_log_type_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  *os_log_type_t v10 = a2;
  uint64_t v11 = sub_100003A70(&qword_10015D2F0);
  uint64_t v12 = malloc(*(void *)(*(void *)(v11 - 8) + 64));
  uint64_t v10[3] = v12;
  uint64_t v13 = *v4;
  unint64_t v14 = sub_10001E648(a2, a3);
  *((unsigned char *)v10 + 40) = v15 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_100003A70(&qword_10015D2F8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
  {
    unint64_t v21 = sub_10001E648(a2, a3);
    if ((v20 & 1) == (v22 & 1))
    {
      unint64_t v19 = v21;
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v19;
  if (v20)
  {
    uint64_t v23 = *(void *)(*v5 + 56);
    uint64_t v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    sub_10006F974(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v19, (uint64_t)v12);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v24 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    uint64_t v25 = 1;
  }
  sub_100006960((uint64_t)v12, v25, 1, v24);
  return sub_10006DD74;
}

void sub_10006DD74(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[3];
  sub_10006DE14((uint64_t)v2, *((unsigned char *)*a1 + 40), (void **)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_10002EB50((uint64_t)v2, &qword_10015D2F0);
  free(v2);

  free(v1);
}

uint64_t (*sub_10006DDD8(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10006DE08;
}

uint64_t sub_10006DE08(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10006DE14(uint64_t a1, char a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v10 = sub_100003A70(&qword_10015D2F0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  unint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  char v22 = (char *)&v25 - v21;
  sub_10006F9D8(a1, (uint64_t)v13, &qword_10015D2F0);
  if (sub_100006AE8((uint64_t)v13, 1, v14) == 1)
  {
    uint64_t result = sub_10002EB50((uint64_t)v13, &qword_10015D2F0);
    if (a2)
    {
      swift_arrayDestroy();
      return _NativeDictionary._delete(at:)();
    }
  }
  else
  {
    sub_10006F974((uint64_t)v13, (uint64_t)v22);
    uint64_t v24 = *a3;
    if (a2)
    {
      return sub_10006F974((uint64_t)v22, v24[7] + *(void *)(v15 + 72) * a4);
    }
    else
    {
      sub_10006F974((uint64_t)v22, (uint64_t)v19);
      sub_1000D1198(a4, v25, v26, (uint64_t)v19, v24);
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t sub_10006E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9 = a2;
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for InferenceProviderManager();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  uint64_t v15 = sub_10006E204(a1, v9, (uint64_t)v13, v14, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, a5);
  return v15;
}

uint64_t sub_10006E14C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v9[3] = type metadata accessor for OSEligibilityChecker();
  v9[4] = &protocol witness table for OSEligibilityChecker;
  v9[0] = a3;
  swift_defaultActor_initialize();
  *(void *)(a4 + 128) = &_swiftEmptyArrayStorage;
  *(void *)(a4 + 176) = &off_100152CE0;
  *(void *)(a4 + 112) = a1;
  *(unsigned char *)(a4 + 120) = a2;
  sub_100008334((uint64_t)v9, a4 + 136);
  sub_10000853C((void *)(a4 + 136), *(void *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_100008130((uint64_t)v9);
  return a4;
}

uint64_t sub_10006E204(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[3] = a5;
  v13[4] = a6;
  uint64_t v11 = sub_10006FC18(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v11, a3, a5);
  swift_defaultActor_initialize();
  *(void *)(a4 + 128) = _swiftEmptyArrayStorage;
  *(void *)(a4 + 176) = &off_100152DB8;
  *(void *)(a4 + 112) = a1;
  *(unsigned char *)(a4 + 120) = a2;
  sub_100008334((uint64_t)v13, a4 + 136);
  sub_10000853C((void *)(a4 + 136), *(void *)(a4 + 160));
  OSEligibilityChecking.prewarmGreymatter()();
  sub_100008130((uint64_t)v13);
  return a4;
}

uint64_t type metadata accessor for InferenceProviderManager()
{
  return self;
}

ValueMetadata *type metadata accessor for InferenceProviderManager.ConnectionCollection()
{
  return &type metadata for InferenceProviderManager.ConnectionCollection;
}

uint64_t *sub_10006E324(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    swift_bridgeObjectRetain();
    uint64_t v12 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    uint64_t v9 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(uint64_t *)((char *)a2 + v16 + 24);
  if (v19)
  {
    uint64_t v20 = *((void *)v18 + 4);
    *((void *)v17 + 3) = v19;
    *((void *)v17 + 4) = v20;
    (**(void (***)(void))(v19 - 8))();
  }
  else
  {
    long long v21 = *((_OWORD *)v18 + 1);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v21;
    *((void *)v17 + 4) = *((void *)v18 + 4);
  }
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015D2B0);
}

uint64_t sub_10006E53C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = a1 + *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v7 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v5 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  if (*(void *)(v8 + 24)) {
    sub_100008130(v8);
  }

  return swift_bridgeObjectRelease();
}

void *sub_10006E638(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
    uint64_t v10 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    goto LABEL_5;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
  if (v17)
  {
    uint64_t v18 = *((void *)v16 + 4);
    *((void *)v15 + 3) = v17;
    *((void *)v15 + 4) = v18;
    (**(void (***)(void))(v17 - 8))();
  }
  else
  {
    long long v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
    *((void *)v15 + 4) = *((void *)v16 + 4);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10006E7E0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10006FA38();
    uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for AppExtensionIdentity();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      goto LABEL_6;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for BuiltInInferenceProvider();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_8:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13 + 24);
  if (!*(void *)((char *)a1 + v13 + 24))
  {
    if (v16)
    {
      *(void *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = *((void *)v15 + 4);
      (**(void (***)(uint64_t, char *))(v16 - 8))(v14, v15);
      goto LABEL_15;
    }
LABEL_14:
    long long v17 = *(_OWORD *)v15;
    long long v18 = *((_OWORD *)v15 + 1);
    *(void *)(v14 + 32) = *((void *)v15 + 4);
    *(_OWORD *)uint64_t v14 = v17;
    *(_OWORD *)(v14 + 16) = v18;
    goto LABEL_15;
  }
  if (!v16)
  {
    sub_100008130(v14);
    goto LABEL_14;
  }
  sub_10006E9F0((uint64_t *)v14, (uint64_t *)v15);
LABEL_15:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_10006E9F0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          void *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

_OWORD *sub_10006EC20(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_7;
    }
    uint64_t v8 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
LABEL_7:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  long long v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((void *)v15 + 4) = *((void *)v16 + 4);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  return a1;
}

_OWORD *sub_10006ED80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10006FA38();
    uint64_t v6 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for AppExtensionIdentity();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      goto LABEL_6;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for BuiltInInferenceProvider();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_8:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  if (*(void *)((char *)a1 + v13 + 24)) {
    sub_100008130((uint64_t)a1 + v13);
  }
  long long v15 = *(_OWORD *)((char *)a2 + v13 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)((char *)a2 + v13);
  *((_OWORD *)v14 + 1) = v15;
  *((void *)v14 + 4) = *(void *)((char *)a2 + v13 + 32);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006EF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006EF34);
}

uint64_t sub_10006EF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100030194();
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(v6);
  sub_100057B10();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    return sub_100006AE8(v3, a2, v7);
  }
  else
  {
    unint64_t v10 = *(void *)(v3 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006EFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006EFD0);
}

void sub_10006EFD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(0);
  sub_100057B10();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_100006960(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015D200);
}

uint64_t sub_10006F078()
{
  uint64_t result = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group.Prototype(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10006F11C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      uint64_t v11 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for AppExtensionIdentity();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = type metadata accessor for BuiltInInferenceProvider();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10006F28C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_bridgeObjectRelease();
    a1 += *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v3 = type metadata accessor for AppExtensionIdentity();
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for BuiltInInferenceProvider();
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void *sub_10006F334(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    uint64_t v9 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10006F460(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10006FA38();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v8 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for AppExtensionIdentity();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for BuiltInInferenceProvider();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10006F5B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AppExtensionIdentity();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for BuiltInInferenceProvider();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *sub_10006F6E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10006FA38();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(sub_100003A70(&qword_10015D1A0) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for AppExtensionIdentity();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for BuiltInInferenceProvider();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10006F82C()
{
  uint64_t result = type metadata accessor for BuiltInInferenceProvider();
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for AppExtensionIdentity();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006F904(uint64_t a1)
{
  return sub_10006D984(a1, v1);
}

uint64_t sub_10006F90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015C018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F974(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F9D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FB84();
  uint64_t v4 = sub_100044790();
  v5(v4);
  return a2;
}

_OWORD *sub_10006FA28(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10006FA38()
{
  uint64_t v1 = sub_100030194();
  v2(v1);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return v0;
}

uint64_t sub_10006FA8C()
{
  sub_1000086EC();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  uint64_t v2 = sub_10000875C();
  return sub_10006BC14(v2, v3, v4, v5);
}

uint64_t sub_10006FB30()
{
  sub_1000086EC();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000E1FC;
  uint64_t v2 = sub_10000875C();
  return sub_10006C5D8(v2, v3, v4, v5);
}

uint64_t sub_10006FBD0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10006FC18(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10006FC7C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FB84();
  uint64_t v4 = sub_100044790();
  v5(v4);
  return a2;
}

uint64_t sub_10006FCD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FB84();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_10006FD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006FD90()
{
  return sub_100006960(v1, 1, 1, v0);
}

uint64_t sub_10006FDC4()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_10006FDE4()
{
  return v0;
}

uint64_t sub_10006FE00()
{
  return swift_beginAccess();
}

double sub_10006FE3C()
{
  *(void *)(v0 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t sub_10006FE4C()
{
  return v0;
}

uint64_t sub_10006FE64()
{
  return v0;
}

uint64_t *sub_10006FE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_10006FE90()
{
  return sub_100006960(v0, 1, 1, v1);
}

uint64_t sub_10006FEB0()
{
  return v0;
}

void sub_10006FED8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v88 = a3;
  uint64_t v87 = a2;
  uint64_t v4 = sub_100003A70(&qword_10015BFF8);
  __chkstk_darwin(v4 - 8, v5);
  sub_100030144();
  uint64_t v81 = v6;
  uint64_t v85 = type metadata accessor for InferenceError.Context();
  sub_100008678();
  uint64_t v80 = v7;
  __chkstk_darwin(v8, v9);
  sub_100030144();
  uint64_t v78 = v10;
  type metadata accessor for InferenceError();
  sub_100008678();
  uint64_t v83 = v12;
  uint64_t v84 = v11;
  __chkstk_darwin(v11, v13);
  sub_10000F0C0();
  uint64_t v79 = v14 - v15;
  __chkstk_darwin(v16, v17);
  unsigned int v82 = (char *)&v78 - v18;
  uint64_t v19 = sub_100003A70(&qword_10015C008);
  __chkstk_darwin(v19 - 8, v20);
  char v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008678();
  uint64_t v24 = v23;
  __chkstk_darwin(v25, v26);
  sub_10000F0C0();
  uint64_t v29 = v27 - v28;
  __chkstk_darwin(v30, v31);
  uint64_t v32 = type metadata accessor for ModelManagerError();
  sub_100008678();
  uint64_t v34 = v33;
  __chkstk_darwin(v35, v36);
  sub_10000F0C0();
  uint64_t v39 = (char *)(v37 - v38);
  __chkstk_darwin(v40, v41);
  uint64_t v43 = (char *)&v78 - v42;
  uint64_t v86 = v24;
  unint64_t v44 = *(void (**)(void))(v24 + 16);
  sub_1000707BC();
  v44();
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_100006960((uint64_t)v22, 1, 1, v32);
    sub_10005A358((uint64_t)v22, &qword_10015C008);
LABEL_7:
    sub_1000707BC();
    v44();
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v29, a1);
    }
    else
    {
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 32))(v53, v29, a1);
    }
    uint64_t v54 = v88;
    uint64_t v55 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    sub_100070610(v55, v54);

    return;
  }
  sub_100006960((uint64_t)v22, 0, 1, v32);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v43, v22, v32);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v39, v43, v32);
  if ((*(unsigned int (**)(char *, uint64_t))(v34 + 88))(v39, v32) != enum case for ModelManagerError.inferenceError(_:))
  {
    unint64_t v52 = *(void (**)(char *, uint64_t))(v34 + 8);
    v52(v43, v32);
    v52(v39, v32);
    goto LABEL_7;
  }
  uint64_t v89 = v43;
  uint64_t v87 = v34;
  (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v32);
  long long v46 = v82;
  uint64_t v45 = v83;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
  uint64_t v48 = v84;
  v47(v82, (uint64_t)v39, v84);
  uint64_t v49 = v81;
  InferenceError.context.getter();
  uint64_t v50 = v85;
  if (sub_100006AE8(v49, 1, v85) == 1)
  {
    sub_10005A358(v49, &qword_10015BFF8);
    uint64_t v51 = v88;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v78, v49, v50);
    uint64_t v56 = InferenceError.Context.domain.getter();
    unint64_t v58 = v57;
    swift_bridgeObjectRelease();
    uint64_t v59 = HIBYTE(v58) & 0xF;
    if ((v58 & 0x2000000000000000) == 0) {
      uint64_t v59 = v56 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v51 = v88;
    if (v59)
    {
      uint64_t v90 = 0;
      unint64_t v91 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t v90 = 0x636E657265666E49;
      unint64_t v91 = 0xEF2E726F72724565;
      v60._countAndFlagsBits = InferenceError.caseName.getter();
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      v61._countAndFlagsBits = 46;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62._countAndFlagsBits = InferenceError.Context.domain.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      InferenceError.Context.code.getter();
      sub_100070530(v51);
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_1000707A4();
      v64(v63);
      uint64_t v65 = sub_10007078C();
      v66(v65);
      uint64_t v67 = sub_100070770();
      v68(v67);
      return;
    }
    uint64_t v69 = sub_1000707A4();
    v70(v69);
  }
  uint64_t v71 = v79;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v79, v46, v48);
  sub_1000706A4();
  swift_allocError();
  v47(v72, v71, v48);
  uint64_t v73 = (void *)_convertErrorToNSError(_:)();
  sub_100070610(v73, v51);

  uint64_t v74 = sub_10007078C();
  v75(v74);
  uint64_t v76 = sub_100070770();
  v77(v76);
  swift_errorRelease();
}

uint64_t sub_100070530@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError();
  uint64_t v2 = swift_allocBox();
  static Buildable.with(_:)();
  *a1 = v2;
  uint64_t v3 = enum case for GenerativeFunctionsInstrumentationError.genericError(_:);
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationError();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(a1, v3, v4);
}

uint64_t sub_100070610@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 domain];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  [a1 code];
  sub_100070530(a2);

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000706A4()
{
  unint64_t result = qword_10015C7C0;
  if (!qword_10015C7C0)
  {
    type metadata accessor for InferenceError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015C7C0);
  }
  return result;
}

uint64_t sub_1000706F4()
{
  return GenerativeFunctionsInstrumentationError.GenericError.code.setter();
}

uint64_t sub_100070750()
{
  return sub_1000706F4();
}

uint64_t sub_100070770()
{
  return *(void *)(v0 - 104);
}

uint64_t sub_10007078C()
{
  return v0;
}

uint64_t sub_1000707A4()
{
  return v0;
}

uint64_t AssetInferenceProvider.id.getter()
{
  return sub_100044474();
}

uint64_t AssetInferenceProvider.instanceID.getter()
{
  return sub_100044474();
}

void AssetInferenceProvider.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
}

uint64_t static AssetInferenceProvider.__derived_struct_equals(_:_:)(uint64_t a1)
{
  sub_100071EBC(a1);
  BOOL v5 = v5 && v3 == v4;
  if (!v5)
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v7 = 0;
    if ((v6 & 1) == 0) {
      return v7 & 1;
    }
  }
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t v9 = *(void *)(v1 + 24);
  if (!v8)
  {
    if (!v9)
    {
LABEL_16:
      char v7 = ((*(unsigned char *)(v2 + 32) & 1) == 0) ^ *(unsigned char *)(v1 + 32);
      return v7 & 1;
    }
LABEL_15:
    char v7 = 0;
    return v7 & 1;
  }
  if (!v9) {
    goto LABEL_15;
  }
  if (*(void *)(v2 + 16) == *(void *)(v1 + 16) && v8 == v9) {
    goto LABEL_16;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v7 = 0;
  if (v11) {
    goto LABEL_16;
  }
  return v7 & 1;
}

Swift::Int AssetInferenceProvider.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_100070998()
{
  swift_bridgeObjectRetain();
  sub_100044474();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_100044474();
  sub_1000718A4(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100044474();
  sub_1000717DC(v3, v4);
  swift_bridgeObjectRelease();
  BOOL v5 = (int *)type metadata accessor for ModelCatalogAsset(0);
  type metadata accessor for AssetCost();
  sub_10007190C(&qword_10015B7E8, (void (*)(uint64_t))&type metadata accessor for AssetCost);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v0 + v5[8]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v5[9]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v5[10]));
}

uint64_t sub_100070AB4(uint64_t a1)
{
  sub_100071EBC(a1);
  BOOL v5 = v5 && v3 == v4;
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v7 = 0, (v6 & 1) != 0))
  {
    if ((sub_100071608(*(void **)(v2 + 16), *(void **)(v1 + 16)) & 1) != 0
      && (sub_1000716D8(*(void *)(v2 + 24), *(void *)(v1 + 24)) & 1) != 0
      && (uint64_t v8 = (int *)type metadata accessor for ModelCatalogAsset(0), (static AssetCost.== infix(_:_:)() & 1) != 0)
      && *(unsigned __int8 *)(v2 + v8[8]) == *(unsigned __int8 *)(v1 + v8[8])
      && *(unsigned __int8 *)(v2 + v8[9]) == *(unsigned __int8 *)(v1 + v8[9]))
    {
      char v7 = *(unsigned char *)(v2 + v8[10]) ^ *(unsigned char *)(v1 + v8[10]) ^ 1;
    }
    else
    {
      char v7 = 0;
    }
  }
  return v7 & 1;
}

Swift::Int sub_100070B84()
{
  return Hasher._finalize()();
}

Swift::Int sub_100070BCC()
{
  return Hasher._finalize()();
}

unint64_t sub_100070C0C()
{
  unint64_t result = qword_10015D348;
  if (!qword_10015D348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015D348);
  }
  return result;
}

void *sub_100070C58()
{
  return &protocol witness table for String;
}

uint64_t sub_100070C64@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AssetInferenceProvider()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AssetInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInferenceProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetInferenceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetInferenceProvider()
{
  return &type metadata for AssetInferenceProvider;
}

void *sub_100070E68(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[7];
    uint64_t v16 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for AssetCost();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v16, v10, v11);
    uint64_t v13 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t sub_100070FA4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AssetCost();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10007102C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[7];
  uint64_t v14 = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  uint64_t v10 = type metadata accessor for AssetCost();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v14, v9, v10);
  uint64_t v12 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

void *sub_100071118(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AssetCost();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_100071210(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AssetCost();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

void *sub_1000712BC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AssetCost();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_100071390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000713A4);
}

uint64_t sub_1000713A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_100071ED8();
  }
  uint64_t v7 = type metadata accessor for AssetCost();
  uint64_t v8 = a1 + *(int *)(a3 + 28);

  return sub_100006AE8(v8, a2, v7);
}

uint64_t sub_10007141C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071430);
}

void sub_100071430()
{
  sub_100071EF0();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for AssetCost();
    uint64_t v6 = v1 + *(int *)(v4 + 28);
    sub_100006960(v6, v0, v0, v5);
  }
}

uint64_t type metadata accessor for ModelCatalogAsset(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015D3A8);
}

uint64_t sub_1000714C4()
{
  uint64_t result = type metadata accessor for AssetCost();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int sub_100071580()
{
  return Hasher._finalize()();
}

uint64_t sub_1000715C0()
{
  return sub_10007190C(&qword_10015D3F8, (void (*)(uint64_t))type metadata accessor for ModelCatalogAsset);
}

uint64_t sub_100071608(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a1 + 7;
  uint64_t v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000716D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = (unsigned __int8 *)(a1 + 64);
    uint64_t v4 = (unsigned __int8 *)(a2 + 64);
    do
    {
      uint64_t v6 = *((void *)v3 - 2);
      uint64_t v5 = *((void *)v3 - 1);
      int v7 = *v3;
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      int v10 = *v4;
      BOOL v11 = *((void *)v3 - 4) == *((void *)v4 - 4) && *((void *)v3 - 3) == *((void *)v4 - 3);
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (v5)
      {
        if (!v8) {
          return 0;
        }
        if (v6 == v9 && v5 == v8)
        {
          if (v7 != v10) {
            return 0;
          }
          goto LABEL_22;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v13 & 1) == 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v8) {
          return result;
        }
      }
      if ((v7 ^ v10)) {
        return result;
      }
LABEL_22:
      v4 += 40;
      v3 += 40;
      --v2;
    }
    while (v2);
  }
  return 1;
}

void sub_1000717DC(uint64_t a1, uint64_t a2)
{
  sub_100071F04(a1, a2);
  if (v2)
  {
    uint64_t v4 = (Swift::UInt8 *)(v3 + 64);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      Swift::UInt8 v6 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v4 += 40;
      Hasher._combine(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
}

void sub_1000718A4(uint64_t a1, uint64_t a2)
{
  sub_100071F04(a1, a2);
  if (v2)
  {
    uint64_t v4 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_10007190C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100071954(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    int v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for FilePath();
    int v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100071A3C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for FilePath();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100071AB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  int v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for FilePath();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100071B4C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FilePath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_100071BE8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FilePath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100071C64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for FilePath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100071CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071D04);
}

uint64_t sub_100071D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_100071ED8();
  }
  uint64_t v7 = type metadata accessor for FilePath();
  uint64_t v8 = a1 + *(int *)(a3 + 20);

  return sub_100006AE8(v8, a2, v7);
}

uint64_t sub_100071D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071D90);
}

void sub_100071D90()
{
  sub_100071EF0();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for FilePath();
    uint64_t v6 = v1 + *(int *)(v4 + 20);
    sub_100006960(v6, v0, v0, v5);
  }
}

uint64_t type metadata accessor for ModelCatalogAssetVersionedData(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015D458);
}

uint64_t sub_100071E24()
{
  uint64_t result = type metadata accessor for FilePath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100071EBC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100071ED8()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void sub_100071F04(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
}

uint64_t sub_100071F24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015D490);
  sub_100003B18(v0, (uint64_t)qword_10015D490);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100071F98()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = [self clientWithIdentifier:328];
  return v0;
}

BOOL sub_100071FE0()
{
  NSString v3 = sub_100072DC8();
  id v4 = [v1 experimentIdentifiersWithNamespaceName:v3];

  if (v4) {
  return v4 != 0;
  }
}

id sub_100072058()
{
  NSString v3 = sub_100072DC8();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v1 levelForFactor:v3 withNamespaceName:v4];

  if (v5)
  {
    id v6 = [v5 longValue];
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

void sub_100072118(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000722E8(v4, a1, a2, v4, a3, a4);
  if (qword_10015B0B8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003B18(v10, (uint64_t)qword_10015D490);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)char v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001DF20(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Added update handler for namespace %s", v13, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1000722E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void **)(a1 + 112);
  NSString v12 = String._bridgeToObjectiveC()();
  char v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  uint64_t v13[5] = a5;
  v13[6] = a6;
  v16[4] = sub_100072BA8;
  v16[5] = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100072900;
  void v16[3] = &unk_100154220;
  uint64_t v14 = _Block_copy(v16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  id v15 = [v11 addUpdateHandlerForNamespaceName:v12 usingBlock:v14];
  _Block_release(v14);
  swift_unknownObjectRelease();
}

uint64_t sub_100072434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  void v16[3] = 0;
  v16[4] = a2;
  v16[5] = a3;
  void v16[6] = a4;
  v16[7] = a5;
  v16[8] = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100003730((uint64_t)v14, (uint64_t)&unk_10015D598, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_100072548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  void v8[3] = a4;
  return _swift_task_switch(sub_100072570, 0, 0);
}

uint64_t sub_100072570()
{
  uint64_t v11 = v0;
  if (qword_10015B0B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015D490);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = v0[3];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_10001DF20(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received update for namespace %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[5];
  return _swift_task_switch(sub_100072758, v8, 0);
}

uint64_t sub_100072758()
{
  sub_1000086E0();
  uint64_t v1 = (int *)v0[6];
  [*(id *)(v0[5] + 112) refresh];
  BOOL v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100072834;
  return v4();
}

uint64_t sub_100072834()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100072900(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100072960()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialFrameworkProvider()
{
  return self;
}

uint64_t sub_1000729BC(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = *v2;
  v3[4] = *v2;
  return _swift_task_switch(sub_1000729E0, v4, 0);
}

uint64_t sub_1000729E0()
{
  sub_1000086E0();
  BOOL v1 = sub_100071FE0();
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v3 = v1;
  return v2(v3);
}

uint64_t sub_100072A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  uint64_t v6 = *v4;
  v5[6] = *v4;
  return _swift_task_switch(sub_100072A6C, v6, 0);
}

uint64_t sub_100072A6C()
{
  sub_1000086E0();
  id v1 = sub_100072058();
  uint64_t v3 = v2 & 1;
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))(v0 + 8);
  return v4(v1, v3);
}

uint64_t sub_100072AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  uint64_t v6 = *v4;
  v5[6] = *v4;
  return _swift_task_switch(sub_100072AFC, v6, 0);
}

uint64_t sub_100072AFC()
{
  sub_1000086E0();
  sub_100072118(v0[2], v0[3], v0[4], v0[5]);
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100072B60()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100072BA8(uint64_t a1)
{
  return sub_100072434(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100072BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100072BC8()
{
  return swift_release();
}

uint64_t sub_100072BD0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100072C20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100072CFC;
  return sub_100072548(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100072CFC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

NSString sub_100072DC8()
{
  return String._bridgeToObjectiveC()();
}

#error "100072FE0: call analysis failed (funcsize=152)"

uint64_t sub_100073050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AssetCost();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v35 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(a3, a1);
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a2 = v39;
    uint64_t v34 = v40;
    uint64_t v12 = v41;
    int64_t v13 = v42;
    unint64_t v14 = v43;
  }
  else
  {
    uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v16 = *(void *)(a2 + 56);
    uint64_t v34 = a2 + 56;
    uint64_t v12 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v14 = v18 & v16;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v13 = 0;
  }
  v32[0] = v12;
  int64_t v33 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v19 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v20 = (uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32);
  void v32[2] = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v37 = a2;
  if (a2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v14)
    {
      uint64_t v21 = (v14 - 1) & v14;
      unint64_t v22 = __clz(__rbit64(v14)) | (v13 << 6);
      int64_t v23 = v13;
      goto LABEL_29;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v26 >= v33) {
      return sub_10002EAF0();
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    int64_t v23 = v13 + 1;
    if (!v27)
    {
      int64_t v23 = v13 + 2;
      if (v13 + 2 >= v33) {
        return sub_10002EAF0();
      }
      unint64_t v27 = *(void *)(v34 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v13 + 3;
        if (v13 + 3 >= v33) {
          return sub_10002EAF0();
        }
        unint64_t v27 = *(void *)(v34 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v13 + 4;
          if (v13 + 4 >= v33) {
            return sub_10002EAF0();
          }
          unint64_t v27 = *(void *)(v34 + 8 * v23);
          if (!v27)
          {
            int64_t v23 = v13 + 5;
            if (v13 + 5 >= v33) {
              return sub_10002EAF0();
            }
            unint64_t v27 = *(void *)(v34 + 8 * v23);
            if (!v27)
            {
              int64_t v28 = v13 + 6;
              while (v28 < v33)
              {
                unint64_t v27 = *(void *)(v34 + 8 * v28++);
                if (v27)
                {
                  int64_t v23 = v28 - 1;
                  a2 = v37;
                  goto LABEL_28;
                }
              }
              return sub_10002EAF0();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v21 = (v27 - 1) & v27;
    unint64_t v22 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_29:
    uint64_t v29 = *(void *)(*(void *)(a2 + 48) + 8 * v22);
    swift_retain();
    if (!v29) {
      return sub_10002EAF0();
    }
    while (1)
    {
      uint64_t v30 = v35;
      static AssetCost.+ infix(_:_:)();
      swift_release();
      uint64_t v31 = v36;
      (*v19)(a3, v36);
      uint64_t result = (*v20)(a3, v30, v31);
      int64_t v13 = v23;
      unint64_t v14 = v21;
      a2 = v37;
      if ((v37 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v24 = __CocoaSet.Iterator.next()();
      if (v24)
      {
        uint64_t v38 = v24;
        type metadata accessor for InferenceProviderAsset(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v25 = v44;
        swift_unknownObjectRelease();
        int64_t v23 = v13;
        uint64_t v21 = v14;
        if (v25) {
          continue;
        }
      }
      return sub_10002EAF0();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100073430(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v21 = v23;
    uint64_t v3 = v24;
    int64_t v4 = v25;
    unint64_t v5 = v26;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  int64_t v20 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    goto LABEL_24;
  }
  int64_t v13 = v4;
  if (!__OFADD__(v4++, 1))
  {
    if (v4 < v20)
    {
      unint64_t v15 = *(void *)(v21 + 8 * v4);
      if (v15)
      {
LABEL_23:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_24:
        uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
        swift_retain();
        if (v12)
        {
          do
          {
            swift_retain();
            swift_retain();
            uint64_t v17 = swift_bridgeObjectRetain();
            char v18 = sub_1000746F4(v17);
            swift_bridgeObjectRelease();
            if (v18) {
              break;
            }
            uint64_t result = swift_release();
            unint64_t v5 = v10;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              goto LABEL_36;
            }
            type metadata accessor for InferenceProviderAsset(0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v12 = v27;
            swift_unknownObjectRelease();
            uint64_t v10 = v5;
          }
          while (v27);
        }
        goto LABEL_35;
      }
      int64_t v16 = v4 + 1;
      if (v4 + 1 < v20)
      {
        unint64_t v15 = *(void *)(v21 + 8 * v16);
        if (v15) {
          goto LABEL_22;
        }
        int64_t v16 = v4 + 2;
        if (v4 + 2 >= v20) {
          goto LABEL_34;
        }
        unint64_t v15 = *(void *)(v21 + 8 * v16);
        if (v15)
        {
LABEL_22:
          int64_t v4 = v16;
          goto LABEL_23;
        }
        int64_t v16 = v4 + 3;
        if (v4 + 3 < v20)
        {
          unint64_t v15 = *(void *)(v21 + 8 * v16);
          if (v15) {
            goto LABEL_22;
          }
          v4 += 4;
          if (v4 < v20)
          {
            unint64_t v15 = *(void *)(v21 + 8 * v4);
            if (!v15)
            {
              int64_t v19 = v13 + 6;
              while (v19 < v20)
              {
                unint64_t v15 = *(void *)(v21 + 8 * v19++);
                if (v15)
                {
                  int64_t v4 = v19 - 1;
                  goto LABEL_23;
                }
              }
LABEL_36:
              uint64_t v12 = 0;
              goto LABEL_35;
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_34:
    uint64_t v12 = 0;
LABEL_35:
    sub_10002EAF0();
    swift_release();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v28;
    uint64_t v26 = v29;
    uint64_t v7 = v30;
    int64_t v8 = v31;
    unint64_t v9 = v32;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v25 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    int64_t v27 = v8;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    type metadata accessor for InferenceProviderAsset(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v16 = v33;
    swift_unknownObjectRelease();
    uint64_t v14 = v9;
    if (!v33) {
      goto LABEL_38;
    }
LABEL_31:
    if (InferenceProviderAssetDescriptor.identifier.getter() == a2 && v20 == a3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_38;
    }
    uint64_t result = swift_release();
    unint64_t v9 = v14;
    a3 = v23;
    a2 = v22;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
LABEL_30:
    uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    swift_retain();
    if (!v16) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v25) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v25) {
        goto LABEL_40;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v25) {
          goto LABEL_40;
        }
        unint64_t v18 = *(void *)(v26 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v25) {
            goto LABEL_40;
          }
          unint64_t v18 = *(void *)(v26 + 8 * v8);
          if (!v18)
          {
            int64_t v8 = v17 + 4;
            if (v17 + 4 >= v25)
            {
LABEL_40:
              uint64_t v16 = 0;
              goto LABEL_38;
            }
            unint64_t v18 = *(void *)(v26 + 8 * v8);
            if (!v18)
            {
              int64_t v19 = v27 + 6;
              while (v19 < v25)
              {
                unint64_t v18 = *(void *)(v26 + 8 * v19++);
                if (v18)
                {
                  int64_t v8 = v19 - 1;
                  goto LABEL_29;
                }
              }
LABEL_39:
              uint64_t v16 = 0;
LABEL_38:
              sub_10002EAF0();
              swift_bridgeObjectRelease();
              return v16;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v14 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v8 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073AF4(uint64_t a1, void *a2)
{
  uint64_t v22 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v23 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  while (1)
  {
LABEL_4:
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (i << 6);
    }
    else
    {
      int64_t v10 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_41;
      }
      if (v10 >= v23)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v10);
      ++i;
      if (!v11)
      {
        int64_t i = v10 + 1;
        if (v10 + 1 >= v23) {
          goto LABEL_39;
        }
        unint64_t v11 = *(void *)(v22 + 8 * i);
        if (!v11)
        {
          int64_t i = v10 + 2;
          if (v10 + 2 >= v23) {
            goto LABEL_39;
          }
          unint64_t v11 = *(void *)(v22 + 8 * i);
          if (!v11)
          {
            int64_t i = v10 + 3;
            if (v10 + 3 >= v23) {
              goto LABEL_39;
            }
            unint64_t v11 = *(void *)(v22 + 8 * i);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v23) {
                goto LABEL_39;
              }
              unint64_t v11 = *(void *)(v22 + 8 * v12);
              for (int64_t i = v12; !v11; ++v12)
              {
                int64_t i = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_42;
                }
                if (i >= v23) {
                  goto LABEL_39;
                }
                unint64_t v11 = *(void *)(v22 + 8 * i);
              }
            }
          }
        }
      }
      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (i << 6);
    }
    uint64_t v13 = a2[2];
    if (v13)
    {
      uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      BOOL v17 = a2[4] == *v14 && a2[5] == v16;
      if (v17 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_37:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        return v15;
      }
      if (v13 != 1) {
        break;
      }
    }
  }
  unint64_t v18 = a2 + 7;
  uint64_t v19 = 1;
  while (1)
  {
    uint64_t v20 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (*(v18 - 1) == v15 && *v18 == v16) {
      goto LABEL_37;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_37;
    }
    v18 += 2;
    ++v19;
    if (v20 == v13) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100073D50(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  int64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v40 - v12;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    Set.Iterator.init(_cocoa:)();
    a1 = v54;
    uint64_t v46 = v55;
    uint64_t v15 = v56;
    uint64_t v14 = v57;
    unint64_t v16 = (unint64_t)v58;
    if (v54 < 0)
    {
      uint64_t v44 = v58;
      uint64_t v45 = v57;
      uint64_t v37 = __CocoaSet.Iterator.next()();
      if (!v37) {
        goto LABEL_58;
      }
      uint64_t v42 = v15;
      uint64_t v47 = a1;
      uint64_t v41 = v4;
      uint64_t v52 = v37;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v20 = v53;
      swift_unknownObjectRelease();
      int v50 = 0;
      uint64_t v19 = v45;
      unint64_t v17 = (unint64_t)v44;
      if (!v20) {
        goto LABEL_58;
      }
LABEL_6:
      uint64_t v45 = v47 & 0x7FFFFFFFFFFFFFFFLL;
      int64_t v43 = (unint64_t)(v42 + 64) >> 6;
      uint64_t v44 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        if (v50)
        {
          if (v17)
          {
            uint64_t v21 = (v17 - 1) & v17;
            unint64_t v22 = __clz(__rbit64(v17)) | (v19 << 6);
            uint64_t v23 = v19;
          }
          else
          {
            int64_t v26 = v19 + 1;
            if (__OFADD__(v19, 1))
            {
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_58;
            }
            if (v26 >= v43) {
              goto LABEL_45;
            }
            unint64_t v27 = *(void *)(v46 + 8 * v26);
            uint64_t v23 = v19 + 1;
            if (!v27)
            {
              uint64_t v23 = v19 + 2;
              if (v19 + 2 >= v43) {
                goto LABEL_45;
              }
              unint64_t v27 = *(void *)(v46 + 8 * v23);
              if (!v27)
              {
                uint64_t v23 = v19 + 3;
                if (v19 + 3 >= v43) {
                  goto LABEL_45;
                }
                unint64_t v27 = *(void *)(v46 + 8 * v23);
                if (!v27)
                {
                  uint64_t v23 = v19 + 4;
                  if (v19 + 4 >= v43) {
                    goto LABEL_45;
                  }
                  unint64_t v27 = *(void *)(v46 + 8 * v23);
                  if (!v27)
                  {
                    uint64_t v23 = v19 + 5;
                    if (v19 + 5 >= v43) {
                      goto LABEL_45;
                    }
                    unint64_t v27 = *(void *)(v46 + 8 * v23);
                    if (!v27)
                    {
                      int64_t v28 = v19 + 6;
                      while (v28 < v43)
                      {
                        unint64_t v27 = *(void *)(v46 + 8 * v28++);
                        if (v27)
                        {
                          uint64_t v23 = v28 - 1;
                          goto LABEL_28;
                        }
                      }
LABEL_45:
                      sub_10002EAF0();
                      return v20;
                    }
                  }
                }
              }
            }
LABEL_28:
            uint64_t v21 = (v27 - 1) & v27;
            unint64_t v22 = __clz(__rbit64(v27)) + (v23 << 6);
          }
          uint64_t v25 = *(void *)(*(void *)(v47 + 48) + 8 * v22);
          swift_retain();
          if (!v25) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v24 = __CocoaSet.Iterator.next()();
          if (!v24) {
            goto LABEL_45;
          }
          uint64_t v51 = v24;
          type metadata accessor for InferenceProviderAsset(0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v25 = v59;
          swift_unknownObjectRelease();
          uint64_t v23 = v19;
          uint64_t v21 = v17;
          if (!v25) {
            goto LABEL_45;
          }
        }
        swift_beginAccess();
        sub_1000B5E24();
        swift_beginAccess();
        sub_1000B5E24();
        char v29 = v48(v13, v10);
        sub_1000B5E7C((uint64_t)v10, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_1000B5E7C((uint64_t)v13, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_release();
        if (v29) {
          uint64_t v20 = v25;
        }
        uint64_t v19 = v23;
        unint64_t v17 = v21;
      }
    }
    if (v58) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v30 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v46 = a1 + 56;
    uint64_t v15 = ~v30;
    uint64_t v32 = -v30;
    if (v32 < 64) {
      uint64_t v33 = ~(-1 << v32);
    }
    else {
      uint64_t v33 = -1;
    }
    unint64_t v16 = v33 & v31;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    if (v16)
    {
LABEL_4:
      uint64_t v42 = v15;
      uint64_t v41 = v4;
      unint64_t v17 = (v16 - 1) & v16;
      unint64_t v18 = __clz(__rbit64(v16)) | (v14 << 6);
      uint64_t v19 = v14;
LABEL_5:
      uint64_t v47 = a1;
      uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8 * v18);
      swift_retain();
      int v50 = 1;
      if (!v20) {
        goto LABEL_58;
      }
      goto LABEL_6;
    }
  }
  int64_t v34 = v14 + 1;
  if (__OFADD__(v14, 1)) {
    goto LABEL_61;
  }
  int64_t v35 = (unint64_t)(v15 + 64) >> 6;
  if (v34 < v35)
  {
    unint64_t v36 = *(void *)(v46 + 8 * v34);
    uint64_t v19 = v14 + 1;
    if (!v36)
    {
      uint64_t v19 = v14 + 2;
      if (v14 + 2 >= v35) {
        goto LABEL_58;
      }
      unint64_t v36 = *(void *)(v46 + 8 * v19);
      if (!v36)
      {
        uint64_t v19 = v14 + 3;
        if (v14 + 3 >= v35) {
          goto LABEL_58;
        }
        unint64_t v36 = *(void *)(v46 + 8 * v19);
        if (!v36)
        {
          uint64_t v19 = v14 + 4;
          if (v14 + 4 >= v35) {
            goto LABEL_58;
          }
          unint64_t v36 = *(void *)(v46 + 8 * v19);
          if (!v36)
          {
            uint64_t v19 = v14 + 5;
            if (v14 + 5 >= v35) {
              goto LABEL_58;
            }
            unint64_t v36 = *(void *)(v46 + 8 * v19);
            if (!v36)
            {
              int64_t v38 = v14 + 6;
              do
              {
                if (v38 >= v35) {
                  goto LABEL_58;
                }
                unint64_t v36 = *(void *)(v46 + 8 * v38++);
              }
              while (!v36);
              uint64_t v19 = v38 - 1;
            }
          }
        }
      }
    }
    uint64_t v42 = v15;
    uint64_t v41 = v4;
    unint64_t v17 = (v36 - 1) & v36;
    unint64_t v18 = __clz(__rbit64(v36)) + (v19 << 6);
    goto LABEL_5;
  }
LABEL_58:
  sub_10002EAF0();
  return 0;
}

uint64_t sub_100074350(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v33;
    uint64_t v30 = v34;
    uint64_t v10 = v35;
    int64_t v11 = v36;
    unint64_t v12 = v37;
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v30 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v15 = -v13;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v12 = v16 & v14;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v11 = 0;
  }
  v28[1] = v10;
  void v28[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v29 = (unint64_t)(v10 + 64) >> 6;
  long long v28[2] = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    int64_t v17 = v11;
    if (a1 < 0)
    {
      uint64_t v20 = __CocoaSet.Iterator.next()();
      if (!v20) {
        goto LABEL_33;
      }
      uint64_t v32 = v20;
      type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v21 = v38;
      swift_unknownObjectRelease();
      if (!v21) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    if (!v12) {
      break;
    }
    unint64_t v18 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v19 = v18 | (v11 << 6);
LABEL_30:
    uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8 * v19);
    swift_retain();
    if (!v25) {
      goto LABEL_33;
    }
LABEL_31:
    swift_beginAccess();
    sub_1000B5E24();
    char v26 = a2(v8);
    sub_1000B5E7C((uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t result = swift_release();
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = 0;
      goto LABEL_34;
    }
  }
  int64_t v22 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v22 >= v29) {
      goto LABEL_33;
    }
    unint64_t v23 = *(void *)(v30 + 8 * v22);
    ++v11;
    if (!v23)
    {
      int64_t v11 = v17 + 2;
      if (v17 + 2 >= v29) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v30 + 8 * v11);
      if (!v23)
      {
        int64_t v11 = v17 + 3;
        if (v17 + 3 >= v29) {
          goto LABEL_33;
        }
        unint64_t v23 = *(void *)(v30 + 8 * v11);
        if (!v23)
        {
          int64_t v11 = v17 + 4;
          if (v17 + 4 >= v29) {
            goto LABEL_33;
          }
          unint64_t v23 = *(void *)(v30 + 8 * v11);
          if (!v23)
          {
            int64_t v11 = v17 + 5;
            if (v17 + 5 >= v29) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v30 + 8 * v11);
            if (!v23)
            {
              int64_t v24 = v17 + 6;
              while (v24 < v29)
              {
                unint64_t v23 = *(void *)(v30 + 8 * v24++);
                if (v23)
                {
                  int64_t v11 = v24 - 1;
                  goto LABEL_29;
                }
              }
LABEL_33:
              uint64_t v27 = 1;
LABEL_34:
              sub_10002EAF0();
              return v27;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v11 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000746F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v3 = v22;
    int64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  int64_t v18 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    int64_t v9 = v4;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v12 = v25;
      swift_unknownObjectRelease();
      if (!v25) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    if (!v5) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_30:
    uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v12) {
      goto LABEL_33;
    }
LABEL_31:
    char v16 = sub_1000BAB0C(v12);
    uint64_t result = swift_release();
    if (v16)
    {
      uint64_t v17 = 0;
      goto LABEL_34;
    }
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 >= v18) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v19 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v9 + 2;
      if (v9 + 2 >= v18) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v19 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v9 + 3;
        if (v9 + 3 >= v18) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v19 + 8 * v4);
        if (!v14)
        {
          int64_t v4 = v9 + 4;
          if (v9 + 4 >= v18) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v19 + 8 * v4);
          if (!v14)
          {
            int64_t v4 = v9 + 5;
            if (v9 + 5 >= v18) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v19 + 8 * v4);
            if (!v14)
            {
              int64_t v15 = v9 + 6;
              while (v15 < v18)
              {
                unint64_t v14 = *(void *)(v19 + 8 * v15++);
                if (v14)
                {
                  int64_t v4 = v15 - 1;
                  goto LABEL_29;
                }
              }
LABEL_33:
              uint64_t v17 = 1;
LABEL_34:
              sub_10002EAF0();
              swift_release();
              swift_release();
              return v17;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_100074A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  sub_100003A70(&qword_10015B208);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_100074AAC, 0, 0);
}

uint64_t sub_100074AAC()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000BA794();
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    sub_100044784();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v41 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    int64_t v4 = *(void *)(v0 + 40);
    unint64_t v5 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v41 = v1 + 56;
    uint64_t v6 = ~(-1 << *(unsigned char *)(v1 + 32));
    sub_100030BDC();
    unint64_t v5 = v7 & v8;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v6;
    int64_t v4 = 0;
  }
  int64_t v40 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v11 = v4;
      goto LABEL_26;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return result;
    }
    if (v14 >= v40) {
      goto LABEL_37;
    }
    int64_t v11 = v4 + 1;
    if (!*(void *)(v41 + 8 * v14))
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v40) {
        goto LABEL_37;
      }
      if (!*(void *)(v41 + 8 * v11))
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v40) {
          goto LABEL_37;
        }
        if (!*(void *)(v41 + 8 * v11))
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v40) {
            goto LABEL_37;
          }
          if (!*(void *)(v41 + 8 * v11))
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v40) {
              goto LABEL_37;
            }
            if (!*(void *)(v41 + 8 * v11)) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    sub_100030534();
    uint64_t v9 = v18 & v17;
    unint64_t v10 = v19 + (v11 << 6);
LABEL_26:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v13) {
      goto LABEL_37;
    }
    while (1)
    {
      unint64_t v42 = v9;
      int64_t v43 = v11;
      uint64_t v20 = v1;
      uint64_t v21 = *(void *)(v0 + 160);
      uint64_t v22 = *(void *)(v0 + 144);
      uint64_t v23 = *(void *)(v0 + 152);
      uint64_t v24 = type metadata accessor for TaskPriority();
      sub_1000BA4A4();
      sub_100006960(v25, v26, v27, v24);
      int64_t v28 = (void *)swift_allocObject();
      long long v28[2] = 0;
      void v28[3] = 0;
      void v28[4] = v22;
      v28[5] = v23;
      v28[6] = v13;
      uint64_t v29 = sub_10006A0F4();
      sub_1000B65F0(v29, v30, &qword_10015B208);
      int v31 = sub_100006AE8(v21, 1, v24);
      swift_retain();
      if (v31 == 1)
      {
        sub_1000B95C0();
      }
      else
      {
        TaskPriority.rawValue.getter();
        sub_10002FC6C();
        sub_1000B95B4();
        sub_10000EFBC();
        v32();
      }
      uint64_t v1 = v20;
      if (v28[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v33 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v35 = v34;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v35 = 0;
      }
      uint64_t v36 = **(void **)(v0 + 128);
      uint64_t v37 = v35 | v33;
      if (v35 | v33)
      {
        uint64_t v37 = v0 + 56;
        *(void *)(v0 + 56) = 0;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 72) = v33;
        *(void *)(v0 + 80) = v35;
      }
      uint64_t v38 = *(void *)(v0 + 168);
      *(void *)(v0 + 88) = 1;
      *(void *)(v0 + 96) = v37;
      *(void *)(v0 + 104) = v36;
      swift_task_create();
      swift_release();
      uint64_t result = sub_100042EDC(v38, &qword_10015B208);
      int64_t v4 = v43;
      unint64_t v5 = v42;
      if ((v20 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      uint64_t v12 = __CocoaSet.Iterator.next()();
      if (v12)
      {
        *(void *)(v0 + 120) = v12;
        type metadata accessor for InferenceProviderAsset(0);
        swift_unknownObjectRetain();
        sub_1000BA570();
        swift_dynamicCast();
        uint64_t v13 = *(void *)(v0 + 112);
        swift_unknownObjectRelease();
        int64_t v11 = v4;
        uint64_t v9 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_37;
    }
  }
  int64_t v15 = v4 + 6;
  while (v15 < v40)
  {
    if (*(void *)(v41 + 8 * v15++))
    {
      int64_t v11 = v15 - 1;
      goto LABEL_25;
    }
  }
LABEL_37:
  sub_10002EAF0();
  uint64_t v44 = (char *)&dword_10015DA68 + dword_10015DA68;
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_100074FA4;
  return ((uint64_t (*)(void, void))v44)(0, 0);
}

uint64_t sub_100074FA4()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_1000750A4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100075180;
  return v9(v6 + 16);
}

uint64_t sub_100075180()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 32) = v0;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007525C()
{
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100075278(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  v3[5] = v4;
  void v3[6] = v6;
  return _swift_task_switch(sub_100075318, v4, v6);
}

uint64_t sub_100075318()
{
  sub_1000086EC();
  v0[7] = sub_100003A70(&qword_10015B468);
  if (ThrowingTaskGroup.isEmpty.getter())
  {
    sub_1000304E0();
    return v1();
  }
  else
  {
    v0[8] = 0;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[9] = v3;
    sub_100003A70(&qword_10015DA88);
    sub_1000B76F8();
    *uint64_t v3 = v4;
    v3[1] = sub_100075430;
    uint64_t v5 = sub_1000BA32C();
    return ThrowingTaskGroup.next(isolation:)(v5);
  }
}

uint64_t sub_100075430()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(void *)(v3 + 48);
    uint64_t v9 = sub_100075630;
  }
  else
  {
    *(unsigned char *)(v3 + 89) = *(unsigned char *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(void *)(v3 + 48);
    uint64_t v9 = sub_100075518;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_100075518()
{
  sub_1000086EC();
  if (*(unsigned char *)(v0 + 89))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    if (ThrowingTaskGroup.isEmpty.getter())
    {
      if (v1) {
        swift_willThrow();
      }
      sub_10000EF7C();
      return v2();
    }
    *(void *)(v0 + 64) = v1;
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  sub_100003A70(&qword_10015DA88);
  sub_1000B76F8();
  *uint64_t v4 = v5;
  v4[1] = sub_100075430;
  uint64_t v6 = sub_1000BA32C();
  return ThrowingTaskGroup.next(isolation:)(v6);
}

uint64_t sub_100075630()
{
  sub_1000086EC();
  uint64_t v1 = v0[10];
  if (v0[8])
  {
    swift_errorRelease();
    uint64_t v1 = v0[8];
  }
  if (ThrowingTaskGroup.isEmpty.getter())
  {
    if (v1) {
      swift_willThrow();
    }
    sub_10000EF7C();
    return v2();
  }
  else
  {
    v0[8] = v1;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    sub_100003A70(&qword_10015DA88);
    *uint64_t v4 = v0;
    v4[1] = sub_100075430;
    return ThrowingTaskGroup.next(isolation:)(v0 + 11);
  }
}

uint64_t sub_100075768()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015D5A0);
  sub_100003B18(v0, (uint64_t)qword_10015D5A0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000757D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100075810(uint64_t *a1, uint64_t *a2)
{
  return sub_1000757D8(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_100075824()
{
  uint64_t v3 = &type metadata for ModelManager;
  unint64_t v4 = sub_10009ADF4();
  v2[0] = 1;
  char v0 = isFeatureEnabled(_:)();
  uint64_t result = sub_100008130((uint64_t)v2);
  if (v0) {
    return static Policy.defaultAssetTransitionDelay.getter();
  }
  return result;
}

void sub_1000758A0(uint64_t a1, uint64_t a2)
{
  if (sub_100101B08(a1, a2))
  {
    unint64_t v4 = (int *)type metadata accessor for InferenceProviderAssetManagerPolicy(0);
    if (*(void *)(a1 + v4[5]) == *(void *)(a2 + v4[5])
      && *(double *)(a1 + v4[6]) == *(double *)(a2 + v4[6])
      && *(double *)(a1 + v4[7]) == *(double *)(a2 + v4[7]))
    {
      sub_100019FE0();
    }
  }
}

uint64_t sub_100075940()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_100043D2C();
  uint64_t v2 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 20));
  if (v3 == static Policy.defaultMemoryBudgetMarker.getter())
  {
    unint64_t v4 = (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24);
    return *(void *)(*sub_10000853C(v4, v5) + 112);
  }
  uint64_t v6 = *(void *)(v1 + *(int *)(v2 + 20));
  uint64_t v7 = (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  unint64_t v8 = *(void *)(*sub_10000853C(v7, v7[3]) + 112);
  if (v6 >= 1 && v8 < v6)
  {
LABEL_10:
    uint64_t v5 = v7[3];
    unint64_t v4 = v7;
    return *(void *)(*sub_10000853C(v4, v5) + 112);
  }
  if (v6 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  return v6;
}

#error "100075C28: call analysis failed (funcsize=169)"

uint64_t sub_100075D04()
{
  return sub_10008C6A0();
}

#error "100075EE8: call analysis failed (funcsize=169)"

uint64_t sub_100075FC4()
{
  return sub_10008C6A0();
}

void sub_100075FD0()
{
  sub_10002FAAC();
  uint64_t v2 = 0;
  uint64_t v49 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v3, v4);
  sub_1000086F8();
  __chkstk_darwin(v5, v6);
  sub_1000BA134();
  uint64_t v47 = v7;
  type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_1000B9308();
  __chkstk_darwin(v12, v13);
  sub_1000B97D8();
  sub_100043D2C();
  sub_1000B9964();
  if (v17)
  {
    swift_retain();
    uint64_t v39 = swift_bridgeObjectRetain();
    int64_t v14 = (void *)sub_1000ADE5C(v39, v0, (uint64_t)sub_1000765E8, 0);
  }
  else
  {
    int64_t v14 = &_swiftEmptySetSingleton;
    uint64_t v56 = &_swiftEmptySetSingleton;
    sub_1000BA77C();
    swift_bridgeObjectRetain();
    uint64_t v48 = __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      uint64_t v40 = v0;
      uint64_t v41 = 0;
      uint64_t v46 = type metadata accessor for InferenceProviderAsset(0);
      HIDWORD(v45) = enum case for LoadState.loaded(_:);
      uint64_t v44 = v9 + 104;
      char v43 = v9 + 16;
      int64_t v15 = (void (**)(void))(v9 + 8);
      unint64_t v42 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        sub_1000B97A0();
        swift_dynamicCast();
        sub_100043F38();
        sub_100043E9C();
        v16();
        sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
        sub_1000B94E0();
        sub_1000B94E0();
        BOOL v17 = v53 == v51 && v54 == v52;
        if (v17) {
          break;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000B8360();
        sub_100030274();
        v19();
        if (v18) {
          goto LABEL_16;
        }
        sub_1000B94E0();
        sub_1000B94E0();
        if (v53 == v51 && v54 == v52)
        {
          sub_1000B8890();
          uint64_t v22 = *v15;
          sub_100043DF8();
          v22();
          uint64_t v24 = v54;
          goto LABEL_17;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = *v15;
        sub_100043DF8();
        v22();
        sub_1000B5E7C(v54, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_100043DF8();
        v22();
        sub_1000B5E24();
        if ((v21 & 1) == 0)
        {
          sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_endAccess();
LABEL_19:
          swift_release();
          goto LABEL_31;
        }
LABEL_18:
        sub_1000BA0BC();
        sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_endAccess();
        if (v22) {
          goto LABEL_19;
        }
        uint64_t v25 = v55;
        uint64_t v26 = v56;
        sub_1000B8D78();
        if (!(!v17 & v35))
        {
          sub_1000B926C(v27, v28, v29, v30, v31, v32, v33, v34, v40, v41, (uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, v50[0],
            v50[1],
            v50[2],
            v50[3],
            v50[4],
            v50[5],
            v50[6],
            v50[7],
            v50[8],
            v51,
            v52,
            v53,
            v54,
            v55);
          uint64_t v26 = v56;
        }
        Hasher.init(_seed:)();
        sub_1000C95D4();
        Hasher._finalize()();
        sub_1000B6DC0();
        if (v17)
        {
          sub_1000B6EFC();
          while (1)
          {
            sub_1000B7778();
            if (v17 && (v38 & 1) != 0) {
              break;
            }
            sub_1000B77F4();
            sub_1000B6FC8();
            if (!v17)
            {
              sub_1000B6EE8();
              goto LABEL_30;
            }
          }
          __break(1u);
LABEL_39:
          swift_release();
          __break(1u);
          return;
        }
        sub_1000B6F10();
LABEL_30:
        *(void *)(v36 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
        *(void *)(v26[6] + 8 * v37) = v25;
        sub_1000B7C8C();
LABEL_31:
        if (!__CocoaSet.Iterator.next()())
        {
          int64_t v14 = v56;
          uint64_t v2 = v41;
          goto LABEL_34;
        }
      }
      sub_1000B8890();
      sub_1000B8360();
      sub_1000BA0DC();
      v23();
LABEL_16:
      uint64_t v22 = *v15;
      sub_100043DF8();
      v22();
      uint64_t v24 = v54;
LABEL_17:
      sub_1000B5E7C(v24, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_100043DF8();
      v22();
      sub_1000B5E24();
      goto LABEL_18;
    }
LABEL_34:
    sub_10000EE7C();
    swift_release();
  }
  v50[0] = (uint64_t)sub_100116B88((uint64_t)v14);
  sub_1000B10DC(v50, (uint64_t (*)(uint64_t, uint64_t))sub_100076794);
  if (v2) {
    goto LABEL_39;
  }
  swift_release();
  sub_10002FAC4();
}

BOOL sub_1000765E8()
{
  uint64_t v0 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v5 = *(void *)(State - 8);
  __chkstk_darwin(State, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for LoadState.loaded(_:), State);
  char v9 = sub_1000BA7FC((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, State);
  sub_1000B5E24();
  BOOL v10 = (v9 & 1) != 0 && *(void *)(*(void *)&v3[*(int *)(v0 + 48)] + 16) == 0;
  sub_1000B5E7C((uint64_t)v3, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v10;
}

void sub_100076798()
{
  sub_10002FAAC();
  uint64_t v2 = 0;
  uint64_t v43 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v3, v4);
  sub_1000086F8();
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t State = type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  sub_10000F0D0();
  uint64_t v16 = v15 - v14;
  sub_100043D2C();
  if ((*(void *)(v0 + 120) & 0xC000000000000001) != 0)
  {
    uint64_t v17 = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v51 = &_swiftEmptySetSingleton;
    uint64_t v38 = v0;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v42 = __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      uint64_t v37 = 0;
      uint64_t v41 = type metadata accessor for InferenceProviderAsset(0);
      HIDWORD(v40) = enum case for LoadState.loaded(_:);
      uint64_t v39 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        sub_1000B97A0();
        swift_dynamicCast();
        sub_100043F38();
        (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v16, HIDWORD(v40), State);
        sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
        sub_1000B94E0();
        sub_1000B94E0();
        BOOL v18 = v47 == v45 && v48 == v46;
        if (v18)
        {
          sub_1000B8890();
          sub_100043FA8();
          v20();
          sub_1000B5E24();
        }
        else
        {
          sub_1000B8A88();
          sub_1000B9168();
          swift_bridgeObjectRelease();
          sub_100043FA8();
          v19();
          sub_1000B5E24();
          if ((v17 & 1) == 0)
          {
            sub_1000B5E7C((uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            sub_1000B5E24();
LABEL_12:
            sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_endAccess();
            swift_release();
            goto LABEL_13;
          }
        }
        uint64_t v17 = *(void *)(*(void *)&v8[*(int *)(v43 + 44)] + 16);
        sub_1000B5E7C((uint64_t)v8, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_1000B5E24();
        if (v17) {
          goto LABEL_12;
        }
        sub_1000BA0BC();
        sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_endAccess();
        uint64_t v21 = v49;
        LOBYTE(v17) = (_BYTE)v51;
        sub_1000B8D78();
        if (!(!v18 & v30))
        {
          sub_1000B926C(v22, v23, v24, v25, v26, v27, v28, v29, v36, v37, v38, (char)v39, v40, v41, v42, v43, v44[0], v44[1], v44[2],
            v44[3],
            v44[4],
            v44[5],
            v44[6],
            v44[7],
            v44[8],
            v45,
            v46,
            v47,
            v48,
            v49,
            v50,
            (uint64_t)v51);
          LOBYTE(v17) = (_BYTE)v51;
        }
        Hasher.init(_seed:)();
        sub_1000C95D4();
        Hasher._finalize()();
        sub_1000B6DC0();
        if (v18)
        {
          sub_1000B6EFC();
          while (1)
          {
            sub_1000B7778();
            if (v18 && (v32 & 1) != 0) {
              break;
            }
            sub_1000B77F4();
            sub_1000B6FC8();
            if (!v18)
            {
              sub_1000B6EE8();
              goto LABEL_25;
            }
          }
          __break(1u);
LABEL_31:
          swift_release();
          __break(1u);
          return;
        }
        sub_1000B6F10();
LABEL_25:
        sub_1000B89D0(v31);
        *(void *)(v33 + 8 * v34) = v21;
        sub_1000B7C8C();
LABEL_13:
        if (!__CocoaSet.Iterator.next()())
        {
          uint64_t v17 = (uint64_t)v51;
          uint64_t v2 = v37;
          break;
        }
      }
    }
    swift_release_n();
    swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_1000ADE5C(v35, v0, (uint64_t)sub_100076C94, 0);
  }
  v44[0] = (uint64_t)sub_100116B88(v17);
  sub_1000B10DC(v44, (uint64_t (*)(uint64_t, uint64_t))sub_100076CBC);
  if (v2) {
    goto LABEL_31;
  }
  swift_release();
  sub_10002FAC4();
}

uint64_t sub_100076C94()
{
  return sub_1000BA940() & 1;
}

void sub_100076CC0()
{
  sub_10002FAAC();
  uint64_t v2 = 0;
  uint64_t v67 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v3, v4);
  sub_10000F0C0();
  uint64_t v7 = v5 - v6;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v56 - v11;
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t State = type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v18 = v17;
  __chkstk_darwin(v19, v20);
  sub_10000F0C0();
  uint64_t v23 = v21 - v22;
  __chkstk_darwin(v24, v25);
  sub_1000B97C8();
  sub_100043D2C();
  if ((*(void *)(v0 + 120) & 0xC000000000000001) != 0)
  {
    uint64_t v64 = v15;
    uint64_t v65 = v7;
    uint64_t v26 = &_swiftEmptySetSingleton;
    uint64_t v74 = &_swiftEmptySetSingleton;
    uint64_t v58 = v0;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v66 = __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      uint64_t v57 = 0;
      uint64_t v63 = type metadata accessor for InferenceProviderAsset(0);
      HIDWORD(v62) = enum case for LoadState.loaded(_:);
      uint64_t v61 = v18 + 104;
      Swift::String v60 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
      uint64_t v27 = (void (**)(void))(v18 + 8);
      uint64_t v59 = (char *)&type metadata for Swift.AnyObject + 8;
      while (1)
      {
        sub_1000B97A0();
        swift_dynamicCast();
        sub_100043F38();
        sub_100043E9C();
        v28();
        sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
        sub_1000BA478();
        sub_1000BA478();
        uint64_t v29 = v72;
        uint64_t v30 = v70;
        BOOL v31 = v71 == v69 && v72 == v70;
        if (v31) {
          break;
        }
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000BA57C();
        sub_100030274();
        v33();
        if (v32) {
          goto LABEL_16;
        }
        sub_1000BA478();
        sub_1000BA478();
        uint64_t v29 = v70;
        if (v71 == v69 && v72 == v70)
        {
          sub_1000B9D58();
          goto LABEL_16;
        }
        uint64_t v35 = v30;
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = *v27;
        sub_100043924();
        v37();
        sub_1000B5E7C(v35, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_100043924();
        v37();
        sub_1000B5E24();
        if ((v36 & 1) == 0)
        {
          sub_1000B5E7C((uint64_t)v12, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_1000B8360();
LABEL_18:
          sub_1000B5E7C(v29, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_endAccess();
LABEL_20:
          swift_release();
          goto LABEL_21;
        }
LABEL_17:
        uint64_t v39 = *(void *)(*(void *)&v12[*(int *)(v67 + 48)] + 16);
        sub_1000B5E7C((uint64_t)v12, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_1000B8360();
        if (v39) {
          goto LABEL_18;
        }
        uint64_t v40 = *(void *)(*(void *)(v29 + *(int *)(v67 + 44)) + 16);
        sub_1000B5E7C(v29, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_endAccess();
        if (v40) {
          goto LABEL_20;
        }
        uint64_t v41 = v73;
        uint64_t v42 = v74;
        sub_1000B8D78();
        if (!(!v31 & v51))
        {
          sub_1000B926C(v43, v44, v45, v46, v47, v48, v49, v50, v56, v57, v58, (char)v59, (uint64_t)v60, v61, v62, v63, (uint64_t)v64, v65, v66,
            v67,
            v68[0],
            v68[1],
            v68[2],
            v68[3],
            v68[4],
            v68[5],
            v68[6],
            v68[7],
            v68[8],
            v69,
            v70,
            v71);
          uint64_t v42 = v74;
        }
        Hasher.init(_seed:)();
        sub_1000C95D4();
        Hasher._finalize()();
        sub_1000B6DC0();
        if (v31)
        {
          sub_1000B6EFC();
          while (1)
          {
            sub_1000B7778();
            if (v31 && (v54 & 1) != 0) {
              break;
            }
            sub_1000B77F4();
            sub_1000B6FC8();
            if (!v31)
            {
              sub_1000B6EE8();
              goto LABEL_34;
            }
          }
          __break(1u);
LABEL_40:
          swift_release();
          __break(1u);
          return;
        }
        sub_1000B6F10();
LABEL_34:
        *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(void *)(v42[6] + 8 * v53) = v41;
        sub_1000B7C8C();
LABEL_21:
        if (!__CocoaSet.Iterator.next()())
        {
          uint64_t v26 = v74;
          uint64_t v2 = v57;
          goto LABEL_35;
        }
      }
      sub_1000B8890();
      sub_1000BA57C();
      (*v60)(v23, v1, State);
LABEL_16:
      uint64_t v38 = *v27;
      sub_100043924();
      v38();
      sub_1000B5E7C(v30, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_100043924();
      v38();
      sub_1000B5E24();
      goto LABEL_17;
    }
LABEL_35:
    swift_release_n();
    swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v26 = (void *)sub_1000ADE5C(v55, v0, (uint64_t)sub_10007738C, 0);
  }
  v68[0] = (uint64_t)sub_100116B88((uint64_t)v26);
  sub_1000B10DC(v68, (uint64_t (*)(uint64_t, uint64_t))sub_100076CBC);
  if (v2) {
    goto LABEL_40;
  }
  swift_release();
  sub_10002FAC4();
}

BOOL sub_10007738C()
{
  uint64_t v0 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v2 = __chkstk_darwin(v0, v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v9 = *(void *)(State - 8);
  __chkstk_darwin(State, v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for LoadState.loaded(_:), State);
  char v13 = sub_1000BA7FC((uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, State);
  sub_1000B5E24();
  if ((v13 & 1) == 0)
  {
    sub_1000B5E7C((uint64_t)v7, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_1000B5E24();
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)(*(void *)&v7[*(int *)(v0 + 48)] + 16);
  sub_1000B5E7C((uint64_t)v7, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_1000B5E24();
  if (v14)
  {
LABEL_5:
    BOOL v15 = 0;
    goto LABEL_6;
  }
  BOOL v15 = *(void *)(*(void *)&v4[*(int *)(v0 + 44)] + 16) == 0;
LABEL_6:
  sub_1000B5E7C((uint64_t)v4, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15;
}

void sub_1000775E0()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Date();
  sub_100008678();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  sub_100030158();
  uint64_t v25 = v9;
  sub_100030514();
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v24 - v12;
  uint64_t v14 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v15 = v3 + *(int *)(v14 + 36);
  uint64_t v16 = v3 + *(int *)(v14 + 32);
  sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
  char v17 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  if (v17) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v15;
  }
  v18(v13, v19, v4);
  uint64_t v20 = v1 + *(int *)(v14 + 36);
  uint64_t v21 = v1 + *(int *)(v14 + 32);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v20;
  }
  v18(v25, v22, v4);
  sub_10004468C();
  static Date.< infix(_:_:)();
  uint64_t v23 = *(void (**)(void))(v6 + 8);
  sub_1000B9554();
  sub_100043F00();
  v23();
  sub_100043F00();
  v23();
  sub_10002FAC4();
}

void sub_10007777C()
{
  sub_100043D2C();
  sub_1000B9964();
  if (v0)
  {
    swift_retain();
    uint64_t v18 = swift_bridgeObjectRetain();
    sub_1000B8704(v18, v19, (uint64_t)sub_1000779B0);
    return;
  }
  uint64_t v34 = &_swiftEmptySetSingleton;
  sub_1000B9954();
  sub_1000B7908();
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  uint64_t v1 = __CocoaSet.Iterator.next()();
  if (!v1)
  {
LABEL_18:
    sub_10000F050();
    swift_release();
    return;
  }
  uint64_t v2 = v1;
  type metadata accessor for InferenceProviderAsset(0);
  while (1)
  {
    uint64_t v21 = v2;
    swift_dynamicCast();
    uint64_t v3 = v33 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    uint64_t v11 = v33;
    if (*(void *)(*(void *)(v3
                               + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 48))
                   + 16))
      break;
    swift_release();
LABEL_17:
    uint64_t v2 = __CocoaSet.Iterator.next()();
    if (!v2) {
      goto LABEL_18;
    }
  }
  uint64_t v12 = v34;
  unint64_t v13 = v34[2];
  if (v34[3] <= v13)
  {
    sub_1000230F4(v13 + 1, v4, v5, v6, v7, v8, v9, v10, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30,
      v31,
      v32,
      v33,
      (uint64_t)v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v43);
    uint64_t v12 = v34;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  unint64_t v14 = Hasher._finalize()() & ~(-1 << *((unsigned char *)v12 + 32));
  if (((-1 << v14) & ~v12[(v14 >> 6) + 7]) != 0)
  {
    sub_1000B6F10();
LABEL_16:
    *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(void *)(v12[6] + 8 * v16) = v11;
    ++v12[2];
    goto LABEL_17;
  }
  sub_1000B6EFC();
  while (1)
  {
    sub_1000B7778();
    if (v0)
    {
      if (v17) {
        break;
      }
    }
    sub_1000B77F4();
    sub_1000B6FC8();
    if (!v0)
    {
      sub_1000B6EE8();
      goto LABEL_16;
    }
  }
  __break(1u);
}

BOOL sub_1000779B0(uint64_t a1)
{
  return *(void *)(*(void *)(a1
                               + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 48))
                   + 16) != 0;
}

uint64_t sub_1000779EC()
{
  sub_1000086E0();
  v1[22] = v2;
  v1[23] = v0;
  v1[20] = v3;
  v1[21] = v4;
  v1[19] = v5;
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor();
  v1[24] = v6;
  sub_10002FA4C(v6);
  v1[25] = v7;
  v1[26] = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  v1[27] = v8;
  sub_10002FA4C(v8);
  v1[28] = v9;
  v1[29] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_100077AB4()
{
  sub_1000086E0();
  swift_task_alloc();
  sub_100057E8C();
  *(void *)(v0 + 240) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_100077B50;
  uint64_t v3 = sub_1000B9650();
  return sub_10006D334(v3, v4);
}

uint64_t sub_100077B50()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 248) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100077C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v26;
  a24 = v27;
  sub_100043E90();
  a22 = v24;
  sub_1000B65F0(v24 + 16, v24 + 96, &qword_10015C018);
  if (*(void *)(v24 + 120))
  {
    uint64_t v28 = (long long *)sub_100043EDC();
    sub_10000831C(v28, v29);
    uint64_t v30 = swift_task_alloc();
    uint64_t v31 = (void *)sub_1000B939C(v30);
    *uint64_t v31 = v32;
    v31[1] = sub_100077F64;
    sub_100043638();
    return sub_10008988C(v33, v34);
  }
  else
  {
    sub_100042EDC(v24 + 96, &qword_10015C018);
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_1000B9FC4();
    sub_100003B18(v37, (uint64_t)qword_10015D5A0);
    uint64_t v38 = sub_100043FB4();
    v39(v38);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (sub_1000B8B64(v41))
    {
      a10 = v24 + 136;
      sub_100030314();
      a11 = sub_10002FF90();
      a12 = a11;
      sub_1000BA3C4(4.8149e-34);
      sub_1000B5280(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v42 = sub_1000B9578();
      uint64_t v44 = sub_10001DF20(v42, v43, &a12);
      sub_1000B9F98(v44);
      swift_bridgeObjectRelease();
      sub_100057FE4();
      v45();
      sub_1000B7EE4((void *)&_mh_execute_header, v40, v25, "claimAssets attempted with unrecognized InferenceProvider %s");
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v46 = sub_100044634();
      v47(v46);
    }

    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    uint64_t v49 = v48;
    *uint64_t v48 = InferenceProviderDescriptor.description.getter();
    v49[1] = v50;
    sub_10002FC6C();
    sub_100043E9C();
    v51();
    swift_willThrow();
    sub_100042EDC(v24 + 16, &qword_10015C018);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100043638();
    return v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_100077F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v15 = v14;
  sub_10000ED94();
  *unint64_t v16 = v15;
  *unint64_t v16 = *v13;
  v15[33] = v17;
  v15[34] = v12;
  swift_task_dealloc();
  if (v12)
  {
    uint64_t v18 = v15[23];
    return _swift_task_switch(sub_100078484, v18, 0);
  }
  else
  {
    swift_task_alloc();
    sub_100057E8C();
    v15[35] = v24;
    *uint64_t v24 = v25;
    v24[1] = sub_1000780B8;
    uint64_t v26 = v15[21];
    return Task<>.value.getter(v15 + 36, v26, &unk_1001550B8, v19, v20, v21, v22, v23, a9, a10, a11, a12);
  }
}

uint64_t sub_1000780B8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100078194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v27;
  a26 = v28;
  sub_100058050();
  a24 = v26;
  uint64_t v29 = v26 + 16;
  if (*(unsigned char *)(v26 + 288))
  {
    swift_bridgeObjectRelease();
    sub_100008130(v26 + 56);
    sub_100042EDC(v26 + 16, &qword_10015C018);
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v30 = *(void *)(v26 + 160);
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003B18(v31, (uint64_t)qword_10015D5A0);
    uint64_t v32 = sub_1000443CC();
    v33(v32);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (sub_1000B7744(v35))
    {
      a11 = v26 + 144;
      a13 = v26 + 16;
      uint64_t v36 = (_DWORD *)sub_100030314();
      sub_10002FF90();
      sub_1000B95E4();
      *uint64_t v36 = 136315138;
      a10 = v36 + 1;
      sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v26 + 144) = sub_10001DF20(v37, v38, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043F00();
      v39();
      sub_1000B86D0((void *)&_mh_execute_header, v34, (os_log_type_t)v30, "Session %s is foreground, marking assets as in use by the session");
      sub_100043EE8();
      sub_10000ED7C();
      uint64_t v29 = v26 + 16;
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v26 + 224) + 8))(*(void *)(v26 + 232), *(void *)(v26 + 216));
    }

    uint64_t v40 = *(void *)(v26 + 264);
    uint64_t v41 = *(void *)(v26 + 184);
    uint64_t v42 = *(void *)(v26 + 160);
    uint64_t v43 = swift_task_alloc();
    *(void *)(v43 + 16) = v41;
    *(void *)(v43 + 24) = v42;
    sub_100078508((void (*)(uint64_t *))sub_1000B6D78, v43, v40);
    swift_task_dealloc();
    sub_100008130(v26 + 56);
    sub_100042EDC(v29, &qword_10015C018);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_1000306EC();
  return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_10007841C()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100078484()
{
  sub_1000086E0();
  sub_100008130(v0 + 56);
  sub_100042EDC(v0 + 16, &qword_10015C018);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_100078508(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v8 = v26;
    int64_t v9 = v27;
    unint64_t v10 = v28;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    int64_t v9 = 0;
  }
  int64_t v22 = (unint64_t)(v8 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v10)
  {
    uint64_t v15 = (v10 - 1) & v10;
    unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v17 = v9;
    goto LABEL_24;
  }
  int64_t v17 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v17 < v22)
    {
      unint64_t v19 = *(void *)(v23 + 8 * v17);
      if (v19)
      {
LABEL_23:
        uint64_t v15 = (v19 - 1) & v19;
        unint64_t v16 = __clz(__rbit64(v19)) + (v17 << 6);
LABEL_24:
        uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
        swift_retain();
        for (; v18; uint64_t v15 = v10)
        {
          uint64_t v29 = v18;
          a1(&v29);
          uint64_t result = swift_release();
          if (v4) {
            break;
          }
          int64_t v9 = v17;
          unint64_t v10 = v15;
          if ((v5 & 0x8000000000000000) == 0) {
            goto LABEL_8;
          }
LABEL_10:
          if (!__CocoaSet.Iterator.next()()) {
            break;
          }
          type metadata accessor for InferenceProviderAsset(0);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v18 = v29;
          swift_unknownObjectRelease();
          int64_t v17 = v9;
        }
        return sub_10002EAF0();
      }
      int64_t v20 = v9 + 2;
      if (v9 + 2 < v22)
      {
        unint64_t v19 = *(void *)(v23 + 8 * v20);
        if (v19) {
          goto LABEL_22;
        }
        int64_t v20 = v9 + 3;
        if (v9 + 3 >= v22) {
          return sub_10002EAF0();
        }
        unint64_t v19 = *(void *)(v23 + 8 * v20);
        if (v19)
        {
LABEL_22:
          int64_t v17 = v20;
          goto LABEL_23;
        }
        int64_t v20 = v9 + 4;
        if (v9 + 4 < v22)
        {
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v17 = v9 + 5;
          if (v9 + 5 < v22)
          {
            unint64_t v19 = *(void *)(v23 + 8 * v17);
            if (!v19)
            {
              int64_t v21 = v9 + 6;
              while (v21 < v22)
              {
                unint64_t v19 = *(void *)(v23 + 8 * v21++);
                if (v19)
                {
                  int64_t v17 = v21 - 1;
                  goto LABEL_23;
                }
              }
              return sub_10002EAF0();
            }
            goto LABEL_23;
          }
        }
      }
    }
    return sub_10002EAF0();
  }
  __break(1u);
  return result;
}

uint64_t sub_100078820(void (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  unint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  while (1)
  {
    while (__OFSUB__(v6--, 1))
    {
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        return swift_bridgeObjectRelease();
      }
    }
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_9;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
    if (v6 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
    uint64_t v8 = *(void *)(a3 + 32 + 8 * v6);
    swift_retain();
LABEL_9:
    uint64_t v10 = v8;
    a1(&v10);
    if (v3) {
      break;
    }
    swift_release();
    if (!v6) {
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10007894C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v26 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v6 = __chkstk_darwin(v26, v5);
  uint64_t v25 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v22 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v23 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & v11;
  v22[1] = a2;
  uint64_t v15 = a2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v27 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_beginAccess();
  int64_t v17 = 0;
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  for (v14 &= v14 - 1; ; uint64_t v14 = (v19 - 1) & v19)
  {
    sub_1000B5E24();
    swift_bridgeObjectRetain_n();
    swift_retain();
    sub_100020654();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v21 = (uint64_t)v25;
    sub_1000B5E24();
    swift_beginAccess();
    sub_1000B52C8(v21, v15);
    swift_endAccess();
    sub_1000B5E7C((uint64_t)v10, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t result = swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v17;
    if (!v19)
    {
      int64_t v17 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      uint64_t v19 = *(void *)(v23 + 8 * v17);
      if (!v19)
      {
        int64_t v17 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_23;
        }
        uint64_t v19 = *(void *)(v23 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v18 + 3;
          if (v18 + 3 >= v24) {
            goto LABEL_23;
          }
          uint64_t v19 = *(void *)(v23 + 8 * v17);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v24)
  {
LABEL_23:
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v17 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v17 >= v24) {
      goto LABEL_23;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v17);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100078C78()
{
  sub_1000086E0();
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v0;
  *(unsigned char *)(v1 + 412) = v3;
  *(void *)(v1 + 168) = v4;
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor();
  *(void *)(v1 + 192) = v5;
  sub_10002FA4C(v5);
  *(void *)(v1 + 200) = v6;
  *(void *)(v1 + 208) = sub_10002FE18();
  uint64_t v7 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v7);
  *(void *)(v1 + 216) = sub_1000436D8();
  *(void *)(v1 + 224) = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015DA90);
  sub_10002FDD0(v8);
  *(void *)(v1 + 232) = sub_10002FE18();
  uint64_t v9 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v9);
  *(void *)(v1 + 240) = sub_10002FE18();
  uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  *(void *)(v1 + 248) = v10;
  sub_10002FA4C(v10);
  *(void *)(v1 + 256) = v11;
  *(void *)(v1 + 264) = sub_1000436D8();
  *(void *)(v1 + 272) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_100078DC0()
{
  sub_1000086E0();
  swift_task_alloc();
  sub_100057E8C();
  *(void *)(v0 + 280) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_100078E5C;
  uint64_t v3 = sub_1000B9650();
  return sub_10006D334(v3, v4);
}

uint64_t sub_100078E5C()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 288) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100078F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v26;
  a24 = v27;
  sub_100043E90();
  a22 = v24;
  sub_1000B65F0((uint64_t)(v24 + 2), (uint64_t)(v24 + 12), &qword_10015C018);
  if (v24[15])
  {
    uint64_t v28 = (long long *)sub_1000B9E58();
    sub_10000831C(v28, v29);
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    v24[37] = sub_100003B18(v30, (uint64_t)qword_10015D5A0);
    swift_bridgeObjectRetain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = sub_1000306C4(v32);
    uint64_t v34 = v24[21];
    if (v33)
    {
      uint64_t v35 = sub_10000EFE8();
      a12 = sub_10002FF90();
      *(_DWORD *)uint64_t v35 = 134218242;
      v24[19] = *(void *)(v34 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      if (*(void *)(v34 + 16) == 1) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = 115;
      }
      if (*(void *)(v34 + 16) == 1) {
        unint64_t v37 = 0xE000000000000000;
      }
      else {
        unint64_t v37 = 0xE100000000000000;
      }
      v24[20] = sub_10001DF20(v36, v37, &a12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_1000B88E8((void *)&_mh_execute_header, v31, v38, "Force loading in %ld asset%s");
      sub_1000B9BF4();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v48 = (void *)swift_task_alloc();
    v24[38] = v48;
    *uint64_t v48 = v24;
    v48[1] = sub_100079410;
    sub_100044070(v24[21]);
    sub_100043638();
    return sub_10008988C(v49, v50);
  }
  else
  {
    sub_100042EDC((uint64_t)(v24 + 12), &qword_10015C018);
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v39 = sub_1000B9FC4();
    sub_100003B18(v39, (uint64_t)qword_10015D5A0);
    uint64_t v40 = sub_100043FB4();
    v41(v40);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (sub_1000B8B64(v43))
    {
      a10 = v24 + 17;
      sub_100030314();
      a11 = sub_10002FF90();
      a12 = a11;
      sub_1000BA3C4(4.8149e-34);
      sub_1000B5280(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v44 = sub_1000B9578();
      uint64_t v46 = sub_10001DF20(v44, v45, &a12);
      sub_1000B9F98(v46);
      swift_bridgeObjectRelease();
      sub_100057FE4();
      v47();
      sub_1000B7EE4((void *)&_mh_execute_header, v42, v25, "forceLoadInModels attempted with unrecognized InferenceProvider %s");
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v53 = sub_100044634();
      v54(v53);
    }

    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    uint64_t v56 = v55;
    uint64_t *v55 = InferenceProviderDescriptor.description.getter();
    v56[1] = v57;
    sub_10002FC6C();
    sub_100043E9C();
    v58();
    swift_willThrow();
    sub_100042EDC((uint64_t)(v24 + 2), &qword_10015C018);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100043638();
    return v60(v59, v60, v61, v62, v63, v64, v65, v66, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_100079410()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  *(void *)(v4 + 312) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v4 + 320) = v3;
  }
  sub_100030C68();
  sub_10002FE64();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100079534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v16 = *(void *)(v15 + 320);
  unint64_t v17 = (unint64_t)sub_10008D13C(v16);
  *(void *)(v15 + 328) = v17;
  swift_bridgeObjectRelease();
  if (v17 >> 62)
  {
    sub_1000B827C();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    sub_1000B92D4();
    swift_bridgeObjectRetain();
  }
  *(void *)(v15 + 336) = v16;
  if (v16)
  {
    *(_DWORD *)(v15 + 408) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
    uint64_t v18 = *(void *)(v15 + 328);
    if ((v18 & 0xC000000000000001) != 0)
    {
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 32);
      swift_retain();
    }
    *(void *)(v15 + 344) = v19;
    *(void *)(v15 + 352) = 1;
    if (*(unsigned char *)(v15 + 412) == 1)
    {
      sub_100043E68();
      v34();
      uint64_t v35 = swift_task_alloc();
      uint64_t v36 = (void *)sub_1000B9AF4(v35);
      *uint64_t v36 = v37;
      v36[1] = sub_10007981C;
      sub_1000B9CC8();
      sub_10002FE48();
      return sub_10008F160();
    }
    else
    {
      uint64_t v39 = *(void *)(v15 + 232);
      uint64_t v40 = *(void *)(v15 + 224);
      sub_100043E68();
      v41();
      uint64_t v42 = sub_100003A70(&qword_10015B408);
      sub_1000B6E34(v42);
      uint64_t v43 = sub_100003A70(&qword_10015B9A0);
      sub_100006960(v39, 1, 1, v43);
      uint64_t v44 = type metadata accessor for AuditToken();
      sub_100069D3C(v40, v45, v46, v44);
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v15 + 376) = v47;
      *uint64_t v47 = v15;
      v47[1] = sub_100079BCC;
      sub_1000B8AA0();
      sub_10002FE48();
      return sub_10007A644();
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();
    int64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    uint64_t v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = (_WORD *)sub_10005A928();
      sub_100069CF8(v23);
      sub_1000B6DF8((void *)&_mh_execute_header, v20, v24, "Successfully acquired assets");
      sub_10000ED7C();
    }
    sub_1000B897C();
    sub_10007A394();
    sub_100008130(v14);
    sub_100042EDC(v22, &qword_10015C018);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
    return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_10007981C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 184);
    sub_10004381C();
    v8();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_10007A074;
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v11 = *(void *)(v3 + 184);
    sub_10004381C();
    v12();
    uint64_t v9 = sub_100079940;
    uint64_t v10 = v11;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_100079940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  uint64_t v16 = *(void *)(v15 + 352);
  uint64_t v17 = *(void *)(v15 + 336);
  swift_release();
  if (v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    uint64_t v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v21 = (_WORD *)sub_10005A928();
      sub_100069CF8(v21);
      sub_1000B6DF8((void *)&_mh_execute_header, v18, v22, "Successfully acquired assets");
      sub_10000ED7C();
    }
    sub_1000B897C();
    sub_10007A394();
    sub_100008130(v14);
    sub_100042EDC(v20, &qword_10015C018);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
    return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v32 = *(void *)(v15 + 352);
    uint64_t v33 = *(void *)(v15 + 328);
    if ((v33 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v34 = result;
    }
    else
    {
      uint64_t v34 = *(void *)(v33 + 8 * v32 + 32);
      uint64_t result = swift_retain();
    }
    *(void *)(v15 + 344) = v34;
    *(void *)(v15 + 352) = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
    }
    else if (*(unsigned char *)(v15 + 412) == 1)
    {
      sub_100043E68();
      v35();
      uint64_t v36 = swift_task_alloc();
      uint64_t v37 = (void *)sub_1000B9AF4(v36);
      *uint64_t v37 = v38;
      v37[1] = sub_10007981C;
      sub_1000B9CC8();
      sub_10002FE48();
      return sub_10008F160();
    }
    else
    {
      uint64_t v40 = *(void *)(v15 + 224);
      sub_100043E68();
      v41();
      uint64_t v42 = sub_100003A70(&qword_10015B408);
      sub_1000B6E34(v42);
      uint64_t v43 = sub_100003A70(&qword_10015B9A0);
      uint64_t v44 = sub_1000B700C(v43);
      sub_100069D3C(v40, v45, v46, v44);
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v15 + 376) = v47;
      *uint64_t v47 = v15;
      v47[1] = sub_100079BCC;
      sub_1000B8AA0();
      sub_10002FE48();
      return sub_10007A644();
    }
  }
  return result;
}

uint64_t sub_100079BCC()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  v3[48] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[30];
    uint64_t v8 = v3[29];
    sub_100042EDC(v3[28], &qword_10015DA50);
    sub_100042EDC(v8, &qword_10015DA90);
    sub_100042EDC(v7, &qword_10015BAA8);
    sub_10004468C();
    sub_100057FE4();
    v9();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v3[30];
    uint64_t v11 = v3[29];
    sub_100042EDC(v3[28], &qword_10015DA50);
    sub_100042EDC(v11, &qword_10015DA90);
    sub_100042EDC(v10, &qword_10015BAA8);
    sub_100043CF4();
    v12();
  }
  sub_10000F0B4();
  sub_10002FEAC();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_100079D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  sub_1000B9044();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FEAC();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t sub_100079DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  sub_100008130(v10 + 56);
  sub_100042EDC(v10 + 16, &qword_10015C018);
  sub_1000B9044();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FEAC();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_100079E94()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 216);
  uint64_t v3 = *(void *)(v1 + 184);
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100042EDC(v2, &qword_10015DA50);
  return _swift_task_switch(sub_100079FBC, v3, 0);
}

uint64_t sub_100079FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  swift_willThrow();
  sub_100008130(v10 + 56);
  sub_100042EDC(v10 + 16, &qword_10015C018);
  sub_1000B9044();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FEAC();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_10007A074()
{
  sub_10002FEF0();
  sub_10002FC60();
  v0[49] = v0[46];
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_100044424(v2))
  {
    sub_100030314();
    uint64_t v3 = (void *)sub_100057C20();
    sub_1000BA4DC(5.7779e-34);
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v4;
    sub_100043948();
    *uint64_t v3 = v4;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v1, v5, "Failed acquiring assets: %@, releasing any assets that may have been acquired");
    sub_100003A70(&qword_10015BA58);
    sub_100043930();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[27];

  uint64_t v7 = type metadata accessor for AuditToken();
  sub_100069D3C(v6, v8, v9, v7);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[50] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100079E94;
  sub_100044070(v0[41]);
  sub_10002FE94();
  return sub_10009A344();
}

uint64_t sub_10007A204()
{
  sub_10002FEF0();
  sub_10002FC60();
  v0[49] = v0[48];
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_100044424(v2))
  {
    sub_100030314();
    uint64_t v3 = (void *)sub_100057C20();
    sub_1000BA4DC(5.7779e-34);
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v4;
    sub_100043948();
    *uint64_t v3 = v4;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v1, v5, "Failed acquiring assets: %@, releasing any assets that may have been acquired");
    sub_100003A70(&qword_10015BA58);
    sub_100043930();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[27];

  uint64_t v7 = type metadata accessor for AuditToken();
  sub_100069D3C(v6, v8, v9, v7);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[50] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100079E94;
  sub_100044070(v0[41]);
  sub_10002FE94();
  return sub_10009A344();
}

void sub_10007A394()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  sub_1000B9970();
  type metadata accessor for AssetPolicy();
  sub_100008678();
  __chkstk_darwin(v6, v7);
  sub_10000F0D0();
  uint64_t v8 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_100043D2C();
  sub_1000B95D8();
  sub_100069DF4();
  v9();
  os_log_type_t v10 = AssetPolicy.allowAssetTimerUse.getter();
  sub_1000B705C();
  v11();
  if (v10)
  {
    uint64_t v12 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
    if (*(double *)(v8 + *(int *)(v12 + 24)) > 0.0)
    {
      uint64_t v13 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
      if (!*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
      {
        uint64_t v14 = v12;
        if (sub_1000A5F0C((uint64_t (*)(uint64_t))sub_100075FD0, sub_1000B5D78))
        {
          if (qword_10015B0C0 != -1) {
            swift_once();
          }
          uint64_t v15 = type metadata accessor for Logger();
          sub_100003B18(v15, (uint64_t)qword_10015D5A0);
          swift_retain();
          uint64_t v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (sub_1000306C4(v17))
          {
            *(_DWORD *)sub_100030314() = 134217984;
            sub_1000BA458(*(double *)(v8 + *(int *)(v14 + 24)));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            sub_1000B8F88((void *)&_mh_execute_header, v16, v10, "Starting task to purge inactive assets after %f seconds");
            sub_10000ED7C();
          }
          else
          {
            swift_release();
          }

          uint64_t v18 = type metadata accessor for TaskPriority();
          sub_100069D3C(v1, v19, v20, v18);
          swift_allocObject();
          swift_weakInit();
          os_log_type_t v21 = (void *)swift_allocObject();
          sub_1000B9D08(v21);
          *(void *)(v2 + v13) = sub_100003730(v1, (uint64_t)&unk_10015DB50, v22);
          swift_release();
        }
      }
    }
  }
  sub_10002FAC4();
}

uint64_t sub_10007A644()
{
  sub_1000086E0();
  *(unsigned char *)(v1 + 417) = v2;
  *(unsigned char *)(v1 + 416) = v3;
  *(void *)(v1 + 168) = v4;
  *(void *)(v1 + 176) = v0;
  *(void *)(v1 + 152) = v5;
  *(void *)(v1 + 160) = v6;
  *(void *)(v1 + 136) = v7;
  *(void *)(v1 + 144) = v8;
  uint64_t v9 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v9);
  *(void *)(v1 + 184) = v10;
  *(void *)(v1 + 192) = *(void *)(v11 + 64);
  *(void *)(v1 + 200) = sub_10002FE18();
  uint64_t v12 = sub_100003A70(&qword_10015DA90);
  sub_10002FA4C(v12);
  *(void *)(v1 + 208) = v13;
  *(void *)(v1 + 216) = *(void *)(v14 + 64);
  *(void *)(v1 + 224) = sub_10002FE18();
  uint64_t v15 = sub_100003A70(&qword_10015BAA8);
  sub_10002FA4C(v15);
  *(void *)(v1 + 232) = v16;
  *(void *)(v1 + 240) = *(void *)(v17 + 64);
  *(void *)(v1 + 248) = sub_10002FE18();
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  *(void *)(v1 + 256) = v18;
  sub_10002FA4C(v18);
  *(void *)(v1 + 264) = v19;
  *(void *)(v1 + 272) = *(void *)(v20 + 64);
  *(void *)(v1 + 280) = sub_10002FE18();
  uint64_t v21 = type metadata accessor for AssetCost();
  *(void *)(v1 + 288) = v21;
  sub_10002FA4C(v21);
  *(void *)(v1 + 296) = v22;
  *(void *)(v1 + 304) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v23, v24, v25);
}

#error "10007A880: call analysis failed (funcsize=522)"

uint64_t sub_10007B04C()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *char v3 = v2;
  *char v3 = *v1;
  *(void *)(v2 + 344) = v0;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

#error "10007B688: call analysis failed (funcsize=496)"

uint64_t sub_10007B970()
{
  sub_1000086EC();
  uint64_t v1 = v0[45];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[46] = v2;
  v2[2] = v0 + 13;
  v2[3] = &unk_10015DC10;
  v2[4] = v1;
  char v3 = (void *)swift_task_alloc();
  v0[47] = v3;
  *char v3 = v0;
  v3[1] = sub_10007BA58;
  sub_1000B9AC0((uint64_t)&type metadata for ());
  sub_1000B7618();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10007BA58()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 384) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007BB3C()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "10007BE18: call analysis failed (funcsize=591)"

uint64_t sub_10007C544()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_10007C5B0()
{
  sub_100030014();
  sub_10000F01C();
  swift_release();
  sub_1000B757C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10007C638()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 176);
    swift_release();
    uint64_t v8 = sub_10007CFD4;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 176);
    uint64_t v8 = sub_10007C72C;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10007C72C()
{
  sub_1000086EC();
  swift_release_n();
  sub_1000B7800();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

#error "10007CCEC: call analysis failed (funcsize=496)"

uint64_t sub_10007CFD4()
{
  sub_100030014();
  sub_10000F01C();
  swift_release();
  sub_1000B757C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10007D05C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 97) = v10;
  *(unsigned char *)(v8 + 96) = a8;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 80) = *a1;
  return _swift_task_switch(sub_10007D09C, 0, 0);
}

#error "10007D184: call analysis failed (funcsize=103)"

uint64_t sub_10007D250()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_10007D310()
{
  sub_1000086E0();
  v1[33] = v2;
  v1[34] = v0;
  v1[31] = v3;
  v1[32] = v4;
  v1[29] = v5;
  v1[30] = v6;
  v1[28] = v7;
  uint64_t v8 = type metadata accessor for InferenceProviderDescriptor();
  v1[35] = v8;
  sub_10002FA4C(v8);
  v1[36] = v9;
  v1[37] = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v10);
  v1[38] = sub_1000436D8();
  v1[39] = swift_task_alloc();
  uint64_t v11 = sub_100003A70(&qword_10015DA90);
  sub_10002FDD0(v11);
  v1[40] = sub_10002FE18();
  uint64_t v12 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v12);
  v1[41] = sub_10002FE18();
  uint64_t v13 = type metadata accessor for AssetCost();
  v1[42] = v13;
  sub_10002FA4C(v13);
  v1[43] = v14;
  v1[44] = sub_1000436D8();
  v1[45] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for AssetPolicy();
  v1[46] = v15;
  sub_10002FA4C(v15);
  v1[47] = v16;
  v1[48] = sub_1000436D8();
  v1[49] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for ModelCatalogAsset(0);
  sub_10002FA4C(v17);
  v1[50] = v18;
  v1[51] = sub_1000436D8();
  v1[52] = swift_task_alloc();
  uint64_t v19 = sub_100003A70(&qword_10015B9A0);
  v1[53] = v19;
  sub_10002FA4C(v19);
  v1[54] = v20;
  uint64_t v21 = sub_1000436D8();
  v1[56] = sub_1000BA11C(v21);
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v22, v23, v24);
}

uint64_t sub_10007D52C()
{
  sub_1000086E0();
  swift_task_alloc();
  sub_100057E8C();
  *(void *)(v0 + 480) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_10007D5D0;
  uint64_t v3 = *(void *)(v0 + 248);
  return sub_10006D334(v0 + 16, v3);
}

uint64_t sub_10007D5D0()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 488) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10007D6C8()
{
  unint64_t v96 = v0;
  sub_1000B65F0(v0 + 16, v0 + 96, &qword_10015C018);
  unint64_t v93 = v0;
  uint64_t v91 = v0 + 16;
  if (!*(void *)(v0 + 120))
  {
    sub_100042EDC(v0 + 96, &qword_10015C018);
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v35 = *(void *)(v0 + 424);
    uint64_t v36 = *(void *)(v0 + 432);
    uint64_t v38 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 248);
    uint64_t v39 = type metadata accessor for Logger();
    sub_100003B18(v39, (uint64_t)qword_10015D5A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v34, v38, v35);
    uint64_t v40 = sub_1000BA570();
    v41(v40);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = sub_100044098(v43);
    uint64_t v45 = *(void *)(v0 + 288);
    uint64_t v46 = *(void *)(v0 + 296);
    uint64_t v47 = *(void *)(v0 + 280);
    if (v44)
    {
      sub_10000EFE8();
      uint64_t v95 = (void *)sub_10006A040();
      *(_DWORD *)uint64_t v37 = 136315394;
      sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 168) = sub_10001DF20(v48, v49, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043924();
      v50();
      *(_WORD *)(v37 + 12) = 2080;
      sub_1000B5280(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1000B7A4C(v51, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043FA8();
      v53();
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v37, "prewarmAssets for %s attempted with unrecognized InferenceProvider %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_100043924();
      v56();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
    }

    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    uint64_t v58 = v57;
    *uint64_t v57 = InferenceProviderDescriptor.description.getter();
    v58[1] = v59;
    sub_10002FC6C();
    sub_100043E9C();
    v60();
    swift_willThrow();
    sub_100042EDC(v91, &qword_10015C018);
    goto LABEL_28;
  }
  uint64_t v90 = v0 + 56;
  sub_10000831C((long long *)(v0 + 96), v0 + 56);
  if (qword_10015B0C0 != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v0 + 432);
    uint64_t v2 = type metadata accessor for Logger();
    *(void *)(v0 + 496) = sub_100003B18(v2, (uint64_t)qword_10015D5A0);
    *(void *)(v0 + 504) = *(void *)(v1 + 16);
    *(void *)(v0 + 512) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v3 = sub_1000B9094();
    v4(v3);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 224);
    if (!v7)
    {
      uint64_t v54 = *(void (**)(void))(*(void *)(v0 + 432) + 8);
      sub_100043F00();
      v54();

      sub_1000B9D58();
      uint64_t v55 = v91;
      goto LABEL_24;
    }
    os_log_type_t v88 = v6;
    os_log_t log = v5;
    uint64_t v9 = sub_10000EFE8();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v10 = sub_1000B8AEC();
    *(void *)(v0 + 208) = sub_10001DF20(v10, v11, &v94);
    uint64_t v85 = (uint64_t *)(v0 + 216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057ECC();
    uint64_t v86 = v12;
    sub_100043F00();
    v13();
    uint64_t v87 = (uint8_t *)v9;
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v14 = *(void *)(v8 + 16);
    if (!v14) {
      break;
    }
    uint64_t v92 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v95 = _swiftEmptyArrayStorage;
    sub_10001EDA8(0, v14, 0);
    uint64_t v16 = sub_10002E3C4(v15);
    int v18 = v17;
    while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(unsigned char *)(v15 + 32))
    {
      if (((*(void *)(v15 + 56 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(v15 + 36) != v18) {
        goto LABEL_36;
      }
      uint64_t v19 = *(uint64_t **)(v93 + 408);
      sub_1000B5E24();
      uint64_t v20 = sub_1000BA7AC();
      sub_10000E54C(v20, v21);
      uint64_t v22 = *v19;
      uint64_t v23 = *(void *)(v92 + 8);
      swift_bridgeObjectRetain();
      sub_1000B5E7C((uint64_t)v19, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v24 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EDA8(0, v24[2] + 1, 1);
        uint64_t v24 = v95;
      }
      unint64_t v0 = v24[2];
      unint64_t v25 = v24[3];
      if (v0 >= v25 >> 1)
      {
        sub_10001EDA8(v25 > 1, v0 + 1, 1);
        uint64_t v24 = v95;
      }
      void v24[2] = v0 + 1;
      uint64_t v26 = &v24[2 * v0];
      v26[4] = v22;
      void v26[5] = v23;
      uint64_t v27 = sub_100044468();
      uint64_t v16 = sub_10002E2DC(v27, v28, v29, v30);
      int v18 = v31;
      char v33 = v32 & 1;
      if (!--v14)
      {
        uint64_t v61 = sub_100044468();
        sub_10000E60C(v61, v62, v33);
        unint64_t v0 = v93;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
  }
LABEL_23:
  uint64_t v55 = v91;
  uint64_t v63 = Array.description.getter();
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  *uint64_t v85 = sub_10001DF20(v63, v65, &v94);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  sub_1000B9D58();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, log, v88, "Session %s trying to prewarm assets %s", v87, 0x16u);
  sub_1000B8B28();
  sub_10000ED7C();
  sub_10000ED7C();

  uint64_t v54 = v86;
LABEL_24:
  *(void *)(v0 + 520) = v54;
  uint64_t v66 = *(void *)(v0 + 376);
  uint64_t v67 = *(void *)(v0 + 272) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_100043D2C();
  sub_1000B9CFC();
  sub_100069DF4();
  v68();
  sub_100043E68();
  v69();
  sub_1000B5280(&qword_10015DC00, (void (*)(uint64_t))&type metadata accessor for AssetPolicy);
  sub_1000B9084();
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v71 = *(void (**)(void))(v66 + 8);
  sub_1000B9488();
  sub_100057FE4();
  v71();
  sub_100044474();
  sub_100057FE4();
  v71();
  if (v70)
  {
    uint64_t v72 = (void *)Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v73))
    {
      uint64_t v74 = (_WORD *)sub_10005A928();
      sub_100069CF8(v74);
      sub_10005A960((void *)&_mh_execute_header, v75, v76, "Prewarm not allowed by current policy");
      sub_10000ED7C();
    }

    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    *uint64_t v77 = *(void *)(v67 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0) + 32));
    sub_10002FC6C();
    sub_100043E9C();
    v78();
    swift_bridgeObjectRetain();
    swift_willThrow();
    sub_100042EDC(v55, &qword_10015C018);
    sub_100008130(v90);
LABEL_28:
    sub_1000B8C4C();
    sub_1000B9690();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v79 = *(uint64_t (**)(void))(v0 + 8);
    return v79();
  }
  uint64_t v81 = swift_task_alloc();
  unsigned int v82 = (void *)sub_1000B8A64(v81);
  *unsigned int v82 = v83;
  v82[1] = sub_10007E184;
  uint64_t v84 = sub_100044070(*(void *)(v0 + 224));
  return sub_10008988C(v84, v90);
}

uint64_t sub_10007E184()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000ED94();
  *uint64_t v5 = v4;
  *(void *)(v7 + 536) = v6;
  *(void *)(v7 + 544) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v8, v9, v10);
}

#error "10007E314: call analysis failed (funcsize=255)"

uint64_t sub_10007E6A0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 272);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10007F30C;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 272);
    uint64_t v8 = sub_10007E794;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10007E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v28;
  a24 = v29;
  sub_100043E90();
  a22 = v25;
  unint64_t v30 = (unint64_t)sub_10008D13C(v25[67]);
  v25[71] = v30;
  if (v30 >> 62)
  {
    sub_1000B8BAC();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v30 = v25[71];
  }
  else
  {
    sub_1000B9644();
    swift_bridgeObjectRetain();
  }
  v25[72] = v24;
  if (v24)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v31 = *(void *)(v30 + 32);
      swift_retain();
    }
    v25[73] = v31;
    v25[74] = 1;
    sub_1000B91E4();
    uint64_t v42 = sub_100003A70(&qword_10015B408);
    uint64_t v43 = sub_1000B9A90(v42);
    v27(v43);
    sub_1000BA61C();
    sub_10002FC6C();
    sub_100030274();
    v44();
    sub_1000B7830(v26);
    uint64_t v45 = (void *)swift_task_alloc();
    v25[75] = v45;
    *uint64_t v45 = v25;
    v45[1] = sub_10007EAAC;
    sub_1000B8958();
    sub_100043638();
    return sub_10007A644();
  }
  else
  {
    char v32 = (void (*)(uint64_t, uint64_t, uint64_t))v25[63];
    uint64_t v33 = v25[58];
    uint64_t v34 = v25[53];
    uint64_t v35 = v25[30];
    swift_bridgeObjectRelease();
    v32(v33, v35, v34);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (sub_100057B8C(v37))
    {
      sub_100030314();
      a13 = sub_10002FF90();
      sub_1000BA01C(4.8149e-34);
      sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v38 = sub_1000B792C();
      uint64_t v40 = sub_10001DF20(v38, v39, &a13);
      sub_1000B9FFC(v40);
      swift_bridgeObjectRelease();
      sub_10004381C();
      v41();
      sub_1000B72C4((void *)&_mh_execute_header, v36, (os_log_type_t)v30, "Successfully prewarmed assets for session %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v48 = sub_1000B8BEC();
      v49(v48);
    }

    sub_1000B9E80();
    uint64_t v61 = (char *)v51 + *v51;
    uint64_t v62 = v50;
    unint64_t v52 = (void *)swift_task_alloc();
    v25[77] = v52;
    *unint64_t v52 = v25;
    v52[1] = sub_10007EEFC;
    sub_1000B91C8();
    sub_100043638();
    return v57(v53, v54, v55, v56, v57, v58, v59, v60, a9, a10, v61, v62, a13, a14, a15, a16);
  }
}

uint64_t sub_10007EAAC()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  v3[76] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3[40];
    uint64_t v7 = v3[41];
    sub_100042EDC(v3[39], &qword_10015DA50);
    sub_100042EDC(v8, &qword_10015DA90);
    sub_100042EDC(v7, &qword_10015BAA8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v3[40];
    uint64_t v9 = v3[41];
    sub_100042EDC(v3[39], &qword_10015DA50);
    sub_100042EDC(v10, &qword_10015DA90);
    sub_100042EDC(v9, &qword_10015BAA8);
  }
  sub_10000F0B4();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10007EC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v27;
  a24 = v28;
  sub_100043E90();
  a22 = v24;
  uint64_t v29 = v24[74];
  uint64_t v30 = v24[72];
  swift_release();
  if (v29 == v30)
  {
    uint64_t v31 = (void (*)(uint64_t))v24[63];
    uint64_t v32 = v24[53];
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1000B9094();
    v31(v33);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (sub_100057B8C(v35))
    {
      sub_100030314();
      a13 = sub_10002FF90();
      sub_1000BA01C(4.8149e-34);
      sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
      uint64_t v36 = sub_1000B792C();
      uint64_t v38 = sub_10001DF20(v36, v37, &a13);
      sub_1000B9FFC(v38);
      swift_bridgeObjectRelease();
      sub_10004381C();
      v39();
      sub_1000B72C4((void *)&_mh_execute_header, v34, (os_log_type_t)v32, "Successfully prewarmed assets for session %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v44 = sub_1000B8BEC();
      v45(v44);
    }

    sub_1000B9E80();
    uint64_t v62 = (char *)v47 + *v47;
    uint64_t v63 = v46;
    uint64_t v48 = (void *)swift_task_alloc();
    v24[77] = v48;
    *uint64_t v48 = v24;
    v48[1] = sub_10007EEFC;
    sub_1000B91C8();
    sub_100043638();
    return v53(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, v62, v63, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v40 = v24[74];
    uint64_t v41 = v24[71];
    if ((v41 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v43 = result;
    }
    else
    {
      uint64_t v43 = *(void *)(v41 + 8 * v40 + 32);
      uint64_t result = swift_retain();
    }
    v24[73] = v43;
    v24[74] = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1000B91E4();
      uint64_t v57 = sub_100003A70(&qword_10015B408);
      uint64_t v58 = sub_1000B9A90(v57);
      v26(v58);
      sub_1000BA61C();
      sub_10002FC6C();
      sub_100030274();
      v59();
      sub_1000B7830(v25);
      uint64_t v60 = (void *)swift_task_alloc();
      v24[75] = v60;
      *uint64_t v60 = v24;
      v60[1] = sub_10007EAAC;
      sub_1000B8958();
      sub_100043638();
      return sub_10007A644();
    }
  }
  return result;
}

uint64_t sub_10007EEFC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 624) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 272);
    uint64_t v8 = sub_10007F8D4;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 272);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10007EFFC;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10007EFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000F120();
  uint64_t v36 = v22[51];
  uint64_t v37 = v22[49];
  uint64_t v38 = v22[48];
  uint64_t v39 = v22[45];
  sub_1000B9638();
  uint64_t v40 = v24;
  uint64_t v41 = v23;
  sub_1000B9690();
  uint64_t v42 = v26;
  uint64_t v43 = v25;
  uint64_t v44 = v22[38];
  uint64_t v45 = v22[37];
  sub_10007A394();
  sub_100042EDC((uint64_t)(v22 + 2), &qword_10015C018);
  sub_100008130((uint64_t)(v22 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10000F0E0();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
           a20,
           a21,
           a22);
}

uint64_t sub_10007F140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100057CCC();
  sub_100058050();
  sub_1000B70F8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000B9190();
  sub_1000306EC();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_10007F218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100057CCC();
  sub_100058050();
  sub_100042EDC(v18 + 16, &qword_10015C018);
  sub_100008130(v18 + 56);
  sub_1000B70F8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000B9190();
  sub_1000306EC();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_10007F30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100057CCC();
  sub_100058050();
  sub_100042EDC(v18 + 16, &qword_10015C018);
  sub_100008130(v18 + 56);
  sub_1000B70F8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000B9190();
  sub_1000306EC();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_10007F400()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 304);
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100042EDC(v2, &qword_10015DA50);
  return _swift_task_switch(sub_10007F528, v3, 0);
}

uint64_t sub_10007F528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B81CC();
  sub_1000B9660();
  swift_willThrow();
  sub_100042EDC((uint64_t)(v20 + 2), &qword_10015C018);
  sub_100008130((uint64_t)(v20 + 7));
  uint64_t v40 = v20[79];
  sub_1000B8C4C();
  uint64_t v34 = v22;
  uint64_t v35 = v21;
  sub_1000B9690();
  uint64_t v36 = v24;
  uint64_t v37 = v23;
  uint64_t v38 = v20[38];
  uint64_t v39 = v20[37];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100044308();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, a9, v34, v35, v36, v37, v38, v39, v40, a17, a18, a19, a20);
}

uint64_t sub_10007F650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v29;
  a26 = v30;
  sub_100058050();
  a24 = v27;
  swift_release();
  uint64_t v31 = v27[76];
  uint64_t v32 = sub_1000B91AC();
  v33(v32);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (sub_100044098(v35))
  {
    uint64_t v36 = v27[53];
    uint64_t v37 = (_DWORD *)sub_10000EFE8();
    uint64_t v52 = (void *)sub_100057C20();
    uint64_t v53 = sub_10002FF90();
    a14 = v53;
    *uint64_t v37 = 136315394;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = sub_10001DF20(v38, v39, &a14);
    sub_1000B8C6C(v40);
    swift_bridgeObjectRelease();
    sub_10004381C();
    v41();
    sub_100030C74();
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
    sub_1000B943C(v42);
    *uint64_t v52 = v36;
    swift_errorRelease();
    swift_errorRelease();
    sub_1000B88E8((void *)&_mh_execute_header, v34, v43, "Failed to load in assets for prewarm for session %s: %@, releasing any assets that may have been acquired");
    sub_100003A70(&qword_10015BA58);
    sub_100043EE8();
    sub_10000ED7C();
    uint64_t v26 = v53;
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_10000EFBC();
    v44();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v45 = sub_1000B9F44();
  *(void *)(v45 + 16) = v31;
  *(void *)(v45 + 24) = v28;
  sub_100078508((void (*)(uint64_t *))sub_1000B65A8, v45, v26);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  type metadata accessor for AuditToken();
  sub_10002FC6C();
  sub_100030274();
  v46();
  sub_1000B7E68((uint64_t)v34);
  uint64_t v47 = swift_task_alloc();
  uint64_t v48 = (void *)sub_1000B9B0C(v47);
  *uint64_t v48 = v49;
  v48[1] = sub_10007F400;
  sub_100044070(v27[71]);
  sub_1000306EC();
  return sub_10009A344();
}

uint64_t sub_10007F8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v29;
  a26 = v30;
  sub_100058050();
  a24 = v27;
  uint64_t v31 = v27[78];
  uint64_t v32 = sub_1000B91AC();
  v33(v32);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (sub_100044098(v35))
  {
    uint64_t v36 = v27[53];
    uint64_t v37 = (_DWORD *)sub_10000EFE8();
    uint64_t v52 = (void *)sub_100057C20();
    uint64_t v53 = sub_10002FF90();
    a14 = v53;
    *uint64_t v37 = 136315394;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = sub_10001DF20(v38, v39, &a14);
    sub_1000B8C6C(v40);
    swift_bridgeObjectRelease();
    sub_10004381C();
    v41();
    sub_100030C74();
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
    sub_1000B943C(v42);
    *uint64_t v52 = v36;
    swift_errorRelease();
    swift_errorRelease();
    sub_1000B88E8((void *)&_mh_execute_header, v34, v43, "Failed to load in assets for prewarm for session %s: %@, releasing any assets that may have been acquired");
    sub_100003A70(&qword_10015BA58);
    sub_100043EE8();
    sub_10000ED7C();
    uint64_t v26 = v53;
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_10000EFBC();
    v44();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v45 = sub_1000B9F44();
  *(void *)(v45 + 16) = v31;
  *(void *)(v45 + 24) = v28;
  sub_100078508((void (*)(uint64_t *))sub_1000B65A8, v45, v26);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  type metadata accessor for AuditToken();
  sub_10002FC6C();
  sub_100030274();
  v46();
  sub_1000B7E68((uint64_t)v34);
  uint64_t v47 = swift_task_alloc();
  uint64_t v48 = (void *)sub_1000B9B0C(v47);
  *uint64_t v48 = v49;
  v48[1] = sub_10007F400;
  sub_100044070(v27[71]);
  sub_1000306EC();
  return sub_10009A344();
}

void sub_10007FB50()
{
  sub_1000B9F04();
  uint64_t v1 = sub_100003A70(&qword_10015B9A0);
  sub_100008678();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100030158();
  uint64_t v35 = v6;
  sub_100030514();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  __chkstk_darwin(v9, v10);
  sub_1000BA134();
  uint64_t v11 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v11, v12);
  sub_100030158();
  sub_100030514();
  __chkstk_darwin(v13, v14);
  sub_1000B97D8();
  sub_100043D2C();
  sub_1000B5E24();
  sub_1000B98C4();
  sub_100030274();
  v15();
  swift_retain();
  sub_1000229A8();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  sub_100043DF8();
  v17();
  swift_release();
  sub_1000B5E24();
  swift_beginAccess();
  uint64_t v18 = sub_100030BD0();
  sub_1000B52C8(v18, v19);
  swift_endAccess();
  sub_1000B5E7C(v0, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003B18(v20, (uint64_t)qword_10015D5A0);
  sub_100030274();
  v21();
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    swift_retain();
    sub_1000C9804();
    swift_release();
    uint64_t v25 = sub_1000B95B4();
    sub_10001DF20(v25, v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_10001DF20(v28, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004381C();
    v30();
    sub_1000BA0A4();
    _os_log_impl(v31, v32, v33, v34, (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
    v16(v35, v1);
  }

  sub_1000B99C8();
}

void sub_10007FF98()
{
  sub_10002FAAC();
  uint64_t v4 = v0;
  uint64_t v39 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v5, v6);
  sub_100057F20();
  type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  sub_1000B9324();
  __chkstk_darwin(v11, v12);
  sub_1000B97E8();
  sub_100043D2C();
  sub_1000B9964();
  if (v18)
  {
    swift_retain();
    uint64_t v36 = swift_bridgeObjectRetain();
    sub_1000B8704(v36, v37, (uint64_t)sub_100080454);
    goto LABEL_35;
  }
  uint64_t v61 = &_swiftEmptySetSingleton;
  if (v0 < 0) {
    LOBYTE(v13) = v0;
  }
  else {
    LOBYTE(v13) = v0 & 0xF8;
  }
  sub_1000B7908();
  swift_bridgeObjectRetain();
  uint64_t v45 = __CocoaSet.makeIterator()();
  uint64_t v14 = __CocoaSet.Iterator.next()();
  if (!v14)
  {
LABEL_33:
    sub_10000F050();
    swift_release();
LABEL_35:
    sub_10002FAC4();
    return;
  }
  uint64_t v15 = v14;
  uint64_t v38 = v4;
  uint64_t v44 = type metadata accessor for InferenceProviderAsset(0);
  HIDWORD(v43) = enum case for LoadState.loaded(_:);
  uint64_t v42 = v8 + 104;
  uint64_t v40 = v8 + 16;
  uint64_t v16 = (void (**)(void))(v8 + 8);
  uint64_t v41 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v47 = v15;
    swift_dynamicCast();
    sub_100043F38();
    sub_100043E9C();
    v17();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    sub_1000B7470();
    sub_1000B7470();
    sub_1000B98D0();
    BOOL v18 = v18 && v2 == v3;
    if (v18)
    {
      sub_1000B8890();
      sub_1000B5E24();
      sub_100030274();
      v29();
      goto LABEL_20;
    }
    sub_1000B8A88();
    sub_1000BA68C();
    swift_bridgeObjectRelease();
    sub_1000B5E24();
    sub_100030274();
    v19();
    if (v13) {
      goto LABEL_20;
    }
    sub_1000B7470();
    sub_1000B7470();
    if (v58 == v56 && v59 == v57) {
      break;
    }
    _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000BA68C();
    swift_bridgeObjectRelease();
    uint64_t v21 = *v16;
    sub_1000303D4();
    v21();
    sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_1000303D4();
    v21();
    swift_endAccess();
    if (v13) {
      goto LABEL_21;
    }
    swift_release();
LABEL_32:
    uint64_t v15 = __CocoaSet.Iterator.next()();
    if (!v15) {
      goto LABEL_33;
    }
  }
  sub_1000B8890();
LABEL_20:
  uint64_t v30 = *v16;
  sub_1000303D4();
  v30();
  sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_1000303D4();
  v30();
  swift_endAccess();
LABEL_21:
  uint64_t v31 = v60;
  uint64_t v13 = v61;
  unint64_t v32 = v61[2];
  if (v61[3] <= v32)
  {
    sub_1000B926C(v22, v23, v24, v25, v26, v27, v28, v32, v38, v39, v40, (char)v41, v42, v43, v44, v45, v46, v47, v48,
      v49,
      v50,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      (uint64_t)v61);
    uint64_t v13 = v61;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Hasher._finalize()();
  sub_1000B6DC0();
  if (!v18)
  {
    sub_1000B6F10();
LABEL_31:
    sub_1000B8D38(v33);
    *(void *)(v13[6] + 8 * v35) = v31;
    ++v13[2];
    goto LABEL_32;
  }
  sub_1000B6EFC();
  while (1)
  {
    sub_1000B7778();
    if (v18 && (v34 & 1) != 0) {
      break;
    }
    sub_1000B77F4();
    sub_1000B6FC8();
    if (!v18)
    {
      sub_1000B6EE8();
      goto LABEL_31;
    }
  }
  __break(1u);
}

uint64_t sub_100080454()
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v1 = *(void *)(State - 8);
  __chkstk_darwin(State, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for LoadState.loaded(_:), State);
  char v5 = sub_1000BA7FC((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, State);
  return v5 & 1;
}

uint64_t sub_100080548()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100003B50((unint64_t)_swiftEmptyArrayStorage);
    uint64_t v0 = v2;
  }
  else
  {
    uint64_t v0 = &_swiftEmptySetSingleton;
  }
  sub_1000805CC(v0);

  return swift_bridgeObjectRelease();
}

#error "100080650: call analysis failed (funcsize=60)"

uint64_t sub_1000806C0(uint64_t a1)
{
  sub_100043D2C();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1000AC830(v3, v1);
  uint64_t v4 = sub_100072DE8();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  Swift::Int v6 = sub_1000ACF1C(v5, v1, a1);
  swift_retain();
  Swift::Int v7 = sub_1000AD710(v6, v1, v4);
  uint64_t v8 = sub_100073D50(v7, (uint64_t (*)(char *, char *))sub_100076794, 0);
  swift_release();
  if (v8 && (*(unsigned char *)(v8 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_1000AD9F4(v9, v1);
    uint64_t v10 = (void *)sub_100072DE8();
    swift_release();
    for (uint64_t i = v8; ; uint64_t i = v16)
    {
      sub_100043D2C();
      type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
      swift_bridgeObjectRetain();
      uint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v8 = sub_100073AF4(v12, v10);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (!v14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return i;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = sub_100073784(v15, v8, v14);
      swift_bridgeObjectRelease();
      if (!v16) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100003B18(v17, (uint64_t)qword_10015D5A0);
    swift_bridgeObjectRetain();
    BOOL v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      sub_10001DF20(v8, v14, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "nextAssetToUnloadToMakeRoom found dynamicBlocker but couldn't get asset for it %s", v20, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    sub_10002FC6C();
    sub_100043E9C();
    v21();
    swift_willThrow();
    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t sub_100080B04()
{
  uint64_t v0 = sub_1000308FC();
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(v0);

  return static Date.< infix(_:_:)();
}

uint64_t sub_100080B44()
{
  sub_1000086E0();
  v1[17] = v2;
  v1[18] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v3);
  v1[19] = sub_10002FE18();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[20] = v4;
  sub_10002FA4C(v4);
  v1[21] = v5;
  v1[22] = sub_1000436D8();
  v1[23] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v1[24] = State;
  sub_10002FA4C(State);
  v1[25] = v7;
  v1[26] = sub_1000436D8();
  v1[27] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AssetCost();
  v1[28] = v8;
  sub_10002FA4C(v8);
  v1[29] = v9;
  v1[30] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

#error "100080E48: call analysis failed (funcsize=564)"

uint64_t sub_100081580()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 288) = v0;
  swift_task_dealloc();
  sub_100044174();
  sub_10004381C();
  v4();
  sub_10000F0B4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000816C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  swift_release();
  uint64_t v18 = v16[36];
  uint64_t v19 = v16[32];
  uint64_t v20 = v16[30];
  sub_1000B8EE0();
  unint64_t v21 = AssetCost.onDeviceMemory.getter();
  uint64_t v22 = sub_100044784();
  ((void (*)(uint64_t))v19)(v22);
  if (sub_100075940() >= v21)
  {
    Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!sub_1000B7454(v23))
    {
LABEL_6:
      sub_1000B82D0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000304E0();
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v24 = (_WORD *)sub_10005A928();
    sub_1000B8220(v24);
    sub_1000B7888((void *)&_mh_execute_header, v25, v26);
    sub_10000ED7C();
    goto LABEL_6;
  }
  v16[34] = sub_1000806C0(v16[17]);
  if (v18)
  {
    sub_1000BA3AC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100043E38();
LABEL_7:
    sub_100043638();
    return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  sub_1000B9E4C();
  if (!v36)
  {
    Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (!sub_1000B7454(v43)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_1000B7908();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (sub_1000B7744(v38))
  {
    sub_100030314();
    sub_10002FF90();
    sub_1000BA360(4.8149e-34);
    sub_1000C9804();
    uint64_t v39 = sub_1000B9100();
    uint64_t v42 = sub_1000B8B48(v39, v40, v41);
    sub_1000BA340(v42);
    sub_10000F050();
    swift_bridgeObjectRelease();
    sub_1000B72C4((void *)&_mh_execute_header, v37, v17, "unloadIfNeededToMakeRoom unloading %s");
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000F050();
  }
  if ((*(unsigned char *)(v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0)
  {
    sub_1000B9ACC();
LABEL_20:
    sub_100043E9C();
    v48();
    uint64_t v49 = type metadata accessor for AuditToken();
    sub_1000B6E34(v49);
    uint64_t v50 = swift_task_alloc();
    uint64_t v51 = (void *)sub_1000B9390(v50);
    *uint64_t v51 = v52;
    v51[1] = sub_100081AE4;
    sub_10003069C();
    sub_100043638();
    return sub_10009690C();
  }
  sub_1000B829C();
  sub_100043D2C();
  sub_100069DF4();
  v44();
  sub_100043E68();
  v45();
  sub_1000B5280(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
  char v46 = sub_1000B82B0();
  uint64_t v47 = *(void (**)(void))(v19 + 8);
  sub_100043F00();
  v47();
  sub_100043F00();
  v47();
  if (v46) {
    goto LABEL_20;
  }
  sub_100043E9C();
  v54();
  uint64_t v55 = swift_task_alloc();
  uint64_t v56 = (void *)sub_1000B9384(v55);
  *uint64_t v56 = v57;
  v56[1] = sub_100081580;
  sub_1000B7634();
  sub_100043638();
  return sub_10008F160();
}

uint64_t sub_100081AE4()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 304) = v1;
  swift_task_dealloc();
  sub_100044174();
  sub_100042EDC(*(void *)(v0 + 152), &qword_10015DA50);
  sub_100043F9C();
  sub_100043CF4();
  v5();
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100081C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  swift_release();
  uint64_t v18 = v16[38];
  uint64_t v19 = v16[32];
  uint64_t v20 = v16[30];
  sub_1000B8EE0();
  unint64_t v21 = AssetCost.onDeviceMemory.getter();
  uint64_t v22 = sub_100044784();
  ((void (*)(uint64_t))v19)(v22);
  if (sub_100075940() >= v21)
  {
    Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (!sub_1000B7454(v23))
    {
LABEL_6:
      sub_1000B82D0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000304E0();
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v24 = (_WORD *)sub_10005A928();
    sub_1000B8220(v24);
    sub_1000B7888((void *)&_mh_execute_header, v25, v26);
    sub_10000ED7C();
    goto LABEL_6;
  }
  v16[34] = sub_1000806C0(v16[17]);
  if (v18)
  {
    sub_1000BA3AC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100043E38();
LABEL_7:
    sub_100043638();
    return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  sub_1000B9E4C();
  if (!v36)
  {
    Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (!sub_1000B7454(v43)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_1000B7908();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (sub_1000B7744(v38))
  {
    sub_100030314();
    sub_10002FF90();
    sub_1000BA360(4.8149e-34);
    sub_1000C9804();
    uint64_t v39 = sub_1000B9100();
    uint64_t v42 = sub_1000B8B48(v39, v40, v41);
    sub_1000BA340(v42);
    sub_10000F050();
    swift_bridgeObjectRelease();
    sub_1000B72C4((void *)&_mh_execute_header, v37, v17, "unloadIfNeededToMakeRoom unloading %s");
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_10000F050();
  }
  if ((*(unsigned char *)(v20 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0)
  {
    sub_1000B9ACC();
LABEL_20:
    sub_100043E9C();
    v48();
    uint64_t v49 = type metadata accessor for AuditToken();
    sub_1000B6E34(v49);
    uint64_t v50 = swift_task_alloc();
    uint64_t v51 = (void *)sub_1000B9390(v50);
    *uint64_t v51 = v52;
    v51[1] = sub_100081AE4;
    sub_10003069C();
    sub_100043638();
    return sub_10009690C();
  }
  sub_1000B829C();
  sub_100043D2C();
  sub_100069DF4();
  v44();
  sub_100043E68();
  v45();
  sub_1000B5280(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
  char v46 = sub_1000B82B0();
  uint64_t v47 = *(void (**)(void))(v19 + 8);
  sub_100043F00();
  v47();
  sub_100043F00();
  v47();
  if (v46) {
    goto LABEL_20;
  }
  sub_100043E9C();
  v54();
  uint64_t v55 = swift_task_alloc();
  uint64_t v56 = (void *)sub_1000B9384(v55);
  *uint64_t v56 = v57;
  v56[1] = sub_100081580;
  sub_1000B7634();
  sub_100043638();
  return sub_10008F160();
}

#error "100082218: call analysis failed (funcsize=280)"

#error "1000826A8: call analysis failed (funcsize=280)"

uint64_t sub_10008298C()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  v1[9] = v4;
  v1[10] = v0;
  v1[7] = v5;
  v1[8] = v6;
  uint64_t v7 = sub_100003A70(&qword_10015B408);
  v1[11] = v7;
  sub_10002FA4C(v7);
  v1[12] = v8;
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  uint64_t v9 = sub_100003A70(&qword_10015DA90);
  sub_10002FDD0(v9);
  v1[16] = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v10);
  v1[17] = sub_10002FE18();
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[18] = v11;
  sub_10002FA4C(v11);
  v1[19] = v12;
  v1[20] = sub_10002FE18();
  unint64_t v13 = (void *)swift_task_alloc();
  v1[21] = v13;
  *unint64_t v13 = v1;
  v13[1] = sub_100082B00;
  uint64_t v14 = sub_1000447E8();
  return sub_10008988C(v14, v3);
}

uint64_t sub_100082B00()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 176) = v5;
  *(void *)(v3 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B7440();
    return v7(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    sub_1000B7440();
    return _swift_task_switch(v15, v16, v17);
  }
}

uint64_t sub_100082C4C()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  sub_100078508(sub_1000B6570, v4, v1);
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[24] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100082D28;
  sub_100044070(v0[22]);
  sub_10002FE64();
  return sub_100080B44();
}

uint64_t sub_100082D28()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100082E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v24;
  a22 = v25;
  sub_1000306E0();
  a20 = v23;
  unint64_t v26 = (unint64_t)sub_10008D13C(*(void *)(v23 + 176));
  *(void *)(v23 + 208) = v26;
  if (v26 >> 62)
  {
    sub_100043AC4();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  *(void *)(v23 + 216) = v27;
  if (v27)
  {
    *(_DWORD *)(v23 + 280) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
    uint64_t v28 = *(void *)(v23 + 208);
    if ((v28 & 0xC000000000000001) != 0)
    {
      uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v29 = *(void *)(v28 + 32);
      swift_retain();
    }
    *(void *)(v23 + 224) = v29;
    *(void *)(v23 + 232) = 1;
    uint64_t v39 = *(void *)(v23 + 128);
    sub_100043E68();
    v40();
    uint64_t v41 = sub_1000B8690();
    v42(v41);
    sub_1000BA550();
    sub_100003A70(&qword_10015B9A0);
    sub_10002FC6C();
    sub_100030274();
    v43();
    sub_1000B7830(v39);
    uint64_t v44 = swift_task_alloc();
    uint64_t v45 = (void *)sub_1000B939C(v44);
    *uint64_t v45 = v46;
    v45[1] = sub_100083130;
    sub_1000B8E70();
    sub_10002FE48();
    return sub_10007A644();
  }
  else
  {
    sub_1000B99E0();
    swift_bridgeObjectRelease();
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_1000BA2CC();
    sub_100003B18(v30, (uint64_t)qword_10015D5A0);
    uint64_t v31 = sub_100069C90();
    v32(v31);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (sub_100057B8C(v34))
    {
      a10 = v23 + 32;
      sub_100030314();
      a11 = sub_10002FF90();
      sub_1000BA030(4.8149e-34);
      sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v35 = sub_1000B792C();
      uint64_t v37 = sub_10001DF20(v35, v36, &a11);
      sub_1000BA2A0(v37);
      swift_bridgeObjectRelease();
      sub_100043AE0();
      v38();
      sub_1000B72C4((void *)&_mh_execute_header, v33, v22, "Successfully acquired assets for request %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v49 = sub_10006A0E0();
      v50(v49);
    }

    sub_1000B8E50();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
    return v52(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_100083130()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  v3[33] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[17];
    sub_100042EDC(v3[16], &qword_10015DA90);
    sub_100042EDC(v7, &qword_10015BAA8);
    sub_1000B705C();
    v8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v3[17];
    sub_100042EDC(v3[16], &qword_10015DA90);
    sub_100042EDC(v9, &qword_10015BAA8);
    sub_100057ECC();
    sub_100043DF8();
    v10();
  }
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_100083298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v24;
  a22 = v25;
  sub_1000306E0();
  a20 = v23;
  uint64_t v26 = v23[29];
  uint64_t v27 = v23[27];
  swift_release();
  if (v26 == v27)
  {
    sub_1000B99E0();
    swift_bridgeObjectRelease();
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_1000BA2CC();
    sub_100003B18(v28, (uint64_t)qword_10015D5A0);
    uint64_t v29 = sub_100069C90();
    v30(v29);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (sub_100057B8C(v32))
    {
      a10 = v23 + 4;
      sub_100030314();
      a11 = sub_10002FF90();
      sub_1000BA030(4.8149e-34);
      sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v33 = sub_1000B792C();
      uint64_t v35 = sub_10001DF20(v33, v34, &a11);
      sub_1000BA2A0(v35);
      swift_bridgeObjectRelease();
      sub_100043AE0();
      v36();
      sub_1000B72C4((void *)&_mh_execute_header, v31, v22, "Successfully acquired assets for request %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      uint64_t v41 = sub_10006A0E0();
      v42(v41);
    }

    sub_1000B8E50();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE48();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v37 = v23[29];
    uint64_t v38 = v23[26];
    if ((v38 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v40 = result;
    }
    else
    {
      uint64_t v40 = *(void *)(v38 + 8 * v37 + 32);
      uint64_t result = swift_retain();
    }
    v23[28] = v40;
    v23[29] = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v51 = v23[17];
      uint64_t v52 = v23[16];
      uint64_t v54 = v23[11];
      uint64_t v53 = v23[12];
      uint64_t v55 = v23[7];
      sub_100043E68();
      v56();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
      v23[30] = v57;
      v23[31] = (v53 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v57(v51, v55, v54);
      sub_100006960(v51, 0, 1, v54);
      sub_100003A70(&qword_10015B9A0);
      sub_10002FC6C();
      sub_1000BA570();
      sub_100030274();
      v58();
      sub_1000B7830(v52);
      uint64_t v59 = swift_task_alloc();
      uint64_t v60 = (void *)sub_1000B939C(v59);
      *uint64_t v60 = v61;
      v60[1] = sub_100083130;
      sub_10002FE48();
      return sub_10007A644();
    }
  }
  return result;
}

uint64_t sub_1000835BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, void *a11, uint64_t a12, _DWORD *type, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1000B81CC();
  a27 = v29;
  a28 = v30;
  sub_1000B9660();
  a26 = v28;
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v77 = (uint64_t *)(v28 + 40);
  uint64_t v31 = *(void *)(v28 + 200);
  uint64_t v32 = *(void *)(v28 + 88);
  uint64_t v76 = type metadata accessor for Logger();
  sub_100003B18(v76, (uint64_t)qword_10015D5A0);
  sub_1000B9284();
  v33();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (sub_1000B8B64(v35))
  {
    LODWORD(type) = v32;
    uint64_t v36 = sub_10000EFE8();
    a11 = (void *)sub_100057C20();
    a12 = sub_10002FF90();
    a16 = a12;
    *(_DWORD *)uint64_t v36 = 136315394;
    sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_t log = v34;
    *uint64_t v77 = sub_10001DF20(v37, v38, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v39();
    *(_WORD *)(v36 + 12) = 2112;
    swift_errorRetain();
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v28 + 48) = v40;
    sub_100043F9C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a11 = v40;
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v31 = (uint64_t)v34;
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v32, "Failed to unloadIfNeededToMakeRoom for request %s: %@, releasing any assets", (uint8_t *)v36, 0x16u);
    sub_100003A70(&qword_10015BA58);
    sub_100043EE8();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100057FE4();
    v41();
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000B8008();
  uint64_t v42 = *(void *)(v28 + 80);
  uint64_t v43 = *(void *)(v28 + 56);
  uint64_t v44 = swift_task_alloc();
  *(void *)(v44 + 16) = v42;
  *(void *)(v44 + 24) = v43;
  sub_100078508((void (*)(uint64_t *))sub_1000B6D48, v44, v31);
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v45 = (unint64_t)sub_10008D13C(*(void *)(v28 + 176));
  *(void *)(v28 + 208) = v45;
  if (v45 >> 62)
  {
    sub_100043AC4();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  *(void *)(v28 + 216) = v46;
  if (v46)
  {
    *(_DWORD *)(v28 + 280) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
    uint64_t v47 = *(void *)(v28 + 208);
    if ((v47 & 0xC000000000000001) != 0)
    {
      uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v48 = *(void *)(v47 + 32);
      swift_retain();
    }
    *(void *)(v28 + 224) = v48;
    *(void *)(v28 + 232) = 1;
    uint64_t v58 = *(void *)(v28 + 128);
    sub_100043E68();
    v59();
    uint64_t v60 = sub_1000B8690();
    v61(v60);
    sub_1000BA550();
    sub_100003A70(&qword_10015B9A0);
    sub_10002FC6C();
    sub_100030274();
    v62();
    sub_1000B7830(v58);
    uint64_t v63 = swift_task_alloc();
    unint64_t v64 = (void *)sub_1000B939C(v63);
    *unint64_t v64 = v65;
    v64[1] = sub_100083130;
    sub_1000B8E70();
    sub_100044308();
    return sub_10007A644();
  }
  else
  {
    sub_1000B99E0();
    swift_bridgeObjectRelease();
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    sub_100003B18(v76, (uint64_t)qword_10015D5A0);
    uint64_t v49 = sub_100069C90();
    v50(v49);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v76 = v28 + 32;
      uint64_t v53 = (_DWORD *)sub_100030314();
      a16 = sub_10002FF90();
      *uint64_t v53 = 136315138;
      os_log_type_t type = v53 + 1;
      sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v54 = sub_1000B792C();
      uint64_t v56 = sub_10001DF20(v54, v55, &a16);
      sub_10004458C(v56, (void *)(v28 + 32));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100057FE4();
      v57();
      sub_1000B72C4((void *)&_mh_execute_header, v51, v52, "Successfully acquired assets for request %s");
      sub_100030988();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v28 + 96) + 8))(*(void *)(v28 + 120), *(void *)(v28 + 88));
    }

    sub_1000B8E50();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_100044308();
    return v69(v68, v69, v70, v71, v72, v73, v74, v75, a9, log, a11, a12, type, v76, v77, a16, a17, a18, a19, a20);
  }
}

uint64_t sub_100083B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v27;
  a26 = v28;
  sub_100058050();
  a24 = v26;
  swift_release();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v29 = (void (*)(uint64_t))v26[30];
  uint64_t v30 = type metadata accessor for Logger();
  sub_100003B18(v30, (uint64_t)qword_10015D5A0);
  uint64_t v31 = sub_1000B9094();
  v29(v31);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v32 = (void *)Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (sub_10004361C(v33))
  {
    uint64_t v34 = sub_10000EFE8();
    uint64_t v51 = (void *)sub_100057C20();
    a14 = sub_10002FF90();
    *(_DWORD *)uint64_t v34 = 136315394;
    sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v26[2] = sub_10001DF20(v35, v36, &a14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v37();
    *(_WORD *)(v34 + 12) = 2112;
    swift_errorRetain();
    uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
    void v26[3] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v51 = v38;
    swift_errorRelease();
    swift_errorRelease();
    sub_1000B78C8((void *)&_mh_execute_header, v39, v40, "Failed to acquire assets for request %s: %@, releasing any assets that may have been acquired");
    sub_100003A70(&qword_10015BA58);
    sub_100043EE8();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100057FE4();
    v41();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v42 = v26[10];
  uint64_t v43 = v26[7];
  uint64_t v44 = swift_task_alloc();
  *(void *)(v44 + 16) = v42;
  *(void *)(v44 + 24) = v43;
  sub_1000BA46C();
  sub_100078508(v45, v46, v47);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v48 = (void *)swift_task_alloc();
  v26[34] = v48;
  *uint64_t v48 = v26;
  v48[1] = sub_100083E80;
  sub_100044070(v26[26]);
  sub_1000306EC();
  return sub_10009A344();
}

uint64_t sub_100083E80()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100083F78()
{
  sub_10002FC60();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_100043D98();
  __asm { BRAA            X1, X16 }
}

void sub_100084020(uint64_t *a1, void (*a2)(char *, void (*)(char *, uint64_t, uint64_t)), uint64_t a3)
{
  uint64_t v46 = a2;
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v50 = (char *)&v42 - v15;
  uint64_t v16 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v43 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  os_log_type_t v22 = (char *)&v42 - v21;
  uint64_t v47 = *a1;
  uint64_t v23 = v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000B5E24();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = a3;
  uint64_t v44 = v6 + 16;
  unint64_t v45 = v24;
  v24(v13, a3, v5);
  swift_retain();
  uint64_t v25 = v50;
  sub_100021E98();
  uint64_t v26 = *(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v6 + 8);
  uint64_t v27 = v25;
  uint64_t v50 = (char *)(v6 + 8);
  uint64_t v28 = v26;
  v26(v27, (void (*)(char *, uint64_t, uint64_t))v5);
  swift_release();
  uint64_t v29 = (uint64_t)v43;
  sub_1000B5E24();
  swift_beginAccess();
  sub_1000B52C8(v29, v23);
  swift_endAccess();
  sub_1000B5E7C((uint64_t)v22, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100003B18(v30, (uint64_t)qword_10015D5A0);
  uint64_t v31 = v49;
  v45(v49, v48, v5);
  swift_retain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v46 = v28;
    uint64_t v35 = v34;
    uint64_t v48 = swift_slowAlloc();
    v51[0] = v48;
    *(_DWORD *)uint64_t v35 = 136315394;
    unint64_t v45 = (void (*)(char *, uint64_t, uint64_t))v5;
    swift_retain();
    uint64_t v36 = sub_1000C9804();
    unint64_t v38 = v37;
    swift_release();
    uint64_t v52 = sub_10001DF20(v36, v38, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v39 = v45;
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = sub_10001DF20(v40, v41, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v46(v31, v39);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Marked asset %s in use by request %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    v28(v31, (void (*)(char *, uint64_t, uint64_t))v5);
  }
}

uint64_t sub_100084500()
{
  sub_1000086E0();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = type metadata accessor for InferenceProviderAssetDescriptor();
  v1[14] = v3;
  sub_10002FA4C(v3);
  v1[15] = v4;
  v1[16] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015B9A0);
  v1[17] = v5;
  sub_10002FA4C(v5);
  v1[18] = v6;
  v1[19] = sub_1000436D8();
  v1[20] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000845CC()
{
  os_log_type_t v88 = v0;
  uint64_t v2 = (uint64_t)(v0 + 12);
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[13];
  sub_100043D2C();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v1;
  swift_retain();
  uint64_t v5 = swift_bridgeObjectRetain();
  Swift::Int v6 = sub_1000AB054(v5, v3, (uint64_t (*)(uint64_t))sub_1000B6518, v4);
  swift_task_dealloc();
  if (sub_100102324(v6))
  {
    swift_release();
    sub_1000BA1A0();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B8A18();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v76 = 0;
  uint64_t v77 = v6;
  if (qword_10015B0C0 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v9 = sub_1000BA180();
    v0[21] = sub_100003B18(v9, (uint64_t)qword_10015D5A0);
    sub_100008678();
    uint64_t v11 = v10;
    uint64_t v12 = sub_10002FE18();
    sub_100069DF4();
    v13();
    uint64_t v14 = sub_1000B8930();
    v15(v14);
    uint64_t v16 = v77;
    sub_1000B9B60();
    uint64_t v17 = Logger.logObject.getter();
    HIDWORD(v75) = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v17, BYTE4(v75));
    unint64_t v19 = v0[20];
    uint64_t v20 = v0[18];
    if (!v18)
    {
      uint64_t v29 = *(void (**)(void))(v20 + 8);
      sub_1000303D4();
      v29();

      sub_100044204();
      sub_100043DF8();
      v30();
LABEL_29:
      v0[24] = v29;
      uint64_t v59 = v0[12];
      uint64_t v58 = v0[13];
      swift_task_dealloc();
      uint64_t v60 = sub_10008D13C(v16);
      swift_release();
      uint64_t v61 = swift_task_alloc();
      *(void *)(v61 + 16) = v58;
      *(void *)(v61 + 24) = v59;
      sub_100078820((void (*)(uint64_t *))sub_1000B6D60, v61, (unint64_t)v60);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v62 = (void *)swift_task_alloc();
      v0[25] = v62;
      *uint64_t v62 = v0;
      v62[1] = sub_100084B28;
      sub_1000B8A18();
      return sub_10008D310();
    }
    os_log_t log = v17;
    uint64_t v72 = v12;
    uint64_t v82 = (uint64_t)v11;
    uint64_t v73 = v9;
    uint64_t v74 = v2;
    v2 -= 8;
    sub_10000EFE8();
    uint64_t v67 = sub_10006A040();
    uint64_t v83 = v67;
    *uint64_t v11 = 136315394;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    unint64_t v21 = v19;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_10001DF20(v22, v23, &v83);
    sub_1000B9244(v24);
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void *)(v20 + 8);
    sub_1000303D4();
    v25();
    if (!sub_1000BA744())
    {
LABEL_28:
      uint64_t v48 = sub_1000BA0FC();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = sub_10001DF20(v48, v50, &v83);
      sub_1000B98E0(v51);
      sub_10000EE7C();
      swift_bridgeObjectRelease();
      sub_1000BA5DC((void *)&_mh_execute_header, v52, BYTE4(v75), "Session %s releasing assets %s", v53, v54, v55, v56, v65, v66, v67, v68, v70, log);
      sub_1000B8B28();
      sub_10000ED7C();
      sub_10000ED7C();

      sub_100057FE4();
      v57();
      uint64_t v29 = (void (*)(void))v69;
      goto LABEL_29;
    }
    sub_1000B9414();
    unint64_t v81 = v77 & 0xC000000000000001;
    if ((v77 & 0xC000000000000001) != 0)
    {
      uint64_t v26 = __CocoaSet.startIndex.getter();
      char v28 = 1;
    }
    else
    {
      uint64_t v26 = sub_10002E3C4(v77);
      char v28 = v31 & 1;
    }
    uint64_t v85 = v26;
    uint64_t v86 = v27;
    LOBYTE(v87) = v28;
    if (v2 < 0) {
      break;
    }
    sub_1000B8D18();
    while (v2)
    {
      sub_1000B8EFC(v32, v33, v34, v35, v36, v37, v38, v39, v65, v66, v67, v68, v70, (uint64_t)log, v72, v73, v74, v75, v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87);
      sub_100030274();
      v40();
      swift_release();
      uint64_t v41 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B9830();
        uint64_t v41 = v84;
      }
      if (*(void *)(v41 + 16) >= *(void *)(v41 + 24) >> 1)
      {
        sub_10001EEE0();
        uint64_t v41 = v84;
      }
      unint64_t v42 = sub_1000B7C34();
      v43(v42);
      uint64_t v84 = v41;
      unint64_t v21 = v87;
      if (v81)
      {
        if ((v87 & 1) == 0) {
          goto LABEL_35;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015C6B0);
        sub_1000BA710();
        sub_1000BA6C4();
        uint64_t v47 = sub_1000B9D70();
        uint64_t v32 = ((uint64_t (*)(uint64_t))v21)(v47);
      }
      else
      {
        uint64_t v44 = sub_1000BA3F0();
        uint64_t v32 = sub_1000B83D0(v44, v45, v46);
      }
      if (!--v2)
      {
        sub_10000E60C(v85, v86, v87);
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_33:
    swift_once();
  }
  __break(1u);
LABEL_35:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100084B28()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100084C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  uint64_t v25 = sub_1000B97B0();
  v26(v25);
  uint64_t v27 = (void *)Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_10004361C(v28))
  {
    a9 = *(void *)(v22 + 144);
    a10 = *(void *)(v22 + 192);
    uint64_t v29 = (_DWORD *)sub_100030314();
    a11 = sub_10002FF90();
    *uint64_t v29 = 136315138;
    sub_1000B6520(&qword_10015BFF0, &qword_10015B9A0);
    uint64_t v30 = sub_1000B9578();
    uint64_t v32 = sub_10001DF20(v30, v31, &a11);
    sub_1000B9504(v32);
    swift_bridgeObjectRelease();
    sub_10004381C();
    v33();
    sub_10000F190((void *)&_mh_execute_header, v34, v35, "Finished releasing assets for session %s");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v36 = sub_1000B9A78();
    v37(v36);
  }

  sub_1000BA1A0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

void sub_100084D54()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);

  sub_100044F9C();
}

uint64_t sub_100084D9C()
{
  sub_1000086E0();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = type metadata accessor for InferenceProviderAssetDescriptor();
  v1[14] = v3;
  sub_10002FA4C(v3);
  v1[15] = v4;
  v1[16] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v1[17] = v5;
  sub_10002FA4C(v5);
  v1[18] = v6;
  v1[19] = sub_1000436D8();
  v1[20] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100084E68()
{
  os_log_type_t v88 = v0;
  uint64_t v2 = (uint64_t)(v0 + 12);
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[13];
  sub_100043D2C();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v1;
  swift_retain();
  uint64_t v5 = swift_bridgeObjectRetain();
  Swift::Int v6 = sub_1000AB054(v5, v3, (uint64_t (*)(uint64_t))sub_1000B64C8, v4);
  swift_task_dealloc();
  if (sub_100102324(v6))
  {
    swift_release();
    sub_1000BA1A0();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B8A18();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v76 = 0;
  uint64_t v77 = v6;
  if (qword_10015B0C0 != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v9 = sub_1000BA180();
    v0[21] = sub_100003B18(v9, (uint64_t)qword_10015D5A0);
    sub_100008678();
    uint64_t v11 = v10;
    uint64_t v12 = sub_10002FE18();
    sub_100069DF4();
    v13();
    uint64_t v14 = sub_1000B8930();
    v15(v14);
    uint64_t v16 = v77;
    sub_1000B9B60();
    uint64_t v17 = Logger.logObject.getter();
    HIDWORD(v75) = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v17, BYTE4(v75));
    unint64_t v19 = v0[20];
    uint64_t v20 = v0[18];
    if (!v18)
    {
      uint64_t v29 = *(void (**)(void))(v20 + 8);
      sub_1000303D4();
      v29();

      sub_100044204();
      sub_100043DF8();
      v30();
LABEL_29:
      v0[24] = v29;
      uint64_t v59 = v0[12];
      uint64_t v58 = v0[13];
      swift_task_dealloc();
      uint64_t v60 = sub_10008D13C(v16);
      swift_release();
      uint64_t v61 = swift_task_alloc();
      *(void *)(v61 + 16) = v58;
      *(void *)(v61 + 24) = v59;
      sub_100078820((void (*)(uint64_t *))sub_1000B64D0, v61, (unint64_t)v60);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v62 = (void *)swift_task_alloc();
      v0[25] = v62;
      *uint64_t v62 = v0;
      v62[1] = sub_1000853C4;
      sub_1000B8A18();
      return sub_10008D310();
    }
    os_log_t log = v17;
    uint64_t v72 = v12;
    uint64_t v82 = (uint64_t)v11;
    uint64_t v73 = v9;
    uint64_t v74 = v2;
    v2 -= 8;
    sub_10000EFE8();
    uint64_t v67 = sub_10006A040();
    uint64_t v83 = v67;
    *uint64_t v11 = 136315394;
    sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
    unint64_t v21 = v19;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_10001DF20(v22, v23, &v83);
    sub_1000B9244(v24);
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void *)(v20 + 8);
    sub_1000303D4();
    v25();
    if (!sub_1000BA744())
    {
LABEL_28:
      uint64_t v48 = sub_1000BA0FC();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = sub_10001DF20(v48, v50, &v83);
      sub_1000B98E0(v51);
      sub_10000EE7C();
      swift_bridgeObjectRelease();
      sub_1000BA5DC((void *)&_mh_execute_header, v52, BYTE4(v75), "Request %s releasing assets %s", v53, v54, v55, v56, v65, v66, v67, v68, v70, log);
      sub_1000B8B28();
      sub_10000ED7C();
      sub_10000ED7C();

      sub_100057FE4();
      v57();
      uint64_t v29 = (void (*)(void))v69;
      goto LABEL_29;
    }
    sub_1000B9414();
    unint64_t v81 = v77 & 0xC000000000000001;
    if ((v77 & 0xC000000000000001) != 0)
    {
      uint64_t v26 = __CocoaSet.startIndex.getter();
      char v28 = 1;
    }
    else
    {
      uint64_t v26 = sub_10002E3C4(v77);
      char v28 = v31 & 1;
    }
    uint64_t v85 = v26;
    uint64_t v86 = v27;
    LOBYTE(v87) = v28;
    if (v2 < 0) {
      break;
    }
    sub_1000B8D18();
    while (v2)
    {
      sub_1000B8EFC(v32, v33, v34, v35, v36, v37, v38, v39, v65, v66, v67, v68, v70, (uint64_t)log, v72, v73, v74, v75, v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87);
      sub_100030274();
      v40();
      swift_release();
      uint64_t v41 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B9830();
        uint64_t v41 = v84;
      }
      if (*(void *)(v41 + 16) >= *(void *)(v41 + 24) >> 1)
      {
        sub_10001EEE0();
        uint64_t v41 = v84;
      }
      unint64_t v42 = sub_1000B7C34();
      v43(v42);
      uint64_t v84 = v41;
      unint64_t v21 = v87;
      if (v81)
      {
        if ((v87 & 1) == 0) {
          goto LABEL_35;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015C6B0);
        sub_1000BA710();
        sub_1000BA6C4();
        uint64_t v47 = sub_1000B9D70();
        uint64_t v32 = ((uint64_t (*)(uint64_t))v21)(v47);
      }
      else
      {
        uint64_t v44 = sub_1000BA3F0();
        uint64_t v32 = sub_1000B83D0(v44, v45, v46);
      }
      if (!--v2)
      {
        sub_10000E60C(v85, v86, v87);
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_33:
    swift_once();
  }
  __break(1u);
LABEL_35:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000853C4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000854A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  uint64_t v25 = sub_1000B97B0();
  v26(v25);
  uint64_t v27 = (void *)Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_10004361C(v28))
  {
    a9 = *(void *)(v22 + 144);
    a10 = *(void *)(v22 + 192);
    uint64_t v29 = (_DWORD *)sub_100030314();
    a11 = sub_10002FF90();
    *uint64_t v29 = 136315138;
    sub_1000B6520((unint64_t *)&qword_10015B418, &qword_10015B408);
    uint64_t v30 = sub_1000B9578();
    uint64_t v32 = sub_10001DF20(v30, v31, &a11);
    sub_1000B9504(v32);
    swift_bridgeObjectRelease();
    sub_10004381C();
    v33();
    sub_10000F190((void *)&_mh_execute_header, v34, v35, "Finished releasing assets for request %s");
    sub_1000436BC();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v36 = sub_1000B9A78();
    v37(v36);
  }

  sub_1000BA1A0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

void sub_1000855F0()
{
  type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);

  sub_100044FB8();
}

void sub_100085638()
{
  sub_1000B9F04();
  uint64_t v37 = v1;
  uint64_t v38 = v2;
  uint64_t v39 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v36 = v8;
  uint64_t v9 = sub_100003A70(v8);
  sub_100008678();
  uint64_t v40 = v10;
  __chkstk_darwin(v11, v12);
  sub_10000F0D0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v17 = sub_10002FDD0(v16);
  __chkstk_darwin(v17, v18);
  sub_10000F0C0();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22, v23);
  sub_1000B97E8();
  uint64_t v24 = *v7 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_100043D2C();
  sub_1000B5E24();
  v39(v5);
  sub_1000B5E24();
  swift_beginAccess();
  sub_1000B52C8(v21, v24);
  swift_endAccess();
  sub_1000B5E7C(v0, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003B18(v25, (uint64_t)qword_10015D5A0);
  sub_100069DF4();
  v26();
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315394;
    swift_retain();
    sub_1000C9804();
    swift_release();
    uint64_t v30 = sub_1000B9E58();
    sub_10001DF20(v30, v31, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    sub_1000B6520(v37, v36);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_10001DF20(v33, v34, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043DF8();
    v35();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, v38, (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v15, v9);
  }

  sub_1000B99C8();
}

uint64_t sub_1000859E8()
{
  sub_1000086E0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  v1[11] = v3;
  sub_10002FDD0(v3);
  v1[12] = sub_1000436D8();
  v1[13] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100085A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  sub_1000306E0();
  a20 = v22;
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v25 = v22[13];
  uint64_t v26 = type metadata accessor for Logger();
  v22[14] = sub_100003B18(v26, (uint64_t)qword_10015D5A0);
  sub_100057ECC();
  sub_1000B5E24();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = sub_1000579B0(v28);
  uint64_t v30 = v22[13];
  if (v29)
  {
    unint64_t v31 = (_DWORD *)sub_100030314();
    a11 = sub_10002FF90();
    *unint64_t v31 = 136315138;
    sub_1000B5E24();
    uint64_t v32 = String.init<A>(describing:)();
    v22[8] = sub_10001DF20(v32, v33, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B5E7C(v30, (void (*)(void))type metadata accessor for InferenceProviderAssetManagerPolicy);
    sub_1000B969C((void *)&_mh_execute_header, v27, (os_log_type_t)v25, "Processing policy change, new policy: %s");
    sub_100030988();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000B5E7C(v22[13], (void (*)(void))type metadata accessor for InferenceProviderAssetManagerPolicy);
  }

  sub_1000B9488();
  sub_100043F38();
  uint64_t v34 = sub_100044468();
  sub_1000B63D8(v34, v35);
  swift_endAccess();
  uint64_t v36 = (void *)swift_task_alloc();
  v22[15] = v36;
  *uint64_t v36 = v22;
  v36[1] = sub_100085CCC;
  sub_10002FE48();
  return sub_100086260();
}

uint64_t sub_100085CCC()
{
  sub_1000086EC();
  sub_10002FB6C();
  uint64_t v2 = v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 128) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100085DDC;
  return sub_1000864BC();
}

uint64_t sub_100085DDC()
{
  sub_1000086EC();
  sub_10002FB6C();
  uint64_t v2 = v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 136) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100085EF0;
  return sub_10008D310();
}

uint64_t sub_100085EF0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100085FCC()
{
  sub_1000086EC();
  uint64_t v1 = v0[10];
  sub_100043D2C();
  v0[18] = *(void *)(v1 + 120);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015F980 + dword_10015F980);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[19] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000860B4;
  uint64_t v3 = sub_10003069C();
  return v7(v3, v4, v5);
}

uint64_t sub_1000860B4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000861B4()
{
  sub_1000086EC();
  uint64_t v0 = (void *)Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v1))
  {
    uint64_t v2 = (_WORD *)sub_10005A928();
    sub_100069CF8(v2);
    sub_10005A960((void *)&_mh_execute_header, v3, v4, "Completed policy change");
    sub_10000ED7C();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v5();
}

uint64_t sub_100086260()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_10008627C, v0);
}

uint64_t sub_10008627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  uint64_t v13 = *(void *)(v12[2] + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask);
  void v12[3] = v13;
  if (v13)
  {
    swift_retain();
    Task.cancel()();
    uint64_t v14 = (void *)swift_task_alloc();
    v12[4] = v14;
    *uint64_t v14 = v12;
    v14[1] = sub_100086380;
    sub_1000BA46C();
    return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
  }
  else
  {
    sub_10007A394();
    sub_10000EF7C();
    return v23();
  }
}

uint64_t sub_100086380()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10008645C()
{
  sub_1000086E0();
  swift_release();
  sub_10007A394();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000864BC()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_1000864D8, v0);
}

uint64_t sub_1000864D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000086E0();
  uint64_t v13 = *(void *)(v12[2] + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask);
  void v12[3] = v13;
  if (v13)
  {
    swift_retain();
    Task.cancel()();
    uint64_t v14 = (void *)swift_task_alloc();
    v12[4] = v14;
    *uint64_t v14 = v12;
    v14[1] = sub_1000865DC;
    sub_1000BA46C();
    return Task<>.value.getter(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
  }
  else
  {
    sub_10008DE18();
    sub_10000EF7C();
    return v23();
  }
}

uint64_t sub_1000865DC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000866B8()
{
  sub_1000086E0();
  swift_release();
  sub_10008DE18();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100086718(uint64_t *a1, uint64_t a2)
{
  v2[5] = a2;
  v2[6] = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *a1;
  v2[7] = v5;
  v2[8] = v6;
  v2[9] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  return _swift_task_switch(sub_1000867E8, a2, 0);
}

uint64_t sub_1000867E8()
{
  sub_1000086E0();
  sub_1000B5E24();
  sub_1000579A4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100086864()
{
  sub_1000086E0();
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + *(int *)(v0[6] + 28));
  swift_retain();
  sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v2)
  {
    v0[10] = v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[11] = v3;
    sub_100003A70(&qword_10015B468);
    sub_1000B76F8();
    *uint64_t v3 = v4;
    v3[1] = sub_100086980;
    sub_1000B7824();
    return Task.value.getter(v5, v6, v7, v5, v8);
  }
  else
  {
    swift_task_dealloc();
    sub_10000EF7C();
    return v9();
  }
}

uint64_t sub_100086980()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100086A64()
{
  sub_1000086E0();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100086AC8()
{
  sub_1000086E0();
  sub_1000B5E24();
  sub_1000579A4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100086B44(uint64_t a1)
{
  sub_100043D2C();
  uint64_t v3 = *(void *)(v1 + 120);
  v5[2] = a1;
  swift_bridgeObjectRetain();
  sub_100011A98((uint64_t (*)(uint64_t *))sub_1000B63B8, (uint64_t)v5, v3);
  uint64_t result = sub_1000B9168();
  if (a1)
  {
    sub_1000FDD0C(*(void *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *(void *)(a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
    return swift_release();
  }
  return result;
}

uint64_t sub_100086BEC(uint64_t a1, void *a2)
{
  if (InferenceProviderAssetDescriptor.identifier.getter() == *a2 && v3 == a2[1]) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100086C6C()
{
  sub_1000086E0();
  v1[22] = v2;
  v1[23] = v0;
  v1[21] = v3;
  uint64_t v4 = type metadata accessor for InferenceProviderAssetDescriptor();
  v1[24] = v4;
  sub_10002FA4C(v4);
  v1[25] = v5;
  v1[26] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100086CFC()
{
  sub_1000086E0();
  swift_task_alloc();
  sub_100057E8C();
  *(void *)(v0 + 216) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_100086D98;
  uint64_t v3 = sub_1000B9650();
  return sub_10006D334(v3, v4);
}

uint64_t sub_100086D98()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 224) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100086E90()
{
  sub_10002FC60();
  uint64_t v1 = sub_100044468();
  sub_1000B65F0(v1, v2, v3);
  if (!*(void *)(v0 + 120))
  {
    sub_100042EDC(v0 + 96, &qword_10015C018);
    type metadata accessor for ModelManagerError();
    sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    uint64_t v12 = v11;
    *uint64_t v11 = InferenceProviderDescriptor.description.getter();
    v12[1] = v13;
    sub_10002FC6C();
    sub_100043E9C();
    v14();
    swift_willThrow();
    uint64_t v15 = sub_100044784();
    sub_100042EDC(v15, v16);
    swift_task_dealloc();
    sub_10000EF7C();
    sub_100043D98();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = (long long *)sub_100069E00();
  sub_10000831C(v4, v5);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100087058;
  sub_100043D98();
  return sub_10008988C(v7, v8);
}

uint64_t sub_100087058()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10000ED94();
  *uint64_t v5 = v4;
  *(void *)(v7 + 240) = v6;
  *(void *)(v7 + 248) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v8, v9, v10);
}

#error "100087248: call analysis failed (funcsize=198)"

uint64_t sub_100087478()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000874D4()
{
  sub_1000086E0();
  sub_100008130(v0 + 56);
  sub_100042EDC(v0 + 16, &qword_10015C018);
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10008754C()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_100087568, v0);
}

uint64_t sub_100087568()
{
  sub_10000F01C();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = sub_100057A88(v3, (uint64_t)qword_10015D5A0);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (sub_100057B8C(v5))
  {
    uint64_t v6 = (_WORD *)sub_10005A928();
    sub_1000B91A0(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v0, "Received asset update notification", v2, 2u);
    sub_10000ED7C();
  }
  uint64_t v7 = *(void *)(v1 + 16);

  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated))
  {
    uint64_t v8 = (void *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v9))
    {
      uint64_t v10 = (_WORD *)sub_10005A928();
      sub_100069CF8(v10);
      sub_10005A960((void *)&_mh_execute_header, v11, v12, "asset updates already pending, ignoring asset updates");
      sub_10000ED7C();
    }

    sub_10000EF7C();
    return v13();
  }
  else
  {
    *(unsigned char *)(v7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) = 1;
    uint64_t v16 = (uint64_t (*)(void))((char *)&dword_10015B8D8 + dword_10015B8D8);
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v1 + 24) = v15;
    *uint64_t v15 = v1;
    v15[1] = sub_100087750;
    return v16();
  }
}

uint64_t sub_100087750()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100087834()
{
  sub_1000086E0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000878C0;
  return sub_100087A10();
}

uint64_t sub_1000878C0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_100087980()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_100088A18();
}

uint64_t sub_100087A10()
{
  sub_1000086E0();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v2);
  *(void *)(v1 + 24) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100087A90()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated) == 1)
  {
    uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
    if (!*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask)
      && sub_1000A5F0C((uint64_t (*)(uint64_t))sub_100076CC0, sub_1000B5C34))
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      uint64_t v4 = (void *)sub_100057A88(v3, (uint64_t)qword_10015D5A0);
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (sub_1000579B0(v5))
      {
        uint64_t v6 = (_WORD *)sub_10005A928();
        sub_1000B91A0(v6);
        sub_10006A194((void *)&_mh_execute_header, v7, v8, "Starting task to unload assets due to pending version change");
        sub_10000ED7C();
      }
      uint64_t v9 = *(void *)(v0 + 24);

      uint64_t v10 = type metadata accessor for TaskPriority();
      sub_100069D3C(v9, v11, v12, v10);
      swift_allocObject();
      swift_weakInit();
      uint64_t v13 = (void *)swift_allocObject();
      sub_1000B9D08(v13);
      *(void *)(v1 + v2) = sub_100003730(v9, (uint64_t)&unk_10015DB18, v14);
      swift_release();
    }
  }
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE64();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_100087C48()
{
  sub_1000086E0();
  v1[2] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v2);
  v1[3] = sub_10002FE18();
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[4] = v3;
  sub_10002FA4C(v3);
  v1[5] = v4;
  v1[6] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

void sub_100087CF8()
{
  sub_10000F01C();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 56) = sub_100003B18(v1, (uint64_t)qword_10015D5A0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_1000B6DF8((void *)&_mh_execute_header, v2, v5, "Unloading assets for forced version change");
    sub_10000ED7C();
  }

  sub_100075FD0();
  sub_10001720C();
  uint64_t v7 = v6;
  unint64_t v8 = (unint64_t)sub_10008D13C(v6);
  *(void *)(v0 + 64) = v8;
  swift_bridgeObjectRelease();
  if (v8 >> 62)
  {
    sub_1000B827C();
    _CocoaArrayWrapper.endIndex.getter();
    uint64_t v9 = sub_1000B9168();
    if (v7)
    {
LABEL_7:
      *(_DWORD *)(v0 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
      *(void *)(v0 + 72) = v7 - 1;
      if (__OFSUB__(v7, 1))
      {
        __break(1u);
      }
      else
      {
        sub_1000B726C(v9, v10, *(void *)(v0 + 64));
        *(void *)(v0 + 80) = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = *(void *)(v0 + 24);
        sub_100043E68();
        v12();
        uint64_t v13 = type metadata accessor for AuditToken();
        sub_100069D3C(v11, v14, v15, v13);
        uint64_t v16 = swift_task_alloc();
        uint64_t v17 = (void *)sub_100057A7C(v16);
        *uint64_t v17 = v18;
        v17[1] = sub_100087FD0;
        sub_1000447E8();
        sub_10009690C();
      }
      return;
    }
  }
  else
  {
    sub_1000B92D4();
    if (v7) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v20))
  {
    uint64_t v21 = (_WORD *)sub_10005A928();
    sub_100069CF8(v21);
    sub_10005A960((void *)&_mh_execute_header, v22, v23, "Finished unloading assets for forced version change");
    sub_10000ED7C();
  }

  uint64_t v27 = (void (*)(void *))((char *)&dword_10015B948 + dword_10015B948);
  swift_retain();
  uint64_t v24 = swift_task_alloc();
  uint64_t v25 = (void *)sub_1000B9B00(v24);
  *uint64_t v25 = v26;
  v25[1] = sub_100088330;
  v27(&unk_10015DBC8);
}

uint64_t sub_100087FD0()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v3 = *v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 24);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100088154()
{
  sub_1000086EC();
  uint64_t v3 = v2[9];
  uint64_t result = swift_release();
  if (v3)
  {
    uint64_t v6 = v2[9];
    v2[9] = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1000B726C(result, v5, v2[8]);
      if (v0) {
        uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7644();
      }
      v2[10] = v1;
      uint64_t v7 = v2[3];
      sub_100043E68();
      v8();
      uint64_t v9 = type metadata accessor for AuditToken();
      sub_100069D3C(v7, v10, v11, v9);
      uint64_t v12 = swift_task_alloc();
      uint64_t v13 = (void *)sub_100057A7C(v12);
      *uint64_t v13 = v14;
      v13[1] = sub_100087FD0;
      sub_1000447E8();
      return sub_10009690C();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v16))
    {
      uint64_t v17 = (_WORD *)sub_10005A928();
      sub_100069CF8(v17);
      sub_10005A960((void *)&_mh_execute_header, v18, v19, "Finished unloading assets for forced version change");
      sub_10000ED7C();
    }

    sub_1000B966C();
    uint64_t v20 = swift_task_alloc();
    uint64_t v21 = (void *)sub_1000B9B00(v20);
    *uint64_t v21 = v22;
    v21[1] = sub_100088330;
    return v23(&unk_10015DBC8);
  }
  return result;
}

uint64_t sub_100088330()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  sub_100008660();
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100044628();
  return v5(v2);
}

uint64_t sub_100088454(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000884E8;
  return sub_10008AAFC();
}

uint64_t sub_1000884E8()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 64) = v5;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000885C8()
{
  sub_1000086E0();
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    sub_10000853C((void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000886AC;
    return sub_1000EC050();
  }
  else
  {
    **(unsigned char **)(v0 + 24) = 0;
    sub_10000EF7C();
    return v3();
  }
}

uint64_t sub_1000886AC()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000887A4()
{
  sub_1000086EC();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)sub_100057A88(v1, (uint64_t)qword_10015D5A0);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_10005A960((void *)&_mh_execute_header, v5, v6, "Force switched asset versions");
    sub_10000ED7C();
  }

  **(unsigned char **)(v0 + 24) = 1;
  sub_10000EF7C();
  return v7();
}

void sub_100088884()
{
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003B18(v2, (uint64_t)qword_10015D5A0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (sub_100044424(v4))
  {
    sub_100030314();
    uint64_t v5 = (void *)sub_100057C20();
    sub_10006A100(5.7779e-34);
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    sub_100069D54(v6);
    *uint64_t v5 = v1;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v3, v7, "Failed to force switch asset versions, failed to cycle asset lock: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100043930();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  **(unsigned char **)(v0 + 24) = 0;
  sub_10000EF7C();
  sub_1000307C8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_100088A18()
{
  *(void *)(v1 + 24) = v0;
  return sub_10000EFE0((uint64_t)sub_100088A34, v0);
}

uint64_t sub_100088A34()
{
  sub_1000086EC();
  uint64_t v1 = v0[3];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  v0[4] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  if (*(unsigned char *)(v1 + v2) == 1)
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    v0[5] = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_100088B90;
    return sub_10008AAFC();
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = (void *)sub_100057A88(v5, (uint64_t)qword_10015D5A0);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v7))
    {
      uint64_t v8 = (_WORD *)sub_10005A928();
      sub_100069CF8(v8);
      sub_10005A960((void *)&_mh_execute_header, v9, v10, "switchAssetVersionsIfUpdateIsPending called without assets to be updated");
      sub_10000ED7C();
    }

    sub_10000EF7C();
    return v11();
  }
}

uint64_t sub_100088B90()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_1000086D0();
  *os_log_type_t v4 = v3;
  *(unsigned char *)(v6 + 64) = v5;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100088C70()
{
  sub_1000086EC();
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 24);
    *(unsigned char *)(v1 + *(void *)(v0 + 32)) = 0;
    sub_10000853C((void *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100088DD8;
    return sub_1000EC050();
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    char v5 = (void *)sub_100057A88(v4, (uint64_t)qword_10015D5A0);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v6))
    {
      uint64_t v7 = (_WORD *)sub_10005A928();
      sub_100069CF8(v7);
      sub_10005A960((void *)&_mh_execute_header, v8, v9, "switchAssetVersionsIfUpdateIsPending unable to prepare assets for change. Trying again later.");
      sub_10000ED7C();
    }

    sub_10000EF7C();
    return v10();
  }
}

uint64_t sub_100088DD8()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100088ED0()
{
  sub_1000086EC();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)sub_100057A88(v0, (uint64_t)qword_10015D5A0);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v2))
  {
    uint64_t v3 = (_WORD *)sub_10005A928();
    sub_100069CF8(v3);
    sub_10005A960((void *)&_mh_execute_header, v4, v5, "Switched asset versions");
    sub_10000ED7C();
  }

  sub_10000EF7C();
  return v6();
}

void sub_100088FA4()
{
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015D5A0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_100044424(v3))
  {
    sub_100030314();
    uint64_t v4 = (void *)sub_100057C20();
    sub_10006A100(5.7779e-34);
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    sub_100069D54(v5);
    *uint64_t v4 = v0;
    swift_errorRelease();
    swift_errorRelease();
    sub_100069B74((void *)&_mh_execute_header, v2, v6, "Failed to switch asset versions, failed to cycle asset lock: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100043930();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10000EF7C();
  sub_1000307C8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_100089130()
{
  sub_1000086E0();
  v1[19] = v2;
  v1[20] = v0;
  v1[18] = v3;
  uint64_t v4 = type metadata accessor for ModelCatalogAsset(0);
  sub_10002FDD0(v4);
  v1[21] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for ModelCatalogAssetVersionedData(0);
  v1[22] = v5;
  sub_10002FDD0(v5);
  v1[23] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000891D4()
{
  sub_10002FC60();
  uint64_t v1 = *(void *)(v0 + 160);
  long long v9 = *(_OWORD *)(v0 + 144);
  sub_100043D2C();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = swift_task_alloc();
  *(_OWORD *)(v3 + 16) = v9;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100011A98(sub_1000B6288, v3, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v4)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100044628();
    return v5(v4);
  }
  else
  {
    sub_10000853C((void *)(*(void *)(v0 + 160) + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(void *)(*(void *)(v0 + 160)+ OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog+ 24));
    swift_task_alloc();
    sub_100057E8C();
    *(void *)(v0 + 192) = v7;
    *uint64_t v7 = v8;
    v7[1] = sub_100089360;
    return sub_1000EF990();
  }
}

uint64_t sub_100089360()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

#error "100089568: call analysis failed (funcsize=106)"

uint64_t sub_100089608()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100089670(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v27[-1] - v13;
  uint64_t v15 = *a1;
  if (InferenceProviderAssetDescriptor.identifier.getter() == *a2 && v16 == a2[1])
  {
    swift_bridgeObjectRelease();
    sub_100042C34(a3, (uint64_t)v27);
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100042C34(a3, (uint64_t)v27);
    char v19 = 0;
    if ((v18 & 1) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v20 = *(void *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v21 = *(void *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10000853C((void *)(v15 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  sub_10000853C(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  char v19 = static InferenceProviderDescriptor.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v24(v11, v6);
  v24(v14, v6);
LABEL_9:
  sub_100008130((uint64_t)v27);
  return v19 & 1;
}

uint64_t sub_10008988C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000898B4()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_10008C92C();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000B9488();
  sub_100042C34(v5, v6);
  uint64_t v7 = (void *)swift_allocObject();
  *(void *)(v0 + 80) = v7;
  v7[2] = v1;
  v7[3] = v2;
  sub_10000831C((long long *)(v0 + 16), (uint64_t)(v7 + 4));
  v7[9] = v4;
  sub_1000B966C();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)sub_100057A7C(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_1000899C0;
  sub_10002FE64();
  return v13(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1000899C0()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100030C68();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_release();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

uint64_t sub_100089AE0()
{
  sub_1000086E0();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100089B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  void v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[8] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_100089BDC;
  return sub_100088A18();
}

uint64_t sub_100089BDC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100089CB8()
{
  sub_10002FC60();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_100003B50((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v1 = _swiftEmptySetSingleton;
  }
  uint64_t v3 = v0[3].i64[0];
  uint64_t v2 = v0[3].i64[1];
  v0[1].i64[0] = (uint64_t)v1;
  type metadata accessor for InferenceProviderAsset(0);
  sub_1000B5280(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  uint64_t v4 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[1] = (uint64_t)v4;
  v4[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v4[2].i64[0] = v3;
  v4[2].i64[1] = (uint64_t)v0[1].i64;
  v4[3].i64[0] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5].i64[0] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100089E44;
  sub_100043D98();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100089E44()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 32);
    uint64_t v8 = sub_100089F44;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 32);
    swift_task_dealloc();
    uint64_t v8 = sub_100089F38;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100089F38()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return sub_100069C30();
}

uint64_t sub_100089F44()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100089FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v7[16] = a2;
  v7[17] = a3;
  uint64_t v9 = sub_100003A70(&qword_10015DBA8);
  v7[22] = v9;
  v7[23] = *(void *)(v9 - 8);
  v7[24] = swift_task_alloc();
  sub_100003A70(&qword_10015B208);
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  uint64_t v10 = *(void *)(type metadata accessor for ModelCatalogAsset(0) - 8);
  v7[27] = v10;
  v7[28] = *(void *)(v10 + 64);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  return _swift_task_switch(sub_10008A128, a4, 0);
}

uint64_t sub_10008A128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t i, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000F120();
  uint64_t v70 = (long long *)(v22 + 16);
  uint64_t v69 = *(void *)(v22 + 216);
  uint64_t v23 = *(void *)(v22 + 136);
  uint64_t v24 = *(void *)(v23 + 56);
  unint64_t v64 = (void *)(v22 + 56);
  uint64_t v65 = v23 + 56;
  uint64_t v25 = -1;
  uint64_t v26 = -1 << *(unsigned char *)(v23 + 32);
  if (-v26 < 64) {
    uint64_t v25 = ~(-1 << -(char)v26);
  }
  uint64_t v27 = v25 & v24;
  int64_t v66 = (unint64_t)(63 - v26) >> 6;
  uint64_t v67 = *(void *)(v22 + 224) + 7;
  uint64_t v68 = *(void *)(v22 + 136);
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v36 = 0;
  if (!v27) {
    goto LABEL_5;
  }
LABEL_4:
  a17 = (v27 - 1) & v27;
  for (uint64_t i = v36; ; uint64_t i = v42)
  {
    uint64_t v43 = *(void *)(v22 + 232);
    uint64_t v44 = *(void *)(v22 + 240);
    uint64_t v45 = *(void *)(v22 + 208);
    a19 = *(void *)(v22 + 200);
    uint64_t v47 = *(void *)(v22 + 144);
    uint64_t v46 = *(void *)(v22 + 152);
    sub_1000B5E24();
    uint64_t v48 = type metadata accessor for TaskPriority();
    sub_1000BA4A4();
    sub_100006960(v49, v50, v51, v48);
    sub_10000E54C(v44, v43);
    sub_100042C34(v46, (uint64_t)v70);
    unint64_t v52 = (*(unsigned __int8 *)(v69 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
    int v53 = (void *)swift_allocObject();
    uint64_t v53[2] = 0;
    v53[3] = 0;
    v53[4] = v47;
    sub_10000E54C(v43, (uint64_t)v53 + v52);
    sub_10000831C(v70, (uint64_t)v53 + ((v67 + v52) & 0xFFFFFFFFFFFFFFF8));
    sub_1000B65F0(v45, a19, &qword_10015B208);
    LODWORD(v43) = sub_100006AE8(a19, 1, v48);
    swift_retain();
    if (v43 == 1)
    {
      sub_1000B95C0();
    }
    else
    {
      TaskPriority.rawValue.getter();
      sub_10002FC6C();
      sub_1000BA7AC();
      sub_10000EFBC();
      v54();
    }
    uint64_t v27 = a17;
    uint64_t v36 = i;
    if (v53[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1000BA5FC();
      uint64_t v55 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v57 = v56;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v57 = 0;
    }
    uint64_t v58 = **(void **)(v22 + 128);
    type metadata accessor for InferenceProviderAsset(0);
    uint64_t v59 = v57 | v55;
    if (v57 | v55)
    {
      uint64_t v59 = v22 + 56;
      *unint64_t v64 = 0;
      *(void *)(v22 + 64) = 0;
      *(void *)(v22 + 72) = v55;
      *(void *)(v22 + 80) = v57;
    }
    *(void *)(v22 + 88) = 1;
    *(void *)(v22 + 96) = v59;
    *(void *)(v22 + 104) = v58;
    swift_task_create();
    swift_release();
    uint64_t v28 = sub_1000B95C0();
    if (a17) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v37 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v28, v29, v30, v31, v32, v33, v34, v35, v64, v65, v66, v67, v68, v69, v22 + 88, v70, a17, i, a19,
               a20,
               a21,
               a22);
    }
    if (v37 >= v66) {
      goto LABEL_28;
    }
    if (!*(void *)(v65 + 8 * v37))
    {
      if (v36 + 2 >= v66) {
        goto LABEL_28;
      }
      if (!*(void *)(v65 + 8 * (v36 + 2)))
      {
        if (v36 + 3 >= v66) {
          goto LABEL_28;
        }
        if (!*(void *)(v65 + 8 * (v36 + 3))) {
          break;
        }
      }
    }
LABEL_17:
    sub_100030534();
    a17 = v41 & v40;
  }
  uint64_t v38 = v36 + 4;
  if (v36 + 4 < v66)
  {
    if (!*(void *)(v65 + 8 * v38))
    {
      while (1)
      {
        int64_t v39 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          goto LABEL_32;
        }
        if (v39 >= v66) {
          goto LABEL_28;
        }
        ++v38;
        if (*(void *)(v65 + 8 * v39)) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_17;
  }
LABEL_28:
  swift_release();
  type metadata accessor for InferenceProviderAsset(0);
  sub_100003A70(&qword_10015B468);
  sub_100043F9C();
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v22 + 248) = sub_1000B5280(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  uint64_t v60 = swift_task_alloc();
  uint64_t v61 = (void *)sub_1000B939C(v60);
  *uint64_t v61 = v62;
  v61[1] = sub_10008A5A8;
  sub_10000F0E0();
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v28, v29, v30, v31, v32, v33, v34, v35, v64, v65, v66, v67, v68, v69, v22 + 88, v70, a17, i, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_10008A5A8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 264) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 144);
  if (v0) {
    uint64_t v8 = sub_10008A884;
  }
  else {
    uint64_t v8 = sub_10008A68C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10008A68C()
{
  sub_10002FC60();
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  if (!v1)
  {
    sub_10004381C();
    v13();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_100043D98();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v2 = *(void *)(v0 + 168);
  swift_retain();
  sub_1000201DC(&v17, v1);
  swift_release();
  uint64_t v3 = InferenceProviderAssetDescriptor.identifier.getter();
  if (*(void *)(v2 + 16) && (sub_10001E648(v3, v4), (v5 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    sub_1000B9CFC();
    sub_10007894C(v6, v7, v8);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)sub_1000B939C(v9);
  *uint64_t v10 = v11;
  v10[1] = sub_10008A5A8;
  sub_100043D98();
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_10008A884()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10004381C();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000B7440();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10008A928(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10008A9D8;
  return sub_100089130();
}

uint64_t sub_10008A9D8()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    sub_1000579A4();
    return _swift_task_switch(v11, v12, v13);
  }
}

uint64_t sub_10008AAEC()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return sub_100069C30();
}

uint64_t sub_10008AAFC()
{
  sub_1000086E0();
  v1[30] = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[31] = v2;
  sub_10002FDD0(v2);
  v1[32] = sub_1000436D8();
  v1[33] = swift_task_alloc();
  uint64_t v3 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v3);
  v1[34] = sub_10002FE18();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[35] = v4;
  sub_10002FA4C(v4);
  v1[36] = v5;
  v1[37] = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  v1[38] = State;
  sub_10002FA4C(State);
  v1[39] = v7;
  v1[40] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10008AC0C()
{
  uint64_t v81 = v0;
  uint64_t v1 = (void *)(*(void *)(v0 + 240) + 120);
  sub_100043D2C();
  uint64_t v2 = sub_1000BA230();
  char v3 = sub_100102324(v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (qword_10015B0C0 != -1) {
      goto LABEL_49;
    }
    goto LABEL_3;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100074350(v9, (uint64_t (*)(char *))sub_10008C430, 0);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    uint64_t v5 = sub_100057A88(v40, (uint64_t)qword_10015D5A0);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = 0;
    if (!sub_1000B7760(v6)) {
      goto LABEL_38;
    }
    uint64_t v8 = "Not ready for asset version change: some assets are still loaded or transitioning";
LABEL_37:
    uint64_t v41 = (uint8_t *)sub_10005A928();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v41, 2u);
    sub_10000ED7C();
    goto LABEL_38;
  }
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v0 + 328) = sub_100003B18(v11, (uint64_t)qword_10015D5A0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (sub_1000306C4(v13))
  {
    uint64_t v14 = (_WORD *)sub_10005A928();
    sub_1000B91A0(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)&MemoryPressureObserver.ivar_base_size, "prepareForAssetVersionChange unloading assets", (uint8_t *)v10, 2u);
    sub_10000ED7C();
  }

  uint64_t v15 = *(void *)(v0 + 240);
  if ((*v1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v16 = (void *)sub_1000ADE5C(v44, v15, (uint64_t)sub_100075FC4, 0);
LABEL_42:
    unint64_t v45 = (unint64_t)sub_10008D13C((uint64_t)v16);
    *(void *)(v0 + 336) = v45;
    swift_release();
    if (v45 >> 62)
    {
      sub_1000B827C();
      _CocoaArrayWrapper.endIndex.getter();
      uint64_t v46 = sub_1000B9168();
      if (v16) {
        goto LABEL_44;
      }
    }
    else
    {
      sub_1000B92D4();
      if (v16)
      {
LABEL_44:
        *(_DWORD *)(v0 + 376) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.assetVersionChange(_:);
        *(void *)(v0 + 344) = (char *)v16 - 1;
        if (!__OFSUB__(v16, 1))
        {
          sub_1000B726C(v46, v47, *(void *)(v0 + 336));
          *(void *)(v0 + 352) = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v48 = *(void *)(v0 + 272);
          sub_100043E68();
          v49();
          uint64_t v50 = type metadata accessor for AuditToken();
          sub_100069D3C(v48, v51, v52, v50);
          uint64_t v53 = swift_task_alloc();
          int v54 = (void *)sub_1000B9AF4(v53);
          *int v54 = v55;
          v54[1] = sub_10008B7C8;
          sub_1000447E8();
          return sub_10009690C();
        }
        __break(1u);
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = sub_1000BA230();
    sub_100074350(v56, (uint64_t (*)(char *))sub_10008C754, 0);
    sub_1000B9168();
LABEL_53:
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = 0;
    if (!sub_1000B7760(v6)) {
      goto LABEL_38;
    }
    uint64_t v8 = "Not ready for asset version change: not all assets are unloaded";
    goto LABEL_37;
  }
  uint64_t v61 = 0;
  uint64_t v16 = _swiftEmptySetSingleton;
  uint64_t v72 = _swiftEmptySetSingleton;
  sub_1000BA77C();
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  uint64_t v17 = sub_1000B9DB0();
  if (!v17)
  {
LABEL_32:
    swift_release_n();
    swift_release();
    goto LABEL_42;
  }
  uint64_t v18 = v17;
  uint64_t v68 = v0 + 192;
  uint64_t v69 = v0 + 176;
  uint64_t v67 = v0 + 216;
  char v19 = (void *)(v0 + 208);
  LODWORD(v65) = enum case for LoadState.dynamicMode(_:);
  uint64_t v64 = *(void *)(v0 + 312) + 104;
  uint64_t v62 = &type metadata for Swift.AnyObject[8];
  uint64_t v63 = type metadata accessor for InferenceProviderAsset(0);
  uint64_t v70 = v0 + 152;
  while (1)
  {
    *(void *)(v0 + 216) = v18;
    uint64_t v20 = v19;
    swift_dynamicCast();
    sub_100057ECC();
    sub_100043F38();
    sub_100043E9C();
    v21();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v22 = *(void *)(v0 + 192) == *(void *)(v0 + 176) && *(void *)(v0 + 200) == *(void *)(v0 + 184);
    if (v22) {
      break;
    }
    char v23 = sub_1000B8A70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100043DF8();
    v24();
    swift_endAccess();
    if (v23) {
      goto LABEL_20;
    }
    char v19 = v20;
    swift_release();
LABEL_31:
    uint64_t v18 = __CocoaSet.Iterator.next()();
    if (!v18) {
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease_n();
  sub_100043DF8();
  v25();
  swift_endAccess();
LABEL_20:
  char v19 = v20;
  uint64_t v26 = *v20;
  sub_1000B8D78();
  if (!(!v22 & v35))
  {
    sub_1000230F4(v34 + 1, v27, v28, v29, v30, v31, v32, v33, v57, v58, v59, v60, v61, (uint64_t)v62, v63, v64, v65, v66, v67,
      v68,
      v69,
      v70,
      v71,
      (uint64_t)v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80);
    uint64_t v16 = v72;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Hasher._finalize()();
  sub_1000B6DC0();
  if (!v22)
  {
    sub_1000B6F10();
LABEL_30:
    sub_1000B89D0(v36);
    *(void *)(v38 + 8 * v39) = v26;
    sub_1000B7C8C();
    goto LABEL_31;
  }
  sub_1000B6EFC();
  while (1)
  {
    sub_1000B7778();
    if (v22 && (v37 & 1) != 0) {
      break;
    }
    sub_1000B77F4();
    sub_1000B6FC8();
    if (!v22)
    {
      sub_1000B6EE8();
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_49:
  swift_once();
LABEL_3:
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = sub_100057A88(v4, (uint64_t)qword_10015D5A0);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = 1;
  if (sub_1000B7760(v6))
  {
    uint64_t v8 = "Ready for asset version change";
    goto LABEL_37;
  }
LABEL_38:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100044628();
  return v42(v7);
}

uint64_t sub_10008B7C8()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 272);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

#error "10008BC7C: call analysis failed (funcsize=333)"

#error "10008C1EC: call analysis failed (funcsize=333)"

uint64_t sub_10008C430(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v9 = __chkstk_darwin(State, v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v19 - v13, a1, State);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v11, enum case for LoadState.loaded(_:), State);
  sub_1000B5280(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v11, State);
  v16(v14, State);
  sub_1000B5E24();
  if (v15)
  {
    sub_1000B5E7C((uint64_t)v5, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0;
  }
  uint64_t v17 = *(void *)&v5[*(int *)(v2 + 28)];
  swift_retain();
  sub_1000B5E7C((uint64_t)v5, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v17)
  {
    swift_release();
    return 0;
  }
  return 1;
}

uint64_t sub_10008C6A0()
{
  sub_1000308FC();
  type metadata accessor for LoadState();
  sub_100008678();
  __chkstk_darwin(v0, v1);
  sub_100057F20();
  sub_100043E68();
  v2();
  uint64_t v3 = sub_1000B95D8();
  char v5 = sub_100101C40(v3, v4);
  sub_100043924();
  v6();
  return v5 & 1;
}

uint64_t sub_10008C754(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v2, v3);
  char v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void *)(State - 8);
  __chkstk_darwin(State, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for LoadState.unloaded(_:), State);
  char v11 = sub_100101C40(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, State);
  sub_1000B5E24();
  if ((v11 & 1) == 0)
  {
    sub_1000B5E7C((uint64_t)v5, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    return 0;
  }
  uint64_t v12 = *(void *)&v5[*(int *)(v2 + 28)];
  swift_retain();
  sub_1000B5E7C((uint64_t)v5, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (v12)
  {
    swift_release();
    return 0;
  }
  return 1;
}

void sub_10008C92C()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v3 = sub_10002FA4C(v2);
  __chkstk_darwin(v3, v4);
  sub_100030158();
  uint64_t v53 = v5;
  sub_100030514();
  __chkstk_darwin(v6, v7);
  sub_1000BA134();
  uint64_t v52 = v8;
  sub_100003A70(&qword_10015CA38);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v50 = v1 + 56;
  sub_100030680();
  uint64_t v12 = v11 & v10;
  int64_t v51 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  for (v12 &= v12 - 1; ; uint64_t v12 = v30 & v29)
  {
    sub_1000B5E24();
    sub_10000E54C(v52, v53);
    uint64_t v31 = *(void *)(v53 + 16);
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v33 = (uint64_t *)(v31 + 40);
      while (1)
      {
        uint64_t v34 = *(v33 - 1);
        uint64_t v35 = *v33;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        int v54 = (void *)v9;
        unint64_t v37 = sub_10001E648(v34, v35);
        uint64_t v39 = *(void *)(v9 + 16);
        BOOL v40 = (v38 & 1) == 0;
        Swift::Int v41 = v39 + v40;
        if (__OFADD__(v39, v40)) {
          break;
        }
        unint64_t v42 = v37;
        char v43 = v38;
        sub_100003A70(&qword_10015DB80);
        Swift::Bool v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41);
        uint64_t v9 = (uint64_t)v54;
        if (v44)
        {
          unint64_t v45 = sub_10001E648(v34, v35);
          if ((v43 & 1) != (v46 & 1)) {
            goto LABEL_44;
          }
          unint64_t v42 = v45;
        }
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0)
        {
          v54[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v47 = (uint64_t *)(v54[6] + 16 * v42);
          *uint64_t v47 = v34;
          v47[1] = v35;
          *(void *)(v54[7] + 8 * v42) = _swiftEmptySetSingleton;
          uint64_t v48 = v54[2];
          BOOL v17 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v17) {
            goto LABEL_41;
          }
          v54[2] = v49;
          swift_bridgeObjectRetain();
        }
        v33 += 2;
        sub_100020654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!--v32)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_37:
    sub_1000B5E7C(v53, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_42;
    }
    if (v15 >= v51) {
      goto LABEL_39;
    }
    ++v14;
    if (!*(void *)(v50 + 8 * v15))
    {
      int64_t v14 = v15 + 1;
      sub_1000B9AD8();
      if (v16 == v17) {
        goto LABEL_39;
      }
      sub_1000B9DA4();
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        sub_1000B9AD8();
        if (v16 == v17) {
          goto LABEL_39;
        }
        sub_1000B9DA4();
        if (!v21)
        {
          int64_t v14 = v20 + 3;
          sub_1000B9AD8();
          if (v16 == v17) {
            goto LABEL_39;
          }
          sub_1000B9DA4();
          if (!v23)
          {
            int64_t v14 = v22 + 4;
            sub_1000B9AD8();
            if (v16 == v17) {
              goto LABEL_39;
            }
            sub_1000B9DA4();
            if (!v25) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    sub_100030534();
  }
  int64_t v26 = v24 + 5;
  if (v26 >= v51)
  {
LABEL_39:
    swift_release();
    sub_10002FAC4();
    return;
  }
  if (*(void *)(v50 + 8 * v26))
  {
    int64_t v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    sub_1000B9AD8();
    if (v16 == v17) {
      goto LABEL_39;
    }
    sub_1000B9DA4();
    int64_t v26 = v27 + 1;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10008CD10()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000B5E7C(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy, (void (*)(void))type metadata accessor for InferenceProviderAssetManagerPolicy);
  swift_release();
  swift_release();
  swift_release();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog);
  swift_release();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_telemetryManager);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10008CE54()
{
  sub_10008CD10();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10008CE80()
{
  return type metadata accessor for InferenceProviderAssetManager(0);
}

uint64_t type metadata accessor for InferenceProviderAssetManager(uint64_t a1)
{
  return sub_100067BD8(a1, (uint64_t *)&unk_10015D5E0);
}

uint64_t sub_10008CEA8()
{
  uint64_t result = type metadata accessor for InferenceProviderAssetManagerPolicy(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008CF88()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_10008CFA4, v0);
}

uint64_t sub_10008CFA4()
{
  sub_1000086EC();
  *(void *)(v0 + 24) = sub_10000853C((void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog+ 24));
  swift_retain();
  sub_10000F0B4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10008D030()
{
  sub_1000086E0();
  sub_1000EEC8C((uint64_t)&unk_10015DB78, *(void *)(v0 + 16));
  swift_release();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10008D0AC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000ED54;
  return sub_10008754C();
}

void *sub_10008D13C(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v4 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  if (sub_100074350(a1, (uint64_t (*)(char *))sub_10008D2D4, 0))
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_100116B88(v5);
    sub_1000B9168();
    return (void *)v2;
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  if (sub_100102324(v7))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    swift_retain();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = sub_100073430(v8);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (!v9) {
      break;
    }
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_100117250(v9);
    swift_release();
    swift_release();
    uint64_t v10 = swift_bridgeObjectRetain();
    char v11 = sub_100102324(v10);
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_10008D2D4(uint64_t a1)
{
  return *(void *)(*(void *)(a1
                               + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40))
                   + 16) == 0;
}

uint64_t sub_10008D310()
{
  sub_1000086E0();
  *(void *)(v1 + 56) = v0;
  *(unsigned char *)(v1 + 160) = v2;
  uint64_t v3 = type metadata accessor for AssetCost();
  *(void *)(v1 + 64) = v3;
  sub_10002FA4C(v3);
  *(void *)(v1 + 72) = v4;
  *(void *)(v1 + 80) = sub_10002FE18();
  uint64_t v5 = type metadata accessor for AssetPolicy();
  *(void *)(v1 + 88) = v5;
  sub_10002FA4C(v5);
  *(void *)(v1 + 96) = v6;
  *(void *)(v1 + 104) = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

void sub_10008D3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  uint64_t v18 = *(void *)(v16 + 96);
  uint64_t v17 = *(void *)(v16 + 104);
  uint64_t v19 = *(void *)(v16 + 88);
  sub_100043D2C();
  sub_100069DF4();
  v20();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v21 == enum case for AssetPolicy.standard(_:))
  {
    if (*(unsigned char *)(v16 + 160))
    {
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_100043638();
      v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
      return;
    }
    sub_100080548();
    unint64_t v32 = AssetCost.onDeviceMemory.getter();
    sub_100043DF8();
    v33();
    unint64_t v34 = sub_100075940();
    if (sub_10008DD2C() && v34 >= v32)
    {
      sub_10008DE18();
      sub_10007A394();
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v16 + 152) = v35;
      *uint64_t v35 = v16;
      v35[1] = sub_10008DC50;
      sub_100043638();
      sub_100087A10();
      return;
    }
    unint64_t v37 = (void *)(v16 + 40);
    char v38 = (void *)(v16 + 48);
    *(void *)(v16 + 40) = _swiftEmptyArrayStorage;
    *(void *)(v16 + 48) = _swiftEmptyArrayStorage;
    sub_100076798();
    unint64_t v40 = v39;
    if (v39 >> 62)
    {
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      if (v41) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v41)
      {
LABEL_18:
        unint64_t v51 = v32;
        if (v41 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v42 = 0;
        while (1)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v43 = *(void *)(v40 + 8 * v42 + 32);
            swift_retain();
          }
          if (*(unsigned char *)(v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
          {
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v44 = *(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (*(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v44 >> 1)
            {
              sub_1000BA28C(v44);
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
          }
          else
          {
            if (*(unsigned char *)(v43 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) == 1
              && v34 >= v51)
            {
              goto LABEL_34;
            }
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v46 = *(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (*(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v46 >> 1)
            {
              sub_1000BA28C(v46);
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
          }
          sub_1000B9560();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
LABEL_34:
          ++v42;
          swift_release();
          if (v41 == v42)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = (void *)*v37;
            uint64_t v48 = (void *)*v38;
            goto LABEL_38;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_38:
    *(void *)(v16 + 120) = v48;
    *(void *)(v16 + 128) = v47;
    uint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v16 + 136) = v49;
    *uint64_t v49 = v16;
    v49[1] = sub_10008D984;
    sub_10003069C();
    sub_100043638();
    sub_10008EBC0();
  }
  else if (v21 == enum case for AssetPolicy.unloadCached(_:))
  {
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v16 + 112) = v30;
    *uint64_t v30 = v16;
    v30[1] = sub_10008D844;
    sub_100043638();
    sub_10008E050();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    sub_100043638();
  }
}

uint64_t sub_10008D844()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *char v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10008D920()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10008D984()
{
  sub_1000086EC();
  sub_10002FB6C();
  uint64_t v3 = v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 144) = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10008DAC4;
  sub_100044070(*(void *)(v0 + 120));
  return sub_1000962C8();
}

uint64_t sub_10008DAC4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10008DBBC()
{
  sub_1000086E0();
  sub_10007A394();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008DC50;
  return sub_100087A10();
}

uint64_t sub_10008DC50()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

BOOL sub_10008DD2C()
{
  type metadata accessor for AssetPolicy();
  sub_100008678();
  __chkstk_darwin(v1, v2);
  sub_100057F20();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
  sub_100043D2C();
  sub_1000BA7D0();
  sub_100069DF4();
  v4();
  char v5 = AssetPolicy.allowAssetTimerUse.getter();
  sub_100043924();
  v6();
  return (v5 & 1) != 0
      && *(double *)(v3 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0) + 28)) > 0.0;
}

void sub_10008DE18()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  sub_1000B9970();
  if (sub_10008DD2C())
  {
    uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
    if (!*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask)
      && sub_1000A5F0C((uint64_t (*)(uint64_t))sub_1000A1EE4, sub_1000B5AF8))
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100003B18(v7, (uint64_t)qword_10015D5A0);
      swift_retain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        *(_DWORD *)sub_100030314() = 134217984;
        uint64_t v10 = v2 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
        sub_100043D2C();
        uint64_t v11 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
        sub_1000BA458(*(double *)(v10 + *(int *)(v11 + 28)));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        sub_1000B72C4((void *)&_mh_execute_header, v8, v9, "Starting task to transition assets after %f seconds");
        sub_10000ED7C();
      }
      else
      {
        swift_release();
      }

      uint64_t v12 = type metadata accessor for TaskPriority();
      sub_100069D3C(v1, v13, v14, v12);
      swift_allocObject();
      swift_weakInit();
      int64_t v15 = (void *)swift_allocObject();
      sub_1000B9D08(v15);
      *(void *)(v2 + v6) = sub_100003730(v1, (uint64_t)&unk_10015DAD8, v16);
      swift_release();
    }
  }
  sub_10002FAC4();
}

uint64_t sub_10008E050()
{
  sub_1000086E0();
  v1[10] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v2);
  v1[11] = sub_10002FE18();
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[12] = v3;
  sub_10002FA4C(v3);
  v1[13] = v4;
  v1[14] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[15] = v5;
  sub_10002FDD0(v5);
  v1[16] = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  v1[17] = State;
  sub_10002FA4C(State);
  v1[18] = v7;
  v1[19] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v8, v9, v10);
}

#error "10008E400: call analysis failed (funcsize=329)"

uint64_t sub_10008E6B0()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v3 = *v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 88);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10008E834()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v3 = v2[22];
  uint64_t result = swift_release();
  if (v3)
  {
    uint64_t v6 = v2[22];
    v2[22] = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1000B726C(result, v5, v2[21]);
      if (v0) {
        uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7644();
      }
      v2[23] = v1;
      uint64_t v7 = v2[11];
      sub_100043E68();
      v8();
      uint64_t v9 = type metadata accessor for AuditToken();
      sub_100069D3C(v7, v10, v11, v9);
      uint64_t v12 = (void *)swift_task_alloc();
      char v2[24] = v12;
      *uint64_t v12 = v2;
      v12[1] = sub_10008E6B0;
      sub_1000447E8();
      sub_10002FE64();
      return sub_10009690C();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v14))
    {
      int64_t v15 = (_WORD *)sub_10005A928();
      sub_100069CF8(v15);
      sub_10005A960((void *)&_mh_execute_header, v16, v17, "Finished unloading assets not in use by requests due to \"unload cached\" asset policy");
      sub_10000ED7C();
    }
    sub_1000BA1F0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE64();
    return v19(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  return result;
}

BOOL sub_10008E9D4()
{
  uint64_t v0 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v5 = *(void *)(State - 8);
  __chkstk_darwin(State, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for LoadState.unloaded(_:), State);
  sub_1000B5280(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, State);
  sub_1000B5E24();
  BOOL v10 = (v9 & 1) == 0 && *(void *)(*(void *)&v3[*(int *)(v0 + 48)] + 16) == 0;
  sub_1000B5E7C((uint64_t)v3, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v10;
}

uint64_t sub_10008EBC0()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[4] = v3;
  sub_10002FA4C(v3);
  v1[5] = v4;
  v1[6] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10008EC4C()
{
  sub_1000086EC();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 56) = sub_100003B18(v1, (uint64_t)qword_10015D5A0);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_10005A960((void *)&_mh_execute_header, v5, v6, "Moving assets to dynamic mode that can be");
    sub_10000ED7C();
  }
  unint64_t v7 = *(void *)(v0 + 16);

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)(v0 + 64) = v8;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 16);
      *(_DWORD *)(v0 + 96) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(void *)(v0 + 72) = 0;
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v11 = *(void *)(v10 + 32);
        swift_retain();
      }
      *(void *)(v0 + 80) = v11;
      sub_100043E68();
      v18();
      uint64_t v19 = swift_task_alloc();
      uint64_t v20 = (void *)sub_100057A7C(v19);
      *uint64_t v20 = v21;
      v20[1] = sub_10008EE98;
      return sub_10008F160();
    }
  }
  else
  {
    sub_1000B9FE4();
    uint64_t v12 = (void *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v13))
    {
      os_log_type_t v14 = (_WORD *)sub_10005A928();
      sub_100069CF8(v14);
      sub_10005A960((void *)&_mh_execute_header, v15, v16, "Finished moving assets to dynamic mode");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    sub_10000EF7C();
    return v17();
  }
  return result;
}

uint64_t sub_10008EE98()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *os_log_type_t v3 = v2;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v4 = sub_1000B6DE0();
  v5(v4);
  sub_10000F0B4();
  sub_10002FE64();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10008EFE8()
{
  sub_1000086EC();
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  swift_release();
  if (v1 + 1 == v2)
  {
    sub_1000B9FE4();
    os_log_type_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v4))
    {
      uint64_t v5 = (_WORD *)sub_10005A928();
      sub_100069CF8(v5);
      sub_10005A960((void *)&_mh_execute_header, v6, v7, "Finished moving assets to dynamic mode");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    sub_10000EF7C();
    return v8();
  }
  else
  {
    uint64_t v10 = v0[9] + 1;
    v0[9] = v10;
    uint64_t v11 = v0[2];
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8 * v10 + 32);
      swift_retain();
    }
    v0[10] = v12;
    sub_100043E68();
    v13();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_100057A7C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_10008EE98;
    sub_1000B7634();
    return sub_10008F160();
  }
}

uint64_t sub_10008F160()
{
  sub_1000086E0();
  *(void *)(v1 + 248) = v2;
  *(void *)(v1 + 256) = v0;
  *(unsigned char *)(v1 + 576) = v3;
  *(void *)(v1 + 240) = v4;
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  *(void *)(v1 + 264) = v5;
  sub_10002FDD0(v5);
  *(void *)(v1 + 272) = sub_1000436D8();
  *(void *)(v1 + 280) = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v6);
  *(void *)(v1 + 288) = sub_10002FE18();
  uint64_t v7 = sub_100003A70(&qword_10015DA90);
  sub_10002FDD0(v7);
  *(void *)(v1 + 296) = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v8);
  *(void *)(v1 + 304) = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  *(void *)(v1 + 312) = State;
  sub_10002FA4C(State);
  *(void *)(v1 + 320) = v10;
  *(void *)(v1 + 328) = sub_1000436D8();
  *(void *)(v1 + 336) = swift_task_alloc();
  *(void *)(v1 + 344) = swift_task_alloc();
  *(void *)(v1 + 352) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  *(void *)(v1 + 360) = v11;
  sub_10002FA4C(v11);
  *(void *)(v1 + 368) = v12;
  *(void *)(v1 + 376) = *(void *)(v13 + 64);
  *(void *)(v1 + 384) = sub_1000436D8();
  *(void *)(v1 + 392) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_10008F2F8()
{
  uint64_t v129 = v0;
  unint64_t v2 = v0 + 16;
  os_log_type_t v3 = v0 + 40;
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  sub_1000B89F4();
  sub_1000BA16C();
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 400) = sub_100003B18(v4, (uint64_t)qword_10015D5A0);
  sub_10002FC78();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (_DWORD *)sub_100030314();
    v128[0] = sub_10002FF90();
    *uint64_t v7 = 136315138;
    swift_retain();
    sub_1000C9804();
    sub_1000B7218();
    uint64_t v8 = sub_1000B9560();
    *(void *)(v0 + 232) = sub_10001DF20(v8, v9, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100043604();
    swift_bridgeObjectRelease();
    sub_1000B7EE4((void *)&_mh_execute_header, v5, v6, "moveAssetToDynamicMode entering for %s");
    sub_100043EE8();
    sub_10000ED7C();
    os_log_type_t v3 = v0 + 40;
    sub_10000ED7C();
  }
  else
  {

    sub_100043604();
  }
  *(void *)(v0 + 408) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_100043D2C();
  sub_1000443CC();
  sub_100043D2C();
  uint64_t v11 = 0;
  *(_DWORD *)(v0 + 568) = enum case for LoadState.unloaded(_:);
  *(_DWORD *)(v0 + 572) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
  uint64_t v12 = 1;
  while (1)
  {
    *(void *)(v0 + 416) = v12;
    uint64_t v13 = *(void *)(*(void *)(v0 + 240) + *(void *)(v0 + 408) + *(int *)(*(void *)(v0 + 264) + 28));
    *(void *)(v0 + 424) = v13;
    if (v13)
    {
      sub_1000B7908();
      swift_retain();
      uint64_t v43 = (void *)Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      BOOL v45 = sub_10004361C(v44);
      unint64_t v46 = *(void **)(v0 + 240);
      if (v45)
      {
        uint64_t v47 = sub_100030314();
        uint64_t v48 = sub_10002FF90();
        sub_1000B7AC8(v48);
        sub_1000B9464(4.8149e-34);
        uint64_t v49 = sub_1000C9804();
        sub_1000B7EFC();
        *(void *)(v47 + 4) = sub_10001DF20(v49, v2, v128);
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10000F190((void *)&_mh_execute_header, v50, v51, "moveAssetToDynamicMode for %s found pendingTransitionTask");
        sub_1000436BC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      uint64_t v83 = swift_task_alloc();
      sub_1000B956C(v83);
      sub_100003A70(&qword_10015B468);
      sub_100030AC8();
      void *v46 = v84;
      v46[1] = sub_10009030C;
      goto LABEL_40;
    }
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000B98C4();
    Swift::Int v17 = sub_1000ABA64(v14, v15, v16);
    Swift::Int v18 = v17;
    *(void *)(v0 + 448) = v17;
    if ((v17 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter()) {
        goto LABEL_30;
      }
    }
    else if (*(void *)(v17 + 16))
    {
LABEL_30:
      sub_1000B6F24();
      uint64_t v52 = (void *)Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (sub_10004361C(v53))
      {
        int v54 = (_DWORD *)sub_100030314();
        uint64_t v55 = sub_10002FF90();
        *int v54 = 136315138;
        sub_1000B7CBC(v55);
        sub_1000C9804();
        sub_1000B7EFC();
        *(void *)(v0 + 224) = sub_1000B806C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10000F190((void *)&_mh_execute_header, v56, v57, "moveAssetToDynamicMode for %s found unloadedDependencies");
        sub_1000436BC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      uint64_t v91 = *(void *)(v0 + 368);
      uint64_t v90 = *(void *)(v0 + 376);
      char v127 = *(unsigned char *)(v0 + 576);
      sub_100069DF4();
      v92();
      unint64_t v93 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      uint64_t v94 = swift_allocObject();
      uint64_t v95 = sub_1000B6F40(v94);
      v96(v95);
      *(unsigned char *)(v90 + v93 + v90) = v127;
      *(void *)(v0 + 208) = v18;
      swift_retain();
      swift_retain();
      goto LABEL_47;
    }
    swift_release();
    uint64_t v19 = *(void *)(v0 + 424);
    sub_1000B8D0C();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000B98C4();
    sub_1000AC1EC();
    uint64_t v21 = v20;
    *(void *)(v0 + 488) = v20;
    if ((v20 & 0xC000000000000001) == 0)
    {
      if (!*(void *)(v20 + 16)) {
        goto LABEL_16;
      }
LABEL_32:
      sub_1000B6F24();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      BOOL v60 = sub_100044098(v59);
      uint64_t v61 = *(void *)(v0 + 240);
      if (v60)
      {
        uint64_t v62 = (_DWORD *)sub_100030314();
        uint64_t v63 = sub_10002FF90();
        *uint64_t v62 = 136315138;
        sub_1000B7CBC(v63);
        uint64_t v64 = sub_1000C9804();
        sub_1000B7218();
        uint64_t v65 = sub_10001DF20(v64, v1, v128);
        sub_10004458C(v65, (void *)(v0 + 216));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10004377C((void *)&_mh_execute_header, v58, v3, "moveAssetToDynamicMode for %s found loadedDependents");
        sub_100030988();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      sub_1000B8D0C();
      uint64_t v97 = sub_10004412C();
      *(void *)(v0 + 496) = v97;
      *(void *)(v97 + 16) = v58;
      *(void *)(v97 + 24) = v61;
      *(void *)(v0 + 192) = v21;
      swift_retain();
      swift_retain();
LABEL_47:
      sub_1000579A4();
      sub_100069EBC();
      return _swift_task_switch(v98, v99, v100);
    }
    if (__CocoaSet.count.getter()) {
      goto LABEL_32;
    }
LABEL_16:
    uint64_t v124 = v19;
    swift_release();
    uint64_t v22 = *(unsigned int *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v25 = *(void *)(v0 + 312);
    uint64_t v24 = *(void *)(v0 + 320);
    uint64_t v123 = *(void (**)(uint64_t, void, uint64_t))(v24 + 16);
    v123(*(void *)(v0 + 352), *(void *)(v0 + 240) + *(void *)(v0 + 408), v25);
    uint64_t v26 = *(void (**)(uint64_t, void, uint64_t))(v24 + 104);
    os_log_type_t v3 = v24 + 104;
    uint64_t v122 = v26;
    v26(v23, v22, v25);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v27 = *(void *)(v0 + 112) == *(void *)(v0 + 128) && *(void *)(v0 + 120) == *(void *)(v0 + 136);
    uint64_t v126 = v11;
    unint64_t v2 = v27 ? 1 : _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v1 = *(void *)(v0 + 312);
    uint64_t v28 = *(void *)(v0 + 320);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(void))(v28 + 8);
    sub_100043FA8();
    v29();
    sub_1000B9560();
    sub_100043FA8();
    v29();
    if (v2) {
      break;
    }
    if (!v124)
    {
      uint64_t v78 = *(void *)(v0 + 328);
      uint64_t v79 = *(void *)(v0 + 336);
      uint64_t v80 = *(void *)(v0 + 312);
      uint64_t v81 = *(void *)(v0 + 256);
      uint64_t v125 = *(void (**)(char *, uint64_t))(v0 + 248);
      v123(v79, *(void *)(v0 + 240) + *(void *)(v0 + 408), v80);
      v122(v78, enum case for LoadState.loaded(_:), v80);
      *(unsigned char *)(v0 + 577) = sub_100101C40(v79, v78) & 1;
      sub_100043FA8();
      v29();
      sub_100043FA8();
      v29();
      Class v82 = sub_1000BB264(v81, v125);
      *(void *)(v0 + 544) = v82;
      if (!v82)
      {
        if (*(unsigned char *)(v0 + 577) == 1)
        {
          sub_1000B7044();
          sub_1000B5E24();
          sub_1000B74D4();
          sub_100043F38();
          sub_1000B8380();
          swift_endAccess();
          sub_1000B5E7C(0, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        }
        sub_1000B6F24();
        uint64_t v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.default.getter();
        sub_100044098(v111);
        sub_1000B9200();
        if (v112)
        {
          sub_100030314();
          uint64_t v113 = sub_10002FF90();
          sub_1000B7874(v113, 4.8149e-34);
          sub_1000B8CC0();
          sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
          uint64_t v114 = sub_1000B8AEC();
          uint64_t v116 = sub_1000B7A4C(v114, v115);
          sub_1000B9B3C(v116);
          sub_1000B7784();
          swift_bridgeObjectRelease();
          sub_1000B72C4((void *)&_mh_execute_header, v110, v3, "Moved asset %s to dynamic mode");
          sub_100030988();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_1000B7784();
        }
        swift_release();
        sub_1000B7088();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_1000304E0();
LABEL_54:
        sub_100069EBC();
        __asm { BRAA            X1, X16 }
      }
      os_log_type_t v105 = (void *)async function pointer to Task.value.getter[1];
      swift_retain();
      uint64_t v106 = swift_task_alloc();
      sub_1000B95A8(v106);
      sub_100003A70(&qword_10015B468);
      sub_1000B76F8();
      *os_log_type_t v105 = v107;
      v105[1] = sub_100093FD4;
      sub_1000B7824();
LABEL_40:
      sub_100069EBC();
      return Task.value.getter(v85, v86, v87, v88, v89);
    }
    sub_1000B7F80();
    uint64_t v11 = v126;
    if (v27)
    {
      sub_1000B6F24();
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.fault.getter();
      if (sub_10004361C(v31))
      {
        sub_100030314();
        uint64_t v32 = sub_10002FF90();
        sub_1000B7AC8(v32);
        sub_1000B78E8(4.8149e-34);
        sub_1000C9804();
        sub_100043728();
        uint64_t v33 = sub_1000B7358();
        sub_1000BA5B4(v33, v34, v35, v36, v37, v38, v39, v40, v117, v118, v119, v120, v121, (void *)(v0 + 168));
        sub_100043948();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10000F190((void *)&_mh_execute_header, v41, v42, "unloadAsset for %s failed to move all dependents to dynamic or load, giving up after multiple attmpts");
        sub_1000436BC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      type metadata accessor for ModelManagerError();
      sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v102 = sub_10004415C();
      sub_1000B935C(v102, v103);
      sub_10002FC6C();
      sub_100043E9C();
      v104();
      swift_willThrow();
      sub_1000B920C();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1000B88D8();
      goto LABEL_54;
    }
  }
  uint64_t v66 = *(void *)(v0 + 288);
  sub_100043E68();
  v67();
  uint64_t v68 = sub_100003A70(&qword_10015B408);
  sub_1000B6E34(v68);
  uint64_t v69 = sub_100003A70(&qword_10015B9A0);
  uint64_t v70 = sub_1000B700C(v69);
  sub_100069D3C(v66, v71, v72, v70);
  uint64_t v73 = swift_task_alloc();
  uint64_t v74 = (void *)sub_1000B8A64(v73);
  *uint64_t v74 = v75;
  v74[1] = sub_100093044;
  sub_1000BA0E8();
  sub_1000B753C();
  sub_100069EBC();
  return sub_10007A644();
}

uint64_t sub_10009030C()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *os_log_type_t v3 = v2;
  *os_log_type_t v3 = *v1;
  *(void *)(v2 + 440) = v0;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

#error "1000908D4: call analysis failed (funcsize=754)"

uint64_t sub_100091054()
{
  sub_1000086EC();
  uint64_t v1 = v0[57];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[58] = v2;
  v2[2] = v0 + 26;
  v2[3] = &unk_10015DAA0;
  v2[4] = v1;
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[59] = v3;
  *os_log_type_t v3 = v0;
  v3[1] = sub_10009113C;
  sub_1000B9AC0((uint64_t)&type metadata for ());
  sub_1000B7618();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10009113C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 480) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100091220()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "100091668: call analysis failed (funcsize=772)"

uint64_t sub_100091F18()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100091F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  swift_release();
  sub_1000B7B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10009203C()
{
  sub_1000086EC();
  uint64_t v1 = v0[62];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[63] = v2;
  v2[2] = v0 + 24;
  v2[3] = &unk_10015DAB8;
  v2[4] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[64] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100092124;
  sub_1000B9AC0((uint64_t)&type metadata for ());
  sub_1000B7618();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100092124()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 520) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100092208()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "100092588: call analysis failed (funcsize=780)"

uint64_t sub_100092F20()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100092F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  swift_release();
  sub_1000B7B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100093044()
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 536) = v1;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = v0[38];
  uint64_t v6 = v0[37];
  sub_100042EDC(v0[36], &qword_10015DA50);
  sub_100042EDC(v6, &qword_10015DA90);
  sub_100042EDC(v5, &qword_10015BAA8);
  sub_100043F00();
  v7();
  sub_10000F0B4();
  sub_10002FE94();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000931F8()
{
  uint64_t v126 = v0;
  uint64_t v121 = v0 + 72;
  sub_1000B89F4();
  uint64_t v119 = v0 + 18;
  uint64_t v120 = v0 + 20;
  sub_1000BA16C();
  uint64_t v117 = v0 + 27;
  uint64_t v118 = v4;
  uint64_t v5 = v0[67];
  uint64_t v123 = v0;
  while (1)
  {
    sub_1000B7F80();
    if (v14)
    {
      sub_1000B6F24();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.fault.getter();
      if (sub_100044098(v33))
      {
        sub_100030314();
        uint64_t v34 = sub_10002FF90();
        sub_1000B94F8(v34);
        sub_1000B7DB4(4.8149e-34);
        sub_1000C9804();
        sub_100043728();
        *uint64_t v118 = sub_1000B7358();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10004377C((void *)&_mh_execute_header, v32, (os_log_type_t)v2, "unloadAsset for %s failed to move all dependents to dynamic or load, giving up after multiple attmpts");
        sub_100030988();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      type metadata accessor for ModelManagerError();
      sub_1000B5280((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v77 = sub_10004415C();
      sub_1000B935C(v77, v78);
      sub_10002FC6C();
      sub_100043E9C();
      v79();
      goto LABEL_57;
    }
    sub_1000B79C4(v6);
    if (v3)
    {
      sub_1000B84DC();
      swift_retain();
      uint64_t v35 = (void *)Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      BOOL v37 = sub_10004361C(v36);
      uint64_t v38 = (void *)v0[30];
      if (v37)
      {
        uint64_t v39 = sub_100030314();
        uint64_t v40 = sub_10002FF90();
        sub_1000B7AC8(v40);
        sub_1000B9464(4.8149e-34);
        sub_1000C9804();
        sub_1000B878C();
        *(void *)(v39 + 4) = sub_1000B8050();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10000F190((void *)&_mh_execute_header, v41, v42, "moveAssetToDynamicMode for %s found pendingTransitionTask");
        sub_1000436BC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      uint64_t v80 = swift_task_alloc();
      sub_1000B956C(v80);
      sub_100003A70(&qword_10015B468);
      sub_100030AC8();
      *uint64_t v38 = v81;
      v38[1] = sub_10009030C;
      sub_1000B977C();
      goto LABEL_43;
    }
    uint64_t v7 = v0[32];
    sub_1000B8244();
    swift_retain();
    uint64_t v8 = swift_bridgeObjectRetain();
    Swift::Int v9 = sub_1000ABA64(v8, v7, (uint64_t *)v1);
    sub_1000B8720(v9);
    if (v14)
    {
      if (MEMORY[0x10])
      {
LABEL_32:
        sub_1000B6F24();
        uint64_t v43 = (void *)Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.info.getter();
        if (sub_10004361C(v44))
        {
          sub_100030314();
          uint64_t v45 = sub_10002FF90();
          sub_1000B7AC8(v45);
          sub_1000B779C(4.8149e-34);
          sub_1000C9804();
          sub_1000B7218();
          v0[28] = sub_1000B8674();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100043604();
          swift_bridgeObjectRelease();
          sub_10000F190((void *)&_mh_execute_header, v46, v47, "moveAssetToDynamicMode for %s found unloadedDependencies");
          sub_1000436BC();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_100043604();
        }
        sub_100069DF4();
        v87();
        sub_1000B7520();
        uint64_t v88 = swift_allocObject();
        uint64_t v89 = sub_1000B6F40(v88);
        v90(v89);
        sub_1000B8454();
        swift_retain();
        swift_retain();
        goto LABEL_50;
      }
    }
    else if (__CocoaSet.count.getter())
    {
      goto LABEL_32;
    }
    swift_release();
    uint64_t v10 = v0[53];
    sub_1000B7C6C();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000B9284();
    sub_1000AC1EC();
    sub_1000B8730(v11);
    if (v14)
    {
      if (!MEMORY[0x10]) {
        goto LABEL_12;
      }
LABEL_34:
      sub_1000B6F24();
      uint64_t v48 = (void *)Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (sub_10004361C(v49))
      {
        uint64_t v50 = (_DWORD *)sub_100030314();
        uint64_t v51 = sub_10002FF90();
        sub_1000B94F8(v51);
        _DWORD *v50 = 136315138;
        swift_retain();
        uint64_t v52 = sub_1000C9804();
        unint64_t v54 = v53;
        swift_release();
        uint64_t v55 = sub_10001DF20(v52, v54, &v125);
        sub_1000BA5B4(v55, v56, v57, v58, v59, v60, v61, v62, v112, v113, v114, v115, v116, v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100043604();
        swift_bridgeObjectRelease();
        sub_10000F190((void *)&_mh_execute_header, v63, v64, "moveAssetToDynamicMode for %s found loadedDependents");
        sub_100030988();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100043604();
      }
      sub_1000B8D0C();
      uint64_t v91 = sub_10004412C();
      sub_1000B8444(v91);
      swift_retain();
      swift_retain();
LABEL_50:
      sub_1000579A4();
      sub_100069EBC();
      return _swift_task_switch(v92, v93, v94);
    }
    if (__CocoaSet.count.getter()) {
      goto LABEL_34;
    }
LABEL_12:
    swift_release();
    sub_1000B9228();
    sub_100069DF4();
    v12();
    sub_1000BA078();
    sub_1000B9FB8();
    v13();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v14 = v0[14] == v0[16] && v0[15] == v0[17];
    if (v14) {
      sub_1000B96E8();
    }
    else {
      uint64_t v1 = sub_1000B85DC();
    }
    uint64_t v2 = v0[44];
    uint64_t v15 = v0[40];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void (**)(void))(v15 + 8);
    sub_100043AE0();
    v3();
    sub_100043AE0();
    v3();
    if (v1) {
      break;
    }
    uint64_t v0 = v123;
    if (!v10)
    {
      uint64_t v16 = v123[42];
      uint64_t v17 = v123[41];
      uint64_t v18 = v123[32];
      uint64_t v124 = (void (*)(char *, uint64_t))v123[31];
      sub_100069DF4();
      v19();
      sub_1000B9FB8();
      v20();
      *((unsigned char *)v121 + 1) = sub_100101C40(v16, v17) & 1;
      sub_100043AE0();
      v3();
      sub_100043AE0();
      v3();
      Class v21 = sub_1000BB264(v18, v124);
      v123[68] = v21;
      if (v5)
      {
        *uint64_t v120 = v5;
        swift_errorRetain();
        sub_100003A70(&qword_10015B468);
        if (sub_1000B81E8())
        {
          if (!v123[19])
          {
            sub_1000B972C();
            sub_1000B532C();
            sub_10004415C();
            *os_log_type_t v111 = v119;
            v111[1] = 0;
            swift_willThrow();
            swift_errorRelease();
            goto LABEL_58;
          }
          swift_bridgeObjectRelease();
        }
        int v22 = *((unsigned __int8 *)v121 + 1);
        swift_errorRelease();
        if (v22 == 1)
        {
          uint64_t v23 = v123[35];
          sub_1000B5E24();
          sub_1000B74F8();
          sub_100043F38();
          sub_1000B8380();
          swift_endAccess();
          sub_1000B5E7C(v23, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        }
        sub_1000B84F8();
        swift_errorRetain();
        swift_retain();
        swift_errorRetain();
        uint64_t v24 = (void *)Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        if (sub_10004361C(v25))
        {
          sub_10000EFE8();
          uint64_t v122 = (void *)sub_100057C20();
          uint64_t v125 = sub_10002FF90();
          sub_1000BA4D0(4.8151e-34);
          uint64_t v26 = sub_1000B7FAC();
          sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
          uint64_t v27 = sub_1000B792C();
          v123[22] = sub_1000B7A4C(v27, v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_1000B72DC();
          swift_bridgeObjectRelease();
          sub_1000B7EC4();
          uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
          sub_1000B75F0(v29);
          *uint64_t v122 = v26;
          swift_errorRelease();
          swift_errorRelease();
          sub_1000B78C8((void *)&_mh_execute_header, v30, v31, "Failed to move asset %s to dynamic mode: %@");
          sub_100003A70(&qword_10015BA58);
          sub_100043EE8();
          sub_10000ED7C();
          sub_100043EE8();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {
          sub_1000B72DC();
          swift_errorRelease();
          swift_errorRelease();
        }

LABEL_57:
        swift_willThrow();
LABEL_58:
        sub_1000B72F4();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_10000EF7C();
        goto LABEL_59;
      }
      if (!v21)
      {
        if (*((unsigned char *)v121 + 1) == 1)
        {
          uint64_t v101 = v123[35];
          uint64_t v102 = v123[34];
          uint64_t v18 = v123[33];
          uint64_t v103 = v123[30] + v123[51];
          sub_1000B5E24();
          sub_1000B74D4();
          sub_100043F38();
          sub_1000B52C8(v102, v103);
          swift_endAccess();
          sub_1000B5E7C(v101, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        }
        sub_1000B6F24();
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.default.getter();
        sub_100044098(v105);
        sub_1000B9200();
        if (v106)
        {
          sub_100030314();
          uint64_t v107 = sub_10002FF90();
          sub_1000B7874(v107, 4.8149e-34);
          sub_1000B8CC0();
          sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
          uint64_t v108 = sub_1000B8AEC();
          uint64_t v110 = sub_1000B7A4C(v108, v109);
          sub_1000B9B3C(v110);
          sub_1000B7784();
          swift_bridgeObjectRelease();
          sub_1000B72C4((void *)&_mh_execute_header, v104, (os_log_type_t)v18, "Moved asset %s to dynamic mode");
          sub_100030988();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_1000B7784();
        }
        swift_release();
        sub_1000B7088();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_1000304E0();
LABEL_59:
        sub_100069EBC();
        __asm { BRAA            X1, X16 }
      }
      unint64_t v96 = (void *)async function pointer to Task.value.getter[1];
      swift_retain();
      uint64_t v97 = swift_task_alloc();
      sub_1000B95A8(v97);
      sub_100003A70(&qword_10015B468);
      sub_1000B76F8();
      *unint64_t v96 = v98;
      v96[1] = sub_100093FD4;
      sub_1000B7824();
LABEL_43:
      sub_100069EBC();
      return Task.value.getter(v82, v83, v84, v85, v86);
    }
  }
  uint64_t v65 = v123[36];
  sub_100043E68();
  v66();
  uint64_t v67 = sub_100003A70(&qword_10015B408);
  sub_1000B6E34(v67);
  uint64_t v68 = sub_100003A70(&qword_10015B9A0);
  uint64_t v69 = sub_1000B700C(v68);
  sub_100069D3C(v65, v70, v71, v69);
  uint64_t v72 = swift_task_alloc();
  uint64_t v73 = (void *)sub_1000B8A64(v72);
  void *v73 = v74;
  v73[1] = sub_100093044;
  sub_1000BA0E8();
  sub_1000B753C();
  sub_100069EBC();
  return sub_10007A644();
}

uint64_t sub_100093FD4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 256);
    swift_release();
    uint64_t v8 = sub_100094FEC;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 256);
    uint64_t v8 = sub_1000940C8;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_1000940C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v24;
  a22 = v25;
  sub_1000306E0();
  a20 = v22;
  swift_release();
  if (*(unsigned char *)(v22 + 577) == 1)
  {
    uint64_t v26 = *(void *)(v22 + 280);
    uint64_t v23 = *(void *)(v22 + 240) + *(void *)(v22 + 408);
    sub_1000B5E24();
    sub_1000B74B0();
    sub_1000B9554();
    sub_100043F38();
    sub_1000B8348();
    swift_endAccess();
    sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  }
  sub_1000B6F24();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (sub_10004361C(v28))
  {
    a9 = v22 + 200;
    uint64_t v29 = (_DWORD *)sub_100030314();
    uint64_t v30 = sub_10002FF90();
    *uint64_t v29 = 136315138;
    a11 = v30;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v31 = sub_1000B8AEC();
    *(void *)(v22 + 200) = sub_10001DF20(v31, v32, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_1000B7EE4((void *)&_mh_execute_header, v27, (os_log_type_t)v23, "Moved asset %s to dynamic mode");
    sub_1000B7250();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100044610();
  }

  swift_release();
  uint64_t v42 = *(void *)(v22 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE48();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, v42, a11, a12, a13, a14);
}

#error "1000947BC: call analysis failed (funcsize=736)"

uint64_t sub_100094F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100030028();
  sub_1000306E0();
  sub_1000B7B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_10002FE48();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_100094FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  swift_release();
  uint64_t v27 = *(void *)(v24 + 560);
  *(void *)(v24 + 160) = v27;
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  sub_100030BD0();
  if (swift_dynamicCast())
  {
    if (!*(void *)(v24 + 152))
    {
      uint64_t v43 = *(void *)(v24 + 144);
      swift_errorRelease();
      sub_1000B532C();
      uint64_t v44 = sub_10004415C();
      *uint64_t v45 = v43;
      v45[1] = 0;
      uint64_t v58 = v44;
      swift_willThrow();
      swift_errorRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  int v28 = *(unsigned __int8 *)(v24 + 577);
  swift_errorRelease();
  if (v28 == 1)
  {
    uint64_t v30 = *(void *)(v24 + 272);
    uint64_t v29 = *(void *)(v24 + 280);
    uint64_t v31 = v27;
    uint64_t v32 = *(void *)(v24 + 264);
    uint64_t v33 = *(void *)(v24 + 240) + *(void *)(v24 + 408);
    sub_1000B5E24();
    uint64_t v34 = *(int *)(v32 + 24);
    uint64_t v27 = v31;
    *(unsigned char *)(v29 + v34) = 1;
    sub_1000BA570();
    sub_1000B5E24();
    sub_100043F38();
    sub_1000B52C8(v30, v33);
    swift_endAccess();
    sub_1000B5E7C(v29, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  }
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (sub_1000B7744(v36))
  {
    a9 = v24 + 176;
    uint64_t v37 = sub_10000EFE8();
    uint64_t v56 = (void *)sub_100057C20();
    a12 = sub_10002FF90();
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v38 = type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v39 = sub_1000B9578();
    *(void *)(v24 + 176) = sub_10001DF20(v39, v40, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044204();
    *(_WORD *)(v37 + 12) = 2112;
    swift_errorRetain();
    uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
    sub_1000BA5C8(v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v38;
    swift_errorRelease();
    swift_errorRelease();
    sub_1000B88E8((void *)&_mh_execute_header, v35, v42, "Failed to move asset %s to dynamic mode: %@");
    sub_100003A70(&qword_10015BA58);
    sub_100043EE8();
    sub_10000ED7C();
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100044204();
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v58 = v27;
LABEL_11:
  sub_1000B920C();
  uint64_t v57 = v46;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100069CCC();
  sub_100043638();
  return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, v57, v58, a12, a13, a14, a15, a16);
}

uint64_t sub_100095398(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 136) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 32) = a2;
  sub_100003A70(&qword_10015DA50);
  *(void *)(v5 + 56) = swift_task_alloc();
  sub_100003A70(&qword_10015DA90);
  *(void *)(v5 + 64) = swift_task_alloc();
  sub_100003A70(&qword_10015BAA8);
  *(void *)(v5 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *a1;
  *(void *)(v5 + 96) = v8;
  *(void *)(v5 + 104) = v9;
  return _swift_task_switch(sub_1000954F8, 0, 0);
}

#error "1000955F0: call analysis failed (funcsize=162)"

uint64_t sub_1000957A8()
{
  sub_100030014();
  sub_10000F01C();
  sub_10000EDB8();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100030C44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002FE64();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000958E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_100008660();
  uint64_t v13 = v12;
  sub_10000ED94();
  *uint64_t v14 = v13;
  uint64_t v16 = v15[9];
  uint64_t v17 = v15[8];
  uint64_t v18 = v15[7];
  uint64_t v19 = *v11;
  sub_1000086D0();
  *uint64_t v20 = v19;
  *(void *)(v13 + 128) = v10;
  swift_task_dealloc();
  sub_100042EDC(v18, &qword_10015DA50);
  sub_100042EDC(v17, &qword_10015DA90);
  sub_100042EDC(v16, &qword_10015BAA8);
  sub_10004468C();
  sub_100043F00();
  v21();
  if (v10)
  {
    sub_1000579A4();
    sub_10002FE94();
    return _swift_task_switch(v22, v23, v24);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE94();
    return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
  }
}

uint64_t sub_100095AC4()
{
  sub_1000086EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100095B48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  sub_100003A70(&qword_10015DA50);
  void v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a1;
  v3[10] = v6;
  v3[11] = v7;
  return _swift_task_switch(sub_100095C50, 0, 0);
}

#error "100095D48: call analysis failed (funcsize=154)"

uint64_t sub_100095ED8()
{
  sub_100030014();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  sub_100043DF8();
  v7();
  if (v0)
  {
    sub_1000579A4();
    sub_10002FE64();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10002FE64();
    return v13(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t sub_100096048()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  sub_100042EDC(v6, &qword_10015DA50);
  sub_1000B705C();
  v9();
  if (v0)
  {
    sub_1000579A4();
    sub_1000B7440();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_1000B7440();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1000961D8()
{
  sub_1000086EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100096250()
{
  sub_1000086EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000962C8()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v3);
  v1[4] = sub_10002FE18();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100096378()
{
  sub_1000086EC();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 64) = sub_100003B18(v1, (uint64_t)qword_10015D5A0);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_10005A960((void *)&_mh_execute_header, v5, v6, "Unloading unused non-cacheable assets");
    sub_10000ED7C();
  }
  unint64_t v7 = *(void *)(v0 + 16);

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)(v0 + 72) = v8;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 16);
      *(_DWORD *)(v0 + 104) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.userInitiated(_:);
      *(void *)(v0 + 80) = 0;
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v11 = *(void *)(v10 + 32);
        swift_retain();
      }
      *(void *)(v0 + 88) = v11;
      uint64_t v18 = *(void *)(v0 + 32);
      sub_100043E68();
      v19();
      uint64_t v20 = type metadata accessor for AuditToken();
      sub_100069D3C(v18, v21, v22, v20);
      uint64_t v23 = swift_task_alloc();
      uint64_t v24 = (void *)sub_1000B9B00(v23);
      *uint64_t v24 = v25;
      v24[1] = sub_1000965E8;
      return sub_10009690C();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v13))
    {
      uint64_t v14 = (_WORD *)sub_10005A928();
      sub_100069CF8(v14);
      sub_10005A960((void *)&_mh_execute_header, v15, v16, "Finished unloading unused non-cacheable assets");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v17();
  }
  return result;
}

uint64_t sub_1000965E8()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v3 = *v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 32);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10009676C()
{
  sub_1000086EC();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  swift_release();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v4))
    {
      uint64_t v5 = (_WORD *)sub_10005A928();
      sub_100069CF8(v5);
      sub_10005A960((void *)&_mh_execute_header, v6, v7, "Finished unloading unused non-cacheable assets");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v8();
  }
  else
  {
    uint64_t v10 = v0[10] + 1;
    v0[10] = v10;
    uint64_t v11 = v0[2];
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8 * v10 + 32);
      swift_retain();
    }
    v0[11] = v12;
    uint64_t v13 = v0[4];
    sub_100043E68();
    v14();
    uint64_t v15 = type metadata accessor for AuditToken();
    sub_100069D3C(v13, v16, v17, v15);
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)sub_1000B9B00(v18);
    *uint64_t v19 = v20;
    v19[1] = sub_1000965E8;
    sub_1000447E8();
    return sub_10009690C();
  }
}

uint64_t sub_10009690C()
{
  sub_1000086E0();
  v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  uint64_t v5 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[26] = v5;
  sub_10002FDD0(v5);
  v1[27] = sub_1000436D8();
  v1[28] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

#error "100096C98: call analysis failed (funcsize=438)"

uint64_t sub_1000970D4()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  sub_10000F0B4();
  return _swift_task_switch(v4, v5, v6);
}

#error "1000973E8: call analysis failed (funcsize=427)"

uint64_t sub_1000978E0()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v2;
  v2[2] = v0 + 144;
  v2[3] = &unk_10015DA18;
  v2[4] = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1000B9390(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1000979C4;
  sub_1000B9AC0((uint64_t)&type metadata for ());
  sub_1000B7618();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000979C4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100097AA8()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "100097C6C: call analysis failed (funcsize=443)"

uint64_t sub_10009825C()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000982C8()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100098334()
{
  sub_1000086EC();
  uint64_t v1 = v0[40];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[41] = v2;
  v2[2] = v0 + 16;
  v2[3] = &unk_10015DA38;
  v2[4] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10009841C;
  sub_1000B9AC0((uint64_t)&type metadata for ());
  sub_1000B7618();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10009841C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 344) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_1000579A4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100098500()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

#error "100098678: call analysis failed (funcsize=436)"

uint64_t sub_100098C98()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000F0B4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100098D04()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100098D70()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 200);
    swift_release();
    uint64_t v8 = sub_10009966C;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 200);
    uint64_t v8 = sub_100098E64;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_100098E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  swift_release();
  uint64_t v11 = *(void *)(v10 + 224);
  uint64_t v12 = *(void *)(v10 + 208);
  sub_1000B5E24();
  *(unsigned char *)(v11 + *(int *)(v12 + 24)) = 0;
  sub_10004468C();
  sub_1000B5E24();
  sub_100043F38();
  uint64_t v13 = sub_100043F9C();
  sub_1000B52C8(v13, v14);
  swift_endAccess();
  sub_1000B5E7C(v11, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FEAC();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

#error "100099174: call analysis failed (funcsize=427)"

uint64_t sub_10009966C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  sub_100058050();
  swift_release();
  v26[21] = v26[46];
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  sub_100057ECC();
  if (swift_dynamicCast())
  {
    if (!v26[15])
    {
      uint64_t v52 = v26[14];
      swift_errorRelease();
      sub_1000B532C();
      sub_10004415C();
      *uint64_t v53 = v52;
      v53[1] = 0;
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = v26[28];
  uint64_t v29 = v26[26];
  uint64_t v28 = v26[27];
  uint64_t v30 = v26[22] + v26[29];
  swift_errorRelease();
  sub_1000B5E24();
  *(unsigned char *)(v27 + *(int *)(v29 + 24)) = 1;
  sub_100043F9C();
  sub_1000B5E24();
  sub_100043F38();
  sub_1000B52C8(v28, v30);
  swift_endAccess();
  sub_1000B5E7C(v27, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_1000B7F14();
  sub_100003B18(v31, (uint64_t)qword_10015D5A0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = sub_10000EFE8();
    a12 = (void *)sub_100057C20();
    a13 = sub_10002FF90();
    a14 = a13;
    *(_DWORD *)uint64_t v34 = 136315394;
    a10 = v34 + 4;
    os_log_t log = v32;
    sub_1000B8CC0();
    sub_1000B5280(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v26[19] = sub_1000B9590(v35, v36, v37, v38, v39, v40, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B7784();
    *(_WORD *)(v34 + 12) = 2112;
    swift_errorRetain();
    uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
    v26[20] = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a12 = v42;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to unload asset %s: %@", (uint8_t *)v34, 0x16u);
    sub_100003A70(&qword_10015BA58);
    sub_1000B9BF4();
    sub_10000ED7C();
    sub_1000B9BF4();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_1000B7784();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
LABEL_10:
  sub_1000306EC();
  return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, log, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100099A30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  sub_100003A70(&qword_10015DA50);
  void v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a1;
  v3[9] = v6;
  v3[10] = v7;
  return _swift_task_switch(sub_100099B28, 0, 0);
}

#error "100099C10: call analysis failed (funcsize=111)"

uint64_t sub_100099CFC()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  sub_100042EDC(v6, &qword_10015DA50);
  sub_1000B705C();
  v9();
  if (v0)
  {
    sub_1000579A4();
    sub_1000B7440();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_1000B7440();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_100099E84()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100099EF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  sub_100003A70(&qword_10015DA50);
  void v3[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a1;
  v3[9] = v6;
  v3[10] = v7;
  return _swift_task_switch(sub_100099FE8, 0, 0);
}

#error "10009A0D0: call analysis failed (funcsize=111)"

uint64_t sub_10009A1BC()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  sub_100042EDC(v6, &qword_10015DA50);
  sub_1000B705C();
  v9();
  if (v0)
  {
    sub_1000579A4();
    sub_1000B7440();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_1000B7440();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_10009A344()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[5] = v4;
  sub_10002FA4C(v4);
  v1[6] = v5;
  v1[7] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10009A3D4()
{
  sub_1000086E0();
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    sub_100043AC4();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result)
    {
LABEL_3:
      uint64_t v4 = *(void *)(v0 + 16);
      *(_DWORD *)(v0 + 88) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.acquisitionError(_:);
      BOOL v5 = __OFSUB__(v2, 1);
      uint64_t v6 = v2 - 1;
      *(void *)(v0 + 64) = v6;
      if (v5)
      {
        __break(1u);
      }
      else
      {
        unint64_t v7 = v4 & 0xC000000000000001;
        sub_10011671C(v6, (v4 & 0xC000000000000001) == 0);
        if (v7) {
          unint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          sub_1000B7958();
        }
        *(void *)(v0 + 72) = v7;
        sub_100043E68();
        v8();
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v9;
        *uint64_t v9 = v0;
        v9[1] = sub_10009A538;
        sub_10003069C();
        return sub_10009690C();
      }
      return result;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
  }
  sub_1000B9FE4();
  swift_task_dealloc();
  sub_10000EF7C();
  return v10();
}

uint64_t sub_10009A538()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v4 = sub_1000B6DE0();
  v5(v4);
  sub_10000F0B4();
  sub_10002FE64();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10009A688()
{
  sub_1000086E0();
  uint64_t v2 = v1[8];
  uint64_t result = swift_release();
  if (v2)
  {
    uint64_t v5 = v1[8];
    v1[8] = v5 - 1;
    if (__OFSUB__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1000B726C(result, v4, v1[2]);
      if (v0) {
        uint64_t v0 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7958();
      }
      v1[9] = v0;
      sub_100043E68();
      v6();
      uint64_t v7 = (void *)swift_task_alloc();
      v1[10] = (uint64_t)v7;
      *uint64_t v7 = v1;
      v7[1] = sub_10009A538;
      sub_10003069C();
      return sub_10009690C();
    }
  }
  else
  {
    sub_1000B9FE4();
    swift_task_dealloc();
    sub_10000EF7C();
    return v8();
  }
  return result;
}

uint64_t type metadata accessor for InferenceProviderAssetManagerPolicy(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015D9C0);
}

uint64_t *sub_10009A7D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AssetPolicy();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10009A8BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10009A930(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10009A9CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009AA7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t sub_10009AB14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AssetPolicy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009ABB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009ABC8);
}

uint64_t sub_10009ABC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AssetPolicy();
  sub_100057B10();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100006AE8(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_10009AC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009AC68);
}

void sub_10009AC68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AssetPolicy();
  sub_100057B10();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_100006960(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
}

uint64_t sub_10009ACF0()
{
  uint64_t result = type metadata accessor for AssetPolicy();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10009AD9C(uint64_t a1)
{
  uint64_t result = sub_1000B5280(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009ADF4()
{
  unint64_t result = qword_10015DA08;
  if (!qword_10015DA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015DA08);
  }
  return result;
}

uint64_t sub_10009AE40(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v8);
  uint64_t v10 = &v17[-v9];
  uint64_t v11 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v7, v11 + *(int *)(v12 + 32), v2);
  swift_beginAccess();
  type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  static Date.+ infix(_:_:)();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v13(v7, v2);
  sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
  char v14 = dispatch thunk of static Comparable.< infix(_:_:)();
  v13(v10, v2);
  if (v14) {
    char v15 = *(unsigned char *)(v11 + *(int *)(v12 + 24)) ^ 1;
  }
  else {
    char v15 = 1;
  }
  return v15 & 1;
}

void *sub_10009B05C(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v15 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v4 & 0xC000000000000001;
      unint64_t v14 = v4;
      while (v16)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        unint64_t v10 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        uint64_t v17 = v9;
        uint64_t v11 = a2;
        char v12 = a1(&v17);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          return v11;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v8;
        if (v10 == v7)
        {
          uint64_t v11 = v18;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v15 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    uint64_t v9 = *(void *)(v4 + 8 * v8 + 32);
    swift_retain();
    goto LABEL_7;
  }
LABEL_19:
  uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10009B214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  sub_100003A70(&qword_10015DAE0);
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_10009B3DC, 0, 0);
}

uint64_t sub_10009B3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_1000B8BCC();
  v10[24] = _OSActivity.__allocating_init(_:)();
  sub_100043D2C();
  uint64_t v11 = sub_1000B83B8();
  v10[25] = v11;
  if (v11)
  {
    uint64_t v12 = swift_task_alloc();
    uint64_t v13 = (void *)sub_1000B77C0(v12);
    *uint64_t v13 = v14;
    v13[1] = sub_10009B604;
    sub_1000B84AC();
    sub_10002FE94();
    return sub_10009BE5C();
  }
  else
  {
    uint64_t v17 = sub_1000B70D4();
    sub_100042EDC(v17, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v10[32] = Strong;
    if (Strong)
    {
      sub_10002FE94();
      return _swift_task_switch(v19, v20, v21);
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100057A88(v23, (uint64_t)qword_10015D5A0);
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v24))
      {
        uint64_t v25 = (_WORD *)sub_10005A928();
        sub_100069CF8(v25);
        sub_10005A960((void *)&_mh_execute_header, v26, v27, "Ending task to purge inactive assets");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_10002FE94();
      return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
    }
  }
}

uint64_t sub_10009B604()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10009B6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000B90C4();
  sub_1000306E0();
  sub_1000B8AC4();
  if (v18)
  {
    sub_100042EDC(v15, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v16[32] = Strong;
    if (Strong)
    {
      sub_1000B70B4();
      return _swift_task_switch(v20, v21, v22);
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100057A88(v38, (uint64_t)qword_10015D5A0);
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v39))
      {
        uint64_t v40 = (_WORD *)sub_10005A928();
        sub_100069CF8(v40);
        sub_10005A960((void *)&_mh_execute_header, v41, v42, "Ending task to purge inactive assets");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000B70B4();
      return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
    }
  }
  else
  {
    uint64_t v24 = sub_1000B7374();
    v25(v24);
    static ContinuousClock.Instant.now.getter();
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    v16[27] = *(void *)(v14 + 8);
    v16[28] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_1000303D4();
    v26();
    static Duration.seconds(_:)();
    ContinuousClock.Instant.advanced(by:)();
    v16[29] = *(void *)(v17 + 8);
    v16[30] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100043AE0();
    v27();
    sub_1000B8D84((__n128)xmmword_100129950);
    uint64_t v28 = (void *)swift_task_alloc();
    v16[31] = v28;
    sub_1000B5280(&qword_10015DAF0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    sub_1000B76F8();
    *uint64_t v28 = v29;
    v28[1] = sub_10009B9B0;
    sub_1000B7824();
    sub_1000B70B4();
    return static Task<>.sleep<A>(until:tolerance:clock:)(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_10009B9B0()
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_100008660();
  uint64_t v4 = v3;
  sub_10000ED94();
  *uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_1000086D0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000B881C();
    sub_100043F00();
    v8();
    uint64_t v9 = sub_10004468C();
    v2(v9);
  }
  else
  {
    unint64_t v10 = *(void (**)(uint64_t))(v4 + 232);
    sub_10004381C();
    v11();
    uint64_t v12 = sub_100057ECC();
    v10(v12);
  }
  sub_1000579A4();
  sub_10002FE94();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_10009BAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  char v12 = sub_1000B81B0();
  uint64_t v13 = sub_100043EDC();
  v11(v13);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = sub_1000B83B8();
    *(void *)(v10 + 200) = v14;
    if (v14)
    {
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = (void *)sub_1000B77C0(v15);
      *uint64_t v16 = v17;
      v16[1] = sub_10009B604;
      sub_1000B84AC();
      sub_10002FE94();
      return sub_10009BE5C();
    }
    uint64_t v20 = sub_1000B70D4();
    sub_100042EDC(v20, &qword_10015DAE0);
  }
  sub_100043D2C();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v10 + 256) = Strong;
  if (Strong)
  {
    sub_10002FE94();
    return _swift_task_switch(v22, v23, v24);
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100057A88(v26, (uint64_t)qword_10015D5A0);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v27))
    {
      uint64_t v28 = (_WORD *)sub_10005A928();
      sub_100069CF8(v28);
      sub_10005A960((void *)&_mh_execute_header, v29, v30, "Ending task to purge inactive assets");
      sub_10000ED7C();
    }
    sub_1000B6E54();
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE94();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
  }
}

uint64_t sub_10009BCE0()
{
  sub_1000086E0();
  sub_1000A134C();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_10009BD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100057A88(v10, (uint64_t)qword_10015D5A0);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v11))
  {
    char v12 = (_WORD *)sub_10005A928();
    sub_100069CF8(v12);
    sub_10005A960((void *)&_mh_execute_header, v13, v14, "Ending task to purge inactive assets");
    sub_10000ED7C();
  }
  sub_1000B6E54();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE94();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_10009BE5C()
{
  sub_1000086E0();
  v1[44] = v2;
  v1[45] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015DAE0);
  sub_10002FDD0(v3);
  v1[46] = sub_1000436D8();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[49] = v4;
  sub_10002FDD0(v4);
  v1[50] = sub_1000436D8();
  v1[51] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v1[52] = State;
  sub_10002FA4C(State);
  v1[53] = v6;
  v1[54] = sub_1000436D8();
  uint64_t v7 = swift_task_alloc();
  v1[56] = sub_1000BA11C(v7);
  v1[57] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v8);
  v1[58] = sub_10002FE18();
  uint64_t v9 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[59] = v9;
  sub_10002FA4C(v9);
  v1[60] = v10;
  v1[61] = sub_1000436D8();
  v1[62] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v1[63] = v11;
  sub_10002FA4C(v11);
  v1[64] = v12;
  v1[65] = sub_1000436D8();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_10009C030()
{
  uint64_t v165 = v0;
  uint64_t v2 = v0;
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v0[70] = v3;
  v0[71] = sub_100003B18(v3, (uint64_t)qword_10015D5A0);
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = sub_100044098(v5);
  uint64_t v7 = v0[45];
  p_vtable = &OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine.vtable;
  if (v6)
  {
    uint64_t v160 = v0 + 5;
    *(_DWORD *)sub_100030314() = 134217984;
    uint64_t v9 = v7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
    sub_100043D2C();
    v0[43] = *(void *)(v9 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0) + 24));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    sub_10004377C((void *)&_mh_execute_header, v4, v1, "Purging inactive assets that haven't been used for at least %f seconds");
    p_vtable = (void **)(&OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine + 24);
    sub_10000ED7C();
  }
  else
  {
    swift_release();
  }

  uint64_t v10 = v0[45];
  uint64_t v11 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  v0[72] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
  if (*(unsigned char *)(v10 + v11) == 1)
  {
    uint64_t v12 = (void *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v13))
    {
      uint64_t v14 = (_WORD *)sub_10005A928();
      sub_1000B8B1C(v14);
      sub_1000B78A8((void *)&_mh_execute_header, v15, v16, "While purging inactive assets, unloading dynamic-capable assets due to pending asset update");
      sub_10000ED7C();
    }

    uint64_t v10 = v0[45];
  }
  uint64_t v17 = v0[68];
  static Date.now.getter();
  uint64_t v18 = _swiftEmptySetSingleton;
  v2[42] = _swiftEmptySetSingleton;
  v2[73] = p_vtable[500];
  sub_100043D2C();
  v2[74] = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  static Date.- infix(_:_:)();
  sub_100043D2C();
  uint64_t v19 = swift_task_alloc();
  *(void *)(v19 + 16) = v17;
  swift_retain();
  uint64_t v20 = swift_bridgeObjectRetain();
  Swift::Int v21 = sub_1000AB054(v20, v10, sub_1000B5CE8, v19);
  swift_task_dealloc();
  unint64_t v22 = (unint64_t)sub_10008D13C(v21);
  v2[75] = v22;
  uint64_t v23 = swift_release();
  if (v22 >> 62)
  {
    sub_1000B8DA4();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v23 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v25)
  {
    *((_DWORD *)v2 + 168) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.purgeInactiveAssets(_:);
    *((_DWORD *)v2 + 169) = enum case for LoadState.loaded(_:);
    uint64_t v26 = v25 - 1;
    v2[76] = v25 - 1;
    if (!__OFSUB__(v25, 1))
    {
      sub_1000B9C44(v23, v24, v2[75]);
      if (v21) {
        uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7958();
      }
      v2[77] = v18;
      if ((*((unsigned char *)v18 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) == 0
        || (*(unsigned char *)(v2[45] + v2[72]) & 1) != 0)
      {
        sub_100043E9C();
        v30();
        uint64_t v31 = type metadata accessor for AuditToken();
        sub_1000B6E34(v31);
        uint64_t v32 = (void *)swift_task_alloc();
        v2[80] = v32;
        *uint64_t v32 = v2;
        v32[1] = sub_10009E46C;
        sub_10003069C();
        sub_1000B7420();
        return sub_10009690C();
      }
      else
      {
        (*(void (**)(void, void, void))(v2[60] + 104))(v2[62], *((unsigned int *)v2 + 168), v2[59]);
        os_log_type_t v27 = (void *)swift_task_alloc();
        v2[78] = v27;
        *os_log_type_t v27 = v2;
        v27[1] = sub_10009D434;
        sub_1000B7634();
        sub_1000B7420();
        return sub_10008F160();
      }
    }
    __break(1u);
  }
  else
  {
    v2[82] = 0;
    swift_bridgeObjectRelease();
    uint64_t v34 = (void *)Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (sub_1000579B0(v35))
    {
      uint64_t v36 = (_WORD *)sub_10005A928();
      sub_1000B8B1C(v36);
      sub_1000BA1B8((void *)&_mh_execute_header, v37, v38, "Finished purging inactive assets");
      sub_10000ED7C();
    }
    uint64_t v39 = v2[72];
    uint64_t v40 = v2[45];

    uint64_t v26 = v2[45];
    if (*(unsigned char *)(v40 + v39) == 1)
    {
      swift_retain();
      uint64_t v41 = (void *)swift_task_alloc();
      v2[83] = v41;
      *uint64_t v41 = v2;
      v41[1] = sub_10009F4D8;
      sub_1000B7420();
      __asm { BR              X0 }
    }
  }
  if ((*(void *)(v26 + 120) & 0xC000000000000001) != 0)
  {
    v163 = _swiftEmptySetSingleton;
    sub_10002FC78();
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    uint64_t v44 = sub_1000B9DB0();
    if (!v44) {
      goto LABEL_66;
    }
    uint64_t v45 = v44;
    uint64_t v157 = (uint64_t)(v2 + 33);
    uint64_t v159 = (uint64_t)(v2 + 31);
    uint64_t v142 = (uint64_t)(v2 + 35);
    uint64_t v143 = (uint64_t)(v2 + 29);
    uint64_t v155 = (uint64_t)(v2 + 37);
    uint64_t v161 = v2[49];
    uint64_t v151 = sub_1000B7704();
    uint64_t v148 = (uint64_t)(v2 + 20);
    uint64_t v149 = &type metadata for Swift.AnyObject[8];
    uint64_t v147 = (uint64_t)(v2 + 38);
LABEL_36:
    v2[37] = v45;
    swift_dynamicCast();
    sub_100043F38();
    sub_100043E9C();
    v46();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    sub_1000B9494();
    sub_1000B9494();
    BOOL v47 = v2[33] == v2[31] && v2[34] == v2[32];
    if (v47)
    {
      swift_bridgeObjectRelease_n();
      sub_1000BA434();
      sub_1000BA0DC();
      v55();
    }
    else
    {
      LODWORD(v144) = sub_1000B9CE0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000BA434();
      sub_100030274();
      v48();
      if ((v144 & 1) == 0)
      {
        sub_1000B93A8();
        sub_1000B9494();
        uint64_t v49 = v2[55];
        uint64_t v50 = v2[51];
        if (v2[29] != v2[35] || v2[30] != v2[36])
        {
          uint64_t v144 = v2[50];
          char v52 = sub_1000B8A70();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v53 = (uint64_t)v145;
          uint64_t v54 = *v145;
          sub_100030420();
          v54();
          sub_1000B5E7C(v50, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_1000BA7AC();
          sub_100030420();
          v54();
          sub_1000B5E24();
          if ((v52 & 1) == 0)
          {
            sub_1000B5E7C(v2[50], (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_endAccess();
LABEL_51:
            swift_release();
            goto LABEL_63;
          }
LABEL_50:
          sub_1000B7F70();
          sub_1000B5E7C(v59, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_endAccess();
          if (v49) {
            goto LABEL_51;
          }
          sub_1000B8D78();
          if (!(!v47 & v68)) {
            sub_1000230F4(v67 + 1, v60, v61, v62, v63, v64, v65, v66, v142, v143, v144, (char)v145, v146, v147, v148, (uint64_t)v149, v151, v153, v154,
          }
              v155,
              v157,
              v159,
              (uint64_t)v160,
              v161,
              (uint64_t)v163,
              v164[0],
              v164[1],
              v164[2],
              v164[3],
              v164[4],
              v164[5],
              v164[6]);
          Hasher.init(_seed:)();
          sub_1000C95D4();
          Hasher._finalize()();
          sub_1000B6DC0();
          if (!v47)
          {
            sub_1000B6F10();
            goto LABEL_62;
          }
          sub_1000B6EFC();
          while (1)
          {
            sub_1000B7778();
            if (v47 && (v70 & 1) != 0) {
              break;
            }
            sub_1000B77F4();
            sub_1000B6FC8();
            if (!v47)
            {
              sub_1000B6EE8();
LABEL_62:
              sub_1000B73EC(v69);
LABEL_63:
              uint64_t v45 = __CocoaSet.Iterator.next()();
              if (!v45)
              {
LABEL_66:
                swift_release_n();
                swift_release();
                uint64_t v71 = v2[82];
                goto LABEL_68;
              }
              goto LABEL_36;
            }
          }
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        swift_bridgeObjectRelease_n();
        uint64_t v53 = (uint64_t)*v145;
        sub_100043924();
        ((void (*)(void))v53)();
        sub_1000B5E7C(v50, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_100043924();
        ((void (*)(void))v53)();
LABEL_49:
        sub_1000B5E24();
        goto LABEL_50;
      }
    }
    uint64_t v49 = v2[55];
    uint64_t v53 = v2[52];
    uint64_t v56 = v2[51];
    uint64_t v57 = *v145;
    sub_100043DF8();
    v57();
    sub_1000B5E7C(v56, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v58 = sub_1000B95D8();
    ((void (*)(uint64_t))v57)(v58);
    goto LABEL_49;
  }
  uint64_t v71 = v2[82];
  swift_retain();
  uint64_t v72 = swift_bridgeObjectRetain();
  sub_1000BA1D8(v72, v73, (uint64_t)sub_1000765E8);
LABEL_68:
  uint64_t v74 = swift_bridgeObjectRetain();
  uint64_t v75 = sub_100116B88(v74);
  swift_release();
  v164[0] = (uint64_t)v75;
  sub_1000B10DC(v164, (uint64_t (*)(uint64_t, uint64_t))sub_100076794);
  if (!v71)
  {
    uint64_t v160 = v2;
    swift_release();
    uint64_t v53 = v164[0];
    if ((v164[0] & 0x8000000000000000) == 0 && (v164[0] & 0x4000000000000000) == 0)
    {
      if (!*(void *)(v164[0] + 16))
      {
LABEL_99:
        swift_release();
        uint64_t v133 = (void *)Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.default.getter();
        if (sub_1000443B0(v134))
        {
          uint64_t v135 = (_WORD *)sub_10005A928();
          sub_1000B8B1C(v135);
          sub_1000B78A8((void *)&_mh_execute_header, v136, v137, "No more inactive assets need purging");
          sub_10000ED7C();
        }
        uint64_t v138 = v160[64];

        long long v139 = *(void (**)(void))(v138 + 8);
        sub_100043DF8();
        v139();
        sub_100043DF8();
        v139();
        uint64_t v101 = sub_1000BA608();
        goto LABEL_102;
      }
LABEL_75:
      uint64_t v77 = sub_1000A1BA8(v53);
      uint64_t v53 = v78;
      uint64_t v79 = (void (*)(void))v160[42];
      uint64_t v80 = swift_bridgeObjectRetain();
      uint64_t v152 = sub_1000B38C8(v80, v77, v53);
      uint64_t v82 = v81;
      swift_bridgeObjectRelease();
      uint64_t v150 = v82;
      uint64_t v156 = *(void *)(v82 + 16);
      if (v156)
      {
        uint64_t v83 = v160[64];
        sub_100006960(v160[48], 1, 1, v160[63]);
        uint64_t v158 = (void (**)(void))(v83 + 16);
        swift_retain();
        uint64_t v84 = swift_retain();
        unint64_t v85 = 0;
        while (1)
        {
          if (v85 >= *(void *)(v84 + 16)) {
            goto LABEL_97;
          }
          uint64_t v86 = v84;
          sub_100043D2C();
          uint64_t v87 = *v158;
          sub_100069DF4();
          v87();
          swift_retain();
          static Date.+ infix(_:_:)();
          sub_100044648();
          uint64_t v89 = v88;
          sub_100043924();
          v90();
          uint64_t v53 = static Date.> infix(_:_:)();
          swift_release();
          uint64_t v91 = v160[67];
          if (v53) {
            break;
          }
          ++v85;
          sub_100043924();
          v89();
          uint64_t v84 = v86;
          if (v156 == v85)
          {
            uint64_t v162 = v89;
            swift_release();
            swift_release();
            goto LABEL_85;
          }
        }
        uint64_t v162 = v89;
        uint64_t v105 = v160[63];
        uint64_t v106 = v160[64];
        uint64_t v107 = v160[48];
        swift_release();
        swift_release();
        sub_100042EDC(v107, &qword_10015DAE0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v107, v91, v105);
        sub_1000B7E68(v107);
LABEL_85:
        uint64_t v108 = v160[63];
        uint64_t v109 = v160[47];
        sub_1000BA08C();
        sub_1000B65F0(v110, v111, v112);
        int v113 = sub_100006AE8(v109, 1, v108);
        sub_100042EDC(v109, &qword_10015DAE0);
        if (v113 == 1)
        {
          sub_1000B99FC();
          swift_retain_n();
          uint64_t v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.fault.getter();
          if (sub_100044424(v115))
          {
            uint64_t v116 = (_DWORD *)sub_100030314();
            v164[0] = sub_10002FF90();
            *uint64_t v116 = 136315138;
            swift_retain();
            swift_retain();
            uint64_t v117 = sub_1000B5860(v152, v150);
            unint64_t v119 = v118;
            swift_release();
            swift_release();
            v160[41] = sub_10001DF20(v117, v119, v164);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            sub_1000B7784();
            swift_bridgeObjectRelease();
            sub_1000B86D0((void *)&_mh_execute_header, v114, OS_LOG_TYPE_INFO, "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task");
            sub_1000B87DC();
            sub_10000ED7C();
            sub_10000ED7C();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release_n();
            sub_1000B9A14();
          }

          sub_10004381C();
          v127();
          sub_10004381C();
          v128();
        }
        else
        {
          sub_100008678();
          sub_10002FE18();
          sub_100069DF4();
          v120();
          sub_100069DF4();
          v87();
          uint64_t v121 = Logger.logObject.getter();
          os_log_type_t v122 = static os_log_type_t.default.getter();
          if (sub_1000B9788(v122))
          {
            uint64_t v123 = v160[48];
            uint64_t v124 = v160[46];
            *(_DWORD *)sub_100030314() = 134217984;
            sub_100043D2C();
            sub_1000B65F0(v123, v124, &qword_10015DAE0);
            sub_1000B7230(v124);
            if (v47)
            {
              uint64_t result = sub_100042EDC(v160[48], &qword_10015DAE0);
              __break(1u);
              return result;
            }
            Date.timeIntervalSince(_:)();
            uint64_t v126 = v125;
            sub_10003056C();
            v162();
            v160[40] = v126;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10003056C();
            v162();
            sub_1000B7EE4((void *)&_mh_execute_header, v121, v122, "Additional inactive assets need purging, next task wake in %f seconds");
            sub_10000ED7C();
          }
          else
          {

            uint64_t v129 = sub_1000B95D8();
            ((void (*)(uint64_t))v162)(v129);
          }
          swift_release();
          swift_release();
          sub_100043CF4();
          v130();
          sub_10003056C();
          v162();
          sub_10003056C();
          v162();
          swift_task_dealloc();
        }
        uint64_t v131 = v160[48];
        sub_100043D2C();
        sub_1000B96B4(v131);
        sub_1000B95C0();
LABEL_103:
        sub_1000B7D20();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_10000EF7C();
        sub_1000B7420();
        __asm { BRAA            X1, X16 }
      }
      uint64_t v92 = (void *)Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      if (sub_1000B9E14(v93))
      {
        uint64_t v94 = (_DWORD *)sub_100030314();
        v164[0] = sub_10002FF90();
        *uint64_t v94 = 136315138;
        sub_100043D2C();
        type metadata accessor for InferenceProviderAsset(0);
        sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
        swift_bridgeObjectRetain();
        uint64_t v79 = (void (*)(void))Set.description.getter();
        unint64_t v96 = v95;
        swift_bridgeObjectRelease();
        v160[39] = sub_10001DF20((uint64_t)v79, v96, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000BA0A4();
        sub_1000B72C4(v97, v98, v99, v100);
        sub_1000436BC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      swift_release();

      swift_release();
      sub_1000B9A68();
      sub_1000303D4();
      v79();
      ((void (*)(void, void))v79)(v160[68], v160[63]);
      sub_1000B7A1C();
LABEL_102:
      sub_100006960(v101, v102, v103, v104);
      goto LABEL_103;
    }
LABEL_98:
    swift_retain();
    uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v132) {
      goto LABEL_99;
    }
    goto LABEL_75;
  }
  sub_1000B7420();
  return swift_release();
}

uint64_t sub_10009D434()
{
  sub_100030014();
  sub_10000F01C();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 632) = v0;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v4 = sub_1000B6DE0();
  v5(v4);
  sub_10000F0B4();
  sub_10002FE64();
  return _swift_task_switch(v6, v7, v8);
}

#error "10009D644: call analysis failed (funcsize=916)"

uint64_t sub_10009E46C()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  sub_10000ED94();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 648) = v1;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 464);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

#error "10009E6B0: call analysis failed (funcsize=916)"

uint64_t sub_10009F4D8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10009F5BC()
{
  uint64_t v124 = v0;
  uint64_t v2 = v0[45];
  if ((*(void *)(v2 + 120) & 0xC000000000000001) == 0)
  {
    uint64_t v34 = v0[82];
    swift_retain();
    uint64_t v35 = swift_bridgeObjectRetain();
    sub_1000ADE5C(v35, v2, (uint64_t)sub_1000765E8, 0);
    goto LABEL_36;
  }
  os_log_type_t v122 = _swiftEmptySetSingleton;
  sub_1000B9954();
  sub_1000B87C4();
  swift_bridgeObjectRetain();
  uint64_t v117 = __CocoaSet.makeIterator()();
  uint64_t v3 = __CocoaSet.Iterator.next()();
  if (!v3) {
    goto LABEL_35;
  }
  uint64_t v4 = v3;
  uint64_t v114 = (uint64_t)(v0 + 33);
  uint64_t v115 = (uint64_t)(v0 + 31);
  uint64_t v102 = (uint64_t)(v0 + 35);
  uint64_t v103 = (uint64_t)(v0 + 29);
  uint64_t v113 = (uint64_t)(v0 + 37);
  uint64_t v5 = v0[53];
  uint64_t v120 = v0[49];
  LODWORD(v111) = enum case for LoadState.loaded(_:);
  uint64_t v109 = v5 + 16;
  uint64_t v110 = v5 + 104;
  uint64_t v104 = (void (**)(void))(v5 + 8);
  uint64_t v108 = type metadata accessor for InferenceProviderAsset(0);
  unint64_t v119 = _swiftEmptySetSingleton;
  uint64_t v106 = (uint64_t)(v0 + 20);
  uint64_t v107 = &type metadata for Swift.AnyObject[8];
  uint64_t v105 = v0 + 38;
  do
  {
    v0[37] = v4;
    swift_dynamicCast();
    sub_1000BA428();
    sub_100043F38();
    sub_100043E9C();
    v6();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    sub_1000B7470();
    sub_1000B7470();
    uint64_t v1 = v0[52];
    BOOL v7 = v0[33] == v0[31] && v0[34] == v0[32];
    if (v7)
    {
      swift_bridgeObjectRelease_n();
      sub_1000B5E24();
      sub_1000BA0DC();
      v14();
LABEL_16:
      uint64_t v10 = v0[55];
      uint64_t v13 = v0[51];
      uint64_t v15 = *v104;
      sub_100043DF8();
      v15();
      sub_1000B5E7C(v13, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v16 = sub_100043EDC();
      ((void (*)(uint64_t))v15)(v16);
      goto LABEL_17;
    }
    char v8 = sub_1000B9CE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B5E24();
    sub_100030274();
    v9();
    if (v8) {
      goto LABEL_16;
    }
    sub_1000B93A8();
    sub_1000B9494();
    uint64_t v10 = v0[55];
    uint64_t v1 = v0[51];
    if (v0[29] != v0[35] || v0[30] != v0[36])
    {
      char v12 = sub_1000B8A70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = (uint64_t)*v104;
      sub_100043924();
      ((void (*)(void))v13)();
      sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_100043924();
      ((void (*)(void))v13)();
      sub_1000BA428();
      sub_1000B5E24();
      if ((v12 & 1) == 0)
      {
        sub_1000B5E7C(v0[50], (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_endAccess();
LABEL_19:
        swift_release();
        goto LABEL_31;
      }
      goto LABEL_18;
    }
    swift_bridgeObjectRelease_n();
    uint64_t v13 = (uint64_t)v104;
    uint64_t v33 = *v104;
    sub_100043FA8();
    v33();
    sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_1000BA7AC();
    sub_100043FA8();
    v33();
LABEL_17:
    sub_1000B5E24();
LABEL_18:
    sub_1000B7F70();
    sub_1000B5E7C(v17, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    swift_endAccess();
    if (v10) {
      goto LABEL_19;
    }
    uint64_t v18 = *v105;
    sub_1000B8A34();
    if (!(!v7 & v28))
    {
      sub_1000230F4(v26 + 1, v19, v20, v21, v22, v23, v24, v25, v102, v103, (uint64_t)v104, (char)v105, v106, (uint64_t)v107, v108, v109, v110, v111, v113,
        v114,
        v115,
        v117,
        (uint64_t)v119,
        v120,
        (uint64_t)v122,
        v123[0],
        v123[1],
        v123[2],
        v123[3],
        v123[4],
        v123[5],
        v123[6]);
      os_log_type_t v27 = v122;
    }
    unint64_t v119 = v27;
    Hasher.init(_seed:)();
    sub_1000C95D4();
    Hasher._finalize()();
    sub_1000B6DC0();
    if (!v7)
    {
      sub_1000B6F10();
      goto LABEL_30;
    }
    sub_1000B6EFC();
    do
    {
      sub_1000B7778();
      if (v7 && (v32 & 1) != 0)
      {
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      sub_1000B77F4();
      sub_1000B6FC8();
    }
    while (v7);
    sub_1000B6EE8();
LABEL_30:
    *(void *)(v29 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    *(void *)(*(void *)(v31 + 48) + 8 * v30) = v18;
    sub_1000B7A0C();
LABEL_31:
    uint64_t v4 = __CocoaSet.Iterator.next()();
  }
  while (v4);
LABEL_35:
  swift_release();
  sub_100043604();
  uint64_t v34 = v0[82];
LABEL_36:
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = sub_100116B88(v36);
  swift_release();
  v123[0] = (uint64_t)v37;
  sub_1000B10DC(v123, (uint64_t (*)(uint64_t, uint64_t))sub_100076794);
  if (!v34)
  {
    swift_release();
    uint64_t v13 = v123[0];
    if ((v123[0] & 0x8000000000000000) == 0 && (v123[0] & 0x4000000000000000) == 0)
    {
      if (*(void *)(v123[0] + 16))
      {
LABEL_43:
        uint64_t v40 = sub_1000A1BA8(v13);
        uint64_t v42 = v41;
        uint64_t v43 = swift_bridgeObjectRetain();
        uint64_t v44 = sub_1000B38C8(v43, v40, v42);
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        uint64_t v116 = *(void *)(v46 + 16);
        uint64_t v112 = v44;
        if (v116)
        {
          uint64_t v109 = (uint64_t)(v0 + 17);
          uint64_t v106 = (uint64_t)(v0 + 23);
          uint64_t v107 = (char *)(v0 + 41);
          uint64_t v47 = v0[64];
          uint64_t v113 = v0[49];
          sub_100006960(v0[48], 1, 1, v0[63]);
          unint64_t v118 = (void (**)(void))(v47 + 16);
          uint64_t v48 = (void (**)(void))(v47 + 8);
          swift_retain();
          swift_retain();
          unint64_t v49 = 0;
          uint64_t v121 = v46;
          while (1)
          {
            if (v49 >= *(void *)(v46 + 16)) {
              goto LABEL_66;
            }
            uint64_t v1 = v0[63];
            sub_100043D2C();
            uint64_t v50 = *v118;
            sub_100069DF4();
            v50();
            swift_retain();
            static Date.+ infix(_:_:)();
            uint64_t v51 = *v48;
            sub_100044648();
            sub_1000303D4();
            v51();
            sub_1000BA5FC();
            uint64_t v13 = static Date.> infix(_:_:)();
            swift_release();
            if (v13) {
              break;
            }
            ++v49;
            sub_1000303D4();
            v51();
            uint64_t v46 = v121;
            if (v116 == v49)
            {
              swift_release();
              swift_release();
              goto LABEL_52;
            }
          }
          unint64_t v49 = v0[63];
          uint64_t v13 = v0[48];
          swift_release();
          uint64_t v46 = v121;
          swift_release();
          sub_100042EDC(v13, &qword_10015DAE0);
          uint64_t v69 = sub_10004468C();
          v70(v69);
          sub_1000B7E68(v13);
LABEL_52:
          uint64_t v71 = sub_1000BA140();
          sub_1000BA3D8(v71);
          int v72 = sub_100006AE8(v13, 1, v49);
          sub_100042EDC(v13, &qword_10015DAE0);
          if (v72 == 1)
          {
            swift_retain_n();
            sub_1000B9B60();
            uint64_t v73 = Logger.logObject.getter();
            os_log_type_t v74 = static os_log_type_t.fault.getter();
            if (sub_1000B7F2C(v74))
            {
              uint64_t v75 = v46;
              uint64_t v76 = (_DWORD *)sub_100030314();
              v123[0] = sub_10002FF90();
              _DWORD *v76 = 136315138;
              swift_retain();
              swift_retain();
              uint64_t v77 = sub_1000B5860(v112, v75);
              unint64_t v79 = v78;
              swift_release();
              swift_release();
              *(void *)uint64_t v107 = sub_10001DF20(v77, v79, v123);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1000B72DC();
              sub_10000F050();
              sub_1000B86D0((void *)&_mh_execute_header, v73, (os_log_type_t)&qword_10015DAE0, "Remaining purge candidates %s generated task wake times in the past.  Ending inactive asset purge task");
              sub_100043EE8();
              sub_10000ED7C();
              sub_10000ED7C();

              swift_release();
              swift_release();
            }
            else
            {

              swift_release_n();
              swift_release_n();
              sub_100043EDC();
            }
            sub_10003056C();
            v51();
            sub_10003056C();
            v51();
          }
          else
          {
            sub_100008678();
            sub_10002FE18();
            sub_100069DF4();
            v80();
            sub_100069DF4();
            v50();
            uint64_t v81 = Logger.logObject.getter();
            os_log_type_t v82 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v81, v82))
            {
              uint64_t v83 = v0[46];
              *(_DWORD *)sub_100030314() = 134217984;
              uint64_t v84 = sub_100043D2C();
              sub_1000B9C0C(v84, v85, &qword_10015DAE0);
              sub_1000B7230(v83);
              if (v7)
              {
                uint64_t result = sub_100042EDC(v0[48], &qword_10015DAE0);
                __break(1u);
                return result;
              }
              Date.timeIntervalSince(_:)();
              uint64_t v87 = v86;
              sub_100043F00();
              v51();
              v0[40] = v87;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              sub_100043F00();
              v51();
              sub_1000B7EE4((void *)&_mh_execute_header, v81, v82, "Additional inactive assets need purging, next task wake in %f seconds");
              sub_10000ED7C();
            }
            else
            {

              sub_100057ECC();
              sub_100043F00();
              v51();
            }
            swift_release();
            swift_release();
            sub_100043AE0();
            v93();
            sub_100043F00();
            v51();
            sub_100044468();
            sub_100043F00();
            v51();
            swift_task_dealloc();
          }
          sub_100043D2C();
          sub_1000B7A64();
          sub_1000B8B04();
LABEL_72:
          sub_1000B7D20();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_10000EF7C();
          sub_1000B7420();
          __asm { BRAA            X1, X16 }
        }
        char v52 = (void *)Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (sub_1000B9E14(v53))
        {
          uint64_t v54 = (_DWORD *)sub_100030314();
          v123[0] = sub_10002FF90();
          *uint64_t v54 = 136315138;
          sub_10004468C();
          sub_100043D2C();
          type metadata accessor for InferenceProviderAsset(0);
          sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
          swift_bridgeObjectRetain();
          uint64_t v13 = Set.description.getter();
          unint64_t v56 = v55;
          swift_bridgeObjectRelease();
          uint64_t v57 = sub_10001DF20(v13, v56, v123);
          sub_1000B971C(v57, v58, v59, v60, v61, v62, v63, v64, v102, v103, (uint64_t)v104, (uint64_t)v105, v106, (uint64_t)v107, (uint64_t)(v0 + 40), v109, (uint64_t)(v0 + 42), v44, v113,
            (uint64_t)(v54 + 1),
            v0 + 39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000BA0A4();
          sub_1000B9704(v65, v66, v67, v68);
          sub_1000436BC();
          sub_10000ED7C();
          sub_10000ED7C();

          swift_release();
          swift_release();
          sub_1000B9A68();
        }
        else
        {

          swift_release();
          swift_release();
          sub_1000B9A68();
          sub_1000443CC();
        }
        sub_1000303D4();
        ((void (*)(void))v13)();
        uint64_t v88 = sub_1000B8230();
        ((void (*)(uint64_t))v13)(v88);
        sub_1000B7A1C();
LABEL_71:
        sub_100006960(v89, v90, v91, v92);
        goto LABEL_72;
      }
LABEL_68:
      swift_release();
      Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v95))
      {
        unint64_t v96 = (_WORD *)sub_10005A928();
        sub_100069CF8(v96);
        sub_10005A960((void *)&_mh_execute_header, v97, v98, "No more inactive assets need purging");
        sub_10000ED7C();
      }
      sub_1000B825C();
      os_log_type_t v99 = *(void (**)(void))(v1 + 8);
      sub_1000B705C();
      v99();
      sub_1000B705C();
      v99();
      uint64_t v89 = sub_1000B7944();
      goto LABEL_71;
    }
LABEL_67:
    swift_retain();
    uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v94) {
      goto LABEL_43;
    }
    goto LABEL_68;
  }
  sub_1000B7420();
  return swift_release();
}

#error "1000A0524: call analysis failed (funcsize=918)"

void sub_1000A134C()
{
  uint64_t v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask;
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_purgeInactiveAssetsTask))
  {
    swift_retain();
    char isCancelled = swift_task_isCancelled();
    swift_release();
    *(void *)(v0 + v1) = 0;
    swift_release();
    if ((isCancelled & 1) == 0)
    {
      sub_100075FD0();
      uint64_t v4 = v3 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      if (v4)
      {
        sub_10007A394();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A1408(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  BOOL v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = sub_1000BB628();
  sub_1000B5E24();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a2, v3);
  if (v12)
  {
    sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
    char v13 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
  }
  else
  {
    char v13 = 0;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_1000B5E7C((uint64_t)v11, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v13 & 1;
}

void sub_1000A15F0()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  type metadata accessor for InferenceProviderDescriptor();
  sub_100008678();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_1000B9324();
  __chkstk_darwin(v6, v7);
  sub_1000B97E8();
  uint64_t v8 = sub_1000B4020();
  uint64_t v9 = sub_1000B2950(&v35, v1, 0, 1, v8);
  unint64_t v10 = *(void *)(v1 + 16);
  unint64_t v11 = v35;
  if (v35 == v10) {
    goto LABEL_17;
  }
  if ((v35 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (v10 >= v35)
  {
    unint64_t v34 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    swift_bridgeObjectRetain();
    sub_10002FB10();
    uint64_t v16 = sub_1000B349C(v12, v13, v14, (2 * v11) | 1, v15);
    uint64_t v36 = v9;
    uint64_t v37 = v16;
    uint64_t v17 = sub_100044784();
    sub_100118574(v17, v18);
    if (v19 == v20 >> 1)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
LABEL_17:
      sub_10002FAC4();
      return;
    }
    uint64_t v21 = v19;
    int64_t v22 = v20 >> 1;
    swift_retain();
    uint64_t v32 = v22;
    uint64_t v33 = v3;
    while (1)
    {
      if (v21 >= v22)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
      uint64_t v23 = *(void *)(v3 + 72);
      uint64_t v24 = *(void (**)(void))(v3 + 16);
      sub_100069DF4();
      v24();
      uint64_t v25 = (char *)v37 + v34;
      uint64_t v26 = v37[2];
      if (v36)
      {
        swift_retain();
        sub_1001187B4();
        char v28 = v27;
        swift_release();
        if ((v28 & 1) == 0) {
          goto LABEL_15;
        }
      }
      else if (v26)
      {
        do
        {
          sub_1000BA08C();
          sub_100069DF4();
          v24();
          sub_1000B5280(&qword_10015DC20, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          sub_100044648();
          char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_100057FE4();
          v30();
          if (v29) {
            goto LABEL_15;
          }
          v25 += v23;
        }
        while (--v26);
      }
      sub_1001194AC();
LABEL_15:
      ++v21;
      sub_100057FE4();
      v31();
      int64_t v22 = v32;
      uint64_t v3 = v33;
      if (v21 == v32)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_17;
      }
    }
  }
  __break(1u);
}

void sub_1000A18C4(uint64_t a1)
{
  uint64_t v2 = sub_1000B4020();
  sub_1000B2E14(&v39, a1, 0, 1, v2);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v39;
  if (v39 != v5)
  {
    if ((v39 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    if (v5 < v39)
    {
LABEL_40:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain();
    sub_10002FB10();
    unint64_t v11 = sub_1000B349C(v7, v8, v9, (2 * v6) | 1, v10);
    uint64_t v40 = v4;
    uint64_t v41 = v11;
    uint64_t v12 = sub_100044784();
    sub_1001185F0(v12, v13);
    uint64_t v36 = v16;
    if (v14 == v15 >> 1)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v17 = v14;
    int64_t v18 = v15 >> 1;
    swift_retain();
    uint64_t v19 = v36;
    uint64_t v37 = v18;
LABEL_7:
    if (v17 >= v18)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v20 = v19 + 40 * v17;
    long long v21 = *(_OWORD *)v20;
    long long v22 = *(_OWORD *)(v20 + 16);
    unsigned __int8 v44 = *(unsigned char *)(v20 + 32);
    long long v42 = v21;
    long long v43 = v22;
    long long v45 = *(_OWORD *)v20;
    uint64_t v23 = *((void *)&v22 + 1);
    uint64_t v24 = v11[2];
    if (v40)
    {
      sub_1000B6B28((uint64_t)&v45);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1001189D0();
      char v26 = v25;
      swift_release();
      if ((v26 & 1) == 0)
      {
        sub_1000B6B54((uint64_t)&v45);
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    if (!v24)
    {
LABEL_31:
      sub_1000B6B28((uint64_t)&v45);
      swift_bridgeObjectRetain();
      uint64_t v19 = v36;
LABEL_32:
      int64_t v18 = v37;
      sub_1001196A8(&v42);
      sub_1000B6B54((uint64_t)&v45);
      swift_bridgeObjectRelease();
      unint64_t v11 = v41;
      goto LABEL_35;
    }
    uint64_t v27 = v43;
    long long v28 = v45;
    unint64_t v35 = v11;
    char v29 = (unsigned __int8 *)(v11 + 8);
    int v38 = v44;
    while (1)
    {
      uint64_t v31 = *((void *)v29 - 2);
      uint64_t v30 = *((void *)v29 - 1);
      int v32 = *v29;
      BOOL v33 = *((void *)v29 - 4) == (void)v28 && *((void *)v29 - 3) == *((void *)&v28 + 1);
      if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_30;
      }
      if (!v30) {
        break;
      }
      if (!v23) {
        goto LABEL_30;
      }
      if (v31 != v27 || v30 != v23)
      {
        sub_100069E00();
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_30;
        }
LABEL_27:
        if (((v32 ^ v38) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      if (v32 == (v38 & 1))
      {
LABEL_33:
        unint64_t v11 = v35;
        uint64_t v19 = v36;
LABEL_34:
        int64_t v18 = v37;
LABEL_35:
        if (++v17 == v18)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return;
        }
        goto LABEL_7;
      }
LABEL_30:
      v29 += 40;
      if (!--v24) {
        goto LABEL_31;
      }
    }
    if (v23) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
}

uint64_t sub_1000A1BA8(unint64_t a1)
{
  uint64_t v2 = (unint64_t *)sub_1000B4020();
  uint64_t result = sub_1000B3090(&v29, a1, 0, 1, v2);
  uint64_t v4 = result;
  unint64_t v5 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v29;
    if (v29 == v6)
    {
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      return v4;
    }
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v29 & 0x8000000000000000) == 0)
    {
LABEL_6:
      if (v8 >= v7)
      {
        if ((a1 & 0xC000000000000001) != 0 && v7)
        {
          type metadata accessor for InferenceProviderAsset(0);
          Swift::Int v9 = 0;
          do
          {
            Swift::Int v10 = v9 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v9);
            Swift::Int v9 = v10;
          }
          while (v7 != v10);
        }
        if (v5)
        {
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v12 = v15;
          uint64_t v14 = v16;
          unint64_t v13 = v17;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
          uint64_t v12 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v13 = (2 * v7) | 1;
          swift_bridgeObjectRetain();
          uint64_t v14 = 0;
        }
        uint64_t result = (uint64_t)sub_1000B349C(v11, v12, v14, v13, (uint64_t (*)(uint64_t))sub_1001171AC);
        uint64_t v30 = v4;
        uint64_t v31 = result;
        if (v6 >= v7)
        {
          if (v5)
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t result = swift_retain();
          }
          if (v18 >= v6)
          {
            if ((a1 & 0xC000000000000001) == 0) {
              goto LABEL_23;
            }
            if (v7 < v6)
            {
              type metadata accessor for InferenceProviderAsset(0);
              Swift::Int v19 = v7;
              do
              {
                Swift::Int v20 = v19 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v19);
                Swift::Int v19 = v20;
              }
              while (v6 != v20);
LABEL_23:
              if (v5)
              {
                swift_bridgeObjectRetain();
                uint64_t v21 = _CocoaArrayWrapper.subscript.getter();
                uint64_t v22 = v24;
                uint64_t v7 = v25;
                unint64_t v23 = v26;
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8;
                uint64_t v22 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
                unint64_t v23 = (2 * v6) | 1;
                swift_bridgeObjectRetain();
              }
              sub_1000B3590(v21, v22, v7, v23);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              return v30;
            }
            goto LABEL_37;
          }
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = v29;
  if (v29 == v6)
  {
    uint64_t v27 = swift_bridgeObjectRetain();
    sub_100117074(v27);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  if (v29 < 0) {
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v28 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000A1EE4()
{
  sub_100076CC0();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_15;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        sub_1000BA7D0();
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v4 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      if ((*(unsigned char *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) & 1) != 0
        || (*(unsigned char *)(v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) & 1) == 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000A2034(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000B5E24();
  uint64_t v19 = *(int *)(v4 + 32);
  uint64_t v18 = *(int *)(v4 + 36);
  uint64_t v28 = v4;
  Swift::Int v20 = &v7[v18];
  uint64_t v21 = &v7[v19];
  sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v20;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v22, v8);
  sub_1000B5E7C((uint64_t)v7, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  swift_beginAccess();
  type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  static Date.+ infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v13, v8);
  char v24 = dispatch thunk of static Comparable.< infix(_:_:)();
  v23(v16, v8);
  if (v24) {
    char v25 = *(unsigned char *)(v17 + *(int *)(v28 + 24)) ^ 1;
  }
  else {
    char v25 = 1;
  }
  return v25 & 1;
}

uint64_t sub_1000A22F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  sub_100003A70(&qword_10015DAE0);
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000A24C0, 0, 0);
}

uint64_t sub_1000A24C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_1000B8BCC();
  v10[24] = _OSActivity.__allocating_init(_:)();
  sub_100043D2C();
  uint64_t v11 = sub_1000B83B8();
  v10[25] = v11;
  if (v11)
  {
    uint64_t v12 = swift_task_alloc();
    unint64_t v13 = (void *)sub_1000B77C0(v12);
    *unint64_t v13 = v14;
    v13[1] = sub_1000A26E8;
    sub_1000B84AC();
    sub_10002FE94();
    return sub_1000A2F40();
  }
  else
  {
    uint64_t v17 = sub_1000B70D4();
    sub_100042EDC(v17, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v10[32] = Strong;
    if (Strong)
    {
      sub_10002FE94();
      return _swift_task_switch(v19, v20, v21);
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100057A88(v23, (uint64_t)qword_10015D5A0);
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v24))
      {
        char v25 = (_WORD *)sub_10005A928();
        sub_100069CF8(v25);
        sub_10005A960((void *)&_mh_execute_header, v26, v27, "Ending task to transition assets");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_10002FE94();
      return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
    }
  }
}

uint64_t sub_1000A26E8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A27CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000B90C4();
  sub_1000306E0();
  sub_1000B8AC4();
  if (v18)
  {
    sub_100042EDC(v15, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v16[32] = Strong;
    if (Strong)
    {
      sub_1000B70B4();
      return _swift_task_switch(v20, v21, v22);
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100057A88(v38, (uint64_t)qword_10015D5A0);
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v39))
      {
        uint64_t v40 = (_WORD *)sub_10005A928();
        sub_100069CF8(v40);
        sub_10005A960((void *)&_mh_execute_header, v41, v42, "Ending task to transition assets");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000B70B4();
      return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
    }
  }
  else
  {
    uint64_t v24 = sub_1000B7374();
    v25(v24);
    static ContinuousClock.Instant.now.getter();
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    v16[27] = *(void *)(v14 + 8);
    v16[28] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_1000303D4();
    v26();
    static Duration.seconds(_:)();
    ContinuousClock.Instant.advanced(by:)();
    v16[29] = *(void *)(v17 + 8);
    v16[30] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100043AE0();
    v27();
    sub_1000B8D84((__n128)xmmword_100129950);
    uint64_t v28 = (void *)swift_task_alloc();
    v16[31] = v28;
    sub_1000B5280(&qword_10015DAF0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    sub_1000B76F8();
    *uint64_t v28 = v29;
    v28[1] = sub_1000A2A94;
    sub_1000B7824();
    sub_1000B70B4();
    return static Task<>.sleep<A>(until:tolerance:clock:)(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_1000A2A94()
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_100008660();
  uint64_t v4 = v3;
  sub_10000ED94();
  *uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_1000086D0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000B881C();
    sub_100043F00();
    v8();
    uint64_t v9 = sub_10004468C();
    v2(v9);
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t))(v4 + 232);
    sub_10004381C();
    v11();
    uint64_t v12 = sub_100057ECC();
    v10(v12);
  }
  sub_1000579A4();
  sub_10002FE94();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1000A2BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  char v12 = sub_1000B81B0();
  uint64_t v13 = sub_100043EDC();
  v11(v13);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = sub_1000B83B8();
    *(void *)(v10 + 200) = v14;
    if (v14)
    {
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = (void *)sub_1000B77C0(v15);
      *uint64_t v16 = v17;
      v16[1] = sub_1000A26E8;
      sub_1000B84AC();
      sub_10002FE94();
      return sub_1000A2F40();
    }
    uint64_t v20 = sub_1000B70D4();
    sub_100042EDC(v20, &qword_10015DAE0);
  }
  sub_100043D2C();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v10 + 256) = Strong;
  if (Strong)
  {
    sub_10002FE94();
    return _swift_task_switch(v22, v23, v24);
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100057A88(v26, (uint64_t)qword_10015D5A0);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v27))
    {
      uint64_t v28 = (_WORD *)sub_10005A928();
      sub_100069CF8(v28);
      sub_10005A960((void *)&_mh_execute_header, v29, v30, "Ending task to transition assets");
      sub_10000ED7C();
    }
    sub_1000B6E54();
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE94();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
  }
}

uint64_t sub_1000A2DC4()
{
  sub_1000086E0();
  sub_1000A5E5C();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000A2E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100057A88(v10, (uint64_t)qword_10015D5A0);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v11))
  {
    char v12 = (_WORD *)sub_10005A928();
    sub_100069CF8(v12);
    sub_10005A960((void *)&_mh_execute_header, v13, v14, "Ending task to transition assets");
    sub_10000ED7C();
  }
  sub_1000B6E54();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE94();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_1000A2F40()
{
  sub_1000086E0();
  v1[31] = v2;
  v1[32] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015DAE0);
  sub_10002FDD0(v3);
  v1[33] = sub_1000436D8();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v1[36] = State;
  sub_10002FA4C(State);
  v1[37] = v5;
  v1[38] = sub_1000436D8();
  v1[39] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v6);
  v1[40] = sub_1000436D8();
  v1[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[42] = v7;
  sub_10002FA4C(v7);
  v1[43] = v8;
  v1[44] = sub_1000436D8();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[47] = v9;
  sub_10002FDD0(v9);
  v1[48] = sub_1000436D8();
  v1[49] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v1[50] = v10;
  sub_10002FA4C(v10);
  v1[51] = v11;
  v1[52] = sub_1000436D8();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  uint64_t v12 = swift_task_alloc();
  v1[56] = sub_1000BA11C(v12);
  sub_10002FB10();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1000A3114()
{
  uint64_t v131 = v0;
  uint64_t v2 = v0;
  if (qword_10015B0C0 != -1) {
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v3 = type metadata accessor for Logger();
    v2[57] = v3;
    v2[58] = sub_100003B18(v3, (uint64_t)qword_10015D5A0);
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = sub_1000B8B64(v5);
    uint64_t v7 = v2[32];
    p_vtable = &OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine.vtable;
    uint64_t v129 = v2;
    if (v6)
    {
      *(_DWORD *)sub_100030314() = 134217984;
      uint64_t v9 = v7 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_policy;
      p_vtable = (void **)(&OBJC_METACLASS____TtC13modelmanagerd12NeuralEngine + 24);
      sub_100043D2C();
      uint64_t v10 = *(void *)(v9 + *(int *)(type metadata accessor for InferenceProviderAssetManagerPolicy(0) + 28));
      uint64_t v2 = v129;
      v129[30] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      sub_1000BA508((void *)&_mh_execute_header, v4, (os_log_type_t)v1, "Transition assets that haven't been used for at least %f seconds");
      sub_10000ED7C();
    }
    else
    {
      swift_release();
    }

    uint64_t v11 = v2[32];
    uint64_t v12 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
    v2[59] = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetsHaveUpdated;
    if (*(unsigned char *)(v11 + v12) == 1)
    {
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (sub_1000579B0(v14))
      {
        uint64_t v15 = (uint8_t *)sub_10005A928();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v11, "While transitioning assets, unloading dynamic-capable assets due to pending asset update", v15, 2u);
        sub_10000ED7C();
      }

      uint64_t v11 = v2[32];
    }
    uint64_t v16 = v2[55];
    static Date.now.getter();
    v2[29] = _swiftEmptySetSingleton;
    uint64_t v17 = p_vtable[500];
    v2[60] = v17;
    uint64_t v18 = (uint64_t)v17 + v11;
    sub_100043D2C();
    v2[61] = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
    static Date.- infix(_:_:)();
    sub_1000A1EE4();
    unint64_t v20 = v19;
    uint64_t v21 = swift_task_alloc();
    *(void *)(v21 + 16) = v16;
    uint64_t v130 = _swiftEmptyArrayStorage;
    if (v20 >> 62) {
      break;
    }
    sub_1000B9644();
    if (!v18) {
      goto LABEL_26;
    }
LABEL_11:
    unint64_t v22 = 0;
    uint64_t v125 = v21;
    unint64_t v127 = v20 & 0xC000000000000001;
    uint64_t v1 = v20 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v127)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v22 >= *(void *)(v1 + 16)) {
          goto LABEL_23;
        }
        swift_retain();
      }
      unint64_t v23 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      unint64_t v24 = v20;
      uint64_t v25 = v2[49];
      sub_100043D2C();
      sub_1000B5E24();
      sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
      sub_1000B9E58();
      char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
      sub_1000B5E7C(v25, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if (v26)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      unint64_t v20 = v24;
      ++v22;
      uint64_t v2 = v129;
      if (v23 == v18)
      {
        uint64_t v21 = v125;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once();
  }
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  if (v18) {
    goto LABEL_11;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10001720C();
  uint64_t v28 = v27;
  unint64_t v29 = (unint64_t)sub_10008D13C(v27);
  v2[62] = v29;
  swift_bridgeObjectRelease();
  if (v29 >> 62)
  {
    sub_1000B8DA4();
    _CocoaArrayWrapper.endIndex.getter();
    uint64_t v30 = sub_1000B9168();
    if (!v28) {
      goto LABEL_43;
    }
LABEL_28:
    *((_DWORD *)v2 + 138) = enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason.policyChangeBackgroundSession(_:);
    *((_DWORD *)v2 + 139) = enum case for LoadState.loaded(_:);
    v2[63] = v28 - 1;
    if (!__OFSUB__(v28, 1))
    {
      sub_1000B9C44(v30, v31, v2[62]);
      if (v21) {
        uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7958();
      }
      v2[64] = v28;
      if (*(unsigned char *)(v2[32] + v2[59]) == 1)
      {
        uint64_t v32 = v2[41];
        sub_100043E68();
        v33();
        uint64_t v34 = type metadata accessor for AuditToken();
        sub_100069D3C(v32, v35, v36, v34);
        uint64_t v37 = (void *)swift_task_alloc();
        v2[65] = v37;
        *uint64_t v37 = v2;
        v37[1] = sub_1000A41E4;
      }
      else
      {
        if (*(unsigned char *)(v28 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
        {
          sub_100043E68();
          v38();
          os_log_type_t v39 = (void *)swift_task_alloc();
          v2[66] = v39;
          *os_log_type_t v39 = v2;
          v39[1] = sub_1000A4368;
          sub_1000B7634();
          sub_1000B7974();
          return sub_10008F160();
        }
        sub_100043E68();
        v42();
        uint64_t v43 = type metadata accessor for AuditToken();
        sub_1000B6E34(v43);
        unsigned __int8 v44 = (void *)swift_task_alloc();
        v2[67] = v44;
        void *v44 = v2;
        v44[1] = sub_1000A44B8;
      }
      sub_10003069C();
      sub_1000B7974();
      return sub_10009690C();
    }
    __break(1u);
  }
  else
  {
    sub_1000B92D4();
    if (v28) {
      goto LABEL_28;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    uint64_t v46 = (void *)Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v47))
    {
      uint64_t v48 = (_WORD *)sub_10005A928();
      sub_1000B8B1C(v48);
      sub_1000B78A8((void *)&_mh_execute_header, v49, v50, "Finished transitioning assets");
      sub_10000ED7C();
    }
    uint64_t v51 = v2[59];
    uint64_t v28 = v2[32];

    if (*(unsigned char *)(v28 + v51) == 1)
    {
      sub_1000BA044(&dword_10015B8D8);
      char v52 = (void *)swift_task_alloc();
      v2[68] = v52;
      *char v52 = v2;
      v52[1] = sub_1000A463C;
      sub_1000B7974();
      __asm { BR              X0 }
    }
  }
  sub_1000A1EE4();
  unint64_t v56 = v55;
  if (v55 >> 62) {
    goto LABEL_74;
  }
  sub_1000B9644();
  if (!v28)
  {
LABEL_75:
    swift_bridgeObjectRelease();
    uint64_t v113 = (void *)Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v114))
    {
      uint64_t v115 = (_WORD *)sub_10005A928();
      sub_1000B8B1C(v115);
      sub_1000B78A8((void *)&_mh_execute_header, v116, v117, "No more assets need to be transitioned");
      sub_10000ED7C();
    }
    uint64_t v118 = v2[51];

    unint64_t v119 = *(void (**)(void))(v118 + 8);
    sub_100043DF8();
    v119();
    sub_100043DF8();
    v119();
    uint64_t v86 = sub_1000BA608();
LABEL_78:
    sub_100006960(v86, v87, v88, v89);
    goto LABEL_79;
  }
LABEL_52:
  uint64_t v57 = v2 + 28;
  uint64_t v58 = v2;
  uint64_t v59 = sub_1000A1BA8(v56);
  uint64_t v61 = v60;
  v2 += 29;
  uint64_t v62 = swift_bridgeObjectRetain();
  uint64_t v63 = sub_1000B38C8(v62, v59, v61);
  unint64_t v56 = v64;
  swift_bridgeObjectRelease();
  uint64_t v124 = *(void *)(v56 + 16);
  uint64_t v123 = v63;
  uint64_t v126 = v56;
  if (!v124)
  {
    uint64_t v71 = (void *)Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    BOOL v73 = sub_1000B9E14(v72);
    uint64_t v74 = v58[51];
    if (v73)
    {
      uint64_t v75 = (_DWORD *)sub_100030314();
      uint64_t v76 = sub_10002FF90();
      sub_1000B7AC8(v76);
      _DWORD *v75 = 136315138;
      sub_100043D2C();
      type metadata accessor for InferenceProviderAsset(0);
      sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
      swift_bridgeObjectRetain();
      sub_1000B9CFC();
      Set.description.getter();
      swift_bridgeObjectRelease();
      uint64_t v77 = sub_100030BD0();
      uint64_t v80 = sub_10001DF20(v77, v78, v79);
      sub_10004458C(v80, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000BA0A4();
      sub_1000B86D0(v81, v82, v83, v84);
      sub_1000436BC();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    swift_release();

    swift_release();
    uint64_t v85 = *(void (**)(void))(v74 + 8);
    sub_100043FA8();
    v85();
    ((void (*)(void, void))v85)(v129[55], v129[50]);
    sub_1000B7A1C();
    goto LABEL_78;
  }
  uint64_t v65 = v58[51];
  os_log_type_t v122 = v58 + 27;
  sub_100006960(v58[35], 1, 1, v58[50]);
  swift_retain();
  swift_retain();
  unint64_t v66 = 0;
  while (1)
  {
    if (v66 >= *(void *)(v56 + 16))
    {
      __break(1u);
LABEL_74:
      swift_bridgeObjectRetain();
      uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v112) {
        goto LABEL_75;
      }
      goto LABEL_52;
    }
    uint64_t v2 = (void *)v129[54];
    uint64_t v67 = v129[48];
    sub_100043D2C();
    sub_1000B5E24();
    sub_1000B9F68();
    sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
    swift_retain();
    sub_1000B9C24();
    dispatch thunk of static Comparable.>= infix(_:_:)();
    char v68 = *(void (**)(void))(v65 + 16);
    sub_100069DF4();
    v68();
    sub_1000B5E7C(v67, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    static Date.+ infix(_:_:)();
    uint64_t v69 = *(void (**)(void))(v65 + 8);
    sub_1000303D4();
    v69();
    char v70 = static Date.> infix(_:_:)();
    swift_release();
    if (v70) {
      break;
    }
    ++v66;
    sub_1000303D4();
    v69();
    unint64_t v56 = v126;
    if (v124 == v66)
    {
      swift_release();
      swift_release();
      goto LABEL_62;
    }
  }
  unint64_t v56 = v129[51];
  uint64_t v90 = v129[35];
  swift_release();
  swift_release();
  sub_100042EDC(v90, &qword_10015DAE0);
  uint64_t v91 = sub_1000B9368();
  v92(v91);
  sub_1000BA66C();
LABEL_62:
  sub_1000B96B4(v129[35]);
  sub_1000B9EB0();
  if (v56 == 1)
  {
    swift_retain_n();
    swift_retain_n();
    os_log_type_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.fault.getter();
    if (sub_100044424(v94))
    {
      os_log_type_t v95 = (_DWORD *)sub_100030314();
      uint64_t v96 = sub_10002FF90();
      sub_1000B7AC8(v96);
      _DWORD *v95 = 136315138;
      swift_retain();
      swift_retain();
      uint64_t v97 = sub_1000B5860(v123, v126);
      unint64_t v99 = v98;
      swift_release();
      swift_release();
      uint64_t v100 = sub_10001DF20(v97, v99, (uint64_t *)&v130);
      sub_10004458C(v100, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10000F050();
      sub_1000B72DC();
      swift_bridgeObjectRelease();
      sub_1000B969C((void *)&_mh_execute_header, v93, (os_log_type_t)v68, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task");
      sub_1000436BC();
      sub_10000ED7C();
      sub_10000ED7C();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    sub_10004381C();
    v69();
    uint64_t v108 = v129;
    sub_10004381C();
    v69();
LABEL_72:
    uint64_t v111 = v108[35];
    sub_100043D2C();
    sub_1000B96B4(v111);
    sub_1000B95C0();
LABEL_79:
    sub_1000B7A80();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B7974();
    __asm { BRAA            X1, X16 }
  }
  sub_100008678();
  sub_10002FE18();
  sub_100069DF4();
  v101();
  sub_100069E00();
  sub_100069DF4();
  v68();
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v128 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v102, v128))
  {

    uint64_t v109 = sub_1000B95D8();
    ((void (*)(uint64_t))v69)(v109);
    goto LABEL_71;
  }
  uint64_t v103 = v129[35];
  uint64_t v104 = v129[33];
  *(_DWORD *)sub_100030314() = 134217984;
  sub_100043D2C();
  sub_1000B65F0(v103, v104, &qword_10015DAE0);
  sub_1000B7230(v104);
  if (!v105)
  {
    Date.timeIntervalSince(_:)();
    uint64_t v107 = v106;
    sub_10003056C();
    v69();
    v129[26] = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10003056C();
    v69();
    sub_1000B8F88((void *)&_mh_execute_header, v102, v128, "Additional assets need transitioning, next task wake in %f seconds");
    sub_10000ED7C();

LABEL_71:
    swift_release();
    swift_release();
    uint64_t v108 = v129;
    sub_100057FE4();
    v110();
    sub_10003056C();
    v69();
    sub_10003056C();
    v69();
    swift_task_dealloc();
    goto LABEL_72;
  }
  uint64_t result = sub_100042EDC(v129[35], &qword_10015DAE0);
  __break(1u);
  return result;
}

uint64_t sub_1000A41E4()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v3 = *v2;
  sub_1000086D0();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 328);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}