uint64_t sub_1000A4368()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100030014();
  sub_10000F01C();
  sub_10002FC48();
  v2 = *v1;
  sub_1000086D0();
  *v3 = v2;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  v4 = sub_1000B6DE0();
  v5(v4);
  sub_10000F0B4();
  sub_10002FE64();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000A44B8()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  uint64_t v3 = *v2;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 320);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000A463C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A4720()
{
  v69 = v1;
  sub_1000A1EE4();
  uint64_t v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
LABEL_33:
    sub_1000B8BAC();
    uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000B9644();
  }
  v66 = v1;
  if (!v0)
  {
    swift_bridgeObjectRelease();
    v17 = (void *)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v18))
    {
      v19 = (_WORD *)sub_10005A928();
      sub_100069CF8(v19);
      sub_10005A960((void *)&_mh_execute_header, v20, v21, "No more assets need to be transitioned");
      sub_10000ED7C();
    }
    uint64_t v22 = v1[51];

    v23 = *(void (**)(void))(v22 + 8);
    sub_100044784();
    sub_100030420();
    v23();
    sub_100030420();
    v23();
    uint64_t v24 = sub_1000B7944();
    sub_100006960(v24, v25, v26, v27);
    goto LABEL_29;
  }
  uint64_t v4 = sub_1000A1BA8((unint64_t)v3);
  uint64_t v6 = v5;
  uint64_t v3 = (void (*)(void))v1[29];
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1000B38C8(v7, v4, v6);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v10 + 16);
  if (!v64)
  {
    v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v32 = v1[50];
    uint64_t v31 = v1[51];
    if (v30)
    {
      v33 = v1;
      uint64_t v67 = v1[56];
      v34 = (_DWORD *)sub_100030314();
      uint64_t v68 = sub_10002FF90();
      _DWORD *v34 = 136315138;
      sub_100043D2C();
      type metadata accessor for InferenceProviderAsset(0);
      sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
      swift_bridgeObjectRetain();
      uint64_t v35 = Set.description.getter();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      v1[28] = sub_10001DF20(v35, v37, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000B9704((void *)&_mh_execute_header, v28, v29, "All remaining assets that need transitioning have failed to unload or move to dynamic, %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();

      swift_release();
      swift_release();
      v38 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v38(v67, v32);
    }
    else
    {

      swift_release();
      swift_release();
      v33 = v1;
      v38 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      uint64_t v55 = sub_1000B95B4();
      v38(v55, v56);
    }
    v38(v33[55], v33[50]);
    sub_1000B90A4();
    goto LABEL_29;
  }
  sub_1000BA730();
  sub_100006960(v1[35], 1, 1, v11);
  uint64_t v63 = v8;
  swift_retain();
  swift_retain();
  unint64_t v12 = 0;
  uint64_t v65 = v10;
  while (1)
  {
    if (v12 >= *(void *)(v10 + 16))
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v13 = v1[48];
    sub_100043D2C();
    sub_100044468();
    sub_1000B5E24();
    sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
    swift_retain();
    sub_1000BA46C();
    dispatch thunk of static Comparable.>= infix(_:_:)();
    v14 = *(void (**)(void))(v4 + 16);
    LODWORD(v15) = v4 + 8;
    sub_100069DF4();
    v14();
    sub_1000B5E7C(v13, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v1 = v66;
    static Date.+ infix(_:_:)();
    uint64_t v3 = *(void (**)(void))(v4 + 8);
    sub_100043924();
    v3();
    char v16 = static Date.> infix(_:_:)();
    swift_release();
    if (v16) {
      break;
    }
    ++v12;
    sub_100043924();
    v3();
    uint64_t v10 = v65;
    if (v64 == v12)
    {
      swift_release();
      swift_release();
      goto LABEL_16;
    }
  }
  uint64_t v15 = v66[35];
  swift_release();
  uint64_t v10 = v65;
  swift_release();
  sub_100042EDC(v15, &qword_10015DAE0);
  sub_1000B98C4();
  v39();
  uint64_t v1 = v66;
  sub_1000B7830(v15);
LABEL_16:
  sub_1000B65F0(v1[35], v1[34], &qword_10015DAE0);
  sub_1000B8174();
  if (v15 == 1)
  {
    sub_1000BA77C();
    swift_retain_n();
    v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (_DWORD *)sub_100030314();
      uint64_t v68 = sub_10002FF90();
      _DWORD *v42 = 136315138;
      swift_retain();
      swift_retain();
      uint64_t v43 = sub_1000B5860(v63, v10);
      unint64_t v45 = v44;
      swift_release();
      swift_release();
      uint64_t v46 = sub_10001DF20(v43, v45, &v68);
      sub_10004458C(v46, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000EE7C();
      sub_1000B72DC();
      sub_1000B72C4((void *)&_mh_execute_header, v40, v41, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task");
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();

      swift_release();
      swift_release();
    }
    else
    {

      swift_release_n();
      swift_release_n();
      sub_100043EDC();
    }
    sub_10003056C();
    v3();
    sub_10003056C();
    v3();
LABEL_28:
    sub_100043D2C();
    sub_1000B7A64();
    sub_1000B8B04();
LABEL_29:
    sub_1000B7A80();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B7974();
    __asm { BRAA            X1, X16 }
  }
  sub_100008678();
  sub_10002FE18();
  sub_100069DF4();
  v47();
  sub_100069DF4();
  v14();
  v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v48, v49))
  {

    uint64_t v57 = sub_100043EDC();
    ((void (*)(uint64_t))v3)(v57);
    goto LABEL_27;
  }
  uint64_t v50 = v1[35];
  uint64_t v51 = v1[33];
  *(_DWORD *)sub_100030314() = 134217984;
  sub_100043D2C();
  sub_1000B65F0(v50, v51, &qword_10015DAE0);
  sub_1000B7230(v51);
  if (!v52)
  {
    Date.timeIntervalSince(_:)();
    uint64_t v54 = v53;
    sub_1000B95B4();
    sub_100043F00();
    v3();
    v1[26] = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B9560();
    sub_100043F00();
    v3();
    sub_1000B8F88((void *)&_mh_execute_header, v48, v49, "Additional assets need transitioning, next task wake in %f seconds");
    sub_10000ED7C();

LABEL_27:
    swift_release();
    swift_release();
    sub_100057FE4();
    v58();
    sub_100030BD0();
    sub_100043F00();
    v3();
    sub_100044784();
    sub_100043F00();
    v3();
    swift_task_dealloc();
    goto LABEL_28;
  }
  uint64_t result = sub_100042EDC(v1[35], &qword_10015DAE0);
  __break(1u);
  return result;
}

uint64_t sub_1000A5134()
{
  sub_1000B7DD4();
  v96 = v0;
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[37];
  sub_100043D2C();
  sub_100069DF4();
  v4();
  sub_100043E68();
  v5();
  uint64_t v6 = sub_100044468();
  char v8 = sub_100101C40(v6, v7);
  uint64_t v9 = *(void (**)(void))(v3 + 8);
  sub_100043F00();
  v9();
  sub_100043F00();
  v9();
  if (v8) {
    sub_1000201DC(&v95, v0[64]);
  }
  uint64_t v10 = swift_release();
  uint64_t v12 = v0[63];
  if (v12)
  {
    v0[63] = v12 - 1;
    if (!__OFSUB__(v12, 1))
    {
      sub_1000B726C(v10, v11, v0[62]);
      if (v1) {
        uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        sub_1000B7644();
      }
      v0[64] = v2;
      if (*(unsigned char *)(v0[32] + v0[59]) == 1)
      {
        uint64_t v13 = v0[41];
        sub_100043E68();
        v14();
        uint64_t v15 = type metadata accessor for AuditToken();
        sub_100069D3C(v13, v16, v17, v15);
        os_log_type_t v18 = (void *)swift_task_alloc();
        v0[65] = v18;
        *os_log_type_t v18 = v0;
        v18[1] = sub_1000A41E4;
      }
      else
      {
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
        {
          sub_100043E68();
          v19();
          uint64_t v20 = swift_task_alloc();
          uint64_t v21 = (void *)sub_1000B8A64(v20);
          *uint64_t v21 = v22;
          v21[1] = sub_1000A4368;
          sub_1000B80A0();
          return sub_10008F160();
        }
        sub_100043E68();
        v25();
        uint64_t v26 = type metadata accessor for AuditToken();
        sub_1000B6E34(v26);
        uint64_t v27 = (void *)swift_task_alloc();
        v0[67] = v27;
        *uint64_t v27 = v0;
        v27[1] = sub_1000A44B8;
      }
      sub_1000447E8();
      sub_1000B80A0();
      return sub_10009690C();
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v29 = (void *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v30))
    {
      uint64_t v31 = (_WORD *)sub_10005A928();
      sub_100069CF8(v31);
      sub_10005A960((void *)&_mh_execute_header, v32, v33, "Finished transitioning assets");
      sub_10000ED7C();
    }
    uint64_t v1 = v0[59];
    uint64_t v34 = v0[32];

    if (*(unsigned char *)(v34 + v1) == 1)
    {
      sub_1000BA044(&dword_10015B8D8);
      uint64_t v35 = (void *)swift_task_alloc();
      v0[68] = v35;
      *uint64_t v35 = v0;
      v35[1] = sub_1000A463C;
      sub_1000B80A0();
      __asm { BR              X0 }
    }
  }
  sub_1000A1EE4();
  v39 = v38;
  if ((unint64_t)v38 >> 62) {
    goto LABEL_49;
  }
  sub_1000B9644();
  if (!v1)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v81 = (void *)Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v82))
    {
      v83 = (_WORD *)sub_10005A928();
      sub_100069CF8(v83);
      sub_10005A960((void *)&_mh_execute_header, v84, v85, "No more assets need to be transitioned");
      sub_10000ED7C();
    }
    uint64_t v86 = v0[51];

    v87 = *(void (**)(void))(v86 + 8);
    sub_1000B705C();
    v87();
    sub_1000B705C();
    v87();
    uint64_t v61 = sub_1000B7944();
LABEL_53:
    sub_100006960(v61, v62, v63, v64);
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v40 = sub_1000A1BA8((unint64_t)v39);
    uint64_t v42 = v41;
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v44 = sub_1000B38C8(v43, v40, v42);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v92 = *(void *)(v46 + 16);
    uint64_t v91 = v44;
    uint64_t v93 = v46;
    if (!v92)
    {
      char v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      BOOL v54 = sub_1000B914C(v53);
      uint64_t v55 = v0[51];
      if (v54)
      {
        uint64_t v56 = (_DWORD *)sub_100030314();
        uint64_t v95 = sub_10002FF90();
        *uint64_t v56 = 136315138;
        sub_100043D2C();
        type metadata accessor for InferenceProviderAsset(0);
        sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
        swift_bridgeObjectRetain();
        Set.description.getter();
        swift_bridgeObjectRelease();
        uint64_t v57 = sub_100044648();
        v0[28] = sub_10001DF20(v57, v58, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000B9704((void *)&_mh_execute_header, v52, (os_log_type_t)v46, "All remaining assets that need transitioning have failed to unload or move to dynamic, %s");
        sub_1000B87DC();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      swift_release();

      swift_release();
      uint64_t v60 = *(void (**)(void))(v55 + 8);
      sub_100043FA8();
      v60();
      ((void (*)(void, void))v60)(v0[55], v0[50]);
      sub_1000B7A1C();
      goto LABEL_53;
    }
    sub_1000BA730();
    sub_100006960(v0[35], 1, 1, v47);
    swift_retain();
    swift_retain();
    unint64_t v48 = 0;
LABEL_29:
    if (v48 < *(void *)(v46 + 16)) {
      break;
    }
    __break(1u);
LABEL_49:
    sub_1000B8BAC();
    uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v80) {
      goto LABEL_50;
    }
  }
  uint64_t v49 = v0[48];
  sub_100043D2C();
  sub_100069E00();
  sub_1000B5E24();
  sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
  swift_retain();
  sub_1000BA5FC();
  dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v50 = *(void (**)(void))(v40 + 16);
  sub_100069DF4();
  v50();
  sub_1000B5E7C(v49, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  static Date.+ infix(_:_:)();
  LODWORD(v51) = v40 + 8;
  v39 = *(void (**)(void))(v40 + 8);
  sub_100043924();
  v39();
  LOBYTE(v49) = static Date.> infix(_:_:)();
  swift_release();
  if ((v49 & 1) == 0)
  {
    ++v48;
    sub_100043924();
    v39();
    uint64_t v46 = v93;
    if (v92 == v48)
    {
      swift_release();
      swift_release();
      goto LABEL_37;
    }
    goto LABEL_29;
  }
  uint64_t v51 = v0[35];
  swift_release();
  swift_release();
  sub_100042EDC(v51, &qword_10015DAE0);
  uint64_t v65 = sub_1000B9340();
  v66(v65);
  sub_1000B7830(v51);
LABEL_37:
  sub_1000B65F0(v0[35], v0[34], &qword_10015DAE0);
  sub_1000B8174();
  if (v51 == 1)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (_DWORD *)sub_100030314();
      uint64_t v95 = sub_10002FF90();
      _DWORD *v69 = 136315138;
      swift_retain();
      swift_retain();
      sub_1000B5860(v91, v93);
      sub_1000B9C60();
      swift_release();
      uint64_t v70 = sub_1000B8050();
      sub_10004458C(v70, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10000EE7C();
      sub_100044204();
      swift_bridgeObjectRelease();
      sub_1000B72C4((void *)&_mh_execute_header, v67, v68, "Remaining transition candidates %s generated task wake times in the past.  Ending asset transition task");
      sub_1000B87DC();
      sub_10000ED7C();
      sub_10000ED7C();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    sub_10004381C();
    v39();
    sub_10004381C();
    v39();
LABEL_47:
    sub_100043D2C();
    sub_1000B7A64();
    sub_1000B8B04();
LABEL_54:
    sub_1000B9638();
    sub_1000B9690();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000B80A0();
    __asm { BRAA            X1, X16 }
  }
  sub_100008678();
  sub_10002FE18();
  sub_100069DF4();
  v71();
  sub_100069DF4();
  v50();
  v72 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v72, v94))
  {

    uint64_t v78 = sub_100043EDC();
    ((void (*)(uint64_t))v39)(v78);
    goto LABEL_46;
  }
  uint64_t v73 = v0[35];
  uint64_t v74 = v0[33];
  *(_DWORD *)sub_100030314() = 134217984;
  sub_100043D2C();
  sub_1000B65F0(v73, v74, &qword_10015DAE0);
  sub_1000B7230(v74);
  if (!v75)
  {
    Date.timeIntervalSince(_:)();
    uint64_t v77 = v76;
    sub_1000B95B4();
    sub_10003056C();
    v39();
    v0[26] = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B9560();
    sub_10003056C();
    v39();
    sub_1000B8F88((void *)&_mh_execute_header, v72, v94, "Additional assets need transitioning, next task wake in %f seconds");
    sub_10000ED7C();

LABEL_46:
    swift_release();
    swift_release();
    sub_100057FE4();
    v79();
    sub_100030BD0();
    sub_10003056C();
    v39();
    sub_10003056C();
    v39();
    swift_task_dealloc();
    goto LABEL_47;
  }
  uint64_t result = sub_100042EDC(v0[35], &qword_10015DAE0);
  __break(1u);
  return result;
}

void sub_1000A5E5C()
{
  uint64_t v1 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask;
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_delayedAssetTransitionTask))
  {
    swift_retain();
    char isCancelled = swift_task_isCancelled();
    swift_release();
    *(void *)(v0 + v1) = 0;
    swift_release();
    if ((isCancelled & 1) == 0 && sub_1000A5F0C((uint64_t (*)(uint64_t))sub_1000A1EE4, sub_1000B5AF8))
    {
      sub_10008DE18();
    }
  }
  else
  {
    __break(1u);
  }
}

BOOL sub_1000A5F0C(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t *))
{
  type metadata accessor for Date();
  sub_100008678();
  __chkstk_darwin(v6, v7);
  sub_100057F20();
  uint64_t v8 = static Date.now.getter();
  unint64_t v9 = a1(v8);
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  unint64_t v10 = (unint64_t)sub_10009B05C(a2, &v14, v9);
  if (v10 >> 62) {
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  sub_1000BA7D0();
  sub_100043DF8();
  v12();
  return v11 != 0;
}

uint64_t sub_1000A6004(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000B5E24();
  uint64_t v19 = *(int *)(v4 + 32);
  uint64_t v18 = *(int *)(v4 + 36);
  uint64_t v28 = v4;
  uint64_t v20 = &v7[v18];
  uint64_t v21 = &v7[v19];
  sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v20;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v22, v8);
  sub_1000B5E7C((uint64_t)v7, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  static Date.+ infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v13, v8);
  char v24 = dispatch thunk of static Comparable.< infix(_:_:)();
  v23(v16, v8);
  if (v24) {
    char v25 = *(unsigned char *)(v17 + *(int *)(v28 + 24)) ^ 1;
  }
  else {
    char v25 = 1;
  }
  return v25 & 1;
}

uint64_t sub_1000A6298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  sub_100003A70(&qword_10015DAE0);
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000A6460, 0, 0);
}

uint64_t sub_1000A6460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_1000B8BCC();
  v10[24] = _OSActivity.__allocating_init(_:)();
  sub_100043D2C();
  uint64_t v11 = sub_1000B83B8();
  v10[25] = v11;
  if (v11)
  {
    uint64_t v12 = swift_task_alloc();
    uint64_t v13 = (void *)sub_1000B77C0(v12);
    *uint64_t v13 = v14;
    v13[1] = sub_1000A66B4;
    sub_1000B84AC();
    sub_10002FE94();
    return sub_1000A6FE0();
  }
  else
  {
    uint64_t v17 = sub_1000B70D4();
    sub_100042EDC(v17, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v10[32] = Strong;
    if (Strong)
    {
      uint64_t v19 = swift_task_alloc();
      uint64_t v20 = (void *)sub_1000BA3A0(v19);
      *uint64_t v20 = v21;
      v20[1] = sub_1000A6DE8;
      sub_10002FE94();
      return sub_1000AAEFC();
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100057A88(v23, (uint64_t)qword_10015D5A0);
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v24))
      {
        char v25 = (_WORD *)sub_10005A928();
        sub_100069CF8(v25);
        sub_10005A960((void *)&_mh_execute_header, v26, v27, "Ending task to unload assets due to pending version change");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_10002FE94();
      return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
    }
  }
}

uint64_t sub_1000A66B4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A6798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000B90C4();
  sub_1000306E0();
  sub_1000B8AC4();
  if (v18)
  {
    sub_100042EDC(v15, &qword_10015DAE0);
    sub_100043D2C();
    uint64_t Strong = swift_weakLoadStrong();
    v16[32] = Strong;
    if (Strong)
    {
      uint64_t v20 = swift_task_alloc();
      uint64_t v21 = (void *)sub_1000BA3A0(v20);
      *uint64_t v21 = v22;
      v21[1] = sub_1000A6DE8;
      sub_1000B70B4();
      return sub_1000AAEFC();
    }
    else
    {
      if (qword_10015B0C0 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100057A88(v39, (uint64_t)qword_10015D5A0);
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (sub_1000443B0(v40))
      {
        uint64_t v41 = (_WORD *)sub_10005A928();
        sub_100069CF8(v41);
        sub_10005A960((void *)&_mh_execute_header, v42, v43, "Ending task to unload assets due to pending version change");
        sub_10000ED7C();
      }
      sub_1000B6E54();
      _OSActivity.close()();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000B70B4();
      return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14);
    }
  }
  else
  {
    uint64_t v25 = sub_1000B7374();
    v26(v25);
    static ContinuousClock.Instant.now.getter();
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    v16[27] = *(void *)(v14 + 8);
    v16[28] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_1000303D4();
    v27();
    static Duration.seconds(_:)();
    ContinuousClock.Instant.advanced(by:)();
    v16[29] = *(void *)(v17 + 8);
    v16[30] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100043AE0();
    v28();
    sub_1000B8D84((__n128)xmmword_100129950);
    uint64_t v29 = (void *)swift_task_alloc();
    v16[31] = v29;
    sub_1000B5280(&qword_10015DAF0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    sub_1000B76F8();
    *uint64_t v29 = v30;
    v29[1] = sub_1000A6A8C;
    sub_1000B7824();
    sub_1000B70B4();
    return static Task<>.sleep<A>(until:tolerance:clock:)(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_1000A6A8C()
{
  sub_10002FEF0();
  sub_10002FC60();
  sub_100008660();
  uint64_t v4 = v3;
  sub_10000ED94();
  *uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_1000086D0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000B881C();
    sub_100043F00();
    v8();
    uint64_t v9 = sub_10004468C();
    v2(v9);
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t))(v4 + 232);
    sub_10004381C();
    v11();
    uint64_t v12 = sub_100057ECC();
    v10(v12);
  }
  sub_1000579A4();
  sub_10002FE94();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1000A6BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  char v12 = sub_1000B81B0();
  uint64_t v13 = sub_100043EDC();
  v11(v13);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = sub_1000B83B8();
    *(void *)(v10 + 200) = v14;
    if (v14)
    {
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = (void *)sub_1000B77C0(v15);
      *uint64_t v16 = v17;
      v16[1] = sub_1000A66B4;
      sub_1000B84AC();
      sub_10002FE94();
      return sub_1000A6FE0();
    }
    uint64_t v20 = sub_1000B70D4();
    sub_100042EDC(v20, &qword_10015DAE0);
  }
  sub_100043D2C();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v10 + 256) = Strong;
  if (Strong)
  {
    uint64_t v22 = swift_task_alloc();
    uint64_t v23 = (void *)sub_1000BA3A0(v22);
    *uint64_t v23 = v24;
    v23[1] = sub_1000A6DE8;
    sub_10002FE94();
    return sub_1000AAEFC();
  }
  else
  {
    if (qword_10015B0C0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100057A88(v26, (uint64_t)qword_10015D5A0);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v27))
    {
      uint64_t v28 = (_WORD *)sub_10005A928();
      sub_100069CF8(v28);
      sub_10005A960((void *)&_mh_execute_header, v29, v30, "Ending task to unload assets due to pending version change");
      sub_10000ED7C();
    }
    sub_1000B6E54();
    _OSActivity.close()();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FE94();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
  }
}

uint64_t sub_1000A6DE8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A6ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FEF0();
  sub_10002FC60();
  if (qword_10015B0C0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100057A88(v10, (uint64_t)qword_10015D5A0);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v11))
  {
    char v12 = (_WORD *)sub_10005A928();
    sub_100069CF8(v12);
    sub_10005A960((void *)&_mh_execute_header, v13, v14, "Ending task to unload assets due to pending version change");
    sub_10000ED7C();
  }
  sub_1000B6E54();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE94();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_1000A6FE0()
{
  sub_1000086E0();
  v1[37] = v2;
  v1[38] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015DAE0);
  sub_10002FDD0(v3);
  v1[39] = sub_1000436D8();
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v1[42] = State;
  sub_10002FA4C(State);
  v1[43] = v5;
  v1[44] = sub_1000436D8();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v6);
  v1[48] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[49] = v7;
  sub_10002FA4C(v7);
  v1[50] = v8;
  v1[51] = sub_10002FE18();
  uint64_t v9 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[52] = v9;
  sub_10002FDD0(v9);
  v1[53] = sub_1000436D8();
  v1[54] = swift_task_alloc();
  uint64_t v10 = swift_task_alloc();
  v1[56] = sub_1000BA11C(v10);
  v1[57] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v1[58] = v11;
  sub_10002FA4C(v11);
  v1[59] = v12;
  v1[60] = sub_1000436D8();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v13, v14, v15);
}

#error "1000A7D0C: call analysis failed (funcsize=1349)"

uint64_t sub_1000A87C4()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_10002FC48();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 576) = v1;
  swift_task_dealloc();
  sub_100044174();
  uint64_t v5 = *(void *)(v0 + 384);
  if (v1) {
    swift_errorRelease();
  }
  sub_100042EDC(v5, &qword_10015DA50);
  uint64_t v6 = sub_1000B6DE0();
  v7(v6);
  sub_10000F0B4();
  sub_1000B7440();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1000A894C()
{
  v138 = v0;
  uint64_t v1 = (void (*)(void))v0[72];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[43];
  sub_100043D2C();
  sub_100069DF4();
  v4();
  sub_100043E68();
  v5();
  uint64_t v6 = sub_100043F9C();
  char v8 = sub_100101C40(v6, v7);
  uint64_t v9 = *(void (**)(void))(v3 + 8);
  sub_100043F00();
  v9();
  sub_100043F00();
  v9();
  if (v8) {
    sub_1000201DC(v137, v0[70]);
  }
  uint64_t v10 = swift_release();
  uint64_t v12 = v0[69];
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (sub_1000306C4(v23))
    {
      uint64_t v24 = (uint8_t *)sub_10005A928();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v2, "Finished unloading assets for version change", v24, 2u);
      sub_10000ED7C();
    }
    uint64_t v25 = v0[38];

    sub_100043D2C();
    uint64_t v13 = *(void *)(v25 + 120);
    uint64_t v26 = v0[38];
    if ((v13 & 0xC000000000000001) == 0)
    {
      swift_retain();
      uint64_t v63 = swift_bridgeObjectRetain();
      sub_1000ADE5C(v63, v26, (uint64_t)sub_10007738C, 0);
LABEL_51:
      uint64_t v64 = swift_bridgeObjectRetain();
      sub_100116B88(v64);
      sub_1000B9DC8();
      v137[0] = v13;
      sub_1000B10DC(v137, (uint64_t (*)(uint64_t, uint64_t))sub_100076CBC);
      if (v1)
      {
        sub_1000B8030();
        return swift_release();
      }
      swift_release();
      uint64_t v47 = v137[0];
      if ((v137[0] & 0x8000000000000000) == 0 && (v137[0] & 0x4000000000000000) == 0)
      {
        if (!*(void *)(v137[0] + 16)) {
          goto LABEL_86;
        }
        goto LABEL_58;
      }
LABEL_85:
      swift_retain();
      _CocoaArrayWrapper.endIndex.getter();
      sub_1000B9A2C();
      if (!v1)
      {
LABEL_86:
        swift_release();
        swift_bridgeObjectRelease();
        v103 = (void *)Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.default.getter();
        if (sub_1000443B0(v104))
        {
          v105 = (_WORD *)sub_10005A928();
          sub_100069CF8(v105);
          sub_10005A960((void *)&_mh_execute_header, v106, v107, "While unloading assets for pending version change: no more assets can be unloaded, attempting version switch");
          sub_10000ED7C();
        }

        swift_retain();
        v108 = (void *)swift_task_alloc();
        v0[73] = v108;
        void *v108 = v0;
        v108[1] = sub_1000A9B40;
        sub_1000B8030();
        __asm { BR              X0 }
      }
LABEL_58:
      uint64_t v66 = sub_1000A1BA8(v47);
      uint64_t v1 = (void (*)(void))sub_1000B952C(v66, v67);
      uint64_t v47 = v68;
      swift_bridgeObjectRelease();
      uint64_t v132 = v47;
      uint64_t v127 = *(void *)(v47 + 16);
      if (v127)
      {
        sub_1000B9F78();
        uint64_t v69 = v0[59];
        sub_100006960(v0[41], 1, 1, v0[58]);
        swift_retain();
        swift_retain();
        unint64_t v70 = 0;
        while (1)
        {
          if (v70 >= *(void *)(v47 + 16)) {
            goto LABEL_84;
          }
          uint64_t v71 = v0[61];
          uint64_t v72 = v0[53];
          sub_100043D2C();
          sub_1000B5E24();
          sub_1000B5280(&qword_10015DAF8, (void (*)(uint64_t))&type metadata accessor for Date);
          swift_retain();
          dispatch thunk of static Comparable.>= infix(_:_:)();
          uint64_t v73 = *(void (**)(void))(v69 + 16);
          sub_100069DF4();
          v73();
          sub_1000B5E7C(v72, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          static Date.+ infix(_:_:)();
          uint64_t v1 = *(void (**)(void))(v69 + 8);
          sub_100043924();
          v1();
          char v74 = static Date.> infix(_:_:)();
          swift_release();
          if (v74) {
            break;
          }
          ++v70;
          sub_100043924();
          v1();
          uint64_t v47 = v132;
          if (v127 == v70)
          {
            swift_release();
            swift_release();
            goto LABEL_67;
          }
        }
        uint64_t v47 = v0[41];
        swift_release();
        swift_release();
        sub_100042EDC(v47, &qword_10015DAE0);
        uint64_t v83 = sub_1000B9340();
        v84(v83);
        sub_1000B7830(v47);
LABEL_67:
        uint64_t v85 = v0[40];
        sub_1000B65F0(v0[41], v85, &qword_10015DAE0);
        sub_1000B8174();
        if (v47 == 1)
        {
          swift_retain_n();
          swift_retain_n();
          uint64_t v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.fault.getter();
          if (sub_1000443B0(v87))
          {
            v88 = (_DWORD *)sub_100030314();
            v137[0] = sub_10002FF90();
            _DWORD *v88 = 136315138;
            swift_retain();
            uint64_t v89 = swift_retain();
            sub_1000B5860(v89, v132);
            sub_1000B9C60();
            swift_release();
            uint64_t v90 = sub_10001DF20(v71, v70, v137);
            sub_10004458C(v90, v0 + 35);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10000EE7C();
            sub_1000B9D18();
            swift_bridgeObjectRelease();
            sub_1000B86D0((void *)&_mh_execute_header, v86, (os_log_type_t)v85, "While unloading assets for pending version change: remaining candidates %s generated task wake times in the past.  Ending task");
            sub_1000B87DC();
            sub_10000ED7C();
            sub_10000ED7C();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release_n();
            swift_release_n();
          }

          sub_10004381C();
          v1();
          sub_10004381C();
          v1();
        }
        else
        {
          sub_100008678();
          sub_10002FE18();
          sub_100069DF4();
          v91();
          sub_100069DF4();
          v73();
          uint64_t v92 = Logger.logObject.getter();
          os_log_type_t v135 = static os_log_type_t.default.getter();
          if (sub_1000B9788(v135))
          {
            uint64_t v93 = v0[41];
            uint64_t v94 = v0[39];
            *(_DWORD *)sub_100030314() = 134217984;
            sub_100043D2C();
            sub_1000B65F0(v93, v94, &qword_10015DAE0);
            sub_1000B7230(v94);
            if (v33)
            {
              uint64_t result = sub_100042EDC(v0[41], &qword_10015DAE0);
              __break(1u);
              return result;
            }
            Date.timeIntervalSince(_:)();
            uint64_t v96 = v95;
            sub_10003056C();
            v1();
            v0[36] = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10003056C();
            v1();
            sub_1000B7EE4((void *)&_mh_execute_header, v92, v135, "While unloading assets for pending version change: additional assets need unloading, next task wake in %f seconds");
            sub_10000ED7C();
          }
          else
          {

            uint64_t v99 = sub_100043EDC();
            ((void (*)(uint64_t))v1)(v99);
          }
          swift_release();
          swift_release();
          sub_100057FE4();
          v100();
          sub_10003056C();
          v1();
          sub_10003056C();
          v1();
          swift_task_dealloc();
        }
        sub_100043D2C();
        sub_1000B7A64();
        sub_1000B8B04();
      }
      else
      {
        sub_1000BA7DC();
        sub_1000B87C4();
        char v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.default.getter();
        v130 = v75;
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = v0[59];
        if (v77)
        {
          v79 = (_DWORD *)sub_100030314();
          v137[0] = sub_10002FF90();
          _DWORD *v79 = 136315138;
          swift_retain();
          swift_retain();
          uint64_t v80 = sub_1000B5860((uint64_t)&OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, v132);
          unint64_t v82 = v81;
          swift_release();
          swift_release();
          v0[33] = sub_10001DF20(v80, v82, v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100044610();
          sub_100044204();
          swift_bridgeObjectRelease();
          sub_1000B9704((void *)&_mh_execute_header, v130, v76, "While unloading assets for pending version change: all remaining assets failed to unload, %s");
          sub_1000B9BF4();
          sub_10000ED7C();
          sub_10000ED7C();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release_n();
          swift_release_n();
        }

        v97 = *(void (**)(void))(v78 + 8);
        sub_100043924();
        v97();
        uint64_t v98 = sub_1000BA158();
        ((void (*)(uint64_t))v97)(v98);
        sub_1000B90A4();
      }
      sub_1000B79E8();
      sub_1000B9F8C();
      sub_1000BA44C();
      sub_1000B9638();
      sub_1000B9690();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000B8030();
      __asm { BRAA            X1, X16 }
    }
    v136 = _swiftEmptySetSingleton;
    sub_1000B87C4();
    swift_bridgeObjectRetain();
    uint64_t v128 = __CocoaSet.makeIterator()();
    uint64_t v13 = v128;
    uint64_t v27 = __CocoaSet.Iterator.next()();
    if (!v27) {
      goto LABEL_49;
    }
    uint64_t v13 = v27;
    sub_1000B8A40();
    uint64_t v131 = v0[52];
    uint64_t v121 = sub_1000B8DC4();
    v113 = _swiftEmptySetSingleton;
    uint64_t v119 = (uint64_t)(v0 + 17);
    v120 = &type metadata for Swift.AnyObject[8];
    uint64_t v118 = (uint64_t)(v0 + 32);
LABEL_16:
    v0[31] = v13;
    swift_dynamicCast();
    uint64_t v28 = v0[32] + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    sub_10006A0F4();
    sub_100043F38();
    sub_100043E9C();
    v29();
    uint64_t v30 = sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v129 = v30;
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v31 = v0[44];
    uint64_t v133 = v0[45];
    uint64_t v134 = v28;
    uint64_t v32 = v0[42];
    BOOL v33 = v0[27] == v0[25] && v0[28] == v0[26];
    if (v33)
    {
      swift_bridgeObjectRelease_n();
      sub_1000B5E24();
      (*v117)(v31, v133, v32);
    }
    else
    {
      char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000B5E24();
      sub_100030274();
      v34();
      if ((v115 & 1) == 0)
      {
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v35 = v0[56];
        if (v0[23] != v0[29] || v0[24] != v0[30])
        {
          uint64_t v133 = v0[55];
          LODWORD(v129) = sub_1000B9CE0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v37 = *v116;
          sub_100043DF8();
          v37();
          sub_1000B5E7C(v35, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_100043DF8();
          v37();
          sub_1000B5E24();
          uint64_t v38 = (uint64_t *)v118;
          if ((v129 & 1) == 0)
          {
            sub_1000B5E7C(v0[55], (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            sub_1000B5E24();
LABEL_31:
            sub_1000B5E7C(v0[54], (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_endAccess();
LABEL_33:
            swift_release();
            goto LABEL_34;
          }
LABEL_30:
          uint64_t v44 = v0[54];
          uint64_t v43 = v0[55];
          uint64_t v45 = *(void *)(*(void *)(v43 + *(int *)(v131 + 48)) + 16);
          sub_1000B5E7C(v43, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          sub_1000B5E24();
          if (v45) {
            goto LABEL_31;
          }
          sub_1000B96F4();
          sub_1000B5E7C(v46, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
          swift_endAccess();
          if (v44) {
            goto LABEL_33;
          }
          uint64_t v47 = *v38;
          sub_1000B8A34();
          if (!(!v33 & v57))
          {
            sub_1000230F4(v55 + 1, v48, v49, v50, v51, v52, v53, v54, v111, v112, (uint64_t)v113, v114, (uint64_t)v116, (uint64_t)v117, v118, v119, (uint64_t)v120, v121, v122,
              v123,
              v124,
              v125,
              v126,
              v128,
              v129,
              v131,
              v133,
              v134,
              (uint64_t)v136,
              v137[0],
              v137[1],
              v137[2]);
            uint64_t v56 = v136;
          }
          v113 = v56;
          Hasher.init(_seed:)();
          sub_1000C95D4();
          Hasher._finalize()();
          sub_1000B6DC0();
          if (!v33)
          {
            sub_1000B6F10();
            goto LABEL_47;
          }
          sub_1000B6EFC();
          while (1)
          {
            sub_1000B7778();
            if (v33 && (v60 & 1) != 0) {
              break;
            }
            sub_1000B77F4();
            sub_1000B6FC8();
            if (!v33)
            {
              sub_1000B6EE8();
LABEL_47:
              sub_1000B89AC(v58);
              *(void *)(v61 + 8 * v62) = v47;
              sub_1000B7A0C();
LABEL_34:
              uint64_t v13 = __CocoaSet.Iterator.next()();
              if (!v13)
              {
LABEL_49:
                swift_release_n();
                swift_release();
                goto LABEL_51;
              }
              goto LABEL_16;
            }
          }
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        swift_bridgeObjectRelease_n();
        v59 = *v116;
        sub_10006A0F4();
        sub_100043F00();
        v59();
        sub_1000B5E7C(v35, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_100043F00();
        v59();
LABEL_29:
        uint64_t v38 = (uint64_t *)v118;
        sub_1000B5E24();
        goto LABEL_30;
      }
    }
    uint64_t v39 = v0[56];
    uint64_t v40 = v0[45];
    uint64_t v41 = v0[42];
    uint64_t v42 = *v116;
    sub_100057FE4();
    v42();
    sub_1000B5E7C(v39, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
    goto LABEL_29;
  }
  uint64_t v13 = v12 - 1;
  v0[69] = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  sub_1000B726C(v10, v11, v0[68]);
  if (v0 == (void *)-272) {
    sub_1000B7644();
  }
  else {
    uint64_t v1 = (void (*)(void))specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  v0[70] = v1;
  uint64_t v14 = v0[48];
  sub_100043E68();
  v15();
  uint64_t v16 = type metadata accessor for AuditToken();
  sub_100069D3C(v14, v17, v18, v16);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[71] = v19;
  void *v19 = v0;
  v19[1] = sub_1000A87C4;
  sub_1000447E8();
  sub_1000B8030();
  return sub_10009690C();
}

uint64_t sub_1000A9B40()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A9C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10000F120();
  uint64_t v23 = v22[58];
  uint64_t v24 = *(void (**)(void))(v22[59] + 8);
  sub_100043924();
  v24();
  sub_100043924();
  v24();
  sub_1000BA4A4();
  sub_100006960(v25, v26, v27, v23);
  sub_1000B79E8();
  uint64_t v43 = v29;
  uint64_t v44 = v28;
  sub_1000B9F8C();
  uint64_t v45 = v31;
  uint64_t v46 = v30;
  sub_1000BA44C();
  uint64_t v47 = v33;
  uint64_t v48 = v32;
  uint64_t v49 = v22[44];
  uint64_t v50 = v22[41];
  uint64_t v51 = v22[40];
  uint64_t v52 = v22[39];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10000F0E0();
  return v35(v34, v35, v36, v37, v38, v39, v40, v41, a9, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52,
           a20,
           a21,
           a22);
}

#error "1000A9E50: call analysis failed (funcsize=1077)"

uint64_t sub_1000AAEFC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000AAF1C, v0, 0);
}

void sub_1000AAF1C()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_assetVersionChangeUnloadTask))
  {
    swift_retain();
    char isCancelled = swift_task_isCancelled();
    swift_release();
    *(void *)(v1 + v2) = 0;
    swift_release();
    if ((isCancelled & 1) != 0 || !sub_1000A5F0C((uint64_t (*)(uint64_t))sub_100076CC0, sub_1000B5C34))
    {
      sub_10000EF7C();
      v5();
    }
    else
    {
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 24) = v4;
      void *v4 = v0;
      v4[1] = sub_100058D34;
      sub_100087A10();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Int sub_1000AB054(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    uint64_t v34 = sub_1000ADE5C(a1, a2, (uint64_t)a3, a4);
    swift_release();
    return v34;
  }
  uint64_t v10 = _swiftEmptySetSingleton;
  uint64_t v48 = _swiftEmptySetSingleton;
  swift_retain();
  __CocoaSet.makeIterator()();
  uint64_t v11 = __CocoaSet.Iterator.next()();
  if (!v11)
  {
LABEL_20:
    swift_release_n();
    swift_release();
    return (Swift::Int)v10;
  }
  uint64_t v12 = v11;
  uint64_t v35 = a2;
  uint64_t v36 = v5;
  type metadata accessor for InferenceProviderAsset(0);
  while (1)
  {
    uint64_t v37 = v12;
    swift_dynamicCast();
    uint64_t v13 = v46 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    LOBYTE(v13) = a3(v13);
    swift_endAccess();
    uint64_t v21 = v46;
    if (v13) {
      break;
    }
    swift_release();
LABEL_18:
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (!v12)
    {
      uint64_t v10 = v48;
      goto LABEL_20;
    }
  }
  uint64_t v22 = v48;
  unint64_t v23 = v48[2];
  if (v48[3] <= v23)
  {
    sub_1000230F4(v23 + 1, v14, v15, v16, v17, v18, v19, v20, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
      v46,
      v47,
      (uint64_t)v48,
      v49,
      v50,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56,
      vars0,
      vars8);
    uint64_t v22 = v48;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  uint64_t v25 = v22 + 7;
  uint64_t v26 = -1 << *((unsigned char *)v22 + 32);
  unint64_t v27 = result & ~v26;
  unint64_t v28 = v27 >> 6;
  if (((-1 << v27) & ~v22[(v27 >> 6) + 7]) != 0)
  {
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~v22[(v27 >> 6) + 7])) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_17:
    *(void *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(void *)(v22[6] + 8 * v29) = v21;
    ++v22[2];
    goto LABEL_18;
  }
  char v30 = 0;
  unint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    BOOL v32 = v28 == v31;
    if (v28 == v31) {
      unint64_t v28 = 0;
    }
    v30 |= v32;
    uint64_t v33 = v25[v28];
    if (v33 != -1)
    {
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000AB2EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v68 = *a3;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v9 = *(void *)(State - 8);
  uint64_t v11 = __chkstk_darwin(State, v10);
  uint64_t v67 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v61 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v17 = __chkstk_darwin(v61, v16);
  uint64_t v58 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v56 - v20;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v55 = sub_1000AE1A8();
    if (!v3) {
      uint64_t v4 = (void *)v55;
    }
    goto LABEL_36;
  }
  uint64_t v4 = _swiftEmptySetSingleton;
  unint64_t v82 = _swiftEmptySetSingleton;
  char v60 = a3;
  swift_retain();
  uint64_t v59 = a2;
  swift_retain();
  uint64_t v69 = __CocoaSet.makeIterator()();
  uint64_t v22 = __CocoaSet.Iterator.next()();
  if (!v22)
  {
LABEL_33:
    swift_release();
    swift_release_n();
LABEL_36:
    swift_release();
    swift_release();
    return (Swift::Int)v4;
  }
  uint64_t v57 = v3;
  HIDWORD(v66) = enum case for LoadState.loaded(_:);
  uint64_t v65 = (void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v63 = (void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  uint64_t v62 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v64 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v23 = v58;
  while (1)
  {
    uint64_t v70 = v22;
    swift_dynamicCast();
    uint64_t v24 = v81;
    swift_beginAccess();
    sub_1000B5E24();
    (*v65)(v15, HIDWORD(v66), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v70 != v79 || v71 != v80) {
      break;
    }
    swift_bridgeObjectRelease_n();
    sub_1000B5E24();
    uint64_t v27 = v67;
    (*v63)(v67, v15, State);
LABEL_11:
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v70 == v79 && v71 == v80)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v50 = *v62;
      (*v62)(v27, State);
      sub_1000B5E7C(v23, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v50((uint64_t)v15, State);
      sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_22;
    }
    uint64_t v30 = v27;
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v32 = *v62;
    uint64_t v33 = v30;
    uint64_t v23 = v58;
    (*v62)(v33, State);
    sub_1000B5E7C(v23, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v32((uint64_t)v15, State);
    sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v31 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_22:
    swift_release();
LABEL_31:
    uint64_t v22 = __CocoaSet.Iterator.next()();
    if (!v22)
    {
      uint64_t v4 = v82;
      goto LABEL_33;
    }
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000B5E24();
  uint64_t v27 = v67;
  (*v63)(v67, v15, State);
  if (v26) {
    goto LABEL_11;
  }
  unint64_t v28 = *v62;
  (*v62)(v27, State);
  sub_1000B5E7C(v23, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v28((uint64_t)v15, State);
  sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_16:
  if ((sub_1000BAB0C(v24) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v41 = v81;
  uint64_t v42 = v82;
  unint64_t v43 = v82[2];
  if (v82[3] <= v43)
  {
    sub_1000230F4(v43 + 1, v34, v35, v36, v37, v38, v39, v40, v56, v57, v58, v59, (uint64_t)v60, v61, (uint64_t)v62, (uint64_t)v63, v64, (uint64_t)v65, v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79);
    uint64_t v42 = v82;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  uint64_t v45 = v42 + 7;
  uint64_t v46 = -1 << *((unsigned char *)v42 + 32);
  unint64_t v47 = result & ~v46;
  unint64_t v48 = v47 >> 6;
  if (((-1 << v47) & ~v42[(v47 >> 6) + 7]) != 0)
  {
    unint64_t v49 = __clz(__rbit64((-1 << v47) & ~v42[(v47 >> 6) + 7])) | v47 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)((char *)v45 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    *(void *)(v42[6] + 8 * v49) = v41;
    ++v42[2];
    goto LABEL_31;
  }
  char v51 = 0;
  unint64_t v52 = (unint64_t)(63 - v46) >> 6;
  while (++v48 != v52 || (v51 & 1) == 0)
  {
    BOOL v53 = v48 == v52;
    if (v48 == v52) {
      unint64_t v48 = 0;
    }
    v51 |= v53;
    uint64_t v54 = v45[v48];
    if (v54 != -1)
    {
      unint64_t v49 = __clz(__rbit64(~v54)) + (v48 << 6);
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000ABA64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v66 = *a3;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v8 = *(void *)(State - 8);
  uint64_t v10 = __chkstk_darwin(State, v9);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v56 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v17 = __chkstk_darwin(v56, v16);
  uint64_t v65 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v54 - v20;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v53 = sub_1000AE1A8();
    if (!v3) {
      uint64_t v12 = (char *)v53;
    }
    goto LABEL_38;
  }
  uint64_t v64 = v12;
  uint64_t v12 = (char *)_swiftEmptySetSingleton;
  uint64_t v80 = (char *)_swiftEmptySetSingleton;
  swift_retain();
  uint64_t v63 = a2;
  swift_retain();
  uint64_t v67 = __CocoaSet.makeIterator()();
  uint64_t v22 = __CocoaSet.Iterator.next()();
  if (!v22)
  {
LABEL_37:
    swift_release();
    swift_release_n();
LABEL_38:
    swift_release();
    swift_release();
    return (Swift::Int)v12;
  }
  uint64_t v54 = v3;
  HIDWORD(v62) = enum case for LoadState.unloaded(_:);
  uint64_t v61 = (void (**)(char *, void, uint64_t))(v8 + 104);
  uint64_t v59 = (void (**)(uint64_t, char *, uint64_t))(v8 + 16);
  uint64_t v57 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v60 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v58 = a3;
  while (1)
  {
    uint64_t v68 = v22;
    swift_dynamicCast();
    uint64_t v23 = v79;
    swift_beginAccess();
    sub_1000B5E24();
    (*v61)(v15, HIDWORD(v62), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v68 == v77 && v69 == v78)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v26 = v65;
      sub_1000B5E24();
      uint64_t v27 = (uint64_t)v64;
      (*v59)((uint64_t)v64, v15, State);
LABEL_16:
      char v31 = *v57;
      (*v57)(v27, State);
      sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v31((uint64_t)v15, State);
LABEL_17:
      sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_18;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v65;
    sub_1000B5E24();
    uint64_t v27 = (uint64_t)v64;
    (*v59)((uint64_t)v64, v15, State);
    if (v25) {
      goto LABEL_16;
    }
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v28 = v27;
    if (v68 == v77 && v69 == v78)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v52 = *v57;
      (*v57)(v27, State);
      sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v52((uint64_t)v15, State);
      goto LABEL_17;
    }
    HIDWORD(v55) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = *v57;
    (*v57)(v28, State);
    sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v30((uint64_t)v15, State);
    sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v55 & 0x100000000) == 0) {
      goto LABEL_23;
    }
LABEL_18:
    if (sub_1000BAB0C(v23)) {
      break;
    }
LABEL_23:
    swift_release();
LABEL_32:
    uint64_t v22 = __CocoaSet.Iterator.next()();
    if (!v22)
    {
      uint64_t v12 = v80;
      goto LABEL_37;
    }
  }
  uint64_t v39 = v79;
  uint64_t v40 = v80;
  unint64_t v41 = *((void *)v80 + 2);
  if (*((void *)v80 + 3) <= v41)
  {
    sub_1000230F4(v41 + 1, v32, v33, v34, v35, v36, v37, v38, v54, v55, v56, (char)v57, (uint64_t)v58, (uint64_t)v59, v60, (uint64_t)v61, v62, v63, (uint64_t)v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77);
    uint64_t v40 = v80;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  unint64_t v43 = v40 + 56;
  uint64_t v44 = -1 << v40[32];
  unint64_t v45 = result & ~v44;
  unint64_t v46 = v45 >> 6;
  if (((-1 << v45) & ~*(void *)&v40[8 * (v45 >> 6) + 56]) != 0)
  {
    unint64_t v47 = __clz(__rbit64((-1 << v45) & ~*(void *)&v40[8 * (v45 >> 6) + 56])) | v45 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    *(void *)(*((void *)v40 + 6) + 8 * v47) = v39;
    ++*((void *)v40 + 2);
    goto LABEL_32;
  }
  char v48 = 0;
  unint64_t v49 = (unint64_t)(63 - v44) >> 6;
  while (++v46 != v49 || (v48 & 1) == 0)
  {
    BOOL v50 = v46 == v49;
    if (v46 == v49) {
      unint64_t v46 = 0;
    }
    v48 |= v50;
    uint64_t v51 = v43[v46];
    if (v51 != -1)
    {
      unint64_t v47 = __clz(__rbit64(~v51)) + (v46 << 6);
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

void sub_1000AC1EC()
{
  sub_1000B9F04();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v59 = *v5;
  uint64_t State = type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v13 = v12;
  __chkstk_darwin(v14, v15);
  sub_100030158();
  uint64_t v58 = v16;
  sub_100030514();
  __chkstk_darwin(v17, v18);
  sub_1000B97D8();
  uint64_t v49 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v19, v20);
  sub_100030158();
  uint64_t v57 = v21;
  sub_100030514();
  __chkstk_darwin(v22, v23);
  sub_1000B97C8();
  if ((v10 & 0xC000000000000001) == 0)
  {
    swift_retain();
    swift_retain();
    sub_1000443CC();
    sub_1000AE04C();
LABEL_36:
    swift_release();
    swift_release();
    sub_1000B99C8();
    return;
  }
  HIDWORD(v55) = HIDWORD(v4);
  sub_1000B9954();
  swift_retain();
  uint64_t v56 = v8;
  swift_retain();
  uint64_t v60 = __CocoaSet.makeIterator()();
  uint64_t v24 = __CocoaSet.Iterator.next()();
  if (!v24)
  {
LABEL_35:
    swift_release();
    sub_100043604();
    goto LABEL_36;
  }
  uint64_t v47 = v0;
  LODWORD(v55) = *v4;
  uint64_t v54 = v13 + 104;
  uint64_t v52 = v13 + 16;
  BOOL v50 = (void (**)(void))(v13 + 8);
  uint64_t v53 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v51 = (uint64_t)v6;
  while (1)
  {
    uint64_t v61 = v24;
    swift_dynamicCast();
    sub_100043D2C();
    sub_1000B95B4();
    sub_1000B5E24();
    sub_100043E9C();
    v25();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    sub_1000BA59C();
    sub_1000BA59C();
    BOOL v26 = v61 == v70 && v62 == v71;
    if (v26)
    {
      sub_1000B8890();
      uint64_t v28 = v57;
      sub_1000B5E24();
      sub_1000BA0DC();
      v33();
LABEL_16:
      uint64_t v34 = *v50;
      sub_100043DF8();
      v34();
      sub_1000B5E7C(v28, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      ((void (*)(uint64_t, uint64_t))v34)(v1, State);
LABEL_17:
      uint64_t v32 = v51;
      sub_1000B5E7C(v2, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_18;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v57;
    sub_1000B5E24();
    sub_100030274();
    v29();
    if (v27) {
      goto LABEL_16;
    }
    sub_1000BA59C();
    sub_1000BA59C();
    if (v61 == v70 && v62 == v71)
    {
      sub_1000B8890();
      unint64_t v46 = *v50;
      sub_100043924();
      v46();
      sub_1000B5E7C(v57, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_100043924();
      v46();
      goto LABEL_17;
    }
    HIDWORD(v48) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v31 = *v50;
    sub_100043DF8();
    v31();
    sub_1000B5E7C(v57, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_100043DF8();
    v31();
    sub_1000B5E7C(v2, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v32 = v51;
    if ((v48 & 0x100000000) == 0) {
      goto LABEL_23;
    }
LABEL_18:
    if (sub_1000BAB0C(v32)) {
      break;
    }
LABEL_23:
    swift_release();
LABEL_31:
    uint64_t v24 = __CocoaSet.Iterator.next()();
    if (!v24) {
      goto LABEL_35;
    }
  }
  unint64_t v42 = _swiftEmptySetSingleton[2];
  if (_swiftEmptySetSingleton[3] <= v42) {
    sub_1000230F4(v42 + 1, v35, v36, v37, v38, v39, v40, v41, v47, v48, v49, (char)v50, v51, v52, (uint64_t)v53, v54, v55, v56, v57,
  }
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70);
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Hasher._finalize()();
  sub_1000B6DC0();
  if (!v26)
  {
    sub_1000B6F10();
LABEL_30:
    sub_1000B8D38(v43);
    *(void *)(_swiftEmptySetSingleton[6] + 8 * v45) = v72;
    ++_swiftEmptySetSingleton[2];
    goto LABEL_31;
  }
  sub_1000B6EFC();
  while (1)
  {
    sub_1000B7778();
    if (v26 && (v44 & 1) != 0) {
      break;
    }
    sub_1000B6FC8();
    if (!v26)
    {
      sub_1000B6EE8();
      goto LABEL_30;
    }
  }
  __break(1u);
}

Swift::Int sub_1000AC830(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State, v7);
  uint64_t v63 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v65 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v14 = __chkstk_darwin(v65, v13);
  uint64_t v62 = (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v54 - v17;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    uint64_t v19 = (void *)sub_1000AE478(a1, a2, (uint64_t (*)(uint64_t))sub_1000B09F4);
    swift_release();
    return (Swift::Int)v19;
  }
  uint64_t v19 = _swiftEmptySetSingleton;
  uint64_t v79 = _swiftEmptySetSingleton;
  swift_retain();
  uint64_t v64 = __CocoaSet.makeIterator()();
  uint64_t v20 = __CocoaSet.Iterator.next()();
  if (!v20)
  {
LABEL_36:
    swift_release_n();
    swift_release();
    return (Swift::Int)v19;
  }
  uint64_t v21 = v20;
  uint64_t v54 = a2;
  uint64_t v55 = v2;
  uint64_t v61 = type metadata accessor for InferenceProviderAsset(0);
  HIDWORD(v60) = enum case for LoadState.loaded(_:);
  uint64_t v59 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v57 = (void (**)(uint64_t, char *, uint64_t))(v6 + 16);
  uint64_t v22 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v58 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v66 = v21;
    swift_dynamicCast();
    uint64_t v23 = v78 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    sub_1000B5E24();
    (*v59)(v12, HIDWORD(v60), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v66 == v75 && v67 == v76)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v26 = v62;
      sub_1000B5E24();
      uint64_t v27 = v63;
      (*v57)(v63, v12, State);
LABEL_16:
      uint64_t v38 = v26;
      uint64_t v39 = *v22;
      (*v22)(v27, State);
      uint64_t v40 = v38;
LABEL_17:
      sub_1000B5E7C(v40, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v39((uint64_t)v12, State);
      sub_1000B5E7C((uint64_t)v18, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      goto LABEL_18;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v62;
    sub_1000B5E24();
    uint64_t v27 = v63;
    (*v57)(v63, v12, State);
    if (v25) {
      goto LABEL_16;
    }
    uint64_t v28 = v26;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v66 == v75 && v67 == v76)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v39 = *v22;
      (*v22)(v27, State);
      uint64_t v40 = v28;
      goto LABEL_17;
    }
    HIDWORD(v56) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = *v22;
    (*v22)(v27, State);
    sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v30((uint64_t)v12, State);
    sub_1000B5E7C((uint64_t)v18, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if ((v56 & 0x100000000) == 0) {
      goto LABEL_19;
    }
LABEL_18:
    if ((*(unsigned char *)(v23 + *(int *)(v65 + 24)) & 1) == 0) {
      break;
    }
LABEL_19:
    swift_release();
LABEL_32:
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21)
    {
      uint64_t v19 = v79;
      goto LABEL_36;
    }
  }
  uint64_t v41 = v78;
  unint64_t v42 = v79;
  unint64_t v43 = v79[2];
  if (v79[3] <= v43)
  {
    sub_1000230F4(v43 + 1, v31, v32, v33, v34, v35, v36, v37, v54, v55, v56, (char)v57, v58, (uint64_t)v59, v60, v61, v62, v63, v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77);
    unint64_t v42 = v79;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  uint64_t v45 = v42 + 7;
  uint64_t v46 = -1 << *((unsigned char *)v42 + 32);
  unint64_t v47 = result & ~v46;
  unint64_t v48 = v47 >> 6;
  if (((-1 << v47) & ~v42[(v47 >> 6) + 7]) != 0)
  {
    unint64_t v49 = __clz(__rbit64((-1 << v47) & ~v42[(v47 >> 6) + 7])) | v47 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)((char *)v45 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    *(void *)(v42[6] + 8 * v49) = v41;
    ++v42[2];
    goto LABEL_32;
  }
  char v50 = 0;
  unint64_t v51 = (unint64_t)(63 - v46) >> 6;
  while (++v48 != v51 || (v50 & 1) == 0)
  {
    BOOL v52 = v48 == v51;
    if (v48 == v51) {
      unint64_t v48 = 0;
    }
    v50 |= v52;
    uint64_t v53 = v45[v48];
    if (v53 != -1)
    {
      unint64_t v49 = __clz(__rbit64(~v53)) + (v48 << 6);
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000ACF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v73 = *(void *)(State - 8);
  uint64_t v9 = __chkstk_darwin(State, v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v72 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v16 = __chkstk_darwin(v72, v15);
  uint64_t v70 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v61 - v20;
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v61 - v23;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v60 = sub_1000AE30C();
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (Swift::Int)v11;
    }
    uint64_t v11 = (char *)v60;
LABEL_39:
    swift_release();
    swift_bridgeObjectRelease();
    return (Swift::Int)v11;
  }
  uint64_t v69 = v11;
  uint64_t v63 = v3;
  uint64_t v11 = (char *)_swiftEmptySetSingleton;
  os_log_type_t v87 = (char *)_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  uint64_t v62 = a2;
  swift_retain();
  uint64_t v71 = __CocoaSet.makeIterator()();
  uint64_t v25 = __CocoaSet.Iterator.next()();
  if (!v25)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_39;
  }
  uint64_t v26 = v25;
  uint64_t v68 = a3;
  uint64_t v74 = type metadata accessor for InferenceProviderAsset(0);
  HIDWORD(v67) = enum case for LoadState.loaded(_:);
  uint64_t v66 = (void (**)(char *, void, uint64_t))(v73 + 104);
  uint64_t v65 = (void (**)(uint64_t, char *, uint64_t))(v73 + 16);
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v73 + 8);
  uint64_t v73 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v27 = v72;
  while (1)
  {
    uint64_t v75 = v26;
    swift_dynamicCast();
    uint64_t v28 = v86;
    swift_beginAccess();
    sub_1000B5E24();
    uint64_t v29 = *(void *)(*(void *)&v24[*(int *)(v27 + 48)] + 16);
    sub_1000B5E7C((uint64_t)v24, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (!v29) {
      break;
    }
LABEL_20:
    swift_release();
LABEL_21:
    uint64_t v26 = __CocoaSet.Iterator.next()();
    if (!v26)
    {
      uint64_t v11 = v87;
      goto LABEL_38;
    }
  }
  sub_1000B5E24();
  (*v66)(v14, HIDWORD(v67), State);
  sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v75 == v84 && v76 == v85)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v32 = v70;
    sub_1000B5E24();
    uint64_t v33 = (uint64_t)v69;
    (*v65)((uint64_t)v69, v14, State);
    goto LABEL_17;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v70;
  sub_1000B5E24();
  uint64_t v33 = (uint64_t)v69;
  (*v65)((uint64_t)v69, v14, State);
  if (v31)
  {
LABEL_17:
    uint64_t v37 = v32;
    uint64_t v38 = *v64;
    (*v64)(v33, State);
    sub_1000B5E7C(v37, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v38((uint64_t)v14, State);
LABEL_18:
    uint64_t v27 = v72;
    sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    goto LABEL_19;
  }
  uint64_t v34 = v32;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v75 == v84 && v76 == v85)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v59 = *v64;
    (*v64)(v33, State);
    sub_1000B5E7C(v34, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    v59((uint64_t)v14, State);
    goto LABEL_18;
  }
  HIDWORD(v61) = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = *v64;
  (*v64)(v33, State);
  sub_1000B5E7C(v70, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  v36((uint64_t)v14, State);
  sub_1000B5E7C((uint64_t)v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v27 = v72;
  if ((v61 & 0x100000000) == 0) {
    goto LABEL_20;
  }
LABEL_19:
  if (sub_100044F5C(v28, v68)) {
    goto LABEL_20;
  }
  uint64_t v46 = v86;
  unint64_t v47 = v87;
  unint64_t v48 = *((void *)v87 + 2);
  if (*((void *)v87 + 3) <= v48)
  {
    sub_1000230F4(v48 + 1, v39, v40, v41, v42, v43, v44, v45, v61, v62, v63, (char)v64, (uint64_t)v65, (uint64_t)v66, v67, v68, (uint64_t)v69, v70, v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84);
    unint64_t v47 = v87;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  char v50 = v47 + 56;
  uint64_t v51 = -1 << v47[32];
  unint64_t v52 = result & ~v51;
  unint64_t v53 = v52 >> 6;
  if (((-1 << v52) & ~*(void *)&v47[8 * (v52 >> 6) + 56]) != 0)
  {
    unint64_t v54 = __clz(__rbit64((-1 << v52) & ~*(void *)&v47[8 * (v52 >> 6) + 56])) | v52 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)((char *)v50 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
    *(void *)(*((void *)v47 + 6) + 8 * v54) = v46;
    ++*((void *)v47 + 2);
    goto LABEL_21;
  }
  char v55 = 0;
  unint64_t v56 = (unint64_t)(63 - v51) >> 6;
  while (++v53 != v56 || (v55 & 1) == 0)
  {
    BOOL v57 = v53 == v56;
    if (v53 == v56) {
      unint64_t v53 = 0;
    }
    v55 |= v57;
    uint64_t v58 = v50[v53];
    if (v58 != -1)
    {
      unint64_t v54 = __clz(__rbit64(~v58)) + (v53 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000AD710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v32 = sub_1000AE30C();
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (Swift::Int)v4;
    }
    uint64_t v4 = (void *)v32;
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    return (Swift::Int)v4;
  }
  uint64_t v4 = _swiftEmptySetSingleton;
  char v50 = _swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  uint64_t v7 = __CocoaSet.Iterator.next()();
  if (!v7)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_21;
  }
  LOBYTE(v8) = v7;
  uint64_t v34 = a2;
  uint64_t v35 = v3;
  type metadata accessor for InferenceProviderAsset(0);
  while (1)
  {
    char v36 = v8;
    swift_dynamicCast();
    uint64_t v9 = v48 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40));
    swift_bridgeObjectRetain();
    char v11 = sub_1000B27C4(a3, v10);
    swift_bridgeObjectRelease();
    uint64_t v19 = v48;
    if (v11) {
      break;
    }
    swift_release();
LABEL_18:
    uint64_t v8 = __CocoaSet.Iterator.next()();
    if (!v8)
    {
      uint64_t v4 = v50;
      goto LABEL_20;
    }
  }
  uint64_t v20 = v50;
  unint64_t v21 = v50[2];
  if (v50[3] <= v21)
  {
    sub_1000230F4(v21 + 1, v12, v13, v14, v15, v16, v17, v18, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      (uint64_t)v50,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56);
    uint64_t v20 = v50;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  uint64_t v23 = v20 + 7;
  uint64_t v24 = -1 << *((unsigned char *)v20 + 32);
  unint64_t v25 = result & ~v24;
  unint64_t v26 = v25 >> 6;
  if (((-1 << v25) & ~v20[(v25 >> 6) + 7]) != 0)
  {
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~v20[(v25 >> 6) + 7])) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_17:
    *(void *)((char *)v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    *(void *)(v20[6] + 8 * v27) = v19;
    ++v20[2];
    goto LABEL_18;
  }
  char v28 = 0;
  unint64_t v29 = (unint64_t)(63 - v24) >> 6;
  while (++v26 != v29 || (v28 & 1) == 0)
  {
    BOOL v30 = v26 == v29;
    if (v26 == v29) {
      unint64_t v26 = 0;
    }
    v28 |= v30;
    uint64_t v31 = v23[v26];
    if (v31 != -1)
    {
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000AD9F4(uint64_t a1, uint64_t a2)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State, v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v45 - v12;
  if ((a1 & 0xC000000000000001) == 0)
  {
    swift_retain();
    uint64_t v14 = (void *)sub_1000AE478(a1, a2, (uint64_t (*)(uint64_t))sub_1000AFC10);
    swift_release();
    return (Swift::Int)v14;
  }
  uint64_t v14 = _swiftEmptySetSingleton;
  uint64_t v69 = _swiftEmptySetSingleton;
  swift_retain();
  uint64_t v51 = __CocoaSet.makeIterator()();
  uint64_t v15 = __CocoaSet.Iterator.next()();
  if (!v15)
  {
LABEL_25:
    swift_release_n();
    swift_release();
    return (Swift::Int)v14;
  }
  uint64_t v16 = v15;
  uint64_t v45 = a2;
  uint64_t v46 = v2;
  uint64_t v50 = type metadata accessor for InferenceProviderAsset(0);
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  unsigned int v49 = enum case for LoadState.dynamicMode(_:);
  uint64_t v18 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v19 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v47 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v52 = v16;
    swift_dynamicCast();
    uint64_t v20 = v66 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    (*v17)(v13, v20, State);
    (*v18)(v10, v49, State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v52 == v61 && v53 == v62) {
      break;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = *v19;
    (*v19)(v10, State);
    v23(v13, State);
    if (v22) {
      goto LABEL_11;
    }
    swift_release();
LABEL_23:
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16)
    {
      uint64_t v14 = v69;
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v31 = *v19;
  (*v19)(v10, State);
  v31(v13, State);
LABEL_11:
  uint64_t v32 = v66;
  uint64_t v33 = v69;
  unint64_t v34 = v69[2];
  if (v69[3] <= v34)
  {
    sub_1000230F4(v34 + 1, v24, v25, v26, v27, v28, v29, v30, v45, v46, v47, v48, v50, v51, v52, v53, v54, v55, v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      (uint64_t)v69);
    uint64_t v33 = v69;
  }
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  char v36 = v33 + 7;
  uint64_t v37 = -1 << *((unsigned char *)v33 + 32);
  unint64_t v38 = result & ~v37;
  unint64_t v39 = v38 >> 6;
  if (((-1 << v38) & ~v33[(v38 >> 6) + 7]) != 0)
  {
    unint64_t v40 = __clz(__rbit64((-1 << v38) & ~v33[(v38 >> 6) + 7])) | v38 & 0x7FFFFFFFFFFFFFC0;
LABEL_22:
    *(void *)((char *)v36 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    *(void *)(v33[6] + 8 * v40) = v32;
    ++v33[2];
    goto LABEL_23;
  }
  char v41 = 0;
  unint64_t v42 = (unint64_t)(63 - v37) >> 6;
  while (++v39 != v42 || (v41 & 1) == 0)
  {
    BOOL v43 = v39 == v42;
    if (v39 == v42) {
      unint64_t v39 = 0;
    }
    v41 |= v43;
    uint64_t v44 = v36[v39];
    if (v44 != -1)
    {
      unint64_t v40 = __clz(__rbit64(~v44)) + (v39 << 6);
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ADE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v10 = *(unsigned char *)(a1 + 32);
  unsigned int v11 = v10 & 0x3F;
  unint64_t v12 = (unint64_t)((1 << v10) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v11 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v14);
    uint64_t v15 = (uint64_t *)((char *)&v19 - ((8 * v12 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10001FB34(0, v12, v15);
    swift_retain();
    uint64_t v16 = sub_1000AE618(v15, v12, a1, a2, a3, a4);
    swift_release();
    if (v5) {
      swift_willThrow();
    }
    swift_release();
  }
  else
  {
    uint64_t v17 = (void *)swift_slowAlloc();
    sub_10001FB34(0, v12, v17);
    swift_retain();
    uint64_t v16 = sub_1000AE618(v17, v12, a1, a2, a3, a4);
    swift_release();
    swift_slowDealloc();
    swift_release();
  }
  swift_release_n();
  return v16;
}

uint64_t sub_1000AE04C()
{
  sub_1000B842C();
  unsigned int v2 = *(unsigned char *)(v1 + 32) & 0x3F;
  sub_1000B7BC4();
  uint64_t isStackAllocationSafe = sub_10002FC78();
  if (v2 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v5 = __chkstk_darwin(isStackAllocationSafe, v4);
    sub_1000B7994(v5, v6, v7, v8, v9, v10, v11, v12, v14);
    swift_retain();
    swift_retain();
    sub_1000B8FF8();
    sub_1000B8204();
    if (v0) {
      swift_willThrow();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_slowAlloc();
    sub_1000B8158();
    swift_retain();
    swift_retain();
    sub_1000B8FF8();
    sub_1000B8204();
    sub_10000ED7C();
    swift_release();
    swift_release();
  }
  sub_100043604();
  sub_10000F050();
  return sub_1000B9E30();
}

uint64_t sub_1000AE1A8()
{
  sub_1000B842C();
  unsigned int v2 = *(unsigned char *)(v1 + 32) & 0x3F;
  sub_1000B7BC4();
  uint64_t isStackAllocationSafe = sub_10002FC78();
  if (v2 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v5 = __chkstk_darwin(isStackAllocationSafe, v4);
    sub_1000B7994(v5, v6, v7, v8, v9, v10, v11, v12, v16);
    swift_retain();
    swift_retain();
    uint64_t v13 = sub_1000B8FD8();
    v0(v13);
    sub_1000B8204();
    if (v0) {
      swift_willThrow();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_slowAlloc();
    sub_1000B8158();
    swift_retain();
    swift_retain();
    uint64_t v14 = sub_1000B8FD8();
    v0(v14);
    sub_1000B8204();
    sub_10000ED7C();
    swift_release();
    swift_release();
  }
  sub_100043604();
  sub_10000F050();
  return sub_1000B9E30();
}

uint64_t sub_1000AE30C()
{
  sub_1000B842C();
  unsigned int v2 = *(unsigned char *)(v1 + 32) & 0x3F;
  sub_1000B7BC4();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v2 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v5 = __chkstk_darwin(isStackAllocationSafe, v4);
    sub_1000B7994(v5, v6, v7, v8, v9, v10, v11, v12, v16);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1000B9024();
    v0(v13);
    sub_1000B8204();
    if (v0) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_slowAlloc();
    sub_1000B8158();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1000B9024();
    v0(v14);
    sub_1000B8204();
    sub_10000ED7C();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1000B8890();
  sub_10000F050();
  return sub_1000B9E30();
}

uint64_t sub_1000AE478(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v8);
    sub_10001FB34(0, v6, (uint64_t *)((char *)&v14 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0)));
    swift_retain();
    uint64_t v9 = sub_1000B94C4();
    uint64_t v10 = a3(v9);
    swift_release();
    if (v5) {
      swift_willThrow();
    }
    sub_10000F050();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    sub_10001FB34(0, v6, v11);
    swift_retain();
    uint64_t v12 = sub_1000B94C4();
    uint64_t v10 = a3(v12);
    swift_release();
    sub_10000ED7C();
    sub_10000F050();
  }
  swift_release();
  return v10;
}

#error "1000AE7E8: call analysis failed (funcsize=131)"

uint64_t sub_1000AE828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v58 = a5;
  uint64_t v59 = a4;
  uint64_t v54 = a2;
  uint64_t v56 = a1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v9 = __chkstk_darwin(State, v8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v62 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v16 = __chkstk_darwin(v62, v15);
  uint64_t result = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v57 = 0;
  uint64_t v21 = 0;
  uint64_t v70 = a3;
  uint64_t v22 = a3;
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v22 + 56);
  uint64_t v60 = v22 + 56;
  uint64_t v26 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  uint64_t v61 = (unint64_t)(v26 + 63) >> 6;
  HIDWORD(v69) = enum case for LoadState.loaded(_:);
  uint64_t v67 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v68 = (void (**)(char *, void, uint64_t))(v7 + 104);
  uint64_t v64 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v65 = v20;
  uint64_t v66 = v14;
  while (v28)
  {
    unint64_t v72 = (v28 - 1) & v28;
    uint64_t v77 = v21;
    unint64_t v29 = __clz(__rbit64(v28)) | (v21 << 6);
LABEL_17:
    uint64_t v34 = *(void *)(v70 + 48);
    unint64_t v63 = v29;
    uint64_t v35 = *(void *)(v34 + 8 * v29);
    swift_beginAccess();
    sub_1000B5E24();
    (*v68)(v14, HIDWORD(v69), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    uint64_t v71 = v35;
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n();
      sub_1000B5E24();
      (*v67)(v11, v14, State);
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000B5E24();
      (*v67)(v11, v14, State);
      if ((v37 & 1) == 0)
      {
        unint64_t v38 = *v64;
        (*v64)(v11, State);
        sub_1000B5E7C(v24, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        uint64_t v14 = v66;
        v38(v66, State);
        sub_1000B5E7C((uint64_t)v65, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        goto LABEL_29;
      }
    }
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n();
      BOOL v43 = *v64;
      (*v64)(v11, State);
      sub_1000B5E7C(v24, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v14 = v66;
      v43(v66, State);
      sub_1000B5E7C((uint64_t)v65, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_34:
      uint64_t result = swift_release();
      uint64_t v21 = v77;
      unint64_t v28 = v72;
    }
    else
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v41 = *v64;
      (*v64)(v11, State);
      sub_1000B5E7C(v24, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v14 = v66;
      v41(v66, State);
      sub_1000B5E7C((uint64_t)v65, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      if (v40) {
        goto LABEL_34;
      }
LABEL_29:
      char v42 = sub_1000BAB0C(v71);
      uint64_t result = swift_release();
      uint64_t v21 = v77;
      unint64_t v28 = v72;
      if (v42)
      {
        *(void *)(v56 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
        BOOL v30 = __OFADD__(v57++, 1);
        if (v30) {
          goto LABEL_42;
        }
      }
    }
  }
  BOOL v30 = __OFADD__(v21, 1);
  uint64_t v31 = v21 + 1;
  if (v30)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v31 >= v61) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v60 + 8 * v31);
  if (v32)
  {
LABEL_16:
    unint64_t v72 = (v32 - 1) & v32;
    uint64_t v77 = v31;
    unint64_t v29 = __clz(__rbit64(v32)) + (v31 << 6);
    goto LABEL_17;
  }
  uint64_t v33 = v31 + 1;
  if (v31 + 1 >= v61) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v60 + 8 * v33);
  if (v32) {
    goto LABEL_15;
  }
  uint64_t v33 = v31 + 2;
  if (v31 + 2 >= v61) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v60 + 8 * v33);
  if (v32) {
    goto LABEL_15;
  }
  uint64_t v33 = v31 + 3;
  if (v31 + 3 >= v61)
  {
LABEL_39:
    uint64_t v44 = v54;
    uint64_t v45 = v57;
    uint64_t v46 = v70;
    swift_retain();
    sub_10002D684(v56, v44, v45, v46, v47, v48, v49, v50, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
      (uint64_t)v64,
      (uint64_t)v65,
      (uint64_t)v66,
      (uint64_t)v67,
      (uint64_t)v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76);
    uint64_t v52 = v51;
    swift_release();
    swift_release();
    return v52;
  }
  unint64_t v32 = *(void *)(v60 + 8 * v33);
  if (v32)
  {
LABEL_15:
    uint64_t v31 = v33;
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v61) {
      goto LABEL_39;
    }
    unint64_t v32 = *(void *)(v60 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_16;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_1000AEF2C()
{
  sub_1000B9F04();
  char v4 = v3;
  uint64_t v61 = v6;
  uint64_t v62 = v5;
  uint64_t v8 = v7;
  uint64_t v54 = v9;
  uint64_t v55 = v10;
  uint64_t State = type metadata accessor for LoadState();
  sub_100008678();
  uint64_t v13 = v12;
  __chkstk_darwin(v14, v15);
  sub_100030158();
  uint64_t v66 = v16;
  sub_100030514();
  __chkstk_darwin(v17, v18);
  sub_1000B97C8();
  uint64_t v58 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FC6C();
  __chkstk_darwin(v19, v20);
  sub_1000B9308();
  __chkstk_darwin(v21, v22);
  sub_1000BA134();
  uint64_t v56 = 0;
  uint64_t v23 = 0;
  uint64_t v68 = v8;
  uint64_t v24 = v8;
  uint64_t v26 = v25;
  uint64_t v59 = v24 + 56;
  sub_100030680();
  unint64_t v29 = v28 & v27;
  int64_t v60 = (unint64_t)(v30 + 63) >> 6;
  HIDWORD(v65) = *v4;
  uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  unint64_t v63 = (void (**)(void))(v13 + 8);
  uint64_t v57 = v2;
  while (1)
  {
    if (v29)
    {
      unint64_t v31 = __clz(__rbit64(v29));
      uint64_t v32 = (v29 - 1) & v29;
      uint64_t v69 = v23;
      unint64_t v33 = v31 | (v23 << 6);
      goto LABEL_15;
    }
    BOOL v34 = __OFADD__(v23, 1);
    int64_t v35 = v23 + 1;
    if (v34)
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v35 >= v60) {
      goto LABEL_38;
    }
    unint64_t v36 = *(void *)(v59 + 8 * v35);
    if (!v36) {
      break;
    }
LABEL_14:
    uint64_t v32 = (v36 - 1) & v36;
    uint64_t v69 = v35;
    unint64_t v33 = __clz(__rbit64(v36)) + (v35 << 6);
LABEL_15:
    unint64_t v74 = v32;
    unint64_t v67 = v33;
    sub_100043D2C();
    sub_100043EDC();
    sub_1000B5E24();
    sub_100043E9C();
    v38();
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    swift_retain();
    sub_1000BA7B8();
    sub_1000BA7B8();
    if (v72 == v70 && v73 == v71)
    {
      sub_1000B8890();
      sub_1000B5E24();
      (*v64)(v66, v2, State);
      goto LABEL_27;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B5E24();
    sub_100030274();
    v41();
    if (v40)
    {
LABEL_27:
      uint64_t v47 = *v63;
      sub_1000303D4();
      v47();
      sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_28:
      sub_1000303D4();
      v47();
      uint64_t v23 = v69;
      unint64_t v29 = v74;
      sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_29:
      char v48 = sub_1000BAB0C(v61);
      swift_release();
      if (v48)
      {
        *(void *)(v55 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
        BOOL v34 = __OFADD__(v56++, 1);
        if (v34) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      sub_1000BA7B8();
      sub_1000BA7B8();
      if (v72 == v70 && v73 == v71)
      {
        sub_1000B8890();
        uint64_t v47 = *v63;
        sub_1000303D4();
        v47();
        sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        uint64_t v2 = v57;
        goto LABEL_28;
      }
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = *v63;
      sub_1000303D4();
      v44();
      sub_1000B5E7C(v1, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v2 = v57;
      sub_1000303D4();
      v44();
      uint64_t v45 = sub_100044474();
      sub_1000B5E7C(v45, v46);
      uint64_t v23 = v69;
      unint64_t v29 = v74;
      if (v43) {
        goto LABEL_29;
      }
      swift_release();
    }
  }
  int64_t v37 = v35 + 1;
  if (v35 + 1 >= v60) {
    goto LABEL_38;
  }
  unint64_t v36 = *(void *)(v59 + 8 * v37);
  if (v36) {
    goto LABEL_13;
  }
  int64_t v37 = v35 + 2;
  if (v35 + 2 >= v60) {
    goto LABEL_38;
  }
  unint64_t v36 = *(void *)(v59 + 8 * v37);
  if (v36) {
    goto LABEL_13;
  }
  int64_t v37 = v35 + 3;
  if (v35 + 3 >= v60)
  {
LABEL_38:
    swift_retain();
    sub_10002D684(v55, v54, v56, v68, v49, v50, v51, v52, v53, v54, v0, v55, v56, v57, v58, v59, v60, v61, v62,
      (uint64_t)v63,
      v26,
      (uint64_t)v64,
      v13 + 104,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73);
    swift_release();
    swift_release();
    sub_1000B99C8();
    return;
  }
  unint64_t v36 = *(void *)(v59 + 8 * v37);
  if (v36)
  {
LABEL_13:
    int64_t v35 = v37;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v35 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v35 >= v60) {
      goto LABEL_38;
    }
    unint64_t v36 = *(void *)(v59 + 8 * v35);
    ++v37;
    if (v36) {
      goto LABEL_14;
    }
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t sub_1000AF530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = a5;
  uint64_t v63 = a4;
  uint64_t v54 = a2;
  uint64_t v56 = a1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void *)(State - 8);
  uint64_t v9 = __chkstk_darwin(State, v8);
  uint64_t v69 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v53 - v12;
  uint64_t v59 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v15 = __chkstk_darwin(v59, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v15, v18);
  uint64_t v57 = 0;
  uint64_t v21 = 0;
  uint64_t v71 = a3;
  uint64_t v22 = *(void *)(a3 + 56);
  uint64_t v60 = a3 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v61 = (unint64_t)(v23 + 63) >> 6;
  HIDWORD(v68) = enum case for LoadState.unloaded(_:);
  uint64_t v66 = (void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  unint64_t v67 = (void (**)(char *, void, uint64_t))(v7 + 104);
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v65 = (uint64_t)&v53 - v20;
  uint64_t v58 = v13;
  while (1)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      uint64_t v27 = (v25 - 1) & v25;
      uint64_t v72 = v21;
      unint64_t v28 = v26 | (v21 << 6);
      goto LABEL_17;
    }
    BOOL v29 = __OFADD__(v21, 1);
    uint64_t v30 = v21 + 1;
    if (v29)
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v30 >= v61) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v60 + 8 * v30);
    if (!v31) {
      break;
    }
LABEL_16:
    uint64_t v27 = (v31 - 1) & v31;
    uint64_t v72 = v30;
    unint64_t v28 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_17:
    unint64_t v77 = v27;
    uint64_t v33 = *(void *)(v71 + 48);
    unint64_t v70 = v28;
    uint64_t v34 = *(void *)(v33 + 8 * v28);
    swift_beginAccess();
    sub_1000B5E24();
    (*v67)(v13, HIDWORD(v68), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v75 == v73 && v76 == v74)
    {
      swift_bridgeObjectRelease_n();
      sub_1000B5E24();
      uint64_t v37 = v69;
      (*v66)(v69, v13, State);
      goto LABEL_29;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B5E24();
    uint64_t v37 = v69;
    (*v66)(v69, v13, State);
    if (v36)
    {
LABEL_29:
      char v42 = *v64;
      (*v64)(v37, State);
      sub_1000B5E7C((uint64_t)v17, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_30:
      v42((uint64_t)v13, State);
      uint64_t v21 = v72;
      unint64_t v25 = v77;
      sub_1000B5E7C(v65, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_31:
      char v43 = sub_1000BAB0C(v34);
      uint64_t result = swift_release();
      if (v43)
      {
        *(void *)(v56 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
        BOOL v29 = __OFADD__(v57++, 1);
        if (v29) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v38 = v37;
      if (v75 == v73 && v76 == v74)
      {
        swift_bridgeObjectRelease_n();
        char v42 = *v64;
        (*v64)(v37, State);
        sub_1000B5E7C((uint64_t)v17, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        uint64_t v13 = v58;
        goto LABEL_30;
      }
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v41 = *v64;
      (*v64)(v38, State);
      sub_1000B5E7C((uint64_t)v17, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v13 = v58;
      v41((uint64_t)v58, State);
      sub_1000B5E7C(v65, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v21 = v72;
      unint64_t v25 = v77;
      if (v40) {
        goto LABEL_31;
      }
      uint64_t result = swift_release();
    }
  }
  uint64_t v32 = v30 + 1;
  if (v30 + 1 >= v61) {
    goto LABEL_40;
  }
  unint64_t v31 = *(void *)(v60 + 8 * v32);
  if (v31) {
    goto LABEL_15;
  }
  uint64_t v32 = v30 + 2;
  if (v30 + 2 >= v61) {
    goto LABEL_40;
  }
  unint64_t v31 = *(void *)(v60 + 8 * v32);
  if (v31) {
    goto LABEL_15;
  }
  uint64_t v32 = v30 + 3;
  if (v30 + 3 >= v61)
  {
LABEL_40:
    uint64_t v44 = v54;
    uint64_t v45 = v57;
    uint64_t v46 = v71;
    swift_retain();
    sub_10002D684(v56, v44, v45, v46, v47, v48, v49, v50, v53, v54, v55, v56, v57, (uint64_t)v58, v59, v60, v61, v62, v63,
      (uint64_t)v64,
      v65,
      (uint64_t)v66,
      (uint64_t)v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76);
    uint64_t v52 = v51;
    swift_release();
    swift_release();
    return v52;
  }
  unint64_t v31 = *(void *)(v60 + 8 * v32);
  if (v31)
  {
LABEL_15:
    uint64_t v30 = v32;
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v61) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v60 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_16;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000AFC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v40 = a2;
  uint64_t v43 = a1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = __chkstk_darwin(State, v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7, v10);
  uint64_t v51 = a3;
  uint64_t v52 = (uint64_t)&v39 - v13;
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a3 + 56);
  uint64_t v44 = 0;
  uint64_t v45 = a3 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v46 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v50 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  HIDWORD(v49) = enum case for LoadState.dynamicMode(_:);
  uint64_t v47 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v48 = (void (**)(char *, void, uint64_t))(v12 + 104);
  while (v18)
  {
    unint64_t v19 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    uint64_t v62 = v14;
    unint64_t v20 = v19 | (v14 << 6);
    uint64_t v21 = v52;
LABEL_20:
    uint64_t v26 = *(void *)(*(void *)(v51 + 48) + 8 * v20)
        + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    (*v50)(v21, v26, State);
    (*v48)(v9, HIDWORD(v49), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v55 == v53 && v56 == v54)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v30 = *v47;
      (*v47)(v9, State);
      v30((char *)v21, State);
      uint64_t result = swift_release();
      uint64_t v14 = v62;
LABEL_27:
      *(void *)(v43 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v44++, 1))
      {
        __break(1u);
LABEL_30:
        uint64_t v32 = v51;
        swift_retain();
        sub_10002D684(v43, v40, v44, v32, v33, v34, v35, v36, v39, v40, v41, v42, v43, v44, v45, v46, (uint64_t)v47, (uint64_t)v48, v49,
          (uint64_t)v50,
          v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62);
        uint64_t v38 = v37;
        swift_release();
        return v38;
      }
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v29 = *v47;
      (*v47)(v9, State);
      v29((char *)v21, State);
      uint64_t result = swift_release();
      uint64_t v14 = v62;
      if (v28) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v22 = v14 + 1;
  uint64_t v21 = v52;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v22 >= v46) {
    goto LABEL_30;
  }
  unint64_t v23 = *(void *)(v45 + 8 * v22);
  uint64_t v24 = v14 + 1;
  if (v23) {
    goto LABEL_19;
  }
  uint64_t v24 = v14 + 2;
  if (v14 + 2 >= v46) {
    goto LABEL_30;
  }
  unint64_t v23 = *(void *)(v45 + 8 * v24);
  if (v23) {
    goto LABEL_19;
  }
  uint64_t v24 = v14 + 3;
  if (v14 + 3 >= v46) {
    goto LABEL_30;
  }
  unint64_t v23 = *(void *)(v45 + 8 * v24);
  if (v23)
  {
LABEL_19:
    unint64_t v18 = (v23 - 1) & v23;
    uint64_t v62 = v24;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
    goto LABEL_20;
  }
  uint64_t v25 = v14 + 4;
  if (v14 + 4 >= v46) {
    goto LABEL_30;
  }
  unint64_t v23 = *(void *)(v45 + 8 * v25);
  if (v23)
  {
    uint64_t v24 = v14 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_30;
    }
    unint64_t v23 = *(void *)(v45 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

#error "1000B0230: call analysis failed (funcsize=139)"

uint64_t sub_1000B0278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v59 = a4;
  uint64_t v58 = a2;
  uint64_t v61 = a1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State, v7);
  uint64_t v72 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v71 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v77 = (uint64_t)&v57 - v19;
  uint64_t result = __chkstk_darwin(v18, v20);
  uint64_t v83 = (char *)&v57 - v22;
  uint64_t v62 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = *(void *)(a3 + 56);
  uint64_t v75 = a3 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  uint64_t v76 = (unint64_t)(v25 + 63) >> 6;
  HIDWORD(v70) = enum case for LoadState.loaded(_:);
  uint64_t v68 = (void (**)(uint64_t, char *, uint64_t))(v6 + 16);
  uint64_t v69 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v66 = (void (**)(void))(v6 + 8);
  uint64_t v67 = a3;
  uint64_t v74 = result;
  uint64_t v63 = v12;
  while (1)
  {
    if (v27)
    {
      unint64_t v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v29 = v28 | (v23 << 6);
      goto LABEL_17;
    }
    BOOL v30 = __OFADD__(v23++, 1);
    if (v30)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v23 >= v76) {
      goto LABEL_42;
    }
    unint64_t v31 = *(void *)(v75 + 8 * v23);
    if (!v31) {
      break;
    }
LABEL_16:
    unint64_t v27 = (v31 - 1) & v31;
    unint64_t v29 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_17:
    uint64_t v33 = *(void *)(a3 + 48);
    unint64_t v78 = v29;
    uint64_t v34 = *(void *)(v33 + 8 * v29);
    swift_beginAccess();
    uint64_t v35 = (uint64_t)v83;
    sub_1000B5E24();
    uint64_t v36 = *(void *)(*(void *)(v35 + *(int *)(v13 + 48)) + 16);
    swift_retain();
    sub_1000B5E7C(v35, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    if (v36) {
      goto LABEL_18;
    }
    sub_1000B5E24();
    uint64_t v37 = State;
    (*v69)(v12, HIDWORD(v70), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v81 == v79 && v82 == v80)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v39 = v71;
      sub_1000B5E24();
      uint64_t v40 = v72;
      (*v68)(v72, v12, v37);
LABEL_31:
      uint64_t v45 = *v66;
      ((void (*)(uint64_t, uint64_t))*v66)(v40, v37);
      sub_1000B5E7C(v39, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v46 = (uint64_t)v12;
      uint64_t v47 = v37;
LABEL_32:
      ((void (*)(uint64_t, uint64_t))v45)(v46, v47);
      sub_1000B5E7C(v77, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      a3 = v67;
      uint64_t v13 = v74;
      goto LABEL_33;
    }
    HIDWORD(v64) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v71;
    sub_1000B5E24();
    uint64_t v40 = v72;
    (*v68)(v72, v12, v37);
    if ((v64 & 0x100000000) != 0) {
      goto LABEL_31;
    }
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v41 = v37;
    uint64_t v42 = v40;
    if (v81 == v79 && v82 == v80)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v45 = *v66;
      ((void (*)(uint64_t, uint64_t))*v66)(v40, v41);
      sub_1000B5E7C(v39, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v46 = (uint64_t)v63;
      uint64_t v47 = v41;
      uint64_t v12 = v63;
      goto LABEL_32;
    }
    HIDWORD(v64) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = *v66;
    ((void (*)(uint64_t, uint64_t))*v66)(v42, v41);
    sub_1000B5E7C(v39, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    uint64_t v12 = v63;
    v44();
    sub_1000B5E7C(v77, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    a3 = v67;
    uint64_t v13 = v74;
    if ((v64 & 0x100000000) != 0)
    {
LABEL_33:
      char v48 = sub_100044F5C(v34, v65);
      uint64_t result = swift_release();
      if ((v48 & 1) == 0)
      {
        *(void *)(v61 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v78;
        BOOL v30 = __OFADD__(v62++, 1);
        if (v30) {
          goto LABEL_45;
        }
      }
    }
    else
    {
LABEL_18:
      uint64_t result = swift_release();
    }
  }
  uint64_t v32 = v23 + 1;
  if (v23 + 1 >= v76) {
    goto LABEL_42;
  }
  unint64_t v31 = *(void *)(v75 + 8 * v32);
  if (v31) {
    goto LABEL_15;
  }
  uint64_t v32 = v23 + 2;
  if (v23 + 2 >= v76) {
    goto LABEL_42;
  }
  unint64_t v31 = *(void *)(v75 + 8 * v32);
  if (v31) {
    goto LABEL_15;
  }
  uint64_t v32 = v23 + 3;
  if (v23 + 3 >= v76)
  {
LABEL_42:
    uint64_t v49 = v58;
    uint64_t v50 = v62;
    swift_retain();
    sub_10002D684(v61, v49, v50, a3, v51, v52, v53, v54, v57, v58, v59, v60, v61, v62, (uint64_t)v63, v64, v65, (uint64_t)v66, v67,
      (uint64_t)v68,
      (uint64_t)v69,
      v70,
      v71,
      v72,
      State,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80);
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    swift_release();
    return v56;
  }
  unint64_t v31 = *(void *)(v75 + 8 * v32);
  if (v31)
  {
LABEL_15:
    uint64_t v23 = v32;
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v23 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v23 >= v76) {
      goto LABEL_42;
    }
    unint64_t v31 = *(void *)(v75 + 8 * v23);
    ++v32;
    if (v31) {
      goto LABEL_16;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000B09F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v6 = *(void *)(State - 8);
  uint64_t v8 = __chkstk_darwin(State, v7);
  uint64_t v64 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v67 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v14 = __chkstk_darwin(v67, v13);
  uint64_t v63 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v14, v16);
  uint64_t v54 = 0;
  uint64_t v19 = 0;
  uint64_t v66 = a3;
  uint64_t v20 = *(void *)(a3 + 56);
  uint64_t v56 = a3 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v57 = (unint64_t)(v21 + 63) >> 6;
  HIDWORD(v62) = enum case for LoadState.loaded(_:);
  char v60 = (void (**)(uint64_t, char *, uint64_t))(v6 + 16);
  uint64_t v61 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v58 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v59 = (uint64_t)&v49 - v18;
  while (1)
  {
    if (v23)
    {
      unint64_t v68 = (v23 - 1) & v23;
      uint64_t v73 = v19;
      unint64_t v24 = __clz(__rbit64(v23)) | (v19 << 6);
      goto LABEL_17;
    }
    BOOL v25 = __OFADD__(v19, 1);
    uint64_t v26 = v19 + 1;
    if (v25)
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v26 >= v57) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v56 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_16:
    unint64_t v68 = (v27 - 1) & v27;
    uint64_t v73 = v26;
    unint64_t v24 = __clz(__rbit64(v27)) + (v26 << 6);
LABEL_17:
    uint64_t v29 = *(void *)(v66 + 48);
    unint64_t v65 = v24;
    uint64_t v30 = *(void *)(v29 + 8 * v24) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    sub_1000B5E24();
    (*v61)(v12, HIDWORD(v62), State);
    sub_1000B5280(&qword_10015DA58, (void (*)(uint64_t))&type metadata accessor for LoadState);
    swift_retain();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v71 == v69 && v72 == v70)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v33 = v63;
      sub_1000B5E24();
      uint64_t v34 = v64;
      (*v60)(v64, v12, State);
      goto LABEL_29;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = v63;
    sub_1000B5E24();
    uint64_t v34 = v64;
    (*v60)(v64, v12, State);
    if (v32)
    {
LABEL_29:
      uint64_t v37 = *v58;
      (*v58)(v34, State);
      sub_1000B5E7C(v33, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v37((uint64_t)v12, State);
LABEL_30:
      uint64_t v19 = v73;
      unint64_t v23 = v68;
      sub_1000B5E7C(v59, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
LABEL_31:
      char v38 = *(unsigned char *)(v30 + *(int *)(v67 + 24));
      uint64_t result = swift_release();
      if ((v38 & 1) == 0)
      {
        *(void *)(v53 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
        BOOL v25 = __OFADD__(v54++, 1);
        if (v25) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v71 == v69 && v72 == v70)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v39 = *v58;
        (*v58)(v34, State);
        sub_1000B5E7C(v33, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        v39((uint64_t)v12, State);
        goto LABEL_30;
      }
      HIDWORD(v55) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = *v58;
      (*v58)(v34, State);
      sub_1000B5E7C(v33, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      v36((uint64_t)v12, State);
      sub_1000B5E7C(v59, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v19 = v73;
      unint64_t v23 = v68;
      if ((v55 & 0x100000000) != 0) {
        goto LABEL_31;
      }
      uint64_t result = swift_release();
    }
  }
  uint64_t v28 = v26 + 1;
  if (v26 + 1 >= v57) {
    goto LABEL_40;
  }
  unint64_t v27 = *(void *)(v56 + 8 * v28);
  if (v27) {
    goto LABEL_15;
  }
  uint64_t v28 = v26 + 2;
  if (v26 + 2 >= v57) {
    goto LABEL_40;
  }
  unint64_t v27 = *(void *)(v56 + 8 * v28);
  if (v27) {
    goto LABEL_15;
  }
  uint64_t v28 = v26 + 3;
  if (v26 + 3 >= v57)
  {
LABEL_40:
    uint64_t v40 = v50;
    uint64_t v41 = v54;
    uint64_t v42 = v66;
    swift_retain();
    sub_10002D684(v53, v40, v41, v42, v43, v44, v45, v46, v49, v50, v51, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v59,
      (uint64_t)v60,
      (uint64_t)v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72);
    uint64_t v48 = v47;
    swift_release();
    return v48;
  }
  unint64_t v27 = *(void *)(v56 + 8 * v28);
  if (v27)
  {
LABEL_15:
    uint64_t v26 = v28;
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v57) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v56 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_16;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000B10DC(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_10011D028(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  sub_1000B1170(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1000B1170(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  v168 = a2;
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  v167 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v166 = (char *)&v145 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  uint64_t v150 = v10;
  if (result < v10)
  {
    Swift::Int v12 = result;
    uint64_t v148 = v2;
    uint64_t v13 = sub_1000039EC(v10 / 2);
    uint64_t v15 = v14;
    uint64_t v170 = v13;
    v146 = a1;
    if (v10 > 0)
    {
      Swift::Int v147 = v12;
      uint64_t v16 = 0;
      uint64_t v17 = *a1;
      uint64_t v149 = *a1 - 8;
      uint64_t v18 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v19 = (char *)v150;
      v161 = v14;
      uint64_t v160 = v17;
      while (1)
      {
        uint64_t v20 = (uint64_t)(v16 + 1);
        uint64_t v169 = (uint64_t)v16;
        if ((uint64_t)(v16 + 1) >= (uint64_t)v19) {
          goto LABEL_24;
        }
        swift_beginAccess();
        uint64_t v21 = (uint64_t)v166;
        sub_1000B5E24();
        swift_beginAccess();
        uint64_t v22 = (uint64_t)v167;
        sub_1000B5E24();
        swift_retain();
        swift_retain();
        int v23 = v168(v21, v22);
        sub_1000B5E7C(v22, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_1000B5E7C(v21, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_release();
        swift_release();
        uint64_t v24 = v169 + 2;
        if (v169 + 2 < (uint64_t)v19)
        {
          v151 = v18;
          uint64_t v25 = v169;
          while (1)
          {
            swift_beginAccess();
            uint64_t v26 = (uint64_t)v166;
            sub_1000B5E24();
            swift_beginAccess();
            uint64_t v27 = (uint64_t)v167;
            sub_1000B5E24();
            swift_retain();
            swift_retain();
            int v28 = v168(v26, v27);
            sub_1000B5E7C(v27, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            sub_1000B5E7C(v26, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
            swift_release();
            swift_release();
            if ((v23 ^ v28)) {
              break;
            }
            uint64_t v29 = v25 + 3;
            ++v25;
            if (v29 >= v150)
            {
              uint64_t v24 = v150;
              goto LABEL_11;
            }
          }
          uint64_t v24 = v25 + 2;
LABEL_11:
          uint64_t v18 = v151;
        }
        if ((v23 & 1) == 0) {
          break;
        }
        uint64_t v16 = (char *)v169;
        uint64_t v17 = v160;
        if (v24 < v169) {
          goto LABEL_203;
        }
        uint64_t v20 = v24;
        if (v169 < v24)
        {
          uint64_t v30 = (uint64_t *)(v149 + 8 * v24);
          uint64_t v31 = v20;
          uint64_t v32 = v169;
          uint64_t v33 = (uint64_t *)(v160 + 8 * v169);
          uint64_t v19 = (char *)v150;
          uint64_t v15 = v161;
          do
          {
            if (v32 != --v31)
            {
              if (!v17) {
                goto LABEL_211;
              }
              uint64_t v34 = *v33;
              uint64_t *v33 = *v30;
              *uint64_t v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
          goto LABEL_22;
        }
        uint64_t v19 = (char *)v150;
        uint64_t v15 = v161;
LABEL_24:
        if (v20 >= (uint64_t)v19) {
          goto LABEL_42;
        }
        if (__OFSUB__(v20, v16)) {
          goto LABEL_202;
        }
        if (v20 - (uint64_t)v16 < v147)
        {
          if (__OFADD__(v169, v147)) {
            goto LABEL_204;
          }
          if (v169 + v147 >= (uint64_t)v19) {
            uint64_t v35 = v19;
          }
          else {
            uint64_t v35 = (char *)(v169 + v147);
          }
          if ((uint64_t)v35 < v169) {
            goto LABEL_205;
          }
          if ((char *)v20 == v35)
          {
            uint64_t v16 = (char *)v169;
            goto LABEL_42;
          }
          v151 = v18;
          uint64_t v36 = (char *)(v149 + 8 * v20);
          v164 = v35;
          do
          {
            v159 = (char *)v20;
            uint64_t v37 = v169;
            v165 = v36;
            do
            {
              swift_beginAccess();
              uint64_t v38 = (uint64_t)v166;
              sub_1000B5E24();
              swift_beginAccess();
              uint64_t v39 = (uint64_t)v167;
              sub_1000B5E24();
              swift_retain();
              swift_retain();
              char v40 = v168(v38, v39);
              sub_1000B5E7C(v39, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
              uint64_t v17 = v160;
              sub_1000B5E7C(v38, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
              swift_release();
              swift_release();
              if ((v40 & 1) == 0) {
                break;
              }
              if (!v17) {
                goto LABEL_207;
              }
              uint64_t v41 = *(void *)v36;
              *(void *)uint64_t v36 = *((void *)v36 + 1);
              *((void *)v36 + 1) = v41;
              v36 -= 8;
              ++v37;
            }
            while (v159 != (char *)v37);
            uint64_t v20 = (uint64_t)(v159 + 1);
            uint64_t v36 = v165 + 8;
          }
          while (v159 + 1 != v164);
          uint64_t v20 = (uint64_t)v164;
          uint64_t v15 = v161;
          uint64_t v18 = v151;
        }
        uint64_t v16 = (char *)v169;
LABEL_42:
        if (v20 < (uint64_t)v16) {
          goto LABEL_197;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v159 = (char *)v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v18 = sub_1000B26B8(0, *((void *)v18 + 2) + 1, 1, v18);
        }
        unint64_t v44 = *((void *)v18 + 2);
        unint64_t v43 = *((void *)v18 + 3);
        unint64_t v45 = v44 + 1;
        if (v44 >= v43 >> 1) {
          uint64_t v18 = sub_1000B26B8((char *)(v43 > 1), v44 + 1, 1, v18);
        }
        *((void *)v18 + 2) = v45;
        uint64_t v46 = v18 + 32;
        uint64_t v47 = (uint64_t *)&v18[16 * v44 + 32];
        uint64_t v48 = v159;
        *uint64_t v47 = v169;
        v47[1] = (uint64_t)v48;
        if (v44)
        {
          v151 = v18;
          v152 = v18 + 32;
          while (1)
          {
            unint64_t v49 = v45 - 1;
            if (v45 >= 4)
            {
              uint64_t v54 = &v46[16 * v45];
              uint64_t v55 = *((void *)v54 - 8);
              uint64_t v56 = *((void *)v54 - 7);
              BOOL v60 = __OFSUB__(v56, v55);
              uint64_t v57 = v56 - v55;
              if (v60) {
                goto LABEL_186;
              }
              uint64_t v59 = *((void *)v54 - 6);
              uint64_t v58 = *((void *)v54 - 5);
              BOOL v60 = __OFSUB__(v58, v59);
              uint64_t v52 = v58 - v59;
              char v53 = v60;
              if (v60) {
                goto LABEL_187;
              }
              unint64_t v61 = v45 - 2;
              uint64_t v62 = &v46[16 * v45 - 32];
              uint64_t v64 = *(void *)v62;
              uint64_t v63 = *((void *)v62 + 1);
              BOOL v60 = __OFSUB__(v63, v64);
              uint64_t v65 = v63 - v64;
              if (v60) {
                goto LABEL_189;
              }
              BOOL v60 = __OFADD__(v52, v65);
              uint64_t v66 = v52 + v65;
              if (v60) {
                goto LABEL_192;
              }
              if (v66 >= v57)
              {
                uint64_t v84 = &v46[16 * v49];
                uint64_t v86 = *(void *)v84;
                uint64_t v85 = *((void *)v84 + 1);
                BOOL v60 = __OFSUB__(v85, v86);
                uint64_t v87 = v85 - v86;
                if (v60) {
                  goto LABEL_196;
                }
                BOOL v77 = v52 < v87;
                goto LABEL_80;
              }
            }
            else
            {
              if (v45 != 3)
              {
                uint64_t v78 = *((void *)v18 + 4);
                uint64_t v79 = *((void *)v18 + 5);
                BOOL v60 = __OFSUB__(v79, v78);
                uint64_t v71 = v79 - v78;
                char v72 = v60;
                goto LABEL_74;
              }
              uint64_t v51 = *((void *)v18 + 4);
              uint64_t v50 = *((void *)v18 + 5);
              BOOL v60 = __OFSUB__(v50, v51);
              uint64_t v52 = v50 - v51;
              char v53 = v60;
            }
            if (v53) {
              goto LABEL_188;
            }
            unint64_t v61 = v45 - 2;
            uint64_t v67 = &v46[16 * v45 - 32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v70 = __OFSUB__(v68, v69);
            uint64_t v71 = v68 - v69;
            char v72 = v70;
            if (v70) {
              goto LABEL_191;
            }
            uint64_t v73 = &v46[16 * v49];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v60 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v60) {
              goto LABEL_194;
            }
            if (__OFADD__(v71, v76)) {
              goto LABEL_195;
            }
            if (v71 + v76 >= v52)
            {
              BOOL v77 = v52 < v76;
LABEL_80:
              if (v77) {
                unint64_t v49 = v61;
              }
              goto LABEL_82;
            }
LABEL_74:
            if (v72) {
              goto LABEL_190;
            }
            uint64_t v80 = &v46[16 * v49];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v60 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v60) {
              goto LABEL_193;
            }
            if (v83 < v71) {
              goto LABEL_153;
            }
LABEL_82:
            if (v49 - 1 >= v45)
            {
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
              goto LABEL_198;
            }
            if (!v17) {
              goto LABEL_209;
            }
            unint64_t v155 = v49 - 1;
            v88 = &v46[16 * v49 - 16];
            uint64_t v89 = *(void *)v88;
            int64_t v156 = v49;
            uint64_t v90 = &v46[16 * v49];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            uint64_t v157 = v89;
            uint64_t v93 = (char *)(v17 + 8 * v89);
            uint64_t v94 = (char *)(v17 + 8 * v92);
            uint64_t v158 = v91;
            uint64_t v95 = v94 - v93;
            uint64_t v96 = (v94 - v93) / 8;
            v164 = (char *)(v17 + 8 * v91);
            uint64_t v97 = v164 - v94;
            uint64_t v98 = (v164 - v94) / 8;
            uint64_t v169 = (uint64_t)v93;
            v154 = v90;
            if (v96 >= v98)
            {
              if (v97 <= -8) {
                goto LABEL_213;
              }
              BOOL v112 = v15 < v164 && v15 == v94;
              uint64_t v113 = v158;
              if (!v112)
              {
                char v114 = v94;
                memmove(v15, v94, 8 * v98);
                uint64_t v94 = v114;
              }
              v101 = &v15[8 * v98];
              if (v157 >= v92 || v97 < 8)
              {
                uint64_t v116 = v157;
                v103 = v15;
                goto LABEL_140;
              }
              v153 = v88;
              v117 = (char *)(v149 + 8 * v113);
              while (2)
              {
                v165 = v101;
                v164 = v94;
                uint64_t v118 = v101 - 8;
                v163 = v117 + 8;
                v162 = v94 - 8;
                swift_beginAccess();
                uint64_t v119 = (uint64_t)v166;
                sub_1000B5E24();
                swift_beginAccess();
                uint64_t v120 = (uint64_t)v167;
                sub_1000B5E24();
                swift_retain();
                swift_retain();
                char v121 = v168(v119, v120);
                sub_1000B5E7C(v120, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                sub_1000B5E7C(v119, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_release();
                swift_release();
                if (v121)
                {
                  BOOL v122 = v163 != v164 || v117 >= v164;
                  uint64_t v123 = v162;
                  uint64_t v94 = v162;
                  uint64_t v15 = v161;
                  unint64_t v124 = v169;
                  v101 = v165;
                  if (!v122) {
                    goto LABEL_133;
                  }
                }
                else
                {
                  BOOL v125 = v163 != v165 || v117 >= v165;
                  uint64_t v123 = v118;
                  v101 = v118;
                  uint64_t v15 = v161;
                  uint64_t v94 = v164;
                  unint64_t v124 = v169;
                  if (!v125)
                  {
LABEL_133:
                    v117 -= 8;
                    if (v124 >= (unint64_t)v94 || v15 >= v101)
                    {
                      v103 = v15;
                      goto LABEL_139;
                    }
                    continue;
                  }
                }
                break;
              }
              *(void *)v117 = *(void *)v123;
              goto LABEL_133;
            }
            if (v95 <= -8) {
              goto LABEL_213;
            }
            v153 = v88;
            BOOL v99 = v15 != v93 || v15 >= v94;
            if (v99)
            {
              v100 = v94;
              memmove(v15, (const void *)v169, 8 * v96);
              uint64_t v93 = (char *)v169;
              uint64_t v94 = v100;
            }
            v101 = &v15[8 * v96];
            BOOL v102 = v92 >= v158 || v95 < 8;
            v103 = v15;
            v165 = &v15[8 * v96];
            if (v102)
            {
              uint64_t v15 = v161;
              v103 = v161;
              uint64_t v94 = v93;
            }
            else
            {
              do
              {
                uint64_t v169 = (uint64_t)v93;
                os_log_type_t v104 = v94;
                swift_beginAccess();
                uint64_t v105 = (uint64_t)v166;
                sub_1000B5E24();
                swift_beginAccess();
                uint64_t v106 = (uint64_t)v167;
                sub_1000B5E24();
                swift_retain();
                swift_retain();
                char v107 = v168(v105, v106);
                sub_1000B5E7C(v106, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                sub_1000B5E7C(v105, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
                swift_release();
                swift_release();
                if (v107)
                {
                  v108 = v104;
                  uint64_t v94 = v104 + 8;
                  v109 = (void *)v169;
                  BOOL v110 = v169 == (void)v104;
                }
                else
                {
                  v108 = v103;
                  v109 = (void *)v169;
                  BOOL v110 = v169 == (void)v103;
                  v103 += 8;
                  uint64_t v94 = v104;
                }
                v101 = v165;
                if (!v110) {
                  void *v109 = *(void *)v108;
                }
                uint64_t v93 = (char *)(v109 + 1);
              }
              while (v103 < v101 && v94 < v164);
              uint64_t v94 = v93;
              uint64_t v15 = v161;
            }
LABEL_139:
            uint64_t v18 = v151;
            v88 = v153;
            uint64_t v116 = v157;
            uint64_t v113 = v158;
LABEL_140:
            uint64_t v17 = v160;
            if (v101 - v103 <= -8) {
              goto LABEL_213;
            }
            uint64_t v127 = (v101 - v103) / 8;
            if (v94 != v103 || v94 >= &v103[8 * v127]) {
              memmove(v94, v103, 8 * v127);
            }
            if (v113 < v116) {
              goto LABEL_183;
            }
            int64_t v129 = v156;
            if (v156 > *((void *)v18 + 2)) {
              goto LABEL_184;
            }
            *(void *)v88 = v116;
            uint64_t v46 = v152;
            *(void *)&v152[16 * v155 + 8] = v113;
            unint64_t v130 = *((void *)v18 + 2);
            if (v129 >= (uint64_t)v130) {
              goto LABEL_185;
            }
            unint64_t v45 = v130 - 1;
            memmove(v154, v154 + 16, 16 * (v130 - 1 - v129));
            *((void *)v18 + 2) = v130 - 1;
            if (v130 <= 2) {
              goto LABEL_153;
            }
          }
        }
        unint64_t v45 = 1;
LABEL_153:
        uint64_t v19 = (char *)v150;
        uint64_t v16 = v159;
        if ((uint64_t)v159 >= v150) {
          goto LABEL_166;
        }
      }
      uint64_t v19 = (char *)v150;
      uint64_t v15 = v161;
      uint64_t v17 = v160;
      uint64_t v20 = v24;
LABEL_22:
      uint64_t v16 = (char *)v169;
      goto LABEL_24;
    }
    uint64_t v18 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v45 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_166:
    if (v45 < 2)
    {
LABEL_177:
      swift_bridgeObjectRelease();
      if (v150 >= -1) {
        goto LABEL_180;
      }
      __break(1u);
LABEL_179:
      swift_bridgeObjectRelease();
      if (v150 >= -1)
      {
LABEL_180:
        *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_210;
    }
    uint64_t v138 = *v146;
    while (1)
    {
      unint64_t v139 = v45 - 2;
      if (v45 < 2) {
        break;
      }
      if (!v138) {
        goto LABEL_212;
      }
      uint64_t v140 = *(void *)&v18[16 * v139 + 32];
      uint64_t v141 = *(void *)&v18[16 * v45 + 24];
      uint64_t v142 = v148;
      sub_1000B229C((char *)(v138 + 8 * v140), (char *)(v138 + 8 * *(void *)&v18[16 * v45 + 16]), (char *)(v138 + 8 * v141), v15, v168);
      uint64_t v148 = v142;
      if (v142) {
        goto LABEL_179;
      }
      if (v141 < v140) {
        goto LABEL_199;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = sub_1000B27B0((uint64_t)v18);
      }
      if (v139 >= *((void *)v18 + 2)) {
        goto LABEL_200;
      }
      v143 = &v18[16 * v139 + 32];
      *(void *)v143 = v140;
      *((void *)v143 + 1) = v141;
      unint64_t v144 = *((void *)v18 + 2);
      if (v45 > v144) {
        goto LABEL_201;
      }
      memmove(&v18[16 * v45 + 16], &v18[16 * v45 + 32], 16 * (v144 - v45));
      *((void *)v18 + 2) = v144 - 1;
      unint64_t v45 = v144 - 1;
      if (v144 <= 2) {
        goto LABEL_177;
      }
    }
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 < 0) {
    goto LABEL_206;
  }
  if ((unint64_t)v10 >= 2)
  {
    uint64_t v148 = v2;
    uint64_t v131 = (char *)*a1;
    uint64_t v132 = -1;
    uint64_t v133 = 1;
    uint64_t v169 = *a1;
    uint64_t v134 = (uint64_t)v166;
    do
    {
      v164 = (char *)v133;
      v165 = (char *)v132;
      v163 = v131;
      do
      {
        swift_beginAccess();
        sub_1000B5E24();
        swift_beginAccess();
        uint64_t v135 = (uint64_t)v167;
        sub_1000B5E24();
        swift_retain();
        swift_retain();
        char v136 = v168(v134, v135);
        sub_1000B5E7C(v135, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        sub_1000B5E7C(v134, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
        swift_release();
        Swift::Int result = swift_release();
        if ((v136 & 1) == 0) {
          break;
        }
        if (!v169) {
          goto LABEL_208;
        }
        uint64_t v137 = *(void *)v131;
        *(void *)uint64_t v131 = *((void *)v131 + 1);
        *((void *)v131 + 1) = v137;
        v131 -= 8;
        BOOL v99 = __CFADD__(v132++, 1);
      }
      while (!v99);
      uint64_t v133 = (uint64_t)(v164 + 1);
      uint64_t v131 = v163 + 8;
      uint64_t v132 = (uint64_t)(v165 - 1);
    }
    while (v164 + 1 != (char *)v150);
  }
  return result;
}

uint64_t sub_1000B229C(char *a1, char *a2, char *a3, char *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v46 = a5;
  uint64_t v9 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v45 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  unint64_t v44 = (char *)&v39 - v14;
  uint64_t v15 = (a2 - a1) / 8;
  uint64_t v16 = (a3 - a2) / 8;
  if (v15 >= v16)
  {
    sub_10001D6A0(a2, (a3 - a2) / 8, a4);
    uint64_t v41 = a4;
    uint64_t v17 = &a4[8 * v16];
    if (a3 - a2 < 8 || a1 >= a2)
    {
      a4 = v41;
      goto LABEL_41;
    }
    uint64_t v27 = a3 - 8;
    char v40 = a1;
    uint64_t v28 = (uint64_t)v44;
    while (1)
    {
      unint64_t v47 = (unint64_t)v17;
      uint64_t v48 = a2;
      uint64_t v29 = v17 - 8;
      uint64_t v42 = a2 - 8;
      unint64_t v43 = v27 + 8;
      swift_beginAccess();
      sub_1000B5E24();
      swift_beginAccess();
      uint64_t v30 = (uint64_t)v45;
      sub_1000B5E24();
      swift_retain();
      swift_retain();
      char v31 = v46(v28, v30);
      sub_1000B5E7C(v30, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_1000B5E7C(v28, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release();
      swift_release();
      if (v31)
      {
        BOOL v32 = v43 != v48 || v27 >= v48;
        uint64_t v34 = v41;
        uint64_t v33 = v42;
        a2 = v42;
        uint64_t v35 = v40;
        uint64_t v17 = (char *)v47;
        if (!v32) {
          goto LABEL_36;
        }
      }
      else
      {
        BOOL v36 = v43 != (char *)v47 || (unint64_t)v27 >= v47;
        uint64_t v33 = v29;
        uint64_t v17 = v29;
        uint64_t v35 = v40;
        uint64_t v34 = v41;
        a2 = v48;
        if (!v36) {
          goto LABEL_36;
        }
      }
      *(void *)uint64_t v27 = *(void *)v33;
LABEL_36:
      v27 -= 8;
      if (v17 <= v34 || a2 <= v35)
      {
        a4 = v41;
        goto LABEL_41;
      }
    }
  }
  sub_10001D6A0(a1, (a2 - a1) / 8, a4);
  uint64_t v17 = &a4[8 * v15];
  if (a2 - a1 >= 8 && a2 < a3)
  {
    unint64_t v47 = (unint64_t)&a4[8 * v15];
    unint64_t v43 = a3;
    uint64_t v19 = (uint64_t)v44;
    do
    {
      uint64_t v48 = a2;
      swift_beginAccess();
      sub_1000B5E24();
      swift_beginAccess();
      uint64_t v20 = (uint64_t)v45;
      sub_1000B5E24();
      swift_retain();
      swift_retain();
      char v21 = v46(v19, v20);
      sub_1000B5E7C(v20, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_1000B5E7C(v19, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      swift_release();
      swift_release();
      if (v21)
      {
        uint64_t v22 = v48;
        a2 = v48 + 8;
        BOOL v23 = a1 == v48;
      }
      else
      {
        uint64_t v22 = a4;
        BOOL v23 = a1 == a4;
        a4 += 8;
        a2 = v48;
      }
      uint64_t v17 = (char *)v47;
      uint64_t v24 = v43;
      if (!v23) {
        *(void *)a1 = *(void *)v22;
      }
      a1 += 8;
    }
    while (a4 < v17 && a2 < v24);
  }
  a2 = a1;
LABEL_41:
  sub_10001D6A0(a4, (v17 - a4) / 8, a2);
  return 1;
}

char *sub_1000B26B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003A70(&qword_10015DB40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000B27B0(uint64_t a1)
{
  return sub_1000B26B8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000B27C4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v22 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (!*(void *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      uint64_t v20 = 1;
      goto LABEL_24;
    }
  }
  unint64_t v6 = (uint64_t *)(v22 + 16 * v5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = (void *)(v12 + 16 * v11);
  BOOL v14 = *v13 == v8 && v13[1] == v7;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v10;
    for (unint64_t i = v11 + 1; ; unint64_t i = v17 + 1)
    {
      uint64_t v17 = i & v15;
      if (((*(void *)(v4 + (((i & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v15)) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v12 + 16 * v17);
      BOOL v19 = *v18 == v8 && v18[1] == v7;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_23;
      }
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1000B2950(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  BOOL v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16, v19);
  char v21 = (char *)&v49 - v20;
  unint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = static _HashTable.scale(forCapacity:)();
  if (a4) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = a3;
  }
  if (v27 <= v23) {
    uint64_t v27 = v23;
  }
  if (v27 <= a5) {
    uint64_t v28 = a5;
  }
  else {
    uint64_t v28 = v27;
  }
  if (v28 > 4)
  {
    uint64_t v30 = _HashTable.init(scale:reservedScale:)();
    sub_1000B4808(&v64, a2, (void *)(v30 + 16));
    *a1 = v64;
  }
  else
  {
    uint64_t v29 = a1;
    if (v22 >= 2)
    {
      uint64_t result = sub_1000F596C(0, v22, 0, (uint64_t)_swiftEmptyArrayStorage, v24, v25, v26);
      unint64_t v32 = 0;
      uint64_t v33 = *(void (**)(void, void, void))(v63 + 16);
      unint64_t v34 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
      unint64_t v55 = a2 + v34;
      uint64_t v35 = v63 + 16;
      uint64_t v36 = *(void *)(v63 + 72);
      uint64_t v62 = (uint64_t (**)(char *, uint64_t))(v63 + 8);
      uint64_t v63 = v36;
      char v53 = v14;
      uint64_t v54 = (void (**)(uint64_t, char *, uint64_t))(v35 + 16);
      unint64_t v57 = v34;
      uint64_t v58 = result;
      uint64_t v51 = a1;
      uint64_t v52 = v36 + v34;
      BOOL v60 = v33;
      unint64_t v50 = v22;
      while (1)
      {
        if (v32 == v22) {
          goto LABEL_37;
        }
        v33(v21, v55 + v63 * v32, v10);
        uint64_t v61 = *(void *)(v58 + 16);
        if (v61)
        {
          unint64_t v56 = v32;
          v33(v18, v58 + v57, v10);
          sub_1000B5280(&qword_10015DC20, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          swift_bridgeObjectRetain();
          char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v59 = *v62;
          v59(v18, v10);
          if (v37)
          {
            swift_bridgeObjectRelease();
LABEL_33:
            v59(v21, v10);
            swift_bridgeObjectRelease();
            uint64_t v30 = 0;
            *uint64_t v29 = v56;
            return v30;
          }
          if (v61 != 1)
          {
            uint64_t v38 = v58 + v52;
            uint64_t v39 = 1;
            while (1)
            {
              uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v18, v38, v10);
              uint64_t v40 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                break;
              }
              uint64_t v41 = v21;
              char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
              v59(v18, v10);
              if (v42)
              {
                swift_bridgeObjectRelease();
                uint64_t v29 = v51;
                char v21 = v41;
                goto LABEL_33;
              }
              ++v39;
              v38 += v63;
              char v21 = v41;
              uint64_t v33 = v60;
              if (v40 == v61)
              {
                swift_bridgeObjectRelease();
                unint64_t v22 = v50;
                uint64_t v29 = v51;
                goto LABEL_24;
              }
            }
            __break(1u);
LABEL_37:
            __break(1u);
            return result;
          }
          swift_bridgeObjectRelease();
LABEL_24:
          BOOL v14 = v53;
          unint64_t v32 = v56;
        }
        v33(v14, v21, v10);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v46 = v58;
        }
        else {
          uint64_t v46 = sub_1000F596C(0, *(void *)(v58 + 16) + 1, 1, v58, v43, v44, v45);
        }
        unint64_t v48 = *(void *)(v46 + 16);
        unint64_t v47 = *(void *)(v46 + 24);
        if (v48 >= v47 >> 1) {
          uint64_t v46 = sub_1000F596C(v47 > 1, v48 + 1, 1, v46, v43, v44, v45);
        }
        ++v32;
        *(void *)(v46 + 16) = v48 + 1;
        uint64_t v58 = v46;
        (*v54)(v46 + v57 + v48 * v63, v14, v10);
        uint64_t result = (*v62)(v21, v10);
        uint64_t v33 = v60;
        if (v32 == v22)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    uint64_t v30 = 0;
    *uint64_t v29 = v22;
  }
  return v30;
}

void sub_1000B2E14(unint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = static _HashTable.scale(forCapacity:)();
  if (a4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  if (v12 <= a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v14 = _HashTable.init(scale:reservedScale:)();
    sub_1000B4A40(&v40, a2, (void *)(v14 + 16));
    *a1 = v40;
    return;
  }
  if (v10 < 2)
  {
LABEL_11:
    *a1 = v10;
    return;
  }
  sub_1000F59A0(0, v10, 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = v15;
  unint64_t v17 = 0;
  uint64_t v36 = a1;
  uint64_t v37 = a2 + 32;
  unint64_t v35 = v10;
  while (v17 != v10)
  {
    unint64_t v38 = v17;
    uint64_t v39 = v16;
    uint64_t v18 = v37 + 40 * v17;
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v21 = *(void *)(v18 + 24);
    int v23 = *(unsigned __int8 *)(v18 + 32);
    uint64_t v24 = *(void *)(v16 + 16);
    if (v24)
    {
      uint64_t v25 = (unsigned __int8 *)(v16 + 64);
      while (1)
      {
        uint64_t v27 = *((void *)v25 - 2);
        uint64_t v26 = *((void *)v25 - 1);
        int v28 = *v25;
        BOOL v29 = *((void *)v25 - 4) == v20 && *((void *)v25 - 3) == v19;
        if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_34;
        }
        if (!v26) {
          break;
        }
        if (!v21) {
          goto LABEL_34;
        }
        if (v27 != v22 || v26 != v21)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_34;
          }
LABEL_31:
          if (((v23 ^ v28) & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_34;
        }
        if (v23 == v28)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          *uint64_t v36 = v38;
          return;
        }
LABEL_34:
        v25 += 40;
        if (!--v24)
        {
          unint64_t v10 = v35;
          a1 = v36;
          goto LABEL_36;
        }
      }
      if (v21) {
        goto LABEL_34;
      }
      goto LABEL_31;
    }
LABEL_36:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v31 = *(void *)(v39 + 16);
    unint64_t v32 = *(void *)(v39 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31 >= v32 >> 1)
    {
      sub_1000F59A0(v32 > 1, v31 + 1, 1, v39);
      uint64_t v39 = v34;
    }
    unint64_t v17 = v38 + 1;
    *(void *)(v39 + 16) = v31 + 1;
    uint64_t v16 = v39;
    uint64_t v33 = v39 + 40 * v31;
    *(void *)(v33 + 32) = v20;
    *(void *)(v33 + 40) = v19;
    *(void *)(v33 + 48) = v22;
    *(void *)(v33 + 56) = v21;
    *(unsigned char *)(v33 + 64) = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v38 + 1 == v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  __break(1u);
}

uint64_t sub_1000B3090(void *a1, unint64_t a2, unint64_t a3, char a4, unint64_t *a5)
{
  LOBYTE(v6) = a4;
  int64_t v8 = a2;
  char v53 = a1;
  uint64_t v9 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v11 = static _HashTable.scale(forCapacity:)();
  if (v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a3;
  }
  if (v12 <= v11) {
    uint64_t v12 = v11;
  }
  if (v12 <= (uint64_t)a5) {
    uint64_t v13 = (uint64_t)a5;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 4)
  {
    uint64_t v15 = _HashTable.init(scale:reservedScale:)();
    sub_1000B4C8C((uint64_t *)&v54, v8, (void *)(v15 + 16), v15 + 32);
    *char v53 = v54;
    return v15;
  }
  if (v10 < 2)
  {
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v15 = 0;
    *char v53 = v14;
    return v15;
  }
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  sub_1000B4F2C(v10);
  a5 = &v54;
  uint64_t result = specialized Array._endMutation()();
  if (!v9)
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_24:
    if (v9)
    {
      a3 = 0;
      uint64_t v51 = v8;
      unint64_t v52 = v8 & 0xC000000000000001;
      uint64_t v48 = v8 + 32;
      uint64_t v49 = v8 & 0xFFFFFFFFFFFFFF8;
      uint64_t v50 = v9;
      do
      {
        if (a3 == v9) {
          goto LABEL_60;
        }
        if (v52)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (a3 >= *(void *)(v49 + 16))
          {
            __break(1u);
            goto LABEL_63;
          }
          uint64_t v6 = *(void *)(v48 + 8 * a3);
          swift_retain();
        }
        unint64_t v17 = v54;
        if (v54 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v18) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v18 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v18) {
            goto LABEL_49;
          }
        }
        uint64_t v9 = v17 & 0xC000000000000001;
        if ((v17 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v19 = *(void *)(v17 + 32);
          swift_retain();
        }
        a5 = (unint64_t *)type metadata accessor for InferenceProviderAsset(0);
        sub_1000C9418(v19, v6, v20, v21, v22, v23, v24, v25, v47, v48, v49, v50, v51, v52, (uint64_t)v53, v54, v55, v56, v57,
          v58);
        char v27 = v26;
        swift_release();
        if (v27)
        {
LABEL_57:
          swift_release();
          swift_bridgeObjectRelease_n();
          uint64_t v15 = 0;
          *char v53 = a3;
          return v15;
        }
        if (v18 != 1)
        {
          if (v9)
          {
            uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v34 = *(void *)(v17 + 40);
            swift_retain();
          }
          sub_1000C9418(v34, v6, v28, v29, v30, v31, v32, v33, v47, v48, v49, v50, v51, v52, (uint64_t)v53, v54, v55, v56, v57,
            v58);
          char v36 = v35;
          swift_release();
          if (v36) {
            goto LABEL_57;
          }
          if (v18 != 2)
          {
            uint64_t v37 = 6;
            while (1)
            {
              if (v9)
              {
                uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                uint64_t v44 = *(void *)(v17 + 8 * v37);
                swift_retain();
              }
              int64_t v8 = v37 - 3;
              if (__OFADD__(v37 - 4, 1)) {
                break;
              }
              sub_1000C9418(v44, v6, v38, v39, v40, v41, v42, v43, v47, v48, v49, v50, v51, v52, (uint64_t)v53, v54, v55, v56, v57,
                v58);
              char v46 = v45;
              swift_release();
              if (v46) {
                goto LABEL_57;
              }
              ++v37;
              if (v8 == v18) {
                goto LABEL_49;
              }
            }
            __break(1u);
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
        }
LABEL_49:
        swift_bridgeObjectRelease();
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++a3;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        a5 = &v54;
        specialized Array._endMutation()();
        uint64_t result = swift_release();
        uint64_t v9 = v50;
        int64_t v8 = v51;
      }
      while (a3 != v50);
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = 0;
    *char v53 = v9;
    return v15;
  }
  if (v8 < 0) {
    a5 = (unint64_t *)v8;
  }
  else {
    a5 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_24;
  }
LABEL_63:
  __break(1u);
  return result;
}

void *sub_1000B349C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v8 = sub_100044784();
    uint64_t v9 = (void *)a5(v8);
    goto LABEL_9;
  }
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_1000B3590(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v71 = a2;
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return result;
  }
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  uint64_t v70 = result;
  uint64_t result = swift_unknownObjectRetain();
  while (v7 < v5)
  {
    uint64_t v8 = *(void *)(v71 + 8 * v7);
    uint64_t v9 = v6[1];
    uint64_t v10 = *(void *)(v9 + 16);
    if (*v6)
    {
      swift_retain();
      swift_retain();
      sub_100118D6C();
      char v12 = v11;
      swift_release();
      if ((v12 & 1) == 0) {
        goto LABEL_35;
      }
    }
    else if (v10)
    {
      type metadata accessor for InferenceProviderAsset(0);
      swift_retain();
      uint64_t v13 = swift_retain();
      sub_1000C9418(v13, v8, v14, v15, v16, v17, v18, v19, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80);
      char v21 = v20;
      swift_release();
      if (v21) {
        goto LABEL_35;
      }
      if (v10 != 1)
      {
        uint64_t v22 = swift_retain();
        sub_1000C9418(v22, v8, v23, v24, v25, v26, v27, v28, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80);
        char v30 = v29;
        swift_release();
        if (v30) {
          goto LABEL_35;
        }
        if (v10 != 2)
        {
          uint64_t v31 = swift_retain();
          sub_1000C9418(v31, v8, v32, v33, v34, v35, v36, v37, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
            v80);
          char v39 = v38;
          swift_release();
          if (v39) {
            goto LABEL_35;
          }
          if (v10 != 3)
          {
            uint64_t v49 = swift_retain();
            sub_1000C9418(v49, v8, v50, v51, v52, v53, v54, v55, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
              v80);
            char v57 = v56;
            swift_release();
            if (v57) {
              goto LABEL_35;
            }
            uint64_t v58 = v10 - 4;
            uint64_t v59 = v9 + 64;
            while (v58)
            {
              v59 += 8;
              uint64_t v60 = swift_retain();
              sub_1000C9418(v60, v8, v61, v62, v63, v64, v65, v66, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
                v80);
              char v68 = v67;
              swift_release();
              --v58;
              if (v68) {
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    else
    {
      swift_retain();
    }
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v41 = *v6;
    uint64_t v40 = v6[1];
    unint64_t v42 = *(void *)(v40 + 16);
    if (*v6)
    {
      swift_beginAccess();
      if (static _HashTable.maximumCapacity(forScale:)() >= (uint64_t)v42)
      {
        uint64_t result = swift_isUniquelyReferenced_native();
        uint64_t v48 = *v6;
        if (!result)
        {
          if (!v48) {
            goto LABEL_45;
          }
          uint64_t v48 = _HashTable.copy()();
          uint64_t result = swift_release();
          *uint64_t v6 = v48;
        }
        if (!v48) {
          goto LABEL_44;
        }
        _HashTable.UnsafeHandle.subscript.setter();
      }
      else
      {
        uint64_t v43 = *(void *)(v41 + 24) & 0x3FLL;
        if (v42 > 0xF || v43 != 0) {
          goto LABEL_26;
        }
        swift_release();
        *uint64_t v6 = 0;
      }
    }
    else if (v42 > 0xF)
    {
      uint64_t v43 = 0;
LABEL_26:
      uint64_t v45 = static _HashTable.scale(forCapacity:)();
      if (v43 <= v45) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = v43;
      }
      uint64_t v47 = sub_1001190B0(v40, v46, 0, v43);
      swift_release();
      *uint64_t v6 = v47;
    }
LABEL_35:
    ++v7;
    uint64_t result = swift_release();
    if (v7 == v5) {
      return swift_unknownObjectRelease();
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000B38C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    __chkstk_darwin(a1, a2);
    uint64_t v6 = 0;
    __chkstk_darwin((unint64_t)(v3 + 63) >> 6, v4);
    static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)();
    __break(1u);
    uint64_t result = sub_1000B5AB4(0, v6);
    __break(1u);
  }
  else
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      sub_100117074((uint64_t)_swiftEmptyArrayStorage);
    }
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t sub_1000B3A24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v80 = a3;
  Swift::UInt v87 = *(void *)(a3 + 16);
  uint64_t v83 = a1;
  _UnsafeBitSet.insertAll(upTo:)(v87);
  if ((a4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1000B5280(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    Set.Iterator.init(_cocoa:)();
    a4 = v88;
    uint64_t v85 = v89;
    uint64_t v6 = v90;
    int64_t v7 = v91;
    unint64_t v8 = v92;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
    uint64_t v85 = a4 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a4 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  uint64_t v82 = a4 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v78 = v6;
  int64_t v84 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v86 = a2;
  uint64_t v75 = v80 + 64;
  uint64_t v76 = v87 - 4;
  uint64_t v81 = &type metadata for Swift.AnyObject[8];
  uint64_t v79 = v87;
  while (1)
  {
    int64_t v12 = v7;
    if (a4 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
      {
        uint64_t v15 = v86;
LABEL_56:
        sub_10002EAF0();
        uint64_t v70 = *v83;
        uint64_t v71 = v83[1];
        uint64_t v72 = sub_1000B4020();
        swift_retain();
        swift_retain();
        *(void *)&long long v94 = v70;
        *((void *)&v94 + 1) = v71;
        return sub_1000B4028(v94, v79, 0, v72, v15, v80);
      }
      type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v16 = v93;
      swift_unknownObjectRelease();
      uint64_t v15 = v86;
      if (!v93) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v7 << 6);
        uint64_t v15 = v86;
      }
      else
      {
        int64_t v17 = v7 + 1;
        uint64_t v15 = v86;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_60;
        }
        if (v17 >= v84) {
          goto LABEL_56;
        }
        unint64_t v18 = *(void *)(v85 + 8 * v17);
        ++v7;
        if (!v18)
        {
          int64_t v7 = v12 + 2;
          if (v12 + 2 >= v84) {
            goto LABEL_56;
          }
          unint64_t v18 = *(void *)(v85 + 8 * v7);
          if (!v18)
          {
            int64_t v7 = v12 + 3;
            if (v12 + 3 >= v84) {
              goto LABEL_56;
            }
            unint64_t v18 = *(void *)(v85 + 8 * v7);
            if (!v18)
            {
              int64_t v7 = v12 + 4;
              if (v12 + 4 >= v84) {
                goto LABEL_56;
              }
              unint64_t v18 = *(void *)(v85 + 8 * v7);
              if (!v18)
              {
                int64_t v7 = v12 + 5;
                if (v12 + 5 >= v84) {
                  goto LABEL_56;
                }
                unint64_t v18 = *(void *)(v85 + 8 * v7);
                if (!v18)
                {
                  int64_t v19 = v12 + 6;
                  while (v19 < v84)
                  {
                    unint64_t v18 = *(void *)(v85 + 8 * v19++);
                    if (v18)
                    {
                      int64_t v7 = v19 - 1;
                      goto LABEL_29;
                    }
                  }
                  goto LABEL_56;
                }
              }
            }
          }
        }
LABEL_29:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v14 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      uint64_t v16 = *(void *)(*(void *)(a4 + 48) + 8 * v14);
      swift_retain();
      if (!v16) {
        goto LABEL_56;
      }
    }
    uint64_t v20 = a4;
    if (!v15) {
      break;
    }
    swift_retain();
    sub_100118D6C();
    Swift::UInt v22 = v21;
    char v24 = v23;
    swift_release();
    if ((v24 & 1) == 0 && (v22 & 0x8000000000000000) == 0) {
      goto LABEL_50;
    }
LABEL_51:
    swift_release();
    a4 = v20;
  }
  if (!v87) {
    goto LABEL_51;
  }
  type metadata accessor for InferenceProviderAsset(0);
  uint64_t v25 = swift_retain();
  sub_1000C9418(v25, v16, v26, v27, v28, v29, v30, v31, v74, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84,
    v85);
  char v33 = v32;
  swift_release();
  Swift::UInt v22 = 0;
  if (v33) {
    goto LABEL_50;
  }
  if (v87 == 1) {
    goto LABEL_51;
  }
  uint64_t v34 = swift_retain();
  sub_1000C9418(v34, v16, v35, v36, v37, v38, v39, v40, v74, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84,
    v85);
  char v42 = v41;
  swift_release();
  if (v42)
  {
    Swift::UInt v22 = 1;
    goto LABEL_50;
  }
  if (v87 == 2) {
    goto LABEL_51;
  }
  uint64_t v43 = swift_retain();
  sub_1000C9418(v43, v16, v44, v45, v46, v47, v48, v49, v74, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84,
    v85);
  char v51 = v50;
  swift_release();
  if (v51)
  {
    Swift::UInt v22 = 2;
    goto LABEL_50;
  }
  if (v87 == 3) {
    goto LABEL_51;
  }
  uint64_t v52 = swift_retain();
  sub_1000C9418(v52, v16, v53, v54, v55, v56, v57, v58, v74, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84,
    v85);
  char v60 = v59;
  swift_release();
  if ((v60 & 1) == 0)
  {
    uint64_t v61 = 0;
    while (v76 != v61)
    {
      uint64_t v62 = swift_retain();
      sub_1000C9418(v62, v16, v63, v64, v65, v66, v67, v68, v74, v75, v76, v77, v78, v79, v80, (uint64_t)v81, v82, (uint64_t)v83, v84,
        v85);
      HIDWORD(v74) = v69;
      swift_release();
      ++v61;
      if ((v74 & 0x100000000) != 0)
      {
        Swift::UInt v22 = v61 + 3;
        if (v61 + 3 < 0) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
    }
    goto LABEL_51;
  }
  Swift::UInt v22 = 3;
LABEL_50:
  if (!_UnsafeBitSet.remove(_:)(v22)) {
    goto LABEL_51;
  }
  if (v79 != 1)
  {
    --v79;
    goto LABEL_51;
  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
    swift_release();
    sub_10002EAF0();
    return 0;
  }
LABEL_60:
  sub_100117074((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  sub_10002EAF0();
  return 0;
}

void *sub_1000B3FC4(uint64_t a1, uint64_t *a2, void *(*a3)(void *__return_ptr))
{
  uint64_t result = a3(v8);
  if (!v3)
  {
    uint64_t v6 = v8[0];
    uint64_t v7 = v8[1];
    uint64_t result = (void *)sub_1000B5AB4(*a2, a2[1]);
    *a2 = v6;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1000B4020()
{
  return 0;
}

uint64_t sub_1000B4028(long long a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5;
  if (a3)
  {
    if ((void)a1 && *((void *)&a1 + 1))
    {
      a2 = 0;
      uint64_t v10 = 8 * *((void *)&a1 + 1);
      uint64_t v11 = (int8x8_t *)a1;
      while (1)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(*v11);
        v12.i16[0] = vaddlv_u8(v12);
        BOOL v13 = __OFADD__(a2, v12.u32[0]);
        a2 += v12.u32[0];
        if (v13) {
          break;
        }
        ++v11;
        v10 -= 8;
        if (!v10) {
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_11;
  }
LABEL_7:
  if (!a2)
  {
LABEL_11:
    uint64_t v14 = sub_1000B4210(a4, 0);
    swift_release();
    swift_release();
    uint64_t v7 = v14;
    goto LABEL_24;
  }
  if (a2 == *(void *)(a6 + 16))
  {
    if (a5)
    {
      swift_beginAccess();
      *(void *)&a1 = static _HashTable.maximumCapacity(forScale:)();
    }
    else
    {
      *(void *)&a1 = 15;
    }
    if (__OFSUB__((void)a1, a2)) {
      goto LABEL_29;
    }
    if ((uint64_t)a1 - a2 < a4)
    {
      *(void *)&a1 = a2 + a4;
      if (__OFADD__(a2, a4))
      {
LABEL_30:
        __break(1u);
        return a1;
      }
      sub_1000B4528(a1, 0);
    }
  }
  else
  {
    *(void *)&a1 = a2 + a4;
    if (__OFADD__(a2, a4))
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v15 = sub_1000B4210(a1, 0);
    *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
    if ((BYTE8(a1) & 1) == 0)
    {
      while ((a1 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)a1 >= *(void *)(a6 + 16)) {
          goto LABEL_27;
        }
        swift_retain();
        sub_1000B4400();
        swift_release();
        *(Swift::UInt_optional *)&a1 = _UnsafeBitSet.Iterator.next()();
        if (BYTE8(a1)) {
          goto LABEL_23;
        }
      }
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_23:
    swift_release();
    swift_release();
    uint64_t v7 = v15;
  }
LABEL_24:
  *(void *)&a1 = v7;
  return a1;
}

uint64_t sub_1000B4210(uint64_t a1, char a2)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    sub_100117074((uint64_t)_swiftEmptyArrayStorage);
  }
  sub_1000B4528(a1, a2 & 1);
  return 0;
}

uint64_t sub_1000B426C(long long *a1)
{
  uint64_t v2 = v1;
  long long v17 = *a1;
  sub_1000B6AC8((uint64_t)(a1 + 1), (uint64_t)v16, &qword_10015DC30);
  uint64_t v6 = v1[1];
  uint64_t v4 = v1 + 1;
  uint64_t v5 = v6;
  sub_1000B6B28((uint64_t)&v17);
  sub_1000B6B28((uint64_t)v16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v4 = v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10001EE5C(0, *(void *)(v5 + 16) + 1, 1);
    uint64_t v5 = *v4;
  }
  unint64_t v9 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v5 + 24);
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_10001EE5C((char *)(v8 > 1), v9 + 1, 1);
    uint64_t v5 = *v4;
  }
  *(void *)(v5 + 16) = v9 + 1;
  uint64_t v10 = v5 + 40 * v9;
  long long v11 = *a1;
  long long v12 = a1[1];
  *(unsigned char *)(v10 + 64) = *((unsigned char *)a1 + 32);
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  v2[1] = v5;
  unint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *v2;
  if (*v2)
  {
    sub_100043D2C();
    if (static _HashTable.maximumCapacity(forScale:)() < (uint64_t)v13)
    {
      if (v13 <= 0xF && (*(void *)(v14 + 24) & 0x3FLL) == 0)
      {
        uint64_t result = swift_release();
        uint64_t *v2 = 0;
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_100118E78();
    uint64_t v15 = *v2;
    if (*v2)
    {
      swift_retain();
      sub_1000B4668((void *)(v15 + 16));
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else if (v13 > 0xF)
  {
LABEL_11:
    static _HashTable.scale(forCapacity:)();
    return sub_100118EC8();
  }
  return result;
}

uint64_t sub_1000B4400()
{
  uint64_t v1 = v0;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v3 = *v0;
  unint64_t v4 = *(void *)(v0[1] + 16);
  if (*v1)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() < (uint64_t)v4)
    {
      if (v4 <= 0xF && (*(void *)(v3 + 24) & 0x3FLL) == 0)
      {
        uint64_t result = swift_release();
        *uint64_t v1 = 0;
        return result;
      }
      goto LABEL_10;
    }
    uint64_t result = sub_100118E78();
    uint64_t v6 = *v1;
    if (*v1)
    {
      swift_retain();
      sub_1000B4738((void *)(v6 + 16));
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else if (v4 > 0xF)
  {
LABEL_10:
    static _HashTable.scale(forCapacity:)();
    return sub_100118F20();
  }
  return result;
}

uint64_t sub_1000B4528(uint64_t result, char a2)
{
  if (result < 0) {
    goto LABEL_24;
  }
  uint64_t v3 = v2;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *v2;
  if (*v2)
  {
    swift_beginAccess();
    uint64_t v6 = *(void *)(v5 + 16) & 0x3FLL;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = static _HashTable.scale(forCapacity:)();
  uint64_t v8 = v7;
  if (a2) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v5 && (a2 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v5 + 24) & 0x3FLL;
  }
  if (v6 < v8) {
    return sub_100118F20();
  }
  if (v9 > v8) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = static _HashTable.scale(forCapacity:)();
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 < v6) {
    return sub_100118F20();
  }
  uint64_t result = sub_100118E78();
  uint64_t v11 = *v3;
  if (!v11)
  {
    if (!v9) {
      return result;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t result = swift_beginAccess();
  if ((*(void *)(v11 + 24) & 0x3FLL) != v9) {
    *(void *)(v11 + 24) = *(void *)(v11 + 24) & 0xFFFFFFFFFFFFFFC0 | v9 & 0x3F;
  }
  return result;
}

Swift::Int sub_1000B4668(void *a1)
{
  Hasher.init(_seed:)();
  AssetInferenceProvider.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  if (__OFSUB__(1 << *a1, 1))
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)())
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    return _HashTable.BucketIterator.currentValue.setter();
  }
  return result;
}

Swift::Int sub_1000B4738(void *a1)
{
  Hasher.init(_seed:)();
  sub_1000C95D4();
  Swift::Int result = Hasher._finalize()();
  if (__OFSUB__(1 << *a1, 1))
  {
    __break(1u);
  }
  else
  {
    if (_HashTable.UnsafeHandle._startIterator(bucket:)())
    {
      while (1)
        _HashTable.BucketIterator.advance()();
    }
    return _HashTable.BucketIterator.currentValue.setter();
  }
  return result;
}

unint64_t sub_1000B4808(unint64_t *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
LABEL_10:
    *a1 = v3;
    return 1;
  }
  type metadata accessor for InferenceProviderDescriptor();
  sub_1000B5280(&qword_10015DC28, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
  unint64_t v5 = 0;
  while (2)
  {
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    if (!__OFSUB__(1 << *a3, 1))
    {
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      while (1)
      {
        unint64_t result = _HashTable.BucketIterator.currentValue.getter();
        if (v7) {
          break;
        }
        if (result >= v3)
        {
          __break(1u);
          goto LABEL_14;
        }
        sub_1000B5280(&qword_10015DC20, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          unint64_t result = 0;
          *a1 = v5;
          return result;
        }
        _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter();
      if (++v5 != v3) {
        continue;
      }
      goto LABEL_10;
    }
    break;
  }
LABEL_14:
  __break(1u);
  return result;
}

unint64_t sub_1000B4A40(unint64_t *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
LABEL_25:
    *a1 = v3;
    return 1;
  }
  unint64_t v4 = a3;
  unint64_t v5 = 0;
  uint64_t v6 = a2 + 32;
  unint64_t v22 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v7 = v6 + 40 * v5;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AssetInferenceProvider.hash(into:)();
    unint64_t result = Hasher._finalize()();
    if (__OFSUB__(1 << *v4, 1)) {
      goto LABEL_29;
    }
    unint64_t v23 = v5;
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v3 = v22;
    unint64_t result = _HashTable.BucketIterator.currentValue.getter();
    if ((v9 & 1) == 0) {
      break;
    }
LABEL_24:
    _HashTable.BucketIterator.currentValue.setter();
    unint64_t v5 = v23 + 1;
    unint64_t v4 = a3;
    if (v23 + 1 == v22) {
      goto LABEL_25;
    }
  }
  while (result < v22)
  {
    uint64_t v10 = v6 + 40 * result;
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v11 = *(void *)(v10 + 24);
    int v13 = *(unsigned __int8 *)(v10 + 32);
    uint64_t v15 = *(void *)(v7 + 16);
    uint64_t v14 = *(void *)(v7 + 24);
    int v16 = *(unsigned __int8 *)(v7 + 32);
    BOOL v17 = *(void *)v10 == *(void *)v7 && *(void *)(v10 + 8) == *(void *)(v7 + 8);
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_23;
    }
    if (!v11)
    {
      if (v14) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    if (!v14) {
      goto LABEL_23;
    }
    if (v12 != v15 || v11 != v14)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_23;
      }
LABEL_20:
      if (((v13 ^ v16) & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v13 == v16)
    {
LABEL_26:
      unint64_t result = 0;
      *a1 = v23;
      return result;
    }
LABEL_23:
    _HashTable.BucketIterator.advance()();
    unint64_t result = _HashTable.BucketIterator.currentValue.getter();
    if (v19) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000B4C8C(uint64_t *a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v26 = a4;
  unint64_t v23 = a1;
  if (a2 >> 62) {
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v6) {
      goto LABEL_20;
    }
    uint64_t v7 = 0;
    unint64_t v8 = a2 & 0xC000000000000001;
    uint64_t v27 = a2 + 32;
    uint64_t v24 = v6;
    uint64_t v25 = (uint64_t)a3;
    while (2)
    {
      if (v7 == v6)
      {
LABEL_24:
        __break(1u);
      }
      else
      {
        sub_10011671C(v7, v8 == 0);
        if (v8) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        Hasher.init(_seed:)();
        sub_1000C95D4();
        Hasher._finalize()();
        if (!__OFSUB__(1 << *a3, 1))
        {
          _HashTable.UnsafeHandle._startIterator(bucket:)();
          swift_release();
          while (1)
          {
            unint64_t v9 = _HashTable.BucketIterator.currentValue.getter();
            if (v10) {
              break;
            }
            if (v8)
            {
              uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if ((v9 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_23:
                __break(1u);
                goto LABEL_24;
              }
              if (v9 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_23;
              }
              uint64_t v11 = *(void *)(v27 + 8 * v9);
              uint64_t v12 = *(void *)(v27 + 8 * v7);
              swift_retain();
              swift_retain();
            }
            type metadata accessor for InferenceProviderAsset(0);
            sub_1000C9418(v11, v12, v13, v14, v15, v16, v17, v18, v22, (uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v31, v32,
              v33);
            char v20 = v19;
            swift_release();
            swift_release();
            if (v20)
            {
              uint64_t result = 0;
              *unint64_t v23 = v7;
              return result;
            }
            _HashTable.BucketIterator.advance()();
          }
          _HashTable.BucketIterator.currentValue.setter();
          ++v7;
          uint64_t v6 = v24;
          a3 = (void *)v25;
          if (v7 != v24) {
            continue;
          }
LABEL_20:
          *unint64_t v23 = v6;
          return 1;
        }
      }
      break;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  while ((v6 & 0x8000000000000000) == 0);
  __break(1u);
  return result;
}

uint64_t sub_1000B4F2C(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_1000B4FF0()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  unint64_t v3 = (uint64_t *)sub_1000B9084();
  return sub_100099A30(v3, v4, v5);
}

uint64_t sub_1000B5088(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000E1FC;
  return sub_100074A04(a1, a2, v10, a4, a5);
}

uint64_t sub_1000B5150()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_1000B7D7C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_1000B7144();
  sub_1000B7440();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000B51E8()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = (uint64_t *)sub_1000B9084();
  return sub_100099EF0(v3, v4, v5);
}

uint64_t sub_1000B5280(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B52C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B532C()
{
  unint64_t result = qword_10015DA48;
  if (!qword_10015DA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015DA48);
  }
  return result;
}

uint64_t sub_1000B5378(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10000ED54;
  return sub_1000750A4(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_1000B5448()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B5490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000086AC(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10000ED54;
  sub_10000EE94();
  sub_10002FEAC();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1000B5538()
{
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_100008678();
  swift_release();
  swift_release();
  sub_100043924();
  v0();
  sub_1000BA08C();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000B55E4()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10002FA4C(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_1000B73AC(v1);
  void *v2 = v3;
  v2[1] = sub_10000ED54;
  sub_1000B9F2C();
  sub_10002FE64();
  return sub_100095398(v4, v5, v6, v7, v8);
}

uint64_t sub_1000B56BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B56FC()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = (uint64_t *)sub_1000B9084();
  return sub_100095B48(v3, v4, v5);
}

uint64_t sub_1000B5794()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B57D0()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  uint64_t v3 = sub_10000875C();
  return sub_1000A22F8(v3, v4, v5, v6);
}

uint64_t sub_1000B5860(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_retain();
    swift_retain();
    uint64_t v4 = 0;
    char v5 = 1;
    do
    {
      uint64_t v6 = *(void *)(a2 + 8 * v4 + 32);
      swift_retain();
      if ((v5 & 1) == 0)
      {
        v7._countAndFlagsBits = 8236;
        v7._object = (void *)0xE200000000000000;
        String.append(_:)(v7);
      }
      ++v4;
      sub_100003A70(&qword_10015B210);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_100128650;
      *(void *)(v8 + 56) = type metadata accessor for InferenceProviderAsset(0);
      *(void *)(v8 + 32) = v6;
      swift_retain();
      print<A>(_:separator:terminator:to:)();
      swift_release();
      swift_bridgeObjectRelease();
      char v5 = 0;
    }
    while (v2 != v4);
    swift_release();
    swift_release();
  }
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 91;
}

uint64_t sub_1000B59BC()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_1000B880C();
  return sub_100087980();
}

uint64_t sub_1000B5A44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_1000B3A24(a1, a2, a3, *a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

uint64_t sub_1000B5A74@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000B5A44(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

void *sub_1000B5A94(uint64_t a1)
{
  return sub_1000B3FC4(a1, *(uint64_t **)(v1 + 16), *(void *(**)(void *__return_ptr))(v1 + 24));
}

uint64_t sub_1000B5AB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B5AF8(void *a1)
{
  return sub_1000A2034(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000B5B1C()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_1000A6298(v3, v4, v5, v6);
}

uint64_t sub_1000B5BAC()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_1000B880C();
  return sub_100087980();
}

uint64_t sub_1000B5C34(void *a1)
{
  return sub_1000A6004(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000B5C58()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_10009B214(v3, v4, v5, v6);
}

uint64_t sub_1000B5CE8(uint64_t a1)
{
  return sub_1000A1408(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000B5CF0()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_1000B880C();
  return sub_100087980();
}

uint64_t sub_1000B5D78(void *a1)
{
  return sub_10009AE40(a1) & 1;
}

uint64_t sub_1000B5D98()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_100044474();
  return sub_10008D0AC();
}

uint64_t sub_1000B5E24()
{
  uint64_t v1 = sub_1000308FC();
  v2(v1);
  sub_10002FC6C();
  sub_100030274();
  v3();
  return v0;
}

uint64_t sub_1000B5E7C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FC6C();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_1000B5ED4()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_100008130(v0 + 32);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000B5F24()
{
  sub_100030014();
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FE64();
  return sub_100089B40(v3, v4, v5, v6, v7);
}

uint64_t sub_1000B5FD4()
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10002FEAC();
  return sub_100089FA8(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000B6090()
{
  uint64_t v1 = *(void *)(type metadata accessor for ModelCatalogAsset(0) - 8);
  unint64_t v2 = (*(void *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for AssetCost();
  sub_10002FC6C();
  sub_10000EFBC();
  v3();
  sub_100008130(v0 + v2);
  sub_1000BA08C();

  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_1000B61AC()
{
  sub_1000B7730();
  sub_10000F01C();
  uint64_t v0 = type metadata accessor for ModelCatalogAsset(0);
  sub_10002FA4C(v0);
  uint64_t v1 = swift_task_alloc();
  unint64_t v2 = (void *)sub_1000086AC(v1);
  void *v2 = v3;
  v2[1] = sub_10000ED54;
  sub_10000EE94();
  sub_1000B7440();
  return sub_10008A928(v4);
}

uint64_t sub_1000B6288(uint64_t *a1)
{
  return sub_100089670(a1, *(void **)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000B62A8()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_1000B880C();
  return sub_100088454(v3, v4);
}

uint64_t sub_1000B6330()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_1000B880C();
  return sub_100087980();
}

uint64_t sub_1000B63B8(uint64_t a1)
{
  return sub_100086BEC(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1000B63D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAssetManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B643C()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = (uint64_t *)sub_100044474();
  return sub_100086718(v3, v4);
}

void sub_1000B64C8()
{
}

void sub_1000B64D0()
{
}

void sub_1000B6518()
{
}

uint64_t sub_1000B6520(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000B6570(uint64_t *a1)
{
  sub_100084020(a1, *(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000B658C()
{
}

void sub_1000B65A8()
{
}

uint64_t sub_1000B65F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FC6C();
  sub_100030274();
  v4();
  return a2;
}

uint64_t sub_1000B664C()
{
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_100008678();
  uint64_t v33 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ((v33 + 32) & ~v33) + *(void *)(v2 + 64);
  uint64_t v4 = sub_100003A70(&qword_10015BAA8);
  sub_10002FA4C(v4);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v6) & ~v6;
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = sub_100003A70(&qword_10015DA90);
  sub_10002FA4C(v10);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v7 + v9 + v12) & ~v12;
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v16);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v13 + v15 + v18;
  uint64_t v32 = *(void *)(v20 + 64);
  swift_release();
  swift_release();
  sub_100043FA8();
  v21();
  uint64_t v22 = sub_100003A70(&qword_10015B408);
  if (!sub_1000B8EAC(v22))
  {
    sub_10002FC6C();
    uint64_t v23 = sub_1000B9D30();
    v24(v23);
  }
  uint64_t v25 = sub_100003A70(&qword_10015B9A0);
  if (!sub_1000B8EAC(v25))
  {
    sub_10002FC6C();
    uint64_t v26 = sub_1000B9D30();
    v27(v26);
  }
  uint64_t v28 = type metadata accessor for AuditToken();
  if (!sub_1000B8EAC(v28))
  {
    sub_10002FC6C();
    uint64_t v29 = sub_1000B9D30();
    v30(v29);
  }

  return _swift_deallocObject(v0, v32 + (v19 & ~v18) + 2, v33 | v6 | v12 | v18 | 7);
}

uint64_t sub_1000B6880()
{
  uint64_t v0 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10002FA4C(v0);
  uint64_t v1 = sub_100003A70(&qword_10015BAA8);
  sub_10002FA4C(v1);
  uint64_t v2 = sub_100003A70(&qword_10015DA90);
  sub_10002FA4C(v2);
  uint64_t v3 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v3);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000B73AC(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10000ED54;
  sub_1000B9F2C();
  sub_1000307C8();
  return sub_10007D05C(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000B6A34()
{
  sub_1000B7730();
  sub_10000F01C();
  sub_1000B7D7C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  sub_1000B7144();
  sub_1000B7440();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000B6AC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FC6C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000B6B28(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B6B54(uint64_t a1)
{
  return a1;
}

void *initializeBufferWithCopyOfBuffer for InferenceProviderAssetManagerInternalError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InferenceProviderAssetManagerInternalError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for InferenceProviderAssetManagerInternalError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for InferenceProviderAssetManagerInternalError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for InferenceProviderAssetManagerInternalError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceProviderAssetManagerInternalError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAssetManagerInternalError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1000B6CE0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000B6CF8(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAssetManagerInternalError()
{
  return &type metadata for InferenceProviderAssetManagerInternalError;
}

void sub_1000B6D48()
{
}

void sub_1000B6D60()
{
}

void sub_1000B6D78()
{
}

uint64_t sub_1000B6DE0()
{
  return v0;
}

void sub_1000B6DF8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t sub_1000B6E34(uint64_t a1)
{
  return sub_100006960(v1, 1, 1, a1);
}

void sub_1000B6E54()
{
}

uint64_t sub_1000B6F24()
{
  return swift_retain_n();
}

uint64_t sub_1000B6F40(uint64_t a1)
{
  *(void *)(v2 + 456) = a1;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v1;
  return a1 + v4;
}

uint64_t sub_1000B6F68()
{
  return swift_bridgeObjectRelease();
}

void sub_1000B6FD8(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * v1) = v3;
  ++*(void *)(v2 + 16);
}

uint64_t sub_1000B700C(uint64_t a1)
{
  sub_100006960(v1, 1, 1, a1);
  return type metadata accessor for AuditToken();
}

uint64_t sub_1000B7088()
{
  *(void *)(v1 - 96) = *(void *)(v0 + 272);
  return swift_task_dealloc();
}

uint64_t sub_1000B70D4()
{
  sub_100006960(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 160));
  return *(void *)(v0 + 152);
}

uint64_t sub_1000B70F8()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B7144()
{
  return v0;
}

uint64_t sub_1000B7168()
{
  sub_100006960(*(void *)(v0 + 384), 1, 1, *(void *)(v0 + 504));
  return swift_retain();
}

void sub_1000B71C8(uint64_t a1@<X8>)
{
  v1[30] = a1;
  v1[31] = *(void *)(v1[22] + v1[29] + *(int *)(v1[26] + 28));
}

uint64_t sub_1000B71EC()
{
  return *(void *)(v0 + 240);
}

uint64_t sub_1000B7218()
{
  return swift_release();
}

uint64_t sub_1000B7230(uint64_t a1)
{
  return sub_100006AE8(a1, 1, v1);
}

uint64_t sub_1000B7250()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B726C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011671C(v3, (a3 & 0xC000000000000001) == 0);
}

void sub_1000B72C4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000B72DC()
{
  return swift_release_n();
}

uint64_t sub_1000B72F4()
{
  *(void *)(v1 - 96) = *(void *)(v0 + 272);
  return swift_task_dealloc();
}

uint64_t sub_1000B7320()
{
  return *(void *)(v0 + 352);
}

uint64_t sub_1000B7358()
{
  return sub_10001DF20(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B7374()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_1000B73AC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000B73B8()
{
  uint64_t v2 = *(void *)(v0 + 336);
  *(void *)(v1 - 96) = *(void *)(v0 + 256);
  return v2;
}

void sub_1000B73EC(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * v1) = v3;
  ++*(void *)(v2 + 16);
}

BOOL sub_1000B7454(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B7470()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B7488()
{
  *(unsigned char *)(v0 + *(int *)(v1 + 24)) = 1;
  return sub_1000B5E24();
}

uint64_t sub_1000B74B0()
{
  *(unsigned char *)(v0 + *(int *)(v1 + 24)) = 0;
  return sub_1000B5E24();
}

uint64_t sub_1000B74D4()
{
  *(unsigned char *)(v0 + *(int *)(v1 + 24)) = 0;
  return sub_1000B5E24();
}

uint64_t sub_1000B74F8()
{
  *(unsigned char *)(v0 + *(int *)(v1 + 24)) = 1;
  return sub_1000B5E24();
}

uint64_t sub_1000B753C()
{
  return *(void *)(v0 + 240);
}

uint64_t sub_1000B7554(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B757C()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B75A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B75C8(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B75F0(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B7634()
{
  return v0;
}

uint64_t sub_1000B7644()
{
  return swift_retain();
}

BOOL sub_1000B76DC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B7704()
{
  return type metadata accessor for InferenceProviderAsset(0);
}

BOOL sub_1000B7744(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000B7760(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B7784()
{
  return swift_release_n();
}

uint64_t sub_1000B779C(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 104) = v1 + 1;
  return swift_retain();
}

uint64_t sub_1000B77C0(uint64_t result)
{
  *(void *)(v1 + 208) = result;
  return result;
}

uint64_t sub_1000B77D0(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B7800()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B7830(uint64_t a1)
{
  return sub_100006960(a1, 0, 1, v1);
}

uint64_t sub_1000B784C(uint64_t a1)
{
  *(void *)(v2 + 360) = a1;
  uint64_t v5 = *(void *)(v4 - 96);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  return a1 + v1;
}

uint64_t sub_1000B7874(uint64_t result, float a2)
{
  float *v2 = a2;
  *(void *)(v3 - 88) = result;
  return result;
}

void sub_1000B7888(void *a1, uint64_t a2, os_log_type_t a3)
{
  _os_log_impl(a1, v3, a3, v4, v5, 2u);
}

void sub_1000B78A8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

void sub_1000B78C8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000B78E8(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B7908()
{
  return swift_retain_n();
}

uint64_t sub_1000B7920(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B792C()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000B7944()
{
  return v0;
}

uint64_t sub_1000B7958()
{
  return swift_retain();
}

uint64_t sub_1000B7994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10001FB34(0, v9, (uint64_t *)((char *)&a9 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)));
}

void sub_1000B79C4(uint64_t a1@<X8>)
{
  v1[52] = a1;
  v1[53] = *(void *)(v1[30] + v1[51] + *(int *)(v1[33] + 28));
}

uint64_t sub_1000B79E8()
{
  return *(void *)(v0 + 520);
}

void sub_1000B7A0C()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_1000B7A4C(uint64_t a1, unint64_t a2)
{
  return sub_10001DF20(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B7A64()
{
  return sub_1000B65F0(v1, v0, v2);
}

uint64_t sub_1000B7A80()
{
  *(void *)(v1 - 96) = *(void *)(v0 + 264);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B7AC8(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000B7AE8()
{
  return swift_errorRelease();
}

uint64_t sub_1000B7B08()
{
  return swift_retain();
}

uint64_t sub_1000B7B28(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B7B4C()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B7B78()
{
  return v0;
}

uint64_t sub_1000B7B98()
{
  *(void *)(v1 + 296) = v0;
  return swift_dynamicCast();
}

uint64_t sub_1000B7BC4()
{
  return swift_retain_n();
}

void sub_1000B7BF0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 0x16u);
}

uint64_t sub_1000B7C10(uint64_t a1, float a2)
{
  float *v2 = a2;
  *(void *)(v3 - 96) = v2 + 1;
  *(void *)(v3 - 88) = a1;
  return swift_retain();
}

unint64_t sub_1000B7C34()
{
  *(void *)(v2 + 16) = v3;
  return v2
       + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + *(void *)(v1 + 72) * v0;
}

uint64_t sub_1000B7C6C()
{
  return swift_retain();
}

void sub_1000B7C8C()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_1000B7C9C()
{
  return swift_release();
}

uint64_t sub_1000B7CBC(uint64_t a1)
{
  *(void *)(v2 - 96) = v1 + 4;
  *(void *)(v2 - 88) = a1;
  return swift_retain();
}

uint64_t sub_1000B7CD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B7CFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B7D20()
{
  return swift_bridgeObjectRelease();
}

void sub_1000B7D64(unsigned char *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, char a17)
{
  *a1 = a15;
  a1[1] = a17;
  *(void *)(v18 + 104) = v17;
}

uint64_t sub_1000B7D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23)
{
  *(_OWORD *)(a1 + 16) = a23;
  *(void *)(a1 + 32) = v23;
  *(void *)(v24 - 88) = a1;
  return specialized Array._endMutation()();
}

uint64_t sub_1000B7DB4(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B7DE0(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000B7E04(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type)
{
  _os_log_impl(a1, v12, type, a4, v13, 0x16u);
}

uint64_t sub_1000B7E24()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B7E68(uint64_t a1)
{
  return sub_100006960(a1, 0, 1, v1);
}

uint64_t sub_1000B7E84()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_retain();
}

uint64_t sub_1000B7EA4()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

uint64_t sub_1000B7EC4()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

void sub_1000B7EE4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000B7EFC()
{
  return swift_release();
}

uint64_t sub_1000B7F14()
{
  return type metadata accessor for Logger();
}

BOOL sub_1000B7F2C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B7F48(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B7F90()
{
  return v0;
}

uint64_t sub_1000B7FAC()
{
  return type metadata accessor for InferenceProviderAssetDescriptor();
}

uint64_t sub_1000B7FC4()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_1000B7FE0(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B8050()
{
  return sub_10001DF20(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B806C()
{
  return sub_10001DF20(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B8088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 96) = a2;
  *(void *)(v2 - 88) = a1;
  return swift_retain();
}

uint64_t sub_1000B80C0()
{
  return sub_1000805CC(v0);
}

uint64_t sub_1000B80F4()
{
  sub_100006AE8(v1, 1, v0);
  return sub_100042EDC(v1, v2);
}

uint64_t sub_1000B8130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  *a14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B8158()
{
  return sub_10001FB34(0, v0, v1);
}

uint64_t sub_1000B8174()
{
  sub_100006AE8(v0, 1, v1);
  return sub_100042EDC(v0, v2);
}

uint64_t sub_1000B81B0()
{
  return static Task<>.isCancelled.getter();
}

uint64_t sub_1000B81E8()
{
  return swift_dynamicCast();
}

uint64_t sub_1000B8204()
{
  return swift_release();
}

_WORD *sub_1000B8220(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_1000B8230()
{
  return *(void *)(v0 + 544);
}

uint64_t sub_1000B8244()
{
  return swift_retain();
}

void sub_1000B825C()
{
}

uint64_t sub_1000B827C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B82B0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

void sub_1000B82D0()
{
}

void sub_1000B82F0()
{
  *(void *)(v1 - 96) = v0 + 16;
}

uint64_t sub_1000B8348()
{
  return sub_1000B52C8(v0, v1);
}

uint64_t sub_1000B8360()
{
  return sub_1000B5E24();
}

uint64_t sub_1000B8380()
{
  return sub_1000B52C8(v0, v1);
}

uint64_t sub_1000B8398(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B83B8()
{
  return swift_weakLoadStrong();
}

uint64_t sub_1000B83D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_10000E60C(v5, v4, v3);
  *(void *)(v6 - 104) = a1;
  *(void *)(v6 - 96) = a2;
  *(unsigned char *)(v6 - 88) = a3 & 1;
  return result;
}

uint64_t sub_1000B8410(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0;
  *(void *)(v3 - 104) = a1;
  return swift_willThrow();
}

uint64_t sub_1000B8444(uint64_t result)
{
  *(void *)(v3 + 496) = result;
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  *(void *)(v3 + 192) = v4;
  return result;
}

void sub_1000B8454()
{
  *(unsigned char *)(v1 + v2) = *(_DWORD *)(v4 - 96);
  *(void *)(v0 + 208) = v3;
}

uint64_t sub_1000B8464()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000B8488()
{
  *(void *)(v0 + 320) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B84AC()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_1000B84B8()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t sub_1000B84DC()
{
  return swift_retain_n();
}

uint64_t sub_1000B84F8()
{
  return swift_retain();
}

uint64_t sub_1000B8514(uint64_t result)
{
  *(void *)(v3 + 320) = result;
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  *(void *)(v3 + 128) = v4;
  return result;
}

uint64_t sub_1000B8524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  *a23 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000B8548(uint64_t a1@<X8>)
{
  v1[52] = a1;
  v1[53] = *(void *)(v1[30] + v1[51] + *(int *)(v1[33] + 28));
}

uint64_t sub_1000B8570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_10001DF20(v4, v5, (uint64_t *)va);
}

uint64_t sub_1000B858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_10001DF20(v4, v5, (uint64_t *)va);
}

uint64_t sub_1000B85A8(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B85C4()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_1000B85DC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000B85F8()
{
  return swift_retain();
}

uint64_t sub_1000B861C()
{
  return *(void *)(v0 + 496);
}

uint64_t sub_1000B8634()
{
  return swift_retain();
}

uint64_t sub_1000B8650@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B8674()
{
  return sub_10001DF20(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B8690()
{
  *(void *)(v2 + 240) = *(void *)(v0 + 16);
  *(void *)(v2 + 248) = (v0 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_1000B86B8()
{
  return type metadata accessor for Logger();
}

void sub_1000B86D0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000B86E8()
{
  return swift_dynamicCast();
}

uint64_t sub_1000B8704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ADE5C(a1, v3, a3, 0);
}

uint64_t sub_1000B8720(uint64_t result)
{
  *(void *)(v1 + 448) = result;
  return result;
}

uint64_t sub_1000B8730(uint64_t result)
{
  *(void *)(v1 + 488) = result;
  return result;
}

void sub_1000B8740()
{
  *(void *)(v1 - 104) = v0 + 104;
  *(void *)(v1 - 96) = v0 + 80;
}

uint64_t sub_1000B8768()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B878C()
{
  return swift_release();
}

uint64_t sub_1000B87A8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B87C4()
{
  return swift_retain_n();
}

uint64_t sub_1000B87DC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B87F4()
{
  return v0;
}

uint64_t sub_1000B880C()
{
  return v0;
}

uint64_t sub_1000B881C()
{
  return swift_errorRelease();
}

uint64_t sub_1000B8840(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0;
  return swift_willThrow();
}

uint64_t sub_1000B885C()
{
  return swift_release();
}

uint64_t sub_1000B8878()
{
  return v0;
}

uint64_t sub_1000B8890()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000B88A8(uint64_t result)
{
  *(void *)(v3 + 280) = result;
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  *(void *)(v3 + 144) = v4;
  return result;
}

uint64_t sub_1000B88B8(uint64_t result)
{
  *(void *)(v1 + 312) = result;
  return result;
}

uint64_t sub_1000B88C8(uint64_t result)
{
  *(void *)(v1 + 272) = result;
  return result;
}

uint64_t sub_1000B88D8()
{
  return v0 + 8;
}

void sub_1000B88E8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

uint64_t sub_1000B8904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return a26;
}

uint64_t sub_1000B8914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = v13;
  return swift_errorRetain();
}

uint64_t sub_1000B8930()
{
  *(void *)(v1 + 176) = *(void *)(v0 + 16);
  *(void *)(v1 + 184) = (v0 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v2;
}

uint64_t sub_1000B8958()
{
  return v0;
}

void sub_1000B897C()
{
}

void sub_1000B89AC(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

void sub_1000B89D0(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

void sub_1000B89F4()
{
  *(void *)(v1 - 112) = v0 + 112;
}

uint64_t sub_1000B8A64(uint64_t result)
{
  *(void *)(v1 + 528) = result;
  return result;
}

uint64_t sub_1000B8A70()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000B8A88()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000B8AA0()
{
  return v0;
}

uint64_t sub_1000B8AC4()
{
  return sub_100006AE8(*(void *)(v0 + 152), 1, *(void *)(v0 + 160));
}

uint64_t sub_1000B8AEC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000B8B04()
{
  return sub_100042EDC(v0, v1);
}

_WORD *sub_1000B8B1C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000B8B28()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B8B48(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return sub_10001DF20(v3, v4, (uint64_t *)va);
}

BOOL sub_1000B8B64(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B8B80(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return swift_retain();
}

uint64_t sub_1000B8BAC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B8BCC()
{
  return type metadata accessor for _OSActivity();
}

uint64_t sub_1000B8BEC()
{
  return v0;
}

uint64_t sub_1000B8C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(unsigned char *)(v22 + *(int *)(a22 + 52)) = 1;
  return sub_1000B5E24();
}

uint64_t sub_1000B8C2C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B8C4C()
{
  return *(void *)(v0 + 472);
}

uint64_t sub_1000B8C6C(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B8C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  *a16 = v16;
  return swift_errorRetain();
}

uint64_t sub_1000B8CB4(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000B8CC0()
{
  return type metadata accessor for InferenceProviderAssetDescriptor();
}

uint64_t sub_1000B8CD8()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000B8CF8()
{
  return *(void *)(v0 + 112);
}

void sub_1000B8D38(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

uint64_t sub_1000B8D58()
{
  return swift_retain();
}

uint64_t sub_1000B8D84(__n128 a1)
{
  v1[4] = a1;
  v1[5].n128_u8[0] = 0;
  return ContinuousClock.init()();
}

uint64_t sub_1000B8DA4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B8DC4()
{
  return type metadata accessor for InferenceProviderAsset(0);
}

uint64_t sub_1000B8DF0(float a1)
{
  *unint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B8E10(float a1)
{
  *unint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B8E30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B8E50()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B8E70()
{
  return v0;
}

uint64_t sub_1000B8E90()
{
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[18];
  return sub_1000BABA4(v2, v6, v4, v5, v3);
}

uint64_t sub_1000B8EAC(uint64_t a1)
{
  return sub_100006AE8(v1, 1, a1);
}

uint64_t sub_1000B8EE0()
{
  uint64_t v2 = *(void *)(v0 + 136);
  return sub_1000805CC(v2);
}

void sub_1000B8EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v33 = *(unsigned __int8 *)(v31 - 88);
  uint64_t v34 = *(void *)(v31 - 104);
  uint64_t v35 = *(void *)(v31 - 96);
  sub_10011BF1C(v34, v35, v33, v30, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

uint64_t sub_1000B8F28()
{
  return swift_release();
}

void sub_1000B8F48(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void sub_1000B8F68(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void sub_1000B8F88(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000B8FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  *a23 = v23;
  return swift_errorRelease();
}

void sub_1000B8FBC()
{
  sub_1000AC1EC();
}

uint64_t sub_1000B8FD8()
{
  return v0;
}

void sub_1000B8FF8()
{
  sub_1000AEF2C();
}

uint64_t sub_1000B9024()
{
  return v0;
}

uint64_t sub_1000B9044()
{
  return swift_task_dealloc();
}

uint64_t sub_1000B9064()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t sub_1000B9084()
{
  return v0;
}

uint64_t sub_1000B9094()
{
  return v0;
}

uint64_t sub_1000B90A4()
{
  return sub_100006960(v0, 1, 1, v1);
}

void sub_1000B90E4()
{
  sub_1000AC1EC();
}

uint64_t sub_1000B9100()
{
  return swift_release();
}

uint64_t sub_1000B911C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B913C(uint64_t result)
{
  *(void *)(v1 + 352) = result;
  return result;
}

BOOL sub_1000B914C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B9168()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B9180()
{
  return v0;
}

uint64_t sub_1000B9190()
{
  return v0 + 8;
}

_WORD *sub_1000B91A0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000B91AC()
{
  *(void *)(v1 + 632) = v0;
  return *(void *)(v1 + 440);
}

uint64_t sub_1000B91C8()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_1000B920C()
{
  return *(void *)(v0 + 392);
}

uint64_t sub_1000B9244(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000B926C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_1000230F4(a8 + 1, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

uint64_t sub_1000B9290()
{
  return v0;
}

uint64_t sub_1000B92AC()
{
  *(void *)(v1 - 232) = v0;
  return swift_dynamicCast();
}

uint64_t sub_1000B92E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  *a20 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9340()
{
  return v0;
}

uint64_t sub_1000B935C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B9368()
{
  return v0;
}

uint64_t sub_1000B9384(uint64_t result)
{
  *(void *)(v1 + 280) = result;
  return result;
}

uint64_t sub_1000B9390(uint64_t result)
{
  *(void *)(v1 + 296) = result;
  return result;
}

uint64_t sub_1000B939C(uint64_t result)
{
  *(void *)(v1 + 256) = result;
  return result;
}

uint64_t sub_1000B93A8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B93D0()
{
  return swift_dynamicCast();
}

void sub_1000B9414()
{
  *(void *)(v1 - 112) = v0;
  sub_10001EEE0();
}

uint64_t sub_1000B943C(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9464(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B9488()
{
  return v0;
}

uint64_t sub_1000B9494()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B94AC()
{
  return sub_1000B5E24();
}

uint64_t sub_1000B94C4()
{
  return v0;
}

uint64_t sub_1000B94E0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000B94F8(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000B9504(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B952C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  return sub_1000B38C8(v5, a1, a2);
}

uint64_t sub_1000B9554()
{
  return v0;
}

uint64_t sub_1000B9560()
{
  return v0;
}

uint64_t sub_1000B956C(uint64_t result)
{
  *(void *)(v1 + 432) = result;
  return result;
}

uint64_t sub_1000B9578()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000B9590(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return sub_10001DF20(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000B95A8(uint64_t result)
{
  *(void *)(v1 + 552) = result;
  return result;
}

uint64_t sub_1000B95B4()
{
  return v0;
}

uint64_t sub_1000B95C0()
{
  return sub_100042EDC(v1, v0);
}

uint64_t sub_1000B95D8()
{
  return v0;
}

uint64_t sub_1000B95F0()
{
  return swift_errorRelease();
}

uint64_t sub_1000B9608()
{
  *uint64_t v1 = v0;
  return swift_errorRelease();
}

uint64_t sub_1000B9620()
{
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[23];
  return sub_1000BB588(v2, v4, v3);
}

uint64_t sub_1000B9650()
{
  return v0;
}

uint64_t sub_1000B966C()
{
  return swift_retain();
}

void sub_1000B969C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000B96B4(uint64_t a1)
{
  return sub_1000B65F0(a1, v2, v1);
}

uint64_t sub_1000B96CC()
{
  return swift_bridgeObjectRelease();
}

void sub_1000B9704(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void *sub_1000B971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  *a21 = a1;
  return a21;
}

uint64_t sub_1000B972C()
{
  return swift_errorRelease();
}

uint64_t sub_1000B9744()
{
  return swift_errorRelease();
}

BOOL sub_1000B9788(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B97A0()
{
  *(void *)(v1 - 240) = v0;
  return v1 - 136;
}

uint64_t sub_1000B97B0()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_1000B97F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return sub_10001DF20(v29, v28, &a28);
}

uint64_t sub_1000B9814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return sub_10001DF20(v28, v29, &a28);
}

void sub_1000B9830()
{
  sub_10001EEE0();
}

uint64_t sub_1000B9874()
{
  return sub_1000A1BA8(v0);
}

uint64_t sub_1000B9890()
{
  return Hasher.init(_seed:)();
}

void sub_1000B98AC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_1000230F4(a8 + 1, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

uint64_t sub_1000B98D0()
{
  return *(void *)(v0 - 144);
}

uint64_t sub_1000B98E0(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9914()
{
  return swift_retain();
}

uint64_t sub_1000B9930()
{
  return swift_retain_n();
}

uint64_t sub_1000B9988(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return sub_1000B10DC(&a28, a2);
}

uint64_t sub_1000B99AC()
{
  return sub_10001DF20(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000B99E0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000B99FC()
{
  return swift_retain_n();
}

uint64_t sub_1000B9A14()
{
  return swift_release_n();
}

uint64_t sub_1000B9A2C()
{
  return swift_release();
}

uint64_t sub_1000B9A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9A78()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_1000B9A90(uint64_t a1)
{
  sub_100006960(v1, 1, 1, a1);
  return v2;
}

void sub_1000B9AC0(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1 + 8;
}

uint64_t sub_1000B9AE4()
{
  return *(void *)v0;
}

uint64_t sub_1000B9AF4(uint64_t result)
{
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_1000B9B00(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t sub_1000B9B0C(uint64_t result)
{
  *(void *)(v1 + 640) = result;
  return result;
}

uint64_t sub_1000B9B18(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000B9B3C(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9B60()
{
  return swift_retain_n();
}

uint64_t sub_1000B9B78()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B9B94()
{
  return static Date.+ infix(_:_:)();
}

uint64_t sub_1000B9BB0()
{
  return swift_release();
}

uint64_t sub_1000B9BF4()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000B9C0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000B65F0(v3, v4, a3);
}

uint64_t sub_1000B9C24()
{
  return v0;
}

uint64_t sub_1000B9C34()
{
  return v0;
}

uint64_t sub_1000B9C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011671C(v3, (a3 & 0xC000000000000001) == 0);
}

uint64_t sub_1000B9C60()
{
  return swift_release();
}

uint64_t sub_1000B9C8C()
{
  sub_10002EAF0();
  return Logger.logObject.getter();
}

uint64_t sub_1000B9CC8()
{
  return v0;
}

uint64_t sub_1000B9CE0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void *sub_1000B9D08(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = v1;
  return result;
}

uint64_t sub_1000B9D18()
{
  return swift_release_n();
}

uint64_t sub_1000B9D30()
{
  return v0;
}

uint64_t sub_1000B9D40()
{
  return sub_1000B52C8(v0, v1);
}

uint64_t sub_1000B9D58()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000B9D70()
{
  return v0;
}

uint64_t sub_1000B9D80()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B9DB0()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_1000B9DC8()
{
  return swift_release();
}

uint64_t sub_1000B9DE0(uint64_t result)
{
  *(void *)(v1 + 256) = result;
  return result;
}

uint64_t sub_1000B9DEC()
{
  return swift_bridgeObjectRelease();
}

void sub_1000B9E08(float a1)
{
  *uint64_t v1 = a1;
}

BOOL sub_1000B9E14(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B9E30()
{
  return v0;
}

uint64_t sub_1000B9E40(uint64_t result)
{
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_1000B9E58()
{
  return v0;
}

uint64_t sub_1000B9E70()
{
  return v0;
}

uint64_t sub_1000B9E80()
{
  uint64_t v1 = v0[11];
  sub_10000853C(v0 + 7, v0[10]);
  return v1 + 16;
}

uint64_t sub_1000B9EB0()
{
  sub_100006AE8(v2, 1, v1);
  return sub_100042EDC(v2, v0);
}

uint64_t sub_1000B9EEC()
{
  return swift_errorRelease();
}

uint64_t sub_1000B9F1C()
{
  if (v0 < 0) {
    return v0;
  }
  else {
    return v0 & 0xFFFFFFFFFFFFFF8;
  }
}

uint64_t sub_1000B9F2C()
{
  return v0;
}

uint64_t sub_1000B9F44()
{
  return swift_task_alloc();
}

uint64_t sub_1000B9F98(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000B9FC4()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000B9FE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B9FFC(uint64_t a1)
{
  *(void *)(v1 + 192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000BA01C(float a1)
{
  *uint64_t v1 = a1;
}

void sub_1000BA030(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000BA044@<X0>(int *a1@<X8>)
{
  *(void *)(v1 - 96) = (char *)a1 + *a1;
  return swift_retain();
}

char *sub_1000BA064@<X0>(int *a1@<X8>)
{
  return (char *)a1 + *a1;
}

uint64_t sub_1000BA078()
{
  return v0;
}

void sub_1000BA098()
{
  *(void *)(v1 - 104) = v0;
}

uint64_t sub_1000BA0D0(uint64_t result)
{
  *(void *)(v1 + 392) = result;
  return result;
}

uint64_t sub_1000BA0FC()
{
  return Array.description.getter();
}

uint64_t sub_1000BA11C(uint64_t a1)
{
  *(void *)(v1 + 440) = a1;
  return swift_task_alloc();
}

uint64_t sub_1000BA140()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_1000BA158()
{
  return *(void *)(v0 + 512);
}

uint64_t sub_1000BA180()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000BA1A0()
{
  return swift_task_dealloc();
}

void sub_1000BA1B8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000BA1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ADE5C(a1, v3, a3, 0);
}

void sub_1000BA1F0()
{
}

uint64_t sub_1000BA210()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000BA230()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BA248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  return sub_1000201DC(&a28, a2);
}

uint64_t sub_1000BA260()
{
  return sub_1000C95D4();
}

BOOL sub_1000BA28C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000BA2A0(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000BA2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_1000BA2CC()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000BA2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

__n128 sub_1000BA2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  *(void *)(v20 - 88) = a1;
  __n128 result = a19;
  _DWORD *v19 = a19.n128_u32[0];
  return result;
}

uint64_t sub_1000BA30C()
{
  *(void *)(v1 + 120) = v0;
  return swift_errorRetain();
}

uint64_t sub_1000BA32C()
{
  return v0;
}

uint64_t sub_1000BA340(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000BA360(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_1000BA380()
{
  return type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
}

uint64_t sub_1000BA3A0(uint64_t result)
{
  *(void *)(v1 + 264) = result;
  return result;
}

uint64_t sub_1000BA3AC()
{
  return swift_task_dealloc();
}

void sub_1000BA3C4(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000BA3D8(uint64_t a1)
{
  return sub_1000B65F0(a1, v1, v2);
}

uint64_t sub_1000BA3F0()
{
  return sub_10002E2DC(v3, v2, v0, v1);
}

uint64_t sub_1000BA410()
{
  return sub_1000B5E24();
}

uint64_t sub_1000BA428()
{
  return v0;
}

uint64_t sub_1000BA434()
{
  return sub_1000B5E24();
}

uint64_t sub_1000BA458(double a1)
{
  *(double *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000BA478()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000BA4B0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

void sub_1000BA4D0(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000BA4DC(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

void sub_1000BA508(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000BA520()
{
  return sub_100101C40(v0, v1);
}

uint64_t sub_1000BA538(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000B65F0(v3, v4, a3);
}

uint64_t sub_1000BA550()
{
  return sub_100006960(v0, 0, 1, v1);
}

uint64_t sub_1000BA570()
{
  return v0;
}

uint64_t sub_1000BA57C()
{
  return sub_1000B5E24();
}

uint64_t sub_1000BA59C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

void *sub_1000BA5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  *a14 = a1;
  return a14;
}

uint64_t sub_1000BA5C8(uint64_t result)
{
  *(void *)(v1 + 184) = result;
  return result;
}

void sub_1000BA5DC(void *a1, int a2, os_log_type_t a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_log_t log)
{
  _os_log_impl(a1, log, a3, a4, v14, 0x16u);
}

uint64_t sub_1000BA5FC()
{
  return v0;
}

uint64_t sub_1000BA608()
{
  return v0;
}

uint64_t sub_1000BA61C()
{
  sub_100006960(v1, 0, 1, v0);
  return type metadata accessor for AuditToken();
}

uint64_t sub_1000BA654()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000BA66C()
{
  return sub_100006960(v0, 0, 1, v1);
}

uint64_t sub_1000BA68C()
{
  return swift_bridgeObjectRelease();
}

void sub_1000BA6A4()
{
}

uint64_t sub_1000BA6C4()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

uint64_t sub_1000BA6E4(uint64_t result)
{
  *(void *)(v1 + 400) = result;
  return result;
}

uint64_t sub_1000BA6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = a1;
  return type metadata accessor for InferenceProviderAsset(0);
}

uint64_t sub_1000BA710()
{
  return Set.Index._asCocoa.modify();
}

uint64_t sub_1000BA744()
{
  *(_WORD *)(v0 + 12) = 2080;
  return sub_100102364(v1);
}

uint64_t sub_1000BA764()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000BA77C()
{
  return swift_retain_n();
}

uint64_t sub_1000BA794()
{
  return type metadata accessor for InferenceProviderAsset(0);
}

uint64_t sub_1000BA7AC()
{
  return v0;
}

uint64_t sub_1000BA7B8()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1000BA7D0()
{
  return v0;
}

uint64_t sub_1000BA7DC()
{
  return swift_retain_n();
}

uint64_t sub_1000BA7FC(uint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for LoadState();
  sub_10000ED60();
  __chkstk_darwin(v5, v6);
  sub_10000F0D0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FB84();
  __chkstk_darwin(v11, v12);
  sub_100057F20();
  char v13 = sub_100101C40(v3, a1);
  sub_1000C99F8(v3, v2);
  sub_100069DF4();
  v14();
  if (v13) {
    char v15 = 1;
  }
  else {
    char v15 = sub_100101C40(v2 + *(int *)(v10 + 20), v9);
  }
  sub_100043EDC();
  sub_100057FE4();
  v16();
  sub_1000C9FEC(v2, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v15 & 1;
}

uint64_t sub_1000BA940()
{
  uint64_t v1 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FB84();
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v20 - v8;
  type metadata accessor for LoadState();
  sub_10000ED60();
  __chkstk_darwin(v10, v11);
  sub_10000F0D0();
  uint64_t v14 = v13 - v12;
  sub_100043E68();
  v15();
  char v16 = sub_100101C40(v0, v14);
  sub_100057FE4();
  v17();
  sub_1000C99F8(v0, (uint64_t)v9);
  if ((v16 & 1) == 0)
  {
    sub_1000C9FEC((uint64_t)v9, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
    sub_1000C99F8(v0, (uint64_t)v6);
    goto LABEL_5;
  }
  uint64_t v18 = *(void *)(*(void *)&v9[*(int *)(v1 + 44)] + 16);
  sub_1000C9FEC((uint64_t)v9, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_1000C99F8(v0, (uint64_t)v6);
  if (v18)
  {
LABEL_5:
    uint64_t v0 = 0;
    goto LABEL_6;
  }
  sub_1000CAE10();
LABEL_6:
  sub_1000C9FEC((uint64_t)v6, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v0;
}

uint64_t sub_1000BAB0C(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0) + 40));
  swift_bridgeObjectRetain();
  uint64_t v3 = InferenceProviderAssetDescriptor.identifier.getter();
  sub_100044CFC(v3, v4, v2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t sub_1000BABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000C05C0(v12, v5, a1, a2, a3, a4, a5, &v14);
  uint64_t result = swift_endAccess();
  if (!v6) {
    return v14;
  }
  return result;
}

void sub_1000BAC5C()
{
  sub_10002FAAC();
  type metadata accessor for Date();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_100057F20();
  uint64_t v3 = sub_100003A70(&qword_10015DA90);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  int v7 = v0 + *(_DWORD *)(v6 + 44);
  sub_10011776C();
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  sub_1000CABB4(v8);
  if (v7 != 1)
  {
    static Date.now.getter();
    uint64_t v9 = sub_1000CAB6C(*(int *)(v6 + 36));
    v10(v9);
  }
  sub_10002FAC4();
}

void sub_1000BAD6C()
{
  sub_10002FAAC();
  type metadata accessor for Date();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_100057F20();
  uint64_t v3 = sub_100003A70(&qword_10015BAA8);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  int v7 = v0 + *(_DWORD *)(v6 + 48);
  sub_10011779C();
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  sub_1000CABB4(v8);
  if (v7 != 1)
  {
    static Date.now.getter();
    uint64_t v9 = sub_1000CAB6C(*(int *)(v6 + 32));
    v10(v9);
  }
  sub_10002FAC4();
}

void sub_1000BAE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10002FAAC();
  uint64_t v86 = v24;
  uint64_t v87 = v23;
  uint64_t v83 = v26;
  uint64_t v84 = v25;
  uint64_t v85 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v82 = a22;
  uint64_t v80 = v22;
  uint64_t v81 = a21;
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = sub_10002FDD0(v34);
  __chkstk_darwin(v35, v36);
  sub_100030158();
  uint64_t v79 = v37;
  __chkstk_darwin(v38, v39);
  uint64_t v78 = (char *)&v68 - v40;
  sub_1000CAD38();
  uint64_t State = type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v76 = v41;
  __chkstk_darwin(v42, v43);
  sub_100030144();
  uint64_t v75 = v44;
  sub_1000CAD38();
  uint64_t v73 = type metadata accessor for AssetCost();
  sub_10000ED60();
  uint64_t v46 = v45;
  __chkstk_darwin(v47, v48);
  sub_100030144();
  uint64_t v74 = v49;
  sub_1000CAD38();
  uint64_t v50 = type metadata accessor for InferenceProviderAssetDescriptor();
  sub_10000ED60();
  __chkstk_darwin(v51, v52);
  sub_100030158();
  uint64_t v54 = v53;
  __chkstk_darwin(v55, v56);
  if (!v31 && v29 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  InferenceProviderAssetDescriptor.init(identifier:version:)();
  uint64_t v72 = v54;
  sub_100069DF4();
  v57();
  uint64_t v58 = (int *)type metadata accessor for ModelCatalogAsset(0);
  uint64_t v59 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v74, v33 + v58[7], v73);
  uint64_t v60 = v58[9];
  int v71 = *(unsigned __int8 *)(v33 + v58[8]);
  int v70 = *(unsigned __int8 *)(v33 + v60);
  int v69 = *(unsigned __int8 *)(v33 + v58[10]);
  uint64_t v61 = v87;
  sub_100042C34(v87, (uint64_t)v89);
  uint64_t v73 = v50;
  uint64_t v62 = v86;
  sub_100042C34(v86, (uint64_t)v88);
  uint64_t v63 = v75;
  sub_100043E9C();
  v64();
  uint64_t v65 = (uint64_t)v78;
  static Date.now.getter();
  uint64_t v66 = v79;
  static Date.now.getter();
  swift_allocObject();
  sub_1000BBA24(v72, v84, v85, v59, v71, v70, v69, (uint64_t)v89, v63, v65, v66, (uint64_t)_swiftEmptySetSingleton, (uint64_t)_swiftEmptySetSingleton, (uint64_t)_swiftEmptySetSingleton, v83, (uint64_t)v88, v81, v82, 0);
  sub_100008130(v62);
  sub_100008130(v61);
  sub_1000C9FEC(v33, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  sub_100043FA8();
  v67();
  sub_10002FAC4();
}

Class sub_1000BB264(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = v2;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) == 1)
  {
    uint64_t v7 = v4 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
    swift_beginAccess();
    sub_1000C61C4(v7, v4, a2, a1, &v20);
    Class result = (Class)swift_endAccess();
    if (!v3) {
      return v20.isa;
    }
  }
  else
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003B18(v9, (uint64_t)qword_10015DC38);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v20.isa = (Class)sub_10001DF20(v13, v14, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tried to move asset %s to dynamic mode that does not support it", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    type metadata accessor for ModelManagerError();
    sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    char v16 = v15;
    *char v15 = InferenceProviderAssetDescriptor.identifier.getter();
    v16[1] = v17;
    sub_10002FC6C();
    sub_100043E9C();
    v18();
    return (Class)swift_willThrow();
  }
  return result;
}

uint64_t sub_1000BB588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000C2BBC(v8, v3, a2, a3, a1, &v10);
  uint64_t result = swift_endAccess();
  if (!v4) {
    return v10;
  }
  return result;
}

uint64_t sub_1000BB628()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_10002FB84();
  __chkstk_darwin(v3, v4);
  sub_10000F0D0();
  uint64_t v7 = v6 - v5;
  type metadata accessor for LoadState();
  sub_10000ED60();
  __chkstk_darwin(v8, v9);
  sub_10000F0D0();
  uint64_t v12 = v11 - v10;
  sub_100043E68();
  v13();
  char v14 = sub_100101C40(v1, v12);
  sub_100043CF4();
  v15();
  uint64_t v16 = sub_100069E00();
  sub_1000C99F8(v16, v17);
  if (v14) {
    sub_1000CAE10();
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1000C9FEC(v7, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  return v2;
}

void sub_1000BB76C()
{
  sub_10002FAAC();
  uint64_t v26 = v1;
  uint64_t v25 = type metadata accessor for AssetCost();
  sub_10000ED60();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100030144();
  uint64_t v23 = v6;
  sub_1000CAD38();
  uint64_t v7 = type metadata accessor for Date();
  sub_10000ED60();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100030158();
  uint64_t v24 = v12;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v22 - v15;
  uint64_t v17 = v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v18 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19(v16, v17 + *(int *)(v18 + 32), v7);
  uint64_t v20 = InferenceProviderAssetDescriptor.identifier.getter();
  v22[1] = v21;
  v22[2] = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v23, v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_cost, v25);
  InferenceProviderAssetDescriptor.version.getter();
  v19(v24, (uint64_t)v16, v7);
  AssetInfo.init(identifier:cost:version:hasForegroundSession:timeLastRequestEnded:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v7);
  sub_10002FAC4();
}

uint64_t sub_1000BB970()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015DC38);
  sub_100003B18(v0, (uint64_t)qword_10015DC38);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000BB9D4()
{
  sub_1000C9A5C(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper, (uint64_t)v3);
  uint64_t Strong = swift_weakLoadStrong();
  sub_1000C9A6C((uint64_t)v3);
  return Strong;
}

uint64_t sub_1000BBA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  UUID.init()();
  type metadata accessor for InferenceProviderAssetDescriptor();
  sub_1000CA550();
  sub_100069DF4();
  v26();
  uint64_t v27 = (void *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  *uint64_t v27 = a2;
  v27[1] = a3;
  type metadata accessor for AssetCost();
  sub_1000CA550();
  sub_100069DF4();
  v28();
  *(unsigned char *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable) = a5;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed) = a6;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode) = a7;
  sub_100042C34(a8, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  uint64_t v29 = v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t State = type metadata accessor for LoadState();
  sub_1000CA550();
  uint64_t v32 = v31;
  uint64_t v33 = *(void (**)(void))(v31 + 16);
  sub_1000CAE50();
  v33();
  uint64_t v34 = (int *)type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  sub_1000CAE50();
  v33();
  uint64_t v35 = v29 + v34[8];
  uint64_t v36 = type metadata accessor for Date();
  sub_1000CA550();
  uint64_t v38 = v37;
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v39(v35, a10, v36);
  v39(v29 + v34[9], a11, v36);
  *(unsigned char *)(v29 + v34[6]) = a19;
  *(void *)(v29 + v34[7]) = 0;
  *(void *)(v29 + v34[10]) = a12;
  *(void *)(v29 + v34[11]) = a13;
  *(void *)(v29 + v34[12]) = a14;
  *(unsigned char *)(v29 + v34[13]) = 0;
  sub_100042C34(a16, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
  *(void *)(v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine) = a17;
  swift_weakInit();
  swift_release();
  swift_release();
  sub_100008130(a16);
  uint64_t v40 = *(void (**)(void))(v38 + 8);
  sub_100043AE0();
  v40();
  sub_100043AE0();
  v40();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a9, State);
  sub_100008130(a8);
  sub_10000EFBC();
  v41();
  sub_10000EFBC();
  v42();
  sub_1000CA040((uint64_t)v45, v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  return v19;
}

uint64_t sub_1000BBD88()
{
  sub_1000086E0();
  uint64_t v3 = v2;
  v1[15] = v2;
  v1[16] = v0;
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  v1[17] = v4;
  sub_10002FA4C(v4);
  v1[18] = v5;
  v1[19] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v1[20] = v6;
  sub_10002FDD0(v6);
  v1[21] = sub_100057A60();
  v1[22] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v7);
  v1[23] = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015DA90);
  sub_10002FDD0(v8);
  v1[24] = sub_10002FE18();
  uint64_t v9 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v9);
  v1[25] = sub_10002FE18();
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
  v1[26] = v10;
  sub_10002FA4C(v10);
  v1[27] = v11;
  v1[28] = sub_10002FE18();
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  v1[29] = v12;
  sub_10002FA4C(v12);
  v1[30] = v13;
  v1[31] = sub_10002FE18();
  uint64_t v14 = sub_100003A70(&qword_10015B408);
  v1[32] = v14;
  sub_10002FA4C(v14);
  v1[33] = v15;
  v1[34] = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  v1[35] = State;
  sub_10002FA4C(State);
  v1[36] = v17;
  v1[37] = sub_100057A60();
  v1[38] = swift_task_alloc();
  return _swift_task_switch(sub_1000BBF88, v3, 0);
}

uint64_t sub_1000BBF88()
{
  v200 = v1;
  uint64_t v4 = v1[20];
  uint64_t v5 = v1[16];
  uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v1[39] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v7 = v5 + v6;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + *(int *)(v4 + 28));
  if (!v8)
  {
    uint64_t v15 = sub_1000CA860();
    v16(v15);
    uint64_t v17 = sub_1000CAA08();
    v3(v17);
    sub_1000C99B0(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
    uint64_t v18 = sub_1000CABF0();
    uint64_t v19 = *(void (**)(void))(v2 + 8);
    sub_100043924();
    v19();
    if (v18)
    {
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v20 = sub_1000CAD5C();
      sub_1000CA934(v20, (uint64_t)qword_10015DC38);
      uint64_t v21 = (void *)Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (sub_100057CB0(v22))
      {
        uint64_t v23 = v1[16];
        uint64_t v24 = (_DWORD *)sub_10000EFE8();
        v199[0] = sub_10000EFC8();
        *uint64_t v24 = 136315394;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v27 = sub_1000B7A4C(v25, v26);
        sub_1000CAAA8(v27);
        swift_bridgeObjectRelease();
        sub_1000B72DC();
        sub_1000CAD24();
        unint64_t v28 = *(void *)(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v29 = sub_10000853C((void *)(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v28);
        sub_10004421C();
        v30();
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        sub_1000CADCC();
        uint64_t v31 = sub_1000CAA78();
        v32(v31);
        uint64_t v33 = sub_10001DF20((uint64_t)v29, v28, v199);
        sub_1000CAB48(v33);
        swift_bridgeObjectRelease();
        sub_1000B72DC();
        sub_1000CAE64((void *)&_mh_execute_header, v34, v35, "Asset %s from %s already in unloaded state at time of connection termination");
        sub_10000EFA4();
        sub_10000ED7C();
        sub_10000ED7C();

        sub_10000EFBC();
        v36();
      }
      else
      {

        swift_release_n();
        sub_100043924();
        v19();
      }
    }
    else
    {
      sub_1000CA564();
      UUIDIdentifier.init()();
      sub_1000CAEC4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
      uint64_t v37 = InferenceProviderAssetDescriptor.identifier.getter();
      uint64_t v174 = v38;
      uint64_t v177 = v37;
      InferenceProviderAssetDescriptor.version.getter();
      uint64_t v39 = sub_1000CA9A4();
      v3(v39);
      uint64_t v40 = sub_1000CAE98();
      v41(v40);
      uint64_t v42 = *(void (**)(uint64_t))((char *)v19
                                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                                           + 24);
      uint64_t v152 = (uint64_t)v19 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
      sub_10000853C((void (*)(void))((char *)v19+ OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), (uint64_t)v42);
      sub_10004421C();
      v43();
      InferenceProviderDescriptor.id.getter();
      uint64_t v44 = sub_1000CA90C();
      uint64_t v46 = v45(v44);
      sub_1000CAC98(v46, v47, v48, v49, v50, v51, v52, v53, v116, v120, v124, v128, v132, v136, v140, v144, v148, v152, v156,
        v160,
        v164);
      uint64_t v54 = sub_100003A70(&qword_10015B9A0);
      uint64_t v55 = v186;
      uint64_t v58 = sub_1000CAB84(v186, v56, v57, v54);
      uint64_t v66 = sub_1000CA660(v58, v59, v60, v61, v62, v63, v64, v65, v117, v121, v125, v129, v133, v137, v141, v145, v149, v153, v157,
              v161,
              v165,
              v168,
              v171,
              v174,
              v177,
              v180,
              v183,
              v186,
              v188,
              v190,
              v192);
      v67(v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002EB50((uint64_t)v3, &qword_10015DA50);
      sub_10002EB50(v55, &qword_10015DA90);
      sub_10002EB50(v0, &qword_10015BAA8);
      sub_10000EFBC();
      v68();
      sub_10004381C();
      v69();
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v70 = sub_1000CAD5C();
      sub_1000CA934(v70, (uint64_t)qword_10015DC38);
      uint64_t v71 = v4;
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v196 = v1[26];
        uint64_t v195 = v1[16];
        uint64_t v74 = sub_10000EFE8();
        uint64_t v197 = sub_10000EFC8();
        v199[0] = v197;
        *(_DWORD *)uint64_t v74 = 136315394;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v77 = sub_1000B7A4C(v75, v76);
        sub_1000CAC68(v77);
        swift_bridgeObjectRelease();
        sub_10000F050();
        *(_WORD *)(v74 + 12) = 2080;
        uint64_t v42 = (void (*)(uint64_t))v154[4];
        sub_10000853C(v154, v154[3]);
        sub_10004421C();
        v78();
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        uint64_t v79 = sub_1000CADAC();
        unint64_t v81 = v80;
        sub_10004381C();
        v82();
        uint64_t v83 = sub_10001DF20(v79, v81, v199);
        sub_1000CAC14(v83);
        swift_bridgeObjectRelease();
        swift_release_n();
        sub_1000CAE30((void *)&_mh_execute_header, v84, v85, "Marking asset %s unloaded from %s by termination");
        uint64_t v71 = v197;
        sub_10000EFA4();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v86 = sub_1000CA5EC();
      v42(v86);
      sub_1000CAEAC();
      uint64_t v87 = sub_1000CAA28();
      v88(v87);
      sub_1000CACBC();
      sub_100043F38();
      sub_1000CAD44();
      swift_endAccess();
      sub_1000C9FEC(v71, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v89 = sub_1000CAAD0();
      v42(v89);
      uint64_t v90 = sub_1000CAEAC();
      uint64_t v98 = sub_1000CA964(v90, v91, v92, v93, v94, v95, v96, v97, v118, v122, v126, v130, v134, v138, v142, v146, v150, (uint64_t)v154, v158,
              v162,
              v166,
              v169,
              v172,
              v175,
              v178,
              v181,
              v184);
      v99(v98);
      sub_1000CACBC();
      sub_100043F38();
      sub_1000CAD44();
      swift_endAccess();
      sub_1000C9FEC(v71, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_1000CAD74();
      InferenceProviderAssetDescriptor.version.getter();
      AssetCost.onDeviceMemory.getter();
      sub_100043E68();
      uint64_t v101 = v100();
      uint64_t v109 = sub_1000CA768(v101, v102, v103, v104, v105, v106, v107, v108, v119, v123, v127, v131, v135, v139, v143, v147, v151, v155, v159,
               v163,
               v167,
               v170,
               v173,
               v176,
               v179,
               v182,
               v185,
               v187,
               v189,
               v191,
               v193,
               v194,
               v195);
      v110(v109);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_10002EB50((uint64_t)v42, &qword_10015DA50);
      sub_100043AE0();
      v111();
      sub_10000EFBC();
      v112();
      v198(v196, v197);
    }
    sub_1000CA8D8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000CA988();
    __asm { BRAA            X1, X16 }
  }
  v1[40] = v8;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[41] = v9;
  sub_100003A70(&qword_10015B468);
  *uint64_t v9 = v1;
  v9[1] = sub_1000BC870;
  sub_1000CA988();
  return Task.value.getter(v10, v11, v12, v13, v14);
}

uint64_t sub_1000BC870()
{
  sub_1000086EC();
  sub_10002FC48();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_100044174();
  if (v0) {
    swift_errorRelease();
  }
  sub_1000CAA98();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000BC96C()
{
  v198 = v0;
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[16];
  swift_release();
  uint64_t v6 = *(void *)(v5 + v3 + *(int *)(v4 + 28));
  if (!v6)
  {
    uint64_t v13 = sub_1000CA860();
    v14(v13);
    uint64_t v15 = sub_1000CAA08();
    v2(v15);
    sub_1000C99B0(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
    uint64_t v16 = sub_1000CABF0();
    uint64_t v17 = *(void (**)(void))(v1 + 8);
    sub_100043924();
    v17();
    if (v16)
    {
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_1000CAD5C();
      sub_1000CA934(v18, (uint64_t)qword_10015DC38);
      uint64_t v19 = (void *)Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (sub_100057CB0(v20))
      {
        uint64_t v21 = v0[16];
        os_log_type_t v22 = (_DWORD *)sub_10000EFE8();
        v197[0] = sub_10000EFC8();
        *os_log_type_t v22 = 136315394;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v25 = sub_1000B7A4C(v23, v24);
        sub_1000CAAA8(v25);
        swift_bridgeObjectRelease();
        sub_1000B72DC();
        sub_1000CAD24();
        unint64_t v26 = *(void *)(v21 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v27 = sub_10000853C((void *)(v21 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v26);
        sub_10004421C();
        v28();
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        sub_1000CADCC();
        uint64_t v29 = sub_1000CAA78();
        v30(v29);
        uint64_t v31 = sub_10001DF20((uint64_t)v27, v26, v197);
        sub_1000CAB48(v31);
        swift_bridgeObjectRelease();
        sub_1000B72DC();
        sub_1000CAE64((void *)&_mh_execute_header, v32, v33, "Asset %s from %s already in unloaded state at time of connection termination");
        sub_10000EFA4();
        sub_10000ED7C();
        sub_10000ED7C();

        sub_10000EFBC();
        v34();
      }
      else
      {

        swift_release_n();
        sub_100043924();
        v17();
      }
    }
    else
    {
      sub_1000CA564();
      UUIDIdentifier.init()();
      sub_1000CAEC4(OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
      uint64_t v35 = InferenceProviderAssetDescriptor.identifier.getter();
      uint64_t v172 = v36;
      uint64_t v175 = v35;
      InferenceProviderAssetDescriptor.version.getter();
      uint64_t v37 = sub_1000CA9A4();
      v2(v37);
      uint64_t v38 = sub_1000CAE98();
      v39(v38);
      uint64_t v40 = *(void (**)(uint64_t))((char *)v17
                                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                                           + 24);
      uint64_t v150 = (uint64_t)v17 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
      sub_10000853C((void (*)(void))((char *)v17+ OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), (uint64_t)v40);
      sub_10004421C();
      v41();
      InferenceProviderDescriptor.id.getter();
      uint64_t v42 = sub_1000CA90C();
      uint64_t v44 = v43(v42);
      sub_1000CAC98(v44, v45, v46, v47, v48, v49, v50, v51, v114, v118, v122, v126, v130, v134, v138, v142, v146, v150, v154,
        v158,
        v162);
      uint64_t v52 = sub_100003A70(&qword_10015B9A0);
      uint64_t v53 = v184;
      uint64_t v56 = sub_1000CAB84(v184, v54, v55, v52);
      uint64_t v64 = sub_1000CA660(v56, v57, v58, v59, v60, v61, v62, v63, v115, v119, v123, v127, v131, v135, v139, v143, v147, v151, v155,
              v159,
              v163,
              v166,
              v169,
              v172,
              v175,
              v178,
              v181,
              v184,
              v186,
              v188,
              v190);
      v65(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002EB50((uint64_t)v2, &qword_10015DA50);
      sub_10002EB50(v53, &qword_10015DA90);
      sub_10002EB50(v5, &qword_10015BAA8);
      sub_10000EFBC();
      v66();
      sub_10004381C();
      v67();
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v68 = sub_1000CAD5C();
      sub_1000CA934(v68, (uint64_t)qword_10015DC38);
      uint64_t v69 = v4;
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v194 = v0[26];
        uint64_t v193 = v0[16];
        uint64_t v72 = sub_10000EFE8();
        uint64_t v195 = sub_10000EFC8();
        v197[0] = v195;
        *(_DWORD *)uint64_t v72 = 136315394;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v75 = sub_1000B7A4C(v73, v74);
        sub_1000CAC68(v75);
        swift_bridgeObjectRelease();
        sub_10000F050();
        *(_WORD *)(v72 + 12) = 2080;
        uint64_t v40 = (void (*)(uint64_t))v152[4];
        sub_10000853C(v152, v152[3]);
        sub_10004421C();
        v76();
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        uint64_t v77 = sub_1000CADAC();
        unint64_t v79 = v78;
        sub_10004381C();
        v80();
        uint64_t v81 = sub_10001DF20(v77, v79, v197);
        sub_1000CAC14(v81);
        swift_bridgeObjectRelease();
        swift_release_n();
        sub_1000CAE30((void *)&_mh_execute_header, v82, v83, "Marking asset %s unloaded from %s by termination");
        uint64_t v69 = v195;
        sub_10000EFA4();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v84 = sub_1000CA5EC();
      v40(v84);
      sub_1000CAEAC();
      uint64_t v85 = sub_1000CAA28();
      v86(v85);
      sub_1000CACBC();
      sub_100043F38();
      sub_1000CAD44();
      swift_endAccess();
      sub_1000C9FEC(v69, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      uint64_t v87 = sub_1000CAAD0();
      v40(v87);
      uint64_t v88 = sub_1000CAEAC();
      uint64_t v96 = sub_1000CA964(v88, v89, v90, v91, v92, v93, v94, v95, v116, v120, v124, v128, v132, v136, v140, v144, v148, (uint64_t)v152, v156,
              v160,
              v164,
              v167,
              v170,
              v173,
              v176,
              v179,
              v182);
      v97(v96);
      sub_1000CACBC();
      sub_100043F38();
      sub_1000CAD44();
      swift_endAccess();
      sub_1000C9FEC(v69, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
      sub_1000CAD74();
      InferenceProviderAssetDescriptor.version.getter();
      AssetCost.onDeviceMemory.getter();
      sub_100043E68();
      uint64_t v99 = v98();
      uint64_t v107 = sub_1000CA768(v99, v100, v101, v102, v103, v104, v105, v106, v117, v121, v125, v129, v133, v137, v141, v145, v149, v153, v157,
               v161,
               v165,
               v168,
               v171,
               v174,
               v177,
               v180,
               v183,
               v185,
               v187,
               v189,
               v191,
               v192,
               v193);
      v108(v107);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_10002EB50((uint64_t)v40, &qword_10015DA50);
      sub_100043AE0();
      v109();
      sub_10000EFBC();
      v110();
      v196(v194, v195);
    }
    sub_1000CA8D8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000CA988();
    __asm { BRAA            X1, X16 }
  }
  v0[40] = v6;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[41] = v7;
  sub_100003A70(&qword_10015B468);
  *uint64_t v7 = v0;
  v7[1] = sub_1000BC870;
  sub_1000CA988();
  return Task.value.getter(v8, v9, v10, v11, v12);
}

uint64_t sub_1000BD23C()
{
  *(void *)(v1 + 24) = v0;
  return sub_10000EFE0((uint64_t)sub_1000BD258, 0);
}

uint64_t sub_1000BD258()
{
  uint64_t v15 = v0;
  if (qword_10015B0C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015DC38);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = sub_10002FF90();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v14 = v5;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_10001DF20(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Asset %s received handleConnectionTermination", v4, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100044610();
  }

  uint64_t v8 = sub_1000BB9D4();
  v0[4] = v8;
  if (!v8)
  {
    sub_10000EF7C();
    sub_10002FE48();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[5] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000BD4E8;
  sub_10002FE48();
  return sub_1000BBD88();
}

uint64_t sub_1000BD4E8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000BD5B4, 0, 0);
}

uint64_t sub_1000BD5B4()
{
  sub_1000086E0();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000BD60C()
{
  type metadata accessor for InferenceProviderAssetDescriptor();
  sub_10002FB84();
  sub_10000EFBC();
  v1();
  swift_bridgeObjectRelease();
  type metadata accessor for AssetCost();
  sub_10002FB84();
  sub_10000EFBC();
  v2();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
  sub_1000C9FEC(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager);
  swift_release();
  sub_1000C9A6C(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_weakManagerWrapper);
  type metadata accessor for UUID();
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return v0;
}

uint64_t sub_1000BD74C()
{
  sub_1000BD60C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000BD7A4()
{
  return type metadata accessor for InferenceProviderAsset(0);
}

uint64_t type metadata accessor for InferenceProviderAsset(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015DC78);
}

uint64_t sub_1000BD7CC()
{
  uint64_t result = type metadata accessor for InferenceProviderAssetDescriptor();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AssetCost();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for UUID();
        if (v4 <= 0x3F) {
          return swift_updateClassMetadata2();
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for InferenceProviderAsset.ManagerOwnedState(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015DDB0);
}

uint64_t initializeWithCopy for InferenceProviderAsset.WeakManagerWrapper()
{
  return _swift_weakCopyInit();
}

uint64_t assignWithCopy for InferenceProviderAsset.WeakManagerWrapper()
{
  return _swift_weakCopyAssign();
}

uint64_t initializeWithTake for InferenceProviderAsset.WeakManagerWrapper()
{
  return _swift_weakTakeInit();
}

uint64_t assignWithTake for InferenceProviderAsset.WeakManagerWrapper()
{
  return _swift_weakTakeAssign();
}

uint64_t getEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InferenceProviderAsset.WeakManagerWrapper(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InferenceProviderAsset.WeakManagerWrapper()
{
  return &type metadata for InferenceProviderAsset.WeakManagerWrapper;
}

void *sub_1000BD9D0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t State = type metadata accessor for LoadState();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(State - 8) + 16);
    v8(a1, a2, State);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), State);
    uint64_t v9 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_retain();
    v14(v11, v12, v13);
    v14((char *)a1 + a3[9], (char *)a2 + a3[9], v13);
    uint64_t v15 = a3[11];
    *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = a3[13];
    *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000BDB88(uint64_t a1, int *a2)
{
  uint64_t State = type metadata accessor for LoadState();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(State - 8) + 8);
  v5(a1, State);
  v5(a1 + a2[5], State);
  swift_release();
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[9], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BDCA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 16);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  v13(v10, v11, v12);
  v13(a1 + a3[9], a2 + a3[9], v12);
  uint64_t v14 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000BDE10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 24);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v12(a1 + a3[9], a2 + a3[9], v11);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000BDFA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 32);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + a3[9], a2 + a3[9], v12);
  uint64_t v14 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t sub_1000BE0E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(State - 8) + 40);
  v7(a1, a2, State);
  v7(a1 + a3[5], a2 + a3[5], State);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13(a1 + a3[9], a2 + a3[9], v12);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000BE250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE264);
}

uint64_t sub_1000BE264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for LoadState();
  sub_1000CA550();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return sub_100006AE8(v9, a2, v8);
  }
  type metadata accessor for Date();
  sub_1000CA550();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 40));
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_1000BE320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE334);
}

void sub_1000BE334(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for LoadState();
  sub_1000CA550();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Date();
    sub_1000CA550();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 32);
  }

  sub_100006960(v11, a2, a2, v10);
}

uint64_t sub_1000BE3EC()
{
  uint64_t result = type metadata accessor for LoadState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000BE4DC()
{
  return sub_1000C99B0(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
}

uint64_t sub_1000BE524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_connectionTerminationIdentifier;
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000BE598()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000E1FC;
  return sub_1000BD23C();
}

uint64_t sub_1000BE624()
{
  sub_1000086E0();
  uint64_t v3 = v2;
  v1[25] = v4;
  v1[26] = v0;
  v1[23] = v5;
  v1[24] = v6;
  v1[21] = v7;
  v1[22] = v8;
  v1[20] = v2;
  uint64_t v9 = type metadata accessor for AssetCost();
  v1[27] = v9;
  sub_10002FA4C(v9);
  v1[28] = v10;
  v1[29] = sub_10002FE18();
  uint64_t v11 = type metadata accessor for ModelManagerError();
  v1[30] = v11;
  sub_10002FA4C(v11);
  v1[31] = v12;
  v1[32] = sub_100057A60();
  v1[33] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for InferenceError();
  v1[34] = v13;
  sub_10002FA4C(v13);
  v1[35] = v14;
  v1[36] = sub_100057A60();
  v1[37] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  v1[38] = v15;
  sub_10002FA4C(v15);
  v1[39] = v16;
  v1[40] = sub_10002FE18();
  uint64_t State = type metadata accessor for LoadState();
  v1[41] = State;
  sub_10002FA4C(State);
  v1[42] = v18;
  v1[43] = sub_100057A60();
  v1[44] = swift_task_alloc();
  uint64_t v19 = sub_100003A70(&qword_10015BAA8);
  sub_10002FDD0(v19);
  v1[45] = sub_10002FE18();
  uint64_t v20 = sub_100003A70(&qword_10015B408);
  v1[46] = v20;
  sub_10002FA4C(v20);
  v1[47] = v21;
  v1[48] = sub_10002FE18();
  uint64_t v22 = type metadata accessor for InferenceProviderDescriptor();
  v1[49] = v22;
  sub_10002FA4C(v22);
  v1[50] = v23;
  v1[51] = sub_10002FE18();
  return _swift_task_switch(sub_1000BE830, v3, 0);
}

uint64_t sub_1000BE830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v28;
  a26 = v29;
  a24 = v27;
  if (qword_10015B0C8 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = sub_100003B18(v30, (uint64_t)qword_10015DC38);
  sub_1000CAF04(v31);
  os_log_type_t v32 = v26;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  uint64_t v35 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable;
  if (sub_100057CB0(v34))
  {
    a10 = v27 + 19;
    a12 = v27[49];
    uint64_t v36 = v27[26];
    uint64_t v37 = (_DWORD *)sub_10000EFE8();
    a15 = sub_10000EFC8();
    *uint64_t v37 = 136315394;
    os_log_type_t v58 = v32;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    v27[18] = sub_10001DF20(v38, v39, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_1000CA8C8();
    a11 = v40;
    unint64_t v41 = *(void *)(v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
    uint64_t v42 = sub_10000853C((void *)(v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v36 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
    sub_10004421C();
    v43();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    sub_1000CADEC();
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000CAC8C();
    sub_100043FA8();
    v44();
    v27[19] = sub_10001DF20((uint64_t)v42, v41, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v35 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable;
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_100043EC4((void *)&_mh_execute_header, v33, v58, "Loading asset %s into %s");
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000CAC38();
  }

  uint64_t v45 = v27[26];
  uint64_t v46 = v35[3];
  v27[53] = v46;
  uint64_t v47 = *(void *)(v45 + v46 + 32);
  sub_10000853C((void *)(v45 + v46), *(void *)(v45 + v46 + 24));
  uint64_t v59 = *(void *)(v47 + 64) + **(int **)(v47 + 64);
  uint64_t v48 = (void *)swift_task_alloc();
  v27[54] = v48;
  void *v48 = v27;
  v48[1] = sub_1000BEB94;
  sub_100044070(v27[26]);
  sub_1000306EC();
  return v54(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, v59, v47 + 64, a15, a16, a17, a18);
}

uint64_t sub_1000BEB94()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000BEC70()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  sub_1000CA050(v0[22], v1, &qword_10015BAA8);
  if (sub_100006AE8(v1, 1, v2) == 1)
  {
    uint64_t v3 = v0[45];
    type metadata accessor for RequestMetadata();
    UUIDIdentifier.init()();
    sub_10002EB50(v3, &qword_10015BAA8);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[47] + 32))(v0[48], v0[45], v0[46]);
  }
  uint64_t v4 = v0[50];
  uint64_t v47 = v0[48];
  uint64_t v37 = v0[44];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[26];
  uint64_t v44 = v0[25];
  uint64_t v46 = v0[24];
  long long v43 = *((_OWORD *)v0 + 11);
  uint64_t v45 = v0[21];
  uint64_t v7 = (void *)(v6 + v0[53]);
  uint64_t v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  v0[55] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v9 = *(void *)(v6 + v8 + 32);
  uint64_t v42 = *(void *)(v6 + v8 + 24);
  sub_10000853C((void *)(v6 + v8), v42);
  uint64_t v10 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  v0[56] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v11 = v6 + v10;
  uint64_t v12 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v40 = v13;
  uint64_t v41 = v12;
  uint64_t v49 = v11;
  uint64_t v14 = InferenceProviderAssetDescriptor.version.getter();
  uint64_t v38 = v15;
  uint64_t v39 = v14;
  sub_100043E68();
  v16();
  sub_10000853C(v7, v7[3]);
  sub_1000CACF0();
  sub_10004421C();
  v17();
  uint64_t v18 = InferenceProviderDescriptor.id.getter();
  uint64_t v20 = v19;
  v0[57] = *(void *)(v4 + 8);
  v0[58] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043AE0();
  v21();
  v0[59] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v9 + 40))(v47, v41, v40, v39, v38, v46, v37, v45, v18, v20, v43, *((void *)&v43 + 1), v44, v42, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[60] = *(void *)(v5 + 8);
  v0[61] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043FA8();
  v22();
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    sub_10002FF90();
    *(_DWORD *)uint64_t v25 = 136315138;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[17] = sub_1000B7A4C(v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F050();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "loadIn executing on %s", v25, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_10000F050();
  }

  uint64_t v28 = (void *)(v0[26] + v0[53]);
  uint64_t v29 = v28[3];
  uint64_t v30 = v28[4];
  sub_10000853C(v28, v29);
  sub_100043E68();
  v31();
  uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 24)
                                                                                     + **(int **)(v30 + 24));
  os_log_type_t v32 = (void *)swift_task_alloc();
  v0[62] = v32;
  *os_log_type_t v32 = v0;
  v32[1] = sub_1000BF120;
  uint64_t v33 = v0[48];
  uint64_t v34 = v0[43];
  uint64_t v35 = v0[24];
  return v48(v49, v34, v35, v33, v29, v30);
}

uint64_t sub_1000BF120()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 504) = v1;
  swift_task_dealloc();
  sub_100044174();
  (*(void (**)(void, void))(v0 + 480))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  sub_1000CAA98();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000BF26C()
{
  uint64_t v46 = v1;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v0, "loadIn finished", v4, 2u);
    sub_10000ED7C();
  }
  uint64_t v5 = v1[26];

  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_neuralEngine);
  sub_1000FD848(*(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8), *(unsigned char *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode));
  sub_1000CACD4();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (sub_100057CB0(v8))
  {
    long long v43 = (void (*)(uint64_t, uint64_t))v1[57];
    uint64_t v9 = v1[51];
    uint64_t v42 = v1[49];
    os_log_type_t v44 = v6;
    uint64_t v10 = (void *)(v1[26] + v1[53]);
    uint64_t v11 = (_DWORD *)sub_10000EFE8();
    uint64_t v45 = sub_10000EFC8();
    *uint64_t v11 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v1[13] = sub_1000CAC50(v12, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_1000CA8C8();
    unint64_t v14 = v10[4];
    uint64_t v15 = sub_10000853C(v10, v10[3]);
    sub_10004421C();
    v16();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    sub_1000CADEC();
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000CAC8C();
    v43(v9, v42);
    v1[14] = sub_10001DF20((uint64_t)v15, v14, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_100043EC4((void *)&_mh_execute_header, v7, v44, "Finished loading asset %s into %s");
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000CAC38();
  }

  sub_1000CA894();
  uint64_t v38 = v1[38];
  uint64_t v37 = sub_1000CAB08();
  InferenceProviderAssetDescriptor.version.getter();
  AssetCost.onDeviceMemory.getter();
  sub_100043E68();
  uint64_t v18 = v17();
  uint64_t v26 = sub_1000CA7D0(v18, v19, v20, v21, v22, v23, v24, v25, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
  v27(v26);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100043FA8();
  v28();
  sub_10000EFBC();
  v29();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v30();
}

uint64_t sub_1000BF694()
{
  uint64_t v116 = v0;
  v0[9] = v0[63];
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    uint64_t v4 = v0[63];
    swift_errorRelease();
    v0[5] = v4;
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      sub_1000CAA48();
      if (v5() == enum case for ModelManagerError.inferenceError(_:))
      {
        uint64_t v6 = v0[34];
        uint64_t v7 = v0[35];
        uint64_t v8 = v0[33];
        (*(void (**)(uint64_t, void))(v0[31] + 96))(v8, v0[30]);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v8, v6) == enum case for InferenceError.alreadyLoaded(_:))
        {
          uint64_t v9 = v0[34];
          uint64_t v10 = v0[35];
          uint64_t v11 = v0[33];
          swift_errorRelease();
          uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
          uint64_t v1 = v10 + 8;
          v12(v11, v9);
          goto LABEL_9;
        }
        uint64_t v26 = v0[34];
        uint64_t v27 = v0[35];
        uint64_t v25 = v0[33];
      }
      else
      {
        uint64_t v25 = v0[33];
        uint64_t v26 = v0[30];
        uint64_t v27 = v0[31];
      }
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    }
    uint64_t v54 = v0[63];
    swift_errorRelease();
    swift_retain_n();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v56))
    {
      uint64_t v100 = (void (*)(uint64_t, uint64_t))v0[57];
      uint64_t v96 = v0[51];
      uint64_t v98 = v0[49];
      loga = v55;
      uint64_t v57 = (void *)(v0[26] + v0[53]);
      uint64_t v58 = sub_10002FF90();
      uint64_t v104 = (void *)swift_slowAlloc();
      v115[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v58 = 136315650;
      os_log_type_t typeb = v54;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[10] = sub_10001DF20(v59, v60, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v58 + 12) = 2080;
      sub_10000853C(v57, v57[3]);
      sub_10004421C();
      v61();
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v64 = v63;
      v100(v96, v98);
      v0[11] = sub_10001DF20(v62, v64, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v58 + 22) = 2112;
      swift_errorRetain();
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
      v0[12] = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v104 = v65;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v55 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, typeb, "Failed to load asset %s into %s: %@", (uint8_t *)v58, 0x20u);
      sub_100003A70(&qword_10015BA58);
      sub_1000CA9E8();
      sub_10000ED7C();
      sub_1000CADF8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_1000CAC38();
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = v0[63];
    *(void *)typec = v0[48];
    os_log_t logb = (os_log_t)v0[59];
    uint64_t v102 = v0[40];
    uint64_t v105 = v0[25];
    uint64_t v67 = (void *)(v0[26] + v0[55]);
    uint64_t v68 = v67[3];
    uint64_t v69 = v67[4];
    sub_10000853C(v67, v68);
    uint64_t v70 = InferenceProviderAssetDescriptor.identifier.getter();
    uint64_t v99 = v71;
    uint64_t v101 = v70;
    uint64_t v97 = InferenceProviderAssetDescriptor.version.getter();
    uint64_t v73 = v72;
    static AssetCost.zero.getter();
    uint64_t v93 = AssetCost.onDeviceMemory.getter();
    sub_100043AE0();
    v74();
    sub_100043E68();
    v75();
    unint64_t v76 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, os_log_t, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 48);
    swift_errorRetain();
    v76(*(void *)typec, v101, v99, v97, v73, v93, v102, logb, v66, v105, v68, v69);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v77();
    v0[6] = v66;
    swift_errorRetain();
    if (swift_dynamicCast() || (v0[7] = v0[63], swift_errorRetain(), swift_dynamicCast()))
    {
      sub_10004381C();
      v78();
      swift_willThrow();
      swift_release();
    }
    else
    {
      uint64_t v80 = v0[34];
      uint64_t v79 = v0[35];
      sub_1000C99B0((unint64_t *)&qword_10015C7C0, (void (*)(uint64_t))&type metadata accessor for InferenceError);
      swift_allocError();
      uint64_t v82 = v81;
      swift_getErrorValue();
      Error.localizedDescription.getter();
      Dictionary.init(dictionaryLiteral:)();
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v82, enum case for InferenceError.loadFailed(_:), v80);
      swift_willThrow();
      swift_release();
      swift_errorRelease();
    }
    sub_10004381C();
    v83();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    goto LABEL_27;
  }
  sub_1000CAA48();
  if (v2() != enum case for InferenceError.alreadyLoaded(_:))
  {
    (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
    goto LABEL_5;
  }
  swift_errorRelease();
  sub_100043FA8();
  v3();
LABEL_9:
  swift_errorRelease();
  sub_1000CACD4();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    type = (void (*)(uint64_t, uint64_t))v0[57];
    sub_1000CAEF0();
    uint64_t v103 = v15;
    os_log_type_t v113 = v14;
    uint64_t v17 = (void *)(v0[26] + v16);
    uint64_t v18 = sub_10000EFE8();
    v115[0] = sub_10000EFC8();
    *(_DWORD *)uint64_t v18 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_10001DF20(v19, v20, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B72DC();
    *(_WORD *)(v18 + 12) = 2080;
    sub_10000853C(v17, v17[3]);
    sub_1000CACF0();
    sub_10004421C();
    v21();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v24 = v23;
    type(v1, v103);
    v0[16] = sub_10001DF20(v22, v24, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B72DC();
    _os_log_impl((void *)&_mh_execute_header, v13, v113, "Asset %s already loaded into %s", (uint8_t *)v18, 0x16u);
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000CAC38();
  }

  sub_1000CACD4();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    os_log_t log = (os_log_t)v0[57];
    sub_1000CAEF0();
    *(void *)typea = v30;
    os_log_type_t v114 = v29;
    uint64_t v32 = (void *)(v0[26] + v31);
    uint64_t v33 = sub_10000EFE8();
    v115[0] = sub_10000EFC8();
    *(_DWORD *)uint64_t v33 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_10001DF20(v34, v35, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B7784();
    *(_WORD *)(v33 + 12) = 2080;
    sub_10000853C(v32, v32[3]);
    sub_10004421C();
    v36();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v39 = v38;
    ((void (*)(uint64_t, void))log)(v1, *(void *)typea);
    v0[14] = sub_10001DF20(v37, v39, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B7784();
    _os_log_impl((void *)&_mh_execute_header, v28, v114, "Finished loading asset %s into %s", (uint8_t *)v33, 0x16u);
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000CAC38();
  }

  sub_1000CA894();
  uint64_t v91 = v0[38];
  uint64_t v90 = sub_1000CAB08();
  InferenceProviderAssetDescriptor.version.getter();
  AssetCost.onDeviceMemory.getter();
  sub_100043E68();
  uint64_t v41 = v40();
  uint64_t v49 = sub_1000CA7D0(v41, v42, v43, v44, v45, v46, v47, v48, v85, v86, v87, v88, v89, v90, v91, v92, v94, v95);
  v50(v49);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100043FA8();
  v51();
  sub_10000EFBC();
  v52();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
LABEL_27:
  return v53();
}

uint64_t sub_1000C049C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = v2;
  return sub_10000EFE0((uint64_t)sub_1000C04BC, a1);
}

uint64_t sub_1000C04BC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  sub_100043F38();
  uint64_t State = type metadata accessor for LoadState();
  sub_10002FB84();
  uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
  uint64_t v6 = sub_100069E00();
  v5(v6);
  uint64_t v7 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  ((void (*)(uint64_t, uint64_t, uint64_t))v5)(v2 + *(int *)(v7 + 20), v1, State);
  *(void *)(v2 + *(int *)(v7 + 28)) = 0;
  swift_endAccess();
  swift_release();
  sub_10000EF7C();
  return v8();
}

uint64_t sub_1000C05C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v193 = a7;
  uint64_t v191 = a6;
  uint64_t v189 = a5;
  uint64_t v188 = a4;
  uint64_t v196 = a3;
  uint64_t v213 = a2;
  v204 = a8;
  uint64_t v9 = sub_100003A70(&qword_10015DA50);
  uint64_t v194 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v195 = v11;
  v203 = (void (*)(char *, uint64_t))((char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100003A70(&qword_10015DA90);
  uint64_t v192 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v192 + 64);
  __chkstk_darwin(v12 - 8, v14);
  uint64_t v202 = (uint64_t)&v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100003A70(&qword_10015BAA8);
  uint64_t v187 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v187 + 64);
  __chkstk_darwin(v15 - 8, v17);
  uint64_t v201 = (uint64_t)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  uint64_t v190 = *(void *)(v199 - 8);
  uint64_t v18 = *(void *)(v190 + 64);
  __chkstk_darwin(v199, v19);
  v198 = (char *)&v174 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v200 = (uint64_t)&v174 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for InferenceProviderDescriptor();
  unint64_t v208 = *(void *)(v23 - 8);
  unint64_t v209 = v23;
  __chkstk_darwin(v23, v24);
  v207 = (char *)&v174 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v210 = *(void *)(State - 8);
  uint64_t v26 = *(void *)(v210 + 64);
  uint64_t v28 = __chkstk_darwin(State, v27);
  os_log_type_t v29 = (char *)&v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = (char *)&v174 - v32;
  uint64_t v35 = __chkstk_darwin(v31, v34);
  uint64_t v197 = (char *)&v174 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  v206 = (char *)&v174 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  v211 = (char *)&v174 - v42;
  __chkstk_darwin(v41, v43);
  uint64_t v45 = (char *)&v174 - v44;
  uint64_t v46 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if (*(unsigned char *)(a1 + *(int *)(v46 + 52)))
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100003B18(v47, (uint64_t)qword_10015DC38);
    swift_retain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315138;
      v215 = (char *)v51;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v52, v53, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Tried to load invalidated asset: %s", v50, 0xCu);
      swift_arrayDestroy();
LABEL_11:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_19:
      uint64_t v97 = type metadata accessor for ModelManagerError();
      sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v97 - 8) + 104))(v98, enum case for ModelManagerError.internalError(_:), v97);
      return swift_willThrow();
    }
    goto LABEL_18;
  }
  uint64_t v54 = v46;
  uint64_t v55 = *(int *)(v46 + 28);
  if (*(void *)(a1 + v55))
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_100003B18(v56, (uint64_t)qword_10015DC38);
    uint64_t v57 = v213;
    swift_retain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t State = swift_slowAlloc();
      v215 = (char *)State;
      *(_DWORD *)uint64_t v59 = 136315394;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v60, v61, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v62 = (void *)(v57 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v63 = *(void *)(v57 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v64 = *(void *)(v57 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v62, v63);
      uint64_t v65 = v207;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v64);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      unint64_t v66 = v209;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v69 = v68;
      (*(void (**)(char *, unint64_t))(v208 + 8))(v65, v66);
      uint64_t v214 = sub_10001DF20(v67, v69, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v58, "loadIfNeccesary called with pending transition task for %s with %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      goto LABEL_11;
    }
LABEL_18:

    swift_release_n();
    goto LABEL_19;
  }
  uint64_t v179 = v16;
  uint64_t v180 = v13;
  uint64_t v181 = v55;
  uint64_t v71 = v210 + 16;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 16);
  uint64_t v72 = v45;
  uint64_t v186 = v45;
  uint64_t v73 = State;
  v70(v72, a1, State);
  uint64_t v74 = *(int *)(v54 + 20);
  uint64_t v182 = a1;
  uint64_t v75 = a1 + v74;
  uint64_t v76 = (uint64_t)v211;
  uint64_t v77 = v73;
  uint64_t v78 = (uint64_t)v186;
  uint64_t v185 = v71;
  uint64_t v183 = v70;
  v70(v211, v75, v77);
  char v79 = sub_100101C40(v78, v76);
  uint64_t v184 = v75;
  if (v79)
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    uint64_t v81 = sub_100003B18(v80, (uint64_t)qword_10015DC38);
    uint64_t v82 = v213;
    swift_retain_n();
    uint64_t v177 = v81;
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    int v85 = v84;
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v86 = swift_slowAlloc();
      uint64_t v176 = swift_slowAlloc();
      v215 = (char *)v176;
      *(_DWORD *)uint64_t v86 = 136315394;
      LODWORD(v178) = v85;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v87, v88, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2080;
      uint64_t v175 = (void (*)(uint64_t, void, uint64_t))(v86 + 14);
      uint64_t v89 = (void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v90 = *(void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v91 = *(void *)(v82 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v89, v90);
      uint64_t v92 = v207;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v91);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      unint64_t v93 = v209;
      uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v96 = v95;
      (*(void (**)(char *, unint64_t))(v208 + 8))(v92, v93);
      uint64_t v214 = sub_10001DF20(v94, v96, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v178, "loadIfNecessary entering for asset %s with %s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v128 = v210;
    uint64_t v129 = v206;
    uint64_t v130 = *(void (**)(void))(v210 + 104);
    LODWORD(v176) = enum case for LoadState.loaded(_:);
    uint64_t v131 = State;
    uint64_t v175 = (void (*)(uint64_t, void, uint64_t))v130;
    v130(v206);
    sub_1000C99B0(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
    uint64_t v132 = v186;
    char v133 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    uint64_t v134 = v128 + 8;
    uint64_t v136 = v129;
    uint64_t v137 = v129;
    uint64_t v138 = v135;
    v135((uint64_t)v137, v131);
    uint64_t v178 = (uint64_t (*)(char *, uint64_t))v135;
    if (v133)
    {
      uint64_t v210 = v134;
      uint64_t v139 = v213;
      swift_retain_n();
      uint64_t v140 = Logger.logObject.getter();
      os_log_type_t v141 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v140, v141))
      {
        uint64_t v142 = swift_slowAlloc();
        v206 = (char *)swift_slowAlloc();
        v215 = v206;
        *(_DWORD *)uint64_t v142 = 136315394;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v214 = sub_10001DF20(v143, v144, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v142 + 12) = 2080;
        uint64_t v145 = (void *)(v139 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v146 = *(void *)(v139
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v147 = *(void *)(v139
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10000853C(v145, v146);
        uint64_t v148 = v207;
        (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v146, v147);
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        unint64_t v149 = v209;
        uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v152 = v151;
        (*(void (**)(char *, unint64_t))(v208 + 8))(v148, v149);
        uint64_t v214 = sub_10001DF20(v150, v152, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "Not loading asset %s into %s: already loaded", (uint8_t *)v142, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v172 = State;
      uint64_t v173 = v178;
      v178(v211, State);
      uint64_t result = v173(v186, v172);
      uint64_t *v204 = 0;
    }
    else
    {
      uint64_t v156 = v136;
      uint64_t v157 = (void (*)(char *, char *, uint64_t))v183;
      v183(v156, (uint64_t)v132, v131);
      uint64_t v158 = v184;
      v138(v184, v131);
      v175(v158, v176, v131);
      uint64_t v159 = type metadata accessor for TaskPriority();
      sub_100006960(v200, 1, 1, v159);
      uint64_t v160 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v198, v188, v199);
      sub_1000CA050(v189, v201, &qword_10015BAA8);
      sub_1000CA050(v191, v202, &qword_10015DA90);
      v157(v197, v206, v131);
      sub_1000CA050(v193, (uint64_t)v203, &qword_10015DA50);
      v207 = (char *)sub_1000C99B0(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
      uint64_t v161 = v210;
      unint64_t v162 = (*(unsigned __int8 *)(v160 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
      unint64_t v163 = (v18 + *(unsigned __int8 *)(v187 + 80) + v162) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80);
      unint64_t v208 = (v179 + *(unsigned __int8 *)(v192 + 80) + v163) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80);
      unint64_t v164 = (v180 + *(unsigned __int8 *)(v210 + 80) + v208) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
      unint64_t v209 = (v26 + *(unsigned __int8 *)(v194 + 80) + v164) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
      uint64_t v165 = (char *)swift_allocObject();
      uint64_t v166 = v196;
      uint64_t v167 = v207;
      *((void *)v165 + 2) = v196;
      *((void *)v165 + 3) = v167;
      *((void *)v165 + 4) = v213;
      *((void *)v165 + 5) = v166;
      (*(void (**)(char *, char *, uint64_t))(v160 + 32))(&v165[v162], v198, v199);
      sub_10006FCD0(v201, (uint64_t)&v165[v163], &qword_10015BAA8);
      sub_10006FCD0(v202, (uint64_t)&v165[v208], &qword_10015DA90);
      (*(void (**)(char *, char *, uint64_t))(v161 + 32))(&v165[v164], v197, v131);
      sub_10006FCD0((uint64_t)v203, (uint64_t)&v165[v209], &qword_10015DA50);
      swift_retain_n();
      swift_retain();
      uint64_t v168 = sub_10000F8FC(v200, (uint64_t)&unk_10015DE90, (uint64_t)v165);
      uint64_t v169 = (void (*)(char *, uint64_t))v178;
      v178(v206, v131);
      v169(v211, v131);
      v169(v186, v131);
      uint64_t v170 = v182;
      uint64_t v171 = v181;
      swift_release();
      *(void *)(v170 + v171) = v168;
      uint64_t *v204 = v168;
      return swift_retain();
    }
  }
  else
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v100 = type metadata accessor for Logger();
    sub_100003B18(v100, (uint64_t)qword_10015DC38);
    uint64_t v101 = State;
    uint64_t v102 = (void (*)(char *, char *, uint64_t))v183;
    v183(v33, v78, State);
    v102(v29, v211, v101);
    swift_retain_n();
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.fault.getter();
    int v105 = v104;
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v106 = swift_slowAlloc();
      v206 = (char *)swift_slowAlloc();
      v215 = v206;
      *(_DWORD *)uint64_t v106 = 136315906;
      sub_1000C99B0(&qword_10015CF78, (void (*)(uint64_t))&type metadata accessor for LoadState);
      os_log_t v205 = v103;
      uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v107, v108, (uint64_t *)&v215);
      LODWORD(v204) = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v109 = *(void (**)(char *, uint64_t))(v210 + 8);
      v109(v33, State);
      v203 = v109;
      *(_WORD *)(v106 + 12) = 2080;
      uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v110, v111, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v109(v29, State);
      uint64_t v101 = State;
      uint64_t v112 = v213;
      *(_WORD *)(v106 + 22) = 2080;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v214 = sub_10001DF20(v113, v114, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v106 + 32) = 2080;
      uint64_t v202 = v106 + 34;
      uint64_t v115 = (void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v116 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v117 = *(void *)(v112 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v115, v116);
      uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
      uint64_t v119 = v207;
      uint64_t v120 = v117;
      uint64_t v121 = v210;
      v118(v116, v120);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      unint64_t v122 = v209;
      uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v125 = v124;
      (*(void (**)(char *, unint64_t))(v208 + 8))(v119, v122);
      uint64_t v214 = sub_10001DF20(v123, v125, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v126 = v205;
      _os_log_impl((void *)&_mh_execute_header, v205, (os_log_type_t)v204, "loadIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v106, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v127 = v203;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v121 = v210;
      uint64_t v127 = *(void (**)(char *, uint64_t))(v210 + 8);
      v127(v33, v101);
      v127(v29, v101);

      swift_release_n();
    }
    uint64_t v153 = v186;
    (*(void (**)(uint64_t, char *, uint64_t))(v121 + 24))(v184, v186, v101);
    uint64_t v154 = type metadata accessor for ModelManagerError();
    sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v154 - 8) + 104))(v155, enum case for ModelManagerError.internalError(_:), v154);
    swift_willThrow();
    v127(v211, v101);
    return ((uint64_t (*)(char *, uint64_t))v127)(v153, v101);
  }
  return result;
}

uint64_t sub_1000C1E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = v15;
  v8[20] = v16;
  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
  v8[21] = v10;
  v8[22] = *(void *)(v10 - 8);
  v8[23] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v8[24] = State;
  v8[25] = *(void *)(State - 8);
  v8[26] = swift_task_alloc();
  v8[27] = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Date();
  v8[30] = v12;
  v8[31] = *(void *)(v12 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  return _swift_task_switch(sub_1000C2050, a5, 0);
}

uint64_t sub_1000C2050()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[14];
  uint64_t v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  v0[34] = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  uint64_t v9 = v7 + v8;
  swift_beginAccess();
  sub_100069DF4();
  v10();
  static Date.now.getter();
  sub_1000C99F8(v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v4 + *(int *)(v6 + 32), v1, v2);
  sub_1000CACBC();
  sub_100043F38();
  sub_1000B52C8(v5, v9);
  swift_endAccess();
  sub_1000C9FEC(v4, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[35] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000C21D0;
  sub_100044070(v0[15]);
  sub_1000307C8();
  return sub_1000BE624();
}

uint64_t sub_1000C21D0()
{
  sub_1000086EC();
  uint64_t v2 = *v1;
  sub_10000ED94();
  uint64_t *v4 = v3;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 288) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v6 = sub_1000C2738;
  }
  else {
    uint64_t v6 = sub_1000C22F4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000C22F4()
{
  sub_1000086E0();
  sub_100043E68();
  v1();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v2;
  void *v2 = v0;
  v2[1] = sub_1000C23A4;
  uint64_t v3 = sub_100044070(*(void *)(v0 + 120));
  return sub_1000C049C(v3, v4);
}

uint64_t sub_1000C23A4()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  sub_100043EDC();
  sub_100043924();
  v5();
  return _swift_task_switch(sub_1000C24D8, v2, 0);
}

uint64_t sub_1000C24D8()
{
  sub_10004381C();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v1();
}

uint64_t sub_1000C2590()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_1000C266C()
{
  swift_willThrow();
  sub_100043AE0();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000C2738()
{
  os_log_type_t v29 = v0;
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[14] + v0[34];
  sub_1000C99F8(v7, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v4 + *(int *)(v6 + 32), v1, v2);
  sub_1000C99F8(v4, v5);
  sub_100043F38();
  sub_1000B52C8(v5, v7);
  swift_endAccess();
  sub_1000C9FEC(v4, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  if (qword_10015B0C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_100003B18(v8, (uint64_t)qword_10015DC38);
  swift_retain_n();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = v0[14];
    sub_10002FF90();
    uint64_t v27 = (void *)sub_100043994();
    uint64_t v28 = sub_10000EFC8();
    *(_DWORD *)uint64_t v9 = 136315650;
    os_log_t log = v10;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_10001DF20(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044204();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    os_log_type_t type = v11;
    sub_10000853C((void *)(v12 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v12 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
    sub_1000CAE24();
    sub_10004421C();
    v15();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v18 = v17;
    sub_10000EFBC();
    v19();
    v0[12] = sub_10001DF20(v16, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044204();
    swift_bridgeObjectRelease();
    sub_1000CA9C8();
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    v0[13] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v20;
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v10 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to load asset %s into %s: %@", (uint8_t *)v9, 0x20u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_1000CADF8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v21 = (void *)swift_task_alloc();
  v0[38] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1000C2590;
  uint64_t v22 = sub_100044070(v0[15]);
  return sub_1000C049C(v22, v23);
}

uint64_t sub_1000C2BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v197 = a6;
  uint64_t v191 = a5;
  uint64_t v187 = a3;
  uint64_t v188 = a4;
  uint64_t v205 = a2;
  uint64_t v7 = sub_100003A70(&qword_10015DA50);
  uint64_t v189 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v189 + 64);
  __chkstk_darwin(v7 - 8, v9);
  uint64_t v196 = (char *)v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  uint64_t v190 = *(void *)(v195 - 8);
  uint64_t v10 = *(void *)(v190 + 64);
  __chkstk_darwin(v195, v11);
  uint64_t v193 = (char *)v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v194 = (uint64_t)v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InferenceProviderDescriptor();
  unint64_t v201 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v200 = (char *)v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v202 = *(void (**)(char *, uint64_t))(State - 8);
  uint64_t v18 = *((void *)v202 + 8);
  uint64_t v20 = __chkstk_darwin(State, v19);
  uint64_t v21 = (char *)v175 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)v175 - v24;
  uint64_t v27 = __chkstk_darwin(v23, v26);
  uint64_t v192 = (char *)v175 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v199 = (char *)v175 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  v203 = (char *)v175 - v34;
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (char *)v175 - v36;
  uint64_t v38 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if (*(unsigned char *)(a1 + *(int *)(v38 + 52)))
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100003B18(v39, (uint64_t)qword_10015DC38);
    swift_retain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      unint64_t v208 = (char *)v43;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v206 = (os_log_t)sub_10001DF20(v44, v45, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Tried to unload invalidated asset: %s", v42, 0xCu);
      swift_arrayDestroy();
LABEL_11:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_20:
      uint64_t v86 = type metadata accessor for ModelManagerError();
      sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v86 - 8) + 104))(v87, enum case for ModelManagerError.internalError(_:), v86);
      return swift_willThrow();
    }
    goto LABEL_19;
  }
  uint64_t v46 = v38;
  uint64_t v47 = *(int *)(v38 + 28);
  uint64_t v48 = *(void *)(a1 + v47);
  uint64_t v186 = v15;
  if (v48)
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100003B18(v49, (uint64_t)qword_10015DC38);
    uint64_t v50 = v205;
    swift_retain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v40, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t State = swift_slowAlloc();
      unint64_t v208 = (char *)State;
      *(_DWORD *)uint64_t v52 = 136315394;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v206 = (os_log_t)sub_10001DF20(v53, v54, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v55 = (void *)(v50 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v56 = *(void *)(v50 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v57 = *(void *)(v50 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v55, v56);
      os_log_type_t v58 = v200;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v59 = v186;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v62 = v61;
      (*(void (**)(char *, uint64_t))(v201 + 8))(v58, v59);
      os_log_t v206 = (os_log_t)sub_10001DF20(v60, v62, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v51, "unloadIfNecessary called with pending transition task for %s with %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      goto LABEL_11;
    }
LABEL_19:

    swift_release_n();
    goto LABEL_20;
  }
  uint64_t v180 = v10;
  uint64_t v181 = v8;
  uint64_t v182 = v47;
  uint64_t v63 = a1;
  uint64_t v65 = (char *)v202 + 16;
  uint64_t v64 = (void (*)(char *, uint64_t, uint64_t))*((void *)v202 + 2);
  uint64_t v185 = v37;
  v64(v37, v63, State);
  uint64_t v66 = (uint64_t)v203;
  uint64_t v184 = (char *)(v63 + *(int *)(v46 + 20));
  uint64_t v67 = (uint64_t)v185;
  uint64_t v183 = v65;
  ((void (*)(char *))v64)(v203);
  unint64_t v68 = (void (*)(char *, char *, uint64_t))v64;
  if (sub_100101C40(v67, v66))
  {
    unint64_t v69 = *(NSObject **)(*(void *)(v63 + *(int *)(v46 + 48)) + 16);
    if (v69)
    {
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_100003B18(v70, (uint64_t)qword_10015DC38);
      uint64_t v71 = v205;
      swift_retain_n();
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        os_log_t v198 = v69;
        uint64_t v75 = v74;
        uint64_t v199 = (char *)swift_slowAlloc();
        unint64_t v208 = v199;
        *(_DWORD *)uint64_t v75 = 136315650;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_t v206 = (os_log_t)sub_10001DF20(v76, v77, (uint64_t *)&v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2080;
        uint64_t v78 = (void *)(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v79 = *(void *)(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v80 = *(void *)(v71 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10000853C(v78, v79);
        uint64_t v81 = v200;
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v80);
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        uint64_t v82 = v186;
        uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v85 = v84;
        (*(void (**)(char *, uint64_t))(v201 + 8))(v81, v82);
        os_log_t v206 = (os_log_t)sub_10001DF20(v83, v85, (uint64_t *)&v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v67 = (uint64_t)v185;
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 22) = 2048;
        os_log_t v206 = v198;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Not unloading asset %s from %s: in use by %ld requests", (uint8_t *)v75, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v135 = State;
      sub_1000B532C();
      swift_allocError();
      void *v136 = 0;
      v136[1] = 0;
      swift_willThrow();
      uint64_t v137 = (void (*)(char *, uint64_t))*((void *)v202 + 1);
      v137(v203, v135);
      return ((uint64_t (*)(uint64_t, uint64_t))v137)(v67, v135);
    }
    else
    {
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v117 = type metadata accessor for Logger();
      uint64_t v118 = sub_100003B18(v117, (uint64_t)qword_10015DC38);
      uint64_t v119 = v205;
      swift_retain_n();
      uint64_t v179 = v118;
      uint64_t v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.default.getter();
      int v122 = v121;
      BOOL v123 = os_log_type_enabled(v120, v121);
      uint64_t v178 = v63;
      if (v123)
      {
        uint64_t v124 = swift_slowAlloc();
        uint64_t v177 = swift_slowAlloc();
        unint64_t v208 = (char *)v177;
        *(_DWORD *)uint64_t v124 = 136315394;
        LODWORD(v176) = v122;
        type metadata accessor for InferenceProviderAssetDescriptor();
        uint64_t v125 = v119;
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_t v206 = (os_log_t)sub_10001DF20(v126, v127, (uint64_t *)&v208);
        v175[1] = &v207;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v124 + 12) = 2080;
        v175[0] = v124 + 14;
        uint64_t v128 = *(void *)(v119
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v129 = *(void *)(v125
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10000853C((void *)(v125 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v125 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
        uint64_t v130 = v200;
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v129);
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        uint64_t v131 = v186;
        uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v134 = v133;
        (*(void (**)(char *, uint64_t))(v201 + 8))(v130, v131);
        os_log_t v206 = (os_log_t)sub_10001DF20(v132, v134, (uint64_t *)&v208);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v176, "unloadIfNecessary entering for asset %s with %s", (uint8_t *)v124, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v138 = v202;
      uint64_t v139 = v199;
      uint64_t v140 = (void (*)(void))*((void *)v202 + 13);
      LODWORD(v177) = enum case for LoadState.unloaded(_:);
      uint64_t v141 = State;
      uint64_t v176 = (void (*)(uint64_t, void, uint64_t))v140;
      v140(v199);
      sub_1000C99B0(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
      char v142 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v143 = v139;
      unint64_t v144 = v139;
      uint64_t v145 = (void (*)(char *, uint64_t))*((void *)v138 + 1);
      v145(v144, v141);
      uint64_t v202 = v145;
      if (v142)
      {
        uint64_t v199 = (char *)v138 + 8;
        uint64_t v146 = v205;
        swift_retain_n();
        uint64_t v147 = Logger.logObject.getter();
        os_log_type_t v148 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v147, v148))
        {
          uint64_t v149 = swift_slowAlloc();
          uint64_t v196 = (char *)swift_slowAlloc();
          unint64_t v208 = v196;
          *(_DWORD *)uint64_t v149 = 136315394;
          type metadata accessor for InferenceProviderAssetDescriptor();
          sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
          uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
          os_log_t v206 = (os_log_t)sub_10001DF20(v150, v151, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v149 + 12) = 2080;
          unint64_t v152 = (void *)(v146 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
          uint64_t v153 = *(void *)(v146
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          uint64_t v154 = *(void *)(v146
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10000853C(v152, v153);
          uint64_t v155 = v200;
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v154);
          sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          uint64_t v156 = v186;
          uint64_t v157 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v159 = v158;
          (*(void (**)(char *, uint64_t))(v201 + 8))(v155, v156);
          os_log_t v206 = (os_log_t)sub_10001DF20(v157, v159, (uint64_t *)&v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v147, v148, "Not unloading asset %s from %s: already unloaded", (uint8_t *)v149, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        uint64_t v173 = State;
        uint64_t v174 = (uint64_t (*)(char *, uint64_t))v202;
        v202(v203, State);
        uint64_t result = v174(v185, v173);
        *uint64_t v197 = 0;
      }
      else
      {
        v68(v143, v185, v141);
        uint64_t v160 = v184;
        v145(v184, v141);
        v176((uint64_t)v160, v177, v141);
        uint64_t v161 = type metadata accessor for TaskPriority();
        sub_100006960(v194, 1, 1, v161);
        v68(v192, v199, v141);
        uint64_t v162 = v190;
        (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v193, v187, v195);
        sub_1000CA050(v188, (uint64_t)v196, &qword_10015DA50);
        uint64_t v163 = sub_1000C99B0(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
        unint64_t v164 = (*((unsigned __int8 *)v138 + 80) + 40) & ~(unint64_t)*((unsigned __int8 *)v138 + 80);
        unint64_t v165 = (v18 + *(unsigned __int8 *)(v162 + 80) + v164) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
        uint64_t v200 = (char *)((v180 + *(unsigned __int8 *)(v189 + 80) + v165) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
        unint64_t v201 = (unint64_t)&v200[v181 + 7] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v166 = swift_allocObject();
        uint64_t v168 = v191;
        uint64_t v167 = v192;
        *(void *)(v166 + 16) = v191;
        *(void *)(v166 + 24) = v163;
        *(void *)(v166 + 32) = v205;
        (*((void (**)(unint64_t, char *, uint64_t))v138 + 4))(v166 + v164, v167, v141);
        (*(void (**)(unint64_t, char *, uint64_t))(v162 + 32))(v166 + v165, v193, v195);
        sub_10006FCD0((uint64_t)v196, (uint64_t)&v200[v166], &qword_10015DA50);
        *(void *)(v166 + v201) = v168;
        swift_retain_n();
        swift_retain();
        uint64_t v169 = sub_10000F8FC(v194, (uint64_t)&unk_10015DE68, v166);
        uint64_t v170 = v202;
        v202(v199, v141);
        v170(v203, v141);
        v170(v185, v141);
        uint64_t v171 = v182;
        uint64_t v172 = v178;
        swift_release();
        *(void *)(v172 + v171) = v169;
        *uint64_t v197 = v169;
        return swift_retain();
      }
    }
  }
  else
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    sub_100003B18(v89, (uint64_t)qword_10015DC38);
    uint64_t v90 = v67;
    uint64_t v91 = State;
    v64(v25, v90, State);
    v64(v21, (uint64_t)v203, v91);
    swift_retain_n();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.fault.getter();
    int v94 = v93;
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v95 = swift_slowAlloc();
      uint64_t v199 = (char *)swift_slowAlloc();
      unint64_t v208 = v199;
      *(_DWORD *)uint64_t v95 = 136315906;
      sub_1000C99B0(&qword_10015CF78, (void (*)(uint64_t))&type metadata accessor for LoadState);
      os_log_t v198 = v92;
      uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v206 = (os_log_t)sub_10001DF20(v96, v97, (uint64_t *)&v208);
      LODWORD(v197) = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v98 = (void (*)(char *, uint64_t))*((void *)v202 + 1);
      v98(v25, State);
      *(_WORD *)(v95 + 12) = 2080;
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v206 = (os_log_t)sub_10001DF20(v99, v100, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v98(v21, State);
      uint64_t v91 = State;
      uint64_t v101 = v205;
      *(_WORD *)(v95 + 22) = 2080;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v206 = (os_log_t)sub_10001DF20(v102, v103, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 32) = 2080;
      uint64_t v196 = (char *)(v95 + 34);
      os_log_type_t v104 = (void *)(v101 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v105 = *(void *)(v101 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v106 = *(void *)(v101 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v104, v105);
      uint64_t v107 = v200;
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v106);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v108 = v186;
      uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v111 = v110;
      (*(void (**)(char *, uint64_t))(v201 + 8))(v107, v108);
      os_log_t v206 = (os_log_t)sub_10001DF20(v109, v111, (uint64_t *)&v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v112 = v198;
      _os_log_impl((void *)&_mh_execute_header, v198, (os_log_type_t)v197, "unloadIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v95, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v113 = v202;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v113 = v202;
      uint64_t v98 = (void (*)(char *, uint64_t))*((void *)v202 + 1);
      v98(v25, v91);
      v98(v21, v91);

      swift_release_n();
    }
    unint64_t v114 = v185;
    (*((void (**)(char *, char *, uint64_t))v113 + 3))(v184, v185, v91);
    uint64_t v115 = type metadata accessor for ModelManagerError();
    sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v115 - 8) + 104))(v116, enum case for ModelManagerError.internalError(_:), v115);
    swift_willThrow();
    v98(v203, v91);
    return ((uint64_t (*)(char *, uint64_t))v98)(v114, v91);
  }
  return result;
}

uint64_t sub_1000C45F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  uint64_t v10 = type metadata accessor for InferenceError();
  v8[18] = v10;
  v8[19] = *(void *)(v10 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AssetCost();
  v8[21] = v11;
  v8[22] = *(void *)(v11 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ModelManagerError();
  v8[24] = v12;
  v8[25] = *(void *)(v12 - 8);
  v8[26] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  v8[27] = v13;
  v8[28] = *(void *)(v13 - 8);
  v8[29] = swift_task_alloc();
  sub_100003A70(&qword_10015DA90);
  v8[30] = swift_task_alloc();
  sub_100003A70(&qword_10015BAA8);
  v8[31] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for InferenceProviderDescriptor();
  v8[32] = v14;
  v8[33] = *(void *)(v14 - 8);
  v8[34] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v8[35] = State;
  v8[36] = *(void *)(State - 8);
  v8[37] = swift_task_alloc();
  v8[38] = swift_task_alloc();
  uint64_t v16 = sub_100003A70(&qword_10015B408);
  v8[39] = v16;
  v8[40] = *(void *)(v16 - 8);
  v8[41] = swift_task_alloc();
  return _swift_task_switch(sub_1000C495C, a8, 0);
}

uint64_t sub_1000C495C()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v52 = *(void *)(v0 + 312);
  uint64_t v45 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v51 = *(void *)(v0 + 248);
  uint64_t v53 = *(void *)(v0 + 240);
  os_log_t log = *(os_log_t *)(v0 + 328);
  uint64_t v58 = *(void *)(v0 + 120);
  uint64_t v55 = *(void *)(v0 + 128);
  uint64_t v57 = *(void *)(v0 + 112);
  type metadata accessor for RequestMetadata();
  UUIDIdentifier.init()();
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(void *)(v0 + 336) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v6 = *(void *)(v1 + v5 + 32);
  uint64_t v50 = *(void *)(v1 + v5 + 24);
  sub_10000853C((void *)(v1 + v5), v50);
  uint64_t v7 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  *(void *)(v0 + 344) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v8 = v1 + v7;
  uint64_t v9 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v48 = v10;
  uint64_t v49 = v9;
  uint64_t v61 = v8;
  uint64_t v11 = InferenceProviderAssetDescriptor.version.getter();
  uint64_t v46 = v12;
  uint64_t v47 = v11;
  *(_DWORD *)(v0 + 456) = enum case for LoadState.unloaded(_:);
  *(void *)(v0 + 352) = *(void *)(v2 + 104);
  *(void *)(v0 + 360) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  sub_100043E9C();
  v13();
  uint64_t v14 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(void *)(v0 + 368) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  uint64_t v15 = (void *)(v1 + v14);
  uint64_t v16 = *(void *)(v1 + v14 + 24);
  uint64_t v59 = v15;
  sub_10000853C(v15, v16);
  sub_1000CAE24();
  sub_10004421C();
  v17();
  InferenceProviderDescriptor.id.getter();
  sub_1000CAC8C();
  *(void *)(v0 + 376) = *(void *)(v4 + 8);
  *(void *)(v0 + 384) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100057FE4();
  v18();
  sub_100006960(v51, 1, 1, v52);
  uint64_t v19 = sub_100003A70(&qword_10015B9A0);
  sub_100006960(v53, 1, 1, v19);
  *(void *)(v0 + 392) = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 40))(log, v49, v48, v47, v46, v57, v45, v58, v3, v16, v51, v53, v55, v50, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EB50(v53, &qword_10015DA90);
  sub_10002EB50(v51, &qword_10015BAA8);
  *(void *)(v0 + 400) = *(void *)(v2 + 8);
  *(void *)(v0 + 408) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043AE0();
  v20();
  uint64_t v21 = qword_10015B0C8;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100003B18(v22, (uint64_t)qword_10015DC38);
  sub_1000CAF04(v23);
  os_log_type_t v24 = v21;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (sub_100057CB0(v26))
  {
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v28 = sub_10000EFE8();
    uint64_t v62 = sub_10000EFC8();
    *(_DWORD *)uint64_t v28 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    os_log_type_t v56 = v24;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 88) = sub_1000B7A4C(v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v31 = v59;
    unint64_t v32 = v59[3];
    sub_10000853C(v59, v32);
    sub_1000CAE24();
    sub_10004421C();
    v33();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v34 = v27;
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000CAC8C();
    uint64_t v35 = v61;
    sub_10004381C();
    v36();
    *(void *)(v0 + 96) = sub_10001DF20(v34, v32, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v56, "Unloading asset %s from %s", (uint8_t *)v28, 0x16u);
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();

    uint64_t v35 = v61;
    uint64_t v31 = v59;
  }
  uint64_t v37 = v31[3];
  uint64_t v38 = v31[4];
  sub_10000853C(v31, v37);
  sub_100043E68();
  v39();
  uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 24)
                                                                                     + **(int **)(v38 + 24));
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v40;
  void *v40 = v0;
  v40[1] = sub_1000C4F70;
  uint64_t v41 = *(void *)(v0 + 328);
  uint64_t v42 = *(void *)(v0 + 296);
  uint64_t v43 = *(void *)(v0 + 112);
  return v60(v35, v42, v43, v41, v37, v38);
}

uint64_t sub_1000C4F70()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 432) = v1;
  swift_task_dealloc();
  sub_100044174();
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 296), *(void *)(v0 + 280));
  sub_1000CAA98();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000C50BC()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[52];
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_100057CB0(v3))
  {
    uint64_t v4 = v0[46];
    uint64_t v42 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v43 = v0[48];
    uint64_t v40 = v0[34];
    uint64_t v41 = v0[32];
    uint64_t v5 = v0[13];
    os_log_type_t v45 = v1;
    uint64_t v6 = (_DWORD *)sub_10000EFE8();
    uint64_t v44 = (void (*)(void, void, void))sub_10000EFC8();
    uint64_t v46 = v44;
    *uint64_t v6 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_1000CAC50(v7, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_1000CA8C8();
    uint64_t v39 = v9;
    sub_10000853C((void *)(v5 + v4), *(void *)(v5 + v4 + 24));
    sub_10004421C();
    v10();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    v42(v40, v41);
    v0[10] = sub_10001DF20(v11, v13, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100044610();
    sub_100043EC4((void *)&_mh_execute_header, v2, v45, "Finished unloading asset %s from %s");
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v35 = sub_1000CA6E0();
  InferenceProviderAssetDescriptor.version.getter();
  AssetCost.onDeviceMemory.getter();
  sub_100043E68();
  uint64_t v15 = v14();
  uint64_t v23 = sub_1000CA81C(v15, v16, v17, v18, v19, v20, v21, v22, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39);
  v24(v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100043CF4();
  v25();
  v44(v41, v43, v42);
  os_log_type_t v26 = (void *)swift_task_alloc();
  v0[55] = v26;
  *os_log_type_t v26 = v0;
  v26[1] = sub_1000C541C;
  uint64_t v27 = sub_100044070(v0[17]);
  return sub_1000C049C(v27, v28);
}

uint64_t sub_1000C541C()
{
  sub_100008660();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 400);
  uint64_t v3 = *(void *)(v1 + 136);
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = sub_100043EDC();
  v2(v6);
  return _swift_task_switch(sub_1000C5568, v3, 0);
}

void sub_1000C5568()
{
  swift_release();
  sub_100043EDC();
  sub_100043AE0();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE48();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000C5664()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C5740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100057CCC();
  uint64_t v29 = v18[30];
  uint64_t v30 = v18[29];
  uint64_t v31 = v18[26];
  uint64_t v32 = v18[23];
  uint64_t v33 = v18[20];
  swift_willThrow();
  swift_release();
  sub_100043AE0();
  v19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000306EC();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29, v30, v31, v32, v33, a15, a16, a17, a18);
}

uint64_t sub_1000C5848()
{
  uint64_t v97 = v0;
  *(void *)(v0 + 16) = *(void *)(v0 + 432);
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    uint64_t v3 = *(void *)(v0 + 432);
    swift_errorRelease();
    *(void *)(v0 + 24) = v3;
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      sub_1000CAA48();
      int v5 = v4();
      uint64_t v6 = *(void *)(v0 + 200);
      uint64_t v7 = *(void *)(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 192);
      if (v5 == enum case for ModelManagerError.inferenceError(_:))
      {
        uint64_t v9 = *(void *)(v0 + 144);
        uint64_t v10 = *(void *)(v0 + 152);
        (*(void (**)(void, uint64_t))(v6 + 96))(*(void *)(v0 + 208), v8);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v7, v9) == enum case for InferenceError.notLoaded(_:))
        {
          uint64_t v11 = *(void *)(v0 + 208);
          uint64_t v12 = *(void *)(v0 + 144);
          uint64_t v13 = *(void *)(v0 + 152);
          swift_errorRelease();
          (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
          goto LABEL_9;
        }
        (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 144));
      }
      else
      {
        (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v0 + 208), v8);
      }
    }
    uint64_t v40 = *(void *)(v0 + 432);
    swift_errorRelease();
    swift_retain_n();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v42))
    {
      uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      os_log_type_t v93 = v40;
      uint64_t v43 = *(void *)(v0 + 272);
      uint64_t v77 = *(void *)(v0 + 256);
      uint64_t v44 = (void *)(*(void *)(v0 + 104) + *(void *)(v0 + 368));
      loga = v41;
      sub_10002FF90();
      uint64_t v86 = (void *)sub_100043994();
      uint64_t v96 = (void (*)(void, void, void))sub_10000EFC8();
      *(_DWORD *)(v0 + 16) = 136315650;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1000CAC50(v45, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044204();
      swift_bridgeObjectRelease();
      *(_WORD *)(v0 + 28) = 2080;
      sub_10000853C(v44, v44[3]);
      sub_10004421C();
      v47();
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v50 = v49;
      v80(v43, v77);
      *(void *)(v0 + 40) = sub_10001DF20(v48, v50, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044204();
      swift_bridgeObjectRelease();
      sub_1000CA9C8();
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v86 = v51;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v41 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, v93, "Failed to unload asset %s from %s: %@", (uint8_t *)(v0 + 16), 0x20u);
      sub_100003A70(&qword_10015BA58);
      sub_1000CA9E8();
      sub_10000ED7C();
      sub_1000CADF8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v52 = *(void *)(v0 + 432);
    uint64_t v94 = *(void *)(v0 + 328);
    uint64_t v95 = *(void *)(v0 + 392);
    uint64_t v87 = *(void *)(v0 + 232);
    uint64_t v91 = *(void *)(v0 + 128);
    uint64_t v53 = (void *)(*(void *)(v0 + 104) + *(void *)(v0 + 336));
    uint64_t v55 = v53[3];
    uint64_t v54 = v53[4];
    sub_10000853C(v53, v55);
    uint64_t v56 = InferenceProviderAssetDescriptor.identifier.getter();
    uint64_t v82 = v57;
    uint64_t v84 = v56;
    uint64_t v78 = InferenceProviderAssetDescriptor.version.getter();
    uint64_t v59 = v58;
    static AssetCost.zero.getter();
    uint64_t v74 = AssetCost.onDeviceMemory.getter();
    sub_100043AE0();
    v60();
    sub_100043E68();
    v61();
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 48);
    swift_errorRetain();
    v62(v94, v84, v82, v78, v59, v74, v87, v95, v52, v91, v55, v54);
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100043924();
    v63();
    uint64_t v64 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_1000C5664;
    uint64_t v39 = *(void *)(v0 + 136);
    goto LABEL_19;
  }
  sub_1000CAA48();
  if (v1() != enum case for InferenceError.notLoaded(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    goto LABEL_5;
  }
  swift_errorRelease();
  sub_100043FA8();
  v2();
LABEL_9:
  swift_errorRelease();
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  unsigned int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v85 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    os_log_t log = *(os_log_t *)(v0 + 384);
    uint64_t v17 = *(void *)(v0 + 272);
    uint64_t v83 = *(void *)(v0 + 256);
    uint64_t v18 = (void *)(*(void *)(v0 + 104) + *(void *)(v0 + 368));
    unsigned int v90 = v16;
    uint64_t v19 = (_DWORD *)sub_10000EFE8();
    uint64_t v92 = (void (*)(void, void, void))sub_10000EFC8();
    uint64_t v96 = v92;
    _DWORD *v19 = 136315394;
    type metadata accessor for InferenceProviderAssetDescriptor();
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_1000CAC50(v20, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B7784();
    swift_bridgeObjectRelease();
    sub_1000CA8C8();
    sub_10000853C(v18, v18[3]);
    sub_10004421C();
    v22();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    sub_1000CADEC();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v25 = v24;
    v85(v17, v83);
    *(void *)(v0 + 64) = sub_10001DF20(v23, v25, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B7784();
    swift_bridgeObjectRelease();
    sub_100043EC4((void *)&_mh_execute_header, v14, (os_log_type_t)v90, "Asset %s already unloaded from %s");
    sub_10000EFA4();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v73 = sub_1000CA6E0();
  InferenceProviderAssetDescriptor.version.getter();
  AssetCost.onDeviceMemory.getter();
  sub_100043E68();
  uint64_t v27 = v26();
  uint64_t v35 = sub_1000CA81C(v27, v28, v29, v30, v31, v32, v33, v34, v68, v69, v70, v71, v72, v73, v75, v76, v79, v81);
  v36(v35);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100043CF4();
  v37();
  v92(v85, v90, log);
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v38;
  *uint64_t v38 = v0;
  v38[1] = sub_1000C541C;
  uint64_t v39 = *(void *)(v0 + 136);
LABEL_19:
  uint64_t v65 = sub_100044070(v39);
  return sub_1000C049C(v65, v66);
}

uint64_t sub_1000C61C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, NSObject *a5@<X8>)
{
  os_log_t v213 = a5;
  uint64_t v208 = a4;
  os_log_t v206 = a3;
  uint64_t v220 = a2;
  uint64_t v212 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  uint64_t v207 = *(void *)(v212 - 8);
  uint64_t v6 = *(void *)(v207 + 64);
  __chkstk_darwin(v212, v7);
  v211 = (char *)v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v210 = (uint64_t)v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v216 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v11 = *(void *)(v216 - 8);
  __chkstk_darwin(v216, v12);
  v215 = (char *)v192 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v217 = *(void *)(State - 8);
  uint64_t v14 = *(void *)(v217 + 64);
  uint64_t v16 = __chkstk_darwin(State, v15);
  uint64_t v17 = (char *)v192 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  unint64_t v21 = (char *)v192 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v209 = (char *)v192 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)v192 - v27;
  uint64_t v30 = __chkstk_darwin(v26, v29);
  v218 = (char *)v192 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)v192 - v33;
  uint64_t v35 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  if (*(unsigned char *)(a1 + *(int *)(v35 + 52)))
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100003B18(v36, (uint64_t)qword_10015DC38);
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v223 = v40;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v221 = sub_10001DF20(v41, v42, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Tried to move invalidated asset to dynamic mode: %s", v39, 0xCu);
      swift_arrayDestroy();
LABEL_11:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_20:
      uint64_t v82 = type metadata accessor for ModelManagerError();
      sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v82 - 8) + 104))(v83, enum case for ModelManagerError.internalError(_:), v82);
      return swift_willThrow();
    }
    goto LABEL_19;
  }
  uint64_t v43 = v35;
  uint64_t v44 = *(int *)(v35 + 28);
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v205 = v11;
  if (v45)
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100003B18(v46, (uint64_t)qword_10015DC38);
    uint64_t v47 = v220;
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t State = swift_slowAlloc();
      uint64_t v223 = State;
      *(_DWORD *)uint64_t v49 = 136315394;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v221 = sub_10001DF20(v50, v51, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      uint64_t v52 = (void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
      uint64_t v53 = *(void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v54 = *(void *)(v47 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C(v52, v53);
      uint64_t v55 = v215;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      unint64_t v56 = v216;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v59 = v58;
      (*(void (**)(char *, unint64_t))(v205 + 8))(v55, v56);
      uint64_t v221 = sub_10001DF20(v57, v59, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v48, "unloadIfNecessary called with pending transition task for %s with %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      goto LABEL_11;
    }
LABEL_19:

    swift_release_n();
    goto LABEL_20;
  }
  uint64_t v199 = v6;
  unint64_t v201 = v28;
  uint64_t v200 = v44;
  uint64_t v60 = a1;
  uint64_t v61 = v217 + 16;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
  v204 = v34;
  v62(v34, v60, State);
  uint64_t v63 = *(int *)(v43 + 20);
  uint64_t v64 = (uint64_t)v218;
  uint64_t v202 = v61;
  v203 = (char *)(v60 + v63);
  uint64_t v65 = (uint64_t)v204;
  ((void (*)(char *))v62)(v218);
  if (sub_100101C40(v65, v64))
  {
    uint64_t v66 = *(void *)(*(void *)(v60 + *(int *)(v43 + 48)) + 16);
    if (v66)
    {
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      sub_100003B18(v67, (uint64_t)qword_10015DC38);
      uint64_t v68 = v220;
      swift_retain_n();
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v214 = swift_slowAlloc();
        uint64_t v223 = v214;
        *(_DWORD *)uint64_t v71 = 136315650;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v221 = sub_10001DF20(v72, v73, &v223);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 12) = 2080;
        os_log_t v213 = (os_log_t)(v71 + 14);
        uint64_t v74 = (void *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
        uint64_t v75 = *(void *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
        uint64_t v76 = *(void *)(v68 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
        sub_10000853C(v74, v75);
        uint64_t v77 = v215;
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v76);
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        unint64_t v78 = v216;
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v81 = v80;
        (*(void (**)(char *, unint64_t))(v205 + 8))(v77, v78);
        uint64_t v221 = sub_10001DF20(v79, v81, &v223);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v65 = (uint64_t)v204;
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 22) = 2048;
        uint64_t v221 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Not moving asset %s to dynamic mode in %s: in use by %ld requests", (uint8_t *)v71, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v133 = v217;
      sub_1000B532C();
      swift_allocError();
      *unint64_t v134 = 0;
      v134[1] = 0;
      swift_willThrow();
      uint64_t v135 = *(void (**)(char *, uint64_t))(v133 + 8);
      uint64_t v136 = State;
      v135(v218, State);
      return ((uint64_t (*)(uint64_t, uint64_t))v135)(v65, v136);
    }
    else
    {
      uint64_t v195 = v62;
      if (qword_10015B0C8 != -1) {
        swift_once();
      }
      uint64_t v114 = type metadata accessor for Logger();
      uint64_t v115 = sub_100003B18(v114, (uint64_t)qword_10015DC38);
      uint64_t v116 = v220;
      swift_retain_n();
      uint64_t v197 = v115;
      uint64_t v117 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.default.getter();
      int v119 = v118;
      BOOL v120 = os_log_type_enabled(v117, v118);
      os_log_type_t v121 = v201;
      uint64_t v194 = v60;
      if (v120)
      {
        uint64_t v122 = swift_slowAlloc();
        uint64_t v198 = swift_slowAlloc();
        uint64_t v223 = v198;
        *(_DWORD *)uint64_t v122 = 136315394;
        LODWORD(v196) = v119;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v221 = sub_10001DF20(v123, v124, &v223);
        uint64_t v193 = &v222;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v122 + 12) = 2080;
        v192[1] = v122 + 14;
        uint64_t v125 = *(void *)(v116
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 24);
        uint64_t v126 = *(void *)(v116
                         + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                         + 32);
        sub_10000853C((void *)(v116 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v125);
        unint64_t v127 = v117;
        uint64_t v128 = v215;
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v125, v126);
        sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        unint64_t v129 = v216;
        uint64_t v130 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v132 = v131;
        (*(void (**)(char *, unint64_t))(v205 + 8))(v128, v129);
        uint64_t v221 = sub_10001DF20(v130, v132, &v223);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v196, "moveToDynamicModeIfNecessary entering for asset %s with %s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v137 = v217;
      uint64_t v138 = *(void (**)(void))(v217 + 104);
      LODWORD(v193) = enum case for LoadState.dynamicMode(_:);
      uint64_t v139 = State;
      uint64_t v196 = (void (*)(char *, void, uint64_t))v138;
      v138(v121);
      sub_1000C99B0(&qword_10015CF68, (void (*)(uint64_t))&type metadata accessor for LoadState);
      char v140 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v141 = *(void (**)(char *, uint64_t))(v137 + 8);
      v141(v121, v139);
      uint64_t v198 = v137 + 8;
      if (v140)
      {
        os_log_t v206 = v141;
        uint64_t v142 = v220;
        swift_retain_n();
        uint64_t v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v143, v144))
        {
          uint64_t v145 = swift_slowAlloc();
          uint64_t v223 = swift_slowAlloc();
          *(_DWORD *)uint64_t v145 = 136315394;
          type metadata accessor for InferenceProviderAssetDescriptor();
          sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
          uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v221 = sub_10001DF20(v146, v147, &v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v145 + 12) = 2080;
          uint64_t v217 = v145 + 14;
          os_log_type_t v148 = (void *)(v142 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
          uint64_t v150 = *(void *)(v142
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 24);
          uint64_t v149 = *(void *)(v142
                           + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                           + 32);
          sub_10000853C(v148, v150);
          unint64_t v151 = v215;
          (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v150, v149);
          sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
          unint64_t v152 = v216;
          uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v155 = v154;
          (*(void (**)(char *, unint64_t))(v205 + 8))(v151, v152);
          uint64_t v221 = sub_10001DF20(v153, v155, &v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v143, v144, "Not moving asset %s to dynamic mode in %s: already in dynamic mode", (uint8_t *)v145, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        uint64_t v172 = State;
        uint64_t v173 = (uint64_t (*)(char *, uint64_t))v206;
        v206(v218, State);
        uint64_t result = v173(v204, v172);
        v213->isa = 0;
      }
      else
      {
        v196(v121, enum case for LoadState.unloaded(_:), v139);
        char v156 = dispatch thunk of static Equatable.== infix(_:_:)();
        v141(v121, v139);
        if (v156)
        {
          uint64_t v157 = v220;
          swift_retain_n();
          unint64_t v158 = Logger.logObject.getter();
          os_log_type_t v159 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v158, v159))
          {
            uint64_t v160 = swift_slowAlloc();
            uint64_t v217 = swift_slowAlloc();
            uint64_t v223 = v217;
            *(_DWORD *)uint64_t v160 = 136315394;
            type metadata accessor for InferenceProviderAssetDescriptor();
            os_log_t v206 = v141;
            sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
            uint64_t v161 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v221 = sub_10001DF20(v161, v162, &v223);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v160 + 12) = 2080;
            uint64_t v163 = (void *)(v157 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection);
            uint64_t v164 = *(void *)(v157
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 24);
            uint64_t v165 = *(void *)(v157
                             + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection
                             + 32);
            sub_10000853C(v163, v164);
            uint64_t v166 = v215;
            (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v164, v165);
            sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
            unint64_t v167 = v216;
            uint64_t v168 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v170 = v169;
            (*(void (**)(char *, unint64_t))(v205 + 8))(v166, v167);
            uint64_t v221 = sub_10001DF20(v168, v170, &v223);
            uint64_t v141 = v206;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            uint64_t v171 = v204;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v158, v159, "Attempting to move an unloaded asset %s to dynamic mode in %s", (uint8_t *)v160, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
            uint64_t v171 = v204;
          }
          uint64_t v189 = type metadata accessor for ModelManagerError();
          sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v189 - 8) + 104))(v190, enum case for ModelManagerError.internalError(_:), v189);
          swift_willThrow();
          uint64_t v191 = State;
          v141(v218, State);
          return ((uint64_t (*)(char *, uint64_t))v141)(v171, v191);
        }
        else
        {
          uint64_t v174 = (void (*)(char *, char *, uint64_t))v195;
          v195(v121, (uint64_t)v204, v139);
          uint64_t v175 = v203;
          v141(v203, v139);
          v196(v175, v193, v139);
          uint64_t v176 = type metadata accessor for TaskPriority();
          sub_100006960(v210, 1, 1, v176);
          v174(v209, v121, v139);
          uint64_t v177 = v207;
          (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v207 + 16))(v211, v206, v212);
          v215 = (char *)sub_1000C99B0(&qword_10015B8E0, (void (*)(uint64_t))type metadata accessor for InferenceProviderAssetManager);
          uint64_t v178 = v217;
          unint64_t v179 = (*(unsigned __int8 *)(v217 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80);
          unint64_t v180 = (v14 + *(unsigned __int8 *)(v177 + 80) + v179) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
          os_log_t v206 = v141;
          unint64_t v216 = (v199 + v180 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v181 = (char *)swift_allocObject();
          uint64_t v183 = v208;
          uint64_t v182 = v209;
          uint64_t v184 = v215;
          *((void *)v181 + 2) = v208;
          *((void *)v181 + 3) = v184;
          *((void *)v181 + 4) = v220;
          (*(void (**)(char *, char *, uint64_t))(v178 + 32))(&v181[v179], v182, v139);
          (*(void (**)(char *, char *, uint64_t))(v177 + 32))(&v181[v180], v211, v212);
          *(void *)&v181[v216] = v183;
          swift_retain_n();
          swift_retain();
          uint64_t v185 = (objc_class *)sub_10000F8FC(v210, (uint64_t)&unk_10015DE80, (uint64_t)v181);
          uint64_t v186 = v206;
          v206(v121, v139);
          v186(v218, v139);
          v186(v204, v139);
          uint64_t v187 = v200;
          uint64_t v188 = v194;
          swift_release();
          *(void *)(v188 + v187) = v185;
          v213->isa = v185;
          return swift_retain();
        }
      }
    }
  }
  else
  {
    if (qword_10015B0C8 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    sub_100003B18(v85, (uint64_t)qword_10015DC38);
    uint64_t v86 = State;
    v62(v21, v65, State);
    v62(v17, (uint64_t)v218, v86);
    uint64_t v87 = v220;
    swift_retain_n();
    unint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.fault.getter();
    int v90 = v89;
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v91 = swift_slowAlloc();
      uint64_t v214 = swift_slowAlloc();
      uint64_t v223 = v214;
      *(_DWORD *)uint64_t v91 = 136315906;
      sub_1000C99B0(&qword_10015CF78, (void (*)(uint64_t))&type metadata accessor for LoadState);
      os_log_t v213 = v88;
      LODWORD(v212) = v90;
      uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v221 = sub_10001DF20(v92, v93, &v223);
      unint64_t v209 = (char *)&v222;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v94 = *(void (**)(char *, uint64_t))(v217 + 8);
      v94(v21, State);
      v211 = (char *)v94;
      *(_WORD *)(v91 + 12) = 2080;
      uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v221 = sub_10001DF20(v95, v96, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v94(v17, State);
      uint64_t v86 = State;
      *(_WORD *)(v91 + 22) = 2080;
      type metadata accessor for InferenceProviderAssetDescriptor();
      sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
      uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v221 = sub_10001DF20(v97, v98, &v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 32) = 2080;
      uint64_t v210 = v91 + 34;
      uint64_t v99 = *(void *)(v87 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
      uint64_t v100 = *(void *)(v87 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
      sub_10000853C((void *)(v87 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v99);
      uint64_t v101 = v215;
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v100);
      sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      unint64_t v102 = v216;
      uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v105 = v104;
      (*(void (**)(char *, unint64_t))(v205 + 8))(v101, v102);
      uint64_t v106 = v103;
      uint64_t v107 = v211;
      uint64_t v221 = sub_10001DF20(v106, v105, &v223);
      uint64_t v108 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v109 = v213;
      _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v212, "moveToDynamicModeIfNecessary called with unmatching states (%s != %s) for %s with %s", (uint8_t *)v91, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v110 = v217;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v110 = v217;
      unint64_t v111 = *(char **)(v217 + 8);
      ((void (*)(char *, uint64_t))v111)(v21, v86);
      ((void (*)(char *, uint64_t))v111)(v17, v86);
      uint64_t v107 = v111;

      uint64_t v108 = v204;
      swift_release_n();
    }
    (*(void (**)(char *, char *, uint64_t))(v110 + 24))(v203, v108, v86);
    uint64_t v112 = type metadata accessor for ModelManagerError();
    sub_1000C99B0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v112 - 8) + 104))(v113, enum case for ModelManagerError.internalError(_:), v112);
    swift_willThrow();
    ((void (*)(char *, uint64_t))v107)(v218, v86);
    return ((uint64_t (*)(char *, uint64_t))v107)(v108, v86);
  }
  return result;
}

uint64_t sub_1000C7ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v9 = type metadata accessor for AssetCost();
  v7[9] = v9;
  v7[10] = *(void *)(v9 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  v7[12] = v10;
  v7[13] = *(void *)(v10 - 8);
  v7[14] = swift_task_alloc();
  sub_100003A70(&qword_10015DA50);
  v7[15] = swift_task_alloc();
  sub_100003A70(&qword_10015DA90);
  v7[16] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for InferenceProviderDescriptor();
  v7[17] = v11;
  v7[18] = *(void *)(v11 - 8);
  v7[19] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v7[20] = State;
  v7[21] = *(void *)(State - 8);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  uint64_t v13 = sub_100003A70(&qword_10015B408);
  v7[24] = v13;
  v7[25] = *(void *)(v13 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  sub_100003A70(&qword_10015BAA8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000C81E0, a7, 0);
}

uint64_t sub_1000C81E0()
{
  uint64_t v47 = *(void *)(v0 + 240);
  uint64_t v50 = *(void *)(v0 + 232);
  uint64_t v41 = *(void *)(v0 + 216);
  uint64_t v48 = *(void *)(v0 + 200);
  uint64_t v52 = *(void *)(v0 + 192);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v43 = *(void *)(v0 + 160);
  uint64_t v44 = v1;
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v37 = *(void *)(v0 + 136);
  uint64_t v40 = *(void *)(v0 + 128);
  uint64_t v42 = *(void *)(v0 + 120);
  uint64_t v46 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v45 = *(void *)(v0 + 48);
  sub_100006960(v47, 1, 1, v52);
  type metadata accessor for RequestMetadata();
  UUIDIdentifier.init()();
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  *(void *)(v0 + 248) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_telemetryManager;
  uint64_t v6 = *(void *)(v4 + v5 + 24);
  uint64_t v7 = *(void *)(v4 + v5 + 32);
  sub_10000853C((void *)(v4 + v5), v6);
  uint64_t v8 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  *(void *)(v0 + 256) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor;
  uint64_t v49 = v4 + v8;
  uint64_t v9 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v38 = v10;
  uint64_t v39 = v9;
  uint64_t v11 = InferenceProviderAssetDescriptor.version.getter();
  uint64_t v35 = v12;
  uint64_t v36 = v11;
  *(_DWORD *)(v0 + 368) = enum case for LoadState.dynamicMode(_:);
  *(void *)(v0 + 264) = *(void *)(v1 + 104);
  *(void *)(v0 + 272) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  sub_100043E9C();
  v13();
  uint64_t v14 = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  *(void *)(v0 + 280) = OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection;
  uint64_t v15 = (void *)(v4 + v14);
  uint64_t v16 = *(void *)(v4 + v14 + 24);
  sub_10000853C(v15, v16);
  sub_10004421C();
  v17();
  InferenceProviderDescriptor.id.getter();
  sub_1000CAC8C();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 288) = v18;
  *(void *)(v0 + 296) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v3, v37);
  sub_100006960(v50, 1, 1, v52);
  uint64_t v19 = sub_100003A70(&qword_10015B9A0);
  uint64_t v22 = sub_1000CAB84(v40, v20, v21, v19);
  *(void *)(v0 + 304) = v22;
  sub_100006960(v42, 1, 1, v22);
  *(void *)(v0 + 312) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 40))(v41, v39, v38, v36, v35, v45, v34, v46, v3, v16, v50, v40, v42, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EB50(v42, &qword_10015DA50);
  sub_10002EB50(v40, &qword_10015DA90);
  sub_10002EB50(v50, &qword_10015BAA8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  *(void *)(v0 + 320) = v23;
  *(void *)(v0 + 328) = (v44 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v23(v34, v43);
  uint64_t v24 = sub_100069E00();
  sub_10002EB50(v24, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v41, v52);
  sub_100006960(v47, 0, 1, v52);
  uint64_t v26 = v15[3];
  uint64_t v27 = v15[4];
  sub_10000853C(v15, v26);
  sub_100043E68();
  v28();
  unint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 24)
                                                                                     + **(int **)(v27 + 24));
  swift_retain();
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1000C8608;
  uint64_t v30 = *(void *)(v0 + 216);
  uint64_t v31 = *(void *)(v0 + 176);
  uint64_t v32 = *(void *)(v0 + 48);
  return v51(v49, v31, v32, v30, v26, v27);
}

uint64_t sub_1000C8608()
{
  sub_1000086EC();
  sub_10002FC48();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 344) = v1;
  swift_task_dealloc();
  sub_100044174();
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 176), *(void *)(v0 + 160));
  sub_1000CAA98();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000C8754()
{
  uint64_t v22 = *(void *)(v0 + 312);
  uint64_t v20 = *(void *)(v0 + 304);
  unsigned int v27 = *(_DWORD *)(v0 + 368);
  uint64_t v28 = *(void (**)(uint64_t, void, uint64_t))(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v23 = *(void *)(v0 + 240);
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = (void *)(v1 + *(void *)(v0 + 248));
  sub_1000FDAEC(*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path), *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path + 8));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10000853C(v2, v3);
  uint64_t v17 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v6 = v5;
  uint64_t v16 = InferenceProviderAssetDescriptor.version.getter();
  uint64_t v8 = v7;
  uint64_t v9 = AssetCost.onDeviceMemory.getter();
  sub_100043E68();
  v10();
  sub_100006960(v19, 1, 1, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v4 + 48))(v21, v17, v6, v16, v8, v9, v18, v22, 0, v19, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EB50(v19, &qword_10015DA50);
  sub_100043CF4();
  v11();
  sub_10002EB50(v23, &qword_10015BAA8);
  sub_100006960(v23, 1, 1, v24);
  v28(v25, v27, v26);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000C89C4;
  uint64_t v13 = sub_100044070(*(void *)(v0 + 64));
  return sub_1000C049C(v13, v14);
}

uint64_t sub_1000C89C4()
{
  sub_100008660();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 320);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *v0;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = sub_100043EDC();
  v2(v6);
  return _swift_task_switch(sub_1000C8B10, v3, 0);
}

uint64_t sub_1000C8B10()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[24];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10002EB50(v1, &qword_10015BAA8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v5();
}

uint64_t sub_1000C8C48()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000C8D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100057CCC();
  uint64_t v19 = v18[30];
  uint64_t v29 = v18[19];
  uint64_t v30 = v18[16];
  uint64_t v31 = v18[15];
  uint64_t v32 = v18[14];
  uint64_t v33 = v18[11];
  swift_willThrow();
  swift_release();
  sub_10002EB50(v19, &qword_10015BAA8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000306EC();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, v29, v30, v31, v32, v33, a15, a16, a17, a18);
}

uint64_t sub_1000C8E38()
{
  uint64_t v53 = v0;
  unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8);
  sub_10004381C();
  v1();
  if (qword_10015B0C8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[43];
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = (uint8_t *)sub_100003B18(v3, (uint64_t)qword_10015DC38);
  swift_retain_n();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v6))
  {
    uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[36];
    uint64_t v39 = v0[19];
    uint64_t v40 = v0[17];
    uint64_t v7 = (void *)(v0[5] + v0[35]);
    uint64_t v48 = v5;
    sub_10002FF90();
    uint64_t v46 = (void *)sub_100043994();
    uint64_t v52 = sub_10000EFC8();
    *(_DWORD *)uint64_t v4 = 136315650;
    type metadata accessor for InferenceProviderAssetDescriptor();
    os_log_type_t type = v2;
    sub_1000C99B0(&qword_10015CF70, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1000CAC50(v8, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044204();
    swift_bridgeObjectRelease();
    sub_1000CA8C8();
    sub_10000853C(v7, v7[3]);
    sub_1000CAE24();
    sub_10004421C();
    v10();
    sub_1000C99B0(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
    sub_1000CADEC();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    v41(v39, v40);
    v0[3] = sub_10001DF20(v11, v13, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100044204();
    swift_bridgeObjectRelease();
    sub_1000CA9C8();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v14;
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v5 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, type, "Failed to move asset %s to dynamic mode in %s: %@", v4, 0x20u);
    sub_100003A70(&qword_10015BA58);
    sub_1000CA9E8();
    sub_10000ED7C();
    sub_1000CADF8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v15 = v0[28];
  uint64_t v16 = v0[24];
  sub_1000CA050(v0[30], v15, &qword_10015BAA8);
  if (sub_100006AE8(v15, 1, v16) == 1)
  {
    uint64_t v17 = v0[28];
    swift_release();
    sub_10002EB50(v17, &qword_10015BAA8);
  }
  else
  {
    uint64_t v47 = v0[43];
    uint64_t v43 = v0[39];
    uint64_t typea = v0[38];
    uint64_t v42 = v0[26];
    uint64_t v49 = v0[24];
    uint64_t v50 = v0[15];
    uint64_t v18 = v0[13];
    uint64_t v19 = v0[12];
    uint64_t v38 = v0[14];
    uint64_t v20 = (void *)(v0[5] + v0[31]);
    (*(void (**)(void))(v0[25] + 32))();
    uint64_t v22 = v20[3];
    uint64_t v21 = v20[4];
    sub_10000853C(v20, v22);
    uint64_t v23 = InferenceProviderAssetDescriptor.identifier.getter();
    uint64_t v36 = v24;
    uint64_t v37 = v23;
    uint64_t v35 = InferenceProviderAssetDescriptor.version.getter();
    uint64_t v26 = v25;
    static AssetCost.zero.getter();
    uint64_t v34 = AssetCost.onDeviceMemory.getter();
    sub_100043CF4();
    v27();
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v38, enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result.failure(_:), v19);
    sub_100006960(v50, 1, 1, typea);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 48);
    swift_errorRetain();
    v28(v42, v37, v36, v35, v26, v34, v38, v43, v47, v50, v22, v21);
    swift_release();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002EB50(v50, &qword_10015DA50);
    sub_10000EFBC();
    v29();
    v51(v42, v49);
  }
  uint64_t v30 = (void *)swift_task_alloc();
  v0[45] = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_1000C8C48;
  uint64_t v31 = sub_100044070(v0[8]);
  return sub_1000C049C(v31, v32);
}

void sub_1000C9418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10002FAAC();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  uint64_t v28 = v27;
  uint64_t v31 = __chkstk_darwin(v29, v30);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&a9 - v33;
  uint64_t v35 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v37 = v36;
  if (v35 == InferenceProviderAssetDescriptor.identifier.getter() && v37 == v38)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0) {
      goto LABEL_9;
    }
  }
  sub_10000853C((void *)(v25 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v25 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
  sub_10004421C();
  v41();
  sub_10000853C((void *)(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v23 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
  sub_1000CAE84();
  sub_10004421C();
  v42();
  static InferenceProviderDescriptor.== infix(_:_:)();
  uint64_t v43 = *(void (**)(uint64_t))(v28 + 8);
  uint64_t v44 = sub_100069E00();
  v43(v44);
  ((void (*)(char *, uint64_t))v43)(v34, v26);
LABEL_9:
  sub_10002FAC4();
}

uint64_t sub_1000C95D4()
{
  type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_100057F20();
  InferenceProviderAssetDescriptor.identifier.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10000853C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
  sub_10004421C();
  v3();
  sub_1000C99B0(&qword_10015DC28, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
  dispatch thunk of Hashable.hash(into:)();
  sub_100043CF4();
  return v4();
}

Swift::Int sub_1000C9718()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C9758()
{
  return sub_1000C9718();
}

uint64_t sub_1000C977C()
{
  return sub_1000C95D4();
}

Swift::Int sub_1000C97A0()
{
  return Hasher._finalize()();
}

#error "1000C97F4: call analysis failed (funcsize=9)"

uint64_t sub_1000C9804()
{
  type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  __chkstk_darwin(v1, v2);
  sub_10000F0D0();
  uint64_t v11 = InferenceProviderAssetDescriptor.description.getter();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_10000853C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24));
  sub_1000CAE84();
  sub_10004421C();
  v4();
  uint64_t v5 = InferenceProviderDescriptor.description.getter();
  uint64_t v7 = v6;
  sub_100069E00();
  sub_100043CF4();
  v8();
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000C9944()
{
  return sub_1000C9804();
}

uint64_t sub_1000C9968()
{
  return sub_1000C99B0(&qword_10015DE40, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
}

uint64_t sub_1000C99B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C99F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C9A5C(uint64_t a1, uint64_t a2)
{
  return _swift_weakCopyInit(a2, a1);
}

uint64_t sub_1000C9A6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C9A94()
{
  type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v22 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10000ED60();
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (((v22 + 40) & ~v22) + v3 + v7) & ~v7;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v11);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v8 + v10 + v13) & ~v13;
  swift_unknownObjectRelease();
  swift_release();
  sub_100057FE4();
  v16(v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v4);
  uint64_t v17 = type metadata accessor for AuditToken();
  if (!sub_1000B8EAC(v17))
  {
    sub_10002FC6C();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0 + v14, v4);
  }
  swift_release();
  uint64_t v19 = sub_100043EDC();

  return _swift_deallocObject(v19, v20, v22 | v7 | v13 | 7);
}

uint64_t sub_1000C9C40()
{
  uint64_t State = type metadata accessor for LoadState();
  sub_10002FA4C(State);
  uint64_t v3 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10002FA4C(v3);
  uint64_t v4 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v4);
  sub_1000CAAEC();
  uint64_t v6 = *(void *)(v0 + v5);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10000ED54;
  sub_1000CAA58();
  return sub_1000C45F4(v8, v9, v10, v11, v12, v13, v14, v6);
}

uint64_t sub_1000C9DA0()
{
  sub_10002FAAC();
  uint64_t State = type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10000ED60();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, State);
  sub_100057FE4();
  v5();
  swift_release();
  sub_10002FAC4();
  return _swift_deallocObject(v6, v7, v8);
}

uint64_t sub_1000C9EB0(uint64_t a1)
{
  uint64_t v5 = v2;
  uint64_t State = type metadata accessor for LoadState();
  sub_10002FA4C(State);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10002FA4C(v12);
  sub_1000CAAEC();
  uint64_t v14 = v1 + v13;
  uint64_t v16 = *(void *)(v1 + v15);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v17;
  void *v17 = v5;
  v17[1] = sub_10000ED54;
  return sub_1000C7ED8(a1, v11, v3, v4, v9, v14, v16);
}

uint64_t sub_1000C9FEC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_1000CA040(uint64_t a1, uint64_t a2)
{
  return _swift_weakTakeInit(a2, a1);
}

uint64_t sub_1000CA050(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100003A70(a3);
  sub_10002FB84();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000CA0AC()
{
  uint64_t v1 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10000ED60();
  uint64_t v3 = v2;
  uint64_t v41 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v41 + 48) & ~v41;
  uint64_t v6 = v4 + *(void *)(v5 + 64);
  uint64_t v7 = sub_100003A70(&qword_10015BAA8);
  sub_10002FA4C(v7);
  uint64_t v40 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v9 = (v6 + v40) & ~v40;
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = sub_100003A70(&qword_10015DA90);
  sub_10002FA4C(v12);
  uint64_t v39 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v14 = (v9 + v11 + v39) & ~v39;
  uint64_t v16 = *(void *)(v15 + 64);
  type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v37 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v18 = (v14 + v16 + v37) & ~v37;
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = sub_100003A70(&qword_10015DA50);
  sub_10002FA4C(v21);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = v18 + v20 + v23;
  uint64_t v38 = *(void *)(v25 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v26 = v3 + 8;
  v27(v0 + v4, v1);
  uint64_t v28 = sub_100003A70(&qword_10015B408);
  if (!sub_1000CAD04(v28))
  {
    sub_10002FC6C();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0 + v9, v26);
  }
  uint64_t v30 = v24 & ~v23;
  uint64_t v31 = sub_100003A70(&qword_10015B9A0);
  if (!sub_1000CAD04(v31))
  {
    sub_10002FC6C();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v0 + v14, v26);
  }
  sub_100043AE0();
  v33();
  uint64_t v34 = type metadata accessor for AuditToken();
  if (!sub_1000B8EAC(v34))
  {
    sub_10002FC6C();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v0 + v30, v0 + v14);
  }

  return _swift_deallocObject(v0, v30 + v38, v41 | v40 | v39 | v37 | v23 | 7);
}

uint64_t sub_1000CA364()
{
  uint64_t v1 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10002FA4C(v1);
  uint64_t v2 = sub_100003A70(&qword_10015BAA8);
  sub_10002FA4C(v2);
  uint64_t v3 = sub_100003A70(&qword_10015DA90);
  sub_10002FA4C(v3);
  uint64_t State = type metadata accessor for LoadState();
  sub_10002FA4C(State);
  sub_100003A70(&qword_10015DA50);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10000E1FC;
  sub_1000CAA58();
  sub_1000307C8();
  return sub_1000C1E70(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000CA564()
{
  *(void *)(v3 - 184) = v0 + 5;
  *(void *)(v3 - 168) = v0 + 8;
  *(void *)(v3 - 112) = v0[37];
  *(void *)(v3 - 192) = v0[32];
  *(void *)(v3 - 128) = v0[31];
  *(void *)(v3 - 120) = v0[29];
  *(void *)(v3 - 96) = v1;
  *(void *)(v3 - 104) = v2;
  return type metadata accessor for RequestMetadata();
}

uint64_t sub_1000CA5EC()
{
  *(void *)(v1 - 120) = v0[38];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[35];
  *(void *)(v1 - 144) = v0[33];
  *(void *)(v1 - 128) = v0[32];
  uint64_t result = v2;
  *(void *)(v1 - 112) = v3;
  return result;
}

uint64_t sub_1000CA660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  *(void *)(v31 - 192) = a1;
  sub_100006960(a29, 1, 1, a1);
  return a31;
}

uint64_t sub_1000CA6E0()
{
  *(void *)(v1 - 88) = v0[45];
  *(void *)(v1 - 96) = v0[44];
  uint64_t v2 = (void *)(v0[13] + v0[42]);
  sub_10000853C(v2, v2[3]);
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t sub_1000CA768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_100006960(a32, 1, 1, *(void *)(v33 - 192));
  return a33;
}

uint64_t sub_1000CA7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return a18;
}

uint64_t sub_1000CA81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return a18;
}

uint64_t sub_1000CA860()
{
  return *(void *)(v0 + 304);
}

void sub_1000CA8C8()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_1000CA8D8()
{
  *(void *)(v1 - 96) = *(void *)(v0 + 152);
  return swift_task_dealloc();
}

uint64_t sub_1000CA90C()
{
  return v0;
}

uint64_t sub_1000CA934(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return swift_retain_n();
}

uint64_t sub_1000CA964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return v27 + *(int *)(a27 + 20);
}

uint64_t sub_1000CA9A4()
{
  uint64_t result = *(void *)(v2 - 112);
  *(_DWORD *)(v2 - 152) = v0;
  *(void *)(v2 - 144) = v1;
  return result;
}

uint64_t sub_1000CA9C8()
{
  *(_WORD *)(v0 + 22) = 2112;
  return swift_errorRetain();
}

uint64_t sub_1000CA9E8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000CAA08()
{
  return v0;
}

uint64_t sub_1000CAA28()
{
  return v0;
}

uint64_t sub_1000CAA78()
{
  return v0;
}

uint64_t sub_1000CAAA8(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CAAD0()
{
  return v0;
}

uint64_t sub_1000CAB08()
{
  sub_10000853C((void *)(*(void *)(v1 + 208) + v0), *(void *)(*(void *)(v1 + 208) + v0 + 24));
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t sub_1000CAB48(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CAB6C@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_1000CAB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100006960(a1, 1, 1, a4);
  return type metadata accessor for AuditToken();
}

uint64_t sub_1000CABB4(uint64_t a1)
{
  sub_100006AE8(v2, 1, a1);
  return sub_10002EB50(v2, v1);
}

uint64_t sub_1000CABF0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_1000CAC14(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CAC38()
{
  return swift_release_n();
}

uint64_t sub_1000CAC50(uint64_t a1, unint64_t a2)
{
  return sub_10001DF20(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_1000CAC68(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CAC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = *(void *)(v21 - 192);
  return sub_100006960(a21, 1, 1, v23);
}

uint64_t sub_1000CACBC()
{
  return sub_1000C99F8(v0, v1);
}

uint64_t sub_1000CACD4()
{
  return swift_retain_n();
}

uint64_t sub_1000CACF0()
{
  return v0;
}

uint64_t sub_1000CAD04(uint64_t a1)
{
  return sub_100006AE8(v1, 1, a1);
}

void sub_1000CAD24()
{
  *(_WORD *)(v0 + 12) = 2080;
  *(void *)(v1 - 160) = v0 + 14;
}

uint64_t sub_1000CAD38()
{
  return 0;
}

uint64_t sub_1000CAD44()
{
  return sub_1000B52C8(v0, v1);
}

uint64_t sub_1000CAD5C()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000CAD74()
{
  *(void *)(v0 - 152) = sub_10000853C(*(void **)(v0 - 176), *(void *)(*(void *)(v0 - 176) + 24));
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t sub_1000CADAC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000CADCC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000CADF8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000CAE24()
{
  return v0;
}

void sub_1000CAE30(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0x16u);
}

void sub_1000CAE64(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v8 = *(_DWORD *)(v6 - 136);
  _os_log_impl(a1, v4, (os_log_type_t)v8, a4, v5, 0x16u);
}

uint64_t sub_1000CAE98()
{
  return *(void *)(v0 - 128);
}

uint64_t sub_1000CAEAC()
{
  return sub_1000C99F8(v1, v0);
}

void *sub_1000CAEC4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 160) = v2;
  uint64_t v5 = *(void *)(v1 + a1 + 24);
  *(void *)(v3 - 176) = v1 + a1;
  return sub_10000853C((void *)(v1 + a1), v5);
}

uint64_t sub_1000CAF04(uint64_t a1)
{
  *(void *)(v1 + 416) = a1;
  return swift_retain_n();
}

ValueMetadata *type metadata accessor for OSVariantProvider()
{
  return &type metadata for OSVariantProvider;
}

uint64_t sub_1000CAF34()
{
  uint64_t v3 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString;
  *(void *)uint64_t v3 = "Execute Request";
  *(void *)(v3 + 8) = 15;
  *(unsigned char *)(v3 + 16) = 2;
  sub_1000CFAE0(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  sub_1000CFAE0(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  sub_1000CFAE0(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  sub_1000CFAE0(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  uint64_t v4 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString;
  *(void *)uint64_t v4 = "Prewarm Request";
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = v6;
  uint64_t v7 = v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_logger;
  subsystemName.getter();
  Logger.init(subsystem:category:)();
  uint64_t v8 = type metadata accessor for OSSignposter();
  sub_10000ED60();
  uint64_t v10 = v9;
  __chkstk_darwin(v11, v12);
  sub_100057F20();
  type metadata accessor for Logger();
  sub_10000ED60();
  __chkstk_darwin(v13, v14);
  sub_100030964();
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v2, v7);
  OSSignposter.init(logger:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster, v1, v8);
  return v0;
}

void sub_1000CB114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,unsigned __int8 a27)
{
  sub_10002FAAC();
  unint64_t v31 = v30;
  uint64_t v130 = v32;
  uint64_t v131 = v33;
  unint64_t v144 = v35;
  unint64_t v145 = v34;
  uint64_t v129 = v36;
  uint64_t v136 = v37;
  uint64_t v137 = v38;
  uint64_t v143 = a21;
  uint64_t v39 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v41 = v40;
  __chkstk_darwin(v42, v43);
  sub_100030298();
  uint64_t v44 = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v46 = v45;
  __chkstk_darwin(v47, v48);
  sub_100030964();
  uint64_t v138 = *(const char **)(v27 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  HIDWORD(v132) = *(unsigned __int8 *)(v27
                                     + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString
                                     + 16);
  type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v139 = v50;
  uint64_t v140 = v49;
  __chkstk_darwin(v49, v51);
  uint64_t v142 = v52;
  uint64_t v53 = (char *)&v121 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignposter.logHandle.getter();
  uint64_t v141 = v53;
  OSSignpostID.init(log:)();
  unint64_t v134 = (char *)v46;
  uint64_t v135 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v28, v136, v44);
  uint64_t v136 = v41;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v41 + 16);
  uint64_t v55 = v137;
  uint64_t v137 = (uint64_t *)v39;
  v54(v29, v55, v39);
  sub_1000CF2BC();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v133 = v31;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_1000CB8F8();
  sub_1000CF308(v56);
  sub_1000CB8F8();
  sub_1000CF308(v57);
  unint64_t v58 = OSSignposter.logHandle.getter();
  int v59 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    sub_10000EFBC();
    v62();
    sub_10000EFBC();
    v63();
    swift_bridgeObjectRelease_n();
    sub_1000B9D58();
    swift_bridgeObjectRelease_n();
    sub_1000CF638();
    uint64_t v64 = swift_bridgeObjectRelease_n();
LABEL_23:
    uint64_t v109 = __chkstk_darwin(v64, v65);
    sub_1000CF614(v109, v110, v111, v112, v113, v114, v115, v116, v121);
    sub_100069DF4();
    v117();
    type metadata accessor for OSSignpostIntervalState();
    sub_1000CF86C();
    sub_1000CF598();
    sub_100043DF8();
    v118();
    type metadata accessor for TelemetryIntervalState();
    uint64_t v119 = sub_1000CF7FC();
    sub_1000CF7F0(v119);
    sub_10002FAC4();
    return;
  }
  uint64_t v61 = v134;
  uint64_t v60 = v135;
  unint64_t v128 = a23;
  os_log_t v127 = v58;
  int v126 = v59;
  if ((v132 & 0x100000000) != 0)
  {
    if ((unint64_t)v138 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v66)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_1000CF49C();
      if (!(!v66 & v67))
      {
        uint64_t v138 = (const char *)&v147;
LABEL_10:
        uint64_t v137 = &v121;
        HIDWORD(v132) = a27;
        int v125 = a26;
        sub_1000CFA38(a25);
        uint64_t v123 = a24;
        uint64_t v122 = a22;
        uint64_t v70 = __chkstk_darwin(v68, v69);
        unint64_t v134 = sub_1000CF4B4(v70, v71, v72, v73, v74, v75, v76, v77, v121);
        sub_100069DF4();
        v78();
        uint64_t v79 = swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        uint64_t v146 = v135;
        *(_DWORD *)uint64_t v79 = 136448770;
        uint64_t v80 = UUIDIdentifier.uuidString.getter();
        uint64_t v82 = sub_10001DF20(v80, v81, &v146);
        sub_1000CF568(v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100057FE4();
        v83();
        *(_WORD *)(v79 + 12) = 2082;
        uint64_t v84 = UUIDIdentifier.uuidString.getter();
        uint64_t v86 = sub_1000CF538(v84, v85);
        sub_1000CF838(v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100043924();
        v87();
        *(_WORD *)(v79 + 22) = 2082;
        unint64_t v88 = v145;
        swift_bridgeObjectRetain();
        uint64_t v89 = sub_10001DF20(v129, v88, &v146);
        sub_1000CF47C(v89);
        sub_1000CFA44();
        *(_WORD *)(v79 + 32) = 2082;
        unint64_t v90 = v144;
        swift_bridgeObjectRetain();
        uint64_t v91 = sub_10001DF20(v130, v90, &v146);
        sub_1000CF47C(v91);
        sub_1000CFA44();
        *(_WORD *)(v79 + 42) = 2082;
        unint64_t v92 = v133;
        swift_bridgeObjectRetain();
        uint64_t v93 = sub_10001DF20(v131, v92, &v146);
        sub_1000CF47C(v93);
        sub_1000CFA44();
        *(_WORD *)(v79 + 52) = 2082;
        type metadata accessor for InferenceProviderAssetDescriptor();
        sub_1000CF414(&qword_10015B978, (void (*)(uint64_t))&type metadata accessor for InferenceProviderAssetDescriptor);
        swift_bridgeObjectRetain();
        uint64_t v94 = Set.description.getter();
        unint64_t v96 = v95;
        swift_bridgeObjectRelease();
        uint64_t v97 = sub_10001DF20(v94, v96, &v146);
        sub_1000CF47C(v97);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v79 + 62) = 2082;
        unint64_t v98 = v128;
        swift_bridgeObjectRetain();
        uint64_t v99 = sub_10001DF20(v122, v98, &v146);
        sub_1000CF47C(v99);
        sub_1000CFA44();
        *(_WORD *)(v79 + 72) = 2050;
        sub_1000CF914(v123);
        *(_WORD *)(v79 + 82) = 2050;
        sub_1000CF914(v124);
        *(_WORD *)(v79 + 92) = 2082;
        if (v125) {
          uint64_t v100 = 1702195828;
        }
        else {
          uint64_t v100 = 0x65736C6166;
        }
        if (v125) {
          unint64_t v101 = 0xE400000000000000;
        }
        else {
          unint64_t v101 = 0xE500000000000000;
        }
        uint64_t v102 = sub_10001DF20(v100, v101, &v146);
        sub_1000CF45C(v102);
        swift_bridgeObjectRelease();
        *(_WORD *)(v79 + 102) = 2082;
        if ((v132 & 0x100000000) != 0) {
          uint64_t v103 = 1702195828;
        }
        else {
          uint64_t v103 = 0x65736C6166;
        }
        if ((v132 & 0x100000000) != 0) {
          unint64_t v104 = 0xE400000000000000;
        }
        else {
          unint64_t v104 = 0xE500000000000000;
        }
        uint64_t v105 = sub_10001DF20(v103, v104, &v146);
        sub_1000CF45C(v105);
        swift_bridgeObjectRelease();
        os_signpost_id_t v106 = OSSignpostID.rawValue.getter();
        os_log_t v107 = v127;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v127, (os_signpost_type_t)v126, v106, v138, "requestIdentifier: %{public, signpost.description=attribute,public}s,\nsessionIdentifier: %{public, signpost.description=attribute,public}s,\nrequestLoggingIdentifier: %{public, signpost.description=attribute,public}s,\nuseCaseIdentifier: %{public, signpost.description=attribute,public}s,\nmodelBundleID: %{public, signpost.description=attribute,public}s,\nassetDescriptors: %{public, signpost.description=attribute,public}s,\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\ncreatedByPID: %{public, signpost.description=attribute,public}ld,\nonBehalfOfPID: %{public, signpost.description=attribute,public}ld,\noneShot: %{public, signpost.description=attribute,public}s,\nisFallbackRequest: %{public, signpost.description=attribute,public}s", (uint8_t *)v79, 0x70u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();

        sub_10004381C();
        uint64_t v64 = v108();
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  if (v138) {
    goto LABEL_10;
  }
LABEL_27:
  swift_bridgeObjectRelease_n();
  sub_1000CF638();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_100043924();
  v120();
  (*((void (**)(uint64_t, uint64_t))v61 + 1))(v28, v60);
  __break(1u);
}

uint64_t sub_1000CB8F8()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

void sub_1000CB968()
{
  sub_10002FAAC();
  sub_1000CF970(v2, v3, v4, v5);
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100030934();
  uint64_t v60 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString);
  int v58 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_execRequestPostString + 16);
  sub_100069DF4();
  v8();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v59 = v1;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v9 = (void *)OSSignposter.logHandle.getter();
  uint64_t v61 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12, v13);
  sub_1000CF5B4();
  int v56 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_5;
  }
  sub_1000CF958();
  if ((v14 & 1) == 0)
  {
    if (!v60)
    {
      swift_errorRelease();
      swift_errorRelease();
      sub_1000CF638();
      sub_10000EFBC();
      v15();
      __break(1u);
LABEL_5:
      sub_1000303D4();
      v16();
      sub_1000CF638();
      swift_errorRelease();
      swift_errorRelease();

      sub_100030420();
      v17();
LABEL_22:
      sub_10002FAC4();
      return;
    }
LABEL_10:
    type metadata accessor for OSSignpostError();
    sub_10000ED60();
    __chkstk_darwin(v20, v21);
    sub_1000CF6DC();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v22 = sub_1000CF7B8();
    v23(v22);
    if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_1000CF8FC(), v43))
    {
      uint64_t v32 = 0;
      uint64_t v53 = "[Error] Interval already ended";
    }
    else
    {
      sub_1000303D4();
      uint64_t v24 = v33();
      uint64_t v53 = "requestIdentifier: %{public, signpost.description=attribute,public}s,\n"
            "inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s, \n"
            "hasError: %{public, signpost.description=attribute,public}s";
      uint64_t v32 = 2;
    }
    sub_1000CF7E0(v24, v25, v26, v27, v28, v29, v30, v31, v52);
    __chkstk_darwin(v34, v35);
    uint64_t v55 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v36 = v54;
    sub_100069DF4();
    v37();
    sub_10002FF90();
    uint64_t v38 = sub_1000CF8E0();
    uint64_t v39 = sub_1000CF500(v38);
    unint64_t v41 = v40;
    uint64_t v62 = sub_10001DF20(v39, v40, v63);
    sub_1000CF690();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v42();
    sub_1000CFA18();
    uint64_t v62 = sub_10001DF20(v57, v41, v63);
    sub_1000CF690();
    swift_bridgeObjectRelease_n();
    sub_1000CF9F0();
    uint64_t v45 = v44 | 0x65750000u;
    if (v43) {
      uint64_t v46 = 0x65736C6166;
    }
    else {
      uint64_t v46 = v45;
    }
    if (v43) {
      unint64_t v47 = 0xE500000000000000;
    }
    else {
      unint64_t v47 = 0xE400000000000000;
    }
    uint64_t v48 = sub_10001DF20(v46, v47, v63);
    sub_1000CF848(v48);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_signpost_id_t v49 = OSSignpostID.rawValue.getter();
    sub_1000CF814((void *)&_mh_execute_header, v50, (os_signpost_type_t)v56, v49);
    sub_1000CF8A0();
    sub_10000ED7C();
    sub_10000ED7C();

    uint64_t v51 = *(void (**)(void))(v36 + 8);
    sub_1000CF708();
    v51();
    sub_1000CF708();
    v51();
    sub_1000CF7D4();
    goto LABEL_22;
  }
  sub_1000CFA7C();
  if (v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1000CF4A8();
  if (!v43)
  {
    sub_1000CF49C();
    if (!(!v43 & v19))
    {
      sub_1000CF908();
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
}

void sub_1000CBD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21)
{
  sub_10002FAAC();
  unint64_t v119 = v22;
  uint64_t v109 = v23;
  uint64_t v110 = v24;
  unint64_t v26 = v25;
  unint64_t v28 = v27;
  uint64_t v108 = v29;
  uint64_t v113 = v30;
  uint64_t v114 = v31;
  uint64_t v32 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v34 = v33;
  __chkstk_darwin(v35, v36);
  sub_10000F0D0();
  uint64_t v39 = v38 - v37;
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v40, v41);
  sub_100057F20();
  uint64_t v115 = *(const char **)(v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  LODWORD(v111) = *(unsigned __int8 *)(v21
                                     + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString
                                     + 16);
  uint64_t v116 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v112 = v42;
  __chkstk_darwin(v43, v44);
  uint64_t v118 = v45;
  sub_1000CF988();
  uint64_t v117 = v21;
  unint64_t v46 = v28;
  OSSignpostID.init(log:)();
  sub_100069DF4();
  v47();
  uint64_t v48 = v34;
  os_signpost_id_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
  uint64_t v113 = v39;
  v49(v39, v114, v32);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v50 = OSSignposter.logHandle.getter();
  LODWORD(v114) = static os_signpost_type_t.begin.getter();
  uint64_t v51 = OS_os_log.signpostsEnabled.getter();
  if ((v51 & 1) == 0)
  {

    sub_100057FE4();
    v54();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v113, v32);
    sub_1000B9D58();
    swift_bridgeObjectRelease_n();
    uint64_t v55 = swift_bridgeObjectRelease_n();
LABEL_17:
    uint64_t v87 = __chkstk_darwin(v55, v56);
    sub_1000CF614(v87, v88, v89, v90, v91, v92, v93, v94, v100);
    sub_100069DF4();
    v95();
    type metadata accessor for OSSignpostIntervalState();
    sub_1000CF86C();
    sub_1000CF598();
    sub_100043DF8();
    v96();
    type metadata accessor for TelemetryIntervalState();
    uint64_t v97 = sub_1000CF7FC();
    sub_1000CF7F0(v97);
    sub_10002FAC4();
    return;
  }
  uint64_t v105 = v48;
  uint64_t v106 = v32;
  unint64_t v107 = v26;
  os_log_t v104 = v50;
  if (v111)
  {
    if ((unint64_t)v115 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v57)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      sub_1000CF49C();
      uint64_t v53 = v117;
      if (!(!v57 & v58))
      {
        unint64_t v52 = v46;
        uint64_t v115 = (const char *)&v122;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v52 = v46;
  if (v115)
  {
    uint64_t v53 = v117;
LABEL_10:
    uint64_t v111 = &v100;
    int v101 = a21;
    uint64_t v59 = __chkstk_darwin(v51, v53);
    uint64_t v102 = sub_1000CF4B4(v59, v60, v61, v62, v63, v64, v65, v66, v100);
    sub_100069DF4();
    v67();
    uint64_t v68 = swift_slowAlloc();
    uint64_t v103 = swift_slowAlloc();
    uint64_t v121 = v103;
    *(_DWORD *)uint64_t v68 = 136447490;
    uint64_t v69 = UUIDIdentifier.uuidString.getter();
    uint64_t v120 = sub_1000CF538(v69, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v71();
    *(_WORD *)(v68 + 12) = 2082;
    uint64_t v72 = UUIDIdentifier.uuidString.getter();
    uint64_t v74 = sub_1000CF538(v72, v73);
    sub_1000CF9BC(v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v75();
    *(_WORD *)(v68 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10001DF20(v108, v52, &v121);
    sub_1000CF650(v76);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v68 + 32) = 2082;
    unint64_t v77 = v107;
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_10001DF20(v109, v77, &v121);
    sub_1000CF650(v78);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v68 + 42) = 2082;
    unint64_t v79 = v119;
    swift_bridgeObjectRetain();
    uint64_t v80 = sub_10001DF20(v110, v79, &v121);
    sub_1000CF650(v80);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v68 + 52) = 2082;
    if (v101) {
      uint64_t v81 = 1702195828;
    }
    else {
      uint64_t v81 = 0x65736C6166;
    }
    if (v101) {
      unint64_t v82 = 0xE400000000000000;
    }
    else {
      unint64_t v82 = 0xE500000000000000;
    }
    uint64_t v83 = sub_10001DF20(v81, v82, &v121);
    sub_1000CF9BC(v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_signpost_id_t v84 = OSSignpostID.rawValue.getter();
    os_log_t v85 = v104;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v104, (os_signpost_type_t)v114, v84, v115, "requestIdentifier: %{public, signpost.description=attribute,public}s,\nsessionIdentifier: %{public, signpost.description=attribute,public}s,\nrequestLoggingIdentifier: %{public, signpost.description=attribute,public}s,\nuseCaseIdentifier: %{public, signpost.description=attribute,public}s,\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\noneShot: %{public, signpost.description=attribute,public}s", (uint8_t *)v68, 0x3Eu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_10004381C();
    uint64_t v55 = v86();
    goto LABEL_17;
  }
LABEL_21:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10000EFBC();
  v98();
  sub_100057FE4();
  v99();
  __break(1u);
}

void sub_1000CC3A8()
{
  sub_10002FAAC();
  sub_1000CF970(v2, v3, v4, v5);
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100030934();
  uint64_t v60 = *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString);
  int v58 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_queueRequestPostString + 16);
  sub_100069DF4();
  v8();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v59 = v1;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v9 = (void *)OSSignposter.logHandle.getter();
  uint64_t v61 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12, v13);
  sub_1000CF5B4();
  int v56 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_5;
  }
  sub_1000CF958();
  if ((v14 & 1) == 0)
  {
    if (!v60)
    {
      swift_errorRelease();
      swift_errorRelease();
      sub_1000CF638();
      sub_10000EFBC();
      v15();
      __break(1u);
LABEL_5:
      sub_1000303D4();
      v16();
      sub_1000CF638();
      swift_errorRelease();
      swift_errorRelease();

      sub_100030420();
      v17();
LABEL_22:
      sub_10002FAC4();
      return;
    }
LABEL_10:
    type metadata accessor for OSSignpostError();
    sub_10000ED60();
    __chkstk_darwin(v20, v21);
    sub_1000CF6DC();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v22 = sub_1000CF7B8();
    v23(v22);
    if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_1000CF8FC(), v43))
    {
      uint64_t v32 = 0;
      uint64_t v53 = "[Error] Interval already ended";
    }
    else
    {
      sub_1000303D4();
      uint64_t v24 = v33();
      uint64_t v53 = "requestIdentifier: %{public, signpost.description=attribute,public}s,\n"
            "inferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\n"
            "hasError: %{public, signpost.description=attribute,public}s";
      uint64_t v32 = 2;
    }
    sub_1000CF7E0(v24, v25, v26, v27, v28, v29, v30, v31, v52);
    __chkstk_darwin(v34, v35);
    uint64_t v55 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v36 = v54;
    sub_100069DF4();
    v37();
    sub_10002FF90();
    uint64_t v38 = sub_1000CF8E0();
    uint64_t v39 = sub_1000CF500(v38);
    unint64_t v41 = v40;
    uint64_t v62 = sub_10001DF20(v39, v40, v63);
    sub_1000CF690();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v42();
    sub_1000CFA18();
    uint64_t v62 = sub_10001DF20(v57, v41, v63);
    sub_1000CF690();
    swift_bridgeObjectRelease_n();
    sub_1000CF9F0();
    uint64_t v45 = v44 | 0x65750000u;
    if (v43) {
      uint64_t v46 = 0x65736C6166;
    }
    else {
      uint64_t v46 = v45;
    }
    if (v43) {
      unint64_t v47 = 0xE500000000000000;
    }
    else {
      unint64_t v47 = 0xE400000000000000;
    }
    uint64_t v48 = sub_10001DF20(v46, v47, v63);
    sub_1000CF848(v48);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_signpost_id_t v49 = OSSignpostID.rawValue.getter();
    sub_1000CF814((void *)&_mh_execute_header, v50, (os_signpost_type_t)v56, v49);
    sub_1000CF8A0();
    sub_10000ED7C();
    sub_10000ED7C();

    uint64_t v51 = *(void (**)(void))(v36 + 8);
    sub_1000CF708();
    v51();
    sub_1000CF708();
    v51();
    sub_1000CF7D4();
    goto LABEL_22;
  }
  sub_1000CFA7C();
  if (v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1000CF4A8();
  if (!v43)
  {
    sub_1000CF49C();
    if (!(!v43 & v19))
    {
      sub_1000CF908();
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
}

void sub_1000CC7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10002FAAC();
  uint64_t v140 = v26;
  unint64_t v139 = v27;
  uint64_t v138 = v28;
  uint64_t v151 = v29;
  uint64_t v136 = v30;
  uint64_t v150 = v31;
  uint64_t v135 = v32;
  unint64_t v156 = a22;
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  sub_10000ED60();
  uint64_t v146 = v34;
  uint64_t v147 = v33;
  __chkstk_darwin(v33, v35);
  sub_100030144();
  uint64_t v155 = v36;
  uint64_t State = type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v148 = v38;
  uint64_t v41 = __chkstk_darwin(v39, v40);
  unint64_t v154 = (char *)&v131 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41, v43);
  uint64_t v153 = (char *)&v131 - v44;
  uint64_t v45 = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v47 = v46;
  __chkstk_darwin(v48, v49);
  sub_100030144();
  uint64_t v157 = v50;
  uint64_t v51 = sub_100003A70(&qword_10015DA90);
  __chkstk_darwin(v51 - 8, v52);
  sub_10000F0D0();
  uint64_t v55 = v54 - v53;
  uint64_t v56 = sub_100003A70(&qword_10015BAA8);
  __chkstk_darwin(v56 - 8, v57);
  sub_1000CF930();
  sub_1000CF364(a23, v25, &qword_10015BAA8);
  if (sub_100006AE8(v25, 1, v45) == 1)
  {
    sub_1000CF3C8(v25, &qword_10015BAA8);
    uint64_t v134 = 0;
    unint64_t v58 = 0xE000000000000000;
  }
  else
  {
    uint64_t v134 = UUIDIdentifier.uuidString.getter();
    unint64_t v58 = v59;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v25, v45);
  }
  uint64_t v149 = v45;
  sub_1000CF364(a24, v55, &qword_10015DA90);
  uint64_t v60 = sub_100003A70(&qword_10015B9A0);
  uint64_t v61 = State;
  if (sub_100006AE8(v55, 1, v60) == 1)
  {
    sub_1000CF3C8(v55, &qword_10015DA90);
    uint64_t v133 = 0;
    unint64_t v152 = 0xE000000000000000;
  }
  else
  {
    uint64_t v133 = UUIDIdentifier.uuidString.getter();
    unint64_t v152 = v62;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v55, v60);
  }
  uint64_t v141 = *(const char **)(v24 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  int v137 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString + 16);
  type metadata accessor for OSSignpostID();
  sub_1000CFA38((uint64_t)&v131);
  uint64_t v145 = v63;
  sub_10000ED60();
  uint64_t v142 = v64;
  __chkstk_darwin(v65, v66);
  uint64_t v144 = v67;
  sub_1000CF988();
  uint64_t v143 = v24;
  OSSignpostID.init(log:)();
  sub_100069DF4();
  v68();
  uint64_t v69 = v148;
  unint64_t v70 = *(void (**)(void))(v148 + 16);
  sub_1000CFAA0();
  v70();
  sub_1000CFAA0();
  v70();
  sub_100069DF4();
  v71();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = OSSignposter.logHandle.getter();
  LODWORD(v140) = static os_signpost_type_t.begin.getter();
  uint64_t v73 = OS_os_log.signpostsEnabled.getter();
  if ((v73 & 1) == 0)
  {

    sub_100030420();
    v78();
    sub_1000B9D58();
    swift_bridgeObjectRelease_n();
    unint64_t v79 = *(void (**)(void))(v69 + 8);
    sub_100043DF8();
    v79();
    sub_100043DF8();
    v79();
    sub_1000CF948();
    v80();
    sub_1000CFA88();
    swift_bridgeObjectRelease_n();
    uint64_t v81 = sub_1000CF638();
    uint64_t v83 = v145;
    uint64_t v85 = v142;
    uint64_t v84 = v143;
LABEL_23:
    __chkstk_darwin(v81, v82);
    sub_100069DF4();
    v126();
    type metadata accessor for OSSignpostIntervalState();
    sub_1000CF86C();
    sub_1000CF598();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v83);
    type metadata accessor for TelemetryIntervalState();
    uint64_t v127 = sub_1000CF7FC();
    sub_1000CF7F0(v127);
    sub_10002FAC4();
    return;
  }
  os_log_t v132 = v72;
  uint64_t v138 = v47;
  unint64_t v139 = v58;
  if (v137)
  {
    unint64_t v74 = (unint64_t)v150;
    unint64_t v75 = v151;
    if ((unint64_t)v141 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v86)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_1000CF49C();
      uint64_t v76 = v148;
      uint64_t v77 = v143;
      if (!(!v86 & v87))
      {
        uint64_t v141 = (const char *)&v159;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v74 = (unint64_t)v150;
  unint64_t v75 = v151;
  if (v141)
  {
    uint64_t v76 = v148;
    uint64_t v77 = v143;
LABEL_16:
    uint64_t v157 = &v131;
    uint64_t v149 = a21;
    uint64_t v88 = __chkstk_darwin(v73, v77);
    uint64_t v150 = sub_1000CF4B4(v88, v89, v90, v91, v92, v93, v94, v95, v131);
    sub_100069DF4();
    v96();
    uint64_t v97 = swift_slowAlloc();
    uint64_t v151 = swift_slowAlloc();
    uint64_t v158 = v151;
    *(_DWORD *)uint64_t v97 = 136448258;
    sub_10000E080();
    uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v100 = sub_1000CF538(v98, v99);
    sub_1000CF568(v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v101();
    *(_WORD *)(v97 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v102 = sub_10001DF20(v135, v74, &v158);
    sub_1000CF45C(v102);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v97 + 22) = 2082;
    if (v75) {
      uint64_t v103 = v136;
    }
    else {
      uint64_t v103 = 3157552;
    }
    if (v75) {
      unint64_t v104 = v75;
    }
    else {
      unint64_t v104 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_10001DF20(v103, v104, &v158);
    sub_1000CF838(v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v97 + 32) = 2082;
    sub_1000CF414(&qword_10015CF78, (void (*)(uint64_t))&type metadata accessor for LoadState);
    uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v108 = sub_1000CF538(v106, v107);
    sub_1000CF670(v108);
    swift_bridgeObjectRelease();
    uint64_t v109 = *(void (**)(void))(v76 + 8);
    sub_100043DF8();
    v109();
    *(_WORD *)(v97 + 42) = 2082;
    uint64_t v83 = v145;
    uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v112 = sub_1000CF538(v110, v111);
    sub_1000CF670(v112);
    swift_bridgeObjectRelease();
    sub_100043DF8();
    v109();
    *(_WORD *)(v97 + 52) = 2082;
    sub_1000CF414(&qword_10015DFA8, (void (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason);
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v115 = sub_1000CF538(v113, v114);
    sub_1000CF670(v115);
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v116();
    *(_WORD *)(v97 + 62) = 2082;
    unint64_t v117 = v156;
    swift_bridgeObjectRetain();
    uint64_t v118 = sub_10001DF20(v149, v117, &v158);
    sub_1000CF45C(v118);
    uint64_t v85 = v142;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v97 + 72) = 2082;
    unint64_t v119 = v139;
    swift_bridgeObjectRetain();
    uint64_t v120 = sub_10001DF20(v134, v119, &v158);
    sub_1000CF45C(v120);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v97 + 82) = 2082;
    unint64_t v121 = v152;
    swift_bridgeObjectRetain();
    uint64_t v122 = sub_10001DF20(v133, v121, &v158);
    sub_1000CF45C(v122);
    uint64_t v84 = v143;
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v123 = OSSignpostID.rawValue.getter();
    os_log_t v124 = v132;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v132, (os_signpost_type_t)v140, v123, v141, "assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\nassetIdentifier: %{public, signpost.description=attribute,public}s,\nassetVersion: %{public, signpost.description=attribute,public}s,\nfromState: %{public, signpost.description=attribute,public}s,\ntoState: %{public, signpost.description=attribute,public}s,\nreason: %{public, signpost.description=attribute,public}s,\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s,\nRequestUUID: %{public, signpost.description=attribute,public}s,\nsessionIdentifier: %{public, signpost.description=attribute,public}s", (uint8_t *)v97, 0x5Cu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_10004381C();
    uint64_t v81 = v125();
    goto LABEL_23;
  }
LABEL_27:
  sub_1000CF638();
  swift_bridgeObjectRelease_n();
  sub_1000CFA88();
  sub_10000EFBC();
  v128();
  uint64_t v129 = *(void (**)(char *, uint64_t))(v148 + 8);
  v129(v154, v61);
  v129(v153, v61);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10000EFBC();
  v130();
  __break(1u);
}

void sub_1000CD268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_10002FAAC();
  uint64_t v25 = v24;
  uint64_t v115 = v26;
  uint64_t v116 = v27;
  uint64_t v109 = v28;
  uint64_t v110 = v29;
  unint64_t v31 = v30;
  unint64_t v33 = v32;
  uint64_t v107 = v34;
  uint64_t v118 = a21;
  uint64_t v35 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  sub_10000ED60();
  uint64_t v37 = v36;
  __chkstk_darwin(v38, v39);
  sub_1000CF930();
  uint64_t v40 = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v42 = v41;
  __chkstk_darwin(v43, v44);
  sub_100030298();
  uint64_t v114 = v21 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_signPoster;
  sub_1000CFAEC(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_assetTransitionPostString);
  LODWORD(v111) = v45;
  uint64_t v46 = *(char **)(v25 + 16);
  sub_100069DF4();
  v47();
  sub_1000CF318();
  unint64_t v112 = v33;
  swift_bridgeObjectRetain_n();
  unint64_t v113 = v31;
  swift_bridgeObjectRetain_n();
  sub_1000CB8F8();
  sub_1000CF308(v48);
  uint64_t v115 = v23;
  uint64_t v116 = v35;
  sub_100069DF4();
  v49();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v50 = OSSignposter.logHandle.getter();
  uint64_t v114 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v52 = v51;
  __chkstk_darwin(v53, v54);
  uint64_t v105 = v55;
  uint64_t v106 = v46;
  uint64_t v56 = (char *)v99 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignpostIntervalState.signpostID.getter();
  int v108 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v102 = v22;
  uint64_t v103 = v42;
  uint64_t v104 = v40;
  uint64_t v101 = v37;
  os_log_t v100 = v50;
  if ((v111 & 1) == 0)
  {
    if (!v117)
    {
      swift_errorRelease();
      swift_errorRelease();
      sub_100057FE4();
      v57();
      swift_bridgeObjectRelease_n();
      sub_1000CFA88();
      sub_10000EFBC();
      v58();
      __break(1u);
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v40);
      sub_1000CFA88();
      swift_bridgeObjectRelease_n();
      sub_100057FE4();
      v59();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v114);
LABEL_28:
      sub_10002FAC4();
      return;
    }
LABEL_10:
    type metadata accessor for OSSignpostError();
    sub_10000ED60();
    __chkstk_darwin(v62, v63);
    sub_100030964();
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v64 = sub_1000CF580();
    v65(v64);
    if (&enum case for OSSignpostError.doubleEnd(_:) && (sub_1000CF8FC(), v60))
    {
      char v66 = 0;
      char v67 = 0;
      sub_1000CFA38((uint64_t)"[Error] Interval already ended");
    }
    else
    {
      sub_100057FE4();
      v69();
      sub_1000CFA38((uint64_t)"assetTransitionIdentifier: %{public, signpost.description=attribute,public}s,\n"
                             "assetIdentifier: %{public, signpost.description=attribute,public}s,\n"
                             "assetVersion: %{public, signpost.description=attribute,public}s,\n"
                             "memoryCostKB: %{public, signpost.description=attribute,public}llu,\n"
                             "result: %{public, signpost.description=attribute,public}s,\n"
                             "hasError: %{public, signpost.description=attribute,public}s");
      char v67 = 2;
      char v66 = 6;
    }
    v99[2] = (uint64_t)v56;
    unint64_t v111 = v99;
    uint64_t v70 = __chkstk_darwin(v68, v56);
    uint64_t v106 = sub_1000CF4B4(v70, v71, v72, v73, v74, v75, v76, v77, v99[0]);
    sub_100069DF4();
    v78();
    uint64_t v79 = swift_slowAlloc();
    uint64_t v119 = swift_slowAlloc();
    *(unsigned char *)uint64_t v79 = v67;
    *(unsigned char *)(v79 + 1) = v66;
    *(_WORD *)(v79 + 2) = 2082;
    sub_10000E080();
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = sub_1000CF538(v80, v81);
    sub_1000CF568(v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v83();
    *(_WORD *)(v79 + 12) = 2082;
    unint64_t v84 = v112;
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_10001DF20(v107, v84, &v119);
    sub_1000CF45C(v85);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v79 + 22) = 2082;
    if (v113) {
      uint64_t v86 = v109;
    }
    else {
      uint64_t v86 = 3157552;
    }
    if (v113) {
      unint64_t v87 = v113;
    }
    else {
      unint64_t v87 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_10001DF20(v86, v87, &v119);
    sub_1000CF838(v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000B9D58();
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 32) = 2050;
    sub_1000CF914(v110);
    *(_WORD *)(v79 + 42) = 2082;
    sub_1000CF414(&qword_10015DFA0, (void (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result);
    uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v91 = sub_1000CF538(v89, v90);
    sub_1000CF9D0(v91);
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v92();
    *(_WORD *)(v79 + 52) = 2082;
    if (v118) {
      uint64_t v93 = 1702195828;
    }
    else {
      uint64_t v93 = 0x65736C6166;
    }
    if (v118) {
      unint64_t v94 = 0xE400000000000000;
    }
    else {
      unint64_t v94 = 0xE500000000000000;
    }
    uint64_t v95 = sub_10001DF20(v93, v94, &v119);
    sub_1000CF9D0(v95);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_signpost_id_t v96 = OSSignpostID.rawValue.getter();
    os_log_t v97 = v100;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v100, (os_signpost_type_t)v108, v96, v117, (const char *)v99[1], (uint8_t *)v79, 0x3Eu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    uint64_t v98 = *(void (**)(void))(v52 + 8);
    sub_1000CF948();
    v98();
    sub_1000CF948();
    v98();
    goto LABEL_28;
  }
  if ((unint64_t)v117 >> 32)
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_1000CF4A8();
  if (!v60)
  {
    sub_1000CF49C();
    if (!(!v60 & v61))
    {
      unint64_t v117 = (const char *)&v120;
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_31:
  __break(1u);
}

void sub_1000CD93C()
{
  sub_10002FAAC();
  int v67 = v1;
  uint64_t v65 = v2;
  uint64_t v66 = v3;
  unint64_t v5 = v4;
  uint64_t v64 = v6;
  uint64_t v7 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_10000F0D0();
  uint64_t v14 = v13 - v12;
  uint64_t v71 = *(const char **)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  LODWORD(v68) = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString + 16);
  uint64_t v72 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v70 = v15;
  __chkstk_darwin(v16, v17);
  sub_1000CF550();
  OSSignposter.logHandle.getter();
  uint64_t v69 = v0;
  OSSignpostID.init(log:)();
  sub_1000CF2BC();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_1000CB8F8();
  sub_1000CF308(v18);
  sub_1000CB8F8();
  sub_1000CF308(v19);
  sub_1000CFAD4();
  sub_100069DF4();
  v20();
  uint64_t v21 = OSSignposter.logHandle.getter();
  int v22 = static os_signpost_type_t.begin.getter();
  uint64_t v23 = OS_os_log.signpostsEnabled.getter();
  if ((v23 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v62 = v9;
  uint64_t v63 = v7;
  os_log_t v60 = v21;
  uint64_t v61 = v14;
  int v59 = v22;
  if ((v68 & 1) == 0)
  {
    if (!v71)
    {
      sub_10000EFBC();
      v25();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_5:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      sub_1000303D4();
      uint64_t v27 = v26();
LABEL_17:
      __chkstk_darwin(v27, v28);
      sub_1000CF550();
      sub_1000CFAD4();
      sub_100069DF4();
      v55();
      type metadata accessor for OSSignpostIntervalState();
      sub_1000CF86C();
      sub_1000CF598();
      sub_100043924();
      v56();
      type metadata accessor for TelemetryIntervalState();
      uint64_t v57 = sub_1000CF7FC();
      sub_1000CF7F0(v57);
      sub_10002FAC4();
      return;
    }
LABEL_10:
    uint64_t v31 = v66;
    uint64_t v70 = &v58;
    uint64_t v32 = __chkstk_darwin(v23, v24);
    uint64_t v68 = sub_1000CF9A8(v32, v33, v34, v35, v36, v37, v38, v39, v58);
    sub_1000CFAD4();
    sub_100069DF4();
    v40();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    v74[0] = v69;
    *(_DWORD *)uint64_t v41 = 136447490;
    swift_bridgeObjectRetain();
    uint64_t v42 = Array.description.getter();
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v73 = sub_10001DF20(v42, v44, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_10001DF20(v64, v5, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v41 + 22) = 2050;
    uint64_t v73 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 32) = 2050;
    uint64_t v73 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 42) = 2082;
    if (v67) {
      uint64_t v45 = 1702195828;
    }
    else {
      uint64_t v45 = 0x65736C6166;
    }
    if (v67) {
      unint64_t v46 = 0xE400000000000000;
    }
    else {
      unint64_t v46 = 0xE500000000000000;
    }
    uint64_t v47 = sub_10001DF20(v45, v46, v74);
    sub_1000CFA04(v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 52) = 2082;
    uint64_t v48 = UUIDIdentifier.uuidString.getter();
    uint64_t v50 = sub_1000CF718(v48, v49);
    sub_1000CFA04(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v51();
    os_signpost_id_t v52 = OSSignpostID.rawValue.getter();
    os_log_t v53 = v60;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, (os_signpost_type_t)v59, v52, v71, "bundeIdentifiers: %{public, signpost.description=attribute,public}s,\nuseCaseIdentifier: %{public, signpost.description=attribute,public}s,\nonBehalfOfPID: %{public, signpost.description=attribute,public}ld,\ncreatedByPID: %{public, signpost.description=attribute,public}ld,\ncontainsSensitiveData: %{public, signpost.description=attribute,public}s,\nuuid: %{public, signpost.description=attribute,public}s", (uint8_t *)v41, 0x3Eu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_10004381C();
    uint64_t v27 = v54();
    goto LABEL_17;
  }
  if ((unint64_t)v71 >> 32)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_1000CF4A8();
  if (!v29)
  {
    sub_1000CF49C();
    if (!(!v29 & v30))
    {
      sub_1000CF908();
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

void sub_1000CDE98()
{
  sub_10002FAAC();
  sub_1000CFAB4(v2, v3);
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  sub_100057F20();
  sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100030934();
  uint64_t v53 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_addSessionPostString);
  uint64_t v8 = *(void *)(v0 + 16);
  sub_100069DF4();
  v9();
  sub_100069DF4();
  v10();
  uint64_t v11 = (void *)OSSignposter.logHandle.getter();
  uint64_t v12 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  __chkstk_darwin(v13, v14);
  sub_1000CF5E4();
  os_signpost_type_t v52 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_100057FE4();
    v17();
    sub_100043DF8();
    v18();

    sub_100030420();
    v19();
LABEL_16:
    sub_10002FAC4();
    return;
  }
  sub_1000CF79C();
  if (v15)
  {
    sub_1000CFA7C();
    if (v20)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v21)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      sub_1000CF49C();
      if (!(!v21 & v22))
      {
        uint64_t v16 = v12;
        sub_1000CF908();
LABEL_10:
        type metadata accessor for OSSignpostError();
        sub_10000ED60();
        __chkstk_darwin(v23, v24);
        sub_1000CF774();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v25 = sub_1000CF580();
        v26(v25);
        if (!&enum case for OSSignpostError.doubleEnd(_:) || (sub_1000CF8FC(), !v21))
        {
          sub_100043FA8();
          uint64_t v27 = v35();
        }
        sub_1000CF758(v27, v28, v29, v30, v31, v32, v33, v34, v51);
        __chkstk_darwin(v36, v37);
        sub_100069DF4();
        v38();
        swift_slowAlloc();
        uint64_t v39 = sub_1000CFA5C();
        uint64_t v40 = sub_1000CF4C8(v39);
        sub_1000CF718(v40, v41);
        sub_1000CF6AC();
        swift_bridgeObjectRelease();
        sub_10000EFBC();
        v42();
        *(_WORD *)(v8 + 12) = 2082;
        sub_1000CF414(&qword_10015DF88, (void (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
        uint64_t v43 = sub_1000CF8BC();
        sub_1000CF718(v43, v44);
        sub_1000CF6AC();
        swift_bridgeObjectRelease();
        sub_10000EFBC();
        v45();
        os_signpost_id_t v46 = OSSignpostID.rawValue.getter();
        sub_1000CF730((void *)&_mh_execute_header, v47, v52, v46);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();

        uint64_t v48 = *(void (**)(void))(v16 + 8);
        sub_100057FE4();
        v48();
        sub_100057FE4();
        v48();
        sub_1000CF7D4();
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v53)
  {
    uint64_t v16 = v12;
    goto LABEL_10;
  }
LABEL_20:
  sub_100043DF8();
  v49();
  sub_10000EFBC();
  v50();
  __break(1u);
}

void sub_1000CE2F8()
{
  sub_10002FAAC();
  uint64_t v1 = (uint8_t *)sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  __chkstk_darwin(v2, v3);
  sub_100030298();
  unint64_t v49 = *(const char **)(v0 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  LODWORD(v48) = *(unsigned __int8 *)(v0
                                    + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString
                                    + 16);
  uint64_t v4 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9, v10);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  sub_100069DF4();
  v11();
  uint64_t v12 = OSSignposter.logHandle.getter();
  int v13 = static os_signpost_type_t.begin.getter();
  uint64_t v14 = OS_os_log.signpostsEnabled.getter();
  if ((v14 & 1) == 0) {
    goto LABEL_5;
  }
  os_log_t v47 = v12;
  int v46 = v13;
  if ((v48 & 1) == 0)
  {
    uint64_t v12 = v1;
    if (!v49)
    {
      sub_100043FA8();
      v16();
      __break(1u);
LABEL_5:

      sub_100043FA8();
      uint64_t v18 = v17();
LABEL_11:
      __chkstk_darwin(v18, v19);
      sub_1000CF550();
      v38(v1, (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      type metadata accessor for OSSignpostIntervalState();
      sub_1000CF86C();
      sub_1000CF598();
      sub_100043924();
      v39();
      type metadata accessor for TelemetryIntervalState();
      uint64_t v40 = sub_1000CF7FC();
      sub_1000CF7F0(v40);
      sub_10002FAC4();
      return;
    }
LABEL_10:
    unint64_t v44 = &v41;
    uint64_t v22 = __chkstk_darwin(v14, v15);
    unint64_t v41 = sub_1000CF9A8(v22, v23, v24, v25, v26, v27, v28, v29, (uint64_t)v41);
    sub_1000CFAD4();
    uint64_t v43 = v30;
    sub_100069DF4();
    v31();
    uint64_t v1 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = sub_10002FF90();
    uint64_t v51 = v42;
    uint64_t v48 = v6;
    uint64_t v45 = v4;
    *(_DWORD *)uint64_t v1 = 136446210;
    uint64_t v32 = UUIDIdentifier.uuidString.getter();
    uint64_t v50 = sub_1000CF718(v32, v33);
    uint64_t v4 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043FA8();
    v34();
    os_signpost_id_t v35 = OSSignpostID.rawValue.getter();
    os_log_t v36 = v47;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, (os_signpost_type_t)v46, v35, v49, "sessionIdentifier: %{public, signpost.description=attribute,public}s", v1, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_10004381C();
    uint64_t v18 = v37();
    goto LABEL_11;
  }
  if ((unint64_t)v49 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_1000CF4A8();
  if (!v20)
  {
    sub_1000CF49C();
    if (!(!v20 & v21))
    {
      unint64_t v49 = (const char *)&v52;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
}

void sub_1000CE694()
{
  sub_10002FAAC();
  sub_1000CFAB4(v2, v3);
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  sub_100057F20();
  sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  __chkstk_darwin(v6, v7);
  sub_100030934();
  uint64_t v53 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_removeSessionPostString);
  uint64_t v8 = *(void *)(v0 + 16);
  sub_100069DF4();
  v9();
  sub_100069DF4();
  v10();
  uint64_t v11 = (void *)OSSignposter.logHandle.getter();
  uint64_t v12 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  __chkstk_darwin(v13, v14);
  sub_1000CF5E4();
  os_signpost_type_t v52 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_100057FE4();
    v17();
    sub_100043DF8();
    v18();

    sub_100030420();
    v19();
LABEL_16:
    sub_10002FAC4();
    return;
  }
  sub_1000CF79C();
  if (v15)
  {
    sub_1000CFA7C();
    if (v20)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v21)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      sub_1000CF49C();
      if (!(!v21 & v22))
      {
        uint64_t v16 = v12;
        sub_1000CF908();
LABEL_10:
        type metadata accessor for OSSignpostError();
        sub_10000ED60();
        __chkstk_darwin(v23, v24);
        sub_1000CF774();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v25 = sub_1000CF580();
        v26(v25);
        if (!&enum case for OSSignpostError.doubleEnd(_:) || (sub_1000CF8FC(), !v21))
        {
          sub_100043FA8();
          uint64_t v27 = v35();
        }
        sub_1000CF758(v27, v28, v29, v30, v31, v32, v33, v34, v51);
        __chkstk_darwin(v36, v37);
        sub_100069DF4();
        v38();
        swift_slowAlloc();
        uint64_t v39 = sub_1000CFA5C();
        uint64_t v40 = sub_1000CF4C8(v39);
        sub_1000CF718(v40, v41);
        sub_1000CF6AC();
        swift_bridgeObjectRelease();
        sub_10000EFBC();
        v42();
        *(_WORD *)(v8 + 12) = 2082;
        sub_1000CF414(&qword_10015DF88, (void (*)(uint64_t))&type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult);
        uint64_t v43 = sub_1000CF8BC();
        sub_1000CF718(v43, v44);
        sub_1000CF6AC();
        swift_bridgeObjectRelease();
        sub_10000EFBC();
        v45();
        os_signpost_id_t v46 = OSSignpostID.rawValue.getter();
        sub_1000CF730((void *)&_mh_execute_header, v47, v52, v46);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();

        uint64_t v48 = *(void (**)(void))(v16 + 8);
        sub_100057FE4();
        v48();
        sub_100057FE4();
        v48();
        sub_1000CF7D4();
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v53)
  {
    uint64_t v16 = v12;
    goto LABEL_10;
  }
LABEL_20:
  sub_100043DF8();
  v49();
  sub_10000EFBC();
  v50();
  __break(1u);
}

void sub_1000CEAF4()
{
  sub_10002FAAC();
  unint64_t v56 = v1;
  uint64_t v51 = v2;
  uint64_t v52 = v3;
  unint64_t v5 = v4;
  uint64_t v6 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v8 = v7;
  __chkstk_darwin(v9, v10);
  sub_100030964();
  sub_1000CFAEC(OBJC_IVAR____TtC13modelmanagerd19TelemetrySignposter_preWarmPostString);
  int v53 = v11;
  sub_100069DF4();
  v12();
  uint64_t v55 = type metadata accessor for OSSignpostID();
  sub_10000ED60();
  uint64_t v14 = v13;
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v17, v18);
  unint64_t v19 = v5;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  static OSSignpostID.exclusive.getter();
  uint64_t v20 = OSSignposter.logHandle.getter();
  int v50 = static os_signpost_type_t.event.getter();
  uint64_t v21 = OS_os_log.signpostsEnabled.getter();
  if ((v21 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);

    swift_bridgeObjectRelease_n();
    sub_1000B9D58();
    sub_100043FA8();
    v31();
LABEL_11:
    sub_10002FAC4();
    return;
  }
  uint64_t v48 = v8;
  uint64_t v49 = v0;
  if (v53)
  {
    if ((unint64_t)v54 >> 32)
    {
      __break(1u);
    }
    else
    {
      sub_1000CF4A8();
      if (v32)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      sub_1000CF49C();
      if (!(!v32 & v33))
      {
        uint64_t v29 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v30 = v14;
        uint64_t v54 = (const char *)&v59;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (v54)
  {
    uint64_t v29 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v30 = v14;
LABEL_10:
    sub_1000CF7E0(v21, v22, v23, v24, v25, v26, v27, v28, v46);
    __chkstk_darwin(v34, v35);
    uint64_t v46 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v47 = v29;
    sub_100069DF4();
    v36();
    sub_10002FF90();
    uint64_t v58 = sub_1000CF8E0();
    *(_DWORD *)uint64_t v16 = 136446722;
    uint64_t v37 = UUIDIdentifier.uuidString.getter();
    uint64_t v57 = sub_10001DF20(v37, v38, &v58);
    sub_1000CF884();
    swift_bridgeObjectRelease();
    sub_10000EFBC();
    v39();
    *(_WORD *)(v16 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_10001DF20(v51, v19, &v58);
    sub_1000CF884();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 22) = 2082;
    unint64_t v40 = v56;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_10001DF20(v52, v40, &v58);
    sub_1000CF884();
    swift_bridgeObjectRelease_n();
    uint64_t v41 = v46;
    os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v50, v42, v54, "sessionIdentifier: %{public, signpost.description=attribute,public}s\ninferenceProviderIdentifier: %{public, signpost.description=attribute,public}s\nassetBundleIdentifier: %{public, signpost.description=attribute,public}s", (uint8_t *)v16, 0x20u);
    sub_1000CF8A0();
    sub_10000ED7C();
    sub_10000ED7C();

    uint64_t v43 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v44 = v55;
    v43(v47, v55);
    v43((char *)v41, v44);
    sub_1000CF7D4();
    goto LABEL_11;
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_10000EFBC();
  v45();
  __break(1u);
}

uint64_t sub_1000CEED4()
{
  type metadata accessor for OSSignposter();
  sub_1000CF6C8();
  sub_10000EFBC();
  v1();
  type metadata accessor for Logger();
  sub_1000CF6C8();
  sub_10000EFBC();
  v2();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_1000CEF98()
{
  return type metadata accessor for TelemetrySignposter();
}

uint64_t type metadata accessor for TelemetrySignposter()
{
  uint64_t result = qword_10015DEC8;
  if (!qword_10015DEC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CEFE8()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

#error "1000CF104: call analysis failed (funcsize=20)"

void sub_1000CF118()
{
}

#error "1000CF160: call analysis failed (funcsize=14)"

void sub_1000CF174()
{
}

#error "1000CF1C0: call analysis failed (funcsize=15)"

#error "1000CF1F4: call analysis failed (funcsize=13)"

void sub_1000CF208()
{
}

void sub_1000CF22C()
{
}

void sub_1000CF250()
{
}

void sub_1000CF274()
{
}

void sub_1000CF298()
{
}

unint64_t sub_1000CF2BC()
{
  unint64_t result = qword_10015DF90;
  if (!qword_10015DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015DF90);
  }
  return result;
}

uint64_t sub_1000CF308(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t sub_1000CF318()
{
  unint64_t result = qword_10015DF98;
  if (!qword_10015DF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015DF98);
  }
  return result;
}

uint64_t sub_1000CF364(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003A70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CF3C8(uint64_t a1, uint64_t *a2)
{
  sub_100003A70(a2);
  sub_1000CF6C8();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_1000CF414(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CF45C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF47C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

char *sub_1000CF4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000CF4C8(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  *(unsigned char *)uint64_t v2 = v1;
  *(unsigned char *)(v2 + 1) = v1;
  *(_WORD *)(v2 + 2) = 2082;
  return UUIDIdentifier.uuidString.getter();
}

uint64_t sub_1000CF500(uint64_t a1)
{
  *(void *)(v4 - 96) = a1;
  *(unsigned char *)uint64_t v3 = v1;
  *(unsigned char *)(v3 + 1) = v2;
  *(_WORD *)(v3 + 2) = 2082;
  return UUIDIdentifier.uuidString.getter();
}

uint64_t sub_1000CF538(uint64_t a1, unint64_t a2)
{
  return sub_10001DF20(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000CF568(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000CF580()
{
  return v0;
}

uint64_t sub_1000CF598()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1);
}

uint64_t sub_1000CF5B4()
{
  *(void *)(v1 - 160) = v0;
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t sub_1000CF5E4()
{
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 152) = v0;
  return OSSignpostIntervalState.signpostID.getter();
}

char *sub_1000CF614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000CF638()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000CF650(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF670(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF690()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF6AC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF6DC()
{
  return swift_retain();
}

uint64_t sub_1000CF718(uint64_t a1, unint64_t a2)
{
  return sub_10001DF20(a1, a2, (uint64_t *)(v2 - 96));
}

void sub_1000CF730(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
  uint64_t v7 = *(NSObject **)(v5 - 200);
  uint64_t v8 = *(const char **)(v5 - 120);
  uint64_t v9 = *(const char **)(v5 - 152);
  _os_signpost_emit_with_name_impl(a1, v7, a3, a4, v8, v9, v4, 0x16u);
}

void sub_1000CF758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 136) = &a9;
}

uint64_t sub_1000CF774()
{
  return swift_retain();
}

void sub_1000CF79C()
{
  *(void *)(v6 - 184) = v5;
  *(void *)(v6 - 176) = v4;
  *(void *)(v6 - 168) = v0;
  *(void *)(v6 - 208) = v2;
  *(void *)(v6 - 200) = v1;
  *(void *)(v6 - 192) = v3;
}

uint64_t sub_1000CF7B8()
{
  return v0;
}

void sub_1000CF7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 136) = &a9;
}

uint64_t sub_1000CF7F0(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t sub_1000CF7FC()
{
  return swift_allocObject();
}

void sub_1000CF814(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
  uint64_t v7 = *(const char **)(v5 - 216);
  uint64_t v8 = *(NSObject **)(v5 - 208);
  uint64_t v9 = *(const char **)(v5 - 120);
  _os_signpost_emit_with_name_impl(a1, v8, a3, a4, v9, v7, v4, 0x20u);
}

uint64_t sub_1000CF838(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000CF848(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF86C()
{
  return swift_allocObject();
}

uint64_t sub_1000CF884()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000CF8A0()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000CF8BC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000CF8E0()
{
  return swift_slowAlloc();
}

void sub_1000CF908()
{
  *(void *)(v0 - 120) = v0 - 88;
}

uint64_t sub_1000CF914@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000CF958()
{
  *(void *)(v6 - 184) = v5;
  *(void *)(v6 - 176) = v0;
  *(void *)(v6 - 168) = v4;
  *(void *)(v6 - 208) = v3;
  *(void *)(v6 - 200) = v2;
  *(void *)(v6 - 192) = v1;
}

void sub_1000CF970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 - 144) = a4;
}

uint64_t sub_1000CF988()
{
  return OSSignposter.logHandle.getter();
}

char *sub_1000CF9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000CF9BC(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000CF9D0(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_1000CF9F0()
{
  *(_WORD *)(v1 + 22) = v0;
}

uint64_t sub_1000CFA04(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_1000CFA18()
{
  *(_WORD *)(v1 + 12) = v0;
  return swift_bridgeObjectRetain();
}

void sub_1000CFA38(uint64_t a1@<X8>)
{
  *(void *)(v1 - 280) = a1;
}

uint64_t sub_1000CFA44()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000CFA5C()
{
  return swift_slowAlloc();
}

uint64_t sub_1000CFA88()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000CFAB4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 112) = a2;
  *(void *)(v2 - 128) = a1;
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult();
}

void sub_1000CFAE0(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v1;
}

void sub_1000CFAEC(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = *(void *)(v1 + a1);
}

uint64_t sub_1000CFB00(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return sub_100057A20((uint64_t)sub_1000CFB1C);
}

uint64_t sub_1000CFB1C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1000D15D4();
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1000BA5FC();
    unint64_t v5 = sub_10001E648(v3, v4);
    if (v6) {
      uint64_t v7 = *(unsigned __int8 *)(*(void *)(v2 + 56) + v5);
    }
    else {
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_endAccess();
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v7);
}

uint64_t sub_1000CFBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_100057A20((uint64_t)sub_1000CFBFC);
}

uint64_t sub_1000CFBFC()
{
  uint64_t v1 = v0[9];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_1000BA5FC();
  String.append(_:)(v3);
  sub_1000D15D4();
  uint64_t v4 = sub_100014580(v9, v10, *(void *)(v1 + 32));
  uint64_t v6 = v5 & 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v4, v6);
}

uint64_t sub_1000CFCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return sub_100057A20((uint64_t)sub_1000CFCF4);
}

uint64_t sub_1000CFCF4()
{
  uint64_t v1 = (uint64_t *)(v0[9] + 40);
  sub_1000D15D4();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000BA5FC();
  uint64_t v5 = sub_100014370(v3, v4, v2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1000CF308(v5);
  if (v5) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v8 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v7;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000D0634((uint64_t)&unk_10015E090, v11, v10, v9);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000CFE9C(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000D1590;
  return v5();
}

uint64_t sub_1000CFF68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000CFFA0()
{
  sub_1000CFF68();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for TrialFrameworkMock()
{
  return self;
}

uint64_t sub_1000CFFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D00A0;
  return sub_1000CFB00(a1, a2);
}

uint64_t sub_1000D00A0(uint64_t a1)
{
  sub_100008660();
  uint64_t v3 = *v1;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t sub_1000D0170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000D0230;
  return sub_1000CFBDC(a1, a2, a3, a4);
}

uint64_t sub_1000D0230(uint64_t a1)
{
  sub_100008660();
  uint64_t v3 = *v1;
  sub_1000086D0();
  void *v4 = v3;
  uint64_t v6 = v5 & 1;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  return v7(a1, v6);
}

uint64_t sub_1000D0308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000D03C8;
  return sub_1000CFCD4(a1, a2, a3, a4);
}

uint64_t sub_1000D03C8()
{
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_1000D0490()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D04C8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D1590;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10015E088 + dword_10015E088);
  return v6(a1, v4);
}

uint64_t sub_1000D0580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05B0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000D07D8);
}

uint64_t sub_1000D0598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05B0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000D0A24);
}

uint64_t sub_1000D05B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000D15B8();
  a4(a1, a2, a3);
  void *v4 = v10;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D0634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  uint64_t *v4 = 0x8000000000000000;
  sub_1000D0B90(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  uint64_t *v4 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D06CC(long long *a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000D15B8();
  uint64_t v7 = sub_1000D0CD0(a1, a2, a3, v6);
  sub_1000D15F0(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D0740()
{
  sub_1000D1614();
  uint64_t v0 = sub_1000D1594();
  uint64_t v3 = sub_1000D0E14(v0, v1, v2);
  sub_1000D15F0(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D078C()
{
  sub_1000D1614();
  uint64_t v0 = sub_1000D1594();
  uint64_t v3 = sub_1000D1008(v0, v1, v2);
  sub_1000D15F0(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D07D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v10 = *v4;
  sub_10001E648(a2, a3);
  sub_1000D1600();
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_100003A70(&qword_10015D2F8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10001E648(a2, a3);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = (void *)*v5;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t v20 = v19
        + *(void *)(*(void *)(type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0) - 8)
                    + 72)
        * v14;
    return sub_10006FD2C(a1, v20);
  }
  else
  {
    sub_1000D1198(v14, a2, a3, a1, v18);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000D091C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = *v3;
  sub_10001E6C0(a2);
  sub_1000D1600();
  if (v11)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  sub_100003A70(&qword_10015B4B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8)) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_10001E6C0(a2);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    type metadata accessor for DaemonRequest();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v14;
LABEL_5:
  if (v13)
  {
    uint64_t v16 = *(void *)(*v4 + 56);
    uint64_t result = swift_release();
    *(void *)(v16 + 8 * v12) = a1;
  }
  else
  {
    unint64_t v18 = sub_1000BA5FC();
    sub_1000D1230(v18, v19, a1, v20);
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000D0A24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_10001E648(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100003A70(&qword_10015B848);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10001E648(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = type metadata accessor for Policy();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
    uint64_t v25 = v22;
    uint64_t v26 = v21 + *(void *)(v23 + 72) * v16;
    return v24(v26, a1, v25);
  }
  else
  {
    sub_1000D1274(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000D0B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  char v12 = (void *)*v5;
  unint64_t v13 = sub_10001E648(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_100003A70(&qword_10015E098);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10001E648(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 16 * v18);
    uint64_t result = swift_release();
    *uint64_t v23 = a1;
    v23[1] = a2;
  }
  else
  {
    sub_1000D1324(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000D0CD0(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_10001E648(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100003A70(&qword_10015E0B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10001E648(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7] + 40 * v16;
    sub_100008130(v21);
    return sub_10000831C(a1, v21);
  }
  else
  {
    sub_1000D1370(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000D0E14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  char v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  sub_10001E72C(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_100003A70(&qword_10015E0C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v18)) {
    goto LABEL_5;
  }
  sub_10001E72C(a2);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v4;
  if (v20)
  {
    uint64_t v24 = v23[7];
    uint64_t v25 = type metadata accessor for RequestPriority();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40);
    uint64_t v28 = v25;
    uint64_t v29 = v24 + *(void *)(v26 + 72) * v19;
    return v27(v29, a1, v28);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return sub_1000D13E0(v19, (uint64_t)v12, a1, v23);
  }
}

uint64_t sub_1000D1008(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  char v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v14 = sub_10001E7EC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_100003A70(&qword_10015E0B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v18)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_10001E7EC(a2);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v4;
  if (v20)
  {
    uint64_t v24 = v23[7];
    uint64_t result = swift_release();
    *(void *)(v24 + 8 * v19) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return sub_1000D14D8(v19, (uint64_t)v12, a1, v23);
  }
  return result;
}

uint64_t sub_1000D1198(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
  uint64_t result = sub_10006F974(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1000D1230(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_1000D1274(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Policy();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1000D1324(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_1000D1370(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000831C(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1000D13E0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_100003A70(&qword_10015B408);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for RequestPriority();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1000D14D8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1000D1594()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

void sub_1000D15B8()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1000D15D4()
{
  return swift_beginAccess();
}

uint64_t sub_1000D15F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_1000D1614()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1000D1634()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E0C8);
  sub_100003B18(v0, (uint64_t)qword_10015E0C8);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000D16A0()
{
  sub_1000086E0();
  v0[4] = v1;
  uint64_t v2 = type metadata accessor for FilePath();
  v0[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[6] = v3;
  v0[7] = *(void *)(v3 + 64);
  v0[8] = swift_task_alloc();
  sub_100003A70(&qword_10015B208);
  v0[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000D1794, 0, 0);
}

uint64_t sub_1000D1794()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = type metadata accessor for TaskPriority();
  sub_100006960(v1, 1, 1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  uint64_t v9 = sub_10000FA44(v1, (uint64_t)&unk_10015E188, v8);
  v0[10] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[11] = v10;
  uint64_t v11 = sub_100003A70(&qword_10015B468);
  *uint64_t v10 = v0;
  v10[1] = sub_1000D1920;
  return Task.value.getter(v0 + 2, v9, &type metadata for Data, v11, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000D1920()
{
  sub_1000086E0();
  sub_100008660();
  *(void *)(v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D1A98;
  }
  else {
    uint64_t v2 = sub_1000D1A0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D1A0C()
{
  swift_release();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1000D1A98()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000D1B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  uint64_t v5 = type metadata accessor for POSIXError();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for FilePath();
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  sub_100003A70(&qword_10015C9D8);
  v4[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v4[16] = v8;
  v4[17] = *(void *)(v8 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_1000D1D1C, 0, 0);
}

uint64_t sub_1000D1D1C()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 96) + 16);
  v7(v3, *(void *)(v0 + 32), *(void *)(v0 + 88));
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for URL.DirectoryHint.notDirectory(_:), v6);
  sub_1000D2164(v3, v4, v1);
  if (sub_100006AE8(v1, 1, v2) == 1)
  {
    sub_1000D26C8(*(void *)(v0 + 120));
    if (qword_10015B0D0 != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003B18(v11, (uint64_t)qword_10015E0C8);
    v7(v8, v10, v9);
    BOOL v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)BOOL v14 = 136315138;
      sub_1000D2A14(&qword_10015BA50, (void (*)(uint64_t))&type metadata accessor for FilePath);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = sub_10001DF20(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = sub_1000D2AC4();
      v18(v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to open %s: path contains illegal UTF-8 sequences", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v22 = sub_1000D2AC4();
      v23(v22);
    }

    uint64_t v25 = *(void *)(v0 + 48);
    uint64_t v24 = *(void *)(v0 + 56);
    uint64_t v26 = *(void *)(v0 + 40);
    *(_DWORD *)(v0 + 152) = 22;
    sub_1000D2728((uint64_t)_swiftEmptyArrayStorage);
    sub_1000D2A14(&qword_10015E190, (void (*)(uint64_t))&type metadata accessor for POSIXError);
    _BridgedStoredNSError.init(_:userInfo:)();
    POSIXError._nsError.getter();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
    uint64_t v19 = Data.init(contentsOf:options:)();
    uint64_t v21 = v20;
    uint64_t v28 = v19;
    uint64_t v29 = *(uint64_t **)(v0 + 24);
    uint64_t v30 = sub_1000D2AD8();
    v31(v30);
    *uint64_t v29 = v28;
    v29[1] = v21;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
  }
  return v32();
}

uint64_t sub_1000D2164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v5 = sub_100003A70(&qword_10015C9D8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  os_log_type_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FilePath();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  uint64_t v18 = String.init(validating:)();
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v29[1] = v18;
    v20(v13, a2, v9);
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = (uint64_t)v8;
    uint64_t v23 = v31;
    uint64_t v30 = a1;
    uint64_t v24 = v21;
    sub_100006960(v22, 1, 1, v21);
    URL.init(filePath:directoryHint:relativeTo:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v30, v14);
    uint64_t v25 = v23;
    uint64_t v26 = 0;
    uint64_t v27 = v24;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v25 = v31;
    uint64_t v26 = 1;
  }
  return sub_100006960(v25, v26, 1, v27);
}

uint64_t sub_1000D2414()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for FilesystemProvider()
{
  return self;
}

uint64_t sub_1000D2448()
{
  uint64_t v1 = type metadata accessor for FilePath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D2514(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FilePath() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000D2600;
  return sub_1000D1B08(a1, v5, v6, v7);
}

uint64_t sub_1000D2600()
{
  sub_1000086E0();
  sub_100008660();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000D26C8(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015C9D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D2728(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003A70(&qword_10015E198);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000D2A5C(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000D2854(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10006FA28(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000D2854(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000D28CC(a1, a2, v4);
}

unint64_t sub_1000D28CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1000D2A14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D2A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E1A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D2AC4()
{
  return v0;
}

uint64_t sub_1000D2AD8()
{
  return v0;
}

uint64_t sub_1000D2AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1000D2B10, 0, 0);
}

uint64_t sub_1000D2B10()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = sub_1000D2C08;
  uint64_t v5 = *(void *)(v0 + 16);
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD00000000000001FLL, 0x800000010012C450, sub_1000D6738, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_1000D2C08()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_1000D2CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v25[0] = a2;
  uint64_t v7 = sub_100003A70(&qword_10015B9D0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_1000D67EC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E9618;
  aBlock[3] = &unk_100154840;
  BOOL v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = _swiftEmptyArrayStorage;
  sub_1000D6C90((unint64_t *)&qword_10015F150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003A70(&qword_10015C0A0);
  sub_10000841C(&qword_10015F160, &qword_10015C0A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release();
}

uint64_t sub_1000D3058(void (*a1)(void))
{
  return CheckedContinuation.resume(returning:)();
}

unint64_t sub_1000D309C(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015E358);
  __chkstk_darwin(v2, v3);
  unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  sub_10000841C(&qword_10015E3D0, &qword_10015E358);
  dispatch thunk of Sequence.makeIterator()();
  *(void *)&long long v6 = 67109120;
  long long v22 = v6;
  while (1)
  {
    unint64_t result = v23;
    int64_t v8 = v26;
    if (v27)
    {
      unint64_t v9 = (v27 - 1) & v27;
      unint64_t v10 = __clz(__rbit64(v27)) | (v26 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    int64_t v12 = (unint64_t)(v25 + 64) >> 6;
    if (v11 >= v12) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v11);
    int64_t v14 = v26 + 1;
    if (!v13)
    {
      int64_t v14 = v26 + 2;
      if (v26 + 2 >= v12) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v26 + 3;
        if (v26 + 3 >= v12) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v26 + 4;
          if (v26 + 4 >= v12) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v24 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v26 + 5;
            if (v26 + 5 >= v12) {
              goto LABEL_29;
            }
            unint64_t v13 = *(void *)(v24 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v26 + 6;
              while (v15 < v12)
              {
                unint64_t v13 = *(void *)(v24 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_19;
                }
              }
LABEL_29:
              sub_10002EAF0();
              return v28;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v8 = v14;
LABEL_20:
    uint64_t v16 = *(unsigned int *)(*(void *)(v23 + 48) + 4 * v10);
    uint64_t v26 = v8;
    unint64_t v27 = v9;
    if ([self identifierWithPid:v16])
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      if (qword_10015B0D8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100003B18(v17, (uint64_t)qword_10015E1A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = v22;
        *(_DWORD *)(v20 + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Could not get RBSProcessIdentifier for %d", (uint8_t *)v20, 8u);
        swift_slowDealloc();
      }
    }
  }
  __break(1u);
  return result;
}

id sub_1000D3400(uint64_t a1)
{
  id v5 = 0;
  id v1 = [(id)swift_getObjCClassFromMetadata() handleForIdentifier:a1 error:&v5];
  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1000D34D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E1A8);
  sub_100003B18(v0, (uint64_t)qword_10015E1A8);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

void sub_1000D3548()
{
  id v0 = [objc_allocWithZone((Class)RBSProcessStateDescriptor) init];
  [v0 setValues:1];
  sub_1000D65F4((uint64_t)&off_100152E08, v0);
  qword_100160088 = (uint64_t)v0;
}

uint64_t sub_1000D35A8()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize();
  CountedSet.init(arrayLiteral:)();
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_queue;
  sub_1000695A0(0, &qword_10015E418);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  sub_10000F0D0();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for OS_dispatch_queue_concurrent.Attributes();
  sub_10002FB84();
  __chkstk_darwin(v6, v7);
  sub_10000F0D0();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000D6C90(&qword_10015E420, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_concurrent.Attributes);
  sub_100003A70(&qword_10015E428);
  sub_10000841C(&qword_10015E430, &qword_10015E428);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_10000ED60();
  __chkstk_darwin(v8, v9);
  sub_10000F0D0();
  (*(void (**)(uint64_t, void))(v12 + 104))(v11 - v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)(v0 + v2) = OS_dispatch_queue_concurrent.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider_workQueueState;
  type metadata accessor for WorkQueueState();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v1 + v13) = v14;
  uint64_t v15 = v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream;
  uint64_t v16 = sub_100003A70(&qword_10015C040);
  sub_100006960(v15, 1, 1, v16);
  id v17 = [objc_allocWithZone((Class)RBSProcessMonitor) init:aBlock[0]];
  *(void *)(v1 + 112) = v17;
  aBlock[4] = sub_1000D3988;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D398C;
  aBlock[3] = &unk_1001549F8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  [v17 updateConfiguration:v18];
  _Block_release(v18);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) == 0) {
    return v1;
  }
  __break(1u);
  return result;
}

id sub_1000D3900(id a1)
{
  if (qword_10015B0E0 != -1) {
    swift_once();
  }
  [a1 setStateDescriptor:qword_100160088];

  return [a1 setServiceClass:33];
}

uint64_t sub_1000D398C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t sub_1000D39E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100003A70(&qword_10015E3F8);
  sub_10000ED60();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_10000F0D0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_100003A70(&qword_10015E400);
  uint64_t v12 = sub_10002FDD0(v11);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v17);
  os_log_type_t v19 = &v23[-v18];
  uint64_t v20 = v1 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream;
  swift_beginAccess();
  sub_1000D6A00(v20, (uint64_t)v19);
  uint64_t v21 = sub_100003A70(&qword_10015C040);
  if (sub_100006AE8((uint64_t)v19, 1, v21) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, v19, v21);
  }
  sub_1000D6A68((uint64_t)v19);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v16, a1, v21);
  sub_100006960((uint64_t)v16, 0, 1, v21);
  swift_beginAccess();
  sub_1000D6AD0((uint64_t)v16, v20);
  return swift_endAccess();
}

uint64_t sub_1000D3C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E408);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = *(void **)(a2 + 112);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1000D6B3C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1000D6D00;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D398C;
  aBlock[3] = &unk_100154980;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 updateConfiguration:v12];
  _Block_release(v12);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

void sub_1000D3E50(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E408);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000D6C24;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D41E4;
  aBlock[3] = &unk_1001549D0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a1 setUpdateHandler:v10];
  _Block_release(v10);
}

uint64_t sub_1000D3FF8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_100003A70(&qword_10015E410);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a3) = sub_1000D4120([a3 state]);
  v11[2] = [a2 pid];
  char v12 = (char)a3;
  sub_100003A70(&qword_10015E408);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000D4120(void *a1)
{
  if (!a1) {
    return 3;
  }
  id v1 = a1;
  uint64_t v2 = sub_1000D64DC(v1);
  if (v2)
  {
    sub_100044CFC(0xD00000000000001FLL, 0x800000010012AD90, v2);
    char v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  unsigned int v6 = [v1 taskState];

  if (v4) {
    return 0;
  }
  if (v6 <= 4) {
    return (0x102010304uLL >> (8 * v6));
  }
  return 4;
}

void sub_1000D41E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, id, id))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, v8, v9);
  swift_release();
}

uint64_t sub_1000D4284()
{
  sub_1000086E0();
  *(void *)(v1 + 40) = v0;
  *(_DWORD *)(v1 + 88) = v2;
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v3);
  *(void *)(v1 + 48) = sub_10002FE18();
  uint64_t v4 = sub_100003A70(&qword_10015E358);
  *(void *)(v1 + 56) = v4;
  sub_10002FA4C(v4);
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 72) = sub_10002FE18();
  return _swift_task_switch(sub_1000D4340, v0, 0);
}

uint64_t sub_1000D4340()
{
  sub_10002FC60();
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  int v5 = *(_DWORD *)(v0 + 88);
  *(_DWORD *)(v0 + 80) = v5;
  uint64_t v6 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  swift_beginAccess();
  CountedSet.add(_:)();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  *(_DWORD *)(v0 + 84) = v5;
  uint64_t v7 = CountedSet.count(of:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v9 = type metadata accessor for TaskPriority();
    sub_100006960(v8, 1, 1, v9);
    sub_1000D648C();
    uint64_t v10 = swift_allocObject();
    sub_1000D6D5C(v10);
    sub_100003730(v8, (uint64_t)&unk_10015E3F0, v3);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v11();
}

uint64_t sub_1000D44D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  *(_DWORD *)(v5 + 36) = a4;
  return _swift_task_switch(sub_1000D44F4, a5, 0);
}

uint64_t sub_1000D44F4()
{
  sub_10002FC60();
  if (qword_10015B0D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)sub_100057A88(v1, (uint64_t)qword_10015E1A8);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (float *)sub_100057C20();
    sub_1000D6D34(v4, 1.5047e-36);
    sub_1000D6D14((void *)&_mh_execute_header, v5, v6, "Started monitoring: %d");
    sub_10000ED7C();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100058D34;
  return sub_1000D4B04();
}

uint64_t sub_1000D4630()
{
  sub_1000086E0();
  *(void *)(v1 + 64) = v0;
  *(_DWORD *)(v1 + 120) = v2;
  uint64_t v3 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v3);
  *(void *)(v1 + 72) = sub_10002FE18();
  uint64_t v4 = sub_100003A70(&qword_10015E358);
  *(void *)(v1 + 80) = v4;
  sub_10002FA4C(v4);
  *(void *)(v1 + 88) = v5;
  *(void *)(v1 + 96) = sub_10002FE18();
  return _swift_task_switch(sub_1000D46EC, v0, 0);
}

uint64_t sub_1000D46EC()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  int v4 = *(_DWORD *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 64) + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  swift_beginAccess();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v5, v3);
  *(_DWORD *)(v0 + 104) = v4;
  uint64_t v7 = CountedSet.count(of:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  if (v7)
  {
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v24 = v6;
    int v11 = *(_DWORD *)(v0 + 120);
    *(_DWORD *)(v0 + 112) = v11;
    swift_beginAccess();
    CountedSet.remove(_:)();
    swift_endAccess();
    v24(v9, v5, v10);
    *(_DWORD *)(v0 + 116) = v11;
    uint64_t v12 = CountedSet.count(of:)();
    v8(v9, v10);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v0 + 72);
      uint64_t v14 = type metadata accessor for TaskPriority();
      sub_100006960(v13, 1, 1, v14);
      sub_1000D648C();
      uint64_t v15 = swift_allocObject();
      sub_1000D6D5C(v15);
      sub_100003730(v13, (uint64_t)&unk_10015E3E0, v9);
      swift_release();
    }
  }
  else
  {
    if (qword_10015B0D8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = (void *)sub_100057A88(v16, (uint64_t)qword_10015E1A8);
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (sub_1000443B0(v18))
    {
      int v19 = *(_DWORD *)(v0 + 120);
      *(_DWORD *)sub_100057C20() = 67109120;
      *(_DWORD *)(v0 + 108) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000D6D98((void *)&_mh_execute_header, v20, v21, "Cannot stop monitoring pid that is not being monitored: %d");
      sub_10000ED7C();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v22();
}

uint64_t sub_1000D49A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  *(_DWORD *)(v5 + 36) = a4;
  return _swift_task_switch(sub_1000D49C8, a5, 0);
}

uint64_t sub_1000D49C8()
{
  sub_10002FC60();
  if (qword_10015B0D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)sub_100057A88(v1, (uint64_t)qword_10015E1A8);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    int v4 = (float *)sub_100057C20();
    sub_1000D6D34(v4, 1.5047e-36);
    sub_1000D6D14((void *)&_mh_execute_header, v5, v6, "No longer monitoring: %d");
    sub_10000ED7C();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000D6CDC;
  return sub_1000D4B04();
}

uint64_t sub_1000D4B04()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_1000D4B20, v0);
}

uint64_t sub_1000D4B20()
{
  sub_1000086E0();
  os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10015B890 + dword_10015B890);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D4BE4;
  return v3();
}

uint64_t sub_1000D4BE4()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000D4CCC, v2, 0);
}

uint64_t sub_1000D4CCC()
{
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000D4CE4(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v4 = sub_100003A70(&qword_10015E358);
  v2[6] = v4;
  v2[7] = *(void *)(v4 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000D4DAC, a2, 0);
}

uint64_t sub_1000D4DAC()
{
  sub_10002FC60();
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v4 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  sub_1000D309C(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000695A0(0, &qword_10015E360);
  sub_1000179C0();
  id v6 = sub_1000D50B0();
  v0[9] = v6;
  uint64_t v7 = *(void **)(v4 + 112);
  uint64_t v8 = swift_allocObject();
  v0[10] = v8;
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015E368 + dword_10015E368);
  id v9 = v7;
  id v10 = v6;
  int v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *int v11 = v0;
  v11[1] = sub_1000D4F54;
  return v13((uint64_t)v13, (uint64_t)sub_1000D6730, v8);
}

uint64_t sub_1000D4F54()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000D5050, v2, 0);
}

uint64_t sub_1000D5050()
{
  sub_1000086E0();

  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

id sub_1000D50B0()
{
  sub_1000695A0(0, (unint64_t *)&qword_10015B8C0);
  sub_10002EE50();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() predicateMatchingIdentifiers:isa];

  return v1;
}

uint64_t sub_1000D5140(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000D684C;
  *(void *)(v5 + 24) = v4;
  v9[4] = sub_1000D6858;
  v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_1000D398C;
  v9[3] = &unk_1001548B8;
  uint64_t v6 = _Block_copy(v9);
  id v7 = a2;
  swift_retain();
  swift_release();
  [a1 updateConfiguration:v6];
  _Block_release(v6);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a1) {
    __break(1u);
  }
  return result;
}

void sub_1000D5298(void *a1, void *a2)
{
  sub_100003A70(&qword_10015CFC8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100129310;
  *(void *)(v4 + 32) = a2;
  specialized Array._endMutation()();
  sub_1000695A0(0, &qword_10015E360);
  id v5 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a1 setPredicates:isa];

  if (qword_10015B0D8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003B18(v7, (uint64_t)qword_10015E1A8);
  id v13 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    int v11 = (void *)swift_slowAlloc();
    *(_DWORD *)id v10 = 138412290;
    id v12 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v11 = v13;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "New Predicate: %@", v10, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1000D54F4(int a1)
{
  *(void *)(v2 + 24) = v1;
  *(_DWORD *)(v2 + 84) = a1;
  return sub_10000EFE0((uint64_t)sub_1000D5514, 0);
}

uint64_t sub_1000D5514()
{
  sub_10002FC60();
  id v1 = [self identifierWithPid:*(unsigned int *)(v0 + 84)];
  *(void *)(v0 + 32) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = swift_allocObject();
    *(void *)(v0 + 40) = v3;
    *(void *)(v3 + 16) = v2;
    uint64_t v14 = (uint64_t (*)(void (*)(uint64_t *@<X8>), uint64_t))((char *)&dword_10015ED38
                                                                               + dword_10015ED38);
    id v4 = v2;
    id v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    *id v5 = v0;
    v5[1] = sub_1000D5734;
    return v14(sub_1000D65D8, v3);
  }
  else
  {
    if (qword_10015B0D8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)sub_100057A88(v7, (uint64_t)qword_10015E1A8);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (sub_1000443B0(v9))
    {
      int v10 = *(_DWORD *)(v0 + 84);
      *(_DWORD *)sub_100057C20() = 67109120;
      *(_DWORD *)(v0 + 72) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000D6D98((void *)&_mh_execute_header, v11, v12, "Failed to get RBSProcessIdentifier for %d. Interpreting as process terminated");
      sub_10000ED7C();
    }

    id v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v13(3);
  }
}

uint64_t sub_1000D5734()
{
  sub_1000086E0();
  sub_100008660();
  *(void *)(v2 + 56) = v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000D5A0C;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000D5828;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D5828()
{
  sub_10002FC60();
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    sub_10011671C(0, (v1 & 0xC000000000000001) == 0);
    if ((v1 & 0xC000000000000001) != 0) {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v3 = *(id *)(*(void *)(v0 + 56) + 32);
    }
    id v4 = *(void **)(v0 + 32);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000D4120(v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_10015B0D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    uint64_t v7 = (void *)sub_100057A88(v6, (uint64_t)qword_10015E1A8);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = sub_1000443B0(v8);
    id v4 = *(void **)(v0 + 32);
    if (v9)
    {
      int v10 = *(_DWORD *)(v0 + 84);
      *(_DWORD *)sub_100057C20() = 67109120;
      *(_DWORD *)(v0 + 80) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000D6D14((void *)&_mh_execute_header, v11, v12, "Failed to get RBSProcessHandle for %d. Interpreting as process terminated");
      sub_10000ED7C();

      uint64_t v5 = 3;
    }
    else
    {

      uint64_t v5 = 3;
      id v4 = v7;
    }
  }

  id v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v5);
}

uint64_t sub_1000D5A0C()
{
  swift_release();
  if (qword_10015B0D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015E1A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(NSObject **)(v0 + 32);
  if (v4)
  {
    int v6 = *(_DWORD *)(v0 + 84);
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v8 = (void *)sub_100057C20();
    *(_DWORD *)uint64_t v7 = 67109378;
    *(_DWORD *)(v0 + 76) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get RBSProcessHandle for %d: %@. Interpreting as process terminated", (uint8_t *)v7, 0x12u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v5 = v2;
  }
  swift_errorRelease();

  int v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v10(3);
}

void sub_1000D5C28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4 = self;
  id v5 = [self predicateMatchingIdentifier:a1];
  if (qword_10015B0E0 != -1) {
    swift_once();
  }
  id v11 = 0;
  id v6 = [v4 statesForPredicate:v5 withDescriptor:qword_100160088 error:&v11];

  id v7 = v11;
  if (v6)
  {
    sub_1000695A0(0, &qword_10015E340);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v7;

    *a2 = v8;
  }
  else
  {
    id v10 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1000D5D94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = a1;
  id v4 = [self identifierWithPid:a1];
  if (v4)
  {
    id v5 = v4;
    sub_1000695A0(0, &qword_10015CFC0);
    id v6 = v5;
    id v7 = sub_1000D3400((uint64_t)v6);
    sub_1000D60CC(v7, (uint64_t)&v17);
    uint64_t v12 = v17;
    long long v15 = v19;
    long long v16 = v18;

    long long v14 = v15;
    long long v13 = v16;
  }
  else
  {
    if (qword_10015B0D8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    id v9 = sub_100057A88(v8, (uint64_t)qword_10015E1A8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)sub_100057C20();
      *(_DWORD *)id v11 = 67109120;
      LODWORD(v17) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to get RBSProcessIdentifier for %d.", v11, 8u);
      sub_10000ED7C();
    }

    uint64_t v12 = 0;
    long long v13 = xmmword_100129DF0;
    long long v14 = 0uLL;
  }
  *(void *)a2 = v12;
  *(_OWORD *)(a2 + 8) = v13;
  *(_OWORD *)(a2 + 24) = v14;
}

void sub_1000D60CC(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = [a1 isDaemon];
  uint64_t v5 = sub_1000D653C(a1);
  uint64_t v7 = v6;
  id v8 = [a1 bundle];
  id v9 = v8;
  if (!v8)
  {

LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  id v10 = [v8 identifier];

  if (!v10)
  {

    id v9 = 0;
    goto LABEL_6;
  }
  id v9 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

LABEL_7:
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v12;
}

uint64_t sub_1000D61A8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider__monitoredPids;
  sub_100003A70(&qword_10015E358);
  sub_10002FB84();
  (*(void (**)(uint64_t))(v2 + 8))(v1);

  swift_release();
  sub_1000D6A68(v0 + OBJC_IVAR____TtC13modelmanagerd20RunningBoardProvider____lazy_storage___processEventStream);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000D6248()
{
  sub_1000D61A8();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000D6274()
{
  return type metadata accessor for RunningBoardProvider();
}

uint64_t type metadata accessor for RunningBoardProvider()
{
  uint64_t result = qword_10015E1F0;
  if (!qword_10015E1F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000D62C4()
{
  sub_1000D63B4();
  if (v0 <= 0x3F)
  {
    sub_1000D6408();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000D63B4()
{
  if (!qword_10015E220)
  {
    unint64_t v0 = type metadata accessor for CountedSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015E220);
    }
  }
}

void sub_1000D6408()
{
  if (!qword_10015E228)
  {
    sub_100006A5C(&qword_10015C040);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015E228);
    }
  }
}

unint64_t sub_1000D6464(uint64_t a1)
{
  unint64_t result = sub_1000D648C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D648C()
{
  unint64_t result = qword_10015B898;
  if (!qword_10015B898)
  {
    type metadata accessor for RunningBoardProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015B898);
  }
  return result;
}

uint64_t sub_1000D64DC(void *a1)
{
  id v1 = [a1 endowmentNamespaces];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000D653C(void *a1)
{
  id v1 = [a1 daemonJobLabel];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000D65A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000D65D8(uint64_t *a1@<X8>)
{
  sub_1000D5C28(*(void *)(v1 + 16), a1);
}

void sub_1000D65F4(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setEndowmentNamespaces:isa];
}

uint64_t sub_1000D6660()
{
  sub_1000086E0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  unsigned __int8 v4 = (void *)sub_1000086AC(v3);
  void *v4 = v5;
  v4[1] = sub_10000ED54;
  return sub_1000D4CE4(v2, v0);
}

uint64_t sub_1000D66F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D6730()
{
  return sub_1000D5140(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000D6738(uint64_t a1)
{
  return sub_1000D2CE4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000D6744()
{
  uint64_t v1 = sub_100003A70(&qword_10015B9D0);
  sub_10000ED60();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_1000D67EC()
{
  uint64_t v1 = sub_100003A70(&qword_10015B9D0);
  sub_1000301E0(v1);
  uint64_t v2 = *(void (**)(void))(v0 + 16);

  return sub_1000D3058(v2);
}

uint64_t sub_1000D6834(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D6844()
{
  return swift_release();
}

void sub_1000D684C(void *a1)
{
  sub_1000D5298(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000D6858()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000D6884()
{
  sub_1000D6D84();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_1000D49A4(v3, v4, v5, v6, v7);
}

uint64_t sub_1000D6924()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D6964()
{
  sub_1000D6D84();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  uint64_t v3 = sub_10000EF88();
  return sub_1000D44D0(v3, v4, v5, v6, v7);
}

uint64_t sub_1000D6A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6A68(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015E400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D6AC8(uint64_t a1)
{
  return sub_1000D3C30(a1, v1);
}

uint64_t sub_1000D6AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000D6B3C(void *a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015E408);
  sub_1000301E0(v3);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_1000D3E50(a1, v5);
}

uint64_t sub_1000D6B98()
{
  sub_100003A70(&qword_10015E408);
  sub_10002FB84();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000D6C24(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = sub_100003A70(&qword_10015E408);
  sub_1000301E0(v6);

  return sub_1000D3FF8(a1, a2, a3);
}

uint64_t sub_1000D6C90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D6D04()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D6D14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 8u);
}

uint64_t sub_1000D6D34(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v2 - 4) = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D6D5C(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v1;
  return swift_retain_n();
}

void sub_1000D6D98(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 8u);
}

ValueMetadata *type metadata accessor for AssetTransitionDelayTrial()
{
  return &type metadata for AssetTransitionDelayTrial;
}

uint64_t sub_1000D6DC8()
{
  uint64_t v0 = sub_100003A70(&qword_10015B228);
  sub_100003AB4(v0, qword_1001600A8);
  sub_100003B18(v0, (uint64_t)qword_1001600A8);
  type metadata accessor for Assertion();
  return UUIDIdentifier.init()();
}

uint64_t sub_1000D6E2C()
{
  if (qword_10015B0E8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_100003A70(&qword_10015B228);

  return sub_100003B18(v0, (uint64_t)qword_1001600A8);
}

uint64_t sub_1000D6E94(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  type metadata accessor for RequestPriority();
  v2[5] = swift_task_alloc();
  type metadata accessor for AssetPolicy();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000D6F50, 0, 0);
}

uint64_t sub_1000D6F50()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000853C(v1, v2);
  uint64_t v6 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = sub_1000D7088;
  return v6(0xD00000000000001CLL, 0x800000010012C4F0, 0xD00000000000001BLL, 0x800000010012C510, v2, v3);
}

uint64_t sub_1000D7088()
{
  sub_100008660();
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 72) = v2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D7168, 0, 0);
}

uint64_t sub_1000D7168()
{
  if (*(unsigned char *)(v0 + 72))
  {
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v2 = type metadata accessor for Policy();
    uint64_t v3 = v5;
  }
  else
  {
    if ((*(void *)(v0 + 64) & 0x8000000000000000) == 0)
    {
      uint64_t v1 = *(void *)(v0 + 24);
      default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
      default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
      default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
      default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
      Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
      uint64_t v2 = type metadata accessor for Policy();
      uint64_t v3 = v1;
      uint64_t v4 = 0;
      goto LABEL_9;
    }
    uint64_t v6 = type metadata accessor for Logger();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = swift_task_alloc();
    generalLogger.getter();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(v0 + 64);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134217984;
      *(void *)(v0 + 16) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Illegal trial asset transition delay: %lld", v12, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v13 = *(void *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
    swift_task_dealloc();
    uint64_t v2 = type metadata accessor for Policy();
    uint64_t v3 = v13;
  }
  uint64_t v4 = 1;
LABEL_9:
  sub_100006960(v3, v4, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

unint64_t sub_1000D73B0()
{
  return 0xD000000000000019;
}

unint64_t sub_1000D73CC()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000D73E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000D6E2C();
  uint64_t v3 = sub_100003A70(&qword_10015B228);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

uint64_t sub_1000D745C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D74FC;
  return sub_1000D6E94(a1, a2);
}

uint64_t sub_1000D74FC()
{
  sub_100008660();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000D75CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E448);
  uint64_t v1 = sub_100003B18(v0, (uint64_t)qword_10015E448);
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  generalLogger.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, v5, v0);
}

uint64_t sub_1000D76B0(int a1)
{
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v2 + 16) = 1024;
  bzero((void *)(v2 + 32), 0x400uLL);
  if (proc_pidpath(a1, (void *)(v2 + 32), 0x400u) >= 1) {
    return sub_1000D7738(v2);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000D7738(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
    {
LABEL_6:
      uint64_t v7 = static String._fromUTF8Repairing(_:)();
      swift_bridgeObjectRelease();
      return v7;
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++)) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D77BC(int a1)
{
  *(void *)(v2 + 296) = v1;
  *(_DWORD *)(v2 + 336) = a1;
  return sub_10000EFE0((uint64_t)sub_1000D77DC, v1);
}

uint64_t sub_1000D77DC()
{
  uint64_t v2 = *(unsigned int *)(v0 + 336);
  sub_10000853C((void *)(*(void *)(v0 + 296) + 112), *(void *)(*(void *)(v0 + 296) + 136));
  sub_1000D5D94(v2, v0 + 56);
  sub_1000D8DF0(v0 + 56, v0 + 96, &qword_10015E558);
  if (*(void *)(v0 + 112) == 1)
  {
    if (qword_10015B0F0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)sub_100057A88(v3, (uint64_t)qword_10015E448);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!sub_1000579B0(v5)) {
      goto LABEL_8;
    }
    uint64_t v6 = (float *)sub_1000D8EC8();
    sub_1000D8EA0(v6, 1.5047e-36);
    uint64_t v9 = "Failed to check assertion allowed: failed to get process handle for %d";
    goto LABEL_6;
  }
  long long v12 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 152) = v12;
  *(void *)(v0 + 168) = *(void *)(v0 + 128);
  if ((*(unsigned char *)(v0 + 136) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v0 + 168);
    if (v13)
    {
      uint64_t v14 = v0 + 232;
      long long v15 = (uint64_t *)(v0 + 160);
      uint64_t v16 = 144;
      goto LABEL_17;
    }
    sub_1000D8DF0(v0 + 144, v0 + 264, &qword_10015DC30);
    sub_1000B6B54(v0 + 264);
    id v19 = (id)MobileGestalt_get_current_device();
    if (!v19)
    {
      __break(1u);
      return _swift_task_switch(v19, v20, v21);
    }
    unint64_t v23 = v19;
    uint64_t v24 = (uint64_t)(id)MobileGestalt_copy_releaseType_obj();

    if (!v24) {
      goto LABEL_27;
    }
    uint64_t v25 = sub_1000D9178();
    uint64_t v27 = v26;

    if (v25 == v2 && v27 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = sub_1000D8FCC();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
LABEL_27:
        if (qword_10015B0F0 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        uint64_t v4 = (void *)sub_100057A88(v29, (uint64_t)qword_10015E448);
        os_log_type_t v30 = static os_log_type_t.default.getter();
        if (!sub_1000579B0(v30)) {
          goto LABEL_8;
        }
        uint64_t v31 = (float *)sub_1000D8EC8();
        sub_1000D8EA0(v31, 1.5047e-36);
        uint64_t v9 = "Not an internal build, assertion from process %d denied";
        goto LABEL_6;
      }
    }
    sub_1000D76B0(*(_DWORD *)(v0 + 336));
    if (!v32)
    {
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      uint64_t v4 = (void *)sub_100057A88(v44, (uint64_t)qword_10015E448);
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (!sub_1000579B0(v45)) {
        goto LABEL_8;
      }
      uint64_t v46 = (float *)sub_1000D8EC8();
      sub_1000D8EA0(v46, 1.5047e-36);
      uint64_t v9 = "cannot get executable Path assertion from process %d denied";
LABEL_6:
      sub_1000D9254((void *)&_mh_execute_header, v7, v8, v9);
      goto LABEL_7;
    }
    if (sub_1000D8EE8()) {
      goto LABEL_38;
    }
    if (sub_1000D8F44()) {
      goto LABEL_38;
    }
    String.lowercased()();
    uint64_t v33 = sub_1000D9018();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_38;
    }
    sub_1000D90CC();
    *(void *)(v33 + 256) = v1;
    *(void *)(v33 + 264) = 0x800000010012C570;
    unint64_t v34 = sub_1000D8E54();
    uint64_t v35 = sub_1000D9130(v34, (uint64_t)&type metadata for String);
    if ((v35 & 1) != 0
      || (*(void *)(v0 + 280) = v25,
          *(void *)(v0 + 288) = v24,
          *(void *)(v0 + 16) = v1 + 3,
          *(void *)(v0 + 24) = 0x800000010012C590,
          (sub_1000D9154(v35, (uint64_t)&type metadata for String) & 1) != 0))
    {
LABEL_38:
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_1000D8FA0(v36, (uint64_t)qword_10015E448);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        sub_100030314();
        sub_10002FF90();
        uint64_t v39 = sub_1000D919C(4.8149e-34);
        uint64_t v41 = sub_1000D8F28(v39, v40);
        sub_1000D8F7C(v41);
        sub_1000D90B4();
        sub_1000D9234((void *)&_mh_execute_header, v42, v43, "allowed executablePath %s");
        sub_1000D9044();
        sub_10000ED7C();
        sub_10000ED7C();

        goto LABEL_9;
      }
      goto LABEL_50;
    }
    *(void *)(v0 + 40) = &type metadata for ModelManager;
    *(void *)(v0 + 48) = sub_10009ADF4();
    *(unsigned char *)(v0 + 16) = 0;
    char v47 = isFeatureEnabled(_:)();
    sub_100008130(v0 + 16);
    if ((v47 & 1) == 0)
    {
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      sub_1000D8FA0(v55, (uint64_t)qword_10015E448);
      uint64_t v4 = (void *)Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.fault.getter();
      if (!sub_1000D8FFC(v56))
      {
        sub_1000D9274();
        goto LABEL_8;
      }
      swift_slowAlloc();
      sub_10002FF90();
      sub_1000D9064(1.5047e-36);
      uint64_t v57 = sub_1000D91BC();
      uint64_t v59 = sub_1000D8F28(v57, v58);
      sub_1000D90E8(v59);
      sub_1000D90B4();
      sub_1000D9214((void *)&_mh_execute_header, v60, v61, "disallowed pid %d with executable path to hold assertions %s");
      sub_1000D91DC();
      sub_10000ED7C();
LABEL_7:
      sub_10000ED7C();
LABEL_8:

      goto LABEL_9;
    }
    if (qword_10015B0F0 == -1)
    {
LABEL_48:
      uint64_t v48 = type metadata accessor for Logger();
      sub_1000D8FA0(v48, (uint64_t)qword_10015E448);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (sub_1000D8FFC(v49))
      {
        sub_100030314();
        sub_10002FF90();
        uint64_t v50 = sub_1000D908C(4.8149e-34);
        uint64_t v52 = sub_1000D8F28(v50, v51);
        sub_1000D910C(v52);
        sub_1000D90B4();
        sub_1000D91F4((void *)&_mh_execute_header, v53, v54, "Allowlist Blocked: Allowing typically blocked executablePath %s");
        sub_1000D91DC();
        sub_10000ED7C();
        sub_10000ED7C();

        goto LABEL_9;
      }
LABEL_50:
      sub_1000D9274();

LABEL_9:
      sub_10002FE48();
      __asm { BRAA            X2, X16 }
    }
LABEL_57:
    swift_once();
    goto LABEL_48;
  }
  long long v15 = (uint64_t *)(v0 + 248);
  sub_1000D8DF0(v0 + 144, v0 + 200, &qword_10015DC30);
  sub_1000D8DF0(v0 + 200, v0 + 248, &qword_10015DC30);
  uint64_t v13 = *(void *)(v0 + 256);
  if (!v13)
  {
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v14 = v0 + 216;
  uint64_t v16 = 160;
LABEL_17:
  uint64_t v17 = *v15;
  sub_1000D8DF0(v0 + v16, v14, &qword_10015DC30);
  *(void *)(v0 + 304) = v17;
  *(void *)(v0 + 312) = v13;
  uint64_t v18 = *(void *)(v0 + 296);
  sub_1000B6B54(v14);
  *(void *)(v0 + 320) = *(void *)(v18 + 152);
  sub_10002FE48();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_1000D7EB4()
{
  sub_1000086E0();
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[37];
  swift_beginAccess();
  v0[41] = *(void *)(v1 + 304);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1000D7F3C, v2, 0);
}

id sub_1000D7F3C()
{
  uint64_t v59 = v0;
  char v3 = sub_1000123E4(*(void *)(v0 + 304), *(void *)(v0 + 312), *(void **)(v0 + 328));
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (qword_10015B0F0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003B18(v4, (uint64_t)qword_10015E448);
    swift_bridgeObjectRetain();
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    unint64_t v8 = *(void *)(v0 + 312);
    if (v7)
    {
      uint64_t v9 = *(void *)(v0 + 304);
      os_log_type_t v10 = (uint8_t *)sub_100030314();
      uint64_t v58 = sub_10002FF90();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_10001DF20(v9, v8, &v58);
      sub_1000D8F7C(v11);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s allowed to hold assertion", v10, 0xCu);
      sub_1000D9044();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_43:
    sub_10002FE48();
    __asm { BRAA            X2, X16 }
  }
  swift_bridgeObjectRelease();
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = (uint64_t)(id)MobileGestalt_copy_releaseType_obj();

    if (!v14)
    {
LABEL_13:
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = (void *)sub_100057A88(v19, (uint64_t)qword_10015E448);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (!sub_1000579B0(v21)) {
        goto LABEL_36;
      }
      uint64_t v22 = (float *)sub_1000D8EC8();
      sub_1000D8EA0(v22, 1.5047e-36);
      uint64_t v25 = "Not an internal build, assertion from process %d denied";
      goto LABEL_34;
    }
    uint64_t v15 = sub_1000D9178();
    uint64_t v17 = v16;

    if (v15 == v1 && v17 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = sub_1000D8FCC();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        goto LABEL_13;
      }
    }
    sub_1000D76B0(*(_DWORD *)(v0 + 336));
    if (!v26)
    {
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v20 = (void *)sub_100057A88(v38, (uint64_t)qword_10015E448);
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (!sub_1000579B0(v39)) {
        goto LABEL_36;
      }
      uint64_t v40 = (float *)sub_1000D8EC8();
      sub_1000D8EA0(v40, 1.5047e-36);
      uint64_t v25 = "cannot get executable Path assertion from process %d denied";
LABEL_34:
      sub_1000D9254((void *)&_mh_execute_header, v23, v24, v25);
      goto LABEL_35;
    }
    if (sub_1000D8EE8()) {
      goto LABEL_25;
    }
    if (sub_1000D8F44()) {
      goto LABEL_25;
    }
    String.lowercased()();
    uint64_t v27 = sub_1000D9018();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_25;
    }
    sub_1000D90CC();
    *(void *)(v27 + 256) = v2;
    *(void *)(v27 + 264) = 0x800000010012C570;
    unint64_t v28 = sub_1000D8E54();
    uint64_t v29 = sub_1000D9130(v28, (uint64_t)&type metadata for String);
    if ((v29 & 1) != 0
      || (*(void *)(v0 + 280) = v15,
          *(void *)(v0 + 288) = v14,
          *(void *)(v0 + 16) = v2 + 3,
          *(void *)(v0 + 24) = 0x800000010012C590,
          (sub_1000D9154(v29, (uint64_t)&type metadata for String) & 1) != 0))
    {
LABEL_25:
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_1000D8FA0(v30, (uint64_t)qword_10015E448);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        sub_100030314();
        uint64_t v58 = sub_10002FF90();
        uint64_t v33 = sub_1000D919C(4.8149e-34);
        uint64_t v35 = sub_1000D8F28(v33, v34);
        sub_1000D8F7C(v35);
        sub_1000D90B4();
        sub_1000D9234((void *)&_mh_execute_header, v36, v37, "allowed executablePath %s");
        sub_1000D9044();
        sub_10000ED7C();
LABEL_29:
        sub_10000ED7C();

        goto LABEL_43;
      }
    }
    else
    {
      *(void *)(v0 + 40) = &type metadata for ModelManager;
      *(void *)(v0 + 48) = sub_10009ADF4();
      *(unsigned char *)(v0 + 16) = 0;
      char v41 = isFeatureEnabled(_:)();
      sub_100008130(v0 + 16);
      if ((v41 & 1) == 0)
      {
        if (qword_10015B0F0 != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        sub_1000D8FA0(v51, (uint64_t)qword_10015E448);
        uint64_t v20 = (void *)Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.fault.getter();
        if (!sub_1000D8FFC(v52))
        {
          sub_1000D9274();
          goto LABEL_36;
        }
        swift_slowAlloc();
        uint64_t v58 = sub_10002FF90();
        sub_1000D9064(1.5047e-36);
        uint64_t v53 = sub_1000D91BC();
        uint64_t v55 = sub_1000D8F28(v53, v54);
        sub_1000D90E8(v55);
        sub_1000D90B4();
        sub_1000D9214((void *)&_mh_execute_header, v56, v57, "disallowed pid %d with executable path to hold assertions %s");
        sub_1000D91DC();
        sub_10000ED7C();
LABEL_35:
        sub_10000ED7C();
LABEL_36:

        goto LABEL_43;
      }
      if (qword_10015B0F0 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_1000D8FA0(v42, (uint64_t)qword_10015E448);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (sub_1000D8FFC(v43))
      {
        sub_100030314();
        sub_10002FF90();
        uint64_t v44 = sub_1000D908C(4.8149e-34);
        uint64_t v46 = sub_1000D8F28(v44, v45);
        sub_1000D910C(v46);
        sub_1000D90B4();
        sub_1000D91F4((void *)&_mh_execute_header, v47, v48, "Allowlist Blocked: Allowing typically blocked executablePath %s");
        sub_1000D91DC();
        sub_10000ED7C();
        goto LABEL_29;
      }
    }
    sub_1000D9274();

    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D859C()
{
  sub_1000086E0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for Assertion.DaemonRep();
  v1[5] = v4;
  v1[6] = *(void *)(v4 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000D865C, v0, 0);
}

uint64_t sub_1000D865C()
{
  sub_1000086E0();
  int v1 = AuditToken.processIdentifier.getter();
  *(_DWORD *)(v0 + 92) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  void *v2 = v0;
  v2[1] = sub_1000D86FC;
  return sub_1000D77BC(v1);
}

uint64_t sub_1000D86FC()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  *(unsigned char *)(*(void *)v0 + 96) = v2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D8810, v1, 0);
}

uint64_t sub_1000D8810()
{
  if (*(unsigned char *)(v0 + 96) == 1)
  {
    Assertion.DaemonRep.receivedFromPID(_:)();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000D8A68;
    return sub_100010308();
  }
  else
  {
    if (qword_10015B0F0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = sub_100057A88(v3, (uint64_t)qword_10015E448);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = *(_DWORD *)(v0 + 92);
      BOOL v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v7 = 67109120;
      *(_DWORD *)(v0 + 88) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Process %d denied to hold assertion", v7, 8u);
      sub_10000ED7C();
    }

    uint64_t v8 = type metadata accessor for ModelManagerError();
    sub_1000D8DA0();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for ModelManagerError.deniedAssertionBySystem(_:), v8);
    swift_willThrow();
    swift_task_dealloc();
    os_log_type_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1000D8A68()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1000D8C10;
  }
  else {
    uint64_t v4 = sub_1000D8B94;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000D8B94()
{
  sub_1000086E0();
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000D8C10()
{
  sub_1000086E0();
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000D8C88()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_1000D8CA4, v0);
}

uint64_t sub_1000D8CA4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 152);
  *(void *)(v0 + 24) = v1;
  return sub_10000EFE0((uint64_t)sub_1000D8CC4, v1);
}

uint64_t sub_1000D8CC4()
{
  sub_1000086E0();
  uint64_t v1 = sub_1000161A4();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000D8D20()
{
  sub_100008130(v0 + 112);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000D8D50()
{
  sub_1000D8D20();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AssertionRequestDispatcher()
{
  return self;
}

unint64_t sub_1000D8DA0()
{
  unint64_t result = qword_10015B410;
  if (!qword_10015B410)
  {
    type metadata accessor for ModelManagerError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015B410);
  }
  return result;
}

uint64_t sub_1000D8DF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003A70(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000D8E54()
{
  unint64_t result = qword_10015E560;
  if (!qword_10015E560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E560);
  }
  return result;
}

uint64_t sub_1000D8EA0(float *a1, float a2)
{
  *a1 = a2;
  *(_DWORD *)(v2 + 16) = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D8EC8()
{
  return swift_slowAlloc();
}

BOOL sub_1000D8EE8()
{
  uint64_t v1 = 0x6E49656C7070412FLL;
  unint64_t v2 = 0xEF2F6C616E726574;
  return String.hasPrefix(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1000D8F28(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_10001DF20(v3, v2, (uint64_t *)va);
}

BOOL sub_1000D8F44()
{
  uint64_t v1 = 0x636F6C2F7273752FLL;
  unint64_t v2 = 0xEF2F6E69622F6C61;
  return String.hasPrefix(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1000D8F7C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D8FA0(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D8FCC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL sub_1000D8FFC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000D9018()
{
  uint64_t v1 = 0x747365746378;
  unint64_t v2 = 0xE600000000000000;
  return String.hasSuffix(_:)(*(Swift::String *)&v1);
}

uint64_t sub_1000D9044()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000D9064(float a1)
{
  float *v2 = a1;
  *(_DWORD *)(v1 + 16) = v3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D908C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D90B4()
{
  return swift_bridgeObjectRelease_n();
}

void sub_1000D90CC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 16) = v2;
}

uint64_t sub_1000D90E8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D910C(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000D9130(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(v2, a2, a2, v3, v3);
}

uint64_t sub_1000D9154(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(v2, a2, a2, v3, v3);
}

uint64_t sub_1000D9178()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000D919C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D91BC()
{
  *(_WORD *)(v0 + 8) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D91DC()
{
  return swift_arrayDestroy();
}

void sub_1000D91F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_1000D9214(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x12u);
}

void sub_1000D9234(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_1000D9254(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_1000D9274()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000D928C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100003A70(&qword_10015D2F0);
  uint64_t v9 = sub_10002FDD0(v8);
  __chkstk_darwin(v9, v10);
  uint64_t v11 = sub_1000DCC90();
  uint64_t v12 = type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(v11);
  __chkstk_darwin(v12, v13);
  uint64_t v14 = sub_1000DCC30();
  if (sub_100006AE8(v14, v15, v16) == 1)
  {
    sub_1000DCBC8(a1, &qword_10015D2F0);
    sub_100069E00();
    sub_1000F669C();
    swift_bridgeObjectRelease();
    return sub_1000DCBC8(v3, &qword_10015D2F0);
  }
  else
  {
    sub_10006F974(a1, v4);
    sub_1000D0580(v4, a2, a3);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000D939C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003A70(&qword_10015B728);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_1000DCC90();
  uint64_t v10 = type metadata accessor for Policy();
  sub_10000ED60();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100006AE8(a1, 1, v10) == 1)
  {
    sub_1000DCBC8(a1, &qword_10015B728);
    sub_100069E00();
    sub_1000F6790();
    swift_bridgeObjectRelease();
    return sub_1000DCBC8(v3, &qword_10015B728);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v16, a1, v10);
    sub_1000D0598((uint64_t)v16, a2, a3);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000D94E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000831C((long long *)a1, (uint64_t)v9);
    sub_1000D06CC(v9, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000DCBC8(a1, &qword_10015C018);
    uint64_t v6 = sub_100069E00();
    sub_1000F6880(v6, v7, v8);
    swift_bridgeObjectRelease();
    return sub_1000DCBC8((uint64_t)v9, &qword_10015C018);
  }
}

uint64_t sub_1000D9574(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100003A70(&qword_10015CFA0);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  uint64_t v15 = sub_1000DCC30();
  if (sub_100006AE8(v15, v16, v10) == 1)
  {
    sub_1000DCBC8(a1, &qword_10015CFA0);
    sub_1000F698C(a2);
    sub_100003A70(&qword_10015B408);
    sub_1000CF6C8();
    (*(void (**)(uint64_t))(v17 + 8))(a2);
    return sub_1000DCBC8((uint64_t)v9, &qword_10015CFA0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v2, a1, v10);
    sub_1000D0740();
    sub_100003A70(&qword_10015B408);
    sub_1000CF6C8();
    return (*(uint64_t (**)(uint64_t))(v19 + 8))(a2);
  }
}

uint64_t sub_1000D9700()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E568);
  sub_100003B18(v0, (uint64_t)qword_10015E568);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

double sub_1000D9770()
{
  sub_100003A70(&qword_10015E6E8);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_100128650;
  *(void *)(v0 + 32) = &type metadata for AssetTransitionDelayTrial;
  *(void *)(v0 + 40) = &off_100154A40;
  qword_1001600C0 = v0;
  return result;
}

uint64_t sub_1000D97C4()
{
  *(void *)(v1 + 16) = v0;
  return sub_10000EFE0((uint64_t)sub_1000D97E0, v0);
}

uint64_t sub_1000D97E0()
{
  sub_1000086EC();
  uint64_t v1 = *(void **)(v0[2] + 200);
  v0[3] = v1;
  uint64_t v2 = v1[2];
  v0[4] = v2;
  if (v2)
  {
    v0[5] = 0;
    uint64_t v3 = v1[4];
    v0[6] = v3;
    uint64_t v4 = v1[5];
    v0[7] = v4;
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000D98E0;
    return sub_1000D9F78(v3, v4);
  }
  else
  {
    sub_10000EF7C();
    return v7();
  }
}

uint64_t sub_1000D98E0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D99BC()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10000853C(v3 + 14, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  uint64_t v8 = v7;
  v0[9] = v7;
  uint64_t v9 = (void *)swift_allocObject();
  v0[10] = v9;
  long long v9[2] = v3;
  v9[3] = v2;
  v9[4] = v1;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void *, void *, uint64_t, uint64_t))(*(void *)(v5 + 32)
                                                                                     + **(int **)(v5 + 32));
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[11] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000D9B5C;
  return v12(v6, v8, &unk_10015E6E0, v9, v4, v5);
}

uint64_t sub_1000D9B5C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100044150();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000D9C78()
{
  sub_1000086EC();
  uint64_t v1 = v0[5] + 1;
  if (v1 == v0[4])
  {
    swift_bridgeObjectRelease();
    sub_10000EF7C();
    return v2();
  }
  else
  {
    v0[5] = v1;
    uint64_t v4 = v0[3] + 16 * v1;
    v0[6] = *(void *)(v4 + 32);
    v0[7] = *(void *)(v4 + 40);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000D98E0;
    uint64_t v6 = sub_100069E00();
    return sub_1000D9F78(v6, v7);
  }
}

uint64_t sub_1000D9D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000D9D98, 0, 0);
}

uint64_t sub_1000D9D98()
{
  sub_1000086E0();
  type metadata accessor for _OSActivity();
  v0[5] = _OSActivity.__allocating_init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D9E4C;
  uint64_t v2 = sub_100044070(v0[3]);
  return sub_1000D9F78(v2, v3);
}

uint64_t sub_1000D9E4C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D9F18, 0, 0);
}

uint64_t sub_1000D9F18()
{
  sub_1000086E0();
  _OSActivity.close()();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000D9F78(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10000EFE0((uint64_t)sub_1000D9F98, v2);
}

uint64_t sub_1000D9F98()
{
  sub_1000086EC();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 40) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 16);
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10015B860 + dword_10015B860);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000DA090;
  return v5();
}

uint64_t sub_1000DA090()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000D4CCC, v2, 0);
}

uint64_t sub_1000DA18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[5] = a2;
  v4[8] = sub_100003A70(&qword_10015E6C8);
  v4[9] = swift_task_alloc();
  sub_100003A70(&qword_10015B728);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Policy();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000DA308, a2, 0);
}

uint64_t sub_1000DA308()
{
  sub_10002FC60();
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = (void *)v0[5];
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[18];
  sub_10000853C(v3 + 14, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v2, v1);
  uint64_t v8 = v7;
  v0[20] = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[21] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000DA448;
  return v11(v6, v8, v4, v5);
}

uint64_t sub_1000DA448(char a1)
{
  sub_100008660();
  uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (a1)
  {
    uint64_t v7 = v4[5];
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4[7] + 32) + **(int **)(v4[7] + 32));
    uint64_t v8 = (void *)swift_task_alloc();
    v4[22] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_1000DA648;
    uint64_t v9 = v4[14];
    return v12(v9, v7 + 112);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v4[28] = v11;
    *uint64_t v11 = v5;
    v11[1] = sub_1000DB150;
    sub_100044070(v4[6]);
    return sub_1000DC0E8();
  }
}

uint64_t sub_1000DA648()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DA724()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  if (sub_100006AE8(v2, 1, v1) == 1)
  {
    sub_1000DCBC8(v2, &qword_10015B728);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[23] = v3;
    *uint64_t v3 = v0;
    uint64_t v4 = sub_1000DAC5C;
LABEL_16:
    v3[1] = v4;
    sub_1000DCC1C();
    sub_1000306EC();
    return sub_1000DC0E8();
  }
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = v0[5];
  uint64_t v44 = *(void (**)(void))(v5 + 32);
  v44();
  uint64_t v45 = *(uint64_t (**)(void))(v7 + 8);
  uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t))v45)(v8, v7);
  uint64_t v12 = v11;
  uint64_t v13 = (uint64_t *)(v9 + 208);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v9 + 208);
  swift_bridgeObjectRetain();
  sub_1000142D8(v10, v12, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v10) = sub_100006AE8(v6, 1, v1);
  sub_1000DCBC8(v6, &qword_10015B728);
  uint64_t v15 = *(void (**)(void))(v5 + 16);
  sub_1000441C4();
  v15();
  if (v10 != 1)
  {
    uint64_t v17 = v0[11];
    uint64_t v43 = v0[12];
    uint64_t v18 = v0[9];
    uint64_t v46 = v0[15];
    uint64_t v47 = v0[8];
    uint64_t v19 = v45();
    uint64_t v21 = v20;
    uint64_t v22 = *v13;
    swift_bridgeObjectRetain();
    sub_1000142D8(v19, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000441C4();
    v15();
    sub_100006960(v17, 0, 1, v46);
    uint64_t v23 = v18 + *(int *)(v47 + 48);
    sub_10002E894(v43, v18);
    sub_10002E894(v17, v23);
    if (sub_100006AE8(v18, 1, v46) == 1)
    {
      uint64_t v24 = v0[18];
      uint64_t v25 = v0[15];
      uint64_t v26 = v0[16];
      uint64_t v27 = v0[12];
      sub_1000DCBC8(v0[11], &qword_10015B728);
      sub_1000DCBC8(v27, &qword_10015B728);
      uint64_t v16 = *(void (**)(void))(v26 + 8);
      ((void (*)(uint64_t, uint64_t))v16)(v24, v25);
      if (sub_100006AE8(v23, 1, v25) == 1)
      {
        sub_1000DCBC8(v0[9], &qword_10015B728);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v28 = v0[15];
      sub_10002E894(v0[9], v0[10]);
      int v29 = sub_100006AE8(v23, 1, v28);
      uint64_t v30 = v0[18];
      if (v29 != 1)
      {
        uint64_t v35 = v0[16];
        uint64_t v37 = v0[11];
        uint64_t v36 = v0[12];
        uint64_t v48 = v0[9];
        ((void (*)(void, uint64_t, void))v44)(v0[17], v23, v0[15]);
        sub_1000DCADC(&qword_10015E6D0, 255, (void (*)(uint64_t))&type metadata accessor for Policy);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = *(void (**)(void))(v35 + 8);
        sub_1000DCCAC();
        v16();
        sub_1000DCBC8(v37, &qword_10015B728);
        sub_1000DCBC8(v36, &qword_10015B728);
        sub_1000DCCAC();
        v16();
        sub_1000DCCAC();
        v16();
        sub_1000DCBC8(v48, &qword_10015B728);
        if (v38) {
          goto LABEL_12;
        }
LABEL_15:
        v0[24] = v16;
        uint64_t v3 = (void *)swift_task_alloc();
        v0[25] = v3;
        *uint64_t v3 = v0;
        uint64_t v4 = sub_1000DAE28;
        goto LABEL_16;
      }
      uint64_t v31 = v0[15];
      uint64_t v32 = v0[16];
      uint64_t v33 = v0[12];
      uint64_t v34 = v0[10];
      sub_1000DCBC8(v0[11], &qword_10015B728);
      sub_1000DCBC8(v33, &qword_10015B728);
      uint64_t v16 = *(void (**)(void))(v32 + 8);
      ((void (*)(uint64_t, uint64_t))v16)(v30, v31);
      ((void (*)(uint64_t, uint64_t))v16)(v34, v31);
    }
    sub_1000DCBC8(v0[9], &qword_10015E6C8);
    goto LABEL_15;
  }
  uint64_t v16 = *(void (**)(void))(v0[16] + 8);
  ((void (*)(void, void))v16)(v0[18], v0[15]);
LABEL_12:
  v0[26] = v16;
  os_log_type_t v39 = (void *)swift_task_alloc();
  v0[27] = v39;
  *os_log_type_t v39 = v0;
  v39[1] = sub_1000DAF98;
  sub_1000DCC1C();
  sub_1000306EC();
  return sub_1000DB31C();
}

uint64_t sub_1000DAC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_10002FC48();
  uint64_t v13 = *v12;
  sub_1000086D0();
  *uint64_t v14 = v13;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000307C8();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_1000DAE28()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DAF04()
{
  sub_1000086E0();
  v0[26] = v0[24];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DAF98;
  sub_1000DCC1C();
  return sub_1000DB31C();
}

uint64_t sub_1000DAF98()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DB074()
{
  sub_10002FC60();
  (*(void (**)(void, void))(v0 + 208))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_1000DB150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_10002FC48();
  uint64_t v13 = *v12;
  sub_1000086D0();
  *uint64_t v14 = v13;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000307C8();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12);
}

uint64_t sub_1000DB31C()
{
  sub_1000086E0();
  v1[16] = v2;
  v1[17] = v0;
  v1[14] = v3;
  v1[15] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B228);
  sub_10002FDD0(v5);
  v1[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Assertion.DaemonRep();
  v1[19] = v6;
  sub_10002FA4C(v6);
  v1[20] = v7;
  v1[21] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015B728);
  sub_10002FDD0(v8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000DB41C()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[17];
  uint64_t v3 = *(uint64_t (**)(void))(v0[15] + 8);
  v0[24] = v3;
  sub_1000DCC50();
  uint64_t v4 = v3();
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 208);
  swift_bridgeObjectRetain();
  sub_1000142D8(v4, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for Policy();
  v0[25] = v8;
  LODWORD(v4) = sub_100006AE8(v1, 1, v8);
  sub_1000DCBC8(v1, &qword_10015B728);
  if (v4 == 1)
  {
    uint64_t v30 = v3;
    if (qword_10015B0F8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    v0[26] = sub_100003B18(v9, (uint64_t)qword_10015E568);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_1000DCC50();
      uint64_t v14 = v13();
      v0[13] = sub_10001DF20(v14, v15, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Enabling Trial %s", v12, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }

    uint64_t v16 = v0[22];
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[14];
    uint64_t v29 = v0[15];
    sub_1000DCC50();
    uint64_t v19 = v30();
    uint64_t v27 = v20;
    uint64_t v28 = v19;
    sub_1000441C4();
    v21();
    sub_1000DCCF0();
    swift_beginAccess();
    sub_1000D939C(v16, v28, v27);
    swift_endAccess();
    sub_10000853C((void *)(v17 + 152), *(void *)(v17 + 176));
    ((void (*)(uint64_t, uint64_t))v30)(v18, v29);
    v0[27] = v22;
    sub_1000441C4();
    v23();
    sub_1000DCCF0();
    uint64_t v24 = (void *)swift_task_alloc();
    v0[28] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1000DB824;
    return sub_10000FFD4();
  }
  else
  {
    sub_1000DCCD4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v26();
  }
}

uint64_t sub_1000DB824()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 176);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1000DCBC8(v2, &qword_10015B728);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000DB948()
{
  sub_100030850();
  uint64_t v1 = (void (*)(void))v0[24];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  sub_1000DCC50();
  v1();
  sub_1000DCC50();
  v1();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  Assertion.DaemonRep.init(policy:description:id:)();
  sub_10000853C((void *)(v2 + 152), *(void *)(v2 + 176));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000DBA78;
  sub_100044070(v0[21]);
  sub_1000307C8();
  return sub_100010308();
}

uint64_t sub_1000DBA78()
{
  sub_1000086EC();
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_1000DBC1C;
  }
  else {
    uint64_t v4 = sub_1000DBBA0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000DBBA0()
{
  sub_1000086EC();
  uint64_t v0 = sub_1000DCCBC();
  v1(v0);
  sub_1000DCCD4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v2();
}

uint64_t sub_1000DBC1C()
{
  uint64_t v19 = v0;
  uint64_t v1 = sub_1000DCCBC();
  v2(v1);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint64_t (*)(void))v0[24];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    sub_1000DCC50();
    uint64_t v8 = v5();
    v0[11] = sub_10001DF20(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to acquire %s assertion: %@", (uint8_t *)v6, 0x16u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v12 = (void (*)(uint64_t))v0[24];
  uint64_t v11 = v0[25];
  uint64_t v13 = v0[22];
  uint64_t v14 = sub_1000DCC5C(v0[17]);
  v12(v14);
  v0[31] = v15;
  sub_100006960(v13, 1, 1, v11);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[32] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000DBEBC;
  return sub_10000FFD4();
}

uint64_t sub_1000DBEBC()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 176);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1000DCBC8(v2, &qword_10015B728);
  sub_100044150();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000DBFE0()
{
  sub_10002FC60();
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = (*(uint64_t (**)(void))(v0 + 192))();
  uint64_t v5 = v4;
  sub_100006960(v2, 1, 1, v1);
  swift_beginAccess();
  sub_1000D939C(v2, v3, v5);
  swift_endAccess();
  swift_errorRelease();
  sub_1000DCCD4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v6();
}

uint64_t sub_1000DC0E8()
{
  sub_1000086E0();
  v1[10] = v2;
  v1[11] = v0;
  v1[9] = v3;
  uint64_t v4 = sub_100003A70(&qword_10015B228);
  v1[12] = v4;
  sub_10002FA4C(v4);
  v1[13] = v5;
  v1[14] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015B728);
  sub_10002FDD0(v6);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000DC1C0()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[11];
  uint64_t v3 = *(uint64_t (**)(void))(v0[10] + 8);
  v0[17] = v3;
  uint64_t v4 = v3();
  uint64_t v6 = v5;
  sub_100044150();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 208);
  swift_bridgeObjectRetain();
  sub_1000142D8(v4, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for Policy();
  v0[18] = v8;
  LODWORD(v4) = sub_100006AE8(v1, 1, v8);
  sub_1000DCBC8(v1, &qword_10015B728);
  if (v4 == 1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000306EC();
    __asm { BRAA            X1, X16 }
  }
  if (qword_10015B0F8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003B18(v11, (uint64_t)qword_10015E568);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v0[9];
    uint64_t v28 = v0[10];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v16 = ((uint64_t (*)(uint64_t, uint64_t))v3)(v14, v28);
    v0[8] = sub_10001DF20(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disabling Trial %s", v15, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  uint64_t v18 = v0[15];
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = v0[9];
  uint64_t v22 = ((uint64_t (*)(uint64_t, uint64_t))v3)(v21, v20);
  uint64_t v24 = v23;
  sub_100006960(v18, 1, 1, v8);
  swift_beginAccess();
  sub_1000D939C(v18, v22, v24);
  swift_endAccess();
  sub_10000853C((void *)(v19 + 152), *(void *)(v19 + 176));
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v21, v20);
  uint64_t v25 = (void *)swift_task_alloc();
  v0[19] = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_1000DC568;
  sub_100044070(v0[14]);
  sub_1000306EC();
  return sub_100010658();
}

uint64_t sub_1000DC568()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[12];
  uint64_t v5 = *v0;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100044150();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000DC6A0()
{
  sub_10002FC60();
  uint64_t v2 = (void (*)(uint64_t))v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = sub_1000DCC5C(v0[11]);
  v2(v4);
  v0[20] = v5;
  sub_100006960(v3, 1, 1, v1);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[21] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000DC788;
  return sub_10000FFD4();
}

uint64_t sub_1000DC788()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_1000086D0();
  *uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 120);
  uint64_t v5 = *v0;
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1000DCBC8(v4, &qword_10015B728);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_1000DC904()
{
  sub_100008130(v0 + 112);
  sub_100008130(v0 + 152);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000DC94C()
{
  sub_1000DC904();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TrialManager()
{
  return self;
}

uint64_t sub_1000DC99C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000DCADC(&qword_10015B868, a2, (void (*)(uint64_t))type metadata accessor for TrialManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000DC9F4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000DCA2C()
{
  sub_1000086EC();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10000E1FC;
  return sub_1000DA18C(v3, v4, v5, v6);
}

uint64_t sub_1000DCADC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DCB24()
{
  sub_1000086EC();
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000ED54;
  return sub_1000D9D74(v2, v3, v4);
}

uint64_t sub_1000DCBC8(uint64_t a1, uint64_t *a2)
{
  sub_100003A70(a2);
  sub_1000CF6C8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000DCC1C()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_1000DCC30()
{
  return v0;
}

uint64_t sub_1000DCC5C@<X0>(uint64_t a1@<X8>)
{
  sub_10000853C((void *)(a1 + 152), *(void *)(a1 + 176));
  return v1;
}

uint64_t sub_1000DCC90()
{
  return 0;
}

uint64_t sub_1000DCCBC()
{
  return *(void *)(v0 + 168);
}

uint64_t sub_1000DCCD4()
{
  return swift_task_dealloc();
}

uint64_t sub_1000DCCF0()
{
  return sub_100006960(v1, 0, 1, v0);
}

uint64_t destroy for StateDumpManager()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for StateDumpManager(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for StateDumpManager(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for StateDumpManager(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StateDumpManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StateDumpManager(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateDumpManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateDumpManager()
{
  return &type metadata for StateDumpManager;
}

uint64_t sub_1000DD014(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v31 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (uint64_t)&v27 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  uint64_t v27 = v1;
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_10001EDA8(0, v9, 0);
  uint64_t result = sub_10002E3C4(a1);
  uint64_t v12 = result;
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v28 = a1;
  uint64_t v29 = a1 + 56;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v29 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void *)(a1 + 48) + *(void *)(v32 + 72) * v12;
    uint64_t v18 = v30;
    sub_1000E0ED4(v17, v30, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    uint64_t v19 = v31;
    sub_10000E54C(v18, (uint64_t)v31);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    sub_1000E0F30((uint64_t)v19, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    uint64_t v10 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10001EDA8(0, v10[2] + 1, 1);
      uint64_t v10 = v33;
    }
    unint64_t v23 = v10[2];
    unint64_t v22 = v10[3];
    if (v23 >= v22 >> 1)
    {
      sub_10001EDA8(v22 > 1, v23 + 1, 1);
      uint64_t v10 = v33;
    }
    v10[2] = v23 + 1;
    uint64_t v24 = &v10[2 * v23];
    v24[4] = v20;
    v24[5] = v21;
    a1 = v28;
    uint64_t result = sub_10002E2DC(v12, v14, v16 & 1, v28);
    uint64_t v12 = result;
    uint64_t v14 = v25;
    char v16 = v26 & 1;
    if (!--v9)
    {
      sub_10000E60C(result, v25, v26 & 1);
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_1000DD298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StateDump.AssetState();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v39 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = __CocoaSet.count.getter();
    if (v9) {
      goto LABEL_3;
    }
LABEL_6:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v45 = _swiftEmptyArrayStorage;
  sub_10001F00C();
  if (v39)
  {
    uint64_t result = (void *)__CocoaSet.startIndex.getter();
    char v16 = 1;
  }
  else
  {
    uint64_t result = (void *)sub_10002E3C4(a1);
    char v16 = v17 & 1;
  }
  char v41 = result;
  uint64_t v42 = v11;
  LOBYTE(v43) = v16;
  if (v9 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v5 + 32;
    uint64_t v35 = v5;
    uint64_t v36 = v4;
    uint64_t v34 = v8;
    do
    {
      sub_10011BF1C((uint64_t)v41, v42, v43, a1, v12, v13, v14, v15, v33, (uint64_t)v34, v35, v36, v37, v38, v39, v40[0], v40[1], v40[2], v40[3],
        (uint64_t)v41,
        v42,
        v43,
        v44,
        (uint64_t)v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51);
      swift_retain();
      sub_1000DF974();
      uint64_t v19 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F00C();
        uint64_t v19 = v45;
      }
      unint64_t v20 = v19[2];
      if (v20 >= v19[3] >> 1)
      {
        sub_10001F00C();
        uint64_t v19 = v45;
      }
      v19[2] = v20 + 1;
      uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20, v8, v4);
      uint64_t v45 = v19;
      if (v39)
      {
        if ((v43 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015C6B0);
        uint64_t v32 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v32(v40, 0);
      }
      else
      {
        uint64_t v21 = (uint64_t)v41;
        uint64_t v22 = v42;
        char v23 = v43;
        uint64_t v24 = a1;
        uint64_t v25 = sub_10002E2DC(v41, v42, v43, a1);
        uint64_t v26 = a2;
        uint64_t v28 = v27;
        char v30 = v29;
        char v31 = v23;
        uint64_t v8 = v34;
        sub_10000E60C(v21, v22, v31);
        char v41 = (void *)v25;
        uint64_t v42 = v28;
        a1 = v24;
        a2 = v26;
        uint64_t v5 = v35;
        uint64_t v4 = v36;
        LOBYTE(v43) = v30 & 1;
      }
      --v9;
    }
    while (v9);
    sub_10000E60C((uint64_t)v41, v42, v43);
    swift_release();
    return v45;
  }
  return result;
}

void *sub_1000DD5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StateDump.SessionState();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v39 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = __CocoaSet.count.getter();
    if (v9) {
      goto LABEL_3;
    }
LABEL_6:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v45 = _swiftEmptyArrayStorage;
  sub_10001F070();
  if (v39)
  {
    uint64_t result = (void *)__CocoaSet.startIndex.getter();
    char v16 = 1;
  }
  else
  {
    uint64_t result = (void *)sub_10002E3C4(a1);
    char v16 = v17 & 1;
  }
  char v41 = result;
  uint64_t v42 = v11;
  LOBYTE(v43) = v16;
  if (v9 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v5 + 32;
    uint64_t v35 = v5;
    uint64_t v36 = v4;
    uint64_t v34 = v8;
    do
    {
      sub_10011BF5C((uint64_t)v41, v42, v43, a1, v12, v13, v14, v15, v33, (uint64_t)v34, v35, v36, v37, v38, v39, v40[0], v40[1], v40[2], v40[3],
        (uint64_t)v41,
        v42,
        v43,
        v44,
        (uint64_t)v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51);
      swift_retain();
      sub_1000DFD4C();
      uint64_t v19 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F070();
        uint64_t v19 = v45;
      }
      unint64_t v20 = v19[2];
      if (v20 >= v19[3] >> 1)
      {
        sub_10001F070();
        uint64_t v19 = v45;
      }
      v19[2] = v20 + 1;
      uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20, v8, v4);
      uint64_t v45 = v19;
      if (v39)
      {
        if ((v43 & 1) == 0) {
          goto LABEL_25;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015E718);
        uint64_t v32 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v32(v40, 0);
      }
      else
      {
        uint64_t v21 = (uint64_t)v41;
        uint64_t v22 = v42;
        char v23 = v43;
        uint64_t v24 = a1;
        uint64_t v25 = sub_10002E2DC(v41, v42, v43, a1);
        uint64_t v26 = a2;
        uint64_t v28 = v27;
        char v30 = v29;
        char v31 = v23;
        uint64_t v8 = v34;
        sub_10000E60C(v21, v22, v31);
        char v41 = (void *)v25;
        uint64_t v42 = v28;
        a1 = v24;
        a2 = v26;
        uint64_t v5 = v35;
        uint64_t v4 = v36;
        LOBYTE(v43) = v30 & 1;
      }
      --v9;
    }
    while (v9);
    sub_10000E60C((uint64_t)v41, v42, v43);
    swift_release();
    return v45;
  }
  return result;
}

void *sub_1000DD930(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B408);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v36 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v35 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v42 = _swiftEmptyArrayStorage;
    sub_10001F138(0, v6 & ~(v6 >> 63), 0);
    if (v35)
    {
      uint64_t result = (void *)__CocoaSet.startIndex.getter();
      char v13 = 1;
    }
    else
    {
      uint64_t result = (void *)sub_10002E3C4(a1);
      char v13 = v14 & 1;
    }
    uint64_t v38 = result;
    uint64_t v39 = v8;
    LOBYTE(v40) = v13;
    if (v6 < 0)
    {
      __break(1u);
LABEL_26:
      __break(1u);
    }
    else
    {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v15 = a1;
      }
      uint64_t v32 = v15;
      uint64_t v33 = v3 + 32;
      uint64_t v34 = a1;
      uint64_t v31 = v3;
      do
      {
        uint64_t v17 = (uint64_t)v38;
        uint64_t v16 = v39;
        uint64_t v18 = v40;
        sub_10011BF9C((uint64_t)v38, v39, v40, a1, v9, v10, v11, v12, v30, v31, v32, v33, v34, v35, v36, v37[0], v37[1], v37[2], v37[3],
          (uint64_t)v38,
          v39,
          v40,
          v41,
          (uint64_t)v42,
          v43,
          v44,
          v45,
          v46,
          v47,
          v48);
        RequestMetadata.id.getter();
        swift_release();
        uint64_t v19 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10001F138(0, v19[2] + 1, 1);
          uint64_t v19 = v42;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_10001F138(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v42;
        }
        v19[2] = v21 + 1;
        uint64_t result = (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v21, v36, v2);
        if (v35)
        {
          a1 = v34;
          if ((v18 & 1) == 0) {
            goto LABEL_26;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_100003A70(&qword_10015E708);
          char v29 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v29(v37, 0);
        }
        else
        {
          a1 = v34;
          uint64_t v22 = sub_10002E2DC(v17, v16, v18, v34);
          uint64_t v24 = v23;
          uint64_t v25 = v2;
          char v27 = v26;
          sub_10000E60C(v17, v16, v18);
          uint64_t v38 = (void *)v22;
          uint64_t v39 = v24;
          char v28 = v27 & 1;
          uint64_t v2 = v25;
          uint64_t v3 = v31;
          LOBYTE(v40) = v28;
        }
        --v6;
      }
      while (v6);
      sub_10000E60C((uint64_t)v38, v39, v40);
      return v42;
    }
  }
  return result;
}

void *sub_1000DDC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  type metadata accessor for UUID();
  sub_10000ED60();
  __chkstk_darwin(v7, v8);
  sub_10000F0D0();
  type metadata accessor for StateDump.ExecutionGroupState();
  sub_10000ED60();
  uint64_t v10 = v9;
  __chkstk_darwin(v11, v12);
  sub_1000CF930();
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    sub_10001F168();
    uint64_t v14 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v30 = a3 + 32;
    uint64_t v31 = v4;
    uint64_t v32 = v10;
    do
    {
      uint64_t v33 = v15;
      uint64_t v34 = v14;
      uint64_t v16 = *(void *)(v30 + 8 * v14);
      swift_beginAccess();
      sub_100030274();
      v17();
      uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v19 = sub_1000DD014(v18);
      uint64_t v20 = v5;
      swift_bridgeObjectRelease();
      Set.init(minimumCapacity:)();
      uint64_t v21 = *(void *)(v19 + 16);
      if (v21)
      {
        uint64_t v22 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          sub_100020654();
          swift_bridgeObjectRelease();
          v22 += 16;
          --v21;
        }
        while (v21);
      }
      swift_bridgeObjectRelease();
      uint64_t v35 = v34 + 1;
      swift_bridgeObjectRetain();
      sub_100116B0C();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_100116B0C();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      sub_100116744(v26);
      sub_1000DE110(v24);
      swift_bridgeObjectRelease();
      uint64_t v15 = v33;
      StateDump.ExecutionGroupState.init(id:assets:requests:state:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      unint64_t v27 = v33[2];
      if (v27 >= v33[3] >> 1) {
        sub_10001F168();
      }
      v33[2] = v27 + 1;
      sub_1000E0F98();
      (*(void (**)(unint64_t, uint64_t))(v32 + 32))(v28 + *(void *)(v32 + 72) * v27, v31);
      uint64_t v14 = v35;
      uint64_t v5 = v20;
    }
    while (v35 != v13);
    swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v15;
}

void sub_1000DE110(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v16 = sub_100003A70(&qword_10015B408);
  uint64_t v4 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v5);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_10001F138(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v9 = 0;
    uint64_t v10 = v17;
    unint64_t v15 = a1 & 0xC000000000000001;
    v14[0] = v2;
    v14[1] = v4 + 32;
    unint64_t v11 = a1;
    while (v8 != v9)
    {
      if (v15) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      RequestMetadata.id.getter();
      swift_release();
      uint64_t v17 = v10;
      unint64_t v13 = v10[2];
      unint64_t v12 = v10[3];
      unint64_t v2 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        sub_10001F138(v12 > 1, v13 + 1, 1);
        uint64_t v10 = v17;
      }
      ++v9;
      v10[2] = v2;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v7, v16);
      a1 = v11;
      if (v8 == v9) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000DE340()
{
  sub_1000086E0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for StateDump.InferenceProviderState();
  v1[11] = v3;
  sub_10002FA4C(v3);
  v1[12] = v4;
  v1[13] = sub_1000436D8();
  v1[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for StateDump.ExecutionGroupsState();
  v1[15] = v5;
  sub_10002FA4C(v5);
  v1[16] = v6;
  v1[17] = sub_1000436D8();
  v1[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Policy();
  v1[19] = v7;
  sub_10002FA4C(v7);
  v1[20] = v8;
  v1[21] = sub_1000436D8();
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *(void *)(v0 + 16);
  v1[22] = v9;
  v1[23] = v10;
  return _swift_task_switch(sub_1000DE454, v10, 0);
}

uint64_t sub_1000DE454()
{
  sub_1000086E0();
  *(void *)(v0 + 192) = sub_1000161A4();
  sub_10002FB10();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000DE4B8()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (uint64_t *)v0[10];
  sub_100043D2C();
  v0[25] = *(void *)(v1 + 16);
  v0[26] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v3 = sub_1000E0FD4();
  v4(v3);
  uint64_t v5 = *v2;
  v0[27] = *v2;
  return _swift_task_switch(sub_1000DE56C, v5, 0);
}

uint64_t sub_1000DE56C()
{
  sub_1000086E0();
  uint64_t v1 = v0[10];
  sub_1000DEDE0();
  v0[28] = v2;
  uint64_t v3 = *(void *)(v1 + 24);
  v0[29] = v3;
  return _swift_task_switch(sub_1000DE5DC, v3, 0);
}

uint64_t sub_1000DE5DC()
{
  sub_1000086E0();
  uint64_t v1 = v0[10];
  sub_1000DEE50();
  v0[30] = v2;
  uint64_t v3 = *(void *)(v1 + 32);
  v0[31] = v3;
  return _swift_task_switch(sub_1000DE64C, v3, 0);
}

uint64_t sub_1000DE64C()
{
  uint64_t v1 = v0[10];
  sub_1000E05FC();
  v0[32] = v2;
  sub_1000E0B58();
  v0[33] = v3;
  sub_1000E0BCC();
  v0[8] = _swiftEmptySetSingleton;
  uint64_t v4 = *(void *)(v1 + 8);
  v0[34] = v4;
  return _swift_task_switch(sub_1000DE6E8, v4, 0);
}

uint64_t sub_1000DE6E8()
{
  sub_1000086E0();
  *(void *)(v0 + 280) = sub_1000DEEC0();
  sub_1000579A4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000DE74C()
{
  sub_1000086E0();
  unint64_t v4 = v0[35];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v1 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v0[36] = v5;
  if (!v5)
  {
    uint64_t v8 = v0[10];
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v8 + 40);
    v0[40] = v2;
    uint64_t v1 = (uint64_t)sub_1000DEB3C;
    uint64_t v3 = 0;
    return _swift_task_switch(v1, v2, v3);
  }
  if (v5 < 1)
  {
    __break(1u);
    return _swift_task_switch(v1, v2, v3);
  }
  uint64_t v6 = v0[35];
  v0[37] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[38] = v7;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[39] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000DE8B8;
  return sub_1000DEFE4();
}

uint64_t sub_1000DE8B8()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000DE9AC()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[37] + 1;
  sub_1000224A8();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v5 == v1)
  {
    uint64_t v6 = v0[10];
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v6 + 40);
    v0[40] = v7;
    return _swift_task_switch(sub_1000DEB3C, v7, 0);
  }
  else
  {
    uint64_t v8 = v0[37] + 1;
    v0[37] = v8;
    uint64_t v9 = v0[35];
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v10 = *(void *)(v9 + 8 * v8 + 32);
      swift_retain();
    }
    v0[38] = v10;
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[39] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000DE8B8;
    return sub_1000DEFE4();
  }
}

uint64_t sub_1000DEB3C()
{
  sub_1000086E0();
  uint64_t v1 = v0[10];
  v0[41] = *(void *)(v0[40] + 192);
  v0[42] = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  sub_10002FB10();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000DEBB4()
{
  sub_1000086E0();
  uint64_t v1 = *(void *)(v0 + 336);
  sub_100043D2C();
  *(void *)(v0 + 344) = *(void *)(v1 + 208);
  swift_bridgeObjectRetain();
  sub_1000579A4();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000DEC2C()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[25];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v7 = v0[16];
  sub_10000853C((void *)(v0[27] + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog), *(void *)(v0[27] + OBJC_IVAR____TtC13modelmanagerd29InferenceProviderAssetManager_modelCatalog + 24));
  v11(v1, v2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v6, v8);
  StateDump.init(assertions:currentPolicy:assets:sessions:requests:runningRequests:executionGroups:inferenceProviders:disabledUseCases:trials:budget:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1000DEDE0()
{
  sub_100043D2C();
  swift_retain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1000DD298(v1, v0);
  swift_bridgeObjectRelease();
  sub_100017358();
}

void sub_1000DEE50()
{
  sub_100043D2C();
  swift_retain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1000DD5E4(v1, v0);
  swift_bridgeObjectRelease();
  sub_100017464();
}

void *sub_1000DEEC0()
{
  uint64_t v0 = InferenceProviderManager.allConnections.getter();
  uint64_t v1 = _swiftEmptyArrayStorage;
  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2)
  {
    uint64_t v3 = v0 + 32;
    do
    {
      sub_100008334(v3, (uint64_t)v7);
      sub_100008334((uint64_t)v7, (uint64_t)&v5);
      sub_100003A70(&qword_10015BB38);
      type metadata accessor for InferenceProviderExtensionConnection(0);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v6 = 0;
      }
      sub_100008130((uint64_t)v7);
      if (v6)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v3 += 40;
      --v2;
    }
    while (v2);
    uint64_t v1 = (void *)v8;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000DEFE4()
{
  sub_1000086E0();
  v0[8] = v1;
  v0[9] = v2;
  uint64_t v3 = sub_100003A70(&qword_10015E700);
  v0[10] = v3;
  sub_10002FDD0(v3);
  v0[11] = sub_1000436D8();
  v0[12] = swift_task_alloc();
  v0[13] = swift_task_alloc();
  v0[14] = swift_task_alloc();
  v0[15] = swift_task_alloc();
  v0[16] = swift_task_alloc();
  v0[17] = swift_task_alloc();
  uint64_t active = type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
  v0[18] = active;
  sub_10002FA4C(active);
  v0[19] = v5;
  v0[20] = sub_1000436D8();
  v0[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RequestPriority();
  v0[22] = v6;
  sub_10002FA4C(v6);
  v0[23] = v7;
  v0[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for InferenceProviderDescriptor();
  v0[25] = v8;
  sub_10002FA4C(v8);
  v0[26] = v9;
  v0[27] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_1000DF160()
{
  sub_1000086E0();
  uint64_t v1 = *(void **)(*(void *)(v0 + 72) + 120);
  if (v1) {
    unsigned int v2 = [v1 pid];
  }
  else {
    unsigned int v2 = -1;
  }
  *(_DWORD *)(v0 + 248) = v2;
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DF1DC()
{
  sub_1000086E0();
  (*(void (**)(void, uint64_t, void))(v0[26] + 16))(v0[27], v0[9] + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_descriptor, v0[25]);
  sub_10002FB10();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000DF260()
{
  sub_1000086E0();
  uint64_t v1 = (void *)(*(void *)(v0 + 72)
                + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_activeRequest);
  sub_100043D2C();
  *(void *)(v0 + 224) = *v1;
  swift_bridgeObjectRetain();
  sub_1000579A4();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000DF2E8()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v33 = v0[10];
    uint64_t v46 = _swiftEmptyArrayStorage;
    sub_10001F1CC();
    uint64_t v3 = sub_1000E0D8C(v1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v6 = v3;
      if (v3 < 1 << *(unsigned char *)(v1 + 32))
      {
        uint64_t v7 = v1 + 64;
        uint64_t v45 = v0[23];
        uint64_t v31 = v1;
        uint64_t v32 = v0;
        uint64_t v29 = v1 + 64;
        uint64_t v30 = (uint64_t (**)(unint64_t))(v0[19] + 32);
        while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v4 != *(_DWORD *)(v1 + 36)) {
            goto LABEL_22;
          }
          uint64_t v34 = v2;
          int v35 = v4;
          uint64_t v8 = v0[17];
          uint64_t v9 = v8 + *(int *)(v33 + 48);
          uint64_t v10 = v0[22];
          uint64_t v38 = v0[21];
          uint64_t v39 = v0[18];
          uint64_t v37 = v0[20];
          uint64_t v11 = v0[16];
          uint64_t v40 = v0[14];
          uint64_t v41 = v0[15];
          uint64_t v36 = v0[13];
          uint64_t v42 = v0[12];
          uint64_t v43 = v0[11];
          uint64_t v12 = sub_100003A70(&qword_10015B408);
          sub_10000ED60();
          uint64_t v13 = v1;
          uint64_t v44 = v14;
          unint64_t v15 = *(void (**)(void))(v14 + 16);
          sub_1000E0F88();
          v15();
          unint64_t v16 = *(void *)(v13 + 56) + *(void *)(v45 + 72) * v6;
          uint64_t v17 = *(void (**)(void))(v45 + 16);
          ((void (*)(uint64_t, unint64_t, uint64_t))v17)(v9, v16, v10);
          sub_1000E0F88();
          v15();
          sub_1000E0FA8();
          v17();
          sub_1000E0E0C(v11, v41);
          sub_1000E0E74(v8);
          uint64_t v18 = v40 + *(int *)(v33 + 48);
          sub_1000E0F88();
          v15();
          sub_1000E0FA8();
          v17();
          uint64_t v19 = v36 + *(int *)(v33 + 48);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v36, v40, v12);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v19, v18, v10);
          uint64_t v20 = v42 + *(int *)(v33 + 48);
          sub_1000E0F88();
          v15();
          sub_1000E0FA8();
          v17();
          sub_1000E0F88();
          v15();
          sub_1000E0FA8();
          v17();
          StateDump.InferenceProviderState.ActiveRequest.init(request:priority:)();
          sub_1000E0E74(v36);
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v12);
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v20, v10);
          uint64_t v21 = *v30;
          ((void (*)(uint64_t, uint64_t, uint64_t))*v30)(v38, v37, v39);
          sub_1000E0E74(v41);
          uint64_t v22 = v46;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000E0FEC();
            sub_10001F1CC();
            uint64_t v22 = v46;
          }
          unint64_t v23 = v22[2];
          uint64_t v0 = v32;
          if (v23 >= v22[3] >> 1)
          {
            sub_10001F1CC();
            uint64_t v22 = v46;
          }
          v22[2] = v23 + 1;
          sub_1000E0F98();
          uint64_t v3 = v21(v25 + *(void *)(v24 + 72) * v23);
          uint64_t v46 = v22;
          uint64_t v1 = v31;
          if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(v31 + 32))) {
            goto LABEL_23;
          }
          uint64_t v7 = v29;
          if ((*(void *)(v29 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_24;
          }
          if (v35 != *(_DWORD *)(v31 + 36)) {
            goto LABEL_25;
          }
          uint64_t v3 = _HashTable.occupiedBucket(after:)();
          uint64_t v2 = v34 - 1;
          if (v34 == 1) {
            goto LABEL_18;
          }
          unint64_t v6 = v3;
          if ((v3 & 0x8000000000000000) == 0)
          {
            uint64_t v4 = *(unsigned int *)(v31 + 36);
            if (v3 < 1 << *(unsigned char *)(v31 + 32)) {
              continue;
            }
          }
          goto LABEL_26;
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
      }
    }
LABEL_26:
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v26 = v0[9];
    sub_10001787C();
    v0[29] = v27;
    uint64_t v3 = (uint64_t)sub_1000DF7A8;
    uint64_t v4 = v26;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000DF7A8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_100043D2C();
  uint64_t v2 = sub_1000E0FD4();
  v3(v2);
  *(void *)(v0 + 240) = *(void *)(v1
                                    + OBJC_IVAR____TtC13modelmanagerd36InferenceProviderExtensionConnection_loadingCount);
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000DF85C()
{
  StateDump.InferenceProviderState.init(pid:descriptor:activeRequests:activePriority:loadingCount:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000DF974()
{
  sub_10002FAAC();
  uint64_t v51 = v3;
  uint64_t v52 = v2;
  uint64_t v5 = v4;
  type metadata accessor for Date();
  sub_10000ED60();
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  __chkstk_darwin(v6, v8);
  sub_100030158();
  uint64_t v48 = v9;
  __chkstk_darwin(v10, v11);
  uint64_t v47 = (char *)v39 - v12;
  sub_1000CAD38();
  type metadata accessor for LoadState();
  sub_10000ED60();
  uint64_t v45 = v14;
  uint64_t v46 = v13;
  __chkstk_darwin(v13, v15);
  sub_100030144();
  uint64_t v44 = v16;
  sub_1000CAD38();
  uint64_t v17 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v18 = sub_10002FDD0(v17);
  __chkstk_darwin(v18, v19);
  sub_100030144();
  uint64_t v53 = v20;
  sub_1000CAD38();
  type metadata accessor for AssetCost();
  sub_10000ED60();
  __chkstk_darwin(v21, v22);
  sub_10000F0D0();
  uint64_t v40 = v24 - v23;
  uint64_t v25 = type metadata accessor for InferenceProviderAssetDescriptor();
  sub_10000ED60();
  uint64_t v27 = v26;
  __chkstk_darwin(v28, v29);
  sub_1000CF930();
  uint64_t v42 = v1;
  uint64_t v30 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState(0);
  __chkstk_darwin(v30, v31);
  sub_100057F20();
  uint64_t v32 = v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v43 = type metadata accessor for InferenceProviderAsset.ManagerOwnedState;
  sub_1000E0ED4(v32, v0, (void (*)(void))type metadata accessor for InferenceProviderAsset.ManagerOwnedState);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v1, v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_descriptor, v25);
  uint64_t v41 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_path);
  sub_1000E1004();
  v33();
  v39[3] = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable);
  v39[2] = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_dynamicModeAllowed);
  v39[1] = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_useEnergyEfficientMode);
  uint64_t v35 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 24);
  uint64_t v34 = *(void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection + 32);
  sub_10000853C((void *)(v5 + OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_inferenceProviderConnection), v35);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  swift_bridgeObjectRetain();
  v36(v35, v34);
  sub_100030274();
  v37();
  uint64_t v38 = *(void (**)(void))(v49 + 16);
  sub_1000E1004();
  v38();
  sub_1000E1004();
  v38();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  StateDump.AssetState.init(descriptor:path:cost:isCacheable:dynamicModeAllowed:useEnergyEfficientMode:inferenceProvider:loadState:timeLastRequestEnded:timeLastForegroundSessionEnded:requiredByOtherAssets:foregroundSessions:requests:)();
  swift_release();
  swift_release();
  sub_1000E0F30(v0, (void (*)(void))v43);
  sub_10002FAC4();
}

void sub_1000DFD4C()
{
  sub_10002FAAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v85 = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_100057F20();
  uint64_t v12 = type metadata accessor for DaemonSessionState();
  sub_10000ED60();
  uint64_t v14 = v13;
  __chkstk_darwin(v15, v16);
  uint64_t v17 = sub_1000E0FB8();
  uint64_t v18 = type metadata accessor for DaemonSession.ManagerOwnedState(v17);
  sub_10002FB84();
  __chkstk_darwin(v19, v20);
  sub_100030144();
  uint64_t v81 = v21;
  uint64_t v22 = sub_100003A70(&qword_10015B9A0);
  uint64_t v23 = sub_10002FDD0(v22);
  __chkstk_darwin(v23, v24);
  sub_100030144();
  uint64_t v80 = v25;
  Session.Metadata.id.getter();
  uint64_t v26 = Session.Metadata.supportedAssetBundleIdentifiers.getter();
  uint64_t v79 = sub_100016C4C(v26);
  uint64_t v27 = Session.Metadata.useCaseID.getter();
  uint64_t v77 = v28;
  uint64_t v78 = v27;
  uint64_t v29 = Session.Metadata.onBehalfOfPID.getter();
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v29 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v69 = v29;
  uint64_t v70 = v18;
  uint64_t v71 = v14;
  uint64_t v72 = v1;
  uint64_t v73 = v12;
  uint64_t v74 = v7;
  uint64_t v76 = v3;
  HIDWORD(v68) = AuditToken.processIdentifier.getter();
  uint64_t v75 = v5;
  uint64_t v30 = v5 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  sub_100043D2C();
  uint64_t v67 = v30;
  sub_1000E0ED4(v30, v81, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  uint64_t v31 = *(void *)(v81 + 8);
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = sub_100102364(v32);
  if (!v33)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    sub_1000E0F30(v81, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    sub_1000176B4();
    sub_100030274();
    v65();
    StateDump.SessionState.init(identifier:supportedAssets:useCaseIdentifier:onBehalfOfPID:createdByPID:requests:state:)();
    swift_release();
    swift_release();
    sub_10002FAC4();
    return;
  }
  uint64_t v34 = v33;
  unint64_t v90 = _swiftEmptyArrayStorage;
  sub_10001F138(0, v33 & ~(v33 >> 63), 0);
  unint64_t v84 = v31 & 0xC000000000000001;
  if ((v31 & 0xC000000000000001) != 0)
  {
    uint64_t v35 = __CocoaSet.startIndex.getter();
    char v37 = 1;
  }
  else
  {
    uint64_t v35 = sub_10002E3C4(v31);
    char v37 = v38 & 1;
  }
  uint64_t v87 = v35;
  uint64_t v88 = v36;
  char v89 = v37;
  if ((v34 & 0x8000000000000000) == 0)
  {
    uint64_t v39 = v31 & 0xFFFFFFFFFFFFFF8;
    if (v31 < 0) {
      uint64_t v39 = v31;
    }
    uint64_t v82 = v39;
    uint64_t v83 = v9 + 32;
    do
    {
      uint64_t v40 = v87;
      uint64_t v41 = v88;
      char v42 = v89;
      uint64_t v43 = sub_1000E1014();
      sub_10011BF9C(v43, v44, v45, v46, v47, v48, v49, v50, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86[0],
        v86[1]);
      RequestMetadata.id.getter();
      swift_release();
      uint64_t v51 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F138(0, v51[2] + 1, 1);
        uint64_t v51 = v90;
      }
      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_10001F138(v52 > 1, v53 + 1, 1);
        uint64_t v51 = v90;
      }
      v51[2] = v53 + 1;
      sub_1000E0F98();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v54 + *(void *)(v9 + 72) * v53, v0, v85);
      if (v84)
      {
        if ((v42 & 1) == 0) {
          goto LABEL_28;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100003A70(&qword_10015E708);
        uint64_t v64 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v64(v86, 0);
      }
      else
      {
        uint64_t v55 = sub_1000E1014();
        uint64_t v59 = sub_10002E2DC(v55, v56, v57, v58);
        uint64_t v61 = v60;
        char v63 = v62;
        sub_10000E60C(v40, v41, v42);
        uint64_t v87 = v59;
        uint64_t v88 = v61;
        char v89 = v63 & 1;
      }
      --v34;
    }
    while (v34);
    sub_10000E60C(v87, v88, v89);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

void sub_1000E0250()
{
  sub_10002FAAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v7 = sub_10002FA4C(v6);
  uint64_t v60 = v8;
  __chkstk_darwin(v7, v9);
  sub_100030158();
  uint64_t v59 = (uint64_t *)v10;
  __chkstk_darwin(v11, v12);
  uint64_t v58 = (uint64_t)v55 - v13;
  sub_1000CAD38();
  uint64_t v14 = type metadata accessor for RequestPriority();
  uint64_t v15 = sub_10002FDD0(v14);
  __chkstk_darwin(v15, v16);
  sub_1000E0FB8();
  uint64_t v17 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v18 = sub_10002FDD0(v17);
  __chkstk_darwin(v18, v19);
  sub_10000F0D0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = sub_100003A70(&qword_10015B9A0);
  uint64_t v24 = sub_10002FDD0(v23);
  __chkstk_darwin(v24, v25);
  sub_10000F0D0();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = sub_100003A70(&qword_10015B408);
  uint64_t v30 = sub_10002FDD0(v29);
  __chkstk_darwin(v30, v31);
  sub_1000CF930();
  RequestMetadata.id.getter();
  RequestMetadata.sessionID.getter();
  uint64_t v32 = v3[2];
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = _swiftEmptyArrayStorage;
  if (v33)
  {
    v55[1] = v1;
    v55[2] = v28;
    v55[3] = v22;
    v55[4] = v0;
    v55[5] = v5;
    uint64_t v56 = v3;
    uint64_t v61 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10001EDA8(0, v33, 0);
    uint64_t v35 = sub_10002E3C4(v32);
    uint64_t v37 = v36;
    char v39 = v38 & 1;
    uint64_t v57 = v32 + 56;
    while ((v35 & 0x8000000000000000) == 0 && v35 < 1 << *(unsigned char *)(v32 + 32))
    {
      if (((*(void *)(v57 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(v32 + 36) != v37) {
        goto LABEL_16;
      }
      uint64_t v40 = v58;
      sub_1000E0ED4(*(void *)(v32 + 48) + *(void *)(v60 + 72) * v35, v58, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v41 = v59;
      sub_10000E54C(v40, (uint64_t)v59);
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      swift_bridgeObjectRetain();
      sub_1000E0F30((uint64_t)v41, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v34 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v44 = sub_1000E0FEC();
        sub_10001EDA8(v44, v45, v46);
        uint64_t v34 = v61;
      }
      unint64_t v48 = v34[2];
      unint64_t v47 = v34[3];
      if (v48 >= v47 >> 1)
      {
        sub_10001EDA8(v47 > 1, v48 + 1, 1);
        uint64_t v34 = v61;
      }
      v34[2] = v48 + 1;
      uint64_t v49 = &v34[2 * v48];
      v49[4] = v43;
      v49[5] = v42;
      uint64_t v50 = sub_10002E2DC(v35, v37, v39 & 1, v32);
      uint64_t v35 = v50;
      uint64_t v37 = v51;
      char v39 = v52 & 1;
      if (!--v33)
      {
        sub_10000E60C(v50, v51, v52 & 1);
        swift_bridgeObjectRelease();
        uint64_t v3 = v56;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_13:
    sub_100016C4C((uint64_t)v34);
    uint64_t v53 = v3[6];
    uint64_t v54 = v3[7];
    sub_10000853C(v3 + 3, v53);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
    sub_10011EF24();
    StateDump.RequestState.init(identifier:session:asset:inferenceProvider:priority:)();
    swift_release();
    sub_10002FAC4();
  }
}

void sub_1000E05FC()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v32 = type metadata accessor for StateDump.RequestState();
  sub_10000ED60();
  uint64_t v31 = v2;
  __chkstk_darwin(v3, v4);
  sub_100030144();
  uint64_t v30 = v5;
  sub_100003A70(&qword_10015E710);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100129FC0;
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_100043D2C();
  uint64_t v8 = *v7;
  uint64_t v34 = v7[1];
  uint64_t v9 = v7[2];
  *(void *)(inited + 32) = v8;
  *(void *)(inited + 40) = v34;
  *(void *)(inited + 48) = v9;
  uint64_t v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_100043D2C();
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 72) = v13;
  uint64_t v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_100043D2C();
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  *(void *)(inited + 80) = v15;
  *(void *)(inited + 88) = v16;
  *(void *)(inited + 96) = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v19 = *(void *)(*(void *)(inited + 32 + 24 * i + 16) + 16);
    if (v19)
    {
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      uint64_t v20 = 0;
      uint64_t v33 = v19;
      do
      {
        uint64_t v21 = v20 + 1;
        sub_100043D2C();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_100116B0C();
        uint64_t v23 = v22;
        swift_bridgeObjectRetain();
        sub_100116B0C();
        uint64_t v25 = v24;
        swift_bridgeObjectRelease();
        sub_100116744(v25);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        sub_100116744(v23);
        uint64_t v20 = v21;
      }
      while (v33 != v21);
      swift_release();
      swift_release_n();
      swift_release_n();
      swift_release_n();
    }
    else
    {
      swift_retain();
    }
    swift_release();
    sub_100116744(_swiftEmptyArrayStorage);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_100068D8C();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v26) {
    goto LABEL_19;
  }
  sub_10001F0D4();
  if ((v26 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = 0;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      sub_1000E0250();
      unint64_t v28 = _swiftEmptyArrayStorage[2];
      if (v28 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_10001F0D4();
      }
      ++v27;
      _swiftEmptyArrayStorage[2] = v28 + 1;
      sub_1000E0F98();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(v29 + *(void *)(v31 + 72) * v28, v30, v32);
    }
    while (v26 != v27);
LABEL_19:
    swift_bridgeObjectRelease();
    sub_1000175A8();
    sub_10002FAC4();
    return;
  }
  __break(1u);
}

void sub_1000E0B58()
{
  sub_100043D2C();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1000DD930(v0);
  swift_bridgeObjectRelease();
  sub_1000176B4();
}

uint64_t sub_1000E0BCC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_100043D2C();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000DDC68(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_100043D2C();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000DDC68(v6, v7, v8);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_100043D2C();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v9[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000DDC68(v10, v11, v12);
  swift_release();
  swift_release();
  swift_release();
  return StateDump.ExecutionGroupsState.init(active:pendingForeground:pendingBackground:)();
}

uint64_t sub_1000E0D8C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000E0E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015E700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0E74(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015E700);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E0ED4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FB84();
  sub_100030274();
  v4();
  return a2;
}

uint64_t sub_1000E0F30(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FB84();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000E0FB8()
{
  return 0;
}

uint64_t sub_1000E0FD4()
{
  return v0;
}

uint64_t sub_1000E0FEC()
{
  return 0;
}

uint64_t sub_1000E1014()
{
  return v0;
}

void *sub_1000E1028(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for InferenceProviderDescriptor.Instance();
  uint64_t v4 = *(void *)(v42 - 8);
  uint64_t v6 = __chkstk_darwin(v42, v5);
  uint64_t v43 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (uint64_t *)((char *)&v29 - v10);
  __chkstk_darwin(v9, v12);
  uint64_t v41 = (char *)&v29 - v13;
  uint64_t v40 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v14 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (v18)
  {
    uint64_t v29 = v2;
    char v46 = _swiftEmptyArrayStorage;
    sub_10001EDF8();
    uint64_t v19 = v46;
    unsigned int v31 = enum case for InferenceProviderDescriptor.Instance.specificInstance(_:);
    uint64_t v21 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
    uint64_t v20 = v4 + 104;
    uint64_t v36 = v21;
    unsigned int v30 = enum case for InferenceProviderDescriptor.Instance.defaultInstance(_:);
    uint64_t v34 = (void (**)(char *, char *, uint64_t))(v20 - 88);
    uint64_t v35 = (void (**)(char *, void *, uint64_t))(v20 - 72);
    char v38 = v11;
    uint64_t v39 = v20;
    uint64_t v32 = v14 + 32;
    uint64_t v33 = (void (**)(char *, uint64_t))(v20 - 96);
    uint64_t v22 = a2 + 64;
    uint64_t v37 = v14;
    uint64_t v23 = v42;
    do
    {
      char v44 = v19;
      uint64_t v45 = v18;
      uint64_t v24 = *(void *)(v22 - 8);
      if (v24)
      {
        *uint64_t v11 = *(void *)(v22 - 16);
        v11[1] = v24;
        uint64_t v25 = v31;
      }
      else
      {
        uint64_t v25 = v30;
      }
      v36(v11, v25, v23);
      uint64_t v26 = v41;
      (*v35)(v41, v11, v23);
      (*v34)(v43, v26, v23);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      InferenceProviderDescriptor.init(id:instance:hostedOnServer:)();
      (*v33)(v26, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v44;
      char v46 = v44;
      unint64_t v27 = v44[2];
      if (v27 >= v44[3] >> 1)
      {
        sub_10001EDF8();
        uint64_t v19 = v46;
      }
      v22 += 40;
      v19[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v27, v17, v40);
      uint64_t v18 = v45 - 1;
      uint64_t v11 = v38;
    }
    while (v45 != 1);
  }
  return v19;
}

#error "1000E145C: call analysis failed (funcsize=131)"

void sub_1000E15C4()
{
  sub_1000E83A8();
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + v0 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_1000E80F0(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1000E164C()
{
  uint64_t v1 = Session.Metadata.supportedAssetBundleIdentifiers.getter();
  uint64_t v2 = *(void *)(sub_100016C4C(v1) + 16);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (qword_10015B108 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003B18(v15, (uint64_t)qword_10015E720);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)sub_10002FF90();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_retain();
      uint64_t v19 = sub_1000E712C();
      unint64_t v21 = v20;
      swift_release();
      sub_10001DF20(v19, v21, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10000F050();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Session %s doesn't have any asset bundle identifiers", v18, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_10000F050();
    }
    type metadata accessor for ModelManagerError();
    sub_1000E72C8((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10004415C();
    sub_10002FC6C();
    sub_100043E9C();
    v22();
    swift_willThrow();
    return sub_100043F9C();
  }
  uint64_t v3 = Session.Metadata.supportedAssetBundleIdentifiers.getter();
  sub_100016C4C(v3);
  swift_bridgeObjectRetain();
  sub_100116F4C();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t v24 = v5;
  sub_1000E7494((uint64_t *)&v24);
  if (!v0)
  {
    swift_bridgeObjectRelease();
    if (v24[2])
    {
      uint64_t v6 = v24[4];
      unint64_t v7 = v24[5];
      swift_bridgeObjectRetain();
      swift_release();
      if (qword_10015B108 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100003B18(v8, (uint64_t)qword_10015E720);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315394;
        swift_retain();
        uint64_t v12 = sub_1000E712C();
        unint64_t v14 = v13;
        swift_release();
        sub_10001DF20(v12, v14, (uint64_t *)&v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F050();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_10001DF20(v6, v7, (uint64_t *)&v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Session %s selected asset bundle identifier %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        sub_10000F050();
      }
      return sub_100043F9C();
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000E1AF8()
{
  swift_getKeyPath();
  uint64_t v0 = sub_1000E3600();
  swift_release();
  return v0;
}

uint64_t sub_1000E1B50@<X0>(uint64_t a1@<X8>)
{
  return swift_release();
}

uint64_t sub_1000E1BA8()
{
  sub_1000086E0();
  uint64_t v3 = v2;
  v1[16] = v4;
  v1[17] = v0;
  v1[15] = v2;
  uint64_t v5 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  v1[18] = v5;
  sub_10002FDD0(v5);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DaemonSessionState();
  v1[21] = v6;
  sub_10002FA4C(v6);
  v1[22] = v7;
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000E1C84, v3, 0);
}

uint64_t sub_1000E1C84()
{
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v7 = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  v0[24] = OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  uint64_t v8 = v5 + v7;
  sub_1000E84B4();
  uint64_t v9 = v8 + *(int *)(v6 + 24);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
  uint64_t v10 = enum case for DaemonSessionState.cancellationInProgress(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  v0[25] = v11;
  v0[26] = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v11(v9, v10, v3);
  uint64_t v12 = *(void *)(v8 + 8);
  swift_endAccess();
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DaemonRequest();
    sub_1000E72C8(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v12 = v0[2];
    uint64_t v14 = v0[3];
    uint64_t v16 = v0[4];
    uint64_t v15 = v0[5];
    unint64_t v17 = v0[6];
  }
  else
  {
    uint64_t v18 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v14 = v12 + 56;
    uint64_t v16 = ~v18;
    uint64_t v19 = -v18;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v17 = v20 & *(void *)(v12 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v15 = 0;
  }
  v0[28] = v14;
  v0[29] = v16;
  v0[27] = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
    if (v17)
    {
      uint64_t v14 = (v17 - 1) & v17;
      unint64_t v21 = __clz(__rbit64(v17)) | (v15 << 6);
      uint64_t v16 = v15;
LABEL_10:
      uint64_t v12 = *(void *)(*(void *)(v12 + 48) + 8 * v21);
      swift_retain();
      goto LABEL_13;
    }
    int64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      return result;
    }
    unint64_t v28 = v16 + 64;
    if (v27 < (uint64_t)((unint64_t)(v16 + 64) >> 6))
    {
      uint64_t v16 = v15 + 1;
      if (*(void *)(v14 + 8 * v27))
      {
LABEL_20:
        sub_100030534();
        uint64_t v14 = v30 & v29;
        unint64_t v21 = v31 + (v16 << 6);
        goto LABEL_10;
      }
      int64_t v32 = v28 >> 6;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < v32)
      {
        if (*(void *)(v14 + 8 * v16)) {
          goto LABEL_20;
        }
        uint64_t v16 = v15 + 3;
        if (v15 + 3 < v32)
        {
          if (*(void *)(v14 + 8 * v16)) {
            goto LABEL_20;
          }
          uint64_t v16 = v15 + 4;
          if (v15 + 4 < v32)
          {
            if (!*(void *)(v14 + 8 * v16))
            {
              uint64_t v33 = v15 + 5;
              do
              {
                if (v33 >= v32) {
                  goto LABEL_31;
                }
              }
              while (!*(void *)(v14 + 8 * v33++));
              uint64_t v16 = v33 - 1;
            }
            goto LABEL_20;
          }
        }
      }
    }
LABEL_31:
    sub_1000E83D0();
    ((void (*)(uint64_t, void, uint64_t))v15)(v14, enum case for DaemonSessionState.cancelled(_:), v1);
    sub_1000E8018(v2, v16, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    uint64_t v35 = sub_1000E8430();
    v36(v35);
    sub_1000E8018(v16, v12, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    sub_1000E84B4();
    sub_100042BD0(v12, v2);
    swift_endAccess();
    sub_1000E7358(v16, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    __asm { BRAA            X1, X16 }
  }
  v12 &= ~0x8000000000000000;
  uint64_t v22 = __CocoaSet.Iterator.next()();
  if (!v22) {
    goto LABEL_31;
  }
  sub_1000E8550(v22);
  swift_unknownObjectRetain();
  sub_1000E84E0();
  uint64_t v12 = *(void *)v12;
  swift_unknownObjectRelease();
  uint64_t v16 = v15;
  uint64_t v14 = v17;
LABEL_13:
  v0[31] = v16;
  v0[32] = v14;
  v0[30] = v12;
  if (!v12) {
    goto LABEL_31;
  }
  uint64_t v23 = (void *)swift_task_alloc();
  v0[33] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1000E2080;
  sub_1000307C8();
  return sub_100120804(v24, v25);
}

uint64_t sub_1000E2080()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E2168, v1, 0);
}

uint64_t sub_1000E2168()
{
  uint64_t result = swift_release();
  uint64_t v7 = (char *)v1[31];
  unint64_t v8 = v1[32];
  uint64_t v9 = v1[27];
  if ((v9 & 0x8000000000000000) == 0)
  {
    if (v8)
    {
      uint64_t v3 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | ((void)v7 << 6);
      uint64_t v2 = (char *)v1[31];
LABEL_4:
      uint64_t v0 = *(void **)(*(void *)(v9 + 48) + 8 * v10);
      swift_retain();
      goto LABEL_7;
    }
    int64_t v16 = (int64_t)(v7 + 1);
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      return result;
    }
    unint64_t v17 = v1[29] + 64;
    if (v16 < (uint64_t)(v17 >> 6))
    {
      uint64_t v18 = v1[28];
      unint64_t v19 = *(void *)(v18 + 8 * v16);
      uint64_t v2 = v7 + 1;
      if (v19)
      {
LABEL_14:
        uint64_t v3 = (v19 - 1) & v19;
        unint64_t v10 = __clz(__rbit64(v19)) + ((void)v2 << 6);
        goto LABEL_4;
      }
      int64_t v20 = v17 >> 6;
      uint64_t v2 = v7 + 2;
      if ((uint64_t)(v7 + 2) < v20)
      {
        unint64_t v19 = *(void *)(v18 + 8 * (void)v2);
        if (v19) {
          goto LABEL_14;
        }
        uint64_t v2 = v7 + 3;
        if ((uint64_t)(v7 + 3) < v20)
        {
          unint64_t v19 = *(void *)(v18 + 8 * (void)v2);
          if (v19) {
            goto LABEL_14;
          }
          uint64_t v2 = v7 + 4;
          if ((uint64_t)(v7 + 4) < v20)
          {
            unint64_t v19 = *(void *)(v18 + 8 * (void)v2);
            if (!v19)
            {
              uint64_t v21 = (uint64_t)(v7 + 5);
              do
              {
                if (v21 >= v20) {
                  goto LABEL_25;
                }
                unint64_t v19 = *(void *)(v18 + 8 * v21++);
              }
              while (!v19);
              uint64_t v2 = (char *)(v21 - 1);
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_25:
    sub_1000E83D0();
    ((void (*)(char *, void, uint64_t))v7)(v2, enum case for DaemonSessionState.cancelled(_:), v4);
    sub_1000E8018(v5, v3, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    uint64_t v22 = sub_1000E8430();
    v23(v22);
    sub_1000E8018(v3, (uint64_t)v0, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    sub_1000E84B4();
    sub_100042BD0((uint64_t)v0, v5);
    swift_endAccess();
    sub_1000E7358(v3, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000307C8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v0 = (void *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v11 = __CocoaSet.Iterator.next()();
  if (!v11) {
    goto LABEL_25;
  }
  sub_1000E8550(v11);
  swift_unknownObjectRetain();
  sub_1000E84E0();
  uint64_t v0 = (void *)*v0;
  swift_unknownObjectRelease();
  uint64_t v2 = v7;
  uint64_t v3 = v8;
LABEL_7:
  v1[31] = v2;
  v1[32] = v3;
  v1[30] = v0;
  if (!v0) {
    goto LABEL_25;
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v1[33] = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_1000E2080;
  sub_1000307C8();
  return sub_100120804(v13, v14);
}

void sub_1000E2430()
{
  sub_1000B9F04();
  uint64_t v34 = v1;
  uint64_t v2 = v0;
  sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v38 = v4;
  uint64_t v39 = v3;
  __chkstk_darwin(v3, v5);
  sub_10000F0D0();
  uint64_t v36 = v7 - v6;
  uint64_t v8 = type metadata accessor for DaemonSessionState();
  sub_10000ED60();
  unint64_t v10 = v9;
  __chkstk_darwin(v11, v12);
  sub_100030158();
  uint64_t v41 = v13;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v34 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v37 = v2;
  uint64_t v22 = v2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v23 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v10[2];
  v24(v21, v22 + *(int *)(v23 + 24), v8);
  uint64_t v35 = (void (*)(char *, void, uint64_t))v10[13];
  v35(v18, enum case for DaemonSessionState.cancelled(_:), v8);
  LOBYTE(v22) = sub_100101C88((uint64_t)v21, (uint64_t)v18);
  uint64_t v25 = (void (*)(void))v10[1];
  sub_1000E8410();
  v25();
  uint64_t v40 = v21;
  v24((char *)v41, (uint64_t)v21, v8);
  if (v22)
  {
    sub_1000E8410();
    v25();
  }
  else
  {
    v35(v18, enum case for DaemonSessionState.cancellationInProgress(_:), v8);
    char v26 = sub_100101C88(v41, (uint64_t)v18);
    sub_1000E8410();
    v25();
    sub_1000E8410();
    v25();
    if ((v26 & 1) == 0)
    {
      sub_1000E8410();
      v25();
      goto LABEL_10;
    }
  }
  if (qword_10015B108 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100003B18(v27, (uint64_t)qword_10015E720);
  unint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "session cancelled, returning error", v30, 2u);
    sub_10000ED7C();
  }

  type metadata accessor for ModelManagerError();
  sub_1000E72C8((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10004415C();
  uint64_t v31 = v36;
  Session.Metadata.id.getter();
  uint64_t v32 = v39;
  UUIDIdentifier.uuid.getter();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v31, v32);
  sub_10002FC6C();
  sub_100043E9C();
  v33();
  swift_willThrow();
  sub_1000E8410();
  v25();
LABEL_10:
  sub_1000B99C8();
}

uint64_t sub_1000E2808()
{
  swift_getKeyPath();
  uint64_t v0 = sub_1000E389C();
  swift_release();
  return v0;
}

uint64_t sub_1000E2868(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_1000E8450();
  __chkstk_darwin(v8, v9);
  sub_1000E8540();
  uint64_t v10 = v2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000E8018(v10, v1, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_retain();
  swift_retain();
  sub_100020418(&v12, a1);
  swift_release();
  swift_release();
  sub_1000E8018(v1, v3, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_beginAccess();
  sub_100042BD0(v3, v10);
  swift_endAccess();
  return sub_1000E7358(v1, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
}

#error "1000E2A44: call analysis failed (funcsize=74)"

uint64_t sub_1000E2AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return _swift_task_switch(sub_1000E2B04, a2, 0);
}

uint64_t sub_1000E2B04()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8] + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100011E40((uint64_t (*)(uint64_t *))sub_1000E8154, v4, v3);
  v0[9] = v5;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v5)
  {
    uint64_t v6 = *(void *)(v0[8] + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_requestManager);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[10] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000E2D24;
    uint64_t v8 = v0[7];
    return sub_100120804(v6, v8);
  }
  else
  {
    type metadata accessor for ModelManagerError();
    sub_1000E72C8((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    sub_100003A70(&qword_10015B408);
    UUIDIdentifier.uuid.getter();
    sub_10002FC6C();
    sub_100043E9C();
    v10();
    swift_willThrow();
    sub_10000EF7C();
    return v11();
  }
}

uint64_t sub_1000E2D24()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E2E0C, v1, 0);
}

uint64_t sub_1000E2E0C()
{
  sub_1000086E0();
  swift_release();
  sub_10000EF7C();
  return v0();
}

void sub_1000E2E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B9F04();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  uint64_t v26 = v25;
  uint64_t v101 = v27;
  uint64_t v28 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v29 = sub_10002FA4C(v28);
  uint64_t v105 = v30;
  __chkstk_darwin(v29, v31);
  sub_10000F0C0();
  uint64_t v34 = v32 - v33;
  __chkstk_darwin(v35, v36);
  uint64_t v38 = (char *)&v93 - v37;
  uint64_t v39 = type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  uint64_t v102 = v40;
  __chkstk_darwin(v41, v42);
  sub_100057F20();
  uint64_t v43 = sub_100003A70(&qword_10015C010);
  uint64_t v44 = sub_10002FDD0(v43);
  __chkstk_darwin(v44, v45);
  sub_10000F0D0();
  uint64_t v48 = v47 - v46;
  sub_1000E4D38(v26, v49, v50, v51, v52, v53, v54, v55, v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, v101, v102, (uint64_t)v103,
    (uint64_t)v104);
  if (v20)
  {
LABEL_20:
    sub_1000B99C8();
    return;
  }
  uint64_t v58 = v57;
  uint64_t v99 = v56;
  uint64_t v100 = v21;
  uint64_t v59 = v102;
  uint64_t v103 = v38;
  uint64_t v104 = (uint64_t *)v34;
  sub_1000E3448(v57, v48);
  if (sub_100006AE8(v48, 1, v39) != 1)
  {
    uint64_t v98 = v58;
    uint64_t v60 = (uint64_t *)v59;
    uint64_t v61 = v101;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v101, v48, v39);
    if (qword_10015B108 != -1) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v62 = type metadata accessor for Logger();
      sub_100003B18(v62, (uint64_t)qword_10015E720);
      uint64_t v63 = v100;
      ((void (*)(uint64_t, uint64_t, uint64_t))v60[2])(v100, v61, v39);
      swift_bridgeObjectRetain_n();
      uint64_t v64 = Logger.logObject.getter();
      uint64_t v61 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v64, (os_log_type_t)v61))
      {
        swift_release();
        swift_release();
        ((void (*)(uint64_t, uint64_t))v60[1])(v63, v39);

        swift_bridgeObjectRelease_n();
        goto LABEL_20;
      }
      unint64_t v94 = v64;
      uint64_t v97 = v24;
      uint64_t v65 = sub_10002FF90();
      uint64_t v101 = v39;
      uint64_t v39 = v65;
      uint64_t v96 = swift_slowAlloc();
      a10 = v96;
      *(_DWORD *)uint64_t v39 = 136315650;
      uint64_t v66 = _typeName(_:qualified:)();
      uint64_t v106 = sub_10001DF20(v66, v67, &a10);
      uint64_t v68 = v60;
      uint64_t v60 = &a9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2080;
      sub_1000E72C8(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      uint64_t v69 = v101;
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = sub_10001DF20(v70, v71, &a10);
      sub_1000E8524(v72);
      uint64_t v95 = &a9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v68[1])(v63, v69);
      *(_WORD *)(v39 + 22) = 2080;
      uint64_t v73 = *(void *)(v26 + 16);
      if (!v73) {
        break;
      }
      HIDWORD(v93) = v61;
      uint64_t v100 = v39;
      char v74 = sub_1000E8514();
      sub_10001EDA8(v74, v73, 0);
      uint64_t v24 = sub_10002E3C4(v26);
      sub_1000E85B8();
      uint64_t v101 = v26;
      uint64_t v102 = v26 + 56;
      while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(v26 + 32))
      {
        if (((*(void *)(v102 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
          goto LABEL_22;
        }
        if (*(_DWORD *)(v26 + 36) != &a9) {
          goto LABEL_23;
        }
        uint64_t v75 = (uint64_t)v103;
        sub_1000E8018(*(void *)(v26 + 48) + *(void *)(v105 + 72) * v24, (uint64_t)v103, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        uint64_t v76 = v104;
        sub_10000E54C(v75, (uint64_t)v104);
        uint64_t v77 = *v76;
        uint64_t v78 = v76[1];
        swift_bridgeObjectRetain();
        sub_1000E7358((uint64_t)v76, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        uint64_t v79 = v106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100044278();
          uint64_t v79 = v106;
        }
        unint64_t v81 = *(void *)(v79 + 16);
        unint64_t v80 = *(void *)(v79 + 24);
        uint64_t v39 = v81 + 1;
        if (v81 >= v80 >> 1)
        {
          sub_10001EDA8(v80 > 1, v81 + 1, 1);
          uint64_t v79 = v106;
        }
        *(void *)(v79 + 16) = v39;
        unint64_t v82 = v79 + 16 * v81;
        *(void *)(v82 + 32) = v77;
        *(void *)(v82 + 40) = v78;
        uint64_t v83 = sub_100043F9C();
        uint64_t v26 = v101;
        uint64_t v24 = sub_10002E2DC(v83, v84, v85, v101);
        sub_1000E85B8();
        if (!--v73)
        {
          uint64_t v86 = sub_100043F9C();
          sub_10000E60C(v86, v87, v61);
          uint64_t v88 = v94;
          uint64_t v39 = v100;
          LOBYTE(v61) = BYTE4(v93);
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_once();
    }
    uint64_t v88 = v94;
LABEL_19:
    uint64_t v89 = Array.description.getter();
    unint64_t v91 = v90;
    swift_bridgeObjectRelease();
    uint64_t v92 = sub_10001DF20(v89, v91, &a10);
    sub_1000E8524(v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v61, "Session %s selected inference provider %s for assets %s", (uint8_t *)v39, 0x20u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
    swift_release();

    swift_release();
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_1000E3448@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return sub_100006960(a2, v7, 1, v6);
}

uint64_t sub_1000E34F0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E720);
  sub_100003B18(v0, (uint64_t)qword_10015E720);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

void sub_1000E3564(uint64_t a1, char a2)
{
}

BOOL sub_1000E358C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int sub_1000E359C(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E35E4()
{
  return sub_1000E359C(*v0);
}

void sub_1000E35EC(uint64_t a1)
{
  sub_1000E3564(a1, *v1);
}

BOOL sub_1000E35F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000E358C(*a1, *a2);
}

uint64_t sub_1000E3600()
{
  uint64_t v1 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1000E3978();
  if (!result)
  {
    uint64_t result = sub_1000E3B88();
    if (!v0)
    {
      uint64_t result = swift_getAtKeyPath();
      if (v7)
      {
        sub_1000E7358((uint64_t)v4, (void (*)(void))type metadata accessor for DaemonSession.LazyState);
        return v7;
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1000E36D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003A70(&qword_10015C010);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v17 - v13;
  sub_1000E3A28();
  uint64_t v15 = type metadata accessor for InferenceProviderDescriptor();
  if (sub_100006AE8((uint64_t)v14, 1, v15) == 1)
  {
    sub_1000E7434((uint64_t)v14);
    uint64_t result = sub_1000E3B88();
    if (v1) {
      return result;
    }
    swift_getAtKeyPath();
    uint64_t result = sub_100006AE8((uint64_t)v11, 1, v15);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    sub_1000E7358((uint64_t)v6, (void (*)(void))type metadata accessor for DaemonSession.LazyState);
  }
  else
  {
    uint64_t v11 = v14;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, v11, v15);
}

uint64_t sub_1000E389C()
{
  uint64_t v1 = type metadata accessor for DaemonSession.LazyState(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1000E3AD8();
  if (!v6)
  {
    uint64_t result = sub_1000E3B88();
    if (!v0)
    {
      uint64_t result = swift_getAtKeyPath();
      if (v7[1])
      {
        sub_1000E7358((uint64_t)v4, (void (*)(void))type metadata accessor for DaemonSession.LazyState);
        return v7[0];
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1000E3978()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                          + ((*(unsigned int *)(**(void **)(v0
                                                            + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                                              + 48)
                            + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  sub_1000E8138(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

void sub_1000E3A28()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                          + ((*(unsigned int *)(**(void **)(v0
                                                            + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                                              + 48)
                            + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  sub_1000E810C();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000E3AD8()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                          + ((*(unsigned int *)(**(void **)(v0
                                                            + OBJC_IVAR____TtC13modelmanagerd13DaemonSession__lazyState)
                                              + 48)
                            + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  sub_1000E80D4(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t sub_1000E3B88()
{
  uint64_t result = sub_1000E164C();
  if (!v1)
  {
    uint64_t v4 = result;
    unint64_t v5 = v3;
    sub_10000853C((void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog), *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog + 24));
    uint64_t v6 = sub_1000E9E14(v4, v5);
    sub_1000E13AC(v4, v5, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000E3C54()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_1000E3C84()
{
  swift_getAtKeyPath();
  return v1;
}

void sub_1000E3CBC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100003A70(&qword_10015C010);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DaemonSession.LazyState(0);
  sub_1000E73CC(a1 + *(int *)(v8 + 24), (uint64_t)v7);
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor();
  int v10 = sub_100006AE8((uint64_t)v7, 1, v9);
  sub_1000E7434((uint64_t)v7);
  if (v10 == 1)
  {
    if (qword_10015B108 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003B18(v11, (uint64_t)qword_10015E720);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_12;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Fallback inference provider not allowed: main inference provider not yet selected";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc();
LABEL_12:

    *a2 = 0;
    return;
  }
  if (*(unsigned char *)(a1 + *(int *)(v8 + 28)))
  {
    if (qword_10015B108 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100003B18(v16, (uint64_t)qword_10015E720);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_12;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Fallback inference provider not allowed: inference provider selection has been locked";
    goto LABEL_11;
  }
  *a2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
}

void sub_1000E3EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B9F04();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v140 = v26;
  sub_1000E83BC();
  uint64_t v27 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v28 = sub_10002FA4C(v27);
  uint64_t v149 = v29;
  __chkstk_darwin(v28, v30);
  sub_10000F0C0();
  uint64_t v33 = (void *)(v31 - v32);
  __chkstk_darwin(v34, v35);
  sub_1000E8540();
  uint64_t v36 = type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  uint64_t v38 = v37;
  __chkstk_darwin(v39, v40);
  sub_10000F0D0();
  uint64_t v43 = v42 - v41;
  uint64_t v44 = sub_100003A70(&qword_10015C010);
  uint64_t v45 = sub_10002FDD0(v44);
  __chkstk_darwin(v45, v46);
  sub_10000F0D0();
  uint64_t v49 = v48 - v47;
  sub_1000E4D38(v25, v50, v51, v52, v53, v54, v55, v56, v124, v125, v126, v128, v131, v133, v137, v138, v140, v144, v146,
    v21);
  if (!v21)
  {
    uint64_t v134 = v43;
    uint64_t v58 = v149;
    uint64_t v147 = v20;
    uint64_t v148 = v33;
    uint64_t v139 = v57;
    swift_getKeyPath();
    sub_1000E3A28();
    swift_release();
    int v59 = sub_100006AE8(v49, 1, v36);
    sub_1000E7434(v49);
    if (v59 == 1)
    {
      if (qword_10015B108 == -1)
      {
LABEL_4:
        uint64_t v60 = type metadata accessor for Logger();
        sub_100003B18(v60, (uint64_t)qword_10015E720);
        swift_retain_n();
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)swift_slowAlloc();
          a10 = sub_10002FF90();
          *(_DWORD *)uint64_t v63 = 136315138;
          swift_retain();
          uint64_t v64 = sub_1000E712C();
          unint64_t v66 = v65;
          swift_release();
          uint64_t v67 = sub_10001DF20(v64, v66, &a10);
          sub_1000E85C4(v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100044204();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "Session %s hasn't selected an inference provider, no fallback can be selected", v63, 0xCu);
          swift_arrayDestroy();
          sub_10000ED7C();
          sub_10000ED7C();
        }
        else
        {

          sub_100044204();
        }
        sub_1000E8174();
        sub_10004415C();
        char v91 = 1;
        goto LABEL_45;
      }
LABEL_53:
      swift_once();
      goto LABEL_4;
    }
    uint64_t v145 = v25;
    if (*(void *)(v139 + 16) < 2uLL)
    {
      if (qword_10015B108 != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      sub_100003B18(v92, (uint64_t)qword_10015E720);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        os_log_type_t v130 = v94;
        uint64_t v136 = v93;
        uint64_t v95 = swift_slowAlloc();
        a10 = swift_slowAlloc();
        *(_DWORD *)uint64_t v95 = 136315394;
        swift_retain();
        uint64_t v96 = sub_1000E712C();
        unint64_t v98 = v97;
        swift_release();
        uint64_t v99 = sub_10001DF20(v96, v98, &a10);
        sub_1000E85C4(v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100044204();
        swift_bridgeObjectRelease();
        os_log_t v132 = (uint8_t *)v95;
        *(_WORD *)(v95 + 12) = 2080;
        uint64_t v100 = *(void *)(v25 + 16);
        if (v100)
        {
          char v101 = sub_1000E8514();
          sub_10001EDA8(v101, v100, 0);
          uint64_t v102 = sub_10002E3C4(v25);
          uint64_t v104 = v103;
          char v106 = v105 & 1;
          uint64_t v143 = v25 + 56;
          while ((v102 & 0x8000000000000000) == 0 && v102 < 1 << *(unsigned char *)(v25 + 32))
          {
            if (((*(void *)(v143 + (((unint64_t)v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102) & 1) == 0) {
              goto LABEL_51;
            }
            if (*(_DWORD *)(v25 + 36) != v104) {
              goto LABEL_52;
            }
            sub_1000E8018(*(void *)(v25 + 48) + *(void *)(v58 + 72) * v102, v147, (void (*)(void))type metadata accessor for ModelCatalogAsset);
            sub_10000E54C(v147, (uint64_t)v33);
            uint64_t v107 = *v33;
            uint64_t v108 = v33[1];
            swift_bridgeObjectRetain();
            sub_1000E7358((uint64_t)v33, (void (*)(void))type metadata accessor for ModelCatalogAsset);
            uint64_t v109 = v150;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100044278();
              uint64_t v109 = v150;
            }
            unint64_t v111 = *(void *)(v109 + 16);
            unint64_t v110 = *(void *)(v109 + 24);
            if (v111 >= v110 >> 1)
            {
              sub_1000E8574(v110);
              uint64_t v109 = v150;
            }
            *(void *)(v109 + 16) = v111 + 1;
            uint64_t v112 = v109 + 16 * v111;
            *(void *)(v112 + 32) = v107;
            *(void *)(v112 + 40) = v108;
            uint64_t v25 = v145;
            uint64_t v113 = sub_10002E2DC(v102, v104, v106 & 1, v145);
            uint64_t v102 = v113;
            uint64_t v104 = v114;
            char v106 = v115 & 1;
            --v100;
            uint64_t v33 = v148;
            uint64_t v58 = v149;
            if (!v100)
            {
              sub_10000E60C(v113, v114, v115 & 1);
              goto LABEL_43;
            }
          }
          goto LABEL_50;
        }
LABEL_43:
        uint64_t v120 = Array.description.getter();
        unint64_t v122 = v121;
        swift_bridgeObjectRelease();
        uint64_t v123 = sub_10001DF20(v120, v122, &a10);
        sub_1000E8524(v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1000E85EC();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v136, v130, "Session %s assets %s don't have any alternate inference providers", v132, 0x16u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_1000E85EC();
        sub_100044204();
      }
      sub_1000E8174();
      sub_10004415C();
      char v91 = 0;
LABEL_45:
      char *v90 = v91;
      swift_willThrow();
      swift_release();
      swift_release();
      goto LABEL_46;
    }
    uint64_t v68 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
    v68(v141, v139+ *(void *)(v38 + 72)+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), v36);
    if (qword_10015B108 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100003B18(v69, (uint64_t)qword_10015E720);
    v68(v134, v141, v36);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      os_log_type_t v127 = v71;
      uint64_t v129 = v70;
      uint64_t v72 = sub_10002FF90();
      a10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 136315650;
      swift_retain();
      uint64_t v73 = sub_1000E712C();
      unint64_t v75 = v74;
      swift_release();
      uint64_t v151 = sub_10001DF20(v73, v75, &a10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044204();
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2080;
      uint64_t v76 = v72 + 14;
      sub_1000E72C8(&qword_10015C020, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
      char v77 = v134;
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v80 = sub_10001DF20(v78, v79, &a10);
      sub_1000E8524(v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v134, v36);
      uint64_t v135 = (uint8_t *)v72;
      *(_WORD *)(v72 + 22) = 2080;
      uint64_t v81 = *(void *)(v25 + 16);
      if (v81)
      {
        char v82 = sub_1000E8514();
        sub_10001EDA8(v82, v81, 0);
        uint64_t v83 = sub_10002E3C4(v25);
        sub_1000E85B8();
        uint64_t v142 = v25 + 56;
        while ((v83 & 0x8000000000000000) == 0 && v83 < 1 << *(unsigned char *)(v25 + 32))
        {
          if (((*(void *)(v142 + (((unint64_t)v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v83) & 1) == 0) {
            goto LABEL_48;
          }
          if (*(_DWORD *)(v25 + 36) != v76) {
            goto LABEL_49;
          }
          sub_1000E8018(*(void *)(v25 + 48) + *(void *)(v149 + 72) * v83, v147, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          sub_10000E54C(v147, (uint64_t)v148);
          uint64_t v84 = *v148;
          uint64_t v85 = v148[1];
          swift_bridgeObjectRetain();
          sub_1000E7358((uint64_t)v148, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v86 = v151;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100044278();
            uint64_t v86 = v151;
          }
          unint64_t v88 = *(void *)(v86 + 16);
          unint64_t v87 = *(void *)(v86 + 24);
          if (v88 >= v87 >> 1)
          {
            sub_1000E8574(v87);
            uint64_t v86 = v151;
          }
          *(void *)(v86 + 16) = v88 + 1;
          unint64_t v89 = v86 + 16 * v88;
          *(void *)(v89 + 32) = v84;
          *(void *)(v89 + 40) = v85;
          uint64_t v25 = v145;
          uint64_t v83 = sub_10002E2DC(v83, v76, v77 & 1, v145);
          sub_1000E85B8();
          if (!--v81)
          {
            sub_10000E60C(v83, v76, v77);
            goto LABEL_41;
          }
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_41:
      uint64_t v116 = Array.description.getter();
      unint64_t v118 = v117;
      swift_bridgeObjectRelease();
      uint64_t v119 = sub_10001DF20(v116, v118, &a10);
      sub_1000E8524(v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E85EC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v129, v127, "Session %s selected alternate inference provider %s for assets %s", v135, 0x20u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();

      swift_release();
    }
    else
    {
      sub_100044204();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v134, v36);

      swift_release();
      sub_1000E85EC();
    }
    swift_release();
  }
LABEL_46:
  sub_1000B99C8();
}

uint64_t sub_1000E49F4(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for DaemonSession.ManagerOwnedState(0);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_1000E8450();
  __chkstk_darwin(v8, v9);
  sub_1000E8540();
  uint64_t v10 = v2 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState;
  swift_beginAccess();
  sub_1000E8018(v10, v1, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_retain();
  sub_1001174E8(a1);
  swift_release();
  swift_release();
  sub_1000E8018(v1, v3, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_beginAccess();
  sub_100042BD0(v3, v10);
  swift_endAccess();
  return sub_1000E7358(v1, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
}

uint64_t sub_1000E4B3C(void *a1)
{
  swift_bridgeObjectRelease();
  *a1 = 0;
  a1[1] = 0;
  swift_bridgeObjectRelease();
  a1[2] = 0;
  uint64_t v2 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0) + 24);
  sub_1000E7434(v2);
  uint64_t v3 = type metadata accessor for InferenceProviderDescriptor();
  return sub_100006960(v2, 1, 1, v3);
}

uint64_t sub_1000E4BB0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_100003A70(&qword_10015C010);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1[1])
  {
    *a1 = a2;
    a1[1] = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = a4;
    uint64_t v16 = (uint64_t)a1 + *(int *)(type metadata accessor for DaemonSession.LazyState(0) + 24);
    sub_1000E73CC(v16, (uint64_t)v15);
    uint64_t v17 = type metadata accessor for InferenceProviderDescriptor();
    int v18 = sub_100006AE8((uint64_t)v15, 1, v17);
    sub_1000E7434((uint64_t)v15);
    if (v18 == 1)
    {
      sub_1000E7434(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, a5, v17);
      sub_100006960(v16, 0, 1, v17);
    }
  }
  return sub_1000E8018((uint64_t)a1, a6, (void (*)(void))type metadata accessor for DaemonSession.LazyState);
}

void sub_1000E4D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B9F04();
  a19 = v22;
  a20 = v23;
  uint64_t v182 = v21;
  uint64_t v181 = v20;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v27 = sub_10002FA4C(v26);
  uint64_t v29 = v28;
  __chkstk_darwin(v27, v30);
  sub_100030158();
  sub_1000E8504();
  __chkstk_darwin(v31, v32);
  sub_1000E8504();
  __chkstk_darwin(v33, v34);
  sub_1000E8504();
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v39 = (char *)&v181 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v188 = (uint64_t)&v181 - v41;
  a10 = _swiftEmptyArrayStorage;
  uint64_t v42 = *(void *)(v25 + 56);
  uint64_t v195 = v25 + 56;
  uint64_t v43 = 1 << *(unsigned char *)(v25 + 32);
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  else {
    uint64_t v44 = -1;
  }
  unint64_t v45 = v44 & v42;
  int64_t v184 = (unint64_t)(v43 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v189 = v25;
  uint64_t v186 = v29;
  uint64_t v185 = v39;
  if (!v45) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v48 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  for (unint64_t i = v48 | (v47 << 6); ; unint64_t i = v68 + (v47 << 6))
  {
    uint64_t v69 = v188;
    sub_1000E8018(*(void *)(v25 + 48) + *(void *)(v29 + 72) * i, v188, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    sub_10000E54C(v69, (uint64_t)v39);
    uint64_t v70 = swift_bridgeObjectRetain();
    sub_1000A18C4(v70);
    uint64_t v73 = v72;
    uint64_t v199 = *(void **)(v72 + 16);
    if (v199) {
      break;
    }
    swift_release();
LABEL_86:
    swift_release();
    sub_1000E7358((uint64_t)v39, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    if (v45) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v47, 1)) {
      goto LABEL_133;
    }
    if (v47 + 1 >= v184)
    {
LABEL_88:
      swift_release();
      unint64_t v117 = a10;
      uint64_t v118 = 1 << *(unsigned char *)(v25 + 32);
      uint64_t v119 = -1;
      if (v118 < 64) {
        uint64_t v119 = ~(-1 << v118);
      }
      unint64_t v120 = v119 & *(void *)(v25 + 56);
      int64_t v121 = (unint64_t)(v118 + 63) >> 6;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      int64_t v122 = 0;
      uint64_t v199 = v117;
      uint64_t v200 = v46;
      uint64_t v201 = (uint64_t)v117;
      uint64_t v123 = v190;
      if (!v120) {
        goto LABEL_92;
      }
LABEL_91:
      unint64_t v124 = __clz(__rbit64(v120));
      v120 &= v120 - 1;
      for (unint64_t j = v124 | (v122 << 6); ; unint64_t j = v142 + (v122 << 6))
      {
        uint64_t v143 = v187;
        sub_1000E8018(*(void *)(v25 + 48) + *(void *)(v29 + 72) * j, v187, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        sub_10000E54C(v143, v123);
        uint64_t v144 = swift_bridgeObjectRetain();
        sub_1000A18C4(v144);
        uint64_t v47 = v145;
        uint64_t v200 = sub_1000E7DD8(v146, v145, v200, v201);
        uint64_t v201 = v147;
        swift_release();
        swift_release();
        sub_1000E7358(v123, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        if (v120) {
          goto LABEL_91;
        }
LABEL_92:
        if (__OFADD__(v122, 1)) {
          goto LABEL_134;
        }
        if (v122 + 1 >= v121) {
          break;
        }
        sub_1000E8598();
        int64_t v122 = v126;
        if (!v127)
        {
          int64_t v122 = v126 + 1;
          if (v126 + 1 >= v121) {
            break;
          }
          sub_1000E846C();
          if (!v129)
          {
            int64_t v122 = v128 + 2;
            if (v128 + 2 >= v121) {
              break;
            }
            sub_1000E846C();
            if (!v131)
            {
              int64_t v122 = v130 + 3;
              if (v130 + 3 >= v121) {
                break;
              }
              sub_1000E846C();
              if (!v133)
              {
                int64_t v122 = v132 + 4;
                if (v132 + 4 >= v121) {
                  break;
                }
                sub_1000E846C();
                if (!v135)
                {
                  if (v134 + 5 >= v121) {
                    break;
                  }
                  sub_1000E8598();
                  if (!v137)
                  {
                    while (1)
                    {
                      int64_t v122 = v136 + 1;
                      if (__OFADD__(v136, 1)) {
                        goto LABEL_139;
                      }
                      if (v122 >= v121) {
                        goto LABEL_112;
                      }
                      sub_1000E846C();
                      int64_t v136 = v138 + 1;
                      if (v139) {
                        goto LABEL_109;
                      }
                    }
                  }
                  int64_t v122 = v136;
                }
              }
            }
          }
        }
LABEL_109:
        sub_100030534();
        unint64_t v120 = v141 & v140;
      }
LABEL_112:
      swift_release();
      if (*(void *)(v201 + 16))
      {
        sub_1000E1028(v200, v201);
        sub_1000A15F0();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_131;
      }
      uint64_t v148 = *(void *)(v25 + 16);
      uint64_t v149 = _swiftEmptyArrayStorage;
      uint64_t v196 = v46;
      if (v148)
      {
        a10 = _swiftEmptyArrayStorage;
        sub_10001EDA8(0, v148, 0);
        uint64_t v47 = sub_10002E3C4(v25);
        uint64_t v151 = v150;
        char v153 = v152 & 1;
        while ((v47 & 0x8000000000000000) == 0 && v47 < 1 << *(unsigned char *)(v189 + 32))
        {
          if (((*(void *)(v195 + (((unint64_t)v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
            goto LABEL_136;
          }
          if (*(_DWORD *)(v189 + 36) != v151) {
            goto LABEL_137;
          }
          uint64_t v154 = v190;
          sub_1000E8018(*(void *)(v189 + 48) + *(void *)(v186 + 72) * v47, v190, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v155 = v183;
          sub_10000E54C(v154, (uint64_t)v183);
          uint64_t v156 = *v155;
          uint64_t v157 = v155[1];
          swift_bridgeObjectRetain();
          sub_1000E7358((uint64_t)v155, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v149 = a10;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            char v158 = sub_1000E8484();
            sub_10001EDA8(v158, v159, v160);
            uint64_t v149 = a10;
          }
          unint64_t v162 = v149[2];
          unint64_t v161 = v149[3];
          if (v162 >= v161 >> 1)
          {
            sub_10001EDA8(v161 > 1, v162 + 1, 1);
            uint64_t v149 = a10;
          }
          v149[2] = v162 + 1;
          uint64_t v163 = &v149[2 * v162];
          v163[4] = v156;
          v163[5] = v157;
          uint64_t v164 = sub_10002E2DC(v47, v151, v153 & 1, v189);
          uint64_t v47 = v164;
          uint64_t v151 = v165;
          char v153 = v166 & 1;
          if (!--v148)
          {
            sub_10000E60C(v164, v165, v166 & 1);
            goto LABEL_126;
          }
        }
        goto LABEL_135;
      }
LABEL_126:
      uint64_t v47 = sub_100016C4C((uint64_t)v149);
      if (qword_10015B108 != -1) {
        goto LABEL_140;
      }
      goto LABEL_127;
    }
    sub_1000E8598();
    uint64_t v47 = v50;
    if (!v51)
    {
      uint64_t v47 = v50 + 1;
      sub_1000E8420();
      if (v52 == v53) {
        goto LABEL_88;
      }
      sub_1000E8478();
      if (!v55)
      {
        uint64_t v47 = v54 + 2;
        sub_1000E8420();
        if (v52 == v53) {
          goto LABEL_88;
        }
        sub_1000E8478();
        if (!v57)
        {
          uint64_t v47 = v56 + 3;
          sub_1000E8420();
          if (v52 == v53) {
            goto LABEL_88;
          }
          sub_1000E8478();
          if (!v59)
          {
            uint64_t v47 = v58 + 4;
            sub_1000E8420();
            if (v52 == v53) {
              goto LABEL_88;
            }
            sub_1000E8478();
            if (!v61)
            {
              if (v60 + 5 >= v184) {
                goto LABEL_88;
              }
              sub_1000E8598();
              if (!v63)
              {
                while (1)
                {
                  uint64_t v47 = v62 + 1;
                  if (__OFADD__(v62, 1)) {
                    goto LABEL_138;
                  }
                  sub_1000E8420();
                  if (v52 == v53) {
                    goto LABEL_88;
                  }
                  sub_1000E8478();
                  uint64_t v62 = v64 + 1;
                  if (v65) {
                    goto LABEL_28;
                  }
                }
              }
              uint64_t v47 = v62;
            }
          }
        }
      }
    }
LABEL_28:
    sub_100030534();
    unint64_t v45 = v67 & v66;
  }
  unint64_t v193 = v45;
  uint64_t v194 = v47;
  uint64_t v198 = v72 + 32;
  uint64_t v192 = v71;
  swift_retain();
  uint64_t v191 = v73;
  swift_retain();
  uint64_t v74 = 0;
  while (1)
  {
    unint64_t v75 = (long long *)(v198 + 40 * v74);
    long long v76 = *v75;
    long long v77 = v75[1];
    unsigned __int8 v205 = *((unsigned char *)v75 + 32);
    long long v203 = v76;
    long long v204 = v77;
    v206[0] = *v75;
    uint64_t v78 = *((void *)&v77 + 1);
    uint64_t v79 = (uint64_t)a10;
    uint64_t v80 = a10[2];
    if (!v46)
    {
      uint64_t v196 = 0;
      uint64_t v197 = v74;
      if (!v80)
      {
LABEL_54:
        sub_1000B6B28((uint64_t)v206);
        swift_bridgeObjectRetain();
        uint64_t v47 = 0;
        uint64_t v46 = v196;
        uint64_t v74 = v197;
        goto LABEL_55;
      }
      uint64_t v200 = v204;
      long long v84 = v206[0];
      uint64_t v85 = (unsigned __int8 *)(a10 + 8);
      LODWORD(v201) = v205;
      while (1)
      {
        uint64_t v86 = *((void *)v85 - 2);
        uint64_t v87 = *((void *)v85 - 1);
        int v88 = *v85;
        BOOL v89 = *((void *)v85 - 4) == (void)v84 && *((void *)v85 - 3) == *((void *)&v84 + 1);
        if (!v89 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_53;
        }
        if (!v87) {
          break;
        }
        if (!v78) {
          goto LABEL_53;
        }
        if (v86 != v200 || v87 != v78)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_53;
          }
LABEL_50:
          if (((v88 ^ v201) & 1) == 0) {
            goto LABEL_76;
          }
          goto LABEL_53;
        }
        if (v88 == (v201 & 1))
        {
LABEL_76:
          uint64_t v46 = 0;
          uint64_t v74 = v197;
          goto LABEL_83;
        }
LABEL_53:
        v85 += 40;
        if (!--v80) {
          goto LABEL_54;
        }
      }
      if (v78) {
        goto LABEL_53;
      }
      goto LABEL_50;
    }
    sub_1000B6B28((uint64_t)v206);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001189D0();
    char v82 = v81;
    uint64_t v47 = v83;
    swift_release();
    if ((v82 & 1) == 0) {
      goto LABEL_82;
    }
LABEL_55:
    sub_1000B6B28((uint64_t)v206);
    swift_bridgeObjectRetain();
    uint64_t v91 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v92 = (char *)sub_1000E8484();
      sub_10001EE5C(v92, v93, v94);
      uint64_t v79 = (uint64_t)a10;
    }
    unint64_t v96 = *(void *)(v79 + 16);
    unint64_t v95 = *(void *)(v79 + 24);
    if (v96 >= v95 >> 1)
    {
      sub_10001EE5C((char *)(v95 > 1), v96 + 1, 1);
      uint64_t v79 = (uint64_t)a10;
    }
    *(void *)(v79 + 16) = v96 + 1;
    unint64_t v97 = v79 + 40 * v96;
    long long v98 = v203;
    long long v99 = v204;
    *(unsigned char *)(v97 + 64) = v205;
    *(_OWORD *)(v97 + 32) = v98;
    *(_OWORD *)(v97 + 48) = v99;
    if (!v46)
    {
      uint64_t v100 = 0;
      BOOL v101 = v96 > 0xE;
      uint64_t v74 = v91;
      if (!v101) {
        goto LABEL_82;
      }
      goto LABEL_78;
    }
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() <= (uint64_t)v96)
    {
      uint64_t v100 = *(void *)(v46 + 24) & 0x3FLL;
      if (v96 > 0xE)
      {
        uint64_t v74 = v91;
      }
      else
      {
        uint64_t v74 = v91;
        if (!v100)
        {
          swift_release();
          uint64_t v46 = 0;
          goto LABEL_82;
        }
      }
LABEL_78:
      uint64_t v114 = static _HashTable.scale(forCapacity:)();
      if (v100 <= v114) {
        uint64_t v115 = v114;
      }
      else {
        uint64_t v115 = v100;
      }
      uint64_t v116 = sub_100118F6C(v79, v115, 0, v100);
      swift_release();
      uint64_t v46 = v116;
      goto LABEL_82;
    }
    if (swift_isUniquelyReferenced_native())
    {
      uint64_t v74 = v91;
    }
    else
    {
      uint64_t v102 = _HashTable.copy()();
      swift_release();
      if (!v102)
      {
        __break(1u);
        return;
      }
      uint64_t v74 = v91;
      uint64_t v46 = v102;
    }
    uint64_t v103 = -1 << *(void *)(v46 + 16);
    uint64_t v104 = v103 + 1;
    uint64_t v105 = *(void *)(v79 + 16) + ~(*(uint64_t *)(v46 + 24) >> 6);
    unint64_t v106 = v103 ^ ~(((v105 >> 63) & ~v103) + v105);
    uint64_t v107 = (*(void *)(v46 + 16) & 0x3FLL) * v47;
    uint64_t v108 = v107 >> 6;
    *(void *)(v46 + 32 + 8 * (v107 >> 6)) = (v106 << v107) | ((v104 << v107) - 1) & *(void *)(v46
                                                                                                + 32
                                                                                                + 8 * (v107 >> 6));
    unint64_t v109 = 64 - (v107 & 0x3F);
    uint64_t v110 = *(void *)(v46 + 16);
    if (v109 < (v110 & 0x3Fu)) {
      break;
    }
LABEL_82:
    sub_1000B6B54((uint64_t)v206);
    swift_bridgeObjectRelease();
LABEL_83:
    if ((void *)++v74 == v199)
    {
      swift_release_n();
      swift_release();
      uint64_t v25 = v189;
      uint64_t v29 = v186;
      uint64_t v39 = v185;
      uint64_t v47 = v194;
      unint64_t v45 = v193;
      goto LABEL_86;
    }
  }
  uint64_t v111 = (v110 & 0x3F) << (v110 & 0x3F);
  BOOL v53 = __OFADD__(v111, 64);
  uint64_t v112 = v111 + 64;
  if (!v53)
  {
    if (v108 + 1 == (v112 - 1) / 64) {
      uint64_t v113 = 0;
    }
    else {
      uint64_t v113 = v108 + 1;
    }
    *(void *)(v46 + 32 + 8 * v113) = *(void *)(v46 + 32 + 8 * v113) & (-1 << (v110
                                                                                  - v109)) | (v106 >> v109);
    goto LABEL_82;
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  swift_once();
LABEL_127:
  uint64_t v167 = type metadata accessor for Logger();
  sub_100003B18(v167, (uint64_t)qword_10015E720);
  swift_bridgeObjectRetain_n();
  uint64_t v168 = Logger.logObject.getter();
  os_log_type_t v169 = static os_log_type_t.error.getter();
  int v170 = v169;
  if (os_log_type_enabled(v168, v169))
  {
    uint64_t v171 = swift_slowAlloc();
    LODWORD(v200) = v170;
    uint64_t v172 = v171;
    uint64_t v199 = (void *)swift_slowAlloc();
    a10 = v199;
    *(_DWORD *)uint64_t v172 = 136315394;
    uint64_t v173 = _typeName(_:qualified:)();
    uint64_t v202 = sub_10001DF20(v173, v174, (uint64_t *)&a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v172 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v175 = Set.description.getter();
    unint64_t v177 = v176;
    swift_bridgeObjectRelease();
    uint64_t v202 = sub_10001DF20(v175, v177, (uint64_t *)&a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v168, (os_log_type_t)v200, "Session %s assets %s don't have a common inference provider", (uint8_t *)v172, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for ModelManagerError();
  sub_1000E72C8((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10004415C();
  *uint64_t v178 = v47;
  sub_10002FC6C();
  sub_100043E9C();
  v180(v179);
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_131:
  sub_100043F9C();
  sub_1000B99C8();
}

uint64_t sub_1000E5AC4(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for DaemonSession.LazyState(0);
  uint64_t v5 = *(int *)(result + 28);
  if ((*(unsigned char *)(a1 + v5) & 1) == 0)
  {
    *(unsigned char *)(a1 + v5) = 1;
    uint64_t v6 = a1 + *(int *)(result + 24);
    sub_1000E7434(v6);
    uint64_t v7 = type metadata accessor for InferenceProviderDescriptor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a2, v7);
    return sub_100006960(v6, 0, 1, v7);
  }
  return result;
}

uint64_t sub_1000E5B78()
{
  uint64_t v0 = sub_100003A70(&qword_10015B408);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestMetadata.id.getter();
  type metadata accessor for RequestMetadata();
  char v5 = static UUIDIdentifier.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5 & 1;
}

uint64_t sub_1000E5C90()
{
  type metadata accessor for Session.Metadata();
  sub_10002FC6C();
  uint64_t v1 = sub_1000E8530();
  v2(v1);
  type metadata accessor for AuditToken();
  sub_10002FC6C();
  uint64_t v3 = sub_1000E8530();
  v4(v3);
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_modelCatalog);
  swift_release();
  sub_1000E7358(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_unsafeManagerOwnedState, (void (*)(void))type metadata accessor for DaemonSession.ManagerOwnedState);
  swift_release();
  return v0;
}

uint64_t sub_1000E5D74()
{
  sub_1000E5C90();
  sub_1000E83BC();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return _swift_deallocClassInstance(v0, v2, v3);
}

uint64_t sub_1000E5DAC()
{
  return type metadata accessor for DaemonSession(0);
}

uint64_t type metadata accessor for DaemonSession(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015E760);
}

uint64_t sub_1000E5DD4()
{
  uint64_t result = type metadata accessor for Session.Metadata();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AuditToken();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for DaemonSession.ManagerOwnedState(319);
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for DaemonSession.ManagerOwnedState(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015E908);
}

void *sub_1000E5F10(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for InferenceProviderDescriptor();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_100006AE8((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_100003A70(&qword_10015C010);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_100006960((uint64_t)v9, 0, 1, v11);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t sub_1000E6074(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor();
  uint64_t result = sub_100006AE8(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1000E6118(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_100006AE8((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_100003A70(&qword_10015C010);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_100006960((uint64_t)v8, 0, 1, v10);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_1000E622C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor();
  int v10 = sub_100006AE8((uint64_t)v7, 1, v9);
  int v11 = sub_100006AE8((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_100003A70(&qword_10015C010);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_100006960((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1000E63D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor();
  if (sub_100006AE8((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_100003A70(&qword_10015C010);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_100006960((uint64_t)v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_1000E64D4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
  int v11 = sub_100006AE8((uint64_t)v8, 1, v10);
  int v12 = sub_100006AE8((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_100003A70(&qword_10015C010);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_100006960((uint64_t)v8, 0, 1, v10);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1000E6668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E667C);
}

uint64_t sub_1000E667C(uint64_t a1, int a2)
{
  if (a2 == 2147483646)
  {
    sub_1000E8604();
    int v3 = v2 - 1;
    if (v3 < 0) {
      int v3 = -1;
    }
    return (v3 + 1);
  }
  else
  {
    sub_100003A70(&qword_10015C010);
    uint64_t v5 = sub_1000E85A4();
    return sub_100006AE8(v5, v6, v7);
  }
}

uint64_t sub_1000E66FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E6710);
}

uint64_t sub_1000E6710(uint64_t result, unsigned int a2, int a3)
{
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_100003A70(&qword_10015C010);
    uint64_t v3 = sub_1000E849C();
    return sub_100006960(v3, v4, v5, v6);
  }
  return result;
}

uint64_t type metadata accessor for DaemonSession.LazyState(uint64_t a1)
{
  return sub_100067BD8(a1, (uint64_t *)&unk_10015E868);
}

void sub_1000E67A4()
{
  sub_1000E684C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000E684C()
{
  if (!qword_10015E878)
  {
    type metadata accessor for InferenceProviderDescriptor();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015E878);
    }
  }
}

uint64_t *sub_1000E68A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for DaemonSessionState();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000E6994(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for DaemonSessionState();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1000E6A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DaemonSessionState();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_1000E6AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DaemonSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000E6B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DaemonSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000E6BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DaemonSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000E6C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E6C74);
}

uint64_t sub_1000E6C74(uint64_t a1, int a2)
{
  if (a2 == 0x7FFFFFFF)
  {
    sub_1000E8604();
    return (v2 + 1);
  }
  else
  {
    type metadata accessor for DaemonSessionState();
    uint64_t v4 = sub_1000E85A4();
    return sub_100006AE8(v4, v5, v6);
  }
}

uint64_t sub_1000E6CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E6CF8);
}

uint64_t sub_1000E6CF8(uint64_t result, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for DaemonSessionState();
    uint64_t v3 = sub_1000E849C();
    return sub_100006960(v3, v4, v5, v6);
  }
  return result;
}

uint64_t sub_1000E6D68()
{
  uint64_t result = type metadata accessor for DaemonSessionState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000E6E0C()
{
  return sub_1000E72C8(&qword_10015C050, (void (*)(uint64_t))type metadata accessor for SessionManager);
}

uint64_t sub_1000E6E54()
{
  sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v1 = v0;
  __chkstk_darwin(v2, v3);
  sub_10000F0C0();
  __chkstk_darwin(v4, v5);
  Session.Metadata.id.getter();
  Session.Metadata.id.getter();
  type metadata accessor for Session();
  char v6 = static UUIDIdentifier.== infix(_:_:)();
  uint64_t v7 = *(void (**)(void))(v1 + 8);
  sub_1000E84D0();
  v7();
  sub_1000E84D0();
  v7();
  return v6 & 1;
}

uint64_t sub_1000E6F68()
{
  uint64_t v1 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v3 = v2;
  __chkstk_darwin(v4, v5);
  sub_100057F20();
  Session.Metadata.id.getter();
  sub_1000E7310(&qword_10015B9C0);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

Swift::Int sub_1000E7040()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E7080()
{
  return sub_1000E7040();
}

uint64_t sub_1000E70A4()
{
  return sub_1000E6F68();
}

Swift::Int sub_1000E70C8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000E7108()
{
  return sub_1000E6E54() & 1;
}

uint64_t sub_1000E712C()
{
  sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  __chkstk_darwin(v0, v1);
  sub_10000F0D0();
  Session.Metadata.id.getter();
  sub_1000E7310(&qword_10015BFF0);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  sub_1000E84D0();
  v3();
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Session.Metadata.loggingIdentifier.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 40;
}

uint64_t sub_1000E725C()
{
  return sub_1000E712C();
}

uint64_t sub_1000E7280()
{
  return sub_1000E72C8(&qword_10015E980, (void (*)(uint64_t))type metadata accessor for DaemonSession);
}

uint64_t sub_1000E72C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E7310(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(&qword_10015B9A0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E7358(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FC6C();
  uint64_t v3 = sub_1000E8530();
  v4(v3);
  return a1;
}

uint64_t sub_1000E73AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E4BB0(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000E73CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015C010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E7434(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015C010);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E7494(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100119E44(v2);
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1000E7500(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1000E7500(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_1000E7B68(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = (uint64_t)sub_100003974(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  unint64_t v97 = v6;
  int64_t v93 = a1;
  if (v3 <= 0)
  {
    long long v98 = (char *)_swiftEmptyArrayStorage;
    unint64_t v31 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      uint64_t v87 = v98;
      uint64_t v88 = *(void *)&v98[16 * v86 + 32];
      uint64_t v89 = *(void *)&v98[16 * v31 + 24];
      uint64_t result = sub_1000E7C30((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)&v98[16 * v31 + 16]), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000B27B0((uint64_t)v98);
        uint64_t v87 = (char *)result;
      }
      if (v86 >= *((void *)v87 + 2)) {
        goto LABEL_140;
      }
      unint64_t v90 = &v87[16 * v86 + 32];
      *(void *)unint64_t v90 = v88;
      *((void *)v90 + 1) = v89;
      unint64_t v91 = *((void *)v87 + 2);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove(&v87[16 * v31 + 16], &v87[16 * v31 + 32], 16 * (v91 - v31));
      long long v98 = v87;
      *((void *)v87 + 2) = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  long long v98 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    int v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      uint64_t v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        uint64_t v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = v98;
    }
    else
    {
      uint64_t v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = v98;
      do
      {
        uint64_t v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        uint64_t v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)uint64_t v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000B26B8(0, *((void *)v28 + 2) + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000B26B8((char *)(v29 > 1), v30 + 1, 1, v28);
      uint64_t v28 = (char *)result;
    }
    *((void *)v28 + 2) = v31;
    uint64_t v32 = v28 + 32;
    uint64_t v33 = (Swift::Int *)&v28[16 * v30 + 32];
    Swift::Int *v33 = v9;
    v33[1] = v7;
    long long v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      uint64_t v39 = &v32[2 * v31];
      uint64_t v40 = *(v39 - 8);
      uint64_t v41 = *(v39 - 7);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(v39 - 6);
      uint64_t v43 = *(v39 - 5);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      uint64_t v47 = &v32[2 * v31 - 4];
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        uint64_t v69 = &v32[2 * v34];
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *((void *)v28 + 4);
        uint64_t v64 = *((void *)v28 + 5);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *((void *)v28 + 4);
      uint64_t v35 = *((void *)v28 + 5);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    char v52 = &v32[2 * v31 - 4];
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    uint64_t v58 = &v32[2 * v34];
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    uint64_t v65 = &v32[2 * v34];
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    uint64_t v74 = &v32[2 * v73];
    uint64_t v75 = *v74;
    long long v76 = &v32[2 * v34];
    uint64_t v77 = v76[1];
    uint64_t result = sub_1000E7C30((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *((void *)v98 + 2)) {
      goto LABEL_125;
    }
    *uint64_t v74 = v75;
    v32[2 * v73 + 1] = v77;
    unint64_t v78 = *((void *)v98 + 2);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove(&v32[2 * v34], v76 + 2, 16 * (v78 - 1 - v34));
    *((void *)v98 + 2) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E7B68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      int v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)int v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1000E7C30(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_10001D644(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    int v18 = (char *)(a3 - 16);
    while (1)
    {
      Swift::Int v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)int v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_10001D644(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      Swift::Int v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    Swift::Int v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_10001D644(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

uint64_t sub_1000E7DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v29 = *(void *)(a4 + 16);
  if (v29)
  {
    uint64_t v25 = a4 + 32;
    swift_retain();
    uint64_t result = swift_retain();
    unint64_t v8 = 0;
    uint64_t v24 = (unsigned __int8 *)(a2 + 64);
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    uint64_t v28 = v4;
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v9 = (uint64_t *)(v25 + 40 * v8);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v12 = v9[2];
      uint64_t v13 = v9[3];
      int v14 = *((unsigned __int8 *)v9 + 32);
      uint64_t v15 = *(void *)(a2 + 16);
      *(void *)&long long v31 = v10;
      *((void *)&v31 + 1) = v11;
      uint64_t v32 = v12;
      uint64_t v33 = v13;
      char v34 = v14;
      if (a1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1001189D0();
        char v17 = v16;
        swift_release();
        if ((v17 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      int v30 = v14;
      if (v15)
      {
        int v18 = v24;
        while (1)
        {
          uint64_t result = *((void *)v18 - 4);
          uint64_t v20 = *((void *)v18 - 2);
          uint64_t v19 = *((void *)v18 - 1);
          int v21 = *v18;
          if (result != v10 || *((void *)v18 - 3) != v11)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_26;
            }
          }
          if (!v19) {
            break;
          }
          if (!v13) {
            goto LABEL_26;
          }
          if (v20 != v12 || v19 != v13)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_26;
            }
LABEL_23:
            if (((v30 ^ v21) & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_26;
          }
          if (v30 == v21)
          {
LABEL_28:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_29:
            sub_1000B426C(&v31);
LABEL_30:
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            goto LABEL_31;
          }
LABEL_26:
          v18 += 40;
          if (!--v15) {
            goto LABEL_31;
          }
        }
        if (v13) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
LABEL_31:
      ++v8;
      uint64_t v4 = v28;
      a1 = v26;
      a2 = v27;
      if (v8 == v29)
      {
        swift_release_n();
        swift_release_n();
        return 0;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t sub_1000E8018(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FC6C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000E807C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E3C54();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000E80A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E3C84();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1000E80D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E80A8(a1);
}

uint64_t sub_1000E80F0(uint64_t a1)
{
  return sub_1000E5AC4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000E810C()
{
  return swift_getAtKeyPath();
}

uint64_t sub_1000E8138@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E807C(a1);
}

uint64_t sub_1000E8154()
{
  return sub_1000E5B78() & 1;
}

unint64_t sub_1000E8174()
{
  unint64_t result = qword_10015E990;
  if (!qword_10015E990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015E990);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonSessionInternalError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DaemonSessionInternalError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E8314);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000E833C(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonSessionInternalError()
{
  return &type metadata for DaemonSessionInternalError;
}

unint64_t sub_1000E835C()
{
  unint64_t result = qword_10015E9A0;
  if (!qword_10015E9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E9A0);
  }
  return result;
}

uint64_t sub_1000E83D0()
{
  return sub_10002EAF0();
}

uint64_t sub_1000E8430()
{
  return v0 + *(int *)(v1 + 24);
}

uint64_t sub_1000E8484()
{
  return 0;
}

uint64_t sub_1000E849C()
{
  return v0 + *(int *)(v1 + 24);
}

uint64_t sub_1000E84B4()
{
  return swift_beginAccess();
}

uint64_t sub_1000E84E0()
{
  return swift_dynamicCast();
}

void sub_1000E8504()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1000E8514()
{
  *(void *)(v1 - 88) = v0;
  return 0;
}

uint64_t sub_1000E8524(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1000E8530()
{
  return v0;
}

uint64_t sub_1000E8550(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return type metadata accessor for DaemonRequest();
}

void sub_1000E8574(unint64_t a1@<X8>)
{
  sub_10001EDA8(a1 > 1, v1, 1);
}

uint64_t sub_1000E85A4()
{
  return v0 + *(int *)(v1 + 24);
}

uint64_t sub_1000E85C4(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1000E85D8@<X0>(uint64_t a1@<X8>)
{
  return a1 + ((v1 + 3) & 0x1FFFFFFFCLL);
}

uint64_t sub_1000E85EC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonInferenceMonitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for DaemonInferenceMonitor()
{
  return swift_release();
}

uint64_t assignWithCopy for DaemonInferenceMonitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for DaemonInferenceMonitor(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for DaemonInferenceMonitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonInferenceMonitor(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 12))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonInferenceMonitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonInferenceMonitor()
{
  return &type metadata for DaemonInferenceMonitor;
}

char *sub_1000E878C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for XPCSession();
  uint64_t v5 = type metadata accessor for XPCEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  uint64_t v10 = type metadata accessor for XPCSession.InitializationOptions();
  __chkstk_darwin(v10 - 8, v11);
  static XPCSession.InitializationOptions.none.getter();
  uint64_t v12 = XPCSession.__allocating_init(endpoint:targetQueue:options:cancellationHandler:)();
  if (!v2)
  {
    uint64_t v9 = (char *)v12;
    AuditToken.processIdentifier.getter();
  }
  type metadata accessor for AuditToken();
  sub_1000CF6C8();
  (*(void (**)(uint64_t))(v13 + 8))(a2);
  uint64_t v14 = sub_1000E8AA4();
  v15(v14);
  return v9;
}

BOOL sub_1000E8974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

void sub_1000E8980(int a1, Swift::UInt a2)
{
}

Swift::Int sub_1000E89A8(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E89F0()
{
  return sub_1000E89A8(*v0);
}

void sub_1000E89F8(int a1)
{
  sub_1000E8980(a1, *v1);
}

Swift::Int sub_1000E8A00()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_1000E8A44(uint64_t *a1, uint64_t *a2)
{
  return sub_1000E8974(*a1, (uint64_t)a2, *a2);
}

unint64_t sub_1000E8A54()
{
  unint64_t result = qword_10015E9A8;
  if (!qword_10015E9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015E9A8);
  }
  return result;
}

uint64_t sub_1000E8AA4()
{
  return v0;
}

void *sub_1000E8AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    int v18 = _swiftEmptyArrayStorage;
    sub_10001EE7C();
    uint64_t v12 = v18;
    for (unint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      sub_1000EA99C(i, a2, &v17);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      int v18 = v12;
      unint64_t v14 = v12[2];
      if (v14 >= v12[3] >> 1)
      {
        sub_10001EE7C();
        uint64_t v12 = v18;
      }
      v12[2] = v14 + 1;
      sub_1000F7404((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v14, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      if (!--v11)
      {
        swift_release();
        return v12;
      }
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v12;
}

void *sub_1000E8C80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10001EDA8(0, v1, 0);
    uint64_t v3 = (void *)(a1 + 32);
    do
    {
      sub_10000853C(v3, v3[3]);
      uint64_t v4 = dispatch thunk of CatalogResource.id.getter();
      uint64_t v6 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10001EDA8(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10001EDA8(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000E8D9C(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_1000579A4();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000E8DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000086EC();
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v18 = swift_task_alloc();
  *(void *)(v16 + 48) = v18;
  long long v19 = *(_OWORD *)(v16 + 24);
  *(void *)(v18 + 16) = v17;
  *(_OWORD *)(v18 + 24) = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v16 + 56) = v20;
  sub_100003A70(&qword_10015ED40);
  *uint64_t v20 = v16;
  v20[1] = sub_1000E8EC0;
  sub_1000F7F70();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v21, v22, v23, v24, v25, v26, v18, v27, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000E8EC0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000579A4();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v11(v10);
  }
}

uint64_t sub_1000E8FC8()
{
  sub_1000086E0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E9028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1000E904C, 0, 0);
}

uint64_t sub_1000E904C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000086E0();
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v18 = swift_task_alloc();
  *(void *)(v16 + 48) = v18;
  long long v19 = *(_OWORD *)(v16 + 24);
  *(void *)(v18 + 16) = v17;
  *(_OWORD *)(v18 + 24) = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v16 + 56) = v20;
  sub_100003A70(&qword_10015EC98);
  sub_1000B76F8();
  *uint64_t v20 = v21;
  v20[1] = sub_1000E9138;
  sub_1000F7F70();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v22, v23, v24, v25, v26, v27, v18, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000E9138()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000579A4();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    sub_10000EF7C();
    return v10();
  }
}

void sub_1000E9238()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  v31[0] = v8;
  uint64_t v10 = sub_100003A70(v9);
  sub_10000ED60();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15, v16);
  sub_100069DF4();
  v17();
  unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v7;
  *(void *)(v19 + 24) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v18, (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v32[4] = v3;
  v32[5] = v19;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 1107296256;
  v32[2] = sub_1000E9618;
  v32[3] = v1;
  uint64_t v20 = _Block_copy(v32);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  sub_10000ED60();
  uint64_t v23 = v22;
  __chkstk_darwin(v24, v25);
  sub_100030964();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  sub_10000ED60();
  uint64_t v28 = v27;
  __chkstk_darwin(v29, v30);
  sub_1000F7D50();
  v31[1] = _swiftEmptyArrayStorage;
  sub_1000F7708((unint64_t *)&qword_10015F150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003A70(&qword_10015C0A0);
  sub_10000841C(&qword_10015F160, &qword_10015C0A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v18, v26);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v21);
  swift_release();
  sub_10002FAC4();
}

uint64_t sub_1000E94EC(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  sub_100003A70(&qword_10015ED48);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000E957C(void (*a1)(void *__return_ptr))
{
  a1(v3);
  sub_100042C34((uint64_t)v3, (uint64_t)v2);
  sub_100003A70(&qword_10015ECA0);
  CheckedContinuation.resume(returning:)();
  return sub_100008130((uint64_t)v3);
}

uint64_t sub_1000E9618(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000E965C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015E9B0);
  sub_100003B18(v0, (uint64_t)qword_10015E9B0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E96CC()
{
  uint64_t result = static Catalog.modelManagerDefaultMemoryBudget.getter();
  qword_1001600F8 = result;
  return result;
}

uint64_t sub_1000E96EC()
{
  uint64_t result = static Catalog.modelManagerForegroundOvercommitBudget.getter();
  qword_100160100 = result;
  return result;
}

uint64_t sub_1000E970C()
{
  type metadata accessor for CatalogClient();
  swift_allocObject();
  uint64_t result = CatalogClient.init()();
  qword_100160108 = result;
  return result;
}

void sub_1000E974C()
{
  sub_10002FAAC();
  uint64_t v51 = type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  *(void *)&long long v48 = v1;
  __chkstk_darwin(v2, v3);
  sub_100030158();
  uint64_t v50 = v4;
  sub_100030514();
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)v45 - v8;
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v45 - v11;
  swift_defaultActor_initialize();
  if (qword_10015B118 != -1) {
    swift_once();
  }
  char v52 = v9;
  *(void *)(v0 + 112) = qword_1001600F8;
  if (qword_10015B120 != -1) {
    swift_once();
  }
  *(void *)(v0 + 120) = qword_100160100;
  sub_100008398();
  sub_100030194();
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = sub_10002FDD0(v13);
  __chkstk_darwin(v14, v15);
  sub_10000F0D0();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_10002FB84();
  __chkstk_darwin(v16, v17);
  sub_10000F0D0();
  uint64_t v53 = &_swiftEmptyArrayStorage;
  sub_1000F7708((unint64_t *)&qword_10015B2B0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003A70(&qword_10015B2B8);
  uint64_t v46 = v0;
  sub_10000841C(&qword_10015B2C0, &qword_10015B2B8);
  uint64_t v18 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_10000ED60();
  __chkstk_darwin(v19, v20);
  (*(void (**)(char *, void))(v22 + 104))((char *)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(v18 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for AssetLock();
  uint64_t v23 = sub_100030370();
  sub_100006960(v23, v24, v25, v26);
  *(void *)(v18 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock) = &_swiftEmptyDictionarySingleton;
  *(void *)(v18 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0;
  *(void *)(v18 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers) = &_swiftEmptyArrayStorage;
  if (qword_10015B110 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100003B18(v27, (uint64_t)qword_10015E9B0);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    long long v31 = (uint8_t *)sub_100030314();
    *(_DWORD *)long long v31 = 134217984;
    if (qword_10015B1C8 != -1) {
      swift_once();
    }
    uint64_t v53 = *(void **)(qword_1001602D8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%ld builtin test assets", v31, 0xCu);
    sub_10000ED7C();
  }

  if (qword_10015B1C8 != -1) {
    swift_once();
  }
  uint64_t v32 = *(void *)(qword_1001602D8 + 16);
  uint64_t v33 = (uint64_t)v52;
  if (v32)
  {
    sub_100030B1C();
    uint64_t v36 = v34 + v35;
    uint64_t v38 = *(void *)(v37 + 72);
    v45[1] = v34;
    swift_bridgeObjectRetain_n();
    *(void *)&long long v39 = 136315138;
    long long v48 = v39;
    uint64_t v47 = (char *)&type metadata for Any + 8;
    uint64_t v49 = v28;
    do
    {
      sub_1000F6FAC(v36, (uint64_t)v12, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      sub_1000F6FAC((uint64_t)v12, v33, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = sub_100030314();
        uint64_t v53 = (void *)sub_10002FF90();
        *(_DWORD *)uint64_t v42 = v48;
        sub_1000F6FAC(v33, v50, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        uint64_t v43 = String.init<A>(describing:)();
        *(void *)(v42 + 4) = sub_10001DF20(v43, v44, (uint64_t *)&v53);
        uint64_t v33 = (uint64_t)v52;
        swift_bridgeObjectRelease();
        sub_1000F7000();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        sub_1000F7000();
      }

      sub_1000F7000();
      v36 += v38;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease_n();
  }
  sub_10002FAC4();
}

uint64_t sub_1000E9DAC()
{
  static Catalog.Resource.DisabledUseCaseList.All()();
  sub_10000853C(v2, v2[3]);
  uint64_t v0 = dispatch thunk of CatalogResource.id.getter();
  sub_100008130((uint64_t)v2);
  return v0;
}

uint64_t sub_1000E9E14(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10015B110 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003B18(v6, (uint64_t)qword_10015E9B0);
  sub_1000F7BB4();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v44[0] = sub_10002FF90();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v43[0] = sub_10001DF20(a1, a2, v44);
    uint64_t v3 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000F7CA8();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Looking up asset bundle %s in Model Catalog", v9, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_1000B9D58();
  }

  if (qword_10015B128 != -1) {
    swift_once();
  }
  uint64_t v10 = a1;
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  uint64_t v11 = v3;
  if (v3)
  {
    v43[0] = v3;
    swift_errorRetain();
    sub_100003A70(&qword_10015B468);
    uint64_t v12 = String.init<A>(describing:)();
    unint64_t v14 = v13;
    sub_1000F7BB4();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v40 = v12;
      uint64_t v17 = swift_slowAlloc();
      v43[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001DF20(v10, a2, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000F7CA8();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v18 = v40;
      *(void *)&long long v41 = sub_10001DF20(v40, v14, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to get resource bundle for %s: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_1000B9D58();
      swift_bridgeObjectRelease_n();

      uint64_t v18 = v12;
    }
    type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100044654();
    *uint64_t v21 = v18;
    v21[1] = v14;
    sub_10002FC6C();
    sub_1000F7AB8();
    v22();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_10002EAF8((uint64_t)v43, (uint64_t)v44, &qword_10015ED30);
    sub_10006F9D8((uint64_t)v44, (uint64_t)&v41, &qword_10015ED30);
    if (v42)
    {
      sub_10000831C(&v41, (uint64_t)v43);
      sub_10000853C(v43, v43[3]);
      uint64_t v19 = dispatch thunk of ResourceBundle.resources.getter();
      swift_retain();
      uint64_t v20 = sub_1000E8AB8(v19, v39);
      swift_bridgeObjectRelease();
      uint64_t v11 = sub_100016F7C((uint64_t)v20);
      swift_bridgeObjectRetain_n();
      sub_1000F7BB4();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = sub_10002FF90();
        *(void *)&long long v41 = sub_10000EFC8();
        *(_DWORD *)uint64_t v35 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_10001DF20(v10, a2, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1000F7CA8();
        *(_WORD *)(v35 + 12) = 2048;
        uint64_t v36 = *(void *)(v11 + 16);
        swift_bridgeObjectRelease();
        uint64_t v45 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 22) = 2080;
        if (*(void *)(v11 + 16) == 1) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = 115;
        }
        if (*(void *)(v11 + 16) == 1) {
          unint64_t v38 = 0xE000000000000000;
        }
        else {
          unint64_t v38 = 0xE100000000000000;
        }
        uint64_t v45 = sub_10001DF20(v37, v38, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Found asset bundle %s with %ld asset%s", (uint8_t *)v35, 0x20u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_1000B9D58();
      }
      sub_10002EB50((uint64_t)v44, &qword_10015ED30);
      sub_100008130((uint64_t)v43);
    }
    else
    {
      sub_10002EB50((uint64_t)&v41, &qword_10015ED30);
      sub_1000F7BB4();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (_DWORD *)swift_slowAlloc();
        v43[0] = sub_10002FF90();
        *uint64_t v26 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)&long long v41 = sub_10001DF20(a1, a2, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1000F7CA8();
        sub_1000F7E94();
        _os_log_impl(v27, v28, v29, v30, v31, v32);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        sub_1000B9D58();
      }

      uint64_t v11 = sub_1000EA5AC(a1, a2);
      sub_10002EB50((uint64_t)v44, &qword_10015ED30);
    }
  }
  return v11;
}

uint64_t sub_1000EA5AC(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = sub_100003A70(&qword_10015C038);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_100030298();
  uint64_t v10 = type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  uint64_t v15 = sub_1000DCC90();
  type metadata accessor for ModelCatalogProvider(v15);
  sub_1000F1448();
  if (sub_100006AE8(v4, 1, v10) == 1)
  {
    sub_10002EB50(v4, &qword_10015C038);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100003B18(v16, (uint64_t)qword_10015E9B0);
    sub_1000F7BB4();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (_DWORD *)swift_slowAlloc();
      v40[0] = sub_10002FF90();
      _DWORD *v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_10001DF20(a1, a2, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000F7CA8();
      sub_1000F7EC8();
      _os_log_impl(v20, v21, v22, v23, v24, v25);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_1000B9D58();
    }

    type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v35 = swift_allocError();
    sub_1000B7920(v35, v36);
    *uint64_t v37 = a1;
    v37[1] = a2;
    sub_10002FC6C();
    (*(void (**)(void))(v38 + 104))();
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else
  {
    uint64_t v26 = sub_1000F7EF0();
    sub_1000F7404(v26, v27, v28);
    sub_100003A70(&qword_10015B808);
    unint64_t v29 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_100128650;
    sub_1000F6FAC(v3, v30 + v29, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    uint64_t v31 = sub_100016F7C(v30);
    uint64_t v41 = v31;
    uint64_t v32 = *(void *)(v3 + 16);
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      sub_1000F7BB4();
      os_log_type_t v34 = (uint64_t *)(v32 + 40);
      while (1)
      {
        a1 = *v34;
        v40[0] = *(v34 - 1);
        v40[1] = a1;
        swift_bridgeObjectRetain();
        sub_1000F3400(v40);
        swift_bridgeObjectRelease();
        if (v2) {
          break;
        }
        v34 += 2;
        if (!--v33)
        {
          sub_1000B9D58();
          a1 = v41;
          goto LABEL_14;
        }
      }
      sub_1000B9D58();
      sub_1000F7000();
      swift_bridgeObjectRelease();
    }
    else
    {
      a1 = v31;
LABEL_14:
      sub_1000F7000();
    }
  }
  return a1;
}

uint64_t sub_1000EA99C(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  sub_100042C34((uint64_t)a1, (uint64_t)v32);
  sub_100003A70(&qword_10015EC28);
  sub_100003A70(&qword_10015EC70);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    sub_10002EB50((uint64_t)v30, &qword_10015EC78);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003B18(v9, (uint64_t)qword_10015E9B0);
    sub_100042C34((uint64_t)a1, (uint64_t)v33);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_10000853C(v33, v33[3]);
      uint64_t v13 = dispatch thunk of CatalogResource.id.getter();
      *(void *)&v30[0] = sub_10001DF20(v13, v14, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008130((uint64_t)v33);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Asset %s cannot be converted to a Model Catalog Managed Resource", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100008130((uint64_t)v33);
    }

    uint64_t v15 = type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v5 = swift_allocError();
    uint64_t v17 = v16;
    sub_10000853C(a1, a1[3]);
    uint64_t *v17 = dispatch thunk of CatalogResource.id.getter();
    v17[1] = v18;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, enum case for ModelManagerError.unrecognizedModelCatalogResource(_:), v15);
    uint64_t result = swift_willThrow();
    goto LABEL_10;
  }
  sub_10000831C(v30, (uint64_t)v33);
  sub_10000853C(a1, a1[3]);
  dispatch thunk of CatalogResource.id.getter();
  char v7 = sub_1000EB5D0();
  if (v3)
  {
    sub_100008130((uint64_t)v33);
    uint64_t result = swift_bridgeObjectRelease();
LABEL_10:
    *a3 = v5;
    return result;
  }
  char v19 = v7;
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003B18(v20, (uint64_t)qword_10015E9B0);
    sub_100042C34((uint64_t)a1, (uint64_t)v32);
    os_log_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(void *)&v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      sub_10000853C(v32, v32[3]);
      uint64_t v24 = dispatch thunk of CatalogResource.id.getter();
      v33[6] = sub_10001DF20(v24, v25, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008130((uint64_t)v32);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Asset %s is not available in Model Catalog", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100008130((uint64_t)v32);
    }

    uint64_t v26 = type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v5 = swift_allocError();
    os_log_t v28 = v27;
    sub_10000853C(a1, a1[3]);
    uint64_t *v28 = dispatch thunk of CatalogResource.id.getter();
    v28[1] = v29;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for ModelManagerError.assetNotAvailableInModelCatalog(_:), v26);
    swift_willThrow();
    uint64_t result = sub_100008130((uint64_t)v33);
    goto LABEL_10;
  }
  sub_100042C34((uint64_t)v33, (uint64_t)v32);
  sub_1000EAF78();
  return sub_100008130((uint64_t)v33);
}

void sub_1000EAF78()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  int64_t v93 = v2;
  uint64_t v105 = type metadata accessor for InferenceProvider();
  sub_10000ED60();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_100030158();
  uint64_t v104 = v7;
  sub_100030514();
  __chkstk_darwin(v8, v9);
  uint64_t v103 = (char *)&v83 - v10;
  uint64_t v102 = type metadata accessor for ManagedRuntimeInformation();
  sub_10000ED60();
  uint64_t v12 = v11;
  __chkstk_darwin(v13, v14);
  sub_100030158();
  uint64_t v101 = v15;
  sub_100030514();
  __chkstk_darwin(v16, v17);
  uint64_t v100 = (char *)&v83 - v18;
  uint64_t v19 = type metadata accessor for CostProfile();
  sub_10000ED60();
  uint64_t v92 = v20;
  __chkstk_darwin(v21, v22);
  sub_100030158();
  uint64_t v91 = v23;
  sub_100030514();
  __chkstk_darwin(v24, v25);
  uint64_t v88 = (char *)&v83 - v26;
  sub_100030514();
  __chkstk_darwin(v27, v28);
  uint64_t v87 = (char *)&v83 - v29;
  sub_100030514();
  __chkstk_darwin(v30, v31);
  unint64_t v86 = (char *)&v83 - v32;
  uint64_t v90 = type metadata accessor for AssetCost();
  sub_10000ED60();
  uint64_t v89 = v33;
  __chkstk_darwin(v34, v35);
  sub_10000F0D0();
  uint64_t v94 = v37 - v36;
  sub_10000853C(v1, v1[3]);
  sub_1000F7EFC();
  uint64_t v38 = dispatch thunk of ManagedResource.runtimeInformation.getter();
  int64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    uint64_t v84 = v19;
    uint64_t v85 = v1;
    uint64_t v111 = _swiftEmptyArrayStorage;
    sub_10001EE5C(0, v39, 0);
    uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
    uint64_t v40 = v12 + 16;
    long long v98 = v41;
    sub_100030B1C();
    uint64_t v83 = v38;
    uint64_t v43 = (char *)(v38 + v42);
    uint64_t v44 = *(void *)(v40 + 56);
    uint64_t v96 = (void (**)(uint64_t))(v4 + 8);
    uint64_t v97 = v44;
    uint64_t v95 = (void (**)(uint64_t))(v40 - 8);
    uint64_t v99 = v40;
    uint64_t v45 = v100;
    uint64_t v46 = v101;
    uint64_t v47 = v102;
    do
    {
      int64_t v110 = v39;
      long long v48 = v98;
      v98((uint64_t)v45, v43, v47);
      v48(v46, v45, v47);
      ManagedRuntimeInformation.inferenceProvider.getter();
      uint64_t v49 = InferenceProvider.id.getter();
      uint64_t v108 = v50;
      uint64_t v109 = v49;
      uint64_t v51 = *v96;
      sub_100043FA8();
      v51(v52);
      uint64_t v53 = ManagedRuntimeInformation.instanceID.getter();
      uint64_t v106 = v54;
      uint64_t v107 = v53;
      ManagedRuntimeInformation.inferenceProvider.getter();
      char v55 = InferenceProvider.hostedOnServer.getter();
      sub_100043FA8();
      v51(v56);
      char v57 = *v95;
      sub_100043FA8();
      v57(v58);
      sub_100043FA8();
      v57(v59);
      uint64_t v60 = v111;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EE5C(0, v60[2] + 1, 1);
        uint64_t v60 = v111;
      }
      unint64_t v62 = v60[2];
      unint64_t v61 = v60[3];
      int64_t v63 = v110;
      if (v62 >= v61 >> 1)
      {
        sub_10001EE5C((char *)(v61 > 1), v62 + 1, 1);
        uint64_t v60 = v111;
      }
      v60[2] = v62 + 1;
      uint64_t v64 = &v60[5 * v62];
      uint64_t v65 = v108;
      v64[4] = v109;
      v64[5] = v65;
      uint64_t v66 = v106;
      v64[6] = v107;
      v64[7] = v66;
      *((unsigned char *)v64 + 64) = v55 & 1;
      v43 += v97;
      int64_t v39 = v63 - 1;
    }
    while (v39);
    swift_bridgeObjectRelease();
    uint64_t v1 = v85;
    uint64_t v19 = v84;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = _swiftEmptyArrayStorage;
  }
  sub_10000853C(v1, v1[3]);
  sub_1000F7E88();
  uint64_t v67 = dispatch thunk of CatalogResource.id.getter();
  uint64_t v109 = v68;
  int64_t v110 = v67;
  sub_10000853C(v1, v1[3]);
  sub_1000F7E88();
  uint64_t v108 = dispatch thunk of CatalogResource.dependentResourceIDs.getter();
  sub_10000853C(v1, v1[3]);
  sub_1000F7CD0();
  uint64_t v69 = CostProfile.onDeviceMemory.getter();
  uint64_t v70 = *(void (**)(uint64_t))(v92 + 8);
  sub_1000F7D34();
  v70(v71);
  if (v69 < 0)
  {
    sub_10002FA74();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    AssetCost.init(onDeviceMemory:)();
    sub_10000853C(v1, v1[3]);
    sub_1000F7CD0();
    LODWORD(v107) = CostProfile.cacheable.getter();
    sub_1000F7D34();
    v70(v72);
    unint64_t v73 = v1;
    sub_10000853C(v1, v1[3]);
    dispatch thunk of ManagedResource.cost.getter();
    char v74 = CostProfile.dynamicModeAllowed.getter();
    sub_1000F7D34();
    v70(v75);
    sub_10000853C(v73, v73[3]);
    uint64_t v76 = v91;
    dispatch thunk of ManagedResource.cost.getter();
    char v77 = CostProfile.energyEfficientMode.getter();
    ((void (*)(uint64_t, uint64_t))v70)(v76, v19);
    unint64_t v78 = v93;
    uint64_t v79 = v109;
    *int64_t v93 = v110;
    v78[1] = v79;
    v78[2] = v108;
    v78[3] = (int64_t)v60;
    uint64_t v80 = (int *)type metadata accessor for ModelCatalogAsset(0);
    sub_100030658();
    v82(v81);
    *((unsigned char *)v78 + v80[8]) = v107 & 1;
    *((unsigned char *)v78 + v80[9]) = v74 & 1;
    *((unsigned char *)v78 + v80[10]) = v77 & 1;
    sub_100008130((uint64_t)v73);
    sub_10002FAC4();
  }
}

uint64_t sub_1000EB5D0()
{
  uint64_t v1 = type metadata accessor for ResourceStatus();
  sub_10000ED60();
  uint64_t v3 = v2;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  if (qword_10015B128 != -1) {
    swift_once();
  }
  sub_1000F7EF0();
  uint64_t v10 = dispatch thunk of CatalogClient.resourceStatus(identifier:)();
  if (v0)
  {
    uint64_t v37 = v0;
    swift_errorRetain();
    uint64_t v11 = sub_100003A70(&qword_10015B468);
    uint64_t v12 = String.init<A>(describing:)();
    unint64_t v14 = v13;
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003B18(v15, (uint64_t)qword_10015E9B0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = sub_10000EFC8();
      uint64_t v35 = v11;
      uint64_t v37 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v34 = v12;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_1000F7EF0();
      uint64_t v36 = sub_10001DF20(v20, v21, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_10001DF20(v34, v14, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1000F7EA8((void *)&_mh_execute_header, v23, v24, "Failed to get resource status for %s: %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    char v26 = type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v37 = v0;
    swift_errorRetain();
    *uint64_t v29 = String.init<A>(describing:)();
    v29[1] = v30;
    sub_10002FC6C();
    (*(void (**)(uint64_t *))(v31 + 104))(v29);
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v25 = (void *)v10;
    StatusResponse.status.getter();

    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v8, enum case for ResourceStatus.available(_:), v1);
    sub_1000F6DF0(&qword_10015ED28, (void (*)(uint64_t))&type metadata accessor for ResourceStatus);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    char v26 = v37 == v36;
    uint64_t v27 = *(void (**)(void))(v3 + 8);
    sub_1000F7E00();
    v27();
    sub_1000F7E00();
    v27();
  }
  return v26 & 1;
}

uint64_t sub_1000EBA3C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for CatalogErrors.AssetErrors();
  sub_10000ED60();
  uint64_t v7 = v6;
  __chkstk_darwin(v8, v9);
  sub_10000F0D0();
  uint64_t v12 = v11 - v10;
  if (qword_10015B128 != -1) {
    swift_once();
  }
  dispatch thunk of CatalogClient.resource(for:)();
  if (v2)
  {
    v40[0] = v2;
    swift_errorRetain();
    uint64_t v13 = sub_100003A70(&qword_10015B468);
    if (swift_dynamicCast())
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v12, v5) == enum case for CatalogErrors.AssetErrors.failedToFindAsset(_:))
      {
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v7 + 96))(v12, v5);
        swift_bridgeObjectRelease();
        uint64_t v14 = type metadata accessor for URL();
        sub_1000F7F30(v14);
        return swift_errorRelease();
      }
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v5);
    }
    swift_errorRelease();
    v40[0] = v2;
    swift_errorRetain();
    uint64_t v41 = (void *)v13;
    uint64_t v15 = String.init<A>(describing:)();
    unint64_t v17 = v16;
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003B18(v18, (uint64_t)qword_10015E9B0);
    sub_1000F7BB4();
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (_DWORD *)swift_slowAlloc();
      v40[0] = sub_10000EFC8();
      *unint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001DF20(a1, a2, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000F7CA8();
      sub_1000F7CF4();
      swift_bridgeObjectRetain();
      *(void *)&long long v37 = sub_10001DF20(v15, v17, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1000F7EA8((void *)&_mh_execute_header, v22, v23, "Failed to get asset location for %s: %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      sub_1000B9D58();
    }
    type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_100044654();
    uint64_t v25 = v24;
    v40[0] = v2;
    swift_errorRetain();
    *uint64_t v25 = String.init<A>(describing:)();
    v25[1] = v26;
    sub_10002FC6C();
    sub_1000F7AB8();
    v27();
    swift_willThrow();
    return swift_errorRelease();
  }
  if (AssociatedTypeWitness)
  {
    sub_100003A70(&qword_10015EC28);
    sub_100003A70(&qword_10015EC30);
    if (swift_dynamicCast())
    {
      if (*((void *)&v38 + 1))
      {
        sub_10000831C(&v37, (uint64_t)v40);
        uint64_t v41 = sub_10000853C(v40, v40[3]);
        *((void *)&v38 + 1) = swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        sub_10006FC18((uint64_t *)&v37);
        dispatch thunk of AssetBackedResource.fetchAsset()();
        sub_10000853C(&v37, *((uint64_t *)&v38 + 1));
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t v36 = swift_getAssociatedConformanceWitness();
        sub_10006FC18(v34);
        dispatch thunk of CatalogAssetProtocol.contents.getter();
        dispatch thunk of AssetContents.baseURL.getter();
        type metadata accessor for URL();
        sub_1000F7D44();
        sub_100006960(v29, v30, v31, v32);
        sub_100008130((uint64_t)v34);
        sub_100008130((uint64_t)&v37);
        return sub_100008130((uint64_t)v40);
      }
    }
    else
    {
      uint64_t AssociatedConformanceWitness = 0;
      long long v37 = 0u;
      long long v38 = 0u;
    }
  }
  else
  {
    sub_10002EB50((uint64_t)v34, &qword_10015EC68);
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t AssociatedConformanceWitness = 0;
  }
  sub_10002EB50((uint64_t)&v37, &qword_10015EC38);
  uint64_t v28 = type metadata accessor for URL();
  return sub_1000F7F30(v28);
}

uint64_t sub_1000EC050()
{
  sub_1000086E0();
  v1[5] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v2);
  v1[6] = sub_10002FE18();
  uint64_t v3 = sub_100003A70(&qword_10015ED00);
  v1[7] = v3;
  sub_10002FDD0(v3);
  v1[8] = sub_10002FE18();
  uint64_t v4 = sub_100003A70(&qword_10015ED08);
  sub_10002FDD0(v4);
  v1[9] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015ED10);
  sub_10002FDD0(v5);
  v1[10] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v6, v7, v8);
}

#error "1000EC28C: call analysis failed (funcsize=275)"

uint64_t sub_1000EC5D0()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    swift_errorRelease();
    swift_release();
    uint64_t v8 = sub_1000ECDC4;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 40);
    uint64_t v8 = sub_1000EC6D4;
  }
  return _swift_task_switch(v8, v9, 0);
}

#error "1000EC7BC: call analysis failed (funcsize=244)"

uint64_t sub_1000ECAD8()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 40);
  if (v0) {
    uint64_t v6 = sub_1000ED1C4;
  }
  else {
    uint64_t v6 = sub_1000ECBD8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000ECBD8()
{
  sub_1000086EC();
  swift_release();
  sub_1000F79D8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000ECC54()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 40);
    swift_release();
    uint64_t v8 = sub_1000ED250;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 40);
    uint64_t v8 = sub_1000ECD48;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_1000ECD48()
{
  sub_1000086EC();
  swift_release();
  sub_1000F79D8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

#error "1000ECEA8: call analysis failed (funcsize=243)"

uint64_t sub_1000ED1C4()
{
  sub_1000086EC();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000ED250()
{
  sub_1000086EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000ED2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  sub_100003A70(&qword_10015ECD8);
  v4[8] = swift_task_alloc();
  uint64_t v5 = swift_task_alloc();
  v4[9] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v4[10] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000ED3B4;
  return static AssetLock.lockAllResources()(v5);
}

uint64_t sub_1000ED3B4()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 56);
  if (v0) {
    uint64_t v6 = sub_1000ED5A4;
  }
  else {
    uint64_t v6 = sub_1000ED4B4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000ED4B4()
{
  sub_10000F01C();
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  type metadata accessor for AssetLock();
  sub_1000F7D44();
  sub_100006960(v4, v5, v6, v7);
  sub_10002EAF8(v1, v2, &qword_10015ECD8);
  uint64_t v8 = v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  swift_beginAccess();
  sub_1000F7548(v2, v8);
  swift_endAccess();
  *(void *)(v3 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_cycleAssetLockTask) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v9();
}

uint64_t sub_1000ED5A4()
{
  uint64_t v19 = v0;
  v0[5] = v0[11];
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  uint64_t v1 = String.init<A>(describing:)();
  unint64_t v3 = v2;
  if (qword_10015B110 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003B18(v4, (uint64_t)qword_10015E9B0);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (_DWORD *)sub_100030314();
    uint64_t v18 = sub_10002FF90();
    *uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[6] = sub_10001DF20(v1, v3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000F7CA8();
    sub_1000F7EC8();
    _os_log_impl(v8, v9, v10, v11, v12, v13);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for ModelManagerError();
  sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10004415C();
  *uint64_t v14 = v1;
  v14[1] = v3;
  sub_10002FC6C();
  (*(void (**)(void))(v15 + 104))();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v16();
}

void sub_1000ED82C()
{
  sub_10002FAAC();
  unint64_t v2 = v1;
  uint64_t v15 = v3;
  type metadata accessor for AssetVersion();
  sub_10000ED60();
  __chkstk_darwin(v4, v5);
  uint64_t v6 = sub_1000DCC90();
  uint64_t v7 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(v6);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7, v9);
  sub_1000F7D50();
  sub_10000853C(v2, v2[3]);
  v16[3] = swift_getAssociatedTypeWitness();
  v16[4] = swift_getAssociatedConformanceWitness();
  sub_10006FC18(v16);
  dispatch thunk of CatalogAssetProtocol.contents.getter();
  dispatch thunk of AssetContents.baseURL.getter();
  sub_100008130((uint64_t)v16);
  sub_10000853C(v2, v2[3]);
  dispatch thunk of CatalogAssetProtocol.version.getter();
  uint64_t v10 = AssetVersion.number.getter();
  uint64_t v12 = v11;
  sub_10000EFBC();
  v13();
  uint64_t v14 = (uint64_t *)(v0 + *(int *)(v8 + 28));
  *uint64_t v14 = v10;
  v14[1] = v12;
  sub_1000F7404(v0, v15, (void (*)(void))type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData);
  sub_100008130((uint64_t)v2);
  sub_10002FAC4();
}

void sub_1000ED9F0()
{
  sub_10002FAAC();
  sub_100030194();
  uint64_t v3 = type metadata accessor for UUID();
  sub_10000ED60();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100030964();
  uint64_t v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_tasksUsingAssetLock);
  sub_100043D2C();
  uint64_t v9 = *v8;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000145C8(v0, v9);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v10)
  {
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003B18(v11, (uint64_t)qword_10015E9B0);
    sub_100069DF4();
    v12();
    uint32_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_100030314();
      uint64_t v19 = sub_10002FF90();
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_1000F6DF0(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_10001DF20(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000F7E00();
      v18();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "removeTaskFromAssetLockSet called with not present UUID %s", v15, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
    }
  }
  swift_beginAccess();
  sub_1000F6B04(v0);
  swift_endAccess();
  swift_release();
  sub_10002FAC4();
}

uint64_t sub_1000EDC88()
{
  sub_1000086E0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v5);
  v1[12] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for UUID();
  v1[13] = v6;
  sub_10002FA4C(v6);
  v1[14] = v7;
  v1[15] = *(void *)(v8 + 64);
  v1[16] = sub_1000436D8();
  v1[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AssetLock();
  v1[18] = v9;
  sub_10002FA4C(v9);
  v1[19] = v10;
  v1[20] = *(void *)(v11 + 64);
  v1[21] = sub_1000436D8();
  v1[22] = swift_task_alloc();
  uint64_t v12 = sub_100003A70(&qword_10015ECD8);
  sub_10002FDD0(v12);
  v1[23] = sub_1000436D8();
  v1[24] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1000EDDC4()
{
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[11];
  uint64_t v5 = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  v0[25] = OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock;
  uint64_t v6 = v4 + v5;
  sub_100043D2C();
  sub_10006F9D8(v6, v2, &qword_10015ECD8);
  uint64_t v7 = sub_100006AE8(v2, 1, v3);
  sub_10002EB50(v2, &qword_10015ECD8);
  if (v7 == 1)
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[26] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000EE228;
    sub_1000441A8();
    return sub_1000EC050();
  }
  else
  {
    uint64_t v11 = sub_1000F7D1C();
    sub_10006F9D8(v11, v2, &qword_10015ECD8);
    if (sub_100006AE8(v2, 1, v7) == 1)
    {
      sub_10002EB50(v0[23], &qword_10015ECD8);
      if (qword_10015B110 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100003B18(v12, (uint64_t)qword_10015E9B0);
      uint64_t v13 = (void *)Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (sub_1000443B0(v14))
      {
        *(_WORD *)sub_10005A928() = 0;
        sub_10005A960((void *)&_mh_execute_header, v15, v16, "After cycleAssetLock, assetLock was nil");
        sub_10000ED7C();
      }

      type metadata accessor for ModelManagerError();
      sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v17 = sub_10004415C();
      sub_1000B7920(v17, v18);
      sub_10002FC6C();
      sub_1000F7AB8();
      v19();
      swift_willThrow();
      sub_1000F7AC8();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000441A8();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v22 = sub_1000F7758();
    v23(v22);
    UUID.init()();
    uint64_t v24 = type metadata accessor for TaskPriority();
    sub_100006960(v1, 1, 1, v24);
    sub_100069DF4();
    v25();
    uint64_t v26 = sub_1000F7BCC();
    v27(v26);
    sub_1000F6DF0(&qword_10015ECE8, (void (*)(uint64_t))type metadata accessor for ModelCatalogProvider);
    sub_1000F77D8();
    uint64_t v28 = (void *)swift_allocObject();
    uint64_t v36 = sub_1000F7924(v28, v29, v30, v31, v32, v33, v34, v35, v55, v57, v59, v61, v63);
    uint64_t v38 = v37(v36);
    uint64_t v46 = sub_1000F7974(v38, v39, v40, v41, v42, v43, v44, v45, v56, v58, v60, v62, v64, v65, v66, v67, v69);
    v47(v46);
    swift_retain_n();
    swift_retain();
    v0[27] = sub_10000FB9C(v68, (uint64_t)&unk_10015ECF0, (uint64_t)&qword_10015ECD8);
    sub_1000F7C50();
    swift_retain();
    sub_1000D078C();
    swift_endAccess();
    long long v48 = (void *)swift_task_alloc();
    v0[28] = v48;
    type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
    sub_100003A70(&qword_10015B468);
    void *v48 = v0;
    v48[1] = sub_1000EE708;
    sub_1000441A8();
    return Task.value.getter(v49, v50, v51, v52, v53);
  }
}

uint64_t sub_1000EE228()
{
  sub_10002FC60();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_10002FEAC();
    __asm { BRAA            X1, X16 }
  }
  sub_10002FEAC();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000EE378()
{
  uint64_t v5 = sub_1000F7D1C();
  sub_10006F9D8(v5, v1, &qword_10015ECD8);
  if (sub_100006AE8(v1, 1, v0) == 1)
  {
    sub_10002EB50(v2[23], &qword_10015ECD8);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003B18(v6, (uint64_t)qword_10015E9B0);
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (sub_1000443B0(v8))
    {
      *(_WORD *)sub_10005A928() = 0;
      sub_10005A960((void *)&_mh_execute_header, v9, v10, "After cycleAssetLock, assetLock was nil");
      sub_10000ED7C();
    }

    type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v11 = sub_10004415C();
    sub_1000B7920(v11, v12);
    sub_10002FC6C();
    sub_1000F7AB8();
    v13();
    swift_willThrow();
    sub_1000F7AC8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    sub_1000441A8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v16 = sub_1000F7758();
  v17(v16);
  UUID.init()();
  uint64_t v18 = type metadata accessor for TaskPriority();
  sub_100006960(v4, 1, 1, v18);
  sub_100069DF4();
  v19();
  uint64_t v20 = sub_1000F7BCC();
  v21(v20);
  sub_1000F6DF0(&qword_10015ECE8, (void (*)(uint64_t))type metadata accessor for ModelCatalogProvider);
  sub_1000F77D8();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v30 = sub_1000F7924(v22, v23, v24, v25, v26, v27, v28, v29, v50, v52, v54, v56, v58);
  uint64_t v32 = v31(v30);
  uint64_t v40 = sub_1000F7974(v32, v33, v34, v35, v36, v37, v38, v39, v51, v53, v55, v57, v59, v60, v61, v62, v64);
  v41(v40);
  swift_retain_n();
  swift_retain();
  v2[27] = sub_10000FB9C(v63, (uint64_t)&unk_10015ECF0, v3);
  sub_1000F7C50();
  swift_retain();
  sub_1000D078C();
  swift_endAccess();
  uint64_t v42 = (void *)swift_task_alloc();
  v2[28] = (uint64_t)v42;
  type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  sub_100003A70(&qword_10015B468);
  void *v42 = v2;
  v42[1] = sub_1000EE708;
  sub_1000441A8();
  return Task.value.getter(v43, v44, v45, v46, v47);
}

uint64_t sub_1000EE708()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 88);
  if (v0) {
    uint64_t v6 = sub_1000EE908;
  }
  else {
    uint64_t v6 = sub_1000EE808;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000EE808()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[13];
  uint64_t v5 = v0[14];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v7();
}

void sub_1000EE908()
{
  sub_10002FC60();
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_1000E84D0();
  v4();
  sub_1000F7AC8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FEAC();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000EE9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a4;
  v8[9] = a5;
  v8[7] = a1;
  uint64_t v12 = (int *)((char *)a6 + *a6);
  uint64_t v10 = (void *)swift_task_alloc();
  v8[10] = v10;
  *uint64_t v10 = v8;
  v10[1] = sub_1000EEAD4;
  return ((uint64_t (*)(void *, uint64_t))v12)(v8 + 2, a8);
}

uint64_t sub_1000EEAD4()
{
  sub_1000086E0();
  sub_100008660();
  sub_10000ED94();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *v1;
  sub_1000086D0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v9 = sub_1000EEC30;
  }
  else {
    uint64_t v9 = sub_1000EEBC8;
  }
  return _swift_task_switch(v9, v5, 0);
}

uint64_t sub_1000EEBC8()
{
  sub_1000086E0();
  sub_1000ED82C();
  sub_1000ED9F0();
  sub_1000304E0();
  return v0();
}

uint64_t sub_1000EEC30()
{
  sub_1000086E0();
  sub_1000ED9F0();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000EEC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_10000F0D0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers);
  swift_beginAccess();
  swift_retain();
  sub_1000F56E4();
  uint64_t v13 = *(void *)(*v12 + 16);
  sub_1000F57AC(v13);
  uint64_t v14 = *v12;
  *(void *)(v14 + 16) = v13 + 1;
  uint64_t v15 = v14 + 16 * v13;
  *(void *)(v15 + 32) = &unk_10015ECB0;
  *(void *)(v15 + 40) = v11;
  swift_endAccess();
  uint64_t v16 = type metadata accessor for TaskPriority();
  sub_100069D3C(v10, v17, v18, v16);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  uint64_t v19[3] = 0;
  v19[4] = a1;
  v19[5] = a2;
  swift_retain();
  sub_100003730(v10, (uint64_t)&unk_10015ECC0, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_1000EEDE8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10000ED54;
  return v7(v4);
}

uint64_t sub_1000EEEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[34] = a4;
  v5[35] = a5;
  uint64_t v6 = sub_100003A70(&qword_10015EC58);
  v5[36] = v6;
  v5[37] = *(void *)(v6 - 8);
  v5[38] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015EC50);
  v5[39] = v7;
  v5[40] = *(void *)(v7 - 8);
  v5[41] = swift_task_alloc();
  return _swift_task_switch(sub_1000EEFE4, 0, 0);
}

uint64_t sub_1000EEFE4()
{
  if (qword_10015B128 != -1) {
    swift_once();
  }
  uint64_t v1 = dispatch thunk of CatalogClient.resources()();
  uint64_t v27 = v0;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0 + 16;
    uint64_t v4 = v0 + 56;
    uint64_t v5 = v0 + 96;
    uint64_t v6 = (long long *)(v0 + 136);
    uint64_t v7 = v0 + 176;
    uint64_t v8 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v26 = (long long *)(v0 + 56);
    do
    {
      sub_100042C34(v8, v5);
      sub_100042C34(v5, v3);
      sub_100003A70(&qword_10015EC28);
      sub_100003A70(&qword_10015EC30);
      if ((swift_dynamicCast() & 1) == 0)
      {
        *(void *)(v7 + 32) = 0;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
      }
      sub_100008130(v5);
      if (*(void *)(v0 + 200))
      {
        sub_10000831C((long long *)v7, (uint64_t)v6);
        sub_10000831C(v6, v4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000F5CC8();
          uint64_t v9 = v12;
        }
        unint64_t v10 = v9[2];
        if (v10 >= v9[3] >> 1)
        {
          sub_1000F5CC8();
          uint64_t v9 = v13;
        }
        long long v9[2] = v10 + 1;
        uint64_t v11 = (uint64_t)&v9[5 * v10 + 4];
        uint64_t v4 = (uint64_t)v26;
        sub_10000831C(v26, v11);
        uint64_t v0 = v27;
      }
      else
      {
        sub_10002EB50(v7, &qword_10015EC38);
      }
      v8 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  static Catalog.monitorUpdates(for:on:)();
  uint64_t v14 = (void *)v0;
  uint64_t v17 = v0 + 296;
  uint64_t v15 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v17 + 8);
  uint64_t v18 = v14[36];
  swift_bridgeObjectRelease();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v18);
  v14[42] = 0;
  uint64_t v19 = (void *)swift_task_alloc();
  v14[43] = v19;
  void *v19 = v14;
  v19[1] = sub_1000EF4B8;
  sub_1000579A4();
  sub_100043638();
  return AsyncStream.Iterator.next(isolation:)(v20, v21, v22, v23);
}

uint64_t sub_1000EF4B8()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000EF580()
{
  sub_100030AFC();
  if (v0[30])
  {
    uint64_t v1 = v0[42];
    uint64_t v2 = sub_1000E8C80(v0[30]);
    v0[44] = v1;
    swift_bridgeObjectRelease();
    uint64_t v3 = Set.init(minimumCapacity:)();
    v0[32] = v3;
    uint64_t v4 = v2[2];
    if (v4)
    {
      uint64_t v5 = v2 + 5;
      do
      {
        swift_bridgeObjectRetain();
        sub_100020654();
        swift_bridgeObjectRelease();
        v5 += 2;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
      uint64_t v6 = v0[32];
    }
    else
    {
      uint64_t v6 = v3;
      swift_bridgeObjectRelease();
    }
    v0[45] = v6;
    uint64_t v15 = (uint64_t (*)(uint64_t))(v0[34] + *(int *)v0[34]);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[46] = (uint64_t)v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000EF7F8;
    return v15(v6);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v0[40] + 8))(v0[41], v0[39]);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003B18(v7, (uint64_t)qword_10015E9B0);
    uint64_t v8 = (void *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (sub_1000443B0(v9))
    {
      *(_WORD *)sub_10005A928() = 0;
      sub_10005A960((void *)&_mh_execute_header, v10, v11, "ModelCatalog asset update stream ended unexpectedly");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v12();
  }
}

uint64_t sub_1000EF7F8()
{
  sub_10000F01C();
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  sub_1000086D0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v0;
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 336) = *(void *)(v1 + 352);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 344) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000EF4B8;
  sub_1000579A4();
  return AsyncStream.Iterator.next(isolation:)(v6, v7, v8, v9);
}

uint64_t sub_1000EF990()
{
  sub_1000086E0();
  v1[58] = v2;
  v1[59] = v0;
  v1[56] = v3;
  v1[57] = v4;
  uint64_t v5 = type metadata accessor for ModelManagerError();
  v1[60] = v5;
  sub_10002FA4C(v5);
  v1[61] = v6;
  v1[62] = sub_1000436D8();
  v1[63] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015C038);
  sub_10002FDD0(v7);
  v1[64] = sub_10002FE18();
  uint64_t v8 = type metadata accessor for URL();
  v1[65] = v8;
  sub_10002FA4C(v8);
  v1[66] = v9;
  v1[67] = sub_10002FE18();
  uint64_t v10 = sub_100003A70(&qword_10015C9D0);
  sub_10002FDD0(v10);
  v1[68] = sub_10002FE18();
  uint64_t v11 = type metadata accessor for FilePath();
  v1[69] = v11;
  sub_10002FA4C(v11);
  v1[70] = v12;
  v1[71] = sub_1000436D8();
  v1[72] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  v1[73] = v13;
  sub_10002FDD0(v13);
  v1[74] = sub_1000436D8();
  v1[75] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_1000EFB10()
{
  uint64_t v73 = v0;
  if (qword_10015B128 != -1) {
    swift_once();
  }
  dispatch thunk of CatalogClient.resource(for:)();
  p_ivar_base_size = &MemoryPressureObserver.ivar_base_size;
  if (!*(void *)(v0 + 80))
  {
    uint64_t v31 = *(void *)(v0 + 512);
    sub_10002EB50(v0 + 56, &qword_10015EC68);
    type metadata accessor for ModelCatalogProvider(0);
    sub_1000F1448();
    uint64_t v32 = type metadata accessor for ModelCatalogAsset(0);
    int v33 = sub_100006AE8(v31, 1, v32);
    sub_10002EB50(v31, &qword_10015C038);
    if (v33 == 1)
    {
      if (qword_10015B110 != -1) {
        swift_once();
      }
      uint64_t v34 = sub_1000F7E34();
      sub_1000F7A60(v34, (uint64_t)qword_10015E9B0);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      BOOL v37 = sub_1000443B0(v36);
      unint64_t v16 = *(void *)(v0 + 464);
      if (v37)
      {
        uint64_t v38 = *(void *)(v0 + 456);
        uint64_t v39 = (uint8_t *)sub_100030314();
        v72[0] = sub_10002FF90();
        *(_DWORD *)uint64_t v39 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v40 = v38;
        p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
        *(void *)(v0 + 376) = sub_10001DF20(v40, v16, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Asset %s not found in Model Catalog", v39, 0xCu);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_1000E85EC();
      }
      sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v58 = sub_10004415C();
      sub_1000F7D98(v58, v59);
      sub_1000F7B80();
      v60();
      swift_bridgeObjectRetain();
      swift_willThrow();
      goto LABEL_4;
    }
    uint64_t v48 = *(void **)(v0 + 448);
    type metadata accessor for ModelCatalogAssetVersionedData(0);
    FilePath.init(stringLiteral:)();
    void *v48 = 0;
    v48[1] = 0xE000000000000000;
LABEL_34:
    sub_1000F7A30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    goto LABEL_20;
  }
  unint64_t v16 = v0 + 336;
  sub_10000831C((long long *)(v0 + 56), v0 + 16);
  sub_100042C34(v0 + 16, v0 + 336);
  sub_100003A70(&qword_10015EC28);
  os_log_type_t v17 = sub_100003A70(&qword_10015EC70);
  if (!swift_dynamicCast())
  {
    *(void *)(v0 + 288) = 0;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    sub_10002EB50(v0 + 256, &qword_10015EC78);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_1000F7E34();
    sub_1000F7A60(v41, (uint64_t)qword_10015E9B0);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = sub_1000F7DA8(v43);
    unint64_t v45 = *(void *)(v0 + 464);
    if (v44)
    {
      uint64_t v46 = *(void *)(v0 + 456);
      uint64_t v47 = (uint8_t *)sub_100030314();
      v72[0] = sub_10002FF90();
      *(_DWORD *)uint64_t v47 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 384) = sub_10001DF20(v46, v45, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)(v0 + 80), "Asset %s cannot be converted to a Model Catalog Managed Resource", v47, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v54 = sub_10004415C();
    sub_1000F7D98(v54, v55);
    sub_1000F7B80();
    v56();
    swift_bridgeObjectRetain();
    swift_willThrow();
    uint64_t v57 = v0 + 16;
    goto LABEL_45;
  }
  sub_10000831C((long long *)(v0 + 256), v0 + 296);
  sub_10000853C((void *)(v0 + 296), *(void *)(v0 + 320));
  sub_1000F7E88();
  if ((dispatch thunk of CatalogResource.assetBacked.getter() & 1) == 0)
  {
    uint64_t v49 = *(void *)(v0 + 568);
    uint64_t v50 = *(void *)(v0 + 560);
    uint64_t v51 = *(void *)(v0 + 552);
    uint64_t v52 = *(char **)(v0 + 448);
    FilePath.init(stringLiteral:)();
    sub_100008130(v0 + 16);
    *(void *)uint64_t v52 = 0;
    *((void *)v52 + 1) = 0xE000000000000000;
    uint64_t v53 = type metadata accessor for ModelCatalogAssetVersionedData(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(&v52[*(int *)(v53 + 20)], v49, v51);
    sub_100008130(v0 + 296);
    goto LABEL_34;
  }
  sub_100042C34(v0 + 296, v0 + 176);
  sub_100003A70(&qword_10015EC30);
  sub_1000F7F50();
  if (!swift_dynamicCast())
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    sub_10002EB50(v0 + 136, &qword_10015EC38);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v61 = sub_1000F7E34();
    sub_1000F7A60(v61, (uint64_t)qword_10015E9B0);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = sub_1000443B0(v63);
    unint64_t v16 = *(void *)(v0 + 464);
    if (v64)
    {
      uint64_t v70 = *(void *)(v0 + 456);
      uint64_t v65 = (uint8_t *)sub_100030314();
      v72[0] = sub_10002FF90();
      *(_DWORD *)uint64_t v65 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 416) = sub_10001DF20(v70, v16, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v17, "Asset %s cannot be converted to a Model Catalog Asset Backed Resource", v65, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_1000E85EC();
    }
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v66 = sub_10004415C();
    sub_1000F7D98(v66, v67);
    sub_1000F7B80();
    v68();
    swift_bridgeObjectRetain();
    swift_willThrow();
    sub_100008130(v0 + 16);
    uint64_t v57 = v0 + 296;
LABEL_45:
    sub_100008130(v57);
    p_ivar_base_size = (_DWORD *)(&MemoryPressureObserver + 8);
LABEL_4:
    *(void *)(v0 + 424) = v16;
    swift_errorRetain();
    sub_100003A70(&qword_10015B468);
    sub_1000F7EFC();
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v2 = sub_1000F7B94();
      v3(v2);
      sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_10004415C();
      sub_100069DF4();
      v4();
      swift_willThrow();
      uint64_t v5 = sub_1000F7D68();
      v6(v5);
    }
    else
    {
      swift_errorRelease();
      *(void *)(v0 + 408) = v16;
      swift_errorRetain();
      uint64_t v71 = String.init<A>(describing:)();
      unint64_t v8 = v7;
      if (*((void *)p_ivar_base_size + 34) != -1) {
        swift_once();
      }
      uint64_t v9 = sub_1000F7E34();
      sub_1000F7A60(v9, (uint64_t)qword_10015E9B0);
      swift_bridgeObjectRetain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      unint64_t v13 = *(void *)(v0 + 464);
      if (v12)
      {
        uint64_t v69 = *(void *)(v0 + 456);
        uint64_t v14 = (uint8_t *)sub_10000EFE8();
        v72[0] = sub_10000EFC8();
        *(_DWORD *)uint64_t v14 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 400) = sub_10001DF20(v69, v13, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        sub_1000F7CF4();
        swift_bridgeObjectRetain();
        uint64_t v15 = v71;
        *(void *)(v0 + 392) = sub_10001DF20(v71, v8, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to get asset versioned data for %s: %s", v14, 0x16u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v15 = v71;
      }
      sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      uint64_t v25 = sub_10004415C();
      sub_1000B7920(v25, v26);
      *uint64_t v27 = v15;
      v27[1] = v8;
      sub_1000F7F08();
      v28();
      swift_willThrow();
    }
    swift_errorRelease();
    sub_1000F7860();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
LABEL_20:
    sub_1000306EC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v18 = *(void *)(v0 + 472);
  uint64_t v19 = (long long *)sub_100043EDC();
  sub_10000831C(v19, v20);
  sub_100042C34(v0 + 216, v0 + 96);
  uint64_t v21 = swift_allocObject();
  *(void *)(v0 + 608) = v21;
  *(void *)(v21 + 16) = v18;
  sub_10000831C((long long *)(v0 + 96), v21 + 24);
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1000F0770;
  sub_1000306EC();
  return sub_1000EDC88();
}

uint64_t sub_1000F0770()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 624) = v0;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000F0864()
{
  uint64_t v55 = v0;
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[68];
  sub_100069DF4();
  v3();
  FilePath.init(_:)();
  if (sub_100006AE8(v2, 1, v1) == 1)
  {
    sub_10002EB50(v0[68], &qword_10015C9D0);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100003B18(v51, (uint64_t)qword_10015E9B0);
    uint64_t v4 = sub_100043EDC();
    sub_1000F6FAC(v4, v5, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v10 = v0[57];
      unint64_t v9 = v0[58];
      uint64_t v11 = (uint8_t *)sub_10000EFE8();
      v54[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_bridgeObjectRetain();
      v0[54] = sub_10001DF20(v10, v9, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000F7CA8();
      sub_1000F7CF4();
      sub_1000F6DF0(&qword_10015C9E8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[55] = sub_10001DF20(v12, v13, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000F7000();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to convert asset %s URL %s to file path", v11, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000F7000();
    }

    uint64_t v28 = v0[57];
    uint64_t v27 = v0[58];
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v29 = sub_10004415C();
    *uint64_t v30 = v28;
    v30[1] = v27;
    sub_1000F7F08();
    v31();
    swift_bridgeObjectRetain();
    swift_willThrow();
    sub_1000F7000();
    sub_100008130((uint64_t)(v0 + 27));
    sub_100008130((uint64_t)(v0 + 2));
    sub_100008130((uint64_t)(v0 + 37));
    v0[53] = v29;
    swift_errorRetain();
    sub_100003A70(&qword_10015B468);
    sub_1000F7EFC();
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v32 = sub_1000F7B94();
      v33(v32);
      sub_10004415C();
      sub_100069DF4();
      v34();
      swift_willThrow();
      uint64_t v35 = sub_1000F7D68();
      v36(v35);
    }
    else
    {
      swift_errorRelease();
      v0[51] = v29;
      swift_errorRetain();
      uint64_t v53 = String.init<A>(describing:)();
      unint64_t v38 = v37;
      if (qword_10015B110 != -1) {
        swift_once();
      }
      sub_100003B18(v51, (uint64_t)qword_10015E9B0);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      unint64_t v42 = v0[58];
      if (v41)
      {
        uint64_t v52 = v0[57];
        uint64_t v43 = sub_10000EFE8();
        v54[0] = sub_10000EFC8();
        *(_DWORD *)uint64_t v43 = 136315394;
        swift_bridgeObjectRetain();
        v0[50] = sub_10001DF20(v52, v42, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v43 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[49] = sub_10001DF20(v53, v38, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1000F7CA8();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to get asset versioned data for %s: %s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v44 = v0[60];
      uint64_t v45 = v0[61];
      uint64_t v46 = sub_10004415C();
      uint64_t v48 = sub_1000B7920(v46, v47);
      *uint64_t v49 = v53;
      v49[1] = v38;
      (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v48, enum case for ModelManagerError.modelCatalogError(_:), v44);
      swift_willThrow();
    }
    swift_errorRelease();
    sub_1000F7860();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
  }
  else
  {
    uint64_t v14 = v0[75];
    uint64_t v15 = v0[73];
    unint64_t v16 = (char *)v0[72];
    uint64_t v17 = v0[70];
    uint64_t v18 = v0[69];
    uint64_t v19 = v0[68];
    uint64_t v20 = (char *)v0[56];
    sub_100008130((uint64_t)(v0 + 27));
    sub_100008130((uint64_t)(v0 + 2));
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v21(v16, v19, v18);
    uint64_t v22 = (uint64_t *)(v14 + *(int *)(v15 + 20));
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    swift_bridgeObjectRetain();
    sub_1000F7000();
    uint64_t v25 = type metadata accessor for ModelCatalogAssetVersionedData(0);
    v21(&v20[*(int *)(v25 + 20)], (uint64_t)v16, v18);
    *(void *)uint64_t v20 = v24;
    *((void *)v20 + 1) = v23;
    sub_100008130((uint64_t)(v0 + 37));
    sub_1000F7A30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
  }
  return v26();
}

void sub_1000F102C()
{
  sub_100008130((uint64_t)(v0 + 27));
  sub_100008130((uint64_t)(v0 + 2));
  sub_100008130((uint64_t)(v0 + 37));
  uint64_t v2 = v0[78];
  v0[53] = v2;
  swift_errorRetain();
  sub_100003A70(&qword_10015B468);
  if (swift_dynamicCast())
  {
    uint64_t v4 = v0[62];
    uint64_t v3 = v0[63];
    uint64_t v5 = v0[60];
    uint64_t v6 = v0[61];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v5);
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v7 = sub_10004415C();
    sub_1000B7920(v7, v8);
    sub_100069DF4();
    v9();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    swift_errorRelease();
    v0[51] = v2;
    swift_errorRetain();
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v12 = v11;
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_1000F7E34();
    sub_100003B18(v13, (uint64_t)qword_10015E9B0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = sub_1000F7DA8(v15);
    unint64_t v17 = v0[58];
    if (v16)
    {
      uint64_t v27 = v0[57];
      uint64_t v28 = v10;
      uint64_t v18 = sub_10000EFE8();
      v29[0] = sub_10000EFC8();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      v0[50] = sub_10001DF20(v27, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[49] = sub_10001DF20(v28, v12, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v1, "Failed to get asset versioned data for %s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      uint64_t v10 = v28;
      sub_10000ED7C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v19 = v0[60];
    uint64_t v20 = v0[61];
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    uint64_t v21 = sub_10004415C();
    uint64_t v23 = sub_1000B7920(v21, v22);
    *uint64_t v24 = v10;
    v24[1] = v12;
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v23, enum case for ModelManagerError.modelCatalogError(_:), v19);
    swift_willThrow();
  }
  swift_errorRelease();
  sub_1000F7860();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000306EC();
  __asm { BRAA            X1, X16 }
}

void sub_1000F1448()
{
  sub_10002FAAC();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  uint64_t v9 = v8;
  __chkstk_darwin(v10, v11);
  sub_1000F7C34();
  uint64_t v12 = type metadata accessor for AssetCost();
  uint64_t v13 = sub_10002FDD0(v12);
  __chkstk_darwin(v13, v14);
  sub_100030298();
  v15._countAndFlagsBits = 0x706D655478616A41;
  v15._object = (void *)0xE800000000000000;
  if (String.hasPrefix(_:)(v15))
  {
    uint64_t v40 = 2019650145;
    unint64_t v41 = 0xE400000000000000;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    char v44 = 1;
LABEL_21:
    swift_bridgeObjectRetain();
    AssetCost.init(onDeviceMemory:)();
    sub_1000F38F0();
    sub_1000F7D44();
    sub_100006960(v33, v34, v35, v7);
    goto LABEL_26;
  }
  v16._countAndFlagsBits = 0xD000000000000018;
  v16._object = (void *)0x800000010012C760;
  if (String.hasPrefix(_:)(v16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = String.count.getter();
    sub_1000F5610(v17, v4, v2);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003B18(v18, (uint64_t)qword_10015E9B0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v39))
    {
      uint64_t v20 = sub_10000EFE8();
      uint64_t v40 = sub_10000EFC8();
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001DF20(v4, v2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v21 = static String._fromSubstring(_:)();
      unint64_t v38 = v19;
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      sub_10001DF20(v21, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E85EC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Using override bundle with identifier %s and provider %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_1000E85EC();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v30 = static String._fromSubstring(_:)();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v40 = v30;
    unint64_t v41 = v32;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    char v44 = 0;
    goto LABEL_21;
  }
  if (qword_10015B1C8 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1001602D8;
  uint64_t v25 = *(void *)(qword_1001602D8 + 16);
  if (v25)
  {
    sub_100030B1C();
    uint64_t v27 = v24 + v26;
    uint64_t v28 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000F6FAC(v27, (uint64_t)v0, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      BOOL v29 = *v0 == v4 && v0[1] == v2;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_1000F7000();
      v27 += v28;
      if (!--v25) {
        goto LABEL_24;
      }
    }
    sub_1000F7404((uint64_t)v0, v6, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    uint64_t v36 = v6;
    uint64_t v37 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_24:
    uint64_t v36 = v6;
    uint64_t v37 = 1;
  }
  sub_100006960(v36, v37, 1, v7);
  swift_bridgeObjectRelease();
LABEL_26:
  sub_10002FAC4();
}

uint64_t sub_1000F1910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for AssetLock();
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  v4[13] = *(void *)(v6 + 64);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000F19DC, 0, 0);
}

uint64_t sub_1000F19DC()
{
  sub_100030AFC();
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_100042C34(*(void *)(v0 + 80), v0 + 16);
  sub_100069DF4();
  v4();
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 120) = v6;
  sub_10000831C((long long *)(v0 + 16), v6 + 16);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t))((char *)&dword_10015EC90
                                                                                              + dword_10015EC90);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000F1B40;
  uint64_t v8 = *(void *)(v0 + 56);
  return v10(v8, sub_1000F6ECC, v6);
}

uint64_t sub_1000F1B40()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1000579A4();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    sub_1000304E0();
    return v10();
  }
}

uint64_t sub_1000F1C48()
{
  sub_1000086E0();
  swift_release();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1000F1CAC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000853C(a1, a1[3]);
  a2[3] = swift_getAssociatedTypeWitness();
  a2[4] = swift_getAssociatedConformanceWitness();
  sub_10006FC18(a2);
  uint64_t result = dispatch thunk of AssetBackedResource.fetchLockedAsset(with:)();
  if (v2) {
    return sub_1000570C0((uint64_t)a2);
  }
  return result;
}

uint64_t sub_1000F1D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_1000F7C34();
  uint64_t v8 = type metadata accessor for TaskPriority();
  sub_100006960(v2, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  int v10 = sub_100006AE8(v2, 1, v8);
  swift_retain();
  if (v10 == 1)
  {
    sub_10002EB50(v2, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_10000EFBC();
    v11();
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000F1F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  uint64_t v6 = sub_100003A70(&qword_10015EC50);
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015EC58);
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000F2078, 0, 0);
}

uint64_t sub_1000F2078()
{
  sub_10002FC60();
  sub_100003A70(&qword_10015EC60);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100128650;
  static Catalog.Resource.DisabledUseCaseList.All()();
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  sub_10000853C(v0 + 2, v3);
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = *(void *)(v2 + 8);
  sub_10006FC18((uint64_t *)(v1 + 32));
  sub_10002FC6C();
  (*(void (**)(void))(v4 + 16))();
  sub_100008130((uint64_t)(v0 + 2));
  static Catalog.monitorUpdates(for:on:)();
  swift_bridgeObjectRelease();
  AsyncStream.makeAsyncIterator()();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000F224C;
  sub_1000579A4();
  sub_10002FEAC();
  return AsyncStream.Iterator.next(isolation:)(v6, v7, v8, v9);
}

uint64_t sub_1000F224C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000F2314()
{
  sub_10000F01C();
  if (v0[7])
  {
    uint64_t v1 = (int *)v0[8];
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t (*)(void))((char *)v1 + *v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[17] = v2;
    void *v2 = v0;
    v2[1] = sub_1000F2470;
    return v7();
  }
  else
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    uint64_t v4 = sub_100043EDC();
    v5(v4);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    return v6();
  }
}

uint64_t sub_1000F2470()
{
  sub_10000F01C();
  uint64_t v1 = *v0;
  sub_1000086D0();
  uint64_t *v2 = v1;
  uint64_t v3 = *v0;
  uint64_t *v2 = *v0;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 128) = v4;
  void *v4 = v3;
  v4[1] = sub_1000F224C;
  sub_1000579A4();
  return AsyncStream.Iterator.next(isolation:)(v5, v6, v7, v8);
}

uint64_t sub_1000F25D4()
{
  *(void *)(v1 + 192) = v0;
  return _swift_task_switch(sub_1000F25F4, v0, 0);
}

uint64_t sub_1000F25F4()
{
  if (qword_10015B128 != -1) {
    swift_once();
  }
  uint64_t v4 = dispatch thunk of CatalogClient.resources()();
  uint64_t v7 = *(void *)(v4 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t)(v0 + 2);
    uint64_t v1 = (uint64_t)(v0 + 7);
    uint64_t v2 = v4 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v3 = &qword_10015EC30;
    uint64_t v28 = v0;
    do
    {
      sub_100042C34(v2, v8);
      uint64_t v10 = sub_1000F7EF0();
      sub_100042C34(v10, v11);
      sub_100003A70(&qword_10015EC28);
      sub_100003A70(&qword_10015EC30);
      if (swift_dynamicCast())
      {
        sub_10000853C((void *)v1, v0[10]);
        sub_1000F7E88();
        uint64_t v12 = dispatch thunk of CatalogResource.id.getter();
        uint64_t v14 = v13;
        sub_100008130(v1);
        sub_100008130(v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000F5890();
          uint64_t v9 = v17;
        }
        unint64_t v15 = v9[2];
        if (v15 >= v9[3] >> 1)
        {
          sub_1000F5890();
          uint64_t v9 = v18;
        }
        long long v9[2] = v15 + 1;
        Swift::String v16 = &v9[2 * v15];
        v16[4] = v12;
        uint64_t v16[5] = v14;
        uint64_t v0 = v28;
        uint64_t v3 = &qword_10015EC30;
      }
      else
      {
        *(void *)(v1 + 32) = 0;
        *(_OWORD *)uint64_t v1 = 0u;
        *(_OWORD *)(v1 + 16) = 0u;
        sub_10002EB50(v1, &qword_10015EC38);
        sub_100008130(v8);
      }
      v2 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  v0[25] = (uint64_t)v9;
  uint64_t v19 = (uint64_t *)(v0[24] + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_onAssetUpdateHandlers);
  sub_100043D2C();
  uint64_t v20 = *v19;
  v0[26] = *v19;
  uint64_t v21 = *(void *)(v20 + 16);
  v0[27] = v21;
  if (!v21)
  {
    swift_bridgeObjectRelease();
    sub_10000EF7C();
    sub_100043638();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v22 = v9[2];
  v0[28] = v22;
  v0[29] = 0;
  uint64_t v23 = *(void *)(v20 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v23)
  {
    v0[30] = *(void *)(result + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    v0[22] = Set.init(minimumCapacity:)();
    if (v22)
    {
      sub_1000F7EDC();
      do
      {
        sub_1000F7C0C();
        sub_100020654();
        swift_bridgeObjectRelease();
        v1 += 16;
      }
      while ((uint64_t *)v2 != v3);
    }
    swift_bridgeObjectRelease();
    sub_1000F78A4();
    uint64_t v25 = (void *)swift_task_alloc();
    v0[32] = (uint64_t)v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1000F29EC;
    sub_100043638();
    __asm { BRAA            X0, X16 }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F29EC()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000F2B0C, v2, 0);
}

void sub_1000F2B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  unint64_t v16 = v12[29] + 1;
  if (v16 == v12[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000EF7C();
    sub_1000307C8();
    v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    v12[29] = v16;
    uint64_t v25 = v12[26];
    if (v16 >= *(void *)(v25 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v12[28];
      v12[30] = *(void *)(v25 + 16 * v16 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      v12[22] = Set.init(minimumCapacity:)();
      if (v26)
      {
        sub_1000F7EDC();
        do
        {
          sub_1000F7C0C();
          sub_100020654();
          swift_bridgeObjectRelease();
          v13 += 16;
        }
        while (v14 != v15);
      }
      swift_bridgeObjectRelease();
      sub_1000F78A4();
      uint64_t v37 = (char *)v27 + *v27;
      uint64_t v28 = (void *)swift_task_alloc();
      v12[32] = v28;
      void *v28 = v12;
      v28[1] = sub_1000F29EC;
      sub_1000307C8();
      v29(v29, v30, v31, v32, v33, v34, v35, v36, v37, a10, a11, a12);
    }
  }
}

uint64_t sub_1000F2CA8()
{
  sub_10002EB50(v0 + OBJC_IVAR____TtC13modelmanagerd20ModelCatalogProvider_assetLock, &qword_10015ECD8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000F2D18()
{
  sub_1000F2CA8();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000F2D44()
{
  return type metadata accessor for ModelCatalogProvider(0);
}

uint64_t type metadata accessor for ModelCatalogProvider(uint64_t a1)
{
  return sub_100067BD8(a1, (uint64_t *)&unk_10015E9F8);
}

void sub_1000F2D6C()
{
  sub_1000F2E3C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000F2E3C()
{
  if (!qword_10015EA28)
  {
    type metadata accessor for AssetLock();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015EA28);
    }
  }
}

uint64_t *sub_1000F2E94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000F2F6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F2FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F306C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F3108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000F3184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F3210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F3224);
}

uint64_t sub_1000F3224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100030194();
  type metadata accessor for URL();
  sub_100057B10();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100006AE8(v3, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(v3 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_1000F32B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F32C4);
}

void sub_1000F32C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  sub_100057B10();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_1000F7F50();
    sub_100006960(v9, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015EBF0);
}

uint64_t sub_1000F336C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000F3400(uint64_t *a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015C038);
  __chkstk_darwin(v2 - 8, v3);
  int v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v25 - v14;
  uint64_t v17 = *a1;
  unint64_t v16 = a1[1];
  type metadata accessor for ModelCatalogProvider(0);
  sub_1000F1448();
  if (sub_100006AE8((uint64_t)v5, 1, v6) == 1)
  {
    sub_10002EB50((uint64_t)v5, &qword_10015C038);
    if (qword_10015B110 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003B18(v18, (uint64_t)qword_10015E9B0);
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      v25[1] = sub_10001DF20(v17, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Dependent asset %s not found in test assets", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v23 = type metadata accessor for ModelManagerError();
    sub_1000F6DF0((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    *uint64_t v24 = v17;
    v24[1] = v16;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for ModelManagerError.assetNotFound(_:), v23);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    sub_1000F7404((uint64_t)v5, (uint64_t)v15, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    sub_1000F6FAC((uint64_t)v15, (uint64_t)v10, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    sub_100020AC8();
    sub_1000F7000();
    return sub_1000F7000();
  }
}

void sub_1000F37E0()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160110);
  sub_100003B18(v2, (uint64_t)qword_100160110);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F38F0()
{
  sub_10002FAAC();
  char v1 = v0;
  char v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  sub_100003A70(&qword_10015B810);
  uint64_t v16 = swift_allocObject();
  long long v17 = *v9;
  long long v18 = v9[1];
  *(_OWORD *)(v16 + 16) = xmmword_100128650;
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = v18;
  *(unsigned char *)(v16 + 64) = *((unsigned char *)v9 + 32);
  *uint64_t v15 = v13;
  v15[1] = v11;
  v15[2] = v7;
  v15[3] = v16;
  uint64_t v19 = (int *)type metadata accessor for ModelCatalogAsset(0);
  type metadata accessor for AssetCost();
  sub_10002FB84();
  sub_100030658();
  v20();
  *((unsigned char *)v15 + v19[8]) = v5;
  *((unsigned char *)v15 + v19[9]) = v3;
  *((unsigned char *)v15 + v19[10]) = v1;
  sub_10002FAC4();
}

void sub_1000F39D8()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160128);
  sub_100003B18(v2, (uint64_t)qword_100160128);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F3AE8()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160140);
  sub_100003B18(v2, (uint64_t)qword_100160140);
  if (qword_10015B118 != -1) {
    swift_once();
  }
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F3C2C()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160158);
  sub_100003B18(v2, (uint64_t)qword_100160158);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F3D3C()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160170);
  sub_100003B18(v2, (uint64_t)qword_100160170);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F3E50()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160188);
  sub_100003B18(v2, (uint64_t)qword_100160188);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F3F70()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001601A0);
  sub_100003B18(v2, (uint64_t)qword_1001601A0);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F408C()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001601B8);
  sub_100003B18(v2, (uint64_t)qword_1001601B8);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4194()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001601D0);
  sub_100003B18(v2, (uint64_t)qword_1001601D0);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4298()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001601E8);
  sub_100003B18(v2, (uint64_t)qword_1001601E8);
  if (qword_10015B118 != -1) {
    swift_once();
  }
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F43D0()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160200);
  sub_100003B18(v2, (uint64_t)qword_100160200);
  if (qword_10015B118 != -1) {
    swift_once();
  }
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4508()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160218);
  sub_100003B18(v2, (uint64_t)qword_100160218);
  if (qword_10015B120 != -1) {
    swift_once();
  }
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4640()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160230);
  sub_100003B18(v2, (uint64_t)qword_100160230);
  if (qword_10015B120 != -1) {
    swift_once();
  }
  if (qword_100160100 == -1)
  {
    __break(1u);
  }
  else
  {
    AssetCost.init(onDeviceMemory:)();
    sub_1000F38F0();
  }
}

uint64_t sub_1000F4784()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  char v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = (int *)type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4((uint64_t)v5, qword_100160248);
  uint64_t v6 = (char *)sub_100003B18((uint64_t)v5, (uint64_t)qword_100160248);
  AssetCost.init(onDeviceMemory:)();
  *(void *)uint64_t v6 = 0xD000000000000023;
  *((void *)v6 + 1) = 0x800000010012C850;
  *((void *)v6 + 2) = &_swiftEmptyArrayStorage;
  *((void *)v6 + 3) = &off_100152C70;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(&v6[v5[7]], v4, v0);
  v6[v5[8]] = 1;
  v6[v5[9]] = 0;
  v6[v5[10]] = 0;
  return result;
}

void sub_1000F48D0()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160260);
  sub_100003B18(v2, (uint64_t)qword_100160260);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F49E0()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160278);
  sub_100003B18(v2, (uint64_t)qword_100160278);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4AE4()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_100160290);
  sub_100003B18(v2, (uint64_t)qword_100160290);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4BEC()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001602A8);
  sub_100003B18(v2, (uint64_t)qword_1001602A8);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

void sub_1000F4CF4()
{
  uint64_t v0 = type metadata accessor for AssetCost();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v2 = type metadata accessor for ModelCatalogAsset(0);
  sub_100003AB4(v2, qword_1001602C0);
  sub_100003B18(v2, (uint64_t)qword_1001602C0);
  AssetCost.init(onDeviceMemory:)();
  sub_1000F38F0();
}

uint64_t sub_1000F4DFC()
{
  sub_100003A70(&qword_10015B808);
  uint64_t v0 = type metadata accessor for ModelCatalogAsset(0);
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10012A320;
  uint64_t v4 = v3 + v2;
  if (qword_10015B130 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100003B18(v0, (uint64_t)qword_100160110);
  sub_1000F6FAC(v5, v4, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B138 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100003B18(v0, (uint64_t)qword_100160128);
  sub_1000F6FAC(v6, v4 + v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B140 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100003B18(v0, (uint64_t)qword_100160140);
  sub_1000F6FAC(v7, v4 + 2 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B148 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100003B18(v0, (uint64_t)qword_100160158);
  sub_1000F6FAC(v8, v4 + 3 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B150 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100003B18(v0, (uint64_t)qword_100160170);
  sub_1000F6FAC(v9, v4 + 4 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B160 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100003B18(v0, (uint64_t)qword_1001601A0);
  sub_1000F6FAC(v10, v4 + 5 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B158 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100003B18(v0, (uint64_t)qword_100160188);
  sub_1000F6FAC(v11, v4 + 6 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B168 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100003B18(v0, (uint64_t)qword_1001601B8);
  sub_1000F6FAC(v12, v4 - v1 + 8 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B170 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100003B18(v0, (uint64_t)qword_1001601D0);
  sub_1000F6FAC(v13, v4 + 8 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B178 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100003B18(v0, (uint64_t)qword_1001601E8);
  sub_1000F6FAC(v14, v4 + 9 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B180 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100003B18(v0, (uint64_t)qword_100160200);
  sub_1000F6FAC(v15, v4 + 10 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B188 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100003B18(v0, (uint64_t)qword_100160218);
  sub_1000F6FAC(v16, v4 + 11 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B190 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100003B18(v0, (uint64_t)qword_100160230);
  sub_1000F6FAC(v17, v4 + 12 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B198 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_100003B18(v0, (uint64_t)qword_100160248);
  sub_1000F6FAC(v18, v4 + 13 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B1A0 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_100003B18(v0, (uint64_t)qword_100160260);
  sub_1000F6FAC(v19, v4 + 14 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B1A8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100003B18(v0, (uint64_t)qword_100160278);
  sub_1000F6FAC(v20, v4 - v1 + 16 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B1B0 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100003B18(v0, (uint64_t)qword_100160290);
  sub_1000F6FAC(v21, v4 + 16 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B1B8 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_100003B18(v0, (uint64_t)qword_1001602A8);
  sub_1000F6FAC(v22, v4 + 17 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  if (qword_10015B1C0 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100003B18(v0, (uint64_t)qword_1001602C0);
  uint64_t result = sub_1000F6FAC(v23, v4 + 18 * v1, (void (*)(void))type metadata accessor for ModelCatalogAsset);
  qword_1001602D8 = v3;
  return result;
}

unint64_t sub_1000F5610(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)();
    if (v6) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      uint64_t v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

void sub_1000F56E4()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F5890();
    *uint64_t v0 = v3;
  }
}

uint64_t sub_1000F5760()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1000F5DAC(0, *(void *)(v1 + 16) + 1, 1, v1);
    *uint64_t v0 = result;
  }
  return result;
}

void sub_1000F57AC(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1)
  {
    sub_1000F5890();
    *(void *)uint64_t v1 = v2;
  }
}

uint64_t sub_1000F581C(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1000F5DAC(v2 > 1, result + 1, 1, *v1);
    *uint64_t v1 = result;
  }
  return result;
}

void sub_1000F585C()
{
}

void sub_1000F5890()
{
  sub_1000F7F5C();
  if (v6)
  {
    sub_100030828();
    if (v8 != v9)
    {
      sub_1000F7E28();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_100003A70(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_1000F7E10();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

uint64_t sub_1000F596C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000F7CA0(a1, a2, a3, a4, &qword_10015BA38, (uint64_t (*)(void))&type metadata accessor for InferenceProviderDescriptor, a7, (void (*)(uint64_t, uint64_t, unint64_t))sub_10001D6A4);
}

void sub_1000F59A0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100030828();
    if (v7 != v8)
    {
      sub_1000F7E28();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_100003A70(&qword_10015B810);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v13 = v11 + 32;
  if (a1)
  {
    sub_10001D6BC((char *)(a4 + 32), v9, v13);
    sub_1000F7E10();
  }
  else
  {
    sub_1000F61F0(0, v9, (unint64_t)v13, a4);
  }
}

uint64_t sub_1000F5A7C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000F7CA0(a1, a2, a3, a4, &qword_10015B808, type metadata accessor for ModelCatalogAsset, a7, (void (*)(uint64_t, uint64_t, unint64_t))sub_10001D71C);
}

uint64_t sub_1000F5AB0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(uint64_t, uint64_t, unint64_t))
{
  if (a3)
  {
    sub_100030828();
    if (v14 != v15)
    {
      sub_1000F7E28();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100003A70(a5);
  uint64_t v18 = a6(0);
  sub_10002FA4C(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)swift_allocObject();
  size_t v24 = j__malloc_size(v23);
  if (!v20 || (v24 - v22 == 0x8000000000000000 ? (BOOL v25 = v20 == -1) : (BOOL v25 = 0), v25))
  {
LABEL_23:
    sub_10002FA74();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  a6(0);
  sub_100030B1C();
  unint64_t v27 = (unint64_t)v23 + v26;
  if (a1)
  {
    a8(a4 + v26, v16, v27);
    sub_1000F7E10();
  }
  else
  {
    sub_1000F62F0(0, v16, v27, a4, a7);
  }
  return (uint64_t)v23;
}

void sub_1000F5CA0()
{
}

void sub_1000F5CC8()
{
  sub_1000F7F5C();
  if (v6)
  {
    sub_100030828();
    if (v8 != v9)
    {
      sub_1000F7E28();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100030818();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_100003A70(v5);
    size_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    size_t v12 = _swiftEmptyArrayStorage;
  }
  unint64_t v14 = (unint64_t)(v12 + 4);
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_1000F7E10();
  }
  else
  {
    sub_1000F659C(0, v10, v14, v0, v1);
  }
}

uint64_t sub_1000F5DAC(char a1, int64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100003A70(&qword_10015ED50);
  uint64_t v10 = *(void *)(sub_100003A70(&qword_10015B9D0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  size_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100003A70(&qword_10015B9D0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  if (a1)
  {
    sub_10001D81C(a4 + v17, v8);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000F6438(0, v8, (unint64_t)v13 + v17, a4);
  }
  return (uint64_t)v13;
}

uint64_t sub_1000F5FE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F60D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100003A70(&qword_10015ECD0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F61F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F62F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      sub_1000F7F50();
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  sub_10002FA74();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F6438(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100003A70(&qword_10015B9D0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F659C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_100003A70(a5);
      sub_1000F7F50();
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  sub_10002FA74();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F669C()
{
  sub_1000F7C78();
  sub_1000F7DE4();
  sub_1000F7B44();
  if (v1)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1000F7908();
    int v4 = sub_100003A70(&qword_10015D2F8);
    sub_1000F7954(v4, v5, v6, v7, v8, v9, v10, v11, v19, v20);
    sub_1000F7B60();
    uint64_t v12 = *(void *)(v1 + 56);
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    sub_10002FB84();
    sub_1000F7404(v12 + *(void *)(v13 + 72) * v3, v0, (void (*)(void))type metadata accessor for InferenceProviderManager.ConnectionCollection.Group);
    _NativeDictionary._delete(at:)();
    void *v2 = v1;
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_1000F7F1C();
  }
  else
  {
    type metadata accessor for InferenceProviderManager.ConnectionCollection.Group(0);
    uint64_t v14 = sub_100030370();
  }

  return sub_100006960(v14, v15, v16, v17);
}

uint64_t sub_1000F6790()
{
  sub_1000F7C78();
  sub_1000F7DE4();
  sub_1000F7B44();
  if (v0)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1000F7908();
    int v2 = sub_100003A70(&qword_10015B848);
    sub_1000F7954(v2, v3, v4, v5, v6, v7, v8, v9, v16, v17);
    sub_1000F7B60();
    type metadata accessor for Policy();
    sub_10002FB84();
    sub_100030658();
    v10();
    _NativeDictionary._delete(at:)();
    *uint64_t v1 = v0;
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_1000F7F1C();
  }
  else
  {
    type metadata accessor for Policy();
    uint64_t v11 = sub_100030370();
  }

  return sub_100006960(v11, v12, v13, v14);
}

double sub_1000F6880@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = v3;
  swift_bridgeObjectRetain();
  sub_1000F7DE4();
  sub_1000F7B44();
  if (a2)
  {
    swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = *v4;
    void *v4 = 0x8000000000000000;
    int v8 = sub_100003A70(&qword_10015E0B8);
    sub_1000F7954(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18[0]);
    sub_1000F7B60();
    sub_10000831C((long long *)(*(void *)(a2 + 56) + 40 * a1), a3);
    sub_100003A70(&qword_10015BB38);
    _NativeDictionary._delete(at:)();
    void *v4 = a2;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000F698C(uint64_t a1)
{
  int v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  sub_10001E72C(a1);
  sub_1000F7B44();
  if (v4)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1000F7908();
    int v5 = sub_100003A70(&qword_10015E0C0);
    sub_1000F7954(v5, v6, v7, v8, v9, v10, v11, v12, v21, v22);
    sub_100003A70(&qword_10015B408);
    sub_10002FB84();
    sub_10000EFBC();
    v13();
    uint64_t v14 = type metadata accessor for RequestPriority();
    sub_10002FB84();
    sub_100030658();
    v15();
    sub_10000841C(&qword_10015B9B0, &qword_10015B408);
    _NativeDictionary._delete(at:)();
    uint64_t *v2 = v23;
    swift_bridgeObjectRelease();
    sub_1000F7D44();
    uint64_t v19 = v14;
  }
  else
  {
    type metadata accessor for RequestPriority();
    uint64_t v16 = sub_100030370();
  }

  return sub_100006960(v16, v17, v18, v19);
}

uint64_t sub_1000F6B04(uint64_t a1)
{
  int v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10001E7EC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v7 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_100003A70(&qword_10015E0B0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v4);
  sub_100003A70(&qword_10015ECF8);
  sub_1000F6DF0(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  _NativeDictionary._delete(at:)();
  uint64_t *v2 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000F6C74()
{
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_1000F1F54(v3, v4, v5, v6, v7);
}

uint64_t sub_1000F6D14()
{
  swift_release();
  sub_100008130(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000F6D54()
{
  sub_1000086EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_1000F7D80();
  return sub_1000F1910(v3, v4, v5, v6);
}

uint64_t sub_1000F6DF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F6E38()
{
  type metadata accessor for AssetLock();
  sub_10000ED60();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 56) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  sub_100008130(v0 + 16);
  uint64_t v8 = sub_1000F7D04();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_1000F6ECC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AssetLock();
  sub_1000301E0(v3);
  return sub_1000F1CAC((void *)(v1 + 16), a1);
}

void sub_1000F6F1C()
{
}

uint64_t sub_1000F6F68()
{
  return sub_1000F7608(&qword_10015ECA0);
}

uint64_t sub_1000F6F74()
{
  return sub_1000F76B8(&qword_10015ECA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000E957C);
}

uint64_t sub_1000F6F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F6FA4()
{
  return swift_release();
}

uint64_t sub_1000F6FAC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FB84();
  uint64_t v4 = sub_100044790();
  v5(v4);
  return a2;
}

uint64_t sub_1000F7000()
{
  uint64_t v1 = sub_100030194();
  v2(v1);
  sub_10002FB84();
  sub_10000EFBC();
  v3();
  return v0;
}

uint64_t sub_1000F7050()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F7088()
{
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_1000F7D80();
  return v4(v3);
}

uint64_t sub_1000F7138()
{
  sub_10000F01C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  uint64_t v3 = sub_10000EF88();
  return sub_1000EEEC0(v3, v4, v5, v6, v7);
}

uint64_t sub_1000F71D8()
{
  sub_10002FAAC();
  type metadata accessor for UUID();
  sub_10000ED60();
  uint64_t v2 = sub_1000F7E68();
  sub_10000ED60();
  uint64_t v4 = v3;
  unint64_t v5 = (v1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();
  swift_release();
  sub_1000E84D0();
  v6();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v2);
  sub_10002FAC4();
  return _swift_deallocObject(v7, v8, v9);
}

uint64_t sub_1000F72D8()
{
  sub_10002FC60();
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for UUID();
  sub_10002FA4C(v6);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = sub_1000F7E68();
  sub_1000301E0(v9);
  unint64_t v11 = (v2 + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v0[2];
  uint64_t v13 = v0[3];
  uint64_t v14 = v0[4];
  uint64_t v15 = (uint64_t)v0 + v8;
  uint64_t v16 = (char *)v0 + v2;
  uint64_t v17 = *(int **)((char *)v0 + v2);
  uint64_t v18 = *((void *)v16 + 1);
  uint64_t v19 = (uint64_t)v0 + v11;
  char v20 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v20;
  *char v20 = v3;
  v20[1] = sub_10000E1FC;
  return sub_1000EE9E0(v5, v12, v13, v14, v15, v17, v18, v19);
}

uint64_t sub_1000F7404(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10002FB84();
  sub_100030658();
  v4();
  return a2;
}

uint64_t sub_1000F7460()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F74A0()
{
  sub_1000086EC();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000086AC(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_10000ED54;
  return sub_1000ED2D4(v2, v3, v4, v5);
}

uint64_t sub_1000F7548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015ECD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000F75B0()
{
}

uint64_t sub_1000F75FC()
{
  return sub_1000F7608(&qword_10015ED48);
}

uint64_t sub_1000F7608(uint64_t *a1)
{
  sub_100003A70(a1);
  sub_10000ED60();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = ((v6 + 32) & ~v6) + *(void *)(v5 + 64);
  uint64_t v8 = v6 | 7;
  swift_release();
  uint64_t v9 = sub_1000F7D04();
  v10(v9);

  return _swift_deallocObject(v1, v7, v8);
}

uint64_t sub_1000F7698()
{
  return sub_1000F76B8(&qword_10015ED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000E94EC);
}

uint64_t sub_1000F76B8(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = sub_100003A70(a1);
  sub_1000301E0(v3);
  sub_100030B1C();
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);

  return a2(v5, v6, v2 + v4);
}

uint64_t sub_1000F7708(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F7758()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_1000F77B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v11 + a9) = *(void *)(*(void *)(v9 + 56) + 8 * v12);
  return v10;
}

uint64_t sub_1000F781C()
{
  uint64_t v2 = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  sub_100006960(v1, 1, 1, v2);
  return sub_10002EB50(v1, v0);
}

uint64_t sub_1000F7860()
{
  return swift_task_dealloc();
}

void sub_1000F78A4()
{
  uint64_t v1 = v0[22];
  v0[31] = v1;
  v0[23] = v1;
}

uint64_t sub_1000F78C4()
{
  return v0;
}

uint64_t sub_1000F78E0()
{
  return type metadata accessor for UUID();
}

void sub_1000F7908()
{
  *uint64_t v0 = 0x8000000000000000;
}

char *sub_1000F7924(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a1[2] = a13;
  a1[3] = v13;
  a1[4] = a13;
  return (char *)a1 + v14;
}

BOOL sub_1000F7954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000F7974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char v20 = (void *)(v17 + v19);
  *char v20 = a15;
  v20[1] = a17;
  return v17 + v18;
}

uint64_t sub_1000F79A0()
{
  sub_100006960(v1, 0, 1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F79D8()
{
  return swift_task_dealloc();
}

uint64_t sub_1000F79F4(void *a1)
{
  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v2;
  return swift_retain_n();
}

void sub_1000F7A18()
{
  v0[14] = *(void *)(v0[9] + *(int *)(v0[7] + 48));
}

uint64_t sub_1000F7A30()
{
  return swift_task_dealloc();
}

uint64_t sub_1000F7A60(uint64_t a1, uint64_t a2)
{
  sub_100003B18(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000F7A90(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  uint64_t result = type metadata accessor for ModelCatalogProvider.CatalogAssetProtocolData(0);
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000F7AC8()
{
  return swift_task_dealloc();
}

uint64_t sub_1000F7AE8()
{
  *(void *)(v1 + *(int *)(v0 + 48)) = v2;
  return swift_retain_n();
}

uint64_t sub_1000F7B44()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F7B60()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F7B94()
{
  return v0;
}

uint64_t sub_1000F7BB4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000F7BCC()
{
  return v0;
}

uint64_t sub_1000F7BE8()
{
  return sub_100006AE8(v1, 1, v0);
}

uint64_t sub_1000F7C0C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F7C34()
{
  return 0;
}

uint64_t sub_1000F7C50()
{
  return swift_beginAccess();
}

uint64_t sub_1000F7C78()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F7CA0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t a7, void (*a8)(uint64_t, uint64_t, unint64_t))
{
  return sub_1000F5AB0(a1, a2, a3, a4, a5, a6, a6, a8);
}

uint64_t sub_1000F7CA8()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000F7CD0()
{
  return dispatch thunk of ManagedResource.cost.getter();
}

void sub_1000F7CF4()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_1000F7D04()
{
  return v0 + v1;
}

uint64_t sub_1000F7D1C()
{
  return *(void *)(v0 + 88) + *(void *)(v0 + 200);
}

uint64_t sub_1000F7D68()
{
  return v0;
}

uint64_t sub_1000F7D80()
{
  return v0;
}

void *sub_1000F7D98(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = v3;
  a2[1] = v2;
  return result;
}

BOOL sub_1000F7DA8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

unint64_t sub_1000F7DE4()
{
  return sub_10001E648(v1, v0);
}

uint64_t sub_1000F7E10()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F7E34()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1000F7E4C(uint64_t a1)
{
  *(void *)(v2 + v1) = a1;
  return swift_release();
}

uint64_t sub_1000F7E68()
{
  return type metadata accessor for AssetLock();
}

void sub_1000F7EA8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000F7EF0()
{
  return v0;
}

uint64_t sub_1000F7EFC()
{
  return v0;
}

uint64_t sub_1000F7F1C()
{
  return v0;
}

uint64_t sub_1000F7F30(uint64_t a1)
{
  return sub_100006960(v1, 1, 1, a1);
}

uint64_t sub_1000F7F50()
{
  return v0;
}

unsigned char *storeEnumTagSinglePayload for ModelManager(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F8050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelManager()
{
  return &type metadata for ModelManager;
}

unint64_t sub_1000F808C()
{
  unint64_t result = qword_10015ED58;
  if (!qword_10015ED58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015ED58);
  }
  return result;
}

const char *sub_1000F80D8(char a1)
{
  if (a1) {
    return "asset_transition_delay";
  }
  else {
    return "block_allowlist_enforcement";
  }
}

const char *sub_1000F8104()
{
  return "ModelManager";
}

const char *sub_1000F8118()
{
  return sub_1000F80D8(*v0);
}

uint64_t sub_1000F8138(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000F814C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 5))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
      BOOL v4 = v3 >= 5;
      int v2 = v3 - 5;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000F8188(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 4;
    }
  }
  return result;
}

void type metadata accessor for ProcessEvent()
{
}

uint64_t sub_1000F81D8()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F8214(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F825C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_1000F82D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000F82E8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F8338(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000F838C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

void type metadata accessor for ProcessHandle()
{
}

unsigned char *sub_1000F83F4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F84C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for ProcessPriority()
{
}

unint64_t sub_1000F84F8()
{
  unint64_t result = qword_10015ED60;
  if (!qword_10015ED60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015ED60);
  }
  return result;
}

void *sub_1000F8544(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for InferenceProviderAssetDescriptor();
  uint64_t v5 = *(void *)(v42 - 8);
  uint64_t v7 = __chkstk_darwin(v42, v6);
  unint64_t v41 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v40 = (char *)v36 - v10;
  uint64_t v47 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v11 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v12);
  uint64_t v46 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    v36[1] = a2;
    uint64_t v48 = v2;
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_10001F230();
    unint64_t result = (void *)sub_10002E3C4(a1);
    uint64_t v17 = (uint64_t)result;
    int v19 = v18 & 1;
    uint64_t v38 = a1;
    uint64_t v39 = a1 + 56;
    v36[4] = v5 + 32;
    v36[5] = v5 + 16;
    v36[2] = v11 + 32;
    v36[3] = v5 + 8;
    uint64_t v37 = v11;
    char v20 = v41;
    uint64_t v21 = v42;
    while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v39 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_16;
      }
      if (*(_DWORD *)(a1 + 36) != v16) {
        goto LABEL_17;
      }
      int v43 = v19;
      uint64_t v44 = v16;
      uint64_t v45 = v14;
      uint64_t v22 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v40, *(void *)(a1 + 48) + *(void *)(v5 + 72) * v17, v21);
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v20, v22, v21);
      uint64_t v23 = InferenceProviderAssetDescriptor.identifier.getter();
      uint64_t v25 = v24;
      uint64_t v26 = InferenceProviderAssetDescriptor.version.getter();
      uint64_t v27 = v5;
      uint64_t v29 = v28;
      uint64_t v30 = __chkstk_darwin(v26, v28);
      v36[-4] = v23;
      v36[-3] = v25;
      v36[-2] = v30;
      v36[-1] = v29;
      uint64_t v31 = v48;
      static Buildable.with(_:)();
      uint64_t v48 = v31;
      swift_bridgeObjectRelease();
      uint64_t v5 = v27;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v21);
      uint64_t v32 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F230();
        uint64_t v32 = v49;
      }
      uint64_t v33 = v37;
      unint64_t v34 = v32[2];
      if (v34 >= v32[3] >> 1)
      {
        sub_10001F230();
        uint64_t v32 = v49;
      }
      v32[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v34, v46, v47);
      uint64_t v49 = v32;
      a1 = v38;
      unint64_t result = (void *)sub_10002E2DC(v17, v44, v43 & 1, v38);
      uint64_t v17 = (uint64_t)result;
      int v19 = v35 & 1;
      uint64_t v14 = v45 - 1;
      if (v45 == 1)
      {
        sub_10000E60C((uint64_t)result, v16, v19);
        swift_release();
        return v32;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t EventReporterWrapper.deinit()
{
  swift_release();
  return v0;
}

uint64_t type metadata accessor for EventReporterWrapper()
{
  return self;
}

uint64_t _s13modelmanagerd20EventReporterWrapperCfD_0()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TelemetryIntervalState()
{
  return self;
}

void *sub_1000F8A00(void *a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015DA50);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  sub_1000B9970();
  sub_100003A70(&qword_10015EFC0);
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  sub_100003A70(&qword_10015EFC8);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 24) = 0;
  *(void *)(v7 + 16) = v6;
  a1[2] = v7;
  a1[3] = sub_1000F8B34;
  a1[4] = 0;
  uint64_t v8 = type metadata accessor for AuditToken();
  sub_100006960(v1, 1, 1, v8);
  sub_1000F8B34(v1, (uint64_t *)v10);
  sub_1000FD5C0(v1, &qword_10015DA50);
  sub_10000831C(v10, (uint64_t)(a1 + 5));
  type metadata accessor for TelemetrySignposter();
  swift_allocObject();
  a1[10] = sub_1000CAF34();
  return a1;
}

uint64_t sub_1000F8B34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100003A70(&qword_10015DA50);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CA050(a1, (uint64_t)v7, &qword_10015DA50);
  uint64_t v8 = type metadata accessor for AuditToken();
  sub_100006AE8((uint64_t)v7, 1, v8);
  sub_1000FD5C0((uint64_t)v7, &qword_10015DA50);
  type metadata accessor for EventReporter();
  swift_allocObject();
  uint64_t v9 = EventReporter.init()();
  uint64_t v10 = type metadata accessor for EventReporterWrapper();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v9;
  a2[3] = v10;
  a2[4] = (uint64_t)&off_1001550C8;
  *a2 = result;
  return result;
}

void sub_1000F8C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,unsigned __int8 a27,uint64_t a28)
{
  sub_10002FAAC();
  uint64_t v53 = v34;
  sub_1000FD79C();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  LODWORD(v51) = HIBYTE(a26);
  HIDWORD(v51) = a26;
  uint64_t v41 = sub_100003A70(&qword_10015EF60);
  uint64_t v42 = sub_10002FDD0(v41);
  __chkstk_darwin(v42, v43);
  uint64_t v44 = (void *)sub_1000FD6A0();
  sub_10000853C(v44, *(void *)(v28 + 64));
  HIDWORD(v52) = a27;
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v45 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C(v30, v46, v47, v45);
  sub_1000FD5C0(v30, &qword_10015EF60);
  BYTE2(v48) = a27 & 1;
  LOWORD(v48) = a26 & 0x101;
  sub_1000CB114(v40, v38, v36, v33, v32, v31, v29, v53, a21, a22, a23, a24, a25, v48, a28, v49, v50, a22, a24,
    a23,
    a25,
    v51,
    a21,
    v28,
    v52,
    a28,
    BYTE1(a28));
  sub_10002FAC4();
}

uint64_t sub_1000F8EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v35 = a7;
  uint64_t v34 = a6;
  uint64_t v33 = a5;
  uint64_t v32 = a4;
  uint64_t v31 = a3;
  uint64_t v58 = a17;
  int v40 = a16;
  int v39 = a15;
  int v38 = a14;
  uint64_t v37 = a13;
  uint64_t v36 = a12;
  long long v30 = a9;
  uint64_t v19 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v23, v24);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v48 = a2;
  uint64_t v49 = v31;
  uint64_t v50 = v32;
  uint64_t v51 = v33;
  uint64_t v52 = v34;
  uint64_t v53 = v35;
  uint64_t v54 = a8;
  uint64_t v25 = a8;
  long long v55 = v30;
  uint64_t v56 = a10;
  uint64_t v57 = a11;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest();
  uint64_t v26 = swift_allocBox();
  uint64_t v41 = v36;
  uint64_t v42 = v37;
  char v43 = v38;
  char v44 = v39;
  char v45 = v40;
  uint64_t v46 = v58;
  uint64_t v47 = v25;
  static Buildable.with(_:)();
  *uint64_t v22 = v26;
  uint64_t v27 = enum case for GenerativeFunctionsInstrumentationMetadata.mmExecuteRequest(_:);
  uint64_t v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v22, v27, v28);
  sub_100006960((uint64_t)v22, 0, 1, v28);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000F91C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v22[1] = a4;
  v22[2] = a6;
  uint64_t v29 = a11;
  uint64_t v24 = a10;
  uint64_t v23 = a9;
  uint64_t v11 = sub_100003A70(&qword_10015EF78);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100003A70(&qword_10015EF80);
  __chkstk_darwin(v15 - 8, v16);
  char v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003A70(&qword_10015B408);
  UUIDIdentifier.uuid.getter();
  uint64_t v19 = type metadata accessor for UUID();
  sub_100006960((uint64_t)v18, 0, 1, v19);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
  sub_100003A70(&qword_10015B9A0);
  UUIDIdentifier.uuid.getter();
  sub_100006960((uint64_t)v18, 0, 1, v19);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter();
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v25 = v23;
  uint64_t v26 = v24;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  static Buildable.with(_:)();
  sub_100006960((uint64_t)v14, 0, 1, v20);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
  swift_bridgeObjectRetain();
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter();
}

uint64_t sub_1000F93E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_100003A70(&qword_10015EFB8);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.createdByPID.setter();
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.onBehalfOfPID.setter();
  uint64_t v15 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType();
  uint64_t v16 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.oneShot(_:);
  if ((a4 & 1) == 0) {
    uint64_t v16 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.streaming(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v14, *v16, v15);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType();
  sub_100006960((uint64_t)v14, 0, 1, v15);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter();
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isFallbackRequest.setter();
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter();
  swift_retain();
  sub_1000F8544(a7, a8);
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter();
}

void sub_1000F9564()
{
  sub_10002FAAC();
  sub_1000FD700();
  uint64_t v1 = sub_100003A70(&qword_10015EF60);
  uint64_t v2 = sub_10002FDD0(v1);
  __chkstk_darwin(v2, v3);
  sub_1000CF930();
  sub_1000FD6D8();
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C(v0, v5, v6, v4);
  sub_1000FD5C0(v0, &qword_10015EF60);
  sub_1000FD6F0();
  sub_1000CB968();
  sub_10002FAC4();
}

void sub_1000F9668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  sub_10002FAAC();
  uint64_t v28 = v27;
  sub_1000FD79C();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  LODWORD(v44) = HIBYTE(a21);
  HIDWORD(v44) = a21;
  uint64_t v35 = sub_100003A70(&qword_10015EF60);
  uint64_t v36 = sub_10002FDD0(v35);
  __chkstk_darwin(v36, v37);
  int v38 = (void *)sub_1000FD6A0();
  sub_10000853C(v38, *(void *)(v21 + 64));
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v39 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C(v23, v40, v41, v39);
  sub_1000FD5C0(v23, &qword_10015EF60);
  LOWORD(v42) = a21 & 0x101;
  sub_1000CBD88(v34, v32, v30, v26, v25, v24, v22, v28, v42, v43, v44, v21, v34, v32, v30, v26, v25, v24, v22, v28, v45);
  sub_10002FAC4();
}

uint64_t sub_1000F97E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v28 = a8;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  int v39 = a10;
  int v40 = a11;
  uint64_t v14 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (uint64_t *)((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v18, v19);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = v25;
  uint64_t v35 = v26;
  uint64_t v36 = v27;
  uint64_t v37 = v28;
  uint64_t v38 = a9;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest();
  uint64_t v20 = swift_allocBox();
  char v29 = v39;
  char v30 = v40;
  static Buildable.with(_:)();
  uint64_t *v17 = v20;
  uint64_t v21 = enum case for GenerativeFunctionsInstrumentationMetadata.mmExecuteRequest(_:);
  uint64_t v22 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v17, v21, v22);
  sub_100006960((uint64_t)v17, 0, 1, v22);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000F9A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a6;
  v14[1] = a8;
  uint64_t v8 = sub_100003A70(&qword_10015EF80);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003A70(&qword_10015B408);
  UUIDIdentifier.uuid.getter();
  uint64_t v12 = type metadata accessor for UUID();
  sub_100006960((uint64_t)v11, 0, 1, v12);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
  sub_100003A70(&qword_10015B9A0);
  UUIDIdentifier.uuid.getter();
  sub_100006960((uint64_t)v11, 0, 1, v12);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter();
  swift_bridgeObjectRetain();
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter();
}

uint64_t sub_1000F9B9C(uint64_t a1, char a2)
{
  uint64_t v3 = sub_100003A70(&qword_10015EFB8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType();
  uint64_t v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.oneShot(_:);
  if ((a2 & 1) == 0) {
    uint64_t v8 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType.streaming(_:);
  }
  (*(void (**)(char *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v6, *v8, v7);
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType();
  sub_100006960((uint64_t)v6, 0, 1, v7);
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter();
  GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter();
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter();
}

void sub_1000F9CB8()
{
  sub_10002FAAC();
  uint64_t v1 = sub_100003A70(&qword_10015EF60);
  uint64_t v2 = sub_10002FDD0(v1);
  __chkstk_darwin(v2, v3);
  sub_100030934();
  sub_1000FD6D8();
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C(v0, v5, v6, v4);
  sub_1000FD5C0(v0, &qword_10015EF60);
  sub_1000CC3A8();
  sub_10002FAC4();
}

uint64_t sub_1000F9DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_100003A70(&qword_10015EF68);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_100030964();
  type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  sub_10002FB84();
  __chkstk_darwin(v10, v11);
  sub_100030934();
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  static Buildable.with(_:)();
  uint64_t result = GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  if (a5)
  {
    swift_getErrorValue();
    swift_errorRetain();
    sub_10006FED8(v14, v15, v5);
    uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationError();
    sub_1000FD750(v13);
    GenerativeFunctionsInstrumentationEvent.error.setter();
    return swift_errorRelease();
  }
  return result;
}

void sub_1000F9F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10002FAAC();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  unint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v48 = v42;
  uint64_t v43 = sub_100003A70(&qword_10015EF60);
  uint64_t v44 = sub_10002FDD0(v43);
  __chkstk_darwin(v44, v45);
  sub_10006FE24();
  sub_10000853C((void *)(v27 + 40), *(void *)(v27 + 64));
  sub_1000FD694();
  sub_1000FD738();
  if (v31) {
    swift_errorRelease();
  }
  uint64_t v46 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD65C(v46);
  sub_1000FD5C0(v25, &qword_10015EF60);
  sub_1000CC7C8(v48, v41, v39, v37, v35, v33, v31, v29, a21, a22, a23, a24, a25, v47, a22, a23, a24, a25, v48,
    v41,
    v39,
    v37,
    v35,
    v29);
  sub_10002FAC4();
}

uint64_t sub_1000FA0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  uint64_t v36 = a8;
  uint64_t v35 = a7;
  uint64_t v34 = a6;
  uint64_t v33 = a5;
  uint64_t v32 = a4;
  uint64_t v49 = a12;
  long long v37 = a11;
  uint64_t v31 = a10;
  uint64_t v30 = a9;
  uint64_t v14 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (uint64_t *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v18, v19);
  uint64_t v20 = sub_100003A70(&qword_10015EF70);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v24 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v25 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
  sub_100006960((uint64_t)v23, 0, 1, v25);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = v32;
  uint64_t v43 = v33;
  uint64_t v44 = v34;
  uint64_t v45 = v35;
  uint64_t v46 = v36;
  uint64_t v47 = v30;
  uint64_t v48 = v31;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition();
  uint64_t v26 = swift_allocBox();
  long long v38 = v37;
  uint64_t v39 = v49;
  static Buildable.with(_:)();
  uint64_t *v17 = v26;
  uint64_t v27 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  uint64_t v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v17, v27, v28);
  sub_100006960((uint64_t)v17, 0, 1, v28);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000FA424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v50 = a7;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v48 = a1;
  uint64_t v57 = a10;
  uint64_t v51 = a8;
  uint64_t v52 = a9;
  uint64_t v10 = sub_100003A70(&qword_10015DA90);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100003A70(&qword_10015B9A0);
  uint64_t v43 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v42 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100003A70(&qword_10015EF80);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100003A70(&qword_10015BAA8);
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100003A70(&qword_10015B408);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100003A70(&qword_10015EF78);
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v33 = (char *)&v41 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v53 = v44;
  uint64_t v54 = v45;
  uint64_t v55 = v46;
  uint64_t v56 = v47;
  uint64_t v35 = v49;
  static Buildable.with(_:)();
  uint64_t v49 = v35;
  sub_100006960((uint64_t)v33, 0, 1, v34);
  GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
  sub_1000CA050(v50, (uint64_t)v24, &qword_10015BAA8);
  if (sub_100006AE8((uint64_t)v24, 1, v25) == 1)
  {
    sub_1000FD5C0((uint64_t)v24, &qword_10015BAA8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v24, v25);
    UUIDIdentifier.uuid.getter();
    uint64_t v36 = type metadata accessor for UUID();
    sub_100006960((uint64_t)v20, 0, 1, v36);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  }
  sub_1000CA050(v51, (uint64_t)v13, &qword_10015DA90);
  if (sub_100006AE8((uint64_t)v13, 1, v14) == 1)
  {
    sub_1000FD5C0((uint64_t)v13, &qword_10015DA90);
  }
  else
  {
    long long v38 = v42;
    uint64_t v37 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v13, v14);
    UUIDIdentifier.uuid.getter();
    uint64_t v39 = type metadata accessor for UUID();
    sub_100006960((uint64_t)v20, 0, 1, v39);
    GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v14);
  }
  swift_bridgeObjectRetain();
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter();
}

uint64_t sub_1000FA8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003A70(&qword_10015EFA8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100003A70(&qword_10015EFB0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a2, v11);
  sub_100006960((uint64_t)v10, 0, 1, v11);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.reason.setter();
  sub_1000FAA48(v6);
  uint64_t State = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState();
  sub_100006960((uint64_t)v6, 0, 1, State);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.fromState.setter();
  sub_1000FAA48(v6);
  sub_100006960((uint64_t)v6, 0, 1, State);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.toState.setter();
}

uint64_t sub_1000FAA48@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v6 = *(void *)(State - 8);
  __chkstk_darwin(State, v7);
  sub_1000B9970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, State);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v2, State);
  if (v8 == enum case for LoadState.unloaded(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.unloaded(_:);
LABEL_7:
    uint64_t v10 = *v9;
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState();
    sub_10002FB84();
    return (*(uint64_t (**)(void *, uint64_t))(v11 + 104))(a1, v10);
  }
  if (v8 == enum case for LoadState.dynamicMode(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.dynamicMode(_:);
    goto LABEL_7;
  }
  if (v8 == enum case for LoadState.loaded(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState.loaded(_:);
    goto LABEL_7;
  }
  *a1 = 0;
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState();
  sub_10002FB84();
  sub_100043E9C();
  v13();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, State);
}

void sub_1000FAC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_10002FAAC();
  uint64_t v25 = v23;
  uint64_t v45 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v44 = v39;
  uint64_t v40 = sub_100003A70(&qword_10015EF60);
  uint64_t v41 = sub_10002FDD0(v40);
  __chkstk_darwin(v41, v42);
  sub_10006FE24();
  sub_10000853C((void *)(v25 + 40), *(void *)(v25 + 64));
  sub_1000FD694();
  sub_1000FD738();
  if (v24) {
    swift_errorRelease();
  }
  uint64_t v43 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD65C(v43);
  sub_1000FD5C0(v22, &qword_10015EF60);
  sub_1000CD268(v44, v38, v36, v34, v32, v30, v28, v45, a21, a22, a22, v44, v28, v45, v46, v47, v25, v38, v36, v34, v32);
  sub_10002FAC4();
}

uint64_t sub_1000FAD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v34 = a4;
  uint64_t v33 = a3;
  uint64_t v32 = a2;
  uint64_t v9 = sub_100003A70(&qword_10015EF68);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v17, v18);
  uint64_t v19 = sub_100003A70(&qword_10015EF70);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v23 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.end(_:);
  uint64_t v24 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
  sub_100006960((uint64_t)v22, 0, 1, v24);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v41 = v32;
  uint64_t v42 = v33;
  uint64_t v43 = v34;
  uint64_t v44 = v35;
  uint64_t v45 = v36;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition();
  uint64_t v25 = swift_allocBox();
  uint64_t v39 = v37;
  uint64_t v40 = v38;
  static Buildable.with(_:)();
  *uint64_t v16 = v25;
  uint64_t v26 = enum case for GenerativeFunctionsInstrumentationMetadata.assetTransition(_:);
  uint64_t v27 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v16, v26, v27);
  sub_100006960((uint64_t)v16, 0, 1, v27);
  uint64_t result = GenerativeFunctionsInstrumentationEvent.metadata.setter();
  if (a9)
  {
    swift_getErrorValue();
    uint64_t v29 = v46;
    uint64_t v30 = v47;
    swift_errorRetain();
    sub_10006FED8(v29, v30, v12);
    uint64_t v31 = type metadata accessor for GenerativeFunctionsInstrumentationError();
    sub_100006960((uint64_t)v12, 0, 1, v31);
    GenerativeFunctionsInstrumentationEvent.error.setter();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000FB0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100003A70(&qword_10015EF78);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  static Buildable.with(_:)();
  sub_100006960((uint64_t)v13, 0, 1, v14);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t sub_1000FB204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100003A70(&qword_10015EFA0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationMetadata.AssetTransition.memoryCostKB.setter();
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a3, v8);
  sub_100006960((uint64_t)v7, 0, 1, v8);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.result.setter();
}

void sub_1000FB2F8()
{
  sub_10002FAAC();
  sub_1000FD700();
  uint64_t v3 = sub_100003A70(&qword_10015EF60);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  sub_10006FE24();
  sub_10000853C((void *)(v1 + 40), *(void *)(v1 + 64));
  sub_1000FD694();
  sub_1000FD738();
  if (v2) {
    swift_errorRelease();
  }
  uint64_t v6 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD65C(v6);
  sub_1000FD5C0(v0, &qword_10015EF60);
  sub_1000FD6F0();
  sub_1000CD93C();
  sub_10002FAC4();
}

uint64_t sub_1000FB408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v28 = a5;
  int v38 = a8;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v27 = a4;
  uint64_t v10 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v14, v15);
  uint64_t v16 = sub_100003A70(&qword_10015EF70);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v20 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v21 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  sub_100006960((uint64_t)v19, 0, 1, v21);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v27;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent();
  uint64_t v22 = swift_allocBox();
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  char v34 = v38;
  static Buildable.with(_:)();
  *uint64_t v13 = v22;
  uint64_t v23 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  uint64_t v24 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v13, v23, v24);
  sub_100006960((uint64_t)v13, 0, 1, v24);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000FB6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v13 = sub_100003A70(&qword_10015EF80);
  uint64_t v14 = sub_10002FDD0(v13);
  __chkstk_darwin(v14, v15);
  sub_1000CF930();
  sub_100003A70(a5);
  UUIDIdentifier.uuid.getter();
  uint64_t v16 = type metadata accessor for UUID();
  sub_100006960(v7, 0, 1, v16);
  a6(v7);
  swift_bridgeObjectRetain();
  return a7(a3, a4);
}

uint64_t sub_1000FB7E4()
{
  uint64_t v0 = sub_100003A70(&qword_10015EF98);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.add(_:);
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  sub_100006960((uint64_t)v3, 0, 1, v5);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.supportedAssetBundleIdentifiers.setter();
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.onBehalfOfPID.setter();
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.createdByPID.setter();
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.containsSensitiveData.setter();
}

void sub_1000FB91C()
{
  sub_1000FD7C4();
  uint64_t v3 = sub_100003A70(&qword_10015EF60);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000853C((void *)(v0 + 40), *(void *)(v0 + 64));
  uint64_t v12 = v2;
  uint64_t v13 = v1;
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C((uint64_t)v7, v9, v10, v8);
  sub_1000FD5C0((uint64_t)v7, &qword_10015EF60);
  sub_1000FD7B0();
  sub_1000CDE98();
}

void sub_1000FBA1C()
{
  uint64_t v1 = sub_100003A70(&qword_10015EF60);
  uint64_t v2 = sub_10002FDD0(v1);
  __chkstk_darwin(v2, v3);
  sub_100030964();
  sub_1000FD6D8();
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v4 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C(v0, v5, v6, v4);
  sub_1000FD5C0(v0, &qword_10015EF60);
  sub_1000CE2F8();
}

uint64_t sub_1000FBB04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003A70(&qword_10015EF88);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (uint64_t *)&v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v7, v8);
  uint64_t v9 = sub_100003A70(&qword_10015EF70);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v13 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.start(_:);
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  sub_100006960((uint64_t)v12, 0, 1, v14);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v20 = a2;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent();
  uint64_t v15 = swift_allocBox();
  static Buildable.with(_:)();
  *uint64_t v6 = v15;
  uint64_t v16 = enum case for GenerativeFunctionsInstrumentationMetadata.modelManagerSessionEvent(_:);
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v6, v16, v17);
  sub_100006960((uint64_t)v6, 0, 1, v17);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000FBDC0()
{
  uint64_t v0 = sub_100003A70(&qword_10015EF98);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType.remove(_:);
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  sub_100006960((uint64_t)v3, 0, 1, v5);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter();
}

void sub_1000FBEAC()
{
  sub_1000FD7C4();
  uint64_t v3 = sub_100003A70(&qword_10015EF60);
  uint64_t v4 = sub_10002FDD0(v3);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000853C((void *)(v0 + 40), *(void *)(v0 + 64));
  uint64_t v12 = v2;
  uint64_t v13 = v1;
  sub_1000FD694();
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  uint64_t v8 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD67C((uint64_t)v7, v9, v10, v8);
  sub_1000FD5C0((uint64_t)v7, &qword_10015EF60);
  sub_1000FD7B0();
  sub_1000CE694();
}

uint64_t sub_1000FBFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a7;
  uint64_t v26 = a3;
  uint64_t v9 = sub_100003A70(&qword_10015EF88);
  uint64_t v10 = sub_10002FDD0(v9);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  sub_10002FB84();
  __chkstk_darwin(v14, v15);
  sub_100030964();
  uint64_t v16 = sub_100003A70(&qword_10015EF70);
  uint64_t v17 = sub_10002FDD0(v16);
  __chkstk_darwin(v17, v18);
  sub_1000F7D50();
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v19 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  sub_10002FB84();
  sub_100043E9C();
  v20();
  sub_100006960(v7, 0, 1, v19);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v28 = a2;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent();
  uint64_t v21 = swift_allocBox();
  uint64_t v27 = v26;
  static Buildable.with(_:)();
  *uint64_t v13 = v21;
  uint64_t v22 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  sub_10002FB84();
  sub_100043E9C();
  v23();
  sub_100006960((uint64_t)v13, 0, 1, v22);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t sub_1000FC208()
{
  uint64_t v0 = sub_100003A70(&qword_10015EF80);
  uint64_t v1 = sub_10002FDD0(v0);
  __chkstk_darwin(v1, v2);
  sub_100030964();
  sub_100003A70(&qword_10015B9A0);
  UUIDIdentifier.uuid.getter();
  uint64_t v3 = type metadata accessor for UUID();
  sub_1000FD750(v3);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
}

uint64_t sub_1000FC298(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100003A70(&qword_10015EF90);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_100030964();
  uint64_t v8 = sub_100003A70(&qword_10015EF98);
  uint64_t v9 = sub_10002FDD0(v8);
  __chkstk_darwin(v9, v10);
  sub_1000F7D50();
  uint64_t v11 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType();
  sub_10002FB84();
  sub_100043E9C();
  v12();
  sub_100006960(v3, 0, 1, v11);
  GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter();
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult();
  sub_10002FB84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v2, a2, v13);
  sub_100006960(v2, 0, 1, v13);
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventResult.setter();
}

void sub_1000FC3F4()
{
  sub_10002FAAC();
  sub_1000FD700();
  uint64_t v2 = sub_100003A70(&qword_10015EF60);
  uint64_t v3 = sub_10002FDD0(v2);
  __chkstk_darwin(v3, v4);
  sub_10006FE24();
  sub_1000FD6F0();
  sub_1000CEAF4();
  sub_10000853C((void *)(v1 + 40), *(void *)(v1 + 64));
  sub_1000FD694();
  sub_1000FD738();
  if (v1) {
    swift_errorRelease();
  }
  uint64_t v5 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD65C(v5);
  sub_1000FD5C0(v0, &qword_10015EF60);
  sub_10002FAC4();
}

uint64_t sub_1000FC4F4()
{
  uint64_t v0 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v0, v1);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  static Buildable.with(_:)();
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter();
}

uint64_t sub_1000FC61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = sub_100003A70(&qword_10015EF78);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100003A70(&qword_10015EF80);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100003A70(&qword_10015B9A0);
  UUIDIdentifier.uuid.getter();
  uint64_t v17 = type metadata accessor for UUID();
  sub_100006960((uint64_t)v16, 0, 1, v17);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter();
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  static Buildable.with(_:)();
  sub_100006960((uint64_t)v12, 0, 1, v18);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t sub_1000FC7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_100003A70(&qword_10015EF60);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_10006FE24();
  sub_1000FD6D8();
  sub_1000FD694();
  sub_1000FD738();
  if (a5) {
    swift_errorRelease();
  }
  uint64_t v10 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  sub_1000FD65C(v10);
  return sub_1000FD5C0(v5, &qword_10015EF60);
}

uint64_t sub_1000FC8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  uint64_t v9 = sub_100003A70(&qword_10015EF68);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  __chkstk_darwin(v13, v14);
  uint64_t v15 = sub_100003A70(&qword_10015EF70);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v19 = enum case for GenerativeFunctionsInstrumentationEvent.Subtype.fail(_:);
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  sub_100006960((uint64_t)v18, 0, 1, v20);
  GenerativeFunctionsInstrumentationEvent.subtype.setter();
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  swift_getErrorValue();
  sub_10006FED8(v33, v34, v12);
  uint64_t v21 = type metadata accessor for GenerativeFunctionsInstrumentationError();
  sub_100006960((uint64_t)v12, 0, 1, v21);
  return GenerativeFunctionsInstrumentationEvent.error.setter();
}

uint64_t sub_1000FCB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100003A70(&qword_10015EF78);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100003A70(&qword_10015EF80);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100003A70(&qword_10015B408);
  UUIDIdentifier.uuid.getter();
  uint64_t v16 = type metadata accessor for UUID();
  sub_100006960((uint64_t)v15, 0, 1, v16);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
  sub_100003A70(&qword_10015B9A0);
  UUIDIdentifier.uuid.getter();
  sub_100006960((uint64_t)v15, 0, 1, v16);
  GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
  uint64_t v17 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  static Buildable.with(_:)();
  sub_100006960((uint64_t)v11, 0, 1, v17);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t sub_1000FCCE8()
{
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter();
}

uint64_t sub_1000FCD70()
{
  swift_release();
  swift_release();
  sub_100008130(v0 + 40);
  swift_release();
  return v0;
}

uint64_t sub_1000FCDA8()
{
  sub_1000FCD70();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TelemetryManager()
{
  return self;
}

#error "1000FCE48: call analysis failed (funcsize=23)"

void sub_1000FCE5C()
{
}

#error "1000FCEA8: call analysis failed (funcsize=15)"

void sub_1000FCEBC()
{
}

#error "1000FCF08: call analysis failed (funcsize=15)"

#error "1000FCF3C: call analysis failed (funcsize=13)"

void sub_1000FCF50()
{
}

void sub_1000FCF74()
{
}

void sub_1000FCF98()
{
}

void sub_1000FCFBC()
{
}

void sub_1000FCFE0()
{
}

uint64_t sub_1000FD004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000FC7C8(a1, a2, a3, a4, a5);
}

uint64_t sub_1000FD028()
{
  sub_1000FD710();
  return sub_1000FC8B0(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1000FD044(uint64_t a1)
{
  return sub_1000FCB18(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000FD068()
{
  return sub_1000FCCE8();
}

uint64_t sub_1000FD088()
{
  return sub_1000FD0E0();
}

uint64_t sub_1000FD0B4()
{
  return sub_1000FD0E0();
}

uint64_t sub_1000FD0E0()
{
  sub_1000FD710();
  return v0();
}

uint64_t sub_1000FD104(uint64_t a1)
{
  return sub_1000FBFAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD00000000000001ALL, 0x800000010012CC80, (uint64_t)sub_1000FD614, (uint64_t)sub_1000FD160);
}

uint64_t sub_1000FD160(uint64_t a1)
{
  return sub_1000FC298(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000FD184(uint64_t a1)
{
  return sub_1000FBB04(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000FD1A0(uint64_t a1)
{
  return sub_1000FBFAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD000000000000017, 0x800000010012CCA0, (uint64_t)sub_1000FD1FC, (uint64_t)sub_1000FD218);
}

uint64_t sub_1000FD1FC()
{
  return sub_1000FC208();
}

uint64_t sub_1000FD218(uint64_t a1)
{
  return sub_1000FC298(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000FD23C()
{
  sub_1000FD710();
  return sub_1000FB408(v1, v2, v3, v4, v5, v6, v7, *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1000FD25C()
{
  sub_1000FD790();
  return sub_1000FB6F4(v0, v1, v2, v3, &qword_10015B9A0, (void (*)(uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter, (uint64_t (*)(uint64_t, uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter);
}

uint64_t sub_1000FD2A8()
{
  return sub_1000FB7E4();
}

uint64_t sub_1000FD2C8()
{
  sub_1000FD720();
  return sub_1000FAD48(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

uint64_t sub_1000FD2EC(uint64_t a1)
{
  return sub_1000FB0F8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000FD310(uint64_t a1)
{
  return sub_1000FB204(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000FD32C()
{
  __n128 v1 = sub_1000FD6BC();
  return sub_1000FA0CC(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, *(void *)(v0 + 104));
}

uint64_t sub_1000FD35C()
{
  sub_1000FD77C();
  return sub_1000FA424(v1, v2, v3, v4, v5, v6, v7, v8, v9, *(void *)(v0 + 80));
}

uint64_t sub_1000FD388()
{
  sub_1000FD790();
  return sub_1000FA8A4(v0, v1);
}

uint64_t sub_1000FD3A4(uint64_t a1)
{
  return sub_1000F9DC4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000FD3F0()
{
  sub_1000FD790();
  return sub_1000FB6F4(v0, v1, v2, v3, &qword_10015B408, (void (*)(uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter, (uint64_t (*)(uint64_t, uint64_t))&GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter);
}

uint64_t sub_1000FD43C()
{
  sub_1000FD77C();
  return sub_1000F97E4(v1, v2, v3, v4, v5, v6, v7, v8, v9, *(unsigned char *)(v0 + 80), *(unsigned char *)(v0 + 81));
}

uint64_t sub_1000FD474()
{
  sub_1000FD720();
  return sub_1000F9A34(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000FD498(uint64_t a1)
{
  return sub_1000F9B9C(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1000FD4B8(uint64_t a1)
{
  return sub_1000F9DC4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000FD504()
{
  __n128 v1 = sub_1000FD6BC();
  return sub_1000F8EA8(v2, v3, v4, v5, v6, v7, v8, v9, *(_OWORD *)&v1, v10, v11, *(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120), *(unsigned char *)(v0 + 121), *(unsigned char *)(v0 + 122), *(void *)(v0 + 128));
}

uint64_t sub_1000FD554(uint64_t a1)
{
  return sub_1000F91C0(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_1000FD594(uint64_t a1)
{
  return sub_1000F93E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned __int8 *)(v1 + 33), *(unsigned __int8 *)(v1 + 34), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1000FD5C0(uint64_t a1, uint64_t *a2)
{
  sub_100003A70(a2);
  sub_10002FB84();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000FD614()
{
  return sub_1000FD1FC();
}

uint64_t sub_1000FD62C()
{
  return sub_1000FD068();
}

uint64_t sub_1000FD644()
{
  return sub_1000FD3F0();
}

uint64_t sub_1000FD65C(uint64_t a1)
{
  return sub_100006960(v1, v2, 1, a1);
}

uint64_t sub_1000FD67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006960(a1, v4, 1, a4);
}

uint64_t sub_1000FD6A0()
{
  return v0 + 40;
}

__n128 sub_1000FD6BC()
{
  return *(__n128 *)(v0 + 72);
}

void *sub_1000FD6D8()
{
  uint64_t v2 = *(void *)(v0 + 64);
  return sub_10000853C((void *)(v0 + 40), v2);
}

uint64_t sub_1000FD738()
{
  return EventReporter.send(eventBuiltWithPresetsAnd:)();
}

uint64_t sub_1000FD750(uint64_t a1)
{
  sub_100006960(v1, 0, 1, a1);
  return v1;
}

uint64_t sub_1000FD7B0()
{
  return v0;
}

uint64_t sub_1000FD7D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015EFD0);
  sub_100003B18(v0, (uint64_t)qword_10015EFD0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

void sub_1000FD848(uint64_t a1, unint64_t a2, char a3)
{
  if (&_sendAneSignal)
  {
    if (qword_10015B1D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003B18(v6, (uint64_t)qword_10015EFD0);
    sub_1000FDF88();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001DF20(a1, a2, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending start ANE session signal for %s (useEnergyEfficientMode: %{BOOL}d)", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100003A70(&qword_10015F098);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100129320;
    *(void *)(inited + 32) = 0xD000000000000017;
    *(void *)(inited + 40) = 0x800000010012CDA0;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = a2;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = 0xD000000000000020;
    *(void *)(inited + 88) = 0x800000010012CE00;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = a3 & 1;
    swift_bridgeObjectRetain();
    sub_1000FDFEC();
    Dictionary.init(dictionaryLiteral:)();
    NSString v11 = String._bridgeToObjectiveC()();
    sub_1000FDFEC();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sendAneSignal();
  }
}

void sub_1000FDAEC(uint64_t a1, unint64_t a2)
{
  if (&_sendAneSignal)
  {
    if (qword_10015B1D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003B18(v4, (uint64_t)qword_10015EFD0);
    sub_1000FDF88();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      sub_1000FE000(4.8149e-34);
      sub_10001DF20(a1, a2, &v12);
      sub_1000FDF60();
      swift_bridgeObjectRelease_n();
      sub_1000FDFA4((void *)&_mh_execute_header, v7, v8, "Sending stop ANE session signal for %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100003A70(&qword_10015F098);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100128650;
    *(void *)(inited + 32) = 0xD000000000000017;
    *(void *)(inited + 40) = 0x800000010012CDA0;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = a2;
    swift_bridgeObjectRetain();
    sub_1000FDFC4();
    Dictionary.init(dictionaryLiteral:)();
    NSString v10 = String._bridgeToObjectiveC()();
    sub_1000FDFC4();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sendAneSignal();
  }
}

void sub_1000FDD0C(uint64_t a1, unint64_t a2)
{
  if (&_sendAneSignal)
  {
    if (qword_10015B1D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003B18(v4, (uint64_t)qword_10015EFD0);
    sub_1000FDF88();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      sub_1000FE000(4.8149e-34);
      sub_10001DF20(a1, a2, &v14);
      sub_1000FDF60();
      swift_bridgeObjectRelease_n();
      sub_1000FDFA4((void *)&_mh_execute_header, v7, v8, "Sending abort ANE session signal for %s");
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100003A70(&qword_10015F098);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100128650;
    *(void *)(inited + 32) = 0xD000000000000017;
    *(void *)(inited + 40) = 0x800000010012CDA0;
    NSString v10 = String._bridgeToObjectiveC()();
    type metadata accessor for CFString(0);
    *(void *)(inited + 72) = v11;
    *(void *)(inited + 48) = v10;
    sub_1000FDFD8();
    Dictionary.init(dictionaryLiteral:)();
    NSString v12 = String._bridgeToObjectiveC()();
    sub_1000FDFD8();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sendAneSignal();
  }
}

uint64_t type metadata accessor for NeuralEngine()
{
  return self;
}

uint64_t sub_1000FDF60()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000FDF88()
{
  return swift_bridgeObjectRetain_n();
}

void sub_1000FDFA4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000FDFC4()
{
  return v0;
}

uint64_t sub_1000FDFD8()
{
  return v0;
}

uint64_t sub_1000FDFEC()
{
  return v0;
}

uint64_t sub_1000FE000(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000FE020()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015F0A0);
  sub_100003B18(v0, (uint64_t)qword_10015F0A0);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000FE094()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
  sub_100008678();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v6, v7);
  static OS_dispatch_source.MemoryPressureEvent.critical.getter();
  sub_1000FF5BC(&qword_10015F0C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent);
  char v8 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v3 + 8);
  uint64_t v10 = sub_1000FF61C();
  uint64_t v11 = v9(v10);
  if (v8) {
    return 0;
  }
  uint64_t v24 = &v23;
  __chkstk_darwin(v11, v12);
  static OS_dispatch_source.MemoryPressureEvent.warning.getter();
  char v14 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v15 = sub_1000FF61C();
  uint64_t v16 = v9(v15);
  uint64_t v24 = &v23;
  __chkstk_darwin(v16, v17);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  if (v14)
  {
    uint64_t v20 = sub_1000FF61C();
    v9(v20);
    return 1;
  }
  __chkstk_darwin(v18, v19);
  static OS_dispatch_source.MemoryPressureEvent.normal.getter();
  char v21 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  ((void (*)(char *, uint64_t))v9)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  uint64_t v22 = sub_1000FF61C();
  v9(v22);
  if (v21) {
    return 1;
  }
  return 2;
}

uint64_t sub_1000FE2B0(uint64_t a1)
{
  uint64_t v69 = a1;
  uint64_t v68 = sub_100003A70(&qword_10015F0C8);
  sub_100008678();
  uint64_t v70 = v2;
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v5, v6);
  uint64_t v64 = v4;
  uint64_t v67 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FF308();
  sub_100003A70(&qword_10015F0D8);
  uint64_t v7 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100129FC0;
  static OS_dispatch_source.MemoryPressureEvent.all.getter();
  static OS_dispatch_source.MemoryPressureEvent.procLimitWarn.getter();
  uint64_t v10 = static OS_dispatch_source.MemoryPressureEvent.procLimitCritical.getter();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = (void **)v9;
  sub_1000FF5BC(&qword_10015F0C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent);
  sub_100003A70(&qword_10015F0E0);
  sub_1000FF56C(&qword_10015F0E8, &qword_10015F0E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v14 = static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = v70;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v61 = v70 + 16;
  uint64_t v65 = v17;
  uint64_t v66 = ObjectType;
  uint64_t v19 = v67;
  uint64_t v18 = v68;
  v17(v67, a1, v68);
  uint64_t v20 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = v16;
  uint64_t v63 = v20 | 7;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v14;
  uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  uint64_t v70 = v21 + 32;
  v62(v22 + ((v20 + 24) & ~v20), v19, v18);
  uint64_t v75 = sub_1000FF3F4;
  uint64_t v76 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v72 = 1107296256;
  uint64_t v60 = &v73;
  uint64_t v73 = sub_1000E9618;
  char v74 = &unk_100155168;
  uint64_t v23 = _Block_copy(&aBlock);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v54 = v24;
  sub_100008678();
  uint64_t v53 = v25;
  uint64_t v58 = *(void *)(v26 + 64);
  __chkstk_darwin(v27, v28);
  unint64_t v59 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v30 = (char *)&v52 - v59;
  uint64_t v56 = v14;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  sub_100008678();
  uint64_t v33 = v32;
  uint64_t v35 = *(void *)(v34 + 64);
  __chkstk_darwin(v36, v37);
  unint64_t v57 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v38 = (char *)&v52 - v57;
  sub_1000FED94();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v23);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v39 = v31;
  v55(v38, v31);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v53 + 8);
  v40(v30, v24);
  swift_release();
  uint64_t v41 = v67;
  uint64_t v42 = v68;
  v65(v67, v69, v68);
  uint64_t v43 = swift_allocObject();
  v62(v43 + ((v20 + 16) & ~v20), v41, v42);
  uint64_t v75 = sub_1000FF4E8;
  uint64_t v76 = v43;
  aBlock = _NSConcreteStackBlock;
  uint64_t v72 = 1107296256;
  uint64_t v73 = sub_1000E9618;
  char v74 = &unk_1001551B8;
  uint64_t v44 = _Block_copy(&aBlock);
  __chkstk_darwin(v44, v45);
  uint64_t v46 = (char *)&v52 - v59;
  uint64_t v47 = static DispatchQoS.unspecified.getter();
  __chkstk_darwin(v47, v48);
  uint64_t v49 = (char *)&v52 - v57;
  sub_1000FED94();
  uint64_t v50 = v56;
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
  _Block_release(v44);
  v55(v49, v39);
  v40(v46, v54);
  swift_release();
  OS_dispatch_source.activate()();
  *(void *)(swift_allocObject() + 16) = v50;
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t sub_1000FE900(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v2 = sub_100003A70(&qword_10015F168);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v24 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)v23 - v9;
  swift_getObjectType();
  OS_dispatch_source_memorypressure.data.getter();
  if (qword_10015B1D8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_100003B18(v11, (uint64_t)qword_10015F0A0);
  v23[1] = v23;
  __chkstk_darwin(v12, v13);
  uint64_t v14 = (char *)v23 - v9;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v23 - v9, (char *)v23 - v9, v5);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    uint64_t v29 = v23[0];
    *(_DWORD *)uint64_t v17 = 136315138;
    sub_1000FF5BC((unint64_t *)&unk_10015F170, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.MemoryPressureEvent);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_10001DF20(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v14, v5);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received dispatch memory pressure event: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20((char *)v23 - v9, v5);
  }

  LOBYTE(v29) = sub_1000FE094();
  sub_100003A70(&qword_10015F0C8);
  uint64_t v21 = v24;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v26);
  return ((uint64_t (*)(char *, uint64_t))v20)(v10, v5);
}

void sub_1000FECA4()
{
  if (qword_10015B1D8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003B18(v0, (uint64_t)qword_10015F0A0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Dispatch memory pressure source cancelled", v3, 2u);
    swift_slowDealloc();
  }

  sub_100003A70(&qword_10015F0C8);
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1000FED94()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_1000FEE44()
{
  if (qword_10015B1D8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003B18(v0, (uint64_t)qword_10015F0A0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Dispatch memory pressure event stream cancelled", v3, 2u);
    swift_slowDealloc();
  }

  swift_getObjectType();
  OS_dispatch_source.cancel()();
}

uint8_t *sub_1000FEF30()
{
  size_t v22 = 8;
  uint64_t v23 = 0;
  if (!sysctlbyname("kern.memorystatus_vm_pressure_level", &v23, &v22, 0, 0))
  {
    uint64_t v7 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
    sub_100008678();
    uint64_t v9 = v8;
    __chkstk_darwin(v10, v11);
    uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    OS_dispatch_source.MemoryPressureEvent.init(rawValue:)();
    uint64_t v0 = (uint8_t *)sub_1000FE094();
    if (v0 == 2)
    {
      if (qword_10015B1D8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100003B18(v14, (uint64_t)qword_10015F0A0);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_17;
      }
      uint64_t v17 = (float *)sub_1000FF688();
      sub_1000FF630(v17, 3.852e-34);
      sub_1000FF65C();
      uint64_t v18 = "kern.memorystatus_vm_pressure_level contains system memory pressure: %lu";
    }
    else
    {
      if (qword_10015B1D8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100003B18(v19, (uint64_t)qword_10015F0A0);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_17;
      }
      uint64_t v17 = (float *)sub_1000FF688();
      sub_1000FF630(v17, 3.852e-34);
      sub_1000FF65C();
      uint64_t v18 = "kern.memorystatus_vm_pressure_level: %lu";
    }
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, (uint8_t *)v17, 0xCu);
    swift_slowDealloc();
    uint64_t v7 = v21[1];
LABEL_17:

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
    return v0;
  }
  int v1 = errno.getter();
  if (qword_10015B1D8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003B18(v2, (uint64_t)qword_10015F0A0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v0 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v0 = 67109120;
    int v24 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "sysctlbyname(\"kern.memorystatus_vm_pressure_level\") failed: %{darwin.errno}d", v0, 8u);
    swift_slowDealloc();
  }

  uint64_t v5 = type metadata accessor for ModelManagerError();
  sub_1000D8DA0();
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for ModelManagerError.internalError(_:), v5);
  swift_willThrow();
  return v0;
}

unint64_t sub_1000FF308()
{
  unint64_t result = qword_10015F0D0;
  if (!qword_10015F0D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10015F0D0);
  }
  return result;
}

uint64_t sub_1000FF348()
{
  uint64_t v1 = sub_100003A70(&qword_10015F0C8);
  sub_100008678();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_1000FF3F4()
{
  uint64_t v1 = sub_100003A70(&qword_10015F0C8);
  sub_1000301E0(v1);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return sub_1000FE900(v3, v4);
}

uint64_t sub_1000FF43C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FF44C()
{
  return swift_release();
}

uint64_t sub_1000FF454()
{
  uint64_t v1 = sub_100003A70(&qword_10015F0C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000FF4E8()
{
  uint64_t v0 = sub_100003A70(&qword_10015F0C8);
  sub_1000301E0(v0);

  sub_1000FECA4();
}

uint64_t sub_1000FF52C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FF564()
{
}

uint64_t sub_1000FF56C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FF5BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MemoryPressureEventProvider()
{
  return &type metadata for MemoryPressureEventProvider;
}

uint64_t sub_1000FF61C()
{
  return v0;
}

uint64_t sub_1000FF630(float *a1, float a2)
{
  *a1 = a2;
  return swift_beginAccess();
}

uint64_t sub_1000FF65C()
{
  *(void *)(v0 - 136) = *(void *)(v0 - 120);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000FF688()
{
  *(void *)(v2 - 152) = v1;
  *(void *)(v2 - 144) = v0;
  return swift_slowAlloc();
}

Swift::Int sub_1000FF6A8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FF6E4()
{
  return sub_1000FF778();
}

uint64_t sub_1000FF6F0()
{
  return String.hash(into:)();
}

uint64_t sub_1000FF708()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000FF778()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FF7FC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FF834(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100152E38, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FF88C(char a1)
{
  if (a1) {
    return 0x73694C776F6C6C41;
  }
  else {
    return 0x73656963696C6F50;
  }
}

uint64_t sub_1000FF8C8(void *a1)
{
  uint64_t v3 = sub_100003A70(&qword_10015F240);
  __chkstk_darwin(v3, v4);
  uint64_t v5 = a1[3];
  sub_10000853C(a1, v5);
  sub_1000FFE5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100008130((uint64_t)a1);
  }
  else
  {
    sub_100003A70(&qword_10015F250);
    sub_1000FFEA8();
    sub_100100204();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v5 = v9;
    sub_100003A70(&qword_10015F268);
    sub_1000FFF74();
    swift_bridgeObjectRetain();
    sub_100100204();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = sub_10010021C();
    v8(v7);
    swift_bridgeObjectRetain();
    sub_100008130((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1000FFAB8(uint64_t a1)
{
  return sub_1001001FC(a1, qword_1001602F8);
}

uint64_t sub_1000FFAD8(uint64_t a1)
{
  return sub_1001001FC(a1, qword_100160310);
}

uint64_t sub_1000FFAF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for FilePath();
  sub_100003AB4(v3, a2);
  sub_100003B18(v3, (uint64_t)a2);
  return FilePath.init(stringLiteral:)();
}

uint64_t destroy for PolicyFile()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s13modelmanagerd10PolicyFileVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PolicyFile(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for PolicyFile(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PolicyFile(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PolicyFile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyFile()
{
  return &type metadata for PolicyFile;
}

uint64_t sub_1000FFCFC(char *a1, char *a2)
{
  return sub_100101B98(*a1, *a2);
}

Swift::Int sub_1000FFD08()
{
  return sub_1000FF6E4();
}

uint64_t sub_1000FFD10()
{
  return sub_1000FF708();
}

Swift::Int sub_1000FFD18()
{
  return sub_1000FF778();
}

uint64_t sub_1000FFD20@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000FF834(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000FFD50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FF88C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000FFD7C()
{
  return sub_1000FF88C(*v0);
}

uint64_t sub_1000FFD84@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000FF888(a1);
  *a2 = result;
  return result;
}

void sub_1000FFDAC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000FFDB8(uint64_t a1)
{
  unint64_t v2 = sub_1000FFE5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FFDF4(uint64_t a1)
{
  unint64_t v2 = sub_1000FFE5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FFE30@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000FF8C8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_1000FFE5C()
{
  unint64_t result = qword_10015F248;
  if (!qword_10015F248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F248);
  }
  return result;
}

unint64_t sub_1000FFEA8()
{
  unint64_t result = qword_10015F258;
  if (!qword_10015F258)
  {
    sub_100006A5C(&qword_10015F250);
    sub_1000FFF24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F258);
  }
  return result;
}

unint64_t sub_1000FFF24()
{
  unint64_t result = qword_10015F260;
  if (!qword_10015F260)
  {
    type metadata accessor for Policy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F260);
  }
  return result;
}

unint64_t sub_1000FFF74()
{
  unint64_t result = qword_10015F270;
  if (!qword_10015F270)
  {
    sub_100006A5C(&qword_10015F268);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F270);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PolicyFile.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001000ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyFile.CodingKeys()
{
  return &type metadata for PolicyFile.CodingKeys;
}

unint64_t sub_1001000E8()
{
  unint64_t result = qword_10015F278;
  if (!qword_10015F278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F278);
  }
  return result;
}

unint64_t sub_100100138()
{
  unint64_t result = qword_10015F280;
  if (!qword_10015F280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F280);
  }
  return result;
}

unint64_t sub_100100188()
{
  unint64_t result = qword_10015F288;
  if (!qword_10015F288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F288);
  }
  return result;
}

uint64_t sub_1001001D4()
{
  return String.hash(into:)();
}

uint64_t sub_1001001FC(uint64_t a1, uint64_t *a2)
{
  return sub_1000FFAF8(a1, a2);
}

uint64_t sub_100100204()
{
  return v0;
}

uint64_t sub_10010021C()
{
  return v0;
}

uint64_t sub_100100230()
{
  sub_1000086E0();
  v1[5] = v2;
  v1[6] = v0;
  sub_100003A70(&qword_10015F3E0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001002D0, v0, 0);
}

uint64_t sub_1001002D0()
{
  sub_10000F01C();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = sub_100003A70(&qword_10015C098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v2, v3, v5);
  sub_100006960(v2, 0, 1, v5);
  sub_100101A64(v2, v1);
  uint64_t v6 = v4 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  swift_beginAccess();
  sub_1001019FC(v1, v6);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v7();
}

uint64_t sub_1001003E4()
{
  sub_1000086E0();
  v1[8] = v0;
  sub_100003A70(&qword_10015F3E0);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v2 = sub_100003A70(&qword_10015C098);
  v1[11] = v2;
  sub_10002FA4C(v2);
  v1[12] = v3;
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001004C0, v0, 0);
}

uint64_t sub_1001004C0()
{
  sub_10000F01C();
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8] + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation;
  swift_beginAccess();
  sub_100101934(v3, v2);
  if (sub_100006AE8(v2, 1, v1) == 1)
  {
    sub_10010199C(v0[10]);
  }
  else
  {
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[9];
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 32))(v4, v0[10], v6);
    sub_100006960(v7, 1, 1, v6);
    swift_beginAccess();
    sub_1001019FC(v7, v3);
    swift_endAccess();
    CheckedContinuation.resume(returning:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v8();
}

uint64_t sub_100100620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100100648, v4, 0);
}

uint64_t sub_100100648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_10000F01C();
  uint64_t v17 = *(void *)(v16 + 48);
  uint64_t v19 = *(void *)(v16 + 16);
  uint64_t v18 = *(void *)(v16 + 24);
  unint64_t v20 = sub_1001015B8();
  uint64_t v21 = swift_task_alloc();
  *(void *)(v16 + 56) = v21;
  long long v22 = *(_OWORD *)(v16 + 32);
  *(void *)(v21 + 16) = v17;
  *(void *)(v21 + 24) = v19;
  *(void *)(v21 + 32) = v18;
  *(_OWORD *)(v21 + 40) = v22;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v16 + 64) = v23;
  *uint64_t v23 = v16;
  v23[1] = sub_100100758;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v23, v17, v20, 0xD00000000000001CLL, 0x800000010012CF40, sub_100101608, v21, (char *)&type metadata for () + 8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_100100758()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_100101AE8();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 48);
    uint64_t v8 = sub_10010086C;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 48);
    swift_task_dealloc();
    uint64_t v8 = sub_100100844;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100100844()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(*(void *)(v0 + 48)
                                                                         + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout));
}

uint64_t sub_10010086C()
{
  sub_1000086E0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1001008D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v8 = sub_100003A70(&qword_10015C098);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  uint64_t v12 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  unint64_t v18 = sub_1001015B8();
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = a2;
  *((void *)v21 + 3) = v18;
  *((void *)v21 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v19], v12, v8);
  long long v22 = &v21[v20];
  uint64_t v23 = v28;
  *(void *)long long v22 = v27;
  *((void *)v22 + 1) = v23;
  int v24 = &v21[(v20 + 23) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v25 = v30;
  *(void *)int v24 = v29;
  *((void *)v24 + 1) = v25;
  swift_retain_n();
  swift_retain();
  sub_10000F8FC((uint64_t)v16, (uint64_t)&unk_10015F3C8, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100100ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a8;
  v8[6] = v12;
  v8[3] = a6;
  v8[4] = a7;
  void v8[2] = a4;
  sub_100003A70(&qword_10015B208);
  v8[7] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v8[8] = v9;
  *uint64_t v9 = v8;
  v9[1] = sub_100100BBC;
  return sub_100100230();
}

uint64_t sub_100100BBC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_100100C9C, v2, 0);
}

uint64_t sub_100100C9C()
{
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v2 = (int *)v0[5];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = type metadata accessor for TaskPriority();
  sub_100006960(v1, 1, 1, v6);
  unint64_t v7 = sub_1001015B8();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v4;
  v8[3] = v7;
  v8[4] = v5;
  v8[5] = v3;
  v8[6] = v4;
  swift_retain_n();
  sub_10000F8FC(v1, (uint64_t)&unk_10015F3D8, (uint64_t)v8);
  swift_release();
  uint64_t v11 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100100E04;
  return v11();
}

uint64_t sub_100100E04()
{
  sub_100008660();
  uint64_t v3 = v2;
  sub_100101AE8();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    unint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v3 + 80) = v9;
    *uint64_t v9 = v5;
    v9[1] = sub_100100F48;
    return sub_1001003E4();
  }
}

uint64_t sub_100100F48()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10010102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  uint64_t v6[2] = a4;
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001010F4, a6, 0);
}

uint64_t sub_1001010F4()
{
  sub_1000086E0();
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10015FEB8 + dword_10015FEB8);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001011B0;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_1001011B0()
{
  sub_10000F01C();
  uint64_t v2 = (void *)*v1;
  sub_100101AE8();
  void *v4 = v3;
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[5];
  void *v4 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = v2[4];
  if (v0) {
    uint64_t v9 = sub_1001013CC;
  }
  else {
    uint64_t v9 = sub_10010132C;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10010132C()
{
  sub_1000086E0();
  *(unsigned char *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_hitTimeout) = 1;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100100F48;
  return sub_1001003E4();
}

uint64_t sub_1001013CC()
{
  sub_1000086E0();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100101428()
{
  sub_10010199C(v0 + OBJC_IVAR____TtC13modelmanagerd15TimeoutExecutor_continuation);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100101468()
{
  return type metadata accessor for TimeoutExecutor();
}

uint64_t type metadata accessor for TimeoutExecutor()
{
  uint64_t result = qword_10015F2B8;
  if (!qword_10015F2B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001014B8()
{
  sub_10010155C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10010155C()
{
  if (!qword_10015F2E0)
  {
    sub_100006A5C(&qword_10015C098);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015F2E0);
    }
  }
}

unint64_t sub_1001015B8()
{
  unint64_t result = qword_10015F3B8;
  if (!qword_10015F3B8)
  {
    type metadata accessor for TimeoutExecutor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015F3B8);
  }
  return result;
}

uint64_t sub_100101608(uint64_t a1)
{
  return sub_1001008D0(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100101618()
{
  uint64_t v1 = sub_100003A70(&qword_10015C098);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100101718()
{
  uint64_t v2 = sub_100003A70(&qword_10015C098);
  sub_10002FA4C(v2);
  unint64_t v5 = (*(void *)(v4 + 64)
      + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + v5);
  uint64_t v7 = *(void *)(v0 + v5 + 8);
  uint64_t v8 = *(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10000E1FC;
  uint64_t v10 = sub_100101ACC();
  return sub_100100ADC(v10, v11, v12, v13, v14, v6, v7, v8);
}

uint64_t sub_100101844()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100101884()
{
  sub_10000F01C();
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000ED54;
  uint64_t v4 = sub_100101ACC();
  return sub_10010102C(v4, v5, v6, v7, v8, v2);
}

uint64_t sub_100101934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015F3E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010199C(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015F3E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001019FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015F3E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100101A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015F3E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100101ACC()
{
  return v0;
}

BOOL sub_100101AF8(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

uint64_t sub_100101B08(uint64_t a1, uint64_t a2)
{
  return sub_100101CD0(a1, a2, (void (*)(void))&type metadata accessor for AssetPolicy);
}

uint64_t sub_100101B50(uint64_t a1, uint64_t a2)
{
  return sub_100101CD0(a1, a2, (void (*)(void))&type metadata accessor for RequestPriority);
}

uint64_t sub_100101B98(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x73694C776F6C6C41;
  }
  else {
    uint64_t v3 = 0x73656963696C6F50;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000074;
  }
  if (a2) {
    uint64_t v5 = 0x73694C776F6C6C41;
  }
  else {
    uint64_t v5 = 0x73656963696C6F50;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000074;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100101C40(uint64_t a1, uint64_t a2)
{
  return sub_100101CD0(a1, a2, (void (*)(void))&type metadata accessor for LoadState);
}

uint64_t sub_100101C88(uint64_t a1, uint64_t a2)
{
  return sub_100101CD0(a1, a2, (void (*)(void))&type metadata accessor for DaemonSessionState);
}

uint64_t sub_100101CD0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000B98C4();
  sub_1001141CC(v3, v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v10 == v8 && v11 == v9) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t sub_100101DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v4 = 0;
    while (1)
    {
      swift_retain();
      sub_1000BA570();
      sub_10001A674();
      char v6 = v5;
      swift_release();
      if (v6) {
        break;
      }
      if (v3 == ++v4)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_100101EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100003A70(&qword_10015B208);
  uint64_t v8 = sub_10002FDD0(v7);
  __chkstk_darwin(v8, v9);
  sub_10011DEC0();
  sub_100043174(a1, v3, &qword_10015B208);
  uint64_t v10 = type metadata accessor for TaskPriority();
  if (sub_100006AE8(v3, 1, v10) == 1)
  {
    sub_100042EDC(v3, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_10000EFBC();
    v11();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10011E474();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v12 = sub_10004412C();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100102080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(a3 + 8 * v5 + 32);
      swift_retain();
      sub_100104130();
      sub_1001041FC();
      char v8 = v7;
      swift_bridgeObjectRelease();
      if (v8) {
        break;
      }
      swift_release();
      if (v3 == ++v5)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return 0;
      }
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

uint64_t sub_1001021B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_foregroundOvercommitBudget;
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      sub_100104130();
      if (__CFADD__(a3, *(void *)(a2 + v6))) {
        goto LABEL_14;
      }
      sub_1001041FC();
      char v11 = v10;
      swift_bridgeObjectRelease();
      if (v11)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v5) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

BOOL sub_100102328(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t sub_100102368(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.count.getter();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

void *sub_100102388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a3 + 32;
    while (v7 < *(void *)(a3 + 16))
    {
      uint64_t v9 = *(void *)(*(void *)(v8 + 8 * v7) + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets);
      swift_retain();
      if (sub_100114BD0(a4, v9))
      {
        unint64_t result = (void *)swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        unint64_t result = (void *)specialized ContiguousArray._endMutation()();
      }
      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001024C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_10000EFE0((uint64_t)sub_1001024E0, 0);
}

uint64_t sub_1001024E0()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  sub_10011DF68(v0);
  uint64_t v1 = swift_task_alloc();
  BOOL v2 = (void *)sub_10011E3BC(v1);
  void *v2 = v3;
  v2[1] = sub_1001025A0;
  sub_1000B7618();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001025A0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100102684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001026A8, 0, 0);
}

uint64_t sub_1001026A8()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  sub_10011DF68(v0);
  uint64_t v1 = swift_task_alloc();
  BOOL v2 = (void *)sub_10011E3BC(v1);
  void *v2 = v3;
  v2[1] = sub_100102768;
  sub_1000B7618();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100102768()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10010284C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  sub_100003A70(&qword_10015B208);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001028F4, 0, 0);
}

#error "1001029D0: call analysis failed (funcsize=222)"

uint64_t sub_100102C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  sub_100003A70(&qword_10015B208);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_100102D34, 0, 0);
}

#error "100102E10: call analysis failed (funcsize=222)"

uint64_t sub_1001030CC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_1001031C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1001032A0;
  return v9(v6 + 16);
}

uint64_t sub_1001032A0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100103368(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100103444;
  return v9(v6 + 16);
}

uint64_t sub_100103444()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000579A4();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10010350C()
{
  swift_bridgeObjectRetain();
  sub_100003A70(&qword_10015CA38);
  sub_10000841C(&qword_10015F7C8, &qword_10015CA38);
  sub_1000D8E54();
  uint64_t v0 = Sequence<>.joined(separator:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 10272;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  type metadata accessor for RequestManagerPolicy(0);
  uint64_t v2 = RequestPriority.rawValue.getter();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10010365C(uint64_t a1, uint64_t a2)
{
  sub_100019FE0();
  if (v4)
  {
    uint64_t v5 = type metadata accessor for RequestManagerPolicy(0);
    char v6 = sub_100101CD0(a1 + *(int *)(v5 + 20), a2 + *(int *)(v5 + 20), (void (*)(void))&type metadata accessor for RequestPriority);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_100103700()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015F3E8);
  sub_100003B18(v0, (uint64_t)qword_10015F3E8);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

void sub_100103774()
{
  sub_100043D2C();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_10011E4D8();
  char v3 = sub_100101DA8(v0, v1, v2);
  swift_release();
  swift_release();
  swift_release();
  if ((v3 & 1) == 0)
  {
    if (qword_10015B1F0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003B18(v4, (uint64_t)qword_10015F3E8);
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (sub_100057CB0(v6))
    {
      uint64_t v7 = (_WORD *)sub_10005A928();
      sub_100069CF8(v7);
      sub_10011E5D8((void *)&_mh_execute_header, v8, v9, "assertActiveGroupsContainsGroup couldn't find active group with assets");
      sub_10000ED7C();
    }
  }
}

void sub_10010389C()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_100043D2C();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100101DA8(v3, v4, v5);
  sub_10011D714();
  swift_release();
  swift_release();
  if ((v1 & 1) == 0)
  {
    sub_100043D2C();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_10011E4D8();
    char v9 = sub_100101DA8(v6, v7, v8);
    swift_release();
    swift_release();
    swift_release();
    if ((v9 & 1) == 0)
    {
      if (qword_10015B1F0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100003B18(v10, (uint64_t)qword_10015F3E8);
      char v11 = (void *)Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.fault.getter();
      if (sub_100057CB0(v12))
      {
        uint64_t v13 = (_WORD *)sub_10005A928();
        sub_100069CF8(v13);
        sub_10011E5D8((void *)&_mh_execute_header, v14, v15, "assertPendingGroupsContainsGroup couldn't find pending group with assets");
        sub_10000ED7C();
      }
    }
  }
}

uint64_t sub_100103A38(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10000ED60();
  v32[2] = v4;
  v32[3] = v3;
  __chkstk_darwin(v3, v5);
  sub_100030144();
  v32[1] = v6;
  uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_10011D8C0();
  unint64_t v8 = v7[1];
  uint64_t v9 = v7[2];
  uint64_t v34 = *v7;
  unint64_t v35 = v8;
  uint64_t v36 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v10 = sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000, (uint64_t)v33, v8);
  if ((v11 & 1) == 0)
  {
    unint64_t v37 = sub_1001186EC((unint64_t)v10, v9);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v12 = swift_beginAccess();
    __chkstk_darwin(v12, v13);
    sub_10011DB4C();
    swift_retain();
    sub_10011DC30((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000);
    sub_10011DFA8();
    swift_release();
    if ((a1 & 1) == 0)
    {
      sub_10011DF34();
      sub_10000EFBC();
      v14();
      sub_100119CEC(v8);
      swift_release();
    }
LABEL_8:
    swift_endAccess();
    return v37;
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  uint64_t v16 = sub_10011D8C0();
  uint64_t v17 = *v15;
  uint64_t v18 = v15[1];
  unint64_t v19 = v15[2];
  __chkstk_darwin(v16, v20);
  v32[-4] = v17;
  v32[-3] = v18;
  v32[-2] = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v21 = sub_10011DC30((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000);
  if ((v22 & 1) == 0)
  {
    unint64_t v37 = sub_1001186EC((unint64_t)v21, v19);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v23 = swift_beginAccess();
    __chkstk_darwin(v23, v24);
    sub_10011DB4C();
    swift_retain();
    sub_10011DC30((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000);
    sub_10011DFA8();
    swift_release();
    if ((a1 & 1) == 0)
    {
      sub_10011DF34();
      sub_10000EFBC();
      v25();
      sub_100119CEC(v19);
      swift_release();
    }
    goto LABEL_8;
  }
  swift_release();
  swift_release();
  swift_release();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100003B18(v27, (uint64_t)qword_10015F3E8);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "findGroupInPendingAndRemove couldn't find pending group with assets", v30, 2u);
    sub_10000ED7C();
  }

  type metadata accessor for ModelManagerError();
  sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  swift_allocError();
  sub_10002FC6C();
  sub_100043E9C();
  v31();
  return swift_willThrow();
}

uint64_t sub_100103EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v2[1];
  uint64_t v26 = *v2;
  uint64_t v27 = v10;
  uint64_t v28 = a2;
  swift_retain();
  swift_retain();
  unint64_t v11 = (unint64_t)sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000, (uint64_t)v25, v10);
  char v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  swift_release();
  if (v13)
  {
    if (a1)
    {
      swift_retain();
      sub_100119830(a2);
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      goto LABEL_10;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a2, v24);
  }
  else if (a1)
  {
    uint64_t v18 = v3[2];
    uint64_t v17 = v3 + 2;
    uint64_t v16 = v18;
    swift_retain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v17 = v18;
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100119E6C(v16);
      uint64_t v16 = result;
      uint64_t *v17 = result;
    }
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(void *)(v16 + 16))
    {
      swift_retain();
      swift_release();
      *(void *)(v16 + 8 * v11 + 32) = a1;
LABEL_10:
      specialized ContiguousArray._endMutation()();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v24);
      return swift_release_n();
    }
    __break(1u);
  }
  else
  {
    sub_100119B00(v11, v15, (uint64_t)v9);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v21 = v9;
    uint64_t v22 = v24;
    v20(v21, v24);
    sub_100119CEC(v11);
    v20((char *)a2, v22);
    return swift_release();
  }
  return result;
}

void *sub_100104130()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  sub_100043D2C();
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  if (!v2) {
    return _swiftEmptySetSingleton;
  }
  sub_1000B7908();
  sub_10011E588();
  sub_10002FC78();
  uint64_t v3 = 0;
  do
  {
    ++v3;
    swift_bridgeObjectRetain();
    sub_100018590();
    uint64_t v5 = v4;
  }
  while (v2 != v3);
  sub_10011E5A0();
  sub_100043604();
  sub_10000F050();
  return (void *)v5;
}

void sub_1001041FC()
{
  sub_10002FAAC();
  unint64_t v65 = v1;
  uint64_t v3 = v2;
  type metadata accessor for ModelCatalogAsset(0);
  sub_10000ED60();
  uint64_t v69 = v5;
  uint64_t v70 = v4;
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  char v12 = (char *)v64 - v11;
  uint64_t v13 = type metadata accessor for AssetCost();
  sub_10000ED60();
  uint64_t v15 = v14;
  __chkstk_darwin(v16, v17);
  sub_10011DAD4();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)v64 - v21;
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)v64 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v66 = (char *)v64 - v28;
  v64[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100018590();
  uint64_t v30 = v29;
  AssetCost.init(onDeviceMemory:)();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v31 = v15 + 16;
  v64[2] = v26;
  uint64_t v71 = v13;
  v32(v22, v26, v13);
  uint64_t v33 = *(void *)(v30 + 56);
  uint64_t v67 = v30 + 56;
  uint64_t v34 = 1 << *(unsigned char *)(v30 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v36 = v35 & v33;
  int64_t v68 = (unint64_t)(v34 + 63) >> 6;
  unint64_t v37 = (uint64_t *)(v31 - 8);
  int v38 = (void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  uint64_t v39 = v30;
  swift_bridgeObjectRetain();
  int64_t v40 = 0;
  if (!v36) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v41 = __clz(__rbit64(v36));
  v36 &= v36 - 1;
  for (unint64_t i = v41 | (v40 << 6); ; unint64_t i = __clz(__rbit64(v44)) + (v40 << 6))
  {
    sub_10011C5C8(*(void *)(v39 + 48) + *(void *)(v69 + 72) * i, (uint64_t)v12);
    sub_10000E54C((uint64_t)v12, (uint64_t)v9);
    static AssetCost.+ infix(_:_:)();
    sub_10011C61C((uint64_t)v9, (void (*)(void))type metadata accessor for ModelCatalogAsset);
    uint64_t v30 = v71;
    sub_1000303D4();
    v53();
    (*v38)(v22, v0, v30);
    if (v36) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v43 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v43 >= v68) {
      break;
    }
    unint64_t v44 = *(void *)(v67 + 8 * v43);
    ++v40;
    if (v44) {
      goto LABEL_27;
    }
    int64_t v40 = v43 + 1;
    sub_10011DE58();
    if (v45 == v46) {
      break;
    }
    sub_10011DE4C();
    if (v44) {
      goto LABEL_27;
    }
    int64_t v40 = v47 + 2;
    sub_10011DE58();
    if (v45 == v46) {
      break;
    }
    sub_10011DE4C();
    if (v44) {
      goto LABEL_27;
    }
    int64_t v40 = v48 + 3;
    sub_10011DE58();
    if (v45 == v46) {
      break;
    }
    sub_10011DE4C();
    if (v44) {
      goto LABEL_27;
    }
    int64_t v40 = v49 + 4;
    sub_10011DE58();
    if (v45 == v46) {
      break;
    }
    sub_10011DE4C();
    if (v44) {
      goto LABEL_27;
    }
    int64_t v51 = v50 + 5;
    if (v51 >= v68) {
      break;
    }
    unint64_t v44 = *(void *)(v67 + 8 * v51);
    if (!v44)
    {
      while (1)
      {
        int64_t v40 = v51 + 1;
        if (__OFADD__(v51, 1)) {
          break;
        }
        sub_10011DE58();
        if (v45 == v46) {
          goto LABEL_30;
        }
        sub_10011DE4C();
        int64_t v51 = v52 + 1;
        if (v44) {
          goto LABEL_27;
        }
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    int64_t v40 = v51;
LABEL_27:
    unint64_t v36 = (v44 - 1) & v44;
  }
LABEL_30:
  swift_release();
  (*v38)(v66, (uint64_t)v22, v71);
  uint64_t v30 = *v37;
  sub_1000303D4();
  ((void (*)(void))v30)();
  swift_bridgeObjectRelease();
  unint64_t v54 = AssetCost.onDeviceMemory.getter();
  unint64_t v55 = v65;
  if (v54 <= v65) {
    goto LABEL_37;
  }
  unint64_t v56 = AssetCost.onDeviceMemory.getter();
  int v38 = (void (**)(char *, uint64_t, uint64_t))(v56 - v55);
  if (v56 < v55) {
    goto LABEL_40;
  }
  if (qword_10015B1F0 == -1) {
    goto LABEL_33;
  }
LABEL_41:
  swift_once();
LABEL_33:
  uint64_t v57 = type metadata accessor for Logger();
  sub_100003B18(v57, (uint64_t)qword_10015F3E8);
  swift_retain_n();
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = swift_slowAlloc();
    uint64_t v70 = v38;
    uint64_t v61 = v60;
    uint64_t v73 = sub_10002FF90();
    *(_DWORD *)uint64_t v61 = 136315394;
    uint64_t v69 = v61 + 4;
    type metadata accessor for UUID();
    sub_1001141CC(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v72 = sub_10001DF20(v62, v63, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10011E5A0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 12) = 2048;
    uint64_t v72 = (uint64_t)v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Defering execution group %s: would go over budget by %lluKB", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

LABEL_37:
  sub_1000303D4();
  ((void (*)(void))v30)();
  sub_10002FAC4();
}

uint64_t sub_1001047E4()
{
  *(void *)(v1 + 40) = v0;
  return sub_10000EFE0((uint64_t)sub_100104800, v0);
}

uint64_t sub_100104800()
{
  sub_1000086EC();
  uint64_t v1 = (uint64_t *)(v0[5] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_100043D2C();
  v0[6] = v1[1];
  uint64_t v2 = v1[2];
  v0[7] = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  v0[8] = v3;
  if (v3)
  {
    v0[9] = *v1;
    v0[10] = 0;
    uint64_t v4 = *(void *)(v2 + 16);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    if (v4)
    {
      v0[11] = *(void *)(v2 + 32);
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[12] = (uint64_t)v6;
      *uint64_t v6 = v0;
      v6[1] = sub_100104938;
      uint64_t v7 = sub_100044070(v0[5]);
      return sub_100009AF4(v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10000EF7C();
    return v8();
  }
  return result;
}

uint64_t sub_100104938()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100104A14()
{
  sub_1000086E0();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t result = swift_release();
  if (v1 + 1 == v2)
  {
    swift_release();
    swift_release();
    swift_release();
    sub_10000EF7C();
    return v4();
  }
  else
  {
    unint64_t v5 = v0[10] + 1;
    v0[10] = v5;
    uint64_t v6 = v0[7];
    if (v5 >= *(void *)(v6 + 16))
    {
      __break(1u);
    }
    else
    {
      v0[11] = *(void *)(v6 + 8 * v5 + 32);
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[12] = (uint64_t)v7;
      *uint64_t v7 = v0;
      v7[1] = sub_100104938;
      uint64_t v8 = sub_100044070(v0[5]);
      return sub_100009AF4(v8);
    }
  }
  return result;
}

uint64_t sub_100104B38()
{
  sub_1000086E0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = type metadata accessor for UUID();
  v1[9] = v3;
  sub_10002FA4C(v3);
  v1[10] = v4;
  v1[11] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015F7F8);
  sub_10002FDD0(v5);
  v1[12] = sub_1000436D8();
  v1[13] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015F800);
  v1[14] = v6;
  sub_10002FDD0(v6);
  v1[15] = sub_1000436D8();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015F8F8);
  sub_10002FDD0(v7);
  v1[18] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100104C58()
{
  unint64_t v63 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[8];
  sub_100105598();
  uint64_t v3 = v2 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  sub_100043EDC();
  sub_100043D2C();
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  os_log_t log = *(os_log_t *)(v5 + 16);
  if (log)
  {
    uint64_t v58 = v1[17];
    uint64_t v55 = v4 + ((*(unsigned __int8 *)(v1[10] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1[10] + 80));
    uint64_t v56 = v1[10];
    uint64_t v57 = v1[14];
    os_log_type_t v59 = *(NSObject **)(v4 + 16);
    uint64_t v54 = *(int *)(v57 + 48);
    sub_10011E588();
    swift_retain_n();
    swift_retain_n();
    os_log_t v6 = 0;
    uint64_t v53 = v1;
    while (v59 != v6)
    {
      uint64_t v8 = v1[16];
      uint64_t v7 = v1[17];
      uint64_t v61 = v1[15];
      uint64_t v9 = v1[12];
      uint64_t v10 = v1[13];
      uint64_t v11 = v1[9];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v10, v55 + *(void *)(v56 + 72) * (void)v6, v11);
      uint64_t v12 = *(void *)(v5 + 8 * (void)v6 + 32);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
      v13(v9, v10, v11);
      uint64_t v14 = sub_100043EDC();
      ((void (*)(uint64_t))v13)(v14);
      *(void *)(v58 + v54) = v12;
      sub_1000B6AC8(v7, v8, &qword_10015F800);
      uint64_t v15 = *(int *)(v57 + 48);
      uint64_t v16 = sub_10011E518();
      v17(v16);
      *(void *)(v61 + v15) = *(void *)(v8 + v15);
      swift_retain();
      swift_retain();
      sub_100009618();
      uint64_t v19 = v18;
      swift_release();
      sub_10000EFBC();
      v20();
      if (v19)
      {
        uint64_t v1 = v53;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v22 = sub_100044474();
        sub_1000B6AC8(v22, v23, v24);
        uint64_t v21 = 0;
        goto LABEL_10;
      }
      os_log_t v6 = (os_log_t)((char *)v6 + 1);
      sub_100042EDC(v53[16], &qword_10015F800);
      uint64_t v1 = v53;
      if (log == v6)
      {
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_8:
  uint64_t v21 = 1;
LABEL_10:
  sub_100006960(v1[18], v21, 1, v1[14]);
  swift_release();
  swift_release();
  swift_release();
  int v25 = sub_10011D8DC();
  uint64_t v26 = v1[18];
  if (v25 == 1)
  {
    sub_100042EDC(v26, &qword_10015F8F8);
    if (qword_10015B1F0 == -1)
    {
LABEL_12:
      uint64_t v27 = type metadata accessor for Logger();
      sub_100003B18(v27, (uint64_t)qword_10015F3E8);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)sub_10005A928();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "We can't acquire assets for foreground group but there are no nonzero cost active groups", v30, 2u);
        sub_10000ED7C();
      }

      type metadata accessor for ModelManagerError();
      sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      sub_10002FC6C();
      sub_100043E9C();
      v31();
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      return v32();
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  v1[19] = *(void *)(v26 + *(int *)(v1[14] + 48));
  sub_100057FE4();
  v34();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v35 = v1;
  uint64_t v37 = v1[7];
  unint64_t v36 = v1 + 7;
  uint64_t v39 = v36[3];
  uint64_t v38 = v36[4];
  uint64_t v40 = v36[2];
  uint64_t v41 = type metadata accessor for Logger();
  sub_100003B18(v41, (uint64_t)qword_10015F3E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v37, v40);
  swift_retain_n();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    v62[0] = sub_10000EFC8();
    *(_DWORD *)uint64_t v44 = 136315394;
    sub_1001141CC(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_10011E518();
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    v35[5] = sub_10001DF20(v45, v46, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100057FE4();
    v47();
    *(_WORD *)(v44 + 12) = 2080;
    sub_10011E518();
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    v35[6] = sub_10001DF20(v48, v49, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "ExecutionGroup %s waiting for group %s to complete", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    sub_100057FE4();
    v50();

    swift_release_n();
  }
  int64_t v51 = (void *)swift_task_alloc();
  v35[20] = v51;
  *int64_t v51 = v35;
  v51[1] = sub_100105414;
  uint64_t v52 = sub_100044070(v35[8]);
  return sub_100009AF4(v52);
}

uint64_t sub_100105414()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001054F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FEAC();
  return v11(v10, v11, v12, v13, v14, v15, v16, v17, a9, a10);
}

uint64_t sub_100105598()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
  sub_100043D2C();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_100043D2C();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001142A8(v3, v2, v4, v6, v7, v8);
  uint64_t v10 = v9;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!sub_100102328(v10)) {
    sub_1001152E8();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001056B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v12 = a3;
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15 || *(void *)(a6 + 16))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v15)
    {
      uint64_t v30 = v12;
      uint64_t v16 = (void *)(v12 + 32);
      do
      {
        uint64_t v17 = *v16 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
        swift_beginAccess();
        long long v18 = *(_OWORD *)v17;
        long long v19 = *(_OWORD *)(v17 + 32);
        long long v32 = *(_OWORD *)(v17 + 16);
        long long v33 = v19;
        *((void *)&v31 + 1) = *((void *)&v18 + 1);
        sub_1000B6AC8((uint64_t)&v31 + 8, (uint64_t)v34, &qword_10015F8A8);
        sub_1000B6AC8((uint64_t)&v32, (uint64_t)v35, &qword_10015F8B0);
        sub_1000B6AC8((uint64_t)&v32 + 8, (uint64_t)v36, &qword_10015F8B8);
        uint64_t v38 = *((void *)&v33 + 1);
        v37[0] = v33;
        swift_retain();
        sub_10011C674((uint64_t)v34);
        sub_10011C674((uint64_t)v35);
        sub_10011C674((uint64_t)v36);
        sub_10011C6A0((uint64_t)v37);
        sub_10011C6A0((uint64_t)&v38);
        LOBYTE(v17) = sub_100009D84();
        sub_10006945C((uint64_t)v34);
        sub_10006945C((uint64_t)v35);
        sub_10006945C((uint64_t)v36);
        sub_10000E054((uint64_t)v37);
        sub_10000E054((uint64_t)&v38);
        if (v17)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v16;
        --v15;
      }
      while (v15);
      uint64_t v12 = v30;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_13;
      }
    }
    else if (_swiftEmptyArrayStorage[2])
    {
LABEL_13:
      swift_retain();
      uint64_t v9 = (uint8_t *)sub_1001021B4((unint64_t)_swiftEmptyArrayStorage, v10, a7);
      swift_release();
      return (uint64_t)v9;
    }
    swift_release();
    swift_retain();
    uint64_t v25 = sub_100102080(a1, a2, v12);
    if (v25)
    {
      return v25;
    }
    else
    {
      swift_retain();
      return sub_100102080(a4, a5, a6);
    }
  }
  else
  {
    if (qword_10015B1F0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003B18(v20, (uint64_t)qword_10015F3E8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "In determineNextGroupToAcquire but all pending groups are empty", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v23 = type metadata accessor for ModelManagerError();
    sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for ModelManagerError.internalError(_:), v23);
    swift_willThrow();
  }
  return (uint64_t)v9;
}

void sub_100105B14(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  if (!*(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire))
  {
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups);
    sub_10011D8C0();
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[2];
    uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    swift_beginAccess();
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v9[2];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v21 = sub_1001056B0(v6, v7, v8, v10, v11, v12, a1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (!v2)
    {
      *(void *)(v1 + v3) = v21;
      swift_release();
      if (*(void *)(v1 + v3))
      {
        uint64_t v13 = qword_10015B1F0;
        swift_retain();
        if (v13 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_100003B18(v14, (uint64_t)qword_10015F3E8);
        swift_retain_n();
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 136315138;
          uint64_t v22 = v18;
          type metadata accessor for UUID();
          sub_1001141CC(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
          sub_10001DF20(v19, v20, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Next exection group: %s", v17, 0xCu);
          swift_arrayDestroy();
          sub_10000ED7C();
          sub_10000ED7C();
          swift_release();
        }
        else
        {

          swift_release_n();
        }
      }
    }
  }
}

uint64_t sub_100105E30(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_10000EFE0((uint64_t)sub_100105E4C, v1);
}

uint64_t sub_100105E4C()
{
  sub_1000086E0();
  uint64_t v1 = v0[3];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  uint64_t v3 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  v0[4] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_nextExecutionGroupToAcquire;
  v0[5] = v3;
  uint64_t v4 = *(void *)(v1 + v2);
  v0[6] = 0;
  if (v4)
  {
    sub_1000304E0();
    return v5();
  }
  else
  {
    uint64_t v7 = sub_10000853C((void *)(v1 + v3), *(void *)(v1 + v3 + 24));
    v0[7] = v7;
    uint64_t v8 = *v7;
    return _swift_task_switch(sub_100105F08, v8, 0);
  }
}

uint64_t sub_100105F08()
{
  sub_1000086E0();
  *(void *)(v0 + 64) = sub_100075940();
  sub_10000F0B4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100105F74()
{
  sub_1000086EC();
  uint64_t v1 = v0[6];
  sub_100105B14(v0[8]);
  if (v1)
  {
    sub_100043E38();
LABEL_5:
    return v2();
  }
  if (*(void *)(v0[3] + v0[4]))
  {
    v0[6] = 0;
    sub_1000304E0();
    goto LABEL_5;
  }
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = (uint64_t)v4;
  void *v4 = v0;
  v4[1] = sub_100106064;
  sub_100044070(v0[2]);
  return sub_100104B38();
}

uint64_t sub_100106064()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    sub_100030C68();
    return _swift_task_switch(v9, v10, v11);
  }
}

uint64_t sub_100106174()
{
  sub_1000086E0();
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + v0[4]);
  v0[6] = v0[10];
  if (v2)
  {
    sub_1000304E0();
    return v3();
  }
  else
  {
    uint64_t v5 = sub_10000853C((void *)(v1 + v0[5]), *(void *)(v1 + v0[5] + 24));
    v0[7] = v5;
    uint64_t v6 = *v5;
    return _swift_task_switch(sub_100105F08, v6, 0);
  }
}

uint64_t sub_100106224()
{
  sub_1000086E0();
  v1[13] = v2;
  v1[14] = v0;
  v1[11] = v3;
  v1[12] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015DA50);
  sub_10002FDD0(v5);
  v1[15] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for InferenceProviderRequestConfiguration();
  v1[16] = v6;
  sub_10002FA4C(v6);
  v1[17] = v7;
  v1[18] = sub_10002FE18();
  uint64_t v8 = sub_100003A70(&qword_10015B9A0);
  v1[19] = v8;
  sub_10002FA4C(v8);
  v1[20] = v9;
  v1[21] = sub_10002FE18();
  uint64_t v10 = type metadata accessor for RequestPriority();
  v1[22] = v10;
  sub_10002FA4C(v10);
  v1[23] = v11;
  v1[24] = sub_10002FE18();
  uint64_t v12 = sub_100003A70(&qword_10015F8F0);
  v1[25] = v12;
  sub_10002FDD0(v12);
  v1[26] = sub_1000436D8();
  v1[27] = swift_task_alloc();
  uint64_t v13 = sub_100003A70(&qword_10015EF80);
  sub_10002FDD0(v13);
  v1[28] = sub_1000436D8();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v14 = sub_100003A70(&qword_10015B408);
  v1[34] = v14;
  sub_10002FA4C(v14);
  v1[35] = v15;
  v1[36] = sub_1000436D8();
  v1[37] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  v1[38] = v16;
  sub_10002FA4C(v16);
  v1[39] = v17;
  v1[40] = sub_1000436D8();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v18, v19, v20);
}

#error "100106674: call analysis failed (funcsize=661)"

uint64_t sub_100106F40()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

#error "100107250: call analysis failed (funcsize=464)"

uint64_t sub_1001077CC()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 456) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

#error "100107B00: call analysis failed (funcsize=468)"

uint64_t sub_100108084()
{
  sub_100043744();
  sub_100043E90();
  uint64_t v2 = *v1;
  sub_1000086D0();
  *uint64_t v3 = v4;
  *uint64_t v3 = *v1;
  uint64_t v17 = v4;
  *(void *)(v4 + 488) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 280);
  sub_100042EDC(*(void *)(v2 + 120), &qword_10015DA50);
  sub_1000303D4();
  v6();
  sub_10011DEB4();
  sub_100043DF8();
  v7();
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v9 = v5 + 8;
  uint64_t v8 = v10;
  if (!v0)
  {
    *(void *)(v17 + 496) = v8;
    *(void *)(v17 + 504) = v9 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  }
  sub_100043CF4();
  v11();
  sub_100043638();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_1001082D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_1000B81CC();
  a27 = v30;
  a28 = v31;
  sub_1000B9660();
  a26 = v29;
  swift_retain_n();
  long long v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (sub_100057B8C(v33))
  {
    int64_t v51 = (uint64_t (*)(uint64_t))v29[62];
    uint64_t v34 = (_DWORD *)sub_100030314();
    a17 = sub_10002FF90();
    _DWORD *v34 = 136315138;
    RequestMetadata.id.getter();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    sub_10011DEF4();
    uint64_t v35 = sub_10011DEB4();
    uint64_t v36 = v51(v35);
    v29[8] = sub_100044698(v36, v37, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_1000B72C4((void *)&_mh_execute_header, v32, v28, "waitForTurnAndAcquireAssets for %s got assets");
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v47 = v29[28];
  uint64_t v48 = v29[27];
  uint64_t v49 = v29[26];
  uint64_t v50 = v29[24];
  uint64_t v52 = v29[21];
  uint64_t v53 = v29[18];
  uint64_t v54 = v29[15];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10011E084();
  sub_100044308();
  return v40(v38, v39, v40, v41, v42, v43, v44, v45, a9, v47, v48, v49, v50, v52, v53, v54, a17, a18, a19, a20);
}

uint64_t sub_100108544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B81CC();
  sub_1000B9660();
  uint64_t v21 = v20[13];
  uint64_t v22 = (uint64_t *)(v20[14] + v20[58]);
  sub_100043EDC();
  sub_100043F38();
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v25 = (void *)swift_task_alloc();
  void v25[2] = v23;
  v25[3] = v24;
  v25[4] = v21;
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000, (uint64_t)v25, v24);
  char v28 = v27;
  uint64_t v30 = v29;
  swift_release();
  swift_release();
  swift_task_dealloc();
  if ((v28 & 1) == 0)
  {
    uint64_t v31 = (void (*)(void))v20[47];
    sub_100119B00((int64_t)v26, v30, v20[41]);
    sub_100057FE4();
    v31();
    sub_100119CEC((unint64_t)v26);
    swift_release();
  }
  swift_endAccess();
  swift_willThrow();
  uint64_t v41 = v20[61];
  sub_10011D170();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10011E070();
  sub_100044308();
  return v34(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, v41, a17, a18, a19, a20);
}

uint64_t sub_10010870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1000B81CC();
  sub_1000B9660();
  uint64_t v25 = (uint64_t *)v22[57];
  if (*(void *)(v22[14] + v22[48]))
  {
    uint64_t v26 = sub_10011D828();
    uint64_t v24 = v28(v26, v27 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id);
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = 1;
  }
  uint64_t v30 = sub_10011D0D8(v24, v29);
  v23(v30);
  sub_10011D1EC();
  sub_10011D434();
  sub_10011D46C();
  sub_10011D354();
  if (!v33)
  {
    uint64_t v31 = sub_10011E1E8();
    sub_100043174(v31, v32, &qword_10015EF80);
    sub_10011D37C();
    if (!v33)
    {
      uint64_t v50 = v22[26];
      sub_10011D22C();
      v35();
      sub_1001141CC(&qword_10015B7F8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v36 = sub_10011D330();
      sub_100043AE0();
      v20();
      uint64_t v21 = &qword_10015EF80;
      sub_10011E4C0();
      sub_10011E524();
      sub_100043AE0();
      v20();
      sub_100042EDC(v50, &qword_10015EF80);
      if ((v36 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    uint64_t v34 = sub_10011D818();
    sub_100042EDC(v34, &qword_10015EF80);
    sub_10011E570();
    sub_100043AE0();
    v20();
LABEL_12:
    sub_100042EDC(v22[26], &qword_10015F8F0);
    goto LABEL_17;
  }
  sub_100042EDC(v22[29], &qword_10015EF80);
  sub_10011DB0C();
  sub_10011D548();
  if (!v33) {
    goto LABEL_12;
  }
  sub_100042EDC(v22[26], &qword_10015EF80);
LABEL_14:
  Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (sub_1000579B0(v37))
  {
    uint64_t v38 = (_WORD *)sub_10005A928();
    sub_1000B91A0(v38);
    sub_10006A194((void *)&_mh_execute_header, v39, v40, "Cleaning up nextExecutionGroupToAcquire");
    sub_10000ED7C();
  }
  sub_10011E1D0();
  sub_10011E1B8();
LABEL_17:
  sub_10011DD10();
  if (v21)
  {
    swift_errorRelease();
    int64_t v51 = v21;
  }
  else
  {
    swift_release();
    swift_willThrow();
    int64_t v51 = v25;
  }
  sub_10011D170();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10011E070();
  sub_100044308();
  return v43(v41, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14, a15, v51, a17, a18, a19, a20);
}

uint64_t sub_1001089E8()
{
  sub_1000086E0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v1[13] = v5;
  sub_10002FA4C(v5);
  v1[14] = v6;
  v1[15] = sub_1000436D8();
  v1[16] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015B408);
  v1[17] = v7;
  sub_10002FA4C(v7);
  v1[18] = v8;
  v1[19] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_100108AB8()
{
  sub_1000086EC();
  sub_10000853C((void *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager), *(void *)(v0[12] + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager + 24));
  RequestMetadata.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[20] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100108B8C;
  sub_100044070(v0[19]);
  return sub_100084D9C();
}

uint64_t sub_100108B8C()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100043924();
  v3();
  sub_100044150();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100108CC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint8_t *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_1000B81CC();
  a27 = v29;
  a28 = v30;
  sub_1000B9660();
  a26 = v28;
  uint64_t v31 = v28[9];
  uint64_t v32 = v28[12];
  sub_100103774();
  char v33 = (uint64_t *)(v32 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
  sub_100043D2C();
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  uint64_t v36 = v33[2];
  os_log_type_t v37 = (void *)swift_task_alloc();
  void v37[2] = v35;
  v37[3] = v34;
  uint64_t v37[4] = v31;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v38 = sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000, (uint64_t)v37, v34);
  char v40 = v39;
  swift_task_dealloc();
  if (v40)
  {
    a13 = 0;
    swift_release();
    swift_release();
    swift_release();
    if (qword_10015B1F0 != -1) {
      swift_once();
    }
    uint64_t v41 = v28[16];
    uint64_t v42 = v28[13];
    uint64_t v43 = v28[14];
    uint64_t v44 = v28[9];
    uint64_t v45 = type metadata accessor for Logger();
    sub_100003B18(v45, (uint64_t)qword_10015F3E8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v44, v42);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.fault.getter();
    int v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      a10 = v28 + 8;
      HIDWORD(a11) = v48;
      uint64_t v49 = (uint8_t *)sub_100030314();
      a12 = sub_10002FF90();
      a16 = a12;
      *(_DWORD *)uint64_t v49 = 136315138;
      a9 = v49 + 4;
      sub_1001141CC(&qword_10015B420, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      v28[8] = sub_10001DF20(v50, v51, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100043F00();
      v52();
      _os_log_impl((void *)&_mh_execute_header, v46, BYTE4(a11), "assertActiveGroupsContainsGroup couldn't find active group for %s", v49, 0xCu);
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      (*(void (**)(void, void))(v28[14] + 8))(v28[16], v28[13]);
    }
  }
  else
  {
    sub_1001186EC((unint64_t)v38, v36);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v53 = v28[9];
  sub_100043F38();
  uint64_t v54 = *v33;
  uint64_t v55 = v33[1];
  uint64_t v56 = (void *)swift_task_alloc();
  v56[2] = v54;
  v56[3] = v55;
  v56[4] = v53;
  swift_retain();
  swift_retain();
  uint64_t v57 = sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011D000, (uint64_t)v56, v55);
  char v59 = v58;
  swift_release();
  swift_release();
  swift_task_dealloc();
  if ((v59 & 1) == 0)
  {
    int64_t v60 = sub_100044474();
    sub_100119B00(v60, v61, v62);
    sub_1000BA570();
    sub_100043CF4();
    v63();
    sub_100119CEC((unint64_t)v57);
    swift_release();
  }
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_100044308();
  return v65(v64, v65, v66, v67, v68, v69, v70, v71, a9, a10, a11, a12, a13, v33 + 2, v28 + 5, a16, a17, a18, a19, a20);
}

uint64_t sub_1001090B8()
{
  sub_1000086E0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[8] = v5;
  uint64_t v6 = type metadata accessor for RequestPriority();
  v1[13] = v6;
  sub_10002FA4C(v6);
  v1[14] = v7;
  v1[15] = sub_1000436D8();
  v1[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v1[17] = v8;
  sub_10002FA4C(v8);
  v1[18] = v9;
  v1[19] = sub_1000436D8();
  v1[20] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_100109194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100043744();
  sub_100043E90();
  uint64_t v17 = v16[19];
  uint64_t v18 = v16[20];
  uint64_t v20 = v16[17];
  uint64_t v19 = v16[18];
  uint64_t v21 = v16[12];
  uint64_t v50 = v16[11];
  uint64_t v22 = v16[9];
  uint64_t v23 = v16[10];
  uint64_t v24 = v16[8];
  UUID.init()();
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v49(v17, v18, v20);
  uint64_t v25 = sub_10004412C();
  *(void *)(v25 + 16) = v21;
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = sub_10004412C();
  *(void *)(v26 + 16) = v21;
  *(void *)(v26 + 24) = v24;
  _s14ExecutionGroupCMa();
  swift_allocObject();
  sub_10011E588();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v16[21] = sub_1000089FC(v17, v22, (uint64_t)&unk_10015F8C8, v25, (uint64_t)&unk_10015F8D8, v26);
  uint64_t v27 = sub_10000A0F8(v21, v24, v23, v50);
  v16[22] = v27;
  uint64_t v28 = v16[20];
  uint64_t v29 = v16[17];
  uint64_t v51 = v27;
  uint64_t v48 = v16[19];
  uint64_t v30 = v16[14];
  sub_10011EF24();
  sub_100043E68();
  v31();
  uint64_t v32 = sub_10011DEB4();
  HIDWORD(a9) = sub_100101CD0(v32, v33, v34);
  uint64_t v35 = *(void (**)(void))(v30 + 8);
  sub_100043CF4();
  v35();
  sub_100043CF4();
  v35();
  v49(v48, v28, v29);
  uint64_t v36 = v16[19];
  sub_100043F38();
  uint64_t v37 = swift_retain();
  sub_100103EB0(v37, v36);
  swift_endAccess();
  sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v38 = (void *)swift_task_alloc();
  v16[23] = v38;
  *uint64_t v38 = v16;
  v38[1] = sub_100109550;
  sub_100043638();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v39, v40, v41, v42, v43, v44, v45, v46, a9, v48, v49, v51, a13, a14, a15, a16);
}

uint64_t sub_100109550()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 192) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100109648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  swift_release();
  swift_release();
  sub_100044784();
  sub_100057FE4();
  v10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FEAC();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_1001096EC()
{
  sub_1000086EC();
  swift_release();
  swift_release();
  sub_100043924();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_100109798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001097B8, a2, 0);
}

uint64_t sub_1001097B8()
{
  sub_1000086EC();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100109878;
  sub_100044070(*(void *)(v0 + 32));
  return sub_100106224();
}

uint64_t sub_100109878()
{
  sub_1000086E0();
  char v3 = v2;
  sub_100008660();
  uint64_t v4 = *v1;
  sub_1000086D0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (v0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v3 & 1;
  }
  return v6(v7);
}

uint64_t sub_100109950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100109970, a2, 0);
}

uint64_t sub_100109970()
{
  sub_1000086EC();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100109A2C;
  sub_1000447E8();
  return sub_1001089E8();
}

uint64_t sub_100109A2C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_100109AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = sub_100003A70(&qword_10015B468);
  *uint64_t v5 = v2;
  v5[1] = sub_10000E1FC;
  return Task.value.getter(a1, a2, (char *)&type metadata for () + 8, v6, &protocol self-conformance witness table for Error);
}

void sub_100109BBC()
{
  sub_100003A70(&qword_10015B468);

  Task.cancel()();
}

uint64_t sub_100109C14()
{
  sub_1000086E0();
  v1[17] = v2;
  v1[18] = v0;
  uint64_t v3 = sub_100003A70(&qword_10015F7F8);
  sub_10002FDD0(v3);
  v1[19] = sub_1000436D8();
  v1[20] = swift_task_alloc();
  uint64_t v4 = sub_100003A70(&qword_10015F800);
  v1[21] = v4;
  sub_10002FDD0(v4);
  v1[22] = sub_10002FE18();
  uint64_t v5 = type metadata accessor for ModelCatalogAsset(0);
  v1[23] = v5;
  sub_10002FA4C(v5);
  v1[24] = v6;
  v1[25] = sub_1000436D8();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100109D10()
{
  unint64_t v2 = (unint64_t)(v0 + 11);
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  char v5 = *(unsigned char *)(v3 + 32);
  *((unsigned char *)v0 + 264) = v5;
  uint64_t v6 = 1;
  uint64_t v7 = 1 << v5;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  uint64_t v10 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager;
  uint64_t v11 = v4 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  v0[28] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
  v0[29] = v10;
  swift_bridgeObjectRetain();
  sub_1000B9488();
  uint64_t v12 = sub_100043D2C();
  int64_t v15 = 0;
  if (!v9) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v16 = __clz(__rbit64(v9));
  uint64_t v17 = (void *)((v9 - 1) & v9);
  uint64_t v18 = v16 | (v15 << 6);
  uint64_t v12 = v0[17];
LABEL_20:
  uint64_t v68 = v17;
  int64_t v69 = v15;
  v0[30] = v15;
  v0[31] = v17;
  uint64_t v25 = sub_10011D5C4(v12, v18);
  sub_10011C5C8(v25, v2);
  sub_10000E54C(v2, v11);
  uint64_t v27 = MEMORY[1];
  uint64_t v26 = (void *)MEMORY[9];
  uint64_t v28 = (void *)MEMORY[0x11];
  uint64_t v29 = swift_task_alloc();
  sub_10011E3C8(v29);
  if (!v30) {
    goto LABEL_127;
  }
  uint64_t v31 = v0[21];
  uint64_t v74 = v0[22];
  type metadata accessor for UUID();
  sub_100057B10();
  uint64_t v73 = *(int *)(v31 + 48);
  uint64_t v75 = v26[2];
  sub_10011E424();
  swift_retain_n();
  swift_retain_n();
  sub_10011DDA4();
  while (v1 != v75)
  {
    uint64_t v32 = sub_10011D3A4();
    v33(v32);
    uint64_t v34 = sub_10011D584();
    ((void (*)(uint64_t))v6)(v34);
    uint64_t v35 = sub_10011E014();
    ((void (*)(uint64_t))v6)(v35);
    *(void *)(v74 + v73) = v26;
    uint64_t v77 = v1;
    if (*(void *)(*(void *)((char *)v26 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets)
                   + 16))
    {
      sub_10011E370();
      uint64_t v36 = *(void **)v6;
      uint64_t v37 = *(void *)(v6 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_10011E350();
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = v36;
        uint64_t v6 = (uint64_t)(v17 + 5);
        do
        {
          uint64_t v28 = *(void **)v6;
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v6 += 16;
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease();
      }
      sub_10011E31C();
      if (v1)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = (void *)(v27 + 64);
        do
        {
          sub_10011E29C();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          if (v28)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          Hasher._combine(_:)(v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v26 += 5;
          --v1;
        }
        while (v1);
        swift_bridgeObjectRelease();
      }
      uint64_t v38 = sub_10011DA2C();
      sub_1001141CC(&qword_10015B7E8, (void (*)(uint64_t))&type metadata accessor for AssetCost);
      sub_10011E2FC();
      sub_10011E268();
      Hasher._combine(_:)(*((unsigned char *)v28 + *(int *)(v6 + 36)));
      sub_10011E248();
      Hasher._finalize()();
      sub_10011D4F0();
      if (v39)
      {
        while (1)
        {
          uint64_t v40 = sub_10011E214();
          sub_10011C5C8(v40, (uint64_t)v36);
          BOOL v41 = *v36 == *(void *)v6 && v36[1] == *(void *)(v6 + 8);
          if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_104;
          }
          sub_10011D72C();
          if (!v41) {
            goto LABEL_104;
          }
          if (v36) {
            BOOL v42 = v38 == (void)v17;
          }
          else {
            BOOL v42 = 1;
          }
          if (!v42)
          {
            BOOL v47 = *(void *)(v38 + 32) == v17[4] && *(void *)(v38 + 40) == v17[5];
            if (!v47 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_104;
            }
            if (v36 != (void *)1)
            {
              BOOL v48 = *(void *)(v38 + 48) == v17[6] && *(void *)(v38 + 56) == v17[7];
              if (!v48 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_104;
              }
              if (v36 != (void *)2)
              {
                uint64_t v0 = v17 + 9;
                uint64_t v6 = v38 + 72;
                uint64_t v38 = 2;
                while ((unint64_t)v36 > 2)
                {
                  BOOL v49 = *(void *)(v6 - 8) == v17[8] && *(void *)v6 == *v0;
                  if (!v49 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_104;
                  }
                  sub_10011E158();
                  if (v41) {
                    goto LABEL_48;
                  }
                }
                __break(1u);
LABEL_127:
                swift_retain();
                swift_retain();
                goto LABEL_123;
              }
            }
          }
LABEL_48:
          sub_10011D918();
          if (v41) {
            break;
          }
LABEL_104:
          uint64_t v0 = v78;
          sub_10011C61C(v78[25], (void (*)(void))type metadata accessor for ModelCatalogAsset);
          sub_10011D630();
          if ((v56 & 1) == 0) {
            goto LABEL_107;
          }
        }
        if (v26) {
          BOOL v45 = v43 == v44;
        }
        else {
          BOOL v45 = 1;
        }
        if (!v45)
        {
          uint64_t v50 = v44 + 64;
          uint64_t v51 = v43 + 64;
          do
          {
            sub_10011D6F4();
            BOOL v54 = v41 && v52 == v53;
            if (!v54 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_104;
            }
            if (v36)
            {
              if (!v17) {
                goto LABEL_104;
              }
              if ((void *)v38 == v28 && v36 == v17)
              {
                if (v0 != v6) {
                  goto LABEL_104;
                }
                goto LABEL_102;
              }
              if ((sub_10011DFF0() & 1) == 0) {
                goto LABEL_104;
              }
            }
            else if (v17)
            {
              goto LABEL_104;
            }
            if ((v0 ^ v6)) {
              goto LABEL_104;
            }
LABEL_102:
            v51 += 40;
            v50 += 40;
            uint64_t v26 = (void *)((char *)v26 - 1);
          }
          while (v26);
        }
        if ((sub_10011DC88() & 1) == 0) {
          goto LABEL_104;
        }
        sub_10011D6A8();
        if (!v41) {
          goto LABEL_104;
        }
        sub_10011D9B4();
        if (!v41) {
          goto LABEL_104;
        }
        sub_10011D998();
        if (!v41) {
          goto LABEL_104;
        }
        sub_10011C61C(v46, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        sub_100043D2C();
        sub_10011E0D4();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_100116B0C();
        unint64_t v2 = v57;
        swift_bridgeObjectRetain();
        sub_100116B0C();
        uint64_t v1 = v58;
        swift_bridgeObjectRelease();
        sub_100116744(v1);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v2 >> 62)
        {
          sub_10011D4D0();
          uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v59 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        uint64_t v27 = v76;
        if (v59)
        {
          uint64_t v17 = 0;
          while (1)
          {
            if ((v2 & 0xC000000000000001) != 0) {
              uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              uint64_t v12 = swift_retain();
            }
            uint64_t v6 = (uint64_t)v17 + 1;
            if (__OFADD__(v17, 1)) {
              goto LABEL_132;
            }
            char v60 = *((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v12);
            swift_release();
            if (v60) {
              break;
            }
            uint64_t v17 = (void *)((char *)v17 + 1);
            if (v6 == v59) {
              goto LABEL_119;
            }
          }
          uint64_t v0 = v78;
          uint64_t v11 = v78[26];
          uint64_t v61 = v78[22];
          sub_1000B8890();
          sub_100042EDC(v61, &qword_10015F800);
          swift_release_n();
          swift_release_n();
          swift_release_n();
          swift_task_dealloc();
          uint64_t v12 = sub_10011C61C(v11, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          uint64_t v6 = 1;
          unint64_t v9 = (unint64_t)v68;
          int64_t v15 = v69;
          if (v68) {
            goto LABEL_5;
          }
LABEL_6:
          int64_t v19 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_133;
          }
          unint64_t v20 = (1 << *((unsigned char *)v0 + 264)) + 63;
          uint64_t v12 = v0[17];
          if (v19 >= (uint64_t)(v20 >> 6))
          {
LABEL_128:
            swift_release();
            sub_10011E050();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            sub_10000EF7C();
            sub_10011D614();
            __asm { BRAA            X1, X16 }
          }
          uint64_t v21 = v12 + 56;
          unint64_t v22 = *(void *)(v12 + 56 + 8 * v19);
          ++v15;
          if (!v22)
          {
            int64_t v23 = v20 >> 6;
            int64_t v15 = v19 + 1;
            if (v19 + 1 >= v23) {
              goto LABEL_128;
            }
            unint64_t v22 = *(void *)(v21 + 8 * v15);
            if (!v22)
            {
              int64_t v15 = v19 + 2;
              if (v19 + 2 >= v23) {
                goto LABEL_128;
              }
              unint64_t v22 = *(void *)(v21 + 8 * v15);
              if (!v22)
              {
                int64_t v24 = v19 + 3;
                if (v24 >= v23) {
                  goto LABEL_128;
                }
                unint64_t v22 = *(void *)(v21 + 8 * v24);
                if (!v22)
                {
                  while (1)
                  {
                    int64_t v15 = v24 + 1;
                    if (__OFADD__(v24, 1)) {
                      goto LABEL_134;
                    }
                    if (v15 >= v23) {
                      goto LABEL_128;
                    }
                    unint64_t v22 = *(void *)(v21 + 8 * v15);
                    ++v24;
                    if (v22) {
                      goto LABEL_19;
                    }
                  }
                }
                int64_t v15 = v24;
              }
            }
          }
LABEL_19:
          uint64_t v17 = (void *)((v22 - 1) & v22);
          uint64_t v18 = __clz(__rbit64(v22)) + (v15 << 6);
          goto LABEL_20;
        }
LABEL_119:
        sub_1000B8890();
        uint64_t v0 = v78;
      }
    }
    else
    {
      swift_retain();
    }
LABEL_107:
    uint64_t v1 = v77 + 1;
    sub_100042EDC(v0[22], &qword_10015F800);
    uint64_t v26 = v71;
    uint64_t v28 = v72;
    uint64_t v12 = v76;
    if (v77 + 1 == v70)
    {
      swift_release_n();
      swift_release();
      swift_release();
LABEL_123:
      uint64_t v62 = v0[29];
      uint64_t v63 = v0[18];
      swift_release();
      swift_release();
      swift_task_dealloc();
      v0[32] = sub_10000853C((void *)(v63 + v62), *(void *)(v63 + v62 + 24));
      sub_10011D614();
      return _swift_task_switch(v12, v13, v14);
    }
  }
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_10010A5D8()
{
  sub_1000086E0();
  sub_100086B44(*(void *)(v0 + 208));
  sub_10000F0B4();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10010A644()
{
  uint64_t v6 = sub_10011C61C(v3[26], (void (*)(void))type metadata accessor for ModelCatalogAsset);
  int64_t v10 = v3[30];
  unint64_t v9 = v3[31];
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  uint64_t v12 = (v9 - 1) & v9;
  uint64_t v13 = v11 | (v10 << 6);
  uint64_t v6 = v3[17];
LABEL_17:
  unint64_t v62 = v12;
  int64_t v63 = v10;
  v3[30] = v10;
  v3[31] = v12;
  uint64_t v20 = sub_10011D5C4(v6, v13);
  sub_10011C5C8(v20, v1);
  sub_10000E54C(v1, v2);
  uint64_t v22 = *v0;
  uint64_t v21 = (uint64_t *)v0[1];
  uint64_t v23 = v0[2];
  uint64_t v24 = swift_task_alloc();
  sub_10011E3C8(v24);
  if (!v25) {
    goto LABEL_124;
  }
  uint64_t v26 = v3[21];
  uint64_t v68 = v3[22];
  type metadata accessor for UUID();
  sub_100057B10();
  uint64_t v67 = *(int *)(v26 + 48);
  uint64_t v69 = v21[2];
  sub_10011E424();
  swift_retain_n();
  swift_retain_n();
  sub_10011DDA4();
  while (v5 != v69)
  {
    uint64_t v27 = sub_10011D3A4();
    v28(v27);
    uint64_t v29 = sub_10011D584();
    ((void (*)(uint64_t))v0)(v29);
    uint64_t v30 = sub_10011E014();
    ((void (*)(uint64_t))v0)(v30);
    *(void *)(v68 + v67) = v21;
    uint64_t v71 = v5;
    if (*(void *)(*(uint64_t *)((char *)v21 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_assets)
                   + 16))
    {
      sub_10011E370();
      uint64_t v31 = (uint64_t *)*v0;
      uint64_t v32 = v0[1];
      swift_retain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_10011E350();
      if (v32)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = v31;
        uint64_t v0 = v4 + 5;
        do
        {
          uint64_t v23 = *v0;
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v0 += 2;
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
      }
      sub_10011E31C();
      if (v5)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = (uint64_t *)(v22 + 64);
        do
        {
          sub_10011E29C();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          if (v23)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          Hasher._combine(_:)(v32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v21 += 5;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
      }
      uint64_t v33 = sub_10011DA2C();
      sub_1001141CC(&qword_10015B7E8, (void (*)(uint64_t))&type metadata accessor for AssetCost);
      sub_10011E2FC();
      sub_10011E268();
      Hasher._combine(_:)(*(unsigned char *)(v23 + *((int *)v0 + 9)));
      sub_10011E248();
      Hasher._finalize()();
      sub_10011D4F0();
      if (v34)
      {
        while (1)
        {
          uint64_t v35 = sub_10011E214();
          sub_10011C5C8(v35, (uint64_t)v31);
          BOOL v36 = *v31 == *v0 && v31[1] == v0[1];
          if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_101;
          }
          sub_10011D72C();
          if (!v36) {
            goto LABEL_101;
          }
          if (v31) {
            BOOL v37 = v33 == (void)v4;
          }
          else {
            BOOL v37 = 1;
          }
          if (!v37)
          {
            BOOL v42 = *(void *)(v33 + 32) == v4[4] && *(void *)(v33 + 40) == v4[5];
            if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_101;
            }
            if (v31 != (uint64_t *)1)
            {
              BOOL v43 = *(void *)(v33 + 48) == v4[6] && *(void *)(v33 + 56) == v4[7];
              if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_101;
              }
              if (v31 != (uint64_t *)2)
              {
                uint64_t v3 = v4 + 9;
                uint64_t v0 = (uint64_t *)(v33 + 72);
                uint64_t v33 = 2;
                while ((unint64_t)v31 > 2)
                {
                  BOOL v44 = *(v0 - 1) == v4[8] && *v0 == *v3;
                  if (!v44 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_101;
                  }
                  sub_10011E158();
                  if (v36) {
                    goto LABEL_45;
                  }
                }
                __break(1u);
LABEL_124:
                swift_retain();
                swift_retain();
                goto LABEL_120;
              }
            }
          }
LABEL_45:
          sub_10011D918();
          if (v36) {
            break;
          }
LABEL_101:
          uint64_t v3 = v72;
          sub_10011C61C(v72[25], (void (*)(void))type metadata accessor for ModelCatalogAsset);
          sub_10011D630();
          if ((v51 & 1) == 0) {
            goto LABEL_104;
          }
        }
        if (v21) {
          BOOL v40 = v38 == v39;
        }
        else {
          BOOL v40 = 1;
        }
        if (!v40)
        {
          uint64_t v45 = v39 + 64;
          uint64_t v46 = v38 + 64;
          do
          {
            sub_10011D6F4();
            BOOL v49 = v36 && v47 == v48;
            if (!v49 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_101;
            }
            if (v31)
            {
              if (!v4) {
                goto LABEL_101;
              }
              if (v33 == v23 && v31 == v4)
              {
                if (v3 != v0) {
                  goto LABEL_101;
                }
                goto LABEL_99;
              }
              if ((sub_10011DFF0() & 1) == 0) {
                goto LABEL_101;
              }
            }
            else if (v4)
            {
              goto LABEL_101;
            }
            if ((v3 ^ v0)) {
              goto LABEL_101;
            }
LABEL_99:
            v46 += 40;
            v45 += 40;
            uint64_t v21 = (uint64_t *)((char *)v21 - 1);
          }
          while (v21);
        }
        if ((sub_10011DC88() & 1) == 0) {
          goto LABEL_101;
        }
        sub_10011D6A8();
        if (!v36) {
          goto LABEL_101;
        }
        sub_10011D9B4();
        if (!v36) {
          goto LABEL_101;
        }
        sub_10011D998();
        if (!v36) {
          goto LABEL_101;
        }
        sub_10011C61C(v41, (void (*)(void))type metadata accessor for ModelCatalogAsset);
        sub_100043D2C();
        sub_10011E0D4();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_100116B0C();
        unint64_t v1 = v52;
        swift_bridgeObjectRetain();
        sub_100116B0C();
        uint64_t v5 = v53;
        swift_bridgeObjectRelease();
        sub_100116744(v5);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v1 >> 62)
        {
          sub_10011D4D0();
          uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v54 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        uint64_t v22 = v70;
        if (v54)
        {
          uint64_t v4 = 0;
          while (1)
          {
            if ((v1 & 0xC000000000000001) != 0) {
              uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              uint64_t v6 = swift_retain();
            }
            uint64_t v0 = (uint64_t *)((char *)v4 + 1);
            if (__OFADD__(v4, 1)) {
              goto LABEL_129;
            }
            char v55 = *((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v6);
            swift_release();
            if (v55) {
              break;
            }
            uint64_t v4 = (uint64_t *)((char *)v4 + 1);
            if (v0 == (uint64_t *)v54) {
              goto LABEL_116;
            }
          }
          uint64_t v3 = v72;
          uint64_t v2 = v72[26];
          uint64_t v4 = (uint64_t *)v72[22];
          sub_1000B8890();
          sub_100042EDC((uint64_t)v4, &qword_10015F800);
          swift_release_n();
          swift_release_n();
          swift_release_n();
          swift_task_dealloc();
          uint64_t v6 = sub_10011C61C(v2, (void (*)(void))type metadata accessor for ModelCatalogAsset);
          unint64_t v9 = v62;
          int64_t v10 = v63;
          if (v62) {
            goto LABEL_2;
          }
LABEL_3:
          int64_t v14 = v10 + 1;
          if (__OFADD__(v10, 1)) {
            goto LABEL_130;
          }
          unint64_t v15 = (1 << *((unsigned char *)v3 + 264)) + 63;
          uint64_t v6 = v3[17];
          if (v14 >= (uint64_t)(v15 >> 6))
          {
LABEL_125:
            swift_release();
            sub_10011E050();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            sub_10000EF7C();
            sub_10011D614();
            __asm { BRAA            X1, X16 }
          }
          uint64_t v16 = v6 + 56;
          unint64_t v17 = *(void *)(v6 + 56 + 8 * v14);
          ++v10;
          if (!v17)
          {
            int64_t v18 = v15 >> 6;
            int64_t v10 = v14 + 1;
            if (v14 + 1 >= v18) {
              goto LABEL_125;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v10);
            if (!v17)
            {
              int64_t v10 = v14 + 2;
              if (v14 + 2 >= v18) {
                goto LABEL_125;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v10);
              if (!v17)
              {
                int64_t v19 = v14 + 3;
                if (v19 >= v18) {
                  goto LABEL_125;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v19);
                if (!v17)
                {
                  while (1)
                  {
                    int64_t v10 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      goto LABEL_131;
                    }
                    if (v10 >= v18) {
                      goto LABEL_125;
                    }
                    unint64_t v17 = *(void *)(v16 + 8 * v10);
                    ++v19;
                    if (v17) {
                      goto LABEL_16;
                    }
                  }
                }
                int64_t v10 = v19;
              }
            }
          }
LABEL_16:
          uint64_t v12 = (v17 - 1) & v17;
          uint64_t v13 = __clz(__rbit64(v17)) + (v10 << 6);
          goto LABEL_17;
        }
LABEL_116:
        sub_1000B8890();
        uint64_t v3 = v72;
      }
    }
    else
    {
      swift_retain();
    }
LABEL_104:
    uint64_t v5 = v71 + 1;
    sub_100042EDC(v3[22], &qword_10015F800);
    uint64_t v21 = v65;
    uint64_t v23 = v66;
    uint64_t v6 = v70;
    if (v71 + 1 == v64)
    {
      swift_release_n();
      swift_release();
      swift_release();
LABEL_120:
      uint64_t v56 = v3[29];
      uint64_t v57 = v3[18];
      swift_release();
      swift_release();
      swift_task_dealloc();
      v3[32] = sub_10000853C((void *)(v57 + v56), *(void *)(v57 + v56 + 24));
      sub_10011D614();
      return _swift_task_switch(v6, v7, v8);
    }
  }
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10010AED8()
{
  sub_1000086E0();
  v1[8] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015F7F8);
  sub_10002FDD0(v2);
  v1[9] = sub_1000436D8();
  v1[10] = swift_task_alloc();
  uint64_t v3 = sub_100003A70(&qword_10015F800);
  v1[11] = v3;
  sub_10002FDD0(v3);
  v1[12] = sub_1000436D8();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v4, v5, v6);
}

#error "10010B0A8: call analysis failed (funcsize=226)"

uint64_t sub_10010B33C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10000F0B4();
  return _swift_task_switch(v3, v4, v5);
}

#error "10010B548: call analysis failed (funcsize=198)"

uint64_t sub_10010B760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[13] = v14;
  v9[14] = v8;
  v9[11] = a7;
  v9[12] = a8;
  v9[9] = a5;
  v9[10] = a6;
  v9[7] = a3;
  v9[8] = a4;
  v9[5] = a1;
  void v9[6] = a2;
  sub_10002FB10();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10010B79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  uint64_t v13 = v12[7];
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    unint64_t v15 = (uint64_t *)(v13 + 32);
    swift_retain_n();
    sub_1000B7908();
    sub_10002FC78();
    swift_bridgeObjectRetain();
    swift_retain();
    while (1)
    {
      uint64_t v16 = *v15;
      v12[15] = *v15;
      swift_retain();
      sub_10001A674();
      if (v17)
      {
        int64_t v18 = (unsigned __int8 *)(v16
                                + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState);
        sub_100043D2C();
        if (*v18 <= 2u) {
          break;
        }
      }
      swift_release();
      ++v15;
      if (!--v14)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_8;
      }
    }
    uint64_t v28 = v12[12];
    sub_100043604();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
    if (v28)
    {
      uint64_t v29 = (void (*)(uint64_t))v12[12];
      swift_retain();
      v29(v16);
      uint64_t v30 = sub_1000B9488();
      sub_1000CF308(v30);
    }
    v12[16] = sub_10000A0F8(v12[14], v12[8], v12[10], v12[11]);
    uint64_t v31 = (void *)swift_task_alloc();
    v12[17] = v31;
    sub_100003A70(&qword_10015B468);
    sub_1000B76F8();
    *uint64_t v31 = v32;
    v31[1] = sub_10010BA44;
    sub_1000307C8();
    return Task.value.getter(v33, v34, v35, v36, v37);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    sub_10011DB90();
    sub_1000307C8();
    return v21(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
  }
}

uint64_t sub_10010BA44()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10010BB3C()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10011E084();
  return v1(v0);
}

uint64_t sub_10010BB9C()
{
  sub_1000086E0();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10011DB90();
  return v1(v0);
}

uint64_t sub_10010BC00()
{
  sub_1000086E0();
  v1[17] = v2;
  v1[18] = v0;
  v1[15] = v3;
  v1[16] = v4;
  uint64_t v5 = type metadata accessor for RequestPriority();
  v1[19] = v5;
  sub_10002FA4C(v5);
  v1[20] = v6;
  v1[21] = sub_1000436D8();
  v1[22] = swift_task_alloc();
  uint64_t v7 = sub_100003A70(&qword_10015B408);
  v1[23] = v7;
  sub_10002FA4C(v7);
  v1[24] = v8;
  v1[25] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10010BCD0()
{
  sub_10000F01C();
  uint64_t v1 = *(void *)(v0[15] + 16);
  v0[26] = v1;
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[27] = sub_100003B18(v2, (uint64_t)qword_10015F3E8);
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (sub_1000579B0(v4))
  {
    uint64_t v5 = (_WORD *)sub_10005A928();
    sub_1000B91A0(v5);
    sub_10006A194((void *)&_mh_execute_header, v6, v7, "Entering enqueueRequestAndWait");
    sub_10000ED7C();
  }
  uint64_t v8 = v0[18];

  uint64_t v9 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  v0[28] = OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingForegroundGroups;
  uint64_t v10 = (void *)(v8 + v9);
  sub_100057ECC();
  sub_100043D2C();
  v0[29] = *v10;
  uint64_t v11 = v10[1];
  v0[30] = v11;
  uint64_t v12 = v10[2];
  v0[31] = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[32] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10010BE70;
  uint64_t v14 = sub_1000447E8();
  return sub_10010B760(v14, v11, v12, v15, v1, v16, v17, 0);
}

uint64_t sub_10010BE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  char v13 = v12;
  sub_100008660();
  uint64_t v15 = v14;
  sub_10000ED94();
  *uint64_t v16 = v15;
  uint64_t v17 = *v11;
  sub_1000086D0();
  *int64_t v18 = v17;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  if (v10)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100030808();
    sub_10002FEAC();
    return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
  }
  else
  {
    *(unsigned char *)(v15 + 344) = v13 & 1;
    sub_10002FEAC();
    return _swift_task_switch(v28, v29, v30);
  }
}

uint64_t sub_10010BFF4()
{
  sub_100043E90();
  if (*(unsigned char *)(v0 + 344) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 216);
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (sub_100057CB0(v3))
    {
      os_log_type_t v4 = (_DWORD *)sub_100030314();
      uint64_t v23 = sub_10002FF90();
      _DWORD *v4 = 136315138;
      uint64_t v25 = v23;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      dispatch thunk of CustomStringConvertible.description.getter();
      sub_100043F00();
      uint64_t v6 = v5();
      *(void *)(v0 + 112) = sub_100044698(v6, v7, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_1000B969C((void *)&_mh_execute_header, v2, (os_log_type_t)v1, "Added request %s to existing pending foreground group ");
      sub_100057E00();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100043604();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10011DB74();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
  sub_100043D2C();
  uint64_t v11 = *v10;
  *(void *)(v0 + 264) = *v10;
  uint64_t v12 = v10[1];
  *(void *)(v0 + 272) = v12;
  uint64_t v13 = v10[2];
  *(void *)(v0 + 280) = v13;
  uint64_t v14 = sub_10004412C();
  *(void *)(v0 + 288) = v14;
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10010C304;
  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v17 = *(void *)(v0 + 136);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 128);
  return sub_10010B760(v11, v12, v13, v18, v16, v19, v17, (uint64_t)sub_10011B4A4);
}

uint64_t sub_10010C304()
{
  sub_10002FC60();
  char v3 = v2;
  sub_100008660();
  uint64_t v5 = v4;
  sub_10000ED94();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1000086D0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100030808();
    sub_10002FE94();
    __asm { BRAA            X1, X16 }
  }
  *(unsigned char *)(v5 + 345) = v3 & 1;
  sub_10002FE94();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10010C4AC()
{
  sub_100043E90();
  if (*(unsigned char *)(v1 + 345) == 1)
  {
    sub_10011DE7C();
    char v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (sub_100057B8C(v3))
    {
      sub_100030314();
      uint64_t v35 = sub_10002FF90();
      sub_10011DE64(v35, 4.8149e-34);
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      sub_10011DED8();
      sub_100043DF8();
      uint64_t v5 = v4();
      *(void *)(v1 + 104) = sub_100044698(v5, v6, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10011E140();
      swift_bridgeObjectRelease();
      sub_1000B969C((void *)&_mh_execute_header, v2, v0, "Added request %s to existing pending background group");
      sub_100057E00();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100043604();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_10011DB74();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v7 = *(void *)(v1 + 168);
  uint64_t v8 = *(void *)(v1 + 160);
  sub_10011EF24();
  sub_100043E68();
  v9();
  uint64_t v10 = sub_100044468();
  char v13 = sub_100101CD0(v10, v11, v12);
  uint64_t v14 = *(void (**)(void))(v8 + 8);
  sub_100043DF8();
  v14();
  sub_100043DF8();
  v14();
  if (v13)
  {
    uint64_t v15 = *(void *)(v1 + 144);
LABEL_13:
    uint64_t v23 = (void *)(v15 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups);
    sub_100043D2C();
    *(void *)(v1 + 304) = *v23;
    *(void *)(v1 + 312) = v23[1];
    uint64_t v24 = v23[2];
    *(void *)(v1 + 320) = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v1 + 328) = v25;
    *uint64_t v25 = v1;
    v25[1] = sub_10010C9A4;
    uint64_t v26 = sub_100044468();
    return sub_10010B760(v26, v27, v24, v28, v29, v30, v31, 0);
  }
  uint64_t v15 = *(void *)(v1 + 144);
  if (!*(void *)(*(void *)(v15 + *(void *)(v1 + 224) + 16) + 16)) {
    goto LABEL_13;
  }
  sub_10011DE7C();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (sub_100057B8C(v19))
  {
    sub_100030314();
    uint64_t v36 = sub_10002FF90();
    sub_10011DE64(v36, 4.8149e-34);
    RequestMetadata.id.getter();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    sub_10011DED8();
    sub_100043DF8();
    uint64_t v21 = v20();
    *(void *)(v1 + 88) = sub_100044698(v21, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10011E140();
    swift_bridgeObjectRelease();
    sub_1000B969C((void *)&_mh_execute_header, v18, (os_log_type_t)v7, "Creating new execution group for request %s");
    sub_100057E00();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {

    sub_100043604();
  }
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v1 + 336) = v33;
  void *v33 = v1;
  v33[1] = sub_10010CEAC;
  sub_100044070(*(void *)(v1 + 120));
  sub_10011DB74();
  return sub_1001090B8();
}

uint64_t sub_10010C9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  char v13 = v12;
  sub_100008660();
  uint64_t v15 = v14;
  sub_10000ED94();
  *uint64_t v16 = v15;
  uint64_t v17 = *v11;
  sub_1000086D0();
  *uint64_t v18 = v17;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  if (v10)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100030808();
    sub_10002FEAC();
    return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
  }
  else
  {
    *(unsigned char *)(v15 + 346) = v13 & 1;
    sub_10002FEAC();
    return _swift_task_switch(v28, v29, v30);
  }
}

uint64_t sub_10010CB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  int v29 = *(unsigned __int8 *)(v26 + 346);
  sub_10011DE7C();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  if (v29 == 1)
  {
    if (v32)
    {
      a12 = *(void *)(v26 + 120);
      uint64_t v33 = (_DWORD *)sub_100030314();
      a13 = sub_10002FF90();
      a14 = v26 + 96;
      a15 = a13;
      _DWORD *v33 = 136315138;
      a11 = v33 + 1;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v34 = sub_10011DED8();
      unint64_t v36 = v35;
      sub_100043CF4();
      v37();
      *(void *)(v26 + 96) = sub_10001DF20(v34, v36, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_1000B72C4((void *)&_mh_execute_header, v30, v31, "Added request %s to existing active group");
      sub_100057E00();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100043604();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    sub_1000306EC();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  else
  {
    if (v32)
    {
      uint64_t v38 = (uint8_t *)sub_100030314();
      a15 = sub_10002FF90();
      *(_DWORD *)uint64_t v38 = 136315138;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v41 = v40;
      sub_100043CF4();
      v42();
      *(void *)(v26 + 88) = sub_10001DF20(v39, v41, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10011E140();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Creating new execution group for request %s", v38, 0xCu);
      sub_100057E00();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100043604();
    }
    unint64_t v52 = (void *)swift_task_alloc();
    *(void *)(v26 + 336) = v52;
    *unint64_t v52 = v26;
    v52[1] = sub_10010CEAC;
    sub_100044070(*(void *)(v26 + 120));
    sub_1000306EC();
    return sub_1001090B8();
  }
}

uint64_t sub_10010CEAC()
{
  sub_1000086EC();
  sub_10000EDB8();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100030C44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10010CFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RequestPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)v33 - v16;
  sub_10011EF24();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v14, enum case for RequestPriority.foreground(_:), v9);
  char v18 = sub_100101CD0((uint64_t)v17, (uint64_t)v14, (void (*)(void))&type metadata accessor for RequestPriority);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v14, v9);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v17, v9);
  if (v18)
  {
    v33[1] = a3;
    v33[2] = a1;
    uint64_t v21 = a1 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_id;
    uint64_t v22 = (uint64_t *)(a3 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_pendingBackgroundGroups);
    uint64_t v23 = swift_beginAccess();
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    __chkstk_darwin(v23, v26);
    v33[-4] = v24;
    v33[-3] = v25;
    v33[0] = v21;
    v33[-2] = v21;
    swift_retain();
    swift_retain();
    uint64_t v27 = sub_100118710((void *(*)(uint64_t *__return_ptr, unint64_t, void))sub_10011C5A8, (uint64_t)&v33[-6], v25);
    LOBYTE(v21) = v28;
    uint64_t v30 = v29;
    swift_release();
    swift_release();
    uint64_t v31 = v34;
    if ((v21 & 1) == 0)
    {
      sub_100119B00((int64_t)v27, v30, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v31);
      sub_100119CEC((unint64_t)v27);
      swift_release();
    }
    swift_endAccess();
    (*(void (**)(char *, void, uint64_t))(v5 + 16))(v8, v33[0], v31);
    swift_beginAccess();
    uint64_t v32 = swift_retain();
    sub_100103EB0(v32, (uint64_t)v8);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10010D33C()
{
  uint64_t v3 = sub_10011E50C();
  uint64_t v4 = (uint8_t *)type metadata accessor for RequestManagerPolicy(v3);
  sub_10002FC6C();
  __chkstk_darwin(v5, v6);
  sub_10011DAF0(v7, v69);
  uint64_t v8 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  unint64_t v10 = v9;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100003A70(&qword_10015C008);
  uint64_t v16 = sub_10002FDD0(v15);
  __chkstk_darwin(v16, v17);
  sub_100030934();
  type metadata accessor for ModelManagerError();
  sub_10000ED60();
  uint64_t v78 = v19;
  uint64_t v79 = v18;
  __chkstk_darwin(v18, v20);
  sub_100030144();
  uint64_t v77 = v21;
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v75 = v23;
  uint64_t v76 = v22;
  __chkstk_darwin(v22, v24);
  sub_100030964();
  if (*((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v0) == 1)
  {
    if (qword_10015B1F0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003B18(v25, (uint64_t)qword_10015F3E8);
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      char v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v74 = (uint64_t *)v29;
      uint64_t v73 = v28;
      *(_DWORD *)char v28 = 136315138;
      v82[0] = v29;
      uint64_t v72 = (uint64_t)(v28 + 4);
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      dispatch thunk of CustomStringConvertible.description.getter();
      sub_10011DF80();
      sub_10000EFBC();
      v30();
      uint64_t v31 = sub_10001DF20(v1, v10, v82);
      sub_10011D7CC(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100044204();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Request %s cancelled before executing", v73, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_100044204();
    }
    uint64_t v62 = v77;
    uint64_t v63 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
    swift_beginAccess();
    sub_100043174(v63, v2, &qword_10015C008);
    if (sub_100006AE8(v2, 1, v79) == 1)
    {
      sub_100043E68();
      v64();
      sub_100042EDC(v2, &qword_10015C008);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v62, v2, v79);
    }
    sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
    sub_10011DF10();
    sub_100069DF4();
    v65();
    swift_willThrow();
    sub_10011E4EC();
    sub_1000303D4();
    return v66();
  }
  else
  {
    uint64_t v77 = v0;
    uint64_t v32 = (void *)(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
    sub_10011D8C0();
    uint64_t v73 = v4;
    sub_100069DF4();
    v33();
    sub_100121600();
    char v35 = v34;
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    unint64_t v36 = v10 + 8;
    uint64_t result = v37(v14, v8);
    if (v35)
    {
      if (qword_10015B1F0 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100003B18(v39, (uint64_t)qword_10015F3E8);
      swift_retain_n();
      swift_retain_n();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      int v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        uint64_t v83 = v72;
        *(_DWORD *)uint64_t v43 = 136315394;
        os_log_t v71 = v40;
        int v70 = v42;
        RequestMetadata.id.getter();
        sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
        dispatch thunk of CustomStringConvertible.description.getter();
        sub_10011DF80();
        sub_10000EFBC();
        v44();
        uint64_t v45 = sub_10001DF20(v1, v36, &v83);
        sub_10011D7CC(v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v76 = v43 + 14;
        uint64_t v46 = v74;
        sub_10011C5C8((uint64_t)v32, (uint64_t)v74);
        uint64_t v80 = *v46;
        swift_bridgeObjectRetain();
        sub_100003A70(&qword_10015CA38);
        sub_10000841C(&qword_10015F7C8, &qword_10015CA38);
        sub_1000D8E54();
        uint64_t v47 = Sequence<>.joined(separator:)();
        uint64_t v49 = v48;
        swift_bridgeObjectRelease();
        uint64_t v80 = v47;
        uint64_t v81 = v49;
        swift_bridgeObjectRetain();
        v50._countAndFlagsBits = 10272;
        v50._object = (void *)0xE200000000000000;
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        uint64_t v52 = v80;
        uint64_t v51 = v81;
        uint64_t v53 = RequestPriority.rawValue.getter();
        char v55 = v54;
        uint64_t v80 = v52;
        uint64_t v81 = v51;
        swift_bridgeObjectRetain();
        v56._countAndFlagsBits = v53;
        v56._object = v55;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v57._countAndFlagsBits = 41;
        v57._object = (void *)0xE100000000000000;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        sub_10011C61C((uint64_t)v46, (void (*)(void))type metadata accessor for RequestManagerPolicy);
        uint64_t v58 = sub_100044474();
        uint64_t v80 = sub_10001DF20(v58, v59, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100044204();
        swift_bridgeObjectRelease();
        os_log_t v61 = v71;
        _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v70, "Request %s denied due to policy %s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {

        sub_100044204();
        swift_release_n();
      }
      sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      sub_10011DF10();
      *uint64_t v67 = *v32;
      sub_100043E9C();
      v68();
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10010DBE8()
{
  sub_1000086E0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for RequestPriority();
  v1[4] = v3;
  sub_10002FA4C(v3);
  v1[5] = v4;
  v1[6] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v1[7] = v5;
  sub_10002FA4C(v5);
  v1[8] = v6;
  v1[9] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10010DCA8()
{
  sub_100030AFC();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003B18(v1, (uint64_t)qword_10015F3E8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_1000B6DF8((void *)&_mh_execute_header, v2, v5, "RequestManager holdAssets called");
    sub_10000ED7C();
  }
  uint64_t v6 = (void *)v0[2];

  uint64_t v7 = v6[7];
  sub_10000853C(v6 + 3, v6[6]);
  RequestMetadata.id.getter();
  sub_10011EF24();
  uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(v7 + 40) + **(int **)(v7 + 40));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10010DE84;
  uint64_t v9 = sub_100044070(v0[9]);
  return v11(v9);
}

uint64_t sub_10010DE84()
{
  sub_1000086EC();
  sub_100008660();
  os_log_type_t v3 = v2;
  sub_10000ED94();
  _WORD *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  v3[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10004381C();
    v7();
    sub_100043924();
    v8();
    sub_10000F0B4();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    sub_10004381C();
    v12();
    sub_100043924();
    v13();
    uint64_t v14 = (void *)swift_task_alloc();
    v3[12] = (uint64_t)v14;
    *uint64_t v14 = v5;
    v14[1] = sub_10010E038;
    sub_100044070(v3[2]);
    return sub_10010BC00();
  }
}

uint64_t sub_10010E038()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *os_log_type_t v3 = v2;
  *os_log_type_t v3 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10010E130()
{
  sub_1000086E0();
  sub_1001113F4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v0();
}

uint64_t sub_10010E1D8()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10010E240()
{
  sub_1000086E0();
  sub_1001113F4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10010E2E8()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  v0[7] = v1;
  v0[8] = *(void *)(v1 - 8);
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ContinuousClock();
  v0[11] = v2;
  v0[12] = *(void *)(v2 - 8);
  v0[13] = swift_task_alloc();
  return _swift_task_switch(sub_10010E410, 0, 0);
}

uint64_t sub_10010E410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_10011DDBC();
  sub_10011D8F8((__n128)xmmword_100129950);
  sub_1001141CC(&qword_10015DAF0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_10011E3F0();
  sub_1001141CC(&qword_10015F8A0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  sub_10011DCC8();
  v12[14] = *(void *)(v13 + 8);
  v12[15] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043AE0();
  v14();
  uint64_t v15 = (void *)swift_task_alloc();
  v12[16] = v15;
  *uint64_t v15 = v12;
  v15[1] = sub_10010E544;
  sub_10011DA7C();
  sub_1000307C8();
  return dispatch thunk of Clock.sleep(until:tolerance:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

uint64_t sub_10010E544()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3 + 112))(*(void *)(v3 + 80), *(void *)(v3 + 56));
  if (!v0)
  {
    sub_100043924();
    v7();
  }
  sub_1000579A4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10010E660()
{
  sub_1000086EC();
  sub_10004381C();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10010E6F0()
{
  sub_1000086E0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  sub_10002FDD0(v5);
  v1[7] = sub_10002FE18();
  uint64_t v6 = type metadata accessor for TaskPriority();
  v1[8] = v6;
  sub_10002FA4C(v6);
  v1[9] = v7;
  v1[10] = sub_10002FE18();
  sub_10002FB10();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10010E7A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, long long a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1000B81CC();
  a27 = v29;
  a28 = v30;
  sub_1000B9660();
  a26 = v28;
  sub_10010D33C();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100003B18(v31, (uint64_t)qword_10015F3E8);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    char v34 = (uint8_t *)sub_100030314();
    a16 = sub_10002FF90();
    *(_DWORD *)char v34 = 136315138;
    static Task<>.currentPriority.getter();
    sub_1001141CC(&qword_10015F858, (void (*)(uint64_t))&type metadata accessor for TaskPriority);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v36;
    sub_100043F00();
    v38();
    *(void *)(v28 + 16) = sub_10001DF20(v35, v37, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "executeRequest executing (Priority: %s)", v34, 0xCu);
    sub_100057E00();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  uint64_t v39 = *(void *)(v28 + 56);
  uint64_t v41 = *(void *)(v28 + 40);
  uint64_t v40 = *(void *)(v28 + 48);
  long long v54 = *(_OWORD *)(v28 + 24);
  sub_100006960(v39, 1, 1, *(void *)(v28 + 64));
  uint64_t v42 = sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v40;
  *(void *)(v43 + 24) = v42;
  *(void *)(v43 + 32) = v40;
  *(_OWORD *)(v43 + 40) = v54;
  *(void *)(v43 + 56) = v41;
  sub_1000B7908();
  swift_retain();
  swift_retain();
  uint64_t v44 = sub_10000F8FC(v39, (uint64_t)&unk_10015F850, v43);
  uint64_t v45 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask;
  *(void *)(v28 + 88) = v44;
  *(void *)(v28 + 96) = v45;
  *(void *)(v54 + v45) = v44;
  swift_retain();
  swift_release();
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v28 + 104) = v46;
  sub_100003A70(&qword_10015B468);
  sub_1000B76F8();
  *uint64_t v46 = v47;
  v46[1] = sub_10010EB28;
  sub_100044308();
  return Task.value.getter(v48, v49, v50, v51, v52);
}

uint64_t sub_10010EB28()
{
  sub_1000086EC();
  sub_10000EDB8();
  sub_10000ED94();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  sub_100030C44();
  sub_100030C68();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10010EC20()
{
  sub_1000086EC();
  *(void *)(*(void *)(v0 + 24) + *(void *)(v0 + 96)) = 0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  return v1();
}

uint64_t sub_10010ECAC()
{
  sub_1000086E0();
  *(void *)(*(void *)(v0 + 24) + *(void *)(v0 + 96)) = 0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v1();
}

uint64_t sub_10010ED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  void v7[2] = a1;
  return _swift_task_switch(sub_10010ED58, a4, 0);
}

uint64_t sub_10010ED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_10000F01C();
  uint64_t v17 = *(void *)(v16 + 48);
  uint64_t v18 = *(void *)(v16 + 24);
  uint64_t v19 = swift_task_alloc();
  *(void *)(v16 + 56) = v19;
  long long v25 = *(_OWORD *)(v16 + 32);
  *(void *)(v19 + 16) = v18;
  *(_OWORD *)(v19 + 24) = v25;
  *(void *)(v19 + 40) = v17;
  uint64_t v20 = swift_task_alloc();
  *(void *)(v16 + 64) = v20;
  *(void *)(v20 + 16) = v25;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v16 + 72) = v22;
  *uint64_t v22 = v16;
  v22[1] = sub_10010EEC0;
  uint64_t v23 = *(void *)(v16 + 16);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v23, &unk_10015F868, v19, sub_10011B2C0, v20, v18, v21, (char *)&type metadata for () + 8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10010EEC0()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    return _swift_task_switch(sub_10010EFCC, v7, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000304E0();
    return v8();
  }
}

uint64_t sub_10010EFCC()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_10010F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  sub_100003A70(&qword_10015C008);
  v5[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ModelManagerError();
  v5[22] = v7;
  v5[23] = *(void *)(v7 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015B408);
  v5[25] = v8;
  v5[26] = *(void *)(v8 - 8);
  v5[27] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for InferenceProviderRequestConfiguration();
  v5[28] = v9;
  v5[29] = *(void *)(v9 - 8);
  v5[30] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ClientData();
  v5[31] = v10;
  v5[32] = *(void *)(v10 - 8);
  v5[33] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for InferenceProviderRequestResult();
  v5[34] = v11;
  v5[35] = *(void *)(v11 - 8);
  v5[36] = swift_task_alloc();
  return _swift_task_switch(sub_10010F29C, a2, 0);
}

uint64_t sub_10010F29C()
{
  uint64_t v14 = v0;
  sub_10010D33C();
  sub_100043D2C();
  uint64_t v1 = swift_bridgeObjectRetain();
  BOOL v2 = sub_100102328(v1);
  swift_bridgeObjectRelease();
  if (v2) {
    sub_1001136C0();
  }
  uint64_t v3 = (void *)v0[18];
  sub_100044468();
  sub_100043F38();
  swift_retain();
  sub_100020418(&v13, v3);
  swift_endAccess();
  swift_release();
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  sub_10000853C(v3 + 3, v4);
  v0[37] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  char v6 = RequestMetadata.isStream.getter();
  RequestMetadata.clientData.getter();
  sub_10011EE4C();
  uint64_t v12 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 32)
                                                                                    + **(int **)(v5 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[38] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10010F510;
  uint64_t v8 = v0[36];
  uint64_t v9 = v0[33];
  uint64_t v10 = v0[30];
  return v12(v8, v6 & 1, v9, v10, v4, v5);
}

uint64_t sub_10010F510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v12 = (void *)*v11;
  sub_1000086D0();
  *uint64_t v13 = v12;
  uint64_t v14 = (void *)*v11;
  *uint64_t v13 = *v11;
  v12[39] = v10;
  swift_task_dealloc();
  if (v10)
  {
    sub_10004381C();
    v15();
    sub_100057FE4();
    v16();
    sub_10002FB10();
    sub_10002FEAC();
    return _swift_task_switch(v17, v18, v19);
  }
  else
  {
    uint64_t v21 = (int *)v12[19];
    sub_10004381C();
    v22();
    sub_100057FE4();
    v23();
    char v34 = (char *)v21 + *v21;
    uint64_t v24 = (void *)swift_task_alloc();
    v12[40] = v24;
    *uint64_t v24 = v14;
    v24[1] = sub_10010F778;
    sub_100044070(v12[36]);
    sub_10002FEAC();
    return v26(v25, v26, v27, v28, v29, v30, v31, v32, v34, a10);
  }
}

uint64_t sub_10010F778()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_10010F854()
{
  sub_100030AFC();
  if (RequestMetadata.isStream.getter())
  {
    sub_10000853C((void *)(v0[18] + 24), *(void *)(v0[18] + 48));
    RequestMetadata.id.getter();
    uint64_t v1 = (void *)swift_task_alloc();
    v0[41] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10010FA28;
    sub_100044070(v0[27]);
    sub_10005791C();
    __asm { BRAA            X4, X16 }
  }
  uint64_t v5 = v0[17];
  uint64_t v4 = v0[18];
  sub_10004381C();
  v6();
  sub_10010FEF0(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10005791C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10010FA28()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100043924();
  v3();
  sub_100044150();
  return _swift_task_switch(v4, v5, v6);
}

void sub_10010FB5C()
{
  sub_10002FC60();
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  sub_10004381C();
  v3();
  sub_10010FEF0(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_10002FE94();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10010FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  sub_100043D2C();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100043EDC();
  char v15 = sub_100045190(v13, v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if (*((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v12[18]) == 1)
    {
      uint64_t v24 = v12[21];
      sub_100043D2C();
      uint64_t v25 = sub_100057ECC();
      sub_100043174(v25, v26, v27);
      sub_10011D868(v24);
      if (!v28)
      {
        uint64_t v31 = v12[17];
        uint64_t v18 = v12[18];
        (*(void (**)(void, void, void))(v12[23] + 32))(v12[24], v12[21], v12[22]);
        sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
        sub_10011E480();
        sub_100069DF4();
        v32();
        swift_willThrow();
        swift_errorRelease();
        sub_100043F00();
        v33();
        uint64_t v23 = v31;
        goto LABEL_8;
      }
      sub_100042EDC(v12[21], &qword_10015C008);
    }
    swift_willThrow();
    uint64_t v29 = sub_100044474();
    sub_10010FEF0(v29, v30);
    goto LABEL_9;
  }
  uint64_t v16 = v12[22];
  uint64_t v17 = v12[23];
  uint64_t v19 = v12[17];
  uint64_t v18 = v12[18];
  sub_1001141CC((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
  sub_10011E480();
  uint64_t v21 = v20;
  uint64_t v22 = (void *)(v19 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy);
  sub_100043D2C();
  *uint64_t v21 = *v22;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v21, enum case for ModelManagerError.deniedDueToSpecifiedSystemState(_:), v16);
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v23 = v19;
LABEL_8:
  sub_10010FEF0(v23, v18);
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000307C8();
  return v35(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12);
}

uint64_t sub_10010FEF0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  sub_1001174E8(a2);
  swift_endAccess();
  swift_release();
  uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_cancelledForPolicyExtantRequests);
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  char v6 = sub_100045190(a2, v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_beginAccess();
    sub_1001174E8(a2);
    swift_endAccess();
    swift_release();
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  BOOL v8 = sub_100102328(v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8) {
    return sub_1001136C0();
  }
  return result;
}

uint64_t sub_10011000C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _OSActivity();
  _OSActivity.__allocating_init(_:)();
  uint64_t v8 = type metadata accessor for TaskPriority();
  sub_100006960((uint64_t)v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  swift_retain();
  swift_retain();
  sub_100003730((uint64_t)v7, (uint64_t)&unk_10015F878, (uint64_t)v9);
  swift_release();
  _OSActivity.close()();
  return swift_release();
}

uint64_t sub_10011012C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = sub_100003A70(&qword_10015B408);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001101F0, 0, 0);
}

uint64_t sub_1001101F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100057CCC();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  os_log_type_t v30 = sub_100003B18(v29, (uint64_t)qword_10015F3E8);
  sub_10002FC78();
  os_log_type_t v31 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (sub_100057CB0(v33))
  {
    uint64_t v34 = (_DWORD *)sub_100030314();
    a15 = sub_10002FF90();
    _DWORD *v34 = 136315138;
    RequestMetadata.id.getter();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100043F00();
    uint64_t v36 = v35();
    *(void *)(v26 + 16) = sub_100044698(v36, v37, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10011E140();
    sub_1000B969C((void *)&_mh_execute_header, v32, v31, "InferenceProvider cancel for Request %s");
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v26 + 64) = v38;
  *uint64_t v38 = v26;
  v38[1] = sub_100110434;
  sub_1000306EC();
  return sub_100109C14();
}

uint64_t sub_100110434()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

uint64_t sub_100110510()
{
  sub_1000086E0();
  v1[15] = v2;
  v1[16] = v0;
  v1[13] = v3;
  v1[14] = v4;
  uint64_t v5 = type metadata accessor for InferenceProviderDescriptor();
  v1[17] = v5;
  sub_10002FA4C(v5);
  v1[18] = v6;
  v1[19] = sub_10002FE18();
  uint64_t v7 = type metadata accessor for InferenceProviderRequestConfiguration();
  v1[20] = v7;
  sub_10002FA4C(v7);
  v1[21] = v8;
  v1[22] = sub_10002FE18();
  uint64_t v9 = sub_100003A70(&qword_10015B9A0);
  v1[23] = v9;
  sub_10002FA4C(v9);
  v1[24] = v10;
  v1[25] = sub_10002FE18();
  uint64_t v11 = type metadata accessor for RequestPriority();
  v1[26] = v11;
  sub_10002FA4C(v11);
  v1[27] = v12;
  v1[28] = sub_10002FE18();
  uint64_t v13 = sub_100003A70(&qword_10015B408);
  v1[29] = v13;
  sub_10002FA4C(v13);
  v1[30] = v14;
  v1[31] = sub_1000436D8();
  v1[32] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_100110674()
{
  sub_100030AFC();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[33] = sub_100003B18(v1, (uint64_t)qword_10015F3E8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_1000B6DF8((void *)&_mh_execute_header, v2, v5, "executeRequest requested");
    sub_10000ED7C();
  }

  sub_10010D33C();
  uint64_t v6 = (void *)v0[13];
  uint64_t v7 = v6[7];
  sub_10000853C(v6 + 3, v6[6]);
  v0[34] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
  RequestMetadata.id.getter();
  sub_10011EF24();
  uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(v7 + 40) + **(int **)(v7 + 40));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[35] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001108EC;
  uint64_t v9 = sub_100044070(v0[32]);
  return v11(v9);
}

uint64_t sub_1001108EC()
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10000EDB8();
  uint64_t v4 = v3;
  sub_1000086D0();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  v4[36] = v0;
  swift_task_dealloc();
  sub_100030C44();
  uint64_t v6 = *(void *)(v1 + 240);
  sub_10004381C();
  v7();
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v9 = v6 + 8;
  uint64_t v8 = v10;
  if (!v0)
  {
    v4[37] = v8;
    v4[38] = v9 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  }
  sub_100057FE4();
  v11();
  sub_100044150();
  sub_10002FEAC();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_100110A98()
{
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v21 = *(void *)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 120);
  sub_100042C34(v21 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_telemetryManager, v0 + 16);
  sub_10000853C((void *)(v0 + 16), *(void *)(v0 + 40));
  RequestMetadata.id.getter();
  RequestMetadata.sessionID.getter();
  RequestMetadata.loggingIdentifier.getter();
  sub_10011EE4C();
  InferenceProviderRequestConfiguration.useCaseIdentifier.getter();
  sub_100043AE0();
  v3();
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[7];
  sub_10000853C(v2 + 3, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  InferenceProviderDescriptor.id.getter();
  *(void *)(v0 + 312) = *(void *)(v1 + 8);
  *(void *)(v0 + 320) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043924();
  v6();
  RequestMetadata.isStream.getter();
  RequestMetadata.isInference.getter();
  uint64_t v7 = sub_100044784();
  uint64_t v9 = v8(v7);
  *(void *)(v0 + 328) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000EFBC();
  v13(v10, v11, v12);
  v20(v18, v19);
  sub_100003A70(&qword_10015F818);
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 336) = v14;
  *(_DWORD *)(v14 + 20) = 0;
  *(unsigned char *)(v14 + 16) = 0;
  sub_100042C34(v0 + 16, v0 + 56);
  uint64_t v15 = (void *)swift_allocObject();
  *(void *)(v0 + 344) = v15;
  sub_10000831C((long long *)(v0 + 56), (uint64_t)(v15 + 2));
  v15[7] = v2;
  v15[8] = v9;
  v15[9] = v14;
  v15[10] = v21;
  v15[11] = v22;
  v15[12] = v23;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100110DFC;
  sub_100044070(*(void *)(v0 + 104));
  return sub_10010BC00();
}

uint64_t sub_100110DFC()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v3 = v2;
  sub_10000ED94();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_1000086D0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 128);
    uint64_t v8 = sub_100111194;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 128);
    swift_release();
    uint64_t v8 = sub_100110EF0;
    uint64_t v7 = v9;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100110EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  sub_100030AFC();
  swift_release();
  swift_release();
  sub_100008130(v12 + 16);
  sub_1001113F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000304E0();
  sub_1000307C8();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

void sub_100110FEC()
{
  sub_100030AFC();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (sub_1000579B0(v3))
  {
    uint64_t v4 = (uint8_t *)sub_100030314();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v1 + 96) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v0, "Calling back request unable to add connection with %@", v4, 0xCu);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  sub_10011DE28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10005791C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_100111194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t, uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t, uint64_t), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32)
{
  sub_10011DDF0();
  a31 = v33;
  a32 = v34;
  a30 = v32;
  uint64_t v35 = (os_unfair_lock_s *)v32[42];
  swift_release();
  uint64_t v36 = v35 + 4;
  v35 += 5;
  os_unfair_lock_lock(v35);
  sub_1001119D0(v36, (unsigned char *)&a20 + 7);
  os_unfair_lock_unlock(v35);
  if ((a20 & 0x100000000000000) == 0)
  {
    uint64_t v37 = v32[45];
    a15 = v32[40];
    a16 = v32[41];
    a18 = (void (*)(uint64_t, uint64_t))v32[37];
    a19 = v32[38];
    uint64_t v38 = v32[31];
    a17 = v32[29];
    uint64_t v39 = v32[19];
    a12 = v32[17];
    uint64_t v40 = v32[13];
    a13 = v32[5];
    a14 = (void (*)(uint64_t, uint64_t))v32[39];
    a10 = v32[6];
    a11 = sub_10000853C(v32 + 2, a13);
    RequestMetadata.id.getter();
    uint64_t v42 = *(void *)(v40 + 48);
    uint64_t v41 = *(void *)(v40 + 56);
    uint64_t v43 = (void *)sub_10011E518();
    sub_10000853C(v43, v44);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    swift_errorRetain();
    v45(v42, v41);
    uint64_t v46 = InferenceProviderDescriptor.id.getter();
    uint64_t v48 = v47;
    a14(v39, a12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 32))(v38, a16, v37, v46, v48, a13);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    a18(v38, a17);
  }
  swift_willThrow();
  swift_release();
  swift_release();
  sub_100008130((uint64_t)(v32 + 2));
  sub_1001113F4();
  sub_10011DE28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_1000441A8();
  return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

void sub_1001113F4()
{
  sub_10002FAAC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100003A70(&qword_10015B208);
  uint64_t v6 = sub_10002FDD0(v5);
  __chkstk_darwin(v6, v7);
  sub_10011DEC0();
  uint64_t v8 = type metadata accessor for TaskPriority();
  sub_100006960(v0, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = 0;
  v9[3] = 0;
  v9[4] = v4;
  int v10 = sub_100006AE8(v0, 1, v8);
  swift_retain();
  if (v10 == 1)
  {
    sub_100042EDC(v0, &qword_10015B208);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10002FC6C();
    sub_10000EFBC();
    v11();
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  uint64_t v12 = sub_10004412C();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v9;
  swift_task_create();
  swift_release();
  sub_10002FAC4();
}

uint64_t sub_1001115C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  uint64_t v9 = type metadata accessor for InferenceProviderDescriptor();
  v7[9] = v9;
  v7[10] = *(void *)(v9 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  v7[12] = v10;
  v7[13] = *(void *)(v10 - 8);
  v7[14] = swift_task_alloc();
  return _swift_task_switch(sub_1001116F0, a5, 0);
}

uint64_t sub_1001116F0()
{
  sub_100057CCC();
  uint64_t v1 = v0[14];
  uint64_t v18 = v0[5];
  uint64_t v2 = (void *)v0[3];
  uint64_t v17 = v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_10000853C(v3, v4);
  RequestMetadata.id.getter();
  uint64_t v6 = v2 + 3;
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[7];
  sub_10000853C(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  uint64_t v9 = InferenceProviderDescriptor.id.getter();
  uint64_t v11 = v10;
  sub_100043AE0();
  v12();
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(v1, v17, 0, v9, v11, v4, v5);
  swift_bridgeObjectRelease();
  sub_100043DF8();
  v13();
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 20));
  sub_1001119C4((unsigned char *)(v18 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 20));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[15] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1001118C4;
  sub_100044070(v0[3]);
  sub_1000306EC();
  return sub_10010E6F0();
}

uint64_t sub_1001118C4()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v3();
}

unsigned char *sub_1001119C4(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

unsigned char *sub_1001119D0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1001119DC()
{
  sub_1000086E0();
  v1[34] = v2;
  v1[35] = v0;
  uint64_t v3 = type metadata accessor for RequestCancellationReason();
  v1[36] = v3;
  sub_10002FA4C(v3);
  v1[37] = v4;
  v1[38] = sub_10002FE18();
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v1[39] = v5;
  sub_10002FA4C(v5);
  v1[40] = v6;
  v1[41] = sub_10002FE18();
  uint64_t v7 = sub_100003A70(&qword_10015F7F8);
  sub_10002FDD0(v7);
  v1[42] = sub_1000436D8();
  v1[43] = swift_task_alloc();
  uint64_t v8 = sub_100003A70(&qword_10015F800);
  v1[44] = v8;
  sub_10002FDD0(v8);
  v1[45] = sub_1000436D8();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for RequestPriority();
  v1[48] = v9;
  sub_10002FA4C(v9);
  v1[49] = v10;
  v1[50] = sub_10002FE18();
  uint64_t v11 = type metadata accessor for RequestManagerPolicy(0);
  v1[51] = v11;
  sub_10002FDD0(v11);
  v1[52] = sub_1000436D8();
  v1[53] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_100111B6C()
{
  unint64_t v134 = v0;
  uint64_t v1 = v0 + 96;
  if (qword_10015B1F0 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v2 = type metadata accessor for Logger();
    *(void *)(v0 + 432) = sub_100003B18(v2, (uint64_t)qword_10015F3E8);
    uint64_t v3 = sub_100044474();
    sub_10011C5C8(v3, v4);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v131 = (void *)v0;
    if (v7)
    {
      os_log_type_t v126 = v6;
      uint64_t v9 = *(void **)(v0 + 416);
      uint64_t v10 = (uint8_t *)sub_100030314();
      sub_10002FF90();
      *(_DWORD *)uint64_t v10 = 136315138;
      bufa = v10;
      sub_10011C5C8(v8, (uint64_t)v9);
      uint64_t v128 = v1;
      v131[32] = *v9;
      swift_bridgeObjectRetain();
      sub_100003A70(&qword_10015CA38);
      sub_10000841C(&qword_10015F7C8, &qword_10015CA38);
      sub_1000D8E54();
      uint64_t v11 = Sequence<>.joined(separator:)();
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      uint64_t v132 = v11;
      uint64_t v133 = v13;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = 10272;
      v14._object = (void *)0xE200000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      uint64_t v16 = v132;
      uint64_t v15 = v133;
      uint64_t v17 = RequestPriority.rawValue.getter();
      uint64_t v19 = v18;
      uint64_t v132 = v16;
      uint64_t v133 = v15;
      swift_bridgeObjectRetain();
      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      uint64_t v1 = v128;
      unint64_t v0 = (unint64_t)v131;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = 41;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      sub_10011C61C((uint64_t)v9, (void (*)(void))type metadata accessor for RequestManagerPolicy);
      uint64_t v22 = sub_100057ECC();
      v131[33] = sub_10001DF20(v22, v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C61C(v8, (void (*)(void))type metadata accessor for RequestManagerPolicy);
      _os_log_impl((void *)&_mh_execute_header, v5, v126, "Processing policy change, new policy: %s", bufa, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_10011C61C(v8, (void (*)(void))type metadata accessor for RequestManagerPolicy);
    }

    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v27 = OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
    *(void *)(v0 + 440) = OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy;
    uint64_t v28 = v25 + v27;
    sub_100043F38();
    uint64_t v130 = v28;
    sub_10011ACD4(v26, v28);
    swift_endAccess();
    *(void *)(v0 + 232) = &_swiftEmptySetSingleton;
    uint64_t v29 = (uint64_t *)(v25 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_extantRequests);
    sub_100043D2C();
    uint64_t v30 = *v29;
    if ((*v29 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for DaemonRequest();
      sub_1001141CC(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
      sub_100044468();
      Set.Iterator.init(_cocoa:)();
      uint64_t v30 = *(void *)(v0 + 56);
      uint64_t v124 = *(void *)(v0 + 64);
      uint64_t v31 = *(void *)(v0 + 72);
      int64_t v32 = *(void *)(v0 + 80);
      unint64_t v33 = *(void *)(v0 + 88);
    }
    else
    {
      uint64_t v34 = -1 << *(unsigned char *)(v30 + 32);
      uint64_t v124 = v30 + 56;
      uint64_t v31 = ~v34;
      uint64_t v35 = -v34;
      uint64_t v36 = v35 < 64 ? ~(-1 << v35) : -1;
      unint64_t v33 = v36 & *(void *)(v30 + 56);
      swift_bridgeObjectRetain();
      int64_t v32 = 0;
    }
    uint64_t v106 = (uint64_t *)(v0 + 216);
    uint64_t v107 = (uint64_t *)(v0 + 224);
    uint64_t v127 = (uint64_t *)(v0 + 232);
    uint64_t v116 = (uint64_t *)(v0 + 248);
    uint64_t v118 = (uint64_t *)(v0 + 240);
    uint64_t v129 = *(void *)(v0 + 408);
    int64_t v122 = (unint64_t)(v31 + 64) >> 6;
    uint64_t v37 = (void (**)(void, uint64_t, void))(*(void *)(v0 + 392) + 16);
    if (v30 < 0)
    {
      while (1)
      {
        uint64_t v39 = __CocoaSet.Iterator.next()();
        if (!v39) {
          break;
        }
        *uint64_t v116 = v39;
        type metadata accessor for DaemonRequest();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v40 = *v118;
        swift_unknownObjectRelease();
        unint64_t v0 = v32;
        uint64_t v1 = v33;
        if (!v40) {
          break;
        }
LABEL_32:
        (*v37)(v131[50], v130 + *(int *)(v129 + 20), v131[48]);
        sub_100121600();
        char v45 = v44;
        sub_100043AE0();
        v46();
        if (v45)
        {
          sub_100043F38();
          swift_retain();
          sub_100020418(&v132, v40);
          swift_endAccess();
          swift_release();
          sub_100020418(&v132, v40);
        }
        swift_release();
        int64_t v32 = v0;
        unint64_t v33 = v1;
        if ((v30 & 0x8000000000000000) == 0) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      if (v33)
      {
        uint64_t v1 = (v33 - 1) & v33;
        unint64_t v38 = __clz(__rbit64(v33)) | (v32 << 6);
        unint64_t v0 = v32;
        goto LABEL_31;
      }
      int64_t v41 = v32 + 1;
      if (__OFADD__(v32, 1)) {
        goto LABEL_92;
      }
      if (v41 < v122)
      {
        unint64_t v42 = *(void *)(v124 + 8 * v41);
        unint64_t v0 = v32 + 1;
        if (v42) {
          goto LABEL_30;
        }
        unint64_t v0 = v32 + 2;
        if (v32 + 2 >= v122) {
          goto LABEL_36;
        }
        unint64_t v42 = *(void *)(v124 + 8 * v0);
        if (v42) {
          goto LABEL_30;
        }
        unint64_t v0 = v32 + 3;
        if (v32 + 3 >= v122) {
          goto LABEL_36;
        }
        unint64_t v42 = *(void *)(v124 + 8 * v0);
        if (v42) {
          goto LABEL_30;
        }
        unint64_t v0 = v32 + 4;
        if (v32 + 4 >= v122) {
          goto LABEL_36;
        }
        unint64_t v42 = *(void *)(v124 + 8 * v0);
        if (v42)
        {
LABEL_30:
          uint64_t v1 = (v42 - 1) & v42;
          unint64_t v38 = __clz(__rbit64(v42)) + (v0 << 6);
LABEL_31:
          uint64_t v40 = *(void *)(*(void *)(v30 + 48) + 8 * v38);
          swift_retain();
          if (!v40) {
            goto LABEL_36;
          }
          goto LABEL_32;
        }
        int64_t v43 = v32 + 5;
        while (v43 < v122)
        {
          unint64_t v42 = *(void *)(v124 + 8 * v43++);
          if (v42)
          {
            unint64_t v0 = v43 - 1;
            goto LABEL_30;
          }
        }
      }
    }
LABEL_36:
    uint64_t v1 = (uint64_t)v131;
    uint64_t v47 = v131[35];
    sub_10002EAF0();
    uint64_t v48 = v47 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_activeGroups;
    uint64_t result = sub_100043D2C();
    uint64_t v50 = *(void *)(v48 + 16);
    uint64_t v119 = *(void *)(v50 + 16);
    if (!v119) {
      break;
    }
    uint64_t v51 = *(uint8_t **)(v48 + 8);
    uint64_t v113 = v131[44];
    uint64_t v114 = v131[47];
    uint64_t v112 = *(int *)(v113 + 48);
    uint64_t v52 = type metadata accessor for UUID();
    sub_100057B10();
    uint64_t v115 = &v51[(*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)];
    uint64_t v117 = v53;
    int64_t v110 = (void (**)(void))(v53 + 32);
    uint64_t v111 = v50 + 32;
    swift_retain();
    swift_retain();
    buf = v51;
    swift_retain();
    unint64_t v0 = 0;
    uint64_t v108 = v52;
    uint64_t v109 = v50;
    while (v0 < *((void *)buf + 2))
    {
      uint64_t v54 = &v115[*(void *)(v117 + 72) * v0];
      unint64_t v55 = v0;
      unint64_t v0 = *(void *)(v117 + 16);
      ((void (*)(void, uint8_t *, uint64_t))v0)(*(void *)(v1 + 344), v54, v52);
      if (v55 >= *(void *)(v50 + 16)) {
        goto LABEL_90;
      }
      uint64_t v56 = *(void *)(v1 + 368);
      unint64_t v123 = v55;
      int v125 = *(void **)(v1 + 360);
      uint64_t v57 = *(void *)(v111 + 8 * v55);
      uint64_t v58 = *v110;
      sub_10011DDE0();
      v58();
      sub_100044784();
      sub_10011DDE0();
      v58();
      *(void *)(v114 + v112) = v57;
      uint64_t v59 = *(int *)(v113 + 48);
      sub_10011DDE0();
      v58();
      *(void *)(v56 + v59) = v57;
      uint64_t v60 = *(int *)(v113 + 48);
      sub_100069DF4();
      ((void (*)(void))v0)();
      *(void *)((char *)v125 + v60) = v57;
      unint64_t v0 = (unint64_t)v125;
      sub_100043D2C();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100116B0C();
      uint64_t v62 = v61;
      swift_bridgeObjectRetain();
      sub_100116B0C();
      uint64_t v64 = v63;
      swift_bridgeObjectRelease();
      uint64_t v132 = v62;
      sub_100116744(v64);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v65 = v132;
      sub_10000EFBC();
      v66();
      if (v65 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v67 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v1 = (uint64_t)v131;
      if (v67)
      {
        if (v67 < 1) {
          goto LABEL_91;
        }
        for (uint64_t i = 0; i != v67; ++i)
        {
          if ((v65 & 0xC000000000000001) != 0)
          {
            sub_100044784();
            uint64_t v69 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v69 = *(void *)(v65 + 8 * i + 32);
            swift_retain();
          }
          (*v37)(*(void *)(v1 + 400), v130 + *(int *)(v129 + 20), *(void *)(v1 + 384));
          sub_100121600();
          char v71 = v70;
          sub_100043AE0();
          v72();
          if (v71) {
            sub_100020418(&v132, v69);
          }
          swift_release();
          uint64_t v1 = (uint64_t)v131;
        }
      }
      unint64_t v0 = v123 + 1;
      uint64_t v73 = *(void *)(v1 + 368);
      swift_bridgeObjectRelease();
      sub_100042EDC(v73, &qword_10015F800);
      uint64_t v52 = v108;
      uint64_t v50 = v109;
      if (v123 + 1 == v119)
      {
        swift_release();
        swift_release();
        uint64_t result = swift_release();
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
  }
LABEL_54:
  uint64_t v74 = *v127;
  if ((*v127 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10011E50C();
    type metadata accessor for DaemonRequest();
    sub_1001141CC(&qword_10015B478, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
    sub_100043EDC();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v74 = *(void *)(v1 + 16);
    uint64_t v75 = *(void *)(v1 + 24);
    uint64_t v76 = *(void *)(v1 + 32);
    uint64_t v77 = *(void *)(v1 + 40);
    unint64_t v78 = *(void *)(v1 + 48);
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v79 = -1;
    uint64_t v80 = -1 << *(unsigned char *)(v74 + 32);
    uint64_t v75 = v74 + 56;
    uint64_t v76 = ~v80;
    uint64_t v81 = -v80;
    if (v81 < 64) {
      uint64_t v79 = ~(-1 << v81);
    }
    unint64_t v78 = v79 & *(void *)(v74 + 56);
  }
  *(void *)(v1 + 456) = v75;
  *(void *)(v1 + 464) = v76;
  *(void *)(v1 + 448) = v74;
  *(_DWORD *)(v1 + 512) = enum case for RequestCancellationReason.specificPolicyChange(_:);
  if (v74 < 0)
  {
    uint64_t v86 = __CocoaSet.Iterator.next()();
    if (v86)
    {
      *uint64_t v106 = v86;
      type metadata accessor for DaemonRequest();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v85 = *v107;
      swift_unknownObjectRelease();
      uint64_t v84 = v77;
      uint64_t v82 = v78;
      goto LABEL_65;
    }
  }
  else
  {
    if (v78)
    {
      uint64_t v82 = (v78 - 1) & v78;
      unint64_t v83 = __clz(__rbit64(v78)) | (v77 << 6);
      uint64_t v84 = v77;
      goto LABEL_62;
    }
    uint64_t v96 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
      __break(1u);
      return result;
    }
    unint64_t v97 = v76 + 64;
    if (v96 < (uint64_t)(v97 >> 6))
    {
      unint64_t v98 = *(void *)(v75 + 8 * v96);
      uint64_t v84 = v77 + 1;
      if (v98)
      {
LABEL_71:
        uint64_t v82 = (v98 - 1) & v98;
        unint64_t v83 = __clz(__rbit64(v98)) + (v84 << 6);
LABEL_62:
        uint64_t v85 = *(void *)(*(void *)(v74 + 48) + 8 * v83);
        swift_retain();
LABEL_65:
        *(void *)(v1 + 480) = v84;
        *(void *)(v1 + 488) = v82;
        *(void *)(v1 + 472) = v85;
        if (v85)
        {
          sub_10011E588();
          uint64_t v87 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v87, v88))
          {
            uint64_t v89 = (_DWORD *)sub_100030314();
            uint64_t v132 = sub_10002FF90();
            *uint64_t v89 = 136315138;
            RequestMetadata.id.getter();
            sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
            uint64_t v90 = sub_10011DEF4();
            unint64_t v92 = v91;
            uint64_t v93 = sub_10011DEB4();
            uint64_t v1 = (uint64_t)v131;
            v94(v93);
            uint64_t v95 = sub_10001DF20(v90, v92, &v132);
            sub_10011E0F4(v95);
            sub_10011E5A0();
            sub_1000B72C4((void *)&_mh_execute_header, v87, v88, "Cancelling request %s due to policy change");
            swift_arrayDestroy();
            sub_10000ED7C();
            sub_10000ED7C();
          }
          else
          {
            sub_10011E5A0();
          }

          **(void **)(v1 + 304) = *(void *)(*(void *)(v1 + 280) + *(void *)(v1 + 440));
          sub_100043E9C();
          v99();
          swift_bridgeObjectRetain();
          uint64_t v100 = (void *)swift_task_alloc();
          *(void *)(v1 + 496) = v100;
          void *v100 = v1;
          v100[1] = sub_100112A80;
          uint64_t v101 = sub_100044070(*(void *)(v1 + 280));
          return sub_100120804(v101, v102);
        }
      }
      else
      {
        int64_t v103 = v97 >> 6;
        uint64_t v84 = v77 + 2;
        if (v77 + 2 < v103)
        {
          unint64_t v98 = *(void *)(v75 + 8 * v84);
          if (v98) {
            goto LABEL_71;
          }
          uint64_t v84 = v77 + 3;
          if (v77 + 3 < v103)
          {
            unint64_t v98 = *(void *)(v75 + 8 * v84);
            if (v98) {
              goto LABEL_71;
            }
            uint64_t v84 = v77 + 4;
            if (v77 + 4 < v103)
            {
              unint64_t v98 = *(void *)(v75 + 8 * v84);
              if (v98) {
                goto LABEL_71;
              }
              uint64_t v104 = v77 + 5;
              while (v104 < v103)
              {
                unint64_t v98 = *(void *)(v75 + 8 * v104++);
                if (v98)
                {
                  uint64_t v84 = v104 - 1;
                  goto LABEL_71;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_10002EAF0();
  uint64_t v105 = (void *)swift_task_alloc();
  *(void *)(v1 + 504) = v105;
  void *v105 = v1;
  v105[1] = sub_100112F68;
  return sub_10010AED8();
}

uint64_t sub_100112A80()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100043924();
  v3();
  sub_100044150();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100112BB4()
{
  uint64_t v32 = v0;
  uint64_t result = swift_release();
  uint64_t v2 = *(void *)(v0 + 480);
  unint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 448);
  if (v4 < 0)
  {
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (!v9) {
      goto LABEL_28;
    }
    *(void *)(v0 + 216) = v9;
    type metadata accessor for DaemonRequest();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v8 = *(void *)(v0 + 224);
    swift_unknownObjectRelease();
    int64_t v7 = v2;
    uint64_t v5 = v3;
  }
  else
  {
    if (v3)
    {
      uint64_t v5 = (v3 - 1) & v3;
      unint64_t v6 = __clz(__rbit64(v3)) | (v2 << 6);
      int64_t v7 = *(void *)(v0 + 480);
    }
    else
    {
      int64_t v18 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
        return result;
      }
      unint64_t v19 = *(void *)(v0 + 464) + 64;
      if (v18 >= (uint64_t)(v19 >> 6)) {
        goto LABEL_28;
      }
      uint64_t v20 = *(void *)(v0 + 456);
      unint64_t v21 = *(void *)(v20 + 8 * v18);
      int64_t v7 = v2 + 1;
      if (!v21)
      {
        int64_t v27 = v19 >> 6;
        int64_t v7 = v2 + 2;
        if (v2 + 2 >= v27) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v20 + 8 * v7);
        if (!v21)
        {
          int64_t v7 = v2 + 3;
          if (v2 + 3 >= v27) {
            goto LABEL_28;
          }
          unint64_t v21 = *(void *)(v20 + 8 * v7);
          if (!v21)
          {
            int64_t v7 = v2 + 4;
            if (v2 + 4 >= v27) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v20 + 8 * v7);
            if (!v21)
            {
              int64_t v28 = v2 + 5;
              while (v28 < v27)
              {
                unint64_t v21 = *(void *)(v20 + 8 * v28++);
                if (v21)
                {
                  int64_t v7 = v28 - 1;
                  goto LABEL_13;
                }
              }
              goto LABEL_28;
            }
          }
        }
      }
LABEL_13:
      uint64_t v5 = (v21 - 1) & v21;
      unint64_t v6 = __clz(__rbit64(v21)) + (v7 << 6);
    }
    uint64_t v8 = *(void *)(*(void *)(v4 + 48) + 8 * v6);
    swift_retain();
  }
  *(void *)(v0 + 480) = v7;
  *(void *)(v0 + 488) = v5;
  *(void *)(v0 + 472) = v8;
  if (v8)
  {
    sub_1000B7908();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (sub_1000B7744(v11))
    {
      uint64_t v12 = (_DWORD *)sub_100030314();
      uint64_t v31 = sub_10002FF90();
      *uint64_t v12 = 136315138;
      RequestMetadata.id.getter();
      sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
      uint64_t v13 = sub_10011DEF4();
      unint64_t v15 = v14;
      sub_10011DEB4();
      sub_100043CF4();
      v16();
      uint64_t v17 = sub_10001DF20(v13, v15, &v31);
      sub_10011E0F4(v17);
      sub_10000F050();
      sub_1000B72C4((void *)&_mh_execute_header, v10, (os_log_type_t)v5, "Cancelling request %s due to policy change");
      sub_100043EE8();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      sub_10000F050();
    }

    **(void **)(v0 + 304) = *(void *)(*(void *)(v0 + 280) + *(void *)(v0 + 440));
    sub_100043E9C();
    v22();
    swift_bridgeObjectRetain();
    unint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v23;
    *unint64_t v23 = v0;
    v23[1] = sub_100112A80;
    sub_10011D808(*(void *)(v0 + 280));
    sub_10002FE48();
    return sub_100120804(v24, v25);
  }
LABEL_28:
  sub_10002EAF0();
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100112F68;
  sub_10002FE48();
  return sub_10010AED8();
}

uint64_t sub_100112F68()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100113044()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (_WORD *)sub_10005A928();
    sub_100069CF8(v2);
    sub_1000B6DF8((void *)&_mh_execute_header, v0, v3, "Completed policy change");
    sub_10000ED7C();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10011316C()
{
  sub_100043D2C();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_100102328(v0);
  swift_bridgeObjectRelease();
  type metadata accessor for InferenceMonitor.Event();
  sub_10002FC6C();
  sub_100043E9C();
  return v1();
}

void sub_10011321C(Swift::UInt a1, int a2)
{
  sub_100043F38();
  swift_retain();
  sub_1000213DC((uint64_t)&v4, a1, a2);
  swift_endAccess();
  swift_release();
  sub_1001132A4();
}

void sub_1001132A4()
{
  sub_10002FAAC();
  type metadata accessor for InferenceMonitor.Event();
  sub_10000ED60();
  uint64_t v1 = v0;
  __chkstk_darwin(v2, v3);
  sub_10011DAD4();
  __chkstk_darwin(v4, v5);
  sub_10011316C();
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003B18(v6, (uint64_t)qword_10015F3E8);
  sub_100069DF4();
  v7();
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v15 = v1;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = sub_10002FF90();
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_1001141CC(&qword_10015F7F0, (void (*)(uint64_t))&type metadata accessor for InferenceMonitor.Event);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = sub_10001DF20(v11, v12, &v16);
    sub_10011D7CC(v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void))(v15 + 8);
    sub_10004381C();
    v14();
    *(_WORD *)(v10 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending inference monitor event: %s to pid %d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release();
    unint64_t v14 = *(void (**)(void))(v1 + 8);
    sub_10004381C();
    v14();

    swift_release();
  }
  sub_1001141CC(&qword_10015F7E8, (void (*)(uint64_t))&type metadata accessor for InferenceMonitor.Event);
  sub_10011E474();
  dispatch thunk of XPCSession.send<A>(_:)();
  sub_10011E474();
  sub_10004381C();
  v14();
  sub_10002FAC4();
}

uint64_t sub_1001136C0()
{
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  uint64_t v3 = sub_10002FDD0(v2);
  __chkstk_darwin(v3, v4);
  sub_10006FE24();
  static TaskPriority.userInitiated.getter();
  uint64_t v5 = type metadata accessor for TaskPriority();
  sub_100006960(v0, 0, 1, v5);
  uint64_t v6 = sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v1;
  v7[3] = v6;
  v7[4] = v1;
  sub_10002FC78();
  sub_100003730(v0, (uint64_t)&unk_10015F7E0, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_1001137C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_1001137E0, a4, 0);
}

uint64_t sub_1001137E0()
{
  sub_10002FC60();
  uint64_t v1 = *(void *)(v0 + 40) + OBJC_IVAR____TtC13modelmanagerd14RequestManager_inferenceMonitors;
  sub_100043D2C();
  uint64_t v2 = *(void *)v1 + 56;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(*(void *)v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  uint64_t v5 = v3 & *(void *)(*(void *)v1 + 56);
  int64_t v6 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  for (v5 &= v5 - 1; ; uint64_t v5 = (v10 - 1) & v10)
  {
    swift_retain();
    sub_1001132A4();
    uint64_t result = swift_release();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v6) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v2 + 8 * v9);
    ++v8;
    if (!v10)
    {
      int64_t v8 = v9 + 1;
      if (v9 + 1 >= v6) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v2 + 8 * v8);
      if (!v10)
      {
        int64_t v8 = v9 + 2;
        if (v9 + 2 >= v6) {
          goto LABEL_21;
        }
        uint64_t v10 = *(void *)(v2 + 8 * v8);
        if (!v10) {
          break;
        }
      }
    }
LABEL_18:
    ;
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v6)
  {
LABEL_21:
    swift_release();
    sub_10000EF7C();
    sub_10002FE94();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10)
  {
    int64_t v8 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v2 + 8 * v8);
    ++v11;
    if (v10) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100113990()
{
  sub_10011C61C(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_currentPolicy, (void (*)(void))type metadata accessor for RequestManagerPolicy);
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_assetManager);
  swift_release();
  sub_100008130(v0 + OBJC_IVAR____TtC13modelmanagerd14RequestManager_telemetryManager);
  sub_10011DE0C();
  swift_release();
  swift_release();
  sub_10011DE0C();
  swift_release();
  swift_release();
  sub_10011DE0C();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100113AB8()
{
  sub_100113990();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100113AE4()
{
  return type metadata accessor for RequestManager(0);
}

uint64_t type metadata accessor for RequestManager(uint64_t a1)
{
  return sub_100067BD8(a1, (uint64_t *)&unk_10015F428);
}

uint64_t sub_100113B0C()
{
  uint64_t result = type metadata accessor for RequestManagerPolicy(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for RequestManagerPolicy(uint64_t a1)
{
  return sub_100067BD8(a1, qword_10015F790);
}

uint64_t *sub_100113C18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    int64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for RequestPriority();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100113CFC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for RequestPriority();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100113D74(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for RequestPriority();
  int64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100113E0C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RequestPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100113EA0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for RequestPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100113F1C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RequestPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100113FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100113FBC);
}

uint64_t sub_100113FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RequestPriority();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return sub_100006AE8(v9, a2, v8);
  }
}

uint64_t sub_100114044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100114058);
}

void *sub_100114058(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RequestPriority();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)sub_100006960(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001140D8()
{
  uint64_t result = type metadata accessor for RequestPriority();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100114174(uint64_t a1)
{
  uint64_t result = sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001141CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100114218()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1000086AC(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_1001137C0(v3, v4, v5, v6);
}

void sub_1001142A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v8)
  {
    uint64_t v9 = (void *)(a3 + 32);
    do
    {
      uint64_t v10 = *v9 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      swift_beginAccess();
      long long v11 = *(_OWORD *)v10;
      long long v12 = *(_OWORD *)(v10 + 32);
      long long v46 = *(_OWORD *)(v10 + 16);
      long long v47 = v12;
      long long v45 = v11;
      sub_1000B6AC8((uint64_t)&v45 + 8, (uint64_t)v48, &qword_10015F8A8);
      sub_1000B6AC8((uint64_t)&v46, (uint64_t)v49, &qword_10015F8B0);
      sub_1000B6AC8((uint64_t)&v46 + 8, (uint64_t)v50, &qword_10015F8B8);
      long long v51 = v47;
      swift_retain();
      sub_10011C674((uint64_t)v48);
      sub_10011C674((uint64_t)v49);
      sub_10011C674((uint64_t)v50);
      sub_10011C6A0((uint64_t)&v51);
      sub_10011C6A0((uint64_t)&v51 + 8);
      LOBYTE(v10) = sub_100009D84();
      sub_10006945C((uint64_t)v48);
      sub_10006945C((uint64_t)v49);
      sub_10006945C((uint64_t)v50);
      sub_10000E054((uint64_t)&v51);
      sub_10000E054((uint64_t)&v51 + 8);
      if (v10)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
    || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage[2];
    swift_bridgeObjectRetain();
  }
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v14 = 0;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100018590();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v13 != v14);
  }
  else
  {
    uint64_t v16 = _swiftEmptySetSingleton;
  }
  swift_release_n();
  if (!v16[2])
  {
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      return;
    }
    goto LABEL_68;
  }
  uint64_t v17 = *(void *)(a6 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17)
  {
    int64_t v18 = (void *)(a6 + 32);
    do
    {
      uint64_t v19 = *v18 + OBJC_IVAR____TtCC13modelmanagerd14RequestManager14ExecutionGroup_unsafeManagerOwnedState;
      swift_beginAccess();
      long long v20 = *(_OWORD *)v19;
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v43 = *(_OWORD *)(v19 + 16);
      long long v44 = v21;
      *((void *)&v42 + 1) = *((void *)&v20 + 1);
      sub_1000B6AC8((uint64_t)&v42 + 8, (uint64_t)v52, &qword_10015F8A8);
      sub_1000B6AC8((uint64_t)&v43, (uint64_t)v53, &qword_10015F8B0);
      sub_1000B6AC8((uint64_t)&v43 + 8, (uint64_t)v54, &qword_10015F8B8);
      long long v55 = v44;
      swift_retain();
      sub_10011C674((uint64_t)v52);
      sub_10011C674((uint64_t)v53);
      sub_10011C674((uint64_t)v54);
      sub_10011C6A0((uint64_t)&v55);
      sub_10011C6A0((uint64_t)&v55 + 8);
      LOBYTE(v19) = sub_100009D84();
      sub_10006945C((uint64_t)v52);
      sub_10006945C((uint64_t)v53);
      sub_10006945C((uint64_t)v54);
      sub_10000E054((uint64_t)&v55);
      sub_10000E054((uint64_t)&v55 + 8);
      if (v19)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      ++v18;
      --v17;
    }
    while (v17);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v22 = _swiftEmptyArrayStorage[2];
    swift_bridgeObjectRetain();
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_29;
  }
LABEL_40:
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  if (!v22) {
    goto LABEL_41;
  }
LABEL_29:
  if (v22 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100018590();
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v22 != v23);
LABEL_41:
    swift_release_n();
    sub_100018590();
    uint64_t v25 = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v26 = (unint64_t)sub_100102388(a4, a5, a6, v25);
    unint64_t v27 = v26;
    if (v26 >> 62) {
      goto LABEL_51;
    }
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    for (; v28; uint64_t v28 = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v40 = v27;
      unint64_t v41 = v27 & 0xC000000000000001;
      uint64_t v29 = 4;
      while (1)
      {
        if (v41) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v30 = v29 - 3;
        if (__OFADD__(v29 - 4, 1)) {
          break;
        }
        swift_beginAccess();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_100116B0C();
        uint64_t v32 = v31;
        swift_bridgeObjectRetain();
        sub_100116B0C();
        uint64_t v34 = v33;
        swift_bridgeObjectRelease();
        sub_100116744(v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        unint64_t v27 = v40;
        sub_100116744(v32);
        ++v29;
        if (v30 == v28) {
          goto LABEL_52;
        }
      }
      __break(1u);
LABEL_51:
      swift_retain();
      swift_bridgeObjectRetain();
    }
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v35)
      {
LABEL_54:
        if (v35 >= 1)
        {
          for (uint64_t i = 0; i != v35; ++i)
          {
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
            {
              uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v37 = _swiftEmptyArrayStorage[i + 4];
              swift_retain();
            }
            if (*((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v37) == 1)
            {
              swift_release();
            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
          }
          goto LABEL_65;
        }
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v35 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v35) {
        goto LABEL_54;
      }
    }
LABEL_65:
    swift_bridgeObjectRelease();
    sub_100017AE0();
    return;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  if (_CocoaArrayWrapper.endIndex.getter()) {
    sub_100004084((unint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100114BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = (int *)type metadata accessor for ModelCatalogAsset(0);
  uint64_t v4 = *((void *)v81 - 1);
  uint64_t v6 = __chkstk_darwin(v81, v5);
  uint64_t v8 = (uint64_t *)((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v89 = (uint64_t *)((char *)&v70 - v11);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v70 - v13;
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v16 = a2 + 56;
  uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = ~v17;
  if (-v17 < 64) {
    uint64_t v19 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & *(void *)(a2 + 56);
  int64_t v21 = (unint64_t)(63 - v17) >> 6;
  uint64_t v88 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v78 = a2 + 56;
  uint64_t v77 = v18;
  int64_t v75 = v21;
LABEL_7:
  uint64_t v79 = v23;
  unint64_t v80 = v20;
  if (v20)
  {
    uint64_t v71 = (v20 - 1) & v20;
    unint64_t v24 = __clz(__rbit64(v20)) | (v23 << 6);
    int64_t v72 = v23;
    goto LABEL_23;
  }
  int64_t v25 = v23 + 1;
  if (__OFADD__(v23, 1)) {
    goto LABEL_103;
  }
  if (v25 >= v21) {
    goto LABEL_99;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v25);
  int64_t v27 = v23 + 1;
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v23 + 2;
  if (v23 + 2 >= v21) {
    goto LABEL_99;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v23 + 3;
  if (v23 + 3 >= v21) {
    goto LABEL_99;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26)
  {
LABEL_22:
    uint64_t v71 = (v26 - 1) & v26;
    int64_t v72 = v27;
    unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_23:
    uint64_t v76 = a2;
    uint64_t v29 = *(void *)(a2 + 48);
    uint64_t v74 = v4;
    uint64_t v87 = *(void *)(v4 + 72);
    sub_10011C5C8(v29 + v87 * v24, (uint64_t)v14);
    uint64_t v73 = v14;
    sub_10000E54C((uint64_t)v14, (uint64_t)v89);
    if (!*(void *)(a1 + 16)
      || (Hasher.init(_seed:)(),
          sub_100070998(),
          Swift::Int v30 = Hasher._finalize()(),
          uint64_t v31 = -1 << *(unsigned char *)(a1 + 32),
          unint64_t v32 = v30 & ~v31,
          ((*(void *)(v88 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0))
    {
LABEL_96:
      sub_10011C61C((uint64_t)v89, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      uint64_t v15 = 0;
      goto LABEL_97;
    }
    uint64_t v85 = ~v31;
    uint64_t v86 = a1;
    while (1)
    {
      sub_10011C5C8(*(void *)(a1 + 48) + v32 * v87, (uint64_t)v8);
      BOOL v33 = *v8 == *v89 && v8[1] == v89[1];
      if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_95;
      }
      uint64_t v34 = (void *)v8[2];
      uint64_t v35 = (void *)v89[2];
      unint64_t v36 = v34[2];
      if (v36 != v35[2]) {
        goto LABEL_95;
      }
      if (v36) {
        BOOL v37 = v34 == v35;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37) {
        goto LABEL_37;
      }
      BOOL v42 = v34[4] == v35[4] && v34[5] == v35[5];
      if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_95;
      }
      if (v36 == 1) {
        goto LABEL_37;
      }
      uint64_t result = v34[6];
      if (result != v35[6] || v34[7] != v35[7])
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_95;
        }
      }
      if (v36 == 2)
      {
LABEL_37:
        uint64_t v38 = v8[3];
        uint64_t v39 = v89[3];
        unint64_t v40 = *(void *)(v38 + 16);
        if (v40 == *(void *)(v39 + 16))
        {
          if (v40) {
            BOOL v41 = v38 == v39;
          }
          else {
            BOOL v41 = 1;
          }
          if (v41)
          {
LABEL_43:
            if ((static AssetCost.== infix(_:_:)() & 1) != 0
              && *((unsigned __int8 *)v8 + v81[8]) == *((unsigned __int8 *)v89 + v81[8])
              && *((unsigned __int8 *)v8 + v81[9]) == *((unsigned __int8 *)v89 + v81[9])
              && *((unsigned __int8 *)v8 + v81[10]) == *((unsigned __int8 *)v89 + v81[10]))
            {
              sub_10011C61C((uint64_t)v8, (void (*)(void))type metadata accessor for ModelCatalogAsset);
              uint64_t result = sub_10011C61C((uint64_t)v89, (void (*)(void))type metadata accessor for ModelCatalogAsset);
              int64_t v23 = v72;
              unint64_t v20 = v71;
              a2 = v76;
              uint64_t v16 = v78;
              a1 = v86;
              uint64_t v4 = v74;
              uint64_t v14 = v73;
              int64_t v21 = v75;
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t result = *(void *)(v38 + 32);
            uint64_t v49 = *(void *)(v38 + 48);
            uint64_t v48 = *(void *)(v38 + 56);
            int v50 = *(unsigned __int8 *)(v38 + 64);
            uint64_t v52 = *(void *)(v39 + 48);
            uint64_t v51 = *(void *)(v39 + 56);
            int v53 = *(unsigned __int8 *)(v39 + 64);
            if (result != *(void *)(v39 + 32) || *(void *)(v38 + 40) != *(void *)(v39 + 40))
            {
              int v55 = *(unsigned __int8 *)(v38 + 64);
              uint64_t v56 = *(void *)(v39 + 56);
              uint64_t v84 = *(void *)(v39 + 48);
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v52 = v84;
              uint64_t v51 = v56;
              int v50 = v55;
              if ((result & 1) == 0) {
                goto LABEL_95;
              }
            }
            uint64_t v57 = 0;
            unint64_t v58 = 1;
            if (v48)
            {
LABEL_75:
              if (v51)
              {
                if (v49 != v52 || v48 != v51)
                {
                  int v60 = v50;
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if (result & 1) == 0 || ((v53 ^ v60)) {
                    goto LABEL_95;
                  }
                  goto LABEL_85;
                }
                goto LABEL_84;
              }
            }
            else
            {
              while (!v51)
              {
LABEL_84:
                if ((v53 ^ v50)) {
                  break;
                }
LABEL_85:
                if (v40 == v58) {
                  goto LABEL_43;
                }
                if (v58 >= v40)
                {
                  __break(1u);
LABEL_101:
                  __break(1u);
LABEL_102:
                  __break(1u);
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
                  return result;
                }
                if (v58 >= *(void *)(v39 + 16)) {
                  goto LABEL_101;
                }
                uint64_t result = *(void *)(v38 + v57 + 72);
                uint64_t v49 = *(void *)(v38 + v57 + 88);
                uint64_t v48 = *(void *)(v38 + v57 + 96);
                int v50 = *(unsigned __int8 *)(v38 + v57 + 104);
                uint64_t v52 = *(void *)(v39 + v57 + 88);
                uint64_t v51 = *(void *)(v39 + v57 + 96);
                int v53 = *(unsigned __int8 *)(v39 + v57 + 104);
                if (result != *(void *)(v39 + v57 + 72) || *(void *)(v38 + v57 + 80) != *(void *)(v39 + v57 + 80))
                {
                  uint64_t v83 = *(void *)(v38 + v57 + 96);
                  uint64_t v84 = v57;
                  uint64_t v82 = v49;
                  uint64_t v62 = v39;
                  unint64_t v63 = v40;
                  uint64_t v64 = v8;
                  uint64_t v65 = v38;
                  int v66 = v53;
                  int v67 = v50;
                  uint64_t v68 = v51;
                  uint64_t v69 = v52;
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t v52 = v69;
                  uint64_t v51 = v68;
                  int v50 = v67;
                  int v53 = v66;
                  uint64_t v38 = v65;
                  uint64_t v8 = v64;
                  unint64_t v40 = v63;
                  uint64_t v39 = v62;
                  uint64_t v49 = v82;
                  uint64_t v48 = v83;
                  uint64_t v57 = v84;
                  if ((result & 1) == 0) {
                    break;
                  }
                }
                v57 += 40;
                ++v58;
                if (v48) {
                  goto LABEL_75;
                }
              }
            }
          }
        }
      }
      else
      {
        long long v44 = v34 + 9;
        long long v45 = v35 + 9;
        unint64_t v46 = 2;
        while (1)
        {
          if (v46 >= v36) {
            goto LABEL_102;
          }
          uint64_t result = *(v44 - 1);
          if (result != *(v45 - 1) || *v44 != *v45)
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              break;
            }
          }
          ++v46;
          v44 += 2;
          v45 += 2;
          if (v36 == v46) {
            goto LABEL_37;
          }
        }
      }
LABEL_95:
      sub_10011C61C((uint64_t)v8, (void (*)(void))type metadata accessor for ModelCatalogAsset);
      a1 = v86;
      unint64_t v32 = (v32 + 1) & v85;
      if (((*(void *)(v88 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
        goto LABEL_96;
      }
    }
  }
  uint64_t v28 = v23 + 4;
  if (v23 + 4 >= v21) {
    goto LABEL_99;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v23 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_104;
    }
    if (v27 >= v21) {
      break;
    }
    unint64_t v26 = *(void *)(v16 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_99:
  uint64_t v15 = 1;
LABEL_97:
  sub_10002EAF0();
  return v15;
}

void sub_1001152E8()
{
  sub_10002FAAC();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100003A70(&qword_10015B208);
  uint64_t v7 = sub_10002FDD0(v6);
  __chkstk_darwin(v7, v8);
  sub_100057F20();
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v71 = v10;
  uint64_t v72 = v9;
  __chkstk_darwin(v9, v11);
  sub_10011DAF0(v12, v60);
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100003B18(v13, (uint64_t)qword_10015F3E8);
  int v66 = &v60;
  uint64_t v15 = *(void *)(v13 - 8);
  __chkstk_darwin(v14, v14);
  sub_100030934();
  sub_100069DF4();
  v16();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  HIDWORD(v65) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v17, BYTE4(v65)))
  {
    swift_bridgeObjectRelease_n();

    sub_100043CF4();
    v24();
LABEL_26:
    uint64_t v57 = type metadata accessor for TaskPriority();
    sub_100006960(v1, 1, 1, v57);
    uint64_t v58 = sub_1001141CC(&qword_10015B3C8, (void (*)(uint64_t))type metadata accessor for RequestManager);
    uint64_t v59 = (void *)swift_allocObject();
    v59[2] = v3;
    v59[3] = v58;
    v59[4] = v5;
    v59[5] = v3;
    sub_1000B7908();
    swift_bridgeObjectRetain();
    sub_100003730(v1, (uint64_t)&unk_10015F908, (uint64_t)v59);
    swift_release();
    sub_10002FAC4();
    return;
  }
  os_log_t v62 = v17;
  uint64_t v63 = v1;
  uint64_t v64 = v3;
  uint64_t v18 = (uint8_t *)sub_100030314();
  uint64_t v60 = sub_10002FF90();
  uint64_t v79 = v60;
  uint64_t v61 = v18;
  *(_DWORD *)uint64_t v18 = 136315138;
  uint64_t v19 = sub_100102368(v5);
  if (!v19)
  {
LABEL_25:
    uint64_t v51 = v61;
    uint64_t v52 = Array.description.getter();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    v74[0] = sub_10001DF20(v52, v54, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    os_log_t v55 = v62;
    _os_log_impl((void *)&_mh_execute_header, v62, BYTE4(v65), "Foreground requests are blocked from running; will preemptively cancel background requests %s",
      v51,
      0xCu);
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_100043CF4();
    v56();
    uint64_t v1 = v63;
    uint64_t v3 = v64;
    goto LABEL_26;
  }
  uint64_t v20 = v19;
  uint64_t v78 = _swiftEmptyArrayStorage;
  sub_10001F138(0, v19 & ~(v19 >> 63), 0);
  unint64_t v70 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = __CocoaSet.startIndex.getter();
    char v23 = 1;
  }
  else
  {
    uint64_t v21 = sub_10002E3C4(v5);
    char v23 = v25 & 1;
  }
  uint64_t v75 = v21;
  uint64_t v76 = v22;
  LOBYTE(v77) = v23;
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v68 = v2;
    uint64_t v69 = v71 + 32;
    uint64_t v26 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    uint64_t v67 = v26;
    do
    {
      uint64_t v27 = v15;
      char v28 = v77;
      uint64_t v29 = sub_10011DF98();
      sub_10011BFDC(v29, v30, v31, v5, v32, v33, v34, v35, v60, (uint64_t)v61, (uint64_t)v62, v63, v64, v65, (uint64_t)v66, v67, v68, v69, v70,
        v71,
        v72,
        v73,
        v74[0],
        v74[1],
        v74[2],
        v74[3],
        v75,
        v76,
        v77,
        (uint64_t)v78);
      RequestMetadata.id.getter();
      swift_release();
      unint64_t v36 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001F138(0, v36[2] + 1, 1);
        unint64_t v36 = v78;
      }
      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_10001F138(v37 > 1, v38 + 1, 1);
        unint64_t v36 = v78;
      }
      v36[2] = v38 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v71 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v38, v73, v72);
      if (v70)
      {
        if ((v28 & 1) == 0) {
          goto LABEL_28;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        uint64_t v15 = v27;
        sub_100003A70(&qword_10015E708);
        int v50 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v50(v74, 0);
      }
      else
      {
        uint64_t v39 = sub_10011DF98();
        uint64_t v42 = sub_10002E2DC(v39, v40, v41, v5);
        uint64_t v44 = v43;
        char v46 = v45;
        uint64_t v47 = sub_10011DF98();
        sub_10000E60C(v47, v48, v49);
        uint64_t v75 = v42;
        uint64_t v76 = v44;
        LOBYTE(v77) = v46 & 1;
        uint64_t v15 = v27;
      }
      --v20;
    }
    while (v20);
    sub_10000E60C(v75, v76, v77);
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_100115900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100115920, a5, 0);
}

uint64_t sub_100115920()
{
  sub_1000086EC();
  type metadata accessor for _OSActivity();
  v0[4] = _OSActivity.__allocating_init(_:)();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_10015F920 + dword_10015F920);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100115A0C;
  uint64_t v2 = sub_100044070(v0[2]);
  return v4(v2);
}

uint64_t sub_100115A0C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100115AF0()
{
  sub_1000086E0();
  _OSActivity.close()();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100115B50(uint64_t *a1, uint64_t a2)
{
  v2[3] = a2;
  uint64_t v4 = type metadata accessor for RequestCancellationReason();
  void v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v2[7] = v5;
  v2[8] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *a1;
  v2[9] = v6;
  v2[10] = v7;
  return _swift_task_switch(sub_100115C78, 0, 0);
}

uint64_t sub_100115C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_100043744();
  a23 = v25;
  a24 = v26;
  sub_100043E90();
  a22 = v24;
  if (qword_10015B1F0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  os_log_type_t v28 = sub_100003B18(v27, (uint64_t)qword_10015F3E8);
  sub_10002FC78();
  os_log_type_t v29 = v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (sub_100057CB0(v31))
  {
    uint64_t v32 = (_DWORD *)sub_100030314();
    a13 = sub_10002FF90();
    *uint64_t v32 = 136315138;
    RequestMetadata.id.getter();
    sub_10000841C((unint64_t *)&qword_10015B418, &qword_10015B408);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100043AE0();
    uint64_t v34 = v33();
    v24[2] = sub_100044698(v34, v35, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_1000B969C((void *)&_mh_execute_header, v30, v29, "Cancelling request %s due to pending foreground request(s)");
    sub_100043EE8();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    swift_release_n();
  }

  sub_100043E68();
  v36();
  unint64_t v37 = (void *)swift_task_alloc();
  v24[11] = v37;
  *unint64_t v37 = v24;
  v37[1] = sub_100115ED4;
  sub_100044070(v24[3]);
  sub_100043638();
  return sub_100120804(v38, v39);
}

uint64_t sub_100115ED4()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100043924();
  v3();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v4();
}

uint64_t sub_100116010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001160D4, 0, 0);
}

uint64_t sub_1001160D4()
{
  sub_10002FC60();
  sub_10011E18C();
  RequestMetadata.id.getter();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10011E3BC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10011D02C;
  uint64_t v3 = sub_10011D78C();
  return v4(v3);
}

uint64_t sub_1001161D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = sub_100003A70(&qword_10015B408);
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_100116294, 0, 0);
}

uint64_t sub_100116294()
{
  sub_10002FC60();
  sub_10011E18C();
  RequestMetadata.id.getter();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10011E3BC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100116390;
  uint64_t v3 = sub_10011D78C();
  return v4(v3);
}

uint64_t sub_100116390()
{
  sub_1000086EC();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100043EDC();
  v4(v3);
  swift_task_dealloc();
  sub_10000EF7C();
  return v5();
}

uint64_t sub_1001164B0()
{
  sub_1000086EC();
  uint64_t v1 = v0;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1000086AC(v3);
  void *v4 = v5;
  v4[1] = sub_10011D038;
  return v7(v1);
}

uint64_t sub_100116580(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10011665C;
  return v6(a1);
}

uint64_t sub_10011665C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_1000304E0();
  return v3();
}

unint64_t sub_100116720(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

#error "10011685C: call analysis failed (funcsize=124)"

void sub_100116944()
{
  sub_10011E0C0();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 > *(void *)(v1 + 24) >> 1)
  {
    sub_1000F585C();
    uint64_t v1 = v7;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_10011E098();
  if (v9 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001DA74(v6 + 32, v2, v1 + 16 * v8 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v10 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v10, v2);
  uint64_t v11 = v10 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100116A08()
{
  sub_10011E0C0();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 > *(void *)(v1 + 24) >> 1)
  {
    sub_1000F5CA0();
    uint64_t v1 = v7;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_10011E098();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001DCC8(v6 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v9 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100116AD0(uint64_t a1)
{
  return sub_1001170B0(a1, sub_10001DA5C, &unk_10015F9D0, &unk_10015F9C8, sub_10011AA90);
}

void sub_100116B0C()
{
  sub_10011D4A4();
  if (*(void *)(v0 + 16))
  {
    sub_100003A70(&qword_10015CFC8);
    uint64_t v1 = (const void *)sub_10011DBB8();
    j__malloc_size(v1);
    sub_10011D2A8();
    sub_10011DBA0(v2);
    sub_10011ADA0(v3, v4, v5, v6);
    sub_10011DD70();
    sub_10011D1C0();
    if (!v7) {
      __break(1u);
    }
  }
  sub_10011D488();
}

void *sub_100116B88(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100003A70(&qword_10015CFC8);
    uint64_t v3 = (void *)sub_10011DBB8();
    j__malloc_size(v3);
    sub_10011D2A8();
    v3[2] = v2;
    v3[3] = v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10011B4AC((uint64_t)&v7, v3 + 4, v2, a1);
  uint64_t result = (void *)sub_10002EAF0();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void sub_100116C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10011D4A4();
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (!v29) {
    goto LABEL_9;
  }
  uint64_t v30 = v27;
  sub_100003A70(&qword_10015B7B8);
  uint64_t v31 = type metadata accessor for Assertion.DaemonRep();
  sub_10002FA4C(v31);
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v36 = (void *)swift_allocObject();
  size_t v37 = j__malloc_size(v36);
  if (v33)
  {
    BOOL v38 = v37 - v35 == 0x8000000000000000 && v33 == -1;
    if (!v38)
    {
      v36[2] = v29;
      v36[3] = 2 * ((uint64_t)(v37 - v35) / v33);
      sub_10011B7C4(&a10, (uint64_t)v36 + v35, v29, v30);
      sub_10011DD4C();
      sub_10011D1C0();
      if (!v38) {
        __break(1u);
      }
LABEL_9:
      sub_10011D488();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100116D54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v7)
  {
    sub_10011DF58();
    if (v8 ^ v9 | v17) {
      goto LABEL_11;
    }
    sub_100003A70(&qword_10015BA38);
    uint64_t v10 = type metadata accessor for InferenceProviderDescriptor();
    sub_10002FA4C(v10);
    uint64_t v12 = *(void *)(v11 + 72);
    unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    if (v12)
    {
      BOOL v17 = v16 - v14 == 0x8000000000000000 && v12 == -1;
      if (!v17)
      {
        v15[2] = v7;
        v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_11:
        if (v6 != v4)
        {
          uint64_t v18 = type metadata accessor for InferenceProviderDescriptor();
          sub_10002FA4C(v18);
          sub_10001DB3C(v5 + *(void *)(v19 + 72) * v4, v7);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

void sub_100116E90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v7)
  {
    sub_10011DF58();
    if (v9 ^ v10 | v8)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100003A70(&qword_10015B810);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v7;
      _DWORD v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
    }
    if (v6 != v4)
    {
      sub_10001DB54(v5 + 40 * v4, v7, (unint64_t)(v11 + 4));
      return;
    }
    goto LABEL_10;
  }
}

void sub_100116F4C()
{
  sub_10011D4A4();
  if (*(void *)(v0 + 16))
  {
    sub_100003A70(&qword_10015B718);
    uint64_t v1 = (const void *)sub_10011DBB8();
    size_t v2 = j__malloc_size(v1);
    sub_10011DBA0(2 * ((uint64_t)(v2 - 32) / 16));
    sub_10011BB0C(v3, v4, v5, v6);
    sub_10011DD70();
    sub_10011D1C0();
    if (!v7) {
      __break(1u);
    }
  }
  sub_10011D488();
}

void sub_100116FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10011D4A4();
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    sub_100003A70(&qword_10015D340);
    uint64_t v31 = (void *)swift_allocObject();
    size_t v32 = j__malloc_size(v31);
    void v31[2] = v29;
    v31[3] = 2 * ((uint64_t)(v32 - 32) / 40);
    sub_10011BD0C((uint64_t)&a10, (uint64_t)(v31 + 4), v29, v30);
    sub_10011DD4C();
    sub_10011D1C0();
    if (!v33) {
      __break(1u);
    }
  }
  sub_10011D488();
}

uint64_t sub_100117074(uint64_t a1)
{
  return sub_1001170B0(a1, sub_10001DD88, &unk_10015F978, &unk_10015F970, sub_10011AB50);
}

#error "100117144: call analysis failed (funcsize=62)"

void sub_1001171AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    sub_10011DF58();
    if (!(v9 ^ v10 | v8))
    {
      sub_100003A70(&qword_10015CFC8);
      uint64_t v11 = (void *)sub_10011DBB8();
      j__malloc_size(v11);
      sub_10011D2A8();
      v11[2] = v7;
      _DWORD v11[3] = v12;
    }
    if (v6 != v4)
    {
      sub_10001DD88(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

#error "1001172E8: call analysis failed (funcsize=82)"

#error "1001174A4: call analysis failed (funcsize=82)"

#error "1001175F0: call analysis failed (funcsize=82)"

uint64_t sub_100117634(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 16 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 16 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100028D20();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 16 * v6);
  sub_10011812C(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

void sub_10011776C()
{
}

void sub_10011779C()
{
}

void sub_1001177CC()
{
  sub_10002FAAC();
  uint64_t v26 = v2;
  uint64_t v29 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t v10 = v9;
  uint64_t v11 = sub_100003A70(v6);
  sub_10000ED60();
  uint64_t v27 = v12;
  __chkstk_darwin(v13, v14);
  sub_10006FE24();
  uint64_t v15 = *v1;
  sub_10000841C(v5, v7);
  swift_bridgeObjectRetain();
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
  unint64_t v18 = v16 & ~v17;
  if ((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    uint64_t v28 = ~v17;
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16);
    uint64_t v20 = *(void *)(v27 + 72);
    while (1)
    {
      v19(v0, *(void *)(v15 + 48) + v20 * v18, v11);
      sub_10000841C(v29, v7);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100043924();
      v22();
      if (v21) {
        break;
      }
      unint64_t v18 = (v18 + 1) & v28;
      if (((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v8;
    uint64_t v30 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26();
      uint64_t v25 = v30;
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v10, *(void *)(v25 + 48) + v20 * v18, v11);
    sub_1001182DC();
    *uint64_t v8 = v30;
    swift_bridgeObjectRelease();
    uint64_t v23 = 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v23 = 1;
  }
  sub_100006960(v10, v23, 1, v11);
  sub_10002FAC4();
}

uint64_t sub_100117A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = __CocoaSet.count.getter();
  uint64_t v6 = swift_unknownObjectRetain();
  uint64_t v7 = sub_100022C48(v6, v5);
  Hasher.init(_seed:)();
  swift_retain();
  sub_1000C95D4();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    type metadata accessor for InferenceProviderAsset(0);
    uint64_t v11 = swift_retain();
    sub_1000C9418(v11, a2, v12, v13, v14, v15, v16, v17, v45, v48, v51, v54, v57, v60, v63, v66, v69, v7, v75, v78);
    char v19 = v18;
    swift_release();
    if (v19)
    {
LABEL_6:
      swift_release();
      uint64_t v30 = *(void *)(*(void *)(v7 + 48) + 8 * v10);
      sub_100117F80(v10, (uint64_t)sub_1000C95D4, v31, v32, v33, v34, v35, v36, v46, v49, v52, v55, v58, v61, v64, v67, v70, v72, v76,
        v79,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88,
        vars0,
        vars8);
      sub_1000C9418(a2, v30, v37, v38, v39, v40, v41, v42, v47, v50, v53, v56, v59, v62, v65, v68, v71, v73, v77, v80);
      if (v43)
      {
        *uint64_t v3 = v74;
        return v30;
      }
      __break(1u);
    }
    else
    {
      uint64_t v20 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v20;
        if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          break;
        }
        uint64_t v21 = swift_retain();
        sub_1000C9418(v21, a2, v22, v23, v24, v25, v26, v27, v46, v49, v52, v55, v58, v61, v64, v67, v70, v72, v76, v79);
        char v29 = v28;
        swift_release();
        if (v29) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100117C08()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_100022ED4(v3, v2);
  uint64_t v28 = v4;
  Hasher.init(_seed:)();
  swift_retain();
  sub_1000E6F68();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    type metadata accessor for DaemonSession(0);
    swift_retain();
    char v8 = sub_1000E6E54();
    swift_release();
    if (v8)
    {
LABEL_6:
      swift_release();
      uint64_t v11 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_100117F80(v7, (uint64_t)sub_1000E6F68, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v30,
        v31,
        v32,
        v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        vars0,
        vars8);
      if (sub_1000E6E54())
      {
        *uint64_t v1 = v29;
        return v11;
      }
      __break(1u);
    }
    else
    {
      uint64_t v9 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        swift_retain();
        char v10 = sub_1000E6E54();
        swift_release();
        if (v10) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100117DC4()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_100022C90(v3, v2);
  uint64_t v28 = v4;
  Hasher.init(_seed:)();
  swift_retain();
  sub_100121BC0();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    type metadata accessor for DaemonRequest();
    swift_retain();
    char v8 = sub_100121AB0();
    swift_release();
    if (v8)
    {
LABEL_6:
      swift_release();
      uint64_t v11 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_100117F80(v7, (uint64_t)sub_100121BC0, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v30,
        v31,
        v32,
        v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        vars0,
        vars8);
      if (sub_100121AB0())
      {
        *uint64_t v1 = v29;
        return v11;
      }
      __break(1u);
    }
    else
    {
      uint64_t v9 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        swift_retain();
        char v10 = sub_100121AB0();
        swift_release();
        if (v10) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100117F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_100030064();
  a29 = v31;
  a30 = v34;
  int64_t v35 = v32;
  uint64_t v36 = *v30;
  uint64_t v37 = *v30 + 56;
  uint64_t v38 = -1 << *(unsigned char *)(*v30 + 32);
  unint64_t v39 = (v32 + 1) & ~v38;
  if (((1 << v39) & *(void *)(v37 + 8 * (v39 >> 6))) != 0)
  {
    uint64_t v40 = v33;
    uint64_t v41 = ~v38;
    swift_retain();
    uint64_t v42 = _HashTable.previousHole(before:)();
    if ((*(void *)(v37 + 8 * (v39 >> 6)) & (1 << v39)) != 0)
    {
      unint64_t v43 = (v42 + 1) & v41;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        v40(&a10);
        Swift::Int v44 = Hasher._finalize()();
        swift_release();
        Swift::Int v45 = v44 & v41;
        if (v35 >= (uint64_t)v43)
        {
          if (v45 >= v43 && v35 >= v45)
          {
LABEL_15:
            uint64_t v48 = *(void *)(v36 + 48);
            uint64_t v49 = (void *)(v48 + 8 * v35);
            uint64_t v50 = (void *)(v48 + 8 * v39);
            BOOL v51 = v35 != v39 || v49 >= v50 + 1;
            int64_t v35 = v39;
            if (v51)
            {
              *uint64_t v49 = *v50;
              int64_t v35 = v39;
            }
          }
        }
        else if (v45 >= v43 || v35 >= v45)
        {
          goto LABEL_15;
        }
        unint64_t v39 = (v39 + 1) & v41;
      }
      while (((*(void *)(v37 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) != 0);
    }
    *(void *)(v37 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v35) - 1;
    swift_release();
  }
  else
  {
    *(void *)(v37 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v32) - 1;
  }
  uint64_t v52 = *(void *)(v36 + 16);
  BOOL v53 = __OFSUB__(v52, 1);
  uint64_t v54 = v52 - 1;
  if (v53)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v36 + 16) = v54;
    ++*(_DWORD *)(v36 + 36);
    sub_100030080();
  }
}

unint64_t sub_10011812C(unint64_t result)
{
  Swift::Int v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = 16 * v6;
        Swift::UInt v11 = *(void *)(*(void *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Swift::Int v12 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
            uint64_t v17 = (_OWORD *)(v15 + v10);
            BOOL v18 = 16 * v2 != v10 || v16 >= v17 + 1;
            Swift::Int v2 = v6;
            if (v18)
            {
              *uint64_t v16 = *v17;
              Swift::Int v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1001182DC()
{
  sub_10002FAAC();
  int64_t v35 = v1;
  uint64_t v36 = v2;
  int64_t v4 = v3;
  sub_100003A70(v1);
  sub_10000ED60();
  uint64_t v6 = v5;
  __chkstk_darwin(v7, v8);
  sub_100057F20();
  uint64_t v9 = *v0;
  uint64_t v10 = *v0 + 56;
  uint64_t v11 = -1 << *(unsigned char *)(*v0 + 32);
  unint64_t v12 = (v4 + 1) & ~v11;
  if (((1 << v12) & *(void *)(v10 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v33 = v0;
    uint64_t v13 = ~v11;
    swift_retain();
    uint64_t v14 = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v34 = (v14 + 1) & v13;
      uint64_t v37 = *(void *)(v6 + 72);
      do
      {
        uint64_t v15 = v10;
        int64_t v16 = v37 * v12;
        sub_100069DF4();
        v17();
        uint64_t v18 = v9;
        sub_10000841C(v36, v35);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        sub_1000303D4();
        v20();
        unint64_t v21 = v19 & v13;
        if (v4 >= (uint64_t)v34)
        {
          if (v21 < v34 || v4 < (uint64_t)v21)
          {
LABEL_20:
            uint64_t v9 = v18;
            goto LABEL_24;
          }
        }
        else if (v21 < v34 && v4 < (uint64_t)v21)
        {
          goto LABEL_20;
        }
        uint64_t v9 = v18;
        uint64_t v23 = *(void *)(v18 + 48);
        int64_t v24 = v37 * v4;
        unint64_t v25 = v23 + v37 * v4;
        unint64_t v26 = v23 + v16 + v37;
        if (v37 * v4 < v16 || v25 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack();
LABEL_23:
          int64_t v4 = v12;
          goto LABEL_24;
        }
        int64_t v4 = v12;
        if (v24 != v16)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_23;
        }
LABEL_24:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v10 = v15;
      }
      while (((*(void *)(v15 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    *(void *)(v10 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v4) - 1;
    swift_release();
    uint64_t v0 = v33;
  }
  else
  {
    *(void *)(v10 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v4) - 1;
  }
  uint64_t v29 = *v0;
  uint64_t v30 = *(void *)(*v0 + 16);
  BOOL v31 = __OFSUB__(v30, 1);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v29 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
    sub_10002FAC4();
  }
}

uint64_t sub_100118574(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v2 = type metadata accessor for InferenceProviderDescriptor();
    sub_1000301E0(v2);
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001185F0(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_100118650(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    type metadata accessor for UUID();
    return swift_retain();
  }
  __break(1u);
  return result;
}

unint64_t sub_1001186EC(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > result)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

void *sub_100118710(void *(*a1)(uint64_t *__return_ptr, unint64_t, void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t result = a1(&v8, a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), *(void *)(a3 + 16));
  if (!v3) {
    return (void *)v8;
  }
  return result;
}

void sub_1001187B4()
{
  sub_10002FAAC();
  uint64_t v15 = v1;
  uint64_t v2 = type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  uint64_t v4 = v3;
  __chkstk_darwin(v5, v6);
  sub_100030964();
  sub_1001141CC(&qword_10015DC28, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_10011D838();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v8 = _HashTable.BucketIterator.currentValue.getter();
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      uint64_t v11 = *(void *)(v4 + 72);
      do
      {
        v10(v0, v15 + v11 * v8, v2);
        sub_1001141CC(&qword_10015DC20, (void (*)(uint64_t))&type metadata accessor for InferenceProviderDescriptor);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_1000303D4();
        v13();
        if (v12) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v8 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v14 & 1) == 0);
    }
    sub_10002FAC4();
  }
}

void sub_1001189D0()
{
  sub_10011DA54();
  AssetInferenceProvider.hash(into:)();
  Hasher._finalize()();
  sub_10011D838();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_10011E2BC();
    uint64_t v3 = sub_10011DBD0();
    sub_10011D76C(v3, v4, v5, v6, v7, v8, v9, v10, v30, v32, v34, v36, v37, v39, v40, v42, v43, v44, v45, v46, v47, v48);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = *v1;
      uint64_t v13 = v1[1];
      do
      {
        uint64_t v14 = v0 + 40 * v3;
        uint64_t v16 = *(void *)(v14 + 16);
        uint64_t v15 = *(void *)(v14 + 24);
        int v17 = *(unsigned __int8 *)(v14 + 32);
        BOOL v18 = *(void *)v14 == v12 && *(void *)(v14 + 8) == v13;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v19 = v1[3];
          if (v15)
          {
            if (v19)
            {
              BOOL v20 = v16 == v1[2] && v15 == v19;
              if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_18:
                if (v17 == (v1[4] & 1)) {
                  return;
                }
              }
            }
          }
          else if (!v19)
          {
            goto LABEL_18;
          }
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v3 = sub_10011D654(v21, v22, v23, v24, v25, v26, v27, v28, v31, v33, v35, v38, v41);
      }
      while ((v29 & 1) == 0);
    }
  }
}

uint64_t sub_100118AFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v28 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001141CC(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = 1 << *a4;
  BOOL v14 = __OFSUB__(v13, 1);
  uint64_t v15 = v13 - 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = v15 & result;
    uint64_t v17 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    *(void *)&long long v37 = a4;
    *((void *)&v37 + 1) = a5;
    *(void *)&long long v38 = v16;
    *((void *)&v38 + 1) = v17;
    *(void *)&long long v39 = v18;
    *((void *)&v39 + 1) = v19;
    char v40 = 0;
    uint64_t v20 = _HashTable.BucketIterator.currentValue.getter();
    long long v29 = v37;
    long long v30 = v38;
    long long v31 = v39;
    char v32 = v40;
    if ((v21 & 1) == 0)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      uint64_t v22 = v8 + 16;
      uint64_t v23 = v24;
      uint64_t v25 = *(void *)(v22 + 56);
      do
      {
        v23(v11, v28 + v25 * v20, v7);
        sub_1001141CC(&qword_10015B7F8, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v22 - 8))(v11, v7);
        if (v26) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        long long v33 = v29;
        long long v34 = v30;
        long long v35 = v31;
        char v36 = v32;
        uint64_t v20 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v27 & 1) == 0);
    }
    return v20;
  }
  return result;
}

void sub_100118D6C()
{
  sub_10011DA54();
  sub_1000C95D4();
  Hasher._finalize()();
  sub_10011D838();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    sub_10011E2BC();
    uint64_t v2 = sub_10011DBD0();
    sub_10011D76C(v2, v3, v4, v5, v6, v7, v8, v9, v38, v42, v46, v50, v53, v57, v60, v64, v67, v70, v73, v76, v79, v80);
    if ((v10 & 1) == 0)
    {
      type metadata accessor for InferenceProviderAsset(0);
      uint64_t v11 = swift_retain();
      sub_1000C9418(v11, v0, v12, v13, v14, v15, v16, v17, v39, v43, v47, v51, v54, v58, v61, v65, v68, v71, v74, v77);
      char v19 = v18;
      swift_release();
      if ((v19 & 1) == 0)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          sub_10011D654(v20, v21, v22, v23, v24, v25, v26, v27, v40, v44, v48, v55, v62);
          if (v28) {
            break;
          }
          uint64_t v29 = swift_retain();
          sub_1000C9418(v29, v0, v30, v31, v32, v33, v34, v35, v41, v45, v49, v52, v56, v59, v63, v66, v69, v72, v75,
            v78);
          char v37 = v36;
          swift_release();
        }
        while ((v37 & 1) == 0);
      }
    }
  }
}

uint64_t sub_100118E7C()
{
  uint64_t result = *v0;
  if (*v0)
  {
    uint64_t result = swift_isUniquelyReferenced_native();
    if (!result)
    {
      uint64_t result = *v0;
      if (*v0)
      {
        uint64_t v2 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v0 = v2;
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_100118EC8()
{
  return sub_100118F38();
}

uint64_t sub_100118EE0()
{
  sub_10011D848();
  sub_100119014();
  uint64_t v2 = v1;
  uint64_t result = swift_release();
  *uint64_t v0 = v2;
  return result;
}

uint64_t sub_100118F20()
{
  return sub_100118F38();
}

uint64_t sub_100118F38()
{
  uint64_t v1 = sub_10011D848();
  uint64_t v6 = sub_100118F84(v1, v2, v3, v4, v5);
  uint64_t result = swift_release();
  *uint64_t v0 = v6;
  return result;
}

uint64_t sub_100118F6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100118F84(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001190C8);
}

uint64_t sub_100118F84(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = static _HashTable.scale(forCapacity:)();
  uint64_t v11 = 0;
  if (a3) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a2;
  }
  if (v12 <= v10) {
    uint64_t v12 = v10;
  }
  if (v12 <= a4) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 >= 5)
  {
    uint64_t v11 = _HashTable.init(scale:reservedScale:)();
    a5(a1, v11 + 16, v11 + 32);
  }
  return v11;
}

void sub_100119014()
{
  sub_10002FAAC();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = static _HashTable.scale(forCapacity:)();
  if (v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v7 <= v6) {
    uint64_t v7 = v6;
  }
  if (v7 <= v1) {
    uint64_t v8 = v1;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 >= 5)
  {
    _HashTable.init(scale:reservedScale:)();
    sub_10011E10C();
    sub_100119248(v9, v10, v11, v12, v13, v14);
  }
  sub_10002FAC4();
}

uint64_t sub_1001190B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100118F84(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001193A0);
}

Swift::Int sub_1001190C8(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    Swift::Int v9 = result + 32;
    while (1)
    {
      Swift::Int v5 = v9 + 40 * v4;
      uint64_t v6 = *(void *)(v5 + 24);
      Swift::UInt8 v7 = *(unsigned char *)(v5 + 32);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      if (v6)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(v7);
      uint64_t result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v8 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_100119248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    a4(0);
    sub_1001141CC(a5, a6);
    uint64_t v9 = 0;
    while (1)
    {
      dispatch thunk of Hashable._rawHashValue(seed:)();
      sub_10011D838();
      if (v10) {
        break;
      }
      sub_100057ECC();
      if (_HashTable.UnsafeHandle._startIterator(bucket:)())
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      _HashTable.BucketIterator.currentValue.setter();
      if (++v9 == v6) {
        return;
      }
    }
    __break(1u);
  }
}

Swift::Int sub_1001193A0(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_retain();
      sub_1000C95D4();
      uint64_t result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v5 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      swift_release();
      if (v5)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1001194AC()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  sub_10011E50C();
  uint64_t v3 = type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  uint64_t v5 = v4;
  __chkstk_darwin(v6, v7);
  sub_100030964();
  sub_100069DF4();
  v8();
  uint64_t v9 = v0 + 1;
  uint64_t v10 = v2[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10001EDF8();
    uint64_t v10 = *v9;
  }
  unint64_t v12 = *(void *)(v10 + 16);
  if (v12 >= *(void *)(v10 + 24) >> 1)
  {
    sub_10001EDF8();
    uint64_t v10 = *v9;
  }
  *(void *)(v10 + 16) = v12 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v1, v3);
  v2[1] = v10;
  unint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *v2;
  if (!*v2)
  {
    if (v13 <= 0xF) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  sub_100043D2C();
  if (static _HashTable.maximumCapacity(forScale:)() < (uint64_t)v13)
  {
    if (v13 <= 0xF && (*(void *)(v14 + 24) & 0x3FLL) == 0)
    {
      swift_release();
      uint64_t *v2 = 0;
LABEL_14:
      sub_10002FAC4();
      return;
    }
LABEL_11:
    static _HashTable.scale(forCapacity:)();
    sub_100118EE0();
    goto LABEL_14;
  }
  sub_100118E7C();
  if (*v2)
  {
    sub_10011DBF4();
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_1001196A8(long long *a1)
{
  uint64_t v2 = v1;
  long long v16 = *a1;
  sub_1000B6AC8((uint64_t)(a1 + 1), (uint64_t)v15, &qword_10015DC30);
  uint64_t v6 = v1[1];
  uint64_t v4 = v1 + 1;
  uint64_t v5 = v6;
  sub_1000B6B28((uint64_t)&v16);
  sub_1000B6B28((uint64_t)v15);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v4 = v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10001EE5C(0, *(void *)(v5 + 16) + 1, 1);
    uint64_t v5 = *v4;
  }
  unint64_t v9 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v5 + 24);
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_10001EE5C((char *)(v8 > 1), v9 + 1, 1);
    uint64_t v5 = *v4;
  }
  *(void *)(v5 + 16) = v9 + 1;
  uint64_t v10 = v5 + 40 * v9;
  long long v11 = *a1;
  long long v12 = a1[1];
  *(unsigned char *)(v10 + 64) = *((unsigned char *)a1 + 32);
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  v2[1] = v5;
  unint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *v2;
  if (*v2)
  {
    sub_100043D2C();
    if (static _HashTable.maximumCapacity(forScale:)() < (uint64_t)v13)
    {
      if (v13 <= 0xF && (*(void *)(v14 + 24) & 0x3FLL) == 0)
      {
        uint64_t result = swift_release();
        uint64_t *v2 = 0;
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_100118E7C();
    if (*v2) {
      return sub_10011DBF4();
    }
    else {
      __break(1u);
    }
  }
  else if (v13 > 0xF)
  {
LABEL_11:
    static _HashTable.scale(forCapacity:)();
    return sub_100118F38();
  }
  return result;
}

uint64_t sub_100119830(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  unint64_t v9 = v2 + 1;
  uint64_t v10 = v2[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[1] = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10001EF44();
    uint64_t v10 = *v9;
  }
  unint64_t v12 = *(void *)(v10 + 16);
  if (v12 >= *(void *)(v10 + 24) >> 1)
  {
    sub_10001EF44();
    uint64_t v10 = *v9;
  }
  *(void *)(v10 + 16) = v12 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v8, v4);
  v2[1] = v10;
  unint64_t v14 = *(void *)(v10 + 16);
  uint64_t v15 = *v2;
  if (*v2)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() < (uint64_t)v14)
    {
      if (v14 <= 0xF && (*(void *)(v15 + 24) & 0x3FLL) == 0)
      {
        uint64_t result = swift_release();
        uint64_t *v2 = 0;
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = sub_100118E7C();
    if (*v2) {
      return sub_100119A98();
    }
    else {
      __break(1u);
    }
  }
  else if (v14 > 0xF)
  {
LABEL_11:
    static _HashTable.scale(forCapacity:)();
    return sub_100118EE0();
  }
  return result;
}

uint64_t sub_100119A98()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

void sub_100119B00(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3 + 1;
  uint64_t v8 = *(void *)(v3[1] + 16);
  uint64_t v9 = *v4;
  if (!*v4)
  {
    if (!v8) {
      goto LABEL_13;
    }
LABEL_12:
    sub_100119D6C(a1, a3);
    return;
  }
  swift_beginAccess();
  if ((*(void *)(v9 + 16) & 0x3FLL) == (*(void *)(v9 + 24) & 0x3FLL))
  {
    if (!v8) {
      goto LABEL_13;
    }
LABEL_8:
    sub_100118E7C();
    uint64_t v11 = *v4;
    if (*v4)
    {
      swift_retain();
      sub_100119E80(a2, (void *)(v11 + 16), v11 + 32, (uint64_t)v4);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        uint64_t v12 = v4[1];
        swift_retain();
        sub_10011A194(a1, a1 + 1, v12, (void *)(v11 + 16), v11 + 32);
        swift_release();
        swift_release();
        goto LABEL_12;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if (v8 > static _HashTable.minimumCapacity(forScale:)()) {
    goto LABEL_8;
  }
LABEL_13:
  sub_100119D6C(a1, a3);
  uint64_t v13 = *v7;
  if (v9)
  {
    swift_beginAccess();
    uint64_t v14 = *(void *)(v9 + 24) & 0x3FLL;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v14 || *(void *)(v13 + 16) >= 0x10uLL)
  {
    static _HashTable.scale(forCapacity:)();
    sub_100118EE0();
  }
  else
  {
    swift_release();
    uint64_t *v4 = 0;
  }
}

uint64_t sub_100119CEC(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_100119E6C(v3);
    uint64_t v3 = result;
    *uint64_t v1 = result;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = v5 - 1 - a1;
    uint64_t v8 = v3 + 8 * a1;
    uint64_t v9 = *(void *)(v8 + 32);
    sub_10001D6A0(v8 + 40, v7, v8 + 32);
    *(void *)(v3 + 16) = v6;
    specialized ContiguousArray._endMutation()();
    return v9;
  }
  return result;
}

void sub_100119D6C(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100119E58();
    uint64_t v5 = v6;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
    sub_10001D734(v11 + v10, v7 - 1 - a1);
    *(void *)(v5 + 16) = v7 - 1;
    uint64_t *v2 = v5;
  }
}

void sub_100119E44(uint64_t a1)
{
}

void sub_100119E58()
{
}

uint64_t sub_100119E6C(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

unint64_t sub_100119E80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  *(void *)&long long v37 = a2;
  *((void *)&v37 + 1) = a3;
  uint64_t v38 = a1;
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  uint64_t v41 = v14;
  char v42 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v15 = v39;
  if (v39)
  {
    uint64_t v16 = a3;
    char v17 = v42;
    uint64_t v18 = v40;
    uint64_t v19 = v41;
    uint64_t v20 = v38;
    long long v31 = v37;
    uint64_t v32 = v16;
    uint64_t v21 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
    long long v22 = v31;
    uint64_t v35 = v8 + 16;
    uint64_t v33 = v21;
    uint64_t v34 = v8 + 8;
    while (1)
    {
      long long v43 = v22;
      uint64_t v44 = v20;
      uint64_t v45 = v15;
      uint64_t v46 = v18;
      uint64_t v47 = v19;
      char v48 = v17 & 1;
      unint64_t result = _HashTable.BucketIterator.currentValue.getter();
      if (v24)
      {
LABEL_27:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v25 = *(void *)(v36 + 8);
      if (result >= *(void *)(v25 + 16)) {
        goto LABEL_25;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, v25+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * result, v7);
      sub_1001141CC(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      uint64_t v27 = 1 << *a2;
      if (__OFSUB__(v27, 1)) {
        goto LABEL_26;
      }
      uint64_t v28 = (v27 - 1) & v26;
      if (a1 >= v33)
      {
        if (v28 < v33 || a1 < v28) {
          goto LABEL_19;
        }
      }
      else if (v28 < v33 && a1 < v28)
      {
        goto LABEL_19;
      }
      _HashTable.BucketIterator.currentValue.getter();
      _HashTable.UnsafeHandle.subscript.setter();
      a1 = v20;
LABEL_19:
      _HashTable.BucketIterator.advance()();
      long long v22 = v37;
      uint64_t v20 = v38;
      uint64_t v15 = v39;
      uint64_t v18 = v40;
      uint64_t v19 = v41;
      char v17 = v42;
      if (!v39) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
    }
  }

  return _HashTable.UnsafeHandle.subscript.setter();
}

void sub_10011A194(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v87 = a5;
  uint64_t v85 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t v16 = sub_100003A70(&qword_10015EF80);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v80 - v22;
  uint64_t v24 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v24 < 1) {
    return;
  }
  unint64_t v25 = *(void *)(v85 + 16);
  if ((uint64_t)(v25 - v24) / 2 > a1)
  {
    if (static _HashTable.maximumCapacity(forScale:)() / 3 <= a1)
    {
      uint64_t v62 = v87;
      uint64_t v63 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v64 = 0;
      *(void *)&long long v88 = a4;
      *((void *)&v88 + 1) = v62;
      uint64_t v89 = 0;
      *(void *)&long long v90 = v63;
      *((void *)&v90 + 1) = v65;
      uint64_t v91 = v66;
      char v92 = 0;
      while (1)
      {
        long long v93 = v88;
        uint64_t v94 = v64;
        long long v95 = v90;
        uint64_t v96 = v91;
        char v97 = v92;
        uint64_t v67 = _HashTable.BucketIterator.currentValue.getter();
        if ((v68 & 1) == 0 && v67 < a1)
        {
          if (__OFADD__(v67, v24))
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
          _HashTable.BucketIterator.currentValue.setter();
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v64 = v89;
        if (!v89) {
          goto LABEL_54;
        }
      }
    }
    if (a1 < 0) {
      goto LABEL_73;
    }
    if (v25 < a1)
    {
LABEL_74:
      __break(1u);
      return;
    }
    if (a1)
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      uint64_t v83 = (void (**)(char *, char *, uint64_t))(v85
                                                          + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80)));
      uint64_t v84 = v26;
      uint64_t v81 = (void (**)(char *, char *, uint64_t))(v86 + 32);
      uint64_t v27 = (void (**)(char *, uint64_t))(v86 + 8);
      v86 += 16;
      uint64_t v82 = *(void (***)(char *, uint64_t))(v86 + 56);
      swift_retain();
      uint64_t v28 = 0;
      uint64_t v29 = v87;
      while (v28 != a1)
      {
        v84(v23, (char *)v83 + (void)v82 * v28, v8);
        sub_100006960((uint64_t)v23, 0, 1, v8);
        if (sub_100006AE8((uint64_t)v23, 1, v8) == 1) {
          goto LABEL_53;
        }
        (*v81)(v15, v23, v8);
        sub_1001141CC(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v31 = 1 << *a4;
        BOOL v32 = __OFSUB__(v31, 1);
        uint64_t v33 = v31 - 1;
        if (v32) {
          goto LABEL_63;
        }
        uint64_t v34 = v33 & v30;
        uint64_t v35 = _HashTable.UnsafeHandle._startIterator(bucket:)();
        *(void *)&long long v88 = a4;
        *((void *)&v88 + 1) = v29;
        uint64_t v89 = v34;
        *(void *)&long long v90 = v35;
        *((void *)&v90 + 1) = v36;
        uint64_t v91 = v37;
        char v92 = 0;
        if (v35)
        {
          char v38 = 0;
          uint64_t v39 = a4;
          uint64_t v40 = v87;
          do
          {
            *(void *)&long long v93 = v39;
            *((void *)&v93 + 1) = v40;
            uint64_t v94 = v34;
            *(void *)&long long v95 = v35;
            *((void *)&v95 + 1) = v36;
            uint64_t v96 = v37;
            char v97 = v38 & 1;
            uint64_t v41 = _HashTable.BucketIterator.currentValue.getter();
            if ((v42 & 1) == 0 && v41 == v28) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v40 = *((void *)&v88 + 1);
            uint64_t v39 = (void *)v88;
            uint64_t v34 = v89;
            uint64_t v36 = *((void *)&v90 + 1);
            uint64_t v35 = v90;
            uint64_t v37 = v91;
            char v38 = v92;
          }
          while ((void)v90);
        }
        if (__OFADD__(v28, v24)) {
          goto LABEL_64;
        }
        ++v28;
        _HashTable.BucketIterator.currentValue.setter();
        (*v27)(v15, v8);
        if (v28 == a1) {
          goto LABEL_52;
        }
      }
      goto LABEL_62;
    }
    swift_retain();
LABEL_52:
    sub_100006960((uint64_t)v23, 1, 1, v8);
LABEL_53:
    swift_release();
LABEL_54:
    uint64_t v76 = a4[1];
    if (!__OFSUB__(v76 >> 6, v24))
    {
      uint64_t v77 = 1 << *a4;
      BOOL v32 = __OFSUB__(v77, 1);
      uint64_t v78 = v77 - 1;
      if (!v32)
      {
        uint64_t v79 = (v78 & (((v76 >> 6) - v24) >> 63)) + (v76 >> 6) - v24;
        if (v79 < v78) {
          uint64_t v78 = 0;
        }
        a4[1] = a4[1] & 0x3FLL | ((v79 - v78) << 6);
        return;
      }
      goto LABEL_72;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  BOOL v32 = __OFSUB__(v25, a2);
  uint64_t v43 = v25 - a2;
  if (v32)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v43 >= static _HashTable.maximumCapacity(forScale:)() / 3)
  {
    uint64_t v69 = v87;
    uint64_t v70 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v71 = 0;
    *(void *)&long long v88 = a4;
    *((void *)&v88 + 1) = v69;
    uint64_t v89 = 0;
    *(void *)&long long v90 = v70;
    *((void *)&v90 + 1) = v72;
    uint64_t v91 = v73;
    char v92 = 0;
    do
    {
      long long v93 = v88;
      uint64_t v94 = v71;
      long long v95 = v90;
      uint64_t v96 = v91;
      char v97 = v92;
      uint64_t v74 = _HashTable.BucketIterator.currentValue.getter();
      if ((v75 & 1) == 0 && v74 >= a2)
      {
        if (__OFSUB__(v74, v24)) {
          goto LABEL_61;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v71 = v89;
    }
    while (v89);
  }
  else
  {
    uint64_t v81 = (void (**)(char *, char *, uint64_t))sub_100118650(a2, v85);
    uint64_t v85 = v46;
    if (v44 == v45 >> 1)
    {
LABEL_35:
      sub_100006960((uint64_t)v20, 1, 1, v8);
    }
    else
    {
      uint64_t v47 = v44;
      int64_t v48 = v45 >> 1;
      uint64_t v49 = v87;
      uint64_t v83 = (void (**)(char *, char *, uint64_t))(v86 + 32);
      uint64_t v84 = (void (*)(char *, char *, uint64_t))(v86 + 16);
      uint64_t v82 = (void (**)(char *, uint64_t))(v86 + 8);
      while (1)
      {
        if (v47 >= v48) {
          goto LABEL_65;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v20, v85 + *(void *)(v86 + 72) * v47, v8);
        sub_100006960((uint64_t)v20, 0, 1, v8);
        if (sub_100006AE8((uint64_t)v20, 1, v8) == 1) {
          break;
        }
        (*v83)(v12, v20, v8);
        sub_1001141CC(&qword_10015B7F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v50 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v51 = 1 << *a4;
        BOOL v32 = __OFSUB__(v51, 1);
        uint64_t v52 = v51 - 1;
        if (v32) {
          goto LABEL_66;
        }
        uint64_t v53 = v52 & v50;
        uint64_t v54 = _HashTable.UnsafeHandle._startIterator(bucket:)();
        *(void *)&long long v88 = a4;
        *((void *)&v88 + 1) = v49;
        uint64_t v89 = v53;
        *(void *)&long long v90 = v54;
        *((void *)&v90 + 1) = v55;
        uint64_t v91 = v56;
        char v92 = 0;
        if (v54)
        {
          char v57 = 0;
          uint64_t v58 = a4;
          uint64_t v59 = v87;
          do
          {
            *(void *)&long long v93 = v58;
            *((void *)&v93 + 1) = v59;
            uint64_t v94 = v53;
            *(void *)&long long v95 = v54;
            *((void *)&v95 + 1) = v55;
            uint64_t v96 = v56;
            char v97 = v57 & 1;
            uint64_t v60 = _HashTable.BucketIterator.currentValue.getter();
            if ((v61 & 1) == 0 && v60 == a2) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v59 = *((void *)&v88 + 1);
            uint64_t v58 = (void *)v88;
            uint64_t v53 = v89;
            uint64_t v55 = *((void *)&v90 + 1);
            uint64_t v54 = v90;
            uint64_t v56 = v91;
            char v57 = v92;
          }
          while ((void)v90);
        }
        if (__OFSUB__(a2, v24))
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        _HashTable.BucketIterator.currentValue.setter();
        (*v82)(v12, v8);
        BOOL v32 = __OFADD__(a2++, 1);
        if (v32) {
          goto LABEL_68;
        }
        if (++v47 == v48) {
          goto LABEL_35;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

void sub_10011A8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10011D4A4();
  a25 = v26;
  a26 = v28;
  uint64_t v30 = v29;
  BOOL v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  unint64_t v37 = v27;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  unint64_t v42 = v27 >> 62;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
LABEL_13:
      sub_100044474();
      sub_10011D488();
      return;
    }
  }
  if (v41)
  {
    if (v42)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44 <= v39)
      {
        if (v43 >= 1)
        {
          uint64_t v45 = sub_10000841C(v34, v32);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v43; ++i)
          {
            uint64_t v47 = sub_100003A70(v32);
            int64_t v48 = (void (*)(char *, void))v30(&a11, i, v37, v47, v45);
            uint64_t v50 = *v49;
            swift_retain();
            v48(&a11, 0);
            *(void *)(v41 + 8 * i) = v50;
          }
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v39)
      {
        v36((v37 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10), v41);
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

uint64_t (*sub_10011AA90(uint64_t **a1, unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_10011ABEC(v6, a2, a3);
  return sub_10011AAF8;
}

uint64_t (*sub_10011AAFC())()
{
  uint64_t v1 = sub_10011E4A0();
  *uint64_t v0 = v1;
  sub_1000B98C4();
  v1[4] = sub_10011AC6C(v2, v3, v4);
  return sub_10011AAF8;
}

uint64_t (*sub_10011AB50())()
{
  uint64_t v1 = sub_10011E4A0();
  *uint64_t v0 = v1;
  sub_1000B98C4();
  v1[4] = sub_10011AD38(v2, v3, v4);
  return sub_10011AAF8;
}

void sub_10011ABA4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_10011ABEC(uint64_t *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v4 = a3 & 0xC000000000000001;
  sub_100116720(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v4) {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v5 = swift_retain();
  }
  *a1 = v5;
  return j__s13modelmanagerd22DaemonInferenceMonitorVwxx;
}

uint64_t (*sub_10011AC6C(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  sub_10011DB24(a1, a2, a3);
  if (v4) {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v5 = swift_retain();
  }
  *unint64_t v3 = v5;
  return destroy for DaemonInferenceMonitor;
}

uint64_t sub_10011ACD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RequestManagerPolicy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_10011AD38(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  sub_10011DB24(a1, a2, a3);
  if (v4) {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v5 = swift_retain();
  }
  *unint64_t v3 = v5;
  return j__s13modelmanagerd22DaemonInferenceMonitorVwxx;
}

uint64_t sub_10011ADA0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    unint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10011AF9C()
{
  sub_100008130(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10011AFFC()
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  sub_10011D954();
  sub_10002FEAC();
  return sub_1001115C0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10011B0A4()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000E1FC;
  uint64_t v3 = sub_10000875C();
  return sub_1001161D0(v3, v4, v5, v6);
}

uint64_t sub_10011B134()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10011B184()
{
  sub_10002FF08();
  sub_10002FC60();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  sub_10011D954();
  sub_10002FEAC();
  return sub_10010ED30(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10011B228()
{
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_10010F030(v3, v4, v5, v6, v7);
}

uint64_t sub_10011B2C0()
{
  return sub_10011000C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10011B2C8()
{
  return sub_10011C970((void (*)(void))&_swift_release);
}

uint64_t sub_10011B2E0()
{
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_10011012C(v3, v4, v5, v6, v7);
}

uint64_t sub_10011B37C()
{
  sub_1000086EC();
  sub_100032348();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000875C();
  return sub_100116010(v3, v4, v5, v6);
}

uint64_t sub_10011B40C()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_100008690();
  return v4(v3);
}

uint64_t sub_10011B4A4(uint64_t a1)
{
  return sub_10010CFC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10011B4AC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for InferenceProviderAsset(0);
    sub_1001141CC(&qword_10015B908, (void (*)(uint64_t))type metadata accessor for InferenceProviderAsset);
    unint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v26;
    uint64_t v8 = v27;
    uint64_t v9 = v28;
    int64_t v10 = v29;
    unint64_t v11 = v30;
  }
  else
  {
    int64_t v10 = 0;
    uint64_t v12 = -1 << *(unsigned char *)(a4 + 32);
    uint64_t v8 = a4 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v11 = v14 & *(void *)(a4 + 56);
  }
  if (!a2)
  {
    uint64_t v15 = 0;
LABEL_47:
    *uint64_t v7 = v4;
    v7[1] = v8;
    void v7[2] = v9;
    v7[3] = v10;
    v7[4] = v11;
    return v15;
  }
  if (!a3)
  {
    uint64_t v15 = 0;
    goto LABEL_47;
  }
  if (a3 < 0) {
    goto LABEL_49;
  }
  uint64_t v15 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_46;
      }
      type metadata accessor for InferenceProviderAsset(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v18 = v25;
      unint64_t result = swift_unknownObjectRelease();
      if (!v25) {
        goto LABEL_46;
      }
      goto LABEL_28;
    }
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v10 << 6);
      goto LABEL_27;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v19 >= v24)
    {
      unint64_t v11 = 0;
      goto LABEL_46;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v19);
    if (v20) {
      goto LABEL_26;
    }
    int64_t v21 = v10 + 2;
    if (v10 + 2 >= v24)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_46;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v21);
    if (!v20)
    {
      if (v10 + 3 >= v24) {
        goto LABEL_43;
      }
      unint64_t v20 = *(void *)(v8 + 8 * (v10 + 3));
      if (v20)
      {
        int64_t v19 = v10 + 3;
        goto LABEL_26;
      }
      int64_t v21 = v10 + 4;
      if (v10 + 4 >= v24)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_46;
      }
      unint64_t v20 = *(void *)(v8 + 8 * v21);
      if (!v20)
      {
        int64_t v19 = v10 + 5;
        if (v10 + 5 >= v24)
        {
LABEL_43:
          unint64_t v11 = 0;
          int64_t v10 = v21;
          goto LABEL_46;
        }
        unint64_t v20 = *(void *)(v8 + 8 * v19);
        if (!v20)
        {
          int64_t v22 = v10 + 6;
          while (v22 < v24)
          {
            unint64_t v20 = *(void *)(v8 + 8 * v22++);
            if (v20)
            {
              int64_t v19 = v22 - 1;
              goto LABEL_26;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v24 - 1;
          goto LABEL_46;
        }
        goto LABEL_26;
      }
    }
    int64_t v19 = v21;
LABEL_26:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v10 = v19;
LABEL_27:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
    unint64_t result = swift_retain();
    if (!v18) {
      goto LABEL_46;
    }
LABEL_28:
    ++v15;
    *a2++ = v18;
    if (v15 == a3)
    {
      uint64_t v15 = a3;
LABEL_46:
      uint64_t v9 = v23;
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10011B7C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Assertion.DaemonRep();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v44 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11, v13);
  uint64_t v43 = (char *)&v34 - v15;
  uint64_t v45 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v39 = v17;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v33 = v39;
    *a1 = v45;
    a1[1] = v33;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v36 = -1 << *(unsigned char *)(v17 - 24);
  unint64_t v37 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  int64_t v38 = (unint64_t)(63 - v19) >> 6;
  int64_t v35 = v38 - 1;
  uint64_t v42 = a3;
  int64_t v24 = v43;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v26 = v25 | (v22 << 6);
  while (1)
  {
    ++v23;
    unint64_t v30 = v44;
    uint64_t v31 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v44, *(void *)(v45 + 48) + v31 * v26, v8);
    BOOL v32 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v32(v24, v30, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(a2, v24, v8);
    a3 = v42;
    if (v23 == v42) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v38) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v39 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v22 = v27;
  }
  v22 += 2;
  if (v27 + 1 >= v38)
  {
    unint64_t v21 = 0;
    int64_t v22 = v27;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v22);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v38) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v22 = v27 + 3;
  if (v27 + 3 >= v38)
  {
    unint64_t v21 = 0;
    int64_t v22 = v27 + 2;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v22);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v22;
    goto LABEL_18;
  }
  int64_t v29 = v27 + 4;
  if (v27 + 4 >= v38)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v36;
    a1 = v37;
    goto LABEL_38;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v38)
    {
      unint64_t v21 = 0;
      int64_t v22 = v35;
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v39 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10011BB0C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10011BD0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    sub_100042C34(*(void *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_10000831C(v21, (uint64_t)v22);
    uint64_t result = sub_10000831C(v22, v11);
    v11 += 40;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v20;
      goto LABEL_36;
    }
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_22;
  }
  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_22;
  }
  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10011BF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_10011BFDC(a1, a2, a3, a4, (uint64_t)type metadata accessor for InferenceProviderAsset, (uint64_t)sub_1000C95D4, (uint64_t)sub_1000C9418, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void sub_10011BF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_10011BFDC(a1, a2, a3, a4, (uint64_t)type metadata accessor for DaemonSession, (uint64_t)sub_1000E6F68, (uint64_t)sub_1000E6E54, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void sub_10011BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_10011BFDC(a1, a2, a3, a4, (uint64_t)type metadata accessor for DaemonRequest, (uint64_t)sub_100121BC0, (uint64_t)sub_100121AB0, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void sub_10011BFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_100030064();
  a29 = v30;
  a30 = v37;
  uint64_t v39 = v38;
  uint64_t v40 = v34;
  if ((v34 & 0xC000000000000001) == 0)
  {
    if (v33) {
      goto LABEL_10;
    }
    if (v31 < 0 || 1 << *(unsigned char *)(v34 + 32) <= v31)
    {
      __break(1u);
    }
    else if ((*(void *)(v34 + 8 * ((unint64_t)v31 >> 6) + 56) >> v31))
    {
      if (*(_DWORD *)(v34 + 36) == v32) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_10:
      uint64_t v42 = v36;
      uint64_t v43 = v35;
      sub_10011E4EC();
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(v40 + 36))
      {
        sub_10011E4EC();
        __CocoaSet.Index.element.getter();
        uint64_t v44 = sub_10011E4F8();
        v39(v44);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v45 = a9;
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        v43(&a9);
        Swift::Int v46 = Hasher._finalize()();
        uint64_t v47 = -1 << *(unsigned char *)(v40 + 32);
        uint64_t v48 = v46 & ~v47;
        sub_10011E410();
        if (v49)
        {
          uint64_t v50 = swift_retain();
          char v51 = v42(v50, v45);
          swift_release();
          if ((v51 & 1) == 0)
          {
            uint64_t v52 = ~v47;
            do
            {
              uint64_t v48 = (v48 + 1) & v52;
              sub_10011E410();
              if ((v53 & 1) == 0) {
                goto LABEL_22;
              }
              uint64_t v54 = swift_retain();
              char v55 = v42(v54, v45);
              swift_release();
            }
            while ((v55 & 1) == 0);
          }
          swift_release();
LABEL_17:
          swift_retain();
          goto LABEL_18;
        }
LABEL_22:
        swift_release();
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (v33)
  {
    sub_10011E4EC();
    __CocoaSet.element(at:)();
    uint64_t v41 = sub_10011E4F8();
    v39(v41);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
LABEL_18:
    sub_100030080();
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_10011C20C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000ED54;
  return sub_10010284C(a1, a2, v10, a4, a5);
}

uint64_t sub_10011C2D4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10000ED54;
  return sub_1001031C4(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_10011C3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11, v13);
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_retain();
    a2 = sub_100118AFC(a4, a1, a2, (void *)(a3 + 16), a3 + 32);
    char v18 = v17;
    uint64_t v20 = v19;
    uint64_t result = swift_release();
    char v21 = v18 & 1;
  }
  else if (a2)
  {
    uint64_t v31 = a4;
    uint64_t v29 = v5;
    uint64_t v30 = a2;
    uint64_t v28 = a5;
    a2 = 0;
    int64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v22 = v12 + 16;
    uint64_t v23 = v24;
    uint64_t v25 = *(void *)(v22 + 56);
    while (1)
    {
      v23(v16, a1, v11);
      sub_1001141CC(&qword_10015B7F8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 - 8))(v16, v11);
      if (v26) {
        break;
      }
      ++a2;
      a1 += v25;
      if (v30 == a2)
      {
        a2 = 0;
        break;
      }
    }
    uint64_t v20 = 0;
    char v21 = v26 ^ 1;
    a5 = v28;
  }
  else
  {
    uint64_t v20 = 0;
    char v21 = 1;
  }
  *(void *)a5 = a2;
  *(unsigned char *)(a5 + 8) = v21 & 1;
  *(void *)(a5 + 16) = v20;
  return result;
}

uint64_t sub_10011C5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10011C3A4(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 32), a3);
}

uint64_t sub_10011C5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10011E50C();
  v4(v3);
  sub_10002FC6C();
  uint64_t v5 = sub_100044790();
  v6(v5);
  return a2;
}

uint64_t sub_10011C61C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10002FC6C();
  sub_10000EFBC();
  v3();
  return a1;
}

uint64_t sub_10011C674(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011C6A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011C6D0()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10011C760;
  uint64_t v3 = sub_10011E3A8();
  return sub_100109798(v3, v4, v5);
}

uint64_t sub_10011C760()
{
  sub_1000086E0();
  uint64_t v2 = v1;
  sub_100008660();
  uint64_t v3 = *v0;
  sub_1000086D0();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_10011C830()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10011E3A8();
  return sub_100109950(v3, v4, v5);
}

uint64_t sub_10011C8C0()
{
  sub_1000086E0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1000086AC(v3);
  void *v4 = v5;
  v4[1] = sub_10000ED54;
  return sub_100109AEC(v2, v0);
}

void sub_10011C950()
{
}

uint64_t sub_10011C958()
{
  return sub_10011C970((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10011C970(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 32));
  swift_release();

  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_10011C9C8()
{
  sub_10000F01C();
  sub_10002FCD8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_10000EF88();
  return sub_100115900(v3, v4, v5, v6, v7);
}

uint64_t sub_10011CA60()
{
  sub_1000086E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000B73AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = (uint64_t *)sub_100044474();
  return sub_100115B50(v3, v4);
}

uint64_t sub_10011CAEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a3;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000ED54;
  return sub_100102C8C(a1, a2, v10, a4, a5);
}

uint64_t sub_10011CBB4()
{
  sub_10000F01C();
  sub_1000B7D7C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_1000B7144();
  return v4(v3);
}

uint64_t sub_10011CC50(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_10000ED54;
  return sub_100103368(a1, a2, a3, a4, a5, v12);
}

uint64_t sub_10011CD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10011E55C();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000086AC(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10000ED54;
  sub_10011D5EC();
  sub_10002FEAC();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10011CDB8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011CDF0()
{
  sub_1000086EC();
  sub_1000087EC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_100008690();
  return v4(v3);
}

uint64_t sub_10011CE84()
{
  sub_10000F01C();
  sub_1000B7D7C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000086AC(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10000ED54;
  uint64_t v3 = sub_1000B7144();
  return v4(v3);
}

uint64_t sub_10011CF24()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10011CF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10002FF08();
  sub_10002FC60();
  sub_10011E55C();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1000086AC(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_10000ED54;
  sub_10011D5EC();
  sub_10002FEAC();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_10011D000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10011C5A8(a1, a2, a3);
}

uint64_t sub_10011D03C()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_10011D088()
{
  return swift_task_dealloc();
}

uint64_t sub_10011D0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[29];
  sub_100006960(v2[30], a2, 1, v2[38]);
  return v3;
}

uint64_t sub_10011D118()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_10011D170()
{
  return swift_task_dealloc();
}

uint64_t sub_10011D1C0()
{
  return sub_10002EAF0();
}

uint64_t sub_10011D1EC()
{
  return sub_100006960(v1, 0, 1, v0);
}

uint64_t sub_10011D240()
{
  uint64_t v2 = v0[9];
  v0[22] = *(void *)(v0[16] + 8 * v1 + 32);
  return v2;
}

uint64_t sub_10011D284()
{
  return *(void *)(v0 + 96);
}

uint64_t sub_10011D2C0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011D304()
{
  return swift_slowAlloc();
}

uint64_t sub_10011D330()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_10011D354()
{
  return sub_100006AE8(v1, 1, v0);
}

uint64_t sub_10011D37C()
{
  return sub_100006AE8(v0, 1, v1);
}

uint64_t sub_10011D3A4()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_10011D3D8()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_10011D40C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 464) = a1;
  return swift_beginAccess();
}

uint64_t sub_10011D434()
{
  return sub_100043174(v0, v1, v2);
}

uint64_t sub_10011D450()
{
  return swift_retain();
}

uint64_t sub_10011D46C()
{
  return sub_100043174(v1, v0, v2);
}

uint64_t sub_10011D4D0()
{
  return swift_bridgeObjectRetain();
}

void sub_10011D4F0()
{
  *(void *)(v1 - 112) = v0 + 56;
}

uint64_t sub_10011D548()
{
  return sub_100006AE8(v0, 1, v1);
}

uint64_t sub_10011D56C()
{
  return *(void *)(v0 + 320);
}

uint64_t sub_10011D584()
{
  return v0;
}

uint64_t sub_10011D5AC()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_10011D5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(v2 + 192) + 72);
  *(void *)(v3 - 128) = v5;
  return v4 + v5 * a2;
}

uint64_t sub_10011D5EC()
{
  return v0;
}

uint64_t sub_10011D654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, long long a12, long long a13)
{
  *uint64_t v13 = a11;
  v13[1] = a12;
  v13[2] = a13;
  return _HashTable.BucketIterator.currentValue.getter();
}

uint64_t sub_10011D684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + v14) = v13;
  return a12;
}

uint64_t sub_10011D6A8()
{
  return *(void *)(*(void *)(v0 - 96) + 200);
}

uint64_t sub_10011D6CC()
{
  return 0;
}

uint64_t sub_10011D6F4()
{
  return *(void *)(v0 - 32);
}

uint64_t sub_10011D714()
{
  return swift_release();
}

uint64_t sub_10011D74C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 472) = a1;
  return RequestMetadata.id.getter();
}

__n128 sub_10011D76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22)
{
  return (__n128)a22;
}

uint64_t sub_10011D78C()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_10011D7AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011D7CC(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

void sub_10011D7F4()
{
  v0[53] = *(void *)(v0[14] + v0[48]);
}

uint64_t sub_10011D808@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10011D818()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_10011D828()
{
  return *(void *)(v0 + 240);
}

uint64_t sub_10011D848()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10011D868(uint64_t a1)
{
  return sub_100006AE8(a1, 1, v1);
}

uint64_t sub_10011D888()
{
  return v0;
}

void sub_10011D898()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_10011D8C0()
{
  return swift_beginAccess();
}

uint64_t sub_10011D8DC()
{
  return sub_100006AE8(v1, 1, v0);
}

void sub_10011D8F8(__n128 a1)
{
  *(__n128 *)(v1 + 40) = a1;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 32) = 1;
}

uint64_t sub_10011D938@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v3 | 0x3100;
  v2[11] = 1;
  v2[12] = a1;
  v2[13] = v1;
  return result;
}

uint64_t sub_10011D970()
{
  *(void *)(v1 - 80) = v0;
  return type metadata accessor for TaskPriority();
}

uint64_t sub_10011D9E8()
{
  return swift_dynamicCast();
}

uint64_t sub_10011DA2C()
{
  return type metadata accessor for AssetCost();
}

uint64_t sub_10011DA54()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_10011DA7C()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_10011DA98()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10011DAB0(uint64_t a1)
{
  return sub_100006AE8(a1, 1, v1);
}

void sub_10011DAF0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10011DB0C()
{
  return sub_100042EDC(v0, v1);
}

unint64_t sub_10011DB24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100116720(a2, (a3 & 0xC000000000000001) == 0, a3);
}

uint64_t sub_10011DB4C()
{
  return swift_retain();
}

uint64_t sub_10011DB90()
{
  return 0;
}

void sub_10011DBA0(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t sub_10011DBB8()
{
  return swift_allocObject();
}

uint64_t sub_10011DBD0()
{
  return _HashTable.BucketIterator.currentValue.getter();
}

uint64_t sub_10011DBF4()
{
  return sub_100119A98();
}

void *sub_10011DC30(void *(*a1)(uint64_t *__return_ptr, unint64_t, void))
{
  return sub_100118710(a1, v1, v2);
}

uint64_t sub_10011DC4C(uint64_t a1)
{
  return sub_100006960(v1, 1, 1, a1);
}

uint64_t sub_10011DC88()
{
  return static AssetCost.== infix(_:_:)();
}

void sub_10011DCAC()
{
  sub_10011EE4C();
}

uint64_t sub_10011DCC8()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t sub_10011DCEC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011DD10()
{
  uint64_t v2 = *(void *)(v0 + 104);
  return sub_100103A38(v2);
}

uint64_t sub_10011DD28()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_10011DD4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011DD70()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011DD94()
{
  return *(void *)(v0 + 256);
}

void sub_10011DDA4()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_10011DDBC()
{
  return ContinuousClock.init()();
}

uint64_t sub_10011DE0C()
{
  return swift_release();
}

uint64_t sub_10011DE28()
{
  return swift_task_dealloc();
}

uint64_t sub_10011DE64(uint64_t result, float a2)
{
  float *v2 = a2;
  *(void *)(v3 + 24) = result;
  return result;
}

uint64_t sub_10011DE7C()
{
  return swift_retain_n();
}

uint64_t sub_10011DE98()
{
  return swift_arrayDestroy();
}

uint64_t sub_10011DEB4()
{
  return v0;
}

uint64_t sub_10011DED8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10011DEF4()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10011DF10()
{
  return swift_allocError();
}

void sub_10011DF34()
{
  uint64_t v4 = *(void *)(v2 - 216);
  sub_100119B00(v0, v1, v4);
}

__n128 sub_10011DF68(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  __n128 result = *(__n128 *)(v2 + 24);
  *(void *)(a1 + 16) = v1;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10011DF80()
{
  return v0;
}

uint64_t sub_10011DF98()
{
  return v0;
}

uint64_t sub_10011DFA8()
{
  return swift_release();
}

uint64_t sub_10011DFCC()
{
  return sub_10002EAF0();
}

uint64_t sub_10011DFF0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10011E014()
{
  return v0;
}

uint64_t sub_10011E02C()
{
  return v0;
}

uint64_t sub_10011E03C()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_10011E050()
{
  return swift_task_dealloc();
}

uint64_t sub_10011E070()
{
  return 0;
}

uint64_t sub_10011E084()
{
  return 1;
}

uint64_t sub_10011E0AC()
{
  return 0;
}

uint64_t sub_10011E0D4()
{
  return swift_retain();
}

uint64_t sub_10011E0F4(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease();
}

void sub_10011E120(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_10011E140()
{
  return swift_release_n();
}

uint64_t sub_10011E16C(uint64_t a1)
{
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v1;
  return sub_100043174(v4, v5, v3);
}

void *sub_10011E18C()
{
  return sub_10000853C((void *)(*(void *)(v0 + 16) + 24), *(void *)(*(void *)(v0 + 16) + 48));
}

uint64_t sub_10011E1B8()
{
  *(void *)(v1 + v0) = 0;
  return swift_release();
}

void sub_10011E1D0()
{
}

uint64_t sub_10011E1E8()
{
  return *(void *)(v0 + 208);
}

uint64_t sub_10011E200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  *a12 = a1;
  return 0;
}

uint64_t sub_10011E214()
{
  return *(void *)(v1 + 48) + v0 * *(void *)(v2 - 128);
}

void *sub_10011E228@<X0>(uint64_t a1@<X8>)
{
  return sub_10000853C((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
}

void sub_10011E248()
{
  uint64_t v4 = *(int *)(v0 + 40);
  *(void *)(v2 - 152) = v1;
  Swift::UInt8 v5 = *(unsigned char *)(v1 + v4);
  Hasher._combine(_:)(v5);
}

void sub_10011E268()
{
  uint64_t v4 = *(int *)(v0 + 32);
  *(void *)(v2 - 160) = v4;
  Swift::UInt8 v5 = *(unsigned char *)(v1 + v4);
  Hasher._combine(_:)(v5);
}

uint64_t sub_10011E29C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10011E2BC()
{
  return _HashTable.UnsafeHandle._startIterator(bucket:)();
}

uint64_t sub_10011E2DC()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t sub_10011E2FC()
{
  *(void *)(v1 - 136) = v0;
  return dispatch thunk of Hashable.hash(into:)();
}

void sub_10011E31C()
{
  Swift::UInt v2 = *(void *)(*(void *)(*(void *)(v0 + 208) + 24) + 16);
  Hasher._combine(_:)(v2);
}

void sub_10011E350()
{
  Swift::UInt v2 = *(void *)(*(void *)(v0 + 16) + 16);
  Hasher._combine(_:)(v2);
}

uint64_t sub_10011E370()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_10011E390(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  return sub_10001DF20(a1, a2, (uint64_t *)va);
}

uint64_t sub_10011E3A8()
{
  return v0;
}

uint64_t sub_10011E3BC(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_10011E3C8(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  return result;
}

void *sub_10011E3DC(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = v1;
  return result;
}

uint64_t sub_10011E3F0()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t sub_10011E424()
{
  return swift_retain_n();
}

uint64_t sub_10011E43C()
{
  sub_100006AE8(v0, 1, v1);
  return swift_retain();
}

uint64_t sub_10011E474()
{
  return v0;
}

uint64_t sub_10011E480()
{
  return swift_allocError();
}

void *sub_10011E4A0()
{
  return malloc(0x28uLL);
}

uint64_t sub_10011E4C0()
{
  return sub_100042EDC(v1, v0);
}

uint64_t sub_10011E4D8()
{
  return v0;
}

uint64_t sub_10011E4EC()
{
  return v0;
}

uint64_t sub_10011E4F8()
{
  return 0;
}

uint64_t sub_10011E50C()
{
  return 0;
}

uint64_t sub_10011E518()
{
  return v0;
}

uint64_t sub_10011E524()
{
  return sub_100042EDC(v1, v0);
}

uint64_t sub_10011E53C()
{
  return sub_100006960(v1, 0, 1, v0);
}

uint64_t sub_10011E570()
{
  return sub_100042EDC(v0, v1);
}

uint64_t sub_10011E588()
{
  return swift_retain_n();
}

uint64_t sub_10011E5A0()
{
  return swift_release_n();
}

uint64_t sub_10011E5B8()
{
  return swift_retain();
}

void sub_10011E5D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_10011E5F8()
{
  *(void *)(v0 + 168) = v1;
}

uint64_t sub_10011E60C(char a1)
{
  if (!a1) {
    return 0x6C61636974697263;
  }
  if (a1 == 1) {
    return 0x746972632D6E6F6ELL;
  }
  return 0x6E776F6E6B6E75;
}

uint64_t sub_10011E66C()
{
  return sub_10011E60C(*v0);
}

uint64_t getEnumTagSinglePayload for MemoryPressure(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MemoryPressure(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011E7C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MemoryPressure()
{
  return &type metadata for MemoryPressure;
}

unint64_t sub_10011E804()
{
  unint64_t result = qword_10015F9D8;
  if (!qword_10015F9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015F9D8);
  }
  return result;
}

uint64_t sub_10011E850()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for WorkQueueState()
{
  return self;
}

uint64_t sub_10011E8AC()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DetachedWorkQueue.Actor()
{
  return self;
}

unint64_t sub_10011E908(uint64_t a1)
{
  unint64_t result = sub_10011E930();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10011E930()
{
  unint64_t result = qword_10015FB78;
  if (!qword_10015FB78)
  {
    type metadata accessor for DetachedWorkQueue.Actor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015FB78);
  }
  return result;
}

ValueMetadata *type metadata accessor for DetachedWorkQueue()
{
  return &type metadata for DetachedWorkQueue;
}

void sub_10011E98C()
{
  sub_10002FAAC();
  uint64_t v53 = v2;
  uint64_t v54 = v1;
  uint64_t v51 = v3;
  int v57 = v4;
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  uint64_t v8 = v7;
  uint64_t v44 = v7;
  uint64_t v10 = v9;
  uint64_t v52 = type metadata accessor for RequestMetadata();
  sub_10000ED60();
  uint64_t v50 = v11;
  __chkstk_darwin(v12, v13);
  sub_100030144();
  uint64_t v49 = v14;
  uint64_t v41 = type metadata accessor for TaskPriority();
  __chkstk_darwin(v41, v15);
  sub_100030144();
  uint64_t v48 = v16;
  sub_1000CAD38();
  uint64_t v17 = type metadata accessor for AuditToken();
  sub_10000ED60();
  uint64_t v19 = v18;
  __chkstk_darwin(v20, v21);
  sub_1000CF930();
  uint64_t v43 = v0;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = sub_10002FDD0(v22);
  __chkstk_darwin(v23, v24);
  char v26 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v10;
  Session.Metadata.sessionSetID.getter();
  uint64_t v47 = Session.Metadata.onBehalfOfPID.getter();
  uint64_t v45 = Session.Metadata.parentOfOnBehalfOfPID.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v0, v10 + OBJC_IVAR____TtC13modelmanagerd13DaemonSession_auditToken, v17);
  HIDWORD(v42) = AuditToken.auditUserIdentifier.getter();
  sub_100008334(v8, (uint64_t)v58);
  uint64_t v40 = Session.Metadata.useCaseID.getter();
  uint64_t v39 = v27;
  uint64_t v28 = v48;
  sub_100069DF4();
  v29();
  uint64_t v30 = Session.Metadata.loggingIdentifier.getter();
  uint64_t v32 = v31;
  uint64_t v33 = v49;
  sub_100069DF4();
  v34();
  LOBYTE(v37) = v57;
  sub_10011F188((uint64_t)v26, v54, v47, v45, v43, HIDWORD(v42), (uint64_t)v58, v40, v39, v55, v56, v37, v28, v30, v32, v33, v38, v39, v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49);
  swift_release();
  sub_100043DF8();
  v35();
  sub_100043F00();
  v36();
  sub_100008130(v44);
  sub_10002FAC4();
}

uint64_t sub_10011EC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v5 = sub_10002FDD0(v4);
  __chkstk_darwin(v5, v6);
  sub_100122278();
  type metadata accessor for RequestMetadata();
  sub_10000ED60();
  __chkstk_darwin(v7, v8);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(&v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata);
  sub_100008334(a2, (uint64_t)v14);
  swift_bridgeObjectRetain();
  sub_10011EE4C();
  type metadata accessor for DaemonRequest();
  uint64_t v11 = swift_allocObject();
  sub_10011EFB8();
  swift_release();
  sub_100008130(a2);
  return v11;
}

uint64_t sub_10011EDD8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015FB80);
  sub_100003B18(v0, (uint64_t)qword_10015FB80);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

void sub_10011EE4C()
{
  sub_1000E83A8();
  sub_100122258(v1);
  uint64_t v2 = sub_1001222BC();
  sub_10011EEB4(v2, v3);
  os_unfair_lock_unlock(v0);
}

uint64_t sub_10011EEB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for InferenceProviderRequestConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

void sub_10011EF24()
{
  sub_1000E83A8();
  sub_100122258(v1);
  sub_1001222BC();
  sub_10011EF8C();
  os_unfair_lock_unlock(v0);
}

uint64_t sub_10011EF8C()
{
  return InferenceProviderRequestConfiguration.requestPriority.getter();
}

void sub_10011EFB8()
{
  sub_10002FAAC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask) = 0;
  *((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v0) = 0;
  uint64_t v7 = v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
  uint64_t v8 = type metadata accessor for ModelManagerError();
  sub_100006960(v7, 1, 1, v8);
  type metadata accessor for RequestMetadata();
  sub_100057B10();
  sub_100069DF4();
  v9();
  *(void *)(v0 + 16) = v6;
  sub_100008334(v4, v0 + 24);
  sub_100003A70(&qword_10015FD40);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v11 = type metadata accessor for InferenceProviderRequestConfiguration();
  sub_100057B10();
  uint64_t v13 = v12;
  sub_100069DF4();
  v14();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v11);
  sub_100008130(v4);
  sub_100043F00();
  v15();
  *(void *)(v0 + 64) = v10;
  sub_10002FAC4();
}

void sub_10011F188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_10002FAAC();
  uint64_t v185 = v28;
  uint64_t v202 = v29;
  int v182 = v30;
  uint64_t v193 = v31;
  uint64_t v183 = v32;
  uint64_t v184 = v33;
  uint64_t v209 = v34;
  uint64_t v204 = a28;
  uint64_t v205 = v35;
  v168[3] = sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  v168[2] = v36;
  __chkstk_darwin(v37, v38);
  sub_100030144();
  v168[1] = v39;
  sub_1000CAD38();
  uint64_t v191 = type metadata accessor for RequestMetadata();
  sub_10000ED60();
  uint64_t v201 = v40;
  __chkstk_darwin(v41, v42);
  sub_100030158();
  sub_1000E8504();
  __chkstk_darwin(v43, v44);
  sub_1000BA134();
  os_log_t v186 = v45;
  uint64_t v46 = sub_100003A70(&qword_10015DA50);
  uint64_t v47 = sub_10002FDD0(v46);
  __chkstk_darwin(v47, v48);
  sub_100030144();
  uint64_t v181 = v49;
  uint64_t v179 = sub_100003A70(&qword_10015B9A0);
  sub_10000ED60();
  uint64_t v178 = v50;
  __chkstk_darwin(v51, v52);
  sub_100030144();
  uint64_t v176 = v53;
  sub_1000CAD38();
  type metadata accessor for UUID();
  sub_10000ED60();
  uint64_t v199 = v55;
  uint64_t v200 = v54;
  __chkstk_darwin(v54, v56);
  sub_100030158();
  sub_1000E8504();
  __chkstk_darwin(v57, v58);
  sub_1000E8504();
  __chkstk_darwin(v59, v60);
  sub_1000BA134();
  uint64_t v180 = v61;
  uint64_t v62 = sub_1000CAD38();
  uint64_t v63 = type metadata accessor for ModelCatalogAsset(v62);
  uint64_t v64 = sub_10002FA4C(v63);
  uint64_t v208 = v65;
  uint64_t v67 = __chkstk_darwin(v64, v66);
  uint64_t v69 = (void *)((char *)v168 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v67, v70);
  sub_1000BA134();
  uint64_t v207 = v71;
  sub_1000CAD38();
  type metadata accessor for InferenceProviderRequestConfiguration();
  sub_10000ED60();
  uint64_t v197 = v73;
  uint64_t v198 = v72;
  __chkstk_darwin(v72, v74);
  sub_100030158();
  sub_1000E8504();
  __chkstk_darwin(v75, v76);
  sub_1000BA134();
  uint64_t v196 = v77;
  uint64_t v78 = type metadata accessor for TaskPriority();
  sub_10000ED60();
  uint64_t v80 = v79;
  __chkstk_darwin(v81, v82);
  sub_100030158();
  sub_1000E8504();
  uint64_t v85 = __chkstk_darwin(v83, v84);
  __chkstk_darwin(v85, v86);
  uint64_t v87 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v89 = v88;
  __chkstk_darwin(v90, v91);
  sub_100030158();
  sub_1000E8504();
  __chkstk_darwin(v92, v93);
  long long v95 = (char *)v168 - v94;
  uint64_t v96 = *(void *)(v80 + 16);
  uint64_t v192 = a25;
  uint64_t v177 = v80 + 16;
  uint64_t v175 = v96;
  sub_100069DF4();
  v97();
  int v169 = a24;
  uint64_t v188 = v80;
  uint64_t v189 = v78;
  if (a24)
  {
    v168[0] = *(void *)(v80 + 8);
    sub_1000303D4();
    v98();
  }
  else
  {
    static TaskPriority.low.getter();
    char v99 = static TaskPriority.>= infix(_:_:)();
    uint64_t v100 = *(void (**)(void))(v80 + 8);
    sub_1000303D4();
    v100();
    v168[0] = v100;
    sub_1000303D4();
    v100();
    if (v99)
    {
      uint64_t v101 = (unsigned int *)&enum case for RequestPriority.foreground(_:);
      uint64_t v102 = v209;
      goto LABEL_6;
    }
  }
  uint64_t v102 = v209;
  uint64_t v101 = (unsigned int *)&enum case for RequestPriority.background(_:);
LABEL_6:
  uint64_t v103 = *v101;
  uint64_t v195 = v89;
  uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 104);
  uint64_t v194 = v95;
  uint64_t v203 = v87;
  v104(v95, v103, v87);
  uint64_t v174 = RequestMetadata.loggingIdentifier.getter();
  uint64_t v173 = v105;
  uint64_t v106 = *(void *)(v102 + 16);
  uint64_t v107 = _swiftEmptyArrayStorage;
  if (v106)
  {
    v211[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10001EDA8(0, v106, 0);
    uint64_t v108 = sub_10002E3C4(v102);
    uint64_t v110 = v109;
    uint64_t v112 = (void (*)(os_log_t, uint64_t, uint64_t))(v111 & 1);
    uint64_t v206 = v102 + 56;
    while ((v108 & 0x8000000000000000) == 0 && v108 < 1 << *(unsigned char *)(v102 + 32))
    {
      if (((*(void *)(v206 + (((unint64_t)v108 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v108) & 1) == 0) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(v102 + 36) != v110) {
        goto LABEL_25;
      }
      uint64_t v113 = *(void *)(v102 + 48);
      uint64_t v114 = v207;
      sub_10000E4E8(v113 + *(void *)(v208 + 72) * v108, v207);
      sub_10000E54C(v114, (uint64_t)v69);
      uint64_t v116 = *v69;
      uint64_t v115 = v69[1];
      swift_bridgeObjectRetain();
      sub_10000E5B0((uint64_t)v69);
      uint64_t v107 = (void *)v211[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10001EDA8(0, v107[2] + 1, 1);
        uint64_t v107 = (void *)v211[0];
      }
      unint64_t v118 = v107[2];
      unint64_t v117 = v107[3];
      if (v118 >= v117 >> 1)
      {
        sub_10001EDA8(v117 > 1, v118 + 1, 1);
        uint64_t v107 = (void *)v211[0];
      }
      v107[2] = v118 + 1;
      uint64_t v119 = &v107[2 * v118];
      v119[4] = v116;
      v119[5] = v115;
      uint64_t v120 = sub_10011E518();
      uint64_t v102 = v209;
      uint64_t v108 = sub_10002E2DC(v120, v121, v122, v209);
      uint64_t v110 = v123;
      uint64_t v112 = (void (*)(os_log_t, uint64_t, uint64_t))(v124 & 1);
      if (!--v106)
      {
        uint64_t v125 = sub_10011E518();
        sub_10000E60C(v125, v126, (char)v112);
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
LABEL_18:
    uint64_t v206 = a27;
    uint64_t v172 = a26;
    uint64_t v171 = a23;
    uint64_t v170 = a22;
    sub_100016C4C((uint64_t)v107);
    uint64_t v110 = v204;
    RequestMetadata.uuid.getter();
    RequestMetadata.sessionID.getter();
    UUIDIdentifier.uuid.getter();
    sub_10000EFBC();
    v127();
    sub_100069DF4();
    v128();
    uint64_t v129 = type metadata accessor for AuditToken();
    sub_100057B10();
    uint64_t v207 = v130;
    uint64_t v131 = v181;
    sub_100069DF4();
    v132();
    uint64_t v208 = v129;
    sub_100006960(v131, 0, 1, v129);
    sub_100069DF4();
    v133();
    InferenceProviderRequestConfiguration.init(sessionLoggingIdentifier:requestLoggingIdentifier:assetIdentifiers:requestUUID:sessionUUID:sessionSetID:onBehalfOfPID:parentOfOnBehalfOfPID:auditToken:auditSessionUID:useCaseIdentifier:assetBundleIdentifier:requestPriority:)();
    uint64_t v112 = *(void (**)(os_log_t, uint64_t, uint64_t))(v201 + 16);
    uint64_t v69 = (uint64_t *)v191;
    v112(v186, v110, v191);
    sub_100008334(v202, (uint64_t)v211);
    sub_100069DF4();
    v134();
    type metadata accessor for DaemonRequest();
    swift_allocObject();
    sub_10011EFB8();
    uint64_t v135 = qword_10015B1F8;
    swift_retain();
    uint64_t v106 = v187;
    if (v135 == -1) {
      goto LABEL_19;
    }
  }
  swift_once();
LABEL_19:
  uint64_t v136 = type metadata accessor for Logger();
  sub_100003B18(v136, (uint64_t)qword_10015FB80);
  v112((os_log_t)v106, v110, (uint64_t)v69);
  uint64_t v137 = v190;
  uint64_t v138 = v192;
  uint64_t v139 = v189;
  sub_100069DF4();
  v140();
  swift_retain();
  uint64_t v141 = Logger.logObject.getter();
  os_log_type_t v142 = static os_log_type_t.default.getter();
  int v143 = v142;
  if (os_log_type_enabled(v141, v142))
  {
    uint64_t v144 = swift_slowAlloc();
    LODWORD(v206) = v143;
    uint64_t v145 = v144;
    uint64_t v209 = swift_slowAlloc();
    v211[0] = v209;
    *(_DWORD *)uint64_t v145 = 136315906;
    os_log_t v186 = v141;
    RequestMetadata.id.getter();
    sub_100122074((unint64_t *)&qword_10015B418);
    uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v148 = v147;
    sub_10000EFBC();
    v149();
    uint64_t v210 = sub_10001DF20(v146, v148, v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v201 = *(void *)(v201 + 8);
    sub_100043DF8();
    v150();
    *(_WORD *)(v145 + 12) = 2080;
    sub_10011EF24();
    uint64_t v151 = String.init<A>(describing:)();
    uint64_t v210 = sub_10001DF20(v151, v152, v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10000F050();
    swift_bridgeObjectRelease();
    *(_WORD *)(v145 + 22) = 2080;
    LOBYTE(v210) = v169;
    uint64_t v153 = String.init<A>(describing:)();
    uint64_t v210 = sub_10001DF20(v153, v154, v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v145 + 32) = 2080;
    sub_10012220C(&qword_10015F858, (void (*)(uint64_t))&type metadata accessor for TaskPriority);
    uint64_t v155 = v190;
    uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v210 = sub_10001DF20(v156, v157, v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v158 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
    v158(v155, v139);
    os_log_t v159 = v186;
    _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v206, "Resolved priority for request %s to %s (from %s and %s)", (uint8_t *)v145, 0x2Au);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    sub_100043DF8();
    v160();
    v158(v192, v139);
  }
  else
  {

    uint64_t v161 = v137;
    unint64_t v162 = (void (*)(uint64_t, uint64_t))v168[0];
    ((void (*)(uint64_t, uint64_t))v168[0])(v161, v139);
    sub_10000F050();
    uint64_t v163 = *(void (**)(void))(v201 + 8);
    sub_100043DF8();
    v163();
    sub_100043DF8();
    v163();
    v162(v138, v139);
  }
  sub_100008130(v202);
  sub_10000EFBC();
  v164();
  sub_10000EFBC();
  v165();
  sub_10000EFBC();
  v166();
  sub_10000EFBC();
  v167();
  sub_10002FAC4();
}

void sub_10011FF0C()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  char v4 = v3;
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  v35[2] = v5;
  __chkstk_darwin(v6, v7);
  sub_100122278();
  uint64_t v8 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v10 = v9;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v35 - v17;
  sub_10011EF24();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v15, enum case for RequestPriority.background(_:), v8);
  char v19 = sub_100101B50((uint64_t)v18, (uint64_t)v15);
  uint64_t v20 = *(void (**)(void))(v10 + 8);
  sub_100043F00();
  v20();
  sub_100043F00();
  uint64_t v21 = ((uint64_t (*)(void))v20)();
  if (v19)
  {
    if (qword_10015B1F8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003B18(v23, (uint64_t)qword_10015FB80);
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)char v26 = 136315138;
      uint64_t v36 = v27;
      v35[1] = v26 + 4;
      RequestMetadata.id.getter();
      sub_100122074((unint64_t *)&qword_10015B418);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v29;
      sub_1001222B0();
      sub_10000EFBC();
      v31();
      v35[3] = sub_10001DF20(v28, v30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10000F050();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Request %s updateSessionPriority doing nothing for background request", v26, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {

      sub_10000F050();
    }
  }
  else
  {
    __chkstk_darwin(v21, v22);
    LOBYTE(v35[-2]) = v4;
    v35[-1] = v2;
    sub_1000E83A8();
    uint64_t v34 = v33 + *(void *)(class metadata base offset for ManagedBuffer + v32 + 16);
    sub_100122258(v33);
    sub_10012218C(v34);
    os_unfair_lock_unlock(v1);
  }
  sub_10002FAC4();
}

void sub_100120278(uint64_t a1, unsigned __int8 a2)
{
  int v4 = a2;
  uint64_t v5 = type metadata accessor for RequestPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003A70(&qword_10015B408);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for RequestPriority.userInitiated(_:), v5);
    InferenceProviderRequestConfiguration.requestPriority.setter();
    if (qword_10015B1F8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100003B18(v14, (uint64_t)qword_10015FB80);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v39 = v18;
      uint64_t v40 = v2;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v44 = v18;
      uint64_t v38 = v17 + 4;
      RequestMetadata.id.getter();
      sub_100122074((unint64_t *)&qword_10015B418);
      uint64_t v19 = v42;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v19);
      uint64_t v43 = sub_10001DF20(v20, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reducing priority of request %s to userInitiated", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    uint64_t v40 = v2;
    if (qword_10015B1F8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003B18(v23, (uint64_t)qword_10015FB80);
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      LODWORD(v38) = v26;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = v28;
      uint64_t v35 = v27;
      os_log_t v36 = v24;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v44 = v28;
      uint64_t v34 = v27 + 4;
      RequestMetadata.id.getter();
      sub_100122074((unint64_t *)&qword_10015B418);
      uint64_t v29 = v42;
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = a1;
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v29);
      uint64_t v43 = sub_10001DF20(v30, v32, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v33 = v36;
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v38, "Increasing priority of request %s to foreground", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for RequestPriority.foreground(_:), v5);
    InferenceProviderRequestConfiguration.requestPriority.setter();
  }
}

uint64_t sub_100120804(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  unsigned char v3[8] = a1;
  uint64_t v5 = sub_100003A70(&qword_10015C008);
  sub_10002FDD0(v5);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015B408);
  v3[13] = v6;
  sub_10002FA4C(v6);
  v3[14] = v7;
  v3[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestCancellationReason();
  v3[16] = v8;
  sub_10002FA4C(v8);
  v3[17] = v9;
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100120930, a1, 0);
}

uint64_t sub_100120930()
{
  uint64_t v53 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled;
  if ((*((unsigned char *)OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_isCancelled + v1) & 1) == 0)
  {
    if (qword_10015B1F8 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[19];
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[17];
    uint64_t v13 = v0[9];
    uint64_t v14 = type metadata accessor for Logger();
    v0[20] = sub_100003B18(v14, (uint64_t)qword_10015FB80);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v51(v10, v13, v11);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[17];
    uint64_t v49 = v0[16];
    uint64_t v50 = v0[19];
    if (v17)
    {
      os_log_type_t type = v16;
      uint64_t v19 = v0[14];
      uint64_t v20 = v0[15];
      uint64_t v21 = v0[13];
      uint64_t v48 = v2;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      RequestMetadata.id.getter();
      sub_100122074((unint64_t *)&qword_10015B418);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v25 = v24;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
      v0[6] = sub_10001DF20(v23, v25, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2080;
      sub_10012220C(&qword_10015FD38, (void (*)(uint64_t))&type metadata accessor for RequestCancellationReason);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_10001DF20(v26, v27, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(void))(v18 + 8);
      sub_100043DF8();
      v28();
      _os_log_impl((void *)&_mh_execute_header, v15, type, "Cancelling request %s due to %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      sub_10000ED7C();
      uint64_t v2 = v48;
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
      uint64_t v28 = *(void (**)(void))(v18 + 8);
      ((void (*)(uint64_t, uint64_t))v28)(v50, v49);
    }

    uint64_t v30 = v0[17];
    uint64_t v29 = v0[18];
    uint64_t v31 = v0[16];
    uint64_t v32 = v0[9];
    *((unsigned char *)v2 + v1) = 1;
    v51(v29, v32, v31);
    int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v29, v31);
    int v34 = enum case for RequestCancellationReason.requestPreemption(_:);
    ((void (*)(uint64_t, uint64_t))v28)(v29, v31);
    if (v33 == v34)
    {
      uint64_t v36 = v0[11];
      uint64_t v35 = v0[12];
      uint64_t v37 = v0[10];
      uint64_t v38 = enum case for ModelManagerError.cancelledByPreemption(_:);
      uint64_t v39 = type metadata accessor for ModelManagerError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v35, v38, v39);
      sub_100006960(v35, 0, 1, v39);
      sub_1001220BC(v35, v36);
      uint64_t v40 = v37 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError;
      swift_beginAccess();
      sub_100122124(v36, v40);
      swift_endAccess();
    }
    sub_10000853C((void *)(v0[10] + 24), *(void *)(v0[10] + 48));
    v0[21] = OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_metadata;
    RequestMetadata.id.getter();
    uint64_t v41 = (void *)swift_task_alloc();
    v0[22] = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_100120F88;
    sub_1000441A8();
    __asm { BRAA            X5, X16 }
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask);
  v0[25] = v3;
  if (!v3)
  {
    sub_100122294();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000441A8();
    __asm { BRAA            X1, X16 }
  }
  swift_retain();
  int v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  sub_100003A70(&qword_10015B468);
  void *v4 = v0;
  v4[1] = sub_10012143C;
  sub_1000441A8();
  return Task.value.getter(v5, v6, v7, v8, v9);
}

uint64_t sub_100120F88()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  uint64_t v3 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  *(void *)(v1 + 184) = *(void *)(v2 + 8);
  *(void *)(v1 + 192) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100043DF8();
  v4();
  return _swift_task_switch(sub_100121104, v3, 0);
}

uint64_t sub_100121104()
{
  os_log_type_t v16 = v0;
  uint64_t v1 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable;
  if (*(void *)(v0[10] + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_runningTask))
  {
    swift_retain_n();
    swift_retain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v14 = (void (*)(uint64_t))v0[23];
      int v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)int v4 = 136315138;
      RequestMetadata.id.getter();
      sub_100122074((unint64_t *)&qword_10015B418);
      uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v7 = v6;
      uint64_t v8 = sub_10011E518();
      v14(v8);
      v0[5] = sub_10001DF20(v5, v7, &v15);
      uint64_t v1 = &OBJC_IVAR____TtC13modelmanagerd22InferenceProviderAsset_isCacheable;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cancelling Task running the request %s", v4, 0xCu);
      swift_arrayDestroy();
      sub_10000ED7C();
      sub_10000ED7C();
    }
    else
    {
      swift_release_n();
    }

    sub_100003A70(&qword_10015B468);
    Task.cancel()();
    swift_release();
    uint64_t v9 = *(void *)(v0[10] + v1[117]);
    v0[25] = v9;
    if (v9)
    {
      swift_retain();
      uint64_t v10 = (void *)swift_task_alloc();
      v0[26] = v10;
      uint64_t v11 = sub_100003A70(&qword_10015B468);
      *uint64_t v10 = v0;
      v10[1] = sub_10012143C;
      return Task.value.getter(v11, v9, (char *)&type metadata for () + 8, v11, &protocol self-conformance witness table for Error);
    }
  }
  else
  {
    v0[25] = 0;
  }
  sub_100122294();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10012143C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    int v4 = sub_100122254;
  }
  else
  {
    int v4 = sub_100121574;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100121574()
{
  swift_release();
  sub_100122294();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100121600()
{
  sub_10002FAAC();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v5, v6);
  sub_100030144();
  sub_1000CAD38();
  type metadata accessor for InferenceProviderDescriptor();
  sub_10000ED60();
  __chkstk_darwin(v7, v8);
  sub_1000CF930();
  uint64_t v9 = type metadata accessor for RequestPriority();
  sub_10000ED60();
  uint64_t v11 = v10;
  __chkstk_darwin(v12, v13);
  sub_10002FB2C();
  __chkstk_darwin(v14, v15);
  sub_10011EF24();
  sub_10012220C(&qword_10015B738, (void (*)(uint64_t))&type metadata accessor for RequestPriority);
  char v16 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v39 = *(void (**)(void))(v11 + 8);
  sub_100057FE4();
  v17();
  if ((v16 & 1) == 0)
  {
    uint64_t v38 = v1;
    uint64_t v18 = v2 + 3;
    uint64_t v19 = v2[6];
    uint64_t v20 = v2[7];
    sub_10000853C(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
    char v21 = InferenceProviderDescriptor.hostedOnServer.getter();
    sub_10011E518();
    sub_1000303D4();
    v22();
    if ((v21 & 1) == 0)
    {
      if (qword_10015B1F8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100003B18(v23, (uint64_t)qword_10015FB80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v38, v4, v9);
      swift_retain_n();
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315650;
        uint64_t v37 = v24;
        RequestMetadata.id.getter();
        sub_100122074((unint64_t *)&qword_10015B418);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v29 = v28;
        sub_10000EFBC();
        v30();
        sub_10001DF20(v27, v29, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F050();
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 12) = 2080;
        sub_10011EF24();
        uint64_t v31 = RequestPriority.rawValue.getter();
        unint64_t v33 = v32;
        sub_100057FE4();
        v39();
        sub_10001DF20(v31, v33, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F050();
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2080;
        uint64_t v34 = RequestPriority.rawValue.getter();
        sub_10001DF20(v34, v35, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001222B0();
        sub_100057FE4();
        v39();
        _os_log_impl((void *)&_mh_execute_header, v37, v25, "Request %s should be cancelled: priority %s <= %s and it is not using a server IP", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        sub_10000ED7C();
        sub_10000ED7C();
      }
      else
      {
        swift_release_n();
        sub_1001222B0();
        sub_100057FE4();
        v36();
      }
    }
  }
  sub_10002FAC4();
}

uint64_t sub_100121AB0()
{
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  uint64_t v1 = v0;
  __chkstk_darwin(v2, v3);
  sub_10002FB2C();
  __chkstk_darwin(v4, v5);
  RequestMetadata.id.getter();
  RequestMetadata.id.getter();
  type metadata accessor for RequestMetadata();
  char v6 = static UUIDIdentifier.== infix(_:_:)();
  uint64_t v7 = *(void (**)(void))(v1 + 8);
  sub_100043DF8();
  v7();
  sub_100043DF8();
  v7();
  return v6 & 1;
}

uint64_t sub_100121BC0()
{
  sub_100003A70(&qword_10015B408);
  sub_10000ED60();
  __chkstk_darwin(v0, v1);
  RequestMetadata.id.getter();
  sub_100122074(&qword_10015B9B0);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = sub_1001222B0();
  return v3(v2);
}

uint64_t sub_100121CA4()
{
  swift_bridgeObjectRelease();
  sub_100008130(v0 + 24);
  swift_release();
  type metadata accessor for RequestMetadata();
  sub_10000EFBC();
  v1();
  swift_release();
  sub_1001221AC(v0 + OBJC_IVAR____TtC13modelmanagerd13DaemonRequest_cancellationError);
  return v0;
}

uint64_t sub_100121D3C()
{
  sub_100121CA4();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100121D94()
{
  return type metadata accessor for DaemonRequest();
}

uint64_t type metadata accessor for DaemonRequest()
{
  uint64_t result = qword_10015FBC0;
  if (!qword_10015FBC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100121DE4()
{
  type metadata accessor for RequestMetadata();
  if (v0 <= 0x3F)
  {
    sub_100121F28();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

Swift::Int sub_100121EE8()
{
  return Hasher._finalize()();
}

void sub_100121F28()
{
  if (!qword_10015FBD8)
  {
    type metadata accessor for ModelManagerError();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015FBD8);
    }
  }
}

uint64_t sub_100121F80()
{
  return sub_10012220C(&qword_10015FD30, (void (*)(uint64_t))type metadata accessor for DaemonRequest);
}

uint64_t sub_100121FC8()
{
  return sub_100121AB0() & 1;
}

Swift::Int sub_100121FEC()
{
  return sub_100121EE8();
}

uint64_t sub_100122010()
{
  return sub_100121BC0();
}

Swift::Int sub_100122034()
{
  return Hasher._finalize()();
}

uint64_t sub_100122074(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006A5C(&qword_10015B408);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001220BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015C008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100122124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015C008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10012218C(uint64_t a1)
{
  sub_100120278(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1001221AC(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015C008);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012220C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100122258(uint64_t a1@<X8>)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + ((v1 + 3) & 0x1FFFFFFFCLL)));
}

uint64_t sub_100122278()
{
  return 0;
}

uint64_t sub_100122294()
{
  return swift_task_dealloc();
}

uint64_t sub_1001222B0()
{
  return v0;
}

uint64_t sub_1001222BC()
{
  return v0;
}

uint64_t sub_1001222D0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003AB4(v0, qword_10015FD48);
  sub_100003B18(v0, (uint64_t)qword_10015FD48);
  subsystemName.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100122344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100122364, 0, 0);
}

uint64_t sub_100122364()
{
  sub_1000086E0();
  type metadata accessor for _OSActivity();
  *(void *)(v0 + 24) = _OSActivity.__allocating_init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100122414;
  return sub_100122714();
}

uint64_t sub_100122414()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001224E0, 0, 0);
}

uint64_t sub_1001224E0()
{
  sub_1000086E0();
  _OSActivity.close()();
  swift_release();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_100122540()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  sub_100008130(v0 + 112);
  sub_100008130(v0 + 152);
  sub_100125654(v0 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001225D8()
{
  sub_100122540();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100122604()
{
  return type metadata accessor for MemoryPressureObserver();
}

uint64_t type metadata accessor for MemoryPressureObserver()
{
  uint64_t result = qword_10015FD88;
  if (!qword_10015FD88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100122654()
{
  sub_1001244E8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100122714()
{
  sub_1000086E0();
  v1[2] = v0;
  uint64_t v2 = sub_100003A70(&qword_10015FEC0);
  v1[3] = v2;
  sub_10002FA4C(v2);
  v1[4] = v3;
  v1[5] = swift_task_alloc();
  uint64_t v4 = sub_100003A70(&qword_10015FEC8);
  v1[6] = v4;
  sub_10002FA4C(v4);
  v1[7] = v5;
  v1[8] = swift_task_alloc();
  uint64_t v6 = sub_100003A70(&qword_10015FED0);
  v1[9] = v6;
  sub_10002FA4C(v6);
  v1[10] = v7;
  v1[11] = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_100122824()
{
  sub_100030850();
  if (qword_10015B200 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = sub_100003B18(v1, (uint64_t)qword_10015FD48);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (sub_1000443B0(v3))
  {
    uint64_t v4 = (_WORD *)sub_10005A928();
    sub_100069CF8(v4);
    sub_10005A960((void *)&_mh_execute_header, v5, v6, "Listening for memory pressure events");
    sub_10000ED7C();
  }
  uint64_t v8 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v11 = v0[3];
  uint64_t v12 = v0[4];

  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v11);
  AsyncStream.init(_:bufferingPolicy:_:)();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[13] = sub_1001257D8(&qword_10015FEA8, (void (*)(uint64_t))type metadata accessor for MemoryPressureObserver);
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = (void *)sub_1001258C4(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_100122A1C;
  sub_100057FD0();
  sub_1000307C8();
  return AsyncStream.Iterator.next(isolation:)(v16, v17, v18, v19);
}

uint64_t sub_100122A1C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100122AF8()
{
  sub_1000086EC();
  if (*(unsigned char *)(v0 + 128) == 3)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    uint64_t v1 = (void *)Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.fault.getter();
    if (sub_1000443B0(v2))
    {
      uint64_t v3 = (_WORD *)sub_10005A928();
      sub_100069CF8(v3);
      sub_10005A960((void *)&_mh_execute_header, v4, v5, "Memory pressure events ended");
      sub_10000ED7C();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100122C44;
    return sub_100122DE0();
  }
}

uint64_t sub_100122C44()
{
  uint64_t v1 = (void *)*v0;
  os_log_type_t v2 = (void *)*v0;
  sub_1000086D0();
  *uint64_t v3 = v2;
  uint64_t v4 = (void *)*v0;
  *uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v5 = v1[13];
  uint64_t v6 = v1[2];
  uint64_t v7 = (void *)swift_task_alloc();
  v2[14] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_100122A1C;
  uint64_t v8 = v1[9];
  return AsyncStream.Iterator.next(isolation:)(v2 + 16, v6, v5, v8);
}

uint64_t sub_100122DE0()
{
  sub_1000086E0();
  *(void *)(v1 + 176) = v0;
  *(unsigned char *)(v1 + 336) = v2;
  uint64_t v3 = type metadata accessor for Assertion.DaemonRep();
  *(void *)(v1 + 184) = v3;
  sub_10002FA4C(v3);
  *(void *)(v1 + 192) = v4;
  *(void *)(v1 + 200) = sub_1000436D8();
  *(void *)(v1 + 208) = swift_task_alloc();
  *(void *)(v1 + 216) = swift_task_alloc();
  sub_100003A70(&qword_10015B740);
  *(void *)(v1 + 224) = sub_1000436D8();
  *(void *)(v1 + 232) = swift_task_alloc();
  *(void *)(v1 + 240) = swift_task_alloc();
  *(void *)(v1 + 248) = swift_task_alloc();
  uint64_t v5 = sub_100003A70(&qword_10015B228);
  *(void *)(v1 + 256) = v5;
  sub_10002FA4C(v5);
  *(void *)(v1 + 264) = v6;
  *(void *)(v1 + 272) = sub_1000436D8();
  *(void *)(v1 + 280) = swift_task_alloc();
  *(void *)(v1 + 288) = swift_task_alloc();
  sub_10002FB10();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100122F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100030850();
  a19 = v21;
  a20 = v22;
  a18 = v20;
  if (qword_10015B200 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  *(void *)(v20 + 296) = sub_100003B18(v23, (uint64_t)qword_10015FD48);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    int v26 = *(unsigned __int8 *)(v20 + 336);
    uint64_t v27 = (uint8_t *)sub_100030314();
    a9 = sub_10002FF90();
    *(_DWORD *)uint64_t v27 = 136315138;
    unint64_t v28 = 0xEC0000006C616369;
    uint64_t v29 = 0x746972632D6E6F6ELL;
    if (v26 != 1)
    {
      uint64_t v29 = 0x6E776F6E6B6E75;
      unint64_t v28 = 0xE700000000000000;
    }
    if (v26) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0x6C61636974697263;
    }
    if (v26) {
      unint64_t v31 = v28;
    }
    else {
      unint64_t v31 = 0xE800000000000000;
    }
    *(void *)(v20 + 168) = sub_10001DF20(v30, v31, &a9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Processing memory pressure %s event", v27, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }

  uint64_t v32 = *(void *)(v20 + 176);
  char v33 = sub_100123F20(v32, (uint8_t *)*(unsigned __int8 *)(v20 + 336));
  uint64_t v34 = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask;
  if (*(void *)(v32 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask))
  {
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)sub_10005A928();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cancelling critical memory pressure watchdog", v37, 2u);
      sub_10000ED7C();
    }

    if (*(void *)(v32 + v34))
    {
      swift_retain();
      Task.cancel()();
      swift_release();
    }
    *(void *)(v32 + v34) = 0;
    swift_release();
  }
  if (v33)
  {
    if (v33 != 1)
    {
      uint64_t v55 = (void *)Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.fault.getter();
      if (sub_1000443B0(v56))
      {
        uint64_t v57 = (_WORD *)sub_10005A928();
        sub_100069CF8(v57);
        sub_10005A960((void *)&_mh_execute_header, v58, v59, "Unknown memory pressure event");
        sub_10000ED7C();
      }

      goto LABEL_34;
    }
    uint64_t v39 = *(void *)(v20 + 248);
    uint64_t v38 = *(void *)(v20 + 256);
    uint64_t v40 = *(void *)(v20 + 176) + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    sub_100043D2C();
    sub_1001255EC(v40, v39);
    if (sub_100006AE8(v39, 1, v38) == 1)
    {
      sub_100125654(*(void *)(v20 + 248));
LABEL_34:
      sub_100125820();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10000EF7C();
      sub_1000307C8();
      return v66(v65, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12);
    }
    uint64_t v60 = *(void *)(v20 + 256);
    uint64_t v61 = *(void *)(v20 + 240);
    uint64_t v62 = *(void *)(v20 + 176);
    (*(void (**)(void, void, uint64_t))(*(void *)(v20 + 264) + 32))(*(void *)(v20 + 288), *(void *)(v20 + 248), v60);
    sub_100006960(v61, 1, 1, v60);
    swift_beginAccess();
    sub_10012571C(v61, v40);
    swift_endAccess();
    sub_10000853C((void *)(v62 + 112), *(void *)(v62 + 136));
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v20 + 304) = v63;
    *uint64_t v63 = v20;
    v63[1] = sub_100123514;
    sub_1000307C8();
    return sub_100010658();
  }
  else
  {
    uint64_t v41 = *(void *)(v20 + 256);
    uint64_t v42 = *(void *)(v20 + 232);
    uint64_t v43 = *(void *)(v20 + 176);
    uint64_t v44 = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    *(void *)(v20 + 312) = OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
    uint64_t v45 = v43 + v44;
    sub_100043D2C();
    uint64_t v46 = sub_100044468();
    sub_1001255EC(v46, v47);
    LODWORD(v41) = sub_100006AE8(v42, 1, v41);
    sub_100125654(v42);
    if (v41 != 1)
    {
      sub_1001243D0();
      goto LABEL_34;
    }
    uint64_t v48 = *(void *)(v20 + 256);
    uint64_t v49 = *(void *)(v20 + 240);
    uint64_t v50 = *(void *)(v20 + 224);
    uint64_t v51 = *(void *)(v20 + 176);
    type metadata accessor for Assertion();
    UUIDIdentifier.init()();
    Assertion.DaemonRep.init(policy:description:id:)();
    Assertion.DaemonRep.id.getter();
    sub_100006960(v49, 0, 1, v48);
    sub_1001256B4(v49, v50);
    sub_100044468();
    swift_beginAccess();
    sub_10012571C(v50, v45);
    swift_endAccess();
    sub_10000853C((void *)(v51 + 112), *(void *)(v51 + 136));
    uint64_t v52 = (void *)swift_task_alloc();
    *(void *)(v20 + 320) = v52;
    *uint64_t v52 = v20;
    v52[1] = sub_1001237F8;
    sub_1000307C8();
    return sub_100010308();
  }
}

uint64_t sub_100123514()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1001235F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100030028();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  (*(void (**)(void, void, void))(v22[33] + 16))(v22[35], v22[36], v22[32]);
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = v22[35];
    uint64_t v28 = v22[33];
    a9 = v22[32];
    a10 = v22[36];
    uint64_t v29 = (uint8_t *)sub_100030314();
    a11 = sub_10002FF90();
    *(_DWORD *)uint64_t v29 = 136315138;
    sub_100125784();
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v22[20] = sub_10001DF20(v30, v31, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v32(v27, a9);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Released critical memory pressure assertion %s", v29, 0xCu);
    sub_1000B7250();
    sub_10000ED7C();
    sub_10000ED7C();

    v32(a10, a9);
  }
  else
  {
    uint64_t v33 = v22[35];
    uint64_t v34 = v22[32];
    uint64_t v35 = v22[33];

    os_log_type_t v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v36(v33, v34);
    uint64_t v37 = sub_100030BD0();
    ((void (*)(uint64_t))v36)(v37);
  }
  sub_100125820();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  sub_10002FE48();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1001237F8()
{
  sub_1000086EC();
  uint64_t v2 = *v1;
  sub_100101AE8();
  uint64_t *v4 = v3;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 328) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 176);
  if (v0) {
    uint64_t v6 = sub_100123B80;
  }
  else {
    uint64_t v6 = sub_100123918;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100123918()
{
  uint64_t v19 = v0;
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[26], v0[27], v0[23]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[34];
    uint64_t v5 = v0[32];
    uint64_t v15 = v0[26];
    uint64_t v6 = v0[24];
    uint64_t v16 = v0[23];
    os_log_t log = v1;
    uint64_t v7 = (uint8_t *)sub_100030314();
    uint64_t v18 = sub_10002FF90();
    *(_DWORD *)uint64_t v7 = 136315138;
    Assertion.DaemonRep.id.getter();
    sub_100125784();
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    v0[17] = sub_10001DF20(v8, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v15, v16);
    _os_log_impl((void *)&_mh_execute_header, log, v2, "Acquired critical memory pressure assertion %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0[24] + 8);
    v11(v0[26], v0[23]);
  }
  sub_1001243D0();
  uint64_t v12 = sub_100044468();
  ((void (*)(uint64_t))v11)(v12);
  sub_100125820();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v13();
}

uint64_t sub_100123B80()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[22] + v0[39];
  sub_100006960(v1, 1, 1, v0[32]);
  swift_beginAccess();
  sub_10012571C(v1, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v0[33];
    uint64_t v10 = v0[34];
    uint64_t v11 = v0[32];
    uint64_t v29 = v0[27];
    uint64_t v27 = v0[24];
    uint64_t v24 = v0[25];
    uint64_t v25 = v0[23];
    uint64_t v12 = swift_slowAlloc();
    os_log_type_t v26 = (void *)swift_slowAlloc();
    sub_10002FF90();
    *(_DWORD *)uint64_t v12 = 136315394;
    Assertion.DaemonRep.id.getter();
    sub_100125784();
    dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    uint64_t v13 = sub_100030BD0();
    v0[19] = sub_10001DF20(v13, v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v28(v24, v25);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v26 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to acquire critical memory pressure assertion %s: %@", (uint8_t *)v12, 0x16u);
    sub_100003A70(&qword_10015BA58);
    swift_arrayDestroy();
    sub_10000ED7C();
    swift_arrayDestroy();
    sub_10000ED7C();
    sub_10000ED7C();

    swift_errorRelease();
    v28(v29, v25);
  }
  else
  {
    uint64_t v17 = v0[27];
    uint64_t v19 = v0[24];
    uint64_t v18 = v0[25];
    uint64_t v20 = v0[23];

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v21(v18, v20);
    swift_errorRelease();
    v21(v17, v20);
  }
  sub_100125820();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v22();
}

uint64_t sub_100123F20(uint64_t a1, uint8_t *a2)
{
  uint64_t v2 = a2;
  if (sub_1001242F4((char)a2))
  {
    sub_10000853C((void *)(a1 + 152), *(void *)(a1 + 176));
    uint64_t v2 = sub_1000FEF30();
    if (qword_10015B200 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003B18(v4, (uint64_t)qword_10015FD48);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      if ((_BYTE)v2)
      {
        if (v2 == 1) {
          uint64_t v8 = 0x746972632D6E6F6ELL;
        }
        else {
          uint64_t v8 = 0x6E776F6E6B6E75;
        }
        if (v2 == 1) {
          unint64_t v9 = 0xEC0000006C616369;
        }
        else {
          unint64_t v9 = 0xE700000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE800000000000000;
        uint64_t v8 = 0x6C61636974697263;
      }
      sub_10001DF20(v8, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetched memory pressure directly from kernel: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (v2 == 2)
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "kernel memory pressure unknown!", v12, 2u);
        swift_slowDealloc();
      }

      uint64_t v13 = type metadata accessor for ModelManagerError();
      sub_1001257D8((unint64_t *)&qword_10015B410, (void (*)(uint64_t))&type metadata accessor for ModelManagerError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for ModelManagerError.internalError(_:), v13);
      swift_willThrow();
      if (qword_10015B200 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100003B18(v15, (uint64_t)qword_10015FD48);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to query current kernel memory pressure. Assuming non-critical.", v18, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      return 1;
    }
  }
  return (uint64_t)v2;
}

uint64_t sub_1001242F4(char a1)
{
  uint64_t v4 = sub_100003A70(&qword_10015B740);
  __chkstk_darwin(v4 - 8, v5);
  sub_10006FE24();
  if (a1 == 2) {
    return 1;
  }
  if (a1) {
    return 0;
  }
  uint64_t v6 = v2 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_activeAssertionID;
  sub_100043D2C();
  sub_1001255EC(v6, v1);
  uint64_t v7 = sub_100003A70(&qword_10015B228);
  BOOL v8 = sub_100006AE8(v1, 1, v7) != 1;
  sub_100125654(v1);
  return v8;
}

uint64_t sub_1001243D0()
{
  uint64_t v2 = sub_100003A70(&qword_10015B208);
  __chkstk_darwin(v2 - 8, v3);
  sub_10006FE24();
  uint64_t v4 = type metadata accessor for TaskPriority();
  sub_100006960(v0, 1, 1, v4);
  uint64_t v5 = sub_1001257D8(&qword_10015FEA8, (void (*)(uint64_t))type metadata accessor for MemoryPressureObserver);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n();
  *(void *)(v1 + OBJC_IVAR____TtC13modelmanagerd22MemoryPressureObserver_criticalMemoryPressureWatchdogTask) = sub_100003730(v0, (uint64_t)&unk_10015FEB0, (uint64_t)v6);
  return swift_release();
}

void sub_1001244E8()
{
  if (!qword_10015FDA8)
  {
    sub_100006A5C(&qword_10015B228);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10015FDA8);
    }
  }
}

uint64_t sub_100124544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  sub_100003A70(&qword_10015B740);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_100124638, a4, 0);
}

uint64_t sub_100124638()
{
  sub_1000086EC();
  static Duration.seconds(_:)();
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10015FEB8 + dword_10015FEB8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100124720;
  uint64_t v2 = sub_100044468();
  return v5(v2, v3, 1000000000000000000, 0, 0);
}

uint64_t sub_100124720()
{
  uint64_t v2 = *v1;
  sub_100101AE8();
  uint64_t *v4 = v3;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v6 = sub_10012588C();
    v7(v6);
    uint64_t v8 = sub_100124C08;
  }
  else
  {
    uint64_t v9 = sub_10012588C();
    v10(v9);
    uint64_t v8 = sub_1001248A4;
  }
  return _swift_task_switch(v8, v5, 0);
}

#error "100124B14: call analysis failed (funcsize=199)"

#error "100124E78: call analysis failed (funcsize=199)"

uint64_t sub_100124F6C()
{
  sub_1000086E0();
  sub_100008660();
  uint64_t v1 = *v0;
  sub_1000086D0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10002FB10();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100125048()
{
  sub_1000086E0();
  _OSActivity.close()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1001250BC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001250FC()
{
  sub_1000086EC();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000E1FC;
  uint64_t v4 = sub_100057FD0();
  return sub_100124544(v4, v5, v6, v2);
}

uint64_t sub_1001251A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  sub_10002FA4C(v12);
  *(void *)(v6 + 72) = v13;
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_100125280, 0, 0);
}

uint64_t sub_100125280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100030850();
  uint64_t v13 = v12[10];
  uint64_t v14 = v12[8];
  uint64_t v15 = v12[9];
  type metadata accessor for ContinuousClock();
  sub_1001257D8(&qword_10015DAF0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1001257D8(&qword_10015F8A0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v12[12] = v16;
  v12[13] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v13, v14);
  uint64_t v17 = swift_task_alloc();
  uint64_t v18 = (void *)sub_1001258C4(v17);
  *uint64_t v18 = v19;
  v18[1] = sub_100125404;
  sub_1000307C8();
  return dispatch thunk of Clock.sleep(until:tolerance:)(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
}

uint64_t sub_100125404()
{
  sub_100008660();
  uint64_t v3 = v2;
  sub_100101AE8();
  void *v4 = v3;
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v5[12];
  uint64_t v7 = v5[11];
  uint64_t v8 = v5[8];
  uint64_t v9 = *v1;
  sub_1000086D0();
  *uint64_t v10 = v9;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  v6(v7, v8);
  if (v0)
  {
    return _swift_task_switch(sub_100125588, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000EF7C();
    return v11();
  }
}

uint64_t sub_100125588()
{
  sub_1000086E0();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000EF7C();
  return v0();
}

uint64_t sub_1001255EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100125654(uint64_t a1)
{
  uint64_t v2 = sub_100003A70(&qword_10015B740);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001256B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012571C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003A70(&qword_10015B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100125784()
{
  unint64_t result = qword_10015B770;
  if (!qword_10015B770)
  {
    sub_100006A5C(&qword_10015B228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10015B770);
  }
  return result;
}

uint64_t sub_1001257D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100125820()
{
  return swift_task_dealloc();
}

uint64_t sub_100125848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100125870(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_10012588C()
{
  return v0;
}

void sub_1001258A4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1001258C4(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t POSIXError._nsError.getter()
{
  return POSIXError._nsError.getter();
}

uint64_t type metadata accessor for POSIXError()
{
  return type metadata accessor for POSIXError();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.+ infix(_:_:)()
{
  return static Date.+ infix(_:_:)();
}

uint64_t static Date.- infix(_:_:)()
{
  return static Date.- infix(_:_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t UUID.hash(into:)()
{
  return UUID.hash(into:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static Catalog.monitorUpdates(for:on:)()
{
  return static Catalog.monitorUpdates(for:on:)();
}

uint64_t static Catalog.modelManagerDefaultMemoryBudget.getter()
{
  return static Catalog.modelManagerDefaultMemoryBudget.getter();
}

uint64_t static Catalog.modelManagerForegroundOvercommitBudget.getter()
{
  return static Catalog.modelManagerForegroundOvercommitBudget.getter();
}

uint64_t static Catalog.Resource.DisabledUseCaseList.All()()
{
  return static Catalog.Resource.DisabledUseCaseList.All()();
}

uint64_t dispatch thunk of CatalogAssetProtocol.version.getter()
{
  return dispatch thunk of CatalogAssetProtocol.version.getter();
}

uint64_t dispatch thunk of CatalogAssetProtocol.contents.getter()
{
  return dispatch thunk of CatalogAssetProtocol.contents.getter();
}

uint64_t dispatch thunk of CatalogClient.resourceBundle(for:)()
{
  return dispatch thunk of CatalogClient.resourceBundle(for:)();
}

uint64_t dispatch thunk of CatalogClient.resourceStatus(identifier:)()
{
  return dispatch thunk of CatalogClient.resourceStatus(identifier:)();
}

uint64_t dispatch thunk of CatalogClient.resource(for:)()
{
  return dispatch thunk of CatalogClient.resource(for:)();
}

uint64_t dispatch thunk of CatalogClient.resources()()
{
  return dispatch thunk of CatalogClient.resources()();
}

uint64_t CatalogClient.init()()
{
  return CatalogClient.init()();
}

uint64_t type metadata accessor for CatalogClient()
{
  return type metadata accessor for CatalogClient();
}

uint64_t type metadata accessor for CatalogErrors.AssetErrors()
{
  return type metadata accessor for CatalogErrors.AssetErrors();
}

uint64_t dispatch thunk of CatalogResource.dependentResourceIDs.getter()
{
  return dispatch thunk of CatalogResource.dependentResourceIDs.getter();
}

uint64_t dispatch thunk of CatalogResource.assetBacked.getter()
{
  return dispatch thunk of CatalogResource.assetBacked.getter();
}

uint64_t dispatch thunk of CatalogResource.id.getter()
{
  return dispatch thunk of CatalogResource.id.getter();
}

uint64_t CostProfile.onDeviceMemory.getter()
{
  return CostProfile.onDeviceMemory.getter();
}

uint64_t CostProfile.dynamicModeAllowed.getter()
{
  return CostProfile.dynamicModeAllowed.getter();
}

uint64_t CostProfile.energyEfficientMode.getter()
{
  return CostProfile.energyEfficientMode.getter();
}

uint64_t CostProfile.cacheable.getter()
{
  return CostProfile.cacheable.getter();
}

uint64_t type metadata accessor for CostProfile()
{
  return type metadata accessor for CostProfile();
}

uint64_t AssetVersion.number.getter()
{
  return AssetVersion.number.getter();
}

uint64_t type metadata accessor for AssetVersion()
{
  return type metadata accessor for AssetVersion();
}

uint64_t dispatch thunk of AssetContents.baseURL.getter()
{
  return dispatch thunk of AssetContents.baseURL.getter();
}

uint64_t dispatch thunk of ResourceBundle.resources.getter()
{
  return dispatch thunk of ResourceBundle.resources.getter();
}

uint64_t type metadata accessor for ResourceStatus()
{
  return type metadata accessor for ResourceStatus();
}

uint64_t StatusResponse.status.getter()
{
  return StatusResponse.status.getter();
}

uint64_t dispatch thunk of ManagedResource.runtimeInformation.getter()
{
  return dispatch thunk of ManagedResource.runtimeInformation.getter();
}

uint64_t dispatch thunk of ManagedResource.cost.getter()
{
  return dispatch thunk of ManagedResource.cost.getter();
}

uint64_t InferenceProvider.hostedOnServer.getter()
{
  return InferenceProvider.hostedOnServer.getter();
}

uint64_t InferenceProvider.id.getter()
{
  return InferenceProvider.id.getter();
}

uint64_t type metadata accessor for InferenceProvider()
{
  return type metadata accessor for InferenceProvider();
}

uint64_t dispatch thunk of AssetBackedResource.fetchLockedAsset(with:)()
{
  return dispatch thunk of AssetBackedResource.fetchLockedAsset(with:)();
}

uint64_t dispatch thunk of AssetBackedResource.fetchAsset()()
{
  return dispatch thunk of AssetBackedResource.fetchAsset()();
}

uint64_t ManagedRuntimeInformation.instanceID.getter()
{
  return ManagedRuntimeInformation.instanceID.getter();
}

uint64_t ManagedRuntimeInformation.inferenceProvider.getter()
{
  return ManagedRuntimeInformation.inferenceProvider.getter();
}

uint64_t type metadata accessor for ManagedRuntimeInformation()
{
  return type metadata accessor for ManagedRuntimeInformation();
}

uint64_t type metadata accessor for AssetLock()
{
  return type metadata accessor for AssetLock();
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)()
{
  return _HashTable.UnsafeHandle._startIterator(bucket:)();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return _HashTable.BucketIterator.currentValue.getter();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return _HashTable.BucketIterator.currentValue.setter();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return static _HashTable.maximumCapacity(forScale:)();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return static _HashTable.minimumCapacity(forScale:)();
}

uint64_t _HashTable.copy()()
{
  return _HashTable.copy()();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return static _HashTable.scale(forCapacity:)();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return _HashTable.init(scale:reservedScale:)();
}

uint64_t static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)()
{
  return static _UnsafeBitSet._withTemporaryBitSet(wordCount:run:)();
}

Swift::Bool __swiftcall _UnsafeBitSet.remove(_:)(Swift::UInt a1)
{
  return _UnsafeBitSet.remove(_:)(a1);
}

Swift::UInt_optional __swiftcall _UnsafeBitSet.Iterator.next()()
{
  Swift::UInt v0 = _UnsafeBitSet.Iterator.next()();
  result.value = v0;
  result.is_nil = v1;
  return result;
}

Swift::Void __swiftcall _UnsafeBitSet.insertAll(upTo:)(Swift::UInt upTo)
{
}

uint64_t AppExtensionProcess._auditToken.getter()
{
  return AppExtensionProcess._auditToken.getter();
}

uint64_t AppExtensionProcess.Configuration.init(appExtensionIdentity:onInterruption:)()
{
  return AppExtensionProcess.Configuration.init(appExtensionIdentity:onInterruption:)();
}

uint64_t AppExtensionProcess.Configuration._instanceIdentifier.setter()
{
  return AppExtensionProcess.Configuration._instanceIdentifier.setter();
}

uint64_t type metadata accessor for AppExtensionProcess.Configuration()
{
  return type metadata accessor for AppExtensionProcess.Configuration();
}

uint64_t AppExtensionProcess._InstanceIdentifier.init()()
{
  return AppExtensionProcess._InstanceIdentifier.init()();
}

uint64_t type metadata accessor for AppExtensionProcess._InstanceIdentifier()
{
  return type metadata accessor for AppExtensionProcess._InstanceIdentifier();
}

uint64_t AppExtensionProcess._makeLibXPCConnection()()
{
  return AppExtensionProcess._makeLibXPCConnection()();
}

uint64_t type metadata accessor for AppExtensionProcess()
{
  return type metadata accessor for AppExtensionProcess();
}

uint64_t type metadata accessor for AppExtensionIdentity()
{
  return type metadata accessor for AppExtensionIdentity();
}

uint64_t AppExtensionIdentity.init(_:)()
{
  return AppExtensionIdentity.init(_:)();
}

uint64_t _AppExtensionQuery.init(extensionPointIdentifier:)()
{
  return _AppExtensionQuery.init(extensionPointIdentifier:)();
}

uint64_t type metadata accessor for _AppExtensionQuery.Results.AsyncIterator()
{
  return type metadata accessor for _AppExtensionQuery.Results.AsyncIterator();
}

uint64_t _AppExtensionQuery.Results.makeAsyncIterator()()
{
  return _AppExtensionQuery.Results.makeAsyncIterator()();
}

uint64_t type metadata accessor for _AppExtensionQuery.Results()
{
  return type metadata accessor for _AppExtensionQuery.Results();
}

uint64_t _AppExtensionQuery.results.getter()
{
  return _AppExtensionQuery.results.getter();
}

uint64_t type metadata accessor for _AppExtensionQuery()
{
  return type metadata accessor for _AppExtensionQuery();
}

uint64_t _AppExtensionIdentity.attributes.getter()
{
  return _AppExtensionIdentity.attributes.getter();
}

uint64_t _AppExtensionIdentity.bundleIdentifier.getter()
{
  return _AppExtensionIdentity.bundleIdentifier.getter();
}

uint64_t type metadata accessor for _AppExtensionIdentity()
{
  return type metadata accessor for _AppExtensionIdentity();
}

uint64_t ModelXPCRequest.FetchModelInstance.session.getter()
{
  return ModelXPCRequest.FetchModelInstance.session.getter();
}

uint64_t ModelXPCRequest.FetchModelInstance.Response.init(modelInstance:)()
{
  return ModelXPCRequest.FetchModelInstance.Response.init(modelInstance:)();
}

uint64_t type metadata accessor for ModelXPCRequest.FetchModelInstance()
{
  return type metadata accessor for ModelXPCRequest.FetchModelInstance();
}

uint64_t static ModelXPCRequest.serviceName.getter()
{
  return static ModelXPCRequest.serviceName.getter();
}

uint64_t ModelXPCRequest.CancelRequest.id.getter()
{
  return ModelXPCRequest.CancelRequest.id.getter();
}

uint64_t ModelXPCRequest.CancelRequest.Response.init()()
{
  return ModelXPCRequest.CancelRequest.Response.init()();
}

uint64_t ModelXPCRequest.CancelRequest.sessionID.getter()
{
  return ModelXPCRequest.CancelRequest.sessionID.getter();
}

uint64_t type metadata accessor for ModelXPCRequest.CancelRequest()
{
  return type metadata accessor for ModelXPCRequest.CancelRequest();
}

uint64_t ModelXPCRequest.AcquireRequest.Response.init()()
{
  return ModelXPCRequest.AcquireRequest.Response.init()();
}

uint64_t ModelXPCRequest.AcquireRequest.assertion.getter()
{
  return ModelXPCRequest.AcquireRequest.assertion.getter();
}

uint64_t type metadata accessor for ModelXPCRequest.AcquireRequest()
{
  return type metadata accessor for ModelXPCRequest.AcquireRequest();
}

uint64_t ModelXPCRequest.ExecuteRequest.taskPriority.getter()
{
  return ModelXPCRequest.ExecuteRequest.taskPriority.getter();
}

uint64_t ModelXPCRequest.ExecuteRequest.modelBundleID.getter()
{
  return ModelXPCRequest.ExecuteRequest.modelBundleID.getter();
}

uint64_t ModelXPCRequest.ExecuteRequest.Response.init(result:lockedInferenceProvider:)()
{
  return ModelXPCRequest.ExecuteRequest.Response.init(result:lockedInferenceProvider:)();
}

uint64_t ModelXPCRequest.ExecuteRequest.metadata.getter()
{
  return ModelXPCRequest.ExecuteRequest.metadata.getter();
}

uint64_t type metadata accessor for ModelXPCRequest.ExecuteRequest()
{
  return type metadata accessor for ModelXPCRequest.ExecuteRequest();
}

uint64_t ModelXPCRequest.PrewarmSession.id.getter()
{
  return ModelXPCRequest.PrewarmSession.id.getter();
}

uint64_t ModelXPCRequest.PrewarmSession.Response.init()()
{
  return ModelXPCRequest.PrewarmSession.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.PrewarmSession()
{
  return type metadata accessor for ModelXPCRequest.PrewarmSession();
}

uint64_t ModelXPCRequest.ReleaseRequest.id.getter()
{
  return ModelXPCRequest.ReleaseRequest.id.getter();
}

uint64_t ModelXPCRequest.ReleaseRequest.Response.init()()
{
  return ModelXPCRequest.ReleaseRequest.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.ReleaseRequest()
{
  return type metadata accessor for ModelXPCRequest.ReleaseRequest();
}

uint64_t ModelXPCRequest.HoldAssetBundle.assetBundleIdentifier.getter()
{
  return ModelXPCRequest.HoldAssetBundle.assetBundleIdentifier.getter();
}

uint64_t ModelXPCRequest.HoldAssetBundle.Response.init()()
{
  return ModelXPCRequest.HoldAssetBundle.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.HoldAssetBundle()
{
  return type metadata accessor for ModelXPCRequest.HoldAssetBundle();
}

uint64_t ModelXPCRequest.LoadAssetBundle.assetBundleIdentifier.getter()
{
  return ModelXPCRequest.LoadAssetBundle.assetBundleIdentifier.getter();
}

uint64_t ModelXPCRequest.LoadAssetBundle.dynamicMode.getter()
{
  return ModelXPCRequest.LoadAssetBundle.dynamicMode.getter();
}

uint64_t ModelXPCRequest.LoadAssetBundle.Response.init()()
{
  return ModelXPCRequest.LoadAssetBundle.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.LoadAssetBundle()
{
  return type metadata accessor for ModelXPCRequest.LoadAssetBundle();
}

uint64_t ModelXPCRequest.FetchAssetsRequest.Response.init(assetInfo:)()
{
  return ModelXPCRequest.FetchAssetsRequest.Response.init(assetInfo:)();
}

uint64_t type metadata accessor for ModelXPCRequest.FetchAssetsRequest()
{
  return type metadata accessor for ModelXPCRequest.FetchAssetsRequest();
}

uint64_t ModelXPCRequest.FetchPolicyRequest.policyName.getter()
{
  return ModelXPCRequest.FetchPolicyRequest.policyName.getter();
}

uint64_t ModelXPCRequest.FetchPolicyRequest.Response.init(policy:)()
{
  return ModelXPCRequest.FetchPolicyRequest.Response.init(policy:)();
}

uint64_t type metadata accessor for ModelXPCRequest.FetchPolicyRequest()
{
  return type metadata accessor for ModelXPCRequest.FetchPolicyRequest();
}

uint64_t ModelXPCRequest.CancelSessionRequest.id.getter()
{
  return ModelXPCRequest.CancelSessionRequest.id.getter();
}

uint64_t ModelXPCRequest.CancelSessionRequest.Response.init()()
{
  return ModelXPCRequest.CancelSessionRequest.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.CancelSessionRequest()
{
  return type metadata accessor for ModelXPCRequest.CancelSessionRequest();
}

uint64_t ModelXPCRequest.CreateSessionRequest.alreadyLockedInferenceProvider.getter()
{
  return ModelXPCRequest.CreateSessionRequest.alreadyLockedInferenceProvider.getter();
}

uint64_t ModelXPCRequest.CreateSessionRequest.Response.init(sessionID:)()
{
  return ModelXPCRequest.CreateSessionRequest.Response.init(sessionID:)();
}

uint64_t ModelXPCRequest.CreateSessionRequest.metadata.getter()
{
  return ModelXPCRequest.CreateSessionRequest.metadata.getter();
}

uint64_t type metadata accessor for ModelXPCRequest.CreateSessionRequest()
{
  return type metadata accessor for ModelXPCRequest.CreateSessionRequest();
}

uint64_t ModelXPCRequest.DeleteSessionRequest.id.getter()
{
  return ModelXPCRequest.DeleteSessionRequest.id.getter();
}

uint64_t ModelXPCRequest.DeleteSessionRequest.Response.init()()
{
  return ModelXPCRequest.DeleteSessionRequest.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.DeleteSessionRequest()
{
  return type metadata accessor for ModelXPCRequest.DeleteSessionRequest();
}

uint64_t ModelXPCRequest.SetAssetsHaveUpdated.Response.init()()
{
  return ModelXPCRequest.SetAssetsHaveUpdated.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated()
{
  return type metadata accessor for ModelXPCRequest.SetAssetsHaveUpdated();
}

uint64_t ModelXPCRequest.FetchAssertionsRequest.Response.init(assertions:)()
{
  return ModelXPCRequest.FetchAssertionsRequest.Response.init(assertions:)();
}

uint64_t type metadata accessor for ModelXPCRequest.FetchAssertionsRequest()
{
  return type metadata accessor for ModelXPCRequest.FetchAssertionsRequest();
}

uint64_t ModelXPCRequest.ForceAssetVersionSwitch.Response.init()()
{
  return ModelXPCRequest.ForceAssetVersionSwitch.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch()
{
  return type metadata accessor for ModelXPCRequest.ForceAssetVersionSwitch();
}

uint64_t ModelXPCRequest.RestoreAssertionsRequest.assertions.getter()
{
  return ModelXPCRequest.RestoreAssertionsRequest.assertions.getter();
}

uint64_t ModelXPCRequest.RestoreAssertionsRequest.Response.init()()
{
  return ModelXPCRequest.RestoreAssertionsRequest.Response.init()();
}

uint64_t type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest()
{
  return type metadata accessor for ModelXPCRequest.RestoreAssertionsRequest();
}

uint64_t ModelXPCRequest.FetchDynamicAssetsRequest.Response.init(assetInfo:)()
{
  return ModelXPCRequest.FetchDynamicAssetsRequest.Response.init(assetInfo:)();
}

uint64_t type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest()
{
  return type metadata accessor for ModelXPCRequest.FetchDynamicAssetsRequest();
}

uint64_t ModelXPCRequest.StartMonitoringInferences.Response.init()()
{
  return ModelXPCRequest.StartMonitoringInferences.Response.init()();
}

uint64_t ModelXPCRequest.StartMonitoringInferences.endpoint.getter()
{
  return ModelXPCRequest.StartMonitoringInferences.endpoint.getter();
}

uint64_t type metadata accessor for ModelXPCRequest.StartMonitoringInferences()
{
  return type metadata accessor for ModelXPCRequest.StartMonitoringInferences();
}

uint64_t ModelXPCRequest.DumpState.Response.init(stateDump:)()
{
  return ModelXPCRequest.DumpState.Response.init(stateDump:)();
}

uint64_t type metadata accessor for ModelXPCRequest.DumpState()
{
  return type metadata accessor for ModelXPCRequest.DumpState();
}

uint64_t type metadata accessor for ModelXPCRequest()
{
  return type metadata accessor for ModelXPCRequest();
}

uint64_t ModelInstance.init(assetBundleIdentifier:inferenceProvider:)()
{
  return ModelInstance.init(assetBundleIdentifier:inferenceProvider:)();
}

uint64_t type metadata accessor for ModelInstance()
{
  return type metadata accessor for ModelInstance();
}

uint64_t type metadata accessor for ModelXPCResult()
{
  return type metadata accessor for ModelXPCResult();
}

uint64_t ModelManagerError.init(wrapping:)()
{
  return ModelManagerError.init(wrapping:)();
}

uint64_t type metadata accessor for ModelManagerError()
{
  return type metadata accessor for ModelManagerError();
}

uint64_t AuditToken.processIdentifier.getter()
{
  return AuditToken.processIdentifier.getter();
}

uint64_t AuditToken.auditUserIdentifier.getter()
{
  return AuditToken.auditUserIdentifier.getter();
}

uint64_t AuditToken.token.getter()
{
  return AuditToken.token.getter();
}

uint64_t type metadata accessor for AuditToken()
{
  return type metadata accessor for AuditToken();
}

uint64_t type metadata accessor for ClientData()
{
  return type metadata accessor for ClientData();
}

uint64_t ClientData.init(_:)()
{
  return ClientData.init(_:)();
}

uint64_t default argument 0 of ClientData.init(_:)()
{
  return default argument 0 of ClientData.init(_:)();
}

uint64_t CountedSet.init(arrayLiteral:)()
{
  return CountedSet.init(arrayLiteral:)();
}

uint64_t CountedSet.add(_:)()
{
  return CountedSet.add(_:)();
}

uint64_t CountedSet.count(of:)()
{
  return CountedSet.count(of:)();
}

uint64_t CountedSet.remove(_:)()
{
  return CountedSet.remove(_:)();
}

uint64_t type metadata accessor for CountedSet()
{
  return type metadata accessor for CountedSet();
}

uint64_t AssetPolicy.allowAssetTimerUse.getter()
{
  return AssetPolicy.allowAssetTimerUse.getter();
}

uint64_t type metadata accessor for AssetPolicy()
{
  return type metadata accessor for AssetPolicy();
}

Swift::Void __swiftcall _OSActivity.close()()
{
}

uint64_t type metadata accessor for _OSActivity()
{
  return type metadata accessor for _OSActivity();
}

uint64_t _OSActivity.__allocating_init(_:)()
{
  return _OSActivity.__allocating_init(_:)();
}

uint64_t generalLogger.getter()
{
  return generalLogger.getter();
}

uint64_t subsystemName.getter()
{
  return subsystemName.getter();
}

uint64_t InferenceError.Context.fallbackAllowed.getter()
{
  return InferenceError.Context.fallbackAllowed.getter();
}

uint64_t InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)()
{
  return InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
}

uint64_t InferenceError.Context.code.getter()
{
  return InferenceError.Context.code.getter();
}

uint64_t InferenceError.Context.domain.getter()
{
  return InferenceError.Context.domain.getter();
}

uint64_t type metadata accessor for InferenceError.Context()
{
  return type metadata accessor for InferenceError.Context();
}

uint64_t InferenceError.context.getter()
{
  return InferenceError.context.getter();
}

uint64_t InferenceError.caseName.getter()
{
  return InferenceError.caseName.getter();
}

uint64_t type metadata accessor for InferenceError()
{
  return type metadata accessor for InferenceError();
}

uint64_t UUIDIdentifier.uuidString.getter()
{
  return UUIDIdentifier.uuidString.getter();
}

uint64_t static UUIDIdentifier.== infix(_:_:)()
{
  return static UUIDIdentifier.== infix(_:_:)();
}

uint64_t UUIDIdentifier.uuid.getter()
{
  return UUIDIdentifier.uuid.getter();
}

uint64_t UUIDIdentifier.init()()
{
  return UUIDIdentifier.init()();
}

uint64_t RequestMetadata.clientData.getter()
{
  return RequestMetadata.clientData.getter();
}

uint64_t RequestMetadata.isInference.getter()
{
  return RequestMetadata.isInference.getter();
}

uint64_t RequestMetadata.requiredAssetIDs.getter()
{
  return RequestMetadata.requiredAssetIDs.getter();
}

uint64_t RequestMetadata.init(loggingIdentifier:clientData:UUID:sessionID:requiredAssetIDs:isInference:isStream:)()
{
  return RequestMetadata.init(loggingIdentifier:clientData:UUID:sessionID:requiredAssetIDs:isInference:isStream:)();
}

uint64_t RequestMetadata.loggingIdentifier.getter()
{
  return RequestMetadata.loggingIdentifier.getter();
}

uint64_t RequestMetadata.id.getter()
{
  return RequestMetadata.id.getter();
}

uint64_t RequestMetadata.uuid.getter()
{
  return RequestMetadata.uuid.getter();
}

uint64_t RequestMetadata.isStream.getter()
{
  return RequestMetadata.isStream.getter();
}

uint64_t RequestMetadata.sessionID.getter()
{
  return RequestMetadata.sessionID.getter();
}

uint64_t type metadata accessor for RequestMetadata()
{
  return type metadata accessor for RequestMetadata();
}

uint64_t RequestPriority.rawValue.getter()
{
  return RequestPriority.rawValue.getter();
}

uint64_t type metadata accessor for RequestPriority()
{
  return type metadata accessor for RequestPriority();
}

uint64_t type metadata accessor for InferenceMonitor.Event()
{
  return type metadata accessor for InferenceMonitor.Event();
}

uint64_t type metadata accessor for DaemonSessionState()
{
  return type metadata accessor for DaemonSessionState();
}

uint64_t static OSEligibilityChecker.shared.getter()
{
  return static OSEligibilityChecker.shared.getter();
}

uint64_t type metadata accessor for OSEligibilityChecker()
{
  return type metadata accessor for OSEligibilityChecker();
}

Swift::Void __swiftcall OSEligibilityChecking.prewarmGreymatter()()
{
}

uint64_t static BuiltInInferenceProvider.allCases.getter()
{
  return static BuiltInInferenceProvider.allCases.getter();
}

uint64_t BuiltInInferenceProvider.rawValue.getter()
{
  return BuiltInInferenceProvider.rawValue.getter();
}

uint64_t type metadata accessor for BuiltInInferenceProvider()
{
  return type metadata accessor for BuiltInInferenceProvider();
}

uint64_t type metadata accessor for RequestCancellationReason()
{
  return type metadata accessor for RequestCancellationReason();
}

uint64_t InferenceProviderXPCSender.__allocating_init(builtInProvider:session:)()
{
  return InferenceProviderXPCSender.__allocating_init(builtInProvider:session:)();
}

uint64_t static InferenceProviderXPCSender.builtInInferenceProviderExtensionIdentityCache.getter()
{
  return static InferenceProviderXPCSender.builtInInferenceProviderExtensionIdentityCache.getter();
}

uint64_t static InferenceProviderXPCSender.inferenceProviderIdentifierKey.getter()
{
  return static InferenceProviderXPCSender.inferenceProviderIdentifierKey.getter();
}

uint64_t static InferenceProviderXPCSender.extensionPointIdentifier.getter()
{
  return static InferenceProviderXPCSender.extensionPointIdentifier.getter();
}

uint64_t InferenceProviderXPCSender.__allocating_init(session:)()
{
  return InferenceProviderXPCSender.__allocating_init(session:)();
}

uint64_t type metadata accessor for InferenceProviderXPCSender()
{
  return type metadata accessor for InferenceProviderXPCSender();
}

uint64_t InferenceProviderDescriptor.description.getter()
{
  return InferenceProviderDescriptor.description.getter();
}

uint64_t InferenceProviderDescriptor.hostedOnServer.getter()
{
  return InferenceProviderDescriptor.hostedOnServer.getter();
}

uint64_t static InferenceProviderDescriptor.== infix(_:_:)()
{
  return static InferenceProviderDescriptor.== infix(_:_:)();
}

uint64_t InferenceProviderDescriptor.init(id:instance:hostedOnServer:)()
{
  return InferenceProviderDescriptor.init(id:instance:hostedOnServer:)();
}

uint64_t InferenceProviderDescriptor.id.getter()
{
  return InferenceProviderDescriptor.id.getter();
}

uint64_t type metadata accessor for InferenceProviderDescriptor.Instance()
{
  return type metadata accessor for InferenceProviderDescriptor.Instance();
}

uint64_t InferenceProviderDescriptor.instance.getter()
{
  return InferenceProviderDescriptor.instance.getter();
}

uint64_t type metadata accessor for InferenceProviderDescriptor()
{
  return type metadata accessor for InferenceProviderDescriptor();
}

uint64_t TaskCancellingXPCPeerHandler.__allocating_init(handler:)()
{
  return TaskCancellingXPCPeerHandler.__allocating_init(handler:)();
}

uint64_t type metadata accessor for InferenceProviderRequestResult()
{
  return type metadata accessor for InferenceProviderRequestResult();
}

uint64_t InferenceProviderAssetDescriptor.init(identifier:version:)()
{
  return InferenceProviderAssetDescriptor.init(identifier:version:)();
}

uint64_t InferenceProviderAssetDescriptor.identifier.getter()
{
  return InferenceProviderAssetDescriptor.identifier.getter();
}

uint64_t InferenceProviderAssetDescriptor.description.getter()
{
  return InferenceProviderAssetDescriptor.description.getter();
}

uint64_t InferenceProviderAssetDescriptor.version.getter()
{
  return InferenceProviderAssetDescriptor.version.getter();
}

uint64_t type metadata accessor for InferenceProviderAssetDescriptor()
{
  return type metadata accessor for InferenceProviderAssetDescriptor();
}

uint64_t TaskCancellingXPCReceivedMessage.auditToken.getter()
{
  return TaskCancellingXPCReceivedMessage.auditToken.getter();
}

uint64_t TaskCancellingXPCReceivedMessage.decode()()
{
  return TaskCancellingXPCReceivedMessage.decode()();
}

uint64_t InferenceProviderPrewarmInformation.init(bundleIdentifier:requestorAuditToken:sessionUUID:useCaseIdentifier:onBehalfOfPid:)()
{
  return InferenceProviderPrewarmInformation.init(bundleIdentifier:requestorAuditToken:sessionUUID:useCaseIdentifier:onBehalfOfPid:)();
}

uint64_t InferenceProviderPrewarmInformation.modelBundleIdentifier.getter()
{
  return InferenceProviderPrewarmInformation.modelBundleIdentifier.getter();
}

uint64_t type metadata accessor for InferenceProviderPrewarmInformation()
{
  return type metadata accessor for InferenceProviderPrewarmInformation();
}

uint64_t InferenceProviderRequestConfiguration.auditToken.getter()
{
  return InferenceProviderRequestConfiguration.auditToken.getter();
}

uint64_t InferenceProviderRequestConfiguration.requestUUID.getter()
{
  return InferenceProviderRequestConfiguration.requestUUID.getter();
}

uint64_t InferenceProviderRequestConfiguration.requestPriority.getter()
{
  return InferenceProviderRequestConfiguration.requestPriority.getter();
}

uint64_t InferenceProviderRequestConfiguration.requestPriority.setter()
{
  return InferenceProviderRequestConfiguration.requestPriority.setter();
}

uint64_t InferenceProviderRequestConfiguration.useCaseIdentifier.getter()
{
  return InferenceProviderRequestConfiguration.useCaseIdentifier.getter();
}

uint64_t InferenceProviderRequestConfiguration.init(sessionLoggingIdentifier:requestLoggingIdentifier:assetIdentifiers:requestUUID:sessionUUID:sessionSetID:onBehalfOfPID:parentOfOnBehalfOfPID:auditToken:auditSessionUID:useCaseIdentifier:assetBundleIdentifier:requestPriority:)()
{
  return InferenceProviderRequestConfiguration.init(sessionLoggingIdentifier:requestLoggingIdentifier:assetIdentifiers:requestUUID:sessionUUID:sessionSetID:onBehalfOfPID:parentOfOnBehalfOfPID:auditToken:auditSessionUID:useCaseIdentifier:assetBundleIdentifier:requestPriority:)();
}

uint64_t type metadata accessor for InferenceProviderRequestConfiguration()
{
  return type metadata accessor for InferenceProviderRequestConfiguration();
}

uint64_t Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return default argument 1 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return default argument 2 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return default argument 3 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return default argument 4 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)()
{
  return default argument 0 of Policy.init(assetPolicy:memoryBudget:cancelPriority:inactiveAssetTimeout:assetTransitionDelay:)();
}

uint64_t Policy.assetPolicy.getter()
{
  return Policy.assetPolicy.getter();
}

uint64_t Policy.memoryBudget.getter()
{
  return Policy.memoryBudget.getter();
}

uint64_t Policy.cancelPriority.getter()
{
  return Policy.cancelPriority.getter();
}

uint64_t Policy.assetTransitionDelay.getter()
{
  return Policy.assetTransitionDelay.getter();
}

uint64_t Policy.inactiveAssetTimeout.getter()
{
  return Policy.inactiveAssetTimeout.getter();
}

uint64_t static Policy.defaultMemoryBudgetMarker.getter()
{
  return static Policy.defaultMemoryBudgetMarker.getter();
}

uint64_t static Policy.defaultAssetTransitionDelay.getter()
{
  return static Policy.defaultAssetTransitionDelay.getter();
}

uint64_t static Policy.defaultInactiveAssetTimeout.getter()
{
  return static Policy.defaultInactiveAssetTimeout.getter();
}

uint64_t static Policy.== infix(_:_:)()
{
  return static Policy.== infix(_:_:)();
}

uint64_t type metadata accessor for Policy()
{
  return type metadata accessor for Policy();
}

uint64_t Session.Metadata.parentOfOnBehalfOfPID.getter()
{
  return Session.Metadata.parentOfOnBehalfOfPID.getter();
}

uint64_t Session.Metadata.sessionSetID.getter()
{
  return Session.Metadata.sessionSetID.getter();
}

uint64_t Session.Metadata.onBehalfOfPID.getter()
{
  return Session.Metadata.onBehalfOfPID.getter();
}

uint64_t Session.Metadata.loggingIdentifier.getter()
{
  return Session.Metadata.loggingIdentifier.getter();
}

uint64_t Session.Metadata.id.getter()
{
  return Session.Metadata.id.getter();
}

uint64_t Session.Metadata.init(supportedAssetBundleIdentifiers:useCaseID:onBehalfOfPID:parentOfOnBehalfOfPID:loggingIdentifier:id:sessionSetID:)()
{
  return Session.Metadata.init(supportedAssetBundleIdentifiers:useCaseID:onBehalfOfPID:parentOfOnBehalfOfPID:loggingIdentifier:id:sessionSetID:)();
}

uint64_t Session.Metadata.supportedAssetBundleIdentifiers.getter()
{
  return Session.Metadata.supportedAssetBundleIdentifiers.getter();
}

uint64_t Session.Metadata.useCaseID.getter()
{
  return Session.Metadata.useCaseID.getter();
}

uint64_t type metadata accessor for Session.Metadata()
{
  return type metadata accessor for Session.Metadata();
}

uint64_t type metadata accessor for Session()
{
  return type metadata accessor for Session();
}

uint64_t Assertion.DaemonRep.acquirerPID.getter()
{
  return Assertion.DaemonRep.acquirerPID.getter();
}

uint64_t Assertion.DaemonRep.receivedFromPID(_:)()
{
  return Assertion.DaemonRep.receivedFromPID(_:)();
}

uint64_t Assertion.DaemonRep.id.getter()
{
  return Assertion.DaemonRep.id.getter();
}

uint64_t Assertion.DaemonRep.init(policy:description:id:)()
{
  return Assertion.DaemonRep.init(policy:description:id:)();
}

uint64_t Assertion.DaemonRep.policy.getter()
{
  return Assertion.DaemonRep.policy.getter();
}

uint64_t type metadata accessor for Assertion.DaemonRep()
{
  return type metadata accessor for Assertion.DaemonRep();
}

uint64_t type metadata accessor for Assertion()
{
  return type metadata accessor for Assertion();
}

uint64_t AssetCost.init(onDeviceMemory:)()
{
  return AssetCost.init(onDeviceMemory:)();
}

uint64_t AssetCost.onDeviceMemory.getter()
{
  return AssetCost.onDeviceMemory.getter();
}

uint64_t static AssetCost.+ infix(_:_:)()
{
  return static AssetCost.+ infix(_:_:)();
}

uint64_t static AssetCost.== infix(_:_:)()
{
  return static AssetCost.== infix(_:_:)();
}

uint64_t static AssetCost.zero.getter()
{
  return static AssetCost.zero.getter();
}

uint64_t type metadata accessor for AssetCost()
{
  return type metadata accessor for AssetCost();
}

uint64_t AssetInfo.init(identifier:cost:version:hasForegroundSession:timeLastRequestEnded:)()
{
  return AssetInfo.init(identifier:cost:version:hasForegroundSession:timeLastRequestEnded:)();
}

uint64_t type metadata accessor for AssetInfo()
{
  return type metadata accessor for AssetInfo();
}

uint64_t type metadata accessor for LoadState()
{
  return type metadata accessor for LoadState();
}

uint64_t StateDump.ExecutionGroupState.init(id:assets:requests:state:)()
{
  return StateDump.ExecutionGroupState.init(id:assets:requests:state:)();
}

uint64_t type metadata accessor for StateDump.ExecutionGroupState()
{
  return type metadata accessor for StateDump.ExecutionGroupState();
}

uint64_t StateDump.ExecutionGroupsState.init(active:pendingForeground:pendingBackground:)()
{
  return StateDump.ExecutionGroupsState.init(active:pendingForeground:pendingBackground:)();
}

uint64_t type metadata accessor for StateDump.ExecutionGroupsState()
{
  return type metadata accessor for StateDump.ExecutionGroupsState();
}

uint64_t StateDump.InferenceProviderState.ActiveRequest.init(request:priority:)()
{
  return StateDump.InferenceProviderState.ActiveRequest.init(request:priority:)();
}

uint64_t type metadata accessor for StateDump.InferenceProviderState.ActiveRequest()
{
  return type metadata accessor for StateDump.InferenceProviderState.ActiveRequest();
}

uint64_t StateDump.InferenceProviderState.init(pid:descriptor:activeRequests:activePriority:loadingCount:)()
{
  return StateDump.InferenceProviderState.init(pid:descriptor:activeRequests:activePriority:loadingCount:)();
}

uint64_t type metadata accessor for StateDump.InferenceProviderState()
{
  return type metadata accessor for StateDump.InferenceProviderState();
}

uint64_t StateDump.AssetState.init(descriptor:path:cost:isCacheable:dynamicModeAllowed:useEnergyEfficientMode:inferenceProvider:loadState:timeLastRequestEnded:timeLastForegroundSessionEnded:requiredByOtherAssets:foregroundSessions:requests:)()
{
  return StateDump.AssetState.init(descriptor:path:cost:isCacheable:dynamicModeAllowed:useEnergyEfficientMode:inferenceProvider:loadState:timeLastRequestEnded:timeLastForegroundSessionEnded:requiredByOtherAssets:foregroundSessions:requests:)();
}

uint64_t type metadata accessor for StateDump.AssetState()
{
  return type metadata accessor for StateDump.AssetState();
}

uint64_t StateDump.RequestState.init(identifier:session:asset:inferenceProvider:priority:)()
{
  return StateDump.RequestState.init(identifier:session:asset:inferenceProvider:priority:)();
}

uint64_t type metadata accessor for StateDump.RequestState()
{
  return type metadata accessor for StateDump.RequestState();
}

uint64_t StateDump.SessionState.init(identifier:supportedAssets:useCaseIdentifier:onBehalfOfPID:createdByPID:requests:state:)()
{
  return StateDump.SessionState.init(identifier:supportedAssets:useCaseIdentifier:onBehalfOfPID:createdByPID:requests:state:)();
}

uint64_t type metadata accessor for StateDump.SessionState()
{
  return type metadata accessor for StateDump.SessionState();
}

uint64_t StateDump.init(assertions:currentPolicy:assets:sessions:requests:runningRequests:executionGroups:inferenceProviders:disabledUseCases:trials:budget:)()
{
  return StateDump.init(assertions:currentPolicy:assets:sessions:requests:runningRequests:executionGroups:inferenceProviders:disabledUseCases:trials:budget:)();
}

uint64_t type metadata accessor for StateDump()
{
  return type metadata accessor for StateDump();
}

uint64_t GenerativeFunctionsInstrumentationError.GenericError.code.setter()
{
  return GenerativeFunctionsInstrumentationError.GenericError.code.setter();
}

uint64_t GenerativeFunctionsInstrumentationError.GenericError.domain.setter()
{
  return GenerativeFunctionsInstrumentationError.GenericError.domain.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationError.GenericError();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationError()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationError();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.useCaseIdentifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.clientRequestIdentifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.inferenceProviderIdentifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerRequestIdentifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.Identifiers.modelManagerSessionIdentifier.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
}

uint64_t GenerativeFunctionsInstrumentationEvent.identifiers.setter()
{
  return GenerativeFunctionsInstrumentationEvent.identifiers.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter()
{
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter()
{
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
}

uint64_t GenerativeFunctionsInstrumentationEvent.error.setter()
{
  return GenerativeFunctionsInstrumentationEvent.error.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent.Subtype();
}

uint64_t GenerativeFunctionsInstrumentationEvent.subtype.setter()
{
  return GenerativeFunctionsInstrumentationEvent.subtype.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.metadata.setter()
{
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t GenerativeFunctionsInstrumentationEvent.eventType.setter()
{
  return GenerativeFunctionsInstrumentationEvent.eventType.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationEvent();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.memoryCostKB.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.memoryCostKB.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Reason();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.Result();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.reason.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.reason.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.result.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.result.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.toState.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.toState.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.LoadState();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.fromState.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.fromState.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isFallbackRequest.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isFallbackRequest.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.RequestType();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.isInference.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.requestType.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.createdByPID.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.createdByPID.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.onBehalfOfPID.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.onBehalfOfPID.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest.assets.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.MMExecuteRequest();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventType.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventResult.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.sessionEventResult.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventType();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.SessionEventResult();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.createdByPID.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.createdByPID.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.onBehalfOfPID.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.onBehalfOfPID.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.containsSensitiveData.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.containsSensitiveData.setter();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.supportedAssetBundleIdentifiers.setter()
{
  return GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent.supportedAssetBundleIdentifiers.setter();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.ModelManagerSessionEvent();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
}

uint64_t static Buildable.with(_:)()
{
  return static Buildable.with(_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t EventReporter.send(eventBuiltWithPresetsAnd:)()
{
  return EventReporter.send(eventBuiltWithPresetsAnd:)();
}

uint64_t EventReporter.init()()
{
  return EventReporter.init()();
}

uint64_t type metadata accessor for EventReporter()
{
  return type metadata accessor for EventReporter();
}

uint64_t XPCSession.__allocating_init(fromConnection:targetQueue:options:incomingMessageHandler:cancellationHandler:)()
{
  return XPCSession.__allocating_init(fromConnection:targetQueue:options:incomingMessageHandler:cancellationHandler:)();
}

uint64_t static XPCSession.InitializationOptions.none.getter()
{
  return static XPCSession.InitializationOptions.none.getter();
}

uint64_t type metadata accessor for XPCSession.InitializationOptions()
{
  return type metadata accessor for XPCSession.InitializationOptions();
}

uint64_t dispatch thunk of XPCSession.send<A>(_:)()
{
  return dispatch thunk of XPCSession.send<A>(_:)();
}

uint64_t dispatch thunk of XPCSession.cancel(reason:)()
{
  return dispatch thunk of XPCSession.cancel(reason:)();
}

uint64_t XPCSession.__allocating_init(endpoint:targetQueue:options:cancellationHandler:)()
{
  return XPCSession.__allocating_init(endpoint:targetQueue:options:cancellationHandler:)();
}

uint64_t type metadata accessor for XPCSession()
{
  return type metadata accessor for XPCSession();
}

uint64_t type metadata accessor for XPCEndpoint()
{
  return type metadata accessor for XPCEndpoint();
}

uint64_t static XPCListener.InitializationOptions.none.getter()
{
  return static XPCListener.InitializationOptions.none.getter();
}

uint64_t type metadata accessor for XPCListener.InitializationOptions()
{
  return type metadata accessor for XPCListener.InitializationOptions();
}

uint64_t dispatch thunk of XPCListener.IncomingSessionRequest.accept<A>(_:)()
{
  return dispatch thunk of XPCListener.IncomingSessionRequest.accept<A>(_:)();
}

uint64_t XPCListener.init(service:targetQueue:options:incomingSessionHandler:)()
{
  return XPCListener.init(service:targetQueue:options:incomingSessionHandler:)();
}

uint64_t type metadata accessor for XPCListener()
{
  return type metadata accessor for XPCListener();
}

uint64_t type metadata accessor for XPCRichError()
{
  return type metadata accessor for XPCRichError();
}

uint64_t type metadata accessor for XPCReceivedMessage()
{
  return type metadata accessor for XPCReceivedMessage();
}

uint64_t errno.getter()
{
  return errno.getter();
}

uint64_t FilePath.init(_:)()
{
  return FilePath.init(_:)();
}

uint64_t FilePath.init(stringLiteral:)()
{
  return FilePath.init(stringLiteral:)();
}

uint64_t FilePath.string.getter()
{
  return FilePath.string.getter();
}

uint64_t FilePath.appending(_:)()
{
  return FilePath.appending(_:)();
}

uint64_t type metadata accessor for FilePath()
{
  return type metadata accessor for FilePath();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.init(validating:)()
{
  return String.init(validating:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t Actor.assertIsolated(_:file:line:)()
{
  return Actor.assertIsolated(_:file:line:)();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.>= infix(_:_:)()
{
  return static TaskPriority.>= infix(_:_:)();
}

uint64_t static TaskPriority.low.getter()
{
  return static TaskPriority.low.getter();
}

uint64_t TaskPriority.init(rawValue:)()
{
  return TaskPriority.init(rawValue:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.currentPriority.getter()
{
  return static Task<>.currentPriority.getter();
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()()
{
  return ThrowingTaskGroup.makeAsyncIterator()();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return ThrowingTaskGroup.isEmpty.getter();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.procLimitWarn.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.procLimitWarn.getter();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.procLimitCritical.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.procLimitCritical.getter();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.all.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.all.getter();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.normal.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.normal.getter();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.warning.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.warning.getter();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.critical.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.critical.getter();
}

uint64_t OS_dispatch_source.MemoryPressureEvent.init(rawValue:)()
{
  return OS_dispatch_source.MemoryPressureEvent.init(rawValue:)();
}

uint64_t type metadata accessor for OS_dispatch_source.MemoryPressureEvent()
{
  return type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
}

uint64_t static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)()
{
  return static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OS_dispatch_source.setCancelHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.activate()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue_concurrent.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_concurrent.Attributes();
}

uint64_t OS_dispatch_queue_concurrent.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_concurrent.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_source_memorypressure.data.getter()
{
  return OS_dispatch_source_memorypressure.data.getter();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t static Clock<>.continuous.getter()
{
  return static Clock<>.continuous.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t print<A>(_:separator:terminator:to:)()
{
  return print<A>(_:separator:terminator:to:)();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t MobileGestalt_copy_releaseType_obj()
{
  return _MobileGestalt_copy_releaseType_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
}

{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath(pid, buffer, buffersize);
}

uint64_t sendAneSignal()
{
  return _sendAneSignal();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return _swift_isUniquelyReferenced_native();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_isCancelled()
{
  return _swift_task_isCancelled();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return _swift_unknownObjectWeakCopyAssign();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return _swift_unknownObjectWeakCopyInit();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return _swift_unknownObjectWeakTakeAssign();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return _swift_unknownObjectWeakTakeInit();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}