void sub_100004758(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  id v12;

  v3 = a2;
  if (v3)
  {
    v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void *)(a1 + 32);
      v9 = 138412546;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ provider failed to process signal request error %@", (uint8_t *)&v9, 0x16u);
    }

    v5 = *(void **)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v7 = v3;
  }
  else
  {
    v5 = *(void **)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v7 = 0;
  }
  sub_100004840(v5, v7, v6);
}

void sub_100004840(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    v7 = [a1 managerObjectFactory];
    id v8 = [v7 managerObject];

    [v8 handleProviderError:v6 forMessageID:v5];
  }
}

void sub_1000049D0(uint64_t a1)
{
  v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@ provider stopped", (uint8_t *)&v7, 0xCu);
  }

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v4 = [v3 managerObjectFactory];
    id v5 = [v4 managerObject];

    [v5 handleProviderStopped];
  }
}

void sub_100004B50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to start the provider, error %@", (uint8_t *)&v8, 0x16u);
    }

    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = v3;
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = 0;
  }
  sub_100004C38(v5, v6);
}

void sub_100004C38(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    v4 = [a1 managerObjectFactory];
    id v5 = [v4 managerObject];

    [v5 handleProviderError:v3];
  }
}

void sub_100004FF4(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = [a1 managerObjectFactory];
    id v4 = [v3 managerObject];

    [v4 handleProviderInstallationStatus:a2];
  }
}

void sub_100005440(id a1)
{
  qword_1000D7BD8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NEAppPushPluginDriver];

  _objc_release_x1();
}

void sub_1000054DC(id a1)
{
  qword_1000D7BC8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NEAppPushPluginManager];

  _objc_release_x1();
}

void sub_1000056E8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v9 = a4;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v8, 24, 1);
  }
  id v11 = Property;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000057F0;
  block[3] = &unk_1000C5480;
  char v19 = a2;
  v12 = *(void **)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  id v17 = v7;
  id v18 = v12;
  id v16 = v9;
  id v13 = v7;
  id v14 = v9;
  dispatch_async(v11, block);
}

void sub_1000057F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    int v3 = [*(id *)(a1 + 40) pid];
    id v4 = objc_alloc((Class)NSArray);
    id v5 = [*(id *)(a1 + 40) uuid];
    id v6 = [v4 initWithObjects:v5];
    sub_1000853F0(v2, v3, v6);

    id v7 = [objc_alloc((Class)NSArray) initWithObjects:*(void *)(a1 + 40), 0];
    sub_1000853E0(*(void *)(a1 + 32), v7);

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32, 1);
    }
    __int16 v10 = Property;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100005A1C;
    block[3] = &unk_1000C6DB0;
    id v19 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 48);
    dispatch_async(v10, block);

    id v11 = v19;
  }
  else
  {
    id v13 = [objc_alloc((Class)NSError) initWithDomain:@"NEAgentErrorDomain" code:2 userInfo:0];
    id v14 = *(id *)(a1 + 32);
    if (v14) {
      id v14 = objc_getProperty(v14, v12, 32, 1);
    }
    v15 = v14;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100005A04;
    v20[3] = &unk_1000C6DB0;
    id v16 = *(id *)(a1 + 56);
    id v21 = v13;
    id v22 = v16;
    id v11 = v13;
    dispatch_async(v15, v20);
  }
}

uint64_t sub_100005A04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100005A1C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100005C1C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 384);
    if (v2)
    {
      id v34 = 0;
      int v3 = [v2 getSubscriptionInfoWithError:&v34];
      id v4 = v34;
      if (v4)
      {
        id v5 = v4;
        id v6 = ne_log_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v37 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to getCarrierSubscriptionInfo - %@", buf, 0xCu);
        }
      }
      else
      {
        id v6 = [objc_alloc((Class)CTBundle) initWithBundleType:1];
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id obj = [v3 subscriptions];
        id v7 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
        if (v7)
        {
          id v8 = v7;
          v26 = v3;
          id v5 = 0;
          uint64_t v9 = *(void *)v31;
          do
          {
            __int16 v10 = 0;
            do
            {
              id v11 = v5;
              if (*(void *)v31 != v9) {
                objc_enumerationMutation(obj);
              }
              uint64_t v12 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v10);
              id v13 = *(void **)(a1 + 384);
              id v29 = v5;
              id v14 = [v13 copyCarrierBundleValue:v12 keyHierarchy:&off_1000C96D8 bundleType:v6 error:&v29];
              id v5 = v29;

              if (v5)
              {
                v15 = ne_log_obj();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v37 = v5;
                  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to get Carrier Bundle UseIPSec setting - %@", buf, 0xCu);
                }
              }
              else if (v14)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v16 = v14;
                  id v17 = ne_log_obj();
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v37 = v16;
                    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Retrieved Carrier Bundle UseIPSec setting: %@", buf, 0xCu);
                  }

                  unsigned __int8 v18 = [v16 BOOLValue];
                  if (v18)
                  {

                    id v5 = 0;
                    char v20 = 1;
                    goto LABEL_25;
                  }
                }
              }

              __int16 v10 = (char *)v10 + 1;
            }
            while (v8 != v10);
            id v19 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
            id v8 = v19;
          }
          while (v19);
          char v20 = 0;
LABEL_25:
          int v3 = v26;
        }
        else
        {
          char v20 = 0;
          id v5 = 0;
        }

        *(unsigned char *)(a1 + 352) = v20;
      }
    }
    id v21 = [objc_alloc((Class)CoreTelephonyClient) initWithQueue:0];
    id v22 = v21;
    if (v21)
    {
      id v28 = 0;
      unsigned int v23 = [v21 getNATTKeepAliveOverCellForPreferredDataContext:&v28];
      id v24 = v28;
      if (v24)
      {
        v25 = ne_log_obj();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v37 = v24;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to query Cellular NATTKeepAlive: %@", buf, 0xCu);
        }

        unsigned int v23 = 0;
      }
      *(_DWORD *)(a1 + 356) = v23;
    }
  }
}

void sub_100006090(uint64_t a1, const char *a2)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400, 1);
  }
  int v3 = [Property allValues];
  id v4 = [v3 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v36;
    *(void *)&long long v5 = 138412802;
    long long v32 = v5;
    long long v33 = v3;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v36 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v8);
        if ((objc_msgSend(v9, "isSecondaryConnection", v32) & 1) == 0
          && [v9 status] == 3)
        {
          __int16 v10 = [v9 configuration];
          id v11 = [v10 alwaysOnVPN];
          uint64_t v12 = [v11 applicationExceptions];
          id v13 = [v12 count];

          if (v13)
          {
            id v14 = ne_log_obj();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              uint64_t v15 = *(void *)(a1 + 32);
              id v16 = [v9 interfaceName];
              *(_DWORD *)buf = v32;
              *(void *)&uint8_t buf[4] = v15;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v16;
              *(_WORD *)&buf[22] = 2080;
              v41 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@[%@]:%s: Installing Application Exception data policies", buf, 0x20u);
            }
            id v17 = [*(id *)(a1 + 32) policySession];
            unsigned __int8 v18 = [v9 interfaceName];
            id v19 = [*(id *)(a1 + 32) configuration];
            char v20 = [v19 alwaysOnVPN];
            id v21 = [v20 applicationExceptions];
            id v22 = v18;
            id v23 = v21;
            id v24 = v23;
            if (v17)
            {
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_1000475CC;
              v41 = (const char *)&unk_1000C5F80;
              v42 = v17;
              id v25 = v22;
              id v43 = v25;
              id v26 = v24;
              id v44 = v26;
              char v45 = 1;
              char v27 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);

              int v3 = v33;
              if (v27) {
                goto LABEL_18;
              }
            }
            else
            {

              int v3 = v33;
            }
            id v28 = ne_log_obj();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              uint64_t v29 = *(void *)(a1 + 32);
              long long v30 = [v9 interfaceName];
              *(_DWORD *)buf = v32;
              *(void *)&uint8_t buf[4] = v29;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v30;
              *(_WORD *)&buf[22] = 2080;
              v41 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%@[%@]:%s: Application Exception data policies install failed", buf, 0x20u);
            }
          }
        }
LABEL_18:
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v31 = [v3 countByEnumeratingWithState:&v35 objects:v39 count:16];
      id v6 = v31;
    }
    while (v31);
  }
}

id sub_10000652C(uint64_t a1)
{
  sub_100006570(*(void **)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 startWithCommand:0 isOnDemand:0];
}

void sub_100006570(void *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting up Always-On VPN control policies", buf, 2u);
  }

  int v3 = [a1 controlPolicySession];
  [v3 removeAllPolicies];

  id v4 = [a1 highPolicySession];
  [v4 removeAllPolicies];

  [a1 setDefaultDropType:0];
  long long v5 = [a1 configuration];
  if (v5)
  {
    id v6 = [a1 configuration];
    uint64_t v7 = [v6 alwaysOnVPN];

    if (!v7)
    {
LABEL_29:
      LOBYTE(v5) = 0;
      goto LABEL_36;
    }
    uint64_t v47 = 2;
    id v8 = [a1 controlPolicySession];
    uint64_t v9 = [a1 configuration];
    id Property = [a1 server];
    uint64_t v12 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v11, 80, 1);
    }
    id v13 = Property;
    char v14 = sub_10005CE28((uint64_t)v8, v9, 0x32u, &v47, v13);

    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ne_log_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "AlwaysOnVPN evaluateConfiguration failed", buf, 2u);
      }
    }
    if (v47) {
      [a1 setDefaultDropType:];
    }
    id v16 = [a1 highPolicySession];
    id v17 = [a1 configuration];
    unsigned __int8 v18 = [a1 server];
    char v20 = v18;
    if (v18) {
      unsigned __int8 v18 = objc_getProperty(v18, v19, 80, 1);
    }
    id v21 = v18;
    BOOL v22 = sub_10005ED28(v16, v17, 0x32u, &v47);

    if (!v22)
    {
      id v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "AlwaysOnVPN evaluateConfiguration failed", buf, 2u);
      }
    }
    if (v47) {
      [a1 setDefaultDropType:];
    }
    id v24 = [a1 configuration];
    id v25 = [v24 alwaysOnVPN];
    unsigned __int8 v26 = [v25 isEnabled];

    if (v26)
    {
LABEL_35:
      LOBYTE(v5) = 1;
      goto LABEL_36;
    }
    uint64_t v27 = [a1 server];
    if (!v27) {
      goto LABEL_28;
    }
    id v28 = (void *)v27;
    uint64_t v29 = SCPreferencesCreate(kCFAllocatorDefault, @"NEHelper control settings", @"/Library/Preferences/com.apple.networkextension.control.plist");
    if (v29)
    {
      long long v30 = v29;
      CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(v29, @"AOVPNDropAll");
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == TypeID)
      {
        int v33 = CFBooleanGetValue(Value);
        CFRelease(v30);

        if (!v33)
        {
LABEL_28:
          [a1 setDefaultDropType:0];
          goto LABEL_29;
        }
        goto LABEL_32;
      }
      CFRelease(v30);
    }

LABEL_32:
    id v34 = ne_log_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      id v35 = [a1 defaultDropType];
      *(_DWORD *)buf = 134218240;
      *(void *)v49 = v35;
      *(_WORD *)&v49[8] = 1024;
      *(_DWORD *)&v49[10] = 1;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "AOVPNDropAll set, IP Drop-All enabled <%ld> persistFeature <%d>", buf, 0x12u);
    }

    goto LABEL_35;
  }
LABEL_36:
  [a1 setIsDropPersistent:1];
  long long v36 = [a1 controlPolicySession];
  unsigned __int8 v37 = [v36 apply];

  if ((v37 & 1) == 0)
  {
    long long v38 = ne_log_obj();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "AlwaysOnVPN Could not apply control policies", buf, 2u);
    }
  }
  v39 = [a1 highPolicySession];
  unsigned __int8 v40 = [v39 apply];

  if ((v40 & 1) == 0)
  {
    v41 = ne_log_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "AlwaysOnVPN Could not apply High control policies", buf, 2u);
    }
  }
  v42 = ne_log_obj();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v43 = [a1 defaultDropType];
    unsigned int v44 = [a1 isDropPersistent];
    char v45 = "Non-Persistent";
    if (v44) {
      char v45 = "Persistent";
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v49 = v43;
    *(_WORD *)&v49[4] = 2080;
    *(void *)&v49[6] = v45;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "AlwaysOnVPN setting IP Drop-All to %d (%s)", buf, 0x12u);
  }

  v46 = [a1 server];
  sub_100055F04(v46, @"drop_all_feature_always_on_vpn", (char)v5);
}

void sub_100006F34(uint64_t a1, const char *a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400, 1);
  }
  id v4 = Property;
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v14;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v9);
        id v11 = *(id *)(a1 + 32);
        if (v11) {
          id v11 = objc_getProperty(v11, v6, 400, 1);
        }
        uint64_t v12 = [v11 objectForKeyedSubscript:v10];
        [v12 handleNetworkConfigurationChange:*(void *)(a1 + 40)];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }
}

void sub_10000797C(uint64_t a1)
{
  if (!nwi_state_copy())
  {
    id v10 = 0;
    unsigned __int8 v37 = 0;
    uint64_t v9 = 0;
    goto LABEL_54;
  }
  unsigned int interface_names = nwi_state_get_interface_names();
  if (interface_names)
  {
    id v4 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
    if (v4)
    {
      id v5 = v4;
      unsigned int v6 = nwi_state_get_interface_names();
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        v68 = 0;
        id v10 = 0;
        uint64_t v71 = v6;
        *(void *)&long long v7 = 138412802;
        long long v65 = v7;
        v66 = v5;
        uint64_t v67 = a1;
        do
        {
          if (v5[v8]
            && nwi_state_get_ifstate()
            && !nwi_ifstate_get_vpn_server()
            && (nwi_ifstate_get_flags() & 3) != 0
            && (nwi_ifstate_get_flags() & 4) != 0)
          {
            v69 = v10;
            v70 = v9;
            id v11 = +[NSString stringWithUTF8String:nwi_ifstate_get_ifname()];
            uint64_t v12 = *(void **)(a1 + 32);
            id v14 = v11;
            if (v12)
            {
              uint64_t v88 = 0;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              id v15 = objc_getProperty(v12, v13, 400, 1);
              id v16 = [v15 countByEnumeratingWithState:&v84 objects:v95 count:16];
              if (v16)
              {
                id v18 = v16;
                id v19 = 0;
                uint64_t v20 = *(void *)v85;
                while (2)
                {
                  for (i = 0; i != v18; i = (char *)i + 1)
                  {
                    BOOL v22 = v19;
                    if (*(void *)v85 != v20) {
                      objc_enumerationMutation(v15);
                    }
                    id v19 = [objc_getProperty(v12, v17, 400, 1) objectForKeyedSubscript:*(void *)(*((void *)&v84 + 1) + 8 * i)];

                    if (v19)
                    {
                      if ([v19 virtualInterface])
                      {
                        [v19 virtualInterface];
                        uint64_t v23 = NEVirtualInterfaceCopyName();
                        uint64_t v88 = v23;
                        if (v23)
                        {
                          if ([v14 isEqualToString:v23])
                          {
                            id v24 = ne_log_obj();
                            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = v65;
                              v90 = v12;
                              __int16 v91 = 2080;
                              v92 = "-[NESMAlwaysOnSession isVirtualInterface:]";
                              __int16 v93 = 2112;
                              id v94 = v14;
                              _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@ is a virtual interface)", buf, 0x20u);
                            }

                            myCFRelease();
                            id v25 = ne_log_obj();
                            a1 = v67;
                            id v5 = v66;
                            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v35 = *(void *)(v67 + 32);
                              *(_DWORD *)v95 = v65;
                              uint64_t v96 = v35;
                              __int16 v97 = 2080;
                              v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                              __int16 v99 = 2112;
                              id v100 = v14;
                              _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@ is a virtual interface, SKIP!", v95, 0x20u);
                            }

                            id v10 = v69;
                            uint64_t v9 = v70;
                            goto LABEL_49;
                          }
                          myCFRelease();
                        }
                      }
                    }
                  }
                  id v18 = [v15 countByEnumeratingWithState:&v84 objects:v95 count:16];
                  if (v18) {
                    continue;
                  }
                  break;
                }
              }
              else
              {
                id v19 = 0;
              }
            }
            a1 = v67;
            id Property = *(id *)(v67 + 32);
            uint64_t v9 = v70;
            if (Property) {
              id Property = objc_getProperty(Property, v26, 400, 1);
            }
            id v5 = v66;
            id v28 = Property;
            uint64_t v29 = [v28 objectForKeyedSubscript:v14];

            if (v29)
            {
              if (v70)
              {
                [v29 setIsSecondaryInterface:1];
                id v10 = v29;
              }
              else
              {
                id v10 = v29;
                [v10 setIsSecondaryInterface:0];
                uint64_t v9 = v10;
              }
            }
            else
            {
              long long v30 = sub_1000084A0(*(NESMIKEv2VPNSession **)(v67 + 32), v14);

              if (v30)
              {
                id v31 = v70;
                if (!v70) {
                  id v31 = v30;
                }
                [v30 setIsSecondaryInterface:v70 != 0];
                long long v32 = ne_log_obj();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v36 = *(void *)(v67 + 32);
                  *(_DWORD *)v95 = v65;
                  uint64_t v96 = v36;
                  __int16 v97 = 2080;
                  v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                  __int16 v99 = 2112;
                  id v100 = v14;
                  _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%@:%s: Set up VPN Session over %@", v95, 0x20u);
                }

                id v34 = *(id *)(v67 + 32);
                if (v34) {
                  id v34 = objc_getProperty(v34, v33, 400, 1);
                }
                [v34 setObject:v30 forKeyedSubscript:v14];
                [v30 handleInitializeState];
                v68 = v30;
                uint64_t v9 = v31;
                id v10 = 0;
              }
              else
              {
                id v10 = 0;
                v68 = 0;
              }
            }
LABEL_49:
          }
          ++v8;
        }
        while (v8 != v71);
        free(v5);
        unsigned __int8 v37 = v68;
        goto LABEL_53;
      }
      free(v5);
    }
  }
  id v10 = 0;
  unsigned __int8 v37 = 0;
  uint64_t v9 = 0;
LABEL_53:
  nwi_state_release();
LABEL_54:
  sub_1000086FC(*(void **)(a1 + 32), v2);
  sub_1000088A8(*(void **)(a1 + 32), v38);
  id v40 = *(id *)(a1 + 32);
  if (v40) {
    id v40 = objc_getProperty(v40, v39, 400, 1);
  }
  v41 = [v40 objectForKeyedSubscript:*(void *)(a1 + 40) v65];
  v42 = ne_log_obj();
  unsigned int v43 = v42;
  if (v41)
  {
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v56 = *(void *)(a1 + 32);
      id v57 = [*(id *)(a1 + 40) UTF8String];
      unsigned int v58 = [v41 state];
      *(_DWORD *)v95 = 138413058;
      uint64_t v96 = v56;
      __int16 v97 = 2080;
      v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      __int16 v99 = 2080;
      id v100 = v57;
      __int16 v101 = 1024;
      unsigned int v102 = v58;
      _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%@:%s: checking for %s (vpn_session state %d)", v95, 0x26u);
    }

    sub_100008AFC(*(void **)(a1 + 32), v41);
    uint64_t v44 = *(void *)(a1 + 48);
    if ((v44 & 3) != 0 && (v44 & 4) != 0)
    {
      switch((unint64_t)[v41 state])
      {
        case 1uLL:
          v50 = ne_log_obj();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v63 = *(void *)(a1 + 32);
            if (v63) {
              int v64 = *(unsigned char *)(v63 + 353) & 1;
            }
            else {
              int v64 = 0;
            }
            *(_DWORD *)v95 = 138412802;
            uint64_t v96 = v63;
            __int16 v97 = 2080;
            v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            __int16 v99 = 1024;
            LODWORD(v100) = v64;
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "%@:%s: Starting VPN Session (stopped %d)", v95, 0x1Cu);
          }

          v51 = [v41 queue];
          v75[0] = _NSConcreteStackBlock;
          v75[1] = 3221225472;
          v75[2] = sub_100008D98;
          v75[3] = &unk_1000C6C38;
          v75[4] = *(void *)(a1 + 32);
          id v76 = v41;
          dispatch_async(v51, v75);

          v48 = v76;
          goto LABEL_69;
        case 2uLL:
          v52 = ne_log_obj();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v62 = *(void *)(a1 + 32);
            *(_DWORD *)v95 = 138412546;
            uint64_t v96 = v62;
            __int16 v97 = 2080;
            v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "%@:%s: calling handleNetworkPrepareResult", v95, 0x16u);
          }

          v53 = [v41 queue];
          v77[0] = _NSConcreteStackBlock;
          v77[1] = 3221225472;
          v77[2] = sub_100008D8C;
          v77[3] = &unk_1000C6C38;
          id v78 = v41;
          id v79 = *(id *)(a1 + 40);
          dispatch_async(v53, v77);

          v48 = v78;
          goto LABEL_69;
        case 4uLL:
        case 6uLL:
          char v45 = ne_log_obj();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v61 = *(void *)(a1 + 32);
            *(_DWORD *)v95 = 138412546;
            uint64_t v96 = v61;
            __int16 v97 = 2080;
            v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "%@:%s: calling handleInterfaceAvailable", v95, 0x16u);
          }

          v46 = [v41 queue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100008BD0;
          block[3] = &unk_1000C6908;
          uint64_t v47 = *(void *)(a1 + 32);
          uint64_t v83 = *(void *)(a1 + 56);
          void block[4] = v47;
          id v81 = v41;
          id v82 = *(id *)(a1 + 40);
          dispatch_async(v46, block);

          v48 = v81;
          goto LABEL_69;
        default:
          unsigned int v43 = ne_log_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v54 = *(void *)(a1 + 32);
            unsigned int v55 = [v41 state];
            *(_DWORD *)v95 = 138412802;
            uint64_t v96 = v54;
            __int16 v97 = 2080;
            v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            __int16 v99 = 1024;
            LODWORD(v100) = v55;
            _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%@:%s: no handling for state %d", v95, 0x1Cu);
          }
          goto LABEL_67;
      }
    }
    v49 = [v41 queue];
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_100008E14;
    v72[3] = &unk_1000C6C38;
    id v73 = v41;
    id v74 = *(id *)(a1 + 40);
    dispatch_async(v49, v72);

    v48 = v73;
LABEL_69:
  }
  else
  {
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = *(void *)(a1 + 32);
      v60 = *(void **)(a1 + 40);
      *(_DWORD *)v95 = 138412802;
      uint64_t v96 = v59;
      __int16 v97 = 2080;
      v98 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      __int16 v99 = 2112;
      id v100 = v60;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%@:%s: no vpn session for %@", v95, 0x20u);
    }
LABEL_67:
  }
}

NESMIKEv2VPNSession *sub_1000084A0(NESMIKEv2VPNSession *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_100008E68((uint64_t)a1, v3);
    if (!v4) {
      goto LABEL_9;
    }
    id v5 = [(NESMSession *)a1 configuration];
    unsigned int v6 = [v5 alwaysOnVPN];
    long long v7 = [v6 interfaceProtocolMapping];
    uint64_t v8 = [v7 objectForKeyedSubscript:v4];

    if (v8)
    {
      uint64_t v9 = [(NESMSession *)a1 configuration];
      id v10 = [v9 copy];

      id v11 = [NESMIKEv2VPNSession alloc];
      uint64_t v12 = [(NESMSession *)a1 server];
      long long v13 = [v10 alwaysOnVPN];
      id v14 = [v13 interfaceProtocolMapping];
      id v15 = [v14 objectForKeyedSubscript:v4];
      if (v11)
      {
        *(void *)id v18 = v11;
        *(void *)&v18[8] = NESMIKEv2VPNSession;
        id v11 = (NESMIKEv2VPNSession *)[super initWithConfiguration:v10 andServer:v12 andProtocol:v15 andPluginType:@"com.apple.NetworkExtension.IKEv2Provider" andSessionType:3 sessionQueue:0 tunnelKind:0 parent:a1];
      }

      [(NESMVPNSession *)v11 setInterfaceName:v3];
      id v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v18 = 138412802;
        *(void *)&v18[4] = a1;
        *(_WORD *)&v18[12] = 2080;
        *(void *)&v18[14] = "-[NESMAlwaysOnSession createVPNSession:]";
        __int16 v19 = 2112;
        id v20 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@:%s: Created VPN Session over %@", v18, 0x20u);
      }

      a1 = v11;
    }
    else
    {
LABEL_9:
      a1 = 0;
    }
  }

  return a1;
}

void sub_1000086FC(void *a1, const char *a2)
{
  if (a1 && !objc_getProperty(a1, a2, 360, 1))
  {
    id v3 = [a1 getIDSNetworkAgentDomain];
    objc_setProperty_atomic(a1, v4, v3, 376);

    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412546;
      id Property = objc_getProperty(a1, v6, 376, 1);
      __int16 v14 = 2112;
      CFStringRef v15 = @"clientchannel";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Watching <%@, %@> path", (uint8_t *)&v12, 0x16u);
    }

    id v7 = objc_alloc_init((Class)NWParameters);
    [v7 requireNetworkAgentWithDomain:objc_getProperty(a1, v8, 376, 1) type:@"clientchannel"];
    id v9 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v7];
    objc_setProperty_atomic(a1, v10, v9, 360);

    [objc_getProperty(a1, v11, 360, 1) addObserver:a1 forKeyPath:@"path" options:5 context:0];
  }
}

void sub_1000088A8(void *a1, const char *a2)
{
  if (a1)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v3 = objc_getProperty(a1, a2, 400, 1);
    id v4 = [v3 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v4)
    {
      id v6 = v4;
      id v7 = 0;
      uint64_t v8 = *(void *)v30;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v30 != v8) {
            objc_enumerationMutation(v3);
          }
          SEL v10 = [objc_getProperty(a1, v5, 400, 1) objectForKeyedSubscript:*(void *)(*((void *)&v29 + 1) + 8 * i)];
          SEL v11 = [v10 pluginConfigurationEntities];

          if (v11 && (!v7 || ([v10 isSecondaryInterface] & 1) == 0))
          {
            id v12 = v10;

            id v7 = v12;
          }
        }
        id v6 = [v3 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }
      while (v6);
    }
    else
    {
      id v7 = 0;
    }

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v14 = objc_getProperty(a1, v13, 400, 1);
    id v15 = [v14 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v15)
    {
      id v17 = v15;
      uint64_t v18 = *(void *)v26;
      do
      {
        for (j = 0; j != v17; j = (char *)j + 1)
        {
          if (*(void *)v26 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = *(void *)(*((void *)&v25 + 1) + 8 * (void)j);
          id Property = objc_getProperty(a1, v16, 400, 1);
          BOOL v22 = [Property objectForKeyedSubscript:v20, v25];
          uint64_t v23 = v22;
          if (v22 == v7)
          {
            BOOL v22 = v7;
            uint64_t v24 = 0;
          }
          else
          {
            uint64_t v24 = 1;
          }
          [v22 setIsSecondaryConnection:v24];
        }
        id v17 = [v14 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v17);
    }
  }
}

void sub_100008AFC(void *a1, void *a2)
{
  id v9 = a2;
  if (a1)
  {
    if (objc_getProperty(a1, v3, 408, 1))
    {
      id v4 = [v9 interfaceName];

      if (v4)
      {
        id v6 = objc_getProperty(a1, v5, 408, 1);
        id v7 = [v9 interfaceName];
        uint64_t v8 = [v6 objectForKeyedSubscript:v7];

        if (v8)
        {
          v8[1] = 0;
          v8[2] = 0;
        }
      }
    }
  }
}

void sub_100008BD0(uint64_t a1)
{
  if ((*(void *)(a1 + 56) & 3) == 0 || (*(void *)(a1 + 56) & 4) == 0)
  {
    id v3 = [*(id *)(a1 + 32) policySession];
    id v4 = [*(id *)(a1 + 40) primaryTunnelPlugin];
    int v5 = sub_100018330(v4);
    id v6 = [*(id *)(a1 + 40) primaryTunnelPlugin];
    uint64_t v8 = sub_100017808(v6, v7);
    id v9 = *(void **)(a1 + 48);
    SEL v10 = [*(id *)(a1 + 40) protocol];
    LOBYTE(v5) = sub_100045DC0((uint64_t)v3, v5, v8, v9, (char)[v10 enableRevocationCheck]);

    if ((v5 & 1) == 0)
    {
      SEL v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        id v14 = [*(id *)(a1 + 40) primaryTunnelPlugin];
        int v15 = 138412802;
        uint64_t v16 = v13;
        __int16 v17 = 2080;
        uint64_t v18 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
        __int16 v19 = 1024;
        unsigned int v20 = sub_100018330(v14);
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@:%s: failed to add Tunnel Control Policies for pid %d", (uint8_t *)&v15, 0x1Cu);
      }
    }
  }
  id v12 = [*(id *)(a1 + 40) stateHandler];
  [v12 handleInterfaceAvailable:*(void *)(a1 + 48) changed:0];
}

id sub_100008D8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

unsigned char *sub_100008D98(uint64_t a1, const char *a2)
{
  result = *(unsigned char **)(a1 + 32);
  if (result)
  {
    if (result[353]) {
      return result;
    }
    id v4 = *(void **)(a1 + 40);
    id Property = objc_getProperty(result, a2, 392, 1);
  }
  else
  {
    id Property = 0;
    id v4 = *(void **)(a1 + 40);
  }

  return [v4 handleStartMessage:Property];
}

void sub_100008E14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) stateHandler];
  [v2 handleInterfaceUnavailable:*(void *)(a1 + 40)];
}

CFStringRef sub_100008E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
    CFStringRef v10 = 0;
    goto LABEL_14;
  }
  if (v3)
  {
    id v5 = v3;
    [v5 UTF8String];
    if (NEGetInterfaceType())
    {
      id v6 = ne_log_obj();
      CFStringRef v10 = @"AlwaysOnVPNInterfaceCellular";
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v13 = a1;
        __int16 v14 = 2080;
        int v15 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
        __int16 v16 = 2112;
        id v17 = v5;
        __int16 v18 = 2112;
        CFStringRef v19 = @"AlwaysOnVPNInterfaceCellular";
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@:%s: ifName %@: cfg index %@", buf, 0x2Au);
      }
      goto LABEL_13;
    }
    id v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v13 = a1;
      __int16 v14 = 2080;
      int v15 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      __int16 v16 = 2112;
      id v17 = v5;
      id v7 = "%@:%s: Failed to get interface type for %@";
      uint64_t v8 = v6;
      uint32_t v9 = 32;
      goto LABEL_11;
    }
  }
  else
  {
    id v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v13 = a1;
      __int16 v14 = 2080;
      int v15 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      id v7 = "%@:%s: null ifName";
      uint64_t v8 = v6;
      uint32_t v9 = 22;
LABEL_11:
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, v7, buf, v9);
    }
  }
  CFStringRef v10 = 0;
LABEL_13:

LABEL_14:
  return v10;
}

uint64_t sub_100009328(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyExtendedStatus];
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKeyedSubscript:*(void *)(a1 + 48)];
  }

  return _objc_release_x1();
}

void sub_1000098A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t sub_100009918(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100009928(uint64_t a1)
{
}

void sub_100009930(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyStatistics];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v5)
  {
    id v6 = [v5 objectForKeyedSubscript:@"BytesIn"];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += [v6 unsignedLongLongValue];

    id v7 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"BytesOut"];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [v7 unsignedLongLongValue];

    uint64_t v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"PacketsIn"];
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += [v8 unsignedLongLongValue];

    uint32_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"PacketsOut"];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += [v9 unsignedLongLongValue];

    CFStringRef v10 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"ErrorsIn"];
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += [v10 unsignedLongLongValue];

    id v11 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"ErrorsOut"];
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) += [v11 unsignedLongLongValue];
  }
}

void sub_100009D28(uint64_t a1, const char *a2)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400, 1);
  }
  id v4 = Property;
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v20;
    do
    {
      uint32_t v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v4);
        }
        CFStringRef v10 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v9);
        id v11 = *(id *)(a1 + 32);
        if (v11) {
          id v11 = objc_getProperty(v11, v6, 400, 1);
        }
        id v12 = [v11 objectForKeyedSubscript:v10];
        uint64_t v13 = sub_100008E68(*(void *)(a1 + 32), v10);
        if (v13)
        {
          __int16 v14 = [v12 queue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100009F20;
          block[3] = &unk_1000C6958;
          id v16 = *(id *)(a1 + 40);
          id v17 = v12;
          id v18 = v13;
          dispatch_async(v14, block);
        }
        uint32_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }
}

void sub_100009F20(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [v2 alwaysOnVPN];
  id v5 = [v4 interfaceProtocolMapping];
  id v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 48)];
  id v11 = v2;
  id v7 = v6;
  if (v3)
  {
    [v3 setConfiguration:v11];
    [v3 setProtocol:v7];
    uint64_t v8 = [v11 VPN];
    unsigned int v9 = [v8 isEnabled];

    if (v9)
    {
      CFStringRef v10 = [v3 stateHandler];
      [v10 handleUpdateConfiguration];
    }
  }
}

void sub_10000A0A8(uint64_t a1, const char *a2)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400, 1);
  }
  id obj = Property;
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v18;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v8);
        id v10 = *(id *)(a1 + 32);
        if (v10) {
          id v10 = objc_getProperty(v10, v5, 400, 1);
        }
        id v11 = [v10 objectForKeyedSubscript:v9];
        id v12 = [v11 queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10000A264;
        block[3] = &unk_1000C6C60;
        id v16 = v11;
        id v13 = v11;
        dispatch_async(v12, block);

        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v6);
  }
}

void sub_10000A264(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) stateHandler];
  [v1 handleWakeup];
}

id sub_10000A4F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

id sub_10000A768(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

id sub_10000A96C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleInitializeState];
}

void sub_10000B1E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) policySession];
  int v3 = *(_DWORD *)(a1 + 64);
  id v5 = sub_100017808(*(id *)(a1 + 40), v4);
  id v6 = [*(id *)(a1 + 48) interfaceName];
  uint64_t v7 = [*(id *)(a1 + 48) protocol];
  LOBYTE(v3) = sub_100045DC0((uint64_t)v2, v3, v5, v6, (char)[v7 enableRevocationCheck]);

  if ((v3 & 1) == 0)
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = *(_DWORD *)(a1 + 64);
      int v12 = 138412802;
      uint64_t v13 = v10;
      __int16 v14 = 2080;
      int v15 = "-[NESMAlwaysOnSession didStartWithPIDForSession:andVPNSession:andPID:error:]_block_invoke";
      __int16 v16 = 1024;
      int v17 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@:%s: failed to add Tunnel Control Policies for pid %d", (uint8_t *)&v12, 0x1Cu);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 48) stateHandler];
  [v9 handlePlugin:*(void *)(a1 + 40) didStartWithPID:*(unsigned int *)(a1 + 64) error:*(void *)(a1 + 56)];
}

void sub_10000B364(uint64_t a1, const char *a2)
{
  sub_1000088A8(*(void **)(a1 + 32), a2);
  int v3 = *(void **)(a1 + 32);
  id v4 = (void *)NEVirtualInterfaceCopyName();
  sub_1000812F8(v3, v4);

  id v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  if (!v5) {
    goto LABEL_10;
  }
  if (![v6 virtualInterface])
  {
    long long v18 = ne_log_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

LABEL_10:
LABEL_21:
      long long v28 = ne_log_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        long long v30 = [*(id *)(a1 + 40) interfaceName];
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2080;
        unsigned int v43 = "-[NESMAlwaysOnSession installForSession:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%@[%@]:%s: applyTunnelDataPolicy failed", buf, 0x20u);
      }
      goto LABEL_24;
    }
    long long v19 = [v7 interfaceName];
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2080;
    unsigned int v43 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    long long v20 = "%@[%@]:%s: NULL virtual interface";
LABEL_26:
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v20, buf, 0x20u);

    goto LABEL_9;
  }
  uint64_t v8 = NEVirtualInterfaceCopyName();
  if (!v8)
  {
    long long v18 = ne_log_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    long long v19 = [v7 interfaceName];
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2080;
    unsigned int v43 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    long long v20 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_26;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = [v5 configuration];
  id v37 = sub_10005B4D0((uint64_t)NEPolicySession, v10);

  int v11 = [v5 configuration];
  id v36 = sub_10005B438((uint64_t)NEPolicySession, v11);

  v41 = [v5 policySession];
  int v12 = [v7 interfaceName];
  unsigned __int8 v35 = [v7 isSecondaryConnection];
  uint64_t v13 = [v7 pluginConfigurationEntities];
  uint64_t v14 = [v13 DNSSettings];
  int v15 = [v7 pluginConfigurationEntities];
  __int16 v16 = [v15 proxySettings];
  unsigned __int8 v17 = [v16 enabled];
  id v40 = v13;
  long long v38 = v15;
  if (v17)
  {
    unsigned __int8 v33 = 1;
  }
  else
  {
    long long v32 = [v7 protocol];
    long long v31 = [v32 proxySettings];
    unsigned __int8 v33 = [v31 enabled];
  }
  v39 = (void *)v14;
  BOOL v34 = v14 != 0;
  long long v21 = [v5 configuration];
  long long v22 = [v21 alwaysOnVPN];
  uint64_t v23 = [v22 applicationExceptions];
  id v24 = v9;
  id v25 = v12;
  id v26 = v23;
  char v27 = (char)v41;
  if (v41)
  {
    if (isa_nsstring() && isa_nsstring() && v41[2] == 3)
    {
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_1000467C8;
      unsigned int v43 = (const char *)&unk_1000C5F58;
      uint64_t v44 = v41;
      unsigned __int8 v50 = v35;
      id v45 = v25;
      id v48 = v37;
      id v49 = v36;
      id v46 = v26;
      unsigned __int8 v51 = v33;
      id v47 = v24;
      BOOL v52 = v34;
      char v27 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
    }
    else
    {
      char v27 = 0;
    }
  }

  if ((v17 & 1) == 0)
  {
  }
  myCFRelease();

  if ((v27 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10000B854(uint64_t a1, const char *a2)
{
  sub_1000088A8(*(void **)(a1 + 32), a2);
  int v3 = [*(id *)(a1 + 32) policySession];
  sub_10002ED98(v3, *(void **)(a1 + 40));

  id v4 = [*(id *)(a1 + 32) policySession];
  sub_10002EF40((uint64_t)v4, *(void **)(a1 + 40));

  id v5 = *(void **)(a1 + 32);
  id v6 = (__CFString *)(id)NEVirtualInterfaceCopyName();
  if (v5)
  {
    uint64_t v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFStringRef v8 = @"[nil]";
      if (v6) {
        CFStringRef v8 = v6;
      }
      int v13 = 138412546;
      uint64_t v14 = v5;
      __int16 v15 = 2112;
      CFStringRef v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Request to remove network agent from \"%@\"", (uint8_t *)&v13, 0x16u);
    }

    uint64_t v9 = [v5 networkAgentInterfaces];
    int v10 = isa_nsarray();

    if (v10)
    {
      int v11 = [v5 networkAgentInterfaces];
      [v11 removeObject:v6];

      sub_10007DB9C(v5);
    }
  }

  int v12 = *(const void **)(a1 + 48);

  CFRelease(v12);
}

void sub_10000B9DC(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) policySession];
  id v2 = [*(id *)(a1 + 40) interfaceName];
  int v3 = *(void **)(a1 + 48);
  id v4 = v2;
  id v5 = v3;
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100045654;
    v7[3] = &unk_1000C5F08;
    v7[4] = v6;
    id v8 = v4;
    id v9 = v5;
    sub_10002EC18((uint64_t)NESMPolicyMasterSession, v7);
  }
}

void sub_10000BAE4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) policySession];
  int v3 = [*(id *)(a1 + 40) interfaceName];
  sub_10002ECC4(v2, v3);

  id v5 = [*(id *)(a1 + 32) policySession];
  id v4 = [*(id *)(a1 + 40) interfaceName];
  sub_10002EE6C(v5, v4);
}

unsigned char *sub_10000BB8C(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) interfaceName];
    int v9 = 138412802;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    int v12 = v8;
    __int16 v13 = 2080;
    uint64_t v14 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Retrying now", (uint8_t *)&v9, 0x20u);
  }
  result = *(unsigned char **)(a1 + 32);
  if (result)
  {
    if (result[353]) {
      return result;
    }
    id v5 = *(void **)(a1 + 40);
    id Property = objc_getProperty(result, v3, 392, 1);
  }
  else
  {
    id Property = 0;
    id v5 = *(void **)(a1 + 40);
  }
  return [v5 handleStartMessage:Property];
}

void sub_10000BCB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned char *)(v2 + 353) & 1) != 0
    || (int v3 = *(void **)(a1 + 40),
        [v3 interfaceName],
        id v4 = objc_claimAutoreleasedReturnValue(),
        LODWORD(v3) = objc_msgSend(v3, "isInterfaceIPAvailable:", objc_msgSend(v4, "UTF8String")),
        v4,
        !v3))
  {
    uint64_t v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = [*(id *)(a1 + 40) interfaceName];
      int v15 = 138412802;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      long long v18 = v12;
      __int16 v19 = 2080;
      long long v20 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Session stopped or interface down, no retry", (uint8_t *)&v15, 0x20u);
    }
  }
  else
  {
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = [*(id *)(a1 + 40) interfaceName];
      int v15 = 138412802;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      long long v18 = v14;
      __int16 v19 = 2080;
      long long v20 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Retrying now", (uint8_t *)&v15, 0x20u);
    }
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    if (v7) {
      id Property = objc_getProperty(v7, v6, 392, 1);
    }
    else {
      id Property = 0;
    }
    [v8 handleStartMessage:Property];
  }
}

id sub_10000BE9C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) status];
  [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 40)];
  id result = [*(id *)(a1 + 32) status];
  if (result == v2)
  {
    id v4 = *(void **)(a1 + 32);
    return [v4 notifyChangedExtendedStatus];
  }
  return result;
}

id sub_10000C120()
{
  self;
  if (qword_1000D7BF0 != -1) {
    dispatch_once(&qword_1000D7BF0, &stru_1000C5518);
  }
  v0 = (void *)qword_1000D7BE8;

  return v0;
}

void sub_10000C178(id a1)
{
  qword_1000D7BE8 = objc_alloc_init(NESMProviderManager);

  _objc_release_x1();
}

void sub_10000C1B4(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3032000000;
  v8[3] = sub_10000C34C;
  v8[4] = sub_10000C378;
  id v9 = objc_retainBlock(*(id *)(a1 + 40));
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2) {
    unsigned int v2 = (void *)v2[2];
  }
  int v3 = v2;
  xpc_event_publisher_set_handler();

  id v4 = *(void **)(a1 + 32);
  if (v4) {
    id v4 = (void *)v4[2];
  }
  id v5 = v4;
  xpc_event_publisher_set_error_handler();

  id v6 = *(void **)(a1 + 32);
  if (v6) {
    id v6 = (void *)v6[2];
  }
  uint64_t v7 = v6;
  xpc_event_publisher_activate();

  _Block_object_dispose(v8, 8);
}

void sub_10000C334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000C34C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10000C378(uint64_t a1)
{
}

void sub_10000C380(uint64_t a1, int a2, char *a3, void *a4)
{
  id v6 = a4;
  switch(a2)
  {
    case 2:
      uint64_t v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Starting system extension listener", buf, 2u);
      }

      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      if (v14)
      {
        (*(void (**)(void))(v14 + 16))();
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = 0;
      }
      break;
    case 1:
      __int16 v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v60 = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "NESMProviderManager event publisher received a remove action with event subscription %llu", buf, 0xCu);
      }
      id v31 = v6;

      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        __int16 v19 = sub_10000CF48((id *)[NESMProviderRegistration alloc], a3, 0);
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        id obj = *(id *)(v18 + 24);
        id v35 = [obj countByEnumeratingWithState:&v48 objects:buf count:16];
        if (v35)
        {
          uint64_t v33 = *(void *)v49;
          uint64_t v34 = v18;
          do
          {
            uint64_t v20 = 0;
            do
            {
              if (*(void *)v49 != v33) {
                objc_enumerationMutation(obj);
              }
              uint64_t v36 = v20;
              uint64_t v38 = *(void *)(*((void *)&v48 + 1) + 8 * v20);
              long long v21 = [*(id *)(v18 + 24) objectForKeyedSubscript:v31];
              long long v44 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              id v22 = [v21 countByEnumeratingWithState:&v44 objects:v58 count:16];
              if (v22)
              {
                id v23 = v22;
                uint64_t v24 = *(void *)v45;
                do
                {
                  for (i = 0; i != v23; i = (char *)i + 1)
                  {
                    if (*(void *)v45 != v24) {
                      objc_enumerationMutation(v21);
                    }
                    uint64_t v26 = *(void *)(*((void *)&v44 + 1) + 8 * i);
                    char v27 = [v21 objectForKeyedSubscript:v26];
                    id v28 = [v27 indexOfObject:v19];
                    if (v28 != (id)0x7FFFFFFFFFFFFFFFLL)
                    {
                      id v29 = v28;
                      long long v30 = ne_log_obj();
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)BOOL v52 = 134218498;
                        v53 = a3;
                        __int16 v54 = 2112;
                        uint64_t v55 = v38;
                        __int16 v56 = 2112;
                        uint64_t v57 = v26;
                        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Removing event subscription %llu for plugin %@ with extension point %@", v52, 0x20u);
                      }

                      [v27 removeObjectAtIndex:v29];
                    }
                  }
                  id v23 = [v21 countByEnumeratingWithState:&v44 objects:v58 count:16];
                }
                while (v23);
              }

              uint64_t v20 = v36 + 1;
              uint64_t v18 = v34;
            }
            while ((id)(v36 + 1) != v35);
            id v35 = [obj countByEnumeratingWithState:&v48 objects:buf count:16];
          }
          while (v35);
        }
      }
      id v6 = v31;
      break;
    case 0:
      uint64_t v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v60 = a3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "NESMProviderManager event publisher received an add action with event subscription %llu", buf, 0xCu);
      }

      string = xpc_dictionary_get_string(v6, "NEProviderBundleIdentifier");
      id v9 = xpc_dictionary_get_array(v6, "NEExtensionPoints");
      if (string && *string)
      {
        uint64_t v10 = [objc_alloc((Class)NSString) initWithCString:string encoding:4];
        uint64_t v11 = ne_log_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v60 = (const char *)v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to find the expected code directory hashes for %@, it does not appear to be a registered system extension", buf, 0xCu);
        }

        if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_array)
        {
          applier[0] = _NSConcreteStackBlock;
          applier[1] = 3221225472;
          applier[2] = sub_10000CA58;
          applier[3] = &unk_1000C5540;
          applier[4] = *(void *)(a1 + 32);
          v42 = string;
          unsigned int v43 = a3;
          uint64_t v10 = v10;
          id v40 = v10;
          id v41 = 0;
          xpc_array_apply(v9, applier);
        }
        else
        {
          int v12 = ne_log_obj();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v60 = "com.apple.networkextension.provider.matching";
            __int16 v61 = 2080;
            uint64_t v62 = string;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s without any extension points", buf, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v10 = ne_log_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v60 = "com.apple.networkextension.provider.matching";
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Got a %s event subscription with a NULL or empty provider bundle identifier", buf, 0xCu);
        }
      }

      break;
  }
}

void sub_10000C96C(uint64_t a1)
{
  unsigned int v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = xpc_strerror();
    _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Event publisher encountered an error: %s", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v3)
  {
    (*(void (**)(void))(v3 + 16))();
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;
  }
}

uint64_t sub_10000CA58(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  int v6 = v5;
  if ((!v5 || xpc_get_type(v5) != (xpc_type_t)&_xpc_type_string) && xpc_string_get_length(v6))
  {
    uint64_t v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = a1[7];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "NEExtensionPoints";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v32;
      *(_WORD *)&buf[22] = 2048;
      id v37 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s with an invalid extension point at index %lu", buf, 0x20u);
    }
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  id v9 = [objc_alloc((Class)NSString) initWithCString:xpc_string_get_string_ptr(v6) encoding:4];
  uint64_t v10 = a1[4];
  uint64_t v11 = v9;
  uint64_t v7 = v11;
  if (!v10)
  {

    goto LABEL_28;
  }
  if (([v11 isEqualToString:@"com.apple.networkextension.filter-data"] & 1) == 0&& ([v7 isEqualToString:@"com.apple.networkextension.filter-packet"] & 1) == 0&& ([v7 isEqualToString:@"com.apple.networkextension.packet-tunnel"] & 1) == 0&& ![v7 isEqualToString:@"com.apple.networkextension.app-proxy"])
  {
    unsigned __int8 v30 = [v7 isEqualToString:@"com.apple.networkextension.dns-proxy"];

    if (v30) {
      goto LABEL_13;
    }
LABEL_28:
    id v31 = ne_log_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = a1[7];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NEExtensionPoints";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2048;
      id v37 = a2;
      LOWORD(v38) = 2112;
      *(void *)((char *)&v38 + 2) = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Got a %s event subscription for provider %s with an unknown extension point at index %lu: %@", buf, 0x2Au);
    }

    goto LABEL_6;
  }

LABEL_13:
  int v12 = (void *)a1[8];
  uint64_t v13 = a1[4];
  uint64_t v14 = (void *)a1[5];
  uint64_t v15 = +[NSString stringWithUTF8String:xpc_string_get_string_ptr(v6)];
  uint64_t v16 = (void *)a1[6];
  id v17 = v14;
  id v18 = v15;
  if (v13)
  {
    id v19 = v16;
    uint64_t v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2112;
      id v37 = v18;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Adding event subscription %llu for provider %@ with extension point %@", buf, 0x20u);
    }

    id v21 = [*(id *)(v13 + 24) objectForKeyedSubscript:v17];
    if (!v21)
    {
      id v21 = objc_alloc_init((Class)NSMutableDictionary);
      [*(id *)(v13 + 24) setObject:v21 forKeyedSubscript:v17];
    }
    id v22 = [v21 objectForKeyedSubscript:v18];
    if (!v22)
    {
      id v22 = objc_alloc_init((Class)NSMutableArray);
      [v21 setObject:v22 forKeyedSubscript:v18];
    }
    uint64_t v34 = v7;
    id v23 = sub_10000CF48((id *)[NESMProviderRegistration alloc], v12, v19);

    if ([v22 indexOfObject:v23] == (id)0x7FFFFFFFFFFFFFFFLL) {
      [v22 addObject:v23];
    }
    uint64_t v24 = sub_100052AE8();
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10000CFC8;
    v35[3] = &unk_1000C55B8;
    v35[4] = v13;
    id v25 = v17;
    char v27 = v35;
    if (v24)
    {
      id Property = objc_getProperty(v24, v26, 88, 1);
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_1000569C4;
      id v37 = &unk_1000C6D88;
      *(void *)&long long v38 = v24;
      *((void *)&v38 + 1) = v25;
      v39 = v27;
      dispatch_async(Property, buf);
    }
    uint64_t v7 = v34;
  }

  uint64_t v8 = 1;
LABEL_26:

  return v8;
}

id *sub_10000CF48(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)NESMProviderRegistration;
    uint64_t v7 = (id *)[super init];
    a1 = v7;
    if (v7)
    {
      v7[1] = a2;
      objc_storeStrong(v7 + 2, a3);
    }
  }

  return a1;
}

void sub_10000CFC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    id v5 = *(NSObject **)(v4 + 8);
  }
  else {
    id v5 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D070;
  block[3] = &unk_1000C6C60;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10000D070(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) handleInstalledAppsChanged:v7];
          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }
  }
}

void sub_10000D16C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[3];
  }
  id v3 = *(void **)(a1 + 40);
  uint64_t v5 = v2;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 104, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = Property;
  long long v8 = [v5 objectForKeyedSubscript:v7];
  long long v9 = [v8 objectForKeyedSubscript:*(void *)(a1 + 48)];

  if ([v9 count])
  {
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v10, "extension-point", (const char *)[*(id *)(a1 + 48) UTF8String]);
    id v11 = [v9 copy];
    sub_10000D348(*(void *)(a1 + 32), v10, 0, v11, *(void **)(a1 + 40), *(void **)(a1 + 56));
  }
  else
  {
    int v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void **)(a1 + 40);
      if (v13) {
        uint64_t v13 = (void *)v13[6];
      }
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(a1 + 48);
      int v16 = 138412546;
      id v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Cannot launch plugin type %@ for extension point %@, no provider is registered", (uint8_t *)&v16, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10000D348(uint64_t a1, void *a2, id a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = a5;
  id v14 = a6;
  if (a1)
  {
    if ([v12 count] == a3)
    {
      uint64_t v15 = ne_log_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        if (v13) {
          id v21 = (void *)v13[6];
        }
        else {
          id v21 = 0;
        }
        id v22 = v21;
        *(_DWORD *)buf = 138412290;
        id v28 = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to launch %@", buf, 0xCu);
      }
      (*((void (**)(id, void, void, void))v14 + 2))(v14, 0, 0, 0);
    }
    else
    {
      [v12 objectAtIndexedSubscript:a3];

      id Property = [v12 objectAtIndexedSubscript:a3];
      __int16 v18 = Property;
      if (Property) {
        id Property = objc_getProperty(Property, v17, 16, 1);
      }
      id v19 = Property;

      id v23 = v11;
      id v24 = v12;
      id v25 = v13;
      id v26 = v14;
      id v20 = v19;
      xpc_event_publisher_fire_with_reply();
    }
  }
}

void sub_10000D5B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = [objc_alloc((Class)NEProcessIdentity) initFromXPCMessage:v4];
    if (v6)
    {
      [*(id *)(a1 + 64) count];
      uint64_t v7 = *(void *)(a1 + 56);
      [v6 auditTokenData];

      if (v7)
      {
        long long v8 = xpc_dictionary_get_value(v4, "listener-endpoint");
        long long v9 = v8;
        if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_endpoint)
        {
          id v13 = objc_alloc_init((Class)NSXPCListenerEndpoint);
          [v13 _setEndpoint:v9];
          (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        }
        else
        {
          xpc_object_t v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v16 = 134217984;
            id v17 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Missing endpoint (%p), in launch event reply", (uint8_t *)&v16, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        }
      }
      else
      {
        id v12 = ne_log_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v14 = *(void **)(a1 + 56);
          if (v14) {
            id v14 = (void *)v14[6];
          }
          uint64_t v15 = v14;
          int v16 = 138412290;
          id v17 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Rejecting agent %@ because it does not satisfy the code signature requirements", (uint8_t *)&v16, 0xCu);
        }
        sub_10000D348(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 80) + 1, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 72));
      }
    }
    else
    {
      id v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v16) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create the extension's process identity from the launch event reply", (uint8_t *)&v16, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
  }
  else
  {
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Got an invalid event reply", (uint8_t *)&v16, 2u);
    }

    sub_10000D348(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 80) + 1, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 72));
  }
}

uint64_t sub_10000D8B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = +[NELaunchServices pluginClassToExtensionPoint:a3];
    if (v6)
    {
      uint64_t v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v28 = 138412546;
        *(void *)&v28[4] = v5;
        *(_WORD *)&v28[12] = 2112;
        *(void *)&v28[14] = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Checking for %@ - %@", v28, 0x16u);
      }

      *(void *)id v28 = 0;
      *(void *)&v28[8] = v28;
      *(void *)&v28[16] = 0x3032000000;
      id v29 = sub_10000DB38;
      unsigned __int8 v30 = sub_10000DB48;
      id v31 = 0;
      long long v8 = *(NSObject **)(a1 + 8);
      id v14 = _NSConcreteStackBlock;
      uint64_t v15 = 3221225472;
      int v16 = sub_10000DB50;
      id v17 = &unk_1000C6768;
      id v21 = v28;
      uint64_t v18 = a1;
      id v9 = v5;
      id v19 = v9;
      id v10 = v6;
      id v20 = v10;
      dispatch_sync(v8, &v14);
      id v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [*(id *)(*(void *)&v28[8] + 40) count:v14, v15, v16, v17, v18, v19];
        *(_DWORD *)buf = 134218498;
        id v23 = v12;
        __int16 v24 = 2112;
        id v25 = v9;
        __int16 v26 = 2112;
        id v27 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found %lu registrations for %@ (%@)", buf, 0x20u);
      }

      a1 = [*(id *)(*(void *)&v28[8] + 40) count] != 0;
      _Block_object_dispose(v28, 8);
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

void sub_10000DB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DB38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000DB48(uint64_t a1)
{
}

void sub_10000DB50(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[3];
  }
  uint64_t v3 = a1[5];
  id v4 = v2;
  id v8 = [v4 objectForKeyedSubscript:v3];
  uint64_t v5 = [v8 objectForKeyedSubscript:a1[6]];
  uint64_t v6 = *(void *)(a1[7] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10000DBE0(uint64_t a1)
{
  uint64_t v3 = dispatch_group_create();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v2, 40, 1);
  }
  id obj = Property;
  id v5 = [obj countByEnumeratingWithState:&v22 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v17 = *(void *)v23;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        dispatch_group_enter(v3);
        id v9 = *(void **)(a1 + 40);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10000DE98;
        v20[3] = &unk_1000C6C60;
        id v21 = v3;
        id v10 = v9;
        id v12 = v20;
        if (v8)
        {
          id v13 = objc_getProperty(v8, v11, 24, 1);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10000DEB0;
          block[3] = &unk_1000C6D88;
          void block[4] = v8;
          id v28 = v12;
          id v27 = v10;
          dispatch_async(v13, block);
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v22 objects:v29 count:16];
    }
    while (v6);
  }

  uint64_t v14 = *(void *)(a1 + 32);
  if (v14) {
    uint64_t v15 = *(NSObject **)(v14 + 8);
  }
  else {
    uint64_t v15 = 0;
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10000DEA0;
  v18[3] = &unk_1000C68C0;
  id v19 = *(id *)(a1 + 48);
  dispatch_group_notify(v3, v15, v18);
}

void sub_10000DE98(uint64_t a1)
{
}

uint64_t sub_10000DEA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10000DEB0(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8, 1);
  }
  if ([Property count])
  {
    id v5 = (id)a1[4];
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 8, 1);
    }
    id v6 = [v5 indexOfObject:a1[5]];
    if (v6 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v8 = v6;
      id v9 = (id)a1[4];
      if (v9) {
        id v9 = objc_getProperty(v9, v7, 8, 1);
      }
      [v9 removeObjectAtIndex:v8];
      id v11 = (id)a1[4];
      if (v11) {
        id v11 = objc_getProperty(v11, v10, 8, 1);
      }
      if (![v11 count])
      {
        id v13 = (id)a1[4];
        if (v13) {
          id v13 = objc_getProperty(v13, v12, 16, 1);
        }
        uint64_t v15 = (void (**)(void))v13;
        int v16 = (void *)a1[4];
        if (v16) {
          objc_setProperty_atomic_copy(v16, v14, 0, 16);
        }
        v15[2](v15);
      }
    }
  }
  uint64_t v17 = *(uint64_t (**)(void))(a1[6] + 16);

  return v17();
}

uint64_t sub_10000E04C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) configuration];
  uint64_t v3 = [v2 appVPN];
  id v4 = [*(id *)(a1 + 32) uid];
  [v3 updateAppRulesForUID:[v4 unsignedIntValue]];

  [*(id *)(a1 + 32) resetPerAppPolicy];
  uint64_t v5 = *(void *)(a1 + 32);

  return sub_10008088C(v5, 1);
}

uint64_t sub_10000E164(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) configuration];
  uint64_t v3 = [v2 appVPN];
  id v4 = [*(id *)(a1 + 32) uid];
  [v3 updateAppRulesForUID:[v4 unsignedIntValue]];

  [*(id *)(a1 + 32) resetPerAppPolicy];
  uint64_t v5 = *(void *)(a1 + 32);

  return sub_10008088C(v5, 1);
}

void sub_10000E9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000E9E8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (a2)
    {
      id v5 = 0;
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
    else
    {
      id v5 = +[NSError errorWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      [WeakRetained setPluginConfigurationEntities:0];

      (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v5);
    }
  }
}

void sub_10000F0B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10000F0D4(uint64_t a1, id a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (a2 && WeakRetained)
  {
    id v4 = [WeakRetained policySession];
    sub_1000318B0((uint64_t)v4);

    a2 = [v6 resetPerAppPolicy];
    id WeakRetained = v6;
  }
  id v5 = [WeakRetained stateHandler];
  [v5 handleSetConfigurationResult:a2];
}

uint64_t sub_10000F294(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  CFArrayRef keysToRemove = (CFArrayRef)objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = [*(id *)(a1 + 32) configuration];
  id v4 = [v3 identifier];
  NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v4 UUIDString], kSCEntNetProxies);

  id v6 = [*(id *)(a1 + 32) configuration];
  uint64_t v7 = [v6 identifier];
  id v8 = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v7 UUIDString], kSCEntNetDNS);

  id v9 = *(void **)(a1 + 32);
  if (!v9 || !v9[85])
  {
    SCDynamicStoreRef v10 = SCDynamicStoreCreate(kCFAllocatorDefault, @"NESMFlowDivertSession state", 0, 0);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      *(void *)(v11 + 680) = v10;
      id v9 = *(void **)(a1 + 32);
    }
    else
    {
      id v9 = 0;
    }
  }
  id v12 = [v9 pluginConfigurationEntities];
  id v13 = [v12 proxySettings];

  uint64_t v14 = *(void **)(a1 + 32);
  if (v13) {
    [v14 pluginConfigurationEntities];
  }
  else {
  uint64_t v15 = [v14 protocol];
  }
  int v16 = [v15 proxySettings];
  id v17 = [v16 copyLegacyDictionary];

  if (isa_nsdictionary())
  {
    id v19 = [v17 mutableCopy];
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v18, 688, 1);
    }
    id v21 = [Property controlUnit];
    [v19 setObject:v21 forKeyedSubscript:kSCPropNetProxiesServiceSpecific];
  }
  else
  {
    id v19 = v17;
  }
  if (isa_nsdictionary()) {
    [v2 setObject:v19 forKeyedSubscript:NetworkServiceEntity];
  }
  else {
    [(__CFArray *)keysToRemove addObject:NetworkServiceEntity];
  }
  BOOL v22 = sub_10000F714(*(void *)(a1 + 32), v19, NetworkServiceEntity);
  long long v23 = [*(id *)(a1 + 32) pluginConfigurationEntities];
  long long v24 = [v23 DNSSettings];

  if (v24)
  {
    long long v25 = [*(id *)(a1 + 32) pluginConfigurationEntities];
    __int16 v26 = [v25 DNSSettings];
    id v27 = [v26 copyLegacyDictionary];
  }
  else
  {
    v44[0] = @"10.0.0.10";
    v44[1] = @"fe80::1";
    CFStringRef v45 = kSCPropNetDNSServerAddresses;
    long long v25 = +[NSArray arrayWithObjects:v44 count:2];
    long long v46 = v25;
    id v27 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
  }

  id v29 = [v27 mutableCopy];
  id v30 = *(id *)(a1 + 32);
  if (v30) {
    id v30 = objc_getProperty(v30, v28, 688, 1);
  }
  id v31 = [v30 controlUnit];
  [v29 setObject:v31 forKeyedSubscript:kSCPropNetDNSServiceIdentifier];

  [v2 setObject:v29 forKeyedSubscript:v8];
  BOOL v32 = sub_10000F714(*(void *)(a1 + 32), v29, v8);
  if (!v32 || !v22)
  {
    uint64_t v33 = ne_log_large_obj();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v41 = v2;
      __int16 v42 = 2112;
      CFArrayRef v43 = keysToRemove;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Setting %@, removing %@", buf, 0x16u);
    }

    uint64_t v34 = *(void *)(a1 + 32);
    if (v34) {
      id v35 = *(const __SCDynamicStore **)(v34 + 680);
    }
    else {
      id v35 = 0;
    }
    SCDynamicStoreSetMultiple(v35, (CFDictionaryRef)v2, keysToRemove, 0);
  }
  uint64_t v36 = 4;
  if (v22) {
    uint64_t v36 = 0;
  }
  if (v32) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = v36 | 2;
  }

  return v37;
}

BOOL sub_10000F714(uint64_t a1, void *a2, const __CFString *a3)
{
  if (!a1) {
    return 0;
  }
  id v4 = *(const __SCDynamicStore **)(a1 + 680);
  id v5 = a2;
  SCDynamicStoreCopyValue(v4, a3);
  LODWORD(a3) = myCFEqual();

  BOOL v6 = a3 != 0;
  myCFRelease();
  return v6;
}

uint64_t sub_10000F8E8(const char *a1, int32_t a2, char *a3, int32_t a4)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  UIDNAInfo v13 = (UIDNAInfo)xmmword_1000A63E0;
  id v8 = uidna_openUTS46(0x22u, &pErrorCode);
  uint64_t v9 = uidna_nameToASCII_UTF8(v8, a1, a2, a3, a4, &v13, &pErrorCode);
  uidna_close(v8);
  if (pErrorCode)
  {
    SCDynamicStoreRef v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v16 = a1;
      __int16 v17 = 1024;
      unsigned __int32 errors = pErrorCode;
      uint64_t v11 = "Failed to punycode label - uidna_nameToASCII_UTF8(%s) failed errorCode %d";
LABEL_9:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
      return 0;
    }
    return 0;
  }
  if (v13.errors)
  {
    SCDynamicStoreRef v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v16 = a1;
      __int16 v17 = 1024;
      unsigned __int32 errors = v13.errors;
      uint64_t v11 = "Failed to punycode label - uidna_nameToASCII_UTF8(%s) failed info.errors 0x%08X";
      goto LABEL_9;
    }
    return 0;
  }
  return v9;
}

void sub_10000FE14(uint64_t a1, int a2)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 354) & 1) == 0)
    {
      uint64_t v3 = ne_log_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 138412290;
        uint64_t v7 = a1;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@: unable to request install as provider is not installed", (uint8_t *)&v6, 0xCu);
      }
LABEL_12:

      return;
    }
    if (*(_DWORD *)(a1 + 356) == 1 || a2 != 0)
    {
      id v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = 138412290;
        uint64_t v7 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v6, 0xCu);
      }

      uint64_t v3 = [(id)a1 server];
      [v3 requestInstallForSession:a1 withParentSession:0 exclusive:0];
      goto LABEL_12;
    }
  }
}

uint64_t sub_10000FF58(id self, const char *a2)
{
  if (!self) {
    return 0;
  }
  if (*((void *)self + 51) == 1 && *((void *)self + 50) != 1)
  {
    uint64_t v3 = 1;
    id v5 = objc_getProperty(self, a2, 376, 1);
    if (!v5) {
      return v3;
    }
    uint64_t v7 = v5;
    id Property = objc_getProperty(self, v6, 376, 1);
    if (!Property || (id v10 = objc_getProperty(Property, v9, 16, 1)) == 0)
    {
LABEL_20:

      return v3;
    }
    id v12 = v10;
    id v13 = objc_getProperty(self, v11, 416, 1);

    if (v13) {
      return v3;
    }
    id v14 = objc_alloc_init((Class)NEPolicySession);
    objc_setProperty_atomic(self, v15, v14, 416);

    [objc_getProperty(self, v16, 416, 1) setPriority:300];
    __int16 v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      CFArrayRef v43 = [self configuration];
      long long v44 = [v43 appPush];
      CFStringRef v45 = [v44 providerBundleIdentifier];
      long long v46 = [self configuration];
      long long v47 = [v46 applicationIdentifier];
      int v51 = 138412802;
      id v52 = self;
      __int16 v53 = 2112;
      id v54 = v45;
      __int16 v55 = 2112;
      id v56 = v47;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%@ setting up the scoping policies for [%@]:[%@]", (uint8_t *)&v51, 0x20u);
    }
    uint64_t v18 = [self configuration];
    id v19 = [v18 appPush];
    id v20 = [v19 providerBundleIdentifier];
    id v22 = objc_getProperty(self, v21, 376, 1);
    if (v22) {
      id v22 = objc_getProperty(v22, v23, 16, 1);
    }
    id v24 = v22;
    BOOL v25 = sub_100010A24((uint64_t)self, v20, v24);

    if (v25)
    {
      __int16 v26 = [self configuration];
      id v27 = [v26 applicationIdentifier];
      id v29 = objc_getProperty(self, v28, 376, 1);
      if (v29) {
        id v29 = objc_getProperty(v29, v30, 16, 1);
      }
      id v31 = v29;
      BOOL v32 = sub_100010A24((uint64_t)self, v27, v31);

      if (v32)
      {
        uint64_t v3 = (uint64_t)[objc_getProperty(self, v33, 416, 1) apply];
        uint64_t v7 = ne_log_obj();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          int v51 = 138412290;
          id v52 = self;
          _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ applied scoping policy", (uint8_t *)&v51, 0xCu);
        }
        goto LABEL_20;
      }
      uint64_t v34 = ne_log_obj();
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      id v35 = [self configuration];
      uint64_t v36 = [v35 applicationIdentifier];
      id v49 = objc_getProperty(self, v48, 376, 1);
      if (v49) {
        id v49 = objc_getProperty(v49, v50, 16, 1);
      }
      id v37 = v49;
      int v51 = 138412802;
      id v52 = self;
      __int16 v53 = 2112;
      id v54 = v36;
      __int16 v55 = 2112;
      id v56 = v37;
      _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%@ failed to add policy for %@ [interface:%@]", (uint8_t *)&v51, 0x20u);
    }
    else
    {
      uint64_t v34 = ne_log_obj();
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
LABEL_26:

        sub_10001055C(self, v42);
        return 0;
      }
      id v35 = [self configuration];
      uint64_t v36 = [v35 appPush];
      id v37 = [v36 providerBundleIdentifier];
      id v39 = objc_getProperty(self, v38, 376, 1);
      if (v39) {
        id v39 = objc_getProperty(v39, v40, 16, 1);
      }
      id v41 = v39;
      int v51 = 138412802;
      id v52 = self;
      __int16 v53 = 2112;
      id v54 = v37;
      __int16 v55 = 2112;
      id v56 = v41;
      _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%@ failed to add policy for %@ [interface:%@]", (uint8_t *)&v51, 0x20u);
    }
    goto LABEL_26;
  }
  return 1;
}

void sub_10001044C(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 356))
  {
    id v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ exiting session", (uint8_t *)&v7, 0xCu);
    }

    sub_100010654((unsigned char *)a1);
    [objc_getProperty((id)a1, v3, 392, 1) removeAllObjects];
    sub_100010728((void *)a1, v4);
    sub_100010808((void *)a1, v5);
    sub_100010958(a1);
    sub_10001055C((void *)a1, v6);
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 408) = 0;
  }
}

void sub_10001055C(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 416, 1))
  {
    [objc_getProperty(a1, v3, 416, 1) removeAllPolicies];
    [objc_getProperty(a1, v4, 416, 1) apply];
    objc_setProperty_atomic(a1, v5, 0, 416);
    int v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 138412290;
      uint64_t v8 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ removed scoping policies", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100010654(unsigned char *a1)
{
  if (a1 && (a1[353] & 1) != 0)
  {
    id v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      SEL v5 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@: requesting uninstall", (uint8_t *)&v4, 0xCu);
    }

    SEL v3 = [a1 server];
    [v3 requestUninstallForSession:a1];
  }
}

void sub_100010728(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 360, 1))
  {
    [objc_getProperty(a1, v3, 360, 1) invalidate];
    objc_setProperty_atomic(a1, v4, 0, 360);
    SEL v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      int v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: invalidated provider wake timer", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_100010808(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 384, 1))
  {
    id Property = objc_getProperty(a1, v3, 384, 1);
    if (Property)
    {
      SEL v5 = [Property remotePluginObject];
      [v5 stopWithReason:4];
    }
    int v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = [a1 configuration];
      uint64_t v8 = [v7 appPush];
      uint64_t v9 = [v8 providerBundleIdentifier];
      int v10 = 138412802;
      uint64_t v11 = a1;
      __int16 v12 = 2112;
      id v13 = v9;
      __int16 v14 = 2080;
      uint64_t v15 = ne_session_stop_reason_to_string();
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ stopping app push provider [%@] with reason [%s]", (uint8_t *)&v10, 0x20u);
    }
  }
}

void sub_100010958(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 400) == 1)
  {
    *(void *)(a1 + 400) = 2;
    id v1 = sub_100085F08();
    if (v1)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100086108;
      block[3] = &unk_1000C6C60;
      void block[4] = v1;
      id v2 = v1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      id v1 = v2;
    }
  }
}

BOOL sub_100010A24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v22 = 0;
  long long v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 1;
  id v7 = v5;
  id v26 = 0;
  uint64_t v8 = +[LSBundleRecord bundleRecordWithBundleIdentifier:v7 allowPlaceholder:0 error:&v26];
  id v9 = v26;
  int v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    id v13 = [v8 machOUUIDs];
  }
  else
  {
    __int16 v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v28 = a1;
      __int16 v29 = 2112;
      id v30 = v7;
      __int16 v31 = 2112;
      BOOL v32 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@ failed to get bundle record for [%@], error: %@", buf, 0x20u);
    }

    id v13 = 0;
  }

  if (v13 && [v13 count])
  {
    +[NEPolicyResult scopeSocketToInterfaceName:v6];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100010CDC;
    v17[3] = &unk_1000C56A8;
    int v21 = 20000;
    __int16 v14 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = v14;
    uint64_t v19 = a1;
    id v20 = &v22;
    [v13 enumerateObjectsUsingBlock:v17];
    BOOL v15 = *((unsigned char *)v23 + 24) != 0;
  }
  else
  {
    __int16 v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v28 = a1;
      __int16 v29 = 2112;
      id v30 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@ failed to get MachO UUIDs for [%@]", buf, 0x16u);
    }
    BOOL v15 = 0;
  }

  _Block_object_dispose(&v22, 8);
  return v15;
}

void sub_100010CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010CDC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v7 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v8 = +[NEPolicyCondition effectiveApplication:v6];

  [v7 addObject:v8];
  id v10 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 56) result:*(void *)(a1 + 32) conditions:v7];
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v9, 416, 1);
  }
  id v12 = [Property addPolicy:v10];
  id v13 = ne_log_obj();
  __int16 v14 = v13;
  if (v12)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      int v17 = 138412546;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ successfully added policy: %@", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      int v17 = 138412546;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@ failed to add policy: %@", (uint8_t *)&v17, 0x16u);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_100011084(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 384, 1))
  {
    id Property = objc_getProperty(a1, v3, 384, 1);
    sub_100017968(Property, v5);
    id v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v7 = [a1 configuration];
      uint64_t v8 = [v7 appPush];
      id v9 = [v8 providerBundleIdentifier];
      int v10 = 138412546;
      BOOL v11 = a1;
      __int16 v12 = 2112;
      id v13 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ disposing app push provider [%@]", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_100011430(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    SEL v3 = *(void **)(a1 + 32);
    SEL v4 = [v3 configuration];
    id v5 = [v4 application];
    *(_DWORD *)buf = 138412546;
    __int16 v12 = v3;
    __int16 v13 = 2112;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ reporting PushToTalk Message for app [%@]", buf, 0x16u);
  }
  id v6 = objc_alloc_init((Class)CXNetworkExtensionMessageController);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = [*(id *)(a1 + 32) configuration];
  id v9 = [v8 application];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000115B0;
  v10[3] = &unk_1000C56F8;
  v10[4] = *(void *)(a1 + 32);
  [v6 sendNetworkExtensionPushToTalkMessage:v7 forBundleIdentifier:v9 completion:v10];
}

void sub_1000115B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = ne_log_obj();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@ reported PushToTalk message to CallKit", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ reported PushToTalk message to CallKit with error: %@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_100011898(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    SEL v3 = *(void **)(a1 + 32);
    SEL v4 = [v3 configuration];
    id v5 = [v4 application];
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ reporting incoming call for app [%@]", buf, 0x16u);
  }
  id v6 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 40)];
  uint64_t v7 = [*(id *)(a1 + 32) configuration];
  uint64_t v8 = [v7 identifier];
  uint64_t v9 = [v8 UUIDString];
  [v6 setObject:v9 forKeyedSubscript:@"ap-push-config-uuid"];

  id v10 = objc_alloc_init((Class)CXNetworkExtensionMessageController);
  uint64_t v11 = [*(id *)(a1 + 32) configuration];
  __int16 v12 = [v11 application];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100011A7C;
  v13[3] = &unk_1000C56F8;
  v13[4] = *(void *)(a1 + 32);
  [v10 sendNetworkExtensionMessage:v6 forBundleIdentifier:v12 completion:v13];
}

void sub_100011A7C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = ne_log_obj();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@ reported incoming call to CallKit", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ failed to report incoming call to CallKit, error: %@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_100011CFC(void *a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[5];
    int v16 = 138412546;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    uint64_t v19 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@ searching completion handler for message ID: [%@]", (uint8_t *)&v16, 0x16u);
  }

  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v3, 392, 1);
  }
  id v5 = [Property objectForKeyedSubscript:a1[5]];
  id v6 = ne_log_obj();
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      int v16 = 138412546;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      uint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@ delivering error to the app for message ID: [%@]", (uint8_t *)&v16, 0x16u);
    }

    v5[2](v5, a1[6]);
    id v11 = (id)a1[4];
    if (v11) {
      id v11 = objc_getProperty(v11, v10, 392, 1);
    }
    [v11 removeObjectForKey:a1[5]];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = a1[4];
      uint64_t v15 = a1[5];
      int v16 = 138412546;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ failed to find completion handler for message ID [%@]", (uint8_t *)&v16, 0x16u);
    }
  }
}

void sub_100012020(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 360, 1))
    {
      [objc_getProperty(a1, v3, 360, 1) cancel];
    }
    else
    {
      SEL v4 = +[NSString stringWithFormat:@"com.apple.networkextension[NEAppPushSession-ProviderWakeTimer-%@]", a1];
      id v5 = [objc_alloc((Class)SWWakingTimer) initWithIdentifier:v4];
      objc_setProperty_atomic(a1, v6, v5, 360);
    }
    objc_initWeak(&location, a1);
    id v8 = objc_getProperty(a1, v7, 360, 1);
    uint64_t v9 = [a1 queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100012244;
    v11[3] = &unk_1000C56D0;
    objc_copyWeak(&v12, &location);
    [v8 scheduleWithFireInterval:v9 leewayInterval:v11 queue:60.0 handler:5.0];

    int v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: started provider wake timer", buf, 0xCu);
    }

    objc_destroyWeak(&v12);
    objc_destroyWeak(&location);
  }
}

void sub_100012208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100012244(uint64_t a1)
{
  self = objc_loadWeakRetained((id *)(a1 + 32));
  if (self)
  {
    id v1 = ne_log_obj();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v7 = self;
      _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%@: waking provider", buf, 0xCu);
    }

    id Property = objc_getProperty(self, v2, 384, 1);
    if (Property)
    {
      SEL v4 = [Property remotePluginObject];
      [v4 sendTimerEvent];
    }
    sub_100012020(self);
  }
}

void sub_10001246C(uint64_t a1, const char *a2)
{
  SEL v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, 0, 384);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 356))
      {
        sub_10000FE14(v4, 1);
      }
    }
  }
}

void sub_100012754(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(_DWORD *)(v1 + 356))
  {
    SEL v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@: re-trying to start the provider", (uint8_t *)&v5, 0xCu);
    }

    sub_10001281C(*(void *)(a1 + 32));
  }
}

void sub_10001281C(uint64_t a1)
{
  if (a1 && (*(unsigned char *)(a1 + 353) & 1) != 0)
  {
    SEL v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(_DWORD *)(a1 + 356);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v33 = 1024;
      LODWORD(v34) = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@: startProvider (reference count [%d])", buf, 0x12u);
    }

    if ((sub_10000FF58((id)a1, v3) & 1) == 0)
    {
      int v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", buf, 0xCu);
      }
    }
    if (!objc_getProperty((id)a1, v4, 384, 1))
    {
      id v7 = (objc_class *)objc_opt_class();
      id v8 = [(id)a1 configuration];
      uint64_t v9 = [v8 appPush];
      int v10 = [v9 pluginType];

      id v11 = [(id)a1 configuration];
      id v12 = [v11 appPush];
      uint64_t v13 = [v12 providerBundleIdentifier];

      if (v13)
      {
        uint64_t v14 = +[NELaunchServices pluginProxyWithIdentifier:v13 type:v10 pluginClass:7 extensionPoint:0];
        if (v14)
        {
          id v15 = [v7 alloc];
          CFStringRef v31 = @"extension-identifier";
          *(void *)buf = v13;
          int v16 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v31 count:1];
          uint64_t v17 = [(id)a1 uid];
          __int16 v18 = [v15 initWithPluginType:v10 pluginVersion:1 pluginClass:7 pluginInfo:v16 userID:v17];

          if (v18)
          {
            uint64_t v19 = [NEAppPushPlugin alloc];
            id v20 = [(id)a1 queue];
            int v21 = [(NEPlugin *)v19 initWithAgent:v18 delegateQueue:v20 andDelegate:a1];
            objc_setProperty_atomic((id)a1, v22, v21, 384);
          }
        }
        else
        {
          __int16 v18 = ne_log_obj();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v33 = 2112;
            uint64_t v34 = v13;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@: Plugin %@ is not available in launch services", buf, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v14 = ne_log_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@: Failed to find the provider bundle identifier", buf, 0xCu);
        }
      }
    }
    if (objc_getProperty((id)a1, v6, 384, 1))
    {
      uint64_t v24 = objc_getProperty((id)a1, v23, 384, 1);
      char v25 = [(id)a1 configuration];
      sub_10001689C(v24, v25);

      id v26 = ne_log_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        id v27 = [(id)a1 configuration];
        uint64_t v28 = [v27 appPush];
        __int16 v29 = [v28 providerBundleIdentifier];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v33 = 2112;
        uint64_t v34 = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%@: starting app push provider [%@]", buf, 0x16u);
      }
    }
    else
    {
      id v26 = ne_log_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%@: failed to initilaize the plugin", buf, 0xCu);
      }
    }
  }
}

void sub_100013054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013080(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013090(uint64_t a1)
{
}

void sub_100013098(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v3)
  {
    CFStringRef v15 = @"AppPushSendCallInfoErrorCode";
    int v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]);
    int v16 = v5;
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  else
  {
    CFStringRef v13 = @"AppPushSendCallInfoErrorCode";
    uint64_t v14 = &off_1000C97F8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    int v5 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    xpc_dictionary_set_value(reply, "SessionAppPushSendMessageResult", v11);
  }
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  id v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message(v12, reply);
}

void sub_100013208(uint64_t a1)
{
  SEL v2 = +[NSUUID UUID];
  id v4 = objc_retainBlock(*(id *)(a1 + 48));
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 392, 1);
  }
  [Property setObject:v4 forKeyedSubscript:v2];

  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    id v8 = objc_getProperty(v7, v6, 384, 1);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void **)(a1 + 40);
      id v11 = v2;
      id v12 = v10;
      CFStringRef v13 = [v9 remotePluginObject];
      [v13 sendOutgoingCallMessage:v12 andMessageID:v11];
    }
  }
  uint64_t v14 = ne_log_obj();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 138412546;
    uint64_t v17 = v15;
    __int16 v18 = 2112;
    uint64_t v19 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%@ added completion handler for message ID: [%@]", (uint8_t *)&v16, 0x16u);
  }
}

void sub_1000137CC(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 368, 1))
  {
    [objc_getProperty(a1, v3, 368, 1) removeObserver:a1 forKeyPath:@"status"];
    objc_setProperty_atomic(a1, v4, 0, 368);
  }
}

void sub_10001384C(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 376, 1))
  {
    id Property = objc_getProperty(a1, v3, 376, 1);
    if (Property)
    {
      uint64_t v6 = Property;
      [*((id *)Property + 3) setDelegate:0];
      uint64_t v7 = (void *)v6[3];
      v6[3] = 0;

      id v8 = (void *)v6[4];
      v6[4] = 0;

      objc_setProperty_atomic(v6, v9, 0, 8);
      objc_setProperty_atomic(v6, v10, 0, 16);
    }
    objc_setProperty_atomic(a1, v5, 0, 376);
  }
}

void sub_100013914(uint64_t a1, const char *a2)
{
  if (!a1 || objc_getProperty((id)a1, a2, 368, 1)) {
    return;
  }
  id v3 = [(id)a1 configuration];
  id v4 = [v3 appPush];
  uint64_t v5 = [v4 matchSSIDs];
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = [(id)a1 configuration];
    id v8 = [v7 appPush];
    SEL v9 = [v8 matchSSIDs];
    id v10 = [v9 count];

    if (v10)
    {
      id v21 = objc_alloc_init((Class)NWNetworkDescription);
      id v11 = [(id)a1 configuration];
      id v12 = [v11 appPush];
      CFStringRef v13 = [v12 matchSSIDs];
      uint64_t v14 = +[NSSet setWithArray:v13];
      [v21 setSsidOptions:v14];

      id v15 = objc_alloc_init((Class)NWParameters);
      [v15 setRequiredInterfaceType:1];
      int v16 = +[NWMonitor monitorWithNetworkDescription:v21 endpoint:0 parameters:v15];
      objc_setProperty_atomic((id)a1, v17, v16, 368);

      [objc_getProperty((id)a1, v18, 368, 1) addObserver:a1 forKeyPath:@"status" options:5 context:0];

      return;
    }
  }
  else
  {
  }
  if (*(void *)(a1 + 400) == 1)
  {
    --*(_DWORD *)(a1 + 356);
    sub_100010958(a1);
    sub_10001044C(a1);
    if ((sub_10000FF58((id)a1, v19) & 1) == 0)
    {
      id v20 = ne_log_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v23 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", buf, 0xCu);
      }
    }
  }
}

void sub_100013BF0(void *a1, const char *a2)
{
  if (!a1 || objc_getProperty(a1, a2, 376, 1)) {
    return;
  }
  id v3 = [a1 configuration];
  id v4 = [v3 appPush];
  uint64_t v5 = [v4 matchPrivateLTENetworks];
  if (v5)
  {
    uint64_t v6 = [a1 configuration];
    uint64_t v7 = [v6 appPush];
    id v8 = [v7 matchPrivateLTENetworks];
    id v9 = [v8 count];

    if (v9)
    {
      id v10 = [NEPrivateLTEMonitor alloc];
      id v35 = [a1 configuration];
      id v11 = [v35 appPush];
      id v12 = [v11 matchPrivateLTENetworks];
      CFStringRef v13 = [a1 queue];
      id v14 = v12;
      id v15 = v13;
      if (v10)
      {
        v36.receiver = v10;
        v36.super_class = (Class)NEPrivateLTEMonitor;
        id v10 = (NEPrivateLTEMonitor *)[super init];
        if (v10)
        {
          int v16 = (CoreTelephonyClient *)[objc_alloc((Class)CoreTelephonyClient) initWithQueue:v15];
          coreTelephonyClient = v10->_coreTelephonyClient;
          v10->_coreTelephonyClient = v16;

          objc_storeStrong((id *)&v10->_privateLTENetworks, v12);
          [(CoreTelephonyClient *)v10->_coreTelephonyClient setDelegate:v10];
          objc_setProperty_atomic(v10, v18, v15, 40);
          objc_setProperty_atomic(v10, v19, 0, 16);
          v10->_activeSlotID = 0;
          uint64_t v45 = 0;
          long long v46 = &v45;
          uint64_t v47 = 0x3032000000;
          SEL v48 = sub_1000948D4;
          id v49 = sub_1000948E4;
          id v20 = v10->_coreTelephonyClient;
          id v44 = 0;
          id v21 = v20;
          SEL v22 = [(CoreTelephonyClient *)v21 getCurrentDataSubscriptionContextSync:&v44];
          id v23 = v44;

          id v50 = v22;
          if (!v46[5] || v23)
          {
            if (v23)
            {
              __int16 v29 = ne_log_obj();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)block = 138412546;
                *(void *)&void block[4] = v10;
                *(_WORD *)&block[12] = 2112;
                *(void *)&block[14] = v23;
                _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%@ failed to get current data subscription context, error: %@", block, 0x16u);
              }
            }
          }
          else
          {
            uint64_t v38 = 0;
            id v39 = &v38;
            uint64_t v40 = 0x3032000000;
            id v41 = sub_1000948D4;
            __int16 v42 = sub_1000948E4;
            uint64_t v24 = v10->_coreTelephonyClient;
            uint64_t v25 = v46[5];
            id v37 = 0;
            id v26 = [(CoreTelephonyClient *)v24 getConnectionState:v25 connectionType:0 error:&v37];
            id v23 = v37;
            id v43 = v26;

            if (!v39[5] || v23)
            {
              if (v23)
              {
                int v30 = ne_log_obj();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)block = 138412546;
                  *(void *)&void block[4] = v10;
                  *(_WORD *)&block[12] = 2112;
                  *(void *)&block[14] = v23;
                  _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%@ failed to get current data connection status, error: %@", block, 0x16u);
                }
              }
            }
            else
            {
              id Property = objc_getProperty(v10, v27, 40, 1);
              *(void *)block = _NSConcreteStackBlock;
              *(void *)&block[8] = 3221225472;
              *(void *)&block[16] = sub_1000948EC;
              id v52 = &unk_1000C6B50;
              __int16 v53 = v10;
              id v54 = &v45;
              __int16 v55 = &v38;
              dispatch_async(Property, block);
            }
            _Block_object_dispose(&v38, 8);
          }
          _Block_object_dispose(&v45, 8);
        }
      }

      objc_setProperty_atomic(a1, v31, v10, 376);
      id v33 = objc_getProperty(a1, v32, 376, 1);
      if (v33)
      {
        objc_setProperty_atomic(v33, v34, a1, 8);
      }
      return;
    }
  }
  else
  {
  }
  if (a1[51] == 1)
  {
    [a1 didReceiveStatusChangeWithInterface:2];
  }
}

void sub_100014164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100014384(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    SEL v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      unint64_t v3 = *(void *)(v1 + 400);
      self;
      if (v3 > 2) {
        CFStringRef v5 = @"unknown";
      }
      else {
        CFStringRef v5 = off_1000C5740[v3];
      }
      unint64_t v6 = (unint64_t)[objc_getProperty((id)v1, v4, 368, 1) status];
      self;
      if (v6 > 2) {
        CFStringRef v7 = @"unknown";
      }
      else {
        CFStringRef v7 = off_1000C5740[v6];
      }
      int v8 = *(_DWORD *)(v1 + 356);
      *(_DWORD *)SEL v17 = 138413058;
      *(void *)&void v17[4] = v1;
      *(_WORD *)&v17[12] = 2112;
      *(void *)&v17[14] = v5;
      *(_WORD *)&v17[22] = 2112;
      CFStringRef v18 = v7;
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ Wi-Fi SSID match status changed from '%@' to '%@' [ref count:%u]", v17, 0x26u);
    }

    id v10 = [objc_getProperty((id)v1, v9, 368, 1) status];
    if (v10 == (id)2)
    {
      if (*(void *)(v1 + 400) == 1)
      {
        --*(_DWORD *)(v1 + 356);
        sub_100010958(v1);
        sub_10001044C(v1);
        if ((sub_10000FF58((id)v1, v14) & 1) == 0)
        {
          id v15 = ne_log_obj();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)SEL v17 = 138412290;
            *(void *)&void v17[4] = v1;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@ failed to set the scoping policy", v17, 0xCu);
          }
        }
      }
    }
    else if (v10 == (id)1 && *(void *)(v1 + 400) != 1)
    {
      ++*(_DWORD *)(v1 + 356);
      *(void *)(v1 + 400) = 1;
      uint64_t v11 = sub_100085F08();
      uint64_t v12 = (void *)v11;
      if (v11)
      {
        *(void *)SEL v17 = _NSConcreteStackBlock;
        *(void *)&v17[8] = 3221225472;
        *(void *)&v17[16] = sub_100085F9C;
        CFStringRef v18 = (const __CFString *)&unk_1000C6C60;
        uint64_t v19 = v11;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v17);
      }

      uint64_t v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v16 = *(_DWORD *)(v1 + 356);
        *(_DWORD *)SEL v17 = 138412546;
        *(void *)&void v17[4] = v1;
        *(_WORD *)&v17[12] = 1024;
        *(_DWORD *)&v17[14] = v16;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@ requesting install for Wi-Fi match [ref count:%u]", v17, 0x12u);
      }

      sub_10000FE14(v1, 0);
    }
  }
}

void sub_1000149B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(_DWORD *)(v1 + 356) && (*(unsigned char *)(v1 + 353) & 1) == 0)
  {
    unint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v5, 0xCu);
    }

    sub_10000FE14(*(void *)(a1 + 32), 1);
  }
}

void sub_100014D50(uint64_t a1, const char *a2)
{
  sub_100013914(*(void *)(a1 + 32), a2);
  uint64_t v4 = *(void **)(a1 + 32);

  sub_100013BF0(v4, v3);
}

void sub_100015204(uint64_t a1)
{
  SEL v2 = [*(id *)(a1 + 32) delegate];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100015330;
    v8[3] = &unk_1000C5850;
    int v5 = &v9;
    id v9 = *(id *)(a1 + 48);
    [v2 plugin:v3 didSetConfiguration:v4 completionHandler:v8];
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100015340;
    v6[3] = &unk_1000C5850;
    int v5 = &v7;
    id v7 = *(id *)(a1 + 48);
    [v2 pluginDidClearConfiguration:v3 completionHandler:v6];
  }
}

uint64_t sub_100015330(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100015340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001540C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    int v4 = *(_DWORD *)(v3 + 64);
  }
  else {
    int v4 = 0;
  }
  if (v2 != v4)
  {
    *(_DWORD *)(v3 + 64) = v2;
    id v5 = [*(id *)(a1 + 32) delegate];
    [v5 plugin:*(void *)(a1 + 32) didSetStatus:*(unsigned int *)(a1 + 48) andDisconnectError:*(void *)(a1 + 40)];
  }
}

void sub_10001552C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 pluginDidDetachIPC:*(void *)(a1 + 32)];
}

void sub_100015658(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001570C;
  v5[3] = &unk_1000C5828;
  id v6 = *(id *)(a1 + 48);
  [v2 plugin:v3 didRequestVirtualInterfaceWithParameters:v4 completionHandler:v5];
}

void sub_10001570C(uint64_t a1, id a2)
{
  if (a2) {
    a2 = [objc_alloc((Class)NEVirtualInterfaceParameters) initWithVirtualInterface:a2];
  }
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100015914(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v4 = v2;
  if (v2)
  {
    id v3 = [v2 pluginDidRequestFlowDivertControlSocket:*(void *)(a1 + 32)];
  }
  else
  {
    id v3 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100015B24(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  id v2 = [v3 plugin:*(void *)(a1 + 32) didApplySettings:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100015C48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 pluginDidRequestAgentClientServer:*(void *)(a1 + 32)];
}

void sub_100015D58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2 != v4)
  {
    *(void *)(v3 + 64) = v2;
    id v9 = [*(id *)(a1 + 32) delegate];
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      id v6 = [v5 domain];
      unsigned int v7 = [v6 isEqualToString:NEFilterErrorDomain];

      if (v7) {
        uint64_t v8 = (uint64_t)[*(id *)(a1 + 40) code];
      }
      else {
        uint64_t v8 = 1;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    [v9 plugin:*(void *)(a1 + 32) didSetStatus:*(void *)(a1 + 48) andError:v8];
  }
}

void sub_100015F64(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = [v3 pluginDidRequestPacketFilterChannel:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001608C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = [v3 pluginDidRequestContentFilterSocket:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100016194(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleProviderInstallationStatus:*(void *)(a1 + 32) status:*(void *)(a1 + 40)];
}

void sub_100016270(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleProviderStopped:*(void *)(a1 + 32)];
}

void sub_10001634C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 didExtensionExit:*(void *)(a1 + 32)];
}

void sub_100016454(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 plugin:*(void *)(a1 + 32) didReceivePushToTalkMessageWithUserInfo:*(void *)(a1 + 40)];
}

void sub_10001655C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 plugin:*(void *)(a1 + 32) didReceiveIncomingCallWithUserInfo:*(void *)(a1 + 40)];
}

void sub_100016688(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 plugin:*(void *)(a1 + 32) didReceiveProviderError:*(void *)(a1 + 40) forMessageID:*(void *)(a1 + 48)];
}

void sub_100016794(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 plugin:*(void *)(a1 + 32) didReceiveProviderError:*(void *)(a1 + 40)];
}

unsigned char *sub_100016810(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pluginConnection];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) pluginConnection];
    [v3 invalidate];

    [*(id *)(a1 + 32) setPluginConnection:0];
  }
  id result = *(unsigned char **)(a1 + 32);
  if (result && (result[16] & 1) != 0)
  {
    return [result handlePluginFailedWithError:0];
  }
  return result;
}

BOOL sub_10001689C(unsigned char *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [a1 delegate];
    objc_initWeak(&location, v4);

    if (a1[16])
    {
      if ((int)objc_msgSend(a1, "extension_pid") >= 1)
      {
        uint64_t v8 = [a1 delegateQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100016AF0;
        block[3] = &unk_1000C66F0;
        void block[4] = a1;
        objc_copyWeak(&v14, &location);
        dispatch_async(v8, block);

        objc_destroyWeak(&v14);
      }
    }
    else
    {
      id v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        SEL v17 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Sending start command", buf, 0xCu);
      }

      id v7 = objc_getProperty(a1, v6, 24, 1);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100016C0C;
      v10[3] = &unk_1000C57B0;
      objc_copyWeak(&v12, &location);
      v10[4] = a1;
      id v11 = v3;
      [v7 startWithCompletionHandler:v10];

      objc_destroyWeak(&v12);
    }
    objc_destroyWeak(&location);
  }

  return a1 != 0;
}

void sub_100016AC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100016AF0(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 1024;
    unsigned int v11 = [v3 extension_pid];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: startWithConfiguration already has a non-zero PID (%d), calling didStartWithPid", (uint8_t *)&v8, 0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = *(void **)(a1 + 32);
  id v7 = sub_100017808(v5, v6);
  [WeakRetained plugin:v5 didInitializeWithUUIDs:v7];

  [WeakRetained plugin:didStartWithPID:*(void *)(a1 + 32) error:objc_msgSend(*(id *)(a1 + 32), "extension_pid")];
}

void sub_100016C0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v9 = WeakRetained;
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v5 && v6)
  {
    if (v10) {
      id Property = objc_getProperty(*(id *)(a1 + 32), v8, 24, 1);
    }
    else {
      id Property = 0;
    }
    unsigned int v12 = [Property isLocal];
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v57 = v9;
    if (v12)
    {
      id v15 = v6;
      if (v13 && (int v16 = objc_getProperty((id)v13, v14, 24, 1)) != 0 && (unint64_t)(v16[7] - 2) <= 5)
      {
        id v17 = objc_alloc((Class)objc_opt_class());
        uint64_t v19 = objc_getProperty((id)v13, v18, 24, 1);
        if (v19) {
          id v20 = (void *)v19[6];
        }
        else {
          id v20 = 0;
        }
        id v21 = v20;
        id v23 = objc_getProperty((id)v13, v22, 24, 1);
        if (v23) {
          uint64_t v25 = v23[7];
        }
        else {
          uint64_t v25 = 0;
        }
        id v26 = objc_getProperty((id)v13, v24, 24, 1);
        __int16 v55 = v15;
        if (v26) {
          id v27 = (void *)v26[9];
        }
        else {
          id v27 = 0;
        }
        id v28 = v27;
        __int16 v29 = [v28 firstObject];
        int v30 = [(id)v13 delegateQueue];
        id v31 = [v17 initWithPluginType:v21 pluginClass:v25 pluginEndpoint:v55 pluginProcessIdentity:v29 queue:v30 factory:v13];

        if (v31)
        {
          if ([(id)objc_opt_class() conformsToProtocol:&OBJC_PROTOCOL___NEPluginDriver])
          {
            objc_storeStrong((id *)(v13 + 8), v31);

LABEL_23:
            id v39 = *(void **)(a1 + 32);
            v60[0] = _NSConcreteStackBlock;
            v60[1] = 3221225472;
            v60[2] = sub_1000172B0;
            v60[3] = &unk_1000C5760;
            v60[4] = v39;
            id v40 = v57;
            id v61 = v40;
            id v41 = [v39 remotePluginObjectWithErrorHandler:v60];
            uint64_t v42 = *(void *)(a1 + 40);
            v58[0] = _NSConcreteStackBlock;
            v58[1] = 3221225472;
            v58[2] = sub_10001738C;
            v58[3] = &unk_1000C5788;
            v58[4] = *(void *)(a1 + 32);
            id v59 = v40;
            [v41 startWithConfiguration:v42 completionHandler:v58];

LABEL_37:
            id v9 = v57;
            goto LABEL_38;
          }
          id v43 = ne_log_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            id v52 = (objc_class *)objc_opt_class();
            __int16 v53 = NSStringFromClass(v52);
            id v54 = NSStringFromProtocol((Protocol *)&OBJC_PROTOCOL___NEPluginDriver);
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v54;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Driver class (%@) does not conform to protocol %@", buf, 0x16u);
          }
        }
        else
        {
          id v43 = ne_log_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            uint64_t v45 = objc_getProperty((id)v13, v44, 24, 1);
            if (v45) {
              long long v46 = (void *)v45[6];
            }
            else {
              long long v46 = 0;
            }
            id v47 = v46;
            id v49 = objc_getProperty((id)v13, v48, 24, 1);
            if (v49) {
              uint64_t v50 = v49[7];
            }
            else {
              uint64_t v50 = 0;
            }
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v50;
            *(_WORD *)&buf[22] = 2048;
            int v64 = v55;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to create a plugin driver, type = %@, class = %ld, endpoint = %p", buf, 0x20u);
          }
        }
      }
      else
      {
      }
    }
    else
    {
      id v56 = v6;
      if (v13)
      {
        objc_initWeak(&location, (id)v13);
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = sub_100017850;
        int v64 = &unk_1000C5A88;
        objc_copyWeak(v65, &location);
        SEL v32 = objc_retainBlock(buf);
        id v33 = [objc_alloc((Class)NSXPCConnection) initWithListenerEndpoint:v56];
        uint64_t v34 = [(id)v13 managerInterface];
        if (v34)
        {
          [v33 setExportedInterface:v34];
          [v33 setExportedObject:v13];
        }
        id v35 = [(id)v13 remotePluginInterface];
        uint64_t v36 = objc_opt_class();
        id v37 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v36, objc_opt_class(), 0);
        [v35 setClasses:v37 forSelector:"startWithConfiguration:completionHandler:" argumentIndex:1 ofReply:1];
        [v33 setRemoteObjectInterface:v35];
        [v33 setInterruptionHandler:v32];
        [v33 setInvalidationHandler:v32];
        [v33 resume];
        uint64_t v38 = *(void **)(v13 + 48);
        *(void *)(v13 + 48) = v33;

        objc_destroyWeak(v65);
        objc_destroyWeak(&location);

        goto LABEL_23;
      }
    }
    int v51 = ne_log_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Failed to create the plugin driver", buf, 2u);
    }

    [v57 plugin:*(void *)(a1 + 32) didStartWithPID:0 error:0];
    goto LABEL_37;
  }
  [WeakRetained plugin:v10 didStartWithPID:0 error:v5];
LABEL_38:
}

void sub_100017280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
}

void sub_1000172B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while starting the plugin: %@", (uint8_t *)&v6, 0x16u);
  }

  [*(id *)(a1 + 40) plugin:*(void *)(a1 + 32) didStartWithPID:0 error:v3];
}

void sub_10001738C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  int v6 = [*(id *)(a1 + 32) delegateQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001745C;
  v10[3] = &unk_1000C6C88;
  char v14 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  __int16 v8 = *(void **)(a1 + 40);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

void sub_10001745C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if ([*(id *)(a1 + 32) count]
    && ((v4 = *(void **)(a1 + 40)) == 0 || (id v5 = objc_getProperty(v4, v3, 24, 1)) == 0
      ? (int v6 = 0)
      : (int v6 = (void *)v5[9]),
        id v7 = v6,
        v7,
        !v7))
  {
    uint64_t v34 = *(void **)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v3, 24, 1);
    }
    sub_1000853E0((uint64_t)Property, v34);
    if (!v2) {
      goto LABEL_26;
    }
  }
  else if (!v2)
  {
    goto LABEL_26;
  }
  __int16 v8 = sub_1000177C0(*(id *)(a1 + 40), v3);
  id v9 = [v8 count];

  if (v9)
  {
    id v11 = sub_1000177C0(*(id *)(a1 + 40), v10);
    uint64_t v12 = [v11 firstObject];
    [*(id *)(a1 + 40) setExtension_pid:[v12 pid]];

    id v13 = objc_alloc_init((Class)NSMutableArray);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v15 = sub_1000177C0(*(id *)(a1 + 40), v14);
    id v16 = [v15 countByEnumeratingWithState:&v38 objects:v44 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v39;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v39 != v18) {
            objc_enumerationMutation(v15);
          }
          id v20 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          id v21 = [v20 uuid:v38];

          if (v21)
          {
            SEL v22 = [v20 uuid];
            [v13 addObject:v22];
          }
        }
        id v17 = [v15 countByEnumeratingWithState:&v38 objects:v44 count:16];
      }
      while (v17);
    }

    if ([v13 count])
    {
      uint64_t v24 = *(void **)(a1 + 40);
      if (v24)
      {
        id v25 = objc_getProperty(v24, v23, 24, 1);
        id v26 = v13;
        if (v25)
        {
          id v28 = v26;
          __int16 v29 = objc_getProperty(v25, v27, 24, 1);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100085C98;
          block[3] = &unk_1000C6C38;
          void block[4] = v25;
          id v43 = v28;
          dispatch_sync(v29, block);
        }
      }
      else
      {
        id v37 = v13;
      }
    }
    id v31 = *(void **)(a1 + 40);
    int v30 = *(void **)(a1 + 48);
    SEL v32 = sub_100017808(v31, v23);
    [v30 plugin:v31 didInitializeWithUUIDs:v32];

    [*(id *)(a1 + 48) plugin:didStartWithPID:error:*(void *)(a1 + 40) [*(id *)(a1 + 40) extension_pid] 0];
    [*(id *)(a1 + 40) setStarted:1];

    return;
  }
LABEL_26:
  uint64_t v36 = *(void *)(a1 + 40);
  id v35 = *(void **)(a1 + 48);

  [v35 plugin:v36 didStartWithPID:0 error:0];
}

id sub_1000177C0(id a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24, 1);
    if (Property) {
      uint64_t v4 = (void *)Property[9];
    }
    else {
      uint64_t v4 = 0;
    }
    a1 = v4;
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_100017808(id a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24, 1);
    if (Property) {
      uint64_t v4 = (void *)Property[8];
    }
    else {
      uint64_t v4 = 0;
    }
    a1 = v4;
    uint64_t v2 = vars8;
  }
  return a1;
}

void sub_100017850(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v4) = 138412290;
      *(void *)((char *)&v4 + 4) = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Tearing down plugin connection", (uint8_t *)&v4, 0xCu);
    }

    id v3 = [WeakRetained delegateQueue];
    *(void *)&long long v4 = _NSConcreteStackBlock;
    *((void *)&v4 + 1) = 3221225472;
    id v5 = sub_100016810;
    int v6 = &unk_1000C6C60;
    id v7 = WeakRetained;
    dispatch_async(v3, &v4);
  }
}

void sub_100017968(unsigned char *self, const char *a2)
{
  if (self)
  {
    self[16] = 0;
    id v3 = (void *)*((void *)self + 1);
    if (v3)
    {
      id v4 = v3;
      if ([v4 conformsToProtocol:&OBJC_PROTOCOL___NEAgentSessionDelegate])
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_100017B08;
        v10[3] = &unk_1000C6C60;
        void v10[4] = self;
        [v4 handleDisposeWithCompletionHandler:v10];

        return;
      }
    }
    id Property = objc_getProperty(self, a2, 24, 1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100017B98;
    v9[3] = &unk_1000C6AE0;
    v9[4] = self;
    id v7 = v9;
    if (Property)
    {
      __int16 v8 = objc_getProperty(Property, v6, 24, 1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100085674;
      block[3] = &unk_1000C6DB0;
      void block[4] = Property;
      uint64_t v12 = v7;
      dispatch_sync(v8, block);
    }
  }
}

void sub_100017B08(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegateQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100017EA8;
  block[3] = &unk_1000C6C60;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_100017B98(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pluginConnection];

  if (v2)
  {
    id v4 = [*(id *)(a1 + 32) pluginConnection];
    [v4 invalidate];

    [*(id *)(a1 + 32) setPluginConnection:0];
  }
  id v5 = *(void **)(a1 + 32);
  if (v5
    && (id Property = objc_getProperty(v5, v3, 24, 1)) != 0
    && Property[5] == 1
    && ((v7 = Property[7], v7 != 5) ? (BOOL v8 = v7 == 2) : (BOOL v8 = 1),
        v8 && objc_msgSend(*(id *)(a1 + 32), "extension_pid")))
  {
    signed int v9 = [*(id *)(a1 + 32) extension_pid];
    uint64_t v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      signed int v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Killing extension, pid %d", buf, 8u);
    }

    id v11 = [*(id *)(a1 + 32) delegateQueue];
    dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v9, 0x80000000uLL, v11);

    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100017DDC;
    handler[3] = &unk_1000C6E00;
    signed int v19 = v9;
    uint64_t v13 = *(void *)(a1 + 32);
    dispatch_source_t v17 = v12;
    uint64_t v18 = v13;
    char v14 = v12;
    dispatch_source_set_event_handler(v14, handler);
    dispatch_resume(v14);
    kill((pid_t)[*(id *)(a1 + 32) extension_pid], 9);
  }
  else
  {
    id v15 = [*(id *)(a1 + 32) delegate];
    [v15 pluginDidDispose:*(void *)(a1 + 32)];
  }
}

void sub_100017DDC(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Process %d exited", (uint8_t *)v5, 8u);
  }

  id v4 = [*(id *)(a1 + 40) delegate];
  [v4 pluginDidDispose:*(void *)(a1 + 40)];
}

void sub_100017EA8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 pluginDidDispose:*(void *)(a1 + 32)];
}

void sub_100017EFC(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = [a1 remotePluginObject];
    [v4 updateConfiguration:v3];
  }
}

void sub_100017F64(void *a1)
{
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100018040;
    v4[3] = &unk_1000C6AE0;
    v4[4] = a1;
    id v2 = [a1 remotePluginObjectWithErrorHandler:v4];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000180F8;
    v3[3] = &unk_1000C6C60;
    v3[4] = a1;
    [v2 sleepWithCompletionHandler:v3];
  }
}

void sub_100018040(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) delegateQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000181DC;
  v6[3] = &unk_1000C6C38;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000180F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018188;
  block[3] = &unk_1000C6C60;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_100018188(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 pluginDidAcknowledgeSleep:*(void *)(a1 + 32)];
}

void sub_1000181DC(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@: Got an XPC error while sending sleep event: %@", (uint8_t *)&v6, 0x16u);
  }

  id v3 = [*(id *)(a1 + 32) delegate];
  [v3 pluginDidAcknowledgeSleep:*(void *)(a1 + 32)];
}

void sub_1000182B0(void *a1)
{
  if (a1)
  {
    id v1 = [a1 remotePluginObject];
    [v1 wakeup];
  }
}

void sub_1000182F8(void *a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24, 1);
    sub_100085488(Property, v3);
  }
}

unsigned int *sub_100018330(unsigned int *result)
{
  if (result)
  {
    id v1 = result;
    if (objc_msgSend(result, "extension_pid"))
    {
      return (unsigned int *)[v1 extension_pid];
    }
    else
    {
      id result = (unsigned int *)objc_getProperty(v1, v2, 24, 1);
      if (result) {
        return (unsigned int *)result[4];
      }
    }
  }
  return result;
}

void sub_100018394(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) delegateQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018568;
  v6[3] = &unk_1000C6C38;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_10001844C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  int v6 = [*(id *)(a1 + 32) delegateQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001850C;
  block[3] = &unk_1000C6E00;
  void block[4] = *(void *)(a1 + 32);
  id v9 = v5;
  int v10 = a3;
  id v7 = v5;
  dispatch_async(v6, block);
}

void sub_10001850C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 plugin:*(void *)(a1 + 32) didFinishAuthenticationWithResults:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48) andError:0];
}

void sub_100018568(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@: Got an error on the XPC connection while authenticating: %@", (uint8_t *)&v6, 0x16u);
  }

  id v3 = [*(id *)(a1 + 32) delegate];
  [v3 plugin:*(void *)(a1 + 32) didFinishAuthenticationWithResults:0 status:0 andError:*(void *)(a1 + 40)];
}

void sub_100018644(void *a1)
{
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100018720;
    v4[3] = &unk_1000C6AE0;
    v4[4] = a1;
    id v2 = [a1 remotePluginObjectWithErrorHandler:v4];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000187D8;
    v3[3] = &unk_1000C5800;
    v3[4] = a1;
    [v2 attachIPCWithCompletionHandler:v3];
  }
}

void sub_100018720(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) delegateQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018900;
  v6[3] = &unk_1000C6C38;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000187D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) delegateQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018890;
  v6[3] = &unk_1000C6C38;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100018890(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) _endpoint];
  [v4 plugin:v2 didAttachIPCWithEndpoint:v3];
}

void sub_100018900(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while attaching IPC: %@", (uint8_t *)&v6, 0x16u);
  }

  id v3 = [*(id *)(a1 + 32) delegate];
  [v3 plugin:*(void *)(a1 + 32) didAttachIPCWithEndpoint:0];
}

void sub_1000189D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while setting the App UUID map: %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100018AA4(void *a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = a2;
    id v6 = [a1 remotePluginObject];
    id v4 = v3;
    uint64_t v5 = (const char *)[v4 UTF8String];

    [v6 setDelegateInterface:if_nametoindex(v5)];
  }
}

void sub_100018B30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) delegateQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018CE8;
  v6[3] = &unk_1000C6C38;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100018BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) delegateQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018CD0;
  block[3] = &unk_1000C6D88;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100018CD0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100018CE8(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@: Got an XPC connection error while getting a client connection: %@", (uint8_t *)&v6, 0x16u);
  }

  id v3 = [*(id *)(a1 + 32) delegate];
  [v3 plugin:*(void *)(a1 + 32) didSetStatus:0 andError:1];
}

void sub_1000199B0(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = a4;
    id v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id v28 = 138412802;
      *(void *)&v28[4] = a1;
      *(_WORD *)&v28[12] = 2080;
      *(void *)&v28[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v28[22] = 2112;
      id v29 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@: %s - Starting on physicalInterface %@", v28, 0x20u);
    }

    if (!v10) {
      goto LABEL_21;
    }
    char v13 = [a1 proxyEnabled:v10];
    id Property = [a1 server];
    id v16 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v15, 72, 1);
    }
    id v17 = Property;
    uint64_t v18 = [v17 objectForKeyedSubscript:v10];

    if (v18)
    {
      signed int v19 = [a1 server];
      signed int v21 = v19;
      if (v19) {
        signed int v19 = objc_getProperty(v19, v20, 72, 1);
      }
      id v22 = v19;
      id v23 = [v22 objectForKeyedSubscript:v10];
      uint64_t flags = (uint64_t)[v23 unsignedLongLongValue];

      id v25 = ne_log_obj();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_19;
      }
      *(_DWORD *)id v28 = 138413058;
      *(void *)&v28[4] = a1;
      *(_WORD *)&v28[12] = 2080;
      *(void *)&v28[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v28[22] = 2112;
      id v29 = v10;
      LOWORD(v30) = 2048;
      *(void *)((char *)&v30 + 2) = flags;
      id v26 = "%@: %s - physicalInterface %@ - ranked interface flags %llX";
    }
    else
    {
      if (nwi_state_copy())
      {
        [v10 UTF8String];
        if (nwi_state_get_ifstate()) {
          uint64_t flags = nwi_ifstate_get_flags();
        }
        else {
          uint64_t flags = 0;
        }
        nwi_state_release();
      }
      else
      {
        uint64_t flags = 0;
      }
      id v25 = ne_log_obj();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_19;
      }
      *(_DWORD *)id v28 = 138413058;
      *(void *)&v28[4] = a1;
      *(_WORD *)&v28[12] = 2080;
      *(void *)&v28[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v28[22] = 2112;
      id v29 = v10;
      LOWORD(v30) = 2048;
      *(void *)((char *)&v30 + 2) = flags;
      id v26 = "%@: %s - physicalInterface %@ - non-ranked interface flags %llX";
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, v26, v28, 0x2Au);
LABEL_19:

    sub_100019D0C(a1, (flags & 4) != 0, v13, v10);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      sub_100018AA4(v9, v10);
    }
LABEL_21:
    id v27 = [a1 stateHandler:*(_OWORD *)v28, *(void *)&v28[16], v29, v30];
    [v27 handlePlugin:v9 didStartWithPID:a3 error:v11];
  }
}

void sub_100019D0C(void *a1, char a2, char a3, void *a4)
{
  id v51 = a4;
  if (!a1) {
    goto LABEL_29;
  }
  uint64_t v7 = [a1 configuration];
  __int16 v8 = [v7 VPN];
  id v9 = [v8 protocol];
  unsigned int v10 = [v9 includeAllNetworks];

  if (!v10)
  {
    uint64_t v23 = [a1 policySession];
    id v24 = [a1 pluginPIDArray];
    id v33 = v51;
    uint64_t v34 = v33;
    if (v23)
    {
      int v35 = *(_DWORD *)(v23 + 8);
      if (v35 == 2 || v35 == 1 && *(void *)(v23 + 32) != 2)
      {
        id v52 = _NSConcreteStackBlock;
        uint64_t v53 = 3221225472;
        id v54 = sub_1000370A0;
        __int16 v55 = &unk_1000C5CB0;
        id v56 = (_DWORD *)v23;
        id v57 = v33;
        id v58 = v24;
        LOBYTE(v59) = a2;
        BYTE1(v59) = a3;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, &v52);
      }
    }

    goto LABEL_18;
  }
  uint64_t v11 = [a1 primaryTunnelPlugin];
  if (v11)
  {
    id v12 = (void *)v11;
    char v13 = [a1 primaryTunnelPlugin];
    if (sub_100018330((unsigned int *)v13))
    {
      id v14 = [a1 primaryTunnelPlugin];
      id v16 = sub_100017808(v14, v15);
      id v17 = [v16 count];

      if (!v17) {
        goto LABEL_8;
      }
      id v12 = [a1 policySession];
      char v13 = [a1 primaryTunnelPlugin];
      int v18 = sub_100018330((unsigned int *)v13);
      signed int v19 = [a1 server];
      id v20 = [v19 primaryPhysicalInterface];
      signed int v21 = [v20 interfaceName];
      sub_100037A00((uint64_t)v12, v18, v21, a2, a3);
    }
  }
LABEL_8:
  uint64_t v22 = [a1 authenticationPlugin];
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = [a1 authenticationPlugin];
    if (!sub_100018330((unsigned int *)v24))
    {
LABEL_18:

      goto LABEL_19;
    }
    id v25 = [a1 authenticationPlugin];
    id v27 = sub_100017808(v25, v26);
    id v28 = [v27 count];

    if (v28)
    {
      uint64_t v23 = [a1 policySession];
      id v24 = [a1 authenticationPlugin];
      int v29 = sub_100018330((unsigned int *)v24);
      long long v30 = [a1 server];
      id v31 = [v30 primaryPhysicalInterface];
      SEL v32 = [v31 interfaceName];
      sub_100037A00(v23, v29, v32, a2, a3);

      goto LABEL_18;
    }
  }
LABEL_19:
  if ([a1 type] == 1)
  {
    uint64_t v36 = [a1 configuration];
    id v37 = [v36 VPN];
    long long v38 = [v37 exceptionApps];

    if (v38)
    {
      id v39 = [a1 tunnelKind];
      long long v40 = [a1 policySession];
      long long v41 = [a1 configuration];
      uint64_t v42 = [v41 VPN];
      id v43 = [v42 exceptionApps];
      if (v39 == (id)1)
      {
        id v44 = [a1 server];
        uint64_t v45 = [v44 primaryPhysicalInterface];
        long long v46 = [v45 interfaceName];
        id v47 = [a1 uid];
        sub_10003E404((uint64_t)v40, v43, v46, (int)[v47 intValue]);
      }
      else
      {
        id v44 = [a1 uid];
        unsigned int v48 = [v44 intValue];
        id v49 = v43;
        id v50 = v51;
        if (v40 && isa_nsarray() && v40[2] == 1)
        {
          id v52 = _NSConcreteStackBlock;
          uint64_t v53 = 3221225472;
          id v54 = sub_10003EDC4;
          __int16 v55 = &unk_1000C5D28;
          id v56 = v40;
          id v57 = v50;
          id v58 = v49;
          unsigned int v59 = v48;
          sub_10002EC18((uint64_t)NESMPolicyMasterSession, &v52);
        }
      }
    }
  }
LABEL_29:
}

uint64_t sub_10001A8A0(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps changed", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) resetPerAppPolicy];
  return sub_10008088C(*(void *)(a1 + 32), 1);
}

void sub_10001B66C(void *a1)
{
  if (a1)
  {
    if ([a1 stopped]) {
      goto LABEL_48;
    }
    uint64_t v2 = [a1 configuration];
    uint64_t v3 = [v2 VPN];
    uint64_t v4 = [v3 protocol];
    unsigned int v5 = [v4 includeAllNetworks];

    if (!v5)
    {
LABEL_48:
      sub_10001BDD4(a1);
    }
    else
    {
      [a1 setDefaultDropType:3];
      uint64_t v60 = 3;
      if (!objc_getProperty(a1, v6, 424, 1))
      {
        uint64_t v7 = [a1 getIDSNetworkAgentDomain];
        objc_setProperty_atomic(a1, v8, v7, 440);

        id v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          id Property = (const char *)objc_getProperty(a1, v10, 440, 1);
          __int16 v63 = 2112;
          v64[0] = @"clientchannel";
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Watching Nexus <%@, %@> path", buf, 0x16u);
        }

        id v11 = objc_alloc_init((Class)NWParameters);
        [v11 requireNetworkAgentWithDomain:[a1 objc_getProperty:v12, 440, 1] type:@"clientchannel"];
        id v13 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v11];
        objc_setProperty_atomic(a1, v14, v13, 424);

        [objc_getProperty(a1, v15, 424, 1) addObserver:a1 forKeyPath:@"path" options:5 context:0];
      }
      id v16 = [a1 controlPolicySession];
      [v16 removeAllPolicies];

      id v17 = [a1 highPolicySession];
      [v17 removeAllPolicies];

      unsigned int v18 = 50;
      unsigned int v59 = 50;
      signed int v19 = [a1 configuration];
      id v20 = [v19 VPN];
      signed int v21 = [v20 protocol];
      unsigned int v22 = [v21 excludeLocalNetworks];

      if (v22)
      {
        uint64_t v23 = [a1 controlPolicySession];
        BOOL v24 = sub_10005A488(v23, &v59, 0, 100, 0);

        if (!v24)
        {
          id v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            id Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for Control priority", buf, 0xCu);
          }
        }
        [a1 setDefaultDropType:3];
        unsigned int v18 = v59;
      }
      id v26 = [a1 controlPolicySession];
      id v27 = [a1 configuration];
      id v28 = [a1 server];
      long long v30 = v28;
      if (v28) {
        id v28 = objc_getProperty(v28, v29, 80, 1);
      }
      id v31 = v28;
      char v32 = sub_10005CE28((uint64_t)v26, v27, v18, &v60, v31);

      if ((v32 & 1) == 0)
      {
        id v33 = ne_log_obj();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "VPN-includeAllNetworks evaluateConfiguration failed", buf, 2u);
        }
      }
      id v34 = [a1 defaultDropType];
      if ((uint64_t)v34 < v60) {
        [a1 setDefaultDropType:];
      }
      unsigned int v35 = 50;
      unsigned int v59 = 50;
      uint64_t v36 = [a1 configuration];
      id v37 = [v36 VPN];
      long long v38 = [v37 protocol];
      unsigned int v39 = [v38 excludeLocalNetworks];

      if (v39)
      {
        long long v40 = [a1 highPolicySession];
        BOOL v41 = sub_10005A488(v40, &v59, 0, 400, 0);

        if (!v41)
        {
          uint64_t v42 = ne_log_obj();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            id Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for HighRestricted priority", buf, 0xCu);
          }
        }
        [a1 setDefaultDropType:3];
        unsigned int v35 = v59;
      }
      id v43 = [a1 highPolicySession];
      id v44 = [a1 configuration];
      BOOL v45 = sub_10005ED28(v43, v44, v35, &v60);

      if (!v45)
      {
        long long v46 = ne_log_obj();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "VPN-includeAllNetworks evaluateConfiguration (High) failed", buf, 2u);
        }
      }
      id v47 = [a1 defaultDropType];
      if ((uint64_t)v47 < v60) {
        [a1 setDefaultDropType:];
      }
      unsigned int v48 = [a1 controlPolicySession];
      unsigned __int8 v49 = [v48 apply];

      if ((v49 & 1) == 0)
      {
        id v50 = ne_log_obj();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "VPN Could not apply control policies", buf, 2u);
        }
      }
      id v51 = [a1 highPolicySession];
      unsigned __int8 v52 = [v51 apply];

      if ((v52 & 1) == 0)
      {
        uint64_t v53 = ne_log_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "VPN Could not apply High control policies", buf, 2u);
        }
      }
      [a1 setIsDropPersistent:0];
      id v54 = ne_log_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v55 = [a1 defaultDropType];
        unsigned int v56 = [a1 isDropPersistent];
        id v57 = "Non-Persistent";
        id Property = "-[NESMVPNSession setDefaultDropAll]";
        *(_DWORD *)buf = 136315650;
        if (v56) {
          id v57 = "Persistent";
        }
        __int16 v63 = 1024;
        LODWORD(v64[0]) = v55;
        WORD2(v64[0]) = 2080;
        *(void *)((char *)v64 + 6) = v57;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%s: VPN setting IP Drop-All to %d (%s)", buf, 0x1Cu);
      }

      id v58 = [a1 server];
      sub_100055F04(v58, 0, 0);
    }
  }
}

void sub_10001BDD4(void *a1)
{
  if (a1)
  {
    [a1 setDefaultDropType:0];
    [a1 setIsDropPersistent:0];
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = [a1 defaultDropType];
      unsigned int v4 = [a1 isDropPersistent];
      unsigned int v5 = "Non-Persistent";
      *(void *)&v16[4] = "-[NESMVPNSession unsetDefaultDropAll]";
      *(_DWORD *)id v16 = 136315650;
      if (v4) {
        unsigned int v5 = "Persistent";
      }
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = v3;
      __int16 v17 = 2080;
      unsigned int v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: VPN setting IP Drop-All to %d (%s)", v16, 0x1Cu);
    }

    SEL v6 = [a1 server];
    sub_100055F04(v6, 0, 0);

    uint64_t v7 = [a1 controlPolicySession];
    [v7 removeAllPolicies];

    SEL v8 = [a1 controlPolicySession];
    unsigned __int8 v9 = [v8 apply];

    if ((v9 & 1) == 0)
    {
      unsigned int v10 = ne_log_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v16 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VPN Could not apply control policies cleanup", v16, 2u);
      }
    }
    id v11 = [a1 highPolicySession:*(_OWORD *)v16];
    [v11 removeAllPolicies];

    SEL v12 = [a1 highPolicySession];
    unsigned __int8 v13 = [v12 apply];

    if ((v13 & 1) == 0)
    {
      SEL v15 = ne_log_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v16 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "VPN Could not apply high policies cleanup", v16, 2u);
      }
    }
    sub_10001C00C(a1, v14);
  }
}

void sub_10001C00C(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 424, 1))
    {
      [objc_getProperty(a1, v3, 424, 1) removeObserver:a1 forKeyPath:@"path"];
      objc_setProperty_atomic(a1, v4, 0, 424);
    }
    a1[54] = 0;
    unsigned int v5 = [a1 policySession];
    char v7 = sub_100031FA0(v5, v6);

    if ((v7 & 1) == 0)
    {
      unsigned __int8 v9 = ne_log_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned int v10 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to clear Nexus policy", v10, 2u);
      }
    }
    objc_setProperty_atomic(a1, v8, 0, 440);
  }
}

void *sub_10001CF94(void *result, const char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    id result = objc_getProperty(result, a2, 456, 1);
    if (result)
    {
      id Property = objc_getProperty(v2, v3, 456, 1);
      if (Property) {
        Property[1] = 0;
      }
      id result = objc_getProperty(v2, v5, 456, 1);
      if (result) {
        result[2] = 0;
      }
    }
  }
  return result;
}

void sub_10001D000(void *a1, const char *a2)
{
  if (a1)
  {
    id v3 = objc_getProperty(a1, a2, 448, 1);
    if (v3)
    {
    }
    else if ((sub_10001D374((uint64_t)a1) & 1) == 0)
    {
      if (objc_getProperty(a1, v4, 456, 1))
      {
        SEL v6 = objc_getProperty(a1, v5, 456, 1);
        if (v6 && (uint64_t v8 = v6[1], v6, v8))
        {
          unsigned __int8 v9 = objc_getProperty(a1, v7, 456, 1);
          if (v9)
          {
            uint64_t v11 = v9[2];
            v9[2] = v11 + 1;

            if (v11 >= 3)
            {
              id Property = objc_getProperty(a1, v10, 456, 1);
              if (Property) {
                Property[1] *= 2;
              }
              SEL v14 = objc_getProperty(a1, v13, 456, 1);
              if (v14)
              {
                uint64_t v16 = v14[1];

                if (v16 >= 601)
                {
                  __int16 v17 = objc_getProperty(a1, v15, 456, 1);
                  if (v17) {
                    v17[1] = 600;
                  }
                }
              }
              unsigned int v18 = objc_getProperty(a1, v15, 456, 1);
              if (v18) {
                v18[2] = 0;
              }
            }
          }
          signed int v19 = objc_getProperty(a1, v10, 456, 1);
          if (v19) {
            uint64_t v20 = v19[1];
          }
          else {
            uint64_t v20 = 0;
          }
        }
        else
        {
          signed int v21 = objc_getProperty(a1, v7, 456, 1);
          if (v21) {
            v21[1] = 1;
          }
          uint64_t v20 = 1;
          uint64_t v23 = objc_getProperty(a1, v22, 456, 1);
          if (v23)
          {
            v23[2] = 0;
            uint64_t v20 = 1;
          }
        }
      }
      else
      {
        uint64_t v20 = -1;
      }
      BOOL v24 = ne_log_obj();
      id v25 = v24;
      if (v20 < 0)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          int v29 = a1;
          __int16 v30 = 2080;
          id v31 = "-[NESMVPNSession retry]";
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@:%s: failed to get retry interval", buf, 0x16u);
        }
      }
      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412802;
          int v29 = a1;
          __int16 v30 = 2080;
          id v31 = "-[NESMVPNSession retry]";
          __int16 v32 = 2048;
          uint64_t v33 = v20;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@:%s: Retrying in %ld Secs", buf, 0x20u);
        }

        id v25 = [a1 queue];
        id v26 = NECreateTimerSource();
        objc_setProperty_atomic(a1, v27, v26, 448);
      }
    }
  }
}

uint64_t sub_10001D374(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    if (([(id)result stopped] & 1) == 0 && objc_msgSend(v1, "status") == 1)
    {
      uint64_t v2 = [v1 server];
      id v3 = [v2 primaryPhysicalInterface];
      uint64_t v4 = [v3 interfaceName];
      if (v4)
      {
        unsigned int v5 = (void *)v4;
        SEL v6 = [v1 server];
        char v7 = [v6 primaryPhysicalInterface];
        id v8 = [v7 interfaceName];
        unsigned int v9 = [v1 isInterfaceIPAvailable:[v8 UTF8String]];

        if (v9) {
          return 0;
        }
      }
      else
      {
      }
    }
    unsigned int v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = [v1 server];
      SEL v12 = [v11 primaryPhysicalInterface];
      unsigned __int8 v13 = [v12 interfaceName];
      int v14 = 138412802;
      SEL v15 = v1;
      __int16 v16 = 2080;
      __int16 v17 = "-[NESMVPNSession skipRetry]";
      __int16 v18 = 2112;
      signed int v19 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@:%s: Skip retry, session already running, stopped or no network - primary interface %@", (uint8_t *)&v14, 0x20u);
    }
    return 1;
  }
  return result;
}

void sub_10001D540(uint64_t a1, const char *a2)
{
  id v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 448, 1);
    id v3 = *(NSObject **)(a1 + 32);
    if (Property)
    {
      if (v3) {
        id v3 = objc_getProperty(v3, v4, 448, 1);
      }
      dispatch_source_cancel(v3);
      id v3 = *(NSObject **)(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic(v3, v6, 0, 448);
        id v3 = *(NSObject **)(a1 + 32);
      }
    }
  }
  if (sub_10001D374((uint64_t)v3))
  {
    id v8 = *(void **)(a1 + 32);
    sub_10001CF94(v8, v7);
  }
  else
  {
    unsigned int v9 = ne_log_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2080;
      __int16 v16 = "-[NESMVPNSession retry]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@:%s: Retrying now", (uint8_t *)&v13, 0x16u);
    }

    uint64_t v11 = *(void **)(a1 + 32);
    SEL v12 = [v11 lastStartMessage];
    [v11 handleStartMessage:v12];
  }
}

void sub_10001DAC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001DB44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10001DFAC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceRemoveAllAddresses();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceRemoveAllRoutes();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetIPv4Router();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetIPv6Router();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetAsPrimary();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetVPNServerAddress();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetDNSDomain();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetDNSServers();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetDNSSearchDomains();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetDNSSupplementalMatchDomains();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch();
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetProxies();
    [*(id *)(a1 + 32) virtualInterface];
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges()) {
      return 0;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_10001E0C4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: failed to update the service in the dynamic store while clearing the configuration", (uint8_t *)&v12, 0xCu);
    }
  }
  if ([*(id *)(a1 + 32) parentType] == (id)2)
  {
    unsigned int v5 = [*(id *)(a1 + 32) parent];
    sub_10008D3B8(v5, *(void **)(a1 + 32));
  }
  SEL v6 = [*(id *)(a1 + 32) stateHandler];
  [v6 handleClearConfigurationResult:a2];

  sub_10001E278(*(void **)(a1 + 32));
  sub_100081474(*(void **)(a1 + 32));
  if (!*(unsigned char *)(a1 + 40))
  {
    char v7 = [*(id *)(a1 + 32) policySession];
    sub_1000319BC((uint64_t)v7);

    id v8 = [*(id *)(a1 + 32) policySession];
    sub_10002E854((uint64_t)v8);

    if (![*(id *)(a1 + 32) virtualInterface])
    {
      uint64_t v10 = [*(id *)(a1 + 32) policySession];
      sub_10002EA70((uint64_t)v10);

      if (a2) {
        goto LABEL_10;
      }
LABEL_12:
      unsigned int v9 = +[NSError errorWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
      goto LABEL_13;
    }
  }
  if ((a2 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  unsigned int v9 = 0;
LABEL_13:
  sub_10001E38C(*(void **)(a1 + 32), v9);
}

void sub_10001E278(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 dnsAgentRegistration];
    unsigned int v3 = [v2 isRegistered];

    if (v3)
    {
      uint64_t v4 = [a1 dnsAgentRegistration];
      [v4 unregisterNetworkAgent];

      unsigned int v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        unsigned int v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Unregistered DNS network agent", (uint8_t *)&v8, 0xCu);
      }
    }
    [a1 setDnsAgentRegistration:0];
    [a1 setDnsAgent:0];
    SEL v6 = [a1 policySession];
    sub_10002EAF0(v6, v7);
  }
}

void sub_10001E38C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [a1 setConfigurationCompletionHandlerArray];

    if (v4)
    {
      unsigned int v5 = [a1 setConfigurationCompletionHandlerArray];
      id v6 = [v5 count];

      if (v6)
      {
        char v7 = [a1 setConfigurationCompletionHandlerArray];
        int v8 = [v7 objectAtIndexedSubscript:0];

        unsigned int v9 = ne_log_obj();
        uint64_t v10 = v9;
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = [a1 interfaceName];
            id Property = objc_getProperty(v8, v12, 8, 1);
            id v14 = objc_retainBlock(Property);
            int v24 = 138412802;
            id v25 = a1;
            __int16 v26 = 2112;
            SEL v27 = v11;
            __int16 v28 = 2112;
            id v29 = v14;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: config request: popping handler [%@] %@", (uint8_t *)&v24, 0x20u);
          }
          if (objc_getProperty(v8, v15, 8, 1))
          {
            __int16 v16 = ne_log_obj();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              id v18 = objc_getProperty(v8, v17, 8, 1);
              signed int v19 = objc_retainBlock(v18);
              int v24 = 138412546;
              id v25 = a1;
              __int16 v26 = 2112;
              SEL v27 = v19;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@: config request: calling completionHandler %@", (uint8_t *)&v24, 0x16u);
            }
            signed int v21 = (void (**)(id, id))objc_getProperty(v8, v20, 8, 1);
            v21[2](v21, v3);
          }
          uint64_t v10 = [a1 setConfigurationCompletionHandlerArray];
          [v10 removeObject:v8];
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = [a1 interfaceName];
          int v24 = 138412546;
          id v25 = a1;
          __int16 v26 = 2112;
          SEL v27 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@: No config request completion handler [%@]", (uint8_t *)&v24, 0x16u);
        }
        goto LABEL_19;
      }
      int v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = [a1 interfaceName];
        int v24 = 138412546;
        id v25 = a1;
        __int16 v26 = 2112;
        SEL v27 = v10;
        unsigned int v22 = "%@: config request handler array empty [%@]";
        goto LABEL_16;
      }
    }
    else
    {
      int v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = [a1 interfaceName];
        int v24 = 138412546;
        id v25 = a1;
        __int16 v26 = 2112;
        SEL v27 = v10;
        unsigned int v22 = "%@: config request (pop) handler array nil [%@]";
LABEL_16:
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v24, 0x16u);
LABEL_19:
      }
    }
  }
}

void sub_10001E780(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return;
  }
  *(void *)(v2 + 400) &= ~*(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 32);
  if (!v4 || v4[50] || !objc_getProperty(v4, a2, 408, 1)) {
    return;
  }
  id v6 = *(id *)(a1 + 32);
  if (v6)
  {
    if (objc_getProperty(v6, v5, 416, 1))
    {
      id Property = *(NSObject **)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v7, 416, 1);
      }
      dispatch_source_cancel(Property);
      id v6 = *(id *)(a1 + 32);
      if (!v6) {
        goto LABEL_14;
      }
      objc_setProperty_atomic(v6, v9, 0, 416);
    }
    id v6 = *(id *)(a1 + 32);
    if (v6) {
      id v6 = objc_getProperty(v6, v7, 408, 1);
    }
  }
LABEL_14:
  (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  uint64_t v11 = *(NSObject **)(a1 + 32);
  if (v11)
  {
    objc_setProperty_atomic_copy(v11, v10, 0, 408);
    uint64_t v11 = *(NSObject **)(a1 + 32);
    if (v11) {
      uint64_t v11 = objc_getProperty(v11, v12, 376, 1);
    }
  }

  dispatch_resume(v11);
}

void sub_10001E9BC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10001E9D0(id *a1)
{
  uint64_t v2 = a1 + 6;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  unsigned int v5 = WeakRetained;
  if (WeakRetained)
  {
    id Property = objc_getProperty(WeakRetained, v4, 376, 1);
    dispatch_suspend(Property);
    char v7 = [v5 queue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10001EAEC;
    v8[3] = &unk_1000C5968;
    objc_copyWeak(&v12, v2);
    id v10 = a1[4];
    id v9 = v5;
    id v11 = a1[5];
    dispatch_sync(v7, v8);

    objc_destroyWeak(&v12);
  }
}

void sub_10001EAEC(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (WeakRetained) {
      id Property = objc_getProperty(WeakRetained, v11, 376, 1);
    }
    else {
      id Property = 0;
    }
    dispatch_resume(Property);
    goto LABEL_28;
  }
  char v5 = v4;
  id v6 = objc_loadWeakRetained(v2);
  int v8 = v6;
  if (v6) {
    v6[50] = 0;
  }
  if ((v5 & 2) != 0)
  {
    id v9 = ne_log_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@: waiting for DNS to change", buf, 0xCu);
    }

    if (v8) {
      v8[50] |= 2uLL;
    }
  }
  if ((v5 & 1) == 0)
  {
    if ((v5 & 4) == 0)
    {
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  uint64_t v13 = ne_log_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@: waiting for NWI to change", buf, 0xCu);
  }

  if (!v8)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  v8[50] |= 1uLL;
  if ((v5 & 4) != 0)
  {
LABEL_20:
    SEL v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@: waiting for proxies to change", buf, 0xCu);
    }

    if (!v8) {
      goto LABEL_25;
    }
    v8[50] |= 4uLL;
  }
LABEL_24:
  objc_setProperty_atomic_copy(v8, v7, *(id *)(a1 + 48), 408);
LABEL_25:
  __int16 v17 = [v8 queue];
  objc_copyWeak(&v20, v2);
  signed int v19 = NECreateTimerSource();
  if (v8) {
    objc_setProperty_atomic(v8, v18, v19, 416);
  }

  objc_destroyWeak(&v20);
LABEL_28:
}

void sub_10001EE08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10001EE24(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(v1);
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (v3) {
        uint64_t v5 = v3[50];
      }
      else {
        LODWORD(v5) = 0;
      }
      int v14 = 138412546;
      SEL v15 = v3;
      __int16 v16 = 1024;
      int v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: timed out while waiting for network configuration to change (pending uint64_t flags = 0x%x)", (uint8_t *)&v14, 0x12u);
    }

    if (v3)
    {
      v3[50] = 0;
      if (objc_getProperty(v3, v6, 408, 1))
      {
        id Property = (void (**)(id, uint64_t))objc_getProperty(v3, v7, 408, 1);
        Property[2](Property, 1);
        objc_setProperty_atomic_copy(v3, v9, 0, 408);
      }
      uint64_t v10 = objc_getProperty(v3, v7, 416, 1);
      dispatch_source_cancel(v10);
      objc_setProperty_atomic(v3, v11, 0, 416);
      uint64_t v13 = objc_getProperty(v3, v12, 376, 1);
    }
    else
    {
      dispatch_source_cancel(0);
      uint64_t v13 = 0;
    }
    dispatch_resume(v13);
  }
}

void sub_10001F028(void *a1, int a2)
{
  if (!a1) {
    return;
  }
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: handleSetConfigurationResult - result %d", buf, 0x12u);
  }

  if ([a1 virtualInterface]
    && ([a1 sessionType] == 1 || objc_msgSend(a1, "sessionType") == 2))
  {
    [a1 virtualInterface];
    uint64_t v5 = (void *)NEVirtualInterfaceCopyName();
    sub_1000812F8(a1, v5);
  }
  if (a2 && [a1 resetPerAppPolicy])
  {
    if ([a1 type] == 1)
    {
      if ([a1 tunnelKind] == (id)2)
      {
        if ([a1 virtualInterface])
        {
          uint64_t v6 = NEVirtualInterfaceCopyName();
          if (v6)
          {
            char v7 = v6;
            [a1 virtualInterface];
            int v8 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName();
            if (!v8)
            {
              SEL v9 = [a1 server];
              uint64_t v10 = [v9 primaryCellularInterface];
              int v8 = [v10 interfaceName];

              if (!v8)
              {
                id v47 = ne_log_obj();
                if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = a1;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
                  _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%@:%s: NULL delegate interface name", buf, 0x16u);
                }
                uint64_t v16 = 0;
                goto LABEL_59;
              }
            }
            SEL v11 = [a1 pluginConfigurationEntities];
            SEL v12 = [v11 DNSSettings];
            uint64_t v13 = [v12 matchDomains];

            if (v13)
            {
              int v14 = [v11 DNSSettings];
              SEL v15 = [v14 matchDomains];
            }
            else
            {
              int v14 = [a1 protocol];
              id v37 = [v14 DNSSettings];
              SEL v15 = [v37 matchDomains];
            }
            long long v38 = [v11 IPv4Settings];

            if (!v38) {
              goto LABEL_52;
            }
            unsigned int v39 = [v11 IPv4Settings];
            unsigned __int8 v40 = [v39 hasDefaultRoute];

            if (v40)
            {
              unsigned __int8 v52 = 1;
              goto LABEL_53;
            }
            BOOL v41 = [v11 IPv6Settings];

            if (v41)
            {
              uint64_t v42 = [v11 IPv6Settings];
              unsigned __int8 v52 = [v42 hasDefaultRoute];
            }
            else
            {
LABEL_52:
              unsigned __int8 v52 = 0;
            }
LABEL_53:
            id v43 = (void *)NEVirtualInterfaceCopyRoutes();
            id v44 = (void *)NEVirtualInterfaceCopyRoutes();
            BOOL v45 = [a1 policySession];
            long long v46 = v7;
            id v47 = v8;
            id v48 = v43;
            id v49 = v44;
            id v50 = v15;
            if (v45 && isa_nsstring() && LODWORD(v45[1].isa) == 1)
            {
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472;
              *(void *)&buf[16] = sub_100039DF0;
              id v54 = (const char *)&unk_1000C5D50;
              unsigned int v55 = v45;
              unsigned int v56 = v46;
              id v57 = v49;
              id v58 = v47;
              unsigned __int8 v61 = v52;
              id v59 = v48;
              id v60 = v50;
              uint64_t v16 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
            }
            else
            {
              uint64_t v16 = 0;
            }

LABEL_59:
            goto LABEL_60;
          }
          uint64_t v36 = ne_log_obj();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            id v51 = [a1 interfaceName];
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v51;
            *(_WORD *)&buf[22] = 2080;
            id v54 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
            _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface name", buf, 0x20u);
          }
          char v7 = 0;
        }
        else
        {
          char v7 = ne_log_obj();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            unsigned int v35 = [a1 interfaceName];
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = v35;
            *(_WORD *)&buf[22] = 2080;
            id v54 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface", buf, 0x20u);
          }
        }
        uint64_t v16 = 0;
LABEL_60:

        goto LABEL_19;
      }
      __int16 v26 = [a1 configuration];
      SEL v27 = [v26 VPN];
      __int16 v28 = [v27 protocol];
      unsigned int v29 = [v28 enforceRoutes];

      if (v29)
      {
        __int16 v30 = [a1 configuration];
        id v31 = [v30 VPN];
        __int16 v32 = [v31 protocol];
        unsigned __int8 v33 = [v32 includeAllNetworks];

        if ((v33 & 1) == 0)
        {
          uint64_t v16 = sub_10001F860(a1);
          goto LABEL_19;
        }
        id v34 = ne_log_obj();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%@: Ignoring enforceRoutes because includeAllNetworks is set", buf, 0xCu);
        }
      }
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
LABEL_19:
  if ([a1 parentType] == (id)2)
  {
    int v17 = [a1 parent];
    if (v16 && [a1 type] == 1)
    {
      [a1 virtualInterface];
      id v18 = (void *)NEVirtualInterfaceCopyName();
      id v19 = a1;
      id v20 = v18;
      signed int v21 = v20;
      if (v17)
      {
        if (v20)
        {
          uint64_t v22 = [v17 queue];
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = sub_10008D2A0;
          id v54 = (const char *)&unk_1000C6958;
          unsigned int v55 = v21;
          unsigned int v56 = v17;
          id v57 = v19;
          dispatch_async(v22, buf);

          uint64_t v23 = v55;
        }
        else
        {
          uint64_t v23 = ne_log_obj();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "-[NESMIKEv2VPNFallbackSession handleSetConfigurationResult:tunnelInterfaceName:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "%s called with null tunnelInterfaceName", buf, 0xCu);
          }
        }
      }
    }
  }
  int v24 = [a1 stateHandler];
  [v24 handleSetConfigurationResult:v16];

  if (v16)
  {
    id v25 = 0;
  }
  else
  {
    id v25 = +[NSError errorWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
  }
  sub_10001E38C(a1, v25);
}

uint64_t sub_10001F860(void *a1)
{
  if (![a1 virtualInterface])
  {
    id v3 = ne_log_obj();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v16 = 0;
      goto LABEL_15;
    }
    int v17 = [a1 interfaceName];
    *(_DWORD *)buf = 138412802;
    __int16 v32 = a1;
    __int16 v33 = 2112;
    id v34 = (const char *)v17;
    __int16 v35 = 2080;
    uint64_t v36 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
    id v18 = "%@[%@]:%s: NULL virtual interface";
    id v19 = v3;
    uint32_t v20 = 32;
    goto LABEL_8;
  }
  uint64_t v2 = NEVirtualInterfaceCopyName();
  if (!v2)
  {
    signed int v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = [a1 interfaceName];
      *(_DWORD *)buf = 138412802;
      __int16 v32 = a1;
      __int16 v33 = 2112;
      id v34 = v23;
      __int16 v35 = 2080;
      uint64_t v36 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@[%@]:%s: NULL virtual interface name", buf, 0x20u);
    }
    id v3 = 0;
    goto LABEL_14;
  }
  id v3 = v2;
  uint64_t v4 = [a1 server];
  uint64_t v5 = [v4 primaryPhysicalInterface];
  uint64_t v6 = [v5 interfaceName];

  if (!v6)
  {
    [a1 virtualInterface];
    uint64_t v6 = NEVirtualInterfaceCopyDelegateInterfaceName();
    if (!v6)
    {
      int v17 = ne_log_obj();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      *(_DWORD *)buf = 138412546;
      __int16 v32 = a1;
      __int16 v33 = 2080;
      id v34 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
      id v18 = "%@:%s: NULL delegate interface name";
      id v19 = v17;
      uint32_t v20 = 22;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
LABEL_13:

      goto LABEL_14;
    }
  }
  char v7 = [a1 pluginConfigurationEntities];
  __int16 v30 = [a1 policySession];
  int v8 = [a1 pluginPIDArray];
  unsigned int v29 = [v7 IPv4Settings];
  id v25 = [v29 includedRoutes];
  __int16 v28 = [v7 IPv6Settings];
  SEL v9 = [v28 includedRoutes];
  SEL v27 = [v7 IPv4Settings];
  uint64_t v10 = [v27 excludedRoutes];
  int v24 = [v7 IPv6Settings];
  SEL v11 = [v24 excludedRoutes];
  SEL v12 = [a1 configuration];
  [v12 VPN];
  uint64_t v13 = (void *)v6;
  int v14 = v26 = (void *)v6;
  SEL v15 = [v14 protocol];
  uint64_t v16 = sub_10003A7E8((uint64_t)v30, v3, v13, v8, v25, v9, v10, v11, (char)[v15 excludeLocalNetworks]);

LABEL_15:
  return v16;
}

uint64_t sub_100020314(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (![a1 virtualInterface])
  {
    uint64_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

      return 0;
    }
    SEL v11 = [a1 interfaceName];
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    unsigned __int8 v40 = "-[NESMVPNSession applyTunnelDataPolicies]";
    SEL v12 = "%@[%@]:%s: NULL virtual interface";
LABEL_31:
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v12, buf, 0x20u);

    goto LABEL_9;
  }
  uint64_t v2 = NEVirtualInterfaceCopyName();
  if (!v2)
  {
    uint64_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    SEL v11 = [a1 interfaceName];
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2080;
    unsigned __int8 v40 = "-[NESMVPNSession applyTunnelDataPolicies]";
    SEL v12 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_31;
  }
  id v3 = (void *)v2;
  uint64_t v4 = [a1 server];
  uint64_t v5 = [v4 primaryPhysicalInterface];
  uint64_t v6 = [v5 interfaceName];
  if (v6)
  {
    char v7 = [a1 server];
    int v8 = [v7 primaryPhysicalInterface];
    SEL v9 = [v8 interfaceName];
  }
  else
  {
    SEL v9 = 0;
  }

  if (!v9)
  {
    [a1 virtualInterface];
    SEL v9 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName();
    if (!v9)
    {
      SEL v27 = ne_log_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "-[NESMVPNSession applyTunnelDataPolicies]";
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%@:%s: NULL delegate interface name", buf, 0x16u);
      }

      myCFRelease();
      return 0;
    }
  }
  long long v38 = [a1 policySession];
  int v14 = [a1 pluginConfigurationEntities];
  uint64_t v15 = [v14 DNSSettings];
  uint64_t v16 = [a1 pluginConfigurationEntities];
  [v16 proxySettings];
  id v34 = v37 = v14;
  __int16 v35 = v16;
  unsigned __int8 v33 = [v34 enabled];
  if (v33)
  {
    unsigned __int8 v30 = 1;
  }
  else
  {
    unsigned int v29 = [a1 protocol];
    __int16 v28 = [v29 proxySettings];
    unsigned __int8 v30 = [v28 enabled];
  }
  uint64_t v36 = (void *)v15;
  BOOL v32 = v15 != 0;
  int v17 = [a1 configuration];
  id v18 = [v17 VPN];
  id v19 = [v18 protocol];
  unsigned __int8 v31 = [v19 excludeLocalNetworks];
  uint32_t v20 = [a1 configuration];
  signed int v21 = [v20 VPN];
  uint64_t v22 = [v21 protocol];
  unsigned __int8 v23 = [v22 excludeCellularServices];
  id v24 = v3;
  id v25 = v9;
  uint64_t v13 = (uint64_t)v38;
  if (v38)
  {
    if (isa_nsstring() && isa_nsstring() && v38[2] == 1)
    {
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_1000395BC;
      unsigned __int8 v40 = (const char *)&unk_1000C5D28;
      BOOL v41 = v38;
      id v42 = v24;
      unsigned __int8 v44 = v31;
      unsigned __int8 v45 = v23;
      id v43 = v25;
      unsigned __int8 v46 = v30;
      BOOL v47 = v32;
      uint64_t v13 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
    }
    else
    {
      uint64_t v13 = 0;
    }
  }

  if ((v33 & 1) == 0)
  {
  }
  myCFRelease();

  return v13;
}

void *sub_1000207EC(void *result)
{
  if (result)
  {
    uint64_t v2 = result;
    if ([result virtualInterface]) {
      id v3 = (void *)NEVirtualInterfaceCopyName();
    }
    else {
      id v3 = 0;
    }
    if (([v2 isSecondaryConnection] & 1) != 0 || objc_msgSend(v2, "tunnelKind") == (id)2)
    {
      char v4 = 0;
      uint64_t v5 = 0;
LABEL_20:
      int v14 = [v2 policySession];
      uint64_t v15 = sub_1000493B4((uint64_t)v14, v3, v5, v4);

      return (void *)v15;
    }
    uint64_t v6 = [v2 pluginConfigurationEntities];
    char v7 = [v6 DNSSettings];
    uint64_t v5 = [v7 matchDomains];

    if (!v5)
    {
      int v8 = [v2 protocol];
      uint64_t v1 = [v8 DNSSettings];
      uint64_t v5 = [v1 matchDomains];
    }
    SEL v9 = [v6 IPv4Settings];
    unsigned __int8 v10 = [v9 hasDefaultRoute];
    if ((v10 & 1) != 0
      || ([v6 IPv6Settings],
          uint64_t v1 = objc_claimAutoreleasedReturnValue(),
          [v1 hasDefaultRoute]))
    {
      SEL v11 = [v6 DNSSettings];
      if (v11)
      {
        char v4 = 1;
      }
      else
      {
        SEL v12 = [v2 protocol];
        uint64_t v13 = [v12 DNSSettings];
        char v4 = v13 != 0;
      }
      if (v10) {
        goto LABEL_19;
      }
    }
    else
    {
      char v4 = 0;
    }

LABEL_19:
    goto LABEL_20;
  }
  return result;
}

id sub_10002099C(uint64_t a1)
{
  kdebug_trace();
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3) {
      goto LABEL_34;
    }
    char v4 = [*(id *)(a1 + 32) pluginConfigurationEntities];
    uint64_t v5 = [v4 IPv4Settings];
    if (!v5)
    {
      uint64_t v5 = [v3 pluginConfigurationEntities];
      uint64_t v6 = [v5 IPv6Settings];
      if (!v6)
      {
        signed int v21 = [v3 pluginConfigurationEntities];
        uint64_t v22 = [v21 tunnelRemoteAddress];

        if (!v22) {
          goto LABEL_10;
        }
        goto LABEL_7;
      }
    }
LABEL_7:
    char v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Resetting the virtual interface", buf, 0xCu);
    }

    [v3 virtualInterface];
    NEVirtualInterfaceRemoveAllAddresses();
    [v3 virtualInterface];
    NEVirtualInterfaceRemoveAllRoutes();
    [v3 virtualInterface];
    NEVirtualInterfaceSetIPv4Router();
    [v3 virtualInterface];
    NEVirtualInterfaceSetIPv6Router();
    [v3 virtualInterface];
    NEVirtualInterfaceSetAsPrimary();
LABEL_10:
    int v8 = *(void **)(a1 + 32);
    if (v8)
    {
      SEL v9 = [*(id *)(a1 + 32) pluginConfigurationEntities];
      unsigned __int8 v10 = [v9 proxySettings];
      if (!v10)
      {
        SEL v11 = [v8 protocol];
        unsigned __int8 v10 = [v11 proxySettings];
      }
      if (![v10 enabled]) {
        goto LABEL_27;
      }
      if (([v8 isSecondaryConnection] & 1) == 0)
      {
        SEL v12 = [v10 matchDomains];
        if ([v12 count])
        {
LABEL_18:

          goto LABEL_19;
        }
        uint64_t v13 = [v9 DNSSettings];
        int v14 = [v13 matchDomains];
        id v15 = [v14 count];

        if (v15)
        {
          SEL v12 = [v9 DNSSettings];
          uint64_t v16 = [v12 matchDomains];
          [v10 setMatchDomains:v16];

          goto LABEL_18;
        }
      }
LABEL_19:
      id v17 = [v10 copyLegacyDictionary];
      if (v17)
      {
        id v18 = ne_log_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@: Setting proxies", buf, 0xCu);
        }

        [v8 virtualInterface];
        if (!NEVirtualInterfaceSetProxies())
        {
          id v19 = ne_log_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v24 = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%@: failed to set the proxy configuration", buf, 0xCu);
          }
        }
      }

LABEL_27:
      uint32_t v20 = *(void **)(a1 + 32);
      goto LABEL_28;
    }
LABEL_34:
    uint32_t v20 = 0;
LABEL_28:
    [v20 virtualInterface];
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges()) {
      return 0;
    }
    else {
      return 0;
    }
  }
  return result;
}

id sub_100020D30(uint64_t a1)
{
  kdebug_trace();
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      id v43 = 0;
LABEL_32:
      [v43 virtualInterface];
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges()) {
        return 0;
      }
      else {
        return 0;
      }
    }
    char v4 = [*(id *)(a1 + 32) pluginConfigurationEntities];
    uint64_t v5 = [v4 DNSSettings];

    if (!v5)
    {
      sub_10001E278(v3);
LABEL_31:

      id v43 = *(void **)(a1 + 32);
      goto LABEL_32;
    }
    uint64_t v6 = [v4 DNSSettings];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {

LABEL_8:
      SEL v9 = ne_log_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@: Setting Encrypted DNS", buf, 0xCu);
      }

      id v10 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
      SEL v11 = [v3 configuration];
      SEL v12 = [v11 identifier];
      id v13 = [v10 initWithConfigUUID:v12 sessionType:[v3 type] name:0];
      [v3 setDnsAgent:v13];

      int v14 = [v3 dnsAgent];
      [v14 setActive:1];

      id v15 = [v4 DNSSettings];
      uint64_t v16 = [v3 dnsAgent];
      [v16 setSettings:v15];

      id v17 = +[NSUUID UUID];
      id v18 = [v3 dnsAgent];
      [v18 setAgentUUID:v17];

      id v19 = objc_alloc((Class)NWNetworkAgentRegistration);
      uint32_t v20 = [v3 dnsAgent];
      id v21 = [v19 initWithNetworkAgentClass:objc_opt_class()];
      [v3 setDnsAgentRegistration:v21];

      uint64_t v22 = [v3 dnsAgentRegistration];
      LODWORD(v20) = [v22 isRegistered];

      unsigned __int8 v23 = ne_log_obj();
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (v20)
      {
        if (v24)
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@: Updated DNS network agent", buf, 0xCu);
        }

        id v25 = [v3 dnsAgentRegistration];
        __int16 v26 = [v3 dnsAgent];
        [v25 updateNetworkAgent:v26];
      }
      else
      {
        if (v24)
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@: Registered DNS network agent", buf, 0xCu);
        }

        id v25 = [v3 dnsAgentRegistration];
        __int16 v26 = [v3 dnsAgent];
        [v25 registerNetworkAgent:v26];
      }

      SEL v27 = [v4 DNSSettings];
      __int16 v28 = [v27 matchDomains];

      if (v28)
      {
        unsigned int v29 = [v4 DNSSettings];
        unsigned __int8 v30 = [v29 matchDomains];
      }
      else
      {
        unsigned int v29 = [v3 protocol];
        unsigned __int8 v31 = [v29 DNSSettings];
        unsigned __int8 v30 = [v31 matchDomains];
      }
      if ([v3 tunnelKind] == (id)1) {
        char v32 = [v3 isSecondaryConnection] ^ 1;
      }
      else {
        char v32 = 0;
      }
      uint64_t v33 = [v3 policySession];
      id v34 = [v3 dnsAgent];
      __int16 v35 = [v34 agentUUID];
      [v3 virtualInterface];
      uint64_t v36 = (void *)NEVirtualInterfaceCopyName();
      id v37 = v35;
      id v38 = v36;
      id v39 = v30;
      if (v33 && v37 && v38 && *(_DWORD *)(v33 + 8) == 1)
      {
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = sub_100039268;
        id v74 = &unk_1000C5D00;
        uint64_t v75 = v33;
        id v76 = v37;
        id v77 = v39;
        char v79 = v32;
        id v78 = v38;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
      }
      id v40 = 0;
      BOOL v41 = 0;
      id v42 = 0;
      goto LABEL_29;
    }
    char v7 = [v4 DNSSettings];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass) {
      goto LABEL_8;
    }
    unsigned __int8 v44 = ne_log_obj();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "%@: Setting DNS", buf, 0xCu);
    }

    sub_10001E278(v3);
    unsigned __int8 v45 = [v4 DNSSettings];
    unsigned __int8 v46 = [v45 domainName];

    if (v46)
    {
      BOOL v47 = [v4 DNSSettings];
      id v42 = [v47 domainName];
    }
    else
    {
      BOOL v47 = [v3 protocol];
      id v48 = [v47 DNSSettings];
      id v42 = [v48 domainName];
    }
    [v3 virtualInterface];
    if (!NEVirtualInterfaceSetDNSDomain())
    {
      id v49 = ne_log_obj();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS domain", buf, 0xCu);
      }
    }
    id v50 = [v4 DNSSettings];
    id v51 = [v50 servers];

    if (v51)
    {
      unsigned __int8 v52 = [v4 DNSSettings];
      BOOL v41 = [v52 servers];
    }
    else
    {
      unsigned __int8 v52 = [v3 protocol];
      uint64_t v53 = [v52 DNSSettings];
      BOOL v41 = [v53 servers];
    }
    [v3 virtualInterface];
    if (!NEVirtualInterfaceSetDNSServers())
    {
      id v54 = ne_log_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS servers", buf, 0xCu);
      }
    }
    unsigned int v55 = [v4 DNSSettings];
    unsigned int v56 = [v55 searchDomains];

    if (v56)
    {
      id v57 = [v4 DNSSettings];
      id v58 = [v57 searchDomains];
    }
    else
    {
      id v57 = [v3 protocol];
      id v59 = [v57 DNSSettings];
      id v58 = [v59 searchDomains];
    }
    id v60 = [v4 DNSSettings];
    unsigned __int8 v61 = [v60 matchDomains];

    if (v61)
    {
      uint64_t v62 = [v4 DNSSettings];
      id v39 = [v62 matchDomains];

      __int16 v63 = [v4 DNSSettings];
      unsigned __int8 v64 = [v63 matchDomainsNoSearch];
    }
    else
    {
      long long v65 = [v3 protocol];
      v66 = [v65 DNSSettings];
      id v39 = [v66 matchDomains];

      __int16 v63 = [v3 protocol];
      uint64_t v67 = [v63 DNSSettings];
      unsigned __int8 v64 = [v67 matchDomainsNoSearch];
    }
    if ([v3 type] != 2) {
      goto LABEL_68;
    }
    if (v58)
    {
      if ([v58 count] || !v39)
      {
LABEL_68:
        id v40 = v58;
LABEL_69:
        [v3 virtualInterface];
        if (!NEVirtualInterfaceSetDNSSearchDomains())
        {
          v69 = ne_log_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%@: failed to set the DNS search domains", buf, 0xCu);
          }
        }
        if (([v3 isSecondaryConnection] & 1) != 0
          || [v3 tunnelKind] == (id)2)
        {
          goto LABEL_30;
        }
        [v3 virtualInterface];
        if (!NEVirtualInterfaceSetDNSSupplementalMatchDomains())
        {
          v70 = ne_log_obj();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%@: failed to set the supplemental match domains", buf, 0xCu);
          }
        }
        [v3 virtualInterface];
        if (NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch()) {
          goto LABEL_30;
        }
        uint64_t v33 = ne_log_obj();
        if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_ERROR, "%@: failed to set the supplemental match domains NoSearch flag", buf, 0xCu);
        }
LABEL_29:

LABEL_30:
        goto LABEL_31;
      }
    }
    else if (!v39)
    {
      id v40 = 0;
      goto LABEL_69;
    }
    if ([v39 count]) {
      char v68 = v64;
    }
    else {
      char v68 = 1;
    }
    if ((v68 & 1) == 0)
    {
      uint64_t v71 = +[NSPredicate predicateWithBlock:&stru_1000C5940];
      id v40 = [v39 filteredArrayUsingPredicate:v71];

      v72 = ne_log_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v3;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v40;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "%@: Using per-app match domains as search domains: %@", buf, 0x16u);
      }

      goto LABEL_69;
    }
    goto LABEL_68;
  }
  return result;
}

id sub_100021888(uint64_t a1)
{
  kdebug_trace();
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      v89 = 0;
LABEL_122:
      [v89 virtualInterface];
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges()) {
        return 0;
      }
      else {
        return 0;
      }
    }
    char v4 = [*(id *)(a1 + 32) pluginConfigurationEntities];
    [v3 virtualInterface];
    uint64_t Type = NEVirtualInterfaceGetType();
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v106 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: Setting up the virtual interface", buf, 0xCu);
    }

    uint64_t v6 = [v4 tunnelRemoteAddress];

    if (!v6)
    {
LABEL_19:
      uint64_t v16 = [v4 IPv4Settings];

      id v17 = NSCharacterSet_ptr;
      uint64_t v98 = a1;
      __int16 v99 = v4;
      if (!v16) {
        goto LABEL_67;
      }
      id v18 = [v4 IPv4Settings];
      CFArrayRef theArray = [v18 includedRoutes];

      id v19 = [v4 IPv4Settings];
      CFNumberRef v94 = [v19 excludedRoutes];

      uint32_t v20 = [v4 IPv4Settings];
      number = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v20 hasDefaultRoute]);

      id v21 = [v4 IPv4Settings];
      uint64_t v22 = [v21 addresses];

      unsigned __int8 v23 = [v4 IPv4Settings];
      BOOL v24 = [v23 subnetMasks];

      if (v22)
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)v22);
        if (v24)
        {
LABEL_22:
          CFIndex v27 = CFArrayGetCount((CFArrayRef)v24);
          goto LABEL_25;
        }
      }
      else
      {
        CFIndex Count = 0;
        if (v24) {
          goto LABEL_22;
        }
      }
      CFIndex v27 = 0;
LABEL_25:
      if (Count < 1)
      {
        id v51 = [v4 IPv4Settings];
        id v52 = [v51 configMethod];

        if (v52 == (id)1)
        {
          [v3 virtualInterface];
          if (!NEVirtualInterfaceSetIPv4ConfigurationMethod())
          {
            id v48 = ne_log_obj();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              [v3 virtualInterface];
              uint64_t v90 = NEVirtualInterfaceGetType();
              *(_DWORD *)buf = 138412546;
              v106 = v3;
              __int16 v107 = 2048;
              uint64_t v108 = v90;
              _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%@: failed to set the configuration method to DHCP for interface with type %ld", buf, 0x16u);
            }
            goto LABEL_59;
          }
        }
      }
      else
      {
        CFIndex v28 = 0;
        CFIndex v29 = 0;
        *(void *)&long long v25 = 138412546;
        long long v92 = v25;
        CFStringRef v30 = @"255.0.0.0";
        CFArrayRef v100 = (CFArrayRef)v24;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v22, v28);
          if (!v28 && Type == 1)
          {
            [v3 virtualInterface];
            if (!NEVirtualInterfaceSetIPv4Router())
            {
              char v32 = ne_log_obj();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v106 = v3;
                _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%@: failed to set the IPv4 router to remote address", buf, 0xCu);
              }

              uint64_t v33 = ne_log_obj();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = v92;
                v106 = v3;
                __int16 v107 = 2112;
                uint64_t v108 = (uint64_t)ValueAtIndex;
                _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%@: failed to set the IPv4 router to %@", buf, 0x16u);
              }
            }
          }
          CFStringRef v34 = 0;
          if (v24 && v29 < v27) {
            CFStringRef v34 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v24, v29++);
          }
          if (v34) {
            CFStringRef v35 = v34;
          }
          else {
            CFStringRef v35 = v30;
          }
          [v3 virtualInterface:v92];
          if (!NEVirtualInterfaceAddAddress())
          {
            CFIndex v36 = Count;
            id v37 = v22;
            CFIndex v38 = v27;
            CFStringRef v39 = v30;
            id v40 = ne_log_obj();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v106 = v3;
              _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%@: failed to add IPv4 address and netmask", buf, 0xCu);
            }

            BOOL v41 = ne_log_obj();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v106 = v3;
              __int16 v107 = 2112;
              uint64_t v108 = (uint64_t)ValueAtIndex;
              __int16 v109 = 2112;
              CFStringRef v110 = v35;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%@: failed to add address %@ netmask %@", buf, 0x20u);
            }

            CFStringRef v30 = v39;
            CFIndex v27 = v38;
            uint64_t v22 = v37;
            CFIndex Count = v36;
            BOOL v24 = v100;
          }
          ++v28;
        }
        while (Count != v28);
        char v4 = v99;
        id v42 = [v99 IPv4Settings];
        id v43 = [v42 router];

        id v17 = NSCharacterSet_ptr;
        if (v43)
        {
          if (Type == 3)
          {
            [v3 virtualInterface];
            unsigned __int8 v44 = [v99 IPv4Settings];
            unsigned __int8 v45 = [v44 router];
            int v46 = NEVirtualInterfaceSetIPv4Router();

            if (!v46)
            {
              BOOL v47 = ne_log_obj();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v106 = v3;
                _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%@: failed to set the IPv4 router", buf, 0xCu);
              }

              id v48 = ne_log_obj();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
              {
                id v49 = [v99 IPv4Settings];
                id v50 = [v49 router];
                *(_DWORD *)buf = v92;
                v106 = v3;
                __int16 v107 = 2112;
                uint64_t v108 = (uint64_t)v50;
                _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "%@: failed to set the IPv4 router to %@", buf, 0x16u);
              }
LABEL_59:
            }
          }
        }
      }
      if (([v3 isSecondaryConnection] & 1) == 0)
      {
        sub_100022CF4(v3, theArray, 0, 2);
        sub_100022CF4(v3, v94, 1, 2);
        if (number)
        {
          int valuePtr = 0;
          CFNumberGetValue((CFNumberRef)number, kCFNumberIntType, &valuePtr);
          int v53 = valuePtr;
          BOOL v54 = valuePtr != 0;
          unsigned int v55 = ne_log_obj();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v56 = @"not primary";
            if (v53) {
              CFStringRef v56 = @"primary";
            }
            *(_DWORD *)buf = 138412546;
            v106 = v3;
            __int16 v107 = 2112;
            uint64_t v108 = (uint64_t)v56;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv4", buf, 0x16u);
          }

LABEL_68:
          id v57 = [v4 IPv6Settings];

          if (!v57)
          {
            uint64_t v68 = v98;
            goto LABEL_110;
          }
          BOOL v103 = v54;
          id v58 = [v4 IPv6Settings];
          CFArrayRef v101 = [v58 includedRoutes];

          id v59 = [v4 IPv6Settings];
          CFArrayRef theArraya = [v59 excludedRoutes];

          id v60 = v17[15];
          unsigned __int8 v61 = [v4 IPv6Settings];
          CFNumberRef v95 = (const __CFNumber *)[v60 numberWithBool:[v61 hasDefaultRoute]];

          uint64_t v62 = [v4 IPv6Settings];
          __int16 v63 = [v62 addresses];

          unsigned __int8 v64 = [v4 IPv6Settings];
          long long v65 = [v64 networkPrefixLengths];

          if (v63)
          {
            CFIndex v66 = CFArrayGetCount((CFArrayRef)v63);
            if (v65)
            {
LABEL_71:
              CFIndex v67 = CFArrayGetCount((CFArrayRef)v65);
              goto LABEL_75;
            }
          }
          else
          {
            CFIndex v66 = 0;
            if (v65) {
              goto LABEL_71;
            }
          }
          CFIndex v67 = 0;
LABEL_75:
          if (v66 >= 1)
          {
            CFIndex v69 = 0;
            CFIndex v70 = 0;
            while (1)
            {
              uint64_t v71 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v63, v69);
              CFStringRef v72 = 0;
              if (v65 && v70 < v67)
              {
                CFNumberRef v73 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v65, v70);
                *(_DWORD *)buf = 128;
                CFNumberGetValue(v73, kCFNumberIntType, buf);
                CFStringRef v72 = (const __CFString *)NECreateIPv6AddressMaskStringFromPrefix();
                ++v70;
              }
              [v3 virtualInterface];
              if (!NEVirtualInterfaceAddAddress()) {
                break;
              }
              if (v72) {
                goto LABEL_82;
              }
LABEL_83:
              if (v66 == ++v69) {
                goto LABEL_99;
              }
            }
            id v74 = ne_log_obj();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v106 = v3;
              _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%@: failed to add IPv6 address and netmask", buf, 0xCu);
            }

            uint64_t v75 = ne_log_obj();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v106 = v3;
              __int16 v107 = 2112;
              uint64_t v108 = (uint64_t)v71;
              __int16 v109 = 2112;
              CFStringRef v110 = v72;
              _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%@: failed to add address %@ netmask %@", buf, 0x20u);
            }

            if (!v72) {
              goto LABEL_83;
            }
LABEL_82:
            CFRelease(v72);
            goto LABEL_83;
          }
          id v76 = [v4 IPv6Settings];
          id v77 = [v76 configMethod];

          if (v77 == (id)1)
          {
            [v3 virtualInterface];
            if (NEVirtualInterfaceSetIPv6ConfigurationMethod()) {
              goto LABEL_99;
            }
            id v78 = ne_log_obj();
            if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            [v3 virtualInterface];
            uint64_t v79 = NEVirtualInterfaceGetType();
            *(_DWORD *)buf = 138412546;
            v106 = v3;
            __int16 v107 = 2048;
            uint64_t v108 = v79;
            v80 = "%@: failed to set the configuration method to Automatic for interface with type %ld";
          }
          else
          {
            id v81 = [v4 IPv6Settings];
            id v82 = [v81 configMethod];

            if (v82 != (id)3
              || ([v3 virtualInterface], NEVirtualInterfaceSetIPv6ConfigurationMethod()))
            {
LABEL_99:
              if ([v3 isSecondaryConnection])
              {
                uint64_t v68 = v98;
                char v4 = v99;
                BOOL v54 = v103;
              }
              else
              {
                sub_100022CF4(v3, v101, 0, 30);
                sub_100022CF4(v3, theArraya, 1, 30);
                BOOL v54 = v103;
                if (v95) {
                  char v83 = v103;
                }
                else {
                  char v83 = 1;
                }
                uint64_t v68 = v98;
                char v4 = v99;
                if ((v83 & 1) == 0)
                {
                  int valuePtr = 0;
                  CFNumberGetValue(v95, kCFNumberIntType, &valuePtr);
                  int v84 = valuePtr;
                  BOOL v54 = valuePtr != 0;
                  long long v85 = ne_log_obj();
                  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                  {
                    CFStringRef v86 = @"not primary";
                    if (v84) {
                      CFStringRef v86 = @"primary";
                    }
                    *(_DWORD *)buf = 138412546;
                    v106 = v3;
                    __int16 v107 = 2112;
                    uint64_t v108 = (uint64_t)v86;
                    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv6", buf, 0x16u);
                  }
                }
              }
LABEL_110:
              if ([v3 isSecondaryConnection])
              {
                [v3 virtualInterface];
                NEVirtualInterfaceSetAsPrimary();
                [v3 virtualInterface];
              }
              else
              {
                id v87 = [v3 tunnelKind];
                [v3 virtualInterface];
                if (!v54)
                {
                  NEVirtualInterfaceSetAsPrimary();
                  [v3 virtualInterface];
                  if (v87 == (id)1) {
                    NEVirtualInterfaceSetRankLast();
                  }
                  else {
                    NEVirtualInterfaceSetRankNever();
                  }
                  uint64_t v88 = [v3 configuration];
                  [v88 grade];

                  [v3 virtualInterface];
                  NEVirtualInterfaceSetServiceIndex();
                  goto LABEL_121;
                }
                if (v87 != (id)1)
                {
                  NEVirtualInterfaceSetRankNever();
                  goto LABEL_121;
                }
                NEVirtualInterfaceSetAsPrimary();
                [v3 virtualInterface];
              }
              NEVirtualInterfaceSetRankLast();
LABEL_121:

              v89 = *(void **)(v68 + 32);
              goto LABEL_122;
            }
            id v78 = ne_log_obj();
            if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
LABEL_98:

              goto LABEL_99;
            }
            [v3 virtualInterface];
            uint64_t v91 = NEVirtualInterfaceGetType();
            *(_DWORD *)buf = 138412546;
            v106 = v3;
            __int16 v107 = 2048;
            uint64_t v108 = v91;
            v80 = "%@: failed to set the configuration method to LinkLocalOnly for interface with type %ld";
          }
          _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, v80, buf, 0x16u);
          goto LABEL_98;
        }
      }
LABEL_67:
      BOOL v54 = 0;
      goto LABEL_68;
    }
    if (Type != 3)
    {
      char v7 = [v4 tunnelOverheadBytes];
      int v8 = [v7 intValue];

      int v9 = [v3 getVirtualInterfaceMTU:v4];
      if (v9 >= 1)
      {
        int v10 = v9;
        [v3 virtualInterface];
        if (NEVirtualInterfaceSetMTU()) {
          goto LABEL_15;
        }
        SEL v11 = ne_log_obj();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 138412546;
        v106 = v3;
        __int16 v107 = 1024;
        LODWORD(v108) = v10;
        SEL v12 = "%@: failed to set the MTU to %d";
        goto LABEL_127;
      }
      if (v8 >= 1)
      {
        [v3 virtualInterface];
        if (!NEVirtualInterfaceSetMTUOverhead())
        {
          SEL v11 = ne_log_obj();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
LABEL_14:

            goto LABEL_15;
          }
          *(_DWORD *)buf = 138412546;
          v106 = v3;
          __int16 v107 = 1024;
          LODWORD(v108) = v8;
          SEL v12 = "%@: failed to set the MTU overhead to %d";
LABEL_127:
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    [v3 virtualInterface];
    id v13 = [v4 tunnelRemoteAddress];
    int v14 = NEVirtualInterfaceSetVPNServerAddress();

    if (!v14)
    {
      id v15 = ne_log_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v106 = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@: failed to set the VPN server's remote address", buf, 0xCu);
      }
    }
    goto LABEL_19;
  }
  return result;
}

void sub_100022700(uint64_t a1, int a2)
{
  if (!a2)
  {
    SEL v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@: failed to set the tunnel configuration", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if ([*(id *)(a1 + 32) parentType] != (id)1)
  {
    char v4 = [*(id *)(a1 + 32) policySession];
    sub_1000318B0((uint64_t)v4);

    uint64_t v5 = *(void **)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = [*(id *)(a1 + 32) pluginConfigurationEntities];
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      [v5 virtualInterface];
      if (NEVirtualInterfaceIsPrimary())
      {
        xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
        int v9 = [v6 IPv4Settings];
        if (v9) {
          int v10 = +[NESMSession copyDefaultRouteCacheIsIPv6:0];
        }
        else {
          int v10 = 0;
        }

        *(void *)buf = v10;
        BOOL v24 = [v6 IPv6Settings];
        if (v24) {
          long long v25 = +[NESMSession copyDefaultRouteCacheIsIPv6:1];
        }
        else {
          long long v25 = 0;
        }

        *(void *)uu = v25;
        if (v10)
        {
          __int16 v26 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_dictionary_set_value(v8, "ipv4-subnets", v26);
        }
        if (v25)
        {
          CFIndex v27 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_dictionary_set_value(v8, "ipv6-subnets", v27);
        }
        myCFRelease();
        myCFRelease();
        xpc_dictionary_set_value(v7, "included-routes", v8);
      }
      else
      {
        [v5 virtualInterface];
        *(void *)buf = NEVirtualInterfaceCopyIPv4Routes();
        [v5 virtualInterface];
        *(void *)uu = NEVirtualInterfaceCopyIPv4Routes();
        [v5 virtualInterface];
        uint64_t v40 = NEVirtualInterfaceCopyIPv6Routes();
        [v5 virtualInterface];
        uint64_t v39 = NEVirtualInterfaceCopyIPv6Routes();
        unint64_t v14 = +[NESMSession copyRouteCacheFromRoutes:*(void *)buf isIPv6:0];
        unint64_t v15 = +[NESMSession copyRouteCacheFromRoutes:*(void *)uu isIPv6:0];
        unint64_t v16 = +[NESMSession copyRouteCacheFromRoutes:v40 isIPv6:1];
        unint64_t v17 = +[NESMSession copyRouteCacheFromRoutes:v39 isIPv6:1];
        myCFRelease();
        myCFRelease();
        myCFRelease();
        myCFRelease();
        if (v14 | v16)
        {
          xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
          if (v14)
          {
            id v19 = (void *)_CFXPCCreateXPCObjectFromCFObject();
            xpc_dictionary_set_value(v18, "ipv4-subnets", v19);
          }
          if (v16)
          {
            uint32_t v20 = (void *)_CFXPCCreateXPCObjectFromCFObject();
            xpc_dictionary_set_value(v18, "ipv6-subnets", v20);
          }
          xpc_dictionary_set_value(v7, "included-routes", v18);
        }
        if (v15 | v17)
        {
          xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
          if (v15)
          {
            uint64_t v22 = (void *)_CFXPCCreateXPCObjectFromCFObject();
            xpc_dictionary_set_value(v21, "ipv4-subnets", v22);
          }
          if (v17)
          {
            unsigned __int8 v23 = (void *)_CFXPCCreateXPCObjectFromCFObject();
            xpc_dictionary_set_value(v21, "ipv6-subnets", v23);
          }
          xpc_dictionary_set_value(v7, "excluded-routes", v21);
        }
        myCFRelease();
        myCFRelease();
        myCFRelease();
        myCFRelease();
      }
      *(void *)uu = 0;
      uint64_t v44 = 0;
      CFIndex v28 = [v5 configuration];
      CFIndex v29 = [v28 identifier];
      [v29 getUUIDBytes:uu];

      *(_OWORD *)buf = 0u;
      memset(v42, 0, sizeof(v42));
      uuid_unparse(uu, (char *)buf);
      NEHelperCacheSetRoutes();

      CFStringRef v30 = *(void **)(a1 + 32);
      if (v30)
      {
        if (([*(id *)(a1 + 32) isSecondaryConnection] & 1) == 0
          && [v30 tunnelKind] != (id)2)
        {
          SEL v11 = [v30 pluginConfigurationEntities];
          unsigned __int8 v31 = [v11 DNSSettings];
          char v32 = [v31 matchDomains];

          if (!v32)
          {
            uint64_t v33 = [v30 protocol];
            CFStringRef v34 = [v33 DNSSettings];
            char v32 = [v34 matchDomains];
          }
          *(void *)uu = 0;
          uint64_t v44 = 0;
          CFStringRef v35 = [v30 configuration];
          CFIndex v36 = [v35 identifier];
          [v36 getUUIDBytes:uu];

          *(_OWORD *)buf = 0u;
          memset(v42, 0, sizeof(v42));
          uuid_unparse(uu, (char *)buf);
          id v37 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          NEHelperCacheSetMatchDomains();

LABEL_9:
        }
      }
    }
  }
  SEL v12 = ne_log_obj();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@: Finished setting the tunnel configuration", buf, 0xCu);
  }

  sub_10001F028(*(void **)(a1 + 32), a2);
}

uint64_t sub_100022CF4(void *a1, CFArrayRef theArray, int a3, int a4)
{
  if (!theArray) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    CFStringRef v10 = @"included";
    if (a3) {
      CFStringRef v10 = @"excluded";
    }
    CFStringRef v25 = v10;
    char v11 = 1;
    while (a4 != 30)
    {
      if (a4 != 2)
      {
        SEL v12 = ne_log_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          CFIndex v28 = a1;
          __int16 v29 = 1024;
          LODWORD(v30) = a4;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@: INET Family (%d) not supported", buf, 0x12u);
        }
        goto LABEL_22;
      }
      SEL v12 = CFArrayGetValueAtIndex(theArray, v9);
      if ([v12 isDefaultRoute]) {
        goto LABEL_23;
      }
      uint64_t v13 = [v12 destinationAddress];

      unint64_t v14 = [v12 destinationSubnetMask];

      unint64_t v15 = [v12 gatewayAddress];

      [a1 virtualInterface];
      if (NEVirtualInterfaceAddIPv4Route()) {
        goto LABEL_23;
      }
      unint64_t v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        CFIndex v28 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@: failed to add an IPv4 route", buf, 0xCu);
      }

      unint64_t v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413314;
        CFIndex v28 = a1;
        __int16 v29 = 2112;
        CFStringRef v30 = v25;
        __int16 v31 = 2112;
        char v32 = v13;
        __int16 v33 = 2112;
        CFStringRef v34 = v14;
        __int16 v35 = 2112;
        CFIndex v36 = v15;
        xpc_object_t v18 = v17;
        id v19 = "%@: failed to add an IPv4 %@ route of %@/%@ -> %@";
LABEL_26:
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, v19, buf, 0x34u);
      }
LABEL_19:

LABEL_22:
      char v11 = 0;
LABEL_23:

      if (v8 == ++v9) {
        return v11 & 1;
      }
    }
    SEL v12 = CFArrayGetValueAtIndex(theArray, v9);
    if ([v12 isDefaultRoute]) {
      goto LABEL_23;
    }
    uint32_t v20 = [v12 destinationAddress];

    xpc_object_t v21 = [v12 destinationNetworkPrefixLength];

    uint64_t v22 = [v12 gatewayAddress];

    [a1 virtualInterface];
    if (NEVirtualInterfaceAddIPv6Route()) {
      goto LABEL_23;
    }
    unsigned __int8 v23 = ne_log_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      CFIndex v28 = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%@: failed to add an IPv6 route", buf, 0xCu);
    }

    unint64_t v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 138413314;
    CFIndex v28 = a1;
    __int16 v29 = 2112;
    CFStringRef v30 = v25;
    __int16 v31 = 2112;
    char v32 = v20;
    __int16 v33 = 2112;
    CFStringRef v34 = v21;
    __int16 v35 = 2112;
    CFIndex v36 = v22;
    xpc_object_t v18 = v17;
    id v19 = "%@: failed to add an IPv6 %@ route of %@/%@ -> %@";
    goto LABEL_26;
  }
  char v11 = 1;
  return v11 & 1;
}

BOOL sub_1000230E4(id a1, id a2, NSDictionary *a3)
{
  return [a2 length] != 0;
}

void sub_100023218(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 setConfigurationCompletionHandlerArray];

    if (v2)
    {
      id v3 = objc_alloc_init(NESetConfigurationCompletionOperation);
      uint64_t v5 = [a1 pluginCompletionHandler];
      if (v3) {
        objc_setProperty_atomic_copy(v3, v4, v5, 8);
      }

      [a1 setPluginCompletionHandler:0];
      uint64_t v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex v8 = [a1 interfaceName];
        if (v3) {
          id Property = objc_getProperty(v3, v7, 8, 1);
        }
        else {
          id Property = 0;
        }
        id v10 = objc_retainBlock(Property);
        int v13 = 138412802;
        unint64_t v14 = a1;
        __int16 v15 = 2112;
        unint64_t v16 = v8;
        __int16 v17 = 2112;
        id v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: config request: pushing handler [%@] %@", (uint8_t *)&v13, 0x20u);
      }
      char v11 = [a1 setConfigurationCompletionHandlerArray];
      [v11 addObject:v3];
    }
    else
    {
      ne_log_obj();
      id v3 = (NESetConfigurationCompletionOperation *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v3->super, OS_LOG_TYPE_ERROR))
      {
        SEL v12 = [a1 interfaceName];
        int v13 = 138412546;
        unint64_t v14 = a1;
        __int16 v15 = 2112;
        unint64_t v16 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, &v3->super, OS_LOG_TYPE_ERROR, "%@: config request (push) handler array nil [%@]", (uint8_t *)&v13, 0x16u);
      }
    }
  }
}

uint64_t sub_100023E74(uint64_t a1)
{
  if ([*(id *)(a1 + 32) virtualInterface])
  {
    [*(id *)(a1 + 32) virtualInterface];
    if (!NEVirtualInterfaceSetDelegateInterface())
    {
      char v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        char v11 = *(void **)(a1 + 32);
        SEL v12 = *(NSObject **)(a1 + 40);
        int v14 = 138412546;
        __int16 v15 = v11;
        __int16 v16 = 2112;
        __int16 v17 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: failed to set delegate interface to %@", (uint8_t *)&v14, 0x16u);
      }
      goto LABEL_13;
    }
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2)
    {
      id v3 = *(void **)(a1 + 32);
      char v4 = v2;
      if (v3)
      {
        uint64_t v5 = [v3 pluginConfigurationEntities];
        uint64_t v6 = [v5 tunnelRemoteAddress];

        if (v6 && NEGetAddressFamilyFromString())
        {
          xpc_object_t v7 = v4;
          [v7 UTF8String];
          CFIndex v8 = (void *)NECopyInterfaceAddress();
          [v3 setDelegateInterfaceAddress:v8];

          CFIndex v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            int v13 = [v3 delegateInterfaceAddress];
            int v14 = 138412802;
            __int16 v15 = v3;
            __int16 v16 = 2112;
            __int16 v17 = v7;
            __int16 v18 = 2112;
            id v19 = v13;
            _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%@: IP address for %@ is %@", (uint8_t *)&v14, 0x20u);
          }
        }
      }
LABEL_13:
    }
  }
  return 0;
}

void sub_100024060(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@: failed to update the service in the dynamic store after manager set the delegate interface", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1000247AC(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  char v11 = a5;
  SEL v12 = ne_log_obj();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = *(void **)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    CFStringRef v15 = @"nil";
    if (v10) {
      CFStringRef v16 = v10;
    }
    else {
      CFStringRef v16 = @"nil";
    }
    if (v11) {
      CFStringRef v15 = v11;
    }
    int v54 = 138413570;
    unsigned int v55 = v13;
    __int16 v56 = 2112;
    uint64_t v57 = v14;
    __int16 v58 = 1024;
    *(_DWORD *)id v59 = v9;
    *(_WORD *)&v59[4] = 1024;
    *(_DWORD *)&v59[6] = a3;
    *(_WORD *)id v60 = 2112;
    *(void *)&v60[2] = v16;
    __int16 v61 = 2112;
    CFStringRef v62 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@: VPN Slice request callback - sliceUUID %@ : context %X type %d slice-ifname %@ error %@", (uint8_t *)&v54, 0x36u);
  }

  if (v11)
  {
    __int16 v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v46 = *(void **)(a1 + 32);
      uint64_t v47 = *(void *)(a1 + 40);
      id v48 = [v46 server];
      id v49 = [v48 primaryPhysicalInterface];
      id v50 = [v49 interfaceName];
      int v54 = 138413058;
      unsigned int v55 = v46;
      __int16 v56 = 2112;
      uint64_t v57 = v47;
      __int16 v58 = 2112;
      *(void *)id v59 = v50;
      *(_WORD *)&v59[8] = 2112;
      *(void *)id v60 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@: VPN Slice - Failed to request slice for sliceUUID %@ - fallback to default interface %@ <%@>", (uint8_t *)&v54, 0x2Au);
    }
    id v19 = *(void **)(a1 + 32);
    uint64_t v20 = *(unsigned int *)(a1 + 64);
    uint64_t v22 = *(void **)(a1 + 48);
    xpc_object_t v21 = *(void **)(a1 + 56);
    unsigned __int8 v23 = [v19 server];
    BOOL v24 = [v23 primaryPhysicalInterface];
    CFStringRef v25 = [v24 interfaceName];
    sub_1000199B0(v19, v22, v20, v21, v25);

    goto LABEL_30;
  }
  uint64_t v26 = *(void *)(a1 + 32);
  if (v26)
  {
    *(_DWORD *)(v26 + 360) = a3;
    CFIndex v27 = *(void **)(a1 + 32);
    if (v10)
    {
LABEL_14:
      if (v27) {
        objc_setProperty_atomic(v27, v17, v10, 496);
      }
      CFIndex v28 = ne_log_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        CFStringRef v30 = *(void **)(a1 + 32);
        uint64_t v31 = *(void *)(a1 + 40);
        if (v30) {
          id Property = objc_getProperty(*(id *)(a1 + 32), v29, 496, 1);
        }
        else {
          id Property = 0;
        }
        int v54 = 138412802;
        unsigned int v55 = v30;
        __int16 v56 = 2112;
        uint64_t v57 = v31;
        __int16 v58 = 2112;
        *(void *)id v59 = Property;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%@: VPN Slice request completed - sliceUUID %@ : %@ ", (uint8_t *)&v54, 0x20u);
      }

      CFStringRef v34 = *(void **)(a1 + 32);
      if (v34) {
        id v35 = objc_getProperty(*(id *)(a1 + 32), v33, 496, 1);
      }
      else {
        id v35 = 0;
      }
      [v34 setDelegateInterfaceName:v35];
      id v37 = *(void **)(a1 + 32);
      uint64_t v38 = *(unsigned int *)(a1 + 64);
      uint64_t v40 = *(void **)(a1 + 48);
      uint64_t v39 = *(void **)(a1 + 56);
      if (v37)
      {
        id v41 = objc_getProperty(v37, v36, 496, 1);
        id v42 = v37;
        id v43 = v40;
        uint64_t v44 = v38;
        unsigned __int8 v45 = v39;
      }
      else
      {
        id v42 = 0;
        id v43 = v40;
        uint64_t v44 = v38;
        unsigned __int8 v45 = v39;
        id v41 = 0;
      }
      sub_1000199B0(v42, v43, v44, v45, v41);
      goto LABEL_30;
    }
  }
  else
  {
    CFIndex v27 = 0;
    if (v10) {
      goto LABEL_14;
    }
  }
  if (v27)
  {
    objc_setProperty_atomic(v27, v17, *(id *)(a1 + 48), 504);
    uint64_t v52 = *(void *)(a1 + 32);
    if (v52)
    {
      *(_DWORD *)(v52 + 364) = *(_DWORD *)(a1 + 64);
      int v53 = *(void **)(a1 + 32);
      if (v53) {
        objc_setProperty_atomic(v53, v51, *(id *)(a1 + 56), 512);
      }
    }
  }
LABEL_30:
}

void sub_100025380(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) parentType];
  id v3 = *(void **)(a1 + 32);
  if (v2 == (id)1)
  {
    uint64_t v4 = [*(id *)(a1 + 32) interfaceName];
    [v3 setDelegateInterfaceName:v4];
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) tunnelKind];
    uint64_t v6 = *(void **)(a1 + 32);
    xpc_object_t v7 = [v6 server];
    CFIndex v8 = v7;
    if (v5 == (id)2) {
      [v7 primaryCellularInterface];
    }
    else {
    id v9 = [v7 primaryPhysicalInterface];
    }
    id v10 = [v9 interfaceName];
    [v6 setDelegateInterfaceName:v10];

    sub_1000207EC(*(void **)(a1 + 32));
  }
  [*(id *)(a1 + 32) virtualInterface];
  int IsVPN = NEVirtualInterfaceIsVPN();
  SEL v12 = ne_log_obj();
  int v13 = v12;
  if (IsVPN)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Marked the virtual interface as VPN", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Failed to mark the virtual interface as VPN", v19, 2u);
  }

  uint64_t v14 = [*(id *)(a1 + 32) protocol];
  CFStringRef v15 = [v14 identifier];
  CFStringRef v16 = [v15 UUIDString];

  if ([*(id *)(a1 + 32) tunnelKind] == (id)2)
  {
    __int16 v17 = +[NSString stringWithFormat:@"%@-FB", v16];
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetServiceID();
  }
  else
  {
    [*(id *)(a1 + 32) virtualInterface];
    NEVirtualInterfaceSetServiceID();
  }
}

uint64_t sub_10002557C(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) queue];
    uint64_t v4 = [*(id *)(a1 + 40) controlSocket];
    [v4 fileDescriptor];
    id v5 = [*(id *)(a1 + 40) name];
    [v5 UTF8String];
    [*(id *)(a1 + 40) userEthernetController];
    [*(id *)(a1 + 32) setVirtualInterface:NEVirtualInterfaceCreateUserEthernet()];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFIndex v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create a user ethernet interface", v8, 2u);
    }
  }
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), [*(id *)(a1 + 32) virtualInterface]);
}

void sub_10002614C(uint64_t a1)
{
  sub_10001BDD4(*(void **)(a1 + 32));
  id v3 = [*(id *)(a1 + 32) policySession];
  sub_10002E9D4(v3, v2);
}

uint64_t sub_100026514(uint64_t a1)
{
  sub_10001B66C(*(void **)(a1 + 32));
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2080;
    uint64_t v8 = inputNotification2String();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Handling a %s event", (uint8_t *)&v5, 0x16u);
  }

  return sub_10008088C(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40) == 1);
}

void sub_100026758(uint64_t a1)
{
  if ([*(id *)(a1 + 32) parentType] == (id)1) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = objc_getProperty(v3, v2, 496, 1);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = [*(id *)(a1 + 32) server];
      __int16 v7 = [v6 primaryPhysicalInterface];
      if ([v7 type] == (id)1)
      {
        uint64_t v8 = [*(id *)(a1 + 32) server];
        id v9 = [v8 primaryPhysicalInterface];
        id v10 = [v9 interfaceName];
        char v11 = *(void **)(a1 + 40);

        int v13 = *(void **)(a1 + 32);
        if (v10 == v11)
        {
          uint64_t v14 = *(void **)(a1 + 40);
          if (v13)
          {
            id Property = objc_getProperty(*(id *)(a1 + 32), v12, 496, 1);
            uint64_t v16 = *(void *)(a1 + 48);
            __int16 v17 = v13;
            __int16 v18 = v14;
          }
          else
          {
            uint64_t v16 = *(void *)(a1 + 48);
            __int16 v17 = 0;
            __int16 v18 = *(void **)(a1 + 40);
            id Property = 0;
          }
          sub_100026B1C(v17, v18, Property, v16);
          return;
        }
      }
      else
      {
      }
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [*(id *)(a1 + 32) tunnelKind] == (id)2)
  {
    id v19 = [*(id *)(a1 + 32) server];
    uint64_t v20 = [v19 primaryCellularInterface];
  }
  else
  {
    id v19 = [*(id *)(a1 + 32) server];
    uint64_t v20 = [v19 primaryPhysicalInterface];
  }
  xpc_object_t v21 = v20;
  id v37 = [v20 interfaceName];

  [*(id *)(a1 + 32) virtualInterface];
  uint64_t v22 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName();
  if (([v22 isEqualToString:v37] & 1) == 0)
  {
    id v23 = v37;

    [*(id *)(a1 + 32) setDelegateInterfaceName:v23];
    uint64_t v22 = v23;
  }
  BOOL v24 = [*(id *)(a1 + 32) primaryTunnelPlugin];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && sub_100018330((unsigned int *)v24))
  {
    CFStringRef v25 = [*(id *)(a1 + 32) server];
    uint64_t v26 = [v25 primaryPhysicalInterface];
    CFIndex v27 = [v26 interfaceName];
    sub_100018AA4(v24, v27);
  }
  char v28 = [*(id *)(a1 + 32) proxyEnabled:*(void *)(a1 + 40)];
  uint64_t v29 = *(void *)(a1 + 48);
  sub_100019D0C(*(void **)(a1 + 32), (v29 & 4) != 0, v28, v37);
  if (([*(id *)(a1 + 40) hasPrefix:@"utun"] & 1) == 0
    && ([*(id *)(a1 + 40) hasPrefix:@"ipsec"] & 1) == 0)
  {
    if ((v29 & 4) != 0)
    {
      CFStringRef v30 = [*(id *)(a1 + 32) configuration];
      uint64_t v31 = [v30 VPN];
      if ([v31 isOnDemandEnabled])
      {
      }
      else
      {
        char v32 = [*(id *)(a1 + 32) configuration];
        __int16 v33 = [v32 VPN];
        CFStringRef v34 = [v33 protocol];
        unsigned int v35 = [v34 includeAllNetworks];

        if (v35) {
          sub_10001D000(*(void **)(a1 + 32), v36);
        }
      }
    }
    sub_100026B1C(*(void **)(a1 + 32), *(void **)(a1 + 40), v22, *(void *)(a1 + 48));
  }
}

void sub_100026B1C(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (a1)
  {
    if (v7)
    {
      unsigned int v9 = [v7 isEqualToString:v13];
      char v10 = v9;
      if ((a4 & 3) == 0 && v9)
      {
        char v11 = [a1 stateHandler];
        [v11 handleInterfaceUnavailable:v13];
LABEL_12:

        goto LABEL_13;
      }
      if ((a4 & 3) == 0) {
        goto LABEL_13;
      }
      char v11 = [a1 stateHandler];
      if (v10)
      {
        SEL v12 = [a1 delegateInterfaceAddress];
        [v11 handleInterfaceAvailable:v13 changed:[a1 interface:hasIPAddress:currentFlags:v8, v12, a4] ^ 1];

        goto LABEL_12;
      }
    }
    else
    {
      if ((a4 & 3) == 0) {
        goto LABEL_13;
      }
      char v11 = [a1 stateHandler];
    }
    [v11 handleInterfaceAvailable:v13 changed:0];
    goto LABEL_12;
  }
LABEL_13:
}

void sub_100027154(uint64_t a1)
{
  sub_10008088C(*(void *)(a1 + 32), 1);
  id v2 = [*(id *)(a1 + 32) stateHandler];
  [v2 handleUserSwitch];
}

void sub_10002723C(uint64_t a1)
{
  sub_10008088C(*(void *)(a1 + 32), 1);
  id v2 = [*(id *)(a1 + 32) stateHandler];
  [v2 handleUserLogout];
}

void sub_100027320(uint64_t a1)
{
  sub_100081564(*(id *)(a1 + 32), 0);
  id v2 = [*(id *)(a1 + 32) stateHandler];
  [v2 handleWakeup];
}

void sub_100027414(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) protocol];
  if ([v5 disconnectOnWake])
  {
    double v2 = *(double *)(a1 + 40);
    uint64_t v3 = [*(id *)(a1 + 32) protocol];
    double v4 = (double)(int)[v3 disconnectOnWakeTimeout];

    if (v2 <= v4) {
      return;
    }
    [*(id *)(a1 + 32) setLastStopReason:2];
    id v5 = [*(id *)(a1 + 32) stateHandler];
    [v5 handleStop];
  }
}

void sub_100027560(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) stateHandler];
  [v1 handleSleep];
}

id *sub_1000285DC(id *result)
{
  if (*((_DWORD *)result + 10) == 32) {
    return (id *)[result[4] invalidate];
  }
  return result;
}

void sub_1000299C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10002ACD4(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) policySession];
  id v2 = *(id *)(a1 + 40);
  if (!v8)
  {

LABEL_5:
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)char v10 = 138412546;
      *(void *)&void v10[4] = v7;
      *(_WORD *)&v10[12] = 2080;
      *(void *)&v10[14] = "-[NESMVPNSession addDefaultDropPolicyForPluginUUIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@:%s: Failed to add Drop Control Policies for VPN Session", v10, 0x16u);
    }

    return;
  }
  if (v2 && [v2 count])
  {
    *(void *)char v10 = _NSConcreteStackBlock;
    *(void *)&v10[8] = 3221225472;
    *(void *)&uint8_t v10[16] = sub_100045354;
    char v11 = &unk_1000C5AF8;
    id v12 = v8;
    id v3 = v2;
    id v13 = v3;
    char v4 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v10);

    if (v4) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v6 = ne_log_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Skip, no UUIDs", buf, 2u);
  }
}

id sub_10002B258(uint64_t a1, const char *a2)
{
  id v3 = *(void (***)(void))(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 464, 1);
    id v3 = *(void (***)(void))(a1 + 32);
    if (Property)
    {
      if (v3) {
        id v3 = (void (**)(void))objc_getProperty(v3, v4, 464, 1);
      }
      v3[2]();
      id v3 = *(void (***)(void))(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic_copy(v3, v6, 0, 464);
        id v3 = *(void (***)(void))(a1 + 32);
      }
    }
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);

  return [v3 setStatus:v7];
}

void sub_10002BA30(void *a1)
{
  if (a1)
  {
    id v2 = [a1 setConfigurationCompletionHandlerArray];
    id v3 = [v2 count];

    if (v3)
    {
      char v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        CFIndex v27 = [a1 setConfigurationCompletionHandlerArray];
        *(_DWORD *)buf = 138412546;
        CFStringRef v30 = a1;
        __int16 v31 = 2048;
        id v32 = [v27 count];
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Disconnected session has %lu stale completionHandler(s)", buf, 0x16u);
      }
      +[NEDiagnosticReport logInternalError:@"SessionManager" subType:@"StaleConfigCompletionHandler" context:0];
      id v5 = +[NSError errorWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
      uint64_t v6 = [a1 setConfigurationCompletionHandlerArray];
      id v7 = [v6 count];

      if (v7)
      {
        *(void *)&long long v8 = 138412546;
        long long v28 = v8;
        while (1)
        {
          unsigned int v9 = [a1 setConfigurationCompletionHandlerArray:v28];
          char v10 = [v9 objectAtIndexedSubscript:0];

          if (!v10) {
            break;
          }
          char v11 = ne_log_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            id v12 = [a1 interfaceName];
            id Property = objc_getProperty(v10, v13, 8, 1);
            id v15 = objc_retainBlock(Property);
            *(_DWORD *)buf = 138412802;
            CFStringRef v30 = a1;
            __int16 v31 = 2112;
            id v32 = v12;
            __int16 v33 = 2112;
            id v34 = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@: config request: popping handler [%@] %@", buf, 0x20u);
          }
          if (objc_getProperty(v10, v16, 8, 1))
          {
            __int16 v17 = ne_log_obj();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              id v19 = objc_getProperty(v10, v18, 8, 1);
              id v20 = objc_retainBlock(v19);
              *(_DWORD *)buf = v28;
              CFStringRef v30 = a1;
              __int16 v31 = 2112;
              id v32 = v20;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: config request: calling completionHandler %@", buf, 0x16u);
            }
            uint64_t v22 = (void (**)(id, void *))objc_getProperty(v10, v21, 8, 1);
            v22[2](v22, v5);
          }
          id v23 = [a1 setConfigurationCompletionHandlerArray];
          [v23 removeObject:v10];

          BOOL v24 = [a1 setConfigurationCompletionHandlerArray];
          id v25 = [v24 count];

          if (!v25) {
            goto LABEL_17;
          }
        }
        uint64_t v26 = [a1 setConfigurationCompletionHandlerArray];
        [v26 removeAllObjects];
      }
LABEL_17:
    }
  }
}

id sub_10002C604(id self, const char *a2)
{
  id v2 = self;
  if (!self) {
    return v2;
  }
  id v3 = objc_getProperty(self, a2, 688, 1);
  char v4 = [v3 controlUnit];
  if (![v4 unsignedIntValue])
  {

    return 0;
  }
  id v5 = [v2 configuration];
  uint64_t v6 = [v5 externalIdentifier];
  if (v6)
  {
    id v7 = (void *)v6;
    unsigned __int8 v8 = [v2 waitForPerApp];

    if ((v8 & 1) == 0) {
      goto LABEL_9;
    }
    return 0;
  }

LABEL_9:
  unsigned int v9 = ne_log_obj();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v32 = [v2 configuration];
    __int16 v33 = [v32 externalIdentifier];
    id v34 = [v2 configuration];
    unsigned int v35 = [v34 dnsProxy];
    CFIndex v36 = [v35 perApp];
    id v37 = [v36 copyCachedMachOUUIDs];
    *(_DWORD *)buf = 136315650;
    unsigned __int8 v45 = "-[NESMDNSProxySession resetPolicies]";
    __int16 v46 = 2112;
    uint64_t v47 = v33;
    __int16 v48 = 2112;
    id v49 = v37;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> UUIDs %@", buf, 0x20u);
  }
  char v10 = [v2 policySession];
  char v11 = [v2 primaryTunnelPlugin];
  SEL v13 = sub_1000177C0(v11, v12);
  uint64_t v14 = [v13 firstObject];
  SEL v16 = objc_getProperty(v2, v15, 688, 1);
  __int16 v17 = [v16 controlUnit];
  int v41 = [v17 unsignedIntValue];
  id Property = [v2 server];
  id v20 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v19, 80, 1);
  }
  id v43 = Property;
  id v42 = objc_getProperty(v2, v21, 728, 1);
  uint64_t v22 = [v2 configuration];
  id v23 = [v22 externalIdentifier];
  if (v23)
  {
    [v2 configuration];
    uint64_t v40 = v13;
    v25 = uint64_t v24 = (uint64_t)v10;
    [v25 dnsProxy];
    uint64_t v26 = v39 = v11;
    [v26 perApp];
    uint64_t v38 = v20;
    CFIndex v27 = v17;
    long long v28 = v16;
    v30 = uint64_t v29 = v14;
    id v2 = (id)sub_1000475E4(v24, v29, v41, v43, v42, v30);

    uint64_t v14 = v29;
    SEL v16 = v28;
    __int16 v17 = v27;
    id v20 = v38;

    char v11 = v39;
    char v10 = (void *)v24;
    SEL v13 = v40;
  }
  else
  {
    id v2 = (id)sub_1000475E4((uint64_t)v10, v14, v41, v43, v42, 0);
  }

  return v2;
}

void sub_10002CA40(void *a1)
{
  if (a1)
  {
    id v2 = [a1 primaryTunnelPlugin];

    if (v2)
    {
      uint64_t v3 = dns_configuration_copy();
      if (v3)
      {
        uint64_t v4 = v3;
        id v19 = a1;
        id v20 = objc_alloc_init((Class)NSMutableArray);
        if (*(int *)(v4 + 12) >= 1)
        {
          uint64_t v5 = 0;
          do
          {
            uint64_t v6 = *(void *)(*(void *)(v4 + 16) + 8 * v5);
            id v7 = objc_alloc_init((Class)NSMutableArray);
            if (*(int *)(v6 + 8) >= 1)
            {
              uint64_t v8 = 0;
              do
              {
                unsigned int v9 = (void *)NECreateAddressString();
                if (v9) {
                  [v7 addObject:v9];
                }

                ++v8;
              }
              while (v8 < *(int *)(v6 + 8));
            }
            id v10 = objc_alloc_init((Class)NSMutableArray);
            int v11 = *(_DWORD *)(v6 + 24);
            if (v11 >= 1)
            {
              for (uint64_t i = 0; i < v11; ++i)
              {
                if (*(void *)(*(void *)(v6 + 28) + 8 * i))
                {
                  id v13 = [objc_alloc((Class)NSString) initWithUTF8String:*(void *)(*(void *)(v6 + 28) + 8 * i)];
                  if (v13) {
                    [v10 addObject:v13];
                  }

                  int v11 = *(_DWORD *)(v6 + 24);
                }
              }
            }
            id v14 = [objc_alloc((Class)NEDNSSettings) initWithServers:v7];
            if (v14)
            {
              if (*(void *)v6)
              {
                id v15 = [objc_alloc((Class)NSString) initWithUTF8String:*(void *)v6];
                [v14 setDomainName:v15];
              }
              [v14 setSearchDomains:v10, v19];
              [v20 addObject:v14];
            }

            ++v5;
          }
          while (v5 < *(int *)(v4 + 12));
        }
        dns_configuration_free();
        if (v20)
        {
          SEL v16 = [v19 primaryTunnelPlugin];
          if (v16)
          {
            id v17 = v20;
            __int16 v18 = [v16 remotePluginObject];
            [v18 setSystemDNSSettings:v17];
          }
        }
      }
    }
  }
}

uint64_t sub_10002D128(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (a1)
  {
    uint64_t v6 = *(NSObject **)(a1 + 720);
    unsigned int v9 = v5;
    if (v6) {
      BOOL v7 = v6 == v5;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      dispatch_source_cancel(v6);
    }
    objc_storeStrong((id *)(a1 + 720), a2);
    uint64_t v5 = v9;
  }

  return _objc_release_x1(v4, v5);
}

void sub_10002D8AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained && [WeakRetained status] == 1)
  {
    uint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@: restarting", (uint8_t *)&v4, 0xCu);
    }

    [v2 restartSession];
  }
}

void sub_10002D978(id a1)
{
  mach_timebase_info info = 0;
  if (!mach_timebase_info(&info))
  {
    if (info.numer) {
      BOOL v1 = info.denom == 0;
    }
    else {
      BOOL v1 = 1;
    }
    if (!v1) {
      qword_1000D7790 = 1000000000 * (unint64_t)info.denom / info.numer;
    }
  }
}

void sub_10002DB60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (*(unsigned char *)(v1 + 696) & 1) != 0)
  {
    uint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(void **)(a1 + 32);
      uint64_t v5 = [v4 configuration];
      uint64_t v6 = [v5 name];
      int v13 = 138412546;
      id v14 = v4;
      __int16 v15 = 2112;
      SEL v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps or configuration changed for %@", (uint8_t *)&v13, 0x16u);
    }
    if ((sub_10002C604(*(id *)(a1 + 32), v7) & 1) == 0)
    {
      uint64_t v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v10 = *(void **)(a1 + 32);
        int v11 = [v10 configuration];
        id v12 = [v11 name];
        int v13 = 138412546;
        id v14 = v10;
        __int16 v15 = 2112;
        SEL v16 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@: failed to update the DNSProxy policies after installed applications or configuration changed for %@", (uint8_t *)&v13, 0x16u);
      }
      unsigned int v9 = [*(id *)(a1 + 32) stateHandler];
      [v9 handleStop];
    }
  }
}

void sub_10002E180(uint64_t a1)
{
}

uint64_t sub_10002E7D4(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100030D28;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002E854(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100030974;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002E8D4(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100030790;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_10002E954(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_1000305AC;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002E9D4(id result, const char *a2)
{
  if (result)
  {
    id v2 = result;
    id result = [objc_getProperty(result, a2, 104, 1) count];
    if (result)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_100030498;
      v3[3] = &unk_1000C5AD0;
      v3[4] = v2;
      return (id)sub_10002EC18((uint64_t)NESMPolicyMasterSession, v3);
    }
  }
  return result;
}

uint64_t sub_10002EA70(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100030158;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_10002EAF0(id result, const char *a2)
{
  if (result)
  {
    id v2 = result;
    id result = [objc_getProperty(result, a2, 136, 1) count];
    if (result)
    {
      uint64_t v3 = ne_log_large_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id Property = objc_getProperty(v2, v4, 136, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DNS policy IDs to be removed: %@", buf, 0xCu);
      }

      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      _DWORD v5[2] = sub_1000300E8;
      v5[3] = &unk_1000C5AD0;
      void v5[4] = v2;
      return (id)sub_10002EC18((uint64_t)NESMPolicyMasterSession, v5);
    }
  }
  return result;
}

uint64_t sub_10002EC18(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (qword_1000D7C10 != -1) {
    dispatch_once(&qword_1000D7C10, &stru_1000C5AA8);
  }
  if (qword_1000D7C08)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1000D7C00);
    uint64_t v3 = v2[2](v2, qword_1000D7C08);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000D7C00);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_10002ECC4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v6 = [objc_getProperty(a1, v4, 168, 1) objectForKeyedSubscript:v3];

      if (v6)
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        v7[2] = sub_10002F66C;
        v7[3] = &unk_1000C5AF8;
        id v8 = v5;
        unsigned int v9 = a1;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v7);
      }
    }
  }
}

void sub_10002ED98(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v6 = [objc_getProperty(a1, v4, 176, 1) objectForKeyedSubscript:v3];

      if (v6)
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        v7[2] = sub_10002F51C;
        v7[3] = &unk_1000C5AF8;
        id v8 = v5;
        unsigned int v9 = a1;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v7);
      }
    }
  }
}

void sub_10002EE6C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v6 = [objc_getProperty(a1, v4, 160, 1) objectForKeyedSubscript:v3];

      if (v6)
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        v7[2] = sub_10002F3CC;
        v7[3] = &unk_1000C5AF8;
        id v8 = v5;
        unsigned int v9 = a1;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v7);
      }
    }
  }
}

void sub_10002EF40(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10002EFEC;
    v5[3] = &unk_1000C5AF8;
    void v5[4] = a1;
    id v6 = v3;
    sub_10002EC18((uint64_t)NESMPolicyMasterSession, v5);
  }
}

void *sub_10002EFEC(uint64_t a1, void *a2)
{
  return sub_10002EFFC(*(void **)(a1 + 32), *(void **)(a1 + 40), a2);
}

void *sub_10002EFFC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  id v8 = 0;
  if (a1)
  {
    if (v5)
    {
      id v8 = [objc_getProperty(a1, v6, 216, 1) objectForKeyedSubscript:v5];

      if (v8)
      {
        unsigned int v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          id v14 = [objc_getProperty(a1, v10, 216, 1) objectForKeyedSubscript:v5];
          int v15 = 138412546;
          id v16 = v5;
          __int16 v17 = 2112;
          __int16 v18 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)&v15, 0x16u);
        }
        id v12 = [objc_getProperty(a1, v11, 216, 1) objectForKeyedSubscript:v5];
        if (sub_10002F180(v7, v12)) {
          id v8 = (void *)sub_10002F2DC(v7);
        }
        else {
          id v8 = 0;
        }
      }
    }
  }

  return v8;
}

BOOL sub_10002F180(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v14;
      do
      {
        unsigned int v9 = 0;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v4);
          }
          id v10 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v9);
          id v11 = objc_getProperty(a1, v6, 16, 1);
          [v11 removePolicyWithID:[v10 unsignedIntegerValue]];

          unsigned int v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }

    [v4 removeAllObjects];
  }

  return a1 != 0;
}

uint64_t sub_10002F2DC(void *a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
  if ((objc_msgSend(objc_getProperty(a1, v2, 16, 1), "apply") & 1) == 0)
  {
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      id v6 = "Failed to apply policies";
      id v7 = buf;
      goto LABEL_11;
    }
LABEL_7:

    return 0;
  }
  uint64_t v4 = 1;
  if ((objc_msgSend(objc_getProperty(a1, v3, 24, 1), "apply") & 1) == 0)
  {
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = 0;
      id v6 = "Failed to apply policies with Low priority";
      id v7 = (uint8_t *)&v9;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
      goto LABEL_7;
    }
    goto LABEL_7;
  }
  return v4;
}

uint64_t sub_10002F3CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 160, 1);
    }
    long long v13 = [Property objectForKeyedSubscript:*(void *)(a1 + 32)];
    int v14 = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    __int16 v17 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed for %@: %@", (uint8_t *)&v14, 0x16u);
  }
  id v7 = *(id *)(a1 + 40);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 160, 1);
  }
  uint64_t v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (sub_10002F180(v3, v8)) {
    uint64_t v9 = sub_10002F2DC(v3);
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_10002F51C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 176, 1);
    }
    long long v13 = [Property objectForKeyedSubscript:*(void *)(a1 + 32)];
    int v14 = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    __int16 v17 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)&v14, 0x16u);
  }
  id v7 = *(id *)(a1 + 40);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 176, 1);
  }
  uint64_t v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (sub_10002F180(v3, v8)) {
    uint64_t v9 = sub_10002F2DC(v3);
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_10002F66C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 168, 1);
    }
    long long v13 = [Property objectForKeyedSubscript:*(void *)(a1 + 32)];
    int v14 = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    __int16 v17 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed for %@: %@", (uint8_t *)&v14, 0x16u);
  }
  id v7 = *(id *)(a1 + 40);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 168, 1);
  }
  uint64_t v8 = [v7 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (sub_10002F180(v3, v8)) {
    uint64_t v9 = sub_10002F2DC(v3);
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_10002F7BC(id a1)
{
  uint64_t v1 = [NESMPolicyMasterSession alloc];
  if (v1)
  {
    v42.receiver = v1;
    v42.super_class = (Class)NESMPolicyMasterSession;
    SEL v2 = [super init];
    if (!v2)
    {
LABEL_6:
      uint64_t v39 = v2;
      SEL v2 = v39;
      goto LABEL_8;
    }
    id v3 = objc_alloc_init((Class)NSMutableArray);
    id v4 = v2[4];
    v2[4] = v3;

    id v5 = objc_alloc_init((Class)NSMutableArray);
    id v6 = v2[5];
    v2[5] = v5;

    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    id v8 = v2[6];
    v2[6] = v7;

    id v9 = [objc_alloc((Class)NEPolicySession) initWithSessionName:@"MasterSession"];
    id v10 = v2[2];
    v2[2] = v9;

    id v11 = v2[2];
    if (v11)
    {
      [v11 lockSessionToCurrentProcess];
      [v2[2] setPriority:200];
      id v12 = [objc_alloc((Class)NEPolicySession) initWithSessionName:@"LowPrioritySession"];
      id v13 = v2[3];
      v2[3] = v12;

      id v14 = v2[3];
      if (v14)
      {
        [v14 lockSessionToCurrentProcess];
        [v2[3] setPriority:500];
        os_unfair_lock_lock((os_unfair_lock_t)&unk_1000D7C00);
        int v41 = +[NEPolicyResult skipWithOrder:40];
        id v15 = objc_alloc((Class)NEPolicy);
        __int16 v16 = +[NEPolicyCondition allInterfaces];
        unsigned __int8 v45 = v16;
        __int16 v17 = +[NSArray arrayWithObjects:&v45 count:1];
        id v18 = [v15 initWithOrder:15 result:v41 conditions:v17];
        id Property = objc_getProperty(v2, v19, 40, 1);
        sub_10002FBAC((BOOL)v2, v18, Property);

        id v21 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&ne_privacy_proxy_netagent_id];
        id v22 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&ne_privacy_dns_netagent_id];
        id v23 = +[NEPolicyResult removeNetworkAgentUUID:v21];
        uint64_t v24 = +[NEPolicyResult removeNetworkAgentUUID:v22];
        id v25 = objc_alloc((Class)NEPolicy);
        uint64_t v26 = +[NEPolicyCondition allInterfaces];
        uint64_t v44 = v26;
        CFIndex v27 = +[NSArray arrayWithObjects:&v44 count:1];
        id v28 = [v25 initWithOrder:25 result:v23 conditions:v27];
        id v30 = objc_getProperty(v2, v29, 40, 1);
        sub_10002FBAC((BOOL)v2, v28, v30);

        id v31 = objc_alloc((Class)NEPolicy);
        id v32 = +[NEPolicyCondition allInterfaces];
        id v43 = v32;
        __int16 v33 = +[NSArray arrayWithObjects:&v43 count:1];
        id v34 = [v31 initWithOrder:35 result:v24 conditions:v33];
        id v36 = objc_getProperty(v2, v35, 40, 1);
        sub_10002FBAC((BOOL)v2, v34, v36);

        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000D7C00);
        uint64_t v37 = +[NSPointerArray weakObjectsPointerArray];
        id v38 = v2[7];
        v2[7] = (id)v37;

        goto LABEL_6;
      }
    }
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 0;
    SEL v2 = 0;
  }
LABEL_8:

  uint64_t v40 = (void *)qword_1000D7C08;
  qword_1000D7C08 = (uint64_t)v39;
}

BOOL sub_10002FBAC(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    id v8 = [objc_getProperty((id)a1, v7, 24, 1) addPolicy:v5 storeLocally:0];
    a1 = v8 != 0;
    int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v10 = is_debug_logging_enabled;
    if (v8)
    {
      if (is_debug_logging_enabled)
      {
        id v11 = ne_log_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 134218242;
          id v17 = v8;
          __int16 v18 = 2112;
          id v19 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Added policy ID %lu to Low priority: %@", (uint8_t *)&v16, 0x16u);
        }
      }
      id v12 = +[NSNumber numberWithUnsignedInteger:v8];
      [v6 addObject:v12];
    }
    else
    {
      id v12 = ne_log_obj();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v13)
        {
          int v16 = 138412290;
          id v17 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to add policy to Low priority: %@", (uint8_t *)&v16, 0xCu);
        }
      }
      else if (v13)
      {
        id v15 = [v5 descriptionWithIndent:0 options:2];
        int v16 = 138412290;
        id v17 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to add policy to Low priority: %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  return a1;
}

BOOL sub_10002FDB0(id a1, NESMPolicyMasterSession *a2)
{
  id Property = a2;
  id v4 = Property;
  if (Property) {
    id Property = (NESMPolicyMasterSession *)objc_getProperty(Property, v3, 48, 1);
  }
  if ([(NESMPolicyMasterSession *)Property count] && v4)
  {
    if (nelog_is_debug_logging_enabled())
    {
      id v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v26 = 138412802;
        CFIndex v27 = v4;
        __int16 v28 = 2080;
        SEL v29 = "-[NESMPolicyMasterSession removeAllDomainTries]";
        __int16 v30 = 2112;
        id v31 = objc_getProperty(v4, v6, 48, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@: %s - deleting all IDs %@", v26, 0x20u);
      }
    }
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v8 = [objc_getProperty(v4, v7, 48, 1) allValues];
    id v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v9)
    {
      id v11 = v9;
      uint64_t v12 = *(void *)v23;
      *(void *)&long long v10 = 138413058;
      long long v21 = v10;
      do
      {
        BOOL v13 = 0;
        do
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v8);
          }
          id v14 = [[*(id *)(*((void *)&v22 + 1) + 8 * (void)v13) integerValue:v21];
          os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
          if (objc_msgSend(objc_getProperty(v4, v15, 16, 1), "removeDomainTrieWithID:", v14))
          {
            if (!nelog_is_debug_logging_enabled()) {
              goto LABEL_21;
            }
            int v16 = ne_log_obj();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              id v18 = objc_getProperty(v4, v17, 48, 1);
              *(_DWORD *)buf = v21;
              __int16 v33 = v4;
              __int16 v34 = 2080;
              SEL v35 = "-[NESMPolicyMasterSession removeDomainTrieWithID:ids:]";
              __int16 v36 = 2048;
              id v37 = v14;
              __int16 v38 = 2112;
              id v39 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@: %s - Deleted domain trie - ID %lu %@", buf, 0x2Au);
            }
          }
          else
          {
            int v16 = ne_log_obj();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412802;
              __int16 v33 = v4;
              __int16 v34 = 2080;
              SEL v35 = "-[NESMPolicyMasterSession removeDomainTrieWithID:ids:]";
              __int16 v36 = 2048;
              id v37 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@: %s - Failed to delete domain trie - ID %lu", buf, 0x20u);
            }
          }

LABEL_21:
          BOOL v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v11);
    }

    [objc_getProperty(v4, v19, 48, 1) removeAllObjects];
  }

  return 1;
}

uint64_t sub_1000300E8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 136, 1);
  }
  else {
    id Property = 0;
  }
  if (sub_10002F180(v4, Property)) {
    uint64_t v7 = sub_10002F2DC(v4);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t sub_100030158(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 112, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    id v8 = ne_log_large_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v9, 112, 1);
      }
      int v23 = 138412290;
      id v24 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Skip policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    id v11 = *(void **)(a1 + 32);
    if (v11) {
      id v12 = objc_getProperty(v11, v10, 112, 1);
    }
    else {
      id v12 = 0;
    }
    sub_10002F180(v4, v12);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v6, 120, 1);
  }
  if ([v13 count])
  {
    id v14 = ne_log_large_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      id v22 = *(id *)(a1 + 32);
      if (v22) {
        id v22 = objc_getProperty(v22, v15, 120, 1);
      }
      int v23 = 138412290;
      id v24 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Low skip policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    id v17 = *(void **)(a1 + 32);
    if (v17) {
      id v18 = objc_getProperty(v17, v16, 120, 1);
    }
    else {
      id v18 = 0;
    }
    sub_10003033C(v4, v18);
  }
  else if (!v7)
  {
    uint64_t v19 = 1;
    goto LABEL_17;
  }
  uint64_t v19 = sub_10002F2DC(v4);
LABEL_17:

  return v19;
}

BOOL sub_10003033C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v14;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v4);
          }
          long long v10 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v9);
          id v11 = objc_getProperty(a1, v6, 24, 1);
          [v11 removePolicyWithID:[v10 unsignedIntegerValue]];

          id v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }

    [v4 removeAllObjects];
  }

  return a1 != 0;
}

uint64_t sub_100030498(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 104, 1);
    }
    int v12 = 138412290;
    id v13 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed: %@", (uint8_t *)&v12, 0xCu);
  }

  id v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 104, 1);
  }
  else {
    id v8 = 0;
  }
  if (sub_10002F180(v3, v8)) {
    uint64_t v9 = sub_10002F2DC(v3);
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_1000305AC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 88, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    id v8 = ne_log_large_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v9, 88, 1);
      }
      int v23 = 138412290;
      id v24 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "On Demand Policy IDs to be removed for %@", (uint8_t *)&v23, 0xCu);
    }

    id v11 = *(void **)(a1 + 32);
    if (v11) {
      id v12 = objc_getProperty(v11, v10, 88, 1);
    }
    else {
      id v12 = 0;
    }
    sub_10002F180(v4, v12);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v6, 96, 1);
  }
  if ([v13 count])
  {
    long long v14 = ne_log_large_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      id v22 = *(id *)(a1 + 32);
      if (v22) {
        id v22 = objc_getProperty(v22, v15, 96, 1);
      }
      int v23 = 138412290;
      id v24 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Low On Demand Policy IDs to be removed for %@", (uint8_t *)&v23, 0xCu);
    }

    id v17 = *(void **)(a1 + 32);
    if (v17) {
      id v18 = objc_getProperty(v17, v16, 96, 1);
    }
    else {
      id v18 = 0;
    }
    sub_10003033C(v4, v18);
  }
  else if (!v7)
  {
    uint64_t v19 = 1;
    goto LABEL_17;
  }
  uint64_t v19 = sub_10002F2DC(v4);
LABEL_17:

  return v19;
}

uint64_t sub_100030790(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 64, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    id v8 = ne_log_large_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v9, 64, 1);
      }
      int v23 = 138412290;
      id v24 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Control Policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    id v11 = *(void **)(a1 + 32);
    if (v11) {
      id v12 = objc_getProperty(v11, v10, 64, 1);
    }
    else {
      id v12 = 0;
    }
    sub_10002F180(v4, v12);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v6, 72, 1);
  }
  if ([v13 count])
  {
    long long v14 = ne_log_large_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      id v22 = *(id *)(a1 + 32);
      if (v22) {
        id v22 = objc_getProperty(v22, v15, 72, 1);
      }
      int v23 = 138412290;
      id v24 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Low control Policy IDs to be removed: %@", (uint8_t *)&v23, 0xCu);
    }

    id v17 = *(void **)(a1 + 32);
    if (v17) {
      id v18 = objc_getProperty(v17, v16, 72, 1);
    }
    else {
      id v18 = 0;
    }
    sub_10003033C(v4, v18);
  }
  else if (!v7)
  {
    uint64_t v19 = 1;
    goto LABEL_17;
  }
  uint64_t v19 = sub_10002F2DC(v4);
LABEL_17:

  return v19;
}

uint64_t sub_100030974(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 48, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    id v8 = ne_log_large_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v19 = *(id *)(a1 + 32);
      if (v19) {
        id v19 = objc_getProperty(v19, v9, 48, 1);
      }
      int v21 = 138412290;
      id v22 = v19;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", (uint8_t *)&v21, 0xCu);
    }

    id v10 = *(id *)(a1 + 32);
    if (v4)
    {
      sub_100030B68((uint64_t)v4, v10, 0);
      id v10 = *(id *)(a1 + 32);
    }
    if (v10) {
      id v10 = objc_getProperty(v10, (SEL)v10, 48, 1);
    }
    sub_10002F180(v4, v10);
  }
  id v11 = *(id *)(a1 + 32);
  if (v11) {
    id v11 = objc_getProperty(v11, v6, 56, 1);
  }
  if ([v11 count])
  {
    id v12 = ne_log_large_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      id v20 = *(id *)(a1 + 32);
      if (v20) {
        id v20 = objc_getProperty(v20, v13, 56, 1);
      }
      int v21 = 138412290;
      id v22 = v20;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Low Policy IDs to be removed: %@", (uint8_t *)&v21, 0xCu);
    }

    long long v15 = *(void **)(a1 + 32);
    if (v15) {
      id v16 = objc_getProperty(v15, v14, 56, 1);
    }
    else {
      id v16 = 0;
    }
    sub_10003033C(v4, v16);
  }
  else if (!v7)
  {
    uint64_t v17 = 1;
    goto LABEL_19;
  }
  uint64_t v17 = sub_10002F2DC(v4);
LABEL_19:

  return v17;
}

void sub_100030B68(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
  [*(id *)(a1 + 56) compact];
  if (![*(id *)(a1 + 56) count])
  {
LABEL_5:
    if ((a3 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = [*(id *)(a1 + 56) pointerAtIndex:v6];

    if (v7 == v5) {
      break;
    }
    if (++v6 >= (unint64_t)[*(id *)(a1 + 56) count]) {
      goto LABEL_5;
    }
  }
  if ((v6 != 0x7FFFFFFFFFFFFFFFLL) != a3)
  {
    if (!a3)
    {
      [*(id *)(a1 + 56) removePointerAtIndex:v6];
      if ([*(id *)(a1 + 56) count]) {
        goto LABEL_15;
      }
      int v8 = 1;
LABEL_8:
      int v13 = v8;
      if (sysctlbyname("net.necp.pass_loopback", 0, 0, &v13, 4uLL))
      {
        uint64_t v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          int v10 = v13;
          id v11 = __error();
          id v12 = strerror(*v11);
          *(_DWORD *)buf = 67109378;
          int v15 = v10;
          __int16 v16 = 2080;
          uint64_t v17 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to set the loopback pass mode to %u: %s", buf, 0x12u);
        }
      }
      goto LABEL_15;
    }
LABEL_6:
    [*(id *)(a1 + 56) addPointer:v5];
    if ([*(id *)(a1 + 56) count] != (id)1) {
      goto LABEL_15;
    }
    int v8 = 2;
    goto LABEL_8;
  }
LABEL_15:
}

uint64_t sub_100030D28(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 184, 1);
  }
  id v6 = [Property count];
  BOOL v8 = v6 != 0;
  if (v6)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v7, 184, 1);
    }
    int v10 = [v9 allKeys];
    id v11 = [v10 countByEnumeratingWithState:&v65 objects:v71 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v14 = *(void *)v66;
      do
      {
        for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v66 != v14) {
            objc_enumerationMutation(v10);
          }
          uint64_t v16 = *(void *)(*((void *)&v65 + 1) + 8 * i);
          id v17 = *(id *)(a1 + 32);
          if (v17) {
            id v17 = objc_getProperty(v17, v12, 184, 1);
          }
          id v18 = [v17 objectForKeyedSubscript:v16];
          sub_10002F180(v4, v18);
        }
        id v13 = [v10 countByEnumeratingWithState:&v65 objects:v71 count:16];
      }
      while (v13);
    }

    id v20 = *(id *)(a1 + 32);
    if (v20) {
      id v20 = objc_getProperty(v20, v19, 184, 1);
    }
    [v20 removeAllObjects];
  }
  id v21 = *(id *)(a1 + 32);
  if (v21) {
    id v21 = objc_getProperty(v21, v7, 192, 1);
  }
  if ([v21 count])
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v23 = *(id *)(a1 + 32);
    if (v23) {
      id v23 = objc_getProperty(v23, v22, 192, 1);
    }
    id v24 = [v23 allKeys];
    id v25 = [v24 countByEnumeratingWithState:&v61 objects:v70 count:16];
    if (v25)
    {
      id v27 = v25;
      uint64_t v28 = *(void *)v62;
      do
      {
        for (j = 0; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v62 != v28) {
            objc_enumerationMutation(v24);
          }
          uint64_t v30 = *(void *)(*((void *)&v61 + 1) + 8 * (void)j);
          id v31 = *(id *)(a1 + 32);
          if (v31) {
            id v31 = objc_getProperty(v31, v26, 192, 1);
          }
          id v32 = [v31 objectForKeyedSubscript:v30];
          sub_10002F180(v4, v32);
        }
        id v27 = [v24 countByEnumeratingWithState:&v61 objects:v70 count:16];
      }
      while (v27);
    }

    id v34 = *(id *)(a1 + 32);
    if (v34) {
      id v34 = objc_getProperty(v34, v33, 192, 1);
    }
    [v34 removeAllObjects];
    BOOL v8 = 1;
  }
  id v35 = *(id *)(a1 + 32);
  if (v35) {
    id v35 = objc_getProperty(v35, v22, 200, 1);
  }
  if ([v35 count])
  {
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v37 = *(id *)(a1 + 32);
    if (v37) {
      id v37 = objc_getProperty(v37, v36, 200, 1);
    }
    __int16 v38 = [v37 allKeys:v57];
    id v39 = [v38 countByEnumeratingWithState:&v57 objects:v69 count:16];
    if (v39)
    {
      id v41 = v39;
      uint64_t v42 = *(void *)v58;
      do
      {
        for (k = 0; k != v41; k = (char *)k + 1)
        {
          if (*(void *)v58 != v42) {
            objc_enumerationMutation(v38);
          }
          uint64_t v44 = *(void *)(*((void *)&v57 + 1) + 8 * (void)k);
          id v45 = *(id *)(a1 + 32);
          if (v45) {
            id v45 = objc_getProperty(v45, v40, 200, 1);
          }
          __int16 v46 = [v45 objectForKeyedSubscript:v44];
          sub_10002F180(v4, v46);
        }
        id v41 = [v38 countByEnumeratingWithState:&v57 objects:v69 count:16];
      }
      while (v41);
    }

    id v48 = *(id *)(a1 + 32);
    if (v48) {
      id v48 = objc_getProperty(v48, v47, 200, 1);
    }
    [v48 removeAllObjects];
    BOOL v8 = 1;
  }
  id v49 = *(id *)(a1 + 32);
  if (v49) {
    id v49 = objc_getProperty(v49, v36, 208, 1);
  }
  [v49 removeAllObjects];
  id v51 = *(id *)(a1 + 32);
  if (v51) {
    id v51 = objc_getProperty(v51, v50, 48, 1);
  }
  if ([v51 count])
  {
    int v53 = *(void **)(a1 + 32);
    if (v53) {
      id v54 = objc_getProperty(v53, v52, 48, 1);
    }
    else {
      id v54 = 0;
    }
    sub_10002F180(v4, v54);
  }
  else if (!v8)
  {
    uint64_t v55 = 1;
    goto LABEL_62;
  }
  uint64_t v55 = sub_10002F2DC(v4);
LABEL_62:

  return v55;
}

void sub_10003116C(BOOL a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v8 = +[NEPolicyResult skipWithOrder:20];
    id v7 = [objc_alloc((Class)NEPolicy) initWithOrder:10 result:v8 conditions:v6];

    sub_10002FBAC(a1, v7, v5);
  }
}

void sub_100031224(BOOL a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v8 = +[NEPolicyResult skipWithOrder:30];
    id v7 = [objc_alloc((Class)NEPolicy) initWithOrder:10 result:v8 conditions:v6];

    sub_10002FBAC(a1, v7, v5);
  }
}

BOOL sub_1000312DC(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    id v8 = [objc_getProperty((id)a1, v7, 16, 1) addPolicy:v5 storeLocally:0];
    a1 = v8 != 0;
    int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v10 = is_debug_logging_enabled;
    if (v8)
    {
      if (is_debug_logging_enabled)
      {
        id v11 = ne_log_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 134218242;
          id v17 = v8;
          __int16 v18 = 2112;
          id v19 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Added policy ID %lu: %@", (uint8_t *)&v16, 0x16u);
        }
      }
      id v12 = +[NSNumber numberWithUnsignedInteger:v8];
      [v6 addObject:v12];
    }
    else
    {
      id v12 = ne_log_obj();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v13)
        {
          int v16 = 138412290;
          id v17 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", (uint8_t *)&v16, 0xCu);
        }
      }
      else if (v13)
      {
        int v15 = [v5 descriptionWithIndent:0 options:2];
        int v16 = 138412290;
        id v17 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  return a1;
}

uint64_t sub_1000314E0(void *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
  id v5 = [objc_getProperty(a1, v4, 48, 1) objectForKeyedSubscript:v3];

  if (v5 && [v5 unsignedIntValue]) {
    uint64_t v6 = [v5 unsignedIntValue];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

id *sub_100031564(id *a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v12 = a2;
  if (a1)
  {
    v57.receiver = a1;
    v57.super_class = (Class)NESMPolicySession;
    BOOL v13 = [(id *)[super init];
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 2, a2);
      *((_DWORD *)a1 + 2) = a3;
      a1[3] = a4;
      a1[4] = a5;
      a1[5] = a6;
      id v14 = objc_alloc_init((Class)NSMutableArray);
      id v15 = a1[6];
      a1[6] = v14;

      id v16 = objc_alloc_init((Class)NSMutableArray);
      id v17 = a1[7];
      a1[7] = v16;

      id v18 = objc_alloc_init((Class)NSMutableArray);
      id v19 = a1[8];
      a1[8] = v18;

      id v20 = objc_alloc_init((Class)NSMutableArray);
      id v21 = a1[9];
      a1[9] = v20;

      id v22 = objc_alloc_init((Class)NSMutableArray);
      id v23 = a1[10];
      a1[10] = v22;

      id v24 = objc_alloc_init((Class)NSMutableArray);
      id v25 = a1[11];
      a1[11] = v24;

      id v26 = objc_alloc_init((Class)NSMutableArray);
      id v27 = a1[12];
      a1[12] = v26;

      id v28 = objc_alloc_init((Class)NSMutableArray);
      id v29 = a1[13];
      a1[13] = v28;

      id v30 = objc_alloc_init((Class)NSMutableArray);
      id v31 = a1[14];
      a1[14] = v30;

      id v32 = objc_alloc_init((Class)NSMutableArray);
      id v33 = a1[15];
      a1[15] = v32;

      id v34 = objc_alloc_init((Class)NSMutableArray);
      id v35 = a1[17];
      a1[17] = v34;

      id v36 = objc_alloc_init((Class)NSMutableArray);
      id v37 = a1[18];
      a1[18] = v36;

      id v38 = objc_alloc_init((Class)NSMutableArray);
      id v39 = a1[19];
      a1[19] = v38;

      id v40 = objc_alloc_init((Class)NSMutableDictionary);
      id v41 = a1[20];
      a1[20] = v40;

      id v42 = objc_alloc_init((Class)NSMutableDictionary);
      id v43 = a1[21];
      a1[21] = v42;

      id v44 = objc_alloc_init((Class)NSMutableDictionary);
      id v45 = a1[22];
      a1[22] = v44;

      id v46 = objc_alloc_init((Class)NSMutableDictionary);
      id v47 = a1[23];
      a1[23] = v46;

      id v48 = objc_alloc_init((Class)NSMutableDictionary);
      id v49 = a1[24];
      a1[24] = v48;

      id v50 = objc_alloc_init((Class)NSMutableDictionary);
      id v51 = a1[25];
      a1[25] = v50;

      id v52 = objc_alloc_init((Class)NSMutableDictionary);
      id v53 = a1[26];
      a1[26] = v52;

      id v54 = objc_alloc_init((Class)NSMutableDictionary);
      id v55 = a1[27];
      a1[27] = v54;
    }
  }

  return a1;
}

uint64_t sub_1000317B4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int v2 = *(_DWORD *)(result + 8) - 1;
    id result = 0;
    switch(v2)
    {
      case 0:
        uint64_t v3 = v1[3];
        if (v1[4] == 2)
        {
          BOOL v4 = v3 == 1;
          unsigned int v5 = 15500;
          unsigned int v6 = 10000;
          goto LABEL_12;
        }
        BOOL v7 = v1[5] == 1;
        if (v1[5] == 1) {
          unsigned int v8 = 16300;
        }
        else {
          unsigned int v8 = 17000;
        }
        if (v7) {
          unsigned int v9 = 10800;
        }
        else {
          unsigned int v9 = 14000;
        }
        if (v3 == 1) {
          id result = v9;
        }
        else {
          id result = v8;
        }
        break;
      case 1:
        id result = 500;
        break;
      case 2:
        id result = 250;
        break;
      case 3:
        BOOL v4 = v1[3] == 3;
        unsigned int v5 = 1500;
        unsigned int v6 = 2000;
        goto LABEL_12;
      case 4:
        return result;
      case 5:
        id result = 19000;
        break;
      case 6:
        BOOL v4 = v1[3] == 1;
        unsigned int v5 = 19700;
        unsigned int v6 = 19500;
LABEL_12:
        if (v4) {
          id result = v6;
        }
        else {
          id result = v5;
        }
        break;
      case 8:
        id result = 5000;
        break;
      default:
        id result = 20000;
        break;
    }
  }
  return result;
}

uint64_t sub_1000318B0(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100031930;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_100031930(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  if (v4)
  {
    id v6 = Property;
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    id v8 = [objc_getProperty(v4, v7, 16, 1) registerServiceUUID:v6];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

uint64_t sub_1000319BC(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100031A3C;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

id sub_100031A3C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  if (v4)
  {
    id v6 = Property;
    os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
    id v8 = [objc_getProperty(v4, v7, 16, 1) unregisterServiceUUID:v6];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

uint64_t sub_100031AC8(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100031B48;
    v1[3] = &unk_1000C5AD0;
    v1[4] = result;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v1);
  }
  return result;
}

uint64_t sub_100031B48(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  if ([Property count])
  {
    id v6 = ne_log_large_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v13 = *(id *)(a1 + 32);
      if (v13) {
        id v13 = objc_getProperty(v13, v7, 80, 1);
      }
      int v14 = 138412290;
      id v15 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Tunnel Policy IDs to be removed: %@", (uint8_t *)&v14, 0xCu);
    }

    unsigned int v9 = *(void **)(a1 + 32);
    if (v9) {
      id v10 = objc_getProperty(v9, v8, 80, 1);
    }
    else {
      id v10 = 0;
    }
    sub_10002F180(v4, v10);
    uint64_t v11 = sub_10002F2DC(v4);
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

BOOL sub_100031C74(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id v22 = *(void **)(a1 + 32);
    if (v22)
    {
      id Property = objc_getProperty(v22, v5, 48, 1);
      if (v3)
      {
LABEL_27:
        id v24 = objc_getProperty(v3, v5, 32, 1);
LABEL_28:
        int v26 = 138412546;
        id v27 = Property;
        __int16 v28 = 2112;
        id v29 = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@, plus pathRule filter policies %@", (uint8_t *)&v26, 0x16u);
        goto LABEL_2;
      }
    }
    else
    {
      id Property = 0;
      if (v3) {
        goto LABEL_27;
      }
    }
    id v24 = 0;
    goto LABEL_28;
  }
LABEL_2:

  id v6 = ne_log_large_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    id v25 = *(id *)(a1 + 32);
    if (v25) {
      id v25 = objc_getProperty(v25, v7, 56, 1);
    }
    int v26 = 138412290;
    id v27 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@ from Low Priority", (uint8_t *)&v26, 0xCu);
  }

  if (!v3 || (v3[2] = 0, id v9 = objc_getProperty(v3, v8, 32, 1), !sub_10002F180(v3, v9)))
  {
    uint64_t v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to remove pathRule filter policies", (uint8_t *)&v26, 2u);
    }
  }
  id v12 = *(void **)(a1 + 32);
  if (v12) {
    id v13 = objc_getProperty(v12, v10, 48, 1);
  }
  else {
    id v13 = 0;
  }
  BOOL v15 = sub_10002F180(v3, v13);
  if (!v15)
  {
    id v16 = ne_log_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to remove filter policies", (uint8_t *)&v26, 2u);
    }
  }
  id v17 = *(void **)(a1 + 32);
  if (v17) {
    id v18 = objc_getProperty(v17, v14, 56, 1);
  }
  else {
    id v18 = 0;
  }
  if (!sub_10003033C(v3, v18))
  {
    id v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to remove Low priority filter policies", (uint8_t *)&v26, 2u);
    }

    BOOL v15 = 0;
  }
  if ((sub_10002F2DC(v3) & 1) == 0)
  {
    id v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to apply filter policies", (uint8_t *)&v26, 2u);
    }

    BOOL v15 = 0;
  }

  return v15;
}

uint64_t sub_100031FA0(void *a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 1;
  if (objc_msgSend(objc_getProperty(a1, a2, 128, 1), "count"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10003204C;
    v5[3] = &unk_1000C5AD0;
    void v5[4] = a1;
    return sub_10002EC18((uint64_t)NESMPolicyMasterSession, v5);
  }
  return v3;
}

uint64_t sub_10003204C(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 128, 1);
  }
  else {
    id Property = 0;
  }
  if (sub_10002F180(v4, Property)) {
    uint64_t v7 = sub_10002F2DC(v4);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

BOOL sub_1000320BC(id a1, NESMPolicyMasterSession *a2)
{
  if (a2) {
    id Property = objc_getProperty(a2, (SEL)a2, 48, 1);
  }
  else {
    id Property = 0;
  }
  return [Property count] != 0;
}

uint64_t sub_1000320F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v4, Property);
  id v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96, 1);
  }
  else {
    id v9 = 0;
  }
  sub_10003033C(v4, v9);
  id v10 = &AnalyticsSendEventLazy_ptr;
  uint64_t v11 = +[NEPolicyCondition uid:*(unsigned int *)(a1 + 88)];
  id obj = v4;
  v212 = v11;
  if ((*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2
    || [*(id *)(a1 + 40) action] == (id)4
    || [*(id *)(a1 + 40) action] == (id)2)
  {
    if ([*(id *)(a1 + 40) action] == (id)2 && objc_msgSend(*(id *)(a1 + 48), "count"))
    {
      id v12 = ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Adding Disconnect On Demand policies to skip privacy proxies for internal domains", buf, 2u);
      }

      uint64_t v13 = a1;
      if (*(void *)(a1 + 56))
      {
        int v14 = +[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:");
      }
      else
      {
        int v14 = 0;
      }
      id v30 = +[NEPolicyCondition clientFlags:0x10000];
      [v30 setNegative:1];
      long long v239 = 0u;
      long long v240 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      id obja = *(id *)(v13 + 48);
      id v31 = [obja countByEnumeratingWithState:&v237 objects:v274 count:16];
      if (v31)
      {
        id v32 = v31;
        uint64_t v33 = *(void *)v238;
        do
        {
          id v34 = 0;
          do
          {
            if (*(void *)v238 != v33) {
              objc_enumerationMutation(obja);
            }
            uint64_t v35 = [v10[479] domain:*(void *)(*((void *)&v237 + 1) + 8 * (void)v34)];
            id v36 = (void *)v35;
            if (v212)
            {
              v273[0] = v212;
              v273[1] = v35;
              v273[2] = v30;
              id v37 = v273;
              uint64_t v38 = 3;
            }
            else
            {
              v272[0] = v35;
              v272[1] = v30;
              id v37 = v272;
              uint64_t v38 = 2;
            }
            id v40 = +[NSArray arrayWithObjects:v37 count:v38];
            id v41 = *(void **)(v13 + 32);
            if (v41) {
              id v42 = objc_getProperty(v41, v39, 96, 1);
            }
            else {
              id v42 = 0;
            }
            sub_10003116C((BOOL)v4, v40, v42);
            if (v14)
            {
              id v43 = [v40 arrayByAddingObject:v14];

              id v45 = *(void **)(v13 + 32);
              if (v45) {
                id v46 = objc_getProperty(v45, v44, 96, 1);
              }
              else {
                id v46 = 0;
              }
              sub_10003116C((BOOL)v4, v43, v46);
              id v40 = v43;
            }

            id v34 = (char *)v34 + 1;
            id v10 = &AnalyticsSendEventLazy_ptr;
          }
          while (v32 != v34);
          id v47 = [obja countByEnumeratingWithState:&v237 objects:v274 count:16];
          id v32 = v47;
        }
        while (v47);
      }

      uint64_t v11 = v212;
    }
    else
    {
      int v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 80);
        id v16 = [*(id *)(a1 + 40) action];
        *(_DWORD *)buf = 134218240;
        uint64_t v269 = v15;
        __int16 v270 = 2048;
        id v271 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "No On Demand policies (pause %ld, action %ld)", buf, 0x16u);
      }
    }

    sub_10002F2DC(v4);
    uint64_t v48 = 1;
    goto LABEL_45;
  }
  id v17 = [*(id *)(a1 + 40) action];
  if (v17 == (id)3)
  {
    id v20 = *(id *)(a1 + 40);
    long long v233 = 0u;
    long long v234 = 0u;
    long long v235 = 0u;
    long long v236 = 0u;
    id v50 = [v20 connectionRules];
    id v196 = [v50 countByEnumeratingWithState:&v233 objects:v261 count:16];
    if (!v196) {
      goto LABEL_174;
    }
    int v198 = 0;
    int v210 = 0;
    id v194 = v20;
    uint64_t v195 = *(void *)v234;
    v193 = v50;
    while (1)
    {
      for (id i = 0; i != v196; id i = v103 + 1)
      {
        if (*(void *)v234 != v195) {
          objc_enumerationMutation(v50);
        }
        v197 = (char *)i;
        id v52 = *(void **)(*((void *)&v233 + 1) + 8 * i);
        v206 = +[NSMutableArray array];
        long long v229 = 0u;
        long long v230 = 0u;
        long long v231 = 0u;
        long long v232 = 0u;
        id v53 = [v52 matchDomains];
        id v54 = [v53 countByEnumeratingWithState:&v229 objects:v260 count:16];
        if (v54)
        {
          id v55 = v54;
          uint64_t v56 = *(void *)v230;
          do
          {
            for (j = 0; j != v55; j = (char *)j + 1)
            {
              if (*(void *)v230 != v56) {
                objc_enumerationMutation(v53);
              }
              long long v58 = *(void **)(*((void *)&v229 + 1) + 8 * (void)j);
              long long v59 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
              long long v60 = [v58 stringByTrimmingCharactersInSet:v59];
              if (v60) {
                [v206 addObject:v60];
              }
            }
            id v55 = [v53 countByEnumeratingWithState:&v229 objects:v260 count:16];
          }
          while (v55);
        }

        if ([v52 action] == (id)1)
        {
          long long v61 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 64)];
          long long v225 = 0u;
          long long v226 = 0u;
          long long v227 = 0u;
          long long v228 = 0u;
          id v207 = v206;
          id v4 = obj;
          id v10 = &AnalyticsSendEventLazy_ptr;
          id v204 = [v207 countByEnumeratingWithState:&v225 objects:v259 count:16];
          if (v204)
          {
            uint64_t v202 = *(void *)v226;
            int v62 = v210;
            do
            {
              id v63 = 0;
              do
              {
                if (*(void *)v226 != v202) {
                  objc_enumerationMutation(v207);
                }
                v208 = (char *)v63;
                uint64_t v64 = *(void *)(*((void *)&v225 + 1) + 8 * (void)v63);
                v213 = +[NEPolicyCondition domain:v64];
                int v211 = v62;
                uint64_t v65 = sub_1000317B4(*(void *)(a1 + 32)) + 2 * v62 + 2110;
                long long v221 = 0u;
                long long v222 = 0u;
                long long v223 = 0u;
                long long v224 = 0u;
                uint64_t v66 = a1;
                id v67 = *(id *)(a1 + 72);
                id v68 = [v67 countByEnumeratingWithState:&v221 objects:v258 count:16];
                if (v68)
                {
                  id v69 = v68;
                  uint64_t v70 = *(void *)v222;
                  do
                  {
                    uint64_t v71 = 0;
                    do
                    {
                      if (*(void *)v222 != v70) {
                        objc_enumerationMutation(v67);
                      }
                      CFStringRef v72 = *(void **)(*((void *)&v221 + 1) + 8 * (void)v71);
                      if (isa_nsstring() && [v72 hasSuffix:v64])
                      {
                        CFNumberRef v73 = +[NEPolicyCondition domain:v72];
                        v257 = v73;
                        id v74 = +[NSArray arrayWithObjects:&v257 count:1];

                        id v76 = [objc_alloc((Class)NEPolicy) initWithOrder:v65 result:v61 conditions:v74];
                        id v77 = *(void **)(v66 + 32);
                        if (v77) {
                          id v78 = objc_getProperty(v77, v75, 88, 1);
                        }
                        else {
                          id v78 = 0;
                        }
                        sub_1000312DC((BOOL)obj, v76, v78);

                        uint64_t v65 = (v65 + 1);
                      }
                      uint64_t v71 = (char *)v71 + 1;
                    }
                    while (v69 != v71);
                    id v79 = [v67 countByEnumeratingWithState:&v221 objects:v258 count:16];
                    id v69 = v79;
                  }
                  while (v79);
                }

                if (v212)
                {
                  v256[0] = v213;
                  v256[1] = v212;
                  self;
                  id v10 = &AnalyticsSendEventLazy_ptr;
                  v80 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v256[2] = v80;
                  id v81 = +[NSArray arrayWithObjects:v256 count:3];

                  id v83 = [objc_alloc((Class)NEPolicy) initWithOrder:v65 result:v61 conditions:v81];
                  a1 = v66;
                  int v84 = *(void **)(v66 + 32);
                  id v4 = obj;
                  long long v85 = v208;
                  if (v84) {
                    id v86 = objc_getProperty(v84, v82, 88, 1);
                  }
                  else {
                    id v86 = 0;
                  }
                  int v87 = v211;
                  sub_1000312DC((BOOL)obj, v83, v86);

                  if (*(void *)(a1 + 80) == 1)
                  {
                    v255[0] = v213;
                    v255[1] = v212;
                    self;
                    uint64_t v88 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v255[2] = v88;
                    v89 = v255;
                  }
                  else
                  {
                    v254[0] = v213;
                    v254[1] = v212;
                    self;
                    uint64_t v88 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v254[2] = v88;
                    v89 = v254;
                  }
                  uint64_t v95 = (v65 + 1);
                  uint64_t v96 = 3;
                }
                else
                {
                  v253[0] = v213;
                  self;
                  id v10 = &AnalyticsSendEventLazy_ptr;
                  uint64_t v90 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v253[1] = v90;
                  id v81 = +[NSArray arrayWithObjects:v253 count:2];

                  id v92 = [objc_alloc((Class)NEPolicy) initWithOrder:v65 result:v61 conditions:v81];
                  a1 = v66;
                  __int16 v93 = *(void **)(v66 + 32);
                  id v4 = obj;
                  long long v85 = v208;
                  if (v93) {
                    id v94 = objc_getProperty(v93, v91, 88, 1);
                  }
                  else {
                    id v94 = 0;
                  }
                  int v87 = v211;
                  sub_1000312DC((BOOL)obj, v92, v94);

                  if (*(void *)(a1 + 80) == 1)
                  {
                    v252[0] = v213;
                    self;
                    uint64_t v88 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v252[1] = v88;
                    v89 = v252;
                  }
                  else
                  {
                    v251[0] = v213;
                    self;
                    uint64_t v88 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v251[1] = v88;
                    v89 = v251;
                  }
                  uint64_t v95 = (v65 + 1);
                  uint64_t v96 = 2;
                }
                __int16 v97 = +[NSArray arrayWithObjects:v89 count:v96];

                id v99 = [objc_alloc((Class)NEPolicy) initWithOrder:v95 result:v61 conditions:v97];
                CFArrayRef v100 = *(void **)(a1 + 32);
                if (v100) {
                  id v101 = objc_getProperty(v100, v98, 88, 1);
                }
                else {
                  id v101 = 0;
                }
                sub_1000312DC((BOOL)v4, v99, v101);

                int v62 = v87 + 1;
                id v63 = v85 + 1;
              }
              while (v63 != v204);
              id v102 = [v207 countByEnumeratingWithState:&v225 objects:v259 count:16];
              id v204 = v102;
            }
            while (v102);
            int v210 = v62;
          }
        }
        else
        {
          id v4 = obj;
          id v10 = &AnalyticsSendEventLazy_ptr;
          BOOL v103 = v197;
          if ([v52 action] != (id)2) {
            goto LABEL_157;
          }
          if (*(void *)(a1 + 32)) {
            uint64_t v104 = 20000;
          }
          else {
            uint64_t v104 = 0;
          }
          long long v61 = +[NEPolicyResult skipWithOrder:v104];
          id v207 = +[NEPolicyResult removeNetworkAgentUUID:*(void *)(a1 + 64)];
          v203 = +[NEPolicyResult scopeToDirectInterface];
          if (*(void *)(a1 + 32)) {
            int v105 = 20100;
          }
          else {
            int v105 = 100;
          }
          int v214 = v105;
          long long v217 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v220 = 0u;
          id v200 = v206;
          id v205 = [v200 countByEnumeratingWithState:&v217 objects:v250 count:16];
          if (v205)
          {
            uint64_t v201 = *(void *)v218;
            int v106 = v198;
            do
            {
              id v107 = 0;
              int v108 = 2 * v106;
              int v199 = v106;
              do
              {
                if (*(void *)v218 != v201) {
                  objc_enumerationMutation(v200);
                }
                __int16 v109 = (char *)v107;
                uint64_t v110 = [v10[479] domain:*(void *)(*((void *)&v217 + 1) + 8 * (void)v107)];
                int v209 = sub_1000317B4(*(void *)(a1 + 32));
                uint64_t v111 = a1;
                uint64_t v112 = (v209 + v108 + 10);
                uint64_t v113 = (v214 + v108);
                if (v212)
                {
                  v114 = (void *)v110;
                  v249[0] = v110;
                  v249[1] = v212;
                  self;
                  v115 = [v10[479] trafficClassStart:0 end:0];
                  v249[2] = v115;
                  v116 = +[NSArray arrayWithObjects:v249 count:3];

                  id v118 = [objc_alloc((Class)NEPolicy) initWithOrder:v112 result:v61 conditions:v116];
                  v119 = *(void **)(v111 + 32);
                  a1 = v111;
                  if (v119) {
                    id v120 = objc_getProperty(v119, v117, 88, 1);
                  }
                  else {
                    id v120 = 0;
                  }
                  v121 = v109;
                  sub_1000312DC((BOOL)obj, v118, v120);

                  id v123 = [objc_alloc((Class)NEPolicy) initWithOrder:v113 result:v207 conditions:v116];
                  v124 = *(void **)(a1 + 32);
                  v125 = v114;
                  if (v124) {
                    id v126 = objc_getProperty(v124, v122, 88, 1);
                  }
                  else {
                    id v126 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v123, v126);

                  if (*(void *)(a1 + 80) == 1)
                  {
                    v248[0] = v114;
                    v248[1] = v212;
                    self;
                    v127 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v248[2] = v127;
                    v128 = v248;
                  }
                  else
                  {
                    v247[0] = v114;
                    v247[1] = v212;
                    self;
                    v127 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v247[2] = v127;
                    v128 = v247;
                  }
                  v142 = +[NSArray arrayWithObjects:v128 count:3];

                  id v144 = [objc_alloc((Class)NEPolicy) initWithOrder:(v209 + v108 + 11) result:v61 conditions:v142];
                  v145 = *(void **)(a1 + 32);
                  if (v145) {
                    id v146 = objc_getProperty(v145, v143, 88, 1);
                  }
                  else {
                    id v146 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v144, v146);

                  id v148 = [objc_alloc((Class)NEPolicy) initWithOrder:(v214 + v108 + 1) result:v207 conditions:v142];
                  v149 = *(void **)(a1 + 32);
                  if (v149) {
                    id v150 = objc_getProperty(v149, v147, 88, 1);
                  }
                  else {
                    id v150 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v148, v150);

                  id v151 = objc_alloc((Class)NEPolicy);
                  v246[0] = v125;
                  v246[1] = v212;
                  v152 = (void **)v246;
                  uint64_t v153 = 2;
                }
                else
                {
                  v129 = (void *)v110;
                  v245[0] = v110;
                  self;
                  v130 = [v10[479] trafficClassStart:0 end:0];
                  v245[1] = v130;
                  v131 = +[NSArray arrayWithObjects:v245 count:2];

                  id v133 = [objc_alloc((Class)NEPolicy) initWithOrder:v112 result:v61 conditions:v131];
                  v134 = *(void **)(v111 + 32);
                  a1 = v111;
                  if (v134) {
                    id v135 = objc_getProperty(v134, v132, 88, 1);
                  }
                  else {
                    id v135 = 0;
                  }
                  v121 = v109;
                  sub_1000312DC((BOOL)obj, v133, v135);

                  id v137 = [objc_alloc((Class)NEPolicy) initWithOrder:v113 result:v207 conditions:v131];
                  v138 = *(void **)(a1 + 32);
                  v125 = v129;
                  if (v138) {
                    id v139 = objc_getProperty(v138, v136, 88, 1);
                  }
                  else {
                    id v139 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v137, v139);

                  if (*(void *)(a1 + 80) == 1)
                  {
                    v244[0] = v129;
                    self;
                    v140 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v244[1] = v140;
                    v141 = v244;
                  }
                  else
                  {
                    v243[0] = v129;
                    self;
                    v140 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v243[1] = v140;
                    v141 = v243;
                  }
                  v142 = +[NSArray arrayWithObjects:v141 count:2];

                  id v155 = [objc_alloc((Class)NEPolicy) initWithOrder:(v209 + v108 + 11) result:v61 conditions:v142];
                  v156 = *(void **)(a1 + 32);
                  if (v156) {
                    id v157 = objc_getProperty(v156, v154, 88, 1);
                  }
                  else {
                    id v157 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v155, v157);

                  id v159 = [objc_alloc((Class)NEPolicy) initWithOrder:(v214 + v108 + 1) result:v207 conditions:v142];
                  v160 = *(void **)(a1 + 32);
                  if (v160) {
                    id v161 = objc_getProperty(v160, v158, 88, 1);
                  }
                  else {
                    id v161 = 0;
                  }
                  sub_1000312DC((BOOL)obj, v159, v161);

                  id v151 = objc_alloc((Class)NEPolicy);
                  v242 = v125;
                  v152 = &v242;
                  uint64_t v153 = 1;
                }
                v162 = +[NSArray arrayWithObjects:v152 count:v153];
                id v164 = [v151 initWithOrder:80 result:v203 conditions:v162];
                v165 = *(void **)(a1 + 32);
                if (v165) {
                  id v166 = objc_getProperty(v165, v163, 96, 1);
                }
                else {
                  id v166 = 0;
                }
                sub_10002FBAC((BOOL)obj, v164, v166);

                id v107 = v121 + 1;
                v108 += 2;
                id v10 = &AnalyticsSendEventLazy_ptr;
              }
              while (v205 != v107);
              int v106 = v199 + v107;
              id v167 = [v200 countByEnumeratingWithState:&v217 objects:v250 count:16];
              id v205 = v167;
            }
            while (v167);
          }
          else
          {
            int v106 = v198;
          }
          int v198 = v106;
        }
        id v50 = v193;
        id v20 = v194;
        BOOL v103 = v197;
LABEL_157:
      }
      id v196 = [v50 countByEnumeratingWithState:&v233 objects:v261 count:16];
      if (!v196) {
        goto LABEL_174;
      }
    }
  }
  if (v17 == (id)1)
  {
    int v18 = sub_1000317B4(*(void *)(a1 + 32));
    uint64_t v19 = (v18 + 10);
    id v20 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 64)];
    if (v11)
    {
      v267[0] = v11;
      self;
      id v21 = +[NEPolicyCondition trafficClassStart:0 end:0];
      v267[1] = v21;
      id v22 = +[NSArray arrayWithObjects:v267 count:2];

      id v24 = [objc_alloc((Class)NEPolicy) initWithOrder:v19 result:v20 conditions:v22];
      id v25 = *(void **)(a1 + 32);
      if (v25) {
        id v26 = objc_getProperty(v25, v23, 88, 1);
      }
      else {
        id v26 = 0;
      }
      sub_1000312DC((BOOL)v4, v24, v26);

      uint64_t v27 = (v18 + 11);
      if (*(void *)(a1 + 80) == 1)
      {
        v266[0] = v11;
        self;
        id v10 = &AnalyticsSendEventLazy_ptr;
        __int16 v28 = +[NEPolicyCondition trafficClassStart:300 end:899];
        v266[1] = v28;
        id v29 = v266;
      }
      else
      {
        v265[0] = v11;
        self;
        id v10 = &AnalyticsSendEventLazy_ptr;
        __int16 v28 = +[NEPolicyCondition trafficClassStart:200 end:899];
        v265[1] = v28;
        id v29 = v265;
      }
      id v50 = +[NSArray arrayWithObjects:v29 count:2];
    }
    else
    {
      self;
      v168 = +[NEPolicyCondition trafficClassStart:0 end:0];
      v264 = v168;
      v169 = +[NSArray arrayWithObjects:&v264 count:1];

      id v171 = [objc_alloc((Class)NEPolicy) initWithOrder:v19 result:v20 conditions:v169];
      v172 = *(void **)(a1 + 32);
      if (v172) {
        id v173 = objc_getProperty(v172, v170, 88, 1);
      }
      else {
        id v173 = 0;
      }
      sub_1000312DC((BOOL)v4, v171, v173);

      uint64_t v27 = (v18 + 11);
      uint64_t v174 = *(void *)(a1 + 80);
      self;
      id v10 = &AnalyticsSendEventLazy_ptr;
      if (v174 == 1)
      {
        v175 = +[NEPolicyCondition trafficClassStart:300 end:899];
        v263 = v175;
        v176 = &v263;
      }
      else
      {
        v175 = +[NEPolicyCondition trafficClassStart:200 end:899];
        v262 = v175;
        v176 = &v262;
      }
      id v50 = +[NSArray arrayWithObjects:v176 count:1];
    }
    id v178 = [objc_alloc((Class)NEPolicy) initWithOrder:v27 result:v20 conditions:v50];
    v179 = *(void **)(a1 + 32);
    if (v179) {
      id v180 = objc_getProperty(v179, v177, 88, 1);
    }
    else {
      id v180 = 0;
    }
    sub_1000312DC((BOOL)v4, v178, v180);

    v182 = *(void **)(a1 + 32);
    if (v182) {
      id v183 = objc_getProperty(v182, v181, 96, 1);
    }
    else {
      id v183 = 0;
    }
    sub_10003116C((BOOL)v4, v50, v183);
LABEL_174:

    if (*(unsigned char *)(a1 + 92))
    {
      v184 = [v10[479] localNetworks];
      v185 = +[NEPolicyResult removeNetworkAgentUUID:*(void *)(a1 + 64)];
      id v186 = objc_alloc((Class)NEPolicy);
      uint64_t v187 = sub_1000317B4(*(void *)(a1 + 32)) + 30;
      v241 = v184;
      v188 = +[NSArray arrayWithObjects:&v241 count:1];
      id v190 = [v186 initWithOrder:v187 result:v185 conditions:v188];
      v191 = *(void **)(a1 + 32);
      if (v191) {
        id v192 = objc_getProperty(v191, v189, 88, 1);
      }
      else {
        id v192 = 0;
      }
      sub_1000312DC((BOOL)v4, v190, v192);
    }
    uint64_t v48 = sub_10002F2DC(v4);
    uint64_t v11 = v212;
  }
  else
  {
    uint64_t v48 = 0;
  }
LABEL_45:

  return v48;
}

uint64_t sub_100033688(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v4, Property);
  id v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96, 1);
  }
  else {
    id v9 = 0;
  }
  sub_10003033C(v4, v9);
  if ((*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2
    || [*(id *)(a1 + 40) action] == (id)4
    || [*(id *)(a1 + 40) action] == (id)2)
  {
    id v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = a1;
      uint64_t v12 = *(void *)(a1 + 72);
      id v13 = [*(id *)(v11 + 40) action];
      *(_DWORD *)buf = 134218240;
      uint64_t v228 = v12;
      __int16 v229 = 2048;
      id v230 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "No On Demand policies (pause %ld, action %ld)", buf, 0x16u);
    }

    sub_10002F2DC(v4);
    uint64_t v14 = 1;
    goto LABEL_11;
  }
  id v16 = +[NEPolicyCondition uid:*(unsigned int *)(a1 + 80)];
  id v180 = +[NEPolicyCondition fallbackTraffic];
  v179 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 48)];
  id v17 = [*(id *)(a1 + 40) action];
  BOOL v178 = (BOOL)v4;
  int v18 = (uint64_t *)a1;
  v175 = v16;
  if (v17 == (id)3)
  {
    id v32 = *(id *)(a1 + 40);
    long long v197 = 0u;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    id v155 = v32;
    id obj = [v32 connectionRules];
    id v158 = [obj countByEnumeratingWithState:&v197 objects:v220 count:16];
    if (!v158) {
      goto LABEL_132;
    }
    int v160 = 0;
    int v33 = 0;
    uint64_t v157 = *(void *)v198;
    while (1)
    {
      uint64_t v34 = 0;
      do
      {
        if (*(void *)v198 != v157) {
          objc_enumerationMutation(obj);
        }
        uint64_t v159 = v34;
        uint64_t v35 = *(void **)(*((void *)&v197 + 1) + 8 * v34);
        v169 = +[NSMutableArray array];
        long long v193 = 0u;
        long long v194 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        id v36 = [v35 matchDomains];
        id v37 = [v36 countByEnumeratingWithState:&v193 objects:v219 count:16];
        if (v37)
        {
          id v38 = v37;
          uint64_t v39 = *(void *)v194;
          do
          {
            for (id i = 0; i != v38; id i = (char *)i + 1)
            {
              if (*(void *)v194 != v39) {
                objc_enumerationMutation(v36);
              }
              id v41 = *(void **)(*((void *)&v193 + 1) + 8 * i);
              id v42 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
              id v43 = [v41 stringByTrimmingCharactersInSet:v42];
              if (v43) {
                [v169 addObject:v43];
              }
            }
            id v38 = [v36 countByEnumeratingWithState:&v193 objects:v219 count:16];
          }
          while (v38);
        }

        if ([v35 action] == (id)1)
        {
          id v44 = v18;
          id v45 = +[NEPolicyResult netAgentUUID:v18[7]];
          long long v189 = 0u;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          id v170 = v169;
          id v4 = (id)v178;
          id v167 = [v170 countByEnumeratingWithState:&v189 objects:v218 count:16];
          if (v167)
          {
            uint64_t v165 = *(void *)v190;
            do
            {
              uint64_t v46 = 0;
              do
              {
                if (*(void *)v190 != v165) {
                  objc_enumerationMutation(v170);
                }
                uint64_t v171 = v46;
                uint64_t v47 = *(void *)(*((void *)&v189 + 1) + 8 * v46);
                v176 = +[NEPolicyCondition domain:v47];
                int v173 = v33;
                uint64_t v48 = sub_1000317B4(v44[4]) + 2 * v33 + 2110;
                long long v185 = 0u;
                long long v186 = 0u;
                long long v187 = 0u;
                long long v188 = 0u;
                id v49 = (id)v44[8];
                id v50 = [v49 countByEnumeratingWithState:&v185 objects:v217 count:16];
                if (v50)
                {
                  id v51 = v50;
                  uint64_t v52 = *(void *)v186;
                  do
                  {
                    id v53 = 0;
                    do
                    {
                      if (*(void *)v186 != v52) {
                        objc_enumerationMutation(v49);
                      }
                      id v54 = *(void **)(*((void *)&v185 + 1) + 8 * (void)v53);
                      if (isa_nsstring() && [v54 hasSuffix:v47])
                      {
                        v216[0] = v180;
                        id v55 = +[NEPolicyCondition domain:v54];
                        v216[1] = v55;
                        v216[2] = v179;
                        uint64_t v56 = +[NSArray arrayWithObjects:v216 count:3];

                        id v58 = [objc_alloc((Class)NEPolicy) initWithOrder:v48 result:v45 conditions:v56];
                        long long v59 = (void *)v18[4];
                        if (v59) {
                          id v60 = objc_getProperty(v59, v57, 88, 1);
                        }
                        else {
                          id v60 = 0;
                        }
                        sub_1000312DC(v178, v58, v60);

                        uint64_t v48 = (v48 + 1);
                      }
                      id v53 = (char *)v53 + 1;
                    }
                    while (v51 != v53);
                    id v61 = [v49 countByEnumeratingWithState:&v185 objects:v217 count:16];
                    id v51 = v61;
                  }
                  while (v61);
                }

                if (v175)
                {
                  v215[0] = v180;
                  v215[1] = v176;
                  v215[2] = v175;
                  self;
                  int v62 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v215[3] = v62;
                  v215[4] = v179;
                  id v63 = +[NSArray arrayWithObjects:v215 count:5];

                  id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:v48 result:v45 conditions:v63];
                  id v44 = v18;
                  uint64_t v66 = (void *)v18[4];
                  id v4 = (id)v178;
                  if (v66) {
                    id v67 = objc_getProperty(v66, v64, 88, 1);
                  }
                  else {
                    id v67 = 0;
                  }
                  sub_1000312DC(v178, v65, v67);

                  if (v18[9] == 1)
                  {
                    v214[0] = v180;
                    v214[1] = v176;
                    v214[2] = v175;
                    self;
                    id v68 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v214[3] = v68;
                    id v69 = v214;
                  }
                  else
                  {
                    v213[0] = v180;
                    v213[1] = v176;
                    v213[2] = v175;
                    self;
                    id v68 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v213[3] = v68;
                    id v69 = v213;
                  }
                  uint64_t v76 = (v48 + 1);
                  v69[4] = v179;
                }
                else
                {
                  v212[0] = v180;
                  v212[1] = v176;
                  self;
                  uint64_t v70 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v212[2] = v70;
                  v212[3] = v179;
                  id v63 = +[NSArray arrayWithObjects:v212 count:4];

                  id v72 = [objc_alloc((Class)NEPolicy) initWithOrder:v48 result:v45 conditions:v63];
                  id v44 = v18;
                  CFNumberRef v73 = (void *)v18[4];
                  id v4 = (id)v178;
                  if (v73) {
                    id v74 = objc_getProperty(v73, v71, 88, 1);
                  }
                  else {
                    id v74 = 0;
                  }
                  sub_1000312DC(v178, v72, v74);

                  if (v18[9] == 1)
                  {
                    v211[0] = v180;
                    v211[1] = v176;
                    self;
                    id v68 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v211[2] = v68;
                    uint64_t v75 = v211;
                  }
                  else
                  {
                    v210[0] = v180;
                    v210[1] = v176;
                    self;
                    id v68 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v210[2] = v68;
                    uint64_t v75 = v210;
                  }
                  uint64_t v76 = (v48 + 1);
                  v75[3] = v179;
                }
                id v77 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:");

                id v79 = [objc_alloc((Class)NEPolicy) initWithOrder:v76 result:v45 conditions:v77];
                v80 = (void *)v44[4];
                if (v80) {
                  id v81 = objc_getProperty(v80, v78, 88, 1);
                }
                else {
                  id v81 = 0;
                }
                sub_1000312DC((BOOL)v4, v79, v81);

                int v33 = v173 + 1;
                uint64_t v46 = v171 + 1;
              }
              while ((id)(v171 + 1) != v167);
              id v82 = [v170 countByEnumeratingWithState:&v189 objects:v218 count:16];
              id v167 = v82;
            }
            while (v82);
          }
        }
        else
        {
          id v4 = (id)v178;
          id v16 = v175;
          if ([v35 action] != (id)2) {
            goto LABEL_130;
          }
          int v174 = v33;
          if (v18[4]) {
            uint64_t v83 = 20000;
          }
          else {
            uint64_t v83 = 0;
          }
          id v45 = +[NEPolicyResult skipWithOrder:v83];
          id v170 = +[NEPolicyResult removeNetworkAgentUUID:v18[7]];
          id v164 = +[NEPolicyResult scopeToDirectInterface];
          if (v18[4]) {
            int v84 = 20200;
          }
          else {
            int v84 = 200;
          }
          int v172 = v84;
          long long v181 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          long long v184 = 0u;
          id v162 = v169;
          id v166 = [v162 countByEnumeratingWithState:&v181 objects:v209 count:16];
          if (v166)
          {
            uint64_t v163 = *(void *)v182;
            int v85 = v160;
            do
            {
              uint64_t v86 = 0;
              int v87 = 2 * v85;
              int v161 = v85;
              do
              {
                if (*(void *)v182 != v163) {
                  objc_enumerationMutation(v162);
                }
                uint64_t v168 = v86;
                uint64_t v88 = +[NEPolicyCondition domain:*(void *)(*((void *)&v181 + 1) + 8 * v86)];
                int v89 = sub_1000317B4(v18[4]);
                uint64_t v90 = (v89 + v87 + 10);
                uint64_t v91 = (v172 + v87);
                v177 = (void *)v88;
                if (v175)
                {
                  v208[0] = v180;
                  v208[1] = v88;
                  v208[2] = v175;
                  self;
                  id v92 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v208[3] = v92;
                  v208[4] = v179;
                  __int16 v93 = +[NSArray arrayWithObjects:v208 count:5];

                  id v95 = [objc_alloc((Class)NEPolicy) initWithOrder:v90 result:v45 conditions:v93];
                  uint64_t v96 = (void *)v18[4];
                  if (v96) {
                    id v97 = objc_getProperty(v96, v94, 88, 1);
                  }
                  else {
                    id v97 = 0;
                  }
                  sub_1000312DC(v178, v95, v97);

                  id v99 = [objc_alloc((Class)NEPolicy) initWithOrder:v91 result:v170 conditions:v93];
                  CFArrayRef v100 = (void *)v18[4];
                  if (v100) {
                    id v101 = objc_getProperty(v100, v98, 88, 1);
                  }
                  else {
                    id v101 = 0;
                  }
                  sub_1000312DC(v178, v99, v101);

                  if (v18[9] == 1)
                  {
                    v207[0] = v180;
                    v207[1] = v177;
                    v207[2] = v175;
                    self;
                    id v102 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v207[3] = v102;
                    BOOL v103 = v207;
                  }
                  else
                  {
                    v206[0] = v180;
                    v206[1] = v177;
                    v206[2] = v175;
                    self;
                    id v102 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v206[3] = v102;
                    BOOL v103 = v206;
                  }
                  uint64_t v116 = (v89 + v87 + 11);
                  v103[4] = v179;
                  v117 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:");

                  id v119 = [objc_alloc((Class)NEPolicy) initWithOrder:v116 result:v45 conditions:v117];
                  id v120 = (void *)v18[4];
                  if (v120) {
                    id v121 = objc_getProperty(v120, v118, 88, 1);
                  }
                  else {
                    id v121 = 0;
                  }
                  sub_1000312DC(v178, v119, v121);

                  id v123 = [objc_alloc((Class)NEPolicy) initWithOrder:(v172 + v87 + 1) result:v170 conditions:v117];
                  v124 = (void *)v18[4];
                  if (v124) {
                    id v125 = objc_getProperty(v124, v122, 88, 1);
                  }
                  else {
                    id v125 = 0;
                  }
                  sub_1000312DC(v178, v123, v125);

                  id v126 = objc_alloc((Class)NEPolicy);
                  v205[0] = v180;
                  v205[1] = v177;
                  v205[2] = v175;
                  v205[3] = v179;
                  v127 = v205;
                  uint64_t v128 = 4;
                }
                else
                {
                  v204[0] = v180;
                  v204[1] = v88;
                  self;
                  uint64_t v104 = +[NEPolicyCondition trafficClassStart:0 end:0];
                  v204[2] = v104;
                  v204[3] = v179;
                  int v105 = +[NSArray arrayWithObjects:v204 count:4];

                  id v107 = [objc_alloc((Class)NEPolicy) initWithOrder:v90 result:v45 conditions:v105];
                  int v108 = (void *)v18[4];
                  if (v108) {
                    id v109 = objc_getProperty(v108, v106, 88, 1);
                  }
                  else {
                    id v109 = 0;
                  }
                  sub_1000312DC(v178, v107, v109);

                  id v111 = [objc_alloc((Class)NEPolicy) initWithOrder:v91 result:v170 conditions:v105];
                  uint64_t v112 = (void *)v18[4];
                  if (v112) {
                    id v113 = objc_getProperty(v112, v110, 88, 1);
                  }
                  else {
                    id v113 = 0;
                  }
                  sub_1000312DC(v178, v111, v113);

                  if (v18[9] == 1)
                  {
                    v203[0] = v180;
                    v203[1] = v177;
                    self;
                    v114 = +[NEPolicyCondition trafficClassStart:300 end:899];
                    v203[2] = v114;
                    v115 = v203;
                  }
                  else
                  {
                    v202[0] = v180;
                    v202[1] = v177;
                    self;
                    v114 = +[NEPolicyCondition trafficClassStart:200 end:899];
                    v202[2] = v114;
                    v115 = v202;
                  }
                  uint64_t v129 = (v89 + v87 + 11);
                  v115[3] = v179;
                  v117 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:");

                  id v131 = [objc_alloc((Class)NEPolicy) initWithOrder:v129 result:v45 conditions:v117];
                  v132 = (void *)v18[4];
                  if (v132) {
                    id v133 = objc_getProperty(v132, v130, 88, 1);
                  }
                  else {
                    id v133 = 0;
                  }
                  sub_1000312DC(v178, v131, v133);

                  id v135 = [objc_alloc((Class)NEPolicy) initWithOrder:(v172 + v87 + 1) result:v170 conditions:v117];
                  v136 = (void *)v18[4];
                  if (v136) {
                    id v137 = objc_getProperty(v136, v134, 88, 1);
                  }
                  else {
                    id v137 = 0;
                  }
                  sub_1000312DC(v178, v135, v137);

                  id v126 = objc_alloc((Class)NEPolicy);
                  v201[0] = v180;
                  v201[1] = v177;
                  v201[2] = v179;
                  v127 = v201;
                  uint64_t v128 = 3;
                }
                v138 = +[NSArray arrayWithObjects:v127 count:v128];
                id v140 = [v126 initWithOrder:80 result:v164 conditions:v138];
                v141 = (void *)v18[4];
                if (v141) {
                  id v142 = objc_getProperty(v141, v139, 96, 1);
                }
                else {
                  id v142 = 0;
                }
                sub_10002FBAC(v178, v140, v142);

                uint64_t v86 = v168 + 1;
                v87 += 2;
              }
              while (v166 != (id)(v168 + 1));
              int v85 = v161 + v86;
              id v143 = [v162 countByEnumeratingWithState:&v181 objects:v209 count:16];
              id v166 = v143;
            }
            while (v143);
          }
          else
          {
            int v85 = v160;
          }
          int v160 = v85;

          int v33 = v174;
        }

        id v16 = v175;
LABEL_130:

        uint64_t v34 = v159 + 1;
      }
      while ((id)(v159 + 1) != v158);
      id v158 = [obj countByEnumeratingWithState:&v197 objects:v220 count:16];
      if (!v158)
      {
LABEL_132:
        id v24 = v155;
        goto LABEL_145;
      }
    }
  }
  if (v17 == (id)1)
  {
    int v19 = sub_1000317B4(*(void *)(a1 + 32));
    uint64_t v20 = (v19 + 10);
    uint64_t v21 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 56)];
    if (v16)
    {
      v226[0] = v180;
      v226[1] = v16;
      self;
      id v22 = +[NEPolicyCondition trafficClassStart:0 end:0];
      v226[2] = v22;
      v226[3] = v179;
      id v23 = +[NSArray arrayWithObjects:v226 count:4];

      id v24 = (void *)v21;
      id v26 = [objc_alloc((Class)NEPolicy) initWithOrder:v20 result:v21 conditions:v23];
      uint64_t v27 = *(void **)(a1 + 32);
      if (v27) {
        id v28 = objc_getProperty(v27, v25, 88, 1);
      }
      else {
        id v28 = 0;
      }
      sub_1000312DC((BOOL)v4, v26, v28);

      uint64_t v29 = (v19 + 11);
      if (*(void *)(a1 + 72) == 1)
      {
        v225[0] = v180;
        v225[1] = v175;
        self;
        id v30 = +[NEPolicyCondition trafficClassStart:300 end:899];
        v225[2] = v30;
        id v31 = v225;
      }
      else
      {
        v224[0] = v180;
        v224[1] = v175;
        self;
        id v30 = +[NEPolicyCondition trafficClassStart:200 end:899];
        v224[2] = v30;
        id v31 = v224;
      }
      v31[3] = v179;
    }
    else
    {
      v223[0] = v180;
      self;
      id v144 = +[NEPolicyCondition trafficClassStart:0 end:0];
      v223[1] = v144;
      v223[2] = v179;
      id v23 = +[NSArray arrayWithObjects:v223 count:3];

      id v24 = (void *)v21;
      id v146 = [objc_alloc((Class)NEPolicy) initWithOrder:v20 result:v21 conditions:v23];
      v147 = *(void **)(a1 + 32);
      if (v147) {
        id v148 = objc_getProperty(v147, v145, 88, 1);
      }
      else {
        id v148 = 0;
      }
      sub_1000312DC((BOOL)v4, v146, v148);

      uint64_t v29 = (v19 + 11);
      if (*(void *)(a1 + 72) == 1)
      {
        v222[0] = v180;
        self;
        id v30 = +[NEPolicyCondition trafficClassStart:300 end:899];
        v222[1] = v30;
        v149 = v222;
      }
      else
      {
        v221[0] = v180;
        self;
        id v30 = +[NEPolicyCondition trafficClassStart:200 end:899];
        v221[1] = v30;
        v149 = v221;
      }
      v149[2] = v179;
    }
    uint64_t v150 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:");

    id obj = (id)v150;
    id v152 = [objc_alloc((Class)NEPolicy) initWithOrder:v29 result:v24 conditions:v150];
    uint64_t v153 = (void *)v18[4];
    if (v153) {
      id v154 = objc_getProperty(v153, v151, 88, 1);
    }
    else {
      id v154 = 0;
    }
    id v16 = v175;
    sub_1000312DC((BOOL)v4, v152, v154);

LABEL_145:
    uint64_t v14 = sub_10002F2DC(v4);
  }
  else
  {
    uint64_t v14 = 0;
  }

LABEL_11:
  return v14;
}

uint64_t sub_100034A18(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v4, Property);
  id v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96, 1);
  }
  else {
    id v9 = 0;
  }
  sub_10003033C(v4, v9);
  if ([*(id *)(a1 + 40) action] == (id)4 || objc_msgSend(*(id *)(a1 + 40), "action") == (id)2)
  {
    if ([*(id *)(a1 + 40) action] == (id)2)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void **)(a1 + 48);
      uint64_t v12 = *(void **)(a1 + 56);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_100034ED8;
      v58[3] = &unk_1000C5BD0;
      id v13 = v4;
      uint64_t v14 = *(void *)(a1 + 32);
      id v59 = v13;
      uint64_t v60 = v14;
      sub_100034F48(v10, v11, 0, 1, 0, v12, v13, v58, &stru_1000C5C10);
    }
    sub_10002F2DC(v4);
    uint64_t v15 = 1;
  }
  else
  {
    id v44 = v4;
    id v42 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 64)];
    id v43 = +[NEPolicyCondition allInterfaces];
    id v40 = +[NEPolicyResult skipWithOrder:sub_1000317B4(*(void *)(a1 + 32)) + 250];
    unsigned int v41 = sub_1000317B4(*(void *)(a1 + 32)) + 10;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v16 = (void *)a1;
    id v17 = *(id *)(a1 + 72);
    id v18 = [v17 countByEnumeratingWithState:&v54 objects:v62 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v55;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v55 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(void **)(*((void *)&v54 + 1) + 8 * (void)v21);
          if (isa_nsstring())
          {
            id v23 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
            id v24 = [v22 stringByTrimmingCharactersInSet:v23];
            if ([v24 length])
            {
              v61[0] = v43;
              id v25 = +[NEPolicyCondition domain:v24];
              v61[1] = v25;
              id v26 = +[NSArray arrayWithObjects:v61 count:2];

              id v28 = [objc_alloc((Class)NEPolicy) initWithOrder:v41 result:v42 conditions:v26];
              uint64_t v29 = (void *)v16[4];
              if (v29) {
                id v30 = objc_getProperty(v29, v27, 88, 1);
              }
              else {
                id v30 = 0;
              }
              sub_1000312DC((BOOL)v44, v28, v30);
            }
          }
          uint64_t v21 = (char *)v21 + 1;
        }
        while (v19 != v21);
        id v31 = [v17 countByEnumeratingWithState:&v54 objects:v62 count:16];
        id v19 = v31;
      }
      while (v31);
    }

    uint64_t v32 = v16[4];
    uint64_t v34 = (void *)v16[6];
    int v33 = (void *)v16[7];
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_100036240;
    v49[3] = &unk_1000C5C38;
    id v4 = v44;
    unsigned int v53 = v41;
    id v50 = v44;
    id v51 = v42;
    uint64_t v52 = v16[4];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_100036310;
    v45[3] = &unk_1000C5C60;
    id v35 = v50;
    uint64_t v36 = v16[4];
    id v46 = v35;
    uint64_t v47 = v36;
    id v48 = v40;
    id v37 = v40;
    id v38 = v42;
    sub_100034F48(v32, v34, 0, 1, 0, v33, v35, v49, v45);
    uint64_t v15 = sub_10002F2DC(v35);
  }
  return v15;
}

void sub_100034ED8(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  if (v4) {
    id Property = objc_getProperty(v4, v3, 96, 1);
  }
  else {
    id Property = 0;
  }
  sub_10003116C(v5, v7, Property);
}

void sub_100034F48(uint64_t a1, void *a2, int a3, int a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v129 = a2;
  id v15 = a5;
  id v130 = a6;
  id v142 = a7;
  id v16 = a8;
  id v17 = v15;
  id v162 = a9;
  uint64_t v143 = a1;
  if (a1)
  {
    if (a4)
    {
      uint64_t v163 = +[NEPolicyCondition allInterfaces];
    }
    else
    {
      uint64_t v163 = 0;
    }
    long long v233 = 0u;
    long long v232 = 0u;
    long long v231 = 0u;
    long long v230 = 0u;
    id obj = v129;
    id v132 = [obj countByEnumeratingWithState:&v230 objects:v250 count:16];
    if (v132)
    {
      char v147 = 0;
      uint64_t v131 = *(void *)v231;
      id v139 = v15;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v231 != v131)
          {
            uint64_t v19 = v18;
            objc_enumerationMutation(obj);
            uint64_t v18 = v19;
          }
          uint64_t v133 = v18;
          uint64_t v20 = *(void **)(*((void *)&v230 + 1) + 8 * v18);
          id v137 = objc_alloc_init((Class)NSMutableArray);
          id v21 = objc_alloc_init((Class)NSMutableArray);
          id v22 = objc_alloc_init((Class)NSMutableArray);
          id v136 = objc_alloc_init((Class)NSMutableArray);
          id v23 = v20;
          id v150 = objc_alloc_init((Class)NSMutableArray);
          id v24 = [v20 cachedMachOUUIDs];
          v145 = v20;
          if ([v24 count] && objc_msgSend(v17, "count"))
          {
            v228[0] = _NSConcreteStackBlock;
            v228[1] = 3221225472;
            v228[2] = sub_1000363C4;
            v228[3] = &unk_1000C5EB8;
            id v229 = v17;
            id v25 = +[NSPredicate predicateWithBlock:v228];
            uint64_t v26 = [v24 filteredArrayUsingPredicate:v25];

            id v23 = v145;
            uint64_t v27 = (void *)v26;
          }
          else
          {
            uint64_t v27 = v24;
          }
          v134 = v27;
          id v152 = v21;
          if (isa_nsarray())
          {
            long long v227 = 0u;
            long long v226 = 0u;
            long long v225 = 0u;
            long long v224 = 0u;
            id v28 = v134;
            id v29 = [v28 countByEnumeratingWithState:&v224 objects:v249 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v225;
              do
              {
                for (id i = 0; i != v30; id i = (char *)i + 1)
                {
                  if (*(void *)v225 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  int v33 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v224 + 1) + 8 * i)];
                  [v137 addObject:v33];
                }
                id v30 = [v28 countByEnumeratingWithState:&v224 objects:v249 count:16];
              }
              while (v30);
            }

            id v17 = v139;
            id v21 = v152;
            id v23 = v145;
          }
          if ([v137 count])
          {
            [v23 matchDomains];
            v35 = uint64_t v34 = v23;
            int v36 = isa_nsarray();

            if (v36)
            {
              id v37 = [v34 matchDomains];
              id v38 = [v37 count];

              if ((unint64_t)v38 <= 0xFA)
              {
                long long v223 = 0u;
                long long v222 = 0u;
                long long v221 = 0u;
                long long v220 = 0u;
                id v40 = [v34 matchDomains];
                id v41 = [v40 countByEnumeratingWithState:&v220 objects:v248 count:16];
                if (v41)
                {
                  id v42 = v41;
                  uint64_t v43 = *(void *)v221;
                  do
                  {
                    for (j = 0; j != v42; j = (char *)j + 1)
                    {
                      if (*(void *)v221 != v43) {
                        objc_enumerationMutation(v40);
                      }
                      id v45 = +[NEPolicyCondition domain:*(void *)(*((void *)&v220 + 1) + 8 * (void)j)];
                      [v152 addObject:v45];
                    }
                    id v42 = [v40 countByEnumeratingWithState:&v220 objects:v248 count:16];
                  }
                  while (v42);
                }

                id v17 = v139;
                id v21 = v152;
              }
              else
              {
                char v147 = 1;
              }
            }
            id v46 = [v145 matchAccountIdentifiers];
            int v47 = isa_nsarray();

            if (v47)
            {
              long long v219 = 0u;
              long long v218 = 0u;
              long long v217 = 0u;
              long long v216 = 0u;
              id v48 = [v145 matchAccountIdentifiers];
              id v49 = [v48 countByEnumeratingWithState:&v216 objects:v247 count:16];
              if (v49)
              {
                id v50 = v49;
                uint64_t v51 = *(void *)v217;
                do
                {
                  for (k = 0; k != v50; k = (char *)k + 1)
                  {
                    if (*(void *)v217 != v51) {
                      objc_enumerationMutation(v48);
                    }
                    unsigned int v53 = +[NEPolicyCondition accountIdentifier:*(void *)(*((void *)&v216 + 1) + 8 * (void)k)];
                    [v22 addObject:v53];
                  }
                  id v50 = [v48 countByEnumeratingWithState:&v216 objects:v247 count:16];
                }
                while (v50);
              }

              id v17 = v139;
              id v21 = v152;
            }
            int v54 = isa_nsarray();
            if (v162 && v54)
            {
              long long v215 = 0u;
              long long v214 = 0u;
              long long v213 = 0u;
              long long v212 = 0u;
              id v55 = v130;
              id v56 = [v55 countByEnumeratingWithState:&v212 objects:v246 count:16];
              if (v56)
              {
                id v57 = v56;
                uint64_t v58 = *(void *)v213;
                do
                {
                  for (m = 0; m != v57; m = (char *)m + 1)
                  {
                    if (*(void *)v213 != v58) {
                      objc_enumerationMutation(v55);
                    }
                    uint64_t v60 = +[NEPolicyCondition domain:*(void *)(*((void *)&v212 + 1) + 8 * (void)m)];
                    [v150 addObject:v60];
                  }
                  id v57 = [v55 countByEnumeratingWithState:&v212 objects:v246 count:16];
                }
                while (v57);
              }

              id v17 = v139;
              id v21 = v152;
            }
            long long v211 = 0u;
            long long v210 = 0u;
            long long v208 = 0u;
            long long v209 = 0u;
            id v135 = v137;
            uint64_t v39 = v136;
            id v140 = [v135 countByEnumeratingWithState:&v208 objects:v245 count:16];
            if (v140)
            {
              uint64_t v138 = *(void *)v209;
              uint64_t v157 = v22;
              do
              {
                uint64_t v61 = 0;
                do
                {
                  if (*(void *)v209 != v138) {
                    objc_enumerationMutation(v135);
                  }
                  uint64_t v141 = v61;
                  uint64_t v62 = *(void *)(*((void *)&v208 + 1) + 8 * v61);
                  if (![v39 count])
                  {
                    if ([v152 count])
                    {
                      long long v182 = 0u;
                      long long v183 = 0u;
                      long long v180 = 0u;
                      long long v181 = 0u;
                      id v99 = v152;
                      id v161 = [v99 countByEnumeratingWithState:&v180 objects:v238 count:16];
                      if (v161)
                      {
                        uint64_t v100 = *(void *)v181;
                        id v159 = v99;
                        uint64_t v156 = *(void *)v181;
                        do
                        {
                          for (n = 0; n != v161; n = (char *)n + 1)
                          {
                            if (*(void *)v181 != v100) {
                              objc_enumerationMutation(v99);
                            }
                            uint64_t v102 = *(void *)(*((void *)&v180 + 1) + 8 * (void)n);
                            if ([v22 count])
                            {
                              long long v178 = 0u;
                              long long v179 = 0u;
                              long long v176 = 0u;
                              long long v177 = 0u;
                              id v103 = v22;
                              id v104 = [v103 countByEnumeratingWithState:&v176 objects:v237 count:16];
                              if (v104)
                              {
                                id v105 = v104;
                                uint64_t v106 = *(void *)v177;
                                do
                                {
                                  for (iid i = 0; ii != v105; iid i = (char *)ii + 1)
                                  {
                                    if (*(void *)v177 != v106) {
                                      objc_enumerationMutation(v103);
                                    }
                                    id v108 = [objc_alloc((Class)NSArray) initWithObjects:v62, v102, *(void *)(*((void *)&v176 + 1) + 8 * (void)ii), v163, 0];
                                    v16[2](v16, v108, 0);
                                  }
                                  id v105 = [v103 countByEnumeratingWithState:&v176 objects:v237 count:16];
                                }
                                while (v105);
                                id v22 = v157;
                                id v99 = v159;
                                uint64_t v100 = v156;
                              }
                            }
                            else
                            {
                              id v103 = [objc_alloc((Class)NSArray) initWithObjects:v62, v102, v163, nil];
                              v16[2](v16, v103, 0);
                            }
                          }
                          id v161 = [v99 countByEnumeratingWithState:&v180 objects:v238 count:16];
                        }
                        while (v161);
                      }
                      goto LABEL_166;
                    }
                    if (v147)
                    {
                      id v109 = [v145 matchDomains];
                      uint64_t v110 = [v145 matchSigningIdentifier];
                      uint64_t v111 = sub_1000363E8(v143, v109, v110, obj, v142);

                      if (v111)
                      {
                        id v99 = +[NEPolicyCondition domainFilter:v111];
                        if ([v22 count])
                        {
                          long long v174 = 0u;
                          long long v175 = 0u;
                          long long v172 = 0u;
                          long long v173 = 0u;
                          id v112 = v22;
                          id v113 = [v112 countByEnumeratingWithState:&v172 objects:v236 count:16];
                          if (v113)
                          {
                            id v114 = v113;
                            uint64_t v115 = *(void *)v173;
                            do
                            {
                              for (jj = 0; jj != v114; jj = (char *)jj + 1)
                              {
                                if (*(void *)v173 != v115) {
                                  objc_enumerationMutation(v112);
                                }
                                id v117 = [objc_alloc((Class)NSArray) initWithObjects:v62, v99, *(void *)(*((void *)&v172 + 1) + 8 * (void)jj), v163, 0];
                                v16[2](v16, v117, 0);
                              }
                              id v114 = [v112 countByEnumeratingWithState:&v172 objects:v236 count:16];
                            }
                            while (v114);
                          }
                        }
                        else
                        {
                          id v112 = [objc_alloc((Class)NSArray) initWithObjects:v62, v99, v163, 0];
                          v16[2](v16, v112, 0);
                        }

                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      if ([v22 count])
                      {
                        long long v170 = 0u;
                        long long v171 = 0u;
                        long long v168 = 0u;
                        long long v169 = 0u;
                        id v99 = v22;
                        id v118 = [v99 countByEnumeratingWithState:&v168 objects:v235 count:16];
                        if (v118)
                        {
                          id v119 = v118;
                          uint64_t v120 = *(void *)v169;
                          do
                          {
                            for (kk = 0; kk != v119; kk = (char *)kk + 1)
                            {
                              if (*(void *)v169 != v120) {
                                objc_enumerationMutation(v99);
                              }
                              id v122 = [objc_alloc((Class)NSArray) initWithObjects:v62, *(void *)(*((void *)&v168 + 1) + 8 * (void)kk), v163, 0];
                              v16[2](v16, v122, 0);
                            }
                            id v119 = [v99 countByEnumeratingWithState:&v168 objects:v235 count:16];
                          }
                          while (v119);
                        }
                      }
                      else
                      {
                        id v99 = [objc_alloc((Class)NSArray) initWithObjects:v62, v163];
                        v16[2](v16, v99, 0);
                      }
LABEL_166:
                    }
                    if (a3 && (([v152 count] != 0) | v147 & 1 || objc_msgSend(v22, "count")))
                    {
                      id v123 = [objc_alloc((Class)NSArray) initWithObjects:v62, v163, nil];
                      v16[2](v16, v123, 1);
                    }
                    long long v166 = 0u;
                    long long v167 = 0u;
                    long long v164 = 0u;
                    long long v165 = 0u;
                    id v146 = v150;
                    id v124 = [v146 countByEnumeratingWithState:&v164 objects:v234 count:16];
                    if (v124)
                    {
                      id v125 = v124;
                      uint64_t v126 = *(void *)v165;
                      do
                      {
                        for (mm = 0; mm != v125; mm = (char *)mm + 1)
                        {
                          if (*(void *)v165 != v126) {
                            objc_enumerationMutation(v146);
                          }
                          id v128 = [objc_alloc((Class)NSArray) initWithObjects:v62, *(void *)(*((void *)&v164 + 1) + 8 * (void)mm), v163, 0];
                          v162[2](v162, v128);
                        }
                        id v125 = [v146 countByEnumeratingWithState:&v164 objects:v234 count:16];
                      }
                      while (v125);
                    }
LABEL_178:
                    uint64_t v39 = v136;
                    goto LABEL_179;
                  }
                  long long v206 = 0u;
                  long long v207 = 0u;
                  long long v204 = 0u;
                  long long v205 = 0u;
                  id v146 = v39;
                  id v151 = [v146 countByEnumeratingWithState:&v204 objects:v244 count:16];
                  if (v151)
                  {
                    uint64_t v149 = *(void *)v205;
                    while (1)
                    {
                      uint64_t v63 = 0;
                      do
                      {
                        if (*(void *)v205 != v149) {
                          objc_enumerationMutation(v146);
                        }
                        uint64_t v153 = v63;
                        uint64_t v64 = *(void *)(*((void *)&v204 + 1) + 8 * v63);
                        id v65 = v157;
                        if ([v152 count])
                        {
                          long long v202 = 0u;
                          long long v203 = 0u;
                          long long v200 = 0u;
                          long long v201 = 0u;
                          id v66 = v152;
                          id v158 = [v66 countByEnumeratingWithState:&v200 objects:v243 count:16];
                          if (v158)
                          {
                            uint64_t v67 = *(void *)v201;
                            uint64_t v154 = *(void *)v201;
                            id v155 = v66;
                            do
                            {
                              for (nn = 0; nn != v158; nn = (char *)nn + 1)
                              {
                                if (*(void *)v201 != v67) {
                                  objc_enumerationMutation(v66);
                                }
                                uint64_t v69 = *(void *)(*((void *)&v200 + 1) + 8 * (void)nn);
                                if ([v65 count])
                                {
                                  int v160 = nn;
                                  long long v198 = 0u;
                                  long long v199 = 0u;
                                  long long v196 = 0u;
                                  long long v197 = 0u;
                                  id v70 = v65;
                                  id v71 = [v70 countByEnumeratingWithState:&v196 objects:v242 count:16];
                                  if (v71)
                                  {
                                    id v72 = v71;
                                    uint64_t v73 = *(void *)v197;
                                    do
                                    {
                                      for (i1 = 0; i1 != v72; i1 = (char *)i1 + 1)
                                      {
                                        if (*(void *)v197 != v73) {
                                          objc_enumerationMutation(v70);
                                        }
                                        id v75 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v69, *(void *)(*((void *)&v196 + 1) + 8 * (void)i1), v163, 0];
                                        v16[2](v16, v75, 0);
                                      }
                                      id v72 = [v70 countByEnumeratingWithState:&v196 objects:v242 count:16];
                                    }
                                    while (v72);
                                    id v66 = v155;
                                    id v65 = v157;
                                    uint64_t v67 = v154;
                                  }
                                  nn = v160;
                                }
                                else
                                {
                                  id v70 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v69, v163, 0];
                                  v16[2](v16, v70, 0);
                                }
                              }
                              id v158 = [v66 countByEnumeratingWithState:&v200 objects:v243 count:16];
                            }
                            while (v158);
                          }
LABEL_109:

                          goto LABEL_110;
                        }
                        if ((v147 & 1) == 0)
                        {
                          if ([v157 count])
                          {
                            long long v190 = 0u;
                            long long v191 = 0u;
                            long long v188 = 0u;
                            long long v189 = 0u;
                            id v66 = v157;
                            id v86 = [v66 countByEnumeratingWithState:&v188 objects:v240 count:16];
                            if (v86)
                            {
                              id v87 = v86;
                              uint64_t v88 = *(void *)v189;
                              do
                              {
                                int v89 = v66;
                                for (i2 = 0; i2 != v87; i2 = (char *)i2 + 1)
                                {
                                  if (*(void *)v189 != v88) {
                                    objc_enumerationMutation(v89);
                                  }
                                  id v91 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, *(void *)(*((void *)&v188 + 1) + 8 * (void)i2), v163, 0];
                                  v16[2](v16, v91, 0);
                                }
                                id v66 = v89;
                                id v87 = [v89 countByEnumeratingWithState:&v188 objects:v240 count:16];
                              }
                              while (v87);
                            }
                          }
                          else
                          {
                            id v66 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v163, nil];
                            v16[2](v16, v66, 0);
                          }
                          goto LABEL_109;
                        }
                        uint64_t v76 = [v145 matchDomains];
                        id v77 = [v145 matchSigningIdentifier];
                        uint64_t v78 = sub_1000363E8(v143, v76, v77, obj, v142);

                        if (v78)
                        {
                          id v66 = +[NEPolicyCondition domainFilter:v78];
                          if ([v157 count])
                          {
                            long long v194 = 0u;
                            long long v195 = 0u;
                            long long v192 = 0u;
                            long long v193 = 0u;
                            id v79 = v157;
                            id v80 = [v79 countByEnumeratingWithState:&v192 objects:v241 count:16];
                            if (v80)
                            {
                              id v81 = v80;
                              id v82 = v66;
                              uint64_t v83 = *(void *)v193;
                              do
                              {
                                for (i3 = 0; i3 != v81; i3 = (char *)i3 + 1)
                                {
                                  if (*(void *)v193 != v83) {
                                    objc_enumerationMutation(v79);
                                  }
                                  id v85 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v82, *(void *)(*((void *)&v192 + 1) + 8 * (void)i3), v163, 0];
                                  v16[2](v16, v85, 0);
                                }
                                id v81 = [v79 countByEnumeratingWithState:&v192 objects:v241 count:16];
                              }
                              while (v81);
                              id v65 = v157;
                              id v66 = v82;
                            }
                          }
                          else
                          {
                            id v79 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v66, v163, 0];
                            v16[2](v16, v79, 0);
                          }

                          goto LABEL_109;
                        }
LABEL_110:
                        if (a3 && (([v152 count] != 0) | v147 & 1 || objc_msgSend(v65, "count")))
                        {
                          id v92 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, v163, 0];
                          v16[2](v16, v92, 1);
                        }
                        long long v186 = 0u;
                        long long v187 = 0u;
                        long long v184 = 0u;
                        long long v185 = 0u;
                        id v93 = v150;
                        id v94 = [v93 countByEnumeratingWithState:&v184 objects:v239 count:16];
                        if (v94)
                        {
                          id v95 = v94;
                          uint64_t v96 = *(void *)v185;
                          do
                          {
                            for (i4 = 0; i4 != v95; i4 = (char *)i4 + 1)
                            {
                              if (*(void *)v185 != v96) {
                                objc_enumerationMutation(v93);
                              }
                              id v98 = [objc_alloc((Class)NSArray) initWithObjects:v62, v64, *(void *)(*((void *)&v184 + 1) + 8 * (void)i4), v163, 0];
                              v162[2](v162, v98);
                            }
                            id v95 = [v93 countByEnumeratingWithState:&v184 objects:v239 count:16];
                          }
                          while (v95);
                        }

                        uint64_t v63 = v153 + 1;
                      }
                      while ((id)(v153 + 1) != v151);
                      id v151 = [v146 countByEnumeratingWithState:&v204 objects:v244 count:16];
                      if (!v151)
                      {
                        id v22 = v157;
                        goto LABEL_178;
                      }
                    }
                  }
LABEL_179:

                  uint64_t v61 = v141 + 1;
                  id v17 = v139;
                  id v21 = v152;
                }
                while ((id)(v141 + 1) != v140);
                id v140 = [v135 countByEnumeratingWithState:&v208 objects:v245 count:16];
              }
              while (v140);
            }
          }
          else
          {
            uint64_t v39 = v136;
          }

          uint64_t v18 = v133 + 1;
        }
        while ((id)(v133 + 1) != v132);
        id v132 = [obj countByEnumeratingWithState:&v230 objects:v250 count:16];
      }
      while (v132);
    }
  }
}

void sub_100036240(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 56) result:*(void *)(a1 + 40) conditions:v12];
  id v6 = *(void **)(a1 + 48);
  if (v6) {
    id Property = objc_getProperty(v6, v4, 88, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v3, v5, Property);

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    id v11 = objc_getProperty(v10, v8, 96, 1);
  }
  else {
    id v11 = 0;
  }
  sub_10003116C(v9, v12, v11);
}

void sub_100036310(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [objc_alloc((Class)NEPolicy) initWithOrder:sub_1000317B4(a1[5]) + 5 result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 88, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v3, v8, Property);
}

uint64_t sub_1000363C4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

uint64_t sub_1000363E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (!v11) {
    goto LABEL_45;
  }
  uint64_t v13 = sub_1000314E0(v11, v9);
  if (v13) {
    goto LABEL_46;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
  if (objc_msgSend(objc_getProperty(v12, v14, 48, 1), "count"))
  {
    id v15 = 0;
    *(void *)id v129 = 0;
    while (1)
    {
      id v16 = v15;
      id v15 = +[NEVPNApp findRuleWithSameDomains:v10 matchSigningIdentifier:v9 startIndex:v129];

      if (!v15) {
        break;
      }
      uint64_t v17 = sub_1000314E0(v12, v15);
      if (v17)
      {
        uint64_t v13 = v17;
        id v18 = v9;
        os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
        uint64_t v19 = +[NSNumber numberWithUnsignedInteger:v13];
        [objc_getProperty(v12, v20, 48, 1) setObject:v19 forKeyedSubscript:v18];

        goto LABEL_46;
      }
    }
  }
  if (!v8 || ![v8 count])
  {
LABEL_45:
    uint64_t v13 = 0;
    goto LABEL_46;
  }
  id v82 = v12;
  id v83 = v10;
  id v80 = v9;
  id v81 = v8;
  id v21 = v8;
  id v88 = objc_alloc_init((Class)NSMutableDictionary);
  id v89 = objc_alloc_init((Class)NSMutableDictionary);
  id v22 = objc_alloc_init((Class)NSMutableDictionary);
  memset(v142, 0, sizeof(v142));
  long long v141 = 0u;
  long long v140 = 0u;
  long long v139 = 0u;
  long long v138 = 0u;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  memset(v129, 0, sizeof(v129));
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  id obj = v21;
  id v23 = [obj countByEnumeratingWithState:&v108 objects:v128 count:16];
  if (!v23)
  {
    uint64_t v85 = 0;
    goto LABEL_48;
  }
  id v24 = v23;
  uint64_t v85 = 0;
  uint64_t v25 = *(void *)v109;
  do
  {
    for (id i = 0; i != v24; id i = (char *)i + 1)
    {
      if (*(void *)v109 != v25) {
        objc_enumerationMutation(obj);
      }
      [*(id *)(*((void *)&v108 + 1) + 8 * i) lowercaseString:v80];
      id v27 = objc_claimAutoreleasedReturnValue();
      id v28 = (const char *)[v27 UTF8String];
      int v29 = strlen(v28);
      id v30 = ne_log_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412802;
        *(void *)id v125 = a1;
        *(_WORD *)&v125[8] = 2080;
        *(void *)&v125[10] = v28;
        __int16 v126 = 1024;
        int v127 = v29;
        _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%@ perApp VPN domain %s <%d>", buf, 0x1Cu);
      }

      if (*v28 == 46) {
        uint64_t v31 = (uint8_t *)(v28 + 1);
      }
      else {
        uint64_t v31 = (uint8_t *)v28;
      }
      int v32 = v29 - (*v28 == 46);
      LODWORD(v104) = 0;
      if (!ne_trie_has_high_ascii()) {
        goto LABEL_30;
      }
      int v33 = ne_log_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)id v125 = v31;
        *(_WORD *)&v125[8] = 1024;
        *(_DWORD *)&v125[10] = v32;
        _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "perApp VPN domain - puny-coding %s <%d>", buf, 0x12u);
      }

      if (ne_tracker_validate_domain()) {
        BOOL v34 = (int)v104 < 1;
      }
      else {
        BOOL v34 = 1;
      }
      if (!v34)
      {
        buf[v104] = 0;
        id v35 = ne_log_obj();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v120 = 136315394;
          id v121 = v31;
          __int16 v122 = 2080;
          id v123 = buf;
          _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "perApp VPN domain - puny-coded %s -> %s", v120, 0x16u);
        }

        uint64_t v31 = buf;
LABEL_30:
        unsigned int v36 = strlen((const char *)v31);
        if (v36 - 255 >= 0xFFFFFF02)
        {
          uint64_t v38 = v36 - 1;
          uint64_t v39 = v129;
          do
            *v39++ = v31[v38--];
          while (v38 != -1);
          id v37 = v129;
          v129[v36] = 0;
        }
        else
        {
          id v37 = 0;
        }
        id v40 = [objc_alloc((Class)NSString) initWithCString:v37 encoding:4];
        id v41 = [objc_alloc((Class)NSString) initWithCString:v31 encoding:4];
        id v42 = [v89 objectForKeyedSubscript:v40];

        if (!v42) {
          [v89 setObject:v41 forKeyedSubscript:v40];
        }
        uint64_t v43 = [v88 objectForKeyedSubscript:v41];

        if (!v43)
        {
          [v88 setObject:v41 forKeyedSubscript:v41];
          v85 += (uint64_t)[v41 length];
        }

        goto LABEL_42;
      }
      id v40 = ne_log_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v120 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to puny-code domain", v120, 2u);
      }
LABEL_42:
    }
    id v24 = [obj countByEnumeratingWithState:&v108 objects:v128 count:16];
  }
  while (v24);
LABEL_48:

  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  id v86 = [v89 keyEnumerator];
  id v45 = [v86 countByEnumeratingWithState:&v104 objects:buf count:16];
  if (v45)
  {
    id v46 = v45;
    uint64_t v47 = *(void *)v105;
    do
    {
      for (j = 0; j != v46; j = (char *)j + 1)
      {
        if (*(void *)v105 != v47) {
          objc_enumerationMutation(v86);
        }
        id v49 = *(void **)(*((void *)&v104 + 1) + 8 * (void)j);
        long long v100 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        id v50 = [v89 keyEnumerator:v80];
        id v51 = [v50 countByEnumeratingWithState:&v100 objects:v120 count:16];
        if (v51)
        {
          id v52 = v51;
          uint64_t v53 = *(void *)v101;
          do
          {
            for (k = 0; k != v52; k = (char *)k + 1)
            {
              if (*(void *)v101 != v53) {
                objc_enumerationMutation(v50);
              }
              uint64_t v55 = *(void *)(*((void *)&v100 + 1) + 8 * (void)k);
              if (([v49 isEqual:v55] & 1) == 0)
              {
                id v56 = [v49 commonPrefixWithString:v55 options:2];
                if ([v56 length]) {
                  [v22 setObject:v56 forKeyedSubscript:v56];
                }
              }
            }
            id v52 = [v50 countByEnumeratingWithState:&v100 objects:v120 count:16];
          }
          while (v52);
        }
      }
      id v46 = [v86 countByEnumeratingWithState:&v104 objects:buf count:16];
    }
    while (v46);
  }

  if (![v22 count] && objc_msgSend(v89, "count") == (id)1)
  {
    id v57 = [v89 allKeys];
    uint64_t v58 = [v57 objectAtIndexedSubscript:0];

    [v22 setObject:v58 forKeyedSubscript:v58];
  }
  id v59 = ne_log_obj();
  id v12 = v82;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    id v76 = [v22 count];
    id v77 = [v88 count];
    id v78 = [v89 count];
    *(_DWORD *)id v112 = 134218752;
    id v113 = v76;
    __int16 v114 = 2048;
    id v115 = v77;
    __int16 v116 = 2048;
    id v117 = v78;
    __int16 v118 = 2048;
    uint64_t v119 = v85;
    _os_log_debug_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "perApp VPN domain - Derived %lu unique prefixes, %lu unique domains, %lu reversed domains, %lu total bytes", v112, 0x2Au);
  }

  if ([v88 count])
  {
    id v60 = [v22 count];
    uint64_t v61 = [v88 allKeys];
  }
  else
  {
    id v60 = 0;
    uint64_t v61 = 0;
  }

  uint64_t v62 = [[NETrie alloc] initWithDomains:v61 prefixCount:v60 reverse:1 partialSearchAllowed:1 partialSearchTerminator:46 extra_bytes:40];
  uint64_t v63 = v62;
  if (!v62)
  {
    id v65 = ne_log_obj();
    id v9 = v80;
    id v8 = v81;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v129 = 138412546;
      *(void *)&v129[4] = a1;
      *(_WORD *)&v129[12] = 2080;
      *(void *)&v129[14] = "-[NESMPolicySession getDomainTrie:matchSigningIdentifier:appRules:masterSession:]";
      _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "%@: %s - failed to build domain trie", v129, 0x16u);
    }
    goto LABEL_95;
  }
  [(NETrie *)v62 trie];
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 4) = v98 - 40;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 8) = v97;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 12) = v96;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 16) = v95;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 20) = v94;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 24) = v93;
  [(NETrie *)v63 trie];
  *(_DWORD *)(v99 + 28) = v92;
  *(void *)(v99 + 32) = 0x30000002ELL;
  id v64 = objc_alloc((Class)NSData);
  [(NETrie *)v63 trie];
  id v65 = [v64 initWithBytes:v99 length:v91];
  id v9 = v80;
  id v66 = v80;
  os_unfair_lock_assert_owner((const os_unfair_lock *)&unk_1000D7C00);
  id v68 = [objc_getProperty(v82, v67, 16, 1) addDomainTrieWithData:v65];
  id v8 = v81;
  if (v68)
  {
    uint64_t v13 = (uint64_t)v68;
    if (nelog_is_debug_logging_enabled())
    {
      uint64_t v69 = ne_log_obj();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        id Property = objc_getProperty(v82, v70, 48, 1);
        *(_DWORD *)id v129 = 138413058;
        *(void *)&v129[4] = v82;
        *(_WORD *)&v129[12] = 2080;
        *(void *)&v129[14] = "-[NESMPolicyMasterSession addDomainTrieWithData:matchSigningIdentifier:]";
        *(_WORD *)&v129[22] = 2048;
        *(void *)&v129[24] = v13;
        LOWORD(v130) = 2112;
        *(void *)((char *)&v130 + 2) = Property;
        _os_log_debug_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "%@: %s - Added domain trie - ID %lu %@", v129, 0x2Au);
      }
    }
    id v71 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13, v80);
    [objc_getProperty(v82, v72, 48, 1) setObject:v71 forKeyedSubscript:v66];
  }
  else
  {
    id v71 = ne_log_obj();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v129 = 138412546;
      *(void *)&v129[4] = v82;
      *(_WORD *)&v129[12] = 2080;
      *(void *)&v129[14] = "-[NESMPolicyMasterSession addDomainTrieWithData:matchSigningIdentifier:]";
      _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%@: %s - Failed to add domain trie", v129, 0x16u);
    }
    uint64_t v13 = 0;
  }

  if (!v13)
  {
    int v74 = *__error();
    if (strerror_r(v74, (char *)v129, 0x80uLL)) {
      v129[0] = 0;
    }
    id v75 = ne_log_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)id v125 = v74;
      *(_WORD *)&v125[4] = 2080;
      *(void *)&v125[6] = v129;
      _os_log_fault_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "Failed to add domain trie: [%d] %s", buf, 0x12u);
    }

LABEL_95:
    uint64_t v13 = 0;
    goto LABEL_96;
  }
  uint64_t v73 = ne_log_obj();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    [(NETrie *)v63 trie];
    *(_DWORD *)id v129 = 134218240;
    *(void *)&v129[4] = v90;
    *(_WORD *)&v129[12] = 2048;
    *(void *)&v129[14] = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Added domain trie of length %zu <id %lu>", v129, 0x16u);
  }

LABEL_96:
  id v10 = v83;
LABEL_46:

  return v13;
}

uint64_t sub_1000370A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v89 = sub_1000317B4(*(void *)(a1 + 32));
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    uint64_t v74 = *(void *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 64, 1);
    }
    LODWORD(buffer[0]) = 138412546;
    *(void *)((char *)buffer + 4) = v74;
    WORD6(buffer[0]) = 2112;
    *(void *)((char *)buffer + 14) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  id v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 64, 1);
  }
  else {
    id v8 = 0;
  }
  sub_10002F180(v3, v8);
  id v9 = ne_log_large_obj();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v75 = *(id *)(a1 + 32);
    uint64_t v76 = *(void *)(a1 + 40);
    if (v75) {
      id v75 = objc_getProperty(v75, v10, 72, 1);
    }
    LODWORD(buffer[0]) = 138412546;
    *(void *)((char *)buffer + 4) = v76;
    WORD6(buffer[0]) = 2112;
    *(void *)((char *)buffer + 14) = v75;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "low control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  id v12 = *(void **)(a1 + 32);
  if (v12) {
    id v13 = objc_getProperty(v12, v11, 72, 1);
  }
  else {
    id v13 = 0;
  }
  sub_10003033C(v3, v13);
  if (isa_nsarray() && [*(id *)(a1 + 48) count] && *(void *)(a1 + 40))
  {
    SEL v14 = &AnalyticsSendEventLazy_ptr;
    id v83 = +[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:");
    id v82 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 40) secondaryResultType:1];
    if (*(unsigned char *)(a1 + 56))
    {
      id v80 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      id v88 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
    }
    else
    {
      id v88 = 0;
      id v80 = 0;
    }
    if (*(unsigned char *)(a1 + 57))
    {
      id v79 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
      id v87 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
    }
    else
    {
      id v87 = 0;
      id v79 = 0;
    }
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    id obj = *(id *)(a1 + 48);
    id v17 = [obj countByEnumeratingWithState:&v91 objects:v100 count:16];
    if (v17)
    {
      id v18 = v17;
      unsigned int v86 = v89 + 2;
      uint64_t v19 = v89 + 6;
      uint64_t v20 = *(void *)v92;
      id v21 = &AnalyticsSendEventLazy_ptr;
      uint64_t v81 = *(void *)v92;
      do
      {
        id v22 = 0;
        id v84 = v18;
        do
        {
          if (*(void *)v92 != v20) {
            objc_enumerationMutation(obj);
          }
          id v23 = *(void **)(*((void *)&v91 + 1) + 8 * (void)v22);
          uint64_t v99 = 0;
          memset(buffer, 0, sizeof(buffer));
          if (proc_pidinfo((int)[v23 intValue], 17, 1uLL, buffer, 56) == 56)
          {
            id v24 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:buffer];
            uint64_t v25 = +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", [v23 intValue]);
            v97[0] = v25;
            uint64_t v90 = v24;
            uint64_t v26 = +[NEPolicyCondition effectiveApplication:v24];
            v97[1] = v26;
            id v27 = +[NSArray arrayWithObjects:v97 count:2];

            if (*(unsigned char *)(a1 + 56))
            {
              id v29 = [objc_alloc((Class)v21[478]) initWithOrder:v89 result:v88 conditions:v27];
              id v30 = *(void **)(a1 + 32);
              if (v30) {
                id v31 = objc_getProperty(v30, v28, 64, 1);
              }
              else {
                id v31 = 0;
              }
              sub_1000312DC((BOOL)v3, v29, v31);
            }
            if (*(unsigned char *)(a1 + 57))
            {
              id v33 = [objc_alloc((Class)v21[478]) initWithOrder:v86 result:v87 conditions:v27];
              BOOL v34 = *(void **)(a1 + 32);
              if (v34) {
                id v35 = objc_getProperty(v34, v32, 64, 1);
              }
              else {
                id v35 = 0;
              }
              sub_1000312DC((BOOL)v3, v33, v35);
            }
            id v37 = [objc_alloc((Class)v21[478]) initWithOrder:v19 result:v83 conditions:v27];
            uint64_t v38 = *(void **)(a1 + 32);
            if (v38) {
              id v39 = objc_getProperty(v38, v36, 64, 1);
            }
            else {
              id v39 = 0;
            }
            sub_1000312DC((BOOL)v3, v37, v39);

            id v40 = +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", [v23 intValue]);
            v96[0] = v40;
            id v41 = +[NEPolicyCondition effectiveApplication:v90];
            v96[1] = v41;
            id v42 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
            v96[2] = v42;
            uint64_t v43 = +[NSArray arrayWithObjects:v96 count:3];

            if (*(unsigned char *)(a1 + 56))
            {
              id v45 = [objc_alloc((Class)NEPolicy) initWithOrder:v89 result:v88 conditions:v43];
              id v46 = *(void **)(a1 + 32);
              if (v46) {
                id v47 = objc_getProperty(v46, v44, 64, 1);
              }
              else {
                id v47 = 0;
              }
              sub_1000312DC((BOOL)v3, v45, v47);
            }
            if (*(unsigned char *)(a1 + 57))
            {
              id v49 = [objc_alloc((Class)NEPolicy) initWithOrder:v86 result:v87 conditions:v43];
              id v50 = *(void **)(a1 + 32);
              if (v50) {
                id v51 = objc_getProperty(v50, v48, 64, 1);
              }
              else {
                id v51 = 0;
              }
              sub_1000312DC((BOOL)v3, v49, v51);
            }
            id v53 = [objc_alloc((Class)NEPolicy) initWithOrder:v19 result:v82 conditions:v43];
            int v54 = *(void **)(a1 + 32);
            if (v54) {
              id v55 = objc_getProperty(v54, v52, 64, 1);
            }
            else {
              id v55 = 0;
            }
            sub_1000312DC((BOOL)v3, v53, v55);

            id v57 = *(void **)(a1 + 32);
            if (v57) {
              id v58 = objc_getProperty(v57, v56, 72, 1);
            }
            else {
              id v58 = 0;
            }
            sub_10003116C((BOOL)v3, v43, v58);
            id v59 = objc_alloc((Class)NEPolicy);
            if (*(void *)(a1 + 32)) {
              uint64_t v60 = 18000;
            }
            else {
              uint64_t v60 = 0;
            }
            if (*(void *)(a1 + 32)) {
              uint64_t v61 = 18120;
            }
            else {
              uint64_t v61 = 0;
            }
            uint64_t v62 = [v14[480] skipWithOrder:v61];
            uint64_t v63 = +[NEPolicyCondition effectiveApplication:v90];
            v95[0] = v63;
            id v64 = +[NEPolicyCondition allInterfaces];
            v95[1] = v64;
            id v65 = +[NSArray arrayWithObjects:v95 count:2];
            id v67 = [v59 initWithOrder:v60 result:v62 conditions:v65];
            id v68 = *(void **)(a1 + 32);
            if (v68) {
              id v69 = objc_getProperty(v68, v66, 64, 1);
            }
            else {
              id v69 = 0;
            }
            sub_1000312DC((BOOL)v3, v67, v69);

            SEL v14 = &AnalyticsSendEventLazy_ptr;
            uint64_t v19 = v89 + 6;
            id v18 = v84;
            uint64_t v20 = v81;
            id v21 = &AnalyticsSendEventLazy_ptr;
          }
          id v22 = (char *)v22 + 1;
        }
        while (v18 != v22);
        id v70 = [obj countByEnumeratingWithState:&v91 objects:v100 count:16];
        id v18 = v70;
      }
      while (v70);
    }

    uint64_t v15 = sub_10002F2DC(v3);
    if (v15)
    {
      id v71 = ne_log_large_obj();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        id v77 = *(id *)(a1 + 32);
        uint64_t v78 = *(void *)(a1 + 40);
        if (v77) {
          id v77 = objc_getProperty(v77, v72, 64, 1);
        }
        LODWORD(buffer[0]) = 138412546;
        *(void *)((char *)buffer + 4) = v78;
        WORD6(buffer[0]) = 2112;
        *(void *)((char *)buffer + 14) = v77;
        _os_log_debug_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "control Policy IDs added %@: %@", (uint8_t *)buffer, 0x16u);
      }
    }
  }
  else
  {
    sub_10002F2DC(v3);
    uint64_t v15 = 1;
  }

  return v15;
}

id sub_10003790C(uint64_t a1, void *a2, void *a3)
{
  id v3 = 0;
  if (a1 && a2)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%@-@%@", v5, v6];

    id v8 = (const char *)[v7 UTF8String];
    CC_LONG v9 = strlen(v8);
    CC_SHA256(v8, v9, md);
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:md];
  }

  return v3;
}

void sub_100037A00(uint64_t a1, int a2, void *a3, char a4, char a5)
{
  id v9 = a3;
  id v10 = v9;
  if (a1)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_100037B28;
        v12[3] = &unk_1000C5CD8;
        v12[4] = a1;
        id v13 = v9;
        char v15 = a4;
        char v16 = a5;
        int v14 = a2;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v12);
      }
    }
    else
    {
      id v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "No pid or mach-O UUIDs available for VPN plugin, cannot install VPN control pass policies", buf, 2u);
      }
    }
  }
}

uint64_t sub_100037B28(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 64, 1);
  }
  id v6 = Property;
  id v7 = ne_log_large_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v86 = *(id *)(a1 + 32);
    uint64_t v87 = *(void *)(a1 + 40);
    if (v86) {
      id v86 = objc_getProperty(v86, v8, 64, 1);
    }
    LODWORD(buffer[0]) = 138412546;
    *(void *)((char *)buffer + 4) = v87;
    WORD6(buffer[0]) = 2112;
    *(void *)((char *)buffer + 14) = v86;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "control pass Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  sub_10002F180(v4, v6);
  id v9 = ne_log_large_obj();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v88 = *(id *)(a1 + 32);
    uint64_t v89 = *(void *)(a1 + 40);
    if (v88) {
      id v88 = objc_getProperty(v88, v10, 72, 1);
    }
    LODWORD(buffer[0]) = 138412546;
    *(void *)((char *)buffer + 4) = v89;
    WORD6(buffer[0]) = 2112;
    *(void *)((char *)buffer + 14) = v88;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "low control Policy IDs to be removed %@: %@", (uint8_t *)buffer, 0x16u);
  }

  id v12 = *(void **)(a1 + 32);
  if (v12) {
    id v13 = objc_getProperty(v12, v11, 72, 1);
  }
  else {
    id v13 = 0;
  }
  sub_10003033C(v4, v13);
  id v14 = +[NEProcessInfo copyDNSUUIDs];
  if (v14)
  {
    id v15 = +[NEProcessInfo copyNEHelperUUIDs];
    if (v15)
    {
      unsigned int v98 = sub_1000317B4(*(void *)(a1 + 32));
      unsigned int v114 = v98 + 2;
      long long v105 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 40) secondaryResultType:1];
      char v16 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 40)];
      if (*(unsigned char *)(a1 + 52))
      {
        uint64_t v101 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
        id v17 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
      }
      else
      {
        id v17 = 0;
        uint64_t v101 = 0;
      }
      if (*(unsigned char *)(a1 + 53))
      {
        uint64_t v100 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
        long long v102 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
      }
      else
      {
        long long v102 = 0;
        uint64_t v100 = 0;
      }
      uint64_t v125 = 0;
      memset(buffer, 0, sizeof(buffer));
      if (proc_pidinfo(*(_DWORD *)(a1 + 48), 17, 1uLL, buffer, 56) == 56
        && (id v19 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:buffer]) != 0)
      {
        id v20 = v19;
        int v96 = v17;
        id v21 = objc_alloc_init((Class)NSMutableArray);
        id v22 = +[NEPolicyCondition effectiveApplication:v20];
        [v21 addObject:v22];

        id v23 = +[NEPolicyCondition realApplication:v20];
        [v21 addObject:v23];

        id v24 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
        [v21 addObject:v24];

        uint64_t v25 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 48)];
        [v21 addObject:v25];

        id v26 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 + 2 result:v105 conditions:v21];
        BOOL v27 = sub_1000312DC((BOOL)v4, v26, v6);

        long long v103 = v20;
        if (v27)
        {
          unsigned int v114 = v98 + 3;
          id v28 = objc_alloc_init((Class)NSMutableArray);

          id v29 = +[NEPolicyCondition effectiveApplication:v20];
          [v28 addObject:v29];

          id v30 = +[NEPolicyCondition realApplication:v20];
          [v28 addObject:v30];

          id v31 = +[NEPolicyCondition allInterfaces];
          [v28 addObject:v31];

          int v32 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 48)];
          [v28 addObject:v32];

          id v94 = v28;
          id v33 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 + 3 result:v16 conditions:v28];
          LODWORD(v32) = sub_1000312DC((BOOL)v4, v33, v6);

          if (v32)
          {
            long long v93 = v14;
            if (v96)
            {
              id v35 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 result:v96 conditions:v28];
              unsigned int v36 = *(void **)(a1 + 32);
              if (v36) {
                id v37 = objc_getProperty(v36, v34, 64, 1);
              }
              else {
                id v37 = 0;
              }
              sub_1000312DC((BOOL)v4, v35, v37);
            }
            if (v102)
            {
              id v39 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 + 1 result:v102 conditions:v28];
              id v40 = *(void **)(a1 + 32);
              if (v40) {
                id v41 = objc_getProperty(v40, v38, 64, 1);
              }
              else {
                id v41 = 0;
              }
              sub_1000312DC((BOOL)v4, v39, v41);
            }
            long long v104 = v6;
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            id v92 = v15;
            id obj = v15;
            id v42 = [obj countByEnumeratingWithState:&v110 objects:v123 count:16];
            if (v42)
            {
              id v43 = v42;
              uint64_t v44 = *(void *)v111;
              while (2)
              {
                for (id i = 0; i != v43; id i = (char *)i + 1)
                {
                  if (*(void *)v111 != v44) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v46 = *(void *)(*((void *)&v110 + 1) + 8 * i);
                  id v47 = objc_alloc_init((Class)NSMutableArray);
                  id v48 = +[NEPolicyCondition effectiveApplication:v103];
                  [v47 addObject:v48];

                  id v49 = +[NEPolicyCondition realApplication:v46];
                  [v47 addObject:v49];

                  id v50 = +[NEPolicyCondition allInterfaces];
                  [v47 addObject:v50];

                  id v51 = +[NEPolicyCondition entitlement];
                  [v47 addObject:v51];

                  id v52 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 48)];
                  [v47 addObject:v52];

                  id v53 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 + 4 result:v105 conditions:v47];
                  LODWORD(v46) = sub_1000312DC((BOOL)v4, v53, v104);

                  if (!v46)
                  {
                    uint64_t v18 = 0;
                    id v6 = v104;
                    id v14 = v93;
LABEL_71:
                    id v15 = v92;
                    id v83 = (void *)v100;
                    id v84 = (void *)v101;
                    id v17 = v96;
                    goto LABEL_72;
                  }
                }
                id v43 = [obj countByEnumeratingWithState:&v110 objects:v123 count:16];
                if (v43) {
                  continue;
                }
                break;
              }
            }

            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            id v14 = v93;
            id obj = v93;
            id v54 = [obj countByEnumeratingWithState:&v106 objects:v122 count:16];
            id v55 = NSCharacterSet_ptr;
            if (v54)
            {
              id v56 = v54;
              uint64_t v95 = *(void *)v107;
              while (2)
              {
                for (j = 0; j != v56; j = (char *)j + 1)
                {
                  if (*(void *)v107 != v95) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v58 = *(void *)(*((void *)&v106 + 1) + 8 * (void)j);
                  id v59 = objc_alloc_init((Class)v55[10]);
                  uint64_t v60 = +[NEPolicyCondition effectiveApplication:v103];
                  [v59 addObject:v60];

                  uint64_t v61 = +[NEPolicyCondition realApplication:v58];
                  [v59 addObject:v61];

                  uint64_t v62 = +[NEPolicyCondition allInterfaces];
                  [v59 addObject:v62];

                  uint64_t v63 = +[NEPolicyCondition entitlement];
                  [v59 addObject:v63];

                  id v64 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 48)];
                  [v59 addObject:v64];

                  id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 + 5 result:v105 conditions:v59];
                  LODWORD(v60) = sub_1000312DC((BOOL)v4, v65, v104);

                  if (!v60)
                  {

                    uint64_t v18 = 0;
                    id v6 = v104;
                    goto LABEL_71;
                  }
                  if (v96)
                  {
                    id v66 = [objc_alloc((Class)NEPolicy) initWithOrder:v98 result:v96 conditions:v59];
                    sub_1000312DC((BOOL)v4, v66, v104);
                  }
                  id v55 = NSCharacterSet_ptr;
                }
                id v56 = [obj countByEnumeratingWithState:&v106 objects:v122 count:16];
                if (v56) {
                  continue;
                }
                break;
              }
            }

            unsigned int v114 = v98 + 6;
            id v67 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 48)];
            v121[0] = v67;
            id v68 = +[NEPolicyCondition allInterfaces];
            v121[1] = v68;
            id v70 = +[NSArray arrayWithObjects:v121 count:2];
            id v71 = *(void **)(a1 + 32);
            if (v71) {
              id v72 = objc_getProperty(v71, v69, 72, 1);
            }
            else {
              id v72 = 0;
            }
            sub_10003116C((BOOL)v4, v70, v72);

            id v99 = objc_alloc((Class)NEPolicy);
            if (*(void *)(a1 + 32)) {
              uint64_t v73 = 18000;
            }
            else {
              uint64_t v73 = 0;
            }
            if (*(void *)(a1 + 32)) {
              uint64_t v74 = 18120;
            }
            else {
              uint64_t v74 = 0;
            }
            id v75 = +[NEPolicyResult skipWithOrder:v74];
            uint64_t v76 = +[NEPolicyCondition effectiveApplication:v103];
            v120[0] = v76;
            id v77 = +[NEPolicyCondition allInterfaces];
            v120[1] = v77;
            uint64_t v78 = +[NSArray arrayWithObjects:v120 count:2];
            id v79 = [v99 initWithOrder:v73 result:v75 conditions:v78];
            sub_1000312DC((BOOL)v4, v79, v104);

            uint64_t v80 = *(void *)(a1 + 32);
            LODWORD(v79) = *(_DWORD *)(a1 + 48);
            uint64_t v119 = v103;
            uint64_t v81 = +[NSArray arrayWithObjects:&v119 count:1];
            unsigned int v82 = v79;
            id v6 = v104;
            LODWORD(v80) = sub_10003871C(v80, v4, v82, v81, v105, v104, &v114);

            if (v80)
            {
              id v17 = v96;
              id v83 = (void *)v100;
              if (sub_10002F2DC(v4))
              {
                id obj = ne_log_large_obj();
                id v15 = v92;
                id v14 = v93;
                if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v91 = *(void *)(a1 + 40);
                  *(_DWORD *)buf = 138412546;
                  uint64_t v116 = v91;
                  __int16 v117 = 2112;
                  __int16 v118 = v104;
                  _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "control pass Policy IDs added %@: %@", buf, 0x16u);
                }
                uint64_t v18 = 1;
                id v84 = (void *)v101;
LABEL_72:
              }
              else
              {
                uint64_t v18 = 0;
                id v15 = v92;
                id v14 = v93;
                id v84 = (void *)v101;
              }
            }
            else
            {
              uint64_t v18 = 0;
              id v15 = v92;
              id v14 = v93;
              id v83 = (void *)v100;
              id v84 = (void *)v101;
              id v17 = v96;
            }
          }
          else
          {
            uint64_t v18 = 0;
            id v17 = v96;
            id v83 = (void *)v100;
            id v84 = (void *)v101;
          }
          uint64_t v85 = v94;
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v85 = v21;
          id v17 = v96;
          id v83 = (void *)v100;
          id v84 = (void *)v101;
        }
      }
      else
      {
        uint64_t v18 = 0;
        id v83 = (void *)v100;
        id v84 = (void *)v101;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

uint64_t sub_10003871C(uint64_t a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, unsigned int *a7)
{
  id v103 = a2;
  id v12 = a4;
  id v102 = a5;
  id v101 = a6;
  if (a1)
  {
    id v13 = +[NEProcessInfo copyDNSUUIDs];
    if (v13)
    {
      id v14 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/securityd"];
      if (v14)
      {
        id v96 = v12;
        id v15 = ne_log_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Adding DNS policies for securityd", buf, 2u);
        }

        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        id v94 = v14;
        id v16 = v14;
        uint64_t v95 = v16;
        id v87 = [v16 countByEnumeratingWithState:&v132 objects:v144 count:16];
        id v97 = v13;
        if (v87)
        {
          uint64_t v17 = *(void *)v133;
          uint64_t v83 = *(void *)v133;
          do
          {
            uint64_t v18 = 0;
            do
            {
              if (*(void *)v133 != v17) {
                objc_enumerationMutation(v16);
              }
              uint64_t v90 = v18;
              uint64_t v19 = *(void *)(*((void *)&v132 + 1) + 8 * v18);
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              id obj = v13;
              id v20 = [obj countByEnumeratingWithState:&v128 objects:v143 count:16];
              if (v20)
              {
                id v21 = v20;
                uint64_t v22 = *(void *)v129;
                while (2)
                {
                  for (id i = 0; i != v21; id i = (char *)i + 1)
                  {
                    if (*(void *)v129 != v22) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v24 = *(void *)(*((void *)&v128 + 1) + 8 * i);
                    id v25 = objc_alloc_init((Class)NSMutableArray);
                    id v26 = +[NEPolicyCondition effectiveApplication:v19];
                    [v25 addObject:v26];

                    BOOL v27 = +[NEPolicyCondition realApplication:v24];
                    [v25 addObject:v27];

                    id v28 = +[NEPolicyCondition allInterfaces];
                    [v25 addObject:v28];

                    id v29 = +[NEPolicyCondition entitlement];
                    [v25 addObject:v29];

                    id v30 = [objc_alloc((Class)NEPolicy) initWithOrder:*a7 result:v102 conditions:v25];
                    LODWORD(v24) = sub_1000312DC((BOOL)v103, v30, v101);

                    if (!v24)
                    {
LABEL_79:
                      id v12 = v96;
                      id v13 = v97;
                      id v14 = v94;
                      id v47 = v95;
LABEL_80:

                      uint64_t v78 = 0;
                      goto LABEL_81;
                    }
                    ++*a7;
                  }
                  id v21 = [obj countByEnumeratingWithState:&v128 objects:v143 count:16];
                  if (v21) {
                    continue;
                  }
                  break;
                }
              }

              uint64_t v18 = v90 + 1;
              id v13 = v97;
              id v16 = v95;
              uint64_t v17 = v83;
            }
            while ((id)(v90 + 1) != v87);
            id v87 = [v95 countByEnumeratingWithState:&v132 objects:v144 count:16];
          }
          while (v87);
        }

        id v31 = ne_log_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Adding securityd policies for neagent", buf, 2u);
        }

        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        id v32 = v12;
        id v88 = [v32 countByEnumeratingWithState:&v124 objects:v142 count:16];
        if (v88)
        {
          uint64_t v33 = *(void *)v125;
          uint64_t v91 = v32;
          uint64_t v84 = *(void *)v125;
          do
          {
            BOOL v34 = 0;
            do
            {
              if (*(void *)v125 != v33) {
                objc_enumerationMutation(v32);
              }
              uint64_t v35 = *(void *)(*((void *)&v124 + 1) + 8 * (void)v34);
              long long v120 = 0u;
              long long v121 = 0u;
              long long v122 = 0u;
              long long v123 = 0u;
              id obj = v16;
              id v36 = [obj countByEnumeratingWithState:&v120 objects:v141 count:16];
              if (v36)
              {
                id v37 = v36;
                uint64_t v38 = *(void *)v121;
                while (2)
                {
                  for (j = 0; j != v37; j = (char *)j + 1)
                  {
                    if (*(void *)v121 != v38) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v40 = *(void *)(*((void *)&v120 + 1) + 8 * (void)j);
                    id v25 = objc_alloc_init((Class)NSMutableArray);
                    id v41 = +[NEPolicyCondition effectiveApplication:v35];
                    [v25 addObject:v41];

                    id v42 = +[NEPolicyCondition effectivePID:a3];
                    [v25 addObject:v42];

                    id v43 = +[NEPolicyCondition entitlement];
                    [v25 addObject:v43];

                    uint64_t v44 = +[NEPolicyCondition realApplication:v40];
                    [v25 addObject:v44];

                    id v45 = +[NEPolicyCondition allInterfaces];
                    [v25 addObject:v45];

                    id v46 = [objc_alloc((Class)NEPolicy) initWithOrder:*a7 result:v102 conditions:v25];
                    LODWORD(v43) = sub_1000312DC((BOOL)v103, v46, v101);

                    if (!v43)
                    {
                      id v47 = v91;
                      id v14 = v94;
                      id v12 = v96;
                      id v13 = v97;
                      goto LABEL_80;
                    }
                    ++*a7;
                  }
                  id v37 = [obj countByEnumeratingWithState:&v120 objects:v141 count:16];
                  if (v37) {
                    continue;
                  }
                  break;
                }
              }

              BOOL v34 = (char *)v34 + 1;
              id v32 = v91;
              id v16 = v95;
              id v12 = v96;
              uint64_t v33 = v84;
            }
            while (v34 != v88);
            id v88 = [v91 countByEnumeratingWithState:&v124 objects:v142 count:16];
          }
          while (v88);
        }

        id v47 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/trustd"];
        if (v47)
        {
          id v92 = v32;
          id v48 = ne_log_obj();
          id v13 = v97;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Adding DNS policies for trustd", buf, 2u);
          }

          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          id v49 = v47;
          uint64_t v85 = (char *)[v49 countByEnumeratingWithState:&v116 objects:v140 count:16];
          uint64_t v89 = v49;
          if (v85)
          {
            uint64_t v50 = *(void *)v117;
            uint64_t v95 = v47;
            uint64_t v81 = *(void *)v117;
            do
            {
              id v51 = 0;
              do
              {
                if (*(void *)v117 != v50) {
                  objc_enumerationMutation(v49);
                }
                id obja = v51;
                uint64_t v52 = *(void *)(*((void *)&v116 + 1) + 8 * (void)v51);
                long long v112 = 0u;
                long long v113 = 0u;
                long long v114 = 0u;
                long long v115 = 0u;
                id v25 = v13;
                id v53 = [v25 countByEnumeratingWithState:&v112 objects:v139 count:16];
                if (v53)
                {
                  id v54 = v53;
                  uint64_t v55 = *(void *)v113;
                  while (2)
                  {
                    for (k = 0; k != v54; k = (char *)k + 1)
                    {
                      if (*(void *)v113 != v55) {
                        objc_enumerationMutation(v25);
                      }
                      uint64_t v57 = *(void *)(*((void *)&v112 + 1) + 8 * (void)k);
                      id v58 = objc_alloc_init((Class)NSMutableArray);
                      id v59 = +[NEPolicyCondition effectiveApplication:v52];
                      [v58 addObject:v59];

                      uint64_t v60 = +[NEPolicyCondition realApplication:v57];
                      [v58 addObject:v60];

                      uint64_t v61 = +[NEPolicyCondition allInterfaces];
                      [v58 addObject:v61];

                      uint64_t v62 = +[NEPolicyCondition entitlement];
                      [v58 addObject:v62];

                      id v63 = [objc_alloc((Class)NEPolicy) initWithOrder:*a7 result:v102 conditions:v58];
                      LODWORD(v59) = sub_1000312DC((BOOL)v103, v63, v101);

                      if (!v59)
                      {
                        id obj = v89;
LABEL_78:

                        goto LABEL_79;
                      }
                      ++*a7;
                    }
                    id v54 = [v25 countByEnumeratingWithState:&v112 objects:v139 count:16];
                    if (v54) {
                      continue;
                    }
                    break;
                  }
                }

                id v51 = obja + 1;
                id v49 = v89;
                id v12 = v96;
                id v13 = v97;
                id v47 = v95;
                uint64_t v50 = v81;
              }
              while (obja + 1 != v85);
              uint64_t v85 = (char *)[v89 countByEnumeratingWithState:&v116 objects:v140 count:16];
            }
            while (v85);
          }

          id v64 = ne_log_obj();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "Adding trustd policies for neagent", buf, 2u);
          }

          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          id obj = v92;
          id v82 = [obj countByEnumeratingWithState:&v108 objects:v138 count:16];
          if (v82)
          {
            uint64_t v95 = v47;
            uint64_t v65 = *(void *)v109;
            uint64_t v80 = *(void *)v109;
            while (2)
            {
              uint64_t v66 = 0;
              do
              {
                if (*(void *)v109 != v65) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v86 = v66;
                uint64_t v93 = *(void *)(*((void *)&v108 + 1) + 8 * v66);
                long long v104 = 0u;
                long long v105 = 0u;
                long long v106 = 0u;
                long long v107 = 0u;
                id v25 = v49;
                id v67 = [v25 countByEnumeratingWithState:&v104 objects:v137 count:16];
                if (v67)
                {
                  id v68 = v67;
                  uint64_t v69 = *(void *)v105;
LABEL_65:
                  uint64_t v70 = 0;
                  while (1)
                  {
                    if (*(void *)v105 != v69) {
                      objc_enumerationMutation(v25);
                    }
                    uint64_t v71 = *(void *)(*((void *)&v104 + 1) + 8 * v70);
                    id v58 = objc_alloc_init((Class)NSMutableArray);
                    id v72 = +[NEPolicyCondition effectiveApplication:v93];
                    [v58 addObject:v72];

                    uint64_t v73 = +[NEPolicyCondition effectivePID:a3];
                    [v58 addObject:v73];

                    uint64_t v74 = +[NEPolicyCondition entitlement];
                    [v58 addObject:v74];

                    id v75 = +[NEPolicyCondition realApplication:v71];
                    [v58 addObject:v75];

                    uint64_t v76 = +[NEPolicyCondition allInterfaces];
                    [v58 addObject:v76];

                    id v77 = [objc_alloc((Class)NEPolicy) initWithOrder:*a7 result:v102 conditions:v58];
                    LODWORD(v74) = sub_1000312DC((BOOL)v103, v77, v101);

                    if (!v74) {
                      goto LABEL_78;
                    }
                    ++*a7;

                    if (v68 == (id)++v70)
                    {
                      id v68 = [v25 countByEnumeratingWithState:&v104 objects:v137 count:16];
                      if (v68) {
                        goto LABEL_65;
                      }
                      break;
                    }
                  }
                }

                uint64_t v66 = v86 + 1;
                id v12 = v96;
                id v49 = v89;
                uint64_t v65 = v80;
              }
              while ((id)(v86 + 1) != v82);
              uint64_t v78 = 1;
              id v82 = [obj countByEnumeratingWithState:&v108 objects:v138 count:16];
              if (v82) {
                continue;
              }
              break;
            }
            id v13 = v97;
            id v14 = v94;
            id v47 = v95;
          }
          else
          {
            uint64_t v78 = 1;
            id v14 = v94;
          }
LABEL_81:
        }
        else
        {
          uint64_t v78 = 0;
          id v13 = v97;
          id v14 = v94;
        }
      }
      else
      {
        uint64_t v78 = 0;
      }
    }
    else
    {
      uint64_t v78 = 0;
    }
  }
  else
  {
    uint64_t v78 = 0;
  }

  return v78;
}

uint64_t sub_100039268(uint64_t a1, void *a2)
{
  id v32 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4) {
    id Property = objc_getProperty(v4, v3, 136, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v32, Property);
  id v7 = *(id *)(a1 + 32);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 136, 1);
  }
  id v31 = v7;
  uint64_t v8 = sub_1000317B4(*(void *)(a1 + 32)) + 10;
  id v9 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 40)];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v30 = a1;
  id v10 = *(id *)(a1 + 48);
  id v11 = [v10 countByEnumeratingWithState:&v33 objects:v43 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    uint64_t v14 = *(void *)v34;
    do
    {
      for (id i = 0; i != v12; id i = (char *)i + 1)
      {
        if (*(void *)v34 != v14) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        if ([v16 length])
        {
          uint64_t v17 = +[NEPolicyCondition domain:v16];
          id v18 = objc_alloc((Class)NEPolicy);
          id v42 = v17;
          char v13 = 1;
          uint64_t v19 = +[NSArray arrayWithObjects:&v42 count:1];
          id v20 = [v18 initWithOrder:v8 result:v9 conditions:v19];

          sub_1000312DC((BOOL)v32, v20, v31);
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v33 objects:v43 count:16];
    }
    while (v12);
  }
  else
  {
    char v13 = 0;
  }

  if (*(unsigned char *)(v30 + 64) && (v13 & 1) == 0)
  {
    id v21 = [objc_alloc((Class)NEPolicy) initWithOrder:v8 result:v9 conditions:&__NSArray0__struct];
    sub_1000312DC((BOOL)v32, v21, v31);
  }
  uint64_t v22 = +[NEPolicyCondition scopedInterface:*(void *)(v30 + 56)];
  id v23 = objc_alloc((Class)NEPolicy);
  id v41 = v22;
  uint64_t v24 = +[NSArray arrayWithObjects:&v41 count:1];
  id v25 = [v23 initWithOrder:v8 result:v9 conditions:v24];

  sub_1000312DC((BOOL)v32, v25, v31);
  uint64_t v26 = sub_10002F2DC(v32);
  if (v26)
  {
    BOOL v27 = ne_log_large_obj();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v29 = *(void *)(v30 + 56);
      *(_DWORD *)buf = 138412546;
      uint64_t v38 = v29;
      __int16 v39 = 2112;
      id v40 = v31;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "DNS Policy IDs added for %@: %@", buf, 0x16u);
    }
  }
  return v26;
}

uint64_t sub_1000395BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  id v6 = Property;
  id v7 = ne_log_large_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v62 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v79 = v62;
    __int16 v80 = 2112;
    id v81 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Tunnel data Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002F180(v4, v6);
  id v9 = *(void **)(a1 + 32);
  if (v9 && objc_getProperty(v9, v8, 16, 1))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned int v73 = sub_1000317B4(v10) + 100;
    if (*(unsigned char *)(a1 + 56))
    {
      if (v4)
      {
        id v12 = objc_getProperty(v4, v11, 16, 1);
        uint64_t v10 = *(void *)(a1 + 32);
      }
      else
      {
        id v12 = 0;
      }
      if (v10) {
        uint64_t v13 = 18000;
      }
      else {
        uint64_t v13 = 0;
      }
      BOOL v14 = sub_10005A488(v12, &v73, v13, 200, v6);
      id v15 = ne_log_obj();
      id v16 = v15;
      if (v14)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          id v79 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExclu"
                "deLocalNetworks:hasExcludeCellularServices:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s: VPN addLocalNetworksExceptionWithOrder succeeded for PrivilegedTunnel priority", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        id v79 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExclude"
              "LocalNetworks:hasExcludeCellularServices:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority", buf, 0xCu);
      }
    }
    if (v4) {
      id v18 = objc_getProperty(v4, v11, 16, 1);
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;
    id v20 = +[NEPolicyResult skipWithOrder:0];
    BOOL v21 = sub_100058574((BOOL)v19, &v73, v20, v6);

    if (!v21)
    {
      id v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
      }
    }
    if (*(unsigned char *)(a1 + 57))
    {
      if (v4) {
        id v24 = objc_getProperty(v4, v22, 16, 1);
      }
      else {
        id v24 = 0;
      }
      if ((sub_10005973C(v24, &v73, 1, 0, 0, v6) & 1) == 0)
      {
        uint64_t v26 = ne_log_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to add VoiceMail exception for data", buf, 2u);
        }
      }
      if (v4) {
        id v27 = objc_getProperty(v4, v25, 16, 1);
      }
      else {
        id v27 = 0;
      }
      if ((sub_10005C050(v27, &v73, 1, *(void **)(a1 + 48), 0, v6) & 1) == 0)
      {
        id v28 = ne_log_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to add CellularServices exception for data", buf, 2u);
        }
      }
    }
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = &off_1000C99F0;
    }
    id v31 = v29;
    if (v4) {
      id v32 = objc_getProperty(v4, v30, 16, 1);
    }
    else {
      id v32 = 0;
    }
    unsigned int v33 = v73;
    id v34 = v32;
    long long v35 = +[NEPolicyResult skipWithOrder:0];
    sub_10005F1A8(v34, v33, v31, v35, v6);

    if (*(unsigned char *)(a1 + 58))
    {
      uint64_t v36 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
    }
    else
    {
      uint64_t v36 = 0;
    }
    if (*(unsigned char *)(a1 + 59))
    {
      uint64_t v37 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      uint64_t v38 = v37;
      if (v37)
      {
        uint64_t v37 = +[NEPolicyResult netAgentUUID:v37];
      }
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    id v67 = (void *)v38;
    id v68 = (void *)v36;
    uint64_t v70 = (void *)v37;
    if (v36)
    {
      uint64_t v72 = +[NEPolicyResult netAgentUUID:v36];
    }
    else
    {
      uint64_t v72 = 0;
    }
    int v66 = sub_1000317B4(*(void *)(a1 + 32));
    uint64_t v39 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 40) secondaryResultType:1];
    uint64_t v40 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 40)];
    uint64_t v41 = sub_1000317B4(*(void *)(a1 + 32)) + 350;
    id v42 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
    id v77 = v42;
    id v43 = +[NSArray arrayWithObjects:&v77 count:1];

    uint64_t v69 = (void *)v39;
    id v44 = [objc_alloc((Class)NEPolicy) initWithOrder:v41 result:v39 conditions:v43];
    LODWORD(v42) = sub_1000312DC((BOOL)v4, v44, v6);

    uint64_t v71 = (void *)v40;
    if (v42)
    {
      uint64_t v65 = v31;
      uint64_t v45 = sub_1000317B4(*(void *)(a1 + 32)) + 400;
      id v46 = +[NEPolicyCondition allInterfaces];
      uint64_t v76 = v46;
      id v47 = +[NSArray arrayWithObjects:&v76 count:1];

      id v48 = [objc_alloc((Class)NEPolicy) initWithOrder:v45 result:v40 conditions:v47];
      LODWORD(v45) = sub_1000312DC((BOOL)v4, v48, v6);

      if (v45)
      {
        id v49 = v68;
        if (v70)
        {
          id v50 = objc_alloc((Class)NEPolicy);
          id v64 = +[NEPolicyCondition allInterfaces];
          id v75 = v64;
          id v51 = +[NSArray arrayWithObjects:&v75 count:1];
          id v52 = [v50 initWithOrder:(v66 + 10) result:v70 conditions:v51];
          sub_1000312DC((BOOL)v4, v52, v6);
        }
        id v53 = v70;
        id v54 = (void *)v72;
        if (v72)
        {
          id v55 = objc_alloc((Class)NEPolicy);
          id v56 = +[NEPolicyCondition allInterfaces];
          uint64_t v74 = v56;
          uint64_t v57 = +[NSArray arrayWithObjects:&v74 count:1];
          id v58 = [v55 initWithOrder:(v66 + 20) result:v72 conditions:v57];
          sub_1000312DC((BOOL)v4, v58, v6);

          id v54 = (void *)v72;
        }
        if (sub_10002F2DC(v4))
        {
          id v59 = ne_log_large_obj();
          id v31 = v65;
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            id v63 = *(const char **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            id v79 = v63;
            __int16 v80 = 2112;
            id v81 = v6;
            _os_log_debug_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "tunnel data Policy IDs added %@: %@", buf, 0x16u);
          }

          uint64_t v17 = 1;
        }
        else
        {
          uint64_t v17 = 0;
          id v31 = v65;
        }
        uint64_t v60 = v67;
        goto LABEL_69;
      }
      uint64_t v17 = 0;
      id v31 = v65;
    }
    else
    {
      uint64_t v17 = 0;
      id v47 = v43;
    }
    uint64_t v60 = v67;
    id v49 = v68;
    id v53 = v70;
    id v54 = (void *)v72;
LABEL_69:

    goto LABEL_70;
  }
  uint64_t v17 = 0;
LABEL_70:

  return v17;
}

uint64_t sub_100039DF0(uint64_t a1, void *a2)
{
  id v87 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  id v5 = Property;
  id v6 = ne_log_large_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v70 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v109 = v70;
    __int16 v110 = 2112;
    id v111 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Tunnel data Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002F180(v87, v5);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8 && objc_getProperty(v8, v7, 16, 1))
  {
    uint64_t v9 = sub_1000317B4(*(void *)(a1 + 32)) + 200;
    uint64_t v10 = *(void **)(a1 + 48);
    id v11 = &AnalyticsSendEventLazy_ptr;
    uint64_t v85 = a1;
    uint64_t v86 = v5;
    if (v10)
    {
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      id obj = v10;
      id v80 = [obj countByEnumeratingWithState:&v96 objects:v107 count:16];
      if (v80)
      {
        uint64_t v78 = *(void *)v97;
        uint64_t v12 = kSCPropNetIPv4RouteDestinationAddress;
        uint64_t v76 = kSCPropNetIPv4RouteSubnetMask;
        uint64_t v74 = kSCPropNetIPv6RouteDestinationAddress;
        uint64_t v72 = kSCPropNetIPv6RoutePrefixLength;
        while (2)
        {
          uint64_t v13 = 0;
          unint64_t v82 = v9;
          do
          {
            if (*(void *)v97 != v78) {
              objc_enumerationMutation(obj);
            }
            BOOL v14 = *(void **)(*((void *)&v96 + 1) + 8 * (void)v13);
            id v15 = [v14 valueForKey:v12, v72];

            if (v15)
            {
              id v16 = [v14 objectForKeyedSubscript:v12];
              uint64_t v17 = +[NWAddressEndpoint endpointWithHostname:v16 port:@"0"];
              id v18 = [v14 objectForKeyedSubscript:v76];
              LOBYTE(v19) = NEGetPrefixForIPv4NetmaskString();
            }
            else
            {
              id v16 = [v14 objectForKeyedSubscript:v74];
              uint64_t v17 = +[NWAddressEndpoint endpointWithHostname:v16 port:@"0"];
              uint64_t v19 = NEGetIntFromDictionary();
            }

            id v20 = +[NEPolicyCondition flowRemoteAddress:v17 prefix:v19];
            BOOL v21 = +[NEPolicyCondition scopedInterface:*(void *)(v85 + 56)];
            v106[0] = v21;
            uint64_t v22 = +[NEPolicyCondition fallbackTraffic];
            v106[1] = v22;
            v106[2] = v20;
            id v23 = +[NSArray arrayWithObjects:v106 count:3];

            id v24 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(v85 + 56)];
            id v25 = [objc_alloc((Class)NEPolicy) initWithOrder:(char *)v13 + v82 result:v24 conditions:v23];
            BOOL v26 = sub_1000312DC((BOOL)v87, v25, v86);

            if (!v26)
            {
              uint64_t v44 = 0;
              id v5 = v86;
              goto LABEL_59;
            }
            uint64_t v13 = (char *)v13 + 1;
          }
          while (v80 != v13);
          uint64_t v9 = (v82 + v13);
          id v80 = [obj countByEnumeratingWithState:&v96 objects:v107 count:16];
          if (v80) {
            continue;
          }
          break;
        }
      }

      a1 = v85;
      id v5 = v86;
      id v11 = &AnalyticsSendEventLazy_ptr;
    }
    id obj = [v11[480] scopeSocketToInterfaceName:*(void *)(a1 + 40)];
    if (!*(unsigned char *)(a1 + 80))
    {
      uint64_t v45 = *(void **)(a1 + 64);
      if (v45)
      {
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        uint64_t v83 = v45;
        id v81 = [v83 countByEnumeratingWithState:&v92 objects:v105 count:16];
        if (v81)
        {
          uint64_t v79 = *(void *)v93;
          uint64_t v46 = kSCPropNetIPv4RouteDestinationAddress;
          uint64_t v77 = kSCPropNetIPv4RouteSubnetMask;
          uint64_t v75 = kSCPropNetIPv6RouteDestinationAddress;
          uint64_t v73 = kSCPropNetIPv6RoutePrefixLength;
          while (2)
          {
            id v47 = 0;
            uint64_t v48 = v9;
            do
            {
              if (*(void *)v93 != v79) {
                objc_enumerationMutation(v83);
              }
              id v49 = *(void **)(*((void *)&v92 + 1) + 8 * (void)v47);
              id v50 = [v49 valueForKey:v46, v73];

              if (v50)
              {
                id v51 = [v49 objectForKeyedSubscript:v46];
                id v52 = +[NWAddressEndpoint endpointWithHostname:v51 port:@"0"];
                id v53 = [v49 objectForKeyedSubscript:v77];
                LOBYTE(v54) = NEGetPrefixForIPv4NetmaskString();
              }
              else
              {
                id v51 = [v49 objectForKeyedSubscript:v75];
                id v52 = +[NWAddressEndpoint endpointWithHostname:v51 port:@"0"];
                uint64_t v54 = NEGetIntFromDictionary();
              }

              id v55 = +[NEPolicyCondition flowRemoteAddress:v52 prefix:v54];
              id v56 = +[NEPolicyCondition scopedInterface:*(void *)(v85 + 56)];
              v104[0] = v56;
              uint64_t v57 = +[NEPolicyCondition fallbackTraffic];
              v104[1] = v57;
              v104[2] = v55;
              id v58 = +[NSArray arrayWithObjects:v104 count:3];

              id v59 = [objc_alloc((Class)NEPolicy) initWithOrder:(char *)v47 + v48 result:obj conditions:v58];
              BOOL v60 = sub_1000312DC((BOOL)v87, v59, v86);

              if (!v60)
              {
LABEL_57:
                uint64_t v44 = 0;
                id v5 = v86;
                goto LABEL_58;
              }
              id v47 = (char *)v47 + 1;
            }
            while (v81 != v47);
            uint64_t v9 = (v48 + v47);
            id v81 = [v83 countByEnumeratingWithState:&v92 objects:v105 count:16];
            if (v81) {
              continue;
            }
            break;
          }
        }

        uint64_t v61 = +[NEPolicyCondition flowRemoteAddressEmpty];
        [v61 setNegative:1];
        uint64_t v62 = +[NEPolicyCondition scopedInterface:*(void *)(v85 + 56)];
        v103[0] = v62;
        id v63 = +[NEPolicyCondition fallbackTraffic];
        v103[1] = v63;
        v103[2] = v61;
        id v64 = +[NSArray arrayWithObjects:v103 count:3];

        id v65 = objc_alloc((Class)NEPolicy);
        int v66 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(v85 + 56)];
        id v67 = [v65 initWithOrder:v9 result:v66 conditions:v64];
        id v5 = v86;
        BOOL v68 = sub_1000312DC((BOOL)v87, v67, v86);

        if (!v68) {
          goto LABEL_55;
        }
        uint64_t v9 = (v9 + 1);
        a1 = v85;
      }
    }
    id v27 = *(void **)(a1 + 72);
    if (v27)
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      uint64_t v83 = v27;
      id v28 = [v83 countByEnumeratingWithState:&v88 objects:v102 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v89;
        while (2)
        {
          for (id i = 0; i != v29; id i = (char *)i + 1)
          {
            if (*(void *)v89 != v30) {
              objc_enumerationMutation(v83);
            }
            id v32 = *(void **)(*((void *)&v88 + 1) + 8 * i);
            unsigned int v33 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
            id v34 = [v32 stringByTrimmingCharactersInSet:v33];
            if (v34)
            {
              long long v35 = +[NEPolicyCondition domain:v34];
              uint64_t v36 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
              v101[0] = v36;
              uint64_t v37 = +[NEPolicyCondition fallbackTraffic];
              v101[1] = v37;
              v101[2] = v35;
              uint64_t v38 = +[NSArray arrayWithObjects:v101 count:3];

              id v39 = [objc_alloc((Class)NEPolicy) initWithOrder:v9 result:obj conditions:v38];
              LODWORD(v37) = sub_1000312DC((BOOL)v87, v39, v86);

              if (!v37)
              {

                goto LABEL_57;
              }
              uint64_t v9 = (v9 + 1);
              a1 = v85;
            }
          }
          id v29 = [v83 countByEnumeratingWithState:&v88 objects:v102 count:16];
          if (v29) {
            continue;
          }
          break;
        }
      }

      id v5 = v86;
    }
    if (!*(unsigned char *)(a1 + 80)) {
      goto LABEL_63;
    }
    uint64_t v40 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
    v100[0] = v40;
    uint64_t v41 = +[NEPolicyCondition fallbackTraffic];
    v100[1] = v41;
    id v42 = +[NSArray arrayWithObjects:v100 count:2];

    id v43 = [objc_alloc((Class)NEPolicy) initWithOrder:v9 result:obj conditions:v42];
    LODWORD(v41) = sub_1000312DC((BOOL)v87, v43, v5);

    if (v41)
    {
LABEL_63:
      if (sub_10002F2DC(v87))
      {
        uint64_t v83 = ne_log_large_obj();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v71 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v109 = v71;
          __int16 v110 = 2112;
          id v111 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "tunnel data Policy IDs added %@: %@", buf, 0x16u);
        }
        uint64_t v44 = 1;
LABEL_58:

        goto LABEL_59;
      }
    }
LABEL_55:
    uint64_t v44 = 0;
LABEL_59:

    goto LABEL_60;
  }
  uint64_t v44 = 0;
LABEL_60:

  return v44;
}

uint64_t sub_10003A7E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v21 = a7;
  id v22 = a8;
  if (a1)
  {
    if (isa_nsstring() && isa_nsstring() && *(_DWORD *)(a1 + 8) == 1)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10003A9A8;
      v24[3] = &unk_1000C5D78;
      v24[4] = a1;
      id v25 = v16;
      char v32 = a9;
      id v26 = v18;
      id v27 = v17;
      id v28 = v21;
      id v29 = v22;
      id v30 = v19;
      id v31 = v20;
      a1 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v24);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_10003A9A8(uint64_t a1, void *a2)
{
  self = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80, 1);
  }
  id v5 = Property;
  id v6 = ne_log_large_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    long long v112 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    long long v195 = v112;
    __int16 v196 = 2112;
    id v197 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Route Enforcement Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002F180(self, v5);
  uint64_t v8 = *(void **)(a1 + 32);
  if (!v8 || !objc_getProperty(v8, v7, 16, 1))
  {
    uint64_t v30 = 0;
    goto LABEL_120;
  }
  int v9 = sub_1000317B4(*(void *)(a1 + 32));
  uint64_t v10 = (v9 + 265);
  unsigned int v176 = v9 + 200;
  id v155 = +[NEPolicyCondition allInterfaces];
  uint64_t v154 = +[NEPolicyResult skipWithOrder:v10];
  if (*(unsigned char *)(a1 + 96))
  {
    id v12 = self;
    if (self) {
      id v12 = objc_getProperty(self, v11, 16, 1);
    }
    if (!sub_10005A488(v12, &v176, v10, 200, v5))
    {
      id v18 = ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:in"
               "cludeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority", buf, 0xCu);
      }
      uint64_t v30 = 0;
      goto LABEL_119;
    }
  }
  uint64_t v153 = v5;
  int v140 = v9;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  uint64_t v141 = a1;
  id v13 = *(id *)(a1 + 48);
  id v14 = [v13 countByEnumeratingWithState:&v172 objects:v193 count:16];
  id v15 = &AnalyticsSendEventLazy_ptr;
  id v16 = &AnalyticsSendEventLazy_ptr;
  if (v14)
  {
    id v17 = v14;
    id v18 = 0;
    uint64_t v19 = *(void *)v173;
    id v20 = self;
    do
    {
      id v21 = 0;
      id v22 = v18;
      do
      {
        if (*(void *)v173 != v19) {
          objc_enumerationMutation(v13);
        }
        id v23 = *(void **)(*((void *)&v172 + 1) + 8 * (void)v21);
        v192[0] = v155;
        id v24 = +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", [v23 intValue]);
        v192[1] = v24;
        id v18 = [v15[510] arrayWithObjects:v192 count:2];

        id v25 = v16;
        id v26 = objc_alloc((Class)v16[478]);
        unsigned int v27 = v176;
        id v28 = [v26 initWithOrder:v176 result:v154 conditions:v18];
        BOOL v29 = sub_1000312DC((BOOL)self, v28, v153);

        if (!v29)
        {
          id v31 = ne_log_obj();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s: VPN adding tunnel agent skip policy failed", buf, 0xCu);
          }

          uint64_t v30 = 0;
          id v5 = v153;
          goto LABEL_119;
        }
        id v21 = (char *)v21 + 1;
        id v22 = v18;
        id v16 = v25;
        id v15 = &AnalyticsSendEventLazy_ptr;
      }
      while (v17 != v21);
      id v17 = [v13 countByEnumeratingWithState:&v172 objects:v193 count:16];
    }
    while (v17);
  }
  else
  {
    unsigned int v27 = v176;
    id v20 = self;
  }

  unsigned int v176 = v27 + 1;
  char v32 = +[NEPolicyCondition fallbackTraffic];
  v191[0] = v155;
  v191[1] = v32;
  id v18 = [v15[510] arrayWithObjects:v191 count:2];
  id v33 = [objc_alloc((Class)v16[478]) initWithOrder:v27 + 1 result:v154 conditions:v18];
  BOOL v34 = sub_1000312DC((BOOL)v20, v33, v153);

  if (!v34)
  {
    log = ne_log_obj();
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: VPN adding fallback traffic skip policy failed", buf, 0xCu);
    }
    uint64_t v30 = 0;
    id v5 = v153;
    goto LABEL_118;
  }
  unsigned int v176 = v27 + 2;
  if (v20) {
    id v36 = objc_getProperty(v20, v35, 16, 1);
  }
  else {
    id v36 = 0;
  }
  id v37 = v36;
  uint64_t v38 = +[NEPolicyResult skipWithOrder:0];
  BOOL v39 = sub_100058574((BOOL)v37, &v176, v38, v153);

  if (!v39)
  {
    uint64_t v41 = ne_log_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
    }
  }
  ++v176;
  if (v20) {
    id v42 = objc_getProperty(v20, v40, 16, 1);
  }
  else {
    id v42 = 0;
  }
  if ((sub_10005C050(v42, &v176, 1, *(void **)(v141 + 56), 0, v153) & 1) == 0)
  {
    id v43 = ne_log_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%s: Failed to add CellularServices exception for data", buf, 0xCu);
    }
  }
  long long v137 = v32;
  unsigned int v176 = v140 + 250;
  log = +[NEPolicyCondition scopedInterface:*(void *)(v141 + 56)];
  id v148 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(v141 + 56)];
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  id obj = *(id *)(v141 + 64);
  id v44 = [obj countByEnumeratingWithState:&v168 objects:v190 count:16];
  if (v44)
  {
    id v45 = v44;
    uint64_t v46 = *(void *)v169;
    uint64_t v142 = *(void *)v169;
    do
    {
      id v47 = 0;
      id v145 = v45;
      do
      {
        if (*(void *)v169 != v46) {
          objc_enumerationMutation(obj);
        }
        uint64_t v48 = *(void **)(*((void *)&v168 + 1) + 8 * (void)v47);
        if (([v48 isDefaultRoute] & 1) == 0)
        {
          id v49 = [v48 destinationAddress];
          uint64_t v50 = +[NWAddressEndpoint endpointWithHostname:v49 port:@"0"];

          id v51 = [v48 destinationSubnetMask];
          LOBYTE(v49) = NEGetPrefixForIPv4NetmaskString();

          id v151 = (void *)v50;
          id v52 = +[NEPolicyCondition flowRemoteAddress:v50 prefix:v49];
          v189[0] = v52;
          v189[1] = v155;
          id v53 = [v15[510] arrayWithObjects:v189 count:2];

          id v54 = objc_alloc((Class)v16[478]);
          unsigned int v55 = v176;
          id v56 = [v54 initWithOrder:v176 result:v148 conditions:v53];
          LOBYTE(v50) = sub_1000312DC((BOOL)v20, v56, v153);

          if ((v50 & 1) == 0)
          {
            long long v113 = ne_log_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentP"
                     "IDs:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%s: VPN adding excluded IPv4 route policy failed", buf, 0xCu);
            }
            uint64_t v30 = 0;
            char v32 = v137;
            uint64_t v70 = v52;
            id v5 = v153;
            uint64_t v71 = v53;
            goto LABEL_117;
          }
          v188[0] = v52;
          v188[1] = log;
          id v18 = [v15[510] arrayWithObjects:v188 count:2];

          id v57 = [objc_alloc((Class)v16[478]) initWithOrder:v55 + 1 result:v154 conditions:v18];
          BOOL v58 = sub_1000312DC((BOOL)v20, v57, v153);

          if (!v58)
          {
            uint64_t v70 = v52;
            long long v113 = ne_log_obj();
            if (!os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
LABEL_98:
              uint64_t v30 = 0;
              uint64_t v71 = v18;
              char v32 = v137;
              id v5 = v153;
              goto LABEL_117;
            }
            *(_DWORD *)buf = 136315138;
            long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            long long v114 = "%s: VPN adding excluded IPv4 route skip policy failed";
LABEL_129:
            _os_log_error_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, v114, buf, 0xCu);
            goto LABEL_98;
          }

          id v15 = &AnalyticsSendEventLazy_ptr;
          id v20 = self;
          uint64_t v46 = v142;
          id v45 = v145;
        }
        id v47 = (char *)v47 + 1;
      }
      while (v45 != v47);
      id v45 = [obj countByEnumeratingWithState:&v168 objects:v190 count:16];
    }
    while (v45);
  }

  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  id obj = *(id *)(v141 + 72);
  id v59 = [obj countByEnumeratingWithState:&v164 objects:v187 count:16];
  if (v59)
  {
    id v60 = v59;
    uint64_t v61 = *(void *)v165;
    uint64_t v143 = *(void *)v165;
    id v5 = v153;
    do
    {
      uint64_t v62 = 0;
      id v146 = v60;
      do
      {
        if (*(void *)v165 != v61) {
          objc_enumerationMutation(obj);
        }
        id v63 = *(void **)(*((void *)&v164 + 1) + 8 * (void)v62);
        if (([v63 isDefaultRoute] & 1) == 0)
        {
          id v64 = [v63 destinationAddress];
          +[NWAddressEndpoint endpointWithHostname:v64 port:@"0"];
          v66 = id v65 = v16;

          id v67 = [v63 destinationNetworkPrefixLength];
          id v68 = [v67 unsignedCharValue];

          id v151 = (void *)v66;
          uint64_t v69 = v66;
          id v15 = &AnalyticsSendEventLazy_ptr;
          uint64_t v70 = +[NEPolicyCondition flowRemoteAddress:v69 prefix:v68];
          v186[0] = v70;
          v186[1] = v155;
          uint64_t v71 = +[NSArray arrayWithObjects:v186 count:2];

          id v72 = objc_alloc((Class)v65[478]);
          unsigned int v73 = v176;
          id v74 = [v72 initWithOrder:v176 result:v148 conditions:v71];
          BOOL v75 = sub_1000312DC((BOOL)v20, v74, v153);

          if (!v75)
          {
            long long v113 = ne_log_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentP"
                     "IDs:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%s: VPN adding excluded IPv6 route policy failed", buf, 0xCu);
            }
            uint64_t v30 = 0;
            char v32 = v137;
            goto LABEL_117;
          }
          v185[0] = v70;
          v185[1] = log;
          id v18 = +[NSArray arrayWithObjects:v185 count:2];

          id v76 = [objc_alloc((Class)v65[478]) initWithOrder:v73 + 1 result:v154 conditions:v18];
          BOOL v77 = sub_1000312DC((BOOL)v20, v76, v153);

          uint64_t v78 = v70;
          if (!v77)
          {
            long long v113 = ne_log_obj();
            if (!os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            *(_DWORD *)buf = 136315138;
            long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            long long v114 = "%s: VPN adding excluded IPv6 route skip policy failed";
            goto LABEL_129;
          }
          id v16 = v65;

          id v20 = self;
          uint64_t v61 = v143;
          id v60 = v146;
        }
        uint64_t v62 = (char *)v62 + 1;
      }
      while (v60 != v62);
      id v60 = [obj countByEnumeratingWithState:&v164 objects:v187 count:16];
    }
    while (v60);
  }

  unsigned int v176 = v140 + 255;
  id obj = +[NEPolicyCondition scopedInterface:*(void *)(v141 + 40)];
  id v151 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(v141 + 40)];
  uint64_t v144 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(v141 + 40) secondaryResultType:1];
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  uint64_t v79 = *(id *)(v141 + 80);
  id v80 = [v79 countByEnumeratingWithState:&v160 objects:v184 count:16];
  id v132 = v80;
  if (!v80) {
    goto LABEL_74;
  }
  uint64_t v81 = *(void *)v161;
  id v82 = v80;
  long long v138 = v79;
  uint64_t v133 = *(void *)v161;
  while (2)
  {
    uint64_t v83 = 0;
    id v135 = v82;
    do
    {
      if (*(void *)v161 != v81) {
        objc_enumerationMutation(v79);
      }
      uint64_t v84 = *(void **)(*((void *)&v160 + 1) + 8 * (void)v83);
      if (([v84 isDefaultRoute] & 1) == 0)
      {
        uint64_t v85 = [v84 destinationAddress];
        uint64_t v86 = +[NWAddressEndpoint endpointWithHostname:v85 port:@"0"];

        id v87 = [v84 destinationSubnetMask];
        unsigned __int8 v88 = NEGetPrefixForIPv4NetmaskString();

        char v147 = (void *)v86;
        long long v89 = +[NEPolicyCondition flowRemoteAddress:v86 prefix:v88];
        v183[0] = v89;
        v183[1] = obj;
        uint64_t v71 = [v15[510] arrayWithObjects:v183 count:2];

        id v90 = objc_alloc((Class)v16[478]);
        unsigned int v91 = v176;
        id v92 = [v90 initWithOrder:v176 result:v144 conditions:v71];
        id v5 = v153;
        BOOL v93 = sub_1000312DC((BOOL)v20, v92, v153);

        if (v93)
        {
          v182[0] = v89;
          v182[1] = v155;
          id v18 = [v15[510] arrayWithObjects:v182 count:2];

          id v94 = [objc_alloc((Class)v16[478]) initWithOrder:v91 + 1 result:v151 conditions:v18];
          BOOL v95 = sub_1000312DC((BOOL)v20, v94, v153);

          if (v95)
          {

            id v15 = &AnalyticsSendEventLazy_ptr;
            id v20 = self;
            uint64_t v79 = v138;
            uint64_t v81 = v133;
            id v82 = v135;
            goto LABEL_72;
          }
          long long v115 = ne_log_obj();
          long long v113 = v138;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            long long v117 = "%s: VPN adding included IPv4 route socket scoping policy failed";
            goto LABEL_133;
          }
LABEL_115:
          uint64_t v71 = v18;
          char v32 = v137;
          id v5 = v153;
        }
        else
        {
          long long v115 = ne_log_obj();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            long long v116 = "%s: VPN adding included IPv4 route pass policy failed";
LABEL_131:
            _os_log_error_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, v116, buf, 0xCu);
          }
LABEL_113:
          char v32 = v137;
          long long v113 = v138;
        }
        uint64_t v70 = (void *)v144;

        uint64_t v30 = 0;
        goto LABEL_117;
      }
LABEL_72:
      uint64_t v83 = (char *)v83 + 1;
    }
    while (v82 != v83);
    id v82 = [v79 countByEnumeratingWithState:&v160 objects:v184 count:16];
    if (v82) {
      continue;
    }
    break;
  }
LABEL_74:

  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v96 = *(id *)(v141 + 88);
  id v97 = [v96 countByEnumeratingWithState:&v156 objects:v181 count:16];
  if (v97)
  {
    id v98 = v97;
    uint64_t v99 = *(void *)v157;
    long long v138 = v96;
    uint64_t v134 = *(void *)v157;
LABEL_76:
    uint64_t v100 = 0;
    id v136 = v98;
    while (1)
    {
      if (*(void *)v157 != v99) {
        objc_enumerationMutation(v96);
      }
      id v101 = *(void **)(*((void *)&v156 + 1) + 8 * v100);
      if (([v101 isDefaultRoute] & 1) == 0)
      {
        id v102 = [v101 destinationAddress];
        uint64_t v103 = +[NWAddressEndpoint endpointWithHostname:v102 port:@"0"];

        long long v104 = [v101 destinationNetworkPrefixLength];
        id v105 = [v104 unsignedCharValue];

        char v147 = (void *)v103;
        long long v89 = +[NEPolicyCondition flowRemoteAddress:v103 prefix:v105];
        v180[0] = v89;
        v180[1] = obj;
        uint64_t v71 = [v15[510] arrayWithObjects:v180 count:2];

        id v106 = objc_alloc((Class)v16[478]);
        unsigned int v107 = v176;
        id v108 = [v106 initWithOrder:v176 result:v144 conditions:v71];
        id v5 = v153;
        BOOL v109 = sub_1000312DC((BOOL)v20, v108, v153);

        if (!v109)
        {
          long long v115 = ne_log_obj();
          if (!os_log_type_enabled(v115, OS_LOG_TYPE_ERROR)) {
            goto LABEL_113;
          }
          *(_DWORD *)buf = 136315138;
          long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:"
                 "includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
          long long v116 = "%s: VPN adding included IPv6 route pass policy failed";
          goto LABEL_131;
        }
        v179[0] = v89;
        v179[1] = v155;
        id v18 = [v15[510] arrayWithObjects:v179 count:2];

        id v110 = [objc_alloc((Class)v16[478]) initWithOrder:v107 + 1 result:v151 conditions:v18];
        BOOL v111 = sub_1000312DC((BOOL)v20, v110, v153);

        if (!v111)
        {
          long long v115 = ne_log_obj();
          long long v113 = v138;
          if (!os_log_type_enabled(v115, OS_LOG_TYPE_ERROR)) {
            goto LABEL_115;
          }
          *(_DWORD *)buf = 136315138;
          long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:"
                 "includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
          long long v117 = "%s: VPN adding included IPv6 route socket scoping policy failed";
LABEL_133:
          _os_log_error_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, v117, buf, 0xCu);
          goto LABEL_115;
        }

        id v15 = &AnalyticsSendEventLazy_ptr;
        id v20 = self;
        long long v96 = v138;
        uint64_t v99 = v134;
        id v98 = v136;
      }
      if (v98 == (id)++v100)
      {
        id v98 = [v96 countByEnumeratingWithState:&v156 objects:v181 count:16];
        if (v98) {
          goto LABEL_76;
        }

        char v32 = v137;
        goto LABEL_104;
      }
    }
  }

  char v32 = v137;
  if (v132)
  {
LABEL_104:
    unsigned int v176 = v140 + 260;
    long long v118 = +[NEPolicyCondition flowRemoteAddressEmpty];
    [v118 setNegative:1];
    long long v119 = +[NEPolicyRouteRule routeRuleWithAction:2 forInterfaceName:*(void *)(v141 + 40)];
    long long v178 = v119;
    long long v120 = [v15[510] arrayWithObjects:&v178 count:1];

    long long v139 = v118;
    v177[0] = v118;
    v177[1] = v155;
    uint64_t v71 = [v15[510] arrayWithObjects:v177 count:2];

    id v121 = objc_alloc((Class)v16[478]);
    uint64_t v122 = v176;
    long long v123 = +[NEPolicyResult routeRules:v120];
    id v125 = [v121 initWithOrder:v122 result:v123 conditions:v71];
    long long v126 = *(void **)(v141 + 32);
    if (v126) {
      id v127 = objc_getProperty(v126, v124, 48, 1);
    }
    else {
      id v127 = 0;
    }
    id v5 = v153;
    uint64_t v70 = (void *)v144;
    BOOL v128 = sub_1000312DC((BOOL)self, v125, v127);

    if (v128)
    {

      id v18 = v71;
      id v20 = self;
      goto LABEL_108;
    }
    long long v130 = ne_log_obj();
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "%s: VPN adding interface default deny policy failed", buf, 0xCu);
    }

    uint64_t v30 = 0;
    long long v113 = v139;
  }
  else
  {
LABEL_108:
    if (sub_10002F2DC(v20))
    {
      long long v113 = ne_log_large_obj();
      id v5 = v153;
      uint64_t v70 = (void *)v144;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
      {
        long long v131 = *(const char **)(v141 + 40);
        *(_DWORD *)buf = 138412546;
        long long v195 = v131;
        __int16 v196 = 2112;
        id v197 = v153;
        _os_log_debug_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "Route Enforcement Policy IDs added %@: %@", buf, 0x16u);
      }
      uint64_t v30 = 1;
    }
    else
    {
      long long v113 = ne_log_obj();
      id v5 = v153;
      uint64_t v70 = (void *)v144;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        long long v195 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:in"
               "cludeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%s: VPN applying added policies failed", buf, 0xCu);
      }
      uint64_t v30 = 0;
    }
    uint64_t v71 = v18;
  }
LABEL_117:

  id v18 = v71;
LABEL_118:

LABEL_119:
LABEL_120:

  return v30;
}

BOOL sub_10003BE38(_DWORD *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  BOOL v8 = 0;
  if (a1 && v5)
  {
    if (a1[2] == 4)
    {
      if (!v6)
      {
        id v7 = objc_alloc_init((Class)NSMutableArray);
        int v9 = +[NEPolicyCondition allInterfaces];
        [v7 addObject:v9];
      }
      id v10 = objc_alloc((Class)NEPolicy);
      id v11 = +[NEPolicyResult passWithFlags:1];
      id v12 = [v10 initWithOrder:100 result:v11 conditions:v7];
      id Property = objc_getProperty(a1, v13, 56, 1);
      BOOL v8 = sub_10002FBAC((BOOL)v5, v12, Property);
    }
    else
    {
      BOOL v8 = 0;
    }
  }

  return v8;
}

uint64_t sub_10003BF4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 48, 1);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v141 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:"
           "perApp:disableEncryptedDNSSettings:]_block_invoke";
    __int16 v142 = 2112;
    id v143 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  id v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 48, 1);
  }
  else {
    id v8 = 0;
  }
  sub_10002F180(v3, v8);
  id v10 = *(void **)(a1 + 32);
  if (v10) {
    id v11 = objc_getProperty(v10, v9, 56, 1);
  }
  else {
    id v11 = 0;
  }
  sub_10003033C(v3, v11);
  if (v3) {
    v3[2] = *(_DWORD *)(a1 + 72);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  unsigned int v13 = v12 & 0x1FFFFFFF;
  if ((v12 & 0x1FFFFFFF) < 2)
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    do
    {
      ++v14;
      BOOL v15 = v13 > 3;
      v13 >>= 1;
    }
    while (v15);
  }
  uint64_t v112 = sub_1000317B4(*(void *)(a1 + 32)) + 1010 * v14;
  BOOL v109 = +[NEPolicyResult filterWithControlUnit:v12];
  id v106 = +[NEPolicyResult drop];
  long long v114 = +[NEPolicyResult skipWithOrder:(v112 + 1010)];
  if (*(unsigned char *)(a1 + 80))
  {
LABEL_14:
    id v16 = +[NSMutableArray array];
    id v17 = (_UNKNOWN **)NEResourcesCopyContentFilterExclusionList();
    long long v113 = v3;
    if (!v17 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      id v18 = ne_log_large_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v101 = *(id *)(a1 + 32);
        if (v101) {
          id v101 = objc_getProperty(v101, v19, 48, 1);
        }
        *(_DWORD *)buf = 138412290;
        uint64_t v141 = (const char *)v101;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Content filter exclusion list not found: %@", buf, 0xCu);
      }

      id v17 = &off_1000C96F0;
    }
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    id obj = v17;
    id v20 = [obj countByEnumeratingWithState:&v129 objects:v137 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v130;
      do
      {
        for (id i = 0; i != v21; id i = (char *)i + 1)
        {
          if (*(void *)v130 != v22) {
            objc_enumerationMutation(obj);
          }
          uint64_t v24 = *(void *)(*((void *)&v129 + 1) + 8 * i);
          id v25 = +[NEProcessInfo copyUUIDsForExecutable:v24];
          id v26 = v25;
          if (v25 && [v25 count]
            || (v27 = +[NEProcessInfo copyUUIDsForBundleID:v24 uid:*(unsigned int *)(a1 + 76)], v26, (id v26 = v27) != 0))
          {
            if ([v26 count]) {
              [v16 addObjectsFromArray:v26];
            }
          }
        }
        id v21 = [obj countByEnumeratingWithState:&v129 objects:v137 count:16];
      }
      while (v21);
    }

    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    id v111 = v16;
    id v28 = [v111 countByEnumeratingWithState:&v125 objects:v136 count:16];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = *(void *)v126;
      do
      {
        id v31 = 0;
        do
        {
          if (*(void *)v126 != v30) {
            objc_enumerationMutation(v111);
          }
          char v32 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v125 + 1) + 8 * (void)v31)];
          v135[0] = v32;
          id v33 = +[NEPolicyCondition platformBinary];
          v135[1] = v33;
          BOOL v34 = +[NEPolicyCondition allInterfaces];
          v135[2] = v34;
          long long v35 = +[NSArray arrayWithObjects:v135 count:3];

          id v37 = [objc_alloc((Class)NEPolicy) initWithOrder:v112 result:v114 conditions:v35];
          uint64_t v38 = *(void **)(a1 + 32);
          if (v38) {
            id v39 = objc_getProperty(v38, v36, 48, 1);
          }
          else {
            id v39 = 0;
          }
          sub_1000312DC((BOOL)v113, v37, v39);

          id v31 = (char *)v31 + 1;
        }
        while (v29 != v31);
        id v40 = [v111 countByEnumeratingWithState:&v125 objects:v136 count:16];
        id v29 = v40;
      }
      while (v40);
    }

    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    id v105 = [*(id *)(a1 + 56) rules];
    id v41 = [v105 countByEnumeratingWithState:&v121 objects:v134 count:16];
    if (v41)
    {
      id v42 = v41;
      uint64_t v108 = *(void *)v122;
      unsigned int v43 = 2;
      while (2)
      {
        id v44 = 0;
        if (v43 <= 0x3EA) {
          id v45 = (void *)(1002 - v43);
        }
        else {
          id v45 = 0;
        }
        unsigned int v104 = v43;
        int v107 = v112 + v43;
        do
        {
          if (*(void *)v122 != v108) {
            objc_enumerationMutation(v105);
          }
          if (v45 == v44)
          {
            unsigned int v43 = v104 + v44;
            goto LABEL_63;
          }
          uint64_t v46 = *(void **)(*((void *)&v121 + 1) + 8 * (void)v44);
          id v47 = v109;
          id v48 = [v46 action];
          id v49 = v114;
          if (v48 == (id)1 || (v50 = [v46 action], id v49 = v106, v50 == (id)2))
          {
            id v51 = v49;

            id v47 = v51;
          }
          id v52 = *(void **)(a1 + 32);
          id v53 = [v46 networkRule];
          id v54 = [v46 networkRule];
          sub_10003CB90(v52, v53, (uint64_t)[v54 matchProtocol], v113, v47, v107 + v44, 0);

          unsigned int v55 = [v46 networkRule];
          [v55 appliesToLoopback];

          id v44 = (char *)v44 + 1;
        }
        while (v42 != v44);
        unsigned int v43 = v104 + v44;
        id v42 = [v105 countByEnumeratingWithState:&v121 objects:v134 count:16];
        if (v42) {
          continue;
        }
        break;
      }
    }
    else
    {
      unsigned int v43 = 2;
    }
LABEL_63:

    id v65 = +[NEPolicyCondition uid:0];
    [v65 setNegative:1];
    uint64_t v133 = v65;
    uint64_t v66 = +[NSArray arrayWithObjects:&v133 count:1];
    id v67 = v109;
    id v68 = *(void **)(a1 + 56);
    if (v68)
    {
      id v69 = [v68 defaultAction];
      uint64_t v70 = v114;
      if (v69 == (id)1 || (id v71 = [*(id *)(a1 + 56) defaultAction], v70 = v106, v71 == (id)2))
      {
        id v72 = v70;

        id v67 = v72;
      }
    }
    uint64_t v73 = v43 + v112;
    uint64_t v74 = *(void *)(a1 + 64);
    BOOL v75 = ne_log_obj();
    BOOL v76 = os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG);
    if (v74)
    {
      if (v76)
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v141 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%s: Installing perApp Content Filter policies", buf, 0xCu);
      }

      uint64_t v77 = *(void *)(a1 + 32);
      uint64_t v78 = [*(id *)(a1 + 64) appRules];
      v115[0] = _NSConcreteStackBlock;
      v115[1] = 3221225472;
      v115[2] = sub_10003D2D4;
      v115[3] = &unk_1000C5DA0;
      id v79 = v66;
      uint64_t v80 = *(void *)(a1 + 32);
      id v116 = v79;
      uint64_t v117 = v80;
      id v3 = v113;
      id v118 = v113;
      int v120 = v73;
      id v119 = v67;
      sub_100034F48(v77, v78, 0, 0, 0, 0, v118, v115, 0);
    }
    else
    {
      if (v76)
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v141 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%s: Installing system-wide Content Filter policies", buf, 0xCu);
      }

      if (!sub_10003BE38(*(_DWORD **)(a1 + 32), v113, 0))
      {
        uint64_t v83 = ne_log_obj();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "Failed to install content filter pass policies", buf, 2u);
        }
        uint64_t v64 = 0;
        goto LABEL_85;
      }
      id v86 = [objc_alloc((Class)NEPolicy) initWithOrder:v73 result:v67 conditions:v66];
      id v87 = *(void **)(a1 + 32);
      if (v87) {
        id v88 = objc_getProperty(v87, v85, 48, 1);
      }
      else {
        id v88 = 0;
      }
      id v3 = v113;
      BOOL v89 = sub_1000312DC((BOOL)v113, v86, v88);

      if (!v89)
      {
LABEL_81:
        uint64_t v64 = 0;
LABEL_86:

        goto LABEL_87;
      }
    }
    if (sub_10002F2DC(v3))
    {
      uint64_t v81 = ne_log_obj();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        id v102 = *(id *)(a1 + 32);
        if (v102) {
          id v102 = objc_getProperty(v102, v82, 48, 1);
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v141 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        __int16 v142 = 2112;
        id v143 = v102;
        _os_log_debug_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added: %@", buf, 0x16u);
      }

      uint64_t v83 = ne_log_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        id v103 = *(id *)(a1 + 32);
        if (v103) {
          id v103 = objc_getProperty(v103, v84, 56, 1);
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v141 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        __int16 v142 = 2112;
        id v143 = v103;
        _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
      }
      uint64_t v64 = 1;
LABEL_85:

      id v3 = v113;
      goto LABEL_86;
    }
    goto LABEL_81;
  }
  id v56 = *(void **)(a1 + 40);
  if (!v56)
  {
    unsigned int v91 = *(void **)(a1 + 48);
    if (v91)
    {
      id v92 = [NEPolicyCondition effectivePID:[v91 pid] version:[*(id *)(a1 + 48) pidVersion]];
      v138[0] = v92;
      BOOL v93 = +[NEPolicyCondition delegateIsPlatformBinary];
      v138[1] = v93;
      id v94 = +[NEPolicyCondition allInterfaces];
      v138[2] = v94;
      BOOL v95 = +[NSArray arrayWithObjects:v138 count:3];

      id v97 = [objc_alloc((Class)NEPolicy) initWithOrder:v112 result:v114 conditions:v95];
      id v98 = *(void **)(a1 + 32);
      if (v98) {
        id v99 = objc_getProperty(v98, v96, 48, 1);
      }
      else {
        id v99 = 0;
      }
      sub_1000312DC((BOOL)v3, v97, v99);
    }
    goto LABEL_14;
  }
  id v57 = [NEPolicyCondition effectivePID:[v56 pid] version:[*(id *)(a1 + 40) pidVersion]];
  v139[0] = v57;
  BOOL v58 = +[NEPolicyCondition allInterfaces];
  v139[1] = v58;
  uint64_t v59 = +[NSArray arrayWithObjects:v139 count:2];

  id v111 = (id)v59;
  id v61 = [objc_alloc((Class)NEPolicy) initWithOrder:v112 result:v109 conditions:v59];
  uint64_t v62 = *(void **)(a1 + 32);
  if (v62) {
    id v63 = objc_getProperty(v62, v60, 48, 1);
  }
  else {
    id v63 = 0;
  }
  sub_1000312DC((BOOL)v3, v61, v63);

  if (v3)
  {
    sub_100030B68((uint64_t)v3, *(void **)(a1 + 32), 1);
    uint64_t v64 = sub_10002F2DC(v3);
  }
  else
  {
    uint64_t v64 = 0;
  }
LABEL_87:

  return v64;
}

void sub_10003CB90(void *a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned int a6, int a7)
{
  id v90 = a2;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    id v14 = objc_alloc_init((Class)NSMutableArray);
    BOOL v15 = +[NEPolicyCondition allInterfaces];
    [v14 addObject:v15];

    if (a3 == 1)
    {
      uint64_t v16 = 6;
    }
    else
    {
      if (a3 != 2) {
        goto LABEL_7;
      }
      uint64_t v16 = 17;
    }
    id v17 = +[NEPolicyCondition ipProtocol:v16];
    [v14 addObject:v17];

LABEL_7:
    id v18 = [v90 matchDirection];
    BOOL v89 = (BOOL)v12;
    int v19 = a7;
    if (v18 == (id)2)
    {
      id v20 = +[NEPolicyCondition isInbound];
      [v20 setNegative:1];
    }
    else
    {
      if (v18 != (id)1)
      {
LABEL_12:
        uint64_t v21 = [v90 matchRemoteHostOrNetworkEndpoint];
        uint64_t v87 = a3;
        if (!v21) {
          goto LABEL_17;
        }
        uint64_t v22 = (void *)v21;
        id v23 = [v90 matchRemoteHostOrNetworkEndpoint];
        id v24 = v13;
        nw_endpoint_type_t type = nw_endpoint_get_type(v23);

        BOOL v26 = type == nw_endpoint_type_host;
        id v13 = v24;
        if (v26)
        {
          id v27 = [v90 matchRemoteHostOrNetworkEndpoint];
          id v28 = +[NSString stringWithUTF8String:nw_endpoint_get_hostname(v27)];
          id v29 = +[NEPolicyCondition domain:v28];
          [v14 addObject:v29];

          uint64_t v30 = [v90 matchRemoteHostOrNetworkEndpoint];
          uint64_t port = nw_endpoint_get_port(v30);

          if (port)
          {
            char v32 = +[NSNumber numberWithUnsignedShort:port];
            id v33 = [v32 stringValue];
            BOOL v34 = +[NWAddressEndpoint endpointWithHostname:@"0.0.0.0" port:v33];
            long long v35 = +[NEPolicyCondition flowRemoteAddress:v34 prefix:0];
            id v36 = [v14 arrayByAddingObject:v35];

            id v37 = +[NSNumber numberWithUnsignedShort:port];
            uint64_t v38 = [v37 stringValue];
            id v39 = +[NWAddressEndpoint endpointWithHostname:@"::" port:v38];
            id v40 = +[NEPolicyCondition flowRemoteAddress:v39 prefix:0];
            id v41 = [v14 arrayByAddingObject:v40];

            id v13 = v24;
            id v42 = [objc_alloc((Class)NEPolicy) initWithOrder:a6 result:v24 conditions:v36];
            id Property = objc_getProperty(a1, v43, 48, 1);
            sub_1000312DC(v89, v42, Property);

            id v45 = [objc_alloc((Class)NEPolicy) initWithOrder:a6 result:v24 conditions:v41];
            id v47 = objc_getProperty(a1, v46, 48, 1);
            sub_1000312DC(v89, v45, v47);

            id v12 = (id)v89;
            goto LABEL_33;
          }
          id v70 = objc_alloc((Class)NEPolicy);
          uint64_t v71 = a6;
          id v13 = v24;
          id v72 = v24;
        }
        else
        {
LABEL_17:
          uint64_t v48 = [v90 matchRemoteHostOrNetworkEndpoint:a3];
          if (v48)
          {
            id v49 = (void *)v48;
            id v50 = [v90 matchRemoteHostOrNetworkEndpoint];
            nw_endpoint_type_t v51 = nw_endpoint_get_type(v50);

            if (v51 == nw_endpoint_type_address)
            {
              id v52 = [v90 matchRemoteHostOrNetworkEndpoint];
              address = nw_endpoint_get_address(v52);

              id v54 = [v90 matchRemotePrefix];
              unsigned __int8 v55 = v54;
              if (v54 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (address->sa_family == 30) {
                  unsigned __int8 v55 = 0x80;
                }
                else {
                  unsigned __int8 v55 = 32;
                }
              }
              id v56 = [v90 matchRemoteHostOrNetworkEndpoint];
              id v57 = +[NWEndpoint endpointWithCEndpoint:v56];
              BOOL v58 = +[NEPolicyCondition flowRemoteAddress:v57 prefix:v55];
              [v14 addObject:v58];

              NEIsWildcardAddress();
            }
          }
          uint64_t v59 = [v90 matchLocalNetworkEndpoint];
          if (v59)
          {
            id v60 = (void *)v59;
            id v61 = [v90 matchLocalNetworkEndpoint];
            nw_endpoint_type_t v62 = nw_endpoint_get_type(v61);

            if (v62 == nw_endpoint_type_address)
            {
              id v63 = [v90 matchLocalNetworkEndpoint];
              uint64_t v64 = nw_endpoint_get_address(v63);

              id v65 = [v90 matchLocalPrefix];
              unsigned __int8 v66 = v65;
              if (v65 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (v64->sa_family == 30) {
                  unsigned __int8 v66 = 0x80;
                }
                else {
                  unsigned __int8 v66 = 32;
                }
              }
              id v67 = [v90 matchLocalNetworkEndpoint];
              id v68 = +[NWEndpoint endpointWithCEndpoint:v67];
              id v69 = +[NEPolicyCondition flowLocalAddress:v68 prefix:v66];
              [v14 addObject:v69];

              NEIsWildcardAddress();
            }
          }
          id v70 = objc_alloc((Class)NEPolicy);
          uint64_t v71 = a6;
          id v72 = v13;
        }
        id v36 = [v70 initWithOrder:v71 result:v72 conditions:v14];
        id v74 = objc_getProperty(a1, v73, 48, 1);
        id v12 = (id)v89;
        sub_1000312DC(v89, v36, v74);
LABEL_33:

        if (!v19)
        {
LABEL_42:

          goto LABEL_43;
        }
        uint64_t v75 = [v90 matchRemoteHostOrNetworkEndpoint];
        if (!v75
          || (BOOL v76 = (void *)v75,
              [v90 matchRemoteHostOrNetworkEndpoint],
              uint64_t v77 = objc_claimAutoreleasedReturnValue(),
              int v78 = nw_endpoint_get_port(v77),
              v77,
              v76,
              !v78))
        {
          id v79 = v14;
          if (!v79)
          {
LABEL_41:

            goto LABEL_42;
          }
LABEL_40:
          id v83 = objc_getProperty(a1, v82, 56, 1);
          sub_10003116C((BOOL)v12, v79, v83);
          goto LABEL_41;
        }
        id v79 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v80 = +[NEPolicyCondition allInterfaces];
        [v79 addObject:v80];

        if (v87 == 1)
        {
          uint64_t v81 = 6;
        }
        else
        {
          if (v87 != 2) {
            goto LABEL_49;
          }
          uint64_t v81 = 17;
        }
        uint64_t v84 = +[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", v81, v87);
        [v79 addObject:v84];

LABEL_49:
        uint64_t v85 = [v90 matchRemoteHostOrNetworkEndpoint:v87];
        id v86 = +[NEPolicyCondition schemeUsingPort:nw_endpoint_get_port(v85)];
        [v79 addObject:v86];

        if (!v79) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      id v20 = +[NEPolicyCondition isInbound];
    }
    [v14 addObject:v20];

    goto LABEL_12;
  }
LABEL_43:
}

void sub_10003D2D4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  id v6 = [v5 arrayByAddingObjectsFromArray:v4];

  id v7 = ne_log_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136315394;
    BOOL v15 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:p"
          "erApp:disableEncryptedDNSSettings:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s: Installing perApp Content Filter policy %@", (uint8_t *)&v14, 0x16u);
  }

  if (!sub_10003BE38(*(_DWORD **)(a1 + 40), *(void **)(a1 + 48), v6))
  {
    id v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to install content filter pass policies", (uint8_t *)&v14, 2u);
    }
  }
  uint64_t v9 = *(void *)(a1 + 48);
  id v11 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 64) result:*(void *)(a1 + 56) conditions:v6];
  id v12 = *(void **)(a1 + 40);
  if (v12) {
    id Property = objc_getProperty(v12, v10, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v9, v11, Property);
}

uint64_t sub_10003D478(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 152, 1);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v22 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  id v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 152, 1);
  }
  else {
    id v8 = 0;
  }
  sub_10003033C(v3, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = [*(id *)(a1 + 40) appRules];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10003D69C;
  v18[3] = &unk_1000C5BD0;
  id v11 = v3;
  uint64_t v12 = *(void *)(a1 + 32);
  id v19 = v11;
  uint64_t v20 = v12;
  sub_100034F48(v9, v10, 0, 0, 0, 0, v11, v18, 0);

  id v13 = ne_log_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    id v17 = *(id *)(a1 + 32);
    if (v17) {
      id v17 = objc_getProperty(v17, v14, 152, 1);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v22 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v17;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
  }

  return 1;
}

void sub_10003D69C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  id v6 = ne_log_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136315394;
    BOOL v15 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s: Installing perApp drop policy %@", (uint8_t *)&v14, 0x16u);
  }

  if ((a3 & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = objc_alloc((Class)NEPolicy);
    uint64_t v9 = +[NEPolicyResult drop];
    id v11 = [v8 initWithOrder:10000 result:v9 conditions:v5];
    uint64_t v12 = *(void **)(a1 + 40);
    if (v12) {
      id Property = objc_getProperty(v12, v10, 152, 1);
    }
    else {
      id Property = 0;
    }
    sub_10002FBAC(v7, v11, Property);
  }
}

id sub_10003D7F0(id result, const char *a2)
{
  if (result)
  {
    int v2 = result;
    id result = [objc_getProperty(result, a2, 152, 1) count];
    if (result)
    {
      id v3 = ne_log_large_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v7 = "-[NESMPolicySession removePerAppDropPolicy]";
        __int16 v8 = 2112;
        id Property = objc_getProperty(v2, v4, 152, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s: policy IDs to be removed: %@", buf, 0x16u);
      }

      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      _DWORD v5[2] = sub_10003D92C;
      v5[3] = &unk_1000C5AD0;
      void v5[4] = v2;
      return (id)sub_10002EC18((uint64_t)NESMPolicyMasterSession, v5);
    }
  }
  return result;
}

uint64_t sub_10003D92C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 152, 1);
  }
  else {
    id Property = 0;
  }
  if (sub_10003033C(v4, Property)) {
    uint64_t v7 = sub_10002F2DC(v4);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t sub_10003D99C(uint64_t a1, void *a2)
{
  id v42 = a2;
  id v3 = ne_log_large_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 144, 1);
    }
    *(_DWORD *)buf = 136315394;
    unsigned __int8 v55 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
    __int16 v56 = 2112;
    id v57 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
  }

  id v6 = *(void **)(a1 + 32);
  if (v6) {
    id v7 = objc_getProperty(v6, v5, 144, 1);
  }
  else {
    id v7 = 0;
  }
  sub_10003033C(v42, v7);
  id v40 = +[NSMutableArray array];
  __int16 v8 = (void *)NEResourcesCopyContentFilterDefaultDropExclusionList();
  if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v39 = v8;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v47 objects:v53 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v48;
      do
      {
        for (id i = 0; i != v11; id i = (char *)i + 1)
        {
          if (*(void *)v48 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          id v15 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", v14, v39);
          __int16 v16 = v15;
          if (v15 && [v15 count])
          {
            if ([v16 count]) {
              [v40 addObjectsFromArray:v16];
            }
          }
          else
          {
            id v17 = ne_log_obj();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              unsigned __int8 v55 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
              __int16 v56 = 2112;
              id v57 = v14;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s: Failed to resolve path %@ to Mach-o UUIDs", buf, 0x16u);
            }
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v47 objects:v53 count:16];
      }
      while (v11);
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id obj = v40;
    id v18 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v44;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v44 != v20) {
            objc_enumerationMutation(obj);
          }
          uint64_t v22 = +[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(void *)(*((void *)&v43 + 1) + 8 * (void)v21), v39);
          v51[0] = v22;
          __int16 v23 = +[NEPolicyCondition platformBinary];
          v51[1] = v23;
          id v24 = +[NEPolicyCondition allInterfaces];
          v51[2] = v24;
          id v25 = +[NSArray arrayWithObjects:v51 count:3];

          id v26 = objc_alloc((Class)NEPolicy);
          id v27 = +[NEPolicyResult passWithFlags:1];
          id v28 = [v26 initWithOrder:101 result:v27 conditions:v25];

          uint64_t v30 = *(void **)(a1 + 32);
          if (v30) {
            id v31 = objc_getProperty(v30, v29, 144, 1);
          }
          else {
            id v31 = 0;
          }
          sub_10002FBAC((BOOL)v42, v28, v31);

          uint64_t v21 = (char *)v21 + 1;
        }
        while (v19 != v21);
        id v32 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
        id v19 = v32;
      }
      while (v32);
    }

    id v33 = ne_log_obj();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      id v38 = *(id *)(a1 + 32);
      __int16 v8 = v39;
      if (v38) {
        id v38 = objc_getProperty(v38, v34, 144, 1);
      }
      *(_DWORD *)buf = 136315394;
      unsigned __int8 v55 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      __int16 v56 = 2112;
      id v57 = v38;
      _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added at Low priority: %@", buf, 0x16u);
      uint64_t v35 = 1;
    }
    else
    {
      uint64_t v35 = 1;
      __int16 v8 = v39;
    }
  }
  else
  {
    id v33 = ne_log_obj();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      unsigned __int8 v55 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s: Content filter exclusion list not found", buf, 0xCu);
    }
    uint64_t v35 = 0;
  }

  return v35;
}

id sub_10003DEC4(id result, const char *a2)
{
  if (result)
  {
    int v2 = result;
    id result = [objc_getProperty(result, a2, 144, 1) count];
    if (result)
    {
      id v3 = ne_log_large_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        id v7 = "-[NESMPolicySession removeDefaultDropExclusionPolicy]";
        __int16 v8 = 2112;
        id Property = objc_getProperty(v2, v4, 144, 1);
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s: policy IDs to be removed: %@", buf, 0x16u);
      }

      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      _DWORD v5[2] = sub_10003E000;
      v5[3] = &unk_1000C5AD0;
      void v5[4] = v2;
      return (id)sub_10002EC18((uint64_t)NESMPolicyMasterSession, v5);
    }
  }
  return result;
}

uint64_t sub_10003E000(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 144, 1);
  }
  else {
    id Property = 0;
  }
  if (sub_10003033C(v4, Property)) {
    uint64_t v7 = sub_10002F2DC(v4);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_10003E070(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = a2;
  id v3 = objc_alloc_init((Class)NSMutableArray);
  id v4 = [v2 matchSigningIdentifier];
  id v5 = [v2 matchPath];

  [v4 UTF8String];
  [v5 UTF8String];
  id v6 = (void *)NEHelperCacheCopyAppUUIDMappingForUIDExtended();
  uint64_t v7 = v6;
  if (v6 && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_10003E1B0;
    applier[3] = &unk_1000C6AB8;
    id v10 = v3;
    xpc_array_apply(v7, applier);
  }
  return v3;
}

uint64_t sub_10003E1B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v5)];
    [v6 addObject:v7];
  }
  return 1;
}

void sub_10003E240(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 count])
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    int v14 = v4;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (id i = 0; i != v7; id i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v11 = sub_10003E070(a1, v10);
          if (![v11 count])
          {
            uint64_t v12 = ne_log_obj();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              id v13 = [v10 matchSigningIdentifier];
              *(_DWORD *)buf = 138412290;
              uint64_t v20 = v13;
              _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No Mach-O UUIDs found for app rule %@", buf, 0xCu);
            }
          }
          [v10 setCachedMachOUUIDs:v11];
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v7);
    }

    id v4 = v14;
  }
}

void sub_10003E404(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1 && isa_nsarray() && *(_DWORD *)(a1 + 8) == 1)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10003E4F8;
    v9[3] = &unk_1000C5D28;
    v9[4] = a1;
    id v10 = v8;
    id v11 = v7;
    int v12 = a4;
    sub_10002EC18((uint64_t)NESMPolicyMasterSession, v9);
  }
}

uint64_t sub_10003E4F8(uint64_t a1, void *a2)
{
  id v93 = a2;
  id v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = objc_getProperty(v3, v2, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v93, Property);
  id v5 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 40)];
  int v6 = sub_1000317B4(*(void *)(a1 + 32));
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id obj = *(id *)(a1 + 48);
  id v78 = [obj countByEnumeratingWithState:&v122 objects:v137 count:16];
  if (v78)
  {
    uint64_t v7 = (v6 + 100);
    uint64_t v77 = *(void *)v123;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v123 != v77) {
          objc_enumerationMutation(obj);
        }
        uint64_t v79 = v8;
        id v9 = *(void **)(*((void *)&v122 + 1) + 8 * v8);
        id v82 = objc_alloc_init((Class)NSMutableArray);
        id v10 = objc_alloc_init((Class)NSMutableArray);
        id v11 = objc_alloc_init((Class)NSMutableArray);
        id v80 = sub_10003E070(*(void *)(a1 + 32), v9);
        id v87 = v11;
        if (isa_nsarray())
        {
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          id v12 = v80;
          id v13 = [v12 countByEnumeratingWithState:&v118 objects:v136 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v119;
            do
            {
              for (id i = 0; i != v14; id i = (char *)i + 1)
              {
                if (*(void *)v119 != v15) {
                  objc_enumerationMutation(v12);
                }
                long long v17 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v118 + 1) + 8 * i)];
                [v82 addObject:v17];
              }
              id v14 = [v12 countByEnumeratingWithState:&v118 objects:v136 count:16];
            }
            while (v14);
          }

          id v11 = v87;
        }
        if ([v82 count])
        {
          long long v18 = [v9 matchDomains];
          int v19 = isa_nsarray();

          if (v19)
          {
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            uint64_t v20 = [v9 matchDomains];
            id v21 = [v20 countByEnumeratingWithState:&v114 objects:v135 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v115;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v115 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  id v25 = +[NEPolicyCondition domain:*(void *)(*((void *)&v114 + 1) + 8 * (void)j)];
                  [v10 addObject:v25];
                }
                id v22 = [v20 countByEnumeratingWithState:&v114 objects:v135 count:16];
              }
              while (v22);
            }

            id v11 = v87;
          }
          id v26 = [v9 matchAccountIdentifiers];
          int v27 = isa_nsarray();

          if (v27)
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            id v28 = [v9 matchAccountIdentifiers];
            id v29 = [v28 countByEnumeratingWithState:&v110 objects:v134 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v111;
              do
              {
                for (k = 0; k != v30; k = (char *)k + 1)
                {
                  if (*(void *)v111 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  id v33 = +[NEPolicyCondition accountIdentifier:*(void *)(*((void *)&v110 + 1) + 8 * (void)k)];
                  [v11 addObject:v33];
                }
                id v30 = [v28 countByEnumeratingWithState:&v110 objects:v134 count:16];
              }
              while (v30);
            }
          }
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          id v81 = v82;
          id v84 = [v81 countByEnumeratingWithState:&v106 objects:v133 count:16];
          if (v84)
          {
            uint64_t v83 = *(void *)v107;
            id v86 = v10;
            do
            {
              BOOL v34 = 0;
              do
              {
                if (*(void *)v107 != v83) {
                  objc_enumerationMutation(v81);
                }
                uint64_t v85 = v34;
                uint64_t v35 = *(void *)(*((void *)&v106 + 1) + 8 * (void)v34);
                if ([v86 count])
                {
                  long long v104 = 0u;
                  long long v105 = 0u;
                  long long v102 = 0u;
                  long long v103 = 0u;
                  id v90 = v86;
                  id v36 = [v90 countByEnumeratingWithState:&v102 objects:v132 count:16];
                  if (v36)
                  {
                    id v37 = v36;
                    uint64_t v38 = *(void *)v103;
                    uint64_t v88 = *(void *)v103;
                    do
                    {
                      id v39 = 0;
                      id v89 = v37;
                      do
                      {
                        if (*(void *)v103 != v38) {
                          objc_enumerationMutation(v90);
                        }
                        uint64_t v40 = *(void *)(*((void *)&v102 + 1) + 8 * (void)v39);
                        if ([v11 count])
                        {
                          long long v100 = 0u;
                          long long v101 = 0u;
                          long long v98 = 0u;
                          long long v99 = 0u;
                          id v41 = v11;
                          id v42 = [v41 countByEnumeratingWithState:&v98 objects:v131 count:16];
                          if (v42)
                          {
                            id v43 = v42;
                            unsigned int v91 = v39;
                            uint64_t v44 = *(void *)v99;
                            do
                            {
                              long long v45 = 0;
                              do
                              {
                                if (*(void *)v99 != v44) {
                                  objc_enumerationMutation(v41);
                                }
                                uint64_t v46 = *(void *)(*((void *)&v98 + 1) + 8 * (void)v45);
                                v130[0] = v35;
                                v130[1] = v40;
                                v130[2] = v46;
                                long long v47 = +[NSArray arrayWithObjects:v130 count:3];
                                id v49 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v5 conditions:v47];
                                long long v50 = *(void **)(a1 + 32);
                                if (v50) {
                                  id v51 = objc_getProperty(v50, v48, 48, 1);
                                }
                                else {
                                  id v51 = 0;
                                }
                                sub_1000312DC((BOOL)v93, v49, v51);

                                long long v45 = (char *)v45 + 1;
                              }
                              while (v43 != v45);
                              id v52 = [v41 countByEnumeratingWithState:&v98 objects:v131 count:16];
                              id v43 = v52;
                            }
                            while (v52);
                            id v11 = v87;
                            uint64_t v38 = v88;
                            id v37 = v89;
                            id v39 = v91;
                          }
                        }
                        else
                        {
                          v129[0] = v35;
                          v129[1] = v40;
                          id v41 = +[NSArray arrayWithObjects:v129 count:2];
                          id v54 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v5 conditions:v41];
                          unsigned __int8 v55 = *(void **)(a1 + 32);
                          if (v55) {
                            id v56 = objc_getProperty(v55, v53, 48, 1);
                          }
                          else {
                            id v56 = 0;
                          }
                          sub_1000312DC((BOOL)v93, v54, v56);
                        }
                        id v39 = (char *)v39 + 1;
                      }
                      while (v39 != v37);
                      id v57 = [v90 countByEnumeratingWithState:&v102 objects:v132 count:16];
                      id v37 = v57;
                    }
                    while (v57);
                  }
LABEL_80:
                  BOOL v34 = v85;
                  id v10 = v86;
                  goto LABEL_81;
                }
                if ([v11 count])
                {
                  long long v96 = 0u;
                  long long v97 = 0u;
                  long long v94 = 0u;
                  long long v95 = 0u;
                  id v90 = v11;
                  id v58 = [v90 countByEnumeratingWithState:&v94 objects:v128 count:16];
                  if (v58)
                  {
                    id v59 = v58;
                    uint64_t v60 = *(void *)v95;
                    do
                    {
                      id v61 = 0;
                      do
                      {
                        if (*(void *)v95 != v60) {
                          objc_enumerationMutation(v90);
                        }
                        uint64_t v62 = *(void *)(*((void *)&v94 + 1) + 8 * (void)v61);
                        v127[0] = v35;
                        v127[1] = v62;
                        id v63 = +[NSArray arrayWithObjects:v127 count:2];
                        id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v5 conditions:v63];
                        unsigned __int8 v66 = *(void **)(a1 + 32);
                        if (v66) {
                          id v67 = objc_getProperty(v66, v64, 48, 1);
                        }
                        else {
                          id v67 = 0;
                        }
                        sub_1000312DC((BOOL)v93, v65, v67);

                        id v61 = (char *)v61 + 1;
                      }
                      while (v59 != v61);
                      id v68 = [v90 countByEnumeratingWithState:&v94 objects:v128 count:16];
                      id v59 = v68;
                    }
                    while (v68);
                  }
                  goto LABEL_80;
                }
                uint64_t v126 = v35;
                id v90 = +[NSArray arrayWithObjects:&v126 count:1];
                id v70 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v5 conditions:v90];
                uint64_t v71 = *(void **)(a1 + 32);
                if (v71) {
                  id v72 = objc_getProperty(v71, v69, 48, 1);
                }
                else {
                  id v72 = 0;
                }
                id v10 = v86;
                sub_1000312DC((BOOL)v93, v70, v72);

LABEL_81:
                BOOL v34 = (char *)v34 + 1;
              }
              while (v34 != v84);
              id v73 = [v81 countByEnumeratingWithState:&v106 objects:v133 count:16];
              id v84 = v73;
            }
            while (v73);
          }
        }
        uint64_t v8 = v79 + 1;
      }
      while ((id)(v79 + 1) != v78);
      id v78 = [obj countByEnumeratingWithState:&v122 objects:v137 count:16];
    }
    while (v78);
  }

  uint64_t v74 = sub_10002F2DC(v93);
  return v74;
}

uint64_t sub_10003EDC4(uint64_t a1, void *a2)
{
  id v96 = a2;
  id v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = objc_getProperty(v3, v2, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v96, Property);
  long long v94 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 40)];
  int v5 = sub_1000317B4(*(void *)(a1 + 32));
  id v93 = +[NEPolicyCondition fallbackTraffic];
  int v6 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  id obj = *(id *)(a1 + 48);
  id v79 = [obj countByEnumeratingWithState:&v125 objects:v140 count:16];
  if (v79)
  {
    uint64_t v7 = (v5 + 100);
    uint64_t v78 = *(void *)v126;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v126 != v78) {
          objc_enumerationMutation(obj);
        }
        uint64_t v80 = v8;
        id v9 = *(void **)(*((void *)&v125 + 1) + 8 * v8);
        id v83 = objc_alloc_init((Class)NSMutableArray);
        id v87 = objc_alloc_init((Class)NSMutableArray);
        id v10 = objc_alloc_init((Class)NSMutableArray);
        id v81 = sub_10003E070(*(void *)(a1 + 32), v9);
        if (isa_nsarray())
        {
          long long v123 = 0u;
          long long v124 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          id v11 = v81;
          id v12 = [v11 countByEnumeratingWithState:&v121 objects:v139 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v122;
            do
            {
              for (id i = 0; i != v13; id i = (char *)i + 1)
              {
                if (*(void *)v122 != v14) {
                  objc_enumerationMutation(v11);
                }
                long long v16 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v121 + 1) + 8 * i)];
                [v83 addObject:v16];
              }
              id v13 = [v11 countByEnumeratingWithState:&v121 objects:v139 count:16];
            }
            while (v13);
          }
        }
        long long v17 = v87;
        if ([v83 count])
        {
          long long v18 = [v9 matchDomains];
          int v19 = isa_nsarray();

          if (v19)
          {
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            uint64_t v20 = [v9 matchDomains];
            id v21 = [v20 countByEnumeratingWithState:&v117 objects:v138 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v118;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v118 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  id v25 = +[NEPolicyCondition domain:*(void *)(*((void *)&v117 + 1) + 8 * (void)j)];
                  [v87 addObject:v25];
                }
                id v22 = [v20 countByEnumeratingWithState:&v117 objects:v138 count:16];
              }
              while (v22);
            }

            long long v17 = v87;
          }
          id v26 = [v9 matchAccountIdentifiers];
          int v27 = isa_nsarray();

          if (v27)
          {
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            id v28 = [v9 matchAccountIdentifiers];
            id v29 = [v28 countByEnumeratingWithState:&v113 objects:v137 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v114;
              do
              {
                for (k = 0; k != v30; k = (char *)k + 1)
                {
                  if (*(void *)v114 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  id v33 = +[NEPolicyCondition accountIdentifier:*(void *)(*((void *)&v113 + 1) + 8 * (void)k)];
                  [v10 addObject:v33];
                }
                id v30 = [v28 countByEnumeratingWithState:&v113 objects:v137 count:16];
              }
              while (v30);
            }

            long long v17 = v87;
          }
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          id v82 = v83;
          id v85 = [v82 countByEnumeratingWithState:&v109 objects:v136 count:16];
          if (v85)
          {
            uint64_t v84 = *(void *)v110;
            id v88 = v10;
            do
            {
              uint64_t v34 = 0;
              do
              {
                if (*(void *)v110 != v84)
                {
                  uint64_t v35 = v34;
                  objc_enumerationMutation(v82);
                  uint64_t v34 = v35;
                }
                uint64_t v86 = v34;
                uint64_t v36 = *(void *)(*((void *)&v109 + 1) + 8 * v34);
                if ([v87 count])
                {
                  long long v107 = 0u;
                  long long v108 = 0u;
                  long long v105 = 0u;
                  long long v106 = 0u;
                  id v91 = v87;
                  id v37 = [v91 countByEnumeratingWithState:&v105 objects:v135 count:16];
                  if (v37)
                  {
                    id v38 = v37;
                    uint64_t v39 = *(void *)v106;
                    uint64_t v89 = *(void *)v106;
                    do
                    {
                      uint64_t v40 = 0;
                      id v90 = v38;
                      do
                      {
                        if (*(void *)v106 != v39) {
                          objc_enumerationMutation(v91);
                        }
                        uint64_t v41 = *(void *)(*((void *)&v105 + 1) + 8 * (void)v40);
                        if ([v10 count])
                        {
                          id v92 = v40;
                          long long v103 = 0u;
                          long long v104 = 0u;
                          long long v101 = 0u;
                          long long v102 = 0u;
                          id v42 = v10;
                          id v43 = [v42 countByEnumeratingWithState:&v101 objects:v134 count:16];
                          if (v43)
                          {
                            id v44 = v43;
                            uint64_t v45 = *(void *)v102;
                            do
                            {
                              uint64_t v46 = 0;
                              do
                              {
                                if (*(void *)v102 != v45) {
                                  objc_enumerationMutation(v42);
                                }
                                uint64_t v47 = *(void *)(*((void *)&v101 + 1) + 8 * (void)v46);
                                v133[0] = v93;
                                v133[1] = v36;
                                v133[2] = v41;
                                v133[3] = v47;
                                v133[4] = v6;
                                long long v48 = +[NSArray arrayWithObjects:v133 count:5];
                                id v50 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v94 conditions:v48];
                                id v51 = *(void **)(a1 + 32);
                                if (v51) {
                                  id v52 = objc_getProperty(v51, v49, 48, 1);
                                }
                                else {
                                  id v52 = 0;
                                }
                                sub_1000312DC((BOOL)v96, v50, v52);

                                uint64_t v46 = (char *)v46 + 1;
                              }
                              while (v44 != v46);
                              id v53 = [v42 countByEnumeratingWithState:&v101 objects:v134 count:16];
                              id v44 = v53;
                            }
                            while (v53);
                            id v10 = v88;
                            uint64_t v39 = v89;
                            id v38 = v90;
                          }
                          uint64_t v40 = v92;
                        }
                        else
                        {
                          v132[0] = v93;
                          v132[1] = v36;
                          v132[2] = v41;
                          v132[3] = v6;
                          id v42 = +[NSArray arrayWithObjects:v132 count:4];
                          id v55 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v94 conditions:v42];
                          id v56 = *(void **)(a1 + 32);
                          if (v56) {
                            id v57 = objc_getProperty(v56, v54, 48, 1);
                          }
                          else {
                            id v57 = 0;
                          }
                          sub_1000312DC((BOOL)v96, v55, v57);
                        }
                        uint64_t v40 = (char *)v40 + 1;
                      }
                      while (v40 != v38);
                      id v58 = [v91 countByEnumeratingWithState:&v105 objects:v135 count:16];
                      id v38 = v58;
                    }
                    while (v58);
                  }
LABEL_81:
                  long long v17 = v87;
                  goto LABEL_82;
                }
                if ([v10 count])
                {
                  long long v99 = 0u;
                  long long v100 = 0u;
                  long long v97 = 0u;
                  long long v98 = 0u;
                  id v91 = v10;
                  id v59 = [v91 countByEnumeratingWithState:&v97 objects:v131 count:16];
                  if (v59)
                  {
                    id v60 = v59;
                    uint64_t v61 = *(void *)v98;
                    do
                    {
                      uint64_t v62 = 0;
                      do
                      {
                        if (*(void *)v98 != v61) {
                          objc_enumerationMutation(v91);
                        }
                        uint64_t v63 = *(void *)(*((void *)&v97 + 1) + 8 * (void)v62);
                        v130[0] = v93;
                        v130[1] = v36;
                        v130[2] = v63;
                        void v130[3] = v6;
                        uint64_t v64 = +[NSArray arrayWithObjects:v130 count:4];
                        id v66 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v94 conditions:v64];
                        id v67 = *(void **)(a1 + 32);
                        if (v67) {
                          id v68 = objc_getProperty(v67, v65, 48, 1);
                        }
                        else {
                          id v68 = 0;
                        }
                        sub_1000312DC((BOOL)v96, v66, v68);

                        uint64_t v62 = (char *)v62 + 1;
                      }
                      while (v60 != v62);
                      id v69 = [v91 countByEnumeratingWithState:&v97 objects:v131 count:16];
                      id v60 = v69;
                    }
                    while (v69);
                  }
                  goto LABEL_81;
                }
                v129[0] = v93;
                v129[1] = v36;
                void v129[2] = v6;
                id v91 = +[NSArray arrayWithObjects:v129 count:3];
                id v71 = [objc_alloc((Class)NEPolicy) initWithOrder:v7 result:v94 conditions:v91];
                id v72 = *(void **)(a1 + 32);
                if (v72) {
                  id v73 = objc_getProperty(v72, v70, 48, 1);
                }
                else {
                  id v73 = 0;
                }
                long long v17 = v87;
                sub_1000312DC((BOOL)v96, v71, v73);

LABEL_82:
                uint64_t v34 = v86 + 1;
              }
              while ((id)(v86 + 1) != v85);
              id v74 = [v82 countByEnumeratingWithState:&v109 objects:v136 count:16];
              id v85 = v74;
            }
            while (v74);
          }
        }
        uint64_t v8 = v80 + 1;
      }
      while ((id)(v80 + 1) != v79);
      id v79 = [obj countByEnumeratingWithState:&v125 objects:v140 count:16];
    }
    while (v79);
  }

  uint64_t v75 = sub_10002F2DC(v96);
  return v75;
}

id sub_10003F700(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = 0;
  if (a1 && a2)
  {
    id v5 = a3;
    id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%@-@%u", v5, a2];

    uint64_t v7 = (const char *)[v6 UTF8String];
    CC_LONG v8 = strlen(v7);
    CC_SHA256(v7, v8, md);
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:md];
  }

  return v3;
}

uint64_t sub_10003F7E8(uint64_t a1, void *a2, void *a3, void *a4, char a5, char a6, char a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a8;
  id v20 = a9;
  if (a1 && ([v16 count] || objc_msgSend(v19, "count")) && *(_DWORD *)(a1 + 8) == 2)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10003F974;
    v23[3] = &unk_1000C5E18;
    id v24 = v17;
    uint64_t v25 = a1;
    char v30 = a6;
    char v31 = a5;
    char v32 = a7;
    id v26 = v19;
    id v27 = v18;
    id v28 = v16;
    id v29 = v20;
    uint64_t v21 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v23);
  }
  else
  {
    uint64_t v21 = 0;
  }

  return v21;
}

uint64_t sub_10003F974(uint64_t a1, void *a2)
{
  id v84 = a2;
  id v3 = ne_log_large_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v67 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 48, 1);
    }
    buffer[0] = 138412546;
    *(void *)&buffer[1] = v67;
    LOWORD(buffer[3]) = 2112;
    *(void *)((char *)&buffer[3] + 2) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed for %@: %@", (uint8_t *)buffer, 0x16u);
  }

  id v6 = *(void **)(a1 + 40);
  if (v6) {
    id v7 = objc_getProperty(v6, v5, 48, 1);
  }
  else {
    id v7 = 0;
  }
  sub_10002F180(v84, v7);
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v8 = sub_10003790C(*(void *)(a1 + 40), *(void **)(a1 + 32), @"ProxyAgent");
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (*(unsigned char *)(a1 + 81))
  {
    uint64_t v9 = sub_10003790C(*(void *)(a1 + 40), *(void **)(a1 + 32), @"DNSAgent");
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v82 = +[NEPolicyCondition allInterfaces];
  if (v9)
  {
    uint64_t v10 = +[NEPolicyResult netAgentUUID:v9];
    if (v8)
    {
LABEL_12:
      uint64_t v11 = +[NEPolicyResult netAgentUUID:v8];
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v8) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = 0;
LABEL_15:
  BOOL v76 = (void *)v9;
  uint64_t v77 = (void *)v8;
  id v74 = (void *)v11;
  uint64_t v75 = (void *)v10;
  if (*(unsigned char *)(a1 + 82))
  {
    id v72 = 0;
LABEL_18:
    uint64_t v80 = 0;
    goto LABEL_19;
  }
  id v72 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 32)];
  if (*(unsigned char *)(a1 + 82)) {
    goto LABEL_18;
  }
  uint64_t v80 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 32) secondaryResultType:0];
LABEL_19:
  id v83 = +[NEPolicyResult skipWithOrder:sub_1000317B4(*(void *)(a1 + 40)) + 250];
  unsigned int v12 = sub_1000317B4(*(void *)(a1 + 40));
  unsigned int v70 = v12 + 100;
  unsigned int v71 = v12 + 20;
  int32x2_t v78 = vadd_s32(vdup_n_s32(v12), (int32x2_t)0xA00000065);
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  uint64_t v86 = (void *)a1;
  id v13 = *(id *)(a1 + 48);
  id v14 = [v13 countByEnumeratingWithState:&v105 objects:v117 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v106;
    do
    {
      id v17 = 0;
      do
      {
        if (*(void *)v106 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v105 + 1) + 8 * (void)v17);
        if (isa_nsstring())
        {
          id v19 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
          id v20 = [v18 stringByTrimmingCharactersInSet:v19];
          if ([v20 length])
          {
            v116[0] = v82;
            uint64_t v21 = +[NEPolicyCondition domain:v20];
            v116[1] = v21;
            id v22 = +[NSArray arrayWithObjects:v116 count:2];

            id v24 = [objc_alloc((Class)NEPolicy) initWithOrder:v78.u32[0] result:v80 conditions:v22];
            uint64_t v25 = *(void **)(a1 + 40);
            if (v25) {
              id v26 = objc_getProperty(v25, v23, 48, 1);
            }
            else {
              id v26 = 0;
            }
            sub_1000312DC((BOOL)v84, v24, v26);
          }
        }
        id v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v27 = [v13 countByEnumeratingWithState:&v105 objects:v117 count:16];
      id v15 = v27;
    }
    while (v27);
  }

  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v28 = *(id *)(a1 + 56);
  id v29 = [v28 countByEnumeratingWithState:&v101 objects:v115 count:16];
  if (v29)
  {
    id v30 = v29;
    id v31 = 0;
    uint64_t v32 = *(void *)v102;
    do
    {
      id v33 = 0;
      do
      {
        if (*(void *)v102 != v32) {
          objc_enumerationMutation(v28);
        }
        uint64_t v34 = *(void **)(*((void *)&v101 + 1) + 8 * (void)v33);
        uint64_t v114 = 0;
        long long v113 = 0u;
        memset(buffer, 0, sizeof(buffer));
        if (proc_pidinfo((int)[v34 intValue], 17, 1uLL, buffer, 56) == 56)
        {
          id v35 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:buffer];
          if (!v31) {
            id v31 = objc_alloc_init((Class)NSMutableArray);
          }
          [v31 addObject:v35];
          uint64_t v36 = +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", [v34 intValue]);
          v111[0] = v36;
          id v37 = +[NEPolicyCondition effectiveApplication:v35];
          v111[1] = v37;
          id v38 = +[NEPolicyCondition allInterfaces];
          v111[2] = v38;
          uint64_t v39 = +[NSArray arrayWithObjects:v111 count:3];

          id v41 = [objc_alloc((Class)NEPolicy) initWithOrder:sub_1000317B4(v86[5]) + 150 result:v83 conditions:v39];
          id v42 = (void *)v86[5];
          if (v42) {
            id v43 = objc_getProperty(v42, v40, 48, 1);
          }
          else {
            id v43 = 0;
          }
          sub_1000312DC((BOOL)v84, v41, v43);
        }
        id v33 = (char *)v33 + 1;
      }
      while (v30 != v33);
      id v44 = [v28 countByEnumeratingWithState:&v101 objects:v115 count:16];
      id v30 = v44;
    }
    while (v44);
  }
  else
  {
    id v31 = 0;
  }

  uint64_t v45 = v86[5];
  uint64_t v46 = (void *)v86[8];
  uint64_t v47 = (void *)v86[9];
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 3221225472;
  v91[2] = sub_100040284;
  v91[3] = &unk_1000C5DF0;
  id v73 = v72;
  id v92 = v73;
  id v48 = v84;
  unsigned int v98 = v70;
  uint64_t v49 = v86[5];
  id v93 = v48;
  uint64_t v94 = v49;
  id v81 = v80;
  id v95 = v81;
  id v85 = v75;
  id v96 = v85;
  int32x2_t v99 = v78;
  id v79 = v74;
  id v97 = v79;
  unsigned int v100 = v71;
  v87[0] = _NSConcreteStackBlock;
  v87[1] = 3221225472;
  v87[2] = sub_1000404CC;
  v87[3] = &unk_1000C5C60;
  id v50 = v48;
  uint64_t v51 = v86[5];
  id v88 = v50;
  uint64_t v89 = v51;
  id v52 = v83;
  id v90 = v52;
  sub_100034F48(v45, v46, 1, 1, v31, v47, v50, v91, v87);
  id v53 = +[NEPolicyRouteRule routeRuleWithAction:2 forInterfaceName:v86[4]];
  long long v110 = v53;
  id v54 = +[NSArray arrayWithObjects:&v110 count:1];

  uint64_t v55 = sub_1000317B4(v86[5]) + 200;
  id v56 = +[NEPolicyResult routeRules:v54];
  long long v109 = v82;
  id v57 = +[NSArray arrayWithObjects:&v109 count:1];
  id v59 = [objc_alloc((Class)NEPolicy) initWithOrder:v55 result:v56 conditions:v57];
  id v60 = (void *)v86[5];
  if (v60) {
    id v61 = objc_getProperty(v60, v58, 48, 1);
  }
  else {
    id v61 = 0;
  }
  sub_1000312DC((BOOL)v50, v59, v61);

  uint64_t v62 = sub_10002F2DC(v50);
  uint64_t v63 = ne_log_large_obj();
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v69 = v86[4];
    id v68 = (id)v86[5];
    if (v68) {
      id v68 = objc_getProperty(v68, v64, 48, 1);
    }
    buffer[0] = 138412546;
    *(void *)&buffer[1] = v69;
    LOWORD(buffer[3]) = 2112;
    *(void *)((char *)&buffer[3] + 2) = v68;
    _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "Policy IDs added for %@: %@", (uint8_t *)buffer, 0x16u);
  }

  return v62;
}

void sub_100040284(uint64_t a1, void *a2, char a3)
{
  id v33 = a2;
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = objc_alloc((Class)NEPolicy);
    int v7 = sub_1000317B4(*(void *)(a1 + 48));
    uint64_t v8 = (v7 + 150);
    id v9 = +[NEPolicyResult skipWithOrder:(v7 + 250)];
    id v11 = [v6 initWithOrder:v8 result:v9 conditions:v33];
    unsigned int v12 = *(void **)(a1 + 48);
    if (v12) {
      id Property = objc_getProperty(v12, v10, 48, 1);
    }
    else {
      id Property = 0;
    }
    sub_1000312DC(v5, v11, Property);

LABEL_21:
    goto LABEL_22;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 80) result:*(void *)(a1 + 32) conditions:v33];
    id v17 = *(void **)(a1 + 48);
    if (v17) {
      id v18 = objc_getProperty(v17, v15, 48, 1);
    }
    else {
      id v18 = 0;
    }
    sub_1000312DC(v14, v16, v18);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    id v21 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 84) result:*(void *)(a1 + 56) conditions:v33];
    id v22 = *(void **)(a1 + 48);
    if (v22) {
      id v23 = objc_getProperty(v22, v20, 48, 1);
    }
    else {
      id v23 = 0;
    }
    sub_1000312DC(v19, v21, v23);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v24 = *(void *)(a1 + 40);
    id v26 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 88) result:*(void *)(a1 + 64) conditions:v33];
    id v27 = *(void **)(a1 + 48);
    if (v27) {
      id v28 = objc_getProperty(v27, v25, 48, 1);
    }
    else {
      id v28 = 0;
    }
    sub_1000312DC(v24, v26, v28);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v29 = *(void *)(a1 + 40);
    id v9 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 92) result:*(void *)(a1 + 72) conditions:v33];
    id v31 = *(void **)(a1 + 48);
    if (v31) {
      id v32 = objc_getProperty(v31, v30, 48, 1);
    }
    else {
      id v32 = 0;
    }
    sub_1000312DC(v29, v9, v32);
    goto LABEL_21;
  }
LABEL_22:
}

void sub_1000404CC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [objc_alloc((Class)NEPolicy) initWithOrder:sub_1000317B4(a1[5]) + 5 result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v3, v8, Property);
}

void sub_100040580(uint64_t a1, void *a2, int a3, void *a4, unsigned int a5, void *a6, unsigned char *a7, void *a8, void *a9)
{
  id v15 = a2;
  id v250 = a4;
  id v249 = a6;
  id v228 = a8;
  id v227 = a9;
  self = (id)a1;
  if (a1)
  {
    unsigned int v16 = [v15 multicastPreferenceSet];
    id v17 = [v15 matchSigningIdentifier];
    unsigned int v18 = [v17 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"];

    id v226 = v15;
    unsigned int v224 = v18;
    if (v18)
    {
      id v19 = 0;
      id v20 = 0;
      id v21 = 0;
    }
    else
    {
      [v15 isIdentifierExternal];
      id v21 = sub_10003E070(a1, v15);
      if ([v21 count])
      {
        id v22 = ne_log_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          id v23 = [v15 matchSigningIdentifier];
          *(_DWORD *)buf = 138412546;
          v319 = v23;
          __int16 v320 = 2112;
          id v321 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "UUID: Found for %@: %@", buf, 0x16u);
        }
        uint64_t v24 = [v15 matchDomains];
        int v25 = isa_nsarray();

        if (v25)
        {
          unsigned int v26 = v16;
          id v20 = objc_alloc_init((Class)NSMutableArray);
          long long v280 = 0u;
          long long v281 = 0u;
          long long v282 = 0u;
          long long v283 = 0u;
          id v27 = [v15 matchDomains];
          id v28 = [v27 countByEnumeratingWithState:&v280 objects:v317 count:16];
          if (v28)
          {
            id v29 = v28;
            uint64_t v30 = *(void *)v281;
            do
            {
              for (id i = 0; i != v29; id i = (char *)i + 1)
              {
                if (*(void *)v281 != v30) {
                  objc_enumerationMutation(v27);
                }
                id v32 = +[NEPolicyCondition domain:*(void *)(*((void *)&v280 + 1) + 8 * i)];
                [v20 addObject:v32];
              }
              id v29 = [v27 countByEnumeratingWithState:&v280 objects:v317 count:16];
            }
            while (v29);
          }

          id v15 = v226;
          unsigned int v16 = v26;
        }
        else
        {
          id v20 = 0;
        }
        id v33 = [v15 matchAccountIdentifiers];
        int v34 = isa_nsarray();

        if (v34)
        {
          unsigned int v221 = v16;
          id v19 = objc_alloc_init((Class)NSMutableArray);
          long long v276 = 0u;
          long long v277 = 0u;
          long long v278 = 0u;
          long long v279 = 0u;
          id v35 = [v15 matchAccountIdentifiers];
          id v36 = [v35 countByEnumeratingWithState:&v276 objects:v316 count:16];
          if (v36)
          {
            id v37 = v36;
            uint64_t v38 = *(void *)v277;
            do
            {
              for (j = 0; j != v37; j = (char *)j + 1)
              {
                if (*(void *)v277 != v38) {
                  objc_enumerationMutation(v35);
                }
                uint64_t v40 = +[NEPolicyCondition accountIdentifier:*(void *)(*((void *)&v276 + 1) + 8 * (void)j)];
                [v19 addObject:v40];
              }
              id v37 = [v35 countByEnumeratingWithState:&v276 objects:v316 count:16];
            }
            while (v37);
          }

          unsigned int v16 = v221;
        }
        else
        {
          id v19 = 0;
        }
      }
      else
      {
        id v19 = 0;
        id v20 = 0;
      }
    }
    long long v233 = v20;
    unsigned int v225 = a5;
    v251 = +[NEPolicyCondition allInterfaces];
    id v41 = &AnalyticsSendEventLazy_ptr;
    if (!*a7)
    {
      unsigned int v222 = v16;
      long long v219 = a7;
      id v220 = v21;
      id v42 = +[NWAddressEndpoint endpointWithHostname:@"224.0.0.0" port:@"0"];
      long long v234 = +[NEPolicyCondition remoteAddress:v42 prefix:4];

      id v43 = +[NWAddressEndpoint endpointWithHostname:@"ff00::" port:@"0"];
      uint64_t v44 = +[NEPolicyCondition remoteAddress:v43 prefix:8];

      uint64_t v45 = +[NWAddressEndpoint endpointWithHostname:@"255.255.255.255" port:@"0"];
      uint64_t v46 = +[NEPolicyCondition remoteAddress:v45 prefix:32];

      uint64_t v47 = +[NWAddressEndpoint endpointWithHostname:@"224.0.0.0" port:@"0"];
      uint64_t v48 = +[NEPolicyCondition localAddress:v47 prefix:4];

      uint64_t v49 = +[NWAddressEndpoint endpointWithHostname:@"ff00::" port:@"0"];
      uint64_t v50 = +[NEPolicyCondition localAddress:v49 prefix:8];

      uint64_t v51 = +[NWAddressEndpoint endpointWithHostname:@"255.255.255.255" port:@"0"];
      uint64_t v52 = +[NEPolicyCondition localAddress:v51 prefix:32];

      v315[0] = v234;
      long long v217 = (void *)v46;
      long long v218 = (void *)v44;
      v315[1] = v44;
      v315[2] = v46;
      long long v215 = (void *)v50;
      long long v216 = (void *)v48;
      v315[3] = v48;
      v315[4] = v50;
      long long v214 = (void *)v52;
      v315[5] = v52;
      id v53 = +[NSArray arrayWithObjects:v315 count:6];
      id v54 = +[NEPolicyCondition localNetworks];
      uint64_t v55 = +[NEPolicyCondition ipProtocol:0];
      [v55 setNegative:1];
      id v56 = +[NEPolicyCondition isSystemProxyConnection];
      [v56 setNegative:1];
      uint64_t v57 = +[NEPolicyResult dropWithFlags:1];
      uint64_t v58 = +[NEPolicyResult dropWithFlags:3];
      v314[0] = v251;
      long long v212 = v56;
      long long v213 = v55;
      v314[1] = v55;
      v314[2] = v56;
      v314[3] = v54;
      id v59 = +[NSArray arrayWithObjects:v314 count:4];
      id v60 = [objc_alloc((Class)NEPolicy) initWithOrder:18090 result:v57 conditions:v59];
      id Property = objc_getProperty(self, v61, 48, 1);
      sub_1000312DC((BOOL)v250, v60, Property);

      v242 = (void *)v58;
      id v63 = [objc_alloc((Class)NEPolicy) initWithOrder:18104 result:v58 conditions:v59];
      id v65 = objc_getProperty(self, v64, 48, 1);
      sub_1000312DC((BOOL)v250, v63, v65);

      long long v274 = 0u;
      long long v275 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      id obj = v53;
      id v66 = [obj countByEnumeratingWithState:&v272 objects:v313 count:16];
      if (v66)
      {
        id v67 = v66;
        uint64_t v68 = *(void *)v273;
        do
        {
          for (k = 0; k != v67; k = (char *)k + 1)
          {
            if (*(void *)v273 != v68) {
              objc_enumerationMutation(obj);
            }
            uint64_t v70 = *(void *)(*((void *)&v272 + 1) + 8 * (void)k);
            v312[0] = v251;
            v312[1] = v70;
            unsigned int v71 = +[NSArray arrayWithObjects:v312 count:2];
            id v72 = [objc_alloc((Class)NEPolicy) initWithOrder:18092 result:v57 conditions:v71];
            id v74 = objc_getProperty(self, v73, 48, 1);
            sub_1000312DC((BOOL)v250, v72, v74);

            id v75 = [objc_alloc((Class)NEPolicy) initWithOrder:18106 result:v58 conditions:v71];
            id v77 = objc_getProperty(self, v76, 48, 1);
            sub_1000312DC((BOOL)v250, v75, v77);
          }
          id v67 = [obj countByEnumeratingWithState:&v272 objects:v313 count:16];
        }
        while (v67);
      }
      long long v211 = (void *)v57;

      int32x2_t v78 = +[NEPolicyResult netAgentUUID:v227];
      id v79 = objc_alloc((Class)NEPolicy);
      v311 = v251;
      uint64_t v80 = +[NSArray arrayWithObjects:&v311 count:1];
      id v81 = [v79 initWithOrder:18092 result:v78 conditions:v80];
      id v83 = objc_getProperty(self, v82, 48, 1);
      sub_1000312DC((BOOL)v250, v81, v83);

      id v84 = objc_alloc((Class)NEPolicy);
      v310 = v251;
      id v85 = +[NSArray arrayWithObjects:&v310 count:1];
      id v86 = [v84 initWithOrder:18106 result:v78 conditions:v85];
      id v88 = objc_getProperty(self, v87, 48, 1);
      sub_1000312DC((BOOL)v250, v86, v88);

      id v89 = objc_alloc((Class)NEPolicy);
      id v90 = +[NEPolicyResult skipWithOrder:18120];
      v309 = v251;
      id v91 = +[NSArray arrayWithObjects:&v309 count:1];
      id v92 = [v89 initWithOrder:18075 result:v90 conditions:v91];
      id v94 = objc_getProperty(self, v93, 48, 1);
      sub_1000312DC((BOOL)v250, v92, v94);

      id v95 = objc_alloc((Class)NEPolicy);
      uint64_t v96 = +[NEPolicyResult skipWithOrder:18120];
      v308[0] = v251;
      id v97 = +[NEPolicyCondition customEntitlement:@"com.apple.developer.media-device-discovery-extension"];
      v308[1] = v97;
      unsigned int v98 = +[NSArray arrayWithObjects:v308 count:2];
      int32x2_t v99 = (void *)v96;
      id v100 = [v95 initWithOrder:18085 result:v96 conditions:v98];
      id v102 = objc_getProperty(self, v101, 48, 1);
      sub_1000312DC((BOOL)v250, v100, v102);

      id v103 = objc_alloc((Class)NEPolicy);
      long long v104 = +[NEPolicyResult skipWithOrder:18120];
      v307[0] = v251;
      long long v105 = +[NEPolicyCondition customEntitlement:@"com.apple.developer.media-device-discovery-extension"];
      v307[1] = v105;
      long long v106 = +[NSArray arrayWithObjects:v307 count:2];
      id v107 = [v103 initWithOrder:18099 result:v104 conditions:v106];
      id v109 = objc_getProperty(self, v108, 48, 1);
      sub_1000312DC((BOOL)v250, v107, v109);

      long long v231 = +[NEPolicyCondition isListener];
      id v229 = +[NEPolicyCondition isInbound];
      long long v223 = +[NEPolicyCondition hasSignedResult];
      id v110 = objc_alloc((Class)NEPolicy);
      long long v111 = +[NEPolicyResult skipWithOrder:18091];
      v306[0] = v231;
      v306[1] = v251;
      long long v112 = +[NSArray arrayWithObjects:v306 count:2];
      id v113 = [v110 initWithOrder:18085 result:v111 conditions:v112];
      id v115 = objc_getProperty(self, v114, 48, 1);
      sub_1000312DC((BOOL)v250, v113, v115);

      id v116 = objc_alloc((Class)NEPolicy);
      long long v117 = +[NEPolicyResult skipWithOrder:18091];
      v305[0] = v229;
      v305[1] = v251;
      long long v118 = +[NSArray arrayWithObjects:v305 count:2];
      id v119 = [v116 initWithOrder:18085 result:v117 conditions:v118];
      id v121 = objc_getProperty(self, v120, 48, 1);
      sub_1000312DC((BOOL)v250, v119, v121);

      id v122 = objc_alloc((Class)NEPolicy);
      long long v123 = +[NEPolicyResult skipWithOrder:18091];
      v304[0] = v223;
      v304[1] = v251;
      long long v124 = +[NSArray arrayWithObjects:v304 count:2];
      id v125 = [v122 initWithOrder:18085 result:v123 conditions:v124];
      id v127 = objc_getProperty(self, v126, 48, 1);
      sub_1000312DC((BOOL)v250, v125, v127);

      id v128 = objc_alloc((Class)NEPolicy);
      long long v129 = +[NEPolicyResult skipWithOrder:18105];
      v303[0] = v231;
      v303[1] = v251;
      long long v130 = +[NSArray arrayWithObjects:v303 count:2];
      id v131 = [v128 initWithOrder:18099 result:v129 conditions:v130];
      id v133 = objc_getProperty(self, v132, 48, 1);
      sub_1000312DC((BOOL)v250, v131, v133);

      id v134 = objc_alloc((Class)NEPolicy);
      id v135 = +[NEPolicyResult skipWithOrder:18105];
      v302[0] = v229;
      v302[1] = v251;
      id v136 = +[NSArray arrayWithObjects:v302 count:2];
      id v137 = [v134 initWithOrder:18099 result:v135 conditions:v136];
      id v139 = objc_getProperty(self, v138, 48, 1);
      sub_1000312DC((BOOL)v250, v137, v139);

      id v140 = objc_alloc((Class)NEPolicy);
      uint64_t v141 = +[NEPolicyResult skipWithOrder:18105];
      v301[0] = v223;
      v301[1] = v251;
      __int16 v142 = +[NSArray arrayWithObjects:v301 count:2];
      id v143 = [v140 initWithOrder:18099 result:v141 conditions:v142];
      id v145 = objc_getProperty(self, v144, 48, 1);
      sub_1000312DC((BOOL)v250, v143, v145);

      long long v270 = 0u;
      long long v271 = 0u;
      long long v268 = 0u;
      long long v269 = 0u;
      id v236 = v228;
      id v244 = [v236 countByEnumeratingWithState:&v268 objects:v300 count:16];
      if (v244)
      {
        uint64_t v240 = *(void *)v269;
        do
        {
          for (m = 0; m != v244; m = (char *)m + 1)
          {
            if (*(void *)v269 != v240) {
              objc_enumerationMutation(v236);
            }
            char v147 = *(void **)(*((void *)&v268 + 1) + 8 * (void)m);
            if ([v147 addressFamily] == (id)30) {
              uint64_t v148 = 128;
            }
            else {
              uint64_t v148 = 32;
            }
            uint64_t v149 = +[NEPolicyCondition remoteAddress:v147 prefix:v148];
            id v150 = objc_alloc((Class)NEPolicy);
            id v151 = +[NEPolicyResult skipWithOrder:18091];
            v299[0] = v149;
            v299[1] = v251;
            id v152 = +[NSArray arrayWithObjects:v299 count:2];
            id v153 = [v150 initWithOrder:18085 result:v151 conditions:v152];
            id v155 = objc_getProperty(self, v154, 48, 1);
            sub_1000312DC((BOOL)v250, v153, v155);

            id v156 = objc_alloc((Class)NEPolicy);
            long long v157 = +[NEPolicyResult skipWithOrder:18105];
            v298[0] = v149;
            v298[1] = v251;
            long long v158 = +[NSArray arrayWithObjects:v298 count:2];
            id v159 = [v156 initWithOrder:18099 result:v157 conditions:v158];
            id v161 = objc_getProperty(self, v160, 48, 1);
            sub_1000312DC((BOOL)v250, v159, v161);
          }
          id v244 = [v236 countByEnumeratingWithState:&v268 objects:v300 count:16];
        }
        while (v244);
      }

      *long long v219 = 1;
      id v41 = &AnalyticsSendEventLazy_ptr;
      unsigned int v16 = v222;
      id v21 = v220;
    }
    if (v16) {
      unsigned int v162 = 18094;
    }
    else {
      unsigned int v162 = 18080;
    }
    if (a3) {
      uint64_t v163 = v162;
    }
    else {
      uint64_t v163 = 18120;
    }
    long long v164 = [v41[480] skipWithOrder:v163];
    long long v264 = 0u;
    long long v265 = 0u;
    long long v266 = 0u;
    long long v267 = 0u;
    id v230 = v21;
    id obja = v19;
    long long v235 = (char *)[v230 countByEnumeratingWithState:&v264 objects:v297 count:16];
    if (v235)
    {
      uint64_t v232 = *(void *)v265;
      do
      {
        long long v165 = 0;
        do
        {
          if (*(void *)v265 != v232) {
            objc_enumerationMutation(v230);
          }
          long long v237 = v165;
          uint64_t v166 = *(void *)(*((void *)&v264 + 1) + 8 * (void)v165);
          long long v167 = +[NEPolicyCondition effectiveApplication:v166];
          long long v168 = +[NEPolicyCondition realApplication:v166];
          if ([v233 count])
          {
            long long v262 = 0u;
            long long v263 = 0u;
            long long v260 = 0u;
            long long v261 = 0u;
            id v169 = v233;
            id v245 = [v169 countByEnumeratingWithState:&v260 objects:v296 count:16];
            if (v245)
            {
              id v241 = v169;
              uint64_t v243 = *(void *)v261;
              do
              {
                for (id n = 0; n != v245; id n = (char *)n + 1)
                {
                  if (*(void *)v261 != v243) {
                    objc_enumerationMutation(v169);
                  }
                  uint64_t v171 = *(void *)(*((void *)&v260 + 1) + 8 * (void)n);
                  if ([v19 count])
                  {
                    selfa = n;
                    long long v258 = 0u;
                    long long v259 = 0u;
                    long long v256 = 0u;
                    long long v257 = 0u;
                    id v172 = v19;
                    id v173 = [v172 countByEnumeratingWithState:&v256 objects:v295 count:16];
                    if (v173)
                    {
                      id v174 = v173;
                      uint64_t v175 = *(void *)v257;
                      do
                      {
                        for (iid i = 0; ii != v174; iid i = (char *)ii + 1)
                        {
                          if (*(void *)v257 != v175) {
                            objc_enumerationMutation(v172);
                          }
                          uint64_t v177 = *(void *)(*((void *)&v256 + 1) + 8 * (void)ii);
                          if (a3)
                          {
                            v294[0] = v167;
                            v294[1] = v168;
                            v294[2] = v171;
                            v294[3] = v177;
                            v294[4] = v251;
                            long long v178 = v294;
                            uint64_t v179 = 5;
                          }
                          else
                          {
                            v293[0] = v167;
                            v293[1] = v171;
                            v293[2] = v177;
                            v293[3] = v251;
                            long long v178 = v293;
                            uint64_t v179 = 4;
                          }
                          long long v180 = +[NSArray arrayWithObjects:v178 count:v179];
                          id v181 = [objc_alloc((Class)NEPolicy) initWithOrder:18070 result:v164 conditions:v180];
                          sub_1000312DC((BOOL)v250, v181, v249);
                        }
                        id v174 = [v172 countByEnumeratingWithState:&v256 objects:v295 count:16];
                      }
                      while (v174);
                      id v19 = obja;
                      id v169 = v241;
                    }
                    id n = selfa;
                  }
                  else
                  {
                    if (a3)
                    {
                      v292[0] = v167;
                      v292[1] = v168;
                      v292[2] = v171;
                      v292[3] = v251;
                      long long v182 = v292;
                      uint64_t v183 = 4;
                    }
                    else
                    {
                      v291[0] = v167;
                      v291[1] = v171;
                      v291[2] = v251;
                      long long v182 = v291;
                      uint64_t v183 = 3;
                    }
                    id v172 = +[NSArray arrayWithObjects:v182 count:v183];
                    id v184 = [objc_alloc((Class)NEPolicy) initWithOrder:18070 result:v164 conditions:v172];
                    sub_1000312DC((BOOL)v250, v184, v249);
                  }
                }
                id v245 = [v169 countByEnumeratingWithState:&v260 objects:v296 count:16];
              }
              while (v245);
            }
          }
          else if ([v19 count])
          {
            long long v254 = 0u;
            long long v255 = 0u;
            long long v252 = 0u;
            long long v253 = 0u;
            id v169 = v19;
            id v185 = [v169 countByEnumeratingWithState:&v252 objects:v290 count:16];
            if (v185)
            {
              id v186 = v185;
              uint64_t v187 = *(void *)v253;
              do
              {
                long long v188 = v169;
                for (jj = 0; jj != v186; jj = (char *)jj + 1)
                {
                  if (*(void *)v253 != v187) {
                    objc_enumerationMutation(v188);
                  }
                  uint64_t v190 = *(void *)(*((void *)&v252 + 1) + 8 * (void)jj);
                  if (a3)
                  {
                    v289[0] = v167;
                    v289[1] = v168;
                    v289[2] = v190;
                    v289[3] = v251;
                    long long v191 = v289;
                    uint64_t v192 = 4;
                  }
                  else
                  {
                    v288[0] = v167;
                    v288[1] = v190;
                    v288[2] = v251;
                    long long v191 = v288;
                    uint64_t v192 = 3;
                  }
                  long long v193 = +[NSArray arrayWithObjects:v191 count:v192];
                  id v194 = [objc_alloc((Class)NEPolicy) initWithOrder:18070 result:v164 conditions:v193];
                  sub_1000312DC((BOOL)v250, v194, v249);
                }
                id v169 = v188;
                id v186 = [v188 countByEnumeratingWithState:&v252 objects:v290 count:16];
              }
              while (v186);
            }
          }
          else
          {
            if (a3)
            {
              v287[0] = v167;
              v287[1] = v168;
              v287[2] = v251;
              long long v195 = v287;
              uint64_t v196 = 3;
            }
            else
            {
              v286[0] = v167;
              v286[1] = v251;
              long long v195 = v286;
              uint64_t v196 = 2;
            }
            id v169 = +[NSArray arrayWithObjects:v195 count:v196];
            id v197 = [objc_alloc((Class)NEPolicy) initWithOrder:18070 result:v164 conditions:v169];
            sub_1000312DC((BOOL)v250, v197, v249);
          }
          long long v165 = v237 + 1;
        }
        while (v237 + 1 != v235);
        long long v235 = (char *)[v230 countByEnumeratingWithState:&v264 objects:v297 count:16];
      }
      while (v235);
    }

    int v198 = a3;
    if (!v225) {
      int v198 = 0;
    }
    if ((v198 & v224) == 1)
    {
      id v199 = objc_alloc((Class)NEPolicy);
      long long v200 = +[NEPolicyResult skipWithOrder:18120];
      v285[0] = v251;
      long long v201 = +[NEPolicyCondition delegateIsPlatformBinary];
      v285[1] = v201;
      long long v202 = +[NSArray arrayWithObjects:v285 count:2];
      id v203 = [v199 initWithOrder:18072 result:v200 conditions:v202];
      sub_1000312DC((BOOL)v250, v203, v249);

      long long v204 = +[NEPolicyCondition flowRemoteAddressEmpty];
      [v204 setNegative:1];
      long long v205 = +[NEPolicyCondition effectivePID:0];
      [v205 setNegative:1];
      long long v206 = +[NEPolicyCondition uid:v225];
      id v207 = objc_alloc((Class)NEPolicy);
      long long v208 = +[NEPolicyResult skipWithOrder:18080];
      v284[0] = v251;
      v284[1] = v204;
      v284[2] = v205;
      v284[3] = v206;
      long long v209 = +[NSArray arrayWithObjects:v284 count:4];
      id v210 = [v207 initWithOrder:18074 result:v208 conditions:v209];
      sub_1000312DC((BOOL)v250, v210, v249);
    }
    id v15 = v226;
  }
}

uint64_t sub_100041D7C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 48, 1);
    }
    id v331 = Property;
    if (v3) {
      id v332 = objc_getProperty(v3, v330, 32, 1);
    }
    else {
      id v332 = 0;
    }
    id v333 = v332;
    *(_DWORD *)buf = 138412546;
    id v468 = v331;
    __int16 v469 = 2112;
    id v470 = v333;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@ and %@", buf, 0x16u);
  }
  id v7 = *(id *)(a1 + 32);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 48, 1);
  }
  id v8 = v7;
  sub_10002F180(v3, v8);

  if (v3)
  {
    id v10 = objc_getProperty(v3, v9, 32, 1);
    sub_10002F180(v3, v10);
  }
  else
  {
    id v10 = 0;
  }

  int v11 = sub_1000317B4(*(void *)(a1 + 32));
  v374 = +[NEPolicyResult skipWithOrder:(v11 + 130)];
  v373 = +[NEPolicyCondition allInterfaces];
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v12, 184, 1);
  }
  id v14 = v13;
  id v15 = [v14 allKeys];
  id v336 = [v15 mutableCopy];

  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 192, 1);
  }
  id v18 = v17;
  id v19 = [v18 allKeys];
  id v335 = [v19 mutableCopy];

  id v21 = *(id *)(a1 + 32);
  if (v21) {
    id v21 = objc_getProperty(v21, v20, 200, 1);
  }
  id v22 = v21;
  id v23 = [v22 allKeys];
  id v334 = [v23 mutableCopy];

  char v441 = 0;
  long long v437 = 0u;
  long long v438 = 0u;
  long long v439 = 0u;
  long long v440 = 0u;
  id v24 = *(id *)(a1 + 40);
  id v25 = [v24 countByEnumeratingWithState:&v437 objects:v466 count:16];
  uint64_t v375 = a1;
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v438;
    do
    {
      for (id i = 0; i != v26; id i = (char *)i + 1)
      {
        if (*(void *)v438 != v27) {
          objc_enumerationMutation(v24);
        }
        id v29 = *(void **)(*((void *)&v437 + 1) + 8 * i);
        uint64_t v30 = [v29 matchSigningIdentifier];
        if ([v30 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"])
        {
          unsigned __int8 v31 = [v29 denyMulticast];

          if (v31)
          {
            int v337 = 1;
            goto LABEL_24;
          }
        }
        else
        {
        }
      }
      id v26 = [v24 countByEnumeratingWithState:&v437 objects:v466 count:16];
    }
    while (v26);
    int v337 = 0;
LABEL_24:
    a1 = v375;
  }
  else
  {
    int v337 = 0;
  }

  long long v436 = 0u;
  long long v435 = 0u;
  long long v434 = 0u;
  long long v433 = 0u;
  id obj = *(id *)(a1 + 40);
  self = v3;
  id v344 = [obj countByEnumeratingWithState:&v433 objects:v465 count:16];
  if (v344)
  {
    unsigned int v370 = v11 + 100;
    unsigned int v367 = v11 + 110;
    unsigned int v338 = v11 + 120;
    uint64_t v343 = *(void *)v434;
    do
    {
      id v32 = 0;
      do
      {
        if (*(void *)v434 != v343) {
          objc_enumerationMutation(obj);
        }
        id v33 = *(void **)(*((void *)&v433 + 1) + 8 * (void)v32);
        int v34 = [v33 matchSigningIdentifier];
        id v35 = [v33 matchSigningIdentifier];
        unsigned int v36 = [v35 isEqualToString:@"PathRuleDefaultIdentifier"];

        if (v36)
        {
          id v37 = [*(id *)(a1 + 48) objectForKeyedSubscript:v34];
          if (isa_nsarray())
          {
            uint64_t v38 = +[NEPolicyResult routeRules:v37];
            v464 = v373;
            uint64_t v39 = +[NSArray arrayWithObjects:&v464 count:1];
            id v41 = [objc_alloc((Class)NEPolicy) initWithOrder:v338 result:v38 conditions:v39];
            id v42 = *(id *)(a1 + 32);
            if (v42) {
              id v42 = objc_getProperty(v42, v40, 48, 1);
            }
            id v43 = v42;
            sub_1000312DC((BOOL)v3, v41, v43);
          }
          goto LABEL_184;
        }
        uint64_t v44 = [v33 matchSigningIdentifier];
        unsigned int v45 = [v44 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"];

        if (!v45)
        {
          id v37 = objc_alloc_init((Class)NSMutableArray);
          id v348 = objc_alloc_init((Class)NSMutableArray);
          id v49 = objc_alloc_init((Class)NSMutableArray);
          uint64_t v50 = *(void *)(a1 + 32);
          [v33 isIdentifierExternal];
          id v342 = sub_10003E070(v50, v33);
          v351 = v49;
          v363 = v33;
          if (![v33 denyMulticast]) {
            goto LABEL_45;
          }
          uint64_t v52 = [v33 temporaryAllowMulticastNetworkName];
          if (v52)
          {
            id v53 = (void *)v52;
            id v54 = [v33 temporaryAllowMulticastNetworkName];
            unsigned __int8 v55 = [v54 isEqualToString:*(void *)(a1 + 72)];

            if (v55)
            {
LABEL_45:
              if (v337)
              {
                id v56 = *(id *)(a1 + 32);
                if (v56) {
                  id v56 = objc_getProperty(v56, v51, 200, 1);
                }
                id v57 = v56;
                uint64_t v58 = [v57 objectForKeyedSubscript:v34];

                uint64_t v59 = *(void *)(a1 + 32);
                [v33 isIdentifierExternal];
                id v60 = sub_10003E070(v59, v33);
                if (v58)
                {
                  [v334 removeObject:v34];
                  id v62 = *(id *)(a1 + 32);
                  if (v62) {
                    id v62 = objc_getProperty(v62, v61, 208, 1);
                  }
                  id v63 = v62;
                  SEL v64 = [v63 objectForKeyedSubscript:v34];

                  if (([v64 isEqualToArray:v60] & 1) == 0)
                  {
                    id v65 = ne_log_obj();
                    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
                    {
                      [v33 matchSigningIdentifier];
                      unsigned int v176 = v361 = v60;
                      *(_DWORD *)buf = 138412546;
                      id v468 = v176;
                      __int16 v469 = 2112;
                      id v470 = v58;
                      _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Allow Policy IDs to be removed for %@: %@", buf, 0x16u);

                      id v60 = v361;
                    }

                    sub_10002F180(v3, v58);
                    goto LABEL_55;
                  }
                }
                else
                {
LABEL_55:
                  id v66 = v60;
                  id v67 = objc_alloc_init((Class)NSMutableArray);

                  id v69 = *(id *)(a1 + 32);
                  if (v69) {
                    id v69 = objc_getProperty(v69, v68, 200, 1);
                  }
                  id v70 = v69;
                  uint64_t v58 = v67;
                  [v70 setObject:v67 forKeyedSubscript:v34];

                  id v72 = *(id *)(a1 + 32);
                  if (v72) {
                    id v72 = objc_getProperty(v72, v71, 208, 1);
                  }
                  id v60 = v66;
                  id v73 = v72;
                  [v73 setObject:v66 forKeyedSubscript:v34];

                  sub_100040580(*(void *)(a1 + 32), v33, 0, v3, *(_DWORD *)(a1 + 96), v58, &v441, *(void **)(a1 + 56), *(void **)(a1 + 64));
                  SEL v64 = ne_log_obj();
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 138412546;
                    id v468 = v34;
                    __int16 v469 = 2112;
                    id v470 = v58;
                    _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "Allow Policy IDs added for %@: %@", buf, 0x16u);
                  }
                }
LABEL_87:

                id v49 = v351;
              }
              v339 = v34;
              v340 = v32;
              if ([v33 denyAll])
              {
                int32x2_t v99 = ne_log_obj();
                if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  id v468 = v34;
                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Adding drop policy for %@", buf, 0xCu);
                }

                id v100 = +[NEPolicyResult drop];
                if (!v100)
                {
LABEL_182:

                  goto LABEL_183;
                }
              }
              else
              {
                SEL v101 = [*(id *)(a1 + 48) objectForKeyedSubscript:v34];
                if (isa_nsarray() && [v101 count])
                {
                  id v100 = +[NEPolicyResult routeRules:v101];
                }
                else
                {
                  id v100 = 0;
                }

                if (!v100) {
                  goto LABEL_182;
                }
              }
              if (isa_nsarray())
              {
                long long v432 = 0u;
                long long v431 = 0u;
                long long v430 = 0u;
                long long v429 = 0u;
                id v102 = v342;
                id v103 = [v102 countByEnumeratingWithState:&v429 objects:v463 count:16];
                if (v103)
                {
                  id v104 = v103;
                  uint64_t v105 = *(void *)v430;
                  do
                  {
                    for (j = 0; j != v104; j = (char *)j + 1)
                    {
                      if (*(void *)v430 != v105) {
                        objc_enumerationMutation(v102);
                      }
                      id v107 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v429 + 1) + 8 * (void)j)];
                      [v37 addObject:v107];
                    }
                    id v104 = [v102 countByEnumeratingWithState:&v429 objects:v463 count:16];
                  }
                  while (v104);
                }

                id v49 = v351;
              }
              if (![v37 count]) {
                goto LABEL_182;
              }
              SEL v108 = v363;
              id v109 = [v363 matchDomains];
              int v110 = isa_nsarray();

              if (v110)
              {
                long long v428 = 0u;
                long long v427 = 0u;
                long long v426 = 0u;
                long long v425 = 0u;
                long long v111 = [v363 matchDomains];
                id v112 = [v111 countByEnumeratingWithState:&v425 objects:v462 count:16];
                if (v112)
                {
                  id v113 = v112;
                  uint64_t v114 = *(void *)v426;
                  do
                  {
                    for (k = 0; k != v113; k = (char *)k + 1)
                    {
                      if (*(void *)v426 != v114) {
                        objc_enumerationMutation(v111);
                      }
                      id v116 = +[NEPolicyCondition domain:*(void *)(*((void *)&v425 + 1) + 8 * (void)k)];
                      [v348 addObject:v116];
                    }
                    id v113 = [v111 countByEnumeratingWithState:&v425 objects:v462 count:16];
                  }
                  while (v113);
                }

                SEL v108 = v363;
              }
              long long v117 = [v108 matchAccountIdentifiers];
              int v118 = isa_nsarray();

              if (v118)
              {
                long long v424 = 0u;
                long long v422 = 0u;
                long long v423 = 0u;
                long long v421 = 0u;
                id v119 = [v108 matchAccountIdentifiers];
                id v120 = [v119 countByEnumeratingWithState:&v421 objects:v461 count:16];
                if (v120)
                {
                  id v121 = v120;
                  uint64_t v122 = *(void *)v422;
                  do
                  {
                    for (m = 0; m != v121; m = (char *)m + 1)
                    {
                      if (*(void *)v422 != v122) {
                        objc_enumerationMutation(v119);
                      }
                      long long v124 = +[NEPolicyCondition accountIdentifier:*(void *)(*((void *)&v421 + 1) + 8 * (void)m)];
                      [v351 addObject:v124];
                    }
                    id v121 = [v119 countByEnumeratingWithState:&v421 objects:v461 count:16];
                  }
                  while (v121);
                }
              }
              long long v419 = 0u;
              long long v420 = 0u;
              long long v417 = 0u;
              long long v418 = 0u;
              id v345 = v37;
              id v125 = v351;
              id v347 = [v345 countByEnumeratingWithState:&v417 objects:v460 count:16];
              if (!v347)
              {
LABEL_181:
                id v37 = v345;

LABEL_183:
                int v34 = v339;
                id v32 = v340;
                goto LABEL_184;
              }
              uint64_t v346 = *(void *)v418;
              while (2)
              {
                uint64_t v126 = 0;
LABEL_129:
                if (*(void *)v418 != v346) {
                  objc_enumerationMutation(v345);
                }
                uint64_t v349 = v126;
                uint64_t v127 = *(void *)(*((void *)&v417 + 1) + 8 * v126);
                if ([v348 count])
                {
                  long long v415 = 0u;
                  long long v416 = 0u;
                  long long v413 = 0u;
                  long long v414 = 0u;
                  id v353 = v348;
                  id v360 = [v353 countByEnumeratingWithState:&v413 objects:v459 count:16];
                  if (v360)
                  {
                    id v356 = *(id *)v414;
                    do
                    {
                      for (id n = 0; n != v360; id n = (char *)n + 1)
                      {
                        if (*(id *)v414 != v356) {
                          objc_enumerationMutation(v353);
                        }
                        uint64_t v129 = *(void *)(*((void *)&v413 + 1) + 8 * (void)n);
                        if ([v125 count])
                        {
                          v364 = n;
                          long long v411 = 0u;
                          long long v412 = 0u;
                          long long v409 = 0u;
                          long long v410 = 0u;
                          id v130 = v125;
                          id v131 = [v130 countByEnumeratingWithState:&v409 objects:v458 count:16];
                          if (v131)
                          {
                            id v132 = v131;
                            uint64_t v133 = *(void *)v410;
                            do
                            {
                              for (iid i = 0; ii != v132; iid i = (char *)ii + 1)
                              {
                                if (*(void *)v410 != v133) {
                                  objc_enumerationMutation(v130);
                                }
                                uint64_t v135 = *(void *)(*((void *)&v409 + 1) + 8 * (void)ii);
                                v457[0] = v127;
                                v457[1] = v129;
                                v457[2] = v135;
                                v457[3] = v373;
                                id v136 = +[NSArray arrayWithObjects:v457 count:4];
                                id v138 = [objc_alloc((Class)NEPolicy) initWithOrder:v370 result:v100 conditions:v136];
                                id v139 = *(id *)(v375 + 32);
                                if (v139) {
                                  id v139 = objc_getProperty(v139, v137, 48, 1);
                                }
                                id v140 = v139;
                                sub_1000312DC((BOOL)self, v138, v140);

                                id v142 = [objc_alloc((Class)NEPolicy) initWithOrder:v367 result:v374 conditions:v136];
                                id v143 = *(id *)(v375 + 32);
                                if (v143) {
                                  id v143 = objc_getProperty(v143, v141, 48, 1);
                                }
                                id v144 = v143;
                                sub_1000312DC((BOOL)self, v142, v144);
                              }
                              id v132 = [v130 countByEnumeratingWithState:&v409 objects:v458 count:16];
                            }
                            while (v132);
                            a1 = v375;
                            uint64_t v3 = self;
                            id v125 = v351;
                          }
                          id n = v364;
                        }
                        else
                        {
                          v456[0] = v127;
                          v456[1] = v129;
                          v456[2] = v373;
                          id v130 = +[NSArray arrayWithObjects:v456 count:3];
                          id v146 = [objc_alloc((Class)NEPolicy) initWithOrder:v370 result:v100 conditions:v130];
                          id v147 = *(id *)(a1 + 32);
                          if (v147) {
                            id v147 = objc_getProperty(v147, v145, 48, 1);
                          }
                          id v148 = v147;
                          sub_1000312DC((BOOL)v3, v146, v148);

                          id v150 = [objc_alloc((Class)NEPolicy) initWithOrder:v367 result:v374 conditions:v130];
                          id v151 = *(id *)(a1 + 32);
                          if (v151) {
                            id v151 = objc_getProperty(v151, v149, 48, 1);
                          }
                          id v152 = v151;
                          sub_1000312DC((BOOL)v3, v150, v152);
                        }
                      }
                      id v360 = [v353 countByEnumeratingWithState:&v413 objects:v459 count:16];
                    }
                    while (v360);
                  }
                  goto LABEL_172;
                }
                if ([v125 count])
                {
                  long long v407 = 0u;
                  long long v408 = 0u;
                  long long v405 = 0u;
                  long long v406 = 0u;
                  id v353 = v125;
                  id v153 = [v353 countByEnumeratingWithState:&v405 objects:v455 count:16];
                  if (v153)
                  {
                    id v154 = v153;
                    uint64_t v155 = *(void *)v406;
                    do
                    {
                      for (jj = 0; jj != v154; jj = (char *)jj + 1)
                      {
                        if (*(void *)v406 != v155) {
                          objc_enumerationMutation(v353);
                        }
                        uint64_t v157 = *(void *)(*((void *)&v405 + 1) + 8 * (void)jj);
                        v454[0] = v127;
                        v454[1] = v157;
                        v454[2] = v373;
                        long long v158 = +[NSArray arrayWithObjects:v454 count:3];
                        id v160 = [objc_alloc((Class)NEPolicy) initWithOrder:v370 result:v100 conditions:v158];
                        id v161 = *(id *)(a1 + 32);
                        if (v161) {
                          id v161 = objc_getProperty(v161, v159, 48, 1);
                        }
                        id v162 = v161;
                        sub_1000312DC((BOOL)v3, v160, v162);

                        id v164 = [objc_alloc((Class)NEPolicy) initWithOrder:v367 result:v374 conditions:v158];
                        id v165 = *(id *)(a1 + 32);
                        if (v165) {
                          id v165 = objc_getProperty(v165, v163, 48, 1);
                        }
                        id v166 = v165;
                        sub_1000312DC((BOOL)v3, v164, v166);
                      }
                      id v154 = [v353 countByEnumeratingWithState:&v405 objects:v455 count:16];
                    }
                    while (v154);
                  }
                  id v125 = v351;
LABEL_172:
                  uint64_t v126 = v349;
                }
                else
                {
                  v453[0] = v127;
                  v453[1] = v373;
                  id v353 = +[NSArray arrayWithObjects:v453 count:2];
                  id v168 = [objc_alloc((Class)NEPolicy) initWithOrder:v370 result:v100 conditions:v353];
                  id v169 = *(id *)(a1 + 32);
                  if (v169) {
                    id v169 = objc_getProperty(v169, v167, 48, 1);
                  }
                  id v170 = v169;
                  sub_1000312DC((BOOL)v3, v168, v170);

                  id v172 = [objc_alloc((Class)NEPolicy) initWithOrder:v367 result:v374 conditions:v353];
                  id v173 = *(id *)(a1 + 32);
                  if (v173) {
                    id v173 = objc_getProperty(v173, v171, 48, 1);
                  }
                  id v174 = v173;
                  sub_1000312DC((BOOL)v3, v172, v174);
                }
                if ((id)++v126 == v347)
                {
                  id v175 = [v345 countByEnumeratingWithState:&v417 objects:v460 count:16];
                  id v347 = v175;
                  if (!v175) {
                    goto LABEL_181;
                  }
                  continue;
                }
                goto LABEL_129;
              }
            }
          }
          unsigned int v75 = [v33 multicastPreferenceSet];
          id v76 = *(id *)(a1 + 32);
          unsigned int v355 = v75;
          if (v76)
          {
            if (v75) {
              ptrdiff_t v77 = 192;
            }
            else {
              ptrdiff_t v77 = 184;
            }
            id v76 = objc_getProperty(v76, v74, v77, 1);
          }
          id v78 = v76;

          id v79 = [v78 objectForKeyedSubscript:v34];
          uint64_t v80 = *(void *)(a1 + 32);
          [v363 isIdentifierExternal];
          SEL v64 = sub_10003E070(v80, v363);
          id v359 = v78;
          if (v79)
          {
            if (v355) {
              id v81 = v335;
            }
            else {
              id v81 = v336;
            }
            [v81 removeObject:v34];
            id v83 = *(id *)(a1 + 32);
            if (v83) {
              id v83 = objc_getProperty(v83, v82, 208, 1);
            }
            id v84 = v83;
            id v85 = [v84 objectForKeyedSubscript:v34];

            if ([v85 isEqualToArray:v64])
            {
              id v60 = v79;
              id v33 = v363;
LABEL_86:

              uint64_t v58 = v359;
              goto LABEL_87;
            }
            id v89 = ne_log_obj();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              id v468 = v34;
              __int16 v469 = 2112;
              id v470 = v79;
              _os_log_debug_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "Deny Policy IDs to be removed for %@: %@", buf, 0x16u);
            }

            sub_10002F180(v3, v79);
            id v78 = v359;
          }
          id v90 = objc_alloc_init((Class)NSMutableArray);

          id v91 = v78;
          id v92 = v90;
          [v91 setObject:v90 forKeyedSubscript:v34];
          id v94 = *(id *)(a1 + 32);
          if (v94) {
            id v94 = objc_getProperty(v94, v93, 208, 1);
          }
          id v33 = v363;
          id v95 = v94;
          [v95 setObject:v64 forKeyedSubscript:v34];

          id v60 = v92;
          sub_100040580(*(void *)(a1 + 32), v363, 1, v3, *(_DWORD *)(a1 + 96), v92, &v441, *(void **)(a1 + 56), *(void **)(a1 + 64));
          id v85 = ne_log_obj();
          BOOL v96 = os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG);
          if (v355)
          {
            if (!v96) {
              goto LABEL_86;
            }
            *(_DWORD *)buf = 138412546;
            id v468 = v34;
            __int16 v469 = 2112;
            id v470 = v60;
            id v97 = v85;
            unsigned int v98 = "Silent deny Policy IDs added for %@: %@";
          }
          else
          {
            if (!v96) {
              goto LABEL_86;
            }
            *(_DWORD *)buf = 138412546;
            id v468 = v34;
            __int16 v469 = 2112;
            id v470 = v60;
            id v97 = v85;
            unsigned int v98 = "Deny Policy IDs added for %@: %@";
          }
          _os_log_debug_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, v98, buf, 0x16u);
          goto LABEL_86;
        }
        if (![v33 denyMulticast]) {
          goto LABEL_185;
        }
        id v47 = *(id *)(a1 + 32);
        if (v47) {
          id v47 = objc_getProperty(v47, v46, 184, 1);
        }
        id v48 = v47;
        id v37 = [v48 objectForKeyedSubscript:v34];

        if (v37)
        {
          [v336 removeObject:v34];
        }
        else
        {
          id v37 = objc_alloc_init((Class)NSMutableArray);
          id v87 = *(id *)(a1 + 32);
          if (v87) {
            id v87 = objc_getProperty(v87, v86, 184, 1);
          }
          id v88 = v87;
          [v88 setObject:v37 forKeyedSubscript:v34];

          sub_100040580(*(void *)(a1 + 32), v33, 1, v3, *(_DWORD *)(a1 + 96), v37, &v441, *(void **)(a1 + 56), *(void **)(a1 + 64));
        }
LABEL_184:

LABEL_185:
        id v32 = (char *)v32 + 1;
      }
      while (v32 != v344);
      id v177 = [obj countByEnumeratingWithState:&v433 objects:v465 count:16];
      id v344 = v177;
    }
    while (v177);
  }

  if (![v336 count]) {
    goto LABEL_217;
  }
  long long v403 = 0u;
  long long v404 = 0u;
  long long v401 = 0u;
  long long v402 = 0u;
  id v178 = v336;
  id v179 = [v178 countByEnumeratingWithState:&v401 objects:v452 count:16];
  if (!v179) {
    goto LABEL_216;
  }
  id v181 = v179;
  uint64_t v182 = *(void *)v402;
  do
  {
    uint64_t v183 = 0;
    do
    {
      if (*(void *)v402 != v182) {
        objc_enumerationMutation(v178);
      }
      id v184 = *(void **)(*((void *)&v401 + 1) + 8 * (void)v183);
      id v185 = *(id *)(v375 + 32);
      if (v185) {
        id v185 = objc_getProperty(v185, v180, 184, 1);
      }
      id v186 = v185;
      uint64_t v187 = [v186 objectForKeyedSubscript:v184];

      long long v188 = ne_log_obj();
      if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v468 = v184;
        __int16 v469 = 2112;
        id v470 = v187;
        _os_log_debug_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_DEBUG, "Deny Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002F180(self, v187);
      id v190 = *(id *)(v375 + 32);
      if (v190) {
        id v190 = objc_getProperty(v190, v189, 184, 1);
      }
      id v191 = v190;
      [v191 setObject:0 forKeyedSubscript:v184];

      id v193 = *(id *)(v375 + 32);
      if (v193) {
        id v193 = objc_getProperty(v193, v192, 200, 1);
      }
      id v194 = v193;
      long long v195 = [v194 objectForKeyedSubscript:v184];
      if (v195)
      {

LABEL_206:
        goto LABEL_210;
      }
      id v197 = *(id *)(v375 + 32);
      if (v197) {
        id v197 = objc_getProperty(v197, v196, 192, 1);
      }
      id v198 = v197;
      id v199 = [v198 objectForKeyedSubscript:v184];

      if (!v199)
      {
        id v201 = *(id *)(v375 + 32);
        if (v201) {
          id v201 = objc_getProperty(v201, v200, 208, 1);
        }
        id v194 = v201;
        [v194 setObject:0 forKeyedSubscript:v184];
        goto LABEL_206;
      }
LABEL_210:

      uint64_t v183 = (char *)v183 + 1;
      uint64_t v3 = self;
    }
    while (v181 != v183);
    id v202 = [v178 countByEnumeratingWithState:&v401 objects:v452 count:16];
    id v181 = v202;
  }
  while (v202);
LABEL_216:

  a1 = v375;
LABEL_217:
  if (![v335 count]) {
    goto LABEL_244;
  }
  long long v399 = 0u;
  long long v400 = 0u;
  long long v397 = 0u;
  long long v398 = 0u;
  id v203 = v335;
  id v204 = [v203 countByEnumeratingWithState:&v397 objects:v451 count:16];
  if (!v204) {
    goto LABEL_243;
  }
  id v206 = v204;
  uint64_t v207 = *(void *)v398;
  while (2)
  {
    long long v208 = 0;
    while (2)
    {
      if (*(void *)v398 != v207) {
        objc_enumerationMutation(v203);
      }
      long long v209 = *(void **)(*((void *)&v397 + 1) + 8 * (void)v208);
      id v210 = *(id *)(v375 + 32);
      if (v210) {
        id v210 = objc_getProperty(v210, v205, 192, 1);
      }
      id v211 = v210;
      long long v212 = [v211 objectForKeyedSubscript:v209];

      long long v213 = ne_log_obj();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v468 = v209;
        __int16 v469 = 2112;
        id v470 = v212;
        _os_log_debug_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_DEBUG, "Silent deny Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002F180(self, v212);
      id v215 = *(id *)(v375 + 32);
      if (v215) {
        id v215 = objc_getProperty(v215, v214, 184, 1);
      }
      id v216 = v215;
      [v216 setObject:0 forKeyedSubscript:v209];

      id v218 = *(id *)(v375 + 32);
      if (v218) {
        id v218 = objc_getProperty(v218, v217, 200, 1);
      }
      id v219 = v218;
      id v220 = [v219 objectForKeyedSubscript:v209];
      if (v220)
      {

        goto LABEL_233;
      }
      id v222 = *(id *)(v375 + 32);
      if (v222) {
        id v222 = objc_getProperty(v222, v221, 184, 1);
      }
      id v223 = v222;
      unsigned int v224 = [v223 objectForKeyedSubscript:v209];

      if (!v224)
      {
        id v226 = *(id *)(v375 + 32);
        if (v226) {
          id v226 = objc_getProperty(v226, v225, 208, 1);
        }
        id v219 = v226;
        [v219 setObject:0 forKeyedSubscript:v209];
LABEL_233:
      }
      long long v208 = (char *)v208 + 1;
      uint64_t v3 = self;
      if (v206 != v208) {
        continue;
      }
      break;
    }
    id v227 = [v203 countByEnumeratingWithState:&v397 objects:v451 count:16];
    id v206 = v227;
    if (v227) {
      continue;
    }
    break;
  }
LABEL_243:

  a1 = v375;
LABEL_244:
  if (![v334 count]) {
    goto LABEL_271;
  }
  long long v395 = 0u;
  long long v396 = 0u;
  long long v393 = 0u;
  long long v394 = 0u;
  id v229 = v334;
  id v230 = [v229 countByEnumeratingWithState:&v393 objects:v450 count:16];
  if (!v230) {
    goto LABEL_270;
  }
  id v232 = v230;
  uint64_t v233 = *(void *)v394;
  while (2)
  {
    long long v234 = 0;
    while (2)
    {
      if (*(void *)v394 != v233) {
        objc_enumerationMutation(v229);
      }
      long long v235 = *(void **)(*((void *)&v393 + 1) + 8 * (void)v234);
      id v236 = *(id *)(v375 + 32);
      if (v236) {
        id v236 = objc_getProperty(v236, v231, 200, 1);
      }
      id v237 = v236;
      long long v238 = [v237 objectForKeyedSubscript:v235];

      long long v239 = ne_log_obj();
      if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v468 = v235;
        __int16 v469 = 2112;
        id v470 = v238;
        _os_log_debug_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_DEBUG, "Allow Policy IDs to be removed for %@: %@", buf, 0x16u);
      }

      sub_10002F180(self, v238);
      id v241 = *(id *)(v375 + 32);
      if (v241) {
        id v241 = objc_getProperty(v241, v240, 200, 1);
      }
      id v242 = v241;
      [v242 setObject:0 forKeyedSubscript:v235];

      id v244 = *(id *)(v375 + 32);
      if (v244) {
        id v244 = objc_getProperty(v244, v243, 184, 1);
      }
      id v245 = v244;
      v246 = [v245 objectForKeyedSubscript:v235];
      if (v246)
      {

        goto LABEL_260;
      }
      id v248 = *(id *)(v375 + 32);
      if (v248) {
        id v248 = objc_getProperty(v248, v247, 192, 1);
      }
      id v249 = v248;
      id v250 = [v249 objectForKeyedSubscript:v235];

      if (!v250)
      {
        id v252 = *(id *)(v375 + 32);
        if (v252) {
          id v252 = objc_getProperty(v252, v251, 208, 1);
        }
        id v245 = v252;
        [v245 setObject:0 forKeyedSubscript:v235];
LABEL_260:
      }
      long long v234 = (char *)v234 + 1;
      uint64_t v3 = self;
      if (v232 != v234) {
        continue;
      }
      break;
    }
    id v253 = [v229 countByEnumeratingWithState:&v393 objects:v450 count:16];
    id v232 = v253;
    if (v253) {
      continue;
    }
    break;
  }
LABEL_270:

  a1 = v375;
LABEL_271:
  if (!v441)
  {
    id v254 = *(id *)(a1 + 32);
    if (v254) {
      id v254 = objc_getProperty(v254, v228, 184, 1);
    }
    id v255 = v254;
    if ([v255 count])
    {

      goto LABEL_279;
    }
    id v257 = *(id *)(a1 + 32);
    if (v257) {
      id v257 = objc_getProperty(v257, v256, 192, 1);
    }
    id v258 = v257;
    id v259 = [v258 count];

    if (v259) {
LABEL_279:
    }
      sub_100040580(*(void *)(a1 + 32), 0, 1, v3, *(_DWORD *)(a1 + 96), 0, &v441, *(void **)(a1 + 56), *(void **)(a1 + 64));
  }
  if (*(void *)(a1 + 64) && [*(id *)(a1 + 80) count])
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v260 = 20020;
    }
    else {
      uint64_t v260 = 20;
    }
    unsigned int v362 = v260;
    if (!*(unsigned char *)(a1 + 100))
    {
      long long v261 = ne_log_obj();
      if (os_log_type_enabled(v261, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v261, OS_LOG_TYPE_DEBUG, "Installing skip fallback policy for background traffic", buf, 2u);
      }

      if (*(void *)(a1 + 32)) {
        int v262 = 20000;
      }
      else {
        int v262 = 0;
      }
      uint64_t v263 = v262 | 5u;
      long long v264 = +[NEPolicyResult skipWithOrder:v262 | 0x1Eu];
      long long v265 = +[NEPolicyCondition trafficClassStart:100 end:299];
      id v266 = objc_alloc((Class)NEPolicy);
      v449 = v265;
      long long v267 = +[NSArray arrayWithObjects:&v449 count:1];
      id v269 = [v266 initWithOrder:v263 result:v264 conditions:v267];
      id v270 = *(id *)(a1 + 32);
      if (v270) {
        id v270 = objc_getProperty(v270, v268, 48, 1);
      }
      id v271 = v270;
      sub_1000312DC((BOOL)v3, v269, v271);

      uint64_t v260 = v362;
    }
    if ([*(id *)(a1 + 88) count])
    {
      if (*(void *)(a1 + 32)) {
        int v272 = 20000;
      }
      else {
        int v272 = 0;
      }
      long long v273 = +[NEPolicyResult skipWithOrder:v272 | 0x1Eu];
      long long v389 = 0u;
      long long v390 = 0u;
      long long v391 = 0u;
      long long v392 = 0u;
      id v357 = *(id *)(a1 + 88);
      id v368 = [v357 countByEnumeratingWithState:&v389 objects:v448 count:16];
      if (v368)
      {
        uint64_t v274 = v272 | 0xAu;
        uint64_t v365 = *(void *)v390;
        do
        {
          uint64_t v275 = 0;
          do
          {
            if (*(void *)v390 != v365) {
              objc_enumerationMutation(v357);
            }
            uint64_t v371 = v275;
            long long v276 = *(void **)(*((void *)&v389 + 1) + 8 * v275);
            long long v277 = ne_log_obj();
            if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              id v468 = v276;
              _os_log_debug_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_DEBUG, "Installing skip fallback policy for %@", buf, 0xCu);
            }

            id v278 = +[NEProcessInfo copyUUIDsForBundleID:v276 uid:*(unsigned int *)(a1 + 96)];
            long long v385 = 0u;
            long long v386 = 0u;
            long long v387 = 0u;
            long long v388 = 0u;
            id v279 = v278;
            id v280 = [v279 countByEnumeratingWithState:&v385 objects:v447 count:16];
            if (v280)
            {
              id v281 = v280;
              uint64_t v282 = *(void *)v386;
              do
              {
                for (kk = 0; kk != v281; kk = (char *)kk + 1)
                {
                  if (*(void *)v386 != v282) {
                    objc_enumerationMutation(v279);
                  }
                  v284 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v385 + 1) + 8 * (void)kk)];
                  if (v284)
                  {
                    id v285 = objc_alloc((Class)NEPolicy);
                    v446 = v284;
                    +[NSArray arrayWithObjects:&v446 count:1];
                    v287 = uint64_t v286 = a1;
                    id v289 = [v285 initWithOrder:v274 result:v273 conditions:v287];
                    id v290 = *(id *)(v286 + 32);
                    if (v290) {
                      id v290 = objc_getProperty(v290, v288, 48, 1);
                    }
                    id v291 = v290;
                    sub_1000312DC((BOOL)self, v289, v291);

                    a1 = v375;
                  }
                }
                id v281 = [v279 countByEnumeratingWithState:&v385 objects:v447 count:16];
              }
              while (v281);
            }

            uint64_t v275 = v371 + 1;
            uint64_t v3 = self;
          }
          while ((id)(v371 + 1) != v368);
          id v368 = [v357 countByEnumeratingWithState:&v389 objects:v448 count:16];
        }
        while (v368);
      }

      uint64_t v260 = v362;
    }
    v369 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 64)];
    long long v381 = 0u;
    long long v382 = 0u;
    long long v383 = 0u;
    long long v384 = 0u;
    id v354 = *(id *)(a1 + 80);
    id v292 = [v354 countByEnumeratingWithState:&v381 objects:v445 count:16];
    if (v292)
    {
      id v293 = v292;
      uint64_t v294 = *(void *)v382;
      v295 = &AnalyticsSendEventLazy_ptr;
      uint64_t v350 = *(void *)v382;
      do
      {
        id v296 = 0;
        id v352 = v293;
        do
        {
          if (*(void *)v382 != v294) {
            objc_enumerationMutation(v354);
          }
          v297 = *(void **)(*((void *)&v381 + 1) + 8 * (void)v296);
          if ([v297 isEqualToString:@"PathRuleDefaultIdentifier"])
          {
            v298 = ne_log_obj();
            if (os_log_type_enabled(v298, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v298, OS_LOG_TYPE_DEBUG, "Installing default fallback policy", buf, 2u);
            }

            uint64_t v3 = [objc_alloc((Class)v295[478]) initWithOrder:v260 result:v369 conditions:0];
            id v300 = *(id *)(a1 + 32);
            if (v300) {
              id v300 = objc_getProperty(v300, v299, 48, 1);
            }
            id v301 = v300;
            sub_1000312DC((BOOL)self, v3, v301);
          }
          else
          {
            if (v3)
            {
              if (v3[2])
              {
                +[NEPolicyResult filterWithControlUnit:](NEPolicyResult, "filterWithControlUnit:");
                uint64_t v3 = (id)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                uint64_t v3 = 0;
              }
            }
            id v358 = v296;
            v302 = ne_log_obj();
            if (os_log_type_enabled(v302, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              id v468 = v297;
              _os_log_debug_impl((void *)&_mh_execute_header, v302, OS_LOG_TYPE_DEBUG, "Installing fallback policy for %@", buf, 0xCu);
            }

            id v303 = +[NEProcessInfo copyUUIDsForBundleID:v297 uid:*(unsigned int *)(a1 + 96)];
            long long v377 = 0u;
            long long v378 = 0u;
            long long v379 = 0u;
            long long v380 = 0u;
            id v304 = v303;
            id v372 = [v304 countByEnumeratingWithState:&v377 objects:v444 count:16];
            if (v372)
            {
              uint64_t v305 = *(void *)v378;
              uint64_t v366 = *(void *)v378;
              do
              {
                v306 = 0;
                do
                {
                  if (*(void *)v378 != v305) {
                    objc_enumerationMutation(v304);
                  }
                  v307 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v377 + 1) + 8 * (void)v306)];
                  if (v307)
                  {
                    id v308 = objc_alloc((Class)v295[478]);
                    v443 = v307;
                    v309 = +[NSArray arrayWithObjects:&v443 count:1];
                    id v311 = [v308 initWithOrder:v260 result:v369 conditions:v309];
                    id v312 = *(id *)(v375 + 32);
                    if (v312) {
                      id v312 = objc_getProperty(v312, v310, 48, 1);
                    }
                    id v313 = v312;
                    sub_1000312DC((BOOL)self, v311, v313);

                    if (v3)
                    {
                      id v314 = v304;
                      v315 = v295;
                      id v316 = objc_alloc((Class)v295[478]);
                      v442[0] = v307;
                      v317 = +[NEPolicyCondition allInterfaces];
                      v442[1] = v317;
                      v318 = +[NSArray arrayWithObjects:v442 count:2];
                      id v320 = [v316 initWithOrder:v260 result:v3 conditions:v318];
                      if (self)
                      {
                        id v321 = objc_getProperty(self, v319, 32, 1);
                        sub_1000312DC((BOOL)self, v320, v321);
                      }
                      else
                      {
                        sub_1000312DC(0, v320, 0);
                        id v321 = 0;
                      }

                      uint64_t v260 = v362;
                      v295 = v315;
                      id v304 = v314;
                      uint64_t v305 = v366;
                    }
                  }

                  v306 = (char *)v306 + 1;
                }
                while (v372 != v306);
                id v322 = [v304 countByEnumeratingWithState:&v377 objects:v444 count:16];
                id v372 = v322;
              }
              while (v322);
            }

            a1 = v375;
            id v301 = v304;
            uint64_t v294 = v350;
            id v293 = v352;
            id v296 = v358;
          }

          id v296 = (char *)v296 + 1;
          uint64_t v3 = self;
        }
        while (v296 != v293);
        id v293 = [v354 countByEnumeratingWithState:&v381 objects:v445 count:16];
      }
      while (v293);
    }
  }
  uint64_t v323 = sub_10002F2DC(v3);
  if (v323)
  {
    v324 = ne_log_large_obj();
    if (os_log_type_enabled(v324, OS_LOG_TYPE_DEBUG))
    {
      id v326 = *(id *)(a1 + 32);
      if (v326) {
        id v326 = objc_getProperty(v326, v325, 48, 1);
      }
      id v327 = v326;
      *(_DWORD *)buf = 138412290;
      id v468 = v327;
      _os_log_debug_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);
    }
  }
  else
  {
    v324 = ne_log_obj();
    if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v324, OS_LOG_TYPE_ERROR, "Failed to apply path controller policies", buf, 2u);
    }
  }

  return v323;
}

uint64_t sub_1000442A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 48, 1);
    }
    *(_DWORD *)buf = 138412290;
    id v50 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", buf, 0xCu);
  }

  id v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 48, 1);
  }
  else {
    id v8 = 0;
  }
  sub_10002F180(v3, v8);
  int v9 = sub_1000317B4(*(void *)(a1 + 32));
  id v10 = +[NEPolicyResult divertSocketToControlUnit:*(unsigned int *)(a1 + 64)];
  if (*(unsigned char *)(a1 + 68))
  {
    uint64_t v11 = sub_10003F700(*(void *)(a1 + 32), *(unsigned int *)(a1 + 64), @"ProxyAgent");
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v12 = v9 + 102;
  if (*(unsigned char *)(a1 + 69)
    && (sub_10003F700(*(void *)(a1 + 32), *(unsigned int *)(a1 + 64), @"DNSAgent"),
        (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v35 = (void *)v13;
    id v14 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
  }
  else
  {
    id v14 = 0;
    id v35 = 0;
  }
  unsigned int v36 = (void *)v11;
  if (v11)
  {
    id v15 = +[NEPolicyResult netAgentUUID:v11];
  }
  else
  {
    id v15 = 0;
  }
  unsigned int v16 = sub_1000317B4(*(void *)(a1 + 32));
  id v17 = +[NEPolicyResult skipWithOrder:v16 + 103];
  id v18 = *(void **)(a1 + 40);
  id v19 = *(void **)(a1 + 56);
  id v33 = *(void **)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 32);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10004468C;
  v41[3] = &unk_1000C5E68;
  id v42 = v3;
  int v47 = v12;
  id v20 = v10;
  uint64_t v21 = *(void *)(a1 + 32);
  id v43 = v20;
  uint64_t v44 = v21;
  id v22 = v14;
  id v45 = v22;
  id v23 = v15;
  id v46 = v23;
  int32x2_t v48 = vadd_s32(vdup_n_s32(v16), (int32x2_t)0x140000000ALL);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1000447DC;
  v37[3] = &unk_1000C5C60;
  id v24 = v42;
  uint64_t v25 = *(void *)(a1 + 32);
  id v38 = v24;
  uint64_t v39 = v25;
  id v26 = v17;
  id v40 = v26;
  sub_100034F48(v34, v18, 0, 1, v33, v19, v24, v41, v37);
  uint64_t v27 = sub_10002F2DC(v24);
  id v28 = ne_log_large_obj();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    id v32 = *(id *)(a1 + 32);
    if (v32) {
      id v32 = objc_getProperty(v32, v29, 48, 1);
    }
    *(_DWORD *)buf = 138412290;
    id v50 = v32;
    _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);
  }

  return v27;
}

void sub_10004468C(uint64_t a1, void *a2)
{
  id v18 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 72) result:*(void *)(a1 + 40) conditions:v18];
  id v6 = *(void **)(a1 + 48);
  if (v6) {
    id Property = objc_getProperty(v6, v4, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v3, v5, Property);

  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 76) result:*(void *)(a1 + 56) conditions:v18];
    uint64_t v11 = *(void **)(a1 + 48);
    if (v11) {
      id v12 = objc_getProperty(v11, v9, 48, 1);
    }
    else {
      id v12 = 0;
    }
    sub_1000312DC(v8, v10, v12);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id v15 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 80) result:*(void *)(a1 + 64) conditions:v18];
    unsigned int v16 = *(void **)(a1 + 48);
    if (v16) {
      id v17 = objc_getProperty(v16, v14, 48, 1);
    }
    else {
      id v17 = 0;
    }
    sub_1000312DC(v13, v15, v17);
  }
}

void sub_1000447DC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [objc_alloc((Class)NEPolicy) initWithOrder:sub_1000317B4(a1[5]) result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v3, v8, Property);
}

uint64_t sub_100044890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 48, 1);
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", (uint8_t *)&buf, 0xCu);
  }

  id v6 = ne_log_large_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    id v67 = *(id *)(a1 + 32);
    if (v67) {
      id v67 = objc_getProperty(v67, v7, 56, 1);
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v67;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Low priority Policy IDs to be removed: %@", (uint8_t *)&buf, 0xCu);
  }

  int v9 = *(void **)(a1 + 32);
  if (v9) {
    id v10 = objc_getProperty(v9, v8, 48, 1);
  }
  else {
    id v10 = 0;
  }
  sub_10002F180(v3, v10);
  id v12 = *(void **)(a1 + 32);
  if (v12) {
    id v13 = objc_getProperty(v12, v11, 56, 1);
  }
  else {
    id v13 = 0;
  }
  sub_10003033C(v3, v13);
  unsigned int v14 = *(_DWORD *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 32);
  unsigned int v16 = sub_1000317B4(v15) + 5 * (v14 - 1);
  if (*(unsigned char *)(a1 + 76)) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v16 + 160;
  }
  if (*(unsigned char *)(a1 + 76)) {
    uint64_t v18 = (1 << (v14 - 1)) | 0x80000000;
  }
  else {
    uint64_t v18 = v14;
  }
  id v100 = +[NEPolicyResult divertSocketToControlUnit:v18];
  id v19 = +[NEPolicyResult skipWithOrder:(v17 + 4)];
  self = v3;
  id v92 = v19;
  if (*(void *)(a1 + 40))
  {
    if (v15) {
      uint64_t v20 = 1490;
    }
    else {
      uint64_t v20 = 0;
    }
    id v21 = objc_alloc((Class)NSArray);
    id v22 = [*(id *)(a1 + 40) uuid];
    id v23 = +[NEPolicyCondition effectiveApplication:v22];
    id v24 = [NEPolicyCondition effectivePID:[*(id *)(a1 + 40) pid] version:objc_msgSend(*(id *)(a1 + 40), "pidVersion")];
    uint64_t v25 = +[NEPolicyCondition delegateIsPlatformBinary];
    id v26 = +[NEPolicyCondition allInterfaces];
    id v27 = [v21 initWithObjects:v23, v24, v25, v26, 0];

    id v29 = [objc_alloc((Class)NEPolicy) initWithOrder:v20 result:v19 conditions:v27];
    uint64_t v30 = *(void **)(a1 + 32);
    if (v30) {
      id v31 = objc_getProperty(v30, v28, 48, 1);
    }
    else {
      id v31 = 0;
    }
    id v3 = self;
    sub_1000312DC((BOOL)self, v29, v31);
  }
  unsigned int v110 = v17;
  id v33 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/captiveagent"];
  if (v33)
  {
    if (v3) {
      id v34 = objc_getProperty(v3, v32, 16, 1);
    }
    else {
      id v34 = 0;
    }
    id v36 = v34;
    id v37 = *(id *)(a1 + 32);
    if (v37) {
      id v37 = objc_getProperty(v37, v35, 48, 1);
    }
    char v38 = sub_100057FE4(v36, &v110, 0, 0, v33, 0, 0, 0, 0, 1, 0, v19, 0, 0, v37);

    if (v38)
    {
      id v40 = self;
      if (self) {
        id v40 = objc_getProperty(self, v39, 16, 1);
      }
      id v42 = v40;
      id v43 = *(void **)(a1 + 48);
      id v44 = *(id *)(a1 + 32);
      if (v44) {
        id v44 = objc_getProperty(v44, v41, 48, 1);
      }
      BOOL v45 = sub_10005C130(v42, v43, &v110, 1, 1, 0, v19, 0, v44, 0, 0);

      if (v45)
      {
        if (if_nametoindex("llw0"))
        {
          id v46 = objc_alloc((Class)NSArray);
          int v47 = +[NSString stringWithUTF8String:"llw0"];
          int32x2_t v48 = +[NEPolicyCondition scopedInterface:v47];
          id v49 = [v46 initWithObjects:v48];

          id v51 = [objc_alloc((Class)NEPolicy) initWithOrder:v17 result:v19 conditions:v49];
          uint64_t v52 = *(void **)(a1 + 32);
          if (v52) {
            id v53 = objc_getProperty(v52, v50, 48, 1);
          }
          else {
            id v53 = 0;
          }
          sub_1000312DC((BOOL)self, v51, v53);
        }
        id v89 = v33;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        id obj = *(id *)(a1 + 56);
        id v98 = [obj countByEnumeratingWithState:&v106 objects:v113 count:16];
        unsigned int v54 = 0;
        if (v98)
        {
          uint64_t v95 = *(void *)v107;
          uint64_t v55 = a1;
          do
          {
            for (id i = 0; i != v98; id i = (char *)i + 1)
            {
              if (*(void *)v107 != v95) {
                objc_enumerationMutation(obj);
              }
              id v57 = *(void **)(*((void *)&v106 + 1) + 8 * i);
              *((void *)&buf + 1) = 0;
              if ([v57 matchProtocol])
              {
                uint64_t v58 = (uint64_t)[v57 matchProtocol];
                uint64_t v59 = 1;
              }
              else
              {
                *((void *)&buf + 1) = 2;
                uint64_t v58 = 1;
                uint64_t v59 = 2;
              }
              uint64_t v60 = 0;
              *(void *)&long long buf = v58;
              uint64_t v61 = 8 * v59;
              do
              {
                sub_10003CB90(*(void **)(v55 + 32), v57, *(void *)&v113[v60 - 8], self, v92, v17, 0);
                v60 += 8;
              }
              while (v61 != v60);
              v54 |= [v57 appliesToLoopback];
            }
            a1 = v55;
            id v98 = [obj countByEnumeratingWithState:&v106 objects:v113 count:16];
          }
          while (v98);
        }

        if (*(unsigned char *)(a1 + 77))
        {
          uint64_t v62 = sub_10003F700(*(void *)(a1 + 32), *(unsigned int *)(a1 + 72), @"ProxyAgent");
        }
        else
        {
          uint64_t v62 = 0;
        }
        id v3 = self;
        if (*(unsigned char *)(a1 + 78))
        {
          uint64_t v68 = sub_10003F700(*(void *)(a1 + 32), *(unsigned int *)(a1 + 72), @"DNSAgent");
          if (v68)
          {
            id v69 = +[NEPolicyResult netAgentUUID:v68];
          }
          else
          {
            id v69 = 0;
          }
        }
        else
        {
          id v69 = 0;
          uint64_t v68 = 0;
        }
        id v88 = v62;
        if (v62)
        {
          int32x2_t v99 = +[NEPolicyResult netAgentUUID:v62];
        }
        else
        {
          int32x2_t v99 = 0;
        }
        long long v104 = 0u;
        long long v105 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        id v90 = *(id *)(a1 + 64);
        id obja = [v90 countByEnumeratingWithState:&v102 objects:v111 count:16];
        if (obja)
        {
          unsigned int v70 = v17 + 3;
          unsigned int v71 = v17 + 2;
          uint64_t v91 = *(void *)v103;
          do
          {
            uint64_t v72 = 0;
            do
            {
              if (*(void *)v103 != v91) {
                objc_enumerationMutation(v90);
              }
              id v73 = *(void **)(*((void *)&v102 + 1) + 8 * v72);
              *((void *)&buf + 1) = 0;
              unsigned int v97 = v54;
              uint64_t v96 = v72;
              if ([v73 matchProtocol])
              {
                uint64_t v74 = (uint64_t)[v73 matchProtocol];
                uint64_t v75 = 1;
              }
              else
              {
                *((void *)&buf + 1) = 2;
                uint64_t v74 = 1;
                uint64_t v75 = 2;
              }
              uint64_t v76 = 0;
              *(void *)&long long buf = v74;
              uint64_t v77 = 8 * v75;
              do
              {
                if (v69) {
                  sub_10003CB90(*(void **)(a1 + 32), v73, *(void *)&v113[v76 - 8], v3, v69, v71, 0);
                }
                if (v99)
                {
                  id v78 = *(void **)(a1 + 32);
                  uint64_t v79 = a1;
                  uint64_t v80 = *(void *)&v113[v76 - 8];
                  id v3 = self;
                  sub_10003CB90(v78, v73, v80, self, v99, v71, 0);
                }
                else
                {
                  uint64_t v79 = a1;
                  uint64_t v80 = *(void *)&v113[v76 - 8];
                  id v3 = self;
                }
                sub_10003CB90(*(void **)(v79 + 32), v73, v80, v3, v100, v70, 1);
                v76 += 8;
                a1 = v79;
              }
              while (v77 != v76);
              unsigned int v54 = [v73 appliesToLoopback] | v97;
              uint64_t v72 = v96 + 1;
            }
            while ((id)(v96 + 1) != obja);
            id obja = [v90 countByEnumeratingWithState:&v102 objects:v111 count:16];
          }
          while (obja);
        }

        if (v3 && (v54 & 1) != 0) {
          sub_100030B68((uint64_t)v3, *(void **)(a1 + 32), 1);
        }
        id v81 = ne_log_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          id v86 = *(id *)(a1 + 32);
          if (v86) {
            id v86 = objc_getProperty(v86, v82, 48, 1);
          }
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v86;
          _os_log_debug_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", (uint8_t *)&buf, 0xCu);
        }

        id v83 = ne_log_obj();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          id v87 = *(id *)(a1 + 32);
          if (v87) {
            id v87 = objc_getProperty(v87, v84, 56, 1);
          }
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v87;
          _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "Policy IDs added at Low priority: %@", (uint8_t *)&buf, 0xCu);
        }

        uint64_t v64 = sub_10002F2DC(v3);
        id v19 = v92;
        id v63 = v88;
        id v33 = v89;
        goto LABEL_94;
      }
      id v63 = ne_log_obj();
      if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
LABEL_55:
        uint64_t v64 = 0;
        id v3 = self;
        goto LABEL_94;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      id v65 = "%s: Captive app traffic exception policies failed";
    }
    else
    {
      id v63 = ne_log_obj();
      if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      id v65 = "%s: Captive agent traffic exception policies failed";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, v65, (uint8_t *)&buf, 0xCu);
    goto LABEL_55;
  }
  id v63 = ne_log_obj();
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCont"
                                    "rolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetworkPlu"
                                    "ginBundleIDs:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "%s: Failed to get UUIDs for captiveagent", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v64 = 0;
LABEL_94:

  return v64;
}

uint64_t sub_100045354(uint64_t a1, void *a2)
{
  id v30 = a2;
  id v3 = ne_log_large_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 104, 1);
    }
    *(_DWORD *)long long buf = 138412290;
    id v37 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed %@", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 32);
  if (v6) {
    id v7 = objc_getProperty(v6, v5, 104, 1);
  }
  else {
    id v7 = 0;
  }
  sub_10002F180(v30, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = +[NEPolicyResult drop];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = *(id *)(a1 + 40);
  id v10 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v10)
  {
    id v11 = v10;
    if (v8) {
      uint64_t v12 = 20000;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)v32;
    do
    {
      unsigned int v14 = 0;
      do
      {
        if (*(void *)v32 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v31 + 1) + 8 * (void)v14);
        id v16 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v17 = +[NEPolicyCondition effectiveApplication:v15];
        [v16 addObject:v17];

        id v19 = [objc_alloc((Class)NEPolicy) initWithOrder:(char *)v14 + v12 result:v9 conditions:v16];
        uint64_t v20 = *(void **)(a1 + 32);
        if (v20) {
          id v21 = objc_getProperty(v20, v18, 104, 1);
        }
        else {
          id v21 = 0;
        }
        BOOL v22 = sub_1000312DC((BOOL)v30, v19, v21);

        if (!v22)
        {
          uint64_t v25 = 0;
          goto LABEL_23;
        }
        unsigned int v14 = (char *)v14 + 1;
      }
      while (v11 != v14);
      uint64_t v12 = (v12 + v14);
      id v23 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
      id v11 = v23;
    }
    while (v23);
  }

  if (sub_10002F2DC(v30))
  {
    id obj = ne_log_large_obj();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      id v28 = *(id *)(a1 + 32);
      if (v28) {
        id v28 = objc_getProperty(v28, v24, 104, 1);
      }
      *(_DWORD *)long long buf = 138412290;
      id v37 = v28;
      _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "drop control Policy IDs added %@", buf, 0xCu);
    }
    uint64_t v25 = 1;
LABEL_23:
  }
  else
  {
    uint64_t v25 = 0;
  }

  return v25;
}

uint64_t sub_100045654(uint64_t a1, void *a2)
{
  id v30 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 160, 1);
  }
  long long v31 = [Property objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (!v31)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = *(id *)(a1 + 32);
    if (v7) {
      id v7 = objc_getProperty(v7, v5, 160, 1);
    }
    [v7 setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];

    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 160, 1);
    }
    long long v31 = [v9 objectForKeyedSubscript:*(void *)(a1 + 40)];
    id v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      id v28 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      char v38 = v28;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CREATE LIST for %@", buf, 0xCu);
    }
  }
  id v11 = ne_log_large_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    char v38 = v31;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "drop control Policy IDs to be removed %@", buf, 0xCu);
  }

  sub_10002F180(v30, v31);
  int v12 = sub_1000317B4(*(void *)(a1 + 32));
  uint64_t v13 = +[NEPolicyResult drop];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = *(id *)(a1 + 48);
  id v14 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v14)
  {
    id v15 = v14;
    unsigned int v16 = v12 + 30;
    uint64_t v17 = *(void *)v33;
    while (2)
    {
      for (id i = 0; i != v15; id i = (char *)i + 1)
      {
        if (*(void *)v33 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void *)(*((void *)&v32 + 1) + 8 * i);
        id v20 = objc_alloc_init((Class)NSMutableArray);
        id v21 = +[NEPolicyCondition effectiveApplication:v19];
        [v20 addObject:v21];

        BOOL v22 = +[NEPolicyCondition realApplication:v19];
        [v20 addObject:v22];

        id v23 = +[NEPolicyCondition allInterfaces];
        [v20 addObject:v23];

        id v24 = +[NEPolicyCondition entitlement];
        [v20 addObject:v24];

        id v25 = [objc_alloc((Class)NEPolicy) initWithOrder:(char *)i + v16 result:v13 conditions:v20];
        LODWORD(v24) = sub_1000312DC((BOOL)v30, v25, v31);

        if (!v24)
        {
          uint64_t v26 = 0;
          goto LABEL_26;
        }
      }
      v16 += i;
      id v15 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }

  if (sub_10002F2DC(v30))
  {
    id obj = ne_log_large_obj();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      char v38 = v31;
      _os_log_debug_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_DEBUG, "drop control Policy IDs added %@", buf, 0xCu);
    }
    uint64_t v26 = 1;
LABEL_26:
  }
  else
  {
    uint64_t v26 = 0;
  }

  return v26;
}

uint64_t sub_100045A38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 8) | 2) == 3)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100045B4C;
      v7[3] = &unk_1000C5AF8;
      void v7[4] = a1;
      id v8 = v3;
      a1 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v7);
    }
    else
    {
      id v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to install Nexus policies, master session is nil or not AlwaysOn VPN / VPN ", buf, 2u);
      }

      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_100045B4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (!v5 || (id v6 = objc_getProperty(v5, v3, 128, 1)) == 0)
  {
    id v8 = objc_alloc_init((Class)NSMutableArray);
    id v9 = *(void **)(a1 + 32);
    if (v9) {
      objc_setProperty_atomic(v9, v7, v8, 128);
    }

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v10, 128, 1);
    }
    id v6 = Property;
  }
  int v12 = ne_log_large_obj();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v22 = 138412290;
    id v23 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Nexus Policy IDs to be removed: %@", (uint8_t *)&v22, 0xCu);
  }

  sub_10002F180(v4, v6);
  if (*(void *)(a1 + 40))
  {
    uint64_t v13 = sub_1000317B4(*(void *)(a1 + 32)) + 40;
    id v14 = +[NEPolicyResult pass];
    id v15 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
    uint64_t v26 = v15;
    unsigned int v16 = +[NSArray arrayWithObjects:&v26 count:1];

    id v17 = [objc_alloc((Class)NEPolicy) initWithOrder:v13 result:v14 conditions:v16];
    LODWORD(v15) = sub_1000312DC((BOOL)v4, v17, v6);

    if (v15 && sub_10002F2DC(v4))
    {
      uint64_t v18 = ne_log_large_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        id v21 = *(void **)(a1 + 40);
        int v22 = 138412546;
        id v23 = v21;
        __int16 v24 = 2112;
        id v25 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Nexus Policy IDs added for %@: %@", (uint8_t *)&v22, 0x16u);
      }

      uint64_t v19 = 1;
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 1;
  }

  return v19;
}

uint64_t sub_100045DC0(uint64_t a1, int a2, void *a3, void *a4, char a5)
{
  id v9 = a3;
  id v10 = a4;
  if (!a1) {
    goto LABEL_8;
  }
  if (![v9 count])
  {
    int v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No mach-O UUIDs available for VPN plugin, cannot install AOVPN control policies", buf, 2u);
    }

    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 8) != 3)
  {
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100045F14;
  v14[3] = &unk_1000C5F30;
  v14[4] = a1;
  id v15 = v10;
  id v16 = v9;
  int v17 = a2;
  char v18 = a5;
  uint64_t v11 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v14);

LABEL_9:
  return v11;
}

uint64_t sub_100045F14(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 168, 1);
  }
  id v6 = [Property objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (!v6)
  {
    id v7 = v4;
    id v9 = objc_alloc_init((Class)NSMutableArray);
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 168, 1);
    }
    [v10 setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];

    id v12 = *(id *)(a1 + 32);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 168, 1);
    }
    id v4 = v7;
    id v6 = [v12 objectForKeyedSubscript:*(void *)(a1 + 40)];
  }
  uint64_t v13 = ne_log_large_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    id v62 = *(id *)(a1 + 32);
    uint64_t v63 = *(void *)(a1 + 40);
    if (v62) {
      id v62 = objc_getProperty(v62, v14, 64, 1);
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v98 = v63;
    __int16 v99 = 2112;
    id v100 = v62;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "control Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002F180(v4, v6);
  id v15 = +[NEProcessInfo copyDNSUUIDs];
  if (v15)
  {
    id v16 = +[NEProcessInfo copyNEHelperUUIDs];
    if (v16)
    {
      int v17 = sub_1000317B4(*(void *)(a1 + 32));
      uint64_t v18 = (v17 + 10);
      unsigned int v93 = v17 + 10;
      uint64_t v80 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 40) secondaryResultType:1];
      uint64_t v19 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      if (v19)
      {
        uint64_t v75 = +[NEPolicyResult netAgentUUID:v19];
      }
      else
      {
        uint64_t v75 = 0;
      }
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      id v21 = *(id *)(a1 + 48);
      id v22 = [v21 countByEnumeratingWithState:&v89 objects:v96 count:16];
      if (v22)
      {
        unsigned int v70 = v15;
        unsigned int v72 = v17 + 5;
        uint64_t v23 = *(void *)v90;
        uint64_t v77 = a1;
        id v78 = v6;
        uint64_t v68 = v19;
        id v69 = v16;
        uint64_t v65 = *(void *)v90;
        while (2)
        {
          uint64_t v24 = 0;
          id v66 = v22;
          do
          {
            if (*(void *)v90 != v23) {
              objc_enumerationMutation(v21);
            }
            uint64_t v67 = v24;
            uint64_t v25 = *(void *)(*((void *)&v89 + 1) + 8 * v24);
            id v26 = objc_alloc_init((Class)NSMutableArray);
            id v27 = +[NEPolicyCondition effectiveApplication:v25];
            [v26 addObject:v27];

            uint64_t v79 = v25;
            id v28 = +[NEPolicyCondition realApplication:v25];
            [v26 addObject:v28];

            id v29 = +[NEPolicyCondition allInterfaces];
            [v26 addObject:v29];

            id v30 = +[NEPolicyCondition entitlement];
            [v26 addObject:v30];

            long long v31 = +[NEPolicyCondition effectivePID:*(unsigned int *)(a1 + 56)];
            [v26 addObject:v31];

            unsigned int v71 = v26;
            id v32 = [objc_alloc((Class)NEPolicy) initWithOrder:v18 result:v80 conditions:v26];
            LODWORD(v26) = sub_1000312DC((BOOL)v4, v32, v6);

            if (!v26) {
              goto LABEL_56;
            }
            if (v75)
            {
              id v33 = [objc_alloc((Class)NEPolicy) initWithOrder:v72 result:v75 conditions:v71];
              sub_1000312DC((BOOL)v4, v33, v6);
            }
            BOOL v34 = (BOOL)v4;
            uint64_t v18 = (v18 + 1);
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            id v76 = v16;
            id v35 = [v76 countByEnumeratingWithState:&v85 objects:v95 count:16];
            if (v35)
            {
              id v36 = v35;
              uint64_t v37 = *(void *)v86;
              while (2)
              {
                char v38 = 0;
                uint64_t v39 = v18;
                do
                {
                  if (*(void *)v86 != v37) {
                    objc_enumerationMutation(v76);
                  }
                  uint64_t v40 = *(void *)(*((void *)&v85 + 1) + 8 * (void)v38);
                  id v41 = objc_alloc_init((Class)NSMutableArray);
                  id v42 = +[NEPolicyCondition effectiveApplication:v79];
                  [v41 addObject:v42];

                  id v43 = +[NEPolicyCondition realApplication:v40];
                  [v41 addObject:v43];

                  id v44 = +[NEPolicyCondition allInterfaces];
                  [v41 addObject:v44];

                  BOOL v45 = +[NEPolicyCondition entitlement];
                  [v41 addObject:v45];

                  id v46 = +[NEPolicyCondition effectivePID:*(unsigned int *)(v77 + 56)];
                  [v41 addObject:v46];

                  id v47 = [objc_alloc((Class)NEPolicy) initWithOrder:(char *)v38 + v39 result:v80 conditions:v41];
                  BOOL v48 = sub_1000312DC(v34, v47, v78);

                  if (!v48)
                  {
                    id v4 = (id)v34;
                    id v6 = v78;
                    goto LABEL_55;
                  }

                  char v38 = (char *)v38 + 1;
                }
                while (v36 != v38);
                uint64_t v18 = (v39 + v38);
                id v36 = [v76 countByEnumeratingWithState:&v85 objects:v95 count:16];
                if (v36) {
                  continue;
                }
                break;
              }
            }

            long long v83 = 0u;
            long long v84 = 0u;
            long long v81 = 0u;
            long long v82 = 0u;
            id v76 = v70;
            id v49 = [v76 countByEnumeratingWithState:&v81 objects:v94 count:16];
            if (v49)
            {
              id v50 = v49;
              uint64_t v73 = *(void *)v82;
              id v4 = (id)v34;
              a1 = v77;
              id v6 = v78;
LABEL_35:
              uint64_t v51 = 0;
              uint64_t v74 = v18;
              while (1)
              {
                if (*(void *)v82 != v73) {
                  objc_enumerationMutation(v76);
                }
                uint64_t v52 = *(void *)(*((void *)&v81 + 1) + 8 * v51);
                id v41 = objc_alloc_init((Class)NSMutableArray);
                id v53 = +[NEPolicyCondition effectiveApplication:v79];
                [v41 addObject:v53];

                unsigned int v54 = +[NEPolicyCondition realApplication:v52];
                [v41 addObject:v54];

                uint64_t v55 = +[NEPolicyCondition allInterfaces];
                [v41 addObject:v55];

                id v56 = +[NEPolicyCondition entitlement];
                [v41 addObject:v56];

                id v57 = +[NEPolicyCondition effectivePID:*(unsigned int *)(v77 + 56)];
                [v41 addObject:v57];

                id v58 = [objc_alloc((Class)NEPolicy) initWithOrder:v74 + v51 result:v80 conditions:v41];
                BOOL v59 = sub_1000312DC((BOOL)v4, v58, v78);

                if (!v59) {
                  break;
                }
                if (v75)
                {
                  id v60 = [objc_alloc((Class)NEPolicy) initWithOrder:v72 result:v75 conditions:v41];
                  sub_1000312DC((BOOL)v4, v60, v78);
                }
                if (v50 == (id)++v51)
                {
                  uint64_t v18 = (v74 + v51);
                  id v50 = [v76 countByEnumeratingWithState:&v81 objects:v94 count:16];
                  if (v50) {
                    goto LABEL_35;
                  }
                  goto LABEL_45;
                }
              }
LABEL_55:

              uint64_t v19 = v68;
              id v16 = v69;
LABEL_56:

              uint64_t v20 = 0;
              id v15 = v70;
              goto LABEL_57;
            }
            id v4 = (id)v34;
            a1 = v77;
            id v6 = v78;
LABEL_45:

            uint64_t v24 = v67 + 1;
            uint64_t v19 = v68;
            id v16 = v69;
            uint64_t v23 = v65;
          }
          while ((id)(v67 + 1) != v66);
          id v22 = [v21 countByEnumeratingWithState:&v89 objects:v96 count:16];
          if (v22) {
            continue;
          }
          break;
        }
        unsigned int v93 = v18;
        id v15 = v70;
      }

      if ((!*(unsigned char *)(a1 + 60)
         || sub_10003871C(*(void *)(a1 + 32), v4, *(_DWORD *)(a1 + 56), *(void **)(a1 + 48), v80, v6, &v93))&& sub_10002F2DC(v4))
      {
        id v21 = ne_log_large_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v64 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v98 = v64;
          __int16 v99 = 2112;
          id v100 = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "control Policy IDs added %@: %@", buf, 0x16u);
        }
        uint64_t v20 = 1;
LABEL_57:
      }
      else
      {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }

  return v20;
}

uint64_t sub_1000467C8(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v91 = 0;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 176, 1);
  }
  id v6 = [Property objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (!v6)
  {
    id v8 = objc_alloc_init((Class)NSMutableArray);
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v7, 176, 1);
    }
    [v9 setObject:v8 forKeyedSubscript:*(void *)(a1 + 40)];

    id v11 = *(id *)(a1 + 32);
    if (v11) {
      id v11 = objc_getProperty(v11, v10, 176, 1);
    }
    id v6 = [v11 objectForKeyedSubscript:*(void *)(a1 + 40)];
  }
  id v12 = ne_log_large_obj();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v79 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v104 = v79;
    __int16 v105 = 2112;
    long long v106 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed %@: %@", buf, 0x16u);
  }

  sub_10002F180(v4, v6);
  id v14 = *(void **)(a1 + 32);
  if (v14 && objc_getProperty(v14, v13, 16, 1))
  {
    id v15 = *(void **)(a1 + 32);
    int v16 = sub_1000317B4((uint64_t)v15);
    int v18 = v16;
    if (*(unsigned char *)(a1 + 80))
    {
      sub_10002EFFC(v15, *(void **)(a1 + 40), v4);
    }
    else
    {
      unsigned int v91 = v16 + 50;
      if (v4) {
        id v20 = objc_getProperty(v4, v17, 16, 1);
      }
      else {
        id v20 = 0;
      }
      id v21 = v20;
      id v22 = +[NEPolicyResult skipWithOrder:0];
      BOOL v23 = sub_100058574((BOOL)v21, &v91, v22, v6);

      if (!v23)
      {
        uint64_t v25 = ne_log_obj();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception for data", buf, 2u);
        }
      }
      if (v4) {
        id v26 = objc_getProperty(v4, v24, 16, 1);
      }
      else {
        id v26 = 0;
      }
      if ((sub_10005973C(v26, &v91, *(void *)(a1 + 64), 0, 1, v6) & 1) == 0)
      {
        id v28 = ne_log_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to add VoiceMail exception for data", buf, 2u);
        }
      }
      if (v4) {
        id v29 = objc_getProperty(v4, v27, 16, 1);
      }
      else {
        id v29 = 0;
      }
      if ((sub_10005C050(v29, &v91, *(void *)(a1 + 72), *(void **)(a1 + 40), 1, v6) & 1) == 0)
      {
        id v30 = ne_log_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to add CellularServices exception for data", buf, 2u);
        }
      }
      if ((sub_10004730C(*(_DWORD **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), 1, v4) & 1) == 0)
      {
        long long v31 = ne_log_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to add Application exceptions for data", buf, 2u);
        }
      }
    }
    if (*(unsigned char *)(a1 + 81))
    {
      id v32 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 56), @"ProxyAgent");
    }
    else
    {
      id v32 = 0;
    }
    if (*(unsigned char *)(a1 + 82))
    {
      uint64_t v33 = sub_10003790C(*(void *)(a1 + 32), *(void **)(a1 + 56), @"DNSAgent");
      if (v33)
      {
        uint64_t v88 = +[NEPolicyResult netAgentUUID:v33];
        if (!v32) {
          goto LABEL_48;
        }
LABEL_46:
        uint64_t v34 = +[NEPolicyResult netAgentUUID:v32];
        goto LABEL_49;
      }
      uint64_t v88 = 0;
      if (v32) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v33 = 0;
      if (v32) {
        goto LABEL_46;
      }
    }
LABEL_48:
    uint64_t v34 = 0;
LABEL_49:
    long long v90 = (void *)v34;
    long long v87 = (void *)v33;
    unsigned int v84 = v18 + 205;
    unsigned int v85 = v18 + 210;
    id v35 = +[NEPolicyResult tunnelIPToInterfaceName:*(void *)(a1 + 56) secondaryResultType:1];
    uint64_t v36 = +[NEPolicyResult scopeSocketToInterfaceName:*(void *)(a1 + 56)];
    long long v89 = (void *)v36;
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v37 = v36;
      long long v86 = v32;
      unsigned int v91 = v18 + 215;
      char v38 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
      long long v102 = v38;
      uint64_t v39 = +[NSArray arrayWithObjects:&v102 count:1];

      uint64_t v40 = v35;
      id v41 = [objc_alloc((Class)NEPolicy) initWithOrder:(v18 + 215) result:v35 conditions:v39];
      LODWORD(v38) = sub_1000312DC((BOOL)v4, v41, v6);

      if (v38)
      {
        unsigned int v91 = v18 + 220;
        id v42 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
        SEL v101 = v42;
        uint64_t v43 = +[NSArray arrayWithObjects:&v101 count:1];

        id v44 = [objc_alloc((Class)NEPolicy) initWithOrder:(v18 + 220) result:v37 conditions:v43];
        BOOL v45 = sub_1000312DC((BOOL)v4, v44, v6);

        if (v45)
        {
          long long v83 = (void *)v43;
          id v46 = (void *)v88;
          id v35 = v40;
          if (v88)
          {
            id v47 = objc_alloc((Class)NEPolicy);
            BOOL v48 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
            id v100 = v48;
            id v49 = +[NSArray arrayWithObjects:&v100 count:1];
            id v50 = [v47 initWithOrder:v84 result:v88 conditions:v49];
            sub_1000312DC((BOOL)v4, v50, v6);
          }
          id v32 = v86;
          if (v90)
          {
            id v51 = objc_alloc((Class)NEPolicy);
            uint64_t v52 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
            __int16 v99 = v52;
            id v53 = +[NSArray arrayWithObjects:&v99 count:1];
            id v54 = [v51 initWithOrder:v85 result:v90 conditions:v53];
            sub_1000312DC((BOOL)v4, v54, v6);
          }
          if (v88)
          {
            id v55 = objc_alloc((Class)NEPolicy);
            id v56 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
            uint64_t v98 = v56;
            id v57 = +[NSArray arrayWithObjects:&v98 count:1];
            id v58 = [v55 initWithOrder:v84 result:v88 conditions:v57];
            sub_1000312DC((BOOL)v4, v58, v6);
          }
          BOOL v59 = v90;
          if (v90)
          {
            id v60 = objc_alloc((Class)NEPolicy);
            uint64_t v61 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
            unsigned int v97 = v61;
            id v62 = +[NSArray arrayWithObjects:&v97 count:1];
            id v63 = [v60 initWithOrder:v85 result:v90 conditions:v62];
            uint64_t v39 = v83;
LABEL_67:
            sub_1000312DC((BOOL)v4, v63, v6);

            id v78 = v87;
            id v46 = (void *)v88;
            BOOL v59 = v90;
            goto LABEL_76;
          }
          uint64_t v39 = v83;
          goto LABEL_75;
        }
        uint64_t v19 = 0;
        uint64_t v39 = (void *)v43;
      }
      else
      {
        uint64_t v19 = 0;
      }
      id v78 = v87;
      id v46 = (void *)v88;
      BOOL v59 = v90;
      id v35 = v40;
      id v32 = v86;
LABEL_81:

      goto LABEL_82;
    }
    unsigned int v91 = v18 + 225;
    uint64_t v64 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 56)];
    uint64_t v96 = v64;
    uint64_t v39 = +[NSArray arrayWithObjects:&v96 count:1];

    id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:(v18 + 225) result:v35 conditions:v39];
    LODWORD(v64) = sub_1000312DC((BOOL)v4, v65, v6);

    if (v64)
    {
      unsigned int v91 = v18 + 230;
      id v66 = +[NEPolicyCondition scopedInterface:*(void *)(a1 + 40)];
      uint64_t v95 = v66;
      uint64_t v67 = +[NSArray arrayWithObjects:&v95 count:1];

      id v68 = [objc_alloc((Class)NEPolicy) initWithOrder:(v18 + 230) result:v89 conditions:v67];
      BOOL v69 = sub_1000312DC((BOOL)v4, v68, v6);

      if (!v69)
      {
        uint64_t v19 = 0;
        uint64_t v39 = v67;
        goto LABEL_73;
      }
      unsigned int v91 = v18 + 235;
      unsigned int v70 = +[NEPolicyCondition allInterfaces];
      id v94 = v70;
      uint64_t v39 = +[NSArray arrayWithObjects:&v94 count:1];

      id v71 = [objc_alloc((Class)NEPolicy) initWithOrder:(v18 + 235) result:v35 conditions:v39];
      BOOL v72 = sub_1000312DC((BOOL)v4, v71, v6);

      if (v72)
      {
        id v46 = (void *)v88;
        if (v88)
        {
          id v73 = objc_alloc((Class)NEPolicy);
          uint64_t v74 = +[NEPolicyCondition allInterfaces];
          unsigned int v93 = v74;
          uint64_t v75 = +[NSArray arrayWithObjects:&v93 count:1];
          id v76 = [v73 initWithOrder:v84 result:v88 conditions:v75];
          sub_1000312DC((BOOL)v4, v76, v6);
        }
        BOOL v59 = v90;
        if (v90)
        {
          id v77 = objc_alloc((Class)NEPolicy);
          uint64_t v61 = +[NEPolicyCondition allInterfaces];
          long long v92 = v61;
          id v62 = +[NSArray arrayWithObjects:&v92 count:1];
          id v63 = [v77 initWithOrder:v85 result:v90 conditions:v62];
          goto LABEL_67;
        }
LABEL_75:
        id v78 = v87;
LABEL_76:
        if (sub_10002F2DC(v4))
        {
          uint64_t v80 = ne_log_large_obj();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v82 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v104 = v82;
            __int16 v105 = 2112;
            long long v106 = v6;
            _os_log_debug_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "Policy IDs added %@: %@", buf, 0x16u);
          }

          uint64_t v19 = 1;
        }
        else
        {
          uint64_t v19 = 0;
        }
        goto LABEL_81;
      }
    }
    uint64_t v19 = 0;
LABEL_73:
    id v78 = v87;
    id v46 = (void *)v88;
    BOOL v59 = v90;
    goto LABEL_81;
  }
  uint64_t v19 = 0;
LABEL_82:

  return v19;
}

uint64_t sub_10004730C(_DWORD *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = v11;
  uint64_t v13 = 0;
  if (a1 && v11)
  {
    if (isa_nsstring() && a1[2] == 3)
    {
      id v15 = [objc_getProperty(a1, v14, 216, 1) objectForKeyedSubscript:v9];
      if (!v15)
      {
        id v16 = objc_alloc_init((Class)NSMutableArray);
        [objc_getProperty(a1, v17, 216, 1) setObject:v16 forKeyedSubscript:v9];

        id v15 = [objc_getProperty(a1, v18, 216, 1) objectForKeyedSubscript:v9];
      }
      uint64_t v19 = ne_log_large_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412546;
        id v27 = v9;
        __int16 v28 = 2112;
        id v29 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Application Exception Tunnel Policy IDs to be removed %@: %@", buf, 0x16u);
      }

      sub_10002F180(v12, v15);
      if (v10
        && [v10 count]
        && (*(_DWORD *)long long buf = sub_1000317B4((uint64_t)a1) + 170,
            id Property = objc_getProperty(v12, v20, 16, 1),
            (sub_100059DA0(Property, (unsigned int *)buf, v10, v9, 200, a4, v15) & 1) == 0))
      {
        BOOL v23 = ne_log_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to add application exceptions", v25, 2u);
        }
      }
      else if (sub_10002F2DC(v12))
      {
        id v22 = ne_log_large_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412546;
          id v27 = v9;
          __int16 v28 = 2112;
          id v29 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Application Exception Tunnel Policy IDs added %@: %@", buf, 0x16u);
        }

        uint64_t v13 = 1;
        goto LABEL_21;
      }
      uint64_t v13 = 0;
LABEL_21:

      goto LABEL_22;
    }
    uint64_t v13 = 0;
  }
LABEL_22:

  return v13;
}

uint64_t sub_1000475CC(uint64_t a1, void *a2)
{
  return sub_10004730C(*(_DWORD **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a2);
}

uint64_t sub_1000475E4(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (a1 && *(_DWORD *)(a1 + 8) == 6)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100047720;
    v17[3] = &unk_1000C5FA8;
    id v18 = v11;
    uint64_t v19 = a1;
    id v20 = v12;
    id v21 = v13;
    int v23 = a3;
    id v22 = v14;
    uint64_t v15 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v17);
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

uint64_t sub_100047720(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    int v4 = sub_1000317B4(*(void *)(a1 + 40));
    id v5 = ne_log_large_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v6, 48, 1);
      }
      *(_DWORD *)long long buf = 136315394;
      id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      __int16 v199 = 2112;
      id v200 = Property;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s: Policy IDs to be removed: %@", buf, 0x16u);
    }

    id v8 = *(void **)(a1 + 40);
    if (v8) {
      id v9 = objc_getProperty(v8, v7, 48, 1);
    }
    else {
      id v9 = 0;
    }
    sub_10002F180(v3, v9);
    id v11 = *(void **)(a1 + 40);
    if (v11) {
      id v12 = objc_getProperty(v11, v10, 56, 1);
    }
    else {
      id v12 = 0;
    }
    sub_10003033C(v3, v12);
    os_log_t v171 = +[NEPolicyResult skipWithOrder:(v4 + 150)];
    unsigned int v186 = v4 + 20;
    id v14 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/captiveagent"];
    if (v14)
    {
      if (v3) {
        id v15 = objc_getProperty(v3, v13, 16, 1);
      }
      else {
        id v15 = 0;
      }
      id v17 = v15;
      id v18 = *(id *)(a1 + 40);
      if (v18) {
        id v18 = objc_getProperty(v18, v16, 48, 1);
      }
      char v19 = sub_100057FE4(v17, &v186, 0, 0, v14, 0, 0, 0, 0, 1, 0, v171, 0, 0, v18);

      if (v19)
      {
        if (v3) {
          id v21 = objc_getProperty(v3, v20, 16, 1);
        }
        else {
          id v21 = 0;
        }
        id v23 = v21;
        id v24 = *(id *)(a1 + 40);
        uint64_t v25 = *(void **)(a1 + 48);
        if (v24) {
          id v24 = objc_getProperty(v24, v22, 48, 1);
        }
        BOOL v26 = sub_10005C130(v23, v25, &v186, 1, 1, 0, v171, 0, v24, 0, 0);

        if (v26)
        {
          id v164 = v14;
          uint64_t v27 = (v4 + 120);
          int v167 = v4;
          uint64_t v28 = (v4 + 130);
          uint64_t v29 = +[NEPolicyCondition allInterfaces];
          id v30 = +[NWAddressEndpoint endpointWithHostname:@"0.0.0.0" port:@"53"];
          uint64_t v31 = +[NEPolicyCondition remoteAddress:v30 prefix:0];

          uint64_t v32 = +[NEPolicyResult skipWithOrder:v28];
          id v33 = objc_alloc((Class)NEPolicy);
          log = v29;
          v196[0] = v29;
          v196[1] = v31;
          uint64_t v34 = (void *)v32;
          uint64_t v163 = (void *)v31;
          id v35 = +[NSArray arrayWithObjects:v196 count:2];
          id v36 = [v33 initWithOrder:v27 result:v34 conditions:v35];

          char v38 = *(void **)(a1 + 40);
          if (v38) {
            id v39 = objc_getProperty(v38, v37, 48, 1);
          }
          else {
            id v39 = 0;
          }
          id v161 = v36;
          sub_1000312DC((BOOL)v3, v36, v39);
          uint64_t v40 = +[NWAddressEndpoint endpointWithHostname:@"::" port:@"53"];
          uint64_t v41 = +[NEPolicyCondition remoteAddress:v40 prefix:0];

          id v42 = objc_alloc((Class)NEPolicy);
          v195[0] = log;
          v195[1] = v41;
          id v160 = (void *)v41;
          uint64_t v43 = +[NSArray arrayWithObjects:v195 count:2];
          id v44 = [v42 initWithOrder:v27 result:v34 conditions:v43];

          id v46 = *(void **)(a1 + 40);
          if (v46) {
            id v47 = objc_getProperty(v46, v45, 48, 1);
          }
          else {
            id v47 = 0;
          }
          sub_1000312DC((BOOL)v3, v44, v47);
          id v48 = objc_alloc((Class)NEPolicy);
          id v194 = log;
          id v49 = +[NSArray arrayWithObjects:&v194 count:1];
          id v50 = [v48 initWithOrder:v27 result:v171 conditions:v49];

          uint64_t v52 = *(void **)(a1 + 40);
          id v162 = v34;
          if (v52) {
            id v53 = objc_getProperty(v52, v51, 48, 1);
          }
          else {
            id v53 = 0;
          }
          long long v158 = v50;
          id v159 = v44;
          sub_1000312DC((BOOL)v3, v50, v53);
          id v54 = v3;
          if (!*(void *)(a1 + 56) && *(void *)(a1 + 32))
          {
            id v55 = objc_alloc((Class)NSArray);
            id obja = [*(id *)(a1 + 32) uuid];
            id v56 = +[NEPolicyCondition effectiveApplication:obja];
            id v57 = [NEPolicyCondition effectivePID:[*(id *)(a1 + 32) pid] version:objc_msgSend(*(id *)(a1 + 32), "pidVersion")];
            id v58 = +[NEPolicyCondition delegateIsPlatformBinary];
            BOOL v59 = +[NEPolicyCondition allInterfaces];
            id v60 = [v55 initWithObjects:v56, v57, v58, v59, 0];

            id v62 = [objc_alloc((Class)NEPolicy) initWithOrder:v28 result:v171 conditions:v60];
            id v63 = *(void **)(a1 + 40);
            if (v63) {
              id v64 = objc_getProperty(v63, v61, 48, 1);
            }
            else {
              id v64 = 0;
            }
            sub_1000312DC((BOOL)v54, v62, v64);
            char v65 = 1;
            do
            {
              char v66 = v65;
              if (v65) {
                unsigned int v67 = 10000;
              }
              else {
                unsigned int v67 = 15500;
              }
              if (*(void *)(a1 + 40)) {
                uint64_t v68 = v67;
              }
              else {
                uint64_t v68 = 0;
              }
              BOOL v69 = +[NEPolicyResult skipWithOrder:(v68 + 800)];
              id v71 = [objc_alloc((Class)NEPolicy) initWithOrder:v68 result:v69 conditions:v60];
              BOOL v72 = *(void **)(a1 + 40);
              if (v72) {
                id v73 = objc_getProperty(v72, v70, 48, 1);
              }
              else {
                id v73 = 0;
              }
              sub_1000312DC((BOOL)v54, v71, v73);

              char v65 = 0;
            }
            while ((v66 & 1) != 0);
          }
          id v78 = objc_alloc_init((Class)NSMutableArray);
          uint64_t v79 = (_UNKNOWN **)NEResourcesCopyContentFilterExclusionList();
          if (!v79 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            uint64_t v80 = ne_log_large_obj();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              id v153 = *(id *)(a1 + 40);
              if (v153) {
                id v153 = objc_getProperty(v153, v81, 48, 1);
              }
              *(_DWORD *)long long buf = 138412290;
              id v198 = (const char *)v153;
              _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "Content filter exclusion list not found: %@", buf, 0xCu);
            }

            uint64_t v79 = &off_1000C9708;
          }
          long long v184 = 0u;
          long long v185 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          id obj = v79;
          id v82 = [obj countByEnumeratingWithState:&v182 objects:v193 count:16];
          if (v82)
          {
            id v83 = v82;
            uint64_t v84 = *(void *)v183;
            do
            {
              for (id i = 0; i != v83; id i = (char *)i + 1)
              {
                if (*(void *)v183 != v84) {
                  objc_enumerationMutation(obj);
                }
                long long v86 = *(void **)(*((void *)&v182 + 1) + 8 * i);
                if (([v86 isEqualToString:@"/usr/sbin/mDNSResponder"] & 1) == 0)
                {
                  id v87 = +[NEProcessInfo copyUUIDsForExecutable:v86];
                  uint64_t v88 = v87;
                  if (v87 && [v87 count]) {
                    [v78 addObjectsFromArray:v88];
                  }
                }
              }
              id v83 = [obj countByEnumeratingWithState:&v182 objects:v193 count:16];
            }
            while (v83);
          }

          long long v180 = 0u;
          long long v181 = 0u;
          long long v178 = 0u;
          long long v179 = 0u;
          id v89 = v78;
          id v90 = [v89 countByEnumeratingWithState:&v178 objects:v192 count:16];
          if (v90)
          {
            id v91 = v90;
            uint64_t v92 = *(void *)v179;
            do
            {
              unsigned int v93 = 0;
              do
              {
                if (*(void *)v179 != v92) {
                  objc_enumerationMutation(v89);
                }
                id v94 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v178 + 1) + 8 * (void)v93)];
                id v95 = objc_alloc((Class)NEPolicy);
                v191[0] = log;
                v191[1] = v94;
                uint64_t v96 = +[NSArray arrayWithObjects:v191 count:2];
                id v97 = [v95 initWithOrder:v28 result:v171 conditions:v96];

                __int16 v99 = *(void **)(a1 + 40);
                if (v99) {
                  id v100 = objc_getProperty(v99, v98, 48, 1);
                }
                else {
                  id v100 = 0;
                }
                sub_1000312DC((BOOL)v54, v97, v100);

                unsigned int v93 = (char *)v93 + 1;
              }
              while (v91 != v93);
              id v101 = [v89 countByEnumeratingWithState:&v178 objects:v192 count:16];
              id v91 = v101;
            }
            while (v101);
          }

          uint64_t v102 = +[NEPolicyCondition domain:@"ipv4only.arpa"];
          id v103 = objc_alloc((Class)NEPolicy);
          v190[0] = log;
          v190[1] = v102;
          uint64_t v104 = +[NSArray arrayWithObjects:v190 count:2];
          id v105 = [v103 initWithOrder:v28 result:v171 conditions:v104];

          long long v107 = *(void **)(a1 + 40);
          uint64_t v157 = (void *)v102;
          if (v107) {
            id v108 = objc_getProperty(v107, v106, 48, 1);
          }
          else {
            id v108 = 0;
          }
          id v3 = v54;
          id v14 = v164;
          id v156 = v105;
          sub_1000312DC((BOOL)v54, v105, v108);
          id v154 = objc_alloc((Class)NEPolicy);
          if (*(void *)(a1 + 40)) {
            uint64_t v109 = 18000;
          }
          else {
            uint64_t v109 = 0;
          }
          if (*(void *)(a1 + 40)) {
            uint64_t v110 = 18120;
          }
          else {
            uint64_t v110 = 0;
          }
          long long v111 = +[NEPolicyResult skipWithOrder:v110];
          id v165 = [*(id *)(a1 + 32) uuid];
          id v112 = +[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:");
          v189[0] = v112;
          id v113 = +[NEPolicyCondition allInterfaces];
          v189[1] = v113;
          uint64_t v114 = +[NSArray arrayWithObjects:v189 count:2];
          id v116 = [v154 initWithOrder:v109 result:v111 conditions:v114];
          long long v117 = *(void **)(a1 + 40);
          if (v117) {
            id v118 = objc_getProperty(v117, v115, 48, 1);
          }
          else {
            id v118 = 0;
          }
          sub_1000312DC((BOOL)v54, v116, v118);

          id v119 = [objc_alloc((Class)NSMutableArray) initWithObjects:log, 0];
          id v120 = +[NEPolicyCondition uid:0];
          [v120 setNegative:1];
          [v119 addObject:v120];
          id v166 = +[NEPolicyResult divertSocketToControlUnit:*(unsigned int *)(a1 + 72)];
          uint64_t v121 = *(void *)(a1 + 64);
          uint64_t v122 = ne_log_obj();
          BOOL v123 = os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG);
          uint64_t v155 = v120;
          if (v121)
          {
            if (v123)
            {
              *(_DWORD *)long long buf = 136315138;
              id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "%s: Installing perApp DNSProxy policies", buf, 0xCu);
            }

            uint64_t v124 = *(void *)(a1 + 40);
            id v125 = [*(id *)(a1 + 64) appRules];
            v172[0] = _NSConcreteStackBlock;
            v172[1] = 3221225472;
            v172[2] = sub_100048768;
            v172[3] = &unk_1000C5DA0;
            id v173 = v119;
            id v174 = v54;
            int v177 = v167 + 140;
            uint64_t v126 = v166;
            id v127 = v166;
            uint64_t v128 = *(void *)(a1 + 40);
            id v175 = v127;
            uint64_t v176 = v128;
            sub_100034F48(v124, v125, 0, 1, 0, 0, v174, v172, 0);

            uint64_t v129 = v119;
            id v130 = v173;
            id v131 = v163;
            id v132 = v160;
          }
          else
          {
            if (v123)
            {
              *(_DWORD *)long long buf = 136315138;
              id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "%s: Installing DNSProxy policies", buf, 0xCu);
            }

            id v131 = v163;
            if (v54) {
              id v134 = objc_getProperty(v54, v133, 16, 1);
            }
            else {
              id v134 = 0;
            }
            id v136 = v134;
            id v137 = *(void **)(a1 + 40);
            if (v137) {
              id v138 = objc_getProperty(v137, v135, 48, 1);
            }
            else {
              id v138 = 0;
            }
            sub_10005F1A8(v136, v167 + 139, 0, v171, v138);

            uint64_t v129 = v119;
            id v130 = [objc_alloc((Class)NEPolicy) initWithOrder:(v167 + 140) result:v166 conditions:v119];
            id v140 = *(void **)(a1 + 40);
            if (v140) {
              id v141 = objc_getProperty(v140, v139, 48, 1);
            }
            else {
              id v141 = 0;
            }
            sub_1000312DC((BOOL)v3, v130, v141);
            id v142 = +[NEPolicyCondition allInterfaces];
            long long v188 = v142;
            id v144 = +[NSArray arrayWithObjects:&v188 count:1];
            id v145 = *(void **)(a1 + 40);
            if (v145) {
              id v146 = objc_getProperty(v145, v143, 56, 1);
            }
            else {
              id v146 = 0;
            }
            sub_100031224((BOOL)v3, v144, v146);

            id v147 = +[NEPolicyCondition allInterfaces];
            v187[0] = v147;
            id v148 = +[NEPolicyCondition flowRemoteAddressEmpty];
            v187[1] = v148;
            id v150 = +[NSArray arrayWithObjects:v187 count:2];
            id v151 = *(void **)(a1 + 40);
            if (v151) {
              id v152 = objc_getProperty(v151, v149, 56, 1);
            }
            else {
              id v152 = 0;
            }
            sub_10003116C((BOOL)v3, v150, v152);

            id v132 = v160;
            uint64_t v126 = v166;
          }

          uint64_t v74 = sub_10002F2DC(v3);
          goto LABEL_51;
        }
        log = ne_log_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleI"
                 "Ds:limitToProcess:perApp:]_block_invoke";
          uint64_t v75 = "%s: Captive app traffic exception policies failed";
          goto LABEL_49;
        }
LABEL_50:
        uint64_t v74 = 0;
LABEL_51:

        goto LABEL_52;
      }
      log = ne_log_obj();
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)long long buf = 136315138;
      id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      uint64_t v75 = "%s: Captive agent traffic exception policies failed";
    }
    else
    {
      log = ne_log_obj();
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)long long buf = 136315138;
      id v198 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      uint64_t v75 = "%s: Failed to get UUIDs for captiveagent";
    }
LABEL_49:
    _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, v75, buf, 0xCu);
    goto LABEL_50;
  }
  ne_log_obj();
  os_log_t v171 = (os_log_t)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_ERROR, "Cannot set policies for DNS Proxy provider, no process identity available for the provider", buf, 2u);
  }
  uint64_t v74 = 0;
LABEL_52:

  return v74;
}

void sub_100048768(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  id v6 = [v5 arrayByAddingObjectsFromArray:v4];

  id v7 = ne_log_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v23 = 136315394;
    id v24 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:limi"
          "tToProcess:perApp:]_block_invoke";
    __int16 v25 = 2112;
    BOOL v26 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s: Installing perApp DNSProxy policy %@", (uint8_t *)&v23, 0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = [objc_alloc((Class)NEPolicy) initWithOrder:*(unsigned int *)(a1 + 64) result:*(void *)(a1 + 48) conditions:v6];
  id v11 = *(void **)(a1 + 56);
  if (v11) {
    id Property = objc_getProperty(v11, v9, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_1000312DC(v8, v10, Property);

  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = *(void **)(a1 + 56);
  if (v15) {
    id v16 = objc_getProperty(v15, v13, 56, 1);
  }
  else {
    id v16 = 0;
  }
  sub_100031224(v14, v6, v16);
  id v17 = +[NEPolicyCondition flowRemoteAddressEmpty];
  id v18 = [v6 arrayByAddingObject:v17];

  uint64_t v20 = *(void *)(a1 + 40);
  id v21 = *(void **)(a1 + 56);
  if (v21) {
    id v22 = objc_getProperty(v21, v19, 56, 1);
  }
  else {
    id v22 = 0;
  }
  sub_10003116C(v20, v18, v22);
}

uint64_t sub_100048944(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v4, Property);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 56, 1);
  }
  else {
    id v9 = 0;
  }
  sub_10003033C(v4, v9);
  unsigned int v128 = sub_1000317B4(*(void *)(a1 + 32));
  unsigned int v113 = v128;
  unsigned int v114 = v128 + 32;
  id v10 = &AnalyticsSendEventLazy_ptr;
  long long v107 = +[NEPolicyResult netAgentUUID:*(void *)(a1 + 40)];
  long long v106 = +[NEPolicyCondition flowRemoteAddressEmpty];
  BOOL v111 = (BOOL)v4;
  uint64_t v112 = a1;
  if (![*(id *)(a1 + 48) count])
  {
LABEL_27:
    id v35 = objc_alloc((Class)NEPolicy);
    id v36 = +[NEPolicyCondition allInterfaces];
    id v137 = v36;
    uint64_t v37 = +[NSArray arrayWithObjects:&v137 count:1];
    id v38 = [v35 initWithOrder:v114 result:v107 conditions:v37];

    uint64_t v40 = *(void **)(a1 + 32);
    if (v40) {
      id v41 = objc_getProperty(v40, v39, 48, 1);
    }
    else {
      id v41 = 0;
    }
    sub_1000312DC((BOOL)v4, v38, v41);
    ++v114;
    id v42 = +[NEPolicyCondition allInterfaces];
    v136[0] = v42;
    v136[1] = v106;
    id v44 = +[NSArray arrayWithObjects:v136 count:2];
    BOOL v45 = *(void **)(a1 + 32);
    if (v45) {
      id v46 = objc_getProperty(v45, v43, 56, 1);
    }
    else {
      id v46 = 0;
    }
    sub_10003116C((BOOL)v4, v44, v46);

    goto LABEL_32;
  }
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id v11 = *(id *)(a1 + 48);
  id v12 = [v11 countByEnumeratingWithState:&v124 objects:v140 count:16];
  if (!v12)
  {

    goto LABEL_27;
  }
  id v13 = v12;
  char v14 = 0;
  uint64_t v15 = *(void *)v125;
  do
  {
    id v16 = 0;
    id obj = v13;
    do
    {
      if (*(void *)v125 != v15) {
        objc_enumerationMutation(v11);
      }
      id v17 = *(void **)(*((void *)&v124 + 1) + 8 * (void)v16);
      if ([v17 length])
      {
        id v18 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
        char v19 = [v17 stringByTrimmingCharactersInSet:v18];
        if (v19)
        {
          id v20 = v11;
          id v21 = +[NEPolicyCondition domain:v19];
          id v22 = objc_alloc((Class)NEPolicy);
          int v23 = +[NEPolicyCondition allInterfaces];
          v139[0] = v23;
          v139[1] = v21;
          id v24 = +[NSArray arrayWithObjects:v139 count:2];
          id v25 = [v22 initWithOrder:v114 result:v107 conditions:v24];

          uint64_t v27 = *(void **)(v112 + 32);
          if (v27) {
            id v28 = objc_getProperty(v27, v26, 48, 1);
          }
          else {
            id v28 = 0;
          }
          sub_1000312DC(v111, v25, v28);
          uint64_t v29 = +[NEPolicyCondition allInterfaces];
          v138[0] = v29;
          v138[1] = v21;
          v138[2] = v106;
          uint64_t v31 = +[NSArray arrayWithObjects:v138 count:3];
          uint64_t v32 = *(void **)(v112 + 32);
          if (v32) {
            id v33 = objc_getProperty(v32, v30, 56, 1);
          }
          else {
            id v33 = 0;
          }
          ++v114;
          sub_10003116C(v111, v31, v33);

          id v4 = (id)v111;
          char v14 = 1;
          id v11 = v20;
          id v13 = obj;
        }

        a1 = v112;
      }
      id v16 = (char *)v16 + 1;
    }
    while (v13 != v16);
    id v34 = [v11 countByEnumeratingWithState:&v124 objects:v140 count:16];
    id v13 = v34;
  }
  while (v34);

  id v10 = &AnalyticsSendEventLazy_ptr;
  if ((v14 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_32:
  id v115 = [v10[480] skipWithOrder:v114];
  id v47 = objc_alloc_init((Class)NSMutableArray);
  id v48 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/configd"];
  [v47 addObjectsFromArray:v48];

  id v49 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/captiveagent"];
  [v47 addObjectsFromArray:v49];

  id v50 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"];
  [v47 addObjectsFromArray:v50];

  id v51 = +[NEProcessInfo copyUUIDsForExecutable:@"/Applications/InCallService.app/InCallService"];
  [v47 addObjectsFromArray:v51];

  id v52 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"];
  [v47 addObjectsFromArray:v52];

  id v53 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"569F2700-CAF9-483D-B19D-7AF406DCE15E"];
  [v47 addObject:v53];

  id v54 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"67A03811-DB0A-594E-C2AE-8B0517EDF26F"];
  [v47 addObject:v54];

  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  id obja = v47;
  id v55 = [obja countByEnumeratingWithState:&v120 objects:v135 count:16];
  if (v55)
  {
    id v56 = v55;
    uint64_t v57 = *(void *)v121;
    do
    {
      id v58 = 0;
      do
      {
        if (*(void *)v121 != v57) {
          objc_enumerationMutation(obja);
        }
        BOOL v59 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v120 + 1) + 8 * (void)v58)];
        id v60 = objc_alloc((Class)NEPolicy);
        uint64_t v61 = +[NEPolicyCondition allInterfaces];
        v134[0] = v61;
        v134[1] = v59;
        id v62 = +[NSArray arrayWithObjects:v134 count:2];
        id v63 = [v60 initWithOrder:v113 result:v115 conditions:v62];

        char v65 = *(void **)(a1 + 32);
        if (v65) {
          id v66 = objc_getProperty(v65, v64, 48, 1);
        }
        else {
          id v66 = 0;
        }
        sub_1000312DC((BOOL)v4, v63, v66);

        id v58 = (char *)v58 + 1;
      }
      while (v56 != v58);
      id v67 = [obja countByEnumeratingWithState:&v120 objects:v135 count:16];
      id v56 = v67;
    }
    while (v67);
  }

  uint64_t v68 = +[NEPolicyCondition domain:@"ipv4only.arpa"];
  id v69 = objc_alloc((Class)NEPolicy);
  unsigned int v70 = +[NEPolicyCondition allInterfaces];
  v133[0] = v70;
  v133[1] = v68;
  id v71 = +[NSArray arrayWithObjects:v133 count:2];
  id v72 = [v69 initWithOrder:v113 result:v115 conditions:v71];

  uint64_t v74 = *(void **)(a1 + 32);
  if (v74) {
    id v75 = objc_getProperty(v74, v73, 48, 1);
  }
  else {
    id v75 = 0;
  }
  sub_1000312DC((BOOL)v4, v72, v75);
  if ([*(id *)(a1 + 56) count])
  {
    id v104 = v72;
    id v105 = v68;
    id v77 = ne_log_obj();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      id v78 = *(const char **)(a1 + 56);
      *(_DWORD *)long long buf = 138412290;
      id v132 = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Excluding domains from DNS settings: %@", buf, 0xCu);
    }

    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    id v108 = *(id *)(a1 + 56);
    id v79 = [v108 countByEnumeratingWithState:&v116 objects:v130 count:16];
    if (v79)
    {
      id v80 = v79;
      uint64_t v81 = *(void *)v117;
      do
      {
        id v82 = 0;
        do
        {
          if (*(void *)v117 != v81) {
            objc_enumerationMutation(v108);
          }
          id v83 = *(void **)(*((void *)&v116 + 1) + 8 * (void)v82);
          uint64_t v84 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
          unsigned int v85 = [v83 stringByTrimmingCharactersInSet:v84];
          if (v85)
          {
            long long v86 = +[NEPolicyCondition domain:v85];
            id v87 = objc_alloc((Class)NEPolicy);
            uint64_t v88 = +[NEPolicyCondition allInterfaces];
            v129[0] = v88;
            v129[1] = v86;
            id v89 = +[NSArray arrayWithObjects:v129 count:2];
            id v90 = [v87 initWithOrder:v113 result:v115 conditions:v89];

            a1 = v112;
            uint64_t v92 = *(void **)(v112 + 32);
            if (v92) {
              id v93 = objc_getProperty(v92, v91, 48, 1);
            }
            else {
              id v93 = 0;
            }
            sub_1000312DC(v111, v90, v93);
          }
          id v82 = (char *)v82 + 1;
        }
        while (v80 != v82);
        id v94 = [v108 countByEnumeratingWithState:&v116 objects:v130 count:16];
        id v80 = v94;
      }
      while (v94);
    }

    id v4 = (id)v111;
    id v72 = v104;
    uint64_t v68 = v105;
  }
  if (v4) {
    id v95 = objc_getProperty(v4, v76, 16, 1);
  }
  else {
    id v95 = 0;
  }
  id v97 = v95;
  uint64_t v98 = *(void **)(a1 + 64);
  id v99 = *(id *)(a1 + 32);
  if (v99) {
    id v99 = objc_getProperty(v99, v96, 48, 1);
  }
  BOOL v100 = sub_10005C130(v97, v98, &v128, 1, 1, 0, v115, 0, v99, 0, 0);

  if (!v100)
  {
    id v101 = ne_log_obj();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v132 = "-[NESMPolicySession setPoliciesForDNSSettingsWithAgentUUID:matchDomains:exceptionDomains:captiveNetworkPlug"
             "inBundleIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%s: Captive app traffic exception policies failed", buf, 0xCu);
    }
  }
  uint64_t v102 = sub_10002F2DC(v4);

  return v102;
}

uint64_t sub_1000493B4(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000494A0;
    v11[3] = &unk_1000C5F80;
    void v11[4] = a1;
    id v12 = v7;
    char v14 = a4;
    id v13 = v8;
    uint64_t v9 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, v11);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t sub_1000494A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32)) {
    int v4 = 19499;
  }
  else {
    int v4 = 0;
  }
  unsigned int v68 = v4;
  if (*(void *)(a1 + 32)) {
    uint64_t v5 = 19999;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = ne_log_large_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v7, 112, 1);
    }
    *(_DWORD *)long long buf = 138412290;
    id v82 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Skip policy IDs to be removed %@", buf, 0xCu);
  }

  uint64_t v9 = *(void **)(a1 + 32);
  if (v9) {
    id v10 = objc_getProperty(v9, v8, 112, 1);
  }
  else {
    id v10 = 0;
  }
  sub_10002F180(v3, v10);
  id v11 = ne_log_large_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    id v62 = *(id *)(a1 + 32);
    if (v62) {
      id v62 = objc_getProperty(v62, v12, 120, 1);
    }
    *(_DWORD *)long long buf = 138412290;
    id v82 = v62;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Low skip policy IDs to be removed %@", buf, 0xCu);
  }

  id v13 = ne_log_large_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    id v63 = *(id *)(a1 + 32);
    if (v63)
    {
      id v63 = objc_getProperty(v63, v14, 120, 1);
      uint64_t v64 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v64 = 0;
    }
    *(_DWORD *)long long buf = 138412546;
    id v82 = v63;
    __int16 v83 = 2048;
    uint64_t v84 = v64;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Removing low skip policy IDs: %@ (self %p)", buf, 0x16u);
  }

  id v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v15, 120, 1);
  }
  else {
    id v17 = 0;
  }
  sub_10003033C(v3, v17);
  unsigned int v70 = +[NEPolicyResult skipWithOrder:v5];
  id v69 = +[NEPolicyCondition flowRemoteAddressEmpty];
  if (*(void *)(a1 + 40))
  {
    id v18 = +[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:");
    id v19 = objc_alloc((Class)NEPolicy);
    id v80 = v18;
    id v20 = +[NSArray arrayWithObjects:&v80 count:1];
    id v21 = [v19 initWithOrder:v68 result:v70 conditions:v20];

    int v23 = *(void **)(a1 + 32);
    if (v23) {
      id v24 = objc_getProperty(v23, v22, 112, 1);
    }
    else {
      id v24 = 0;
    }
    sub_1000312DC((BOOL)v3, v21, v24);
    v79[0] = v18;
    v79[1] = v69;
    BOOL v26 = +[NSArray arrayWithObjects:v79 count:2];
    uint64_t v27 = *(void **)(a1 + 32);
    if (v27) {
      id v28 = objc_getProperty(v27, v25, 120, 1);
    }
    else {
      id v28 = 0;
    }
    sub_10003116C((BOOL)v3, v26, v28);
  }
  int v29 = *(unsigned __int8 *)(a1 + 56);
  if ([*(id *)(a1 + 48) containsObject:&stru_1000C7428]) {
    goto LABEL_41;
  }
  int v67 = v29;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id v30 = *(id *)(a1 + 48);
  id v31 = [v30 countByEnumeratingWithState:&v71 objects:v78 count:16];
  if (v31)
  {
    id v32 = v31;
    char v33 = 0;
    uint64_t v34 = *(void *)v72;
    do
    {
      id v35 = 0;
      do
      {
        if (*(void *)v72 != v34) {
          objc_enumerationMutation(v30);
        }
        id v36 = *(void **)(*((void *)&v71 + 1) + 8 * (void)v35);
        if ([v36 length])
        {
          uint64_t v37 = +[NEPolicyCondition domain:v36];
          id v38 = objc_alloc((Class)NEPolicy);
          id v77 = v37;
          id v39 = +[NSArray arrayWithObjects:&v77 count:1];
          id v40 = [v38 initWithOrder:v68 result:v70 conditions:v39];

          id v42 = *(void **)(a1 + 32);
          if (v42) {
            id v43 = objc_getProperty(v42, v41, 112, 1);
          }
          else {
            id v43 = 0;
          }
          sub_1000312DC((BOOL)v3, v40, v43);
          v76[0] = v37;
          v76[1] = v69;
          BOOL v45 = +[NSArray arrayWithObjects:v76 count:2];
          id v46 = *(void **)(a1 + 32);
          if (v46) {
            id v47 = objc_getProperty(v46, v44, 120, 1);
          }
          else {
            id v47 = 0;
          }
          sub_10003116C((BOOL)v3, v45, v47);

          char v33 = 1;
        }
        id v35 = (char *)v35 + 1;
      }
      while (v32 != v35);
      id v48 = [v30 countByEnumeratingWithState:&v71 objects:v78 count:16];
      id v32 = v48;
    }
    while (v48);
  }
  else
  {
    char v33 = 0;
  }

  if (v67)
  {
    if ((v33 & 1) == 0)
    {
LABEL_41:
      id v50 = [objc_alloc((Class)NEPolicy) initWithOrder:v68 result:v70 conditions:&__NSArray0__struct];
      id v51 = *(void **)(a1 + 32);
      if (v51) {
        id v52 = objc_getProperty(v51, v49, 112, 1);
      }
      else {
        id v52 = 0;
      }
      sub_1000312DC((BOOL)v3, v50, v52);
      id v75 = v69;
      id v54 = +[NSArray arrayWithObjects:&v75 count:1];
      id v55 = *(void **)(a1 + 32);
      if (v55) {
        id v56 = objc_getProperty(v55, v53, 120, 1);
      }
      else {
        id v56 = 0;
      }
      sub_10003116C((BOOL)v3, v54, v56);
    }
  }
  uint64_t v57 = ne_log_large_obj();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    id v65 = *(id *)(a1 + 32);
    if (v65)
    {
      id v65 = objc_getProperty(v65, v58, 120, 1);
      uint64_t v66 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v66 = 0;
    }
    *(_DWORD *)long long buf = 138412546;
    id v82 = v65;
    __int16 v83 = 2048;
    uint64_t v84 = v66;
    _os_log_debug_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "Adding low skip policy IDs: %@ (self %p)", buf, 0x16u);
  }

  uint64_t v59 = sub_10002F2DC(v3);
  return v59;
}

void sub_100049AF4(void *a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, unsigned int a11)
{
  id v91 = a3;
  id v92 = a4;
  id v103 = a5;
  id v17 = a6;
  id v100 = a7;
  id v97 = a8;
  id v96 = a9;
  id v95 = a10;
  if (!a1) {
    goto LABEL_59;
  }
  id v18 = a1;
  id v19 = &AnalyticsSendEventLazy_ptr;
  id v20 = &AnalyticsSendEventLazy_ptr;
  self = a1;
  BOOL v102 = (BOOL)v17;
  if ([v92 count])
  {
    id v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v118 = v92;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Excluding domains from relay: %@", buf, 0xCu);
    }

    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    id obj = v92;
    id v22 = [obj countByEnumeratingWithState:&v108 objects:v116 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v109;
      do
      {
        for (id i = 0; i != v23; id i = (char *)i + 1)
        {
          if (*(void *)v109 != v24) {
            objc_enumerationMutation(obj);
          }
          BOOL v26 = *(void **)(*((void *)&v108 + 1) + 8 * i);
          uint64_t v27 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
          id v28 = [v26 stringByTrimmingCharactersInSet:v27];
          int v29 = v28;
          if (v28)
          {
            buf[0] = 0;
            id v30 = v28;
            [v30 UTF8String];
            address_from_string = (void *)nw_endpoint_create_address_from_string();
            if (address_from_string)
            {
              id v32 = +[NWAddressEndpoint endpointWithCEndpoint:address_from_string];
              char v33 = +[NEPolicyCondition flowRemoteAddress:v32 prefix:buf[0]];
              int v34 = buf[0];
              if (buf[0] >= 0x81u)
              {
                int v34 = 128;
                buf[0] = 0x80;
              }
              uint64_t v35 = (a2 + 266 - 2 * v34);
            }
            else
            {
              char v33 = +[NEPolicyCondition domain:v30];
              id v36 = [v30 componentsSeparatedByString:@"."];
              unsigned int v37 = [v36 count];

              int v38 = 4 - 2 * v37;
              if (v37 > 7) {
                int v38 = -10;
              }
              if (v37 < 3) {
                int v38 = 0;
              }
              uint64_t v35 = (a2 + 10 + v38);
            }
            id v39 = +[NEPolicyCondition allInterfaces];
            v115[0] = v39;
            v115[1] = v33;
            id v40 = +[NSArray arrayWithObjects:v115 count:2];

            if (v103)
            {
              uint64_t v41 = [v40 arrayByAddingObjectsFromArray:];

              id v40 = (void *)v41;
            }
            id v42 = [objc_alloc((Class)NEPolicy) initWithOrder:v35 result:v100 conditions:v40];
            id Property = objc_getProperty(self, v43, 48, 1);
            sub_1000312DC(v102, v42, Property);

            id v19 = &AnalyticsSendEventLazy_ptr;
          }
        }
        id v23 = [obj countByEnumeratingWithState:&v108 objects:v116 count:16];
      }
      while (v23);
    }

    id v18 = self;
    id v17 = (id)v102;
    id v20 = &AnalyticsSendEventLazy_ptr;
  }
  if (![v91 count]) {
    goto LABEL_54;
  }
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  id v45 = v91;
  id v46 = [v45 countByEnumeratingWithState:&v104 objects:v114 count:16];
  if (!v46)
  {

LABEL_54:
    id v78 = [v19[479] allInterfaces];
    uint64_t v112 = v78;
    id v79 = +[NSArray arrayWithObjects:&v112 count:1];

    if (v103)
    {
      uint64_t v80 = [v79 arrayByAddingObjectsFromArray:];

      id v79 = (void *)v80;
    }
    id v81 = [objc_alloc((Class)v20[478]) initWithOrder:(a2 + 266) result:v97 conditions:v79];
    id v83 = objc_getProperty(v18, v82, 48, 1);
    sub_1000312DC((BOOL)v17, v81, v83);

    if (v96)
    {
      id v84 = [objc_alloc((Class)v20[478]) initWithOrder:(a2 + 266) result:v96 conditions:v79];
      id v86 = objc_getProperty(v18, v85, 48, 1);
      sub_1000312DC((BOOL)v17, v84, v86);
    }
    id v87 = [objc_alloc((Class)v20[478]) initWithOrder:a11 result:v95 conditions:v79];
    id v89 = objc_getProperty(v18, v88, 48, 1);
    sub_1000312DC((BOOL)v17, v87, v89);

    goto LABEL_59;
  }
  id v47 = v46;
  char v48 = 0;
  uint64_t v49 = *(void *)v105;
  uint64_t v93 = *(void *)v105;
  id v94 = v45;
  do
  {
    id v50 = 0;
    id v98 = v47;
    do
    {
      if (*(void *)v105 != v49) {
        objc_enumerationMutation(v45);
      }
      id v51 = *(void **)(*((void *)&v104 + 1) + 8 * (void)v50);
      if ([v51 length])
      {
        id v52 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
        id v53 = [v51 stringByTrimmingCharactersInSet:v52];
        id v54 = v53;
        if (v53)
        {
          buf[0] = 0;
          [v53 UTF8String];
          id v55 = (void *)nw_endpoint_create_address_from_string();
          if (v55)
          {
            id v56 = +[NWAddressEndpoint endpointWithCEndpoint:v55];
            uint64_t v57 = [v19[479] flowRemoteAddress:v56 prefix:buf[0]];
            int v58 = buf[0];
            if (buf[0] >= 0x81u)
            {
              int v58 = 128;
              buf[0] = 0x80;
            }
            uint64_t v59 = (a2 + 266 - 2 * v58);
          }
          else
          {
            uint64_t v57 = [v19[479] domain:v54];
            id v60 = [v54 componentsSeparatedByString:@"."];
            unsigned int v61 = [v60 count];

            int v62 = 4 - 2 * v61;
            if (v61 > 7) {
              int v62 = -10;
            }
            if (v61 < 3) {
              int v62 = 0;
            }
            uint64_t v59 = (a2 + 10 + v62);
          }
          id v63 = [v19[479] allInterfaces];
          v113[0] = v63;
          v113[1] = v57;
          uint64_t v64 = +[NSArray arrayWithObjects:v113 count:2];

          if (v103)
          {
            uint64_t v65 = [v64 arrayByAddingObjectsFromArray:];

            uint64_t v64 = (void *)v65;
          }
          id v66 = [objc_alloc((Class)NEPolicy) initWithOrder:v59 result:v97 conditions:v64];
          id v68 = objc_getProperty(self, v67, 48, 1);
          sub_1000312DC(v102, v66, v68);

          if (v96)
          {
            id v69 = [objc_alloc((Class)NEPolicy) initWithOrder:v59 result:v96 conditions:v64];
            id v71 = objc_getProperty(self, v70, 48, 1);
            sub_1000312DC(v102, v69, v71);
          }
          id v72 = [objc_alloc((Class)NEPolicy) initWithOrder:(v59 + 1) result:v100 conditions:v64];
          char v48 = 1;
          id v74 = objc_getProperty(self, v73, 48, 1);
          sub_1000312DC(v102, v72, v74);

          id v75 = [objc_alloc((Class)NEPolicy) initWithOrder:a11 result:v95 conditions:v64];
          id v77 = objc_getProperty(self, v76, 48, 1);
          sub_1000312DC(v102, v75, v77);

          id v19 = &AnalyticsSendEventLazy_ptr;
          uint64_t v49 = v93;
          id v45 = v94;
          id v47 = v98;
        }
      }
      id v50 = (char *)v50 + 1;
    }
    while (v47 != v50);
    id v47 = [v45 countByEnumeratingWithState:&v104 objects:v114 count:16];
  }
  while (v47);

  id v18 = self;
  id v17 = (id)v102;
  id v20 = &AnalyticsSendEventLazy_ptr;
  if ((v48 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_59:
}

uint64_t sub_10004A378(void *a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (void *)a1[4];
  if (v5) {
    id Property = objc_getProperty(v5, v3, 48, 1);
  }
  else {
    id Property = 0;
  }
  sub_10002F180(v4, Property);
  id v8 = (void *)a1[4];
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 56, 1);
  }
  else {
    id v9 = 0;
  }
  id v10 = v4;
  sub_10003033C(v4, v9);
  unsigned int v113 = sub_1000317B4(a1[4]);
  unsigned int v98 = v113;
  id v97 = +[NEPolicyResult skipWithOrder:v113 + 573];
  id v11 = objc_alloc_init((Class)NSMutableArray);
  id v12 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/configd"];
  [v11 addObjectsFromArray:v12];

  id v13 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/sbin/mDNSResponder"];
  [v11 addObjectsFromArray:v13];

  id v14 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/captiveagent"];
  [v11 addObjectsFromArray:v14];

  id v15 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"];
  [v11 addObjectsFromArray:v15];

  id v16 = +[NEProcessInfo copyUUIDsForExecutable:@"/Applications/InCallService.app/InCallService"];
  [v11 addObjectsFromArray:v16];

  id v17 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"];
  [v11 addObjectsFromArray:v17];

  id v18 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"569F2700-CAF9-483D-B19D-7AF406DCE15E"];
  [v11 addObject:v18];

  id v19 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"67A03811-DB0A-594E-C2AE-8B0517EDF26F"];
  [v11 addObject:v19];

  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id obj = v11;
  id v20 = [obj countByEnumeratingWithState:&v109 objects:v120 count:16];
  id v21 = a1;
  if (v20)
  {
    id v22 = v20;
    uint64_t v23 = *(void *)v110;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v110 != v23) {
          objc_enumerationMutation(obj);
        }
        id v25 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v109 + 1) + 8 * (void)v24)];
        id v26 = objc_alloc((Class)NEPolicy);
        uint64_t v27 = +[NEPolicyCondition allInterfaces];
        v119[0] = v27;
        v119[1] = v25;
        id v28 = +[NSArray arrayWithObjects:v119 count:2];
        id v29 = [v26 initWithOrder:v98 result:v97 conditions:v28];

        a1 = v21;
        id v31 = (void *)v21[4];
        if (v31) {
          id v32 = objc_getProperty(v31, v30, 48, 1);
        }
        else {
          id v32 = 0;
        }
        sub_1000312DC((BOOL)v10, v29, v32);

        uint64_t v24 = (char *)v24 + 1;
      }
      while (v22 != v24);
      id v33 = [obj countByEnumeratingWithState:&v109 objects:v120 count:16];
      id v22 = v33;
    }
    while (v33);
  }

  uint64_t v34 = +[NEPolicyCondition domain:@"ipv4only.arpa"];
  id v35 = objc_alloc((Class)NEPolicy);
  id v36 = +[NEPolicyCondition allInterfaces];
  v118[0] = v36;
  v118[1] = v34;
  unsigned int v37 = +[NSArray arrayWithObjects:v118 count:2];
  int v38 = v97;
  id v39 = [v35 initWithOrder:v98 result:v97 conditions:v37];

  uint64_t v41 = (void *)a1[4];
  if (v41) {
    id v42 = objc_getProperty(v41, v40, 48, 1);
  }
  else {
    id v42 = 0;
  }
  SEL v43 = v10;
  sub_1000312DC((BOOL)v10, v39, v42);
  id v95 = (void *)v34;
  if (v10) {
    id v45 = objc_getProperty(v10, v44, 16, 1);
  }
  else {
    id v45 = 0;
  }
  id v47 = v45;
  id v48 = (id)a1[4];
  uint64_t v49 = (void *)a1[5];
  if (v48) {
    id v48 = objc_getProperty(v48, v46, 48, 1);
  }
  BOOL v50 = sub_10005C130(v47, v49, &v113, 1, 1, 0, v97, 0, v48, 0, 0);

  if (!v50)
  {
    id v51 = ne_log_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v117 = "-[NESMPolicySession setPoliciesForRelayWithAgentUUID:dnsAgentUUID:matchDomains:excludedDomains:perApp:capti"
             "veNetworkPluginBundleIDs:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%s: Captive app traffic exception policies failed", buf, 0xCu);
    }
  }
  id v94 = v39;
  id v52 = +[NEPolicyCondition allowsUnsafeSocketAccess];
  [v52 setNegative:1];
  id v53 = objc_alloc((Class)NEPolicy);
  id v54 = +[NEPolicyResult skipWithOrder:v98 + 34];
  id v55 = +[NEPolicyCondition allInterfaces];
  v115[0] = v55;
  id v56 = +[NEPolicyCondition usesModernNetworkAPI];
  v115[1] = v56;
  void v115[2] = v52;
  uint64_t v93 = v52;
  uint64_t v57 = +[NSArray arrayWithObjects:v115 count:3];
  id v58 = [v53 initWithOrder:v98 + 32 result:v54 conditions:v57];

  id v60 = v21;
  unsigned int v61 = (void *)v21[4];
  if (v61) {
    id v62 = objc_getProperty(v61, v59, 48, 1);
  }
  else {
    id v62 = 0;
  }
  sub_1000312DC((BOOL)v43, v58, v62);
  id v63 = +[NEPolicyResult netAgentUUID:v21[6]];
  if (v21[7])
  {
    uint64_t v64 = +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:");
  }
  else
  {
    uint64_t v64 = 0;
  }
  id v92 = v58;
  uint64_t v65 = +[NEPolicyResult divertSocketToControlUnit:0xFFFFFFFLL];
  id v66 = (void *)v21[8];
  if (v66)
  {
    uint64_t v67 = v21[4];
    id v68 = [v66 appRules];
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_10004AC4C;
    v99[3] = &unk_1000C5FF8;
    v99[4] = v60[4];
    unsigned int v107 = v98 + 37;
    int v38 = v97;
    id v100 = (id)v60[9];
    id v101 = (id)v60[10];
    id v102 = v43;
    id v103 = v97;
    id v104 = v63;
    id v105 = v64;
    id v106 = v65;
    unsigned int v108 = v98 + 33;
    sub_100034F48(v67, v68, 0, 1, 0, 0, v102, v99, 0);

    SEL v70 = v94;
    id v69 = v95;
    id v71 = v64;
    id v72 = v65;
    id v74 = v92;
    SEL v73 = v93;
  }
  else
  {
    id v89 = v65;
    id v90 = v64;
    id v91 = v63;
    id v75 = objc_alloc((Class)NEPolicy);
    SEL v76 = +[NEPolicyResult drop];
    id v77 = +[NEPolicyCondition allInterfaces];
    v114[0] = v77;
    id v78 = +[NEPolicyCondition domain:@"use-application-dns.net"];
    v114[1] = v78;
    id v79 = +[NSArray arrayWithObjects:v114 count:2];
    id v80 = [v75 initWithOrder:v98 + 574 result:v76 conditions:v79];

    SEL v82 = (void *)v21[4];
    if (v82) {
      id v83 = objc_getProperty(v82, v81, 48, 1);
    }
    else {
      id v83 = 0;
    }
    SEL v70 = v94;
    id v69 = v95;
    id v74 = v92;
    SEL v73 = v93;
    id v63 = v91;
    sub_1000312DC((BOOL)v43, v80, v83);
    id v84 = (void *)v21[4];
    SEL v85 = (void *)v21[9];
    id v86 = (void *)v21[10];
    id v72 = v89;
    id v71 = v90;
    sub_100049AF4(v84, v98 + 305, v85, v86, 0, v43, v97, v91, v90, v89, v98 + 33);
  }
  uint64_t v87 = sub_10002F2DC(v43);

  return v87;
}

void sub_10004AC4C(uint64_t a1, void *a2)
{
}

void sub_10004B300(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10004B32C(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstallOnQueue];
}

void sub_10004BBB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10004BBFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstallOnQueue];
}

void sub_10004C1F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004C430(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v8, 120, 1);
  }
  id v10 = Property;
  id v11 = [v10 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v11)
  {
    id v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 48) type]);
    id v13 = [v11 objectForKeyedSubscript:v12];

    if (v13 == *(void **)(a1 + 48))
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10004C740;
      v24[3] = &unk_1000C6D88;
      v24[4] = *(void *)(a1 + 32);
      id v25 = v13;
      id v26 = *(id *)(a1 + 56);
      [v25 handleUpdateConfiguration:v5 withCompletionHandler:v24];
    }
    else
    {
      id v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        id v16 = *(void **)(a1 + 48);
        uint64_t v18 = *(void *)(a1 + 32);
        unsigned int v19 = [v16 type];
        uint64_t v20 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138413314;
        uint64_t v28 = v18;
        __int16 v29 = 2112;
        id v30 = v16;
        __int16 v31 = 2112;
        uint64_t v32 = v17;
        __int16 v33 = 1024;
        unsigned int v34 = v19;
        __int16 v35 = 2112;
        uint64_t v36 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@: Failed to register session %@, session with ID %@ and type %d is different: %@", buf, 0x30u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
  else
  {
    id v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      id v21 = *(void **)(a1 + 48);
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v28 = v23;
      __int16 v29 = 2112;
      id v30 = v21;
      __int16 v31 = 2112;
      uint64_t v32 = v22;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@: Failed to register session %@, session with ID %@ not found", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }

  objc_sync_exit(v7);
}

void sub_10004C714(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004C740(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 88, 1);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004C80C;
  block[3] = &unk_1000C6D88;
  void block[4] = v5;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

void sub_10004C80C(id *a1)
{
  id obj = a1[4];
  objc_sync_enter(obj);
  if ([a1[5] type] != 3)
  {
    id v48 = a1[4];
    if (v48 && objc_getProperty(v48, v3, 176, 1)) {
      goto LABEL_42;
    }
    unsigned int v56 = [a1[5] type];
    id v57 = a1[5];
    if (v56 == 4)
    {
      id v58 = [v57 configuration];
      uint64_t v59 = [v58 contentFilter];
      unsigned int v60 = [v59 isEnabled];

      if (!v60) {
        goto LABEL_42;
      }
      unsigned int v61 = [a1[5] configuration];
      id v62 = [v61 externalIdentifier];

      if (!v62)
      {
        id v64 = a1[4];
        if (v64)
        {
          id v65 = objc_getProperty(v64, v63, 224, 1);
          if (v65)
          {
            uint64_t v67 = v65;
            id v68 = a1[4];
            id v69 = v68 ? objc_getProperty(v68, v66, 224, 1) : 0;
            id v70 = a1[5];

            if (v69 != v70)
            {
              id Property = a1[4];
              if (Property) {
                id Property = objc_getProperty(Property, v66, 224, 1);
              }
              id v72 = Property;
              [v72 stopIfNecessaryWithReason:33];
            }
          }
          id v73 = a1[4];
          if (v73) {
            objc_setProperty_atomic(v73, v66, a1[5], 224);
          }
        }
      }
      id v74 = a1[5];
      if (sub_100073930(v74))
      {
        id v75 = ne_log_obj();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          id v76 = a1[4];
          id v77 = [v74 configuration];
          id v78 = [v77 name];
          id v79 = a1[5];
          *(_DWORD *)long long buf = 138412802;
          id v261 = v76;
          __int16 v262 = 2112;
          *(void *)uint64_t v263 = v78;
          *(_WORD *)&v263[8] = 2112;
          id v264 = v79;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "%@: <%@> Register Filter Session: %@", buf, 0x20u);
        }
      }
      else
      {
        id v75 = ne_log_obj();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          id v227 = a1[4];
          id v228 = [v74 configuration];
          id v229 = [v228 name];
          *(_DWORD *)long long buf = 138412546;
          id v261 = v227;
          __int16 v262 = 2112;
          *(void *)uint64_t v263 = v229;
          _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%@: <%@> Failed to allocate a control unit", buf, 0x16u);
        }
      }

      (*((void (**)(void))a1[6] + 2))();
      goto LABEL_113;
    }
    unsigned int v80 = [v57 type];
    id v81 = a1[5];
    if (v80 == 1)
    {
      SEL v82 = [v81 configuration];
      id v83 = [v82 grade];

      id v84 = a1[5];
      if (v83 != (id)1)
      {
        long long v123 = [v84 configuration];
        long long v124 = [v123 VPN];
        unsigned int v125 = [v124 isEnabled];

        if (!v125) {
          goto LABEL_42;
        }
        long long v126 = ne_log_obj();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        {
          id v127 = a1[4];
          *(_DWORD *)long long buf = 138412290;
          id v261 = v127;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "%@: Register Personal VPN Session enabled", buf, 0xCu);
        }

        long long v255 = 0u;
        long long v256 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        id v129 = a1[4];
        if (v129) {
          id v129 = objc_getProperty(v129, v128, 120, 1);
        }
        id v249 = v129;
        id v130 = 0;
        id v132 = [v249 countByEnumeratingWithState:&v253 objects:v271 count:16];
        if (v132)
        {
          uint64_t v133 = *(void **)v254;
          while (2)
          {
            for (id i = 0; i != v132; id i = (char *)i + 1)
            {
              if (*(void **)v254 != v133) {
                objc_enumerationMutation(v249);
              }
              uint64_t v135 = *(void *)(*((void *)&v253 + 1) + 8 * i);
              id v136 = a1[4];
              if (v136) {
                id v136 = objc_getProperty(v136, v131, 120, 1);
              }
              id v137 = v136;
              id v138 = [v137 objectForKeyedSubscript:v135];
              id v139 = [v138 objectForKeyedSubscript:&off_1000C9840];

              id v140 = [v139 configuration];
              LODWORD(v138) = [v140 grade] == (id)1;

              if (v138)
              {
                id v74 = v139;

                id v141 = [v74 configuration];
                id v142 = [v141 VPN];
                id v143 = [v142 protocol];
                unsigned __int8 v144 = [v143 includeAllNetworks];

                if (v144)
                {

                  int v146 = 0;
                  goto LABEL_133;
                }
                id v130 = v74;
              }
            }
            id v132 = [v249 countByEnumeratingWithState:&v253 objects:v271 count:16];
            if (v132) {
              continue;
            }
            break;
          }

          if (!v130)
          {
            id v74 = 0;
            goto LABEL_187;
          }
          id v249 = [a1[5] configuration];
          id v132 = [v249 VPN];
          uint64_t v133 = [v132 protocol];
          if (([v133 includeAllNetworks] & 1) == 0)
          {

            goto LABEL_186;
          }
          int v146 = 1;
          id v74 = v130;
LABEL_133:
          os_log_t v171 = [v74 configuration];
          id v172 = [v171 VPN];
          BOOL v173 = [v172 isEnabled]
              && [v74 status]
              && [v74 status] != 1;

          if (v146)
          {

            if (!v173) {
              goto LABEL_187;
            }
          }
          else if (!v173)
          {
            goto LABEL_187;
          }
          long long v208 = ne_log_obj();
          if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
          {
            id v246 = a1[4];
            id v251 = [a1[5] configuration];
            id v248 = [v251 VPN];
            long long v209 = [v248 protocol];
            if ([v209 includeAllNetworks]) {
              id v210 = "IncludeAllNetworks ";
            }
            else {
              id v210 = "";
            }
            id v211 = a1[5];
            long long v212 = [v74 configuration];
            long long v213 = [v212 VPN];
            long long v214 = [v213 protocol];
            unsigned int v215 = [v214 includeAllNetworks];
            unsigned int v216 = [v74 status];
            long long v217 = "";
            if (v215) {
              long long v217 = "IncludeAllNetworks ";
            }
            *(_DWORD *)long long buf = 138413570;
            id v261 = v246;
            __int16 v262 = 2080;
            *(void *)uint64_t v263 = v210;
            *(_WORD *)&v263[8] = 2112;
            id v264 = v211;
            __int16 v265 = 2080;
            id v266 = v217;
            __int16 v267 = 2112;
            id v268 = v74;
            __int16 v269 = 1024;
            unsigned int v270 = v216;
            _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, "%@: Failed to register Personal %sVPN Session %@ due to Enterprise %sVPN session %@ (status %d)", buf, 0x3Au);
          }
          id v218 = [a1[5] configuration];
          id v219 = [v218 VPN];
          unsigned int v220 = [v219 isOnDemandEnabled];

          if (v220) {
            [a1[5] pauseOnDemand];
          }
          unsigned int v221 = (void (**)(id, void))a1[6];
          if (v221) {
            v221[2](v221, 0);
          }
        }
        else
        {
LABEL_186:

          id v74 = v130;
LABEL_187:
          id v230 = a1[4];
          if (v230)
          {
            id v231 = objc_getProperty(v230, v145, 208, 1);
            if (v231)
            {
              uint64_t v233 = v231;
              id v234 = a1[4];
              if (v234) {
                id v234 = objc_getProperty(v234, v232, 208, 1);
              }
              BOOL v235 = v234 == a1[5];

              if (!v235)
              {
                id v236 = a1[4];
                if (v236) {
                  id v236 = objc_getProperty(v236, v232, 208, 1);
                }
                id v237 = v236;
                [v237 stopIfNecessaryWithReason:33];
              }
            }
            id v238 = a1[4];
            if (v238) {
              objc_setProperty_atomic(v238, v232, a1[5], 208);
            }
          }
          long long v239 = ne_log_obj();
          if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
          {
            id v240 = a1[4];
            id v241 = a1[5];
            *(_DWORD *)long long buf = 138412546;
            id v261 = v240;
            __int16 v262 = 2112;
            *(void *)uint64_t v263 = v241;
            _os_log_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_DEFAULT, "%@: Register Personal VPN Session: %@", buf, 0x16u);
          }

          id v242 = [a1[5] configuration];
          uint64_t v243 = [v242 VPN];
          unsigned int v244 = [v243 isOnDemandEnabled];

          if (v244) {
            [a1[5] unpauseOnDemand];
          }
          (*((void (**)(void))a1[6] + 2))();
        }
LABEL_113:

        goto LABEL_47;
      }
      SEL v85 = [v84 configuration];
      id v86 = [v85 VPN];
      unsigned int v87 = [v86 isEnabled];

      if (!v87) {
        goto LABEL_42;
      }
      id v89 = a1[4];
      if (v89)
      {
        id v90 = objc_getProperty(v89, v88, 192, 1);
        if (v90)
        {
          id v92 = v90;
          id v93 = a1[4];
          id v94 = v93 ? objc_getProperty(v93, v91, 192, 1) : 0;
          id v95 = a1[5];

          if (v94 != v95)
          {
            id v96 = a1[4];
            if (v96) {
              id v96 = objc_getProperty(v96, v91, 192, 1);
            }
            id v97 = v96;
            [v97 stopIfNecessaryWithReason:33];
          }
        }
        id v98 = a1[4];
        if (v98)
        {
          objc_setProperty_atomic(v98, v91, a1[5], 192);
          id v100 = a1[4];
          if (v100)
          {
            id v101 = objc_getProperty(v100, v99, 208, 1);
            if (v101)
            {
              id v102 = v101;
              id v103 = [a1[5] configuration];
              id v104 = [v103 VPN];
              id v105 = [v104 protocol];
              if ([v105 includeAllNetworks])
              {

LABEL_148:
                uint64_t v187 = ne_log_obj();
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                {
                  id v245 = a1[4];
                  id v250 = [a1[5] configuration];
                  v247 = [v250 VPN];
                  long long v188 = [v247 protocol];
                  if ([v188 includeAllNetworks]) {
                    id v190 = "IncludeAllNetworks ";
                  }
                  else {
                    id v190 = "";
                  }
                  id v191 = a1[4];
                  id v192 = a1[5];
                  if (v191) {
                    id v191 = objc_getProperty(v191, v189, 208, 1);
                  }
                  id v193 = v191;
                  id v194 = [v193 configuration];
                  long long v195 = [v194 VPN];
                  uint64_t v196 = [v195 protocol];
                  unsigned int v198 = [v196 includeAllNetworks];
                  id v199 = a1[4];
                  if (v199) {
                    id v199 = objc_getProperty(v199, v197, 208, 1);
                  }
                  id v200 = "";
                  if (v198) {
                    id v200 = "IncludeAllNetworks ";
                  }
                  *(_DWORD *)long long buf = 138413314;
                  id v261 = v245;
                  __int16 v262 = 2080;
                  *(void *)uint64_t v263 = v190;
                  *(_WORD *)&v263[8] = 2112;
                  id v264 = v192;
                  __int16 v265 = 2080;
                  id v266 = v200;
                  __int16 v267 = 2112;
                  id v268 = v199;
                  _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEFAULT, "%@: Register Enterprise %sVPN Session %@: stopping Personal %sVPN session %@", buf, 0x34u);
                }
                id v202 = a1[4];
                if (v202) {
                  id v202 = objc_getProperty(v202, v201, 208, 1);
                }
                id v74 = v202;
                id v204 = a1[4];
                if (v204)
                {
                  objc_setProperty_atomic(v204, v203, 0, 208);
                  id v205 = a1[4];
                }
                else
                {
                  id v205 = 0;
                }
                v257[0] = _NSConcreteStackBlock;
                v257[1] = 3221225472;
                v257[2] = sub_10004DD20;
                v257[3] = &unk_1000C6D88;
                v257[4] = v205;
                id v258 = a1[5];
                id v259 = a1[6];
                [v74 stopIfNecessaryWithReason:33 withCompletionHandler:v257];

                goto LABEL_113;
              }
              id v181 = a1[4];
              if (v181) {
                id v181 = objc_getProperty(v181, v106, 208, 1);
              }
              id v182 = v181;
              long long v183 = [v182 configuration];
              long long v184 = [v183 VPN];
              long long v185 = [v184 protocol];
              unsigned __int8 v186 = [v185 includeAllNetworks];

              if (v186) {
                goto LABEL_148;
              }
            }
          }
        }
      }
      long long v119 = ne_log_obj();
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
      {
        id v206 = a1[4];
        id v207 = a1[5];
        *(_DWORD *)long long buf = 138412546;
        id v261 = v206;
        __int16 v262 = 2112;
        *(void *)uint64_t v263 = v207;
        long long v122 = "%@: Register Enterprise VPN Session: %@";
        goto LABEL_166;
      }
LABEL_167:

LABEL_39:
      id v46 = (void (**)(id, uint64_t))a1[6];
      uint64_t v47 = 1;
LABEL_46:
      v46[2](v46, v47);
      goto LABEL_47;
    }
    unsigned int v107 = [v81 type];
    id v108 = a1[5];
    if (v107 == 2)
    {
      long long v109 = [v108 configuration];
      id v110 = [v109 grade];
      if (v110 != (id)1)
      {
        uint64_t v1 = [a1[5] configuration];
        if ([v1 grade] != (id)3)
        {

          goto LABEL_42;
        }
      }
      long long v111 = [a1[5] configuration];
      long long v112 = [v111 appVPN];
      unsigned int v113 = [v112 isEnabled];

      if (v110 == (id)1)
      {

        if (!v113) {
          goto LABEL_42;
        }
      }
      else
      {

        if ((v113 & 1) == 0) {
          goto LABEL_42;
        }
      }
      [a1[5] setIsDeregisteredAppVPNSession:0];
      long long v119 = ne_log_obj();
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_167;
      }
      id v169 = a1[4];
      id v170 = a1[5];
      *(_DWORD *)long long buf = 138412546;
      id v261 = v169;
      __int16 v262 = 2112;
      *(void *)uint64_t v263 = v170;
      long long v122 = "%@: Register App VPN Session: %@";
    }
    else
    {
      unsigned int v114 = [v108 type];
      id v115 = a1[5];
      if (v114 == 5)
      {
        long long v116 = [v115 configuration];
        long long v117 = [v116 pathController];
        unsigned int v118 = [v117 isEnabled];

        if (!v118) {
          goto LABEL_42;
        }
        long long v119 = ne_log_obj();
        if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_167;
        }
        id v120 = a1[4];
        id v121 = a1[5];
        *(_DWORD *)long long buf = 138412546;
        id v261 = v120;
        __int16 v262 = 2112;
        *(void *)uint64_t v263 = v121;
        long long v122 = "%@: Register Path Controller Session: %@";
      }
      else
      {
        unsigned int v147 = [v115 type];
        id v148 = a1[5];
        if (v147 == 6)
        {
          uint64_t v149 = [v148 configuration];
          id v150 = [v149 dnsProxy];
          unsigned int v151 = [v150 isEnabled];

          if (!v151) {
            goto LABEL_42;
          }
          id v152 = [a1[5] configuration];
          id v153 = [v152 externalIdentifier];

          if (!v153)
          {
            id v155 = a1[4];
            if (v155)
            {
              id v156 = objc_getProperty(v155, v154, 232, 1);
              if (v156)
              {
                long long v158 = v156;
                id v159 = a1[4];
                id v160 = v159 ? objc_getProperty(v159, v157, 232, 1) : 0;
                id v161 = a1[5];

                if (v160 != v161)
                {
                  id v162 = a1[4];
                  if (v162) {
                    id v162 = objc_getProperty(v162, v157, 232, 1);
                  }
                  id v163 = v162;
                  [v163 stopIfNecessaryWithReason:33];
                }
              }
              id v164 = a1[4];
              if (v164) {
                objc_setProperty_atomic(v164, v157, a1[5], 232);
              }
            }
          }
          long long v119 = ne_log_obj();
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
          {
            id v165 = a1[4];
            id v166 = [a1[5] configuration];
            int v167 = [v166 name];
            id v168 = a1[5];
            *(_DWORD *)long long buf = 138412802;
            id v261 = v165;
            __int16 v262 = 2112;
            *(void *)uint64_t v263 = v167;
            *(_WORD *)&v263[8] = 2112;
            id v264 = v168;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "%@: <%@> Register DNS Proxy Session: %@", buf, 0x20u);
          }
          goto LABEL_167;
        }
        unsigned int v174 = [v148 type];
        id v175 = a1[5];
        if (v174 != 7)
        {
          if ([v175 type] != 9) {
            goto LABEL_42;
          }
          id v222 = [a1[5] configuration];
          id v223 = [v222 relay];
          unsigned int v224 = [v223 isEnabled];

          if (!v224) {
            goto LABEL_42;
          }
          long long v119 = ne_log_obj();
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
          {
            id v225 = a1[4];
            id v226 = a1[5];
            *(_DWORD *)long long buf = 138412546;
            id v261 = v225;
            __int16 v262 = 2112;
            *(void *)uint64_t v263 = v226;
            long long v122 = "%@: Register Relay Session: %@";
            goto LABEL_166;
          }
          goto LABEL_167;
        }
        uint64_t v176 = [v175 configuration];
        int v177 = [v176 dnsSettings];
        unsigned int v178 = [v177 isEnabled];

        if (!v178) {
          goto LABEL_42;
        }
        long long v119 = ne_log_obj();
        if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_167;
        }
        id v179 = a1[4];
        id v180 = a1[5];
        *(_DWORD *)long long buf = 138412546;
        id v261 = v179;
        __int16 v262 = 2112;
        *(void *)uint64_t v263 = v180;
        long long v122 = "%@: Register DNS Settings Session: %@";
      }
    }
LABEL_166:
    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, v122, buf, 0x16u);
    goto LABEL_167;
  }
  id v4 = [a1[5] configuration];
  uint64_t v5 = [v4 alwaysOnVPN];
  unsigned int v6 = [v5 isEnabled];

  if (v6)
  {
    id v8 = a1[4];
    if (!v8) {
      goto LABEL_35;
    }
    id v9 = objc_getProperty(v8, v7, 176, 1);
    if (v9)
    {
      id v11 = v9;
      id v12 = a1[4];
      id v13 = v12 ? objc_getProperty(v12, v10, 176, 1) : 0;
      id v14 = a1[5];

      if (v13 != v14)
      {
        id v15 = a1[4];
        if (v15) {
          id v15 = objc_getProperty(v15, v10, 176, 1);
        }
        id v16 = v15;
        [v16 stopIfNecessaryWithReason:33];
      }
    }
    id v17 = a1[4];
    if (!v17) {
      goto LABEL_35;
    }
    id v19 = objc_getProperty(v17, v10, 192, 1);
    id v20 = a1[4];
    if (v19)
    {
      if (v20) {
        id v20 = objc_getProperty(v20, v18, 192, 1);
      }
      id v21 = v20;
      [v21 stopIfNecessaryWithReason:33];

      id v23 = a1[4];
      if (!v23) {
        goto LABEL_35;
      }
      objc_setProperty_atomic(v23, v22, 0, 192);
      id v20 = a1[4];
    }
    if (v20)
    {
      id v25 = objc_getProperty(v20, v18, 208, 1);
      id v26 = a1[4];
      if (v25)
      {
        if (v26) {
          id v26 = objc_getProperty(v26, v24, 208, 1);
        }
        id v27 = v26;
        [v27 stopIfNecessaryWithReason:33];

        id v29 = a1[4];
        if (!v29) {
          goto LABEL_35;
        }
        objc_setProperty_atomic(v29, v28, 0, 208);
        id v26 = a1[4];
      }
      if (v26)
      {
        id v31 = objc_getProperty(v26, v24, 232, 1);
        id v32 = a1[4];
        if (v31)
        {
          if (v32) {
            id v32 = objc_getProperty(v32, v30, 232, 1);
          }
          id v33 = v32;
          [v33 stopIfNecessaryWithReason:33];

          id v35 = a1[4];
          if (!v35) {
            goto LABEL_35;
          }
          objc_setProperty_atomic(v35, v34, 0, 232);
          id v32 = a1[4];
        }
        if (v32 && objc_getProperty(v32, v30, 224, 1))
        {
          id v37 = a1[4];
          if (v37) {
            id v37 = objc_getProperty(v37, v36, 224, 1);
          }
          id v38 = v37;
          [v38 stopIfNecessaryWithReason:33];

          id v40 = a1[4];
          if (v40) {
            objc_setProperty_atomic(v40, v39, 0, 224);
          }
        }
      }
    }
LABEL_35:
    uint64_t v41 = ne_log_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      id v42 = a1[4];
      id v43 = a1[5];
      *(_DWORD *)long long buf = 138412546;
      id v261 = v42;
      __int16 v262 = 2112;
      *(void *)uint64_t v263 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%@: Register Always-On VPN Session: %@", buf, 0x16u);
    }

    id v45 = a1[4];
    if (v45) {
      objc_setProperty_atomic(v45, v44, a1[5], 176);
    }
    goto LABEL_39;
  }
LABEL_42:
  uint64_t v49 = ne_log_obj();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    id v50 = a1[5];
    unsigned int v51 = [v50 type];
    id v52 = [a1[5] configuration];
    unsigned int v53 = [v52 grade];
    id v54 = [a1[5] configuration];
    id v55 = [v54 VPN];
    *(_DWORD *)long long buf = 138413058;
    id v261 = v50;
    __int16 v262 = 1024;
    *(_DWORD *)uint64_t v263 = v51;
    *(_WORD *)&v263[4] = 1024;
    *(_DWORD *)&v263[6] = v53;
    LOWORD(v264) = 1024;
    *(_DWORD *)((char *)&v264 + 2) = [v55 isEnabled];
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Failed to register session: %@ type: %d grade: %d vpn enabled: %d", buf, 0x1Eu);
  }
  id v46 = (void (**)(id, uint64_t))a1[6];
  if (v46)
  {
    uint64_t v47 = 0;
    goto LABEL_46;
  }
LABEL_47:
  objc_sync_exit(obj);
}

void sub_10004DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10004DD20(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 88, 1);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004DDEC;
  block[3] = &unk_1000C6D88;
  void block[4] = v5;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

uint64_t sub_10004DDEC(void *a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Register Enterprise VPN Session: %@", (uint8_t *)&v6, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10004DF0C(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 248, 1))
    {
      id v3 = objc_getProperty(self, v2, 248, 1);
      [v3 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v4, 0, 248);
    }
    if (objc_getProperty(self, v2, 256, 1))
    {
      id v6 = objc_getProperty(self, v5, 256, 1);
      [v6 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v7, 0, 256);
    }
    if (objc_getProperty(self, v5, 264, 1))
    {
      id v9 = objc_getProperty(self, v8, 264, 1);
      [v9 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v10, 0, 264);
    }
    int v11 = self[5];
    if ((v11 & 0x80000000) == 0)
    {
      notify_cancel(v11);
      self[5] = -1;
    }
    *((unsigned char *)self + 11) = 0;
    objc_sync_exit(self);
  }
}

void sub_10004E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004E090(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 136, 1))
    {
      id v3 = (io_object_t *)objc_getProperty(self, v2, 136, 1);
      SEL v4 = v3;
      if (v3 && v3[2])
      {
        IODeregisterForSystemPower(v3 + 3);
        IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)v4 + 8), 0);
        IONotificationPortDestroy(*((IONotificationPortRef *)v4 + 8));
        IOServiceClose(v4[2]);
      }

      objc_setProperty_atomic(self, v5, 0, 136);
    }
    self[12] = 0;
    objc_sync_exit(self);
  }
}

void sub_10004E164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004E178(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    int v1 = *((_DWORD *)self + 6);
    if ((v1 & 0x80000000) == 0)
    {
      notify_cancel(v1);
      *((_DWORD *)self + 6) = -1;
    }
    id v2 = (const __SCDynamicStore *)*((void *)self + 19);
    if (v2)
    {
      SCDynamicStoreSetDispatchQueue(v2, 0);
      CFRelease(*((CFTypeRef *)self + 19));
      *((void *)self + 19) = 0;
      objc_setProperty_atomic(self, v3, 0, 160);
    }
    *((unsigned char *)self + 13) = 0;
    objc_sync_exit(self);
  }
}

void sub_10004E22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004E324(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"path"])
  {
    SEL v4 = *(void **)(a1 + 40);
    SEL v3 = *(void **)(a1 + 48);
    if (v3) {
      id Property = objc_getProperty(v3, v2, 248, 1);
    }
    else {
      id Property = 0;
    }
    if ([v4 isEqual:Property])
    {
      id v7 = *(id *)(a1 + 48);
      if (v7) {
        id v7 = objc_getProperty(v7, v6, 248, 1);
      }
      __int16 v8 = [v7 path];
      id v9 = [v8 status];

      if (v9 == (id)1)
      {
        id v11 = *(id *)(a1 + 48);
        if (v11) {
          id v11 = objc_getProperty(v11, v10, 248, 1);
        }
        id v12 = [v11 path];
        id v13 = [v12 interface];
      }
      else
      {
        id v13 = 0;
      }
      uint64_t v24 = [*(id *)(a1 + 48) primaryPhysicalInterface];
      if (v24 || !v13)
      {
        uint64_t v25 = [*(id *)(a1 + 48) primaryPhysicalInterface];
        if (!v25)
        {

          goto LABEL_54;
        }
        id v26 = (void *)v25;
        id v27 = [*(id *)(a1 + 48) primaryPhysicalInterface];
        uint64_t v28 = [v27 interfaceName];
        id v29 = [v13 interfaceName];
        unsigned __int8 v30 = [v28 isEqualToString:v29];

        if (v30) {
          goto LABEL_54;
        }
      }
      id v32 = ne_log_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = [*(id *)(a1 + 48) primaryPhysicalInterface];
        unsigned int v34 = [v33 interfaceName];
        id v35 = [v13 interfaceName];
        *(_DWORD *)long long buf = 138412546;
        long long v117 = v34;
        __int16 v118 = 2112;
        long long v119 = v35;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Changing primary physical interface: %@ => %@", buf, 0x16u);
      }
      uint64_t v36 = [*(id *)(a1 + 48) primaryPhysicalInterface];
      id v37 = [v36 interfaceName];

      if (v37)
      {
        id v38 = [*(id *)(a1 + 48) primaryPhysicalInterface];
        id v39 = [v38 interfaceName];
        [v39 UTF8String];
        NEHelperCacheClearRedirectedAddresses();
      }
      [*(id *)(a1 + 48) setPrimaryPhysicalInterface:v13];
      id v41 = *(id *)(a1 + 48);
      if (v41) {
        id v41 = objc_getProperty(v41, v40, 248, 1);
      }
      id v42 = [v41 path];
      id v44 = [v42 cPath];
      id v45 = *(void **)(a1 + 48);
      if (v45) {
        objc_setProperty_atomic(v45, v43, v44, 64);
      }

      sub_10004EC60(*(void **)(a1 + 48), 1);
LABEL_54:
      id v72 = *(id *)(a1 + 48);
      if (v72) {
        id v72 = objc_getProperty(v72, v31, 248, 1);
      }
      id v73 = [v72 path];
      id v74 = [v73 status];

      id v76 = *(void **)(a1 + 48);
      if (!v76)
      {
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        goto LABEL_61;
      }
      if ((id)v76[6] == v74)
      {
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
      }
      else
      {
        v76[6] = v74;
        id v76 = *(void **)(a1 + 48);
        long long v110 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        if (!v76)
        {
LABEL_61:
          id v77 = v76;
          id v78 = [v77 countByEnumeratingWithState:&v110 objects:v115 count:16];
          if (v78)
          {
            id v79 = v78;
            uint64_t v80 = *(void *)v111;
            do
            {
              for (id i = 0; i != v79; id i = (char *)i + 1)
              {
                if (*(void *)v111 != v80) {
                  objc_enumerationMutation(v77);
                }
                SEL v82 = *(void **)(*((void *)&v110 + 1) + 8 * i);
                if (v74 == (id)1)
                {
                  id v83 = [v13 interfaceName];
                  [v82 satisfyPathResult:v83];
                }
                else
                {
                  [*(id *)(*((void *)&v110 + 1) + 8 * i) satisfyPathResult:0];
                }
              }
              id v79 = [v77 countByEnumeratingWithState:&v110 objects:v115 count:16];
            }
            while (v79);
          }

          id v85 = *(id *)(a1 + 48);
          if (!v85) {
            goto LABEL_100;
          }
          ptrdiff_t v86 = 272;
LABEL_99:
          id v85 = objc_getProperty(v85, v84, v86, 1);
LABEL_100:
          [v85 removeAllObjects];
          goto LABEL_101;
        }
      }
      id v76 = objc_getProperty(v76, v75, 272, 1);
      goto LABEL_61;
    }
    id v15 = *(void **)(a1 + 40);
    id v14 = *(void **)(a1 + 48);
    if (v14) {
      id v16 = objc_getProperty(v14, v6, 256, 1);
    }
    else {
      id v16 = 0;
    }
    if ([v15 isEqual:v16])
    {
      id v18 = *(id *)(a1 + 48);
      if (v18) {
        id v18 = objc_getProperty(v18, v17, 256, 1);
      }
      id v19 = [v18 path];
      id v20 = [v19 status];

      if (v20 == (id)1)
      {
        id v22 = *(id *)(a1 + 48);
        if (v22) {
          id v22 = objc_getProperty(v22, v21, 256, 1);
        }
        id v23 = [v22 path];
        id v13 = [v23 interface];
      }
      else
      {
        id v13 = 0;
      }
      unsigned int v56 = [*(id *)(a1 + 48) primaryCellularInterface];
      if (v56 || !v13)
      {
        uint64_t v57 = [*(id *)(a1 + 48) primaryCellularInterface];
        if (!v57)
        {

          goto LABEL_82;
        }
        id v58 = (void *)v57;
        uint64_t v59 = [*(id *)(a1 + 48) primaryCellularInterface];
        unsigned int v60 = [v59 interfaceName];
        unsigned int v61 = [v13 interfaceName];
        unsigned __int8 v62 = [v60 isEqualToString:v61];

        if (v62) {
          goto LABEL_82;
        }
      }
      id v64 = ne_log_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        id v65 = [*(id *)(a1 + 48) primaryCellularInterface];
        id v66 = [v65 interfaceName];
        uint64_t v67 = [v13 interfaceName];
        *(_DWORD *)long long buf = 138412546;
        long long v117 = v66;
        __int16 v118 = 2112;
        long long v119 = v67;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Changing primary cellular interface: %@ => %@", buf, 0x16u);
      }
      id v68 = [*(id *)(a1 + 48) primaryCellularInterface];
      id v69 = [v68 interfaceName];

      if (v69)
      {
        id v70 = [*(id *)(a1 + 48) primaryCellularInterface];
        id v71 = [v70 interfaceName];
        [v71 UTF8String];
        NEHelperCacheClearRedirectedAddresses();
      }
      [*(id *)(a1 + 48) setPrimaryCellularInterface:v13];
LABEL_82:
      id v98 = *(void **)(a1 + 48);
      if (!v98)
      {
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        goto LABEL_87;
      }
      if ((id)v98[7] == v20)
      {
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
      }
      else
      {
        v98[7] = v20;
        id v98 = *(void **)(a1 + 48);
        long long v106 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        if (!v98)
        {
LABEL_87:
          id v99 = v98;
          id v100 = [v99 countByEnumeratingWithState:&v106 objects:v114 count:16];
          if (v100)
          {
            id v101 = v100;
            uint64_t v102 = *(void *)v107;
            do
            {
              for (j = 0; j != v101; j = (char *)j + 1)
              {
                if (*(void *)v107 != v102) {
                  objc_enumerationMutation(v99);
                }
                id v104 = *(void **)(*((void *)&v106 + 1) + 8 * (void)j);
                if (v20 == (id)1)
                {
                  id v105 = [v13 interfaceName];
                  [v104 satisfyPathResult:v105];
                }
                else
                {
                  [*(id *)(*((void *)&v106 + 1) + 8 * (void)j) satisfyPathResult:0, (void)v106];
                }
              }
              id v101 = [v99 countByEnumeratingWithState:&v106 objects:v114 count:16];
            }
            while (v101);
          }

          id v85 = *(id *)(a1 + 48);
          if (!v85) {
            goto LABEL_100;
          }
          ptrdiff_t v86 = 280;
          goto LABEL_99;
        }
      }
      id v98 = objc_getProperty(v98, v63, 280, 1);
      goto LABEL_87;
    }
    uint64_t v47 = *(void **)(a1 + 40);
    id v46 = *(void **)(a1 + 48);
    if (v46) {
      id v48 = objc_getProperty(v46, v17, 264, 1);
    }
    else {
      id v48 = 0;
    }
    if ([v47 isEqual:v48])
    {
      id v50 = *(id *)(a1 + 48);
      if (v50) {
        id v50 = objc_getProperty(v50, v49, 264, 1);
      }
      unsigned int v51 = [v50 path];
      id v52 = [v51 status];

      if (v52 == (id)1)
      {
        id v54 = *(id *)(a1 + 48);
        if (v54) {
          id v54 = objc_getProperty(v54, v53, 264, 1);
        }
        id v55 = [v54 path];
        id v13 = [v55 interface];
      }
      else
      {
        id v13 = 0;
      }
      unsigned int v87 = [*(id *)(a1 + 48) primaryWiFiInterface];
      if (!v87 && v13) {
        goto LABEL_78;
      }
      uint64_t v88 = [*(id *)(a1 + 48) primaryWiFiInterface];
      if (!v88)
      {

        goto LABEL_101;
      }
      id v89 = (void *)v88;
      id v90 = [*(id *)(a1 + 48) primaryWiFiInterface];
      id v91 = [v90 interfaceName];
      id v92 = [v13 interfaceName];
      unsigned __int8 v93 = [v91 isEqualToString:v92];

      if ((v93 & 1) == 0)
      {
LABEL_78:
        id v94 = ne_log_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          id v95 = [*(id *)(a1 + 48) primaryWiFiInterface];
          id v96 = [v95 interfaceName];
          id v97 = [v13 interfaceName];
          *(_DWORD *)long long buf = 138412546;
          long long v117 = v96;
          __int16 v118 = 2112;
          long long v119 = v97;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Changing primary wifi interface: %@ => %@", buf, 0x16u);
        }
        [*(id *)(a1 + 48) setPrimaryWiFiInterface:v13];
      }
LABEL_101:
    }
  }
}

void sub_10004EC60(void *a1, int a2)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = nwi_state_copy();
  if (v3)
  {
    unsigned int interface_names = nwi_state_get_interface_names();
    unsigned int v5 = interface_names;
    if (!interface_names) {
      goto LABEL_11;
    }
    id v6 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
    if (v6)
    {
      id v7 = v6;
      unsigned int v8 = nwi_state_get_interface_names();
      if (v8)
      {
        uint64_t v9 = 0;
        unint64_t v10 = v8;
        BOOL v11 = 1;
        while (1)
        {
          uint64_t v12 = v7[v9];
          nwi_state_get_ifstate();
          if (!nwi_ifstate_get_vpn_server()) {
            break;
          }
          BOOL v11 = ++v9 < v10;
          if (v10 == v9) {
            goto LABEL_9;
          }
        }
        ptrdiff_t v86 = [a1 primaryPhysicalInterface];
        unsigned int v87 = [v86 interfaceName];
        uint64_t v88 = +[NSString stringWithUTF8String:v12];
        unsigned int v5 = [v87 isEqualToString:v88];

        free(v7);
        if (v11) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
LABEL_9:
      free(v7);
    }
  }
  unsigned int v5 = 0;
LABEL_11:
  id v13 = [a1 primaryPhysicalInterface];
  id v14 = [v13 interfaceName];
  id v15 = [v14 length];

  if (!v15) {
    unsigned int v5 = 1;
  }
LABEL_13:
  id v89 = sub_10004F838(v3);
  if (v3) {
    nwi_state_release();
  }
  if ((objc_msgSend(objc_getProperty(a1, v16, 72, 1), "isEqualToDictionary:", v89) & (a2 ^ 1) & 1) != 0
    || ((v5 ^ 1) & 1) != 0)
  {
    goto LABEL_95;
  }
  id v17 = v89;
  id v93 = v17;
  if (!objc_getProperty(a1, v18, 72, 1)) {
    goto LABEL_59;
  }
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  id obj = objc_getProperty(a1, v19, 72, 1);
  id v94 = [obj countByEnumeratingWithState:&v131 objects:v149 count:16];
  if (!v94) {
    goto LABEL_58;
  }
  uint64_t v91 = *(void *)v132;
  do
  {
    for (id i = 0; i != v94; id i = (char *)i + 1)
    {
      if (*(void *)v132 != v91) {
        objc_enumerationMutation(obj);
      }
      id v22 = *(const char **)(*((void *)&v131 + 1) + 8 * i);
      id v23 = [objc_getProperty(a1, v20, 72, 1) objectForKeyedSubscript:v22];
      uint64_t v24 = (const char *)[v23 unsignedLongLongValue];

      if (v17)
      {
        uint64_t v25 = [v17 objectForKeyedSubscript:v22];
        id v17 = [v25 unsignedLongLongValue];
      }
      if (nelog_is_debug_logging_enabled())
      {
        id v26 = ne_log_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412802;
          id v142 = v22;
          __int16 v143 = 2048;
          unsigned __int8 v144 = v24;
          __int16 v145 = 2048;
          id v146 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Interface %@: flags %llx -> %llx", buf, 0x20u);
        }
      }
      id v107 = v17;
      id v27 = [a1 primaryPhysicalInterface];
      uint64_t v28 = [v27 interfaceName];
      unsigned int v29 = [v28 isEqualToString:v22];

      unsigned __int8 v30 = "Secondary";
      if (v29
        && (unsigned __int8 v30 = "Primary",
            (objc_msgSend(objc_getProperty(a1, v20, 168, 1), "isEqualToString:", v22) & 1) == 0))
      {
        id v32 = ne_log_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          id Property = (const char *)objc_getProperty(a1, v33, 168, 1);
          *(_DWORD *)long long buf = 138412546;
          id v142 = Property;
          __int16 v143 = 2112;
          unsigned __int8 v144 = v22;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Primary physical interface changed: %@ -> %@", buf, 0x16u);
        }

        id v31 = v107;
        if (((v107 ^ v24) & 3) == 0) {
          goto LABEL_39;
        }
      }
      else
      {
        id v31 = v107;
        if (((v107 ^ v24) & 3) == 0) {
          goto LABEL_56;
        }
      }
      uint64_t v36 = ne_log_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        id v142 = v30;
        __int16 v143 = 2112;
        unsigned __int8 v144 = v22;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%s Interface %@: flags changed", buf, 0x16u);
      }

LABEL_39:
      id v96 = i;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      id v98 = objc_getProperty(a1, v35, 120, 1);
      id v102 = [v98 countByEnumeratingWithState:&v127 objects:v148 count:16];
      if (v102)
      {
        id v100 = *(id *)v128;
        do
        {
          uint64_t v38 = 0;
          do
          {
            if (*(id *)v128 != v100) {
              objc_enumerationMutation(v98);
            }
            uint64_t v104 = v38;
            uint64_t v39 = *(void *)(*((void *)&v127 + 1) + 8 * v38);
            long long v123 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v126 = 0u;
            [objc_getProperty(a1, v37, 120, 1) objectForKeyedSubscript:v39];
            id v108 = (id)objc_claimAutoreleasedReturnValue();
            id v40 = [v108 countByEnumeratingWithState:&v123 objects:v147 count:16];
            if (v40)
            {
              id v41 = v40;
              uint64_t v42 = *(void *)v124;
              do
              {
                for (j = 0; j != v41; j = (char *)j + 1)
                {
                  if (*(void *)v124 != v42) {
                    objc_enumerationMutation(v108);
                  }
                  uint64_t v44 = *(void *)(*((void *)&v123 + 1) + 8 * (void)j);
                  id v45 = ne_log_obj();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
                  {
                    [objc_getProperty(a1, v46, 120, 1) objectForKeyedSubscript:v39];
                    v48 = uint64_t v47 = v24;
                    uint64_t v49 = [v48 objectForKeyedSubscript:v44];
                    *(_DWORD *)long long buf = 138412546;
                    id v142 = v22;
                    __int16 v143 = 2112;
                    unsigned __int8 v144 = v49;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Passing interface (%@) change event to %@", buf, 0x16u);

                    uint64_t v24 = v47;
                    id v31 = v107;
                  }

                  unsigned int v51 = [[objc_getProperty(a1, v50, 120, 1) objectForKeyedSubscript:v39];
                  id v52 = [v51 objectForKeyedSubscript:v44];
                  [v52 handleChangeEventForInterface:v22 newFlags:v31 previousFlags:v24];
                }
                id v41 = [v108 countByEnumeratingWithState:&v123 objects:v147 count:16];
              }
              while (v41);
            }

            uint64_t v38 = v104 + 1;
          }
          while ((id)(v104 + 1) != v102);
          id v102 = [v98 countByEnumeratingWithState:&v127 objects:v148 count:16];
        }
        while (v102);
      }

      id i = v96;
LABEL_56:
      id v17 = v93;
    }
    id v94 = [obj countByEnumeratingWithState:&v131 objects:v149 count:16];
  }
  while (v94);
LABEL_58:

LABEL_59:
  if (v17)
  {
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    id v53 = v17;
    id v54 = [v53 countByEnumeratingWithState:&v119 objects:buf count:16];
    if (v54)
    {
      id v55 = v54;
      uint64_t v56 = *(void *)v120;
      id v95 = v53;
      uint64_t v92 = *(void *)v120;
      do
      {
        id v57 = 0;
        id v97 = v55;
        do
        {
          if (*(void *)v120 != v56) {
            objc_enumerationMutation(v53);
          }
          uint64_t v58 = *(void *)(*((void *)&v119 + 1) + 8 * (void)v57);
          uint64_t v59 = [v53 objectForKeyedSubscript:v58];
          id v109 = [v59 unsignedLongLongValue];

          if (!objc_getProperty(a1, v60, 72, 1)
            || (objc_msgSend(objc_getProperty(a1, v61, 72, 1), "objectForKeyedSubscript:", v58),
                unsigned __int8 v62 = objc_claimAutoreleasedReturnValue(),
                v62,
                !v62))
          {
            if (nelog_is_debug_logging_enabled())
            {
              id v63 = ne_log_obj();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)id v137 = 138412546;
                uint64_t v138 = v58;
                __int16 v139 = 2048;
                id v140 = v109;
                _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "Interface %@ showed up with flags %llx", v137, 0x16u);
              }
            }
            if ((v109 & 3) != 0)
            {
              id v99 = v57;
              id v64 = ne_log_obj();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)id v137 = 138412290;
                uint64_t v138 = v58;
                _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "Interface %@ showed up with an address", v137, 0xCu);
              }

              long long v117 = 0u;
              long long v118 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              id v101 = objc_getProperty(a1, v65, 120, 1);
              id v105 = [v101 countByEnumeratingWithState:&v115 objects:v136 count:16];
              if (v105)
              {
                uint64_t v103 = *(void *)v116;
                do
                {
                  uint64_t v67 = 0;
                  do
                  {
                    if (*(void *)v116 != v103) {
                      objc_enumerationMutation(v101);
                    }
                    uint64_t v106 = v67;
                    uint64_t v68 = *(void *)(*((void *)&v115 + 1) + 8 * v67);
                    long long v111 = 0u;
                    long long v112 = 0u;
                    long long v113 = 0u;
                    long long v114 = 0u;
                    id v69 = [objc_getProperty(a1, v66, 120, 1) objectForKeyedSubscript:v68];
                    id v70 = [v69 countByEnumeratingWithState:&v111 objects:v135 count:16];
                    if (v70)
                    {
                      id v71 = v70;
                      uint64_t v72 = *(void *)v112;
                      do
                      {
                        for (k = 0; k != v71; k = (char *)k + 1)
                        {
                          if (*(void *)v112 != v72) {
                            objc_enumerationMutation(v69);
                          }
                          uint64_t v74 = *(void *)(*((void *)&v111 + 1) + 8 * (void)k);
                          id v75 = ne_log_obj();
                          if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                          {
                            id v77 = [objc_getProperty(a1, v76, 120, 1) objectForKeyedSubscript:v68];
                            id v78 = [v77 objectForKeyedSubscript:v74];
                            *(_DWORD *)id v137 = 138412546;
                            uint64_t v138 = v58;
                            __int16 v139 = 2112;
                            id v140 = v78;
                            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Passing interface (%@) change event to %@", v137, 0x16u);
                          }
                          uint64_t v80 = [objc_getProperty(a1, v79, 120, 1) objectForKeyedSubscript:v68];
                          id v81 = [v80 objectForKeyedSubscript:v74];
                          [v81 handleChangeEventForInterface:v58 newFlags:v109 previousFlags:0];
                        }
                        id v71 = [v69 countByEnumeratingWithState:&v111 objects:v135 count:16];
                      }
                      while (v71);
                    }

                    uint64_t v67 = v106 + 1;
                  }
                  while ((id)(v106 + 1) != v105);
                  id v105 = [v101 countByEnumeratingWithState:&v115 objects:v136 count:16];
                }
                while (v105);
              }

              id v53 = v95;
              id v55 = v97;
              uint64_t v56 = v92;
              id v57 = v99;
            }
          }
          id v57 = (char *)v57 + 1;
        }
        while (v57 != v55);
        id v55 = [v53 countByEnumeratingWithState:&v119 objects:buf count:16];
      }
      while (v55);
    }

    id v17 = v93;
  }

  objc_setProperty_atomic(a1, v82, v17, 72);
  id v83 = [a1 primaryPhysicalInterface];
  id v84 = [v83 interfaceName];
  objc_setProperty_atomic(a1, v85, v84, 168);

LABEL_95:
}

id sub_10004F838(uint64_t a1)
{
  if (a1)
  {
    unsigned int interface_names = nwi_state_get_interface_names();
    if (interface_names)
    {
      id v2 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
      if (v2)
      {
        uint64_t v3 = v2;
        unsigned int v4 = nwi_state_get_interface_names();
        if (v4)
        {
          uint64_t v5 = 0;
          id v6 = 0;
          uint64_t v7 = 8 * v4;
          do
          {
            if (nwi_state_get_ifstate() && !nwi_ifstate_get_vpn_server())
            {
              if (!v6)
              {
                id v6 = +[NSMutableDictionary dictionary];
              }
              unsigned int v8 = +[NSString stringWithUTF8String:nwi_ifstate_get_ifname()];
              uint64_t v9 = [v6 objectForKeyedSubscript:v8];

              if (!v9)
              {
                unint64_t v10 = +[NSNumber numberWithUnsignedLongLong:nwi_ifstate_get_flags()];
                BOOL v11 = +[NSString stringWithUTF8String:nwi_ifstate_get_ifname()];
                [v6 setObject:v10 forKeyedSubscript:v11];
              }
            }
            v5 += 8;
          }
          while (v7 != v5);
          free(v3);
          if (v6)
          {
            id v12 = [objc_alloc((Class)NSDictionary) initWithDictionary:v6];

            return v12;
          }
        }
        else
        {
          free(v3);
        }
      }
    }
  }
  return 0;
}

void sub_10004FAB0(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 280, 1);
  }
  if (([Property containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v5 = *(id *)(a1 + 32);
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 280, 1);
    }
    [v5 addObject:*(void *)(a1 + 40)];
  }
  id v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = objc_getProperty(v6, v4, 256, 1);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v8 = 0;
    id v7 = 0;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004FBA4;
  v9[3] = &unk_1000C61F0;
  v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  [v7 satisfyPathAgentsWithCompletionHandler:v9];
}

void sub_10004FBA4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v6 = a3;
  if (v8)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 280, 1);
    }
    [Property removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 40) satisfyPathResult:0];
  }
}

void sub_10004FCE8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 272, 1);
  }
  if (([Property containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v5 = *(id *)(a1 + 32);
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 272, 1);
    }
    [v5 addObject:*(void *)(a1 + 40)];
  }
  id v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = objc_getProperty(v6, v4, 248, 1);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v8 = 0;
    id v7 = 0;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004FDDC;
  v9[3] = &unk_1000C61F0;
  v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  [v7 satisfyPathAgentsWithCompletionHandler:v9];
}

void sub_10004FDDC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v6 = a3;
  if (v8)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 272, 1);
    }
    [Property removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 40) satisfyPathResult:0];
  }
}

void sub_100050744(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = ne_log_large_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Got a configuration change callback with configuration IDs %@", buf, 0xCu);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = v3;
  id v5 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v21;
    id v7 = (id *)(a1 + 32);
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v8);
        id v10 = +[NEConfigurationManager sharedManagerForAllUsers];
        id WeakRetained = objc_loadWeakRetained(v7);
        id v13 = WeakRetained;
        if (WeakRetained) {
          id Property = objc_getProperty(WeakRetained, v12, 88, 1);
        }
        else {
          id Property = 0;
        }
        id v15 = Property;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_100052984;
        v18[3] = &unk_1000C6048;
        objc_copyWeak(&v19, v7);
        void v18[4] = v9;
        [v10 loadConfigurationWithID:v9 withCompletionQueue:v15 handler:v18];

        objc_destroyWeak(&v19);
        id v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v16 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      id v5 = v16;
    }
    while (v16);
  }
}

void sub_100050978(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100050994(uint64_t a1)
{
  id v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handling SIGTERM", (uint8_t *)v16, 2u);
  }

  id v3 = *(void **)(a1 + 32);
  unsigned int v4 = &stru_1000C6090;
  if (v3)
  {
    id v5 = v3;
    objc_sync_enter(v5);
    id v7 = (_xpc_connection_s *)objc_getProperty(v5, v6, 96, 1);
    xpc_connection_suspend(v7);

    uint64_t v9 = (_xpc_connection_s *)objc_getProperty(v5, v8, 104, 1);
    xpc_connection_suspend(v9);

    BOOL v11 = (_xpc_connection_s *)objc_getProperty(v5, v10, 112, 1);
    xpc_connection_suspend(v11);

    sub_10004DF0C(v5);
    sub_10004E090(v5);
    sub_10004E178(v5);
    id v12 = (int *)v5;
    objc_sync_enter(v12);
    notify_cancel(v12[7]);
    notify_cancel(v12[8]);
    notify_cancel(v12[9]);
    objc_sync_exit(v12);

    if (v12[2]) {
      CNPluginMonitorStop();
    }
    if (!*((void *)v12 + 37)) {
      exit(0);
    }
    id Property = objc_getProperty(v12, v13, 88, 1);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100052770;
    v16[3] = &unk_1000C6C60;
    v16[4] = v12;
    dispatch_async(Property, v16);
    objc_setProperty_atomic_copy(v12, v15, &stru_1000C6090, 304);
    objc_sync_exit(v12);
  }
}

void sub_100050B7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100050BA0(uint64_t a1, void *a2)
{
  xpc_type_t type = a2;
  xpc_type_t v4 = type;
  if (type)
  {
    xpc_type_t v6 = type;
    xpc_type_t type = xpc_get_type(type);
    xpc_type_t v4 = v6;
    if (type == (xpc_type_t)&_xpc_type_connection)
    {
      sub_10005118C(*(void **)(a1 + 32), v6);
      xpc_type_t v4 = v6;
    }
  }

  return _objc_release_x1(type, v4);
}

void sub_100050C14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    connectioid n = v3;
    BOOL v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    id v3 = connection;
    if (v4)
    {
      xpc_connection_set_context(connection, "com.apple.nesessionmanager.flow-divert-token");
      sub_10005118C(*(void **)(a1 + 32), connection);
      id v3 = connection;
    }
  }
}

void sub_100050C90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v10 = v3;
    BOOL v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    id v3 = v10;
    if (v4)
    {
      id v5 = *(void **)(a1 + 32);
      id v7 = (_xpc_connection_s *)v10;
      if (v5)
      {
        id Property = objc_getProperty(v5, v6, 88, 1);
        xpc_connection_set_target_queue(v7, Property);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100050D90;
        handler[3] = &unk_1000C6128;
        uint64_t v9 = v7;
        id v12 = v9;
        id v13 = v5;
        xpc_connection_set_event_handler(v9, handler);
        xpc_connection_resume(v9);
      }
      id v3 = v10;
    }
  }
}

void sub_100050D90(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v5 = *(_xpc_connection_s **)(a1 + 32);
LABEL_4:
    xpc_connection_cancel(v5);
    goto LABEL_5;
  }
  int64_t int64 = xpc_dictionary_get_int64(v4, "SessionClientType");
  id v5 = *(_xpc_connection_s **)(a1 + 32);
  if (int64 != 2) {
    goto LABEL_4;
  }
  pid_t pid = xpc_connection_get_pid(v5);
  memset(buffer, 0, sizeof(buffer));
  proc_name(pid, buffer, 0x100u);
  SEL v8 = ne_log_obj();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    id v10 = buffer;
    __int16 v11 = 1024;
    pid_t v12 = pid;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Got a new agent client connection from %s(%d)", (uint8_t *)&v9, 0x12u);
  }

  sub_100050EEC(*(void **)(a1 + 40), *(void **)(a1 + 32), v4);
LABEL_5:
}

void sub_100050EEC(void *a1, void *a2, void *a3)
{
  connectioid n = a2;
  id v6 = a3;
  if (a1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v7 = objc_getProperty(a1, v5, 120, 1);
    id v24 = [v7 countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v24)
    {
      uint64_t v9 = *(void *)v34;
      id v26 = v7;
      uint64_t v23 = *(void *)v34;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v34 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v25 = v10;
          uint64_t v11 = *(void *)(*((void *)&v33 + 1) + 8 * v10);
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          pid_t v12 = [[objc_getProperty(a1, v8, 120, 1) objectForKeyedSubscript:v11];
          id v13 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v30;
            while (2)
            {
              for (id i = 0; i != v14; id i = (char *)i + 1)
              {
                if (*(void *)v30 != v15) {
                  objc_enumerationMutation(v12);
                }
                id v17 = *(void **)(*((void *)&v29 + 1) + 8 * i);
                if ([v17 intValue] == 4)
                {
                  id v19 = [objc_getProperty(a1, v18, 120, 1) objectForKeyedSubscript:v11];
                  long long v20 = [v19 objectForKeyedSubscript:v17];
                  unsigned int v21 = [v20 handleAgentClientConnection:connection WithMessage:v6];

                  if (v21)
                  {

                    goto LABEL_22;
                  }
                }
              }
              id v14 = [v12 countByEnumeratingWithState:&v29 objects:v37 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }

          uint64_t v10 = v25 + 1;
          id v7 = v26;
          uint64_t v9 = v23;
        }
        while ((id)(v25 + 1) != v24);
        id v24 = [v26 countByEnumeratingWithState:&v33 objects:v38 count:16];
      }
      while (v24);
    }

    long long v22 = ne_log_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "No filter session claimed the connection request", buf, 2u);
    }

    xpc_connection_cancel(connection);
  }
LABEL_22:
}

void sub_10005118C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    kdebug_trace();
    uint64_t v12 = 0;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000;
    uint64_t v15 = sub_100051300;
    id v16 = sub_100051310;
    id v4 = v3;
    id v17 = v4;
    id v6 = objc_getProperty(a1, v5, 88, 1);
    xpc_connection_set_target_queue((xpc_connection_t)v4, v6);

    id v7 = (_xpc_connection_s *)v13[5];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100051318;
    handler[3] = &unk_1000C6100;
    uint64_t v11 = &v12;
    id v9 = v4;
    uint64_t v10 = a1;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_resume((xpc_connection_t)v13[5]);

    _Block_object_dispose(&v12, 8);
  }
}

void sub_1000512E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100051300(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100051310(uint64_t a1)
{
}

void sub_100051318(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace();
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
LABEL_20:
    uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = 0;

    goto LABEL_21;
  }
  int64_t int64 = xpc_dictionary_get_int64(v3, "SessionClientType");
  context = (const char *)xpc_connection_get_context(*(xpc_connection_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  if (context)
  {
    if (!strcmp(context, "com.apple.nesessionmanager.flow-divert-token") && int64 != 1)
    {
      pid_t pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long buffer = 0u;
      long long v98 = 0u;
      proc_name(pid, &buffer, 0x100u);
      int64_t int64 = 0;
LABEL_17:
      unsigned int v21 = ne_log_obj();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = int64;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Cancelling connection with invalid client type: %lld", buf, 0xCu);
      }

      xpc_connection_cancel(*(xpc_connection_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
      goto LABEL_20;
    }
  }
  pid_t v7 = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long buffer = 0u;
  long long v98 = 0u;
  proc_name(v7, &buffer, 0x100u);
  switch(int64)
  {
    case 1:
      SEL v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Got a new session client connection from %s(%d)", buf, 0x12u);
      }

      id v9 = *(unsigned char **)(a1 + 40);
      uint64_t v10 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      if (v9)
      {
        id v11 = v3;
        uint64_t v12 = xpc_dictionary_get_uuid(v11, "SessionIdentifier");
        int64_t v13 = xpc_dictionary_get_int64(v11, "SessionConfigType");

        if (v12 && (id v14 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v12]) != 0)
        {
          id v16 = v14;
          id v17 = [objc_getProperty(v9, v15, 120, 1) objectForKeyedSubscript:v14];
          SEL v18 = +[NSNumber numberWithInt:v13];
          id v19 = [v17 objectForKeyedSubscript:v18];

          xpc_connection_suspend(v10);
          if (v19)
          {
            [v19 addClientConnection:v10];
          }
          else
          {
            *(void *)long long buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = sub_100051EAC;
            long long v115 = (const char *)&unk_1000C61C8;
            long long v116 = v10;
            id v117 = v16;
            int v118 = v13;
            sub_100051FBC(v9, v117, v13, buf);
          }
        }
        else
        {
          SEL v60 = ne_log_obj();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Session client request is missing a configuration ID, canceling new connection ", buf, 2u);
          }

          xpc_connection_cancel(v10);
        }
      }
      goto LABEL_82;
    case 2:
      id v24 = ne_log_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Got a new agent client connection from %s(%d)", buf, 0x12u);
      }

      sub_100050EEC(*(void **)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v3);
      goto LABEL_21;
    case 3:
      uint64_t v25 = ne_log_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Got a new client connection for mapping an interface to the provider UUID from %s(%d)", buf, 0x12u);
      }

      id v26 = *(void **)(a1 + 40);
      id v27 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      id v82 = v3;
      id v28 = v3;
      long long v29 = v28;
      if (v26)
      {
        xpc_object_t original = v28;
        connectioid n = v27;
        id v30 = +[NSString stringWithUTF8String:xpc_dictionary_get_string(v28, "InterfaceMapInfo")];
        *(void *)uuid = 0;
        uint64_t v120 = 0;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        id obj = objc_getProperty(v26, v31, 120, 1);
        id v85 = [obj countByEnumeratingWithState:&v93 objects:buf count:16];
        if (v85)
        {
          uint64_t v84 = *(void *)v94;
          p_vtable = &OBJC_METACLASS___NEAppPushPlugin.vtable;
          unsigned int v87 = v26;
          do
          {
            uint64_t v34 = 0;
            do
            {
              if (*(void *)v94 != v84) {
                objc_enumerationMutation(obj);
              }
              uint64_t v86 = v34;
              uint64_t v35 = *(void *)(*((void *)&v93 + 1) + 8 * v34);
              long long v89 = 0u;
              long long v90 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              [objc_getProperty(v26, v32, 120, 1) objectForKeyedSubscript:v35];
              id v88 = (id)objc_claimAutoreleasedReturnValue();
              id v36 = [v88 countByEnumeratingWithState:&v89 objects:v113 count:16];
              if (v36)
              {
                id v38 = v36;
                uint64_t v39 = *(void *)v90;
                do
                {
                  id v40 = 0;
                  do
                  {
                    if (*(void *)v90 != v39) {
                      objc_enumerationMutation(v88);
                    }
                    uint64_t v41 = *(void *)(*((void *)&v89 + 1) + 8 * (void)v40);
                    uint64_t v42 = [objc_getProperty(v26, v37, 120, 1) objectForKeyedSubscript:v35];
                    id v43 = [v42 objectForKeyedSubscript:v41];

                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0 && [v43 virtualInterface])
                    {
                      id v44 = [v43 copyTunnelInterfaceName];
                      if (v44 == v30)
                      {
                        id v45 = p_vtable;
                        id v46 = v30;
                        uint64_t v47 = [v43 primaryTunnelPlugin];
                        uint64_t v49 = sub_100017808(v47, v48);

                        if ([v49 count])
                        {
                          SEL v50 = [v49 firstObject];
                          [v50 getUUIDBytes:uuid];
                        }
                        id v30 = v46;
                        p_vtable = v45;
                        id v26 = v87;
                      }
                    }
                    id v40 = (char *)v40 + 1;
                  }
                  while (v38 != v40);
                  id v38 = [v88 countByEnumeratingWithState:&v89 objects:v113 count:16];
                }
                while (v38);
              }

              uint64_t v34 = v86 + 1;
            }
            while ((id)(v86 + 1) != v85);
            id v85 = [obj countByEnumeratingWithState:&v93 objects:buf count:16];
          }
          while (v85);
        }

        long long v29 = original;
        xpc_object_t reply = xpc_dictionary_create_reply(original);
        xpc_dictionary_set_uuid(reply, "MachOUUID", uuid);
        id v27 = connection;
        xpc_connection_send_message(connection, reply);
      }
      id v3 = v82;
      goto LABEL_21;
    case 4:
      id v52 = ne_log_obj();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Got a new client connection for DeviceCommunicationException %s(%d)", buf, 0x12u);
      }

      id v53 = *(void **)(a1 + 40);
      uint64_t v10 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      if (!v53) {
        goto LABEL_82;
      }
      id v54 = v3;
      xpc_object_t v55 = xpc_dictionary_create_reply(v54);
      BOOL v56 = xpc_dictionary_get_BOOL(v54, "DeviceCommunicationExceptionEnable");

      if (!v10) {
        goto LABEL_79;
      }
      id v57 = (void *)xpc_connection_copy_entitlement_value();
      uint64_t v58 = v57;
      BOOL v59 = v57 && xpc_get_type(v57) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v58);
      unsigned int v61 = ne_log_obj();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        id v78 = "not ";
        if (v59) {
          id v78 = "";
        }
        SEL v79 = "disable";
        *(void *)&uint8_t buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)long long buf = 136315650;
        *(void *)&buf[14] = v78;
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (v56) {
          SEL v79 = "enable";
        }
        *(_WORD *)&buf[22] = 2080;
        long long v115 = v79;
        _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "%s: process %sallowed to %s DeviceCommunication exception", buf, 0x20u);
      }

      if (!v59) {
        goto LABEL_79;
      }
      if (!objc_getProperty(v53, v62, 344, 1))
      {
        id v64 = [objc_alloc((Class)NEPolicySession) initWithSessionName:@"NESMServer Control"];
        objc_setProperty_atomic(v53, v65, v64, 344);

        if (objc_getProperty(v53, v66, 344, 1))
        {
          [objc_getProperty(v53, v67, 344, 1) setPriority:100];
          [objc_getProperty(v53, v68, 344, 1) lockSessionToCurrentProcess];
        }
        else
        {
          id v69 = ne_log_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Failed to create NESMServer control policy session", buf, 2u);
          }
        }
      }
      if (v56)
      {
        *(_DWORD *)long long buf = 1;
        if (!objc_getProperty(v53, v63, 344, 1)) {
          goto LABEL_79;
        }
        id Property = objc_getProperty(v53, v70, 344, 1);
        if (!sub_10005AA50(Property, (unsigned int *)buf)) {
          goto LABEL_79;
        }
LABEL_78:
        unsigned int v74 = [objc_getProperty(v53, v72, 344, 1) apply];
        goto LABEL_80;
      }
      if (objc_getProperty(v53, v63, 344, 1)
        && objc_msgSend(objc_getProperty(v53, v73, 344, 1), "removeAllPolicies"))
      {
        goto LABEL_78;
      }
LABEL_79:
      unsigned int v74 = 0;
LABEL_80:
      id v75 = ne_log_obj();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
      {
        id v76 = "disable";
        if (v56) {
          id v76 = "enable";
        }
        id v77 = "failed";
        *(void *)&uint8_t buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)long long buf = 136315650;
        *(void *)&buf[14] = v76;
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (v74) {
          id v77 = "succeeded";
        }
        *(_WORD *)&buf[22] = 2080;
        long long v115 = v77;
        _os_log_debug_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%s: DeviceCommunication exception %s %s", buf, 0x20u);
      }

      xpc_dictionary_set_BOOL(v55, "DeviceCommunicationExceptionResult", v74);
      xpc_connection_send_message(v10, v55);

LABEL_82:
LABEL_21:

      return;
    default:
      goto LABEL_17;
  }
}

void sub_100051EAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    [a2 addClientConnection:v3];
  }
  else
  {
    id v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(_DWORD *)(a1 + 48);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to add a pending session request or failed to load session for %@ (%d), canceling new connection", (uint8_t *)&v7, 0x12u);
    }

    xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  }
}

void sub_100051FBC(unsigned char *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a4;
  if (a1)
  {
    __int16 v9 = +[NSNumber numberWithInt:a3];
    id v11 = [objc_getProperty(a1, v10, 128, 1) objectForKeyedSubscript:v7];
    uint64_t v12 = [v11 objectForKeyedSubscript:v9];

    int64_t v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 67109378;
      *(_DWORD *)id v28 = a3;
      *(_WORD *)&v28[4] = 2112;
      *(void *)&v28[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adding a pending session for type %d and id %@", (uint8_t *)&v27, 0x12u);
    }

    if (!v12)
    {
      id v14 = objc_alloc_init((Class)NSMutableArray);
      if (!v14)
      {
        v8[2](v8, 0);
LABEL_16:

        goto LABEL_17;
      }
      uint64_t v12 = v14;
      id v16 = [objc_getProperty(a1, v15, 128, 1) objectForKeyedSubscript:v7];

      if (!v16)
      {
        id v18 = objc_alloc_init((Class)NSMutableDictionary);
        [objc_getProperty(a1, v19, 128, 1) setObject:v18 forKeyedSubscript:v7];
      }
      long long v20 = [objc_getProperty(a1, v17, 128, 1) objectForKeyedSubscript:v7];
      [v20 setObject:v12 forKeyedSubscript:v9];
    }
    unsigned int v21 = objc_retainBlock(v8);
    [v12 addObject:v21];

    if ([v12 count] == (id)1 && (a1[9] & 1) != 0 && (a1[10] & 1) != 0)
    {
      id v26 = ne_log_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = 67109378;
        *(_DWORD *)id v28 = a3;
        *(_WORD *)&v28[4] = 2112;
        *(void *)&v28[6] = v7;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Loading session for new client with type %d and ID %@", (uint8_t *)&v27, 0x12u);
      }

      sub_1000522DC(a1, a3, v7);
    }
    else
    {
      uint64_t v22 = ne_log_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = [v12 count];
        int v24 = a1[9] & 1;
        int v25 = a1[10] & 1;
        int v27 = 134218496;
        *(void *)id v28 = v23;
        *(_WORD *)&v28[8] = 1024;
        *(_DWORD *)&v28[10] = v24;
        __int16 v29 = 1024;
        int v30 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Queuing pending session request because there are already pending requests (%lu) or because the file handles have not yet been received (%d), or because the provider manager has not fully started (%d)", (uint8_t *)&v27, 0x18u);
      }
    }
    goto LABEL_16;
  }
LABEL_17:
}

void sub_1000522DC(void *a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = +[NEConfigurationManager sharedManagerForAllUsers];
  id Property = objc_getProperty(a1, v7, 88, 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000523C4;
  v10[3] = &unk_1000C6178;
  void v10[4] = a1;
  id v9 = v5;
  id v11 = v9;
  int v12 = a2;
  [v6 loadConfigurationAndUserWithID:v9 withCompletionQueue:Property handler:v10];
}

void sub_1000523C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v10 = a4;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v9, 128, 1);
  }
  int v12 = [Property objectForKeyedSubscript:*(void *)(a1 + 40)];
  int64_t v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  id v14 = [v12 objectForKeyedSubscript:v13];

  if (v14)
  {
    if (v7)
    {
      [v7 applyOverrides];
      uint64_t v15 = +[NESMSession sessionWithConfiguration:v7 andType:*(unsigned int *)(a1 + 48) andServer:*(void *)(a1 + 32)];
LABEL_11:
      kdebug_trace();
      id v23 = *(id *)(a1 + 32);
      if (v23) {
        id v23 = objc_getProperty(v23, v22, 128, 1);
      }
      int v24 = [v23 objectForKeyedSubscript:*(void *)(a1 + 40)];
      int v25 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
      [v24 removeObjectForKey:v25];

      if (v15)
      {
        id v27 = *(id *)(a1 + 32);
        if (v27) {
          id v27 = objc_getProperty(v27, v26, 120, 1);
        }
        id v28 = [v27 objectForKeyedSubscript:*(void *)(a1 + 40)];

        if (!v28)
        {
          id v31 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
          id v32 = *(id *)(a1 + 32);
          if (v32) {
            id v32 = objc_getProperty(v32, v30, 120, 1);
          }
          [v32 setObject:v31 forKeyedSubscript:*(void *)(a1 + 40)];
        }
        id v33 = *(id *)(a1 + 32);
        if (v33) {
          id v33 = objc_getProperty(v33, v29, 120, 1);
        }
        uint64_t v34 = [v33 objectForKeyedSubscript:*(void *)(a1 + 40)];
        uint64_t v35 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
        [v34 setObject:v15 forKeyedSubscript:v35];

        [v15 setConfigurationUserUUIDs:v8];
      }
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v36 = v14;
      id v37 = [v36 countByEnumeratingWithState:&v42 objects:v46 count:16];
      if (v37)
      {
        id v38 = v37;
        uint64_t v39 = *(void *)v43;
        do
        {
          for (id i = 0; i != v38; id i = (char *)i + 1)
          {
            if (*(void *)v43 != v39) {
              objc_enumerationMutation(v36);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v42 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v42 + 1) + 8 * i));
          }
          id v38 = [v36 countByEnumeratingWithState:&v42 objects:v46 count:16];
        }
        while (v38);
      }

      goto LABEL_31;
    }
    id v16 = ne_log_obj();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v48 = v18;
        __int16 v49 = 2048;
        id v50 = [v10 code];
        SEL v19 = "Failed to load configuration with ID %@: %ld";
        long long v20 = v16;
        uint32_t v21 = 22;
LABEL_33:
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
      }
    }
    else if (v17)
    {
      uint64_t v41 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v48 = v41;
      SEL v19 = "Failed to load configuration with ID %@";
      long long v20 = v16;
      uint32_t v21 = 12;
      goto LABEL_33;
    }

    uint64_t v15 = 0;
    goto LABEL_11;
  }
LABEL_31:
}

void sub_100052770(uint64_t a1, const char *a2)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120, 1);
  }
  id obj = Property;
  id v4 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v21 = *(void *)v27;
    do
    {
      for (id i = 0; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v27 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        id v9 = *(id *)(a1 + 32);
        if (v9) {
          id v9 = objc_getProperty(v9, v5, 120, 1);
        }
        id v10 = [v9 objectForKeyedSubscript:v8];
        id v11 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
        if (v11)
        {
          id v13 = v11;
          uint64_t v14 = *(void *)v23;
          do
          {
            for (j = 0; j != v13; j = (char *)j + 1)
            {
              if (*(void *)v23 != v14) {
                objc_enumerationMutation(v10);
              }
              uint64_t v16 = *(void *)(*((void *)&v22 + 1) + 8 * (void)j);
              id v17 = *(id *)(a1 + 32);
              if (v17) {
                id v17 = objc_getProperty(v17, v12, 120, 1);
              }
              uint64_t v18 = [v17 objectForKeyedSubscript:v8];
              SEL v19 = [v18 objectForKeyedSubscript:v16];

              [v19 stopIfNecessaryWithReason:1];
            }
            id v13 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
          }
          while (v13);
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
    }
    while (v6);
  }
}

void sub_100052970(id a1)
{
}

void sub_100052984(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v5, 120, 1);
  }
  id v7 = [WeakRetained objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v7)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        int v12 = 0;
        do
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [v8 objectForKeyedSubscript:*(void *)(*((void *)&v14 + 1) + 8 * (void)v12), (void)v14];
          [v3 applyOverrides];
          [v13 handleUpdateConfiguration:v3 withCompletionHandler:0];

          int v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v10);
    }
  }
}

id sub_100052AE8()
{
  self;
  if (qword_1000D7C20 != -1) {
    dispatch_once(&qword_1000D7C20, &stru_1000C60D8);
  }
  v0 = (void *)qword_1000D7C18;

  return v0;
}

void sub_100052B40(id a1)
{
  int v1 = [NESMServer alloc];
  if (!v1) {
    goto LABEL_6;
  }
  v46.receiver = v1;
  v46.super_class = (Class)NESMServer;
  id v2 = [super init];
  if (!v2) {
    goto LABEL_7;
  }
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("NESMServer queue", v3);
  id v5 = (void *)*((void *)v2 + 11);
  *((void *)v2 + 11) = v4;

  xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.nesessionmanager", 0, 1uLL);
  id v7 = (void *)*((void *)v2 + 12);
  *((void *)v2 + 12) = mach_service;

  xpc_connection_t v8 = xpc_connection_create_mach_service("com.apple.nesessionmanager.flow-divert-token", 0, 1uLL);
  id v9 = (void *)*((void *)v2 + 13);
  *((void *)v2 + 13) = v8;

  xpc_connection_t v10 = xpc_connection_create_mach_service("com.apple.nesessionmanager.content-filter", 0, 1uLL);
  uint64_t v11 = (void *)*((void *)v2 + 14);
  *((void *)v2 + 14) = v10;

  id v12 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
  id v13 = (void *)*((void *)v2 + 15);
  *((void *)v2 + 15) = v12;

  id v14 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
  long long v15 = (void *)*((void *)v2 + 16);
  *((void *)v2 + 16) = v14;

  uint64_t v16 = +[NSMutableArray array];
  long long v17 = (void *)*((void *)v2 + 34);
  *((void *)v2 + 34) = v16;

  *((_DWORD *)v2 + 5) = -1;
  *(void *)(v2 + 28) = -1;
  *(void *)(v2 + 36) = -1;
  id v18 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
  SEL v19 = (void *)*((void *)v2 + 40);
  *((void *)v2 + 40) = v18;

  objc_initWeak(&location, v2);
  long long v20 = +[NEConfigurationManager sharedManagerForAllUsers];
  uint64_t v21 = *((void *)v2 + 11);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100050744;
  v43[3] = &unk_1000C6070;
  objc_copyWeak(&v44, &location);
  [v20 setChangedQueue:v21 andHandler:v43];

  dispatch_source_t v22 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, *((dispatch_queue_t *)v2 + 11));
  long long v23 = (void *)*((void *)v2 + 18);
  *((void *)v2 + 18) = v22;

  long long v24 = *((void *)v2 + 18);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100050994;
  handler[3] = &unk_1000C6C60;
  long long v25 = v2;
  long long v42 = v25;
  dispatch_source_set_event_handler(v24, handler);
  dispatch_resume(*((dispatch_object_t *)v2 + 18));
  long long v26 = (void *)*((void *)v2 + 12);
  if (!v26
    || xpc_get_type(v26) != (xpc_type_t)&_xpc_type_connection
    || (long long v28 = (void *)*((void *)v2 + 14)) == 0
    || xpc_get_type(v28) != (xpc_type_t)&_xpc_type_connection
    || (long long v29 = (void *)*((void *)v2 + 13)) == 0
    || xpc_get_type(v29) != (xpc_type_t)&_xpc_type_connection)
  {

    objc_destroyWeak(&v44);
    objc_destroyWeak(&location);

LABEL_6:
    id v2 = 0;
    goto LABEL_7;
  }
  xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 12), *((dispatch_queue_t *)v2 + 11));
  int v30 = (_xpc_connection_s *)*((void *)v2 + 12);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100050BA0;
  v39[3] = &unk_1000C60B8;
  id v31 = v25;
  id v40 = v31;
  xpc_connection_set_event_handler(v30, v39);
  xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 13), *((dispatch_queue_t *)v2 + 11));
  id v32 = (_xpc_connection_s *)*((void *)v2 + 13);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100050C14;
  v37[3] = &unk_1000C60B8;
  id v33 = v31;
  id v38 = v33;
  xpc_connection_set_event_handler(v32, v37);
  xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 14), *((dispatch_queue_t *)v2 + 11));
  uint64_t v34 = (_xpc_connection_s *)*((void *)v2 + 14);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100050C90;
  v35[3] = &unk_1000C60B8;
  id v2 = v33;
  id v36 = v2;
  xpc_connection_set_event_handler(v34, v35);

  objc_destroyWeak(&v44);
  objc_destroyWeak(&location);
LABEL_7:
  long long v27 = (void *)qword_1000D7C18;
  qword_1000D7C18 = (uint64_t)v2;
}

void sub_100052FA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100052FD0(uint64_t a1, const char *a2)
{
  id Property = *(NSObject **)(a1 + 32);
  if (Property)
  {
    id Property = objc_getProperty(Property, a2, 88, 1);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100054C34;
  block[3] = &unk_1000C6C60;
  void block[4] = v4;
  dispatch_async(Property, block);
}

void sub_100053068(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != -1) {
    goto LABEL_15;
  }
  out_tokeid n = -1;
  if (notify_register_check("com.apple.nesessionmanager.info", &out_token))
  {
    id v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v7 = "com.apple.nesessionmanager.info";
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to register for the %s notification", buf, 0xCu);
    }

    int v2 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    int v2 = out_token;
    *(_DWORD *)(a1 + 40) = out_token;
  }
  if (v2 != -1)
  {
LABEL_15:
    if (notify_set_state(v2, *(void *)(a1 + 288)))
    {
      uint64_t v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        id v7 = "com.apple.nesessionmanager.info";
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to set the state for the %s notification", buf, 0xCu);
      }
    }
    else
    {
      notify_post("com.apple.nesessionmanager.info");
    }
  }
}

void sub_1000531D4(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  if (!strcmp(string, "com.apple.networkextension.apps-changed"))
  {
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Handling Installed Apps Changed notification", buf, 2u);
    }

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 120, 1);
    }
    id obj = Property;
    id v7 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
    if (v7)
    {
      id v9 = v7;
      uint64_t v24 = *(void *)v30;
      do
      {
        for (id i = 0; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v30 != v24) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v29 + 1) + 8 * i);
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          id v12 = *(id *)(a1 + 32);
          if (v12) {
            id v12 = objc_getProperty(v12, v8, 120, 1);
          }
          id v13 = [v12 objectForKeyedSubscript:v11];
          id v14 = [v13 countByEnumeratingWithState:&v25 objects:v34 count:16];
          if (v14)
          {
            id v16 = v14;
            uint64_t v17 = *(void *)v26;
            do
            {
              for (j = 0; j != v16; j = (char *)j + 1)
              {
                if (*(void *)v26 != v17) {
                  objc_enumerationMutation(v13);
                }
                uint64_t v19 = *(void *)(*((void *)&v25 + 1) + 8 * (void)j);
                id v20 = *(id *)(a1 + 32);
                if (v20) {
                  id v20 = objc_getProperty(v20, v15, 120, 1);
                }
                uint64_t v21 = [v20 objectForKeyedSubscript:v11];
                dispatch_source_t v22 = [v21 objectForKeyedSubscript:v19];

                [v22 handleInstalledAppsChanged];
              }
              id v16 = [v13 countByEnumeratingWithState:&v25 objects:v34 count:16];
            }
            while (v16);
          }
        }
        id v9 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
      }
      while (v9);
    }
  }
}

void sub_10005343C(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v4 = (void *)CNPluginMonitorEventCopyDisplayIDs();
    id Property = *(id *)(a1 + 32);
    if (v4)
    {
      if (Property) {
        id Property = objc_getProperty(Property, v3, 80, 1);
      }
      if ([Property isEqualToArray:v4]) {
        goto LABEL_34;
      }
    }
    else
    {
      if (!Property || (id v6 = objc_getProperty(Property, v3, 80, 1)) == 0)
      {
LABEL_34:

        return;
      }
    }
    id v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v41 = "-[NESMServer registerForCaptiveNetworkPluginChanges]_block_invoke";
      __int16 v42 = 2112;
      long long v43 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s: CNPluginMonitor - got new apps %@", buf, 0x16u);
    }

    id v9 = *(id *)(a1 + 32);
    long long v27 = v4;
    if (v9)
    {
      objc_setProperty_atomic(v9, v8, v4, 80);
      id v9 = *(id *)(a1 + 32);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      if (v9) {
        id v9 = objc_getProperty(v9, v10, 120, 1);
      }
    }
    else
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
    }
    id obj = v9;
    id v11 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v29 = *(void *)v35;
      do
      {
        for (id i = 0; i != v13; id i = (char *)i + 1)
        {
          if (*(void *)v35 != v29) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v34 + 1) + 8 * i);
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          id v16 = *(id *)(a1 + 32);
          if (v16) {
            id v16 = objc_getProperty(v16, v12, 120, 1);
          }
          uint64_t v17 = [v16 objectForKeyedSubscript:v15];
          id v18 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v18)
          {
            id v20 = v18;
            uint64_t v21 = *(void *)v31;
            do
            {
              for (j = 0; j != v20; j = (char *)j + 1)
              {
                if (*(void *)v31 != v21) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v23 = *(void *)(*((void *)&v30 + 1) + 8 * (void)j);
                id v24 = *(id *)(a1 + 32);
                if (v24) {
                  id v24 = objc_getProperty(v24, v19, 120, 1);
                }
                long long v25 = [v24 objectForKeyedSubscript:v15];
                long long v26 = [v25 objectForKeyedSubscript:v23];
                [v26 handleCaptiveNetworkPluginsChanged];
              }
              id v20 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
            }
            while (v20);
          }
        }
        id v13 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
      }
      while (v13);
    }

    uint64_t v4 = v27;
    goto LABEL_34;
  }
}

void sub_100053728(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = v3;
  if (v2)
  {
    string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
    id v6 = string;
    if (string && !strcmp(string, "SessionManager"))
    {
      int int64 = xpc_dictionary_get_int64(v4, "network-origin-notification");
      id v9 = ne_log_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = inputNotification2String();
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received a %s event", (uint8_t *)&buf, 0xCu);
      }

      if (int64 == 1)
      {
        if ((ne_session_vod_evaluate_connection_present() & 1) == 0)
        {
          id v11 = +[NENetworkPropertiesCache sharedCache];
          [v11 clear];
        }
      }
      else if (int64 == 6)
      {
        xpc_connection_t v10 = +[NENetworkPropertiesCache sharedCache];
        [v10 rotateEncryptionKey];

        goto LABEL_6;
      }
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x3032000000;
      v16[3] = sub_100051300;
      v16[4] = sub_100051310;
      id v17 = (id)os_transaction_create();
      id v12 = +[NEConfigurationManager sharedManagerForAllUsers];
      id v14 = objc_getProperty(v2, v13, 88, 1);
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      uint64_t v19 = sub_100053A14;
      id v20 = &unk_1000C6308;
      uint64_t v21 = v2;
      dispatch_source_t v22 = v16;
      int v23 = int64;
      [v12 loadConfigurations:0 withFilter:0 completionQueue:v14 completionHandler:&buf];

      _Block_object_dispose(v16, 8);
      goto LABEL_6;
    }
    id v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = "";
      if (v6) {
        uint64_t v15 = v6;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Got an unexpected network detection event with name \"%s\"", (uint8_t *)&buf, 0xCu);
    }
  }
LABEL_6:
}

void sub_1000539F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100053A14(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v76 = v9;
  if (!v9)
  {
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    id v79 = [v8 countByEnumeratingWithState:&v88 objects:v93 count:16];
    if (!v79) {
      goto LABEL_48;
    }
    uint64_t v77 = *(void *)v89;
    id v78 = v8;
    CFStringRef v12 = @"UserMap";
LABEL_7:
    uint64_t v13 = 0;
    while (1)
    {
      if (*(void *)v89 != v77) {
        objc_enumerationMutation(v8);
      }
      uint64_t v80 = v13;
      id v14 = *(void **)(*((void *)&v88 + 1) + 8 * v13);
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      uint64_t v15 = [v10 objectForKeyedSubscript:v12];
      id v82 = [v15 countByEnumeratingWithState:&v84 objects:v92 count:16];
      if (v82) {
        break;
      }
LABEL_46:

      uint64_t v13 = v80 + 1;
      id v8 = v78;
      if ((id)(v80 + 1) == v79)
      {
        id v79 = [v78 countByEnumeratingWithState:&v88 objects:v93 count:16];
        if (!v79) {
          goto LABEL_48;
        }
        goto LABEL_7;
      }
    }
    uint64_t v16 = *(void *)v85;
LABEL_12:
    uint64_t v17 = 0;
    while (1)
    {
      if (*(void *)v85 != v16) {
        objc_enumerationMutation(v15);
      }
      uint64_t v18 = *(void *)(*((void *)&v84 + 1) + 8 * v17);
      uint64_t v19 = [v10 objectForKeyedSubscript:v12];
      id v20 = [v19 objectForKeyedSubscript:v18];

      uint64_t v21 = [v14 identifier];
      id v83 = v20;
      LODWORD(v19) = [v20 containsObject:v21];

      if (!v19) {
        goto LABEL_44;
      }
      dispatch_source_t v22 = [v14 alwaysOnVPN];

      if (v22)
      {
        int v23 = *(unsigned char **)(a1 + 32);
        id v24 = [v14 identifier];
        sub_100054048(v23, v24, 3, *(_DWORD *)(a1 + 48));
      }
      long long v25 = [v14 contentFilter];

      if (v25)
      {
        long long v26 = *(unsigned char **)(a1 + 32);
        long long v27 = [v14 identifier];
        sub_100054048(v26, v27, 4, *(_DWORD *)(a1 + 48));
      }
      uint64_t v28 = [v14 VPN];
      if (v28)
      {
        uint64_t v29 = (void *)v28;
        long long v30 = [v14 VPN];
        if ([v30 isEnabled])
        {
          [v14 VPN];
          uint64_t v31 = v16;
          uint64_t v32 = a1;
          long long v33 = v15;
          CFStringRef v34 = v12;
          v36 = id v35 = v10;
          unsigned int v81 = [v36 isOnDemandEnabled];

          id v10 = v35;
          CFStringRef v12 = v34;
          uint64_t v15 = v33;
          a1 = v32;
          uint64_t v16 = v31;

          if (!v81) {
            goto LABEL_26;
          }
          long long v37 = *(unsigned char **)(a1 + 32);
          uint64_t v29 = [v14 identifier];
          sub_100054048(v37, v29, 1, *(_DWORD *)(a1 + 48));
        }
        else
        {
        }
      }
LABEL_26:
      uint64_t v38 = [v14 appVPN];
      if (v38)
      {
        uint64_t v39 = (void *)v38;
        id v40 = [v14 appVPN];
        unsigned int v41 = [v40 isEnabled];

        if (v41)
        {
          __int16 v42 = *(unsigned char **)(a1 + 32);
          long long v43 = [v14 identifier];
          sub_100054048(v42, v43, 2, *(_DWORD *)(a1 + 48));
        }
      }
      uint64_t v44 = [v14 pathController];
      if (v44)
      {
        long long v45 = (void *)v44;
        objc_super v46 = [v14 pathController];
        unsigned int v47 = [v46 isEnabled];

        if (v47)
        {
          uint64_t v48 = *(unsigned char **)(a1 + 32);
          __int16 v49 = [v14 identifier];
          sub_100054048(v48, v49, 5, *(_DWORD *)(a1 + 48));
        }
      }
      uint64_t v50 = [v14 dnsProxy];
      if (v50)
      {
        unsigned int v51 = (void *)v50;
        id v52 = [v14 dnsProxy];
        unsigned int v53 = [v52 isEnabled];

        if (v53)
        {
          id v54 = *(unsigned char **)(a1 + 32);
          xpc_object_t v55 = [v14 identifier];
          sub_100054048(v54, v55, 6, *(_DWORD *)(a1 + 48));
        }
      }
      uint64_t v56 = [v14 dnsSettings];
      if (v56)
      {
        id v57 = (void *)v56;
        uint64_t v58 = [v14 dnsSettings];
        unsigned int v59 = [v58 isEnabled];

        if (v59)
        {
          SEL v60 = *(unsigned char **)(a1 + 32);
          unsigned int v61 = [v14 identifier];
          sub_100054048(v60, v61, 7, *(_DWORD *)(a1 + 48));
        }
      }
      uint64_t v62 = [v14 appPush];
      if (v62)
      {
        id v63 = (void *)v62;
        id v64 = [v14 appPush];
        unsigned int v65 = [v64 isEnabled];

        if (v65)
        {
          SEL v66 = *(unsigned char **)(a1 + 32);
          uint64_t v67 = [v14 identifier];
          sub_100054048(v66, v67, 8, *(_DWORD *)(a1 + 48));
        }
      }
      uint64_t v68 = [v14 relay];
      if (v68)
      {
        id v69 = (void *)v68;
        id v70 = [v14 relay];
        unsigned int v71 = [v70 isEnabled];

        if (v71)
        {
          uint64_t v72 = *(unsigned char **)(a1 + 32);
          id v73 = [v14 identifier];
          sub_100054048(v72, v73, 9, *(_DWORD *)(a1 + 48));
        }
      }
LABEL_44:

      if (v82 == (id)++v17)
      {
        id v82 = [v15 countByEnumeratingWithState:&v84 objects:v92 count:16];
        if (!v82) {
          goto LABEL_46;
        }
        goto LABEL_12;
      }
    }
  }
  id v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v95 = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to load the current configurations: %@", buf, 0xCu);
  }

LABEL_48:
  uint64_t v74 = *(void *)(*(void *)(a1 + 40) + 8);
  id v75 = *(void **)(v74 + 40);
  *(void *)(v74 + 40) = 0;
}

void sub_100054048(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  id v7 = a2;
  if (a1)
  {
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x3032000000;
    v16[3] = sub_100051300;
    v16[4] = sub_100051310;
    id v17 = (id)os_transaction_create();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100054208;
    v14[3] = &unk_1000C62E0;
    int v15 = a4;
    v14[4] = v16;
    id v8 = objc_retainBlock(v14);
    id v10 = objc_getProperty(a1, v9, 120, 1);
    id v11 = [v10 objectForKeyedSubscript:v7];
    CFStringRef v12 = +[NSNumber numberWithInt:a3];
    uint64_t v13 = [v11 objectForKeyedSubscript:v12];

    if (v13) {
      ((void (*)(void *, void *))v8[2])(v8, v13);
    }
    else {
      sub_100051FBC(a1, v7, a3, v8);
    }

    _Block_object_dispose(v16, 8);
  }
}

void sub_1000541F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100054208(uint64_t a1, void *a2)
{
  [a2 handleNetworkDetectionNotification:*(unsigned int *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100054254(uint64_t a1, int a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  if (v3)
  {
    if (v3[7] == a2) {
      goto LABEL_3;
    }
    if (v3[8] == a2)
    {
      uint64_t v4 = ne_log_obj();
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = 2;
        goto LABEL_15;
      }
      *(_WORD *)long long buf = 0;
      id v6 = "DNS changed";
      uint64_t v5 = 2;
      goto LABEL_8;
    }
    int v7 = v3[9];
LABEL_10:
    if (v7 != a2) {
      return;
    }
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Proxies changed", buf, 2u);
    }
    uint64_t v5 = 4;
    goto LABEL_15;
  }
  if (a2)
  {
    int v7 = 0;
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v4 = ne_log_obj();
  uint64_t v5 = 1;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    id v6 = "NWI changed";
    uint64_t v5 = 1;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v6, buf, 2u);
  }
LABEL_15:

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v8, 120, 1);
  }
  id obj = Property;
  id v26 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v26)
  {
    uint64_t v25 = *(void *)v32;
    do
    {
      for (id i = 0; i != v26; id i = (char *)i + 1)
      {
        if (*(void *)v32 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v13 = *(id *)(a1 + 32);
        if (v13) {
          id v13 = objc_getProperty(v13, v10, 120, 1);
        }
        id v14 = [v13 objectForKeyedSubscript:v12];
        id v15 = [v14 countByEnumeratingWithState:&v27 objects:v36 count:16];
        if (v15)
        {
          id v17 = v15;
          uint64_t v18 = *(void *)v28;
          do
          {
            for (j = 0; j != v17; j = (char *)j + 1)
            {
              if (*(void *)v28 != v18) {
                objc_enumerationMutation(v14);
              }
              uint64_t v20 = *(void *)(*((void *)&v27 + 1) + 8 * (void)j);
              id v21 = *(id *)(a1 + 32);
              if (v21) {
                id v21 = objc_getProperty(v21, v16, 120, 1);
              }
              dispatch_source_t v22 = [v21 objectForKeyedSubscript:v12];
              int v23 = [v22 objectForKeyedSubscript:v20];

              [v23 handleNetworkConfigurationChange:v5];
            }
            id v17 = [v14 countByEnumeratingWithState:&v27 objects:v36 count:16];
          }
          while (v17);
        }
      }
      id v26 = [obj countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v26);
  }
}

void sub_100054560(uint64_t a1, int a2)
{
  dispatch_time_t v5 = dispatch_time(0, 250000000);
  id v6 = *(void **)(a1 + 32);
  if (v6) {
    id Property = objc_getProperty(v6, v4, 88, 1);
  }
  else {
    id Property = 0;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100054634;
  v8[3] = &unk_1000C6268;
  id v9 = *(id *)(a1 + 40);
  int v10 = a2;
  dispatch_after(v5, Property, v8);
}

uint64_t sub_100054634(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10005464C(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  uint64_t v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    dispatch_source_t v22 = "Locked";
    if (!state64) {
      dispatch_source_t v22 = "Unlocked";
    }
    *(_DWORD *)long long buf = 134218242;
    uint64_t v37 = state64;
    __int16 v38 = 2080;
    uint64_t v39 = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Got a SpringBoard lock state event with state = %llu (%s)", buf, 0x16u);
  }

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v4, 120, 1);
  }
  id obj = Property;
  id v6 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v24 = *(void *)v30;
    do
    {
      for (id i = 0; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        id v11 = *(id *)(a1 + 32);
        if (v11) {
          id v11 = objc_getProperty(v11, v7, 120, 1);
        }
        uint64_t v12 = [v11 objectForKeyedSubscript:v10];
        id v13 = [v12 countByEnumeratingWithState:&v25 objects:v34 count:16];
        if (v13)
        {
          id v15 = v13;
          uint64_t v16 = *(void *)v26;
          do
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(void *)v26 != v16) {
                objc_enumerationMutation(v12);
              }
              uint64_t v18 = *(void *)(*((void *)&v25 + 1) + 8 * (void)j);
              id v19 = *(id *)(a1 + 32);
              if (state64)
              {
                if (v19) {
                  id v19 = objc_getProperty(v19, v14, 120, 1);
                }
                uint64_t v20 = [v19 objectForKeyedSubscript:v10];
                id v21 = [v20 objectForKeyedSubscript:v18];
                [v21 handleDeviceLock];
              }
              else
              {
                if (v19) {
                  id v19 = objc_getProperty(v19, v14, 120, 1);
                }
                uint64_t v20 = [v19 objectForKeyedSubscript:v10];
                id v21 = [v20 objectForKeyedSubscript:v18];
                [v21 handleDeviceUnlock];
              }
            }
            id v15 = [v12 countByEnumeratingWithState:&v25 objects:v34 count:16];
          }
          while (v15);
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
    }
    while (v8);
  }
}

void sub_100054918(void *a1)
{
  id v1 = a1;
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"VPN"];
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AppVPN"];
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AOVPN"];
}

void sub_100054998(uint64_t a1)
{
  sub_10004EC60(*(void **)(a1 + 32), 0);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = objc_getProperty(v3, v2, 120, 1);
    id v22 = [obj countByEnumeratingWithState:&v28 objects:v35 count:16];
    if (v22)
    {
      uint64_t v21 = *(void *)v29;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v29 != v21) {
            objc_enumerationMutation(obj);
          }
          uint64_t v23 = v5;
          uint64_t v6 = *(void *)(*((void *)&v28 + 1) + 8 * v5);
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          int v7 = [objc_getProperty(v3, v4, 120, 1) objectForKeyedSubscript:v6];
          id v8 = [v7 countByEnumeratingWithState:&v24 objects:v34 count:16];
          if (v8)
          {
            id v9 = v8;
            uint64_t v10 = *(void *)v25;
            do
            {
              for (id i = 0; i != v9; id i = (char *)i + 1)
              {
                if (*(void *)v25 != v10) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v12 = *(void *)(*((void *)&v24 + 1) + 8 * i);
                id v13 = ne_log_obj();
                if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
                {
                  id v15 = [objc_getProperty(v3, v14, 120, 1) objectForKeyedSubscript:v6];
                  uint64_t v16 = [v15 objectForKeyedSubscript:v12];
                  *(_DWORD *)long long buf = 138412290;
                  long long v33 = v16;
                  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Passing ranked interface change event to %@", buf, 0xCu);
                }
                uint64_t v18 = [objc_getProperty(v3, v17, 120, 1) objectForKeyedSubscript:v6];
                id v19 = [v18 objectForKeyedSubscript:v12];
                [v19 handleChangeEventForRankedInterfaces];
              }
              id v9 = [v7 countByEnumeratingWithState:&v24 objects:v34 count:16];
            }
            while (v9);
          }

          uint64_t v5 = v23 + 1;
        }
        while ((id)(v23 + 1) != v22);
        id v22 = [obj countByEnumeratingWithState:&v28 objects:v35 count:16];
      }
      while (v22);
    }
  }
}

void sub_100054C34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned char *)(v2 + 10) & 1) != 0)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring provider manager started because it did not start in time", buf, 2u);
    }
  }
  else
  {
    uint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Provider manager started", v8, 2u);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      *(unsigned char *)(v5 + 10) = 1;
      uint64_t v6 = *(void **)(a1 + 32);
    }
    else
    {
      uint64_t v6 = 0;
    }
    sub_100054D18(v6, v4);
  }
}

void sub_100054D18(id self, const char *a2)
{
  if (self && (*((unsigned char *)self + 9) & 1) != 0 && (*((unsigned char *)self + 10) & 1) != 0)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = objc_getProperty(self, a2, 128, 1);
    id v16 = [obj countByEnumeratingWithState:&v22 objects:v31 count:16];
    if (v16)
    {
      uint64_t v15 = *(void *)v23;
      do
      {
        uint64_t v4 = 0;
        do
        {
          if (*(void *)v23 != v15) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = v4;
          uint64_t v5 = *(void **)(*((void *)&v22 + 1) + 8 * v4);
          long long v18 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          uint64_t v6 = [objc_getProperty(self, v3, 128, 1) objectForKeyedSubscript:v5];
          id v7 = [v6 countByEnumeratingWithState:&v18 objects:v30 count:16];
          if (v7)
          {
            id v8 = v7;
            uint64_t v9 = *(void *)v19;
            do
            {
              for (id i = 0; i != v8; id i = (char *)i + 1)
              {
                if (*(void *)v19 != v9) {
                  objc_enumerationMutation(v6);
                }
                id v11 = *(void **)(*((void *)&v18 + 1) + 8 * i);
                uint64_t v12 = ne_log_obj();
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v13 = [v11 intValue];
                  *(_DWORD *)long long buf = 67109378;
                  unsigned int v27 = v13;
                  __int16 v28 = 2112;
                  long long v29 = v5;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Loading pending session with type %d and ID %@", buf, 0x12u);
                }

                sub_1000522DC(self, (int)[v11 intValue], v5);
              }
              id v8 = [v6 countByEnumeratingWithState:&v18 objects:v30 count:16];
            }
            while (v8);
          }

          uint64_t v4 = v17 + 1;
        }
        while ((id)(v17 + 1) != v16);
        id v16 = [obj countByEnumeratingWithState:&v22 objects:v31 count:16];
      }
      while (v16);
    }
  }
}

void sub_100054F74(uint64_t a1, const char *a2)
{
  id Property = *(NSObject **)(a1 + 32);
  if (Property)
  {
    id Property = objc_getProperty(Property, a2, 88, 1);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000550EC;
  block[3] = &unk_1000C6C60;
  void block[4] = v4;
  dispatch_async(Property, block);
}

void sub_10005500C(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v8 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "File handles were not received and/or provider manager was not started in time, loading pending sessions", v8, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v3 + 312);
    if (!v4 || (dispatch_source_cancel(v4), sub_1000550D8(*(void *)(a1 + 32)), (uint64_t v3 = *(void *)(a1 + 32)) != 0))
    {
      *(unsigned char *)(v3 + 9) = 1;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5) {
        *(unsigned char *)(v5 + 10) = 1;
      }
    }
  }
  uint64_t v6 = +[NEFileHandleMaintainer sharedMaintainer];
  [v6 commit];

  sub_100054D18(*(id *)(a1 + 32), v7);
}

void sub_1000550D8(uint64_t a1)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 312), 0);
  }
}

void sub_1000550EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2
    || (uint64_t v3 = *(NSObject **)(v2 + 312)) != 0
    && (dispatch_source_cancel(v3), sub_1000550D8(*(void *)(a1 + 32)), (uint64_t v2 = *(void *)(a1 + 32)) == 0))
  {
LABEL_6:
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received file handles", buf, 2u);
    }

    uint64_t v5 = +[NEFileHandleMaintainer sharedMaintainer];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100055248;
    v8[3] = &unk_1000C66C8;
    void v8[4] = *(void *)(a1 + 32);
    [v5 iterateFileHandlesWithBlock:v8];

    sub_100054D18(*(id *)(a1 + 32), v6);
    return;
  }
  if ((*(unsigned char *)(v2 + 9) & 1) == 0)
  {
    *(unsigned char *)(v2 + 9) = 1;
    goto LABEL_6;
  }
  id v7 = ne_log_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring received file handles because they were not received in time", buf, 2u);
  }
}

uint64_t sub_100055248(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [v4 sessionType];
      id v7 = [v4 configurationIdentifier];
      *(_DWORD *)long long buf = 138412546;
      long long v18 = v6;
      __int16 v19 = 2112;
      long long v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating a pending session request from file handle for type %@ and id %@", buf, 0x16u);
    }
    id v8 = [v4 description];
    uint64_t v9 = *(unsigned char **)(a1 + 32);
    uint64_t v10 = [v4 configurationIdentifier];
    id v11 = [v4 sessionType];
    id v12 = [v11 intValue];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100055424;
    v15[3] = &unk_1000C6150;
    id v16 = v8;
    id v13 = v8;
    sub_100051FBC(v9, v10, (uint64_t)v12, v15);
  }
  return 1;
}

void sub_100055424(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to load session for file handle %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1000554D4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120, 1);
  }
  uint64_t v4 = [Property objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (v4)
  {
    int v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
    uint64_t v6 = [v4 objectForKeyedSubscript:v5];

    id v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      v14[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing session %@", (uint8_t *)&v13, 0xCu);
    }

    [v6 removeAllClients];
    [v6 dropServer];
    id v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
    [v4 removeObjectForKey:v8];

    if (![v4 count])
    {
      id v10 = *(id *)(a1 + 32);
      if (v10) {
        id v10 = objc_getProperty(v10, v9, 120, 1);
      }
      [v10 removeObjectForKey:*(void *)(a1 + 40)];
    }
  }
  else
  {
    uint64_t v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(_DWORD *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 67109378;
      LODWORD(v14[0]) = v11;
      WORD2(v14[0]) = 2112;
      *(void *)((char *)v14 + 6) = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cannot remove session with type %d: no sessions for id %@", (uint8_t *)&v13, 0x12u);
    }
  }
}

void sub_1000556A8(uint64_t a1)
{
}

void sub_1000556BC(void *a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 88, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055748;
    block[3] = &unk_1000C6C60;
    void block[4] = a1;
    dispatch_async(Property, block);
  }
}

void sub_100055748(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 16);
    }
    v10[0] = 67109120;
    v10[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ackSleep with ack count = %d", (uint8_t *)v10, 8u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 + 16);
    BOOL v7 = __OFSUB__(v6, 1);
    int v8 = v6 - 1;
    if (v8 < 0 == v7)
    {
      *(_DWORD *)(v5 + 16) = v8;
      id Property = *(_DWORD **)(a1 + 32);
      if (Property)
      {
        if (Property[4]) {
          return;
        }
        id Property = objc_getProperty(Property, v4, 136, 1);
      }
      sub_10008D6E4((time_t *)Property);
    }
  }
}

void sub_100055830(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    objc_sync_enter(v3);
    if (a2)
    {
      unint64_t v4 = v3[37];
      if (v4 < -a2 && a2 < 0) {
        uint64_t v6 = -(uint64_t)v4;
      }
      else {
        uint64_t v6 = a2;
      }
      unint64_t v7 = v4 + v6;
      v3[37] = v7;
      if (v7) {
        BOOL v8 = v4 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        v3[36] |= 1uLL;
        id v14 = ne_log_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Active session count is greater than 0, setting hasActiveSessions flag", buf, 2u);
        }

        sub_100053068((uint64_t)v3);
      }
      else
      {
        if (v7) {
          BOOL v9 = 1;
        }
        else {
          BOOL v9 = v4 == 0;
        }
        if (!v9)
        {
          v3[36] &= ~1uLL;
          id v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            v15[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Active session count is equal to 0, clearing hasActiveSessions flag", (uint8_t *)v15, 2u);
          }

          sub_100053068((uint64_t)v3);
          if (objc_getProperty(v3, v11, 304, 1))
          {
            int v13 = (void (**)(void))objc_getProperty(v3, v12, 304, 1);
            v13[2]();
          }
        }
      }
    }
    objc_sync_exit(v3);
  }
}

void sub_10005599C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000559B8(void *a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = (int)a2;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v6 = objc_getProperty(a1, a2, 120, 1);
  id v43 = [v6 countByEnumeratingWithState:&v55 objects:v66 count:16];
  if (v43)
  {
    id obj = v6;
    uint64_t v49 = a3;
    CFStringRef v50 = 0;
    uint64_t v8 = 0;
    uint64_t v42 = *(void *)v56;
    char v47 = 1;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v56 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v44 = v9;
        uint64_t v10 = *(void *)(*((void *)&v55 + 1) + 8 * v9);
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        SEL v11 = [objc_getProperty(a1, v7, 120, 1) objectForKeyedSubscript:v10];
        id v12 = [v11 countByEnumeratingWithState:&v51 objects:v65 count:16];
        if (v12)
        {
          id v14 = v12;
          uint64_t v15 = *(void *)v52;
          do
          {
            id v16 = 0;
            do
            {
              if (*(void *)v52 != v15) {
                objc_enumerationMutation(v11);
              }
              uint64_t v17 = *(void *)(*((void *)&v51 + 1) + 8 * (void)v16);
              long long v18 = [objc_getProperty(a1, v13, 120, 1) objectForKeyedSubscript:v10];
              __int16 v19 = [v18 objectForKeyedSubscript:v17];

              if (v19)
              {
                if ([v19 supportsDefaultDrop]
                  && ([v19 disableDefaultDropAfterBoot] & 1) == 0)
                {
                  long long v20 = ne_log_obj();
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                  {
                    objc_super v46 = [v19 configuration];
                    uint64_t v48 = [v46 name];
                    unsigned int v45 = [v19 supportsDefaultDrop];
                    unsigned int v33 = [v19 disableDefaultDropAfterBoot];
                    *(_DWORD *)long long buf = 67109890;
                    *(_DWORD *)SEL v60 = 0;
                    *(_WORD *)&v60[4] = 2112;
                    *(void *)&v60[6] = v48;
                    __int16 v61 = 1024;
                    unsigned int v62 = v45;
                    __int16 v63 = 1024;
                    unsigned int v64 = v33;
                    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "applyIPDefaultDrop: disableDefaultDropAfterBoot %d - session %@ <supportsDefaultDrop %d> <disableDefaultDropAfterBoot %d>", buf, 0x1Eu);
                  }
                  char v47 = 0;
                }
                if (objc_msgSend(v19, "isDropPersistent", obj) == v4
                  && (!v49 || (uint64_t)[v19 defaultDropType] <= v49))
                {
                  switch((unint64_t)[v19 defaultDropType])
                  {
                    case 2uLL:
                      if (v8) {
                        BOOL v21 = v8 <= 2;
                      }
                      else {
                        BOOL v21 = 0;
                      }
                      int v22 = !v21;
                      BOOL v23 = v22 == 0;
                      CFStringRef v24 = v50;
                      if (!v23) {
                        CFStringRef v24 = @"High";
                      }
                      CFStringRef v50 = v24;
                      uint64_t v25 = 2;
                      goto LABEL_54;
                    case 3uLL:
                      if (v8) {
                        BOOL v30 = v8 <= 3;
                      }
                      else {
                        BOOL v30 = 0;
                      }
                      int v31 = !v30;
                      BOOL v23 = v31 == 0;
                      CFStringRef v32 = v50;
                      if (!v23) {
                        CFStringRef v32 = @"Default";
                      }
                      CFStringRef v50 = v32;
                      uint64_t v25 = 3;
                      goto LABEL_54;
                    case 4uLL:
                      if (v8) {
                        BOOL v26 = v8 <= 4;
                      }
                      else {
                        BOOL v26 = 0;
                      }
                      int v27 = !v26;
                      BOOL v23 = v27 == 0;
                      CFStringRef v28 = v50;
                      if (!v23) {
                        CFStringRef v28 = @"Low";
                      }
                      CFStringRef v50 = v28;
                      uint64_t v25 = 4;
LABEL_54:
                      if (!v23) {
                        uint64_t v8 = v25;
                      }
                      break;
                    case 5uLL:
                      CFStringRef v29 = v50;
                      if (!v8) {
                        CFStringRef v29 = @"Last";
                      }
                      CFStringRef v50 = v29;
                      if (!v8) {
                        uint64_t v8 = 5;
                      }
                      break;
                    default:
                      break;
                  }
                }
              }

              id v16 = (char *)v16 + 1;
            }
            while (v14 != v16);
            id v14 = [v11 countByEnumeratingWithState:&v51 objects:v65 count:16];
          }
          while (v14);
        }

        uint64_t v9 = v44 + 1;
      }
      while ((id)(v44 + 1) != v43);
      id v43 = [obj countByEnumeratingWithState:&v55 objects:v66 count:16];
    }
    while (v43);

    if (v8 && v50)
    {
      NEPolicySetDropPriorityLevel();
      long long v34 = ne_log_obj();
      char v35 = v47;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)SEL v60 = v50;
        long long v36 = "applyIPDefaultDrop: IP Drop-All enabled <%@>";
        uint64_t v37 = v34;
        uint32_t v38 = 12;
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v36, buf, v38);
        goto LABEL_70;
      }
      goto LABEL_70;
    }
    char v35 = v47;
    if (v49) {
      goto LABEL_71;
    }
LABEL_67:
    NEPolicySetDropPriorityLevel();
    long long v34 = ne_log_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      long long v36 = "applyIPDefaultDrop: IP Drop-All disabled";
      uint64_t v37 = v34;
      uint32_t v38 = 2;
      goto LABEL_69;
    }
LABEL_70:

LABEL_71:
    if ((v35 & 1) == 0) {
      return v8;
    }
    goto LABEL_72;
  }

  uint64_t v8 = 0;
  if (!a3)
  {
    char v35 = 1;
    goto LABEL_67;
  }
LABEL_72:
  NEPolicySetDropPriorityLevel();
  uint64_t v39 = ne_log_obj();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: IP Drop-All disabled due to disableDefaultDropAfterBoot", buf, 2u);
  }

  return v8;
}

void sub_100055F04(void *a1, const char *a2, char a3)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 88, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055FA4;
    block[3] = &unk_1000C62B8;
    void block[4] = a1;
    void block[5] = a2;
    char v8 = a3;
    dispatch_async(Property, block);
  }
}

void sub_100055FA4(uint64_t a1)
{
  uint64_t v2 = sub_1000559B8(*(void **)(a1 + 32), (const char *)1, 0);
  if (*(void *)(a1 + 40)) {
    NEPolicyPersistDropAllFeature();
  }
  uint64_t v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: Persistent IP Drop-All level <%ld>", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v4 = sub_1000559B8(*(void **)(a1 + 32), 0, v2);
  uint64_t v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "applyIPDefaultDrop: non-Persistent IP Drop-All level <%ld>", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1000560D4(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = [objc_alloc((Class)NSNumber) initWithUnsignedLong:a3];
      id v6 = [objc_alloc((Class)NSNumber) initWithUnsignedLong:a2];
      id v7 = a1;
      objc_sync_enter(v7);
      self = v7;
      id v9 = objc_getProperty(v7, v8, 320, 1);
      [v9 setObject:v6 forKeyedSubscript:v5];
      BOOL v30 = v6;

      id v11 = objc_getProperty(self, v10, 320, 1);
      long long v36 = +[NSDictionary dictionaryWithDictionary:v11];

      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id obj = objc_getProperty(self, v12, 120, 1);
      id v33 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
      if (v33)
      {
        uint64_t v32 = *(void *)v43;
        do
        {
          for (id i = 0; i != v33; id i = (char *)i + 1)
          {
            if (*(void *)v43 != v32) {
              objc_enumerationMutation(obj);
            }
            uint64_t v14 = *(void *)(*((void *)&v42 + 1) + 8 * i);
            long long v38 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            id v15 = objc_getProperty(self, v13, 120, 1);
            id v35 = [v15 objectForKeyedSubscript:v14];

            id v16 = [v35 countByEnumeratingWithState:&v38 objects:v46 count:16];
            if (v16)
            {
              uint64_t v17 = *(void *)v39;
              do
              {
                for (j = 0; j != v16; j = (char *)j + 1)
                {
                  if (*(void *)v39 != v17) {
                    objc_enumerationMutation(v35);
                  }
                  uint64_t v19 = *(void *)(*((void *)&v38 + 1) + 8 * (void)j);
                  long long v20 = ne_log_obj();
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                  {
                    int v22 = v5;
                    id v23 = objc_getProperty(self, v21, 120, 1);
                    CFStringRef v24 = [v23 objectForKeyedSubscript:v14];
                    uint64_t v25 = [v24 objectForKeyedSubscript:v19];
                    *(_DWORD *)long long buf = 138412290;
                    uint64_t v49 = v25;
                    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Passing fallback interface change event to %@", buf, 0xCu);

                    uint64_t v5 = v22;
                  }

                  id v27 = objc_getProperty(self, v26, 120, 1);
                  CFStringRef v28 = [v27 objectForKeyedSubscript:v14];
                  CFStringRef v29 = [v28 objectForKeyedSubscript:v19];
                  [v29 handleChangeEventForFallbackInterfaces:v36];
                }
                id v16 = [v35 countByEnumeratingWithState:&v38 objects:v46 count:16];
              }
              while (v16);
            }
          }
          id v33 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
        }
        while (v33);
      }

      objc_sync_exit(self);
    }
    else
    {
      uint64_t v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v49 = "-[NESMServer addFallbackInterface:predictedInterfaceIndex:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "%s called with null fallbackInterfaceIndex", buf, 0xCu);
      }
    }
  }
}

void sub_1000564C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id obj)
{
}

void sub_100056508(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        oslog = [objc_alloc((Class)NSNumber) initWithUnsignedLong:a3];
        id v4 = a1;
        objc_sync_enter(v4);
        self = v4;
        id v6 = objc_getProperty(v4, v5, 320, 1);
        id v7 = [v6 objectForKey:oslog];

        if (v7)
        {
          id v9 = objc_getProperty(self, v8, 320, 1);
          [v9 removeObjectForKey:oslog];

          id v11 = objc_getProperty(self, v10, 320, 1);
          id v12 = [v11 count];

          if (v12)
          {
            id v14 = objc_getProperty(self, v13, 320, 1);
            id v15 = +[NSDictionary dictionaryWithDictionary:v14];
          }
          else
          {
            id v15 = 0;
          }
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          id obj = objc_getProperty(self, v13, 120, 1);
          id v36 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
          if (v36)
          {
            uint64_t v35 = *(void *)v45;
            do
            {
              for (id i = 0; i != v36; id i = (char *)i + 1)
              {
                if (*(void *)v45 != v35) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v17 = *(void *)(*((void *)&v44 + 1) + 8 * i);
                long long v40 = 0u;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v43 = 0u;
                id v18 = objc_getProperty(self, v16, 120, 1);
                id v38 = [v18 objectForKeyedSubscript:v17];

                id v19 = [v38 countByEnumeratingWithState:&v40 objects:v48 count:16];
                if (v19)
                {
                  uint64_t v20 = *(void *)v41;
                  do
                  {
                    for (j = 0; j != v19; j = (char *)j + 1)
                    {
                      if (*(void *)v41 != v20) {
                        objc_enumerationMutation(v38);
                      }
                      uint64_t v22 = *(void *)(*((void *)&v40 + 1) + 8 * (void)j);
                      id v23 = ne_log_obj();
                      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                      {
                        id v25 = objc_getProperty(self, v24, 120, 1);
                        SEL v26 = [v25 objectForKeyedSubscript:v17];
                        id v27 = [v26 objectForKeyedSubscript:v22];
                        *(_DWORD *)long long buf = 138412290;
                        long long v51 = v27;
                        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Passing fallback interface change event to %@", buf, 0xCu);
                      }
                      id v29 = objc_getProperty(self, v28, 120, 1);
                      BOOL v30 = [v29 objectForKeyedSubscript:v17];
                      int v31 = [v30 objectForKeyedSubscript:v22];
                      [v31 handleChangeEventForFallbackInterfaces:v15];
                    }
                    id v19 = [v38 countByEnumeratingWithState:&v40 objects:v48 count:16];
                  }
                  while (v19);
                }
              }
              id v36 = [obj countByEnumeratingWithState:&v44 objects:v49 count:16];
            }
            while (v36);
          }
        }
        objc_sync_exit(self);

        goto LABEL_26;
      }
      oslog = ne_log_obj();
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        long long v51 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        uint64_t v32 = "%s called with null predictedInterfaceIndex";
        goto LABEL_32;
      }
    }
    else
    {
      oslog = ne_log_obj();
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        long long v51 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        uint64_t v32 = "%s called with null fallbackInterfaceIndex";
LABEL_32:
        _os_log_fault_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_FAULT, v32, buf, 0xCu);
      }
    }
LABEL_26:
  }
}

void sub_100056984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id obj)
{
}

void sub_1000569C4(void *a1, const char *a2)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120, 1);
  }
  id obj = Property;
  id v21 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  id v5 = 0;
  if (v21)
  {
    uint64_t v20 = *(void *)v28;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v27 + 1) + 8 * v6);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v8 = (id)a1[4];
        if (v8) {
          id v8 = objc_getProperty(v8, v4, 120, 1);
        }
        uint64_t v22 = v6;
        id v9 = [v8 objectForKeyedSubscript:v7];
        id v10 = [v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v10)
        {
          id v12 = v10;
          uint64_t v13 = *(void *)v24;
          do
          {
            for (id i = 0; i != v12; id i = (char *)i + 1)
            {
              if (*(void *)v24 != v13) {
                objc_enumerationMutation(v9);
              }
              uint64_t v15 = *(void *)(*((void *)&v23 + 1) + 8 * i);
              id v16 = (id)a1[4];
              if (v16) {
                id v16 = objc_getProperty(v16, v11, 120, 1);
              }
              uint64_t v17 = [v16 objectForKeyedSubscript:v7];
              id v18 = [v17 objectForKeyedSubscript:v15];

              if ([v18 hasProviderWithBundleIdentifier:a1[5]])
              {
                if (!v5) {
                  id v5 = objc_alloc_init((Class)NSMutableArray);
                }
                [v5 addObject:v18];
              }
            }
            id v12 = [v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }
          while (v12);
        }

        uint64_t v6 = v22 + 1;
      }
      while ((id)(v22 + 1) != v21);
      id v21 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v21);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100056C0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = sub_10000C120();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100056D7C;
    v11[3] = &unk_1000C6D88;
    void v11[4] = a1;
    id v12 = v5;
    id v13 = v6;
    id v8 = v12;
    id v9 = v11;
    if (v7)
    {
      id v10 = v7[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10000DBE0;
      block[3] = &unk_1000C6D88;
      void block[4] = v7;
      id v15 = v8;
      id v16 = v9;
      dispatch_async(v10, block);
    }
  }
}

void sub_100056D7C(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = objc_getProperty(v3, a2, 88, 1);
  }
  else {
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100056E40;
  block[3] = &unk_1000C6D88;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  id v10 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

uint64_t sub_100056E40(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) configuration];
  id v3 = [v2 grade];

  if (v3 == (id)1)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 120, 1);
    }
    id obj = Property;
    id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v6)
    {
      id v8 = v6;
      uint64_t v9 = *(void *)v22;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v21 + 1) + 8 * (void)v10);
          id v12 = *(id *)(a1 + 40);
          if (v12) {
            id v12 = objc_getProperty(v12, v7, 120, 1);
          }
          id v13 = [v12 objectForKeyedSubscript:v11];
          id v14 = [v13 objectForKeyedSubscript:&off_1000C9840];

          id v15 = [v14 configuration];
          if ([v15 grade] == (id)2)
          {
            id v16 = [v14 configuration];
            uint64_t v17 = [v16 VPN];
            unsigned int v18 = [v17 isOnDemandEnabled];

            if (v18) {
              [v14 unpauseOnDemand];
            }
          }
          else
          {
          }
          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100057028(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = (unsigned __int8 *)(a1 + 40);
    int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == (*(unsigned char *)(v3 + 14) & 1)) {
      return;
    }
    *(unsigned char *)(v3 + 14) = v4;
    id Property = *(id *)(a1 + 32);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    if (Property) {
      id Property = objc_getProperty(Property, a2, 120, 1);
    }
  }
  else
  {
    id v5 = (unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      return;
    }
    id Property = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
  }
  id obj = Property;
  id v29 = [obj countByEnumeratingWithState:&v37 objects:v46 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v38;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v38 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v32 = *(void *)(*((void *)&v37 + 1) + 8 * v8);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v9 = *(id *)(a1 + 32);
        uint64_t v30 = v8;
        if (v9) {
          id v9 = objc_getProperty(v9, v7, 120, 1);
        }
        id v31 = [v9 objectForKeyedSubscript:v32];
        id v10 = [v31 countByEnumeratingWithState:&v33 objects:v45 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v34;
          do
          {
            for (id i = 0; i != v11; id i = (char *)i + 1)
            {
              if (*(void *)v34 != v12) {
                objc_enumerationMutation(v31);
              }
              uint64_t v14 = *(void *)(*((void *)&v33 + 1) + 8 * i);
              id v15 = ne_log_obj();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                uint64_t v17 = v12;
                unsigned int v18 = v5;
                if (*(unsigned char *)(a1 + 40)) {
                  id v19 = "enabled";
                }
                else {
                  id v19 = "disabled";
                }
                id v20 = *(id *)(a1 + 32);
                if (v20) {
                  id v20 = objc_getProperty(v20, v16, 120, 1);
                }
                long long v21 = [v20 objectForKeyedSubscript:v32];
                long long v22 = [v21 objectForKeyedSubscript:v14];
                *(_DWORD *)long long buf = 136315394;
                long long v42 = v19;
                __int16 v43 = 2112;
                long long v44 = v22;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Passing fallback %s event to %@", buf, 0x16u);

                id v5 = v18;
                uint64_t v12 = v17;
              }

              id v24 = *(id *)(a1 + 32);
              if (v24) {
                id v24 = objc_getProperty(v24, v23, 120, 1);
              }
              long long v25 = [v24 objectForKeyedSubscript:v32];
              long long v26 = [v25 objectForKeyedSubscript:v14];
              [v26 handleChangeEventForFallback:*v5];
            }
            id v11 = [v31 countByEnumeratingWithState:&v33 objects:v45 count:16];
          }
          while (v11);
        }

        uint64_t v8 = v30 + 1;
      }
      while ((id)(v30 + 1) != v29);
      id v29 = [obj countByEnumeratingWithState:&v37 objects:v46 count:16];
    }
    while (v29);
  }
}

uint64_t sub_10005734C(void *a1, unsigned int *a2, void *a3, void *a4, int a5, void *a6, int a7, void *a8, void *a9, void *a10, unsigned __int16 a11, char a12, void *a13, void *a14, void *a15, char a16, void *a17, char a18)
{
  id v21 = a3;
  id v22 = a4;
  id v84 = a6;
  id v83 = a8;
  id v89 = a9;
  long long v23 = v22;
  id v24 = v21;
  id v93 = a10;
  id v82 = a13;
  id v92 = a14;
  id v96 = a15;
  id v95 = a17;
  id v25 = objc_alloc_init((Class)NSMutableArray);
  if (v21) {
    long long v26 = v21;
  }
  else {
    long long v26 = v23;
  }
  id v91 = v26;
  long long v27 = +[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:");
  [v25 addObject:v27];

  if (v23)
  {
    uint64_t v28 = +[NEPolicyCondition realApplication:v23];
    [v25 addObject:v28];
  }
  id v29 = v89;
  if (!v89 || (a16 & 1) != 0)
  {
    uint64_t v30 = +[NEPolicyCondition allInterfaces];
  }
  else
  {
    uint64_t v30 = +[NEPolicyCondition scopedInterface:v89];
  }
  id v31 = (void *)v30;
  uint64_t v32 = v82;
  [v25 addObject:v30];

  if (a7)
  {
    long long v33 = +[NEPolicyCondition uid:0];
    [v25 addObject:v33];
  }
  if (a5)
  {
    uint64_t v34 = +[NEPolicyCondition entitlement];
  }
  else
  {
    if (![v84 length]) {
      goto LABEL_17;
    }
    uint64_t v34 = +[NEPolicyCondition customEntitlement:v84];
  }
  long long v35 = (void *)v34;
  [v25 addObject:v34];

LABEL_17:
  if (v93)
  {
    long long v36 = +[NEPolicyCondition signingIdentifier:](NEPolicyCondition, "signingIdentifier:");
    [v25 addObject:v36];
  }
  id v85 = v25;
  if (a11)
  {
    long long v37 = +[NEPolicyCondition ipProtocol:a11];
    [v25 addObject:v37];
  }
  if (a12)
  {
    long long v38 = +[NEPolicyCondition platformBinary];
    [v25 addObject:v38];

    long long v39 = +[NEPolicyCondition delegateIsPlatformBinary];
    [v25 addObject:v39];
  }
  if (v82)
  {
    long long v40 = +[NEPolicyCondition accountIdentifier:v82];
    [v25 addObject:v40];
  }
  if (v96)
  {
    id obja = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v96 conditions:v25];
    id v41 = [a1 addPolicy:];
    int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    __int16 v43 = ne_log_obj();
    long long v44 = v43;
    if (!v41)
    {
      BOOL v45 = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
      if (is_debug_logging_enabled)
      {
        if (v45)
        {
          *(_DWORD *)long long buf = 138412290;
          id v104 = obja;
LABEL_46:
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
LABEL_107:

        uint64_t v75 = 0;
        goto LABEL_108;
      }
      if (!v45) {
        goto LABEL_107;
      }
      uint64_t v77 = [obja descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v104 = v77;
LABEL_98:
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      id v25 = v85;
      goto LABEL_107;
    }
    if (is_debug_logging_enabled)
    {
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v104 = obja;
        _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      long long v46 = [obja descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v104 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }
    if (v95)
    {
      long long v47 = +[NSNumber numberWithUnsignedInteger:v41];
      [v95 addObject:v47];
    }
    if (a18) {
      ++*a2;
    }
  }
  id obja = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v92 conditions:v25];
  id v48 = [a1 addPolicy:];
  int v49 = nelog_is_debug_logging_enabled();
  CFStringRef v50 = ne_log_obj();
  long long v44 = v50;
  if (!v48)
  {
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    if (v49)
    {
      if (v51)
      {
        *(_DWORD *)long long buf = 138412290;
        id v104 = obja;
        goto LABEL_46;
      }
      goto LABEL_107;
    }
    if (!v51) {
      goto LABEL_107;
    }
    uint64_t v77 = [obja descriptionWithIndent:0 options:2];
    *(_DWORD *)long long buf = 138412290;
    id v104 = v77;
    goto LABEL_98;
  }
  if (v49)
  {
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v104 = obja;
      _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
  {
    long long v52 = [obja descriptionWithIndent:0 options:2];
    *(_DWORD *)long long buf = 138412290;
    id v104 = v52;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
  }
  if (v95)
  {
    long long v53 = +[NSNumber numberWithUnsignedInteger:v48];
    [v95 addObject:v53];
  }
  if (a18) {
    ++*a2;
  }
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  id obja = v83;
  id v54 = [obja countByEnumeratingWithState:&v98 objects:v102 count:16];
  if (!v54)
  {
    uint64_t v75 = 1;
    goto LABEL_90;
  }
  id v55 = v54;
  unsigned int v81 = v23;
  uint64_t v86 = *(void *)v99;
  while (2)
  {
    for (id i = 0; i != v55; id i = (char *)i + 1)
    {
      if (*(void *)v99 != v86) {
        objc_enumerationMutation(obja);
      }
      uint64_t v57 = *(void *)(*((void *)&v98 + 1) + 8 * i);
      long long v44 = objc_alloc_init((Class)NSMutableArray);
      long long v58 = +[NEPolicyCondition effectiveApplication:v91];
      [v44 addObject:v58];

      unsigned int v59 = +[NEPolicyCondition realApplication:v57];
      [v44 addObject:v59];

      if (v29) {
        +[NEPolicyCondition scopedInterface:v29];
      }
      else {
      SEL v60 = +[NEPolicyCondition allInterfaces];
      }
      [v44 addObject:v60];

      if (a5)
      {
        __int16 v61 = +[NEPolicyCondition entitlement];
        [v44 addObject:v61];
      }
      if (v93)
      {
        unsigned int v62 = +[NEPolicyCondition signingIdentifier:v93];
        [v44 addObject:v62];
      }
      if (v96)
      {
        id v63 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v96 conditions:v44];
        id v64 = [a1 addPolicy:v63];
        int v65 = nelog_is_debug_logging_enabled();
        SEL v66 = ne_log_obj();
        uint64_t v67 = v66;
        if (!v64)
        {
          BOOL v78 = os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
          if (v65)
          {
            id v24 = v21;
            long long v23 = v81;
            uint64_t v32 = v82;
            if (v78)
            {
              *(_DWORD *)long long buf = 138412290;
              id v104 = v63;
              goto LABEL_102;
            }
LABEL_106:

            id v29 = v89;
            goto LABEL_107;
          }
          id v24 = v21;
          long long v23 = v81;
          uint64_t v32 = v82;
          if (!v78) {
            goto LABEL_106;
          }
LABEL_109:
          uint64_t v80 = [v63 descriptionWithIndent:0 options:2];
          *(_DWORD *)long long buf = 138412290;
          id v104 = v80;
          _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

          id v25 = v85;
          goto LABEL_106;
        }
        if (v65)
        {
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 138412290;
            id v104 = v63;
            _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          uint64_t v68 = [v63 descriptionWithIndent:0 options:2];
          *(_DWORD *)long long buf = 138412290;
          id v104 = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }
        if (v95)
        {
          id v69 = +[NSNumber numberWithUnsignedInteger:v64];
          [v95 addObject:v69];
        }
        if (a18) {
          ++*a2;
        }
      }
      id v63 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v92 conditions:v44];
      id v70 = [a1 addPolicy:v63];
      int v71 = nelog_is_debug_logging_enabled();
      uint64_t v72 = ne_log_obj();
      uint64_t v67 = v72;
      if (!v70)
      {
        BOOL v76 = os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
        if (v71)
        {
          id v24 = v21;
          long long v23 = v81;
          uint64_t v32 = v82;
          if (v76)
          {
            *(_DWORD *)long long buf = 138412290;
            id v104 = v63;
LABEL_102:
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
            goto LABEL_106;
          }
          goto LABEL_106;
        }
        id v24 = v21;
        long long v23 = v81;
        uint64_t v32 = v82;
        if (!v76) {
          goto LABEL_106;
        }
        goto LABEL_109;
      }
      if (v71)
      {
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412290;
          id v104 = v63;
          _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        id v73 = [v63 descriptionWithIndent:0 options:2];
        *(_DWORD *)long long buf = 138412290;
        id v104 = v73;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
      if (v95)
      {
        uint64_t v74 = +[NSNumber numberWithUnsignedInteger:v70];
        [v95 addObject:v74];
      }
      id v29 = v89;
      if (a18) {
        ++*a2;
      }
    }
    id v55 = [obja countByEnumeratingWithState:&v98 objects:v102 count:16];
    uint64_t v75 = 1;
    if (v55) {
      continue;
    }
    break;
  }
  id v24 = v21;
  long long v23 = v81;
LABEL_90:
  uint64_t v32 = v82;
LABEL_108:

  return v75;
}

uint64_t sub_100057FE4(void *a1, unsigned int *a2, int a3, void *a4, void *a5, int a6, void *a7, int a8, void *a9, char a10, void *a11, void *a12, void *a13, char a14, void *a15)
{
  id v19 = a4;
  id v20 = a5;
  id v48 = a7;
  id v47 = a9;
  id v21 = a11;
  id v46 = a12;
  id v45 = a13;
  id v22 = a15;
  if (a1
    && (unsigned int v57 = *a2, v20)
    && (id v23 = +[NEProcessInfo copyDNSUUIDs]) != 0)
  {
    id v24 = v23;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v25 = v20;
    id v39 = [v25 countByEnumeratingWithState:&v53 objects:v59 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v54;
      id v37 = v20;
      id v38 = v19;
      id v35 = v25;
      id v36 = v21;
      while (2)
      {
        uint64_t v26 = 0;
        do
        {
          if (*(void *)v54 != v40) {
            objc_enumerationMutation(v25);
          }
          uint64_t v41 = v26;
          long long v27 = *(void **)(*((void *)&v53 + 1) + 8 * v26);
          unsigned int v57 = *a2;
          if (!sub_10005734C(a1, &v57, 0, v27, a6, v48, a8, v24, v47, 0, 0, a10, v21, v46, v45, a14, v22, a3))
          {
LABEL_29:

            uint64_t v33 = 0;
            goto LABEL_30;
          }
          if (v19)
          {
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            id v28 = v19;
            id v29 = [v28 countByEnumeratingWithState:&v49 objects:v58 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v50;
              while (2)
              {
                for (id i = 0; i != v30; id i = (char *)i + 1)
                {
                  if (*(void *)v50 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  if ((sub_10005734C(a1, &v57, *(void **)(*((void *)&v49 + 1) + 8 * i), v27, a6, v48, a8, v24, v47, 0, 0, a10, 0, v46, v45, a14, v22, a3) & 1) == 0)
                  {

                    id v20 = v37;
                    id v19 = v38;
                    id v25 = v35;
                    id v21 = v36;
                    goto LABEL_29;
                  }
                }
                id v30 = [v28 countByEnumeratingWithState:&v49 objects:v58 count:16];
                if (v30) {
                  continue;
                }
                break;
              }
            }

            id v20 = v37;
            id v19 = v38;
            id v25 = v35;
            id v21 = v36;
          }
          if (a3) {
            *a2 = v57;
          }
          uint64_t v26 = v41 + 1;
        }
        while ((id)(v41 + 1) != v39);
        id v39 = [v25 countByEnumeratingWithState:&v53 objects:v59 count:16];
        if (v39) {
          continue;
        }
        break;
      }
    }

    if ((a3 & 1) == 0) {
      *a2 = v57;
    }
    uint64_t v33 = 1;
LABEL_30:
  }
  else
  {
    uint64_t v33 = 0;
  }

  return v33;
}

uint64_t sub_100058348(void *a1, unsigned int *a2, int a3, void *a4, int a5, void *a6, void *a7, unsigned __int16 a8, char a9, void *a10, void *a11, void *a12)
{
  id v17 = a4;
  id v34 = a6;
  id v33 = a7;
  id v18 = a10;
  id v19 = a11;
  id v20 = a12;
  unsigned int v39 = *a2;
  if (!v17) {
    goto LABEL_4;
  }
  if (a9)
  {
    id v21 = +[NEProcessInfo copyDNSUUIDs];
    if (!v21)
    {
LABEL_4:
      uint64_t v22 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    id v21 = 0;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v29 = v17;
  id obj = v17;
  id v23 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v36;
    while (2)
    {
      for (id i = 0; i != v24; id i = (char *)i + 1)
      {
        if (*(void *)v36 != v25) {
          objc_enumerationMutation(obj);
        }
        long long v27 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        unsigned int v39 = *a2;
        if ((sub_10005734C(a1, &v39, v27, 0, a5, 0, 0, v21, v34, v33, a8, 0, 0, v18, v19, 0, v20, a3) & 1) == 0)
        {

          uint64_t v22 = 0;
          goto LABEL_20;
        }
        if (a3) {
          *a2 = v39;
        }
      }
      id v24 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
      if (v24) {
        continue;
      }
      break;
    }
  }

  if ((a3 & 1) == 0) {
    *a2 = v39;
  }
  uint64_t v22 = 1;
LABEL_20:
  id v17 = v29;

LABEL_21:
  return v22;
}

BOOL sub_100058574(BOOL a1, unsigned int *a2, void *a3, void *a4)
{
  id v39 = a4;
  if (!a1)
  {
    id v23 = v39;
    goto LABEL_33;
  }
  id v7 = a3;
  id v8 = objc_alloc_init((Class)NSMutableArray);
  id v9 = +[NEPolicyCondition ipProtocol:58];
  [v8 addObject:v9];

  id v10 = +[NEPolicyCondition allInterfaces];
  [v8 addObject:v10];

  id v11 = +[NEPolicyCondition effectivePID:0];
  [v11 setNegative:1];
  [v8 addObject:v11];
  id v12 = objc_alloc((Class)NEPolicy);
  uint64_t v13 = *a2;
  uint64_t v14 = +[NEPolicyResult skipWithOrder:(v13 + 2)];
  id v15 = [v12 initWithOrder:v13 result:v14 conditions:v8];

  id v16 = [(id)a1 addPolicy:v15];
  int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  id v18 = ne_log_obj();
  id v19 = v18;
  if (v16)
  {
    BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    if (is_debug_logging_enabled)
    {
      if (v20)
      {
        *(_DWORD *)long long buf = 138412290;
        id v41 = v15;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (v20)
    {
      uint64_t v22 = [v15 descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v41 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }
    id v23 = v39;
    if (!v39) {
      goto LABEL_17;
    }
    id v19 = +[NSNumber numberWithUnsignedInteger:v16];
    [v39 addObject:v19];
  }
  else
  {
    BOOL v21 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (is_debug_logging_enabled)
    {
      if (v21)
      {
        *(_DWORD *)long long buf = 138412290;
        id v41 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }
    else if (v21)
    {
      long long v37 = [v15 descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v41 = v37;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
    id v23 = v39;
  }

LABEL_17:
  ++*a2;
  id v24 = objc_alloc_init((Class)NSMutableArray);

  uint64_t v25 = +[NEPolicyCondition ipProtocol:58];
  [v24 addObject:v25];

  uint64_t v26 = +[NEPolicyCondition allInterfaces];
  [v24 addObject:v26];

  id v27 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v7 conditions:v24];
  id v28 = [(id)a1 addPolicy:v27];
  a1 = v28 != 0;
  int v29 = nelog_is_debug_logging_enabled();
  id v30 = ne_log_obj();
  uint64_t v31 = v30;
  if (v28)
  {
    BOOL v32 = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    if (v29)
    {
      if (v32)
      {
        *(_DWORD *)long long buf = 138412290;
        id v41 = v27;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (v32)
    {
      id v34 = [v27 descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v41 = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }
    if (v23)
    {
      long long v35 = +[NSNumber numberWithUnsignedInteger:v28];
      [v23 addObject:v35];
    }
    ++*a2;
  }
  else
  {
    BOOL v33 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
    if (v29)
    {
      if (v33)
      {
        *(_DWORD *)long long buf = 138412290;
        id v41 = v27;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }
    else if (v33)
    {
      long long v38 = [v27 descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      id v41 = v38;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
  }

LABEL_33:
  return a1;
}

uint64_t sub_100058AC8(void *a1, unsigned int *a2, int a3, void *a4, void *a5)
{
  id v7 = @"53";
  id v36 = a4;
  id v8 = a5;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v9 = [&off_1000C9720 countByEnumeratingWithState:&v37 objects:v44 count:16];
  if (v9)
  {
    id v11 = v9;
    id v12 = 0;
    uint64_t v13 = *(void *)v38;
    *(void *)&long long v10 = 138412290;
    long long v32 = v10;
    while (2)
    {
      uint64_t v14 = 0;
      id v15 = v12;
      do
      {
        if (*(void *)v38 != v13) {
          objc_enumerationMutation(&off_1000C9720);
        }
        uint64_t v16 = *(void *)(*((void *)&v37 + 1) + 8 * (void)v14);
        id v12 = +[NSMutableArray array];

        id v17 = +[NEPolicyCondition allInterfaces];
        [v12 addObject:v17];

        id v18 = +[NWAddressEndpoint endpointWithHostname:v16 port:@"53"];
        if (a3) {
          +[NEPolicyCondition localAddress:v18 prefix:0];
        }
        else {
        id v19 = +[NEPolicyCondition remoteAddress:v18 prefix:0];
        }
        [v12 addObject:v19];

        BOOL v20 = +[NEPolicyCondition ipProtocol:17];
        [v12 addObject:v20];

        id v21 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v36 conditions:v12];
        id v22 = [a1 addPolicy:v21];
        int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
        id v24 = ne_log_obj();
        uint64_t v25 = v24;
        if (!v22)
        {
          BOOL v28 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
          if (is_debug_logging_enabled)
          {
            if (v28)
            {
              *(_DWORD *)long long buf = v32;
              id v43 = v21;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
            }
          }
          else if (v28)
          {
            uint64_t v31 = [v21 descriptionWithIndent:0 options:2];
            *(_DWORD *)long long buf = v32;
            id v43 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
          }
          unsigned __int8 v41 = 0;

          goto LABEL_28;
        }
        if (is_debug_logging_enabled)
        {
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = v32;
            id v43 = v21;
            _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v26 = [v21 descriptionWithIndent:0 options:2];
          *(_DWORD *)long long buf = v32;
          id v43 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }
        if (v8)
        {
          id v27 = +[NSNumber numberWithUnsignedInteger:v22];
          [v8 addObject:v27];
        }
        uint64_t v14 = (char *)v14 + 1;
        id v15 = v12;
      }
      while (v11 != v14);
      id v11 = [&off_1000C9720 countByEnumeratingWithState:&v37 objects:v44 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v12 = 0;
  }
  unsigned __int8 v41 = 1;
LABEL_28:

  uint64_t v29 = v41;
  return v29;
}

uint64_t sub_100058ECC(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, int a6)
{
  id v10 = a3;
  id v11 = a4;
  id v35 = a5;
  id v34 = +[NEPolicyResult pass];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v12 = [&off_1000C9738 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)v37;
    if (v10) {
      id v16 = v10;
    }
    else {
      id v16 = v11;
    }
    id v32 = v16;
    while (2)
    {
      id v17 = 0;
      id v18 = v14;
      do
      {
        if (*(void *)v37 != v15) {
          objc_enumerationMutation(&off_1000C9738);
        }
        uint64_t v19 = *(void *)(*((void *)&v36 + 1) + 8 * (void)v17);
        uint64_t v14 = +[NSMutableArray array];

        if (v11)
        {
          BOOL v20 = +[NEPolicyCondition effectiveApplication:v32];
          [v14 addObject:v20];

          id v21 = +[NEPolicyCondition realApplication:v11];
          [v14 addObject:v21];
        }
        id v22 = +[NEPolicyCondition allInterfaces];
        [v14 addObject:v22];

        id v23 = +[NWAddressEndpoint endpointWithHostname:v19 port:v35];
        if (a6) {
          +[NEPolicyCondition localAddress:v23 prefix:0];
        }
        else {
        id v24 = +[NEPolicyCondition remoteAddress:v23 prefix:0];
        }
        [v14 addObject:v24];

        uint64_t v25 = +[NEPolicyCondition entitlement];
        [v14 addObject:v25];

        id v26 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v34 conditions:v14];
        id v27 = [a1 addPolicy:v26];

        BOOL v28 = ne_log_obj();
        uint64_t v29 = v28;
        if (!v27)
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315138;
            unsigned __int8 v41 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%s: addPolicy failed", buf, 0xCu);
          }

          uint64_t v30 = 0;
          goto LABEL_24;
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315394;
          unsigned __int8 v41 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
          __int16 v42 = 2112;
          id v43 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s: Added Bonjour policy %@", buf, 0x16u);
        }

        ++*a2;
        id v17 = (char *)v17 + 1;
        id v18 = v14;
      }
      while (v13 != v17);
      id v13 = [&off_1000C9738 countByEnumeratingWithState:&v36 objects:v44 count:16];
      if (v13) {
        continue;
      }
      break;
    }
    uint64_t v30 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v30 = 1;
  }
LABEL_24:

  return v30;
}

uint64_t sub_100059278(void *a1, unsigned int *a2)
{
  id v4 = +[NEProcessInfo copyDNSUUIDs];
  id v5 = v4;
  if (v4)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v30 objects:v39 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v31;
      uint64_t v25 = v5;
      while (2)
      {
        for (id i = 0; i != v8; id i = (char *)i + 1)
        {
          if (*(void *)v31 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          if (!sub_100058ECC(a1, a2, 0, v11, @"5353", 1)
            || !sub_100058ECC(a1, a2, 0, v11, @"5353", 0))
          {
            uint64_t v23 = 0;
            goto LABEL_40;
          }
          id v12 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"979C0A62-49FE-4739-BDCB-CAC584AC832D"];
          if (!sub_100058ECC(a1, a2, v12, v11, @"5353", 1)
            || !sub_100058ECC(a1, a2, v12, v11, @"5353", 0))
          {
            uint64_t v23 = 0;
            goto LABEL_39;
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v30 objects:v39 count:16];
        id v5 = v25;
        if (v8) {
          continue;
        }
        break;
      }
    }

    if (os_variant_has_internal_content())
    {
      uint64_t v25 = v5;
      id v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315394;
        long long v36 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
        __int16 v37 = 2112;
        CFStringRef v38 = @"/usr/local/bin/dnssdutil";
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy Bonjour traffic for %@", buf, 0x16u);
      }

      id v14 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/local/bin/dnssdutil"];
      if (!v14)
      {
        uint64_t v15 = ne_log_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315394;
          long long v36 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
          __int16 v37 = 2112;
          CFStringRef v38 = @"/usr/local/bin/dnssdutil";
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s: failed to get UUIDs for %@", buf, 0x16u);
        }
      }
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v12 = v14;
      id v16 = [v12 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v27;
        do
        {
          for (j = 0; j != v17; j = (char *)j + 1)
          {
            if (*(void *)v27 != v18) {
              objc_enumerationMutation(v12);
            }
            BOOL v20 = *(void **)(*((void *)&v26 + 1) + 8 * (void)j);
            if ((sub_100058ECC(a1, a2, 0, v20, @"5353", 1) & 1) == 0)
            {
              id v21 = ne_log_obj();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315394;
                long long v36 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                __int16 v37 = 2112;
                CFStringRef v38 = @"/usr/local/bin/dnssdutil";
                _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s: failed to add policy for local address for %@", buf, 0x16u);
              }
            }
            if ((sub_100058ECC(a1, a2, 0, v20, @"5353", 0) & 1) == 0)
            {
              id v22 = ne_log_obj();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315394;
                long long v36 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                __int16 v37 = 2112;
                CFStringRef v38 = @"/usr/local/bin/dnssdutil";
                _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s: failed to add policy for remote address for %@", buf, 0x16u);
              }
            }
          }
          id v17 = [v12 countByEnumeratingWithState:&v26 objects:v34 count:16];
        }
        while (v17);
      }
      uint64_t v23 = 1;
      id v6 = v12;
LABEL_39:

LABEL_40:
      id v5 = v25;
    }
    else
    {
      uint64_t v23 = 1;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

uint64_t sub_10005973C(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5, void *a6)
{
  id v11 = a6;
  if (!a1)
  {
LABEL_12:
    uint64_t v12 = 0;
    goto LABEL_32;
  }
  if (a3)
  {
    if (a3 == 2)
    {
      id v13 = +[NEPolicyResult drop];
      goto LABEL_16;
    }
    if (a3 == 1)
    {
      if (a4) {
        +[NEPolicyResult pass];
      }
      else {
      id v13 = +[NEPolicyResult skipWithOrder:0];
      }
      if (a5)
      {
        id v15 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
        id v16 = +[NEPolicyResult removeNetworkAgentUUID:v15];

        goto LABEL_17;
      }
LABEL_16:
      id v16 = 0;
LABEL_17:
      id v17 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/PrivateFrameworks/VisualVoicemail.framework/vmd"];
      uint64_t v18 = ne_log_obj();
      uint64_t v19 = v18;
      if (v17)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          BOOL v20 = "";
          *(_DWORD *)long long buf = 136315906;
          *(void *)uint64_t v25 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          if (a4) {
            BOOL v20 = " <at HIGH priority>";
          }
          *(_WORD *)&v25[8] = 2112;
          *(void *)&v25[10] = v13;
          __int16 v26 = 2112;
          CFStringRef v27 = @"VoiceMail";
          __int16 v28 = 2080;
          long long v29 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@%s", buf, 0x2Au);
        }

        if (sub_100057FE4(a1, a2, 1, 0, v17, 1, 0, 0, 0, 0, 0, v13, v16, 0, 0))
        {
          unsigned __int8 v23 = 1;
LABEL_31:

          uint64_t v12 = v23;
          goto LABEL_32;
        }
        id v21 = ne_log_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)uint64_t v25 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v25[8] = 2112;
          *(void *)&v25[10] = v13;
          __int16 v26 = 2112;
          CFStringRef v27 = @"VoiceMail";
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", buf, 0x20u);
        }
      }
      else
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v25 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v25[8] = 2112;
          *(void *)&v25[10] = @"VoiceMail";
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s: failed to get UUIDs for %@ daemon", buf, 0x16u);
        }
      }
      unsigned __int8 v23 = 0;
      goto LABEL_31;
    }
    id v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)uint64_t v25 = a3;
      *(_WORD *)&v25[4] = 2112;
      *(void *)&v25[6] = @"VoiceMail";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    goto LABEL_12;
  }
  uint64_t v12 = 1;
LABEL_32:

  return v12;
}

BOOL sub_100059AD0(void *a1, unsigned int *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = objc_alloc_init((Class)NSMutableArray);
  id v10 = +[NEPolicyCondition allInterfaces];
  [v9 addObject:v10];

  id v11 = +[NEPolicyCondition customEntitlement:@"com.apple.private.application-service-browse"];
  [v9 addObject:v11];

  id v12 = [objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v8 conditions:v9];
  id v13 = [a1 addPolicy:v12];
  int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  id v15 = ne_log_obj();
  id v16 = v15;
  if (v13)
  {
    if (is_debug_logging_enabled)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v22 = 138412290;
        id v23 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Added ApplicationServiceBrowse exception policy: %@", (uint8_t *)&v22, 0xCu);
      }
    }
    else if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = [v12 descriptionWithIndent:0 options:2];
      int v22 = 138412290;
      id v23 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Added ApplicationServiceBrowse exceptionpolicy: %@", (uint8_t *)&v22, 0xCu);
    }
    if (v7)
    {
      uint64_t v19 = +[NSNumber numberWithUnsignedInteger:v13];
      [v7 addObject:v19];
    }
    ++*a2;
  }
  else
  {
    BOOL v17 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    if (is_debug_logging_enabled)
    {
      if (v17)
      {
        int v22 = 138412290;
        id v23 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to add policy for ApplicationServiceBrowse exception: %@", (uint8_t *)&v22, 0xCu);
      }
    }
    else if (v17)
    {
      id v21 = [v12 descriptionWithIndent:0 options:2];
      int v22 = 138412290;
      id v23 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to add policy for ApplicationServiceBrowse exception: %@", (uint8_t *)&v22, 0xCu);
    }
  }

  return v13 != 0;
}

uint64_t sub_100059DA0(void *a1, unsigned int *a2, void *a3, void *a4, uint64_t a5, int a6, void *a7)
{
  id v10 = a3;
  id v42 = a4;
  id v11 = a7;
  if (a1)
  {
    if ([v10 count])
    {
      long long v44 = v11;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id obj = [v10 allKeys];
      id v12 = [obj countByEnumeratingWithState:&v48 objects:v65 count:16];
      if (v12)
      {
        id v13 = v12;
        id v46 = 0;
        id v14 = 0;
        id v15 = &AnalyticsSendEventLazy_ptr;
        uint64_t v16 = *(void *)v49;
        uint64_t v37 = *(void *)v49;
        id v38 = v10;
        id v43 = a1;
        while (2)
        {
          for (id i = 0; i != v13; id i = (char *)i + 1)
          {
            if (*(void *)v49 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            id v19 = [v15[484] copyUUIDsForBundleID:v18 uid:0];
            BOOL v20 = v19;
            if (v19 && [v19 count])
            {
              id v21 = [v10 objectForKeyedSubscript:v18];
              unsigned int v22 = *a2;
              unsigned int v47 = *a2;
              unsigned int v23 = [v21 isLimitedToUDP];
              if (v23)
              {
                *(_DWORD *)long long buf = v22 - 1;
                id v24 = +[NEPolicyResult skipWithOrder:v22 + 1];

                id v11 = v44;
                if (!sub_100058AC8(a1, (unsigned int *)buf, 1, v24, v44)
                  || !sub_100058AC8(a1, (unsigned int *)buf, 0, v24, v44))
                {
                  unsigned __int8 v52 = 0;
LABEL_48:

                  goto LABEL_49;
                }
                unsigned __int16 v25 = 17;
                id v14 = v24;
              }
              else
              {
                unsigned __int16 v25 = 0;
              }
              if (a5 == 200) {
                +[NEPolicyResult skipWithOrder:0];
              }
              else {
              id v24 = +[NEPolicyResult pass];
              }

              if (a6)
              {
                id v26 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
                uint64_t v27 = +[NEPolicyResult removeNetworkAgentUUID:v26];

                id v46 = (void *)v27;
              }
              else
              {
                id v26 = v46;
                id v46 = 0;
              }

              __int16 v28 = ne_log_obj();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 136316162;
                long long v54 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                __int16 v55 = 2112;
                long long v56 = v24;
                __int16 v57 = 2048;
                uint64_t v58 = a5;
                __int16 v59 = 2112;
                SEL v60 = v18;
                __int16 v61 = 2112;
                unsigned int v62 = v20;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@", buf, 0x34u);
              }

              id v11 = v44;
              if ((sub_100058348(v43, &v47, 0, v20, 0, v42, v18, v25, v23 ^ 1, v24, v46, v44) & 1) == 0)
              {
                long long v32 = ne_log_obj();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315906;
                  long long v54 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  __int16 v55 = 2112;
                  long long v56 = v24;
                  __int16 v57 = 2048;
                  uint64_t v58 = a5;
                  __int16 v59 = 2112;
                  SEL v60 = v18;
                  _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy <priority %ld> for %@", buf, 0x2Au);
                }

                unsigned __int8 v52 = 0;
                id v10 = v38;
                goto LABEL_48;
              }
              if (a5 == 200)
              {
                long long v29 = +[NEPolicyResult scopeSocketToInterfaceName:v42];

                long long v30 = ne_log_obj();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 136316418;
                  CFStringRef v31 = @"<Any>";
                  if (v23) {
                    CFStringRef v31 = @"UDP";
                  }
                  long long v54 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  __int16 v55 = 2112;
                  long long v56 = v29;
                  __int16 v57 = 2048;
                  uint64_t v58 = 200;
                  __int16 v59 = 2112;
                  SEL v60 = v18;
                  __int16 v61 = 2112;
                  unsigned int v62 = v20;
                  __int16 v63 = 2112;
                  CFStringRef v64 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@ - %@ protocol", buf, 0x3Eu);
                }

                char v36 = v23 ^ 1;
                a1 = v43;
                uint64_t v16 = v37;
                if ((sub_100058348(v43, &v47, 0, v20, 0, 0, v18, v25, v36, v29, v46, v44) & 1) == 0)
                {
                  long long v33 = ne_log_obj();
                  id v10 = v38;
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 136315906;
                    long long v54 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegate"
                          "InterfaceName:priority:isAOVPN:policyIDList:]";
                    __int16 v55 = 2112;
                    long long v56 = v29;
                    __int16 v57 = 2048;
                    uint64_t v58 = 200;
                    __int16 v59 = 2112;
                    SEL v60 = v18;
                    _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy <priority %ld> for %@", buf, 0x2Au);
                  }

                  unsigned __int8 v52 = 0;
                  id v24 = v29;
                  id v11 = v44;
                  goto LABEL_48;
                }
                id v24 = v29;
                id v10 = v38;
              }
              else
              {
                uint64_t v16 = v37;
                id v10 = v38;
                a1 = v43;
              }
              id v14 = v24;
              id v15 = &AnalyticsSendEventLazy_ptr;
            }
            else
            {
              id v21 = ne_log_obj();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 136315394;
                long long v54 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                __int16 v55 = 2112;
                long long v56 = v18;
                _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s: Application %@ does not exist, may have been uninstalled", buf, 0x16u);
              }
            }
          }
          id v13 = [obj countByEnumeratingWithState:&v48 objects:v65 count:16];
          if (v13) {
            continue;
          }
          break;
        }
      }
      else
      {
        id v46 = 0;
        id v14 = 0;
      }

      unsigned __int8 v52 = 1;
      id v11 = v44;
    }
    else
    {
      unsigned __int8 v52 = 0;
    }
LABEL_49:
    uint64_t v34 = v52;
  }
  else
  {
    uint64_t v34 = 0;
  }

  return v34;
}

BOOL sub_10005A488(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (!a1)
  {
    BOOL v20 = 0;
    goto LABEL_41;
  }
  if (a4 == 400 || a4 == 100)
  {
    id v10 = +[NEPolicyResult pass];
  }
  else
  {
    id v10 = +[NEPolicyResult skipWithOrder:a3];
  }
  id v11 = v10;
  id v12 = v10;
  if (a4 != 100 && a4 != 400)
  {

    goto LABEL_17;
  }

  if (a4 != 100)
  {
LABEL_17:
    id v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315650;
      long long v40 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      __int16 v41 = 2112;
      id v42 = v12;
      __int16 v43 = 1024;
      int v44 = a4;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for local networks (priority %d)", buf, 0x1Cu);
    }

    unsigned int v22 = +[NEPolicyCondition localNetworksWithFlags:1];
    unsigned int v23 = +[NEPolicyCondition allInterfaces];
    v38[1] = v23;
    uint64_t v18 = +[NSArray arrayWithObjects:v38 count:2];

    id v19 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v12 conditions:v18];
    id v24 = [a1 addPolicy:v19];
    int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    id v26 = ne_log_obj();
    uint64_t v27 = v26;
    if (v24)
    {
      if (is_debug_logging_enabled)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v40 = v19;
          _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Added local networks policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        long long v29 = [v19 descriptionWithIndent:0 options:2];
        *(_DWORD *)long long buf = 138412290;
        long long v40 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Added local networks policy: %@", buf, 0xCu);
      }
      if (v9)
      {
        long long v30 = +[NSNumber numberWithUnsignedInteger:v24];
        [v9 addObject:v30];

        ++*a2;
        CFStringRef v31 = a1;
        long long v32 = a2;
        long long v33 = v12;
        uint64_t v34 = v9;
      }
      else
      {
        ++*a2;
        CFStringRef v31 = a1;
        long long v32 = a2;
        long long v33 = v12;
        uint64_t v34 = 0;
      }
      BOOL v20 = sub_100059AD0(v31, v32, v33, v34);
      goto LABEL_40;
    }
    BOOL v28 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    if (is_debug_logging_enabled)
    {
      if (v28)
      {
        *(_DWORD *)long long buf = 138412290;
        long long v40 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to add policy for local networks: %@", buf, 0xCu);
      }
    }
    else if (v28)
    {
      uint64_t v37 = [v19 descriptionWithIndent:0 options:2];
      *(_DWORD *)long long buf = 138412290;
      long long v40 = v37;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to add policy for local networks: %@", buf, 0xCu);
    }
    goto LABEL_39;
  }
  id v13 = ne_log_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v40 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  if (!sub_100059278(a1, a2))
  {
    BOOL v20 = 0;
    id v19 = 0;
    uint64_t v18 = 0;
    goto LABEL_40;
  }
  id v14 = ne_log_obj();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v40 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s: adding policy for TCP listeners", buf, 0xCu);
  }

  id v15 = +[NEPolicyCondition allInterfaces];
  v45[0] = v15;
  uint64_t v16 = +[NEPolicyCondition ipProtocol:6];
  v45[1] = v16;
  BOOL v17 = +[NEPolicyCondition isListener];
  v45[2] = v17;
  uint64_t v18 = +[NSArray arrayWithObjects:v45 count:3];

  id v19 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v12 conditions:v18];
  if (![a1 addPolicy:v19])
  {
    id v35 = ne_log_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v40 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%s: failed to add policy for TCP listeners", buf, 0xCu);
    }

LABEL_39:
    BOOL v20 = 0;
    goto LABEL_40;
  }
  ++*a2;
  BOOL v20 = 1;
LABEL_40:

LABEL_41:
  return v20;
}

uint64_t sub_10005AA50(void *a1, unsigned int *a2)
{
  if (!a1) {
    return 0;
  }
  id v4 = +[NEPolicyResult pass];
  id v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v40 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  if (sub_100059278(a1, a2))
  {
    id v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v40 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s: Adding policy for TCP listeners", buf, 0xCu);
    }

    id v7 = +[NEPolicyCondition allInterfaces];
    v47[0] = v7;
    id v8 = +[NEPolicyCondition ipProtocol:6];
    v47[1] = v8;
    id v9 = +[NEPolicyCondition isListener];
    v47[2] = v9;
    id v10 = +[NSArray arrayWithObjects:v47 count:3];

    id v11 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v4 conditions:v10];
    if ([a1 addPolicy:v11])
    {
      ++*a2;
      id v12 = ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315906;
        long long v40 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        __int16 v41 = 2112;
        id v42 = v4;
        __int16 v43 = 2080;
        int v44 = "com.apple.remotepairing.devicecommunication";
        __int16 v45 = 1024;
        int v46 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
      }

      id v13 = +[NEPolicyCondition allInterfaces];
      v38[0] = v13;
      id v14 = +[NEPolicyCondition entitlement];
      v38[1] = v14;
      id v15 = +[NEPolicyCondition accountIdentifier:@"com.apple.remotepairing.devicecommunication"];
      void v38[2] = v15;
      uint64_t v16 = +[NSArray arrayWithObjects:v38 count:3];

      BOOL v17 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v4 conditions:v16];
      id v18 = [a1 addPolicy:v17];
      int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
      BOOL v20 = ne_log_obj();
      id v21 = v20;
      if (!v18)
      {
        BOOL v24 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
        if (is_debug_logging_enabled)
        {
          if (v24)
          {
            *(_DWORD *)long long buf = 138412290;
            long long v40 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication account id: %@", buf, 0xCu);
          }
        }
        else if (v24)
        {
          id v35 = [v17 descriptionWithIndent:0 options:2];
          *(_DWORD *)long long buf = 138412290;
          long long v40 = v35;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication account id: %@", buf, 0xCu);
        }
        uint64_t v22 = 0;
        id v11 = v17;
        id v10 = v16;
        goto LABEL_42;
      }
      if (is_debug_logging_enabled)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v40 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Added DeviceCommunication account id policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        unsigned __int16 v25 = [v17 descriptionWithIndent:0 options:2];
        *(_DWORD *)long long buf = 138412290;
        long long v40 = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Added DeviceCommunication account id policy: %@", buf, 0xCu);
      }
      ++*a2;
      id v26 = ne_log_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315394;
        long long v40 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        __int16 v41 = 2112;
        id v42 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for DeviceCommunication DIRECTLINK interfaces", buf, 0x16u);
      }

      uint64_t v27 = +[NEPolicyCondition scopedInterfaceFlags:0 eflags:0x20000000 xflags:0];
      uint64_t v37 = v27;
      id v10 = +[NSArray arrayWithObjects:&v37 count:1];

      id v11 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:*a2 result:v4 conditions:v10];
      id v28 = [a1 addPolicy:v11];
      int v29 = nelog_is_debug_logging_enabled();
      long long v30 = ne_log_obj();
      CFStringRef v31 = v30;
      if (v28)
      {
        if (v29)
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 138412290;
            long long v40 = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Added DeviceCommunication DIRECTLINK policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          long long v33 = [v11 descriptionWithIndent:0 options:2];
          *(_DWORD *)long long buf = 138412290;
          long long v40 = v33;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Added DeviceCommunication DIRECTLINK policy: %@", buf, 0xCu);
        }
        ++*a2;
        uint64_t v22 = 1;
        goto LABEL_42;
      }
      BOOL v32 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      if (v29)
      {
        if (v32)
        {
          *(_DWORD *)long long buf = 138412290;
          long long v40 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication DIRECTLINK: %@", buf, 0xCu);
        }
      }
      else if (v32)
      {
        char v36 = [v11 descriptionWithIndent:0 options:2];
        *(_DWORD *)long long buf = 138412290;
        long long v40 = v36;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to add policy for DeviceCommunication DIRECTLINK: %@", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        long long v40 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s: failed to add policy for TCP listeners", buf, 0xCu);
      }
    }
    uint64_t v22 = 0;
LABEL_42:

    goto LABEL_43;
  }
  uint64_t v22 = 0;
LABEL_43:

  return v22;
}

uint64_t sub_10005B1D4(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (v14)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v19 = v14;
    id v30 = [v19 countByEnumeratingWithState:&v39 objects:v44 count:16];
    if (v30)
    {
      uint64_t v20 = *(void *)v40;
      id v33 = v14;
      id v34 = v13;
      BOOL v32 = v19;
      uint64_t v29 = *(void *)v40;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v40 != v20) {
            objc_enumerationMutation(v19);
          }
          uint64_t v31 = v21;
          uint64_t v22 = *(void **)(*((void *)&v39 + 1) + 8 * v21);
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          id v23 = v13;
          id v24 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v36;
            while (2)
            {
              for (id i = 0; i != v25; id i = (char *)i + 1)
              {
                if (*(void *)v36 != v26) {
                  objc_enumerationMutation(v23);
                }
                if ((sub_10005734C(a1, a2, *(void **)(*((void *)&v35 + 1) + 8 * i), v22, 1, 0, 0, 0, 0, 0, 0, 0, 0, v15, v16, 0, v17, 1) & 1) == 0)
                {

                  uint64_t v18 = 0;
                  id v14 = v33;
                  id v13 = v34;
                  id v19 = v32;
                  goto LABEL_21;
                }
              }
              id v25 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }

          uint64_t v21 = v31 + 1;
          id v14 = v33;
          id v13 = v34;
          id v19 = v32;
          uint64_t v20 = v29;
        }
        while ((id)(v31 + 1) != v30);
        uint64_t v18 = 1;
        id v30 = [v32 countByEnumeratingWithState:&v39 objects:v44 count:16];
      }
      while (v30);
    }
    else
    {
      uint64_t v18 = 1;
    }
LABEL_21:
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

id sub_10005B438(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = [v2 alwaysOnVPN];

  id v4 = [v3 serviceExceptions];
  id v5 = [v4 objectForKeyedSubscript:@"CellularServices"];

  if (v5) {
    id v6 = [v5 action];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id sub_10005B4D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = [v2 alwaysOnVPN];

  id v4 = [v3 serviceExceptions];
  id v5 = [v4 objectForKeyedSubscript:@"VoiceMail"];

  if (v5) {
    id v6 = [v5 action];
  }
  else {
    id v6 = 0;
  }

  return v6;
}

uint64_t sub_10005B568(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (a4) {
    uint64_t v5 = 400;
  }
  else {
    uint64_t v5 = 100;
  }
  uint64_t v6 = sub_10005B600(a1, a2, a3, v5, 0, a5, 0);
  if ((v6 & 1) == 0)
  {
    id v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Control policies", v9, 2u);
    }
  }
  return v6;
}

uint64_t sub_10005B600(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, int a6, void *a7)
{
  id v13 = a5;
  id v14 = a7;
  if (a3)
  {
    if (a3 == 2)
    {
      id v17 = +[NEPolicyResult drop];
      goto LABEL_15;
    }
    if (a3 == 1)
    {
      if (a4 == 400 || a4 == 100)
      {
        id v15 = +[NEPolicyResult pass];
      }
      else
      {
        id v15 = +[NEPolicyResult skipWithOrder:0];
      }
      id v19 = v15;
      id v17 = v15;

      if (a6)
      {
        id v20 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
        uint64_t v21 = +[NEPolicyResult removeNetworkAgentUUID:v20];

        goto LABEL_16;
      }
LABEL_15:
      uint64_t v21 = 0;
LABEL_16:
      id v22 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"];
      id v23 = v22;
      if (!v22)
      {
        id v30 = ne_log_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v53 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter";
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        unsigned __int8 v51 = 0;
        goto LABEL_72;
      }
      long long v50 = v22;
      id v24 = +[NEProcessInfo copyUUIDsForExecutable:@"/Applications/InCallService.app/InCallService"];
      if (!v24)
      {
        uint64_t v31 = ne_log_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v53 = "/Applications/InCallService.app/InCallService";
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        unsigned __int8 v51 = 0;
        uint64_t v29 = 0;
        id v23 = v50;
        goto LABEL_71;
      }
      id v49 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper"];
      if (!v49)
      {
        BOOL v32 = ne_log_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v53 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper";
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        unsigned __int8 v51 = 0;
        uint64_t v29 = v24;
        id v33 = 0;
        id v23 = v50;
        goto LABEL_70;
      }
      id v48 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/PrivateFrameworks/GeoServices.framework/geod"];
      if (!v48)
      {
        id v34 = ne_log_obj();
        id v33 = v49;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v53 = "/System/Library/PrivateFrameworks/GeoServices.framework/geod";
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to get UUIDs for %s daemon", buf, 0xCu);
        }

        unsigned __int8 v51 = 0;
        uint64_t v29 = v24;
        id v23 = v50;
        long long v35 = 0;
        goto LABEL_69;
      }
      id v45 = +[NEProcessInfo copyNEHelperUUIDs];
      id v25 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"67A03811-DB0A-594E-C2AE-8B0517EDF26F"];
      id v59 = v25;
      unsigned int v47 = +[NSArray arrayWithObjects:&v59 count:1];

      id v26 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"569F2700-CAF9-483D-B19D-7AF406DCE15E"];
      id v58 = v26;
      int v46 = +[NSArray arrayWithObjects:&v58 count:1];

      id v27 = +[NEProcessInfo copyDNSUUIDs];
      if (!v27)
      {
        unsigned __int8 v51 = 0;
        uint64_t v29 = v24;
        id v33 = v49;
        id v23 = v50;
        long long v35 = v48;
LABEL_68:

LABEL_69:
LABEL_70:

LABEL_71:
LABEL_72:

        uint64_t v16 = v51;
        goto LABEL_73;
      }
      id v44 = v27;
      id v28 = ne_log_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315906;
        *(void *)long long v53 = "-[NEPolicySession(AlwaysOnVPN) addCellularServicesExceptionPoliciesWithOrder:action:useIPSec:pr"
                         "iority:primaryPhysicalInterface:isAOVPN:policyIDList:]";
        *(_WORD *)&v53[8] = 2112;
        *(void *)&v53[10] = v17;
        __int16 v54 = 2048;
        uint64_t v55 = a4;
        __int16 v56 = 2112;
        CFStringRef v57 = @"CellularServices";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s: Adding %@ <priority %ld> Exceptions policy for %@", buf, 0x2Au);
      }

      if (a4 == 100)
      {
        uint64_t v29 = v24;
        if (sub_100057FE4(a1, a2, 1, 0, v24, 1, 0, 0, 0, 0, 0, v17, v21, 0, v14))
        {
          unsigned __int8 v51 = 1;
LABEL_52:
          id v23 = v50;
LABEL_66:
          long long v35 = v48;
          id v33 = v49;
          goto LABEL_67;
        }
        long long v38 = ne_log_obj();
        id v33 = v49;
        id v23 = v50;
        long long v35 = v48;
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_48;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v53 = v17;
        *(_WORD *)&v53[8] = 2112;
        *(void *)&v53[10] = @"CellularServices";
        long long v42 = "Failed to add %@ policy for %@ (InCallService/InCallService)";
        goto LABEL_60;
      }
      uint64_t v29 = v24;
      if ((sub_100057FE4(a1, a2, 1, v47, v50, 1, 0, 0, 0, 0, 0, v17, v21, 0, v14) & 1) == 0)
      {
        long long v39 = ne_log_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v53 = v17;
          *(_WORD *)&v53[8] = 2112;
          *(void *)&v53[10] = @"CellularServices";
          _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to add %@ policy for %@ (CommCenter/IMS)", buf, 0x16u);
        }

        unsigned __int8 v51 = 0;
        goto LABEL_52;
      }
      id v23 = v50;
      if (sub_100057FE4(a1, a2, 1, v46, v50, 1, 0, 0, 0, 0, 0, v17, v21, 0, v14))
      {
        if (sub_10005B1D4(a1, a2, v50, v45, v17, v21, v14))
        {
          if (sub_100058348(a1, a2, 1, v47, 1, 0, 0, 0, 0, v17, v21, v14))
          {
            if (v13)
            {
              long long v36 = +[NEPolicyResult tunnelIPToInterfaceName:v13 secondaryResultType:1];

              id v33 = v49;
              id v17 = v36;
              if (sub_100057FE4(a1, a2, 1, 0, v49, 1, 0, 0, v13, 0, 0, v36, v21, 1, v14))
              {
LABEL_45:
                long long v37 = a1;
                long long v35 = v48;
                if (sub_100057FE4(v37, a2, 1, v33, v48, 1, 0, 0, v13, 0, @"com.apple.GeoServices.CountryCode", v17, v21, 1, v14))
                {
                  unsigned __int8 v51 = 1;
LABEL_67:
                  id v27 = v44;
                  goto LABEL_68;
                }
                long long v38 = ne_log_obj();
                if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                {
LABEL_48:

                  unsigned __int8 v51 = 0;
                  goto LABEL_67;
                }
                *(_DWORD *)long long buf = 138412546;
                *(void *)long long v53 = v17;
                *(_WORD *)&v53[8] = 2112;
                *(void *)&v53[10] = @"CellularServices";
                long long v42 = "Failed to add %@ policy for %@ (geod/CommCenterMobileHelper)";
LABEL_60:
                _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, v42, buf, 0x16u);
                goto LABEL_48;
              }
            }
            else
            {
              id v33 = v49;
              if (sub_100057FE4(a1, a2, 1, 0, v49, 1, 0, 0, 0, 0, 0, v17, v21, 1, v14)) {
                goto LABEL_45;
              }
            }
            long long v40 = ne_log_obj();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              *(void *)long long v53 = v17;
              *(_WORD *)&v53[8] = 2112;
              *(void *)&v53[10] = @"CellularServices";
              long long v41 = "Failed to add %@ policy for %@ (CommCenterMobileHelper/IMS)";
              goto LABEL_64;
            }
LABEL_65:

            unsigned __int8 v51 = 0;
            goto LABEL_66;
          }
          long long v40 = ne_log_obj();
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v53 = v17;
          *(_WORD *)&v53[8] = 2112;
          *(void *)&v53[10] = @"CellularServices";
          long long v41 = "Failed to add %@ policy for %@ (IMSUUIDs as effective UUIDs)";
        }
        else
        {
          long long v40 = ne_log_obj();
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v53 = v17;
          *(_WORD *)&v53[8] = 2112;
          *(void *)&v53[10] = @"CellularServices";
          long long v41 = "Failed to add %@ policy for %@ (NEHelper/CommCenter)";
        }
      }
      else
      {
        long long v40 = ne_log_obj();
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v53 = v17;
        *(_WORD *)&v53[8] = 2112;
        *(void *)&v53[10] = @"CellularServices";
        long long v41 = "Failed to add %@ policy for %@ (CommCenter/MMS)";
      }
LABEL_64:
      _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x16u);
      goto LABEL_65;
    }
    uint64_t v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)long long v53 = a3;
      *(_WORD *)&v53[4] = 2112;
      *(void *)&v53[6] = @"CellularServices";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
LABEL_73:

  return v16;
}

uint64_t sub_10005C050(void *a1, unsigned int *a2, uint64_t a3, void *a4, int a5, void *a6)
{
  id v11 = a4;
  id v12 = a6;
  if (!a1)
  {
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  if ((sub_10005B600(a1, a2, a3, 200, v11, a5, v12) & 1) == 0)
  {
    id v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Data policies", v16, 2u);
    }

    goto LABEL_7;
  }
  uint64_t v13 = 1;
LABEL_8:

  return v13;
}

BOOL sub_10005C130(void *a1, void *a2, unsigned int *a3, int a4, char a5, void *a6, void *a7, int a8, void *a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v16 = a2;
  id v17 = a6;
  uint64_t v18 = a7;
  id v19 = a9;
  id v96 = a1;
  if (!a1)
  {
    BOOL v101 = 0;
    goto LABEL_96;
  }
  if (v18)
  {
    if (a8)
    {
LABEL_4:
      id v20 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
      uint64_t v21 = +[NEPolicyResult removeNetworkAgentUUID:v20];

      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v18 = +[NEPolicyResult pass];
    if (a8) {
      goto LABEL_4;
    }
  }
  uint64_t v21 = 0;
LABEL_7:
  int v22 = a10;
  if (!a4) {
    goto LABEL_51;
  }
  CFStringRef v23 = (const __CFString *)+[NEProcessInfo copyUUIDsForBundleID:@"com.apple.WebSheet" uid:0];
  id v24 = ne_log_obj();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    __int16 v115 = 2112;
    CFStringRef v116 = @"com.apple.WebSheet";
    __int16 v117 = 2112;
    CFStringRef v118 = v23;
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
  }
  long long v98 = (__CFString *)v23;

  id v25 = (__CFString *)+[NEProcessInfo copyUUIDsForBundleID:@"com.apple.WebKit.Networking" uid:0];
  id v26 = ne_log_obj();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    __int16 v115 = 2112;
    CFStringRef v116 = @"com.apple.WebKit.Networking";
    __int16 v117 = 2112;
    CFStringRef v118 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
  }
  id v89 = v16;

  if (v25 && [(__CFString *)v25 count])
  {
    id v27 = v25;
    id v28 = v98;
    if (!v98) {
      goto LABEL_40;
    }
  }
  else
  {
    id v27 = (__CFString *)+[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking"];

    uint64_t v29 = ne_log_obj();
    id v28 = v98;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136315650;
      long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v115 = 2112;
      CFStringRef v116 = @"/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking";
      __int16 v117 = 2112;
      CFStringRef v118 = v27;
      _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s: UUIDs for %@ - %@", (uint8_t *)&buf, 0x20u);
    }

    if (!v98) {
      goto LABEL_40;
    }
  }
  if (v27)
  {
    id v93 = v27;
    id v30 = ne_log_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      int buf = 136315650;
      long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v115 = 2112;
      CFStringRef v116 = v18;
      __int16 v117 = 2112;
      CFStringRef v118 = @"com.apple.WebSheet";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s: Adding %@ policy for %@", (uint8_t *)&buf, 0x20u);
    }

    id v28 = v98;
    if ((sub_100057FE4(v96, a3, a10, 0, v98, a11, 0, 0, 0, 1, 0, v18, v21, 0, v19) & 1) == 0)
    {
      unsigned int v47 = ne_log_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        int buf = 136315650;
        long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        __int16 v115 = 2112;
        CFStringRef v116 = v18;
        __int16 v117 = 2112;
        CFStringRef v118 = @"com.apple.WebSheet";
        _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", (uint8_t *)&buf, 0x20u);
      }

      BOOL v101 = 0;
      goto LABEL_44;
    }
    id v78 = v17;
    int v76 = a8;
    id v91 = v98;
    uint64_t v31 = v27;
    BOOL v32 = v18;
    uint64_t v86 = v21;
    id v33 = v21;
    id v34 = v19;
    id v35 = +[NEProcessInfo copyDNSUUIDs];
    long long v88 = v31;
    if (v35)
    {
      long long v111 = 0u;
      long long v112 = 0u;
      memset(v110, 0, sizeof(v110));
      id obj = v31;
      id v74 = [(__CFString *)obj countByEnumeratingWithState:v110 objects:&buf count:16];
      if (v74)
      {
        uint64_t v36 = *(void *)v110[2];
        id v80 = v19;
        id v82 = v18;
        uint64_t v73 = *(void *)v110[2];
        do
        {
          uint64_t v37 = 0;
          do
          {
            if (*(void *)v110[2] != v36)
            {
              uint64_t v38 = v37;
              objc_enumerationMutation(obj);
              uint64_t v37 = v38;
            }
            uint64_t v75 = v37;
            long long v39 = *(void **)(v110[1] + 8 * v37);
            long long v102 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v40 = v91;
            id v41 = [(__CFString *)v40 countByEnumeratingWithState:&v102 objects:&v106 count:16];
            if (v41)
            {
              id v42 = v41;
              uint64_t v43 = *(void *)v103;
              while (2)
              {
                for (id i = 0; i != v42; id i = (char *)i + 1)
                {
                  if (*(void *)v103 != v43) {
                    objc_enumerationMutation(v40);
                  }
                  if ((sub_10005734C(v96, a3, *(void **)(*((void *)&v102 + 1) + 8 * i), v39, a11, 0, 0, v35, 0, 0, 0, 1, 0, v32, v33, 0, v34, a10) & 1) == 0)
                  {

                    char v46 = 0;
                    id v16 = v89;
                    id v17 = v78;
                    id v19 = v80;
                    uint64_t v18 = v82;
                    goto LABEL_48;
                  }
                }
                id v42 = [(__CFString *)v40 countByEnumeratingWithState:&v102 objects:&v106 count:16];
                if (v42) {
                  continue;
                }
                break;
              }
            }

            uint64_t v37 = v75 + 1;
            id v16 = v89;
            id v17 = v78;
            id v19 = v80;
            uint64_t v18 = v82;
            uint64_t v36 = v73;
          }
          while ((id)(v75 + 1) != v74);
          id v45 = [(__CFString *)obj countByEnumeratingWithState:v110 objects:&buf count:16];
          uint64_t v36 = v73;
          char v46 = 1;
          id v74 = v45;
        }
        while (v45);
      }
      else
      {
        char v46 = 1;
        id v17 = v78;
      }
LABEL_48:
    }
    else
    {
      char v46 = 0;
      id v17 = v78;
    }

    if ((v46 & 1) == 0)
    {
      uint64_t v72 = ne_log_obj();
      uint64_t v21 = v86;
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        int buf = 136315650;
        long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        __int16 v115 = 2112;
        CFStringRef v116 = v32;
        __int16 v117 = 2112;
        CFStringRef v118 = @"com.apple.WebSheet";
        _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ com.apple.WebKit.Networking policy for %@", (uint8_t *)&buf, 0x20u);
      }

      BOOL v101 = 0;
      id v28 = v98;
      id v27 = v93;
      goto LABEL_44;
    }

    uint64_t v21 = v86;
    int v22 = a10;
    a8 = v76;
LABEL_51:
    if ((a5 & 1) != 0 || v17 && [v17 count])
    {
      if (v16)
      {
        id v48 = v16;
        id v49 = v17;
        id v83 = v18;
        long long v50 = v18;
        id v77 = v19;
        id obja = v50;
        if (!v50)
        {
          id obja = +[NEPolicyResult pass];
        }
        long long v87 = v21;
        id v81 = v19;
        int v95 = v22;
        if (a8)
        {
          id v51 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
          unsigned __int8 v52 = +[NEPolicyResult removeNetworkAgentUUID:v51];
        }
        else
        {
          unsigned __int8 v52 = 0;
        }
        uint64_t v55 = v77;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        id v56 = v48;
        id v57 = [v56 countByEnumeratingWithState:&v106 objects:&buf count:16];
        id v58 = obja;
        if (v57)
        {
          id v59 = v57;
          id v79 = v17;
          id v90 = v16;
          id v60 = 0;
          uint64_t v99 = *(void *)v107;
          __int16 v61 = v56;
          id v92 = v49;
          long long v94 = v56;
          while (2)
          {
            for (j = 0; j != v59; j = (char *)j + 1)
            {
              __int16 v63 = v60;
              if (*(void *)v107 != v99) {
                objc_enumerationMutation(v61);
              }
              id v60 = *(id *)(*((void *)&v106 + 1) + 8 * (void)j);

              if ((a5 & 1) == 0)
              {
                if (!v49) {
                  continue;
                }
                CFStringRef v64 = [v49 objectForKeyedSubscript:v60];

                if (!v64) {
                  continue;
                }
              }
              id v65 = +[NEProcessInfo copyUUIDsForBundleID:v60 uid:0];
              SEL v66 = v65;
              if (v65 && [v65 count])
              {
                uint64_t v67 = ne_log_obj();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                {
                  LODWORD(v110[0]) = 136315906;
                  *(void *)((char *)v110 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v110[1]) = 2112;
                  *(void *)((char *)&v110[1] + 6) = obja;
                  HIWORD(v110[2]) = 2112;
                  v110[3] = v60;
                  LOWORD(v111) = 2112;
                  *(void *)((char *)&v111 + 2) = v66;
                  _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "%s: Adding %@ policy for %@, UUIDs %@", (uint8_t *)v110, 0x2Au);
                }

                if ((sub_100057FE4(v96, a3, v95, 0, v66, 1, 0, 0, 0, 0, 0, obja, v52, 0, v77) & 1) == 0)
                {
                  id v69 = ne_log_obj();
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v110[0]) = 136315650;
                    *(void *)((char *)v110 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v110[1]) = 2112;
                    id v58 = obja;
                    *(void *)((char *)&v110[1] + 6) = obja;
                    HIWORD(v110[2]) = 2112;
                    v110[3] = v60;
                    _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy for %@", (uint8_t *)v110, 0x20u);
                    id v16 = v90;
                    uint64_t v21 = v87;
                  }
                  else
                  {
                    id v16 = v90;
                    id v58 = obja;
                    uint64_t v21 = v87;
                  }
                  id v49 = v92;
                  uint64_t v55 = v77;
LABEL_93:

                  LOBYTE(v110[0]) = 0;
                  id v56 = v94;

                  id v17 = v79;
                  goto LABEL_94;
                }
                id v49 = v92;
                __int16 v61 = v94;
                if ((sub_100057FE4(v96, a3, v95, 0, v66, 0, @"com.apple.developer.networking.HotspotHelper", 0, 0, 0, 0, obja, v52, 0, v77) & 1) == 0)
                {
                  id v69 = ne_log_obj();
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v110[0]) = 136315650;
                    *(void *)((char *)v110 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v110[1]) = 2112;
                    *(void *)((char *)&v110[1] + 6) = obja;
                    HIWORD(v110[2]) = 2112;
                    v110[3] = v60;
                    _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%s: Failed to add %@ policy (custom captive entitlement) for %@", (uint8_t *)v110, 0x20u);
                  }
                  id v16 = v90;
                  uint64_t v21 = v87;
                  goto LABEL_93;
                }
              }
              else
              {
                uint64_t v68 = ne_log_obj();
                if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(v110[0]) = 136315394;
                  *(void *)((char *)v110 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v110[1]) = 2112;
                  *(void *)((char *)&v110[1] + 6) = v60;
                  _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "%s: Plugin %@ does not exist, may have been uninstalled", (uint8_t *)v110, 0x16u);
                }
              }
            }
            id v59 = [v61 countByEnumeratingWithState:&v106 objects:&buf count:16];
            if (v59) {
              continue;
            }
            break;
          }

          id v16 = v90;
          id v56 = v61;
          id v17 = v79;
        }

        LOBYTE(v110[0]) = 1;
        uint64_t v21 = v87;
LABEL_94:

        BOOL v101 = (v110[0] & 1) != 0;
        id v19 = v81;
        uint64_t v18 = v83;
        goto LABEL_95;
      }
      long long v53 = ne_log_obj();
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_62;
      }
      int buf = 136315138;
      long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v54 = "%s: No registered Captive Network Plugins";
    }
    else
    {
      long long v53 = ne_log_obj();
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
LABEL_62:

        BOOL v101 = 1;
        goto LABEL_95;
      }
      int buf = 136315138;
      long long v114 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v54 = "%s: No configuration for Captive Plugins";
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, v54, (uint8_t *)&buf, 0xCu);
    goto LABEL_62;
  }
LABEL_40:
  BOOL v101 = 0;
LABEL_44:

LABEL_95:
LABEL_96:

  return v101;
}

uint64_t sub_10005CE28(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (!a1) {
    goto LABEL_38;
  }
  unsigned int v211 = a3;
  id v11 = v9;
  id v12 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/nesessionmanager"];
  if (![v12 count]) {
    goto LABEL_12;
  }
  uint64_t v13 = ne_log_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for nesessionmanager", buf, 0xCu);
  }

  id v14 = +[NEPolicyResult pass];
  char v15 = sub_100057FE4((void *)a1, &v211, 1, 0, v12, 1, 0, 1, 0, 0, 0, v14, 0, 0, 0);

  if ((v15 & 1) == 0)
  {
    int v22 = ne_log_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%s: Failed to add PASS policy for nesessionmanager", buf, 0xCu);
    }

LABEL_12:
    CFStringRef v23 = ne_log_obj();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
LABEL_34:

      id v41 = ne_log_obj();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%s: evaluateConfigurationEssential failed", buf, 0xCu);
      }

      goto LABEL_37;
    }
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v24 = "%s: addSessionManagerWithOrder failed";
LABEL_40:
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, 0xCu);
    goto LABEL_34;
  }

  id v16 = v11;
  id v17 = v16;
  if (v16
    && ([v16 alwaysOnVPN], uint64_t v18 = objc_claimAutoreleasedReturnValue(), v18, v18))
  {
    id v19 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
    uint64_t v20 = +[NEPolicyResult removeNetworkAgentUUID:v19];

    uint64_t v21 = (void *)v20;
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v25 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/configd"];
  if (![v25 count]) {
    goto LABEL_33;
  }
  id v206 = a4;
  id v26 = ne_log_obj();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for configd", buf, 0xCu);
  }

  id v27 = +[NEPolicyResult pass];
  char v28 = sub_100057FE4((void *)a1, &v211, 1, 0, v25, 1, 0, 1, 0, 0, 0, v27, v21, 0, 0);

  uint64_t v29 = ne_log_obj();
  id v30 = v29;
  if ((v28 & 1) == 0)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%s: Failed to add PASS policy for configd", buf, 0xCu);
    }
    goto LABEL_32;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for captiveagent", buf, 0xCu);
  }

  id v30 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/captiveagent"];
  if (!v30)
  {
    long long v39 = ne_log_obj();
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
LABEL_31:

LABEL_32:
LABEL_33:

      CFStringRef v23 = ne_log_obj();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136315138;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
      id v24 = "%s: addConfigdWithOrder failed";
      goto LABEL_40;
    }
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    long long v40 = "%s: Failed to get UUIDs for captiveagent";
LABEL_83:
    _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, v40, buf, 0xCu);
    goto LABEL_31;
  }
  uint64_t v31 = +[NEPolicyResult pass];
  char v32 = sub_100057FE4((void *)a1, &v211, 1, 0, v30, 1, 0, 0, 0, 0, 0, v31, v21, 0, 0);

  if ((v32 & 1) == 0)
  {
    long long v39 = ne_log_obj();
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    long long v40 = "%s: Failed to add PASS policy for captiveagent";
    goto LABEL_83;
  }

  id v33 = v17;
  id v34 = &AnalyticsSendEventLazy_ptr;
  id v35 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter"];
  if (![v35 count])
  {

LABEL_77:
    CFStringRef v23 = ne_log_obj();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v24 = "%s: addCommCenterPathWithOrder failed";
    goto LABEL_40;
  }
  uint64_t v36 = [v33 alwaysOnVPN];

  if (v36)
  {
    uint64_t v37 = &AnalyticsSendEventLazy_ptr;
    id v38 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
    id v207 = +[NEPolicyResult removeNetworkAgentUUID:v38];

    id v34 = &AnalyticsSendEventLazy_ptr;
  }
  else
  {
    id v207 = 0;
    uint64_t v37 = &AnalyticsSendEventLazy_ptr;
  }
  uint64_t v43 = ne_log_obj();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)unsigned int v224 = 136315138;
    id v225 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%s: Adding PASS policy for CommCenter Path", v224, 0xCu);
  }

  long long v222 = 0u;
  long long v223 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  id v44 = v35;
  id v45 = [v44 countByEnumeratingWithState:&v220 objects:buf count:16];
  if (!v45) {
    goto LABEL_57;
  }
  id v46 = v45;
  id v199 = v9;
  id obj = v44;
  id v192 = v33;
  uint64_t v47 = *(void *)v221;
  uint64_t v48 = v211;
  while (2)
  {
    for (id i = 0; i != v46; id i = (char *)i + 1)
    {
      if (*(void *)v221 != v47) {
        objc_enumerationMutation(obj);
      }
      uint64_t v50 = *(void *)(*((void *)&v220 + 1) + 8 * i);
      id v51 = objc_alloc_init((Class)NSMutableArray);
      unsigned __int8 v52 = +[NEPolicyCondition effectiveApplication:v50];
      [v51 addObject:v52];

      long long v53 = +[NEPolicyCondition realApplication:v50];
      [v51 addObject:v53];

      __int16 v54 = +[NEPolicyCondition allInterfaces];
      [v51 addObject:v54];

      uint64_t v55 = +[NEPolicyCondition entitlement];
      [v51 addObject:v55];

      id v56 = +[NEPolicyCondition ipProtocol:0];
      [v51 addObject:v56];

      id v57 = v207;
      if (v207)
      {
        id v58 = [objc_alloc((Class)NEPolicy) initWithOrder:v48 result:v207 conditions:v51];
        if (![(id)a1 addPolicy:v58])
        {
          unsigned int v211 = v48;
          id v89 = ne_log_obj();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int v224 = 136315138;
            id v225 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
            id v90 = "%s: Failed to add removeNetworkAgent policy for CommCenter path";
            goto LABEL_106;
          }
LABEL_76:
          id v9 = v199;

          goto LABEL_77;
        }
        uint64_t v48 = (v48 + 1);
      }
      id v59 = objc_alloc((Class)NEPolicy);
      id v60 = +[NEPolicyResult pass];
      id v58 = [v59 initWithOrder:v48 result:v60 conditions:v51];

      if (![(id)a1 addPolicy:v58])
      {
        unsigned int v211 = v48;
        id v89 = ne_log_obj();
        id v57 = v207;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v224 = 136315138;
          id v225 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
          id v90 = "%s: Failed to add Pass policy for CommCenter path";
LABEL_106:
          _os_log_error_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, v90, v224, 0xCu);
          goto LABEL_76;
        }
        goto LABEL_76;
      }
      uint64_t v48 = (v48 + 1);
    }
    id v46 = [obj countByEnumeratingWithState:&v220 objects:buf count:16];
    if (v46) {
      continue;
    }
    break;
  }
  unsigned int v211 = v48;
  id v9 = v199;
  uint64_t v37 = &AnalyticsSendEventLazy_ptr;
  id v34 = &AnalyticsSendEventLazy_ptr;
  id v33 = v192;
  id v44 = obj;
LABEL_57:

  id v61 = [v34[484] copyDNSUUIDs];
  if (!v61)
  {
LABEL_80:
    CFStringRef v23 = ne_log_obj();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v24 = "%s: addmDNSResponderWithOrder failed";
    goto LABEL_40;
  }
  long long v222 = 0u;
  long long v223 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  id v62 = v61;
  id v63 = [v62 countByEnumeratingWithState:&v220 objects:buf count:16];
  if (v63)
  {
    id v64 = v63;
    id v193 = v33;
    id v196 = v10;
    id v200 = v9;
    id obja = *(id *)v221;
    uint64_t v208 = v211;
    while (2)
    {
      for (j = 0; j != v64; j = (char *)j + 1)
      {
        if (*(id *)v221 != obja) {
          objc_enumerationMutation(v62);
        }
        SEL v66 = v62;
        uint64_t v67 = *(void *)(*((void *)&v220 + 1) + 8 * (void)j);
        id v68 = objc_alloc_init((Class)NSMutableArray);
        id v69 = +[NEPolicyCondition effectiveApplication:v67];
        [v68 addObject:v69];

        id v70 = +[NEPolicyCondition realApplication:v67];
        [v68 addObject:v70];

        int v71 = +[NEPolicyCondition allInterfaces];
        [v68 addObject:v71];

        uint64_t v72 = +[NEPolicyCondition entitlement];
        [v68 addObject:v72];

        uint64_t v73 = +[NEPolicyCondition ipProtocol:0];
        [v68 addObject:v73];

        id v74 = objc_alloc((Class)NEPolicy);
        uint64_t v75 = +[NEPolicyResult pass];
        id v76 = [v74 initWithOrder:(char *)j + v208 result:v75 conditions:v68];
        id v77 = [(id)a1 addPolicy:v76];

        if (!v77)
        {

          id v10 = v196;
          id v9 = v200;
          goto LABEL_80;
        }

        id v62 = v66;
      }
      uint64_t v208 = (v208 + j);
      id v64 = [v66 countByEnumeratingWithState:&v220 objects:buf count:16];
      if (v64) {
        continue;
      }
      break;
    }
    unsigned int v211 = v208;
    id v10 = v196;
    id v9 = v200;
    uint64_t v37 = &AnalyticsSendEventLazy_ptr;
    id v33 = v193;
  }

  id v78 = v33;
  id v79 = [v78 alwaysOnVPN];

  id objb = v79;
  if (!v79)
  {
    id v201 = v9;
    id v91 = [v78 VPN];
    id v92 = [v91 protocol];
    unsigned int v93 = [v92 excludeLocalNetworks];

    if (v93)
    {
      long long v94 = [v78 VPN];
      int v95 = [v94 protocol];
      unsigned int v96 = [v95 excludeDeviceCommunication];

      uint64_t v97 = v96 ^ 1;
      uint64_t v190 = 1;
    }
    else
    {
      uint64_t v97 = 0;
      uint64_t v190 = 0;
    }
    BOOL v101 = [v78 VPN];
    long long v102 = [v101 protocol];
    unsigned int v103 = [v102 excludeCellularServices];

    long long v104 = [v78 VPN];
    long long v105 = [v104 protocol];
    unsigned int v106 = [v105 excludeAPNs];

    long long v107 = [v78 VPN];
    long long v108 = [v107 protocol];
    unsigned int v109 = [v108 excludeDeviceCommunication];

    if (v109) {
      uint64_t v110 = 1;
    }
    else {
      uint64_t v110 = v97;
    }
    id v194 = (id)v110;
    id v9 = v201;
    if ((v106 | v93) == 1)
    {
      long long v111 = ne_log_obj();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        long long v112 = "";
        long long v113 = "APNS ";
        if (!v106) {
          long long v113 = "";
        }
        if (v93) {
          long long v112 = "Sharingd ";
        }
        *(_DWORD *)int buf = 136315394;
        long long v213 = v113;
        __int16 v214 = 2080;
        CFStringRef v215 = (const __CFString *)v112;
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions <%s%s>", buf, 0x16u);
      }
    }
    id v209 = (id)v103;
    if (!v106)
    {
LABEL_123:
      if (v93)
      {
        long long v133 = +[NEPolicyResult pass];
        id v134 = +[NEProcessInfo copyUUIDsForExecutable:@"/usr/libexec/sharingd"];
        uint64_t v135 = ne_log_obj();
        id v136 = v135;
        if (!v134)
        {
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int v224 = 136315394;
            id v225 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
            __int16 v226 = 2112;
            CFStringRef v227 = @"sharingd";
            _os_log_error_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "%s: failed to get UUIDs for %@ daemon", v224, 0x16u);
          }
LABEL_142:

          long long v129 = ne_log_obj();
          if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_ERROR, "Failed to handle sharingd-8770 exception", buf, 2u);
          }
          id v79 = 0;
LABEL_145:
          uint64_t v100 = (uint64_t)v209;

          goto LABEL_146;
        }
        if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)unsigned int v224 = 136315650;
          id v225 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
          __int16 v226 = 2112;
          CFStringRef v227 = v133;
          __int16 v228 = 2112;
          CFStringRef v229 = @"sharingd";
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@", v224, 0x20u);
        }
        id v197 = v10;

        long long v222 = 0u;
        long long v223 = 0u;
        long long v220 = 0u;
        long long v221 = 0u;
        id v136 = v134;
        id v137 = [v136 countByEnumeratingWithState:&v220 objects:buf count:16];
        if (v137)
        {
          id v138 = v137;
          uint64_t v139 = *(void *)v221;
          while (2)
          {
            for (k = 0; k != v138; k = (char *)k + 1)
            {
              if (*(void *)v221 != v139) {
                objc_enumerationMutation(v136);
              }
              id v141 = *(void **)(*((void *)&v220 + 1) + 8 * (void)k);
              if (!sub_100058ECC((void *)a1, &v211, 0, v141, @"8770", 1)
                || !sub_100058ECC((void *)a1, &v211, 0, v141, @"8770", 0))
              {
                id v10 = v197;
                id v9 = v201;
                goto LABEL_142;
              }
            }
            id v138 = [v136 countByEnumeratingWithState:&v220 objects:buf count:16];
            if (v138) {
              continue;
            }
            break;
          }
        }

        id v10 = v197;
        id v9 = v201;
      }
      id v79 = 0;
      goto LABEL_138;
    }
    long long v114 = +[NEPolicyResult pass];
    id v115 = +[NEProcessInfo copyUUIDsForExecutable:@"/System/Library/PrivateFrameworks/ApplePushService.framework/apsd"];
    CFStringRef v116 = ne_log_obj();
    __int16 v117 = v116;
    if (v115)
    {
      if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315650;
        long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
        __int16 v214 = 2112;
        CFStringRef v215 = (const __CFString *)v114;
        __int16 v216 = 2112;
        long long v217 = @"APSD";
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_INFO, "%s: Adding %@ Exceptions policy for %@", buf, 0x20u);
      }

      if (sub_100057FE4((void *)a1, &v211, 1, 0, v115, 1, 0, 0, 0, 0, 0, v114, 0, 0, 0))
      {

LABEL_122:
        goto LABEL_123;
      }
      __int16 v117 = ne_log_obj();
      if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
LABEL_120:

        long long v114 = ne_log_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "Failed to handle apsd exception", buf, 2u);
        }
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136315650;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      __int16 v214 = 2112;
      CFStringRef v215 = (const __CFString *)v114;
      __int16 v216 = 2112;
      long long v217 = @"APSD";
      long long v130 = "%s: Failed to add %@ policy for %@";
      long long v131 = v117;
      uint32_t v132 = 32;
    }
    else
    {
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR)) {
        goto LABEL_120;
      }
      *(_DWORD *)int buf = 136315394;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      __int16 v214 = 2112;
      CFStringRef v215 = @"APSD";
      long long v130 = "%s: failed to get UUIDs for %@ daemon";
      long long v131 = v117;
      uint32_t v132 = 22;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_ERROR, v130, buf, v132);
    goto LABEL_120;
  }
  id v80 = [v78 alwaysOnVPN];
  id v81 = [v80 serviceExceptions];

  if (v81)
  {
    id v82 = ne_log_obj();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      id v83 = [v78 alwaysOnVPN];
      id v84 = [v83 serviceExceptions];
      *(_DWORD *)int buf = 138412290;
      long long v213 = v84;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Service Exceptions %@", buf, 0xCu);
    }
    id v85 = v78;
    self;
    uint64_t v86 = [v85 alwaysOnVPN];

    long long v87 = [v86 serviceExceptions];
    long long v88 = [v87 objectForKeyedSubscript:@"AirPrint"];

    if (v88) {
      uint64_t v190 = (uint64_t)[v88 action];
    }
    else {
      uint64_t v190 = 0;
    }

    id v209 = sub_10005B438((uint64_t)NEPolicySession, v85);
    id v118 = v85;
    self;
    long long v119 = [v118 alwaysOnVPN];

    uint64_t v120 = [v119 serviceExceptions];
    long long v121 = [v120 objectForKeyedSubscript:@"DeviceCommunication"];

    if (v121) {
      id v122 = [v121 action];
    }
    else {
      id v122 = 0;
    }

    long long v123 = [v118 alwaysOnVPN];
    long long v124 = [v123 serviceExceptions];
    long long v125 = [v124 objectForKeyedSubscript:@"AirDrop"];
    id v194 = v122;
    if (v125)
    {

      goto LABEL_114;
    }
    long long v126 = [v118 alwaysOnVPN];
    long long v127 = [v126 serviceExceptions];
    long long v128 = [v127 objectForKeyedSubscript:@"AirPlay"];

    if (v128)
    {
LABEL_114:
      long long v129 = ne_log_obj();
      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        long long v213 = "-[NEPolicySession(AlwaysOnVPN) addServiceExceptionsWithOrder:configuration:IMSUseIPSec:dropAllLevel:]";
        _os_log_error_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_ERROR, "%s: AirDrop / AirPlay Service Exception not supported yet", buf, 0xCu);
      }
      id v79 = objb;
      goto LABEL_145;
    }
    id v79 = objb;
LABEL_138:
    uint64_t v100 = (uint64_t)v209;
LABEL_146:
    if (v194 == (id)1 && (sub_10005AA50((void *)a1, &v211) & 1) == 0)
    {
      id v142 = ne_log_obj();
      uint64_t v37 = &AnalyticsSendEventLazy_ptr;
      if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "Failed to handle device communication exception", buf, 2u);
      }
      id v98 = v78;
    }
    else
    {
      id v98 = v78;
      uint64_t v37 = &AnalyticsSendEventLazy_ptr;
    }
    uint64_t v99 = v190;
  }
  else
  {
    id v98 = v78;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
  }
  uint64_t v143 = v99;
  if (!(v99 | v100))
  {
    id v148 = v98;
    goto LABEL_204;
  }
  unsigned __int8 v144 = ne_log_obj();
  if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
  {
    __int16 v145 = "";
    id v146 = "AirPrint ";
    if (!v143) {
      id v146 = "";
    }
    if (v100) {
      __int16 v145 = "CellularServices ";
    }
    *(_DWORD *)int buf = 136315394;
    long long v213 = v146;
    __int16 v214 = 2080;
    CFStringRef v215 = (const __CFString *)v145;
    _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions <%s%s>", buf, 0x16u);
  }

  if (v143 == 2)
  {
    id v198 = v10;
    id v202 = v9;
    uint64_t v150 = [v37[480] drop];
    long long v195 = 0;
    id v148 = v98;
    goto LABEL_170;
  }
  BOOL v147 = v143 == 1;
  id v148 = v98;
  if (!v147) {
    goto LABEL_204;
  }
  uint64_t v149 = ne_log_obj();
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "%s: Adding pass policy for Bonjour traffic", buf, 0xCu);
  }

  if (sub_100059278((void *)a1, &v211))
  {
    id v198 = v10;
    id v202 = v9;
    uint64_t v150 = [v37[480] pass];
    if (v79)
    {
      unsigned int v151 = v37[480];
      id v152 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&unk_1000A6400];
      long long v195 = [v151 removeNetworkAgentUUID:v152];
    }
    else
    {
      long long v195 = 0;
    }
LABEL_170:
    uint64_t v210 = v100;
    id v153 = +[NEPolicyCondition allInterfaces];
    *(void *)&long long v220 = v153;
    id v154 = +[NEPolicyCondition entitlement];
    *((void *)&v220 + 1) = v154;
    id v155 = +[NEPolicyCondition accountIdentifier:@"com.apple.PrintKit.PrinterTool"];
    *(void *)&long long v221 = v155;
    uint64_t v156 = +[NSArray arrayWithObjects:&v220 count:3];

    id v157 = objc_alloc((Class)NEPolicy);
    uint64_t v158 = v211;
    id v189 = [v157 initWithOrder:v211 result:v150 conditions:v156];
    id v159 = ne_log_obj();
    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
      __int16 v214 = 2112;
      CFStringRef v215 = v195;
      __int16 v216 = 2080;
      long long v217 = "com.apple.PrintKit.PrinterTool";
      __int16 v218 = 1024;
      int v219 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
    }

    id v160 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:v158 result:v195 conditions:v156];
    id v161 = [(id)a1 addPolicy:v160];
    int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    id v163 = ne_log_obj();
    id v164 = v163;
    id v191 = (void *)v156;
    if (v161)
    {
      id v9 = v202;
      if (is_debug_logging_enabled)
      {
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412290;
          long long v213 = v160;
          _os_log_debug_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v163, OS_LOG_TYPE_INFO))
      {
        int v167 = [v160 descriptionWithIndent:0 options:2];
        *(_DWORD *)int buf = 138412290;
        long long v213 = v167;
        _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
      unsigned int v211 = v158 + 1;
      id v168 = ne_log_obj();
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315906;
        long long v213 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
        __int16 v214 = 2112;
        CFStringRef v215 = (const __CFString *)v150;
        __int16 v216 = 2080;
        long long v217 = "com.apple.PrintKit.PrinterTool";
        __int16 v218 = 1024;
        int v219 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEBUG, "%s: Adding policy %@ for account id %s (priority %d)", buf, 0x26u);
      }

      id v160 = (char *)[objc_alloc((Class)NEPolicy) initWithOrder:(v158 + 1) result:v150 conditions:v191];
      id v169 = [(id)a1 addPolicy:v160];
      int v170 = nelog_is_debug_logging_enabled();
      os_log_t v171 = ne_log_obj();
      id v164 = v171;
      if (v169)
      {
        id v172 = (void *)v150;
        id v10 = v198;
        if (v170)
        {
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 138412290;
            long long v213 = v160;
            _os_log_debug_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v171, OS_LOG_TYPE_INFO))
        {
          unsigned int v174 = [v160 descriptionWithIndent:0 options:2];
          *(_DWORD *)int buf = 138412290;
          long long v213 = v174;
          _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }
        unsigned int v211 = v158 + 2;

        id v79 = objb;
        uint64_t v100 = v210;
        goto LABEL_204;
      }
      id v166 = (void *)v150;
      BOOL v173 = os_log_type_enabled(v171, OS_LOG_TYPE_ERROR);
      if (v170)
      {
        if (v173)
        {
          *(_DWORD *)int buf = 138412290;
          long long v213 = v160;
          _os_log_error_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
      }
      else if (v173)
      {
        long long v188 = [v160 descriptionWithIndent:0 options:2];
        *(_DWORD *)int buf = 138412290;
        long long v213 = v188;
        _os_log_error_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }
    else
    {
      BOOL v165 = os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
      id v166 = (void *)v150;
      if (is_debug_logging_enabled)
      {
        if (v165)
        {
          *(_DWORD *)int buf = 138412290;
          long long v213 = v160;
          _os_log_error_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }
      }
      else if (v165)
      {
        uint64_t v187 = [v160 descriptionWithIndent:0 options:2];
        *(_DWORD *)int buf = 138412290;
        long long v213 = v187;
        _os_log_error_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
      id v9 = v202;
    }
    id v10 = v198;

    id v79 = objb;
    uint64_t v100 = v210;
  }
  id v175 = ne_log_obj();
  if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_ERROR, "Failed to handle AirPrint exception", buf, 2u);
  }

LABEL_204:
  if (sub_10005B568((void *)a1, &v211, v100, 0, v79 != 0))
  {
    if (v206)
    {
      uint64_t v176 = 2;
      if (v100 == 1) {
        uint64_t v176 = 3;
      }
      uint64_t *v206 = v176;
    }
  }
  else
  {
    int v177 = ne_log_obj();
    if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - Control", buf, 2u);
    }
  }
  unsigned int v178 = [v148 alwaysOnVPN];

  if (v178)
  {
    id v179 = [v148 alwaysOnVPN];
    int v180 = [v179 isAllowCaptiveWebSheet];

    id v181 = [v148 alwaysOnVPN];
    char v182 = [v181 isAllowAllCaptiveNetworkPlugins];

    long long v183 = [v148 alwaysOnVPN];
    unsigned int v178 = [v183 allowedCaptiveNetworkPlugins];
  }
  else
  {
    char v182 = 1;
    int v180 = 1;
  }
  long long v184 = [v148 alwaysOnVPN];
  BOOL v185 = sub_10005C130((void *)a1, v10, &v211, v180, v182, v178, 0, v184 != 0, 0, 1u, 1u);

  if (v185)
  {

    a1 = 1;
    goto LABEL_38;
  }
  unsigned __int8 v186 = ne_log_obj();
  if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315138;
    long long v213 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
    _os_log_error_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_ERROR, "%s: addAllowedCaptiveNetworkPluginsToPolicySession failed", buf, 0xCu);
  }

LABEL_37:
  a1 = 0;
LABEL_38:

  return a1;
}

BOOL sub_10005ED28(void *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    unsigned int v36 = a3;
    id v9 = [v7 alwaysOnVPN];

    if (v9)
    {
      uint64_t v10 = (uint64_t)sub_10005B4D0((uint64_t)NEPolicySession, v8);
      uint64_t v11 = (uint64_t)sub_10005B438((uint64_t)NEPolicySession, v8);
      id v12 = [v8 alwaysOnVPN];
      uint64_t v13 = [v12 applicationExceptions];
    }
    else
    {
      id v14 = [v8 VPN];
      char v15 = [v14 protocol];
      unsigned int v16 = [v15 excludeCellularServices];

      uint64_t v11 = v16;
      id v17 = [v8 VPN];
      uint64_t v18 = [v17 protocol];
      unsigned int v19 = [v18 excludeLocalNetworks];
      uint64_t v20 = &off_1000C9A18;
      if (v19) {
        uint64_t v20 = 0;
      }
      uint64_t v21 = v20;

      id v12 = +[NEPolicyResult pass];
      sub_10005F1A8(a1, a3, v21, v12, 0);

      uint64_t v13 = 0;
      uint64_t v10 = v11;
    }

    int v22 = +[NEPolicyResult pass];
    BOOL v23 = sub_100058574((BOOL)a1, &v36, v22, 0);

    if (!v23)
    {
      id v24 = ne_log_obj();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to add icmpv6 exception - policies at High Priority", buf, 2u);
      }
    }
    if (v10 | v11)
    {
      id v25 = ne_log_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = "";
        id v27 = "VoiceMail ";
        if (!v10) {
          id v27 = "";
        }
        if (v11) {
          id v26 = "CellularServices ";
        }
        *(_DWORD *)int buf = 136315394;
        id v38 = v27;
        __int16 v39 = 2080;
        long long v40 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Installing VPN Service Exceptions - policies at High Priority <%s%s>", buf, 0x16u);
      }
    }
    if ((sub_10005973C(a1, &v36, v10, 1, v9 != 0, 0) & 1) == 0)
    {
      char v28 = ne_log_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to handle VoiceMail exception - policies at High Priority", buf, 2u);
      }
    }
    if (sub_10005B568(a1, &v36, v11, 1, v9 != 0))
    {
      if (a4)
      {
        uint64_t v29 = 2;
        if (v11 == 1) {
          uint64_t v29 = 3;
        }
        *a4 = v29;
      }
    }
    else
    {
      id v30 = ne_log_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to handle CellularServices exception - policies at High Priority", buf, 2u);
      }
    }
    if (v13 && [v13 count])
    {
      uint64_t v31 = ne_log_obj();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 138412290;
        id v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Installing VPN Application Exceptions - policies at High Priority %@", buf, 0xCu);
      }

      char v32 = [v8 alwaysOnVPN];
      char v33 = sub_100059DA0(a1, &v36, v13, 0, 400, v32 != 0, 0);

      if ((v33 & 1) == 0)
      {
        id v34 = ne_log_obj();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to add application exceptions- policies at High Priority", buf, 2u);
        }
      }
    }
  }
  return a1 != 0;
}

void sub_10005F1A8(void *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  unsigned __int8 v52 = a1;
  if (!a1) {
    goto LABEL_18;
  }
  long long v53 = 0;
  uint64_t v12 = nwi_state_copy();
  if (!v12)
  {
    unsigned int v14 = 0;
    goto LABEL_8;
  }
  unsigned int interface_names = nwi_state_get_interface_names();
  unsigned int v14 = interface_names;
  if (!interface_names)
  {
LABEL_8:
    char v15 = 0;
    goto LABEL_9;
  }
  char v15 = malloc_type_calloc(interface_names, 8uLL, 0x50040EE9192B6uLL);
  if (v15)
  {
    unsigned int v14 = nwi_state_get_interface_names();
    if (v14) {
      goto LABEL_9;
    }
    free(v15);
    goto LABEL_8;
  }
  unsigned int v14 = 0;
LABEL_9:
  id v16 = objc_alloc_init((Class)NSMutableDictionary);
  if (v9 && [v9 count]) {
    [v16 addEntriesFromDictionary:v9];
  }
  if (getifaddrs(&v53))
  {
    if (!v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  unsigned int v49 = a2;
  uint64_t v18 = v53;
  if (!v53)
  {
    id v42 = 0;
LABEL_51:
    freeifaddrs(v42);
    if (!v15) {
      goto LABEL_15;
    }
LABEL_14:
    free(v15);
LABEL_15:
    if (v12) {
      nwi_state_release();
    }
    goto LABEL_17;
  }
  uint64_t v50 = v11;
  id v46 = v9;
  if (v14) {
    BOOL v19 = v15 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  int v20 = !v19;
  uint64_t v21 = v14;
  *(void *)&long long v17 = 138412290;
  long long v45 = v17;
  uint64_t v47 = v14;
  id v48 = v10;
  while (1)
  {
    ifa_name = v18->ifa_name;
    if (ifa_name && *ifa_name)
    {
      int sa_family = v18->ifa_addr->sa_family;
      if (sa_family == 30 || sa_family == 2)
      {
        uint64_t v25 = v21;
        id v26 = (const char **)v15;
        if (v20)
        {
          while (strcmp(ifa_name, *v26))
          {
            ++v26;
            if (!--v25) {
              goto LABEL_37;
            }
          }
          goto LABEL_47;
        }
LABEL_37:
        id v27 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", ifa_name, v45);
        char v28 = [v16 objectForKeyedSubscript:v27];

        if (!v28) {
          break;
        }
      }
    }
LABEL_47:
    uint64_t v18 = v18->ifa_next;
    if (!v18)
    {
      id v42 = v53;
      id v9 = v46;
      id v11 = v50;
      goto LABEL_51;
    }
  }
  uint64_t v29 = +[NSString stringWithUTF8String:v18->ifa_name];
  uint64_t v30 = +[NEPolicyCondition scopedInterface:v29];

  id v31 = objc_alloc_init((Class)NSMutableArray);
  id v51 = (void *)v30;
  uint64_t v56 = v30;
  char v32 = +[NSArray arrayWithObjects:&v56 count:1];
  char v33 = [v31 arrayByAddingObjectsFromArray:v32];

  id v34 = [objc_alloc((Class)NEPolicy) initWithOrder:v49 result:v10 conditions:v33];
  id v35 = [v52 addPolicy:v34];
  int is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  uint64_t v37 = ne_log_obj();
  id v38 = v37;
  if (v35)
  {
    if (is_debug_logging_enabled)
    {
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v45;
        id v55 = v34;
        _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      __int16 v39 = [v34 descriptionWithIndent:0 options:2];
      *(_DWORD *)int buf = v45;
      id v55 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }
    if (v50)
    {
      long long v40 = +[NSNumber numberWithUnsignedInteger:v35];
      [v50 addObject:v40];
    }
    id v41 = +[NSString stringWithUTF8String:v18->ifa_name];
    [v16 setObject:&off_1000C9858 forKeyedSubscript:v41];

    uint64_t v21 = v47;
    id v10 = v48;
    goto LABEL_47;
  }
  BOOL v43 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  if (is_debug_logging_enabled)
  {
    id v11 = v50;
    if (v43)
    {
      *(_DWORD *)int buf = v45;
      id v55 = v34;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
  }
  else
  {
    id v11 = v50;
    if (v43)
    {
      id v44 = [v34 descriptionWithIndent:0 options:2];
      *(_DWORD *)int buf = v45;
      id v55 = v44;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      id v11 = v50;
    }
  }

  id v9 = v46;
  id v10 = v48;
LABEL_17:

LABEL_18:
}

id sub_100060868(uint64_t a1, const char *a2)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id result = objc_getProperty(result, a2, 16, 1);
    if (result)
    {
      id v4 = *(void **)(a1 + 32);
      return [v4 handleTimeout];
    }
  }
  return result;
}

void sub_100060CE8(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_msgSend(objc_getProperty(a1, a2, 16, 1), "restartPending"))
    {
      id v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = (objc_class *)objc_opt_class();
        uint64_t v6 = NSStringFromClass(v5);
        int v17 = 138412546;
        uint64_t v18 = a1;
        __int16 v19 = 2112;
        int v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ in state %@: restarting", (uint8_t *)&v17, 0x16u);
      }
      [objc_getProperty(a1, v7, 16, 1) setRestartPending:0];
      id Property = objc_getProperty(a1, v8, 16, 1);
      BOOL v11 = sub_1000769B4(Property, v10);
      id v13 = objc_getProperty(a1, v12, 16, 1);
      if (v11)
      {
        uint64_t v14 = 2;
      }
      else
      {
        [v13 setLastStopReason:6];
        id v13 = objc_getProperty(a1, v16, 16, 1);
        uint64_t v14 = 1;
      }
      sub_100075D24((id *)v13, (const char *)v14);
    }
    else
    {
      char v15 = (id *)objc_getProperty(a1, v3, 16, 1);
      sub_100075D24(v15, (const char *)1);
    }
  }
}

void sub_1000611D8(uint64_t a1, const char *a2)
{
}

void sub_100061B64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100061B88(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t, uint64_t))(qword_1000D7C28 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(a1 + 40);
    v2(v4, v5);
  }
}

void sub_100061C1C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    Maiid n = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v2);

    uint64_t v4 = CFRunLoopGetMain();
    CFRunLoopWakeUp(v4);
  }
}

void sub_100061C78(id a1)
{
  CFURLRef v1 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)"/System/Library/SystemConfiguration/PPPController.bundle", 56, 0);
  id v2 = CFBundleCreate(kCFAllocatorDefault, v1);
  qword_1000D7C38 = (uint64_t)v2;
  if (!v2)
  {
    uint64_t v4 = ne_log_obj();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
LABEL_7:

      goto LABEL_8;
    }
    LOWORD(v6[0]) = 0;
    uint64_t v5 = "Failed to create a CFBundle for PPPController.bundle";
LABEL_10:
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)v6, 2u);
    goto LABEL_7;
  }
  DataPointerForName = (uint64_t (*)(_OWORD *, uint64_t))CFBundleGetDataPointerForName(v2, @"ne_sm_bridge_copy_functions");
  if (!DataPointerForName)
  {
    uint64_t v4 = ne_log_obj();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    LOWORD(v6[0]) = 0;
    uint64_t v5 = "Failed to get the \"copy functions\" function pointer from PPPController.bundle";
    goto LABEL_10;
  }
  v6[2] = *(_OWORD *)off_1000C63E0;
  v6[3] = *(_OWORD *)&off_1000C63F0;
  void v6[4] = *(_OWORD *)off_1000C6400;
  void v6[5] = *(_OWORD *)off_1000C6410;
  v6[0] = *(_OWORD *)&off_1000C63C0;
  v6[1] = *(_OWORD *)off_1000C63D0;
  qword_1000D7C28 = DataPointerForName(v6, qword_1000D7C38);
LABEL_8:
  CFRelease(v1);
}

void sub_100061DA8(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100061E58;
  v6[3] = &unk_1000C6B78;
  id v7 = v3;
  uint64_t v8 = a2;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100061E58(uint64_t a1)
{
  if (!CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecXAuthPassword))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecSharedSecret))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v5, 360, 1);
      }
      id v8 = [Property type];
      id v9 = *(id *)(a1 + 32);
      if (v8 == (id)1) {
        goto LABEL_13;
      }
      if (v9) {
        id v9 = objc_getProperty(v9, v7, 360, 1);
      }
      if ([v9 type] == (id)2)
      {
        id v9 = *(id *)(a1 + 32);
LABEL_13:
        if (v9) {
          id v9 = objc_getProperty(v9, v7, 360, 1);
        }
        uint64_t v4 = [v9 sharedSecretKeychainItem];
        goto LABEL_16;
      }
    }
    id v10 = 0;
    goto LABEL_22;
  }
  id v3 = *(id *)(a1 + 32);
  if (v3) {
    id v3 = objc_getProperty(v3, v2, 360, 1);
  }
  uint64_t v4 = [v3 passwordKeychainItem];
LABEL_16:
  id v10 = v4;
  if (v4)
  {
    BOOL v11 = [v4 identifier];

    if (v11)
    {
      SEL v12 = ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)int buf = 138412546;
        uint64_t v24 = v13;
        __int16 v25 = 2112;
        uint64_t v26 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@ throwing away saved %@", buf, 0x16u);
      }

      [v10 setIdentifier:0];
      char v15 = +[NEConfigurationManager sharedManagerForAllUsers];
      SEL v16 = [*(id *)(a1 + 32) configuration];
      int v17 = [*(id *)(a1 + 32) queue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000620C4;
      v20[3] = &unk_1000C6428;
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v21 = v18;
      uint64_t v22 = v19;
      [v15 saveConfiguration:v16 withCompletionQueue:v17 handler:v20];
    }
  }
LABEL_22:
}

void sub_1000620C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412802;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to clear saved %@: %@", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_10006219C(void *a1, const char *a2)
{
  id v3 = a1;
  if (a2)
  {
    size_t v4 = strlen(a2);
    if (v4)
    {
      size_t v5 = v4;
      size_t v6 = v4 + 73;
      int v7 = (char *)malloc_type_malloc(v4 + 73, 0xD2DEECA7uLL);
      if (v7)
      {
        uint64_t v8 = v7;
        strlcpy(v7, "prefs:root=General&path=ManagedConfigurationList/ProfileError&profileID=", v6);
        strlcat(v8, a2, v6);
        CFURLRef v9 = CFURLCreateWithBytes(0, (const UInt8 *)v8, v5 + 72, 0x8000100u, 0);
        free(v8);
        uint64_t v10 = [v3 queue];
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1000622E8;
        v12[3] = &unk_1000C6C38;
        CFURLRef v13 = v9;
        id v14 = v3;
        CFURLRef v11 = v9;
        dispatch_async(v10, v12);
      }
    }
  }
}

void sub_1000622E8(uint64_t a1)
{
  id v2 = +[LSApplicationWorkspace defaultWorkspace];
  unsigned int v3 = [v2 openSensitiveURL:*(void *)(a1 + 32) withOptions:0];

  size_t v4 = ne_log_obj();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v11 = 138412546;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      uint64_t v8 = "%@ launched profile janitor with URL %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v11, 0x16u);
    }
  }
  else if (v5)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v9;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    uint64_t v8 = "%@ failed to launch profile janitor with URL %@";
    goto LABEL_6;
  }
}

void sub_100062408(void *a1)
{
  id v1 = a1;
  id v2 = [v1 server];
  [v2 requestUninstallForSession:v1];
}

void sub_100062460(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = [v3 server];
  [v4 requestInstallForSession:v3 withParentSession:0 exclusive:a2];
}

id sub_1000624C8(void *a1, const void *a2)
{
  id v3 = a1;
  if (!CFEqual(a2, kSCPropNetIPSecXAuthPassword))
  {
    if (!CFEqual(a2, kSCPropNetIPSecSharedSecret))
    {
LABEL_19:
      id v12 = 0;
      goto LABEL_20;
    }
    if (v3) {
      id Property = objc_getProperty(v3, v7, 360, 1);
    }
    else {
      id Property = 0;
    }
    if ([Property type] == (id)1)
    {
      if (v3)
      {
LABEL_10:
        id v10 = objc_getProperty(v3, v9, 360, 1);
LABEL_11:
        uint64_t v6 = [v10 sharedSecretKeychainItem];
        goto LABEL_12;
      }
    }
    else
    {
      if (v3) {
        id v13 = objc_getProperty(v3, v9, 360, 1);
      }
      else {
        id v13 = 0;
      }
      if ([v13 type] != (id)2) {
        goto LABEL_19;
      }
      if (v3) {
        goto LABEL_10;
      }
    }
    id v10 = 0;
    goto LABEL_11;
  }
  if (v3) {
    id v5 = objc_getProperty(v3, v4, 360, 1);
  }
  else {
    id v5 = 0;
  }
  uint64_t v6 = [v5 passwordKeychainItem];
LABEL_12:
  int v11 = v6;
  if (!v6) {
    goto LABEL_19;
  }
  id v12 = [v6 copyPassword];

LABEL_20:
  return v12;
}

void sub_100062600(void *a1, const __CFArray *a2, __CFArray *a3)
{
  id v5 = a1;
  uint64_t v7 = v5;
  if (v5)
  {
    id v8 = [objc_getProperty(v5, v6, 360, 1) type];
    int v66 = v7[88];
  }
  else
  {
    id v8 = [0 type];
    int v66 = 0;
  }
  id v68 = v7;
  CFArrayRef theArray = a3;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    CFIndex v72 = -1;
    uint64_t v73 = -1;
    CFIndex idx = -1;
    CFIndex v13 = -1;
  }
  else
  {
    CFIndex v11 = Count;
    CFIndex v12 = 0;
    CFIndex v13 = -1;
    uint64_t v73 = -1;
    CFIndex idx = -1;
    CFIndex v72 = -1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      if (CFEqual(ValueAtIndex, kSCEntNetDNS))
      {
        CFIndex v13 = v12;
      }
      else if (CFEqual(ValueAtIndex, kSCEntNetProxies))
      {
        CFIndex idx = v12;
      }
      else if (CFEqual(ValueAtIndex, kSCEntNetIPv4))
      {
        CFIndex v72 = v12;
      }
      else
      {
        int v15 = CFEqual(ValueAtIndex, kSCEntNetIPv6);
        uint64_t v16 = v73;
        if (v15) {
          uint64_t v16 = v12;
        }
        uint64_t v73 = v16;
      }
      ++v12;
    }
    while (v11 != v12);
  }
  if (v8 == (id)2)
  {
    id v18 = v7;
    CFArrayRef v17 = theArray;
    CFIndex v19 = v73;
    CFIndex v20 = idx;
    CFIndex v21 = v72;
    if (!v68) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  id v18 = v7;
  CFArrayRef v17 = theArray;
  CFIndex v19 = v73;
  CFIndex v20 = idx;
  CFIndex v21 = v72;
  if (v8 == (id)1)
  {
    if (!v68)
    {
LABEL_20:
      id Property = 0;
LABEL_23:
      id v23 = Property;
      uint64_t v24 = [v23 DNSSettings];
      int v71 = [v23 proxySettings];

      goto LABEL_25;
    }
LABEL_22:
    id Property = objc_getProperty(v18, v10, 360, 1);
    goto LABEL_23;
  }
  int v71 = 0;
  uint64_t v24 = 0;
LABEL_25:
  uint64_t v67 = v24;
  if (v21 < 0)
  {
    BOOL v65 = 0;
    id v27 = v71;
    if (v24) {
      goto LABEL_44;
    }
  }
  else
  {
    __int16 v25 = CFArrayGetValueAtIndex(v17, v21);
    uint64_t v26 = [v25 objectForKeyedSubscript:kSCPropNetOverridePrimary];
    if (isa_nsnumber()) {
      BOOL v65 = [v26 intValue] != 0;
    }
    else {
      BOOL v65 = 0;
    }
    CFDictionaryRef v30 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v21);
    id v31 = [v18 configuration];
    char v32 = [v31 identifier];
    id v27 = v71;
    if (v30)
    {
      id v63 = v25;
      xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
      if (NEGetIntFromDictionary())
      {
        xpc_object_t v34 = xpc_dictionary_create(0, 0, 0);
        if (+[NESMSession copyDefaultRouteCacheIsIPv6:0])
        {
          id v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_dictionary_set_value(v34, "ipv4-subnets", v35);

          id v27 = v71;
        }
        myCFRelease();
        xpc_dictionary_set_value(v33, "included-routes", v34);
      }
      else
      {
        CFBooleanRef Value = CFDictionaryGetValue(v30, kSCPropNetIPv4AdditionalRoutes);
        uint64_t v37 = CFDictionaryGetValue(v30, kSCPropNetIPv4ExcludedRoutes);
        *(void *)uuid_string_t out = +[NESMSession copyRouteCacheFromRoutes:Value isIPv6:0];
        id v38 = +[NESMSession copyRouteCacheFromRoutes:v37 isIPv6:0];
        *(void *)uu = v38;
        if (*(void *)out)
        {
          xpc_object_t v39 = xpc_dictionary_create(0, 0, 0);
          long long v40 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_dictionary_set_value(v39, "ipv4-subnets", v40);

          xpc_dictionary_set_value(v33, "included-routes", v39);
        }
        if (v38)
        {
          xpc_object_t v41 = xpc_dictionary_create(0, 0, 0);
          id v42 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_dictionary_set_value(v41, "ipv4-subnets", v42);

          xpc_dictionary_set_value(v33, "excluded-routes", v41);
        }
        myCFRelease();
        myCFRelease();
        id v27 = v71;
      }
      *(void *)uu = 0;
      uint64_t v81 = 0;
      [v32 getUUIDBytes:uu, v63];
      memset(out, 0, sizeof(out));
      uuid_unparse(uu, out);
      NEHelperCacheSetRoutes();

      __int16 v25 = v64;
    }

    id v18 = v68;
    CFIndex v19 = v73;
    CFIndex v20 = idx;
    if (v24)
    {
LABEL_44:
      id v43 = [v24 copyLegacyDictionary];
      char v28 = theArray;
      if (![v43 count]) {
        goto LABEL_49;
      }
      if (v13 < 0)
      {
        CFArrayAppendValue(a2, kSCEntNetDNS);
        CFArrayAppendValue(theArray, v43);
        CFIndex v13 = CFArrayGetCount(theArray) - 1;
      }
      else
      {
        id v44 = CFArrayGetValueAtIndex(theArray, v13);
        [v43 addEntriesFromDictionary:v44];
        CFArraySetValueAtIndex(theArray, v13, v43);

        CFIndex v19 = v73;
      }
      if (!v65)
      {
        long long v45 = [v43 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchDomains];
        id v69 = [v43 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchOrders];
        if (isa_nsarray())
        {
          uint64_t v24 = v45;
        }
        else
        {
          uint64_t v24 = [v43 objectForKeyedSubscript:kSCPropNetDNSSearchDomains];

          if (isa_nsarray()) {
            [v43 setObject:v24 forKeyedSubscript:kSCPropNetDNSSupplementalMatchDomains];
          }
        }
        CFIndex v20 = idx;
        if (isa_nsarray())
        {
          *(void *)uu = 0;
          uint64_t v81 = 0;
          id v46 = [v18 configuration];
          uint64_t v47 = [v46 identifier];
          [v47 getUUIDBytes:uu];

          id v27 = v71;
          memset(out, 0, sizeof(out));
          uuid_unparse(uu, out);
          id v48 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          NEHelperCacheSetMatchDomains();
        }
        CFIndex v19 = v73;
      }
      else
      {
LABEL_49:
        id v69 = 0;
        uint64_t v24 = 0;
      }

      if (v27) {
        goto LABEL_58;
      }
LABEL_30:
      int v29 = v66;
      goto LABEL_66;
    }
  }
  id v69 = 0;
  char v28 = theArray;
  if (!v27) {
    goto LABEL_30;
  }
LABEL_58:
  id v49 = [v27 copyLegacyDictionary];
  uint64_t v50 = kSCPropNetProxiesSupplementalMatchDomains;
  id v51 = [v49 objectForKeyedSubscript:kSCPropNetProxiesSupplementalMatchDomains];
  if ((isa_nsarray() & 1) == 0)
  {
    if (isa_nsarray())
    {
      [v49 setObject:v24 forKeyedSubscript:v50];
      if (isa_nsarray()) {
        [v49 setObject:v69 forKeyedSubscript:kSCPropNetProxiesSupplementalMatchOrders];
      }
    }
  }
  if (v20 < 0)
  {
    CFArrayAppendValue(a2, kSCEntNetProxies);
    CFArrayAppendValue(v28, v49);
    CFIndex v20 = CFArrayGetCount(v28) - 1;
  }
  else
  {
    unsigned __int8 v52 = CFArrayGetValueAtIndex(v28, v20);
    [v49 addEntriesFromDictionary:v52];
    CFArraySetValueAtIndex(v28, v20, v49);
  }
  int v29 = v66;
  CFIndex idx = v20;

  CFIndex v19 = v73;
LABEL_66:
  if (v29 == 2)
  {
    if ((v72 & 0x8000000000000000) == 0)
    {
      id v53 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:CFArrayGetValueAtIndex(v28, v72)];
      [v53 setObject:&off_1000C9888 forKeyedSubscript:kSCPropNetOverridePrimary];
      uint64_t v78 = kSCPropNetIPv4AdditionalRoutes;
      __int16 v54 = +[NSArray arrayWithObjects:&v78 count:1];
      [v53 removeObjectsForKeys:v54];

      CFIndex v19 = v73;
      CFArraySetValueAtIndex(v28, v72, v53);
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      id v55 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:CFArrayGetValueAtIndex(v28, v19)];
      [v55 setObject:&off_1000C9888 forKeyedSubscript:kSCPropNetOverridePrimary];
      uint64_t v77 = kSCPropNetIPv6AdditionalRoutes;
      +[NSArray arrayWithObjects:&v77 count:1];
      v57 = CFIndex v56 = v19;
      [v55 removeObjectsForKeys:v57];

      CFArraySetValueAtIndex(v28, v56, v55);
    }
    if ((v13 & 0x8000000000000000) == 0)
    {
      id v58 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:CFArrayGetValueAtIndex(v28, v13)];
      v76[0] = kSCPropNetDNSSupplementalMatchDomains;
      v76[1] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
      id v59 = +[NSArray arrayWithObjects:v76 count:2];
      [v58 removeObjectsForKeys:v59];

      CFArraySetValueAtIndex(v28, v13, v58);
    }
    if ((idx & 0x8000000000000000) == 0)
    {
      id v60 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:CFArrayGetValueAtIndex(v28, idx)];
      uint64_t v75 = kSCPropNetProxiesSupplementalMatchDomains;
      id v61 = +[NSArray arrayWithObjects:&v75 count:1];
      [v60 removeObjectsForKeys:v61];

      CFArraySetValueAtIndex(v28, idx, v60);
    }
  }
  if (nelog_is_extra_vpn_logging_enabled())
  {
    id v62 = ne_log_large_obj();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uuid_string_t out = 138412546;
      *(void *)&out[4] = a2;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "names %@, dictionaries %@", (uint8_t *)out, 0x16u);
    }
  }
}

void sub_100063054(void *a1)
{
  id v2 = [a1 server];
  sub_1000556BC(v2, v1);
}

void sub_100063094(void *a1, int a2)
{
  id v3 = a1;
  id v5 = v3;
  if (a2
    || (!v3 ? (id Property = 0) : (id Property = objc_getProperty(v3, v4, 360, 1)), [Property type] != (id)1))
  {
    id v11 = 0;
  }
  else
  {
    if (qword_1000D7C30 != -1) {
      dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
    }
    if (v5) {
      uint64_t v7 = v5[46];
    }
    else {
      uint64_t v7 = 0;
    }
    id v8 = (void *)(*(uint64_t (**)(uint64_t))(qword_1000D7C28 + 96))(v7);
    if (isa_nsdictionary())
    {
      uint64_t v9 = [v8 objectForKeyedSubscript:kSCEntNetIPSec];
      id v10 = [v9 objectForKeyedSubscript:@"LastCause"];

      if (isa_nsnumber()) {
        id v11 = +[NEVPNConnection createDisconnectErrorWithDomain:code:](NEVPNConnection, "createDisconnectErrorWithDomain:code:", @"NEVPNConnectionErrorDomainIPSec", [v10 unsignedIntValue]);
      }
      else {
        id v11 = 0;
      }
    }
    else
    {
      id v11 = 0;
    }
  }
  CFIndex v12 = [v5 queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006327C;
  block[3] = &unk_1000C6E00;
  id v16 = v5;
  id v17 = v11;
  int v18 = a2;
  id v13 = v11;
  uint64_t v14 = v5;
  dispatch_async(v12, block);
}

id sub_10006327C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) setLastDisconnectError:*(void *)(a1 + 40)];
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3 <= 3)
  {
    uint64_t v4 = dword_1000A63F0[v3];
    id v5 = *(void **)(a1 + 32);
    return [v5 setStatus:v4];
  }
  return result;
}

id sub_1000632DC(void *a1)
{
  id Property = a1;
  uint64_t v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360, 1);
  }
  id v5 = Property;
  id v6 = [v5 copyLegacyDictionary];
  if ([v5 type] != (id)2)
  {
    if ([v5 type] != (id)1) {
      goto LABEL_32;
    }
    v45[0] = kSCPropNetIPSecXAuthPassword;
    v45[1] = kSCPropNetIPSecXAuthPasswordEncryption;
    v45[2] = kSCPropNetIPSecSharedSecret;
    uint64_t v24 = +[NSArray arrayWithObjects:v45 count:3];
    [v6 removeObjectsForKeys:v24];

    if (v4 && v4[88] == 2)
    {
      uint64_t v24 = [v4 configuration];
      id v1 = [v24 appVPN];
      if ([v1 isOnDemandEnabled])
      {

        goto LABEL_29;
      }
      int v25 = 1;
    }
    else
    {
      int v25 = 0;
    }
    uint64_t v26 = [v4 configuration];
    id v27 = [v26 VPN];
    unsigned int v28 = [v27 isOnDemandEnabled];

    if (v25)
    {

      if ((v28 & 1) == 0)
      {
LABEL_30:
        int v29 = [v4 configuration];
        CFDictionaryRef v30 = [v29 payloadInfo];
        id v31 = [v30 profileIdentifier];

        if (v31)
        {
          char v32 = [v4 configuration];
          xpc_object_t v33 = [v32 payloadInfo];
          xpc_object_t v34 = [v33 profileIdentifier];
          [v6 setObject:v34 forKeyedSubscript:@"ProfileIdentifier"];
        }
LABEL_32:
        id v8 = v6;
        if (!v6) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else if (!v28)
    {
      goto LABEL_30;
    }
LABEL_29:
    [v6 setObject:&off_1000C9870 forKeyedSubscript:kSCPropNetIPSecOnDemandEnabled];
    goto LABEL_30;
  }
  uint64_t v7 = v5;
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v9 = [v4 configuration];
  id v10 = [v9 name];
  [v8 setObject:v10 forKeyedSubscript:kSCPropUserDefinedName];

  if (nelog_is_info_logging_enabled()) {
    [v6 setObject:&off_1000C9870 forKeyedSubscript:kSCPropNetPPPVerboseLogging];
  }
  [v8 setObject:v6 forKeyedSubscript:kSCEntNetPPP];
  id v11 = [v7 IPv4Settings];

  if (v11)
  {
    CFIndex v12 = [v7 IPv4Settings];
    id v13 = [v12 copyLegacyDictionary];
    [v8 setObject:v13 forKeyedSubscript:kSCEntNetIPv4];
  }
  uint64_t v14 = [v7 IPv6Settings];

  if (v14)
  {
    int v15 = [v7 IPv6Settings];
    id v16 = [v15 copyLegacyDictionary];
    [v8 setObject:v16 forKeyedSubscript:kSCEntNetIPv6];
  }
  id v17 = [v7 DNSSettings];

  if (v17)
  {
    int v18 = [v7 DNSSettings];
    id v19 = [v18 copyLegacyDictionary];
    [v8 setObject:v19 forKeyedSubscript:kSCEntNetDNS];
  }
  CFIndex v20 = [v7 proxySettings];

  if (v20)
  {
    CFIndex v21 = [v7 proxySettings];
    id v22 = [v21 copyLegacyDictionary];
    [v8 setObject:v22 forKeyedSubscript:kSCEntNetProxies];
  }
  if ([v7 type] == (id)2)
  {
    id v23 = [v7 copyLegacyIPSecDictionary];
    [v8 setObject:v23 forKeyedSubscript:kSCEntNetIPSec];
  }
  if (v8)
  {
LABEL_33:
    CFStringRef v43 = @"NetworkExtension";
    id v35 = [v4 configuration];
    unsigned int v36 = [v35 identifier];
    uint64_t v37 = [v36 UUIDString];
    id v44 = v37;
    id v38 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
    [v8 setObject:v38 forKeyedSubscript:@"EnvironmentVariables"];
  }
LABEL_34:
  if (nelog_is_extra_vpn_logging_enabled())
  {
    xpc_object_t v39 = ne_log_obj();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = 138412290;
      id v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "service configuration %@", (uint8_t *)&v41, 0xCu);
    }
  }
  return v8;
}

uint64_t sub_100063828(int a1)
{
  if (a1 < 6) {
    return 1;
  }
  if (a1 == 6) {
    return nelog_is_info_logging_enabled();
  }
  if (a1 > 7) {
    return 0;
  }
  return nelog_is_debug_logging_enabled();
}

void sub_100063854(int a1, CFStringRef format, va_list arguments)
{
  CFStringRef v4 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0, format, arguments);
  CFIndex Length = CFStringGetLength(v4);
  CFIndex v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v7 = (char *)malloc_type_malloc(v6, 0xC55644F6uLL);
  if (v7)
  {
    id v8 = v7;
    if (CFStringGetCString(v4, v7, v6, 0x8000100u))
    {
      if (a1 <= 3)
      {
        uint64_t v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          id v13 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v12, 0xCu);
        }
        goto LABEL_16;
      }
      if (a1 <= 5)
      {
        uint64_t v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315138;
          id v13 = v8;
          id v10 = v9;
          os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", (uint8_t *)&v12, 0xCu);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
      if (a1 == 6)
      {
        uint64_t v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v12 = 136315138;
          id v13 = v8;
          id v10 = v9;
          os_log_type_t v11 = OS_LOG_TYPE_INFO;
          goto LABEL_12;
        }
LABEL_16:

        goto LABEL_17;
      }
      if (a1 <= 7)
      {
        uint64_t v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          int v12 = 136315138;
          id v13 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v12, 0xCu);
        }
        goto LABEL_16;
      }
    }
LABEL_17:
    free(v8);
  }
  CFRelease(v4);
}

void sub_100063AF0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == 2)
  {
    id v21 = [*(id *)(a1 + 32) configuration];
    id v2 = [v21 appVPN];
    uint64_t v3 = [v2 appRules];
    if ([v3 count])
    {
      unsigned int v4 = [*(id *)(a1 + 32) isActive];

      if (v4)
      {
        id v5 = sub_100063DC0(*(void **)(a1 + 32));
        if (isa_nsstring())
        {
          CFIndex v6 = ne_log_obj();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v7 = *(void *)(a1 + 32);
            *(_DWORD *)int buf = 138412546;
            uint64_t v23 = v7;
            __int16 v24 = 2112;
            int v25 = v5;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Re-setting policies because the installed apps changed for tunnel \"%@\"", buf, 0x16u);
          }

          id v8 = [*(id *)(a1 + 32) policySession];
          uint64_t v9 = [*(id *)(a1 + 32) configuration];
          id v10 = [v9 appVPN];
          os_log_type_t v11 = [v10 appRules];
          int v12 = [*(id *)(a1 + 32) uid];
          [v12 intValue];
          sub_10003E240((uint64_t)v8, v11);

          id v13 = [*(id *)(a1 + 32) policySession];
          uint64_t v14 = [*(id *)(a1 + 32) configuration];
          int v15 = [v14 appVPN];
          id v16 = [v15 appRules];
          LOBYTE(v12) = sub_1000640A8(*(void **)(a1 + 32));
          char v17 = sub_100064174(*(void **)(a1 + 32));
          int v18 = [*(id *)(a1 + 32) configuration];
          id v19 = [v18 appVPN];
          CFIndex v20 = [v19 excludedDomains];
          sub_10003F7E8((uint64_t)v13, v16, v5, 0, (char)v12, v17, 0, 0, v20);
        }
      }
    }
    else
    {
    }
  }
}

__CFString *sub_100063DC0(void *a1)
{
  if (!a1)
  {
    NetworkServiceEntity = 0;
    goto LABEL_24;
  }
  *(void *)int buf = 0;
  id v2 = [a1 configuration];
  uint64_t v3 = [v2 identifier];
  NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v3 UUIDString], kSCEntNetIPv4);

  if (NetworkServiceEntity)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
    *(void *)int buf = v5;
    if (!v5) {
      goto LABEL_7;
    }
    NetworkServiceEntity = (__CFString *)CFDictionaryGetValue(v5, kSCPropInterfaceName);
    CFTypeID TypeID = CFStringGetTypeID();
    if (NetworkServiceEntity)
    {
      if (CFGetTypeID(NetworkServiceEntity) == TypeID)
      {
        CFRetain(NetworkServiceEntity);
        goto LABEL_8;
      }
LABEL_7:
      NetworkServiceEntity = 0;
    }
  }
LABEL_8:
  myCFRelease();
  myCFRelease();
  if (NetworkServiceEntity
    && ![(__CFString *)NetworkServiceEntity isEqualToString:&stru_1000C7428])
  {
    goto LABEL_17;
  }
  *(void *)int buf = 0;
  uint64_t v7 = [a1 configuration];
  id v8 = [v7 identifier];
  CFStringRef v9 = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v8 UUIDString], kSCEntNetIPv6);

  if (!v9) {
    goto LABEL_15;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, v9);
  *(void *)int buf = v10;
  if (v10
    && (Value = (__CFString *)CFDictionaryGetValue(v10, kSCPropInterfaceName), CFTypeID v12 = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == v12)
  {
    CFRetain(Value);
  }
  else
  {
LABEL_15:
    CFBooleanRef Value = NetworkServiceEntity;
  }
  myCFRelease();
  myCFRelease();
  NetworkServiceEntity = Value;
  if (Value)
  {
LABEL_17:
    if (![(__CFString *)NetworkServiceEntity isEqualToString:&stru_1000C7428]) {
      goto LABEL_24;
    }
    id v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@: received empty interface name", buf, 0xCu);
    }
  }
  else
  {
    id v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%@: failed to query interface name", buf, 0xCu);
    }
    NetworkServiceEntity = 0;
  }

LABEL_24:

  return NetworkServiceEntity;
}

CFStringRef sub_1000640A8(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = [a1 configuration];
  id v2 = [v1 identifier];
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v2 UUIDString], kSCEntNetDNS);

  if (NetworkServiceEntity) {
    CFStringRef NetworkServiceEntity = (const __CFString *)(SCDynamicStoreCopyValue(0, NetworkServiceEntity) != 0);
  }
  myCFRelease();
  myCFRelease();
  return NetworkServiceEntity;
}

unint64_t sub_100064174(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = [a1 configuration];
  id v2 = [v1 identifier];
  unint64_t NetworkServiceEntity = (unint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v2 UUIDString], kSCEntNetProxies);

  if (NetworkServiceEntity)
  {
    unint64_t NetworkServiceEntity = (unint64_t)SCDynamicStoreCopyValue(0, (CFStringRef)NetworkServiceEntity);
    if (NetworkServiceEntity) {
      unint64_t NetworkServiceEntity = NEGetIntFromDictionary()
    }
                          || NEGetIntFromDictionary()
                          || NEGetIntFromDictionary() != 0;
  }
  myCFRelease();
  myCFRelease();
  return NetworkServiceEntity;
}

void sub_10006430C(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
  }
}

void sub_100064408(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 152);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
  }
}

void sub_100064504(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 144);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
  }
}

void sub_100064600(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 136);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
  }
}

void sub_100064890(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
  }
}

void sub_10006498C(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v2 = qword_1000D7C28;
  if (*(void *)(qword_1000D7C28 + 120))
  {
    uint64_t v3 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100064A80;
    block[3] = &unk_1000C6C60;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v3, block);

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 368);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t))(v2 + 120))(v5);
  }
}

void sub_100064A80(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) policySession];
  sub_1000319BC((uint64_t)v2);

  uint64_t v3 = [*(id *)(a1 + 32) policySession];
  sub_10002E854((uint64_t)v3);

  uint64_t v4 = [*(id *)(a1 + 32) policySession];
  sub_10002EA70((uint64_t)v4);

  uint64_t v5 = [*(id *)(a1 + 32) policySession];
  sub_100031AC8((uint64_t)v5);

  sub_100081474(*(void **)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    objc_setProperty_atomic(v7, v6, 0, 376);
  }
}

void sub_100064BA4(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v2 = *(void (**)(uint64_t))(qword_1000D7C28 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0;
    }
    v2(v4);
    uint64_t v5 = sub_100064CBC(*(void **)(a1 + 32));
    CFIndex v6 = [*(id *)(a1 + 32) queue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100064EB8;
    v8[3] = &unk_1000C6C38;
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v5;
    id v7 = v5;
    dispatch_async(v6, v8);
  }
}

id sub_100064CBC(void *a1)
{
  if (!a1) {
    goto LABEL_7;
  }
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v2 = *(void (**)(void, _DWORD *))(qword_1000D7C28 + 176);
  if (!v2)
  {
LABEL_7:
    id v7 = 0;
    goto LABEL_15;
  }
  v2(a1[46], v16);
  if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") == (id)2)
  {
    uint64_t v5 = +[NSNumber numberWithInt:v16[0]];
    v15[0] = v5;
    CFIndex v6 = +[NSNumber numberWithInt:v16[1]];
    v15[1] = v6;
    id v7 = +[NSArray arrayWithObjects:v15 count:2];
  }
  else
  {
    if (objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type") != (id)1)
    {
      id v7 = 0;
      goto LABEL_12;
    }
    uint64_t v5 = +[NSNumber numberWithInt:v16[0]];
    uint64_t v14 = v5;
    id v7 = +[NSArray arrayWithObjects:&v14 count:1];
  }

LABEL_12:
  id v8 = ne_log_obj();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    os_log_type_t v11 = a1;
    __int16 v12 = 2112;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@: bridge_functions->get_agent_pids() returned PIDs %@", (uint8_t *)&v10, 0x16u);
  }

LABEL_15:

  return v7;
}

void sub_100064EB8(uint64_t a1, const char *a2)
{
  SEL v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376);
    SEL v3 = *(void **)(a1 + 32);
  }
  uint64_t v4 = sub_100063DC0(v3);
  if (isa_nsstring())
  {
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      CFIndex v6 = *(void **)(a1 + 32);
      id v7 = [v6 server];
      id v8 = [v7 primaryPhysicalInterface];
      id v9 = [v8 interfaceName];
      *(_DWORD *)int buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v64 = 2112;
      BOOL v65 = v4;
      __int16 v66 = 2112;
      uint64_t v67 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: installing rules on tunnel \"%@\" primary \"%@\"", buf, 0x20u);
    }
    id v10 = v4;
    [v10 UTF8String];
    int IsVPN = NEVirtualInterfaceNameIsVPN();
    __int16 v12 = ne_log_obj();
    id v13 = v12;
    if (IsVPN)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Marked the \"%@\" interface as VPN", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Failed to mark the \"%@\" interface as VPN", buf, 0xCu);
    }

    uint64_t v14 = *(_DWORD **)(a1 + 32);
    id v15 = v10;
    if (v14)
    {
      if (v14[88] == 2)
      {
        char v16 = 0;
        char v17 = 0;
      }
      else
      {
        int v18 = [v14 configuration];
        id v19 = [v18 identifier];
        CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v19 UUIDString], kSCEntNetDNS);

        *(void *)int buf = NetworkServiceEntity;
        if (NetworkServiceEntity) {
          id v21 = (void *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
        }
        else {
          id v21 = 0;
        }
        myCFRelease();
        char v17 = [v21 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchDomains];
        if (v21)
        {
          id v22 = (__CFString *)sub_10006628C(v14);
          uint64_t v23 = [(__CFString *)v22 objectForKeyedSubscript:kSCPropNetOverridePrimary];
          char v16 = [v23 BOOLValue];
        }
        else
        {
          char v16 = 0;
        }
      }
      __int16 v24 = [v14 policySession];
      sub_1000493B4((uint64_t)v24, v15, v17, v16);
    }
    sub_1000812F8(*(void **)(a1 + 32), v15);
    int v25 = *(_DWORD **)(a1 + 32);
    if (v25)
    {
      int v26 = v25[88];
      if (v26 == 1)
      {
        xpc_object_t v39 = [v25 configuration];
        long long v40 = [v39 VPN];
        int v41 = [v40 protocol];
        unsigned int v42 = [v41 enforceRoutes];

        if (v42)
        {
          CFStringRef v43 = [*(id *)(a1 + 32) configuration];
          id v44 = [v43 VPN];
          long long v45 = [v44 protocol];
          unsigned __int8 v46 = [v45 includeAllNetworks];

          if (v46)
          {
            uint64_t v47 = ne_log_obj();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v48 = *(void *)(a1 + 32);
              *(_DWORD *)int buf = 138412290;
              *(void *)&uint8_t buf[4] = v48;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%@: Ignoring enforceRoutes because includeAllNetworks is set", buf, 0xCu);
            }
          }
          else
          {
            sub_100065540(*(void **)(a1 + 32), v15);
          }
        }
      }
      else if (v26 == 2)
      {
        id v27 = [v25 policySession];
        unsigned int v28 = [*(id *)(a1 + 32) configuration];
        int v29 = [v28 appVPN];
        CFDictionaryRef v30 = [v29 appRules];
        id v31 = [*(id *)(a1 + 32) uid];
        [v31 intValue];
        sub_10003E240((uint64_t)v27, v30);

        char v32 = [*(id *)(a1 + 32) policySession];
        id v61 = [*(id *)(a1 + 32) configuration];
        xpc_object_t v33 = [v61 appVPN];
        xpc_object_t v34 = [v33 appRules];
        LOBYTE(v31) = sub_1000640A8(*(void **)(a1 + 32));
        char v35 = sub_100064174(*(void **)(a1 + 32));
        [*(id *)(a1 + 32) configuration];
        unsigned int v36 = v62 = v4;
        uint64_t v37 = [v36 appVPN];
        id v38 = [v37 excludedDomains];
        sub_10003F7E8((uint64_t)v32, v34, v15, 0, (char)v31, v35, 0, 0, v38);

        uint64_t v4 = v62;
      }
    }
  }
  if ([*(id *)(a1 + 32) type] == 1)
  {
    id v49 = [*(id *)(a1 + 32) configuration];
    uint64_t v50 = [v49 VPN];
    id v51 = [v50 exceptionApps];

    if (v51)
    {
      unsigned __int8 v52 = [*(id *)(a1 + 32) policySession];
      id v53 = [*(id *)(a1 + 32) configuration];
      __int16 v54 = [v53 VPN];
      id v55 = [v54 exceptionApps];
      CFIndex v56 = [*(id *)(a1 + 32) server];
      id v57 = [v56 primaryPhysicalInterface];
      id v58 = [v57 interfaceName];
      id v59 = [*(id *)(a1 + 32) uid];
      sub_10003E404((uint64_t)v52, v55, v58, (int)[v59 intValue]);
    }
  }
  id v60 = [*(id *)(a1 + 32) policySession];
  sub_1000318B0((uint64_t)v60);
}

void sub_100065540(void *a1, void *a2)
{
  id v74 = a2;
  if (a1)
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") == (id)2)
    {
      uint64_t v5 = (const char *)[v74 UTF8String];
      uint64_t v6 = if_nametoindex(v5);
      id v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 138412802;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Getting routes for interface %s[%u]", buf, 0x1Cu);
      }
      __s2 = (char *)v5;

      *(_OWORD *)id v76 = xmmword_1000A6410;
      uint64_t v77 = 7;
      int v8 = 3;
      while (1)
      {
        size_t v75 = 0;
        if (sysctl(v76, 6u, 0, &v75, 0, 0) < 0) {
          break;
        }
        if (5 * v75 >= 4) {
          size_t v9 = ((((5 * v75) >> 2) - 1) | 3) + 1;
        }
        else {
          size_t v9 = 4;
        }
        size_t v75 = v9;
        id v10 = malloc_type_malloc(v9, 0xA538508BuLL);
        if (v10)
        {
          os_log_type_t v11 = v10;
          if ((sysctl(v76, 6u, v10, &v75, 0, 0) & 0x80000000) == 0)
          {
            id v24 = objc_alloc_init((Class)NSMutableArray);
            if ((uint64_t)v75 < 1) {
              goto LABEL_98;
            }
            unint64_t v31 = (unint64_t)v11 + v75;
            char v32 = v11;
            os_log_t logb = v11;
            while (1)
            {
              xpc_object_t v33 = (unsigned __int8 *)&v32[11].isa + 4;
              if ((unint64_t)&v32[11].isa + 4 > v31) {
                break;
              }
              uint64_t isa_low = LOWORD(v32->isa);
              if ((unint64_t)v32 + isa_low > v31)
              {
                id v57 = ne_log_obj();
                if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_97;
                }
                *(_WORD *)int buf = 0;
                id v58 = "Not enough data to read routing table message";
                goto LABEL_112;
              }
              if (v6 != WORD2(v32->isa)
                || ((uint64_t)v32[1].isa & 0x1800801) != 0x801
                || (~HIDWORD(v32[1].isa) & 7) != 0)
              {
                goto LABEL_68;
              }
              uint64_t v35 = v6;
              self;
              unsigned int v36 = ne_log_obj();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)int buf = 0;
                _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Attempting to parse route", buf, 2u);
              }

              uint64_t v37 = 0;
              long long v92 = 0u;
              long long v93 = 0u;
              long long v90 = 0u;
              long long v91 = 0u;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              memset(v85, 0, sizeof(v85));
              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              memset(buf, 0, sizeof(buf));
              do
              {
                unsigned int v38 = *v33;
                if (v38 >= 0x81)
                {
                  unsigned int v42 = ne_log_obj();
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  {
                    int v54 = *v33;
                    *(_DWORD *)long long v94 = 67109120;
                    *(_DWORD *)&v94[4] = v54;
                    _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "sockaddr size %u is too large!", v94, 8u);
                  }
                  uint64_t v6 = v35;
                  goto LABEL_65;
                }
                memcpy(&buf[v37], v33, *v33);
                uint64_t v39 = ((v38 - 1) & 0xFFFFFFFC) + 4;
                if (!v38) {
                  uint64_t v39 = 4;
                }
                v33 += v39;
                v37 += 128;
              }
              while (v37 != 384);
              if (v85[1] != 18)
              {
                unsigned int v42 = ne_log_obj();
                uint64_t v6 = v35;
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long v94 = 67109120;
                  *(_DWORD *)&v94[4] = v85[1];
                  _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Gateway family %u is wrong!", v94, 8u);
                }
LABEL_65:
                os_log_type_t v11 = logb;
LABEL_66:

                CFStringRef v43 = 0;
                goto LABEL_67;
              }
              long long v40 = link_ntoa((const sockaddr_dl *)v85);
              int v41 = ne_log_obj();
              uint64_t v6 = v35;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
              {
                id v55 = "NULL";
                if (v40) {
                  id v55 = v40;
                }
                *(_DWORD *)long long v94 = 67110914;
                *(_DWORD *)&v94[4] = v85[0];
                *(_WORD *)&v94[8] = 1024;
                *(_DWORD *)&v94[10] = v85[1];
                *(_WORD *)&v94[14] = 1024;
                *(_DWORD *)&v94[16] = *(unsigned __int16 *)&v85[2];
                *(_WORD *)&v94[20] = 1024;
                *(_DWORD *)&v94[22] = v85[4];
                *(_WORD *)&v94[26] = 1024;
                *(_DWORD *)&v94[28] = v85[5];
                *(_WORD *)&v94[32] = 1024;
                *(_DWORD *)&v94[34] = v85[6];
                *(_WORD *)&v94[38] = 1024;
                *(_DWORD *)&v94[40] = v85[7];
                *(_WORD *)&v94[44] = 2080;
                *(void *)&v94[46] = v55;
                _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "Gateway: length %u, family %u, index %u, type %u, name length %u, address length %u, selector length %u, string %s", v94, 0x36u);
              }

              os_log_type_t v11 = logb;
              if (strcmp(v40, __s2))
              {
                unsigned int v42 = ne_log_obj();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long v94 = 136315394;
                  *(void *)&v94[4] = v40;
                  *(_WORD *)&v94[12] = 2080;
                  *(void *)&v94[14] = __s2;
                  _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Gateway interface string \"%s\" doesn't match \"%s\"", v94, 0x16u);
                }
                goto LABEL_66;
              }
              if (buf[1] != 2)
              {
                unsigned int v42 = ne_log_obj();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long v94 = 67109120;
                  *(_DWORD *)&v94[4] = buf[1];
                  _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Destination address family %u is wrong!", v94, 8u);
                }
                goto LABEL_66;
              }
              uint64_t v44 = NECreateAddressString();
              long long v45 = ne_log_obj();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long v94 = 67109634;
                *(_DWORD *)&v94[4] = buf[0];
                *(_WORD *)&v94[8] = 1024;
                *(_DWORD *)&v94[10] = buf[1];
                *(_WORD *)&v94[14] = 2112;
                *(void *)&v94[16] = v44;
                _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Destination: length %u, family %u, string %@", v94, 0x18u);
              }

              unsigned __int8 v46 = ne_log_obj();
              uint64_t v47 = v46;
              id v69 = (void *)v44;
              if (v44)
              {
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long v94 = 67109376;
                  *(_DWORD *)&v94[4] = v86;
                  *(_WORD *)&v94[8] = 1024;
                  *(_DWORD *)&v94[10] = BYTE1(v86);
                  _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Netmask: length %u, family %u", v94, 0xEu);
                }

                LOWORD(v86) = 528;
                uint64_t v48 = NECreateAddressString();
                id v49 = ne_log_obj();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long v94 = 138412290;
                  *(void *)&v94[4] = v48;
                  _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Netmask: string %@", v94, 0xCu);
                }

                if (v48)
                {
                  uint64_t v50 = v48;
                  id v51 = v69;
                  id v52 = [objc_alloc((Class)NEIPv4Route) initWithDestinationAddress:v69 subnetMask:v50];
                  id v53 = v50;
                  CFStringRef v43 = v52;
                  goto LABEL_92;
                }
                CFIndex v56 = ne_log_obj();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long v94 = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "Netmask address string is nil!", v94, 2u);
                }

                id v53 = 0;
              }
              else
              {
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long v94 = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Destination address string is nil!", v94, 2u);
                }
                id v53 = v47;
              }
              CFStringRef v43 = 0;
              id v51 = v69;
LABEL_92:

              if (v43) {
                [v24 addObject:v43];
              }
LABEL_67:

              uint64_t isa_low = LOWORD(v32->isa);
LABEL_68:
              char v32 = ((char *)v32 + isa_low);
              if ((unint64_t)v32 >= v31)
              {
LABEL_98:
                free(v11);
                if (!v24) {
                  goto LABEL_108;
                }
LABEL_107:
                id v60 = [a1 policySession];
                id v61 = [a1 server];
                id v62 = [v61 primaryPhysicalInterface];
                id v63 = [v62 interfaceName];
                id v65 = objc_getProperty(a1, v64, 376, 1);
                __int16 v66 = [a1 configuration];
                uint64_t v67 = [v66 VPN];
                id v68 = [v67 protocol];
                sub_10003A7E8((uint64_t)v60, v74, v63, v65, v24, 0, 0, 0, (char)[v68 excludeLocalNetworks]);

                goto LABEL_108;
              }
            }
            id v57 = ne_log_obj();
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
LABEL_97:

              goto LABEL_98;
            }
            *(_WORD *)int buf = 0;
            id v58 = "Not enough data to read rtm";
LABEL_112:
            _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, v58, buf, 2u);
            goto LABEL_97;
          }
          int v12 = *__error();
          id v13 = v11;
          int v14 = v12;
          free(v13);
          if (v14 != 12)
          {
            if (strerror_r(v14, (char *)buf, 0x80uLL)) {
              buf[0] = 0;
            }
            loga = ne_log_obj();
            if (os_log_type_enabled(loga, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)long long v94 = 67109378;
              *(_DWORD *)&v94[4] = v14;
              *(_WORD *)&v94[8] = 2080;
              *(void *)&v94[10] = buf;
              _os_log_fault_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_FAULT, "Unable to get routing table: [%d] %s", v94, 0x12u);
            }

            goto LABEL_21;
          }
          id v15 = ne_log_obj();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unable to get routing table because allocated buffer was too small", buf, 2u);
          }
        }
        else
        {
          id v15 = ne_log_obj();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)int buf = 134217984;
            *(void *)&uint8_t buf[4] = v75;
            char v16 = buf;
            char v17 = v15;
            int v18 = "malloc(%zu) failed";
            uint32_t v19 = 12;
LABEL_29:
            _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, v18, v16, v19);
          }
        }
LABEL_20:

LABEL_21:
        if (!--v8) {
          goto LABEL_108;
        }
      }
      int log = *__error();
      if (strerror_r(log, (char *)buf, 0x80uLL)) {
        buf[0] = 0;
      }
      id v15 = ne_log_obj();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
        goto LABEL_20;
      }
      *(_DWORD *)long long v94 = 67109378;
      *(_DWORD *)&v94[4] = log;
      *(_WORD *)&v94[8] = 2080;
      *(void *)&v94[10] = buf;
      char v16 = v94;
      char v17 = v15;
      int v18 = "Unable to get size estimate for routing table: [%d] %s";
      uint32_t v19 = 18;
      goto LABEL_29;
    }
    if (objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type") != (id)1) {
      goto LABEL_108;
    }
    CFIndex v20 = (__CFString *)sub_10006628C(a1);
    id v21 = v20;
    if (v20)
    {
      id v22 = [(__CFString *)v20 objectForKeyedSubscript:kSCPropNetIPv4AdditionalRoutes];
      if (v22)
      {
        uint64_t v23 = v22;
        id v24 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v22 count]];
        memset(v94, 0, 64);
        int v25 = v23;
        id v26 = [v25 countByEnumeratingWithState:v94 objects:buf count:16];
        if (v26)
        {
          id v27 = v26;
          uint64_t v28 = **(void **)&v94[16];
          do
          {
            for (id i = 0; i != v27; id i = (char *)i + 1)
            {
              if (**(void **)&v94[16] != v28) {
                objc_enumerationMutation(v25);
              }
              id v30 = [objc_alloc((Class)NEIPv4Route) initFromLegacyDictionary:*(void *)(*(void *)&v94[8] + 8 * i)];
              [v24 addObject:v30];
            }
            id v27 = [v25 countByEnumeratingWithState:v94 objects:buf count:16];
          }
          while (v27);
        }

LABEL_106:
        if (!v24) {
          goto LABEL_108;
        }
        goto LABEL_107;
      }
      id v59 = ne_log_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Failed to get included routes dictionary", buf, 2u);
      }

      int v25 = 0;
    }
    else
    {
      int v25 = ne_log_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Unable to get IPv4 dictionary from dynamic store", buf, 2u);
      }
    }
    id v24 = 0;
    goto LABEL_106;
  }
LABEL_108:
}

CFStringRef sub_10006628C(void *a1)
{
  id v1 = [a1 configuration];
  uint64_t v2 = [v1 identifier];
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, (CFStringRef)[v2 UUIDString], kSCEntNetIPv4);

  if (NetworkServiceEntity) {
    CFStringRef NetworkServiceEntity = (const __CFString *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
  }
  myCFRelease();
  return NetworkServiceEntity;
}

void sub_1000663D4(uint64_t a1)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 == 3)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 368);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(qword_1000D7C28 + 104))(v9, *(void *)(a1 + 32));
  }
  else
  {
    if (v3 == 2)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))(qword_1000D7C28 + 96);
    }
    else
    {
      if (v3 != 1) {
        goto LABEL_35;
      }
      uint64_t v4 = *(uint64_t (**)(uint64_t))(qword_1000D7C28 + 88);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 368);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v4(v6);
  }
  id v10 = (void *)v7;
  if (v7)
  {
    uint64_t v11 = _CFXPCCreateXPCObjectFromCFObject();
    int v12 = (void *)v11;
    if (*(_DWORD *)(a1 + 48) == 2 && v11)
    {
      if ((sub_10007C09C(*(void **)(a1 + 40)) & 1) != 0
        || sub_10007C1A4(*(void **)(a1 + 40)))
      {
        id v13 = [*(id *)(a1 + 40) matchedRule];

        if (v13)
        {
          int v14 = xpc_dictionary_get_dictionary(v12, "VPN");
          id v15 = v14;
          if (v14 && xpc_get_type(v14) == (xpc_type_t)&_xpc_type_dictionary
            || (xpc_object_t v16 = xpc_dictionary_create(0, 0, 0),
                v15,
                xpc_dictionary_set_value(v12, "VPN", v16),
                (id v15 = v16) != 0))
          {
            if (xpc_get_type(v15) == (xpc_type_t)&_xpc_type_dictionary)
            {
              char v17 = [*(id *)(a1 + 40) matchedRule];
              xpc_dictionary_set_int64(v15, "OnDemandAction", (int64_t)[v17 action]);
            }
          }
        }
      }
      int v18 = [*(id *)(a1 + 40) lastDisconnectError];
      if (v18)
      {
        id v24 = 0;
        uint32_t v19 = +[NSKeyedArchiver archivedDataWithRootObject:v18 requiringSecureCoding:1 error:&v24];
        id v20 = v24;
        if (v19)
        {
          id v21 = v19;
          xpc_dictionary_set_data(v12, "LastDisconnectError", [v21 bytes], (size_t)[v21 length]);
        }
        else
        {
          id v22 = ne_log_obj();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 138412290;
            id v26 = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to serialize the last disconnect error: %@", buf, 0xCu);
          }
        }
      }
    }
    xpc_dictionary_set_value(reply, "SessionInfo", v12);
  }
LABEL_35:
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  uint64_t v23 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message(v23, reply);
}

void sub_1000667A4(uint64_t a1)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  uint64_t v6 = 0;
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 368);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void, char *, uint64_t *))(qword_1000D7C28 + 72))(v4, *(void *)(a1 + 32), (char *)&v6 + 4, &v6);
  if (bootstrap_port) {
    xpc_dictionary_set_mach_send();
  }
  if (v6) {
    xpc_dictionary_set_mach_send();
  }
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  uint64_t v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message(v5, reply);
}

void sub_10006696C(uint64_t a1)
{
  uint64_t v2 = sub_100064CBC(*(void **)(a1 + 32));
  uint64_t v3 = [*(id *)(a1 + 32) queue];
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  uint64_t v11 = sub_100066A9C;
  int v12 = &unk_1000C6C38;
  uint64_t v13 = *(void *)(a1 + 32);
  id v4 = v2;
  id v14 = v4;
  dispatch_async(v3, &v9);

  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v5 = *(void (**)(uint64_t, id, void))(qword_1000D7C28 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 368);
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = *(id *)(a1 + 40);
  v5(v7, [v8 UTF8String:v9, v10, v11, v12, v13], *(void *)(a1 + 48));
}

void sub_100066A9C(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376);
    uint64_t v3 = *(void **)(a1 + 32);
  }
  if ([v3 type] == 1)
  {
    id v4 = [*(id *)(a1 + 32) configuration];
    uint64_t v5 = [v4 VPN];
    uint64_t v6 = [v5 exceptionApps];

    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 32) policySession];
      id v8 = [*(id *)(a1 + 32) configuration];
      uint64_t v9 = [v8 VPN];
      uint64_t v10 = [v9 exceptionApps];
      uint64_t v11 = [*(id *)(a1 + 32) server];
      int v12 = [v11 primaryPhysicalInterface];
      uint64_t v13 = [v12 interfaceName];
      id v14 = [*(id *)(a1 + 32) uid];
      sub_10003E404((uint64_t)v7, v10, v13, (int)[v14 intValue]);
    }
    id v15 = [*(id *)(a1 + 32) configuration];
    xpc_object_t v16 = [v15 VPN];
    char v17 = [v16 protocol];
    unsigned int v18 = [v17 enforceRoutes];

    if (v18)
    {
      uint32_t v19 = [*(id *)(a1 + 32) configuration];
      id v20 = [v19 VPN];
      id v21 = [v20 protocol];
      unsigned __int8 v22 = [v21 includeAllNetworks];

      if (v22)
      {
        uint64_t v23 = ne_log_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = *(void **)(a1 + 32);
          int v30 = 138412290;
          unint64_t v31 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@: Ignoring enforceRoutes because includeAllNetworks is set", (uint8_t *)&v30, 0xCu);
        }
      }
      else
      {
        uint64_t v23 = sub_100063DC0(*(void **)(a1 + 32));
        if (isa_nsstring())
        {
          int v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            id v26 = *(void **)(a1 + 32);
            id v27 = [v26 server];
            uint64_t v28 = [v27 primaryPhysicalInterface];
            int v29 = [v28 interfaceName];
            int v30 = 138412802;
            unint64_t v31 = v26;
            __int16 v32 = 2112;
            xpc_object_t v33 = v23;
            __int16 v34 = 2112;
            uint64_t v35 = v29;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@: Re-setting route enforcement policies due to interface change event for tunnel \"%@\" primary \"%@\"", (uint8_t *)&v30, 0x20u);
          }
          sub_100065540(*(void **)(a1 + 32), v23);
        }
      }
    }
  }
}

id sub_100066E8C(uint64_t a1)
{
  return sub_100081564(*(id *)(a1 + 32), 0);
}

uint64_t sub_100066E98(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(qword_1000D7C28 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 368);
  }
  else {
    uint64_t v4 = 0;
  }

  return v2(v4);
}

uint64_t sub_100066F88(uint64_t a1, __n128 a2)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, __n128))(qword_1000D7C28 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 368);
  }
  else {
    uint64_t v5 = 0;
  }
  a2.n128_u64[0] = *(void *)(a1 + 40);

  return v3(v5, a2);
}

void sub_10006707C(uint64_t a1)
{
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 368);
  }
  else {
    uint64_t v3 = 0;
  }
  if (((*(uint64_t (**)(uint64_t))(qword_1000D7C28 + 24))(v3) & 1) == 0)
  {
    id v5 = [*(id *)(a1 + 32) server];
    sub_1000556BC(v5, v4);
  }
}

id sub_1000671CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) status];
  if (result != 1)
  {
    if (qword_1000D7C30 != -1) {
      dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(qword_1000D7C28 + 64);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 368);
    }
    else {
      uint64_t v5 = 0;
    }
    return (id)v3(v5);
  }
  return result;
}

void sub_100067A24(uint64_t a1, const char *a2)
{
  uint64_t v4 = a1 + 32;
  id Property = *(void **)(a1 + 32);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void *, id, id, void, void, id))(*(void *)(v4 + 8) + 56);
  if (Property)
  {
    uint64_t v6 = Property[46];
    id Property = objc_getProperty(Property, a2, 384, 1);
    uint64_t v7 = *(void **)(a1 + 32);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  id v8 = Property;
  uint64_t v9 = [v7 uid];
  id v10 = [v9 unsignedIntValue];
  uint64_t v11 = [*(id *)(a1 + 32) gid];
  char v12 = v5(v6, v8, v10, [v11 unsignedIntValue], *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), [*(id *)(a1 + 32) isOnDemand]);

  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void (**)(uint64_t, void *))(*(void *)(a1 + 40) + 80);
    if (v13) {
      uint64_t v15 = *(void *)(v13 + 368);
    }
    else {
      uint64_t v15 = 0;
    }
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100067CD8;
    v26[3] = &unk_1000C6C60;
    uint8_t v26[4] = v13;
    v14(v15, v26);
  }
  else
  {
    sub_100063094(*(void **)(a1 + 32), 0);
  }
  mach_port_name_t v16 = *(_DWORD *)(a1 + 48);
  if (v16 && mach_port_deallocate(mach_task_self_, v16))
  {
    char v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      id v21 = __error();
      unsigned __int8 v22 = strerror(*v21);
      *(_DWORD *)int buf = 138412546;
      uint64_t v28 = v20;
      __int16 v29 = 2080;
      int v30 = v22;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%@: Failed to deallocate the bootstrap mach port: %s", buf, 0x16u);
    }
  }
  mach_port_name_t v18 = *(_DWORD *)(a1 + 52);
  if (v18 && mach_port_deallocate(mach_task_self_, v18))
  {
    uint32_t v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      id v24 = __error();
      int v25 = strerror(*v24);
      *(_DWORD *)int buf = 138412546;
      uint64_t v28 = v23;
      __int16 v29 = 2080;
      int v30 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%@: Failed to deallocate the audit session mach port: %s", buf, 0x16u);
    }
  }
}

void sub_100067CD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 138412290;
      uint64_t v4 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@ is now disposable", (uint8_t *)&v3, 0xCu);
    }
  }
}

void *sub_100067E34(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (!a1) {
    goto LABEL_25;
  }
  v27.receiver = a1;
  v27.super_class = (Class)NESMLegacySession;
  id v12 = [super initWithConfiguration:v9 andServer:v10];
  a1 = v12;
  if (!v12) {
    goto LABEL_25;
  }
  *((_DWORD *)v12 + 8_Block_object_dispose(&a9, 8) = a5;
  objc_storeStrong((id *)v12 + 45, a4);
  if (!v11)
  {
    uint64_t v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)int buf = 138412290;
    __int16 v29 = a1;
    mach_port_name_t v16 = "%@: Failed to create a legacy session because the given configuration is not a VPN configuration";
    goto LABEL_21;
  }
  id v13 = [v11 type];
  if (v13 != (id)1)
  {
    if (v13 == (id)2)
    {
      uint64_t v14 = 3;
      goto LABEL_10;
    }
    uint64_t v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)int buf = 138412290;
    __int16 v29 = a1;
    mach_port_name_t v16 = "%@: Failed to create a legacy session because the given configuration is not a IKEv1 or L2TP configuration";
LABEL_21:
    id v24 = v15;
    uint32_t v25 = 12;
LABEL_22:
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v16, buf, v25);
    goto LABEL_24;
  }
  uint64_t v14 = 1;
LABEL_10:
  if (qword_1000D7C30 != -1) {
    dispatch_once(&qword_1000D7C30, &stru_1000C63A0);
  }
  if (!qword_1000D7C28)
  {
    uint64_t v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      __int16 v29 = a1;
      mach_port_name_t v16 = "%@: Failed to get the legacy bridge functions";
      goto LABEL_21;
    }
LABEL_24:

    a1 = 0;
    goto LABEL_25;
  }
  char v17 = *(uint64_t (**)(uint64_t, id, void *))qword_1000D7C28;
  mach_port_name_t v18 = [v9 identifier];
  uint64_t v19 = v17(v14, [v18 UUIDString], a1);

  if (!v19)
  {
    uint64_t v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)int buf = 138412546;
    __int16 v29 = a1;
    __int16 v30 = 1024;
    int v31 = v14;
    mach_port_name_t v16 = "%@: Failed to create a legacy bridge with type %d for configuration";
    id v24 = v15;
    uint32_t v25 = 18;
    goto LABEL_22;
  }
  a1[46] = v19;
  uint64_t v20 = [NESMPolicySession alloc];
  id v21 = [v9 identifier];
  id v22 = [v9 grade];
  if (v20) {
    uint64_t v23 = sub_100031564((id *)&v20->super.isa, v21, a5, v22, (void *)1, (void *)1);
  }
  else {
    uint64_t v23 = 0;
  }
  [a1 setPolicySession:v23];

  sub_10007FEB0(a1);
LABEL_25:

  return a1;
}

void sub_10006824C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[13];
  }
  int v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_storeStrong((id *)(v4 + 104), 0);
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 32, 1);
    }
  }
  else
  {
    id Property = 0;
  }
  uint64_t v7 = Property;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100068350;
  v10[3] = &unk_1000C6DB0;
  id v8 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v8;
  id v9 = v3;
  dispatch_async(v7, v10);
}

uint64_t sub_100068350(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

id *sub_100068368(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  if (a1)
  {
    id v8 = a4;
    id v9 = [objc_alloc((Class)NEProcessIdentity) initFromXPCMessage:v8];
    id v10 = xpc_dictionary_get_value(v8, "SessionOptions");

    if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary)
    {
      id v13 = xpc_dictionary_get_value(v10, "listener-endpoint");
      id v11 = v13;
      if (v13 && xpc_get_type(v13) == (xpc_type_t)&_xpc_type_endpoint)
      {
        uint64_t v14 = objc_alloc_init((Class)NSXPCListenerEndpoint);
        [v14 _setEndpoint:v11];
        v23.receiver = a1;
        v23.super_class = (Class)NETestAgent;
        uint64_t v15 = (id *)[super initWithPluginType:v7 pluginVersion:1 pluginClass:a3 pluginInfo:0 userID:0];
        mach_port_name_t v16 = v15;
        if (v15)
        {
          objc_storeStrong(v15 + 13, v14);
          int v17 = [v9 pid];
          id v18 = objc_alloc((Class)NSArray);
          uint64_t v19 = [v9 uuid];
          id v20 = [v18 initWithObjects:v19];
          sub_1000853F0((uint64_t)v16, v17, v20);

          id v21 = [objc_alloc((Class)NSArray) initWithObjects:v9, 0];
          objc_storeStrong(v16 + 9, v21);
        }
        a1 = v16;
        id v12 = a1;
      }
      else
      {
        uint64_t v14 = ne_log_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 134217984;
          uint32_t v25 = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Missing endpoint (%p) in start message", buf, 0xCu);
        }
        id v12 = 0;
      }
    }
    else
    {
      id v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "No start options available", buf, 2u);
      }
      id v12 = 0;
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

uint64_t start()
{
  errorint buf = 0;
  if (sandbox_init("com.apple.nesessionmanager", 1uLL, &errorbuf) < 0)
  {
    long long v86 = ne_log_obj();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.nesessionmanager";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = errorbuf;
      _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "sandbox_init %s failed: %s", buf, 0x16u);
    }

    sandbox_free_error(errorbuf);
    exit(1);
  }
  uint64_t v1 = sub_100052AE8();
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = v1;
    objc_sync_enter(v3);
    uint64_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NESMServer starting", buf, 2u);
    }

    uint64_t v5 = +[NEFileHandleMaintainer sharedMaintainer];
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100054F74;
    long long v90 = &unk_1000C6C60;
    long long v91 = (int *)v3;
    [v5 startOwnerModeWithEventName:@"com.apple.networkextension.file-descriptor-maintainer" handlesReceivedCallback:buf];

    objc_getProperty(v3, v6, 88, 1);
    *(void *)&long long v93 = _NSConcreteStackBlock;
    *((void *)&v93 + 1) = 3221225472;
    long long v94 = sub_10005500C;
    int v95 = &unk_1000C6C60;
    unsigned int v96 = (int *)v3;
    uint64_t v7 = NECreateTimerSource();
    id v8 = (void *)v3[39];
    v3[39] = v7;

    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    pid_t v10 = getpid();
    xpc_dictionary_set_int64(v9, "nesm-pid", v10);
    xpc_set_event();

    id v12 = (_xpc_connection_s *)objc_getProperty(v3, v11, 96, 1);
    xpc_connection_resume(v12);

    uint64_t v14 = (_xpc_connection_s *)objc_getProperty(v3, v13, 104, 1);
    xpc_connection_resume(v14);

    mach_port_name_t v16 = (_xpc_connection_s *)objc_getProperty(v3, v15, 112, 1);
    xpc_connection_resume(v16);

    sub_10000C120();
    int v17 = (int *)objc_claimAutoreleasedReturnValue();
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472;
    v88[2] = sub_100052FD0;
    v88[3] = &unk_1000C6C60;
    v88[4] = v3;
    id v18 = v88;
    uint64_t v19 = v18;
    if (v17)
    {
      id v20 = *((void *)v17 + 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10000C1B4;
      long long v90 = &unk_1000C6DB0;
      long long v91 = v17;
      long long v92 = v18;
      dispatch_async(v20, buf);
    }
    id v21 = v3;
    objc_sync_enter(v21);
    id v22 = objc_alloc_init((Class)NWParameters);
    sub_100054918(v22);
    id v23 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v22];
    objc_setProperty_atomic(v21, v24, v23, 248);

    id v26 = objc_getProperty(v21, v25, 248, 1);
    [v26 addObserver:v21 forKeyPath:@"path" options:5 context:0];

    id v27 = objc_alloc_init((Class)NWParameters);
    [v27 setRequiredInterfaceType:2];
    sub_100054918(v27);
    id v28 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v27];
    objc_setProperty_atomic(v21, v29, v28, 256);

    id v31 = objc_getProperty(v21, v30, 256, 1);
    [v31 addObserver:v21 forKeyPath:@"path" options:5 context:0];

    id v32 = objc_alloc_init((Class)NWParameters);
    [v32 setRequiredInterfaceType:1];
    sub_100054918(v32);
    id v33 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:v32];
    objc_setProperty_atomic(v21, v34, v33, 264);

    id v36 = objc_getProperty(v21, v35, 264, 1);
    [v36 addObserver:v21 forKeyPath:@"path" options:5 context:0];

    if ((*((unsigned char *)v21 + 11) & 1) == 0)
    {
      *((unsigned char *)v21 + 11) = 1;
      uint64_t v37 = nwi_state_copy();
      id v38 = sub_10004F838(v37);
      objc_setProperty_atomic(v21, v39, v38, 72);

      if (v37) {
        nwi_state_release();
      }
      notify_key = (const char *)nwi_state_get_notify_key();
      unsigned int v42 = objc_getProperty(v21, v41, 88, 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_100054998;
      long long v90 = &unk_1000C6218;
      long long v91 = v21;
      uint32_t v43 = notify_register_dispatch(notify_key, v21 + 5, v42, buf);

      if (v43)
      {
        uint64_t v44 = ne_log_obj();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v93) = 67109120;
          DWORD1(v93) = v43;
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to register for NWI notifications: %u", (uint8_t *)&v93, 8u);
        }
      }
    }

    objc_sync_exit(v21);
    long long v45 = v21;
    objc_sync_enter(v45);
    if ((v45[3] & 1) == 0)
    {
      *((unsigned char *)v45 + 12) = 1;
      unsigned __int8 v46 = [NESMPowerManager alloc];
      id Property = objc_getProperty(v45, v47, 88, 1);
      id v49 = Property;
      uint64_t v50 = v45;
      id v51 = v49;
      if (v46)
      {
        *(void *)int buf = v46;
        *(void *)&buf[8] = NESMPowerManager;
        id v52 = (NESMPowerManager *)[super init];
        unsigned __int8 v46 = v52;
        if (v52)
        {
          objc_storeWeak((id *)&v52->_delegate, v50);
          objc_storeStrong((id *)&v46->_queue, Property);
          v46->_powerState = 2;
          v46->_sleepDate = -1;
        }
      }

      objc_setProperty_atomic(v50, v53, v46, 136);
      id v55 = objc_getProperty(v50, v54, 136, 1);
      id v56 = v55;
      if (v55)
      {
        io_connect_t v57 = IORegisterForSystemPower(v55, (IONotificationPortRef *)v55 + 8, (IOServiceInterestCallback)sub_10008D884, (io_object_t *)v55 + 3);
        *((_DWORD *)v56 + 2) = v57;
        if (v57)
        {
          id v59 = (IONotificationPort *)*((void *)v56 + 8);
          id v60 = objc_getProperty(v56, v58, 48, 1);
          IONotificationPortSetDispatchQueue(v59, v60);
        }
      }
    }
    objc_sync_exit(v45);

    id v61 = v45;
    objc_sync_enter(v61);
    if ((*((unsigned char *)v61 + 13) & 1) == 0)
    {
      *((unsigned char *)v61 + 13) = 1;
      if (dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 16))
      {
        id v63 = objc_getProperty(v61, v62, 88, 1);
        SEL v64 = (const char *)kSBSLockStateNotifyKey;
        id v65 = v63;
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_10005464C;
        long long v90 = &unk_1000C6218;
        long long v91 = v61;
        uint32_t v66 = notify_register_dispatch(v64, v61 + 6, v65, buf);

        if (v66)
        {
          uint64_t v67 = ne_log_obj();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v93) = 67109120;
            DWORD1(v93) = v66;
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to register for user state notifications: %u", (uint8_t *)&v93, 8u);
          }
        }
      }
    }
    objc_sync_exit(v61);

    id v68 = v61;
    objc_sync_enter(v68);
    *(void *)&long long v93 = _NSConcreteStackBlock;
    *((void *)&v93 + 1) = 3221225472;
    long long v94 = sub_100054254;
    int v95 = &unk_1000C6218;
    unsigned int v96 = v68;
    id v69 = objc_retainBlock(&v93);
    int v71 = objc_getProperty(v68, v70, 88, 1);
    notify_register_dispatch("com.apple.system.config.network_change.nwi", v68 + 7, v71, v69);

    uint64_t v73 = objc_getProperty(v68, v72, 88, 1);
    notify_register_dispatch("com.apple.system.config.network_change.dns", v68 + 8, v73, v69);

    size_t v75 = objc_getProperty(v68, v74, 88, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100054560;
    long long v90 = &unk_1000C6290;
    long long v91 = v68;
    id v76 = v69;
    long long v92 = v76;
    notify_register_dispatch("com.apple.system.config.proxy_change", v68 + 9, v75, buf);

    objc_sync_exit(v68);
    sub_100053068((uint64_t)v68);
    uint64_t v78 = objc_getProperty(v68, v77, 88, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100053728;
    long long v90 = &unk_1000C60B8;
    long long v91 = v68;
    xpc_set_event_stream_handler("com.apple.networkextension.network-detection", v78, buf);
    *((unsigned char *)v68 + _Block_object_dispose(&a9, 8) = &_CNPluginMonitorStart != 0;
    if (&_CNPluginMonitorStart)
    {
      objc_getProperty(v68, v79, 88, 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10005343C;
      long long v90 = &unk_1000C6330;
      long long v91 = v68;
      int v80 = CNPluginMonitorStart();
      long long v81 = ne_log_obj();
      long long v82 = v81;
      if (v80)
      {
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v93) = 136315138;
          *(void *)((char *)&v93 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
          _os_log_debug_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "%s: Started CNPluginMonitor", (uint8_t *)&v93, 0xCu);
        }
      }
      else if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v93) = 136315138;
        *(void *)((char *)&v93 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
        _os_log_error_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%s: Failed to start CNPluginMonitor", (uint8_t *)&v93, 0xCu);
      }
    }
    else
    {
      long long v82 = ne_log_obj();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Captive Plugin Monitor is not available", buf, 2u);
      }
    }

    long long v84 = objc_getProperty(v68, v83, 88, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1000531D4;
    long long v90 = &unk_1000C60B8;
    long long v91 = v68;
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v84, buf);
    signal(13, (void (__cdecl *)(int))1);
    objc_sync_exit(v68);
  }
  CFRunLoopRun();
  return 0;
}

void sub_100069298(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10006C674(uint64_t a1, const char *a2)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id result = objc_getProperty(result, a2, 32, 1);
    if (result)
    {
      uint64_t v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(a1 + 40);
        if (v5) {
          uint64_t v7 = *(void *)(v5 + 24);
        }
        else {
          uint64_t v7 = 0;
        }
        id v8 = (objc_class *)objc_opt_class();
        xpc_object_t v9 = NSStringFromClass(v8);
        int v14 = 138412802;
        uint64_t v15 = v6;
        __int16 v16 = 2048;
        uint64_t v17 = v7;
        __int16 v18 = 2112;
        uint64_t v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: State timer (%llu seconds) fired in state %@", (uint8_t *)&v14, 0x20u);
      }
      id Property = *(NSObject **)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v10, 32, 1);
      }
      dispatch_source_cancel(Property);
      id result = *(id *)(a1 + 32);
      if (result)
      {
        objc_setProperty_atomic(result, v12, 0, 32);
        id result = *(id *)(a1 + 32);
        if (result)
        {
          id result = objc_getProperty(result, v13, 16, 1);
          if (result) {
            return [*(id *)(a1 + 32) handleTimeout];
          }
        }
      }
    }
  }
  return result;
}

void sub_10006C910(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    objc_setProperty_atomic(a1, v3, 0, 48);
    if (!v4)
    {
      uint64_t v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id Property = objc_getProperty(a1, v7, 16, 1);
        xpc_object_t v9 = (objc_class *)objc_opt_class();
        pid_t v10 = NSStringFromClass(v9);
        int v13 = 138412546;
        id v14 = Property;
        __int16 v15 = 2112;
        __int16 v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ in state %@: no start message available", (uint8_t *)&v13, 0x16u);
      }
    }
    id v11 = objc_getProperty(a1, v5, 16, 1);
    [v11 setState:1];
    if (v4)
    {
      id v12 = [v11 stateHandler];
      [v12 handleStartMessage:v4];
    }
  }
}

uint64_t sub_10006E0C0(uint64_t a1)
{
  return sub_10008088C(*(void *)(a1 + 32), 1);
}

void sub_10006E660(void *a1)
{
  if (a1)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id Property = objc_getProperty(a1, v3, 16, 1);
      uint64_t v5 = (objc_class *)objc_opt_class();
      uint64_t v6 = NSStringFromClass(v5);
      [objc_getProperty(a1, v7, 16, 1) sessionType];
      int v34 = 138412802;
      id v35 = Property;
      __int16 v36 = 2112;
      uint64_t v37 = v6;
      __int16 v38 = 2080;
      uint64_t v39 = ne_session_type_to_string();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ in state %@: restart %s session", (uint8_t *)&v34, 0x20u);
    }
    xpc_object_t v9 = [objc_getProperty(a1, v8, 16, 1) configuration];
    unsigned __int8 v10 = [v9 isEnabled];

    if ((v10 & 1) == 0)
    {
      __int16 v18 = ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = objc_getProperty(a1, v22, 16, 1);
        int v34 = 138412290;
        id v35 = v23;
        id v21 = "%@: Ignore restart because the configuration is not enabled";
        goto LABEL_11;
      }
LABEL_12:

      return;
    }
    id v12 = [objc_getProperty(a1, v11, 16, 1) configuration];
    uint64_t v13 = [v12 externalIdentifier];
    if (v13)
    {
      __int16 v15 = (void *)v13;
      unsigned int v16 = [objc_getProperty(a1, v14, 16, 1) waitForPerApp];

      if (v16)
      {
        __int16 v18 = ne_log_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = objc_getProperty(a1, v19, 16, 1);
          int v34 = 138412290;
          id v35 = v20;
          id v21 = "%@: Ignore restart for perApp session - no appRule or app not installed";
LABEL_11:
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v34, 0xCu);
          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
    }
    SEL v24 = [objc_getProperty(a1, v17, 16, 1) startMessage];

    if (v24)
    {
      id v26 = objc_getProperty(a1, v25, 16, 1);
      id v28 = [objc_getProperty(a1, v27, 16, 1) startMessage];
      [v26 handleStartMessage:v28];

      id v30 = objc_getProperty(a1, v29, 16, 1);
      id v32 = [objc_getProperty(a1, v31, 16, 1) startMessage];
      [v30 createConnectParametersWithStartMessage:v32];
    }
    [objc_getProperty(a1, v25, 16, 1) setRestartPending:0];
    [objc_getProperty(a1, v33, 16, 1) setState:2];
  }
}

void sub_10006EC04(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 16, 1);
  }
  unsigned int v5 = [Property restartPending];
  id v6 = *(id *)(a1 + 32);
  if (v5)
  {
    sub_10006E660(v6);
  }
  else
  {
    if (v6) {
      id v6 = objc_getProperty(v6, v4, 16, 1);
    }
    [v6 setState:1];
  }
}

id sub_1000718FC(uint64_t a1)
{
  v9[0] = *(void *)(a1 + 32);
  v8[0] = @"tunnelType";
  v8[1] = @"OnDemandConfiguration";
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  v9[1] = v2;
  v8[2] = @"OnDemandConnection";
  int v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 65)];
  v9[2] = v3;
  v8[3] = @"tunnelConnectDuration";
  id v4 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  v9[3] = v4;
  void v8[4] = @"tunnelDataCount";
  unsigned int v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56) + *(void *)(a1 + 48)];
  v9[4] = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:5];

  return v6;
}

void sub_100071A4C(id a1)
{
  mach_timebase_info info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000D7C48 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

void sub_100071AA8(id a1, unint64_t a2, NSArray *a3)
{
  int v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    unsigned int v5 = "-[NESMIKEv2VPNSession setStatus:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s: user acknowledged VPN notification", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_10007267C(_DWORD *a1)
{
  if (!a1) {
    return 0;
  }
  if (!sub_100072BB8(a1))
  {
    uint64_t v7 = ne_log_obj();
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEBUG))
    {
      SEL v33 = [a1 configuration];
      int v34 = [v33 name];
      id v35 = [a1 configuration];
      __int16 v36 = [v35 externalIdentifier];
      uint64_t v37 = [a1 configuration];
      __int16 v38 = [v37 contentFilter];
      uint64_t v39 = [v38 perApp];
      id v40 = [v39 copyCachedMachOUUIDs];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "-[NESMFilterSession resetPolicies]";
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v34;
      *(_WORD *)&buf[22] = 2112;
      io_connect_t v57 = v36;
      LOWORD(v5_Block_object_dispose(&a9, 8) = 2112;
      *(void *)((char *)&v58 + 2) = v40;
      _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)v7, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> <%@> UUIDs %@ <Skip - plugin not ready>", buf, 0x2Au);
    }
    uint64_t v6 = 0;
    goto LABEL_28;
  }
  unint64_t v2 = [a1 configuration];
  uint64_t v3 = [v2 externalIdentifier];
  if (!v3)
  {

    goto LABEL_10;
  }
  int v4 = (void *)v3;
  unsigned __int8 v5 = [a1 waitForPerApp];

  if ((v5 & 1) == 0)
  {
LABEL_10:
    SEL v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      SEL v41 = [a1 configuration];
      unsigned int v42 = [v41 name];
      uint32_t v43 = [a1 configuration];
      uint64_t v44 = [v43 externalIdentifier];
      long long v45 = [a1 configuration];
      unsigned __int8 v46 = [v45 contentFilter];
      SEL v47 = [v46 perApp];
      id v48 = [v47 copyCachedMachOUUIDs];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "-[NESMFilterSession resetPolicies]";
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v42;
      *(_WORD *)&buf[22] = 2112;
      io_connect_t v57 = v44;
      LOWORD(v5_Block_object_dispose(&a9, 8) = 2112;
      *(void *)((char *)&v58 + 2) = v48;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s: resetPolicies - <%@> <%@> UUIDs %@", buf, 0x2Au);
    }
    uint64_t v7 = [a1 policySession];
    int v9 = a1[89];
    id Property = objc_getProperty(a1, v10, 400, 1);
    uint64_t v13 = sub_1000177C0(Property, v12);
    id v14 = [v13 firstObject];
    __int16 v15 = [a1 uid];
    unsigned int v51 = [v15 intValue];
    id v17 = objc_getProperty(a1, v16, 360, 1);
    id v19 = objc_getProperty(a1, v18, 368, 1);
    id v20 = [a1 configuration];
    id v21 = [v20 externalIdentifier];
    SEL v54 = v15;
    id v55 = v13;
    SEL v53 = v20;
    int v52 = v9;
    if (v21)
    {
      uint64_t v50 = [a1 configuration];
      id v49 = [v50 contentFilter];
      id v22 = [v49 perApp];
    }
    else
    {
      id v22 = 0;
    }
    id v23 = [a1 configuration];
    SEL v24 = [v23 contentFilter];
    [v24 disableEncryptedDNSSettings];
    id v25 = v14;
    id v26 = v17;
    id v27 = v19;
    id v28 = v22;
    SEL v29 = v28;
    if (v7 && *(_DWORD *)(v7 + 8) == 4)
    {
      if (v27) {
        BOOL v30 = v28 == 0;
      }
      else {
        BOOL v30 = 1;
      }
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_10003BF4C;
      io_connect_t v57 = &unk_1000C5DC8;
      char v31 = !v30;
      *(void *)&long long v58 = v7;
      int v62 = v52;
      char v64 = v31;
      *((void *)&v58 + 1) = v27;
      id v59 = v25;
      unsigned int v63 = v51;
      id v60 = v26;
      id v61 = v29;
      uint64_t v6 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
    }
    else
    {
      uint64_t v6 = 0;
    }

    if (v21)
    {
    }
LABEL_28:

    return v6;
  }
  return 0;
}

BOOL sub_100072BB8(void *a1)
{
  unint64_t v2 = [a1 configuration];
  uint64_t v3 = [v2 pluginType];

  int v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138412802;
    id v21 = a1;
    __int16 v22 = 2112;
    id v23 = v3;
    __int16 v24 = 1024;
    int v25 = 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Check Filter Plugin installation for %@ (isIP %d)", (uint8_t *)&v20, 0x1Cu);
  }

  if (v3)
  {
    if (a1[49] == 5)
    {
      unsigned __int8 v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = a1;
        uint64_t v6 = "%@: Filter Plugin is being updated";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v20, 0xCu);
      }
    }
    else
    {
      SEL v8 = [a1 configuration];
      int v9 = [v8 contentFilter];
      unsigned __int8 v10 = [v9 isEnabled];

      if (v10)
      {
        id v11 = [a1 configuration];
        id v12 = [v11 contentFilter];
        uint64_t v13 = [v12 provider];
        if ([v13 filterSockets])
        {
        }
        else
        {
          __int16 v15 = [a1 configuration];
          SEL v16 = [v15 contentFilter];
          id v17 = [v16 provider];
          unsigned __int8 v18 = [v17 filterBrowsers];

          if ((v18 & 1) == 0)
          {
            unsigned __int8 v5 = ne_log_obj();
            if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_14;
            }
            int v20 = 138412290;
            id v21 = a1;
            uint64_t v6 = "%@: filterSockets (and filterBrowsers) is not enabled";
            goto LABEL_13;
          }
        }
        unsigned __int8 v5 = +[NELaunchServices pluginProxyWithIdentifier:0 type:v3 pluginClass:4 extensionPoint:0];
        if (!v5)
        {
          id v19 = ne_log_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = 138412290;
            id v21 = a1;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@: Filter Plugin is not available in launch services", (uint8_t *)&v20, 0xCu);
          }
        }
        BOOL v7 = v5 != 0;
        goto LABEL_15;
      }
      unsigned __int8 v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = a1;
        uint64_t v6 = "%@: Configuration is not enabled";
        goto LABEL_13;
      }
    }
LABEL_14:
    BOOL v7 = 0;
LABEL_15:

    goto LABEL_16;
  }
  BOOL v7 = 0;
LABEL_16:

  return v7;
}

id sub_100072F70(uint64_t a1)
{
  sub_10007267C(*(_DWORD **)(a1 + 32));
  unint64_t v2 = *(void **)(a1 + 32);

  return [v2 startWithCommand:0 isOnDemand:0];
}

void sub_100073438(unsigned char *a1, char a2)
{
  int v4 = [a1 configuration];
  unsigned __int8 v5 = [v4 contentFilter];
  uint64_t v6 = [v5 provider];
  if ([v6 disableDefaultDrop] & 1) != 0 || (a2)
  {

    goto LABEL_11;
  }
  BOOL v7 = sub_100072BB8(a1);

  if (!v7)
  {
LABEL_11:
    [a1 setDefaultDropType:0];
    id v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v42) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Filter removing perApp Drop policies", (uint8_t *)&v42, 2u);
    }

    int v20 = [a1 policySession];
    sub_10003D7F0(v20, v21);

    a1[353] = 0;
    goto LABEL_14;
  }
  SEL v8 = [a1 configuration];
  uint64_t v9 = [v8 externalIdentifier];
  if (v9)
  {
    unsigned __int8 v10 = (void *)v9;
    id v11 = [a1 configuration];
    id v12 = [v11 contentFilter];
    uint64_t v13 = [v12 perApp];

    if (v13)
    {
      unsigned __int8 v14 = [a1 waitForPerApp];
      __int16 v15 = ne_log_obj();
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (v16)
        {
          LOWORD(v42) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Filter removing perApp Drop policies", (uint8_t *)&v42, 2u);
        }

        id v17 = [a1 policySession];
        sub_10003D7F0(v17, v18);

        a1[353] = 0;
      }
      else
      {
        if (v16)
        {
          LOWORD(v42) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Filter installing perApp Drop policies", (uint8_t *)&v42, 2u);
        }

        BOOL v30 = [a1 policySession];
        char v31 = [a1 configuration];
        id v32 = [v31 contentFilter];
        id v33 = [v32 perApp];
        int v34 = v33;
        if (v30)
        {
          if (v33)
          {
            uint64_t v35 = [v33 appRules];
            if (v35)
            {
              __int16 v36 = (void *)v35;
              uint64_t v37 = [v34 appRules];
              id v38 = [v37 count];

              if (v38)
              {
                unsigned int v42 = _NSConcreteStackBlock;
                *(void *)&long long v43 = 3221225472;
                *((void *)&v43 + 1) = sub_10003D478;
                uint64_t v44 = &unk_1000C5AF8;
                long long v45 = v30;
                id v46 = v34;
                sub_10002EC18((uint64_t)NESMPolicyMasterSession, &v42);
              }
            }
          }
        }

        a1[353] = 1;
      }
    }
  }
  else
  {
  }
  uint64_t v39 = [a1 configuration];
  id v40 = [v39 externalIdentifier];
  if (v40)
  {
    char v41 = a1[353];

    if ((v41 & 1) == 0)
    {
      [a1 setDefaultDropType:0];
LABEL_14:
      __int16 v22 = [a1 policySession];
      sub_10003DEC4(v22, v23);
      char v24 = 0;
      goto LABEL_15;
    }
  }
  else
  {
  }
  [a1 setDefaultDropType:5];
  __int16 v22 = [a1 policySession];
  if (v22)
  {
    unsigned int v42 = _NSConcreteStackBlock;
    *(void *)&long long v43 = 3221225472;
    *((void *)&v43 + 1) = sub_10003D99C;
    uint64_t v44 = &unk_1000C5AD0;
    long long v45 = v22;
    sub_10002EC18((uint64_t)NESMPolicyMasterSession, &v42);
  }
  char v24 = 1;
LABEL_15:

  [a1 setIsDropPersistent:1];
  int v25 = ne_log_obj();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v26 = [a1 defaultDropType];
    unsigned int v27 = [a1 isDropPersistent];
    id v28 = "Non-Persistent";
    if (v27) {
      id v28 = "Persistent";
    }
    LODWORD(v42) = 67109378;
    HIDWORD(v42) = v26;
    LOWORD(v43) = 2080;
    *(void *)((char *)&v43 + 2) = v28;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Filter setting IP Drop-All to %d (%s)", (uint8_t *)&v42, 0x12u);
  }

  SEL v29 = [a1 server];
  sub_100055F04(v29, @"drop_all_feature_content_filter", v24);
}

uint64_t sub_100073930(void *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = a1;
  objc_sync_enter(v1);
  unint64_t v2 = [v1 configuration];
  uint64_t v3 = [v2 externalIdentifier];
  if (v3)
  {
    int v4 = [v1 configuration];
    unsigned __int8 v5 = [v4 contentFilter];
    uint64_t v6 = [v5 perApp];
    BOOL v7 = [v6 appRules];
    id v8 = [v7 count];

    if (!v8)
    {
      uint64_t v9 = ne_log_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v10 = [v1 configuration];
        id v11 = [v10 name];
        int v41 = 138412290;
        id v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fail to allocate control unit - perApp Content Filter missing appRules for %@", (uint8_t *)&v41, 0xCu);
      }
      goto LABEL_29;
    }
  }
  else
  {
  }
  id v12 = [v1 configuration];
  uint64_t v13 = [v12 contentFilter];
  unsigned __int8 v14 = [v13 provider];
  if ([v14 filterSockets])
  {
    int v15 = v1[89];

    if (!v15)
    {
LABEL_13:
      id v20 = [v1 configuration];
      self;
      id v21 = [v20 contentFilter];
      __int16 v22 = [v21 provider];
      int v23 = sub_100073F08((uint64_t)NESMFilterSession, v22);

      char v24 = [v20 contentFilter];
      if ((uint64_t)[v24 grade] <= 0)
      {
      }
      else
      {
        int v25 = [v20 contentFilter];
        uint64_t v26 = (uint64_t)[v25 grade];

        if (v26 < 3)
        {
          os_unfair_lock_lock(&stru_1000D7C50);
          unsigned int v27 = [v20 externalIdentifier];

          if (v27)
          {
            unsigned int v28 = 0;
            while (((dword_1000D7C54 >> v28) & 1) != 0)
            {
              if (++v28 == 7)
              {
                SEL v29 = ne_log_obj();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  id v40 = [v20 name];
                  int v41 = 138412290;
                  id v42 = v40;
                  _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "allocateFilterControlUnitForConfiguration: <%@> no more slot", (uint8_t *)&v41, 0xCu);
                }
                unsigned int v28 = 8;
                break;
              }
            }
          }
          else
          {
            unsigned int v28 = 7;
          }
          id v33 = ne_log_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            int v34 = [v20 name];
            int v41 = 138412546;
            id v42 = v34;
            __int16 v43 = 1024;
            int v44 = v28;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "allocateFilterControlUnitForConfiguration: <%@> slot %d", (uint8_t *)&v41, 0x12u);
          }
          if (v28 < 8)
          {
            dword_1000D7C54 |= 1 << v28;
            os_unfair_lock_unlock(&stru_1000D7C50);

            uint64_t v35 = ne_log_obj();
            int v36 = (1 << v28) | v23;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              int v41 = 67109120;
              LODWORD(v42) = v36;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Allocated control unit %u", (uint8_t *)&v41, 8u);
            }

            v1[89] = v36;
            goto LABEL_23;
          }
          uint64_t v37 = ne_log_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v39 = [v20 name];
            int v41 = 138412546;
            id v42 = v39;
            __int16 v43 = 1024;
            int v44 = dword_1000D7C54;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "allocateFilterControlUnitForConfiguration: <%@> Failed to allocate a control unit, unitMap = %x", (uint8_t *)&v41, 0x12u);
          }
          os_unfair_lock_unlock(&stru_1000D7C50);
LABEL_28:

LABEL_29:
          uint64_t v30 = 0;
          goto LABEL_30;
        }
      }
      char v31 = ne_log_obj();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        id v38 = [v20 contentFilter];
        int v41 = 134217984;
        id v42 = [v38 grade];
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to allocate a control unit, configuration has an invalid filter grade: %ld", (uint8_t *)&v41, 0xCu);
      }
      goto LABEL_28;
    }
  }
  else
  {
    BOOL v16 = [v1 configuration];
    id v17 = [v16 contentFilter];
    unsigned __int8 v18 = [v17 provider];
    if ([v18 filterBrowsers])
    {
      int v19 = v1[89];

      if (!v19) {
        goto LABEL_13;
      }
    }
    else
    {
    }
  }
LABEL_23:
  uint64_t v30 = 1;
LABEL_30:
  objc_sync_exit(v1);

  return v30;
}

void sub_100073EDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100073F08(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if ([v2 filterBrowsers] && !objc_msgSend(v2, "filterSockets"))
  {
    LODWORD(v3) = 0x80000000;
  }
  else if (([v2 filterBrowsers] & 1) != 0 {
         || ([v2 filterSockets] & 1) == 0)
  }
  {
    if ([v2 filterBrowsers])
    {
      LODWORD(v3) = 0;
    }
    else if ([v2 filterSockets])
    {
      LODWORD(v3) = 0;
    }
    else
    {
      LODWORD(v3) = -1073741824;
    }
  }
  else
  {
    LODWORD(v3) = 0x40000000;
  }
  if ([v2 preserveExistingConnections]) {
    uint64_t v3 = v3 | 0x20000000;
  }
  else {
    uint64_t v3 = v3;
  }

  return v3;
}

void sub_10007463C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) == 1 && (uint64_t v2 = *(void *)(a1 + 32)) != 0 && (*(unsigned char *)(v2 + 354) & 1) != 0)
  {
    uint64_t pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 40));
    unsigned __int8 v5 = *(void **)(a1 + 32);
    if (v5) {
      id Property = objc_getProperty(v5, v3, 400, 1);
    }
    else {
      id Property = 0;
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_10007483C;
    v10[3] = &unk_1000C6528;
    id v11 = *(id *)(a1 + 48);
    BOOL v7 = v10;
    if (Property)
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_100018B30;
      v14[3] = &unk_1000C6AE0;
      v14[4] = Property;
      id v8 = [Property remotePluginObjectWithErrorHandler:v14];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100018BE8;
      v12[3] = &unk_1000C5878;
      void v12[4] = Property;
      uint64_t v13 = v7;
      [v8 getFilterClientConnectionWithCompletionHandler:pid completionHandler:v12];
    }
  }
  else
  {
    xpc_object_t message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    xpc_dictionary_set_int64(message, "error", 3);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), message);
  }
}

void sub_10007483C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  id v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (reply)
  {
    BOOL v9 = xpc_get_type(reply) != (xpc_type_t)&_xpc_type_dictionary || v8 == 0;
    if (!v9 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection)
    {
      if (v5
        && ([v5 _endpoint], (id v11 = objc_claimAutoreleasedReturnValue()) != 0)
        && (id v12 = v11, type = xpc_get_type(v11), v12, type == (xpc_type_t)&_xpc_type_endpoint))
      {
        BOOL v16 = [v5 _endpoint];
        xpc_dictionary_set_value(reply, "new-connection", v16);

        if (!v6) {
          goto LABEL_18;
        }
      }
      else
      {
        unsigned __int8 v14 = ne_log_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v17) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to get a valid XPC endpoint from the filter plugin", (uint8_t *)&v17, 2u);
        }

        xpc_dictionary_set_int64(reply, "error", 3);
        if (!v6) {
          goto LABEL_18;
        }
      }
      id v15 = v6;
      xpc_dictionary_set_data(reply, "crypto-key", [v15 bytes], (size_t)[v15 length]);
LABEL_18:
      xpc_connection_send_message(v8, reply);
      goto LABEL_10;
    }
  }
  unsigned __int8 v10 = ne_log_obj();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v17 = 134218240;
    xpc_object_t v18 = reply;
    __int16 v19 = 2048;
    id v20 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to create a reply (%p) or a connection to send it over (%p) when sending the filter connection to the client", (uint8_t *)&v17, 0x16u);
  }

LABEL_10:
}

id sub_1000754A0(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Handling installed apps change", (uint8_t *)&v6, 0xCu);
  }

  sub_10007267C(*(_DWORD **)(a1 + 32));
  int v4 = *(unsigned char **)(a1 + 32);
  if (v4)
  {
    sub_100073438(v4, 0);
    int v4 = *(unsigned char **)(a1 + 32);
  }
  return [v4 restartSession];
}

id sub_100075600(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2)
  {
    sub_100073438(v2, 0);
    uint64_t v2 = *(unsigned char **)(a1 + 32);
  }

  return [v2 startWithCommand:0 isOnDemand:0];
}

void sub_10007576C(void *self, const char *a2)
{
  if (self)
  {
    if (a2)
    {
      self[54] = 500;
      self[55] = 0;
    }
    if (objc_getProperty(self, a2, 424, 1))
    {
      id Property = objc_getProperty(self, v3, 424, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(self, v5, 0, 424);
    }
  }
}

void sub_100075D24(id *self, const char *a2)
{
  if (self && self[49] != a2)
  {
    if (!objc_getProperty(self, a2, 384, 1)
      || (id v5 = objc_getProperty(self, v4, 384, 1),
          +[NSNumber numberWithInteger:a2],
          int v6 = objc_claimAutoreleasedReturnValue(),
          [v5 objectForKeyedSubscript:v6],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          v5,
          v6,
          !v7))
    {
      uint64_t v8 = +[NESMFilterSessionState stateWithType:a2];
      if (!v8) {
        __assert_rtn("-[NESMFilterSession setState:]", "NESMFilterSession.m", 333, "0");
      }
      uint64_t v7 = (void *)v8;
      if (!objc_getProperty(self, v9, 384, 1))
      {
        id v11 = objc_alloc_init((Class)NSMutableDictionary);
        objc_setProperty_atomic(self, v12, v11, 384);
      }
      id v13 = objc_getProperty(self, v10, 384, 1);
      unsigned __int8 v14 = +[NSNumber numberWithInteger:a2];
      [v13 setObject:v7 forKeyedSubscript:v14];
    }
    id v15 = self[49];
    [self[47] leave];
    self[49] = (id)a2;
    id v16 = self[47];
    self[47] = v7;
    id v17 = v7;

    [self[47] enterWithSession:self];
    if (v15)
    {
      switch((unint64_t)self[49])
      {
        case 1uLL:
          if ((*((unsigned char *)self + 355) & 1) == 0 && [self lastStopReason] != 6)
          {
            sub_100075FF4(self, v18);
            goto LABEL_20;
          }
          if ([self lastStopReason] != 6) {
            goto LABEL_20;
          }
          uint64_t v19 = 1;
          sub_100073438(self, 1);
          id v20 = [self server];
          [v20 deregisterSession:self];

          break;
        case 2uLL:
          uint64_t v19 = 2;
          break;
        case 3uLL:
          sub_10007576C(self, (const char *)1);
          uint64_t v19 = 3;
          break;
        case 4uLL:
          uint64_t v19 = 5;
          break;
        default:
LABEL_20:
          uint64_t v19 = 1;
          break;
      }
      [self setStatus:v19];
    }
  }
}

void sub_100075FF4(void *a1, const char *a2)
{
  if (objc_getProperty(a1, a2, 424, 1))
  {
    id Property = objc_getProperty(a1, v3, 424, 1);
    dispatch_source_cancel(Property);
    objc_setProperty_atomic(a1, v5, 0, 424);
  }
  unint64_t v6 = a1[54];
  if (v6 >> 5 <= 0x752)
  {
    unint64_t v7 = a1[55];
    if (v7 < 3)
    {
      unint64_t v8 = v7 + 1;
    }
    else
    {
      unint64_t v8 = 0;
      a1[54] = 4 * v6;
    }
    a1[55] = v8;
  }
  BOOL v9 = [a1 queue];
  unsigned __int8 v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v9);

  dispatch_time_t v11 = dispatch_time(0, 1000000 * a1[54]);
  dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x1388uLL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_100076184;
  v14[3] = &unk_1000C6C38;
  v14[4] = a1;
  id v15 = v10;
  SEL v12 = v10;
  dispatch_source_set_event_handler(v12, v14);
  dispatch_resume(v12);
  objc_setProperty_atomic(a1, v13, v12, 424);
}

void sub_100076184(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  if (v3 && (v3[355] & 1) == 0 && objc_getProperty(v3, a2, 416, 1))
  {
    int v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Restarting", (uint8_t *)&v9, 0xCu);
    }

    unint64_t v7 = *(void **)(a1 + 32);
    if (v7) {
      id Property = objc_getProperty(*(id *)(a1 + 32), v6, 416, 1);
    }
    else {
      id Property = 0;
    }
    [v7 handleStartMessage:Property];
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

NEFilterPlugin *sub_1000764A8(void *a1, uint64_t a2)
{
  int v4 = [a1 configuration];
  uint64_t v5 = [v4 pluginType];

  unint64_t v6 = (objc_class *)objc_opt_class();
  if (a2 == 4)
  {
    unint64_t v7 = [a1 configuration];
    unint64_t v8 = [v7 contentFilter];
    int v9 = [v8 provider];
    uint64_t v10 = [v9 filterDataProviderBundleIdentifier];
  }
  else
  {
    if (a2 != 6)
    {
LABEL_9:
      id v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138412546;
        id v33 = a1;
        __int16 v34 = 2048;
        uint64_t v35 = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@: Configuration does not have a provider bundle identifier for class %ld", buf, 0x16u);
      }

      dispatch_time_t v11 = 0;
      xpc_object_t v18 = 0;
      goto LABEL_18;
    }
    unint64_t v7 = [a1 configuration];
    unint64_t v8 = [v7 contentFilter];
    int v9 = [v8 provider];
    uint64_t v10 = [v9 filterPacketProviderBundleIdentifier];
  }
  dispatch_time_t v11 = (void *)v10;

  if (!v11) {
    goto LABEL_9;
  }
  SEL v12 = sub_10000C120();
  int v13 = sub_10000D8B4((uint64_t)v12, v11, a2);

  if (v13)
  {
    unint64_t v6 = (objc_class *)objc_opt_class();
    unsigned __int8 v14 = [a1 configuration];
    id v15 = [v14 contentFilter];
    id v16 = [v15 provider];
    if (a2 == 4) {
      [v16 dataProviderDesignatedRequirement];
    }
    else {
    id v20 = [v16 packetProviderDesignatedRequirement];
    }

    if (!v20)
    {
      xpc_object_t v18 = ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412802;
        id v33 = a1;
        __int16 v34 = 2112;
        uint64_t v35 = (uint64_t)v5;
        __int16 v36 = 2048;
        uint64_t v37 = a2;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@: Cannot create agent for plugin type %@ (class %ld), missing designated requirement", buf, 0x20u);
      }
      goto LABEL_24;
    }
    v30[0] = @"plugin-requirement";
    v30[1] = @"extension-identifier";
    v31[0] = v20;
    v31[1] = v11;
    xpc_object_t v18 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];
  }
  else
  {
    uint64_t v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138412546;
      id v33 = a1;
      __int16 v34 = 2112;
      uint64_t v35 = (uint64_t)v11;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@: System Extension %@ is not currently registered", buf, 0x16u);
    }

    v30[0] = @"extension-identifier";
    v31[0] = v11;
    xpc_object_t v18 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:1];
  }
LABEL_18:
  id v21 = [v6 alloc];
  __int16 v22 = [a1 uid];
  id v23 = [v21 initWithPluginType:v5 pluginVersion:1 pluginClass:a2 pluginInfo:v18 userID:v22];

  if (v23) {
    goto LABEL_25;
  }
  char v24 = ne_log_obj();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 138412802;
    id v33 = a1;
    __int16 v34 = 2112;
    uint64_t v35 = (uint64_t)v5;
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@: Failed to create a neagent instance for plugin type %@, class %ld", buf, 0x20u);
  }

LABEL_24:
  id v23 = 0;
LABEL_25:

  if (v23)
  {
    int v25 = ne_log_obj();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138412546;
      id v33 = a1;
      __int16 v34 = 2048;
      uint64_t v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@: Creating a filter plugin with class %ld", buf, 0x16u);
    }

    uint64_t v26 = [NEFilterPlugin alloc];
    unsigned int v27 = [a1 queue];
    unsigned int v28 = [(NEPlugin *)v26 initWithAgent:v23 delegateQueue:v27 andDelegate:a1];
  }
  else
  {
    unsigned int v28 = 0;
  }

  return v28;
}

BOOL sub_1000769B4(void *a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = objc_getProperty(a1, a2, 400, 1);
  if (v3) {
    goto LABEL_7;
  }
  int v4 = [a1 configuration];
  uint64_t v5 = [v4 contentFilter];
  unint64_t v6 = [v5 provider];
  if ([v6 filterSockets])
  {

LABEL_6:
    sub_1000764A8(a1, 4);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_setProperty_atomic(a1, v11, v3, 400);
LABEL_7:

    goto LABEL_8;
  }
  unint64_t v7 = [a1 configuration];
  unint64_t v8 = [v7 contentFilter];
  int v9 = [v8 provider];
  unsigned __int8 v10 = [v9 filterBrowsers];

  if (v10) {
    goto LABEL_6;
  }
LABEL_8:
  SEL v12 = [a1 configuration];
  int v13 = [v12 contentFilter];
  unsigned __int8 v14 = [v13 provider];
  unsigned int v15 = [v14 filterPackets];

  if (v15)
  {
    id v17 = sub_1000764A8(a1, 6);
    objc_setProperty_atomic(a1, v18, v17, 408);
  }
  uint64_t v19 = 1;
  if (!objc_getProperty(a1, v16, 400, 1)) {
    return objc_getProperty(a1, v20, 408, 1) != 0;
  }
  return v19;
}

int64_t sub_10007726C(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_10007737C(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 424, 1))
    {
      [objc_getProperty(a1, v3, 424, 1) removeObserver:a1 forKeyPath:@"bestAvailableNetworkDescription"];
      objc_setProperty_atomic(a1, v4, 0, 424);
    }
    if (objc_getProperty(a1, v3, 416, 1))
    {
      uint64_t v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v7 = 138412290;
        unint64_t v8 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@ End Relay On Demand monitor transaction", (uint8_t *)&v7, 0xCu);
      }

      objc_setProperty_atomic(a1, v6, 0, 416);
    }
  }
}

void sub_100077618(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 376, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
    {
      [objc_getProperty(a1, v4, 384, 1) unregisterNetworkAgent];
      uint64_t v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        unint64_t v8 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Unregistered fallback relay network agent", (uint8_t *)&v7, 0xCu);
      }
    }
    objc_setProperty_atomic(a1, v4, 0, 384);
    sub_100077B80(a1);
    objc_setProperty_atomic(a1, v6, 0, 376);
  }
}

void sub_100077734(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 392, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
    {
      [objc_getProperty(a1, v4, 400, 1) unregisterNetworkAgent];
      uint64_t v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        unint64_t v8 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Unregistered relay DNS network agent", (uint8_t *)&v7, 0xCu);
      }
    }
    objc_setProperty_atomic(a1, v4, 0, 400);
    sub_100077850(a1);
    objc_setProperty_atomic(a1, v6, 0, 392);
  }
}

void sub_100077850(void *a1)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100077AEC;
  v18[3] = &unk_1000C66C8;
  void v18[4] = a1;
  uint64_t v2 = objc_retainBlock(v18);
  if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
  {
    id v4 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
    id v6 = objc_getProperty(a1, v5, 400, 1);
    int v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]);
    unint64_t v8 = [a1 configuration];
    int v9 = [v8 identifier];
    SEL v11 = [objc_getProperty(a1, v10, 392, 1) agentUUID];
    id v12 = [v4 initWithNetworkAgentRegistration:v6 sessionType:v7 configurationIdentifier:v9 agentUUID:v11 name:@"dns-settings"];

    if (v12)
    {
      int v13 = +[NEFileHandleMaintainer sharedMaintainer];
      [v13 setFileHandle:v12 matchingPredicate:v2];
    }
    else
    {
      unsigned __int8 v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v16 = [a1 configuration];
        id v17 = [v16 name];
        *(_DWORD *)int buf = 138412290;
        id v20 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create a file handle for relay DNS agent for configuration %@", buf, 0xCu);
      }
      int v13 = +[NEFileHandleMaintainer sharedMaintainer];
      [v13 removeFileHandleMatchingPredicate:v2];
    }
  }
  else
  {
    id v12 = +[NEFileHandleMaintainer sharedMaintainer];
    [v12 removeFileHandleMatchingPredicate:v2];
  }

  unsigned int v15 = +[NEFileHandleMaintainer sharedMaintainer];
  [v15 commit];
}

uint64_t sub_100077AEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_6;
  }
  id v5 = v3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v4, 392, 1);
  }
  unsigned __int8 v7 = [Property matchesFileHandle:v5];

  if (v7) {
    uint64_t v8 = 1;
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0;

  return v8;
}

void sub_100077B80(void *a1)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100077E1C;
  v18[3] = &unk_1000C66C8;
  void v18[4] = a1;
  uint64_t v2 = objc_retainBlock(v18);
  if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
  {
    id v4 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
    id v6 = objc_getProperty(a1, v5, 384, 1);
    unsigned __int8 v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]);
    uint64_t v8 = [a1 configuration];
    int v9 = [v8 identifier];
    SEL v11 = [objc_getProperty(a1, v10, 376, 1) agentUUID];
    id v12 = [v4 initWithNetworkAgentRegistration:v6 sessionType:v7 configurationIdentifier:v9 agentUUID:v11 name:@"h2-fallback"];

    if (v12)
    {
      int v13 = +[NEFileHandleMaintainer sharedMaintainer];
      [v13 setFileHandle:v12 matchingPredicate:v2];
    }
    else
    {
      unsigned __int8 v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v16 = [a1 configuration];
        id v17 = [v16 name];
        *(_DWORD *)int buf = 138412290;
        id v20 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create a file handle for fallback relay agent for configuration %@", buf, 0xCu);
      }
      int v13 = +[NEFileHandleMaintainer sharedMaintainer];
      [v13 removeFileHandleMatchingPredicate:v2];
    }
  }
  else
  {
    id v12 = +[NEFileHandleMaintainer sharedMaintainer];
    [v12 removeFileHandleMatchingPredicate:v2];
  }

  unsigned int v15 = +[NEFileHandleMaintainer sharedMaintainer];
  [v15 commit];
}

uint64_t sub_100077E1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_6;
  }
  id v5 = v3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v4, 376, 1);
  }
  unsigned __int8 v7 = [Property matchesFileHandle:v5];

  if (v7) {
    uint64_t v8 = 1;
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0;

  return v8;
}

void sub_100078C64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100078CA8(void *a1, char a2)
{
  if (a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3032000000;
    v8[3] = sub_100078DC8;
    void v8[4] = sub_100078DD8;
    id v9 = (id)os_transaction_create();
    id v4 = [a1 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100078DE0;
    block[3] = &unk_1000C6B08;
    char v6 = a2;
    char v7 = 1;
    void block[4] = a1;
    void block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }
}

void sub_100078DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078DC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100078DD8(uint64_t a1)
{
}

void sub_100078DE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    sub_1000811F4(*(void **)(a1 + 32));
    sub_10007FEB0(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 49))
  {
    uint64_t v2 = [*(id *)(a1 + 32) configuration];
    id v3 = [v2 relay];
    unsigned int v4 = [v3 isEnabled];

    id Property = *(id *)(a1 + 32);
    if (v4)
    {
      if (Property) {
        id Property = objc_getProperty(Property, v5, 408, 1);
      }
      id v8 = [Property excludedDomains];
      id v9 = *(void **)(a1 + 32);
      if (v9 && objc_getProperty(v9, v7, 432, 1))
      {
        id v11 = *(id *)(a1 + 32);
        if (v8)
        {
          if (v11) {
            id v12 = objc_getProperty(v11, v10, 432, 1);
          }
          else {
            id v12 = 0;
          }
          uint64_t v13 = [v8 arrayByAddingObjectsFromArray:v12];

          id v8 = (id)v13;
        }
        else
        {
          if (v11) {
            id v11 = objc_getProperty(v11, v10, 432, 1);
          }
          id v8 = v11;
        }
      }
      unsigned int v15 = [*(id *)(a1 + 32) policySession];
      id v38 = [*(id *)(a1 + 32) networkAgent];
      id v17 = [v38 agentUUID];
      id v18 = *(id *)(a1 + 32);
      if (v18) {
        id v18 = objc_getProperty(v18, v16, 392, 1);
      }
      id v20 = [v18 agentUUID];
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v19, 408, 1);
      }
      id v23 = [v21 matchDomains];
      id v24 = *(id *)(a1 + 32);
      if (v24) {
        id v24 = objc_getProperty(v24, v22, 408, 1);
      }
      int v25 = [v24 perApp];
      uint64_t v26 = [*(id *)(a1 + 32) server];
      unsigned int v28 = v26;
      if (v26) {
        uint64_t v26 = objc_getProperty(v26, v27, 80, 1);
      }
      id v29 = v26;
      id v30 = v17;
      id v31 = v20;
      id v32 = v23;
      id v14 = v8;
      id v33 = v25;
      id v34 = v29;
      uint64_t v35 = v34;
      if (v15 && v15[2] == 9)
      {
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_10004A378;
        v39[3] = &unk_1000C6020;
        void v39[4] = v15;
        id v40 = v34;
        id v41 = v30;
        id v42 = v31;
        id v43 = v33;
        id v44 = v32;
        id v45 = v14;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v39);
      }
    }
    else
    {
      id v14 = [Property policySession];
      sub_10002E854((uint64_t)v14);
    }
  }
  uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = 0;
}

id sub_10007913C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v29 = v3;
  nw_endpoint_t url = nw_endpoint_create_url((const char *)[v3 UTF8String]);
  masque = (void *)nw_proxy_hop_create_masque();
  nw_proxy_hop_set_masque_version();
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  char v7 = [v4 additionalHTTPHeaderFields];
  id v8 = [v7 countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v39;
    do
    {
      for (id i = 0; i != v9; id i = (char *)i + 1)
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v13 = [v4 additionalHTTPHeaderFields];
        id v14 = [v13 objectForKeyedSubscript:v12];

        [v12 UTF8String];
        [v14 UTF8String];
        nw_proxy_hop_add_extra_header();
      }
      id v9 = [v7 countByEnumeratingWithState:&v38 objects:v44 count:16];
    }
    while (v9);
  }

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  unsigned int v15 = [v4 rawPublicKeys];
  id v16 = [v15 countByEnumeratingWithState:&v34 objects:v43 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v35;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(void *)v35 != v18) {
          objc_enumerationMutation(v15);
        }
        id v20 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
        [v20 bytes];
        [v20 length];
        nw_proxy_hop_add_server_raw_public_key();
      }
      id v17 = [v15 countByEnumeratingWithState:&v34 objects:v43 count:16];
    }
    while (v17);
  }

  id v21 = [v4 identityReference];

  if (v21)
  {
    __int16 v22 = [v4 identityReference];
    nw_proxy_hop_set_client_identity_reference();
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v23 = [v4 certificateReferences];
  id v24 = (char *)[v23 countByEnumeratingWithState:&v30 objects:v42 count:16];
  if (v24)
  {
    int v25 = v24;
    uint64_t v26 = *(void *)v31;
    do
    {
      for (k = 0; k != v25; ++k)
      {
        if (*(void *)v31 != v26) {
          objc_enumerationMutation(v23);
        }
        nw_proxy_hop_add_client_certificate_reference();
      }
      int v25 = (char *)[v23 countByEnumeratingWithState:&v30 objects:v42 count:16];
    }
    while (v25);
  }

  return masque;
}

BOOL sub_10007945C(void *a1, const char *a2)
{
  if (!a1) {
    return 0;
  }
  BOOL v2 = 1;
  id v3 = [objc_getProperty(a1, a2, 408, 1) relays];
  id v4 = [v3 lastObject];

  id v5 = [v4 syntheticDNSAnswerIPv4Prefix];
  if (!v5)
  {
    char v6 = [v4 syntheticDNSAnswerIPv6Prefix];
    BOOL v2 = v6 != 0;
  }
  return v2;
}

void sub_1000794F4(unsigned __int16 *a1, const char *a2)
{
  int v63 = (int)a2;
  id v3 = [objc_getProperty(a1, a2, 408, 1) relays];
  id v4 = [v3 lastObject];

  char v6 = [v4 dnsOverHTTPSURL];
  if (v6)
  {
    id v7 = [objc_alloc((Class)NEDNSOverHTTPSSettings) initWithServers:&__NSArray0__struct];
    [v7 setServerURL:v6];
    id v9 = [objc_getProperty(a1, v8, 408, 1) matchDomains];
    [v7 setMatchDomains:v9];

    uint64_t v10 = [a1 configuration];
    id v11 = [v10 identifier];
    [v7 setProxyAgentUUID:v11];

    goto LABEL_3;
  }
  if (!sub_10007945C(a1, v5)) {
    goto LABEL_22;
  }
  if (a1[177])
  {
    long long v32 = +[NSString stringWithFormat:@"127.0.0.1:%u", a1[177]];
    id v33 = objc_alloc((Class)NEDNSSettings);
    SEL v72 = v32;
    long long v34 = +[NSArray arrayWithObjects:&v72 count:1];
    id v7 = [v33 initWithServers:v34];

    long long v36 = [objc_getProperty(a1, v35, 408, 1) matchDomains];
    [v7 setMatchDomains:v36];

LABEL_3:
    if (v7)
    {
      id v12 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
      uint64_t v13 = [a1 configuration];
      id v14 = [v13 identifier];
      id v15 = [v12 initWithConfigUUID:v14 sessionType:[a1 type] name:@"dns-settings"];
      objc_setProperty_atomic(a1, v16, v15, 392);

      [objc_getProperty(a1, v17, 392, 1) setActive:1];
      uint64_t v18 = [a1 configuration];
      uint64_t v19 = [v18 name];
      [objc_getProperty(a1, v20, 392, 1) setConfigurationName:v19];

      id v21 = objc_alloc((Class)NWNetworkAgentRegistration);
      objc_getProperty(a1, v22, 392, 1);
      id v23 = [v21 initWithNetworkAgentClass:objc_opt_class()];
      objc_setProperty_atomic(a1, v24, v23, 400);

      [objc_getProperty(a1, v25, 392, 1) setSettings:v7];
      receive_handler = 0;
      uint64_t p_receive_handler = (uint64_t)&receive_handler;
      uint64_t v68 = 0x3032000000;
      id v69 = sub_100078DC8;
      SEL v70 = sub_100078DD8;
      int v71 = 0;
      if (!v63) {
        goto LABEL_10;
      }
      uint64_t v26 = +[NEFileHandleMaintainer sharedMaintainer];
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472;
      v64[2] = sub_100079CB4;
      void v64[3] = &unk_1000C66A0;
      v64[4] = a1;
      v64[5] = &receive_handler;
      [v26 iterateFileHandlesWithBlock:v64];

      unsigned int v27 = *(void **)(p_receive_handler + 40);
      if (v27)
      {
        unsigned int v28 = [v27 agentUUID];
        id v30 = objc_getProperty(a1, v29, 392, 1);
        [v30 setAgentUUID:v28];
      }
      else
      {
LABEL_10:
        unsigned int v28 = +[NSUUID UUID];
        id v30 = objc_getProperty(a1, v37, 392, 1);
        [v30 setAgentUUID:v28];
      }

      long long v39 = *(void **)(p_receive_handler + 40);
      if (v39)
      {
        long long v40 = [v39 handle];
        uint64_t v41 = dup((int)[v40 fileDescriptor]);

        id v43 = objc_getProperty(a1, v42, 400, 1);
        id v45 = objc_getProperty(a1, v44, 392, 1);
        unsigned __int8 v46 = [v43 setRegisteredNetworkAgent:v45 fileDescriptor:v41];

        if ((v46 & 1) == 0) {
          close(v41);
        }
      }
      id v47 = objc_getProperty(a1, v38, 400, 1);
      unsigned __int8 v48 = [v47 isRegistered];

      if (v48)
      {
        id v50 = objc_getProperty(a1, v49, 400, 1);
        id v52 = objc_getProperty(a1, v51, 392, 1);
        [v50 updateNetworkAgent:v52];
      }
      else
      {
        SEL v53 = ne_log_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = a1;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "%@: Registered relay DNS network agent", (uint8_t *)&buf, 0xCu);
        }

        id v50 = objc_getProperty(a1, v54, 400, 1);
        id v52 = objc_getProperty(a1, v55, 392, 1);
        [v50 registerNetworkAgent:v52];
      }

      if (v63) {
        sub_100077850(a1);
      }
      _Block_object_dispose(&receive_handler, 8);
    }
    goto LABEL_22;
  }
  if (!objc_getProperty(a1, v31, 440, 1) && sub_10007945C(a1, v56))
  {
    nw_parameters_t secure_udp = nw_parameters_create_secure_udp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
    long long v58 = (void *)nw_connection_group_create_with_parameters();
    nw_connection_group_set_connection_limit();
    receive_handler = _NSConcreteStackBlock;
    uint64_t p_receive_handler = 3221225472;
    uint64_t v68 = (uint64_t)sub_100079D58;
    id v69 = (uint64_t (*)(uint64_t, uint64_t))&unk_1000C6598;
    SEL v70 = (void (*)(uint64_t))a1;
    id v59 = v58;
    int v71 = v59;
    nw_connection_group_set_receive_handler(v59, 0xFFFFFFFF, 1, &receive_handler);
    id v60 = [a1 queue];
    nw_connection_group_set_queue(v59, v60);

    objc_initWeak(&location, a1);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    SEL v74 = sub_10007A024;
    size_t v75 = &unk_1000C65C0;
    objc_copyWeak(&v77, &location);
    id v61 = v59;
    id v76 = v61;
    nw_connection_group_set_state_changed_handler(v61, &buf);
    objc_setProperty_atomic(a1, v62, v61, 440);
    nw_connection_group_start(v61);

    objc_destroyWeak(&v77);
    objc_destroyWeak(&location);
  }
LABEL_22:
}

void sub_100079C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, char a18)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100079CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v3;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 392, 1);
    }
    unsigned int v7 = [Property matchesFileHandle:v5];
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v5;
      id v5 = v9;
    }
    uint64_t v10 = v7 ^ 1;
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_100079D58(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  id v9 = v8;
  if (!v7 || !a4) {
    goto LABEL_20;
  }
  long long v31 = v8;
  id v32 = v7;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v30 = [objc_alloc((Class)NEDNSPacket) initFromData:v7];
  uint64_t v10 = [v30 queries];
  id v11 = [v10 countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (!v11) {
    goto LABEL_17;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v34;
  do
  {
    for (id i = 0; i != v12; id i = (char *)i + 1)
    {
      if (*(void *)v34 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(void **)(*((void *)&v33 + 1) + 8 * i);
      if ([v15 recordType] == (id)1)
      {
        SEL v16 = *(void **)(a1 + 32);
        SEL v17 = [v15 name];
        uint64_t v18 = v16;
        uint64_t v19 = v17;
        int v20 = 0;
      }
      else
      {
        if ([v15 recordType] != (id)28) {
          goto LABEL_13;
        }
        id v21 = *(void **)(a1 + 32);
        SEL v17 = [v15 name];
        uint64_t v18 = v21;
        uint64_t v19 = v17;
        int v20 = 1;
      }
      SEL v22 = sub_10007A0BC(v18, v19, v20);
      [v15 setAnswerData:v22];

      [v15 setAnswerTTL:15];
LABEL_13:
      id v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        SEL v24 = [v15 answerData];
        SEL v25 = [v15 name];
        *(_DWORD *)long long buf = 138412546;
        long long v38 = v24;
        __int16 v39 = 2112;
        long long v40 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Generated synthetic DNS answer %@ for name %@", buf, 0x16u);
      }
    }
    id v12 = [v10 countByEnumeratingWithState:&v33 objects:v41 count:16];
  }
  while (v12);
LABEL_17:

  uint64_t v26 = [v30 createResponse];
  unsigned int v27 = v26;
  id v9 = v31;
  if (v26)
  {
    unsigned int v28 = *(NSObject **)(a1 + 40);
    SEL v29 = [v26 _createDispatchData];
    nw_connection_group_reply(v28, v31, _nw_content_context_default_message, v29);
  }
  id v7 = v32;
LABEL_20:
}

void sub_10007A024(uint64_t a1, int a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2 == 2 && !a3)
  {
    id v6 = WeakRetained;
    WeakRetained[177] = nw_connection_group_get_port();
    sub_1000794F4(v6, 0);
    sub_100078CA8(v6, 0);
    id WeakRetained = v6;
  }
}

id sub_10007A0BC(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v7 = v5;
  if (!a1)
  {
    id v12 = 0;
    goto LABEL_57;
  }
  if (!v5)
  {
    uint64_t v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint32_t v66 = "-[NESMRelaySession getSyntheticAddressForHostname:ipv6:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s called with null hostname", buf, 0xCu);
    }
    id v12 = 0;
    goto LABEL_56;
  }
  if (a3) {
    uint64_t v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv6Addresses;
  }
  else {
    uint64_t v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv4Addresses;
  }
  id v9 = objc_getProperty(a1, v6, *v8, 1);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = [v9 objectForKeyedSubscript:v7];
    if (v11)
    {
      id v12 = (id)v11;
      sub_10007A650(a1, v7);
      goto LABEL_56;
    }
  }
  SEL v55 = v8;
  if ((unint64_t)[v10 count] >= 0x100)
  {
    id v56 = v10;
    [objc_getProperty(a1, v13, 464, 1) subarrayWithRange:0, 128];
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v14 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
    if (v14)
    {
      id v16 = v14;
      uint64_t v17 = *(void *)v61;
      do
      {
        for (id i = 0; i != v16; id i = (char *)i + 1)
        {
          if (*(void *)v61 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v60 + 1) + 8 * i);
          id v21 = [objc_getProperty(a1, v15, 448, 1) objectForKeyedSubscript:v19];
          if (v21)
          {
            sub_10007A754((uint64_t)NESMRelaySession, v21);
            [objc_getProperty(a1, v22, 448, 1) setObject:0 forKeyedSubscript:v19];
          }
          SEL v24 = [objc_getProperty(a1, v20, 456, 1) objectForKeyedSubscript:v19];
          if (v24)
          {
            sub_10007A754((uint64_t)NESMRelaySession, v24);
            [objc_getProperty(a1, v25, 456, 1) setObject:0 forKeyedSubscript:v19];
          }
          [objc_getProperty(a1, v23, 464, 1) removeObject:v19];
        }
        id v16 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
      }
      while (v16);
    }

    uint64_t v10 = v56;
  }
  uint64_t v26 = [objc_getProperty(a1, v13, 408, 1) relays];
  unsigned int v27 = [v26 lastObject];

  if (a3) {
    [v27 syntheticDNSAnswerIPv6Prefix];
  }
  else {
  unsigned int v28 = [v27 syntheticDNSAnswerIPv4Prefix];
  }
  SEL v29 = v28;
  if (!v28)
  {
    id v12 = 0;
    goto LABEL_55;
  }
  buf[0] = 0;
  [v28 UTF8String];
  address_from_string = nw_endpoint_create_address_from_string();
  long long v31 = address_from_string;
  id v12 = 0;
  if (!address_from_string) {
    goto LABEL_54;
  }
  unint64_t v32 = buf[0];
  if (buf[0] < 8u) {
    goto LABEL_54;
  }
  SEL v54 = v29;
  address = nw_endpoint_get_address(address_from_string);
  if (!address) {
    goto LABEL_47;
  }
  long long v34 = address;
  int sa_family = address->sa_family;
  if (!a3)
  {
    if (sa_family == 2)
    {
      SEL v53 = v31;
      unint64_t v36 = 4;
      goto LABEL_35;
    }
LABEL_47:
    id v12 = 0;
    SEL v29 = v54;
    goto LABEL_54;
  }
  if (sa_family != 30) {
    goto LABEL_47;
  }
  SEL v53 = v31;
  unint64_t v36 = 16;
LABEL_35:
  unint64_t v37 = v32 >> 3;
  uint64_t v38 = [v10 allValues];
  uint64_t v39 = 4;
  if (a3) {
    uint64_t v39 = 8;
  }
  size_t v40 = v36 - v37;
  id obja = (id)v38;
  if (v36 <= v37)
  {
    id v12 = 0;
    goto LABEL_53;
  }
  uint64_t v41 = (void *)v38;
  id v52 = v27;
  io_connect_t v57 = v7;
  unsigned int v42 = 0;
  id v43 = &v34->sa_len + v39;
  SEL v44 = &v34->sa_len + v39 + v37;
  unint64_t v45 = v36;
  while (1)
  {
    arc4random_buf(v44, v40);
    unsigned __int8 v46 = +[NSData dataWithBytes:v43 length:v45];
    if (([v41 containsObject:v46] & 1) == 0) {
      break;
    }
LABEL_44:

    if (v42++ >= 0x1F)
    {
      id v12 = 0;
      id v7 = v57;
      goto LABEL_52;
    }
  }
  id v12 = v46;
  self;
  if (!v12)
  {
LABEL_43:

    uint64_t v41 = obja;
    unint64_t v45 = v36;
    goto LABEL_44;
  }
  sub_10007A7D4();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000D7C68);
  if ([(id)qword_1000D7C58 containsObject:v12])
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000D7C68);
    goto LABEL_43;
  }
  [(id)qword_1000D7C58 addObject:v12];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000D7C68);

  if (!v10)
  {
    id v48 = objc_alloc_init((Class)NSMutableDictionary);
    objc_setProperty_atomic(a1, v49, v48, *v55);

    uint64_t v10 = objc_getProperty(a1, v50, *v55, 1);
  }
  id v7 = v57;
  -[NSObject setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, v57, v52);
  sub_10007A650(a1, v57);
LABEL_52:
  unsigned int v27 = v52;
LABEL_53:
  long long v31 = v53;
  SEL v29 = v54;

LABEL_54:
LABEL_55:

LABEL_56:
LABEL_57:

  return v12;
}

void sub_10007A650(void *a1, void *a2)
{
  id v11 = a2;
  if (!objc_getProperty(a1, v3, 464, 1))
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    objc_setProperty_atomic(a1, v6, v5, 464);
  }
  id v7 = [objc_getProperty(a1, v4, 464, 1) lastObject];
  unsigned __int8 v8 = [v7 isEqualToString:v11];

  if ((v8 & 1) == 0)
  {
    if (objc_msgSend(objc_getProperty(a1, v9, 464, 1), "containsObject:", v11)) {
      [objc_getProperty(a1, v10, 464, 1) removeObject:v11];
    }
    [objc_getProperty(a1, v10, 464, 1) addObject:v11];
  }
}

void sub_10007A754(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10007A7D4();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000D7C68);
  [(id)qword_1000D7C58 removeObject:v2];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000D7C68);
}

void sub_10007A7D4()
{
  self;
  if (qword_1000D7C60 != -1)
  {
    dispatch_once(&qword_1000D7C60, &stru_1000C6570);
  }
}

void sub_10007A824(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v2 = qword_1000D7C58;
  qword_1000D7C58 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_10007A860(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v3;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 376, 1);
    }
    unsigned int v7 = [Property matchesFileHandle:v5];
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v5;
      id v5 = v9;
    }
    uint64_t v10 = v7 ^ 1;
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_10007A998(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) configuration];
  id v3 = [v2 relay];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    [v4 startWithCommand:0 isOnDemand:0];
  }
}

void sub_10007AAC4(void *a1, const char *a2)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = a1;
  sub_10007737C(a1, a2);
  id v4 = [objc_getProperty(v2, v3, 408, 1) onDemandRules];

  if (!v4)
  {
    id v43 = [v2 server];
    [v43 requestInstallForSession:v2 withParentSession:0 exclusive:0];

    return;
  }
  uint64_t v6 = [objc_getProperty(v2, v5, 408, 1) onDemandRules];
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_34;
  }
  unsigned int v7 = (void *)v6;
  uint64_t v8 = +[NSMutableArray array];
  if (![v7 count])
  {
    id v27 = objc_alloc_init((Class)NWNetworkDescription);
    [v8 addObject:v27];

    goto LABEL_23;
  }
  id v42 = v2;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v9 = v7;
  id v10 = [v9 countByEnumeratingWithState:&v44 objects:buf count:16];
  if (!v10) {
    goto LABEL_17;
  }
  id v11 = v10;
  uint64_t v12 = *(void *)v45;
  do
  {
    for (id i = 0; i != v11; id i = (char *)i + 1)
    {
      if (*(void *)v45 != v12) {
        objc_enumerationMutation(v9);
      }
      id v14 = v8;
      id v15 = *(void **)(*((void *)&v44 + 1) + 8 * i);
      id v16 = objc_alloc_init((Class)NWNetworkDescription);
      id v17 = [v15 interfaceTypeMatch];
      if (v17 == (id)3)
      {
        uint64_t v18 = &off_1000C98A0;
      }
      else
      {
        if (v17 != (id)2) {
          goto LABEL_15;
        }
        uint64_t v18 = &off_1000C98B8;
      }
      uint64_t v19 = +[NSSet setWithObject:v18];
      [v16 setInterfaceTypeOptions:v19];

LABEL_15:
      int v20 = [v15 DNSSearchDomainMatch];
      id v21 = +[NSSet setWithArray:v20];
      [v16 setDnsSearchDomainOptions:v21];

      SEL v22 = [v15 DNSServerAddressMatch];
      id v23 = +[NSSet setWithArray:v22];
      [v16 setDnsServerAddressOptions:v23];

      SEL v24 = [v15 SSIDMatch];
      SEL v25 = +[NSSet setWithArray:v24];
      [v16 setSsidOptions:v25];

      uint64_t v26 = [v15 probeURL];
      [v16 setProbeURL:v26];

      uint64_t v8 = v14;
      [v14 addObject:v16];
    }
    id v11 = [v9 countByEnumeratingWithState:&v44 objects:buf count:16];
  }
  while (v11);
LABEL_17:

  uint64_t v2 = v42;
LABEL_23:

  if (v8)
  {
    id v28 = objc_alloc_init((Class)NWParameters);
    SEL v29 = +[NWMonitor monitorWithNetworkDescriptionArray:v8 endpoint:0 parameters:v28];
    objc_setProperty_atomic(v2, v30, v29, 424);

    if (objc_getProperty(v2, v31, 424, 1))
    {
      if (!objc_getProperty(v2, v32, 416, 1))
      {
        long long v34 = ne_log_obj();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          SEL v49 = v2;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ Begin Relay On Demand monitor transaction", buf, 0xCu);
        }

        id v35 = objc_alloc((Class)NSString);
        unint64_t v36 = [v2 configuration];
        unint64_t v37 = [v36 identifier];
        id v38 = [v35 initWithFormat:@"com.apple.nesessionmanager.RelayOnDemandMonitor.%@", v37];

        [v38 UTF8String];
        uint64_t v39 = (void *)os_transaction_create();
        objc_setProperty_atomic(v2, v40, v39, 416);
      }
      [objc_getProperty(v2, v33, 424, 1) addObserver:v2 forKeyPath:@"bestAvailableNetworkDescription" options:5 context:0];
    }
    else
    {
      uint64_t v41 = ne_log_obj();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        SEL v49 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%@ Relay On Demand monitor creation failed", buf, 0xCu);
      }
    }
  }
LABEL_34:
}

void sub_10007BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BA60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007BA70(uint64_t a1)
{
}

void sub_10007BA78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  SEL v3 = [*(id *)(a1 + 40) onDemandMonitor];
  if (v2 != v3)
  {

    goto LABEL_6;
  }
  unsigned int v4 = [*(id *)(a1 + 48) isEqualToString:@"bestAvailableNetworkDescription"];

  if (v4)
  {
    if ([*(id *)(a1 + 40) type] == 2) {
      uint64_t v5 = (uint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
    }
    else {
      uint64_t v5 = 0;
    }
    SEL v25 = [*(id *)(a1 + 40) onDemandMonitor];
    id v26 = [v25 bestAvailableNetworkDescription];

    if (!v26)
    {
      long long v34 = ne_log_obj();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v60 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%@: Matched no on demand rule", buf, 0xCu);
      }
      goto LABEL_39;
    }
    id v27 = [*(id *)(a1 + 40) onDemandMonitor];
    id v28 = [v27 networkDescriptionArray];
    id v29 = [v28 indexOfObject:v26];

    unsigned int v30 = [*(id *)(a1 + 40) type];
    SEL v31 = *(void **)(a1 + 40);
    if (v30 == 1)
    {
      unint64_t v32 = [v31 configuration];
      long long v33 = [v32 VPN];
    }
    else
    {
      if ([v31 type] != 2)
      {
        long long v34 = 0;
LABEL_31:
        if ((sub_10007C09C(*(void **)(a1 + 40)) & 1) == 0
          && sub_10007C1A4(*(void **)(a1 + 40)))
        {
          uint64_t v37 = sub_10007C2A0(*(void *)(a1 + 40), v34);

          long long v34 = v37;
        }
        if ([v34 count] > v29)
        {
          uint64_t v38 = [v34 objectAtIndex:v29];

          uint64_t v5 = v38;
        }
        uint64_t v39 = ne_log_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v60 = v40;
          __int16 v61 = 2112;
          uint64_t v62 = v5;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%@: Matched on demand rule %@", buf, 0x16u);
        }

LABEL_39:
        uint64_t v41 = [*(id *)(a1 + 40) matchedRule];
        if (v41 | v5)
        {
          id v42 = (void *)v41;
          id v43 = [*(id *)(a1 + 40) matchedRule];
          unsigned __int8 v44 = [v43 isEqual:v5];

          if ((v44 & 1) == 0)
          {
            [*(id *)(a1 + 40) setMatchedRule:v5];
            sub_10007C318(*(id *)(a1 + 40));
            [*(id *)(a1 + 40) notifyChangedExtendedStatus];
          }
        }
        goto LABEL_53;
      }
      unint64_t v32 = [*(id *)(a1 + 40) configuration];
      long long v33 = [v32 appVPN];
    }
    unint64_t v36 = v33;
    long long v34 = [v33 onDemandRules];

    goto LABEL_31;
  }
LABEL_6:
  uint64_t v6 = *(void **)(a1 + 32);
  unsigned int v7 = [*(id *)(a1 + 40) dnsRedirectionDetector];
  if (v6 != v7)
  {

    goto LABEL_54;
  }
  unsigned int v8 = [*(id *)(a1 + 48) isEqualToString:@"status"];

  if (v8)
  {
    id v9 = [*(id *)(a1 + 40) dnsRedirectionDetector];
    id v10 = [v9 status];

    if (v10 == (id)2)
    {
      id v11 = [*(id *)(a1 + 40) dnsRedirectionDetector];
      uint64_t v12 = [v11 resolvedEndpoints];
      id v13 = [v12 count];

      if (v13)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v14 = [*(id *)(a1 + 40) dnsRedirectionDetector];
        id v15 = [v14 resolvedEndpoints];

        id v16 = [v15 countByEnumeratingWithState:&v54 objects:v58 count:16];
        if (v16)
        {
          id v17 = v16;
          uint64_t v5 = 0;
          uint64_t v18 = *(void *)v55;
          do
          {
            uint64_t v19 = 0;
            int v20 = (void *)v5;
            do
            {
              if (*(void *)v55 != v18) {
                objc_enumerationMutation(v15);
              }
              id v21 = *(void **)(*((void *)&v54 + 1) + 8 * (void)v19);
              SEL v22 = ne_log_obj();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = *(void *)(a1 + 40);
                *(_DWORD *)long long buf = 138412546;
                uint64_t v60 = v23;
                __int16 v61 = 2112;
                uint64_t v62 = (uint64_t)v21;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@: Found redirected address %@", buf, 0x16u);
              }

              id v24 = [*(id *)(a1 + 40) lastPrimaryInterface];
              [v24 UTF8String];
              [v21 address];
              NEHelperCacheAddRedirectedAddress();

              uint64_t v5 = [v21 hostname];

              uint64_t v19 = (char *)v19 + 1;
              int v20 = (void *)v5;
            }
            while (v17 != v19);
            id v17 = [v15 countByEnumeratingWithState:&v54 objects:v58 count:16];
          }
          while (v17);
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      sub_10007DB1C(*(void **)(a1 + 40));
      [*(id *)(a1 + 40) setDnsRedirectionTransaction:0];
      id Property = [*(id *)(a1 + 40) server];
      long long v47 = Property;
      if (Property) {
        id Property = objc_getProperty(Property, v46, 64, 1);
      }
      id v26 = Property;

      if (v5) {
        id v48 = [objc_alloc((Class)NSDictionary) initWithObjectsAndKeys:v5, @"redirectedAddress", 0];
      }
      else {
        id v48 = objc_alloc_init((Class)NSDictionary);
      }
      SEL v49 = v48;
      SEL v50 = ne_log_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v60 = v5;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Caching DNS redirector result: %@", buf, 0xCu);
      }

      SEL v51 = +[NENetworkPropertiesCache sharedCache];
      [v51 setProperties:v49 forNetworkPath:v26];

LABEL_53:
    }
  }
LABEL_54:
  uint64_t v52 = *(void *)(*(void *)(a1 + 56) + 8);
  SEL v53 = *(void **)(v52 + 40);
  *(void *)(v52 + 40) = 0;
}

id sub_10007C09C(void *a1)
{
  if (a1 && ([a1 disableOnDemand] & 1) == 0)
  {
    if ([a1 type] == 1)
    {
      uint64_t v2 = [a1 configuration];
      SEL v3 = [v2 VPN];
      if ([v3 isOnDemandEnabled])
      {
        unsigned int v4 = [a1 configuration];
        uint64_t v5 = [v4 VPN];
LABEL_9:
        uint64_t v6 = v5;
        id v7 = [v5 isEnabled];

LABEL_12:
        return v7;
      }
      goto LABEL_11;
    }
    if ([a1 type] == 2)
    {
      uint64_t v2 = [a1 configuration];
      SEL v3 = [v2 appVPN];
      if ([v3 isOnDemandEnabled])
      {
        unsigned int v4 = [a1 configuration];
        uint64_t v5 = [v4 appVPN];
        goto LABEL_9;
      }
LABEL_11:
      id v7 = 0;
      goto LABEL_12;
    }
  }
  return 0;
}

id sub_10007C1A4(void *a1)
{
  if (!a1) {
    return 0;
  }
  if ([a1 type] != 1)
  {
    if ([a1 type] == 2)
    {
      uint64_t v2 = [a1 configuration];
      SEL v3 = [v2 appVPN];
      if ([v3 isDisconnectOnDemandEnabled])
      {
        unsigned int v4 = [a1 configuration];
        uint64_t v5 = [v4 appVPN];
        goto LABEL_8;
      }
LABEL_9:
      id v7 = 0;
      goto LABEL_10;
    }
    return 0;
  }
  uint64_t v2 = [a1 configuration];
  SEL v3 = [v2 VPN];
  if (![v3 isDisconnectOnDemandEnabled]) {
    goto LABEL_9;
  }
  unsigned int v4 = [a1 configuration];
  uint64_t v5 = [v4 VPN];
LABEL_8:
  uint64_t v6 = v5;
  id v7 = [v5 isEnabled];

LABEL_10:
  return v7;
}

uint64_t sub_10007C2A0(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = a2;
  SEL v3 = +[NSPredicate predicateWithBlock:&stru_1000C67A8];
  uint64_t v4 = [v2 filteredArrayUsingPredicate:v3];

  return v4;
}

id sub_10007C318(id result)
{
  if (!result) {
    return result;
  }
  id val = result;
  id v1 = [result server];
  id v2 = [v1 primaryPhysicalInterface];
  SEL v3 = [v2 interfaceName];
  uint64_t v4 = val;
  [val setLastPrimaryInterface:v3];

  [val setFailedConnectCountWithinInterval:0];
  sub_10007DB9C(val);
  if ([val type] == 1)
  {
    uint64_t v5 = [val configuration];
    uint64_t v6 = [v5 identifier];
    id v7 = [v6 UUIDString];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [val tunnelKind] == (id)2) {
      CFStringRef v8 = @"%@-TMP-FB-[^/]+";
    }
    else {
      CFStringRef v8 = @"%@-TMP-[^/]+";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v7);
    id v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(void *)uuid_string_t out = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, v9, kSCEntNetDNS);
    CFArrayRef v10 = SCDynamicStoreCopyKeyList(0, *(CFStringRef *)out);
    myCFRelease();
    id v11 = [(__CFArray *)v10 mutableCopy];
    [val setStaleOnDemandDNSKeys:v11];

    uint64_t v4 = val;
  }
  uint64_t v12 = [v4 matchedRule];
  if ([v12 action] == (id)3)
  {
    id v13 = val;
    unsigned int v14 = [val type];

    if (v14 == 1)
    {
      id v158 = [val matchedRule];
      id v15 = [val server];
      id v16 = [v15 primaryCellularInterface];
      if (v16)
      {
        id v17 = [val lastPrimaryInterface];
        uint64_t v18 = [val server];
        uint64_t v19 = [v18 primaryCellularInterface];
        int v20 = [v19 interfaceName];
        unsigned __int8 v21 = [v17 isEqualToString:v20];

        SEL v22 = val;
        if (v21) {
          goto LABEL_49;
        }
      }
      else
      {

        SEL v22 = val;
      }
      id v27 = [v22 server];
      id v29 = v27;
      if (v27) {
        id Property = objc_getProperty(v27, v28, 64, 1);
      }
      else {
        id Property = 0;
      }
      id v31 = Property;

      unint64_t v32 = +[NENetworkPropertiesCache sharedCache];
      id v33 = [v32 copyPropertiesForNetworkPath:v31];

      if (v33)
      {
        long long v34 = [v33 objectForKeyedSubscript:@"redirectedAddress"];
        uint64_t v35 = ne_log_obj();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uuid_string_t out = 138412290;
          *(void *)&out[4] = v34;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Using cached DNS redirector result: %@", out, 0xCu);
        }

        if (!isa_nsstring()) {
          goto LABEL_48;
        }
        id v36 = +[NWAddressEndpoint endpointWithHostname:v34 port:@"0"];
        if (v36)
        {
          uint64_t v37 = [val lastPrimaryInterface];
          [v37 UTF8String];
          [v36 address];
          NEHelperCacheAddRedirectedAddress();
        }
        else
        {
          uint64_t v37 = ne_log_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uuid_string_t out = 138412290;
            *(void *)&out[4] = v34;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to create an address endpoint from %@", out, 0xCu);
          }
          id v36 = 0;
        }
      }
      else
      {
        uint64_t v38 = ne_log_obj();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uuid_string_t out = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Starting DNS redirection detection", out, 2u);
        }

        uint32_t v39 = arc4random_uniform(0x15u);
        uint32_t v40 = arc4random_uniform(0x15u);
        sub_10007DB1C(val);
        uint64_t v41 = [val dnsRedirectionTransaction];
        BOOL v42 = v41 == 0;

        if (v42)
        {
          id v43 = objc_alloc((Class)NSString);
          unsigned __int8 v44 = [val configuration];
          long long v45 = [v44 identifier];
          id v46 = [v43 initWithFormat:@"com.apple.nesessionmanager.dnsRedirection.%@", v45];

          [v46 UTF8String];
          long long v47 = (void *)os_transaction_create();
          [val setDnsRedirectionTransaction:v47];
        }
        uint64_t v48 = v39 + 8;
        if ((int)v48 < 1)
        {
          uint64_t v48 = 0;
        }
        else
        {
          SEL v49 = out;
          uint64_t v50 = v48;
          do
          {
            *v49++ = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
            --v50;
          }
          while (v50);
        }
        out[v48] = 46;
        if ((int)(v40 + 8) < 1)
        {
          uint64_t v51 = v48 + 1;
        }
        else
        {
          uint64_t v51 = v40 + v48 + 9;
          do
            out[++v48] = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
          while (v51 - 1 != v48);
        }
        strncpy(&out[v51], ".com", 255 - v48);
        uint64_t v52 = +[NSString stringWithUTF8String:out];
        long long v34 = +[NWHostEndpoint endpointWithHostname:v52 port:@"80"];

        id v36 = objc_alloc_init((Class)NWParameters);
        [v36 setRequiredAddressFamily:2];
        SEL v53 = [val lastPrimaryInterface];
        LOBYTE(v52) = v53 == 0;

        if ((v52 & 1) == 0)
        {
          id v54 = objc_alloc((Class)NWInterface);
          long long v55 = [val lastPrimaryInterface];
          id v56 = [v54 initWithInterfaceName:v55];
          [v36 setRequiredInterface:v56];
        }
        id v57 = [objc_alloc((Class)NWResolver) initWithEndpoint:v34 parameters:v36];
        [val setDnsRedirectionDetector:v57];

        long long v58 = [val dnsRedirectionDetector];

        if (!v58) {
          goto LABEL_47;
        }
        uint64_t v37 = [val dnsRedirectionDetector];
        [v37 addObserver:val forKeyPath:@"status" options:5 context:0];
      }

LABEL_47:
LABEL_48:

      SEL v22 = val;
LABEL_49:
      id v162 = objc_alloc_init((Class)NSMutableArray);
      [v22 setOnDemandDomainCache:];
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      id obj = [v158 connectionRules];
      id v171 = [obj countByEnumeratingWithState:&v187 objects:out count:16];
      if (v171)
      {
        uint64_t v168 = *(void *)v188;
        uint64_t v160 = kSCPropNetDNSServiceIdentifier;
        do
        {
          uint64_t v59 = 0;
          do
          {
            if (*(void *)v188 != v168)
            {
              uint64_t v60 = v59;
              objc_enumerationMutation(obj);
              uint64_t v59 = v60;
            }
            uint64_t v175 = v59;
            __int16 v61 = *(void **)(*((void *)&v187 + 1) + 8 * v59);
            uint64_t v62 = +[NSMutableArray array];
            long long v185 = 0u;
            long long v186 = 0u;
            long long v183 = 0u;
            long long v184 = 0u;
            long long v63 = [v61 matchDomains];
            id v64 = [v63 countByEnumeratingWithState:&v183 objects:uu count:16];
            if (v64)
            {
              uint64_t v65 = *(void *)v184;
              do
              {
                for (id i = 0; i != v64; id i = (char *)i + 1)
                {
                  if (*(void *)v184 != v65) {
                    objc_enumerationMutation(v63);
                  }
                  uint64_t v67 = *(void **)(*((void *)&v183 + 1) + 8 * i);
                  uint64_t v68 = +[NSCharacterSet characterSetWithCharactersInString:@"*."];
                  id v69 = [v67 stringByTrimmingCharactersInSet:v68];
                  if (v69) {
                    [v62 addObject:v69];
                  }
                }
                id v64 = [v63 countByEnumeratingWithState:&v183 objects:uu count:16];
              }
              while (v64);
            }

            if ([v61 action] == (id)1)
            {
              SEL v70 = [v61 probeURL];
              int v71 = isa_nsurl();

              if (v71)
              {
                SEL v72 = [v61 probeURL];
                uint64_t v73 = +[NSMutableURLRequest requestWithURL:v72];

                if (v73)
                {
                  SEL v74 = [val lastPrimaryInterface];
                  [v73 setBoundInterfaceIdentifier:v74];

                  size_t v75 = +[NSURLSessionConfiguration defaultSessionConfiguration];
                  id v76 = +[NSOperationQueue mainQueue];
                  id v77 = +[NSURLSession sessionWithConfiguration:v75 delegate:0 delegateQueue:v76];

                  v180[0] = _NSConcreteStackBlock;
                  v180[1] = 3221225472;
                  void v180[2] = sub_10007EEA8;
                  v180[3] = &unk_1000C6740;
                  v180[4] = val;
                  id v181 = v162;
                  id v182 = v62;
                  uint64_t v78 = [v77 dataTaskWithRequest:v73 completionHandler:v180];
                  [v78 resume];
                  [v77 finishTasksAndInvalidate];
                }
              }
            }
            if ([v61 action] == (id)1)
            {
              long long v79 = [v61 useDNSServers];
              int v80 = isa_nsarray();

              if (v80)
              {
                long long v81 = [v61 useDNSServers];
                long long v82 = [val configuration];
                SEL v83 = [v82 identifier];
                long long v84 = [v83 UUIDString];
                id v85 = v81;
                id v86 = v84;
                unsigned int add_explicit = atomic_fetch_add_explicit(dword_1000D78B8, 1u, memory_order_relaxed);
                if (isa_nsstring() && isa_nsarray())
                {
                  objc_opt_class();
                  unsigned int v165 = (int)(add_explicit + 1) % 1000 + 1000;
                  if ((objc_opt_isKindOfClass() & 1) != 0 && [val tunnelKind] == (id)2)
                  {
                    long long v88 = +[NSNumber numberWithInt:v165];
                    serviceID = +[NSString stringWithFormat:@"%@-TMP-FB-%@", v86, v88];
                  }
                  else
                  {
                    long long v88 = +[NSNumber numberWithInt:v165];
                    serviceID = +[NSString stringWithFormat:@"%@-TMP-%@", v86, v88];
                  }

                  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, serviceID, kSCEntNetDNS);
                  CFStringRef v191 = NetworkServiceEntity;
                  v203[0] = kSCPropNetDNSServerAddresses;
                  v203[1] = v160;
                  v204[0] = v85;
                  long long v90 = +[NSNumber numberWithInt:v165];
                  v204[1] = v90;
                  long long v91 = +[NSDictionary dictionaryWithObjects:v204 forKeys:v203 count:2];

                  if (NetworkServiceEntity && v91)
                  {
                    if (SCDynamicStoreSetValue(0, NetworkServiceEntity, v91))
                    {
                      long long v92 = [val staleOnDemandDNSKeys];
                      unsigned int v159 = [v92 containsObject:NetworkServiceEntity];

                      if (v159)
                      {
                        long long v93 = [val staleOnDemandDNSKeys];
                        [v93 removeObject:NetworkServiceEntity];
                      }
                    }
                    else
                    {
                      unsigned int v165 = 0;
                    }
                  }
                  myCFRelease();
                }
                else
                {
                  unsigned int v165 = 0;
                }

                if (v165)
                {
                  long long v94 = +[NSMutableDictionary dictionary];
                  [v94 setObject:v62 forKeyedSubscript:@"service-domains"];
                  int v95 = +[NSNumber numberWithInt:v165];
                  [v94 setObject:v95 forKeyedSubscript:@"service-dns-service"];

                  [v162 addObject:v94];
                }
              }
            }

            uint64_t v59 = v175 + 1;
          }
          while ((id)(v175 + 1) != v171);
          id v171 = [obj countByEnumeratingWithState:&v187 objects:out count:16];
        }
        while (v171);
      }

      sub_10007EFD4(val);
      goto LABEL_89;
    }
  }
  else
  {

    id v13 = val;
  }
  uint64_t v23 = [v13 lastPrimaryInterface];

  if (v23)
  {
    *(void *)uu = 0;
    uint64_t v193 = 0;
    id v24 = [val configuration];
    SEL v25 = [v24 identifier];
    [v25 getUUIDBytes:uu];

    memset(out, 0, 37);
    uuid_unparse(uu, out);
    id v26 = [val lastPrimaryInterface];
    [v26 UTF8String];
    NEHelperCacheSetDomainDictionaries();
  }
LABEL_89:
  unsigned int v96 = [val matchedRule];

  if (v96)
  {
    uint64_t v97 = [val uid];
    unsigned int v98 = [v97 unsignedIntValue];

    if (!v98)
    {
      unsigned int v99 = NEGetConsoleUserUID();
      if (v99) {
        unsigned int v98 = v99;
      }
      else {
        unsigned int v98 = 501;
      }
    }
    uint64_t v176 = sub_10007ED10((uint64_t)val);
    uint64_t v100 = val;
    if ([val type] == 1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [val tunnelKind] == (id)2)
      {
        BOOL v101 = [val policySession];
        long long v102 = [val matchedRule];
        unsigned int v103 = [val networkAgent];
        long long v104 = [v103 agentUUID];
        id v105 = [val onDemandPauseLevelInternal];
        unsigned int v106 = [val lastPrimaryInterface];
        id v107 = v102;
        id v108 = v104;
        id v109 = v106;
        id v110 = v176;
        if (v101 && v108 && v101[2] == 1)
        {
          *(void *)uuid_string_t out = _NSConcreteStackBlock;
          *(void *)&out[8] = 3221225472;
          *(void *)&out[16] = sub_100033688;
          *(void *)&out[24] = &unk_1000C5BA8;
          *(void *)&out[32] = v101;
          id v199 = v105;
          id v195 = v107;
          LODWORD(v200) = v98;
          id v196 = v109;
          id v197 = v108;
          id v198 = v110;
          sub_10002EC18((uint64_t)NESMPolicyMasterSession, out);
        }
      }
      else
      {
        long long v128 = [val configuration];
        long long v129 = [v128 VPN];
        long long v130 = [v129 protocol];
        long long v131 = [v130 DNSSettings];
        uint32_t v132 = [v131 matchDomains];

        if (![v132 count])
        {
          *(void *)&out[8] = 0;
          *(void *)uuid_string_t out = 0;
          long long v133 = [val configuration];
          id v134 = [v133 identifier];
          [v134 getUUIDBytes:out];

          [val type];
          matched = (void *)ne_session_service_copy_cached_match_domains();
          if (matched)
          {
            uint64_t v136 = _CFXPCCreateCFObjectFromXPCObject();

            uint32_t v132 = (void *)v136;
          }
        }
        BOOL v173 = [val policySession];
        id v137 = [val matchedRule];
        int v170 = [val networkAgent];
        id v138 = [v170 agentUUID];
        id v139 = [val onDemandPauseLevelInternal];
        id v140 = [val lastPrimaryInterface];
        int v167 = [val configuration];
        id obja = [v167 VPN];
        id v141 = [obja protocol];
        unsigned __int8 v142 = [v141 excludeLocalNetworks];
        id v143 = v137;
        id v144 = v138;
        id v145 = v140;
        id v146 = v176;
        id v147 = v132;
        if (v173 && v144 && v173[2] == 1)
        {
          *(void *)uuid_string_t out = _NSConcreteStackBlock;
          *(void *)&out[8] = 3221225472;
          *(void *)&out[16] = sub_1000320F8;
          *(void *)&out[24] = &unk_1000C5B80;
          unsigned int v201 = v98;
          *(void *)&out[32] = v173;
          id v200 = v139;
          id v195 = v143;
          id v196 = v147;
          id v197 = v145;
          id v198 = v144;
          id v199 = v146;
          unsigned __int8 v202 = v142;
          sub_10002EC18((uint64_t)NESMPolicyMasterSession, out);
        }
      }
    }
    else
    {
      if ([val type] != 2)
      {
LABEL_121:
        id v148 = [v100 matchedRule];
        BOOL v149 = [v148 action] == (id)2;

        if (v149)
        {
          uint64_t v150 = ne_log_obj();
          if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v151 = [val matchedRule];
            *(_DWORD *)uuid_string_t out = 138412546;
            *(void *)&out[4] = val;
            *(_WORD *)&out[12] = 2112;
            *(void *)&out[14] = v151;
            _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "%@: On Demand disconnect, current matched rule is %@", out, 0x16u);
          }
          xpc_object_t v152 = xpc_dictionary_create(0, 0, 0);
          xpc_dictionary_set_int64(v152, "SessionCommandType", 3);
          xpc_dictionary_set_int64(v152, "SessionStopReason", 39);
          objc_initWeak((id *)out, val);
          id v153 = [val messageQueue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10007EDCC;
          block[3] = &unk_1000C66F0;
          objc_copyWeak(&v179, (id *)out);
          id v178 = v152;
          id v154 = v152;
          dispatch_async(v153, block);

          objc_destroyWeak(&v179);
          objc_destroyWeak((id *)out);
        }

        goto LABEL_126;
      }
      long long v112 = [val policySession];
      long long v113 = [val configuration];
      long long v114 = [v113 appVPN];
      id v115 = [v114 appRules];
      sub_10003E240((uint64_t)v112, v115);

      CFStringRef v116 = [val policySession];
      __int16 v117 = [val matchedRule];
      id v172 = [val configuration];
      id v169 = [v172 appVPN];
      id v118 = [v169 appRules];
      id v166 = [val networkAgent];
      long long v119 = [v166 agentUUID];
      uint64_t v120 = [val configuration];
      long long v121 = [v120 appVPN];
      id v122 = [v121 excludedDomains];
      id v123 = v117;
      id v124 = v118;
      id v125 = v119;
      id v126 = v176;
      id v127 = v122;
      if (v116 && ([v124 count] || objc_msgSend(v126, "count")) && v125 && v116[2] == 2)
      {
        *(void *)uuid_string_t out = _NSConcreteStackBlock;
        *(void *)&out[8] = 3221225472;
        *(void *)&out[16] = sub_100034A18;
        *(void *)&out[24] = &unk_1000C5C88;
        *(void *)&out[32] = v116;
        id v195 = v123;
        id v196 = v124;
        id v197 = v127;
        id v198 = v125;
        id v199 = v126;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, out);
      }
    }
    uint64_t v100 = val;
    goto LABEL_121;
  }
  long long v111 = [val policySession];
  sub_10002E954((uint64_t)v111);

LABEL_126:
  BOOL v155 = [val type] == 1;
  id result = val;
  if (v155)
  {
    uint64_t v156 = [val staleOnDemandDNSKeys];

    if (v156)
    {
      CFArrayRef v157 = [val staleOnDemandDNSKeys];
      SCDynamicStoreSetMultiple(0, 0, v157, 0);
    }
    return [val setStaleOnDemandDNSKeys:0];
  }
  return result;
}

void sub_10007DB00(_Unwind_Exception *a1)
{
}

void sub_10007DB1C(void *a1)
{
  if (a1)
  {
    id v2 = [a1 dnsRedirectionDetector];

    if (v2)
    {
      SEL v3 = [a1 dnsRedirectionDetector];
      [v3 removeObserver:a1 forKeyPath:@"status"];

      [a1 setDnsRedirectionDetector:0];
    }
  }
}

void sub_10007DB9C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 networkAgentRegistration];
    if (v2)
    {
      SEL v3 = (void *)v2;
      uint64_t v4 = [a1 networkAgent];

      if (v4)
      {
        if ([a1 type] == 1)
        {
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 VPN];
        }
        else if ([a1 type] == 2)
        {
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 appVPN];
        }
        else if ([a1 type] == 3)
        {
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 alwaysOnVPN];
        }
        else if ([a1 type] == 4)
        {
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 contentFilter];
        }
        else if ([a1 type] == 5)
        {
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 pathController];
        }
        else
        {
          if ([a1 type] != 7)
          {
            if ([a1 type] == 9)
            {
              uint64_t v135 = [a1 configuration];
              uint64_t v136 = [v135 relay];
              unsigned int v137 = [v136 isEnabled];

              if (v137)
              {
LABEL_17:
                if (([a1 disableOnDemand] & 1) == 0)
                {
                  if ([a1 type] == 1)
                  {
                    id v9 = [a1 configuration];
                    CFArrayRef v10 = [v9 VPN];
LABEL_20:
                    id v11 = v10;
                    unint64_t v12 = (unint64_t)[v10 isOnDemandEnabled];

                    goto LABEL_25;
                  }
                  if ([a1 type] == 2
                    && [a1 onDemandPauseLevelInternal] != (id)2
                    && [a1 onDemandPauseLevelInternal] != (id)3)
                  {
                    id v9 = [a1 configuration];
                    CFArrayRef v10 = [v9 appVPN];
                    goto LABEL_20;
                  }
                }
                unint64_t v12 = 0;
LABEL_25:
                unsigned int v13 = [a1 status];
                if ([a1 type] == 5)
                {
                  BOOL v14 = 1;
                  if (!v12) {
                    goto LABEL_39;
                  }
                }
                else
                {
                  if ([a1 type] == 1) {
                    int v15 = v12;
                  }
                  else {
                    int v15 = 0;
                  }
                  if (v15 == 1)
                  {
                    id v16 = [a1 matchedRule];
                    BOOL v14 = [v16 action] == (id)3;

                    if (!v12) {
                      goto LABEL_39;
                    }
                  }
                  else
                  {
                    BOOL v14 = 0;
                    if (!v12) {
                      goto LABEL_39;
                    }
                  }
                }
                if ([a1 type] == 2)
                {
                  BOOL v17 = 1;
                  goto LABEL_40;
                }
                if ([a1 type] == 1)
                {
                  uint64_t v18 = [a1 matchedRule];
                  BOOL v17 = [v18 action] == (id)1;

                  goto LABEL_40;
                }
LABEL_39:
                BOOL v17 = 0;
LABEL_40:
                unsigned int v154 = v14;
                unsigned int v152 = v17;
                if ([a1 type] != 5)
                {
                  if ([a1 type] == 7)
                  {
                    id v26 = a1;
                    id v27 = [v26 networkAgent];
                    id v28 = [v27 settings];
                    unsigned int v30 = objc_getProperty(v26, v29, 360, 1);
                    unsigned __int8 v31 = [v28 isEqual:v30];
                    char v32 = v31 ^ 1;

                    if ((v31 & 1) == 0)
                    {
                      long long v34 = objc_getProperty(v26, v33, 360, 1);
                      [v27 setSettings:v34];
                    }
                  }
                  else if ([a1 type] == 9)
                  {
                    id v35 = a1;
                    uint64_t v37 = objc_getProperty(v35, v36, 360, 1);
                    uint64_t v38 = [v35 networkAgent];

                    uint32_t v39 = [v38 proxyConfig];
                    char is_equal = nw_proxy_config_is_equal();
                    char v32 = is_equal ^ 1;

                    if ((is_equal & 1) == 0) {
                      [v38 setProxyConfig:v37];
                    }
                  }
                  else
                  {
                    char v32 = 0;
                  }
LABEL_88:
                  id v62 = [a1 status];
                  long long v63 = [a1 networkAgent];
                  unsigned int v64 = [v63 lastStatus];

                  if (v64 == v62)
                  {
                    if (v32) {
                      goto LABEL_106;
                    }
                  }
                  else
                  {
                    uint64_t v65 = [a1 networkAgent];
                    [v65 setLastStatus:v62];

                    if (v64 != 2 || v62 == 3) {
                      char v67 = v32;
                    }
                    else {
                      char v67 = 1;
                    }
                    if (v67) {
                      goto LABEL_106;
                    }
                  }
                  uint64_t v68 = [a1 networkAgentRegistration];
                  if (![v68 isRegistered])
                  {
LABEL_105:

                    goto LABEL_106;
                  }
                  id v69 = [a1 networkAgent];
                  if (((v13 == 3) ^ [v69 isActive]))
                  {
LABEL_104:

                    goto LABEL_105;
                  }
                  unsigned int v70 = v13;
                  int v71 = [a1 networkAgent];
                  if (v154 != [v71 isVoluntary])
                  {
LABEL_103:

                    unsigned int v13 = v70;
                    goto LABEL_104;
                  }
                  SEL v72 = [a1 networkAgent];
                  if (v12 != [v72 isUserActivated])
                  {

                    goto LABEL_103;
                  }
                  unsigned __int8 v142 = [a1 networkAgent];
                  unsigned int v143 = [v142 isKernelActivated];

                  unsigned int v13 = v70;
                  if (v152 == v143) {
                    goto LABEL_125;
                  }
LABEL_106:
                  uint64_t v73 = [a1 networkAgent];
                  [v73 setActive:v13 == 3];

                  SEL v74 = [a1 networkAgent];
                  [v74 setVoluntary:v154];

                  size_t v75 = [a1 networkAgent];
                  [v75 setUserActivated:v12];

                  id v76 = [a1 networkAgent];
                  [v76 setKernelActivated:v152];

                  id v77 = [a1 networkAgentRegistration];
                  LODWORD(v73) = [v77 isRegistered];

                  if (v73)
                  {
                    uint64_t v78 = ne_log_obj();
                    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                    {
                      long long v79 = "inactive";
                      if (v13 == 3) {
                        long long v79 = "active";
                      }
                      int v80 = "voluntary";
                      if (!v154) {
                        int v80 = "compulsory";
                      }
                      long long v81 = "not-user-activiated";
                      *(_DWORD *)long long buf = 138413314;
                      int v170 = a1;
                      if (v12) {
                        long long v81 = "user-activated";
                      }
                      __int16 v171 = 2080;
                      id v172 = v79;
                      long long v82 = "kernel-activated";
                      __int16 v173 = 2080;
                      unsigned int v174 = v80;
                      __int16 v175 = 2080;
                      uint64_t v176 = v81;
                      if (!v152) {
                        long long v82 = "not-kernel-activated";
                      }
                      __int16 v177 = 2080;
                      id v178 = v82;
                      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%@: Updated network agent (%s, %s, %s, %s)", buf, 0x34u);
                    }

                    SEL v83 = [a1 networkAgentRegistration];
                    long long v84 = [a1 networkAgent];
                    [v83 updateNetworkAgent:v84];
                  }
                  else
                  {
                    if ([a1 lastStopReason] == 32)
                    {
LABEL_125:
                      long long v87 = [a1 registeredNetworkAgentInterfaces];
                      long long v88 = +[NSMutableArray arrayWithArray:v87];

                      long long v161 = 0u;
                      long long v162 = 0u;
                      long long v159 = 0u;
                      long long v160 = 0u;
                      long long v89 = [a1 networkAgentInterfaces];
                      id v90 = [v89 countByEnumeratingWithState:&v159 objects:v168 count:16];
                      if (v90)
                      {
                        id v91 = v90;
                        uint64_t v92 = *(void *)v160;
                        do
                        {
                          for (id i = 0; i != v91; id i = (char *)i + 1)
                          {
                            if (*(void *)v160 != v92) {
                              objc_enumerationMutation(v89);
                            }
                            long long v94 = *(const char **)(*((void *)&v159 + 1) + 8 * i);
                            int v95 = [a1 registeredNetworkAgentInterfaces];
                            unsigned __int8 v96 = [v95 containsObject:v94];

                            if ((v96 & 1) == 0)
                            {
                              uint64_t v97 = [a1 networkAgentRegistration];
                              unsigned int v98 = [v97 addNetworkAgentToInterfaceNamed:v94];

                              unsigned int v99 = ne_log_obj();
                              BOOL v100 = os_log_type_enabled(v99, OS_LOG_TYPE_INFO);
                              if (v98)
                              {
                                if (v100)
                                {
                                  *(_DWORD *)long long buf = 138412546;
                                  int v170 = a1;
                                  __int16 v171 = 2112;
                                  id v172 = v94;
                                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "%@: Added network agent to %@", buf, 0x16u);
                                }

                                [v88 addObject:v94];
                              }
                              else
                              {
                                if (v100)
                                {
                                  *(_DWORD *)long long buf = 138412546;
                                  int v170 = a1;
                                  __int16 v171 = 2112;
                                  id v172 = v94;
                                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "%@: Failed to add network agent to %@", buf, 0x16u);
                                }
                              }
                            }
                          }
                          id v91 = [v89 countByEnumeratingWithState:&v159 objects:v168 count:16];
                        }
                        while (v91);
                      }

                      long long v157 = 0u;
                      long long v158 = 0u;
                      long long v155 = 0u;
                      long long v156 = 0u;
                      BOOL v101 = [a1 registeredNetworkAgentInterfaces];
                      id v102 = [v101 countByEnumeratingWithState:&v155 objects:v167 count:16];
                      if (v102)
                      {
                        id v103 = v102;
                        uint64_t v104 = *(void *)v156;
                        do
                        {
                          for (j = 0; j != v103; j = (char *)j + 1)
                          {
                            if (*(void *)v156 != v104) {
                              objc_enumerationMutation(v101);
                            }
                            unsigned int v106 = *(const char **)(*((void *)&v155 + 1) + 8 * (void)j);
                            id v107 = [a1 networkAgentInterfaces];
                            unsigned __int8 v108 = [v107 containsObject:v106];

                            if ((v108 & 1) == 0)
                            {
                              id v109 = [a1 networkAgentRegistration];
                              unsigned int v110 = [v109 removeNetworkAgentFromInterfaceNamed:v106];

                              long long v111 = ne_log_obj();
                              BOOL v112 = os_log_type_enabled(v111, OS_LOG_TYPE_INFO);
                              if (v110)
                              {
                                if (v112)
                                {
                                  *(_DWORD *)long long buf = 138412546;
                                  int v170 = a1;
                                  __int16 v171 = 2112;
                                  id v172 = v106;
                                  long long v113 = v111;
                                  long long v114 = "%@: Removed network agent from %@";
                                  goto LABEL_151;
                                }
                              }
                              else if (v112)
                              {
                                *(_DWORD *)long long buf = 138412546;
                                int v170 = a1;
                                __int16 v171 = 2112;
                                id v172 = v106;
                                long long v113 = v111;
                                long long v114 = "%@: Failed to remove network agent from %@";
LABEL_151:
                                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, v114, buf, 0x16u);
                              }

                              [v88 removeObject:v106];
                              continue;
                            }
                          }
                          id v103 = [v101 countByEnumeratingWithState:&v155 objects:v167 count:16];
                        }
                        while (v103);
                      }

                      [a1 setRegisteredNetworkAgentInterfaces:v88];
                      goto LABEL_181;
                    }
                    id v85 = ne_log_obj();
                    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                    {
                      id v86 = "inactive";
                      if (v13 == 3) {
                        id v86 = "active";
                      }
                      *(_DWORD *)long long buf = 138412546;
                      int v170 = a1;
                      __int16 v171 = 2080;
                      id v172 = v86;
                      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "%@: Registered network agent (%s)", buf, 0x16u);
                    }

                    SEL v83 = [a1 networkAgentRegistration];
                    long long v84 = [a1 networkAgent];
                    [v83 registerNetworkAgent:v84];
                  }

                  goto LABEL_125;
                }
                unsigned int v150 = v13;
                uint64_t v19 = a1;
                id v153 = [v19 networkAgent];
                unsigned int v151 = v12;
                if (v19[355])
                {
                  id v20 = objc_alloc_init((Class)NSMutableArray);
                  unsigned __int8 v21 = v20;
                  if (*((void *)v19 + 54))
                  {
                    id v22 = objc_alloc((Class)NSNumber);
                    id v24 = [v22 initWithUnsignedLong:[objc_getProperty(v19, v23, 432, 1) interfaceIndex]];
                    [v21 addObject:v24];
                  }
                  else
                  {
                    [v20 addObject:&off_1000C99A8];
                  }
                  if (objc_getProperty(v19, v25, 448, 1))
                  {
                    long long v165 = 0u;
                    long long v166 = 0u;
                    long long v163 = 0u;
                    long long v164 = 0u;
                    id v42 = objc_getProperty(v19, v41, 448, 1);
                    id v43 = [v42 countByEnumeratingWithState:&v163 objects:buf count:16];
                    if (v43)
                    {
                      id v45 = v43;
                      uint64_t v46 = *(void *)v164;
                      do
                      {
                        for (k = 0; k != v45; k = (char *)k + 1)
                        {
                          if (*(void *)v164 != v46) {
                            objc_enumerationMutation(v42);
                          }
                          uint64_t v48 = [objc_getProperty(v19, v44, 448, 1) objectForKeyedSubscript:k];
                          if (!v48) {
                            abort();
                          }
                          SEL v49 = (void *)v48;
                          [v21 addObject:v48];
                        }
                        id v45 = [v42 countByEnumeratingWithState:&v163 objects:buf count:16];
                      }
                      while (v45);
                    }
                  }
                }
                else
                {
                  unsigned __int8 v21 = 0;
                }
                uint64_t v50 = v153;
                uint64_t v51 = [v153 advisoryInterfaceArray];
                if (!v51 && v21) {
                  goto LABEL_67;
                }
                SEL v53 = [v153 advisoryInterfaceArray];
                id v54 = v53;
                if (!v53 || v21)
                {
                  id v115 = [v153 advisoryInterfaceArray];
                  id v116 = [v115 count];
                  id v117 = [v21 count];

                  if (v116 == v117)
                  {
                    uint64_t v50 = v153;
                    if (!v21 || (id v118 = (char *)[v21 count]) == 0)
                    {
                      char v32 = 0;
                      goto LABEL_73;
                    }
                    long long v119 = v118;
                    uint64_t v120 = 0;
                    while (1)
                    {
                      long long v121 = [v50 advisoryInterfaceArray];
                      id v122 = [v121 objectAtIndexedSubscript:v120];
                      id v123 = [v122 unsignedIntegerValue];
                      id v124 = [v21 objectAtIndexedSubscript:v120];
                      id v125 = [v124 unsignedIntegerValue];

                      if (v123 != v125) {
                        break;
                      }
                      char v32 = 0;
                      ++v120;
                      uint64_t v50 = v153;
                      if (v119 == v120) {
                        goto LABEL_73;
                      }
                    }
                    id v144 = [objc_alloc((Class)NSMutableArray) initWithArray:v21];
                    uint64_t v50 = v153;
                    [v153 setAdvisoryInterfaceArray:v144];

LABEL_72:
                    char v32 = 1;
LABEL_73:
                    long long v55 = sub_100093964((uint64_t)v19);
                    id v56 = [v50 predictedInterfaceArray];
                    if (!v56 && v55)
                    {
LABEL_75:
                      id v57 = [objc_alloc((Class)NSMutableArray) initWithArray:v55];
                      [v50 setPredictedInterfaceArray:v57];

LABEL_80:
                      char v32 = 1;
                      unint64_t v12 = v151;
                      goto LABEL_81;
                    }
                    long long v58 = [v50 predictedInterfaceArray];
                    uint64_t v59 = v58;
                    if (!v58 || v55)
                    {
                      id v126 = [v50 predictedInterfaceArray];
                      id v127 = [v126 count];
                      id v128 = [v55 count];

                      if (v127 == v128)
                      {
                        unint64_t v12 = v151;
                        uint64_t v50 = v153;
                        if (v55)
                        {
                          id v148 = (char *)[v55 count];
                          if (v148)
                          {
                            BOOL v149 = v55;
                            long long v129 = 0;
                            while (1)
                            {
                              long long v130 = [v50 predictedInterfaceArray];
                              long long v131 = [v130 objectAtIndexedSubscript:v129];
                              id v132 = [v131 unsignedIntegerValue];
                              long long v133 = [v149 objectAtIndexedSubscript:v129];
                              id v134 = [v133 unsignedIntegerValue];

                              if (v132 != v134) {
                                break;
                              }
                              ++v129;
                              uint64_t v50 = v153;
                              if (v148 == v129) {
                                goto LABEL_188;
                              }
                            }
                            id v145 = objc_alloc((Class)NSMutableArray);
                            id v146 = sub_100093964((uint64_t)v19);
                            id v147 = [v145 initWithArray:v146];
                            uint64_t v50 = v153;
                            [v153 setPredictedInterfaceArray:v147];

                            char v32 = 1;
LABEL_188:
                            unint64_t v12 = v151;
                            long long v55 = v149;
                          }
                        }
LABEL_81:
                        unsigned int v60 = [v50 weakAdvisory];
                        if (v19[355])
                        {
                          if (v60 != (v19[356] != 0))
                          {
                            BOOL v61 = v19[356] != 0;
LABEL_86:
                            [v50 setWeakAdvisory:v61];
                            char v32 = 1;
                          }
                        }
                        else if (v60)
                        {
                          BOOL v61 = 0;
                          goto LABEL_86;
                        }

                        unsigned int v13 = v150;
                        goto LABEL_88;
                      }
                      uint64_t v50 = v153;
                      if (v55) {
                        goto LABEL_75;
                      }
                    }
                    else
                    {
                    }
                    [v50 setPredictedInterfaceArray:0];
                    goto LABEL_80;
                  }
                  uint64_t v50 = v153;
                  if (v21)
                  {
LABEL_67:
                    id v52 = [objc_alloc((Class)NSMutableArray) initWithArray:v21];
                    [v50 setAdvisoryInterfaceArray:v52];

                    goto LABEL_72;
                  }
                }
                else
                {
                }
                [v50 setAdvisoryInterfaceArray:0];
                goto LABEL_72;
              }
            }
LABEL_177:
            id v138 = [a1 networkAgentRegistration];
            unsigned int v139 = [v138 isRegistered];

            if (v139)
            {
              id v140 = ne_log_obj();
              if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                int v170 = a1;
                _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEFAULT, "%@: Unregistered network agent", buf, 0xCu);
              }

              id v141 = [a1 networkAgentRegistration];
              [v141 unregisterNetworkAgent];

              [a1 setRegisteredNetworkAgentInterfaces:0];
            }
LABEL_181:
            sub_10007F438(a1);
            return;
          }
          uint64_t v5 = [a1 configuration];
          uint64_t v6 = [v5 dnsSettings];
        }
        id v7 = v6;
        unsigned __int8 v8 = [v6 isEnabled];

        if (v8) {
          goto LABEL_17;
        }
        goto LABEL_177;
      }
    }
  }
}

id sub_10007ED10(uint64_t a1)
{
  if (a1
    && (id v1 = SCPreferencesCreate(kCFAllocatorDefault, @"NEHelper control settings", @"/Library/Preferences/com.apple.networkextension.control.plist")) != 0)
  {
    uint64_t v2 = v1;
    CFBooleanRef Value = (void *)SCPreferencesGetValue(v1, @"CriticalDomains");
    NEInitCFTypes();
    if (NEIsValidCFType() && CFArrayGetCount((CFArrayRef)Value) >= 1) {
      id v4 = [Value copy];
    }
    else {
      id v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_10007EDCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  SEL v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained queue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10007EE98;
    v5[3] = &unk_1000C6C38;
    id v6 = v3;
    id v7 = *(id *)(a1 + 32);
    dispatch_sync(v4, v5);
  }
}

id sub_10007EE98(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCommand:*(void *)(a1 + 40) fromClient:0];
}

void sub_10007EEA8(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  CFArrayRef v10 = [a1[4] queue];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_10007F11C;
  v16[3] = &unk_1000C6718;
  id v17 = v7;
  id v18 = v9;
  id v19 = v8;
  id v11 = a1[5];
  id v12 = a1[4];
  id v20 = v11;
  id v21 = v12;
  id v22 = a1[6];
  id v13 = v8;
  id v14 = v9;
  id v15 = v7;
  dispatch_async(v10, v16);
}

void sub_10007EFD4(void *a1)
{
  if (a1)
  {
    uint64_t v2 = [a1 onDemandDomainCache];

    if (v2)
    {
      SEL v3 = [a1 lastPrimaryInterface];

      if (v3)
      {
        *(void *)uu = 0;
        uint64_t v13 = 0;
        id v4 = [a1 configuration];
        uint64_t v5 = [v4 identifier];
        [v5 getUUIDBytes:uu];

        memset(v11, 0, sizeof(v11));
        uuid_unparse(uu, v11);
        id v6 = [a1 onDemandDomainCache];
        id v7 = [v6 count];

        if (v7)
        {
          id v8 = [a1 onDemandDomainCache];
          id v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        }
        else
        {
          id v9 = 0;
        }
        id v10 = [a1 lastPrimaryInterface];
        [v10 UTF8String];
        NEHelperCacheSetDomainDictionaries();
      }
    }
  }
}

void sub_10007F11C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v4 = [v2 domain];
    if (([v4 isEqualToString:NSURLErrorDomain] & 1) == 0)
    {
LABEL_6:

      goto LABEL_7;
    }
    id v5 = [*(id *)(a1 + 40) code];

    if (v5 == (id)-1202)
    {
      id v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VPN On Demand required URL string probe failed due to untrusted server certificate", buf, 2u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (char *)[*(id *)(a1 + 48) statusCode] - 200 < (char *)0x64)
    {
      return;
    }
  }
  id v6 = *(void **)(a1 + 56);
  id v7 = [*(id *)(a1 + 64) onDemandDomainCache];

  if (v6 != v7) {
    return;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = [*(id *)(a1 + 64) onDemandDomainCache];
  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (!v9)
  {
LABEL_22:

    goto LABEL_25;
  }
  id v10 = v9;
  uint64_t v11 = *(void *)v23;
LABEL_13:
  uint64_t v12 = 0;
  while (1)
  {
    if (*(void *)v23 != v11) {
      objc_enumerationMutation(v8);
    }
    uint64_t v13 = *(void **)(*((void *)&v22 + 1) + 8 * v12);
    id v14 = [v13 objectForKeyedSubscript:@"service-domains"];
    if ((isa_nsarray() & 1) == 0)
    {

      goto LABEL_20;
    }
    id v15 = [v13 objectForKeyedSubscript:@"service-domains"];
    unsigned __int8 v16 = [v15 isEqualToArray:*(void *)(a1 + 72)];

    if (v16) {
      break;
    }
LABEL_20:
    if (v10 == (id)++v12)
    {
      id v10 = [v8 countByEnumeratingWithState:&v22 objects:v27 count:16];
      if (v10) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
  }
  id v17 = v13;
  id v18 = [*(id *)(a1 + 64) onDemandDomainCache];
  id v19 = [v18 indexOfObject:v17];

  if (v17)
  {
    id v20 = +[NSMutableDictionary dictionaryWithDictionary:v17];
    [v20 setObject:&__kCFBooleanTrue forKeyedSubscript:@"service-probe-failed"];
    id v21 = [*(id *)(a1 + 64) onDemandDomainCache];
    [v21 replaceObjectAtIndex:v19 withObject:v20];
    goto LABEL_26;
  }
LABEL_25:
  id v20 = +[NSMutableDictionary dictionary];
  [v20 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"service-domains"];
  [v20 setObject:&__kCFBooleanTrue forKeyedSubscript:@"service-probe-failed"];
  id v21 = [*(id *)(a1 + 64) onDemandDomainCache];
  [v21 addObject:v20];
  id v17 = 0;
LABEL_26:

  sub_10007EFD4(*(void **)(a1 + 64));
}

void sub_10007F438(void *a1)
{
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  void v31[2] = sub_10007F874;
  v31[3] = &unk_1000C66C8;
  v31[4] = a1;
  uint64_t v2 = objc_retainBlock(v31);
  uint64_t v3 = [a1 networkAgentRegistration];
  unsigned int v4 = [v3 isRegistered];

  if (v4)
  {
    if ([a1 type] == 1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 parentType] == (id)2)
      {
        if ([a1 tunnelKind] == (id)1) {
          CFStringRef v5 = @"Primary Tunnel";
        }
        else {
          CFStringRef v5 = @"Fallback Tunnel";
        }
      }
      else
      {
        CFStringRef v5 = 0;
      }
      id v14 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
      id v8 = [a1 networkAgentRegistration];
      id v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]);
      id v10 = [a1 configuration];
      uint64_t v11 = [v10 identifier];
      uint64_t v12 = [a1 networkAgent];
      uint64_t v13 = [v12 agentUUID];
      id v6 = [v14 initWithNetworkAgentRegistration:v8 sessionType:v9 configurationIdentifier:v11 agentUUID:v13 name:v5];
    }
    else
    {
      id v7 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
      id v8 = [a1 networkAgentRegistration];
      id v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]);
      id v10 = [a1 configuration];
      uint64_t v11 = [v10 identifier];
      uint64_t v12 = [a1 networkAgent];
      uint64_t v13 = [v12 agentUUID];
      id v6 = [v7 initWithNetworkAgentRegistration:v8 sessionType:v9 configurationIdentifier:v11 agentUUID:v13 name:0];
    }

    if (v6)
    {
      id v15 = [a1 networkAgent];
      unsigned int v16 = [v15 isActive];

      uint64_t v17 = v16;
      id v18 = [a1 networkAgent];
      unsigned int v19 = [v18 isVoluntary];

      if (v19) {
        v17 |= 2uLL;
      }
      id v20 = [a1 networkAgent];
      unsigned int v21 = [v20 isUserActivated];

      if (v21) {
        uint64_t v22 = v17 | 4;
      }
      else {
        uint64_t v22 = v17;
      }
      long long v23 = [a1 networkAgent];
      unsigned int v24 = [v23 isKernelActivated];

      if (v24) {
        uint64_t v25 = v22 | 8;
      }
      else {
        uint64_t v25 = v22;
      }
      [v6 setAgentFlags:v25];
      id v26 = +[NEFileHandleMaintainer sharedMaintainer];
      [v26 setFileHandle:v6 matchingPredicate:v2];
    }
    else
    {
      id v27 = ne_log_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        SEL v29 = [a1 configuration];
        unsigned int v30 = [v29 name];
        *(_DWORD *)long long buf = 138412290;
        id v33 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to create a file handle for on-demand agent for configuration %@", buf, 0xCu);
      }
      id v26 = +[NEFileHandleMaintainer sharedMaintainer];
      [v26 removeFileHandleMatchingPredicate:v2];
    }
  }
  else
  {
    id v6 = +[NEFileHandleMaintainer sharedMaintainer];
    [v6 removeFileHandleMatchingPredicate:v2];
  }

  id v28 = +[NEFileHandleMaintainer sharedMaintainer];
  [v28 commit];
}

BOOL sub_10007F874(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  BOOL v8 = 0;
  if (objc_opt_isKindOfClass())
  {
    unsigned int v4 = *(void **)(a1 + 32);
    id v5 = v3;
    id v6 = [v4 networkAgent];
    unsigned __int8 v7 = [v6 matchesFileHandle:v5];

    if (v7) {
      BOOL v8 = 1;
    }
  }

  return v8;
}

BOOL sub_10007F908(id a1, id a2, NSDictionary *a3)
{
  return [a2 action:a3] == (id)2;
}

void sub_10007F92C(uint64_t a1, int a2, uint64_t a3, const char *a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v7, "SessionPID", a2);
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    id v9 = v8;
    if (v8)
    {
      xpc_dictionary_set_BOOL(v8, "is-on-demand", 1);
      if (a4) {
        xpc_dictionary_set_string(v9, "match-hostname", a4);
      }
      xpc_dictionary_set_value(v7, "SessionOptions", v9);
    }
    id v10 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007FA88;
    block[3] = &unk_1000C6E00;
    int v15 = a2;
    id v13 = WeakRetained;
    id v14 = v7;
    id v11 = v7;
    dispatch_async(v10, block);
  }
}

id sub_10007FA88(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 48);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: got On Demand start message from pid %d", (uint8_t *)&v6, 0x12u);
  }

  return [*(id *)(a1 + 32) startWithCommand:*(void *)(a1 + 40) isOnDemand:1];
}

void sub_10007FB4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int16 v8 = WeakRetained;
  if (WeakRetained)
  {
    int v9 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007FDD8;
    block[3] = &unk_1000C6958;
    id v11 = v8;
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v9, block);
  }
}

void sub_10007FC40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained queue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10007FD14;
    v7[3] = &unk_1000C6C38;
    id v8 = v5;
    id v9 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_10007FD14(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (v1)
  {
    if (objc_getProperty(v1, v2, 480, 1))
    {
      [objc_getProperty(v1, v4, 480, 1) removeObjectForKey:v3];
      sub_10008F4A8((uint64_t)v1, v5);
    }
    else
    {
      id v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "fallbackAssertions dictionary is nil", v7, 2u);
      }
    }
  }
}

void sub_10007FDD8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v5 = v2;
  if (v1)
  {
    if (objc_getProperty(v1, v4, 480, 1))
    {
      [objc_getProperty(v1, v6, 480, 1) setObject:v5 forKeyedSubscript:v3];
      sub_10008F4A8((uint64_t)v1, v7);
    }
    else
    {
      id v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v9 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "fallbackAssertions dictionary is nil", v9, 2u);
      }
    }
  }
}

void sub_10007FEB0(void *a1)
{
  if (a1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = &v45;
    uint64_t v47 = 0x3032000000;
    uint64_t v48 = sub_10007BA60;
    SEL v49 = sub_10007BA70;
    id v50 = 0;
    unsigned int v2 = [a1 type];
    switch(v2)
    {
      case 1u:
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 parentType] == (id)2)
        {
          if ([a1 tunnelKind] == (id)1) {
            CFStringRef v3 = @"Primary Tunnel";
          }
          else {
            CFStringRef v3 = @"Fallback Tunnel";
          }
        }
        else
        {
          CFStringRef v3 = 0;
        }
        id v17 = objc_alloc((Class)NEVPNNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v17 initWithConfigUUID:v6 sessionType:1 name:v3];
        [a1 setNetworkAgent:v7];
        goto LABEL_19;
      case 2u:
        id v4 = objc_alloc((Class)NEAppVPNNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v4 initWithConfigUUID:v6 sessionType:2 name:0];
        [a1 setNetworkAgent:v7];
        goto LABEL_19;
      case 3u:
        id v8 = objc_alloc((Class)NEAOVPNNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v8 initWithConfigUUID:v6 sessionType:3 name:0];
        [a1 setNetworkAgent:v7];
        goto LABEL_19;
      case 4u:
        id v9 = objc_alloc((Class)NEContentFilterNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v9 initWithConfigUUID:v6 sessionType:4 name:0];
        [a1 setNetworkAgent:v7];
        goto LABEL_19;
      case 5u:
        id v10 = objc_alloc((Class)NEPathControllerNetworkAgent);
        id v11 = [a1 configuration];
        id v12 = [v11 identifier];
        id v13 = [v10 initWithConfigUUID:v12 sessionType:5 name:0];
        [a1 setNetworkAgent:v13];

        id v5 = [a1 networkAgent];
        objc_initWeak(&location, a1);
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        long long v55 = sub_10007FB4C;
        id v56 = &unk_1000C6650;
        objc_copyWeak(&v57, &location);
        [v5 setAssertHandler:&buf];
        from[0] = _NSConcreteStackBlock;
        from[1] = (id)3221225472;
        from[2] = sub_10007FC40;
        from[3] = &unk_1000C6678;
        objc_copyWeak(&v52, &location);
        [v5 setUnassertHandler:from];
        objc_destroyWeak(&v52);
        objc_destroyWeak(&v57);
        objc_destroyWeak(&location);

        goto LABEL_20;
      case 7u:
        id v15 = objc_alloc((Class)NEDNSSettingsNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v15 initWithConfigUUID:v6 sessionType:7 name:0];
        [a1 setNetworkAgent:v7];
        goto LABEL_19;
      case 9u:
        id v16 = objc_alloc((Class)NERelayNetworkAgent);
        id v5 = [a1 configuration];
        id v6 = [v5 identifier];
        id v7 = [v16 initWithDelegate:a1 configUUID:v6 sessionType:9 name:0];
        [a1 setNetworkAgent:v7];
LABEL_19:

LABEL_20:
        id v18 = objc_alloc((Class)NWNetworkAgentRegistration);
        unsigned int v19 = [a1 networkAgent];
        id v20 = [v18 initWithNetworkAgentClass:objc_opt_class()];
        [a1 setNetworkAgentRegistration:v20];

        unsigned int v21 = +[NEFileHandleMaintainer sharedMaintainer];
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472;
        void v44[2] = sub_1000807D4;
        v44[3] = &unk_1000C66A0;
        v44[4] = a1;
        v44[5] = &v45;
        [v21 iterateFileHandlesWithBlock:v44];

        uint64_t v22 = (void *)v46[5];
        if (v22)
        {
          unint64_t v23 = (unint64_t)[v22 agentFlags];
          unsigned int v24 = [(id)v46[5] agentUUID];
          uint64_t v25 = [a1 networkAgent];
          [v25 setAgentUUID:v24];

          id v26 = [a1 networkAgent];
          [v26 setActive:v23 & 1];

          id v27 = [a1 networkAgent];
          [v27 setVoluntary:(v23 >> 1) & 1];

          id v28 = [a1 networkAgent];
          [v28 setUserActivated:(v23 >> 2) & 1];

          SEL v29 = [a1 networkAgent];
          [v29 setKernelActivated:(v23 >> 3) & 1];
        }
        else
        {
          if (v2 == 9)
          {
            SEL v29 = [a1 configuration];
            unsigned int v30 = [v29 identifier];
            unsigned __int8 v31 = [a1 networkAgent];
            [v31 setAgentUUID:v30];
          }
          else
          {
            SEL v29 = +[NSUUID UUID];
            unsigned int v30 = [a1 networkAgent];
            [v30 setAgentUUID:v29];
          }
        }
        char v32 = [a1 configuration];
        id v33 = [v32 name];
        long long v34 = [a1 networkAgent];
        [v34 setConfigurationName:v33];

        id v35 = [a1 networkAgent];
        objc_initWeak(from, a1);
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        long long v55 = sub_10007F92C;
        id v56 = &unk_1000C6628;
        objc_copyWeak(&v57, from);
        [v35 setStartHandler:&buf];
        objc_destroyWeak(&v57);
        objc_destroyWeak(from);

        SEL v36 = (void *)v46[5];
        if (v36)
        {
          uint64_t v37 = [v36 handle];
          uint64_t v38 = dup((int)[v37 fileDescriptor]);

          uint32_t v39 = [a1 networkAgentRegistration];
          uint32_t v40 = [a1 networkAgent];
          unsigned __int8 v41 = [v39 setRegisteredNetworkAgent:v40 fileDescriptor:v38];

          if ((v41 & 1) == 0)
          {
            close(v38);
            sub_10007DB9C(a1);
          }
        }
        else
        {
          sub_10007DB9C(a1);
        }
        id v42 = [a1 queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100080880;
        block[3] = &unk_1000C6C60;
        void block[4] = a1;
        dispatch_async(v42, block);

        break;
      default:
        id v14 = ne_log_obj();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = a1;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@: session type does not support NWNetworkAgent", (uint8_t *)&buf, 0xCu);
        }

        break;
    }
    _Block_object_dispose(&v45, 8);
  }
}

void sub_100080740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
}

uint64_t sub_1000807D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    id v5 = [*(id *)(a1 + 32) networkAgent];
    unsigned int v6 = [v5 matchesFileHandle:v4];

    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v4;
      id v4 = v8;
    }
    uint64_t v9 = v6 ^ 1;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t sub_100080880(uint64_t a1)
{
  return sub_10008088C(*(void *)(a1 + 32), 0);
}

uint64_t sub_10008088C(uint64_t result, char a2)
{
  if (result)
  {
    id v3 = (void *)result;
    objc_opt_class();
    id result = objc_opt_isKindOfClass();
    if ((result & 1) == 0)
    {
      id v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v8 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Resetting VPN On Demand", buf, 0xCu);
      }

      if ([v3 type] == 1
        || (id result = (uint64_t)[v3 type], result == 2))
      {
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 3221225472;
        _DWORD v5[2] = sub_1000809D4;
        v5[3] = &unk_1000C67D0;
        void v5[4] = v3;
        char v6 = a2;
        return (uint64_t)[v3 checkPluginInstalledWithCompletionHandler:v5];
      }
    }
  }
  return result;
}

void sub_1000809D4(uint64_t a1, int a2)
{
  id v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"is not";
    uint64_t v6 = *(void *)(a1 + 32);
    if (a2) {
      CFStringRef v5 = @"is";
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v63 = v6;
    __int16 v64 = 2112;
    CFStringRef v65 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Plugin %@ installed", buf, 0x16u);
  }

  [*(id *)(a1 + 32) setDisableOnDemand:a2 ^ 1u];
  if (sub_10007C09C(*(void **)(a1 + 32))) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = sub_10007C1A4(*(void **)(a1 + 32));
  }
  int v8 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v9 = [*(id *)(a1 + 32) type];
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 2;
  }
  char v11 = v10;
  if (v10 || !v7)
  {
    if (v11) {
      goto LABEL_20;
    }
  }
  else
  {
    id v12 = [*(id *)(a1 + 32) onDemandMonitor];

    if (!v12)
    {
      id v13 = [*(id *)(a1 + 32) onDemandMonitor];

      if (!v13) {
        goto LABEL_34;
      }
LABEL_20:
      sub_100081100(*(void **)(a1 + 32));
      if ([*(id *)(a1 + 32) type] == 2)
      {
        unint64_t v14 = (unint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
        if (v11) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v14 = 0;
        if (v11) {
          goto LABEL_32;
        }
      }
      uint64_t v19 = [*(id *)(a1 + 32) matchedRule];
      if (!(v19 | v14)
        || (id v20 = (void *)v19,
            [*(id *)(a1 + 32) matchedRule],
            unsigned int v21 = objc_claimAutoreleasedReturnValue(),
            unsigned __int8 v22 = [v21 isEqual:v14],
            v21,
            v20,
            (v22 & 1) != 0))
      {
LABEL_33:

        if (!v7) {
          return;
        }
LABEL_34:
        unint64_t v23 = ne_log_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v63 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@: Enabling VPN On Demand", buf, 0xCu);
        }

        uint64_t v25 = *(void **)(a1 + 32);
        if (v25)
        {
          if ([*(id *)(a1 + 32) type] == 1)
          {
            id v26 = [v25 configuration];
            id v27 = [v26 VPN];
          }
          else
          {
            if ([v25 type] != 2)
            {
              SEL v29 = 0;
LABEL_48:
              if ((sub_10007C09C(v25) & 1) == 0 && sub_10007C1A4(v25))
              {
                uint64_t v34 = sub_10007C2A0((uint64_t)v25, v29);

                SEL v29 = (void *)v34;
              }
              uint64_t v18 = +[NSMutableArray array];
              if (![v29 count])
              {
                id v35 = objc_alloc_init((Class)NWNetworkDescription);
                [(id)v18 addObject:v35];
                goto LABEL_66;
              }
              long long v60 = 0u;
              long long v61 = 0u;
              long long v58 = 0u;
              long long v59 = 0u;
              id v35 = v29;
              id v36 = [v35 countByEnumeratingWithState:&v58 objects:buf count:16];
              if (v36)
              {
                id v37 = v36;
                id v56 = v29;
                uint64_t v57 = a1;
                uint64_t v38 = *(void *)v59;
                while (1)
                {
                  for (id i = 0; i != v37; id i = (char *)i + 1)
                  {
                    if (*(void *)v59 != v38) {
                      objc_enumerationMutation(v35);
                    }
                    uint32_t v40 = (void *)v18;
                    unsigned __int8 v41 = *(void **)(*((void *)&v58 + 1) + 8 * i);
                    id v42 = objc_alloc_init((Class)NWNetworkDescription);
                    id v43 = [v41 interfaceTypeMatch];
                    if (v43 == (id)3)
                    {
                      unsigned __int8 v44 = &off_1000C98D0;
                    }
                    else
                    {
                      if (v43 != (id)2) {
                        goto LABEL_62;
                      }
                      unsigned __int8 v44 = &off_1000C98E8;
                    }
                    uint64_t v45 = +[NSSet setWithObject:](NSSet, "setWithObject:", v44, v56, v57, (void)v58);
                    [v42 setInterfaceTypeOptions:v45];

LABEL_62:
                    uint64_t v46 = [v41 DNSSearchDomainMatch:v56, v57];
                    uint64_t v47 = +[NSSet setWithArray:v46];
                    [v42 setDnsSearchDomainOptions:v47];

                    uint64_t v48 = [v41 DNSServerAddressMatch];
                    SEL v49 = +[NSSet setWithArray:v48];
                    [v42 setDnsServerAddressOptions:v49];

                    id v50 = [v41 SSIDMatch];
                    uint64_t v51 = +[NSSet setWithArray:v50];
                    [v42 setSsidOptions:v51];

                    id v52 = [v41 probeURL];
                    [v42 setProbeURL:v52];

                    uint64_t v18 = (uint64_t)v40;
                    [v40 addObject:v42];
                  }
                  id v37 = [v35 countByEnumeratingWithState:&v58 objects:buf count:16];
                  if (!v37)
                  {
                    SEL v29 = v56;
                    a1 = v57;
                    break;
                  }
                }
              }
LABEL_66:

              if (v18)
              {
                id v53 = objc_alloc_init((Class)NWParameters);
                [v53 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"VPN"];
                [v53 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AppVPN"];
                [v53 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AOVPN"];
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0 && [*(id *)(a1 + 32) tunnelKind] == (id)2) {
                  [v53 setRequiredInterfaceType:2];
                }
                id v54 = +[NWMonitor monitorWithNetworkDescriptionArray:v18 endpoint:0 parameters:v53];
                [*(id *)(a1 + 32) setOnDemandMonitor:v54];

                long long v55 = [*(id *)(a1 + 32) onDemandMonitor];
                [v55 addObserver:*(void *)(a1 + 32) forKeyPath:@"bestAvailableNetworkDescription" options:5 context:0];
              }
              goto LABEL_71;
            }
            id v26 = [v25 configuration];
            id v27 = [v26 appVPN];
          }
          id v28 = v27;
          SEL v29 = [v27 onDemandRules];

          goto LABEL_48;
        }
        goto LABEL_46;
      }
LABEL_32:
      [*(id *)(a1 + 32) setMatchedRule:v14];
      sub_10007C318(*(id *)(a1 + 32));
      [*(id *)(a1 + 32) notifyChangedExtendedStatus];
      goto LABEL_33;
    }
  }
  if ((v7 & 1) == 0)
  {
    id v15 = [*(id *)(a1 + 32) onDemandMonitor];

    if (v15)
    {
      id v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v63 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@: Disabling VPN On Demand", buf, 0xCu);
      }

      sub_100081100(*(void **)(a1 + 32));
      if ([*(id *)(a1 + 32) type] == 2) {
        uint64_t v18 = (uint64_t)objc_alloc_init((Class)NEOnDemandRuleConnect);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v30 = [*(id *)(a1 + 32) matchedRule];
      if (v30 | v18)
      {
        unsigned __int8 v31 = (void *)v30;
        char v32 = [*(id *)(a1 + 32) matchedRule];
        unsigned __int8 v33 = [v32 isEqual:v18];

        if ((v33 & 1) == 0)
        {
          [*(id *)(a1 + 32) setMatchedRule:v18];
          sub_10007C318(*(id *)(a1 + 32));
          [*(id *)(a1 + 32) notifyChangedExtendedStatus];
        }
        goto LABEL_71;
      }
LABEL_46:
      uint64_t v18 = 0;
LABEL_71:
    }
  }
}

void sub_100081100(void *a1)
{
  if (a1)
  {
    unsigned int v2 = [a1 onDemandMonitor];

    if (v2)
    {
      id v3 = [a1 onDemandMonitor];
      [v3 removeObserver:a1 forKeyPath:@"bestAvailableNetworkDescription"];

      [a1 setOnDemandMonitor:0];
    }
  }
}

void sub_100081180(void *a1)
{
  if (a1)
  {
    unsigned int v2 = [a1 onDemandPauseTimerSource];

    if (v2)
    {
      id v3 = [a1 onDemandPauseTimerSource];
      dispatch_source_cancel(v3);

      [a1 setOnDemandPauseTimerSource:0];
    }
  }
}

void sub_1000811F4(void *a1)
{
  if (a1)
  {
    unsigned int v2 = [a1 networkAgentRegistration];
    unsigned int v3 = [v2 isRegistered];

    if (v3)
    {
      id v4 = ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412290;
        unsigned int v7 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Unregistered network agent", (uint8_t *)&v6, 0xCu);
      }

      CFStringRef v5 = [a1 networkAgentRegistration];
      [v5 unregisterNetworkAgent];

      [a1 setRegisteredNetworkAgentInterfaces:0];
      [a1 setNetworkAgentRegistration:0];
    }
    sub_10007F438(a1);
  }
}

void sub_1000812F8(void *a1, void *a2)
{
  unsigned int v3 = a2;
  if (a1)
  {
    id v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      CFStringRef v5 = @"[nil]";
      if (v3) {
        CFStringRef v5 = v3;
      }
      int v12 = 138412546;
      id v13 = a1;
      __int16 v14 = 2112;
      CFStringRef v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: Request to add network agent to \"%@\"", (uint8_t *)&v12, 0x16u);
    }

    if (isa_nsstring())
    {
      if ([(__CFString *)v3 length])
      {
        int v6 = [a1 networkAgentInterfaces];
        unsigned __int8 v7 = [v6 containsObject:v3];

        if ((v7 & 1) == 0)
        {
          int v8 = [a1 networkAgentInterfaces];
          char v9 = isa_nsarray();

          if ((v9 & 1) == 0)
          {
            BOOL v10 = +[NSMutableArray array];
            [a1 setNetworkAgentInterfaces:v10];
          }
          char v11 = [a1 networkAgentInterfaces];
          [v11 addObject:v3];

          sub_10007DB9C(a1);
        }
      }
    }
  }
}

void sub_100081474(void *a1)
{
  if (a1)
  {
    unsigned int v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      unsigned __int8 v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%@: Request to clear network agent from all interfaces", (uint8_t *)&v6, 0xCu);
    }

    unsigned int v3 = [a1 networkAgentInterfaces];
    int v4 = isa_nsarray();

    if (v4)
    {
      CFStringRef v5 = [a1 networkAgentInterfaces];
      [v5 removeAllObjects];

      sub_10007DB9C(a1);
    }
  }
}

id sub_100081564(id result, id a2)
{
  if (result)
  {
    unsigned int v3 = result;
    id v4 = [result failedConnectCountWithinInterval];
    CFStringRef v5 = [v3 onDemandPauseTimerSource];

    if (v5)
    {
      int v6 = [v3 onDemandPauseTimerSource];
      dispatch_source_cancel(v6);

      [v3 setOnDemandPauseTimerSource:0];
    }
    if (a2 == (id)2)
    {
      unsigned __int8 v7 = [v3 queue];
      id v10 = v4;
      int v8 = NECreateTimerSource();
      [v3 setOnDemandPauseTimerSource:v8, _NSConcreteStackBlock, 3221225472, sub_100081724, &unk_1000C6B78, v3, v10];
    }
    if ([v3 onDemandPauseLevelInternal] != a2)
    {
      char v9 = ne_log_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412802;
        int v12 = v3;
        __int16 v13 = 2048;
        id v14 = [v3 onDemandPauseLevelInternal];
        __int16 v15 = 2048;
        id v16 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@: Changing pause level %ld -> %ld", buf, 0x20u);
      }

      [v3 setOnDemandPauseLevelInternal:a2];
    }
    return sub_10007C318(v3);
  }
  return result;
}

void sub_100081724(uint64_t a1)
{
  if ([*(id *)(a1 + 32) onDemandPauseLevelInternal])
  {
    if (*(uint64_t *)(a1 + 40) > 3)
    {
      unsigned int v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 32);
        int v6 = 138412290;
        uint64_t v7 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Clearing damping of on-demand.", (uint8_t *)&v6, 0xCu);
      }

      sub_100081564(*(void *)(a1 + 32), 0);
      [*(id *)(a1 + 32) setFailedConnectCountWithinInterval:0];
    }
    else
    {
      sub_100081564(*(void *)(a1 + 32), 1);
    }
  }
  id v4 = [*(id *)(a1 + 32) onDemandPauseTimerSource];

  if (v4)
  {
    CFStringRef v5 = [*(id *)(a1 + 32) onDemandPauseTimerSource];
    dispatch_source_cancel(v5);

    [*(id *)(a1 + 32) setOnDemandPauseTimerSource:0];
  }
}

void sub_100081B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100081B3C(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  int v6 = WeakRetained;
  if (!WeakRetained || (a2 & 1) == 0)
  {
LABEL_10:
    id v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_11;
  }
  uint64_t v7 = objc_getProperty(WeakRetained, v5, 688, 1);
  if (!v7) {
    goto LABEL_7;
  }
  char v9 = (void *)v7;
  id v10 = objc_getProperty(v6, v8, 688, 1);
  char v11 = [v10 controlUnit];
  unsigned int v12 = [v11 unsignedIntValue];

  if (!v12)
  {
LABEL_7:
    __int16 v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Invalid flow divert control unit", (uint8_t *)&buf, 2u);
    }

    goto LABEL_10;
  }
  if ([*(id *)(a1 + 32) isFullyTransparent])
  {
    [v6 policySession];
  }
  else
  {
    __int16 v15 = [v6 pluginConfigurationEntities];
    id v16 = [v15 DNSSettings];
    BOOL v17 = v16 != 0;

    uint64_t v18 = [v6 pluginConfigurationEntities];
    uint64_t v19 = [v18 proxySettings];
    HIDWORD(v43) = v17;
    if ([v19 enabled])
    {
      LODWORD(v43) = 1;
    }
    else
    {
      id v20 = [v6 protocol];
      unsigned int v21 = [v20 proxySettings];
      LODWORD(v43) = [v21 enabled];
    }
    [v6 policySession:v43];
  uint64_t v49 = };
  unsigned __int8 v22 = [*(id *)(a1 + 32) includedNetworkRules];
  unint64_t v23 = [*(id *)(a1 + 32) excludedNetworkRules];
  uint64_t v25 = objc_getProperty(v6, v24, 688, 1);
  id v26 = [v25 controlUnit];
  unsigned int v27 = [v26 unsignedIntValue];
  uint64_t v46 = [v6 primaryTunnelPlugin];
  uint64_t v45 = sub_1000177C0(v46, v28);
  SEL v29 = [v45 firstObject];
  unsigned __int8 v30 = [*(id *)(a1 + 32) isFullyTransparent];
  id Property = [*(id *)(a1 + 40) server];
  unsigned __int8 v33 = Property;
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  if (Property) {
    id Property = objc_getProperty(Property, v32, 80, 1);
  }
  id v34 = Property;
  id v35 = v22;
  id v36 = v23;
  id v37 = v29;
  id v38 = v34;
  if (v49)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    uint64_t v51 = sub_100044890;
    id v52 = &unk_1000C5EE0;
    uint64_t v53 = v49;
    unsigned int v58 = v27;
    unsigned __int8 v59 = v30;
    uint32_t v39 = (void *)v49;
    id v54 = v37;
    id v55 = v38;
    id v56 = v36;
    char v60 = v42;
    char v61 = v44;
    id v57 = v35;
    char v40 = sub_10002EC18((uint64_t)NESMPolicyMasterSession, &buf);
  }
  else
  {
    char v40 = 0;
    uint32_t v39 = 0;
  }

  if ((v40 & 1) == 0)
  {
    unsigned __int8 v41 = ne_log_obj();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%@: Failed to set the flow divert policies", (uint8_t *)&buf, 0xCu);
    }
  }
  id v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_11:
  v14();
}

void sub_10008208C(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 384, 1))
    {
      [objc_getProperty(a1, v3, 384, 1) removeObserver:a1 forKeyPath:@"bestAvailableNetworkDescription"];
      objc_setProperty_atomic(a1, v4, 0, 384);
    }
    if (objc_getProperty(a1, v3, 392, 1))
    {
      CFStringRef v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v7 = 138412290;
        int v8 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@ End DNS On Demand monitor transaction", (uint8_t *)&v7, 0xCu);
      }

      objc_setProperty_atomic(a1, v6, 0, 392);
    }
  }
}

void sub_1000823E0(void *a1, char a2)
{
  if (a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x3032000000;
    v8[3] = sub_100082500;
    void v8[4] = sub_100082510;
    id v9 = (id)os_transaction_create();
    SEL v4 = [a1 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100082518;
    block[3] = &unk_1000C6B08;
    char v6 = a2;
    char v7 = 1;
    void block[4] = a1;
    void block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }
}

void sub_1000824E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100082500(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100082510(uint64_t a1)
{
}

void sub_100082518(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    sub_1000811F4(*(void **)(a1 + 32));
    sub_10007FEB0(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 49))
  {
    unsigned int v2 = [*(id *)(a1 + 32) configuration];
    uint64_t v3 = [v2 dnsSettings];
    unsigned int v4 = [v3 isEnabled];

    uint64_t v5 = [*(id *)(a1 + 32) policySession];
    char v6 = (_DWORD *)v5;
    if (v4)
    {
      id v26 = [*(id *)(a1 + 32) networkAgent];
      char v7 = [v26 agentUUID];
      uint64_t v25 = [*(id *)(a1 + 32) configuration];
      int v8 = [v25 dnsSettings];
      id v9 = [v8 settings];
      char v11 = [v9 matchDomains];
      id Property = *(id *)(a1 + 32);
      if (Property)
      {
        id Property = objc_getProperty(Property, v10, 376, 1);
        __int16 v13 = *(void **)(a1 + 32);
      }
      else
      {
        __int16 v13 = 0;
      }
      id v14 = Property;
      __int16 v15 = [v13 server];
      BOOL v17 = v15;
      if (v15) {
        __int16 v15 = objc_getProperty(v15, v16, 80, 1);
      }
      id v18 = v15;
      id v19 = v7;
      id v20 = v11;
      id v21 = v14;
      id v22 = v18;
      if (v6 && v6[2] == 7)
      {
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100048944;
        v27[3] = &unk_1000C5FD0;
        v27[4] = v6;
        id v28 = v19;
        id v29 = v20;
        id v30 = v21;
        id v31 = v22;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, v27);
      }
    }
    else
    {
      sub_10002E854(v5);
    }
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8);
  SEL v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = 0;
}

void sub_100082834(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) configuration];
  uint64_t v2 = [v8 dnsSettings];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    unsigned int v4 = [*(id *)(a1 + 32) configuration];
    uint64_t v5 = [v4 dnsSettings];
    char v6 = [v5 settings];

    if (v6)
    {
      char v7 = *(void **)(a1 + 32);
      [v7 startWithCommand:0 isOnDemand:0];
    }
  }
  else
  {
  }
}

uint64_t sub_100082A5C(int *a1, void *a2)
{
  id v3 = a2;
  self = a1;
  if (!a1)
  {
    uint64_t v4 = 0;
    goto LABEL_79;
  }
  id v60 = v3;
  uint64_t v4 = [v3 payloadInfo];
  if (v4)
  {
    uint64_t v5 = [v60 payloadInfo];
    char v6 = [v5 profileUUID];

    if (v6)
    {
      id v56 = +[MCProfileConnection sharedConnection];
      if ([v56 isSupervised])
      {
        uint64_t v4 = 0;
LABEL_77:

        goto LABEL_78;
      }
      id v54 = [v56 installedMDMProfileIdentifier];
      if (!v54)
      {
        uint64_t v4 = 0;
LABEL_76:

        goto LABEL_77;
      }
      char v7 = [v56 installedProfileWithIdentifier:x0];
      id v53 = v7;
      if (!v7)
      {
        uint64_t v4 = 0;
LABEL_75:

        goto LABEL_76;
      }
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      id v8 = [v7 managedPayloads];
      id v9 = [v8 countByEnumeratingWithState:&v67 objects:v80 count:16];
      if (v9)
      {
        char v10 = 0;
        uint64_t v11 = *(void *)v68;
        do
        {
          for (id i = 0; i != v9; id i = (char *)i + 1)
          {
            if (*(void *)v68 != v11) {
              objc_enumerationMutation(v8);
            }
            __int16 v13 = *(void **)(*((void *)&v67 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v14 = [v13 UUID];
              __int16 v15 = [v60 payloadInfo];
              id v16 = [v15 payloadUUID];
              unsigned __int8 v17 = [v14 isEqualToString:v16];
            }
            else
            {
              unsigned __int8 v17 = 0;
            }
            v10 |= v17;
          }
          id v9 = [v8 countByEnumeratingWithState:&v67 objects:v80 count:16];
        }
        while (v9);

        if (v10)
        {
          id v18 = objc_alloc_init((Class)NSMutableArray);
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          id v19 = [v53 managedPayloads];
          id v20 = [v19 countByEnumeratingWithState:&v61 objects:v79 count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v62;
            do
            {
              for (j = 0; j != v20; j = (char *)j + 1)
              {
                if (*(void *)v62 != v21) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v23 = *(void **)(*((void *)&v61 + 1) + 8 * (void)j);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v24 = v23;
                  uint64_t v25 = [v24 ssid];
                  BOOL v26 = v25 == 0;

                  if (!v26)
                  {
                    unsigned int v27 = [v24 ssid];
                    [v18 addObject:v27];
                  }
                }
              }
              id v20 = [v19 countByEnumeratingWithState:&v61 objects:v79 count:16];
            }
            while (v20);
          }

          id v28 = ne_log_obj();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412546;
            SEL v83 = self;
            __int16 v84 = 2112;
            id v85 = v18;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%@ restricting to SSIDs: %@", buf, 0x16u);
          }

          id v29 = v18;
          newCFBooleanRef Value = objc_alloc_init((Class)NSMutableArray);
          if ([v29 count])
          {
            if (objc_msgSend(objc_getProperty(self, v30, 368, 1), "count"))
            {
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              id obj = objc_getProperty(self, v31, 368, 1);
              id v32 = [obj countByEnumeratingWithState:&v75 objects:buf count:16];
              if (v32)
              {
                uint64_t v59 = *(void *)v76;
                do
                {
                  for (k = 0; k != v32; k = (char *)k + 1)
                  {
                    if (*(void *)v76 != v59) {
                      objc_enumerationMutation(obj);
                    }
                    id v34 = *(void **)(*((void *)&v75 + 1) + 8 * (void)k);
                    if (objc_msgSend(v34, "action", v53, v54) == (id)2 || objc_msgSend(v34, "action") == (id)4)
                    {
                      [newValue addObject:v34];
                    }
                    else
                    {
                      id v35 = [v34 copy];
                      id v36 = [v35 SSIDMatch];
                      BOOL v37 = [v36 count] == 0;

                      if (v37)
                      {
                        [v35 setSSIDMatch:v29];
                      }
                      else
                      {
                        id v38 = objc_alloc_init((Class)NSMutableArray);
                        long long v73 = 0u;
                        long long v74 = 0u;
                        long long v71 = 0u;
                        long long v72 = 0u;
                        uint32_t v39 = [v35 SSIDMatch];
                        id v40 = [v39 countByEnumeratingWithState:&v71 objects:location count:16];
                        if (v40)
                        {
                          uint64_t v41 = *(void *)v72;
                          do
                          {
                            for (m = 0; m != v40; m = (char *)m + 1)
                            {
                              if (*(void *)v72 != v41) {
                                objc_enumerationMutation(v39);
                              }
                              uint64_t v43 = *(void *)(*((void *)&v71 + 1) + 8 * (void)m);
                              if ([v29 containsObject:v43]) {
                                [v38 addObject:v43];
                              }
                            }
                            id v40 = [v39 countByEnumeratingWithState:&v71 objects:location count:16];
                          }
                          while (v40);
                        }

                        [v35 setSSIDMatch:v38];
                      }
                      char v44 = [v35 SSIDMatch];
                      BOOL v45 = [v44 count] == 0;

                      if (!v45) {
                        [newValue addObject:v35];
                      }
                    }
                  }
                  id v32 = [obj countByEnumeratingWithState:&v75 objects:buf count:16];
                }
                while (v32);
              }
            }
            else
            {
              id obj = objc_alloc_init((Class)NEOnDemandRuleConnect);
              [obj setInterfaceTypeMatch:2];
              [obj setSSIDMatch:v29];
              [newValue addObject:obj];
            }
          }
          id v50 = objc_alloc_init((Class)NEOnDemandRuleDisconnect);
          [newValue addObject:v50];
          objc_setProperty_atomic(self, v51, newValue, 368);

          uint64_t v4 = 1;
LABEL_74:
          char v7 = v53;
          goto LABEL_75;
        }
      }
      else
      {
      }
      if (self[89] == -1)
      {
        objc_initWeak(location, self);
        uint64_t v46 = (const char *)[MCProfileListChangedNotification cStringUsingEncoding:4];
        uint64_t v47 = [self queue];
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10008378C;
        handler[3] = &unk_1000C6820;
        objc_copyWeak(&v66, location);
        uint32_t v48 = notify_register_dispatch(v46, self + 89, v47, handler);

        if (v48)
        {
          uint64_t v49 = ne_log_obj();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            SEL v83 = self;
            __int16 v84 = 1024;
            LODWORD(v85) = v48;
            _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%@ Failed to register for MC notifications: %u", buf, 0x12u);
          }
        }
        objc_destroyWeak(&v66);
        objc_destroyWeak(location);
      }
      uint64_t v4 = 0;
      goto LABEL_74;
    }
    uint64_t v4 = 0;
  }
LABEL_78:
  id v3 = v60;
LABEL_79:

  return v4;
}

void sub_100083230(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_10008326C(void *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    sub_10008208C(a1, a2);
    if (objc_getProperty(v2, v3, 368, 1))
    {
      if (!objc_getProperty(v2, v4, 368, 1))
      {
        uint64_t v5 = 0;
        goto LABEL_34;
      }
      uint64_t v5 = +[NSMutableArray array];
      if (objc_msgSend(objc_getProperty(v2, v6, 368, 1), "count"))
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id v41 = v2;
        id v8 = objc_getProperty(v2, v7, 368, 1);
        id v9 = [v8 countByEnumeratingWithState:&v43 objects:buf count:16];
        if (!v9) {
          goto LABEL_17;
        }
        id v10 = v9;
        uint64_t v11 = *(void *)v44;
        while (1)
        {
          for (id i = 0; i != v10; id i = (char *)i + 1)
          {
            if (*(void *)v44 != v11) {
              objc_enumerationMutation(v8);
            }
            __int16 v13 = v5;
            id v14 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            id v15 = objc_alloc_init((Class)NWNetworkDescription);
            id v16 = [v14 interfaceTypeMatch];
            if (v16 == (id)3)
            {
              unsigned __int8 v17 = &off_1000C9900;
            }
            else
            {
              if (v16 != (id)2) {
                goto LABEL_15;
              }
              unsigned __int8 v17 = &off_1000C9918;
            }
            id v18 = +[NSSet setWithObject:v17];
            [v15 setInterfaceTypeOptions:v18];

LABEL_15:
            id v19 = [v14 DNSSearchDomainMatch];
            id v20 = +[NSSet setWithArray:v19];
            [v15 setDnsSearchDomainOptions:v20];

            uint64_t v21 = [v14 DNSServerAddressMatch];
            id v22 = +[NSSet setWithArray:v21];
            [v15 setDnsServerAddressOptions:v22];

            uint64_t v23 = [v14 SSIDMatch];
            id v24 = +[NSSet setWithArray:v23];
            [v15 setSsidOptions:v24];

            uint64_t v25 = [v14 probeURL];
            [v15 setProbeURL:v25];

            uint64_t v5 = v13;
            [v13 addObject:v15];
          }
          id v10 = [v8 countByEnumeratingWithState:&v43 objects:buf count:16];
          if (!v10)
          {
LABEL_17:

            uint64_t v2 = v41;
            if (!v5) {
              goto LABEL_34;
            }
            goto LABEL_24;
          }
        }
      }
      id v26 = objc_alloc_init((Class)NWNetworkDescription);
      [v5 addObject:v26];

      if (!v5) {
        goto LABEL_34;
      }
LABEL_24:
      id v27 = objc_alloc_init((Class)NWParameters);
      id v28 = +[NWMonitor monitorWithNetworkDescriptionArray:v5 endpoint:0 parameters:v27];
      objc_setProperty_atomic(v2, v29, v28, 384);

      if (objc_getProperty(v2, v30, 384, 1))
      {
        if (!objc_getProperty(v2, v31, 392, 1))
        {
          unsigned __int8 v33 = ne_log_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint32_t v48 = v2;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%@ Begin DNS On Demand monitor transaction", buf, 0xCu);
          }

          id v34 = objc_alloc((Class)NSString);
          id v35 = [v2 configuration];
          id v36 = [v35 identifier];
          id v37 = [v34 initWithFormat:@"com.apple.nesessionmanager.DNSOnDemandMonitor.%@", v36];

          [v37 UTF8String];
          id v38 = (void *)os_transaction_create();
          objc_setProperty_atomic(v2, v39, v38, 392);
        }
        [objc_getProperty(v2, v32, 384, 1) addObserver:v2 forKeyPath:@"bestAvailableNetworkDescription" options:5 context:0];
      }
      else
      {
        id v40 = ne_log_obj();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint32_t v48 = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%@ DNS On Demand monitor creation failed", buf, 0xCu);
        }
      }
LABEL_34:
    }
    else
    {
      id v42 = [v2 server];
      [v42 requestInstallForSession:v2 withParentSession:0 exclusive:0];
    }
  }
}

void sub_10008378C(uint64_t a1)
{
  id WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    SEL v3 = [WeakRetained configuration];
    uint64_t v4 = [v3 dnsSettings];
    uint64_t v5 = [v4 onDemandRules];
    objc_setProperty_atomic(v2, v6, v5, 368);

    if (sub_100082A5C(v2, v3))
    {
      char v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        uint64_t v11 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ updateOnDemandRulesForConfiguration asking to install", (uint8_t *)&v10, 0xCu);
      }

      *((unsigned char *)v2 + 352) = 1;
      sub_10008326C(v2, v8);
    }
    int v9 = v2[89];
    if ((v9 & 0x80000000) == 0)
    {
      notify_cancel(v9);
      v2[89] = -1;
    }
  }
}

void sub_100084264(const void *a1, void *a2)
{
  int v23 = 0x200000;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (!a1)
    {
      uint64_t v16 = 0;
      id v8 = 0;
      if (a2)
      {
LABEL_25:
        uint64_t v19 = a2[2];
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v19, v16);

        goto LABEL_27;
      }
LABEL_40:
      uint64_t v19 = 0;
      goto LABEL_26;
    }
    io_registry_entry_t IONetworkInterfaceObject = IOEthernetControllerGetIONetworkInterfaceObject();
    if (IONetworkInterfaceObject)
    {
      CFid Property = (void *)IORegistryEntryCreateCFProperty(IONetworkInterfaceObject, @"BSD Name", kCFAllocatorDefault, 0);
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFProperty && CFGetTypeID(CFProperty) == TypeID)
      {
        if (a2) {
          char v7 = (void *)a2[1];
        }
        else {
          char v7 = 0;
        }
        id v8 = v7;
        [v8 setName:CFProperty];

        uint64_t BSDSocket = IOEthernetControllerGetBSDSocket();
        if ((BSDSocket & 0x80000000) != 0)
        {
          __int16 v13 = ne_log_obj();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__strerrlong long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to get the kernel control socket of the user ethernet controller", (uint8_t *)__strerrbuf, 2u);
          }
          goto LABEL_34;
        }
        int v10 = BSDSocket;
        id v11 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:BSDSocket closeOnDealloc:0];
        [v8 setControlSocket:v11];

        if (setsockopt(v10, 0xFFFF, 4097, &v23, 4u))
        {
          int v12 = *__error();
          if (strerror_r(v12, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          __int16 v13 = ne_log_obj();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)long long buf = 67109378;
          int v25 = v12;
          __int16 v26 = 2080;
          id v27 = __strerrbuf;
          id v14 = "Failed to set the kernel control socket send buffer size: [%d] %s";
        }
        else
        {
          if (!setsockopt(v10, 0xFFFF, 4098, &v23, 4u))
          {
            uint64_t v21 = ne_log_obj();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              id v22 = [v8 name];
              *(_DWORD *)__strerrlong long buf = 138412290;
              SEL v29 = v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Created user ethernet interface %@", (uint8_t *)__strerrbuf, 0xCu);
            }
            [v8 setUserEthernetController:a1];
            uint64_t v16 = 1;
            if (a2) {
              goto LABEL_25;
            }
            goto LABEL_40;
          }
          int v20 = *__error();
          if (strerror_r(v20, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          __int16 v13 = ne_log_obj();
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)long long buf = 67109378;
          int v25 = v20;
          __int16 v26 = 2080;
          id v27 = __strerrbuf;
          id v14 = "Failed to set the kernel control socket receive buffer size: [%d] %s";
        }
        _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, v14, buf, 0x12u);
LABEL_34:

LABEL_24:
        CFRelease(a1);
        uint64_t v16 = 0;
        if (a2) {
          goto LABEL_25;
        }
        goto LABEL_40;
      }
      unsigned __int8 v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrlong long buf = 0;
        id v18 = "Failed to get the BSD name of the user ethernet controller";
LABEL_36:
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)__strerrbuf, 2u);
      }
    }
    else
    {
      unsigned __int8 v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrlong long buf = 0;
        id v18 = "Failed to get the IO object for the user ethernet controller";
        goto LABEL_36;
      }
    }

    id v8 = 0;
    goto LABEL_24;
  }
  id v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__strerrlong long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "No completion object was provided", (uint8_t *)__strerrbuf, 2u);
  }

  if (a1) {
    CFRelease(a1);
  }
LABEL_27:
}

void sub_100084800(uint64_t a1, const char *a2)
{
  SEL v3 = *(void **)(a1 + 32);
  if (!v3 || (id v4 = objc_getProperty(v3, a2, 32, 1)) == 0) {
    __assert_rtn("-[NEAgent startWithCompletionHandler:]_block_invoke", "NEAgent.m", 153, "self.callbackQueue != NULL");
  }

  uint64_t v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: starting", buf, 0xCu);
  }

  id v8 = [objc_alloc((Class)NSXPCConnection) initWithMachServiceName:@"com.apple.neagent" options:0];
  int v9 = *(void **)(a1 + 32);
  if (v9) {
    objc_setProperty_atomic(v9, v7, v8, 80);
  }

  id v11 = *(void **)(a1 + 32);
  if (v11 && v11[5])
  {
    int v12 = [objc_getProperty(v11, v10, 80, 1) _xpcConnection];
    xpc_connection_set_instance();
  }
  else
  {
    memset(out, 0, sizeof(out));
    *(_OWORD *)long long buf = 0u;
    memset(v48, 0, 21);
    uuid_generate(out);
    uuid_unparse(out, (char *)buf);
    __int16 v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)long long v43 = 138412546;
      *(void *)&void v43[4] = v14;
      *(_WORD *)&v43[12] = 2080;
      *(void *)&v43[14] = buf;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@: starting with instance ID %s", v43, 0x16u);
    }

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v15, 80, 1);
    }
    int v12 = [Property _xpcConnection];
    xpc_connection_set_oneshot_instance();
  }

  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100084C94;
  v41[3] = &unk_1000C6C60;
  void v41[4] = *(void *)(a1 + 32);
  id v18 = objc_retainBlock(v41);
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v17, 80, 1);
  }
  [v19 setInvalidationHandler:v18];
  id v21 = *(id *)(a1 + 32);
  if (v21) {
    id v21 = objc_getProperty(v21, v20, 80, 1);
  }
  [v21 setInterruptionHandler:v18];
  id v22 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NEAgentControl];
  id v23 = objc_alloc((Class)NSSet);
  uint64_t v24 = objc_opt_class();
  id v25 = [v23 initWithObjects:v24, objc_opt_class(), 0];
  [v22 setClasses:v25 forSelector:"setupWithPluginType:pluginVersion:pluginClass:pluginInfo:completionHandler:" argumentIndex:2 ofReply:1];
  id v27 = *(id *)(a1 + 32);
  if (v27) {
    id v27 = objc_getProperty(v27, v26, 80, 1);
  }
  [v27 setRemoteObjectInterface:v22];
  id v29 = *(id *)(a1 + 32);
  if (v29) {
    id v29 = objc_getProperty(v29, v28, 80, 1);
  }
  id v40 = v18;
  [v29 resume];
  SEL v30 = *(void **)(a1 + 32);
  id v32 = *(id *)(a1 + 40);
  if (v30)
  {
    id v33 = objc_getProperty(v30, v31, 80, 1);
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)uint32_t v48 = sub_100084D44;
    *(void *)&v48[8] = &unk_1000C6848;
    *(void *)&v48[16] = v30;
    id v34 = v32;
    id v49 = v34;
    id v35 = [v33 remoteObjectProxyWithErrorHandler:buf];
    uint64_t v37 = v30[5];
    uint64_t v36 = v30[6];
    uint64_t v38 = v30[7];
    uint64_t v39 = v30[12];
    *(void *)long long v43 = _NSConcreteStackBlock;
    *(void *)&v43[8] = 3221225472;
    *(void *)&v43[16] = sub_100084EA4;
    long long v44 = &unk_1000C6898;
    long long v45 = v30;
    id v46 = v34;
    [v35 setupWithPluginType:v36 pluginVersion:v37 pluginClass:v38 pluginInfo:v39 completionHandler:v43];
  }
}

void sub_100084C94(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: XPC connection went away", (uint8_t *)&v5, 0xCu);
  }

  sub_100085488(*(void **)(a1 + 32), v4);
}

void sub_100084D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an XPC error while waiting for a setup command response: %@", buf, 0x16u);
  }

  uint64_t v6 = *(void **)(a1 + 32);
  if (v6) {
    id Property = objc_getProperty(v6, v5, 32, 1);
  }
  else {
    id Property = 0;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100085510;
  v11[3] = &unk_1000C6DB0;
  id v8 = *(id *)(a1 + 40);
  id v12 = v3;
  id v13 = v8;
  id v9 = v3;
  dispatch_async(Property, v11);
}

void sub_100084EA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v10 = a4;
  id v11 = *(void **)(a1 + 32);
  if (v11)
  {
    id Property = objc_getProperty(v11, v9, 24, 1);
    uint64_t v13 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v13 = 0;
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100084FCC;
  block[3] = &unk_1000C6870;
  id v19 = v7;
  uint64_t v20 = v13;
  id v21 = v10;
  id v14 = *(id *)(a1 + 40);
  id v22 = v8;
  id v23 = v14;
  id v15 = v8;
  id v16 = v10;
  id v17 = v7;
  dispatch_async(Property, block);
}

void sub_100084FCC(uint64_t a1)
{
  id v3 = *(id *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  if (v4 && v4[5]) {
    goto LABEL_11;
  }
  id v6 = objc_alloc((Class)NEProcessIdentity);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 80, 1);
  }
  id v8 = [Property _xpcConnection];
  id v9 = [v6 initFromXPCConnection:v8];

  if (v9)
  {
    id v10 = [objc_alloc((Class)NSArray) initWithObjects:v9, 0];
    sub_1000853E0(*(void *)(a1 + 40), v10);
  }
  else
  {
    id v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create a process identity from the agent XPC connection", buf, 2u);
    }

    id v12 = [objc_alloc((Class)NSError) initWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
    id v3 = v12;
  }

  id v4 = *(void **)(a1 + 40);
  if (v4) {
LABEL_11:
  }
    id v4 = objc_getProperty(v4, v2, 80, 1);
  uint64_t v13 = [v4 _xpcConnection];
  id v14 = v13;
  if (v13)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    pid_t pid = xpc_connection_get_pid(v13);
    sub_1000853F0(v15, pid, *(void **)(a1 + 48));
    id v17 = (void *)xpc_connection_copy_entitlement_value();
    id v18 = v17;
    if (!v17 || xpc_get_type(v17) != (xpc_type_t)&_xpc_type_BOOL || !xpc_BOOL_get_value(v18))
    {
      id v19 = ne_log_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(a1 + 40);
        if (v29) {
          LODWORD(v29) = *(_DWORD *)(v29 + 16);
        }
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v35) = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Terminating neagent connection from un-entitled process %d", buf, 8u);
      }

      id v20 = [objc_alloc((Class)NSError) initWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
      id v3 = v20;
    }
  }
  else
  {
    id v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Terminating neagent connection because the XPC connection is NULL", buf, 2u);
    }

    id v18 = v3;
    id v3 = [objc_alloc((Class)NSError) initWithDomain:@"NEAgentErrorDomain" code:1 userInfo:0];
  }

  if (v3)
  {
    id v23 = ne_log_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v35 = v28;
      __int16 v36 = 2112;
      id v37 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%@: Tearing down XPC connection due to setup error: %@", buf, 0x16u);
    }

    sub_100085488(*(void **)(a1 + 40), v24);
  }
  id v25 = *(void **)(a1 + 40);
  if (v25) {
    __int16 v26 = objc_getProperty(v25, v22, 32, 1);
  }
  else {
    __int16 v26 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000854F8;
  block[3] = &unk_1000C6D88;
  id v33 = *(id *)(a1 + 64);
  id v31 = v3;
  id v32 = *(id *)(a1 + 56);
  id v27 = v3;
  dispatch_async(v26, block);
}

void sub_1000853E0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1000853F0(uint64_t a1, int a2, void *a3)
{
  id v8 = a3;
  if (a1)
  {
    *(_DWORD *)(a1 + 16) = a2;
    objc_storeStrong((id *)(a1 + 64), a3);
    uint64_t v6 = +[NSString stringWithFormat:@"%@[%d]", *(void *)(a1 + 48), *(unsigned int *)(a1 + 16)];
    id v7 = *(void **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;
  }
}

void sub_100085488(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 80, 1))
  {
    [objc_getProperty(a1, v3, 80, 1) invalidate];
    objc_setProperty_atomic(a1, v4, 0, 80);
  }
}

uint64_t sub_1000854F8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_100085510(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100085674(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (!v3 || (id v4 = objc_getProperty(v3, a2, 32, 1)) == 0) {
    __assert_rtn("-[NEAgent disposeWithCompletionHandler:]_block_invoke", "NEAgent.m", 204, "self.callbackQueue != NULL");
  }

  int v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: disposing", buf, 0xCu);
  }

  id v8 = *(void **)(a1 + 32);
  if (!v8) {
    goto LABEL_15;
  }
  id Property = objc_getProperty(v8, v7, 80, 1);
  id v11 = *(void **)(a1 + 32);
  if (!Property)
  {
    if (v11)
    {
      id v17 = objc_getProperty(v11, v9, 32, 1);
LABEL_12:
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100085900;
      block[3] = &unk_1000C68C0;
      id v23 = *(id *)(a1 + 40);
      dispatch_async(v17, block);
      id v16 = v23;
      goto LABEL_13;
    }
LABEL_15:
    id v17 = 0;
    goto LABEL_12;
  }
  if (v11)
  {
    id v12 = objc_getProperty(v11, v9, 80, 1);
    uint64_t v13 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v13 = 0;
    id v12 = 0;
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100085914;
  v20[3] = &unk_1000C6848;
  void v20[4] = v13;
  id v21 = *(id *)(a1 + 40);
  id v14 = [v12 remoteObjectProxyWithErrorHandler:v20];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000859F4;
  v18[3] = &unk_1000C6848;
  uint64_t v15 = *(void **)(a1 + 40);
  void v18[4] = *(void *)(a1 + 32);
  id v19 = v15;
  [v14 disposeWithCompletionHandler:v18];

  id v16 = v21;
LABEL_13:
}

uint64_t sub_100085900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100085914(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: Got an error on the XPC connection while waiting for dispose to complete: %@", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000859F4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id Property = objc_getProperty(v5, v3, 24, 1);
    uint64_t v7 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v7 = 0;
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100085AD0;
  block[3] = &unk_1000C6D88;
  id v10 = v4;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 40);
  id v8 = v4;
  dispatch_async(Property, block);
}

void sub_100085AD0(id *a1)
{
  if (a1[4])
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id v10 = a1[4];
      id v9 = a1[5];
      *(_DWORD *)long long buf = 138412546;
      id v15 = v9;
      __int16 v16 = 2112;
      id v17 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@: disposed with error: %@", buf, 0x16u);
    }
  }
  id v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = a1[5];
    *(_DWORD *)long long buf = 138412290;
    id v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@: disposed, tearing down agent connection", buf, 0xCu);
  }

  sub_100085488(a1[5], v5);
  id v7 = a1[5];
  if (v7) {
    id Property = objc_getProperty(v7, v6, 32, 1);
  }
  else {
    id Property = 0;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100085C84;
  v11[3] = &unk_1000C6DB0;
  id v13 = a1[6];
  id v12 = a1[4];
  dispatch_async(Property, v11);
}

uint64_t sub_100085C84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100085C98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 64);
  }
  else {
    id v3 = 0;
  }
  id v4 = [v3 mutableCopy];
  if (!v4) {
    id v4 = objc_alloc_init((Class)NSMutableArray);
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (id i = 0; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        if ((objc_msgSend(v4, "containsObject:", v10, (void)v14) & 1) == 0) {
          [v4 addObject:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }

  if ([v4 count])
  {
    id v11 = [objc_alloc((Class)NSArray) initWithArray:v4];
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 64);
    *(void *)(v12 + 64) = v11;
  }
}

void sub_100085E4C(uint64_t a1, int a2)
{
  id v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = "TRUE";
    if (!a2) {
      id v4 = "FALSE";
    }
    int v5 = 136315138;
    id v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[NEWiFiManager] Wi-Fi WoW state change callback called, isEnabled:[%s]", (uint8_t *)&v5, 0xCu);
  }
}

id sub_100085F08()
{
  self;
  if (qword_1000D7C78 != -1) {
    dispatch_once(&qword_1000D7C78, &stru_1000C68E0);
  }
  v0 = (void *)qword_1000D7C70;

  return v0;
}

void sub_100085F60(id a1)
{
  id v1 = objc_alloc_init(NEWiFiManager);
  uint64_t v2 = qword_1000D7C70;
  qword_1000D7C70 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100085F9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(void *)(v2 + 16)
    || (uint64_t v3 = WiFiManagerClientCreate(), (v4 = *(void *)(a1 + 32)) != 0)
    && (*(void *)(v4 + 16) = v3, (uint64_t v2 = *(void *)(a1 + 32)) != 0)
    && *(void *)(v2 + 16))
  {
    ++*(void *)(v2 + 8);
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 && *(void *)(v5 + 8) == 1)
    {
      WiFiManagerClientSetWoWState();
      WiFiManagerClientRegisterWowStateChangedCallback();
      CFRunLoopGetMain();
      WiFiManagerClientScheduleWithRunLoop();
      id v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ enabled Wi-Fi WoW", (uint8_t *)&v8, 0xCu);
      }
    }
  }
}

void sub_100086108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2 - 1;
      uint64_t v3 = *(void *)(a1 + 32);
      if (v3)
      {
        if (!*(void *)(v3 + 8) && *(void *)(v3 + 16))
        {
          WiFiManagerClientSetWoWState();
          WiFiManagerClientRegisterWowStateChangedCallback();
          CFRunLoopGetMain();
          WiFiManagerClientUnscheduleFromRunLoop();
          CFRelease(*(CFTypeRef *)(v3 + 16));
          *(void *)(v3 + _Block_object_dispose(&a9, 8) = 0;
          *(void *)(v3 + 16) = 0;
          uint64_t v4 = ne_log_obj();
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            int v5 = 138412290;
            uint64_t v6 = v3;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ disabled Wi-Fi WoW", (uint8_t *)&v5, 0xCu);
          }
        }
      }
    }
  }
}

void sub_1000864FC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    uint64_t v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleNetworkConfigurationChange:*(void *)(a1 + 40)];
}

void sub_100086578(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    uint64_t v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleNetworkConfigurationChange:*(void *)(a1 + 40)];
}

void sub_100086950(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property uninstallOnQueue];
}

void sub_1000869BC(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 408, 1))
    {
      id v4 = [objc_getProperty(a1, v3, 408, 1) count];
      int v5 = ne_log_obj();
      uint64_t v6 = (uint64_t)v5;
      if (v4)
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v8 = a1[50] - 2;
          if (v8 > 3) {
            CFStringRef v9 = @"Uninstalled";
          }
          else {
            CFStringRef v9 = off_1000C6A18[v8];
          }
          uint64_t v13 = [objc_getProperty(a1, v7, 360, 1) objectAtIndexedSubscript:0];
          long long v15 = (void *)v13;
          if (v13 && (unint64_t v16 = *(void *)(v13 + 32) - 2, v16 <= 3)) {
            CFStringRef v17 = off_1000C6A18[v16];
          }
          else {
            CFStringRef v17 = @"Uninstalled";
          }
          uint64_t v18 = [objc_getProperty(a1, v14, 360, 1) objectAtIndexedSubscript:1];
          id v19 = (void *)v18;
          if (v18 && (unint64_t v20 = *(void *)(v18 + 32) - 2, v20 <= 3)) {
            CFStringRef v21 = off_1000C6A18[v20];
          }
          else {
            CFStringRef v21 = @"Uninstalled";
          }
          *(_DWORD *)long long buf = 138413058;
          SEL v51 = (const char *)a1;
          __int16 v52 = 2112;
          CFStringRef v53 = v9;
          __int16 v54 = 2112;
          CFStringRef v55 = v17;
          __int16 v56 = 2112;
          CFStringRef v57 = v21;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "%@:Request install, parent session(%@), primary session(%@), fallback session(%@)", buf, 0x2Au);
        }
        id v23 = [objc_getProperty(a1, v22, 408, 1) objectAtIndexedSubscript:0];
        uint64_t v6 = (uint64_t)v23;
        if (v23 && v23[2] == 3)
        {
          switch(a1[50])
          {
            case 1:
            case 2:
              a1[50] = 3;
              id Property = objc_getProperty(v23, v24, 24, 1);
              if (Property) {
                Property[4] = 3;
              }
              __int16 v26 = [a1 server];
              [v26 requestInstallForSession:a1 withParentSession:0 exclusive:*(unsigned char *)(v6 + 8) & 1];
              goto LABEL_29;
            case 3:
              __int16 v26 = ne_log_obj();
              if (!os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
                goto LABEL_29;
              }
              *(_WORD *)long long buf = 0;
              id v27 = "parent session is in requested installation state";
              goto LABEL_45;
            case 4:
              id v28 = objc_getProperty(v23, v24, 24, 1);
              if (v28) {
                id v28 = objc_getProperty(v28, v29, 24, 1);
              }
              SEL v30 = [v28 queue];
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_100087414;
              block[3] = &unk_1000C6C60;
              id v31 = (id)v6;
              id v49 = v31;
              dispatch_async(v30, block);

              id v33 = objc_getProperty(v31, v32, 24, 1);
              if (v33) {
                v33[4] = 4;
              }
              [objc_getProperty(a1, v34, 408, 1) removeObject:v31];
              __int16 v26 = v49;
              goto LABEL_29;
            case 5:
              id v35 = objc_getProperty(v23, v24, 24, 1);
              if (v35) {
                id v35 = objc_getProperty(v35, v36, 24, 1);
              }
              id v37 = [v35 queue];
              long long v43 = _NSConcreteStackBlock;
              uint64_t v44 = 3221225472;
              long long v45 = sub_100087480;
              id v46 = &unk_1000C6C60;
              uint64_t v38 = (id)v6;
              uint64_t v47 = v38;
              dispatch_async(v37, &v43);

              id v40 = objc_getProperty(v38, v39, 24, 1);
              if (v40) {
                v40[4] = 5;
              }
              id v42 = objc_getProperty(a1, v41, 408, 1);
              [v42 removeObject:v38, v43, v44, v45, v46];
              __int16 v26 = v47;
              goto LABEL_29;
            default:
              goto LABEL_30;
          }
        }
        __int16 v26 = ne_log_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          id v27 = "bad operation request state";
LABEL_45:
          _os_log_fault_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, v27, buf, 2u);
        }
LABEL_29:

        goto LABEL_30;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v10 = "request install configuration operation array is empty";
        id v11 = v6;
        uint32_t v12 = 2;
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v6 = ne_log_obj();
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        SEL v51 = "-[NESMIKEv2VPNFallbackSession requestInstall]";
        uint64_t v10 = "%s called with null self.configurationOperationArray";
        id v11 = v6;
        uint32_t v12 = 12;
LABEL_11:
        _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, v10, buf, v12);
      }
    }
LABEL_30:
  }
}

void sub_100086EFC(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 408, 1))
    {
      id v4 = [objc_getProperty(a1, v3, 408, 1) count];
      int v5 = ne_log_obj();
      uint64_t v6 = v5;
      if (v4)
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v8 = a1[50] - 2;
          if (v8 > 3) {
            CFStringRef v9 = @"Uninstalled";
          }
          else {
            CFStringRef v9 = off_1000C6A18[v8];
          }
          uint64_t v13 = [objc_getProperty(a1, v7, 360, 1) objectAtIndexedSubscript:0];
          long long v15 = (void *)v13;
          if (v13 && (unint64_t v16 = *(void *)(v13 + 32) - 2, v16 <= 3)) {
            CFStringRef v17 = off_1000C6A18[v16];
          }
          else {
            CFStringRef v17 = @"Uninstalled";
          }
          uint64_t v18 = [objc_getProperty(a1, v14, 360, 1) objectAtIndexedSubscript:1];
          id v19 = (void *)v18;
          if (v18 && (unint64_t v20 = *(void *)(v18 + 32) - 2, v20 <= 3)) {
            CFStringRef v21 = off_1000C6A18[v20];
          }
          else {
            CFStringRef v21 = @"Uninstalled";
          }
          *(_DWORD *)long long buf = 138413058;
          long long v45 = (const char *)a1;
          __int16 v46 = 2112;
          CFStringRef v47 = v9;
          __int16 v48 = 2112;
          CFStringRef v49 = v17;
          __int16 v50 = 2112;
          CFStringRef v51 = v21;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@:Request uninstall, parent session(%@), primary session(%@), fallback session(%@)", buf, 0x2Au);
        }
        uint64_t v23 = [objc_getProperty(a1, v22, 408, 1) objectAtIndexedSubscript:0];
        uint64_t v6 = v23;
        if (!v23 || *(void *)(v23 + 16) != 2)
        {
          SEL v39 = ne_log_obj();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            id v41 = "bad operation request state";
            goto LABEL_43;
          }
LABEL_32:

          goto LABEL_33;
        }
        [objc_getProperty(a1, v24, 360, 1) objectAtIndexedSubscript:0];
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        BOOL v27 = v25 == objc_getProperty(v6, v26, 24, 1);

        uint64_t v29 = [objc_getProperty(a1, v28, 360, 1) objectAtIndexedSubscript:v27];
        if (v29)
        {
          uint64_t v30 = v29[4];

          if ((unint64_t)(v30 - 3) < 3)
          {
            id Property = objc_getProperty(v6, v31, 24, 1);
            if (Property) {
              id Property = objc_getProperty(Property, v33, 24, 1);
            }
            id v34 = [Property queue];
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000873A8;
            block[3] = &unk_1000C6C60;
            id v35 = v6;
            long long v43 = v35;
            dispatch_async(v34, block);

            id v37 = objc_getProperty(v35, v36, 24, 1);
            if (v37) {
              void v37[4] = 1;
            }
            [objc_getProperty(a1, v38, 408, 1) removeObject:v35];
            SEL v39 = v43;
            goto LABEL_32;
          }
          if (v30 != 2)
          {
            if (v30 != 1) {
              goto LABEL_33;
            }
            a1[50] = 2;
            id v40 = objc_getProperty(v6, v31, 24, 1);
            if (v40) {
              v40[4] = 2;
            }
            SEL v39 = [a1 server];
            [v39 requestUninstallForSession:a1];
            goto LABEL_32;
          }
          SEL v39 = ne_log_obj();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            id v41 = "child sesssion is in requested uninstallation state";
LABEL_43:
            _os_log_fault_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, v41, buf, 2u);
            goto LABEL_32;
          }
          goto LABEL_32;
        }
LABEL_33:

        return;
      }
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
        goto LABEL_33;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v10 = "request uninstall configuration operation array is empty";
      id v11 = v6;
      uint32_t v12 = 2;
    }
    else
    {
      uint64_t v6 = ne_log_obj();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v45 = "-[NESMIKEv2VPNFallbackSession requestUninstall]";
      uint64_t v10 = "%s called with null self.configurationOperationArray";
      id v11 = v6;
      uint32_t v12 = 12;
    }
    _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, v10, buf, v12);
    goto LABEL_33;
  }
}

void sub_1000873A8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property uninstallOnQueue];
}

void sub_100087414(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property installPended];
}

void sub_100087480(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property install];
}

void sub_100087844(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property installPended];
}

void sub_100087D90(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:*(void *)(a1 + 40)];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 install];
}

void sub_100087E08(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24, 1)) != 0)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  else
  {
    id v4 = 0;
  }
  [Property install];
}

uint64_t sub_100088078(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    unsigned int v3 = a3;
    switch(a2)
    {
      case 0:
        id v4 = +[NSNumber numberWithInt:a3];
        unsigned int v5 = [&off_1000C9750 containsObject:v4];

        if (v5) {
          return v3;
        }
        else {
          return 0;
        }
      case 1:
        id v6 = +[NSNumber numberWithInt:a3];
        unsigned int v7 = [&off_1000C97B0 containsObject:v6];

        if (v7) {
          return v3;
        }
        else {
          return 1;
        }
      case 2:
        unint64_t v8 = +[NSNumber numberWithInt:a3];
        unsigned int v9 = [&off_1000C9768 containsObject:v8];

        BOOL v10 = v9 == 0;
        unsigned int v11 = 2;
        goto LABEL_15;
      case 3:
        uint32_t v12 = +[NSNumber numberWithInt:a3];
        unsigned int v13 = [&__NSArray0__struct containsObject:v12];

        BOOL v10 = v13 == 0;
        unsigned int v11 = 3;
        goto LABEL_15;
      case 4:
        long long v14 = +[NSNumber numberWithInt:a3];
        unsigned int v15 = [&off_1000C9780 containsObject:v14];

        BOOL v10 = v15 == 0;
        unsigned int v11 = 4;
        goto LABEL_15;
      case 5:
        unint64_t v16 = +[NSNumber numberWithInt:a3];
        unsigned int v17 = [&off_1000C9798 containsObject:v16];

        BOOL v10 = v17 == 0;
        unsigned int v11 = 5;
LABEL_15:
        if (v10) {
          id result = v11;
        }
        else {
          id result = v3;
        }
        break;
      default:
        id result = 0;
        break;
    }
  }
  return result;
}

void sub_1000883DC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleNetworkDetectionNotification:*(unsigned int *)(a1 + 40)];
}

void sub_100088458(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleNetworkDetectionNotification:*(unsigned int *)(a1 + 40)];
}

void sub_10008868C(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleChangeEventForInterface:a1[5] newFlags:a1[6] previousFlags:a1[7]];
}

void sub_1000894B8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleUpdateConfiguration:0];

  id v8 = *(id *)(a1 + 32);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 360, 1);
  }
  unsigned int v9 = [v8 objectAtIndexedSubscript:0];
  unsigned int v11 = v9;
  if (v9) {
    unsigned int v9 = objc_getProperty(v9, v10, 24, 1);
  }
  sub_100081100(v9);

  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v12, 360, 1);
  }
  long long v14 = [v13 objectAtIndexedSubscript:0];
  unint64_t v16 = v14;
  if (v14) {
    long long v14 = objc_getProperty(v14, v15, 24, 1);
  }
  sub_1000811F4(v14);

  id v18 = *(id *)(a1 + 32);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 360, 1);
  }
  id v19 = [v18 objectAtIndexedSubscript:0];
  id v21 = v19;
  if (v19) {
    id v19 = objc_getProperty(v19, v20, 24, 1);
  }
  sub_100081180(v19);
}

void sub_1000895FC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleUpdateConfiguration:0];

  id v8 = *(id *)(a1 + 32);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 360, 1);
  }
  unsigned int v9 = [v8 objectAtIndexedSubscript:1];
  unsigned int v11 = v9;
  if (v9) {
    unsigned int v9 = objc_getProperty(v9, v10, 24, 1);
  }
  sub_100081100(v9);

  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v12, 360, 1);
  }
  long long v14 = [v13 objectAtIndexedSubscript:1];
  unint64_t v16 = v14;
  if (v14) {
    long long v14 = objc_getProperty(v14, v15, 24, 1);
  }
  sub_1000811F4(v14);

  id v18 = *(id *)(a1 + 32);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 360, 1);
  }
  id v19 = [v18 objectAtIndexedSubscript:1];
  id v21 = v19;
  if (v19) {
    id v19 = objc_getProperty(v19, v20, 24, 1);
  }
  sub_100081180(v19);
}

void sub_100089740(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) VPN];
  unsigned int v3 = [v2 protocol];
  id v11 = [v3 copy];

  [v11 setTunnelKind:1];
  id v4 = [*(id *)(a1 + 32) copy];
  unsigned int v5 = [v4 VPN];
  [v5 setProtocol:v11];

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 360, 1);
  }
  id v8 = [Property objectAtIndexedSubscript:0];
  BOOL v10 = v8;
  if (v8) {
    id v8 = objc_getProperty(v8, v9, 24, 1);
  }
  [v8 handleUpdateConfiguration:v4];
}

void sub_10008982C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) VPN];
  unsigned int v3 = [v2 protocol];
  id v11 = [v3 copy];

  [v11 setTunnelKind:2];
  id v4 = [*(id *)(a1 + 32) copy];
  unsigned int v5 = [v4 VPN];
  [v5 setProtocol:v11];

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 360, 1);
  }
  id v8 = [Property objectAtIndexedSubscript:1];
  BOOL v10 = v8;
  if (v8) {
    id v8 = objc_getProperty(v8, v9, 24, 1);
  }
  [v8 handleUpdateConfiguration:v4];
}

void sub_100089A8C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:0];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleUserSwitch];
}

void sub_100089AF8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:1];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleUserSwitch];
}

void sub_100089CD8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:0];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleUserLogout];
}

void sub_100089D44(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:1];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleUserLogout];
}

void sub_100089F30(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleSleepTime:*(double *)(a1 + 40)];
}

void sub_100089FAC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleSleepTime:*(double *)(a1 + 40)];
}

void sub_10008A1C8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:0];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleSleep];
}

void sub_10008A234(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:1];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleSleep];
}

void sub_10008A414(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:0];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleWakeup];
}

void sub_10008A480(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:1];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleWakeup];
}

void sub_10008A690(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_10008A70C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_10008A8DC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 handleStartMessage:*(void *)(a1 + 40)];
}

void sub_10008AAF0(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:0];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleInitializeState];
}

void sub_10008AB5C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  unsigned int v3 = [Property objectAtIndexedSubscript:1];
  id v5 = v3;
  if (v3) {
    unsigned int v3 = objc_getProperty(v3, v4, 24, 1);
  }
  [v3 handleInitializeState];
}

void sub_10008ACA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) server];
  if (v2 != v3)
  {

    return;
  }
  unsigned int v4 = [*(id *)(a1 + 48) isEqualToString:@"primaryCellularInterface"];

  if (!v4) {
    return;
  }
  id v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = [*(id *)(a1 + 40) server];
    unsigned int v7 = [v6 primaryCellularInterface];
    id v8 = [v7 interfaceName];
    if (v8)
    {
      unsigned int v9 = [*(id *)(a1 + 40) server];
      BOOL v10 = [v9 primaryCellularInterface];
      id v11 = [v10 interfaceName];
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v49 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Primary cellular interface changed to %@", buf, 0xCu);
    }
    else
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v49 = @"none";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Primary cellular interface changed to %@", buf, 0xCu);
    }
  }
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v12, 360, 1);
  }
  long long v14 = [Property objectAtIndexedSubscript:1];
  unint64_t v16 = v14;
  if (v14) {
    long long v14 = objc_getProperty(v14, v15, 24, 1);
  }
  id v17 = v14;

  id v19 = *(id *)(a1 + 40);
  if (v19) {
    id v19 = objc_getProperty(v19, v18, 384, 1);
  }
  id v20 = v19;
  id v21 = [*(id *)(a1 + 40) server];
  SEL v22 = [v21 primaryCellularInterface];

  if (nwi_state_copy())
  {
    uint64_t v24 = [v20 interfaceName];

    if (v24
      && ([v20 interfaceName],
          id v25 = objc_claimAutoreleasedReturnValue(),
          [v25 UTF8String],
          uint64_t ifstate = nwi_state_get_ifstate(),
          v25,
          ifstate))
    {
      uint64_t flags = nwi_ifstate_get_flags();
    }
    else
    {
      uint64_t flags = 0;
    }
    SEL v28 = [v22 interfaceName];
    if (v28)
    {
      id v29 = [v22 interfaceIndex];
      id v30 = [v20 interfaceIndex];

      if (v29 == v30)
      {
        SEL v28 = 0;
      }
      else
      {
        id v31 = [v22 interfaceName];
        [v31 UTF8String];
        SEL v28 = (void *)nwi_state_get_ifstate();

        if (v28) {
          SEL v28 = (void *)nwi_ifstate_get_flags();
        }
      }
    }
    nwi_state_release();
    if (!v20) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t flags = 0;
  SEL v28 = 0;
  if (v20)
  {
LABEL_30:
    SEL v32 = [v17 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008B18C;
    block[3] = &unk_1000C6908;
    id v44 = v17;
    id v33 = v20;
    uint64_t v34 = *(void *)(a1 + 40);
    id v45 = v33;
    uint64_t v46 = v34;
    uint64_t v47 = flags;
    dispatch_async(v32, block);
  }
LABEL_31:
  if (v22)
  {
    id v35 = [v22 interfaceIndex];
    if (v35 != [v20 interfaceIndex])
    {
      SEL v36 = [v17 queue];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10008B204;
      v39[3] = &unk_1000C6930;
      id v40 = v17;
      id v41 = v22;
      id v42 = v28;
      dispatch_async(v36, v39);
    }
  }
  id v37 = *(void **)(a1 + 40);
  if (v37)
  {
    objc_setProperty_atomic(v37, v23, v22, 384);
    uint64_t v38 = *(void *)(a1 + 40);
    if (v38)
    {
      *(void *)(v38 + 392) = v28;
      id v37 = *(void **)(a1 + 40);
    }
    else
    {
      id v37 = 0;
    }
  }
  sub_10008B264((uint64_t *)v37);
}

void sub_10008B18C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) interfaceName];
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 392);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v3;
  [v2 handleChangeEventForInterface:v3 newFlags:*(void *)(a1 + 56) previousFlags:v5];
}

void sub_10008B204(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) interfaceName];
  [v2 handleChangeEventForInterface:v3 newFlags:*(void *)(a1 + 48) previousFlags:0];
}

void sub_10008B264(uint64_t *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id Property = [objc_getProperty(a1, v3, 360, 1) objectAtIndexedSubscript:0];
    id v6 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v5, 40, 1);
    }
    unsigned int v7 = "NO";
    if (Property) {
      id v8 = "YES";
    }
    else {
      id v8 = "NO";
    }
    unsigned int v9 = [objc_getProperty(a1, v5, 360, 1) objectAtIndexedSubscript:1];
    id v11 = v9;
    if (v9) {
      unsigned int v9 = objc_getProperty(v9, v10, 40, 1);
    }
    if (v9) {
      unsigned int v7 = "YES";
    }
    uint32_t v12 = [objc_getProperty(a1, v10, 384, 1) interfaceName];
    uint64_t v13 = a1[46];
    uint64_t v14 = a1[47];
    int v38 = 138413570;
    SEL v39 = a1;
    __int16 v40 = 2080;
    id v41 = v8;
    __int16 v42 = 2080;
    long long v43 = v7;
    __int16 v44 = 2112;
    id v45 = v12;
    __int16 v46 = 2048;
    uint64_t v47 = v13;
    __int16 v48 = 2048;
    uint64_t v49 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ primary tunnel %s, fallback tunnel %s, cellular %@, predicted: %lu, advisory: %lu", (uint8_t *)&v38, 0x3Eu);
  }
  unint64_t v16 = [objc_getProperty(a1, v15, 360, 1) objectAtIndexedSubscript:0];
  id v18 = v16;
  if (v16) {
    unint64_t v16 = objc_getProperty(v16, v17, 40, 1);
  }
  id v19 = [v16 interfaceIndex];

  id v21 = [objc_getProperty(a1, v20, 360, 1) objectAtIndexedSubscript:1];
  uint64_t v23 = v21;
  if (v21) {
    id v21 = objc_getProperty(v21, v22, 40, 1);
  }
  id v24 = [v21 interfaceIndex];

  if (!v19) {
    goto LABEL_37;
  }
  if (v24)
  {
    id v26 = (id)a1[46];
    if (!v26 || (id v27 = (id)a1[47]) == 0 || v26 != v19 || v27 != v24)
    {
      SEL v28 = [a1 server];
      sub_1000560D4(v28, (uint64_t)v24, (uint64_t)v19);

      a1[46] = (uint64_t)v19;
LABEL_30:
      SEL v36 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__advisoryInterfaceIndex;
LABEL_34:
      *(uint64_t *)((char *)a1 + *v36) = (uint64_t)v24;
      return;
    }
    return;
  }
  if (!objc_getProperty(a1, v25, 384, 1))
  {
LABEL_37:
    if (a1[47] && a1[46])
    {
      id v37 = [a1 server];
      SEL v36 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__predicatedInterfaceIndex;
      sub_100056508(v37, a1[47], a1[46]);

      id v24 = 0;
      a1[47] = 0;
      goto LABEL_34;
    }
    return;
  }
  id v30 = (id)a1[46];
  if (!v30
    || (id v31 = (id)a1[47]) == 0
    || v30 != v19
    || v31 != objc_msgSend(objc_getProperty(a1, v29, 384, 1), "interfaceIndex"))
  {
    SEL v32 = [a1 server];
    id v34 = [objc_getProperty(a1, v33, 384, 1) interfaceIndex];
    sub_1000560D4(v32, (uint64_t)v34, (uint64_t)v19);

    a1[46] = (uint64_t)v19;
    id v24 = [objc_getProperty(a1, v35, 384, 1) interfaceIndex];
    goto LABEL_30;
  }
}

void sub_10008B6C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    if (v3 == (*(unsigned char *)(v2 + 352) & 1)) {
      return;
    }
    *(unsigned char *)(v2 + 352) = v3;
  }
  else if (!*(unsigned char *)(a1 + 40))
  {
    return;
  }
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = "not";
    if (v5 && (*(unsigned char *)(v5 + 352) & 1) != 0) {
      id v6 = "";
    }
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2080;
    uint32_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ fallback is %s active", (uint8_t *)&v9, 0x16u);
  }

  id v8 = *(unsigned char **)(a1 + 32);
  if (v8)
  {
    if (v8[352]) {
      sub_10008B7F4(v8, v7);
    }
  }
}

void sub_10008B7F4(unsigned char *self, const char *a2)
{
  if (!self || (self[352] & 1) == 0) {
    return;
  }
  uint64_t v5 = [objc_getProperty(self, a2, 360, 1) objectAtIndexedSubscript:0];
  id v31 = (id)v5;
  if (v5 && *(_DWORD *)(v5 + 8) == 2)
  {
    char v7 = 0;
  }
  else
  {
    id v2 = objc_getProperty(self, v6, 360, 1);
    id v8 = [v2 objectAtIndexedSubscript:0];
    int v3 = v8;
    if (!v8 || v8[2] != 3)
    {

      return;
    }
    char v7 = 1;
  }
  uint64_t v9 = [objc_getProperty(self, v6, 360, 1) objectAtIndexedSubscript:1];
  __int16 v11 = (void *)v9;
  if (v9 && *(_DWORD *)(v9 + 8) == 1
    || (objc_msgSend(objc_getProperty(self, v10, 360, 1), "objectAtIndexedSubscript:", 1),
        (uint64_t v13 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0))
  {

    if (v7)
    {
    }
LABEL_18:
    id Property = [objc_getProperty(self, v12, 360, 1) objectAtIndexedSubscript:1];
    id v17 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v16, 24, 1);
    }
    id v18 = Property;

    if (sub_10007C09C(self))
    {
      id v19 = [v18 matchedRule];
      if ([v19 action] == (id)2)
      {
        unsigned __int8 v20 = sub_10007C09C(self);

        if (v20)
        {
LABEL_36:

          return;
        }
      }
      else
      {
        id v21 = [v18 matchedRule];
        if ([v21 action] == (id)4)
        {
          unsigned __int8 v22 = sub_10007C09C(self);

          if (v22) {
            goto LABEL_36;
          }
        }
        else
        {
        }
      }
    }
    else if (sub_10007C09C(self))
    {
      goto LABEL_36;
    }
    xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
    pid_t v24 = getpid();
    xpc_dictionary_set_int64(v23, "SessionPID", v24);
    id v26 = [objc_getProperty(self, v25, 360, 1) objectAtIndexedSubscript:1];
    SEL v28 = v26;
    if (v26) {
      id v26 = objc_getProperty(v26, v27, 24, 1);
    }
    id v29 = [v26 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008BB40;
    block[3] = &unk_1000C6C38;
    void block[4] = self;
    id v33 = v23;
    id v30 = v23;
    dispatch_async(v29, block);

    goto LABEL_36;
  }
  int v14 = v13[2];

  if (v7)
  {
  }
  if (!v14) {
    goto LABEL_18;
  }
}

void sub_10008BB40(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:1];
  id v6 = v4;
  if (v4) {
    uint64_t v4 = objc_getProperty(v4, v5, 24, 1);
  }
  [v4 startWithCommand:*(void *)(a1 + 40) isOnDemand:0];
}

id sub_10008BBC0(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  v28.receiver = a1;
  v28.super_class = (Class)NEIKEv2FallbackChildSession;
  id v14 = a7;
  id v15 = a6;
  id v16 = a5;
  id v17 = a4;
  id v18 = a3;
  id v19 = a2;
  id v20 = [super init];
  id v21 = [NESMIKEv2VPNSession alloc];
  if (v21)
  {
    v29.receiver = v21;
    v29.super_class = (Class)NESMIKEv2VPNSession;
    id v22 = [super initWithConfiguration:v18 andServer:v17 andProtocol:v16 andPluginType:@"com.apple.NetworkExtension.IKEv2Provider" andSessionType:1 sessionQueue:v15 messageQueue:v14 tunnelKind:a8 parent:v19];
  }
  else
  {
    id v22 = 0;
  }

  if (v20)
  {
    objc_setProperty_atomic(v20, v23, v22, 24);

    *((void *)v20 + 4) = 1;
    *((_DWORD *)v20 + 2) = 0;
    objc_setProperty_atomic(v20, v24, 0, 40);
    if (a8 == 1) {
      id v26 = @"Primary Tunnel";
    }
    else {
      id v26 = @"Fallback Tunnel";
    }
    objc_setProperty_atomic(v20, v25, v26, 16);
  }
  else
  {
  }
  return v20;
}

void *sub_10008BD58(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v47.receiver = a1;
    v47.super_class = (Class)NESMIKEv2VPNFallbackSession;
    a1 = [super initWithConfiguration:v7 andServer:v8];
    if (a1)
    {
      __int16 v42 = v8;
      uint64_t v10 = ne_log_large_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412802;
        uint64_t v49 = a1;
        __int16 v50 = 2080;
        CFStringRef v51 = "-[NESMIKEv2VPNFallbackSession initWithConfiguration:andServer:andProtocol:andSessionType:]";
        __int16 v52 = 2112;
        id v53 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@:%s: Configuration %@", buf, 0x20u);
      }

      NEInitCFTypes();
      id v11 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
      objc_setProperty_atomic(a1, v12, v11, 360);

      id v13 = [v9 copy];
      [v13 setTunnelKind:1];
      id v14 = [v7 copy];
      id v15 = [v14 VPN];
      [v15 setProtocol:v13];

      id v16 = [NEIKEv2FallbackChildSession alloc];
      id v17 = [a1 queue];
      id v18 = [a1 messageQueue];
      id v45 = v14;
      long long v43 = v13;
      id v19 = v13;
      id v8 = v42;
      id v20 = sub_10008BBC0(v16, a1, v14, v42, v19, v17, v18, 1);

      __int16 v44 = v20;
      [objc_getProperty(a1, v21, 360, 1) addObject:v20];
      id v46 = v9;
      id v22 = [v9 copy];
      [v22 setTunnelKind:2];
      id v23 = [v7 copy];
      SEL v24 = [v23 VPN];
      [v24 setProtocol:v22];

      SEL v25 = [NEIKEv2FallbackChildSession alloc];
      id v26 = [a1 queue];
      id v27 = [a1 messageQueue];
      id v28 = sub_10008BBC0(v25, a1, v23, v42, v22, v26, v27, 2);

      [objc_getProperty(a1, v29, 360, 1) addObject:v28];
      id v30 = [a1 server];
      id v31 = [v30 primaryCellularInterface];
      objc_setProperty_atomic(a1, v32, v31, 384);

      a1[49] = 0;
      id v34 = [objc_getProperty(a1, v33, 384, 1) interfaceName];

      if (v34 && nwi_state_copy())
      {
        [objc_getProperty(a1, v35, 384, 1) interfaceName];
        id v36 = objc_claimAutoreleasedReturnValue();
        [v36 UTF8String];
        uint64_t ifstate = nwi_state_get_ifstate();

        if (ifstate) {
          a1[49] = nwi_ifstate_get_flags();
        }
        nwi_state_release();
      }
      int v38 = [a1 server:v42];
      [v38 addObserver:a1 forKeyPath:@"primaryCellularInterface" options:5 context:0];

      a1[46] = 0;
      a1[47] = 0;
      a1[50] = 1;
      id v39 = objc_alloc_init((Class)NSMutableArray);
      objc_setProperty_atomic(a1, v40, v39, 408);

      id v9 = v46;
    }
  }

  return a1;
}

void sub_10008C1B8(void *a1)
{
  if (a1)
  {
    id v2 = [a1 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008C248;
    block[3] = &unk_1000C6C60;
    void block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_10008C248(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    --*(_DWORD *)(v1 + 356);
    id v2 = *(_DWORD **)(a1 + 32);
    if (v2 && v2[89]) {
      return;
    }
  }
  else
  {
    id v2 = 0;
  }
  id v4 = [v2 server];
  sub_1000556BC(v4, v3);
}

void sub_10008C2C8(uint64_t a1, const char *a2)
{
  id v4 = *(id *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v5 = [Property objectAtIndexedSubscript:0];
  id v7 = v5;
  if (v5) {
    id v8 = objc_getProperty(v5, v6, 24, 1);
  }
  else {
    id v8 = 0;
  }

  if (v4 == v8) {
    __assert_rtn("-[NESMIKEv2VPNFallbackSession prepareNetwork:]_block_invoke", "NESMIKEv2VPNFallbackSession.m", 581, "0");
  }
  id v11 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  if (v10) {
    id v10 = objc_getProperty(v10, v9, 360, 1);
  }
  SEL v12 = [v10 objectAtIndexedSubscript:1];
  id v14 = v12;
  if (v12) {
    id v15 = objc_getProperty(v12, v13, 24, 1);
  }
  else {
    id v15 = 0;
  }

  if (v11 == v15)
  {
    id v16 = [*(id *)(a1 + 40) server];
    if (v16) {
      uint64_t v17 = v16[7];
    }
    else {
      uint64_t v17 = 0;
    }

    id v19 = *(id *)(a1 + 40);
    if (v19) {
      id v19 = objc_getProperty(v19, v18, 384, 1);
    }
    SEL v21 = [v19 interfaceName];
    id v22 = *(id *)(a1 + 40);
    if (v22) {
      id v22 = objc_getProperty(v22, v20, 360, 1);
    }
    id v23 = [v22 objectAtIndexedSubscript:1];
    SEL v25 = v23;
    if (v23) {
      id v23 = objc_getProperty(v23, v24, 24, 1);
    }
    id v26 = [v23 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008C4C4;
    block[3] = &unk_1000C6930;
    void block[4] = *(void *)(a1 + 40);
    id v29 = v21;
    uint64_t v30 = v17;
    id v27 = v21;
    dispatch_async(v26, block);
  }
}

void sub_10008C4C4(void *a1, const char *a2)
{
  uint64_t v5 = a1 + 4;
  id Property = (id)a1[4];
  uint64_t v4 = v5[1];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  id v6 = [Property objectAtIndexedSubscript:1];
  id v8 = v6;
  if (v6) {
    id v6 = objc_getProperty(v6, v7, 24, 1);
  }
  [v6 setInterfaceName:v4];

  uint64_t v10 = a1[6];
  if ((v10 | 2) == 3 && a1[5])
  {
    if (v10 == 3)
    {
      id v17 = (id)a1[4];
      if (v17) {
        id v17 = objc_getProperty(v17, v9, 360, 1);
      }
      id v18 = [v17 objectAtIndexedSubscript:1];
      id v27 = v18;
      if (v18) {
        id v18 = objc_getProperty(v18, v19, 24, 1);
      }
      SEL v21 = [v18 server];
      id v22 = (id)a1[4];
      if (v22) {
        id v22 = objc_getProperty(v22, v20, 360, 1);
      }
      id v23 = [v22 objectAtIndexedSubscript:1];
      SEL v25 = v23;
      if (v23) {
        id v26 = objc_getProperty(v23, v24, 24, 1);
      }
      else {
        id v26 = 0;
      }
      [v21 satisfyCellularPathForSession:v26];

      goto LABEL_20;
    }
    if (v10 != 1) {
      return;
    }
    id v11 = (id)a1[4];
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360, 1);
    }
    SEL v12 = [v11 objectAtIndexedSubscript:1];
    id v27 = v12;
    if (v12) {
      SEL v12 = objc_getProperty(v12, v13, 24, 1);
    }
    uint64_t v14 = a1[5];
  }
  else
  {
    id v15 = (id)a1[4];
    if (v15) {
      id v15 = objc_getProperty(v15, v9, 360, 1);
    }
    SEL v12 = [v15 objectAtIndexedSubscript:1];
    id v27 = v12;
    if (v12) {
      SEL v12 = objc_getProperty(v12, v16, 24, 1);
    }
    uint64_t v14 = 0;
  }
  [v12 handleNetworkPrepareResult:v14];
LABEL_20:
}

id sub_10008C69C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id v7 = 0;
  }
  id v8 = *(id *)(a1 + 40);

  int v10 = *(_DWORD *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360, 1);
    }
    uint64_t v12 = 0;
  }
  else
  {
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360, 1);
    }
    uint64_t v12 = 1;
  }
  id v13 = [v11 objectAtIndexedSubscript:v12];
  if (v13) {
    v13[2] = v10;
  }

  uint64_t v14 = ne_log_obj();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = *(void **)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    if (v15)
    {
      id v18 = [objc_getProperty(v15, v16, 360, 1) objectAtIndexedSubscript:0];
      id v20 = v18;
      if (v18) {
        id v21 = objc_getProperty(v18, v19, 24, 1);
      }
      else {
        id v21 = 0;
      }

      if (v21 == v17)
      {
        id v27 = @"Primary Tunnel";
      }
      else
      {
        id v23 = [objc_getProperty(v15, v22, 360, 1) objectAtIndexedSubscript:1];
        SEL v25 = v23;
        if (v23) {
          id v26 = objc_getProperty(v23, v24, 24, 1);
        }
        else {
          id v26 = 0;
        }

        if (v26 == v17) {
          id v27 = @"Fallback Tunnel";
        }
        else {
          id v27 = &stru_1000C7428;
        }
      }
    }
    else
    {
      id v27 = 0;
    }

    id v28 = v27;
    int v31 = 138412802;
    SEL v32 = v15;
    __int16 v33 = 2112;
    id v34 = v28;
    __int16 v35 = 2080;
    uint64_t v36 = ne_session_status_to_string();
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@[%@]: VPN Status to Parent: %s", (uint8_t *)&v31, 0x20u);
  }
  unsigned int v29 = [*(id *)(a1 + 32) status];
  [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 48)];
  id result = [*(id *)(a1 + 32) status];
  if (result == v29) {
    return [*(id *)(a1 + 32) notifyChangedExtendedStatus];
  }
  return result;
}

void sub_10008C924(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id v7 = 0;
  }
  id v8 = *(id *)(a1 + 40);

  if (v7 == v8)
  {
    int v10 = *(unsigned char **)(a1 + 32);
    sub_10008B7F4(v10, v9);
  }
}

void sub_10008C9C8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id v7 = 0;
  }
  id v8 = *(id *)(a1 + 40);

  id v10 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 1;
  }
  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 0;
  }
  uint64_t v12 = [v10 objectAtIndexedSubscript:v11];
  if (!v12 || (unsigned int v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 48);
    id v15 = *(void **)(a1 + 32);
    [v15 setLastStopReason:v14];
  }
}

void sub_10008CAE0(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id v7 = 0;
  }
  id v8 = (id)a1[5];

  id v10 = (id)a1[4];
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 1;
  }
  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 0;
  }
  uint64_t v12 = [v10 objectAtIndexedSubscript:v11];
  if (!v12 || (unsigned int v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0)
  {
    uint64_t v14 = a1[6];
    id v15 = (void *)a1[4];
    [v15 setLastDisconnectError:v14];
  }
}

void sub_10008CBF8(uint64_t a1)
{
  id v2 = objc_alloc_init(NEIKEv2FallbackConfigurationOperation);
  uint64_t v4 = v2;
  if (v2)
  {
    v2->_requestState = 3;
    v2->_exclusive = *(unsigned char *)(a1 + 48);
  }
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360, 1);
  }
  id v6 = [Property objectAtIndexedSubscript:0];
  id v8 = v6;
  if (v6) {
    id v9 = objc_getProperty(v6, v7, 24, 1);
  }
  else {
    id v9 = 0;
  }
  id v10 = *(id *)(a1 + 40);

  id v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360, 1);
    }
    uint64_t v13 = 0;
  }
  else
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360, 1);
    }
    uint64_t v13 = 1;
  }
  id v15 = [v12 objectAtIndexedSubscript:v13];
  if (v4) {
    objc_setProperty_atomic(v4, v14, v15, 24);
  }

  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 408, 1);
  }
  [v17 addObject:v4];
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v18, 408, 1);
  }
  if ([v19 count] == (id)1)
  {
    sub_1000869BC(*(void **)(a1 + 32), v20);
  }
  else
  {
    id v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v23 = *(id *)(a1 + 32);
      if (v23) {
        id v23 = objc_getProperty(v23, v22, 408, 1);
      }
      int v24 = 134217984;
      id v25 = [v23 count];
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "queuing request to install, operations count - %lu", (uint8_t *)&v24, 0xCu);
    }
  }
}

void sub_10008CDE4(uint64_t a1, char a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008CECC;
  block[3] = &unk_1000C69D0;
  char v10 = a2;
  uint64_t v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v4, block);
}

id sub_10008CEC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

void sub_10008CECC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    kdebug_trace();
    id v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Successfully registered", buf, 0xCu);
    }

    uint64_t v4 = [*(id *)(a1 + 48) queue];
    char v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    id v12 = sub_10008D0B0;
    uint64_t v13 = &unk_1000C6C38;
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    dispatch_async(v4, &v10);
  }
  else
  {
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v17 = v6;
      __int16 v18 = 2112;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Rejected start command from %@", buf, 0x16u);
    }

    sub_10009903C(*(void **)(a1 + 40), v8);
    [*(id *)(a1 + 32) removeAllClients];
  }
  id v9 = [*(id *)(a1 + 32) messageQueue:v10, v11, v12, v13];
  dispatch_resume(v9);
}

id sub_10008D0B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

void sub_10008D0BC(uint64_t a1)
{
  id v2 = objc_alloc_init(NEIKEv2FallbackConfigurationOperation);
  uint64_t v4 = v2;
  if (v2) {
    v2->_requestState = 2;
  }
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360, 1);
  }
  uint64_t v6 = [Property objectAtIndexedSubscript:0];
  id v8 = v6;
  if (v6) {
    id v9 = objc_getProperty(v6, v7, 24, 1);
  }
  else {
    id v9 = 0;
  }
  id v10 = *(id *)(a1 + 40);

  id v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360, 1);
    }
    uint64_t v13 = 0;
  }
  else
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360, 1);
    }
    uint64_t v13 = 1;
  }
  id v15 = [v12 objectAtIndexedSubscript:v13];
  if (v4) {
    objc_setProperty_atomic(v4, v14, v15, 24);
  }

  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 408, 1);
  }
  [v17 addObject:v4];
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v18, 408, 1);
  }
  if ([v19 count] == (id)1)
  {
    sub_100086EFC(*(void **)(a1 + 32), v20);
  }
  else
  {
    id v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v23 = *(id *)(a1 + 32);
      if (v23) {
        id v23 = objc_getProperty(v23, v22, 408, 1);
      }
      int v24 = 134217984;
      id v25 = [v23 count];
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "queuing request to uninstall, operations count - %lu", (uint8_t *)&v24, 0xCu);
    }
  }
}

void sub_10008D2A0(uint64_t a1)
{
  newCFBooleanRef Value = [objc_alloc((Class)NWInterface) initWithInterfaceName:*(void *)(a1 + 32)];
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  uint64_t v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24, 1);
  }
  else {
    id v7 = 0;
  }
  id v8 = *(id *)(a1 + 48);

  id v10 = *(id *)(a1 + 40);
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 0;
  }
  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360, 1);
    }
    uint64_t v11 = 1;
  }
  id v12 = [v10 objectAtIndexedSubscript:v11];
  id v14 = v12;
  if (v12) {
    objc_setProperty_atomic(v12, v13, newValue, 40);
  }

  sub_10008B264(*(uint64_t **)(a1 + 40));
}

void sub_10008D3B8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v5 = [a1 queue];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10008D500;
      v7[3] = &unk_1000C6C38;
      void v7[4] = a1;
      id v8 = v4;
      dispatch_async(v5, v7);
    }
    else
    {
      uint64_t v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        id v10 = "-[NESMIKEv2VPNFallbackSession handleClearConfigurationResult:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
      }
    }
  }
}

void sub_10008D500(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360, 1);
  }
  uint64_t v4 = [Property objectAtIndexedSubscript:0];
  uint64_t v6 = v4;
  if (v4) {
    uint64_t v4 = objc_getProperty(v4, v5, 24, 1);
  }
  id v7 = v4;
  id v9 = v7;
  if (v7 == *(id *)(a1 + 40))
  {
    id v19 = *(id *)(a1 + 32);
    if (v19) {
      id v19 = objc_getProperty(v19, v8, 360, 1);
    }
    id v20 = [v19 objectAtIndexedSubscript:0];
    id v22 = v20;
    if (v20) {
      id v23 = objc_getProperty(v20, v21, 40, 1);
    }
    else {
      id v23 = 0;
    }

    if (v23)
    {
      id v17 = *(id *)(a1 + 32);
      if (v17) {
        id v17 = objc_getProperty(v17, v10, 360, 1);
      }
      uint64_t v18 = 0;
      goto LABEL_22;
    }
  }
  else
  {
  }
  id v11 = *(id *)(a1 + 32);
  if (v11) {
    id v11 = objc_getProperty(v11, v10, 360, 1);
  }
  id v12 = [v11 objectAtIndexedSubscript:1];
  id v14 = v12;
  if (!v12) {
    goto LABEL_24;
  }
  id v15 = objc_getProperty(v12, v13, 40, 1);

  if (!v15) {
    goto LABEL_25;
  }
  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 360, 1);
  }
  uint64_t v18 = 1;
LABEL_22:
  int v24 = [v17 objectAtIndexedSubscript:v18];
  id v14 = v24;
  if (v24) {
    objc_setProperty_atomic(v24, v25, 0, 40);
  }
LABEL_24:

LABEL_25:
  id v26 = *(uint64_t **)(a1 + 32);

  sub_10008B264(v26);
}

void sub_10008D6E4(time_t *a1)
{
  if (a1)
  {
    id v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      time_t v3 = a1[5];
      if (v3 == -1) {
        time_t v3 = 0;
      }
      int v13 = 134217984;
      time_t v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Ready to sleep, sleepDate %lld", (uint8_t *)&v13, 0xCu);
    }

    if (objc_getProperty(a1, v4, 56, 1))
    {
      id Property = objc_getProperty(a1, v5, 56, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(a1, v7, 0, 56);
    }
    if (objc_getProperty(a1, v5, 32, 1))
    {
      if (a1[5] == -1)
      {
        time(a1 + 5);
        id v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          time_t v10 = a1[5];
          int v13 = 134217984;
          time_t v14 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Enter sleep state after full wake, %ld", (uint8_t *)&v13, 0xCu);
        }
      }
      id v11 = (void (**)(void))objc_getProperty(a1, v8, 32, 1);
      v11[2]();
      objc_setProperty_atomic_copy(a1, v12, 0, 32);
    }
  }
}

void sub_10008D884(void *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v6 = a1;
  id v8 = v6;
  if (a3 > -536870145)
  {
    if (a3 == -536870144)
    {
      sub_10008DAAC((uint64_t)v6, 2);
    }
    else if (a3 == -536870112 && v6)
    {
      objc_setProperty_atomic_copy(v6, v7, 0, 32);
    }
  }
  else if (a3 == -536870288)
  {
    if (v6) {
      id WeakRetained = objc_loadWeakRetained(v6 + 3);
    }
    else {
      id WeakRetained = 0;
    }
    unsigned int v11 = [WeakRetained canSleep];

    if (v11)
    {
      if (v8) {
        io_connect_t v12 = *((_DWORD *)v8 + 2);
      }
      else {
        io_connect_t v12 = 0;
      }
      IOAllowPowerChange(v12, (intptr_t)a4);
    }
    else
    {
      if (v8) {
        io_connect_t v13 = *((_DWORD *)v8 + 2);
      }
      else {
        io_connect_t v13 = 0;
      }
      IOCancelPowerChange(v13, (intptr_t)a4);
    }
  }
  else if (a3 == -536870272)
  {
    objc_initWeak(&location, v6);
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_10008DA54;
    newValue[3] = &unk_1000C6A40;
    objc_copyWeak(v15, &location);
    v15[1] = a4;
    if (v8) {
      objc_setProperty_atomic_copy(v8, v9, newValue, 32);
    }
    sub_10008DAAC((uint64_t)v8, 1);
    objc_destroyWeak(v15);
    objc_destroyWeak(&location);
  }
}

void sub_10008DA34(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10008DA54(uint64_t a1)
{
  id WeakRetained = (io_connect_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    time_t v3 = WeakRetained;
    IOAllowPowerChange(WeakRetained[2], *(void *)(a1 + 40));
    id WeakRetained = v3;
  }
}

void sub_10008DAAC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (v4 != a2)
    {
      uint64_t v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109376;
        LODWORD(v15[0]) = v4;
        WORD2(v15[0]) = 1024;
        *(_DWORD *)((char *)v15 + 6) = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting power state from %d to %d", buf, 0xEu);
      }

      *(void *)(a1 + 16) = a2;
      if (a2 == 1)
      {
        if ([WeakRetained handleSleep])
        {
          if (!objc_getProperty((id)a1, v7, 56, 1))
          {
            objc_getProperty((id)a1, v8, 48, 1);
            id v9 = NECreateTimerSource();
            objc_setProperty_atomic((id)a1, v10, v9, 56);
          }
        }
        else
        {
          sub_10008D6E4((time_t *)a1);
        }
      }
      else
      {
        if (*(void *)(a1 + 40) != -1)
        {
          time_t v11 = time(0);
          double v12 = difftime(v11, *(void *)(a1 + 40));
          io_connect_t v13 = ne_log_obj();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 134217984;
            *(double *)id v15 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "System slept for %f seconds (including dark wake time during sleep)", buf, 0xCu);
          }

          *(void *)(a1 + 40) = -1;
          [WeakRetained handleSleepTime:v12];
        }
        if (v4 == 1) {
          [WeakRetained handleWakeup];
        }
      }
    }
  }
}

void sub_10008DCEC(uint64_t a1)
{
}

id *sub_10008DD94(id *result, const char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (objc_getProperty(result, a2, 16, 1))
    {
      [objc_getProperty(v2, v3, 16, 1) removeObserver:v2 forKeyPath:@"status"];
      objc_setProperty_atomic(v2, v4, 0, 16);
    }
    if (objc_getProperty(v2, v3, 32, 1))
    {
      uint64_t v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)SEL v7 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "End SSID monitor transaction", v7, 2u);
      }

      objc_setProperty_atomic(v2, v6, 0, 32);
    }
    return (id *)objc_storeWeak(v2 + 5, 0);
  }
  return result;
}

void sub_10008E104(void *a1, void *a2, int a3)
{
  id v6 = a2;
  if (!a1) {
    goto LABEL_24;
  }
  id Property = objc_getProperty(a1, v5, 408, 1);
  if (a3)
  {
    if (Property != v6
      && (objc_msgSend(objc_getProperty(a1, v8, 408, 1), "isEqualToString:", v6) & 1) == 0)
    {
      objc_setProperty_atomic(a1, v9, v6, 408);
      sub_10008E3E8(a1, 1, 0);
    }
    goto LABEL_24;
  }
  id v10 = Property;
  if (v10 == v6)
  {

    goto LABEL_10;
  }
  double v12 = v10;
  unsigned int v13 = [objc_getProperty(a1, v11, 408, 1) isEqualToString:v6];

  if (v13)
  {
LABEL_10:
    objc_setProperty_atomic(a1, v14, 0, 408);
    sub_10008E3E8(a1, 1, 0);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v15 = [a1 configuration];
  id v16 = [v15 pathController];
  id v17 = [v16 pathRules];

  id v18 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v18)
  {
LABEL_23:

    goto LABEL_24;
  }
  id v19 = v18;
  char v20 = 0;
  uint64_t v21 = *(void *)v30;
  do
  {
    for (id i = 0; i != v19; id i = (char *)i + 1)
    {
      if (*(void *)v30 != v21) {
        objc_enumerationMutation(v17);
      }
      id v23 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      int v24 = [v23 temporaryAllowMulticastNetworkName];
      unsigned int v25 = [v24 isEqualToString:v6];

      if (v25)
      {
        [v23 setTemporaryAllowMulticastNetworkName:0];
        char v20 = 1;
        if (([v23 multicastPreferenceSet] & 1) == 0) {
          [v23 setDenyMulticast:1];
        }
      }
    }
    id v19 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }
  while (v19);

  if (v20)
  {
    id v17 = +[NEConfigurationManager sharedManagerForAllUsers];
    id v26 = [a1 configuration];
    id v27 = [a1 queue];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10008E510;
    v28[3] = &unk_1000C6AE0;
    v28[4] = a1;
    [v17 saveConfiguration:v26 withCompletionQueue:v27 handler:v28];

    goto LABEL_23;
  }
LABEL_24:
}

void sub_10008E3E8(void *a1, char a2, char a3)
{
  if (a1)
  {
    v10[0] = 0;
    v10[1] = v10;
    _DWORD v10[2] = 0x3032000000;
    v10[3] = sub_10008E624;
    void v10[4] = sub_10008E634;
    id v11 = (id)os_transaction_create();
    id v6 = [a1 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008E63C;
    block[3] = &unk_1000C6B08;
    char v8 = a3;
    char v9 = a2;
    void block[4] = a1;
    void block[5] = v10;
    dispatch_async(v6, block);

    _Block_object_dispose(v10, 8);
  }
}

void sub_10008E4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008E510(uint64_t a1, void *a2)
{
  id v3 = a2;
  SEL v4 = ne_log_obj();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ failed to save configuration to clear temporary SSID rules: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@ saved configuration to clear temporary SSID rules", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t sub_10008E624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008E634(uint64_t a1)
{
}

void sub_10008E63C(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1;
  if (*(unsigned char *)(a1 + 48)) {
    sub_10007DB9C(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(v2 + 49))
  {
    id v3 = [*(id *)(v2 + 32) configuration];
    SEL v4 = [v3 pathController];
    uint64_t v5 = v2;
    unsigned int v6 = [v4 isEnabled];

    if (v6)
    {
      v117[0] = 0;
      v117[1] = 0;
      unsigned int v99 = +[NSMutableDictionary dictionary];
      id Property = *(id *)(v5 + 32);
      uint64_t v9 = &selRef_setLastPrimaryInterface_;
      uint64_t v10 = v5;
      if (Property) {
        id Property = objc_getProperty(Property, v7, 368, 1);
      }
      uint64_t v95 = v5;
      if (([Property ignoreRouteRules] & 1) == 0)
      {
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        id v12 = *(id *)(v5 + 32);
        if (v12) {
          id v12 = objc_getProperty(v12, v11, 368, 1);
        }
        unsigned int v13 = [v12 pathRules];
        id v14 = [v13 countByEnumeratingWithState:&v110 objects:v116 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v111;
          while (2)
          {
            for (id i = 0; i != v15; id i = (char *)i + 1)
            {
              if (*(void *)v111 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = *(void **)(*((void *)&v110 + 1) + 8 * i);
              id v19 = [v18 matchSigningIdentifier];
              unsigned int v20 = [v19 isEqualToString:@"PathRuleDefaultIdentifier"];

              if (v20)
              {
                id v97 = v18;
                goto LABEL_21;
              }
            }
            id v15 = [v13 countByEnumeratingWithState:&v110 objects:v116 count:16];
            if (v15) {
              continue;
            }
            break;
          }
          id v97 = 0;
LABEL_21:
          uint64_t v10 = v95;
          uint64_t v9 = &selRef_setLastPrimaryInterface_;
        }
        else
        {
          id v97 = 0;
        }

        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        id v23 = *(id *)(v10 + 32);
        if (v23) {
          id v23 = objc_getProperty(v23, v22, *((int *)v9 + 722), 1);
        }
        id obj = [v23 pathRules];
        id v24 = [obj countByEnumeratingWithState:&v106 objects:v115 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = *(void *)v107;
          uint64_t v96 = *(void *)v107;
          do
          {
            id v27 = 0;
            do
            {
              if (*(void *)v107 != v26) {
                objc_enumerationMutation(obj);
              }
              id v28 = *(void **)(*((void *)&v106 + 1) + 8 * (void)v27);
              if (([v28 denyAll] & 1) == 0)
              {
                id v29 = v25;
                long long v30 = *(void **)(v10 + 32);
                id v31 = v28;
                id v32 = v97;
                if (v30)
                {
                  __int16 v33 = +[NSMutableArray array];
                  if ([v31 cellularBehavior])
                  {
                    if ([v31 cellularBehavior] == (id)1)
                    {
                      BOOL v35 = 0;
                    }
                    else
                    {
                      [v31 cellularBehavior];
                      BOOL v35 = 1;
                    }
                  }
                  else
                  {
                    BOOL v35 = [objc_getProperty(v30, v34, 392, 1) status] != (id)1;
                  }
                  if (![v31 wifiBehavior] || objc_msgSend(v31, "wifiBehavior") == (id)2)
                  {
                    BOOL v36 = 1;
                    if (v35) {
                      goto LABEL_40;
                    }
LABEL_44:
                    uint64_t v39 = 2;
LABEL_48:
                    id v37 = +[NEPolicyRouteRule routeRuleWithAction:v39 forType:2];
                    [v33 addObject:v37];
LABEL_49:

                    goto LABEL_50;
                  }
                  BOOL v36 = [v31 wifiBehavior] != (id)1;
                  if (!v35) {
                    goto LABEL_44;
                  }
LABEL_40:
                  id v37 = [v30 configuration];
                  if ([v37 grade] != (id)2)
                  {

                    goto LABEL_47;
                  }
                  int v38 = [v31 matchSigningIdentifier];
                  if ([v38 isEqualToString:@"PathRuleDefaultIdentifier"])
                  {

                    goto LABEL_49;
                  }
                  id v94 = [v31 cellularBehavior];
                  id v40 = [v32 cellularBehavior];

                  BOOL v41 = v94 == v40;
                  uint64_t v10 = v95;
                  if (!v41)
                  {
LABEL_47:
                    uint64_t v39 = 1;
                    goto LABEL_48;
                  }
LABEL_50:
                  if (!v36)
                  {
                    __int16 v42 = +[NEPolicyRouteRule routeRuleWithAction:2 forType:3];
                    [v33 addObject:v42];
                    uint64_t v26 = v96;
                    id v25 = v29;
                    goto LABEL_58;
                  }
                  __int16 v42 = [v30 configuration];
                  if ([v42 grade] != (id)2)
                  {

                    uint64_t v26 = v96;
                    id v25 = v29;
                    goto LABEL_57;
                  }
                  long long v43 = [v31 matchSigningIdentifier];
                  uint64_t v26 = v96;
                  id v25 = v29;
                  if ([v43 isEqualToString:@"PathRuleDefaultIdentifier"])
                  {

                    goto LABEL_58;
                  }
                  id v44 = [v31 wifiBehavior];
                  id v45 = [v32 wifiBehavior];

                  BOOL v41 = v44 == v45;
                  uint64_t v10 = v95;
                  if (!v41)
                  {
LABEL_57:
                    __int16 v42 = +[NEPolicyRouteRule routeRuleWithAction:1 forType:3];
                    [v33 addObject:v42];
LABEL_58:
                  }
                  if ([v33 count]) {
                    id v46 = v33;
                  }
                  else {
                    id v46 = 0;
                  }
                }
                else
                {
                  id v46 = 0;
                  id v25 = v29;
                }

                objc_super v47 = [v31 matchSigningIdentifier];
                [v99 setObject:v46 forKeyedSubscript:v47];
              }
              id v27 = (char *)v27 + 1;
            }
            while (v25 != v27);
            id v48 = [obj countByEnumeratingWithState:&v106 objects:v115 count:16];
            id v25 = v48;
          }
          while (v48);
        }
      }
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v49 = *(id *)(v10 + 32);
      if (v49) {
        id v49 = objc_getProperty(v49, v11, 368, 1);
      }
      __int16 v50 = [v49 pathRules];
      id v51 = [v50 countByEnumeratingWithState:&v102 objects:v114 count:16];
      if (v51)
      {
        id v52 = v51;
        uint64_t v53 = *(void *)v103;
        while (2)
        {
          for (j = 0; j != v52; j = (char *)j + 1)
          {
            if (*(void *)v103 != v53) {
              objc_enumerationMutation(v50);
            }
            CFStringRef v55 = *(void **)(*((void *)&v102 + 1) + 8 * (void)j);
            __int16 v56 = [v55 matchSigningIdentifier];
            unsigned __int8 v57 = [v56 isEqualToString:@"PathRuleDefaultIdentifier"];

            if ((v57 & 1) == 0)
            {
              id v58 = [v55 matchSigningIdentifier];
              [v58 UTF8String];
              [v55 isIdentifierExternal];
              uint64_t v59 = (void *)ne_copy_cached_uuids_for_bundle_identifier();

              if (!v59)
              {
                id v60 = ne_log_obj();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v61 = *(void *)(v95 + 32);
                  long long v62 = [v55 matchSigningIdentifier];
                  *(_DWORD *)long long buf = 138412546;
                  *(void *)&uint8_t buf[4] = v61;
                  *(_WORD *)&unsigned char buf[12] = 2112;
                  *(void *)&buf[14] = v62;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "%@: No UUIDs in the cache for %@, populating the cache from the path rules", buf, 0x16u);
                }
                long long v63 = [*(id *)(v95 + 32) configuration];
                long long v64 = [v63 identifier];
                [v64 getUUIDBytes:v117];

                CFStringRef v65 = [*(id *)(v95 + 32) uid];
                [v65 intValue];
                NEHelperCachePopulateUUIDsForConfiguration();

                goto LABEL_85;
              }
            }
          }
          id v52 = [v50 countByEnumeratingWithState:&v102 objects:v114 count:16];
          if (v52) {
            continue;
          }
          break;
        }
      }
LABEL_85:

      uint64_t v67 = [*(id *)(v95 + 32) policySession];
      id v68 = *(id *)(v95 + 32);
      if (v68) {
        id v68 = objc_getProperty(v68, v66, 368, 1);
      }
      long long v70 = [v68 pathRules];
      id v71 = *(id *)(v95 + 32);
      if (v71) {
        id v71 = objc_getProperty(v71, v69, 496, 1);
      }
      id obja = (id)v67;
      id v73 = v71;
      id v74 = *(id *)(v95 + 32);
      if (v74)
      {
        id v74 = objc_getProperty(v74, v72, 408, 1);
        long long v75 = *(unsigned char **)(v95 + 32);
      }
      else
      {
        long long v75 = 0;
      }
      id v76 = v74;
      long long v78 = sub_10008F02C(v75, v77);
      long long v79 = sub_10008F1F8(*(unsigned char **)(v95 + 32), 0);
      char v81 = sub_10008F404(*(void *)(v95 + 32), v80);
      long long v82 = [*(id *)(v95 + 32) networkAgent];
      SEL v83 = [v82 agentUUID];
      int v98 = NEGetConsoleUserUID();
      id v84 = v70;
      id v85 = v73;
      id v86 = v76;
      id v87 = v99;
      id v88 = v78;
      id v89 = v79;
      id v90 = v83;
      id v91 = obja;
      if (obja && isa_nsarray() && isa_nsdictionary() && *((_DWORD *)obja + 2) == 5)
      {
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100041D7C;
        long long v119 = &unk_1000C5E40;
        id v120 = obja;
        id v121 = v84;
        id v122 = v87;
        int v128 = v98;
        id v123 = v85;
        id v124 = v90;
        id v125 = v86;
        id v126 = v88;
        BOOL v129 = (v81 & 0x10) != 0;
        id v91 = obja;
        id v127 = v89;
        sub_10002EC18((uint64_t)NESMPolicyMasterSession, buf);
      }
      uint64_t v2 = v95;
    }
    else
    {
      uint64_t v21 = [*(id *)(v5 + 32) policySession];
      sub_10002E7D4((uint64_t)v21);

      uint64_t v2 = v5;
    }
  }
  sub_10008F4A8(*(void *)(v2 + 32), a2);
  uint64_t v92 = *(void *)(*(void *)(v2 + 40) + 8);
  long long v93 = *(void **)(v92 + 40);
  *(void *)(v92 + 40) = 0;
}

_UNKNOWN **sub_10008F02C(unsigned char *a1, const char *a2)
{
  if (!a1) {
    goto LABEL_6;
  }
  id v3 = [objc_getProperty(a1, a2, 392, 1) status];
  if (!objc_getProperty(a1, v4, 432, 1)) {
    goto LABEL_6;
  }
  unsigned int v6 = 0;
  if ((a1[355] & 1) != 0 && v3 != (id)1)
  {
    if ((sub_10008F404((uint64_t)a1, v5) & 2) == 0)
    {
LABEL_6:
      unsigned int v6 = 0;
      goto LABEL_7;
    }
    if ((sub_10008F404((uint64_t)a1, v7) & 8) != 0)
    {
      unsigned int v6 = &off_1000C97C8;
    }
    else
    {
      id v10 = objc_getProperty(a1, v9, 472, 1);
      if ([v10 count])
      {
        id v11 = sub_10008F1F8(a1, (const char *)1);
        unsigned int v13 = +[NSMutableSet setWithArray:objc_getProperty(a1, v12, 456, 1)];
        if ((sub_10008F404((uint64_t)a1, v14) & 4) != 0 && objc_msgSend(objc_getProperty(a1, v15, 464, 1), "count")) {
          [v13 addObjectsFromArray:objc_getProperty(a1, v16, 464, 1)];
        }
        if (v11)
        {
          id v17 = +[NSSet setWithArray:v11];
          [v13 minusSet:v17];
        }
        [v13 intersectSet:v10];
        unsigned int v6 = [v13 allObjects];
      }
      else
      {
        unsigned int v6 = 0;
      }
    }
  }
LABEL_7:

  return v6;
}

id sub_10008F1F8(unsigned char *a1, const char *a2)
{
  if (!a1) {
    goto LABEL_21;
  }
  char v2 = (char)a2;
  id v4 = [objc_getProperty(a1, a2, 392, 1) status];
  if ((v2 & 1) == 0)
  {
    id v15 = v4;
    if ((sub_10008F404((uint64_t)a1, v5) & 2) != 0 && (sub_10008F404((uint64_t)a1, v16) & 8) == 0)
    {
      id v18 = objc_getProperty(a1, v17, 432, 1);
      if (v18)
      {
        char v19 = a1[355];

        id v14 = 0;
        if ((v19 & 1) == 0 || v15 == (id)1) {
          goto LABEL_24;
        }
        goto LABEL_3;
      }
    }
LABEL_21:
    id v14 = 0;
    goto LABEL_24;
  }
LABEL_3:
  unsigned int v6 = +[NSMutableArray array];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = +[NEPathController copyAggregatePathRules];
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      for (id i = 0; i != v9; id i = (char *)i + 1)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        SEL v12 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if ((objc_msgSend(v12, "denyCellularFallback", (void)v21) & 1) != 0
          || [v12 cellularBehavior] == (id)1)
        {
          unsigned int v13 = [v12 matchSigningIdentifier];
          [v6 addObject:v13];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v9);
  }

  if ([v6 count]) {
    id v14 = v6;
  }
  else {
    id v14 = 0;
  }

LABEL_24:

  return v14;
}

uint64_t sub_10008F404(uint64_t result, const char *a2)
{
  if (result)
  {
    char v2 = (void *)result;
    if (objc_msgSend(objc_getProperty((id)result, a2, 368, 1), "cellularFallbackFlags"))
    {
      id Property = objc_getProperty(v2, v3, 368, 1);
      return (uint64_t)[Property cellularFallbackFlags];
    }
    else
    {
      id v4 = [v2 configuration];
      id v5 = [v4 grade];

      if (v5 == (id)2)
      {
        id result = ne_session_fallback_default();
        if ((result & 1) == 0) {
          return 6;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_10008F4A8(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (objc_msgSend(objc_getProperty((id)a1, a2, 480, 1), "count"))
    {
      id v4 = sub_10008F02C((unsigned char *)a1, v3);
      if ([v4 count])
      {
        id v5 = v4;
        id v6 = objc_alloc_init((Class)NSMutableArray);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v7 = v5;
        id v8 = [v7 countByEnumeratingWithState:&v33 objects:v38 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = 0;
          uint64_t v11 = *(void *)v34;
          do
          {
            for (id i = 0; i != v9; id i = (char *)i + 1)
            {
              unsigned int v13 = v10;
              if (*(void *)v34 != v11) {
                objc_enumerationMutation(v7);
              }
              [*(id *)(*((void *)&v33 + 1) + 8 * i) UTF8String];
              uint64_t v10 = (void *)NEHelperCacheCopyAppUUIDMapping();

              if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
              {
                applier[0] = _NSConcreteStackBlock;
                applier[1] = 3221225472;
                applier[2] = sub_10008FAE4;
                applier[3] = &unk_1000C6AB8;
                id v32 = v6;
                xpc_array_apply(v10, applier);
              }
            }
            id v9 = [v7 countByEnumeratingWithState:&v33 objects:v38 count:16];
          }
          while (v9);
        }
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v15 = objc_getProperty((id)a1, v14, 480, 1);
        id v16 = [v15 countByEnumeratingWithState:&v27 objects:v37 count:16];
        if (v16)
        {
          id v18 = v16;
          uint64_t v19 = *(void *)v28;
LABEL_17:
          uint64_t v20 = 0;
          while (1)
          {
            if (*(void *)v28 != v19) {
              objc_enumerationMutation(v15);
            }
            long long v21 = [objc_getProperty((id)a1, v17, 480, 1) objectForKeyedSubscript:v27];
            unsigned __int8 v22 = [v6 containsObject:v21];

            if (v22) {
              break;
            }
            if (v18 == (id)++v20)
            {
              id v18 = [v15 countByEnumeratingWithState:&v27 objects:v37 count:16];
              if (v18) {
                goto LABEL_17;
              }
              goto LABEL_23;
            }
          }

          if (*(unsigned char *)(a1 + 357)) {
            return;
          }
          char v23 = 1;
          int64_t v24 = 500000000;
LABEL_29:
          *(unsigned char *)(a1 + 357) = v23;
          if (*(_DWORD *)(a1 + 360) == -1)
          {
            sub_10008F840(a1);
          }
          else
          {
            id v25 = objc_getProperty((id)a1, v3, 488, 1);
            dispatch_time_t v26 = dispatch_time(0, v24);
            dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
          }
          return;
        }
LABEL_23:
      }
      else
      {
      }
    }
    if ((*(unsigned char *)(a1 + 357) & 1) == 0) {
      return;
    }
    char v23 = 0;
    int64_t v24 = 5000000000;
    goto LABEL_29;
  }
}

void sub_10008F840(uint64_t a1)
{
  if (a1)
  {
    char v2 = [(id)a1 server];
    id v4 = v2;
    if (v2)
    {
      char v5 = *(unsigned char *)(a1 + 357) & 1;
      id Property = objc_getProperty(v2, v3, 88, 1);
      *(void *)block = _NSConcreteStackBlock;
      *(void *)&block[8] = 3221225472;
      *(void *)&block[16] = sub_100057028;
      id v16 = &unk_1000C6D38;
      id v17 = v4;
      char v18 = v5;
      dispatch_async(Property, block);
    }

    if (*(_DWORD *)(a1 + 360) == -1
      && notify_register_check("com.apple.networkextension.fallback_in_use", (int *)(a1 + 360)))
    {
      id v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136315138;
        *(void *)&void block[4] = "com.apple.networkextension.fallback_in_use";
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "notify_register_check for %s failed", block, 0xCu);
      }

      *(_DWORD *)(a1 + 360) = -1;
    }
    int v8 = *(_DWORD *)(a1 + 360);
    if (v8 != -1)
    {
      uint64_t state64 = 0;
      char v9 = *(unsigned char *)(a1 + 357);
      if (!notify_get_state(v8, &state64))
      {
        uint64_t v10 = v9 & 1;
        if (state64 == v10 || notify_set_state(*(_DWORD *)(a1 + 360), v10))
        {
          uint64_t v11 = ne_log_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)block = 134218240;
            *(void *)&void block[4] = state64;
            *(_WORD *)&block[12] = 2048;
            *(void *)&block[14] = v10;
            _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Won't post notification (old state = %llu, new state = %llu)", block, 0x16u);
          }
        }
        else
        {
          SEL v12 = ne_log_obj();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            unsigned int v13 = "";
            if (!v10) {
              unsigned int v13 = " not";
            }
            *(_DWORD *)block = 136315138;
            *(void *)&void block[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Posting notification that fallback is%s in use", block, 0xCu);
          }

          notify_post("com.apple.networkextension.fallback_in_use");
        }
      }
    }
  }
}

uint64_t sub_10008FAE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  char v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v5)];
    [v6 addObject:v7];
  }
  return 1;
}

id sub_10009101C(uint64_t a1)
{
  char v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2080;
    uint64_t v8 = ne_session_status_to_string();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Session %@ status changing to %s after update", (uint8_t *)&v5, 0x16u);
  }

  return [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 40)];
}

void sub_1000911A0(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = objc_getProperty(v3, a2, 448, 1);
    if (v4 && !*(void *)(a1 + 40)) {
      goto LABEL_23;
    }
    int v5 = *(void **)(a1 + 32);
    if (v5)
    {
      id v6 = objc_getProperty(v5, a2, 448, 1);
      if (v6) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    id v4 = 0;
  }
  if (*(void *)(a1 + 40)) {
    goto LABEL_23;
  }
  id v6 = 0;
LABEL_6:
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 448, 1);
  }
  id v8 = [Property count];
  id v9 = [*(id *)(a1 + 40) count];

  if (v8 != v9) {
    goto LABEL_24;
  }
  uint64_t v11 = *(void **)(a1 + 40);
  if (!v11) {
    return;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v4 = v11;
  id v12 = [v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (!v12)
  {
LABEL_20:

    return;
  }
  id v13 = v12;
  uint64_t v14 = *(void *)v30;
LABEL_12:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v30 != v14) {
      objc_enumerationMutation(v4);
    }
    uint64_t v16 = *(void *)(*((void *)&v29 + 1) + 8 * v15);
    char v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:v16];
    id v19 = *(id *)(a1 + 32);
    if (v19) {
      id v19 = objc_getProperty(v19, v17, 448, 1);
    }
    uint64_t v20 = [v19 objectForKeyedSubscript:v16];
    id v21 = [v18 unsignedIntegerValue];
    id v22 = [v20 unsignedIntegerValue];

    if (v21 != v22) {
      break;
    }
    if (v13 == (id)++v15)
    {
      id v13 = [v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
      if (v13) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
LABEL_23:

LABEL_24:
  if (*(void *)(a1 + 40))
  {
    id v24 = [objc_alloc((Class)NSDictionary) initWithDictionary:*(void *)(a1 + 40) copyItems:1];
    id v25 = *(void **)(a1 + 32);
    if (v25) {
      objc_setProperty_atomic(v25, v23, v24, 448);
    }
  }
  else
  {
    dispatch_time_t v26 = *(void **)(a1 + 32);
    if (v26) {
      objc_setProperty_atomic(v26, v10, 0, 448);
    }
  }
  long long v27 = ne_log_obj();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v34 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%@: Updating agent on fallback interface change", buf, 0xCu);
  }

  sub_10008E3E8(*(void **)(a1 + 32), 0, 1);
}

void sub_100091518(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 392, 1))
    {
      [objc_getProperty(a1, v3, 392, 1) removeObserver:a1 forKeyPath:@"status"];
      objc_setProperty_atomic(a1, v4, 0, 392);
    }
    if (objc_getProperty(a1, v3, 416, 1))
    {
      int v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int16 v7 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "End roaming monitor transaction", v7, 2u);
      }

      objc_setProperty_atomic(a1, v6, 0, 416);
    }
  }
}

void sub_100091604(uint64_t a1, const char *a2)
{
  objc_setProperty_atomic((id)a1, a2, 0, 456);
  objc_setProperty_atomic((id)a1, v3, 0, 464);
  objc_setProperty_atomic((id)a1, v4, 0, 472);
  objc_setProperty_atomic((id)a1, v5, 0, 480);
  sub_10008F4A8(a1, v6);
  sub_10008F840(a1);
  int v8 = *(_DWORD *)(a1 + 360);
  if (v8 != -1)
  {
    notify_cancel(v8);
    *(_DWORD *)(a1 + 360) = -1;
  }
  id Property = objc_getProperty((id)a1, v7, 488, 1);
  dispatch_source_cancel(Property);
  objc_setProperty_atomic((id)a1, v10, 0, 488);
  if (objc_getProperty((id)a1, v11, 504, 1))
  {
    [a1 didStopTrackingNOI:objc_getProperty((id)a1, v12, 512, 1)];
    [objc_getProperty((id)a1, v13, 504, 1) setDelegate:0];
    [objc_getProperty((id)a1, v14, 504, 1) destroy];
    objc_setProperty_atomic((id)a1, v15, 0, 504);
  }
  uint64_t v16 = [(id)a1 server];
  [v16 removeObserver:a1 forKeyPath:@"primaryCellularInterface"];

  id v17 = [(id)a1 server];
  [v17 removeObserver:a1 forKeyPath:@"primaryPhysicalInterface"];

  *(unsigned char *)(a1 + 35_Block_object_dispose(&a9, 8) = 0;
}

uint64_t sub_100091DE4(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    uint64_t v18 = 0;
    id v19 = &v18;
    uint64_t v20 = 0x3032000000;
    id v21 = sub_10008E624;
    id v22 = sub_10008E634;
    id v23 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    SEL v3 = objc_msgSend(objc_getProperty(self, a2, 368, 1), "pathRules");
    id v4 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v25;
      while (2)
      {
        for (id i = 0; i != v4; id i = (char *)i + 1)
        {
          if (*(void *)v25 != v5) {
            objc_enumerationMutation(v3);
          }
          if ([*(id *)(*((void *)&v24 + 1) + 8 * i) denyMulticast])
          {

            default_evaluator = (void *)nw_path_create_default_evaluator();
            id v9 = (void *)nw_path_evaluator_copy_path();

            nw_path_enumerate_resolver_configs();
            goto LABEL_12;
          }
        }
        id v4 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

LABEL_12:
    id v10 = (id)v19[5];
    id v11 = objc_getProperty((id)v2, v7, 496, 1);
    if (v10 == v11)
    {
    }
    else
    {
      SEL v13 = v11;
      SEL v14 = (void *)v19[5];
      id v15 = objc_getProperty((id)v2, v12, 496, 1);
      LOBYTE(v14) = [v14 isEqual:v15];

      if ((v14 & 1) == 0)
      {
        objc_setProperty_atomic((id)v2, v16, (id)v19[5], 496);
        uint64_t v2 = 1;
LABEL_17:
        _Block_object_dispose(&v18, 8);

        return v2;
      }
    }
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  return v2;
}

void sub_100092048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100092074(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (!nw_resolver_config_get_protocol()) {
    nw_resolver_config_enumerate_name_servers();
  }

  return 1;
}

uint64_t sub_10009210C(uint64_t a1, uint64_t a2)
{
  SEL v3 = +[NSString stringWithUTF8String:a2];
  id v4 = +[NWAddressEndpoint endpointWithHostname:v3 port:@"0"];

  id v5 = [v4 copyCEndpoint];
  evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();

  __int16 v7 = (void *)nw_path_evaluator_copy_path();
  int is_direct = nw_path_is_direct();

  if (is_direct)
  {
    id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v9)
    {
      id v10 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;

      id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    [v9 addObject:v4];
  }

  return 1;
}

Class sub_100092204()
{
  if (qword_1000D7C90 != -1) {
    dispatch_once(&qword_1000D7C90, &stru_1000C6B28);
  }
  Class result = objc_getClass("NWNetworkOfInterestManager");
  qword_1000D7C80 = (uint64_t)result;
  off_1000D7920 = (uint64_t (*)())sub_100092268;
  return result;
}

id sub_100092268()
{
  return (id)qword_1000D7C80;
}

void sub_100092274(id a1)
{
  qword_1000D7C88 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
  if (!qword_1000D7C88) {
    NSLog(&CFSTR("### Failed to Soft Link: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationF"
  }
                 "eed.framework/SymptomPresentationFeed").isa);
}

void sub_1000922B0(uint64_t a1)
{
}

uint64_t sub_1000922B8(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    char v3 = (char)a2;
    if (objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreRouteRules"))
    {
      uint64_t v2 = 0;
    }
    else
    {
      if (v3) {
        unsigned int v5 = 0;
      }
      else {
        unsigned int v5 = (sub_10008F404(v2, v4) >> 1) & 1;
      }
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      SEL v6 = [objc_getProperty((id)v2, v4, 368, 1) pathRules];
      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v20 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v15;
        while (2)
        {
          id v10 = 0;
          do
          {
            if (*(void *)v15 != v9) {
              objc_enumerationMutation(v6);
            }
            if (![*(id *)(*((void *)&v14 + 1) + 8 * (void)v10) cellularBehavior])
            {

              uint64_t v2 = 1;
              goto LABEL_17;
            }
            id v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          id v8 = [v6 countByEnumeratingWithState:&v14 objects:v20 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }

      uint64_t v2 = v5 != 0;
    }
LABEL_17:
    uint64_t v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      SEL v13 = "No";
      if (v2) {
        SEL v13 = "Yes";
      }
      *(_DWORD *)long long buf = 136315138;
      id v19 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Path Controller needs roaming monitor: %s", buf, 0xCu);
    }
  }
  return v2;
}

void sub_1000928D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) configuration];
  char v3 = [v2 pathController];
  if ([v3 hasNonDefaultRules])
  {
  }
  else
  {
    char v4 = ne_session_fallback_advisory();

    if ((v4 & 1) == 0) {
      return;
    }
  }
  unsigned int v5 = ne_log_obj();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Handling installed apps change, restarting", (uint8_t *)&v11, 0xCu);
  }

  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  uint64_t v9 = v8;
  if (v8)
  {
    xpc_dictionary_set_BOOL(v8, "stop-current-session", 1);
  }
  else
  {
    id v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v11) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "xpc_dictionary_create failed", (uint8_t *)&v11, 2u);
    }
  }
  xpc_dictionary_set_value(v7, "SessionOptions", v9);
  [*(id *)(a1 + 32) startWithCommand:v7 isOnDemand:0];
}

void sub_100092B04(uint64_t a1, const char *a2)
{
  if (sub_100091DE4(*(id *)(a1 + 32), a2))
  {
    char v3 = *(void **)(a1 + 32);
    sub_10008E3E8(v3, 1, 0);
  }
}

void sub_100092C10(uint64_t a1)
{
  uint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v3;
    __int16 v9 = 2080;
    uint64_t v10 = inputNotification2String();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Handling %s notification, starting", (uint8_t *)&v7, 0x16u);
  }

  char v4 = [*(id *)(a1 + 32) configuration];
  unsigned int v5 = [v4 pathController];
  if ([v5 hasNonDefaultRules])
  {
  }
  else
  {
    char v6 = ne_session_fallback_advisory();

    if ((v6 & 1) == 0) {
      return;
    }
  }
  [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
}

uint64_t sub_100092E28(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    uint64_t v2 = (objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreFallback") & 1) == 0
      && (sub_10008F404(v2, v3) & 2) != 0;
    char v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      char v6 = "No";
      if (v2) {
        char v6 = "Yes";
      }
      int v7 = 136315138;
      uint64_t v8 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Path Controller needs fallback notifications: %s", (uint8_t *)&v7, 0xCu);
    }
  }
  return v2;
}

void sub_100092F24(void *a1, const char *a2)
{
  if (!a1) {
    return;
  }
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  uint64_t v3 = [objc_getProperty(a1, a2, 368, 1) pathRules];
  id v4 = [v3 countByEnumeratingWithState:&v74 objects:v83 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    uint64_t v7 = *(void *)v75;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v75 != v7) {
          objc_enumerationMutation(v3);
        }
        __int16 v9 = *(void **)(*((void *)&v74 + 1) + 8 * i);
        if (([v9 multicastPreferenceSet] & 1) == 0)
        {
          uint64_t v10 = [v9 temporaryAllowMulticastNetworkName];

          if (v10)
          {
            if (!v6) {
              id v6 = objc_alloc_init((Class)NSMutableArray);
            }
            int v11 = [v9 temporaryAllowMulticastNetworkName];
            unsigned __int8 v12 = [v6 containsObject:v11];

            if ((v12 & 1) == 0)
            {
              SEL v13 = [v9 temporaryAllowMulticastNetworkName];
              [v6 addObject:v13];
            }
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v74 objects:v83 count:16];
    }
    while (v5);
  }
  else
  {
    id v6 = 0;
  }

  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v15 = objc_getProperty(a1, v14, 400, 1);
  id v16 = [v15 countByEnumeratingWithState:&v70 objects:v82 count:16];
  if (!v16)
  {
    id v19 = 0;
    goto LABEL_34;
  }
  id v18 = v16;
  id v19 = 0;
  uint64_t v20 = *(void *)v71;
  do
  {
    for (j = 0; j != v18; j = (char *)j + 1)
    {
      if (*(void *)v71 != v20) {
        objc_enumerationMutation(v15);
      }
      id v22 = *(void **)(*((void *)&v70 + 1) + 8 * (void)j);
      if (v22)
      {
        if (objc_msgSend(v6, "containsObject:", objc_getProperty(*(id *)(*((void *)&v70 + 1) + 8 * (void)j), v17, 24, 1)))
        {
          id Property = objc_getProperty(v22, v23, 24, 1);
LABEL_25:
          [v6 removeObject:Property];
          continue;
        }
      }
      else
      {
        unsigned __int8 v25 = [v6 containsObject:0];
        id Property = 0;
        if (v25) {
          goto LABEL_25;
        }
      }
      sub_10008DD94((id *)v22, v23);
      if (!v19) {
        id v19 = objc_alloc_init((Class)NSMutableArray);
      }
      [v19 addObject:v22];
    }
    id v18 = [v15 countByEnumeratingWithState:&v70 objects:v82 count:16];
  }
  while (v18);
LABEL_34:

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id obj = v19;
  id v26 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
  uint64_t v28 = &selRef_setLastPrimaryInterface_;
  if (v26)
  {
    id v29 = v26;
    uint64_t v30 = *(void *)v67;
    do
    {
      for (k = 0; k != v29; k = (char *)k + 1)
      {
        if (*(void *)v67 != v30) {
          objc_enumerationMutation(obj);
        }
        [objc_getProperty(a1, v27, 400, 1) removeObject:*((void *)&v66 + 1) + 8 * k];
      }
      id v29 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
    }
    while (v29);
  }

  if ([v6 count])
  {
    if (!objc_getProperty(a1, v32, 400, 1))
    {
      id v33 = objc_alloc_init((Class)NSMutableArray);
      objc_setProperty_atomic(a1, v34, v33, 400);
    }
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id v58 = v6;
    id v61 = [v58 countByEnumeratingWithState:&v62 objects:v80 count:16];
    if (v61)
    {
      uint64_t v60 = *(void *)v63;
      do
      {
        long long v35 = 0;
        do
        {
          if (*(void *)v63 != v60) {
            objc_enumerationMutation(v58);
          }
          long long v36 = *(void **)(*((void *)&v62 + 1) + 8 * (void)v35);
          id v37 = [NESMPathControllerSSIDWatcher alloc];
          id v38 = v36;
          id v39 = a1;
          if (v37 && v38)
          {
            v79.receiver = v37;
            v79.super_class = (Class)NESMPathControllerSSIDWatcher;
            id v40 = (NESMPathControllerSSIDWatcher *)[super init];
            if (v40)
            {
              id v37 = v40;
              objc_storeStrong((id *)&v40->_ssid, v36);
              objc_storeWeak((id *)&v37->_parentSession, v39);
              BOOL v41 = objc_alloc_init((Class)NWNetworkDescription);
              *(void *)id v84 = v38;
              __int16 v42 = +[NSArray arrayWithObjects:v84 count:1];
              long long v43 = +[NSSet setWithArray:v42];
              [v41 setSsidOptions:v43];

              id v44 = objc_alloc_init((Class)NWParameters);
              [v44 setRequiredInterfaceType:1];
              id v45 = +[NWMonitor monitorWithNetworkDescription:v41 endpoint:0 parameters:v44];
              objc_setProperty_atomic(v37, v46, v45, 16);

              if (objc_getProperty(v37, v47, 16, 1))
              {
                if (!objc_getProperty(v37, v48, 32, 1))
                {
                  id v49 = ne_log_obj();
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Begin SSID monitor transaction", buf, 2u);
                  }

                  id v50 = [objc_alloc((Class)NSString) initWithFormat:@"com.apple.nesessionmanager.SSIDMonitor"];
                  [v50 UTF8String];
                  id v51 = (void *)os_transaction_create();
                  objc_setProperty_atomic(v37, v52, v51, 32);

                  uint64_t v28 = &selRef_setLastPrimaryInterface_;
                }
                v37->_hasBeenAssociated = 0;
                sub_10008E104(v39, v38, 1);
                [objc_getProperty(v37, v53, 16, 1) addObserver:v37 forKeyPath:@"status" options:5 context:0];
                __int16 v54 = v37;
              }
              else
              {
                CFStringRef v55 = ne_log_obj();
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "SSID monitor creation failed", buf, 2u);
                }

                __int16 v54 = 0;
              }
            }
            else
            {
              BOOL v41 = ne_log_obj();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)id v84 = 0;
                _os_log_fault_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "[super init] failed", v84, 2u);
              }
              id v37 = 0;
              __int16 v54 = 0;
            }
          }
          else
          {
            __int16 v54 = 0;
          }

          if (v54) {
            [objc_getProperty(v39, v56, *((int *)v28 + 733), 1) addObject:v54];
          }

          long long v35 = (char *)v35 + 1;
        }
        while (v61 != v35);
        id v57 = [v58 countByEnumeratingWithState:&v62 objects:v80 count:16];
        id v61 = v57;
      }
      while (v57);
    }
  }
}

id sub_100093964(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 355))
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v3 = v2;
    if (*(void *)(a1 + 440))
    {
      id v4 = objc_alloc((Class)NSNumber);
      id v6 = [v4 initWithUnsignedLong:[objc_getProperty((id)a1, v5, 440, 1) interfaceIndex]];
      [v3 addObject:v6];
    }
    else
    {
      [v2 addObject:&off_1000C99A8];
    }
    if (objc_getProperty((id)a1, v7, 448, 1))
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = objc_getProperty((id)a1, v8, 448, 1);
      id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v16;
        do
        {
          for (id i = 0; i != v11; id i = (char *)i + 1)
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v9);
            }
            [v3 addObject:*(void *)(*((void *)&v15 + 1) + 8 * i) (void)v15];
          }
          id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100093C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v9 = [v6 state];
      if (v9 > 3) {
        CFStringRef v10 = @"Unknown";
      }
      else {
        CFStringRef v10 = off_1000C6BC0[v9];
      }
      *(_DWORD *)long long buf = 138412802;
      uint64_t v15 = a1;
      __int16 v16 = 2112;
      CFStringRef v17 = v10;
      __int16 v18 = 2048;
      id v19 = [v5 slotID];
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ cellular data connection became %@ for slot id %ld", buf, 0x20u);
    }

    uint64_t v8 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100093E20;
    v11[3] = &unk_1000C6BA0;
    void v11[4] = a1;
    id v12 = v6;
    id v13 = v5;
    [v8 copyCellInfo:v13 completion:v11];
  }
}

void sub_100093E20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ne_log_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    __int16 v18 = [v5 legacyInfo];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v101 = v17;
    __int16 v102 = 2112;
    id v103 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ received cell info %@", buf, 0x16u);
  }
  if (v6)
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v101 = v31;
      __int16 v102 = 2112;
      id v103 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%@ failed to copy cellular info, error: %@", buf, 0x16u);
    }

    goto LABEL_100;
  }
  if ([*(id *)(a1 + 40) state] == 2)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      if (v5 && !*(void *)(v9 + 48))
      {
        long long v87 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        CFStringRef v10 = [v5 legacyInfo];
        id v11 = [v10 countByEnumeratingWithState:&v87 objects:buf count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v88;
LABEL_13:
          uint64_t v14 = 0;
          while (1)
          {
            if (*(void *)v88 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void **)(*((void *)&v87 + 1) + 8 * v14);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              break;
            }
            if (v12 == (id)++v14)
            {
              id v12 = [v10 countByEnumeratingWithState:&v87 objects:buf count:16];
              if (v12) {
                goto LABEL_13;
              }
              goto LABEL_19;
            }
          }
          __int16 v16 = [v15 objectForKeyedSubscript:kCTCellMonitorMCC];
          if (!v16 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            id v19 = 0;
LABEL_32:

            goto LABEL_33;
          }
          id v19 = [v15 objectForKeyedSubscript:kCTCellMonitorMNC];
          if (!v19) {
            goto LABEL_32;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_32;
          }
          uint64_t v20 = [v15 objectForKeyedSubscript:kCTCellMonitorBandInfo];
          if (v20)
          {
            id v21 = v20;
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id obj = v21;
              unsigned int v75 = [v21 isEqualToNumber:&off_1000C99C0];
              if (v75)
              {
                uint64_t v22 = [v15 objectForKeyedSubscript:kCTCellMonitorTAC];
                if (!v22 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                {
                  long long v35 = (void *)v22;
                  long long v36 = ne_log_obj();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v92 = 138412290;
                    uint64_t v93 = v9;
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%@ failed to get TAC for CBRS network", v92, 0xCu);
                  }

LABEL_72:
                  uint64_t v20 = obj;
                  goto LABEL_73;
                }
                long long v72 = (void *)v22;
                id v23 = ne_log_obj();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v92 = 138413058;
                  uint64_t v93 = v9;
                  __int16 v94 = 2112;
                  uint64_t v95 = v16;
                  __int16 v96 = 2112;
                  id v97 = v19;
                  __int16 v98 = 2112;
                  unsigned int v99 = v72;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%@ found CBRS(Band 48) network (MCC:%@ MNC:%@ TAC:%@)", v92, 0x2Au);
                }
              }
              else
              {
                id v23 = ne_log_obj();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v92 = 138412290;
                  uint64_t v93 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%@ this is not a CBRS network", v92, 0xCu);
                }
                long long v72 = 0;
              }

              if (objc_opt_class()
                && (+[MCProfileConnection sharedConnection],
                    long long v32 = objc_claimAutoreleasedReturnValue(),
                    unsigned int v33 = [v32 isSupervised],
                    v32,
                    v33))
              {
                SEL v34 = ne_log_obj();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v92 = 138412290;
                  uint64_t v93 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ this is a supervised device", v92, 0xCu);
                }

                char v74 = 1;
              }
              else
              {
                char v74 = 0;
              }
              id v79 = [v16 integerValue];
              id v78 = [v19 integerValue];
              CFStringRef v10 = v72;
              if (v75) {
                uint64_t v73 = (uint64_t)[v72 integerValue];
              }
              else {
                uint64_t v73 = -1;
              }
              long long v86 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v83 = 0u;
              id obj = *(id *)(v9 + 32);
              id v80 = [obj countByEnumeratingWithState:&v83 objects:v91 count:16];
              if (v80)
              {
                long long v71 = v19;
                uint64_t v77 = *(void *)v84;
                while (2)
                {
                  for (id i = 0; i != v80; id i = (char *)i + 1)
                  {
                    if (*(void *)v84 != v77) {
                      objc_enumerationMutation(obj);
                    }
                    id v38 = *(void **)(*((void *)&v83 + 1) + 8 * i);
                    id v39 = [v38 mobileCountryCode:v71];
                    id v40 = [v39 integerValue];

                    BOOL v41 = [v38 mobileNetworkCode];
                    id v42 = [v41 integerValue];

                    if (v79 == v40 && v78 == v42)
                    {
                      if (v74) {
                        goto LABEL_74;
                      }
                      if (v75)
                      {
                        uint64_t v44 = [v38 trackingAreaCode];
                        if (v44)
                        {
                          id v45 = (void *)v44;
                          SEL v46 = [v38 trackingAreaCode];
                          id v47 = [v46 integerValue];

                          if ((id)v73 == v47)
                          {
LABEL_74:
                            id v48 = ne_log_obj();
                            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
                            {
                              *(_DWORD *)uint64_t v92 = 138412290;
                              uint64_t v93 = v9;
                              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "%@ found matching LTE network", v92, 0xCu);
                            }

                            id v49 = ne_log_obj();
                            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v56 = *(void *)(a1 + 32);
                              id v57 = [*(id *)(a1 + 40) interfaceName];
                              id v58 = [*(id *)(a1 + 48) slotID];
                              *(_DWORD *)long long buf = 138412802;
                              uint64_t v101 = v56;
                              __int16 v102 = 2112;
                              id v103 = v57;
                              __int16 v104 = 2048;
                              id v105 = v58;
                              _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "%@ found configured private LTE network match (interface:[%@] Slot ID:[%ld])", buf, 0x20u);
                            }
                            id v51 = [*(id *)(a1 + 40) interfaceName];
                            SEL v52 = *(void **)(a1 + 32);
                            if (v52) {
                              objc_setProperty_atomic(v52, v50, v51, 16);
                            }

                            id v53 = [*(id *)(a1 + 48) slotID];
                            uint64_t v54 = *(void *)(a1 + 32);
                            if (v54) {
                              *(void *)(v54 + 4_Block_object_dispose(&a9, 8) = v53;
                            }
                            CFStringRef v55 = ne_log_obj();
                            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                            {
                              uint64_t v59 = *(void *)(a1 + 32);
                              if (v59) {
                                uint64_t v60 = *(void **)(v59 + 48);
                              }
                              else {
                                uint64_t v60 = 0;
                              }
                              *(_DWORD *)long long buf = 138412546;
                              uint64_t v101 = v59;
                              __int16 v102 = 2048;
                              id v103 = v60;
                              _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "%@ Slot ID [%ld] is active", buf, 0x16u);
                            }

                            uint64_t v25 = 1;
                            goto LABEL_34;
                          }
                        }
                      }
                    }
                  }
                  id v80 = [obj countByEnumeratingWithState:&v83 objects:v91 count:16];
                  if (v80) {
                    continue;
                  }
                  break;
                }
                id v19 = v71;
                CFStringRef v10 = v72;
              }
              goto LABEL_72;
            }
            uint64_t v20 = v21;
          }
LABEL_73:

          goto LABEL_32;
        }
LABEL_19:
        __int16 v16 = v10;
LABEL_33:

        uint64_t v25 = 2;
LABEL_34:
        id v26 = *(void **)(a1 + 32);
        if (v26 && objc_getProperty(v26, v24, 8, 1))
        {
          id Property = *(NSObject **)(a1 + 32);
          if (Property)
          {
            id Property = objc_getProperty(Property, v27, 40, 1);
            uint64_t v29 = *(void *)(a1 + 32);
          }
          else
          {
            uint64_t v29 = 0;
          }
          v82[0] = _NSConcreteStackBlock;
          v82[1] = 3221225472;
          v82[2] = sub_100094850;
          v82[3] = &unk_1000C6B78;
          v82[4] = v29;
          v82[5] = v25;
          uint64_t v30 = v82;
LABEL_99:
          dispatch_async(Property, v30);
          goto LABEL_100;
        }
        goto LABEL_100;
      }
    }
    else if (v5)
    {
      goto LABEL_100;
    }
  }
  if (![*(id *)(a1 + 40) state])
  {
    uint64_t v61 = *(void *)(a1 + 32);
    id v62 = v61 ? *(id *)(v61 + 48) : 0;
    if (v62 == [*(id *)(a1 + 48) slotID])
    {
      long long v63 = ne_log_obj();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v69 = *(void *)(a1 + 32);
        if (v69) {
          long long v70 = *(void **)(v69 + 48);
        }
        else {
          long long v70 = 0;
        }
        *(_DWORD *)long long buf = 138412546;
        uint64_t v101 = v69;
        __int16 v102 = 2048;
        id v103 = v70;
        _os_log_debug_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "%@ Slot ID [%ld] is inactive", buf, 0x16u);
      }

      uint64_t v65 = *(void *)(a1 + 32);
      if (v65)
      {
        *(void *)(v65 + 4_Block_object_dispose(&a9, 8) = 0;
        long long v66 = *(void **)(a1 + 32);
        if (v66)
        {
          if (objc_getProperty(v66, v64, 8, 1))
          {
            id Property = *(NSObject **)(a1 + 32);
            if (Property)
            {
              id Property = objc_getProperty(Property, v67, 40, 1);
              uint64_t v68 = *(void *)(a1 + 32);
            }
            else
            {
              uint64_t v68 = 0;
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100094898;
            block[3] = &unk_1000C6C60;
            void block[4] = v68;
            uint64_t v30 = block;
            goto LABEL_99;
          }
        }
      }
    }
  }
LABEL_100:
}

id sub_100094850(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8, 1);
  }
  uint64_t v4 = *(void *)(a1 + 40);

  return [Property didReceiveStatusChangeWithInterface:v4];
}

id sub_100094898(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8, 1);
  }

  return [Property didReceiveStatusChangeWithInterface:2];
}

uint64_t sub_1000948D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000948E4(uint64_t a1)
{
}

void sub_1000948EC(uint64_t *a1)
{
}

void sub_100095344(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 52) || sub_10007C09C(*(void **)(a1 + 32)))
  {
    id v2 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100095404;
    block[3] = &unk_1000C6E00;
    uint64_t v3 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v5 = v3;
    int v6 = *(_DWORD *)(a1 + 48);
    dispatch_sync(v2, block);
  }
}

void sub_100095404(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [NESMSessionClient alloc];
  if (v4
    && (uint64_t v5 = *(unsigned int *)(a1 + 48),
        v14.receiver = v4,
        v14.super_class = (Class)NESMSessionClient,
        (int v6 = objc_msgSendSuper2(&v14, "init")) != 0))
  {
    id v12 = v6;
    if (proc_name(v5, buffer, 0x100u) < 1) {
      +[NSString stringWithFormat:@"<unknown-name>[%d]", v5, v11];
    }
    else {
    uint64_t v8 = +[NSString stringWithFormat:@"%s[%d]", buffer, v5];
    }
    uint64_t v9 = (void *)v12[1];
    v12[1] = v8;

    CFStringRef v10 = (void *)v12[2];
    v12[2] = 0;

    id v7 = v12;
  }
  else
  {
    id v7 = 0;
  }
  id v13 = v7;
  [v2 handleCommand:v3 fromClient:v7];
}

void sub_100095710(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0x1F:
      id v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v3;
        uint64_t v4 = "%@: configuration is now disabled, stopping";
        goto LABEL_12;
      }
      break;
    case 0x20:
      id v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v5;
        uint64_t v4 = "%@: configuration has been removed, stopping";
        goto LABEL_12;
      }
      break;
    case 0x21:
      id v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v6;
        uint64_t v4 = "%@ has been superceded, stopping";
        goto LABEL_12;
      }
      break;
    case 0x25:
      id v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v12;
        uint64_t v4 = "%@: configuration has changed, stopping";
LABEL_12:
        CFStringRef v10 = v2;
        uint32_t v11 = 12;
        goto LABEL_13;
      }
      break;
    default:
      id v2 = ne_log_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = ne_session_stop_reason_to_string();
        uint64_t v9 = *(int *)(a1 + 40);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v18 = v7;
        __int16 v19 = 2080;
        uint64_t v20 = v8;
        __int16 v21 = 2048;
        uint64_t v22 = v9;
        uint64_t v4 = "%@: %s (%lld), stopping";
        CFStringRef v10 = v2;
        uint32_t v11 = 32;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v4, buf, v11);
      }
      break;
  }

  if ([*(id *)(a1 + 32) status] == 1
    || ![*(id *)(a1 + 32) status])
  {
    id v13 = sub_100052AE8();
    objc_super v14 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000959E0;
    v15[3] = &unk_1000C6DD8;
    void v15[4] = v14;
    int v16 = *(_DWORD *)(a1 + 40);
    sub_100056C0C((uint64_t)v13, v14, v15);
  }
  else
  {
    [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
  }
}

id sub_1000959E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

id sub_100095A7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstall];
}

id sub_100095B10(uint64_t a1)
{
  return [*(id *)(a1 + 32) installPended];
}

uint64_t sub_100095BD0(uint64_t a1)
{
  [*(id *)(a1 + 32) install];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100095FFC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if ([*(id *)(a1 + 40) type] == 1)
    {
      id v2 = [*(id *)(a1 + 32) VPN];

      if (v2)
      {
        uint64_t v3 = [*(id *)(a1 + 40) configuration];
        uint64_t v4 = [v3 VPN];
        uint64_t v5 = [v4 protocol];
        id v6 = [v5 type];
        uint64_t v7 = [*(id *)(a1 + 32) VPN];
        uint64_t v8 = [v7 protocol];
        id v9 = [v8 type];

        if (v6 == v9)
        {
          CFStringRef v10 = [*(id *)(a1 + 40) configuration];
          uint32_t v11 = [v10 VPN];
          uint64_t v12 = [v11 protocol];
          if ([v12 type] == (id)5)
          {
            id v13 = [*(id *)(a1 + 40) configuration];
            objc_super v14 = [v13 VPN];
            uint64_t v15 = [v14 protocol];
            unsigned int v51 = [v15 enableFallback];
            int v16 = [*(id *)(a1 + 32) VPN];
            uint64_t v17 = [v16 protocol];
            unsigned int v18 = [v17 enableFallback];

            if (v51 != v18)
            {
              uint64_t v19 = 32;
              int v20 = 1;
              int v21 = 1;
              goto LABEL_32;
            }
          }
          else
          {
          }
          goto LABEL_28;
        }
      }
    }
    else if ([*(id *)(a1 + 40) type] == 2)
    {
      uint64_t v22 = [*(id *)(a1 + 32) appVPN];

      if (v22)
      {
        id v23 = [*(id *)(a1 + 40) configuration];
        long long v24 = [v23 appVPN];
        uint64_t v25 = [v24 protocol];
        id v26 = [v25 type];
        long long v27 = [*(id *)(a1 + 32) appVPN];
        uint64_t v28 = [v27 protocol];
        id v29 = [v28 type];

        if (v26 == v29) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      if ([*(id *)(a1 + 40) type] == 3)
      {
        uint64_t v30 = [*(id *)(a1 + 32) alwaysOnVPN];
      }
      else if ([*(id *)(a1 + 40) type] == 4)
      {
        uint64_t v30 = [*(id *)(a1 + 32) contentFilter];
      }
      else if ([*(id *)(a1 + 40) type] == 5)
      {
        uint64_t v30 = [*(id *)(a1 + 32) pathController];
      }
      else if ([*(id *)(a1 + 40) type] == 6)
      {
        uint64_t v30 = [*(id *)(a1 + 32) dnsProxy];
      }
      else if ([*(id *)(a1 + 40) type] == 7)
      {
        uint64_t v30 = [*(id *)(a1 + 32) dnsSettings];
      }
      else if ([*(id *)(a1 + 40) type] == 8)
      {
        uint64_t v30 = [*(id *)(a1 + 32) appPush];
      }
      else
      {
        if ([*(id *)(a1 + 40) type] != 9) {
          goto LABEL_28;
        }
        uint64_t v30 = [*(id *)(a1 + 32) relay];
      }
      uint64_t v31 = v30;

      if (v31)
      {
LABEL_28:
        long long v32 = [*(id *)(a1 + 40) configuration];
        if ([v32 isEnabled])
        {
          unsigned int v33 = [*(id *)(a1 + 32) isEnabled];

          if (!v33)
          {
            int v20 = 0;
            int v21 = 0;
            uint64_t v19 = 31;
            goto LABEL_32;
          }
        }
        else
        {
        }
        [*(id *)(a1 + 40) handleUpdateConfiguration:*(void *)(a1 + 32)];
        goto LABEL_43;
      }
    }
  }
  int v21 = 0;
  uint64_t v19 = 32;
  int v20 = 1;
LABEL_32:
  SEL v34 = [*(id *)(a1 + 40) server];
  [v34 deregisterSession:*(void *)(a1 + 40)];

  [*(id *)(a1 + 40) stopIfNecessaryWithReason:v19];
  long long v35 = *(void **)(a1 + 40);
  if (!v20)
  {
    [v35 handleUpdateConfiguration:*(void *)(a1 + 32)];
    if (!v21) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }
  long long v36 = [v35 server];
  unsigned int v37 = [*(id *)(a1 + 40) type];
  id v38 = [*(id *)(a1 + 40) configuration];
  id v40 = [v38 identifier];
  if (v36)
  {
    id Property = objc_getProperty(v36, v39, 88, 1);
    block = _NSConcreteStackBlock;
    uint64_t v56 = 3221225472;
    id v57 = sub_1000554D4;
    id v58 = &unk_1000C6E00;
    uint64_t v59 = v36;
    id v60 = v40;
    LODWORD(v61) = v37;
    dispatch_async(Property, &block);
  }
  [*(id *)(a1 + 40) handleUpdateConfiguration:0];
  sub_100081100(*(void **)(a1 + 40));
  sub_1000811F4(*(void **)(a1 + 40));
  sub_100081180(*(void **)(a1 + 40));
  if (v21)
  {
LABEL_38:
    id v42 = [*(id *)(a1 + 40) configuration];
    long long v43 = [v42 identifier];

    unsigned int v44 = [*(id *)(a1 + 40) type];
    id v45 = [*(id *)(a1 + 40) server];
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_10009661C;
    v52[3] = &unk_1000C6D60;
    id v53 = v43;
    unsigned int v54 = v44;
    id v46 = v43;
    id v48 = v52;
    if (v45)
    {
      id v49 = objc_getProperty(v45, v47, 88, 1);
      block = _NSConcreteStackBlock;
      uint64_t v56 = 3221225472;
      id v57 = sub_1000556A8;
      id v58 = &unk_1000C61A0;
      uint64_t v59 = v45;
      id v60 = v46;
      unsigned int v62 = v44;
      uint64_t v61 = v48;
      dispatch_async(v49, &block);
    }
  }
LABEL_43:
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009661C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(a1 + 40);
      int v6 = 138412546;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to add a pending session request or failed to load session for %@ (%d)", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_1000967F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000969EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100096B74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100097698(id *result)
{
  if (*((unsigned char *)result + 40)) {
    return (id *)[result[4] invalidate];
  }
  return result;
}

uint64_t sub_1000976AC(uint64_t a1)
{
  uint64_t result = PLShouldLogRegisteredEvent();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return _PLLogRegisteredEvent(145, v3, v4, 0);
  }
  return result;
}

void sub_100097704(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.networkextension.powerlog", 0);
  uint64_t v2 = qword_1000D7C98;
  qword_1000D7C98 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100097744(id a1)
{
  mach_timebase_info info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000D7CA8 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

id sub_100097A94(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:0];
}

id sub_100097AA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

id sub_100097B60(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

void sub_100097FF8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] != 2) {
    sub_100081564(*(id *)(a1 + 32), 0);
  }
  if ([*(id *)(a1 + 32) type] != 1)
  {
    int v5 = *(void **)(a1 + 32);
LABEL_9:
    unint64_t v2 = [v5 lastPrimaryInterface];
    uint64_t v3 = [*(id *)(a1 + 32) server];
    uint64_t v4 = [v3 primaryPhysicalInterface];
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || [*(id *)(a1 + 32) tunnelKind] != (id)2)
  {
    int v5 = *(void **)(a1 + 32);
    goto LABEL_9;
  }
  unint64_t v2 = [*(id *)(a1 + 32) lastPrimaryInterface];
  uint64_t v3 = [*(id *)(a1 + 32) server];
  uint64_t v4 = [v3 primaryCellularInterface];
LABEL_10:
  int v6 = v4;
  uint64_t v7 = [v4 interfaceName];
  unsigned __int8 v8 = [v2 isEqualToString:v7];

  if ((v8 & 1) == 0)
  {
    int v9 = *(void **)(a1 + 32);
    if (v9)
    {
      sub_10007C318(v9);
    }
  }
}

void sub_10009903C(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 16, 1))
  {
    xpc_object_t message = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(message, "SessionNotificationType", 1);
    id Property = (_xpc_connection_s *)objc_getProperty(a1, v3, 16, 1);
    xpc_connection_send_message(Property, message);
  }
}

BOOL sub_1000990D8(uint64_t a1, xpc_object_t xdict)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = xpc_dictionary_get_value(xdict, "SessionOptions");
  SEL v3 = v2;
  BOOL v4 = v2 && xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary && xpc_dictionary_get_BOOL(v3, "is-on-demand");

  return v4;
}

void sub_100099240(uint64_t a1, char a2)
{
  BOOL v4 = [*(id *)(a1 + 32) queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100099308;
  v6[3] = &unk_1000C6C88;
  char v9 = a2;
  int v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, v6);
}

void sub_100099308(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    kdebug_trace();
    unint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Successfully registered", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 48)];
  }
  else
  {
    BOOL v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v9 = 138412546;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Rejected start command from %@", (uint8_t *)&v9, 0x16u);
    }

    sub_10009903C(*(void **)(a1 + 40), v7);
    [*(id *)(a1 + 32) removeAllClients];
  }
  id v8 = [*(id *)(a1 + 32) messageQueue];
  dispatch_resume(v8);
}

id sub_1000994F8(uint64_t a1)
{
  unint64_t v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Removing all clients", buf, 0xCu);
  }

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v4, 48, 1);
  }
  id v6 = Property;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        sub_100099664(*(void *)(*((void *)&v14 + 1) + 8 * (void)v10));
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  id v12 = *(id *)(a1 + 32);
  if (v12) {
    id v12 = objc_getProperty(v12, v11, 48, 1);
  }
  return [v12 removeAllObjects];
}

void sub_100099664(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = *(_xpc_connection_s **)(a1 + 16);
    if (v2)
    {
      xpc_connection_cancel(v2);
      unint64_t v2 = *(_xpc_connection_s **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void sub_100099764(uint64_t a1)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  uint64_t v22 = sub_100099A94;
  id v23 = sub_100099AA4;
  unint64_t v2 = [NESMSessionClient alloc];
  uint64_t v3 = *(void **)(a1 + 32);
  BOOL v4 = v3;
  if (v2)
  {
    v25.receiver = v2;
    v25.super_class = (Class)NESMSessionClient;
    unint64_t v2 = (NESMSessionClient *)[super init];
    if (v2)
    {
      uint64_t pid = xpc_connection_get_pid(v4);
      context = (const char *)xpc_connection_get_context(v4);
      if (proc_name(pid, &buffer, 0x100u) < 1) {
        +[NSString stringWithFormat:@"<unknown-name>[%d]", pid];
      }
      else {
      uint64_t v7 = +[NSString stringWithFormat:@"%s[%d]", &buffer, pid];
      }
      descriptioid n = v2->_description;
      v2->_descriptioid n = (NSString *)v7;

      objc_storeStrong((id *)&v2->_connection, v3);
      v2->_permissions = 0;
      if (context && !strcmp(context, "com.apple.nesessionmanager.flow-divert-token")) {
        v2->_permissions = 1;
      }
      uint64_t v9 = (void *)xpc_connection_copy_entitlement_value();
      uint64_t v10 = v9;
      if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v10)) {
        v2->_permissions |= 2uLL;
      }
    }
  }

  long long v24 = v2;
  __int16 v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = v20[5];
    int buffer = 138412546;
    uint64_t v27 = v12;
    __int16 v28 = 2112;
    uint64_t v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@: Adding a connection for client %@", (uint8_t *)&buffer, 0x16u);
  }

  kdebug_trace();
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100099AAC;
  handler[3] = &unk_1000C6C10;
  long long v14 = *(_xpc_connection_s **)(a1 + 32);
  void handler[4] = *(void *)(a1 + 40);
  handler[5] = &v19;
  xpc_connection_set_event_handler(v14, handler);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v15, 48, 1);
  }
  id v17 = Property;
  [v17 addObject:v20[5]];

  xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
  _Block_object_dispose(&v19, 8);
}

void sub_100099A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100099A94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100099AA4(uint64_t a1)
{
}

void sub_100099AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace();
  BOOL v4 = [*(id *)(a1 + 32) messageQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100099B84;
  block[3] = &unk_1000C6BE8;
  uint64_t v5 = *(void *)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_100099B84(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100099C30;
  block[3] = &unk_1000C6BE8;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  uint64_t v8 = *(void *)(a1 + 48);
  dispatch_sync(v2, block);
}

void sub_100099C30(void *a1)
{
  unint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  if (xpc_get_type(v2) != (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v3 = a1[4];
LABEL_5:
    uint64_t v4 = (void *)a1[5];
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8) + 40);
    [v4 handleCommand:v3 fromClient:v5];
    return;
  }
  id v6 = ne_log_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v13 = 138412546;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Removing a connection for client %@", (uint8_t *)&v13, 0x16u);
  }

  kdebug_trace();
  sub_100099664(*(void *)(*(void *)(a1[6] + 8) + 40));
  id Property = (id)a1[5];
  if (Property) {
    id Property = objc_getProperty(Property, v9, 48, 1);
  }
  [Property removeObject:*(void *)(*(void *)(a1[6] + 8) + 40)];
  uint64_t v11 = *(void *)(a1[6] + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

void *__cdecl CFBundleGetDataPointerForName(CFBundleRef bundle, CFStringRef symbolName)
{
  return _CFBundleGetDataPointerForName(bundle, symbolName);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return _CFStringCreateWithFormatAndArguments(alloc, formatOptions, format, arguments);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return _CFStringGetMaximumSizeForEncoding(length, encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return _CFURLCreateFromFileSystemRepresentation(allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return _CFURLCreateWithBytes(allocator, URLBytes, length, encoding, baseURL);
}

uint64_t CNPluginMonitorEventCopyDisplayIDs()
{
  return _CNPluginMonitorEventCopyDisplayIDs();
}

uint64_t CNPluginMonitorStart()
{
  return _CNPluginMonitorStart();
}

uint64_t CNPluginMonitorStop()
{
  return _CNPluginMonitorStop();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

IOReturn IOCancelPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOCancelPowerChange(kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

uint64_t IOEthernetControllerCreate()
{
  return _IOEthernetControllerCreate();
}

uint64_t IOEthernetControllerGetBSDSocket()
{
  return _IOEthernetControllerGetBSDSocket();
}

uint64_t IOEthernetControllerGetIONetworkInterfaceObject()
{
  return _IOEthernetControllerGetIONetworkInterfaceObject();
}

uint64_t IOEthernetControllerRegisterBSDAttachCallback()
{
  return _IOEthernetControllerRegisterBSDAttachCallback();
}

uint64_t IOEthernetControllerSetDispatchQueue()
{
  return _IOEthernetControllerSetDispatchQueue();
}

uint64_t IOEthernetControllerSetLinkStatus()
{
  return _IOEthernetControllerSetLinkStatus();
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

uint64_t NECopyInterfaceAddress()
{
  return _NECopyInterfaceAddress();
}

uint64_t NECopySigningIdentifierForPID()
{
  return _NECopySigningIdentifierForPID();
}

uint64_t NECreateAddressString()
{
  return _NECreateAddressString();
}

uint64_t NECreateIPv6AddressMaskStringFromPrefix()
{
  return _NECreateIPv6AddressMaskStringFromPrefix();
}

uint64_t NECreateTimerSource()
{
  return _NECreateTimerSource();
}

uint64_t NEGetAddressFamilyFromString()
{
  return _NEGetAddressFamilyFromString();
}

uint64_t NEGetBundleIdentifierFromAppID()
{
  return _NEGetBundleIdentifierFromAppID();
}

uint64_t NEGetConsoleUserUID()
{
  return _NEGetConsoleUserUID();
}

uint64_t NEGetEntitlement()
{
  return _NEGetEntitlement();
}

uint64_t NEGetIntFromDictionary()
{
  return _NEGetIntFromDictionary();
}

uint64_t NEGetInterfaceType()
{
  return _NEGetInterfaceType();
}

uint64_t NEGetPrefixForIPv4NetmaskString()
{
  return _NEGetPrefixForIPv4NetmaskString();
}

uint64_t NEHelperCacheAddRedirectedAddress()
{
  return _NEHelperCacheAddRedirectedAddress();
}

uint64_t NEHelperCacheClearRedirectedAddresses()
{
  return _NEHelperCacheClearRedirectedAddresses();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return _NEHelperCacheCopyAppUUIDMapping();
}

uint64_t NEHelperCacheCopyAppUUIDMappingForUIDExtended()
{
  return _NEHelperCacheCopyAppUUIDMappingForUIDExtended();
}

uint64_t NEHelperCachePopulateUUIDsForConfiguration()
{
  return _NEHelperCachePopulateUUIDsForConfiguration();
}

uint64_t NEHelperCacheSetDomainDictionaries()
{
  return _NEHelperCacheSetDomainDictionaries();
}

uint64_t NEHelperCacheSetMatchDomains()
{
  return _NEHelperCacheSetMatchDomains();
}

uint64_t NEHelperCacheSetRoutes()
{
  return _NEHelperCacheSetRoutes();
}

uint64_t NEHelperGetKernelControlSocket()
{
  return _NEHelperGetKernelControlSocket();
}

uint64_t NEHelperInterfaceSetOption()
{
  return _NEHelperInterfaceSetOption();
}

uint64_t NEInitCFTypes()
{
  return _NEInitCFTypes();
}

uint64_t NEIsValidCFType()
{
  return _NEIsValidCFType();
}

uint64_t NEIsWildcardAddress()
{
  return _NEIsWildcardAddress();
}

uint64_t NEPolicyPersistDropAllFeature()
{
  return _NEPolicyPersistDropAllFeature();
}

uint64_t NEPolicySetDropPriorityLevel()
{
  return _NEPolicySetDropPriorityLevel();
}

uint64_t NEResourcesCopyContentFilterDefaultDropExclusionList()
{
  return _NEResourcesCopyContentFilterDefaultDropExclusionList();
}

uint64_t NEResourcesCopyContentFilterExclusionList()
{
  return _NEResourcesCopyContentFilterExclusionList();
}

uint64_t NEVirtualInterfaceAddAddress()
{
  return _NEVirtualInterfaceAddAddress();
}

uint64_t NEVirtualInterfaceAddIPv4Route()
{
  return _NEVirtualInterfaceAddIPv4Route();
}

uint64_t NEVirtualInterfaceAddIPv6Route()
{
  return _NEVirtualInterfaceAddIPv6Route();
}

uint64_t NEVirtualInterfaceCopyDNSDomain()
{
  return _NEVirtualInterfaceCopyDNSDomain();
}

uint64_t NEVirtualInterfaceCopyDNSSearchDomains()
{
  return _NEVirtualInterfaceCopyDNSSearchDomains();
}

uint64_t NEVirtualInterfaceCopyDNSServers()
{
  return _NEVirtualInterfaceCopyDNSServers();
}

uint64_t NEVirtualInterfaceCopyDNSSupplementalMatchDomains()
{
  return _NEVirtualInterfaceCopyDNSSupplementalMatchDomains();
}

uint64_t NEVirtualInterfaceCopyDelegateInterfaceName()
{
  return _NEVirtualInterfaceCopyDelegateInterfaceName();
}

uint64_t NEVirtualInterfaceCopyIPStateDictionary()
{
  return _NEVirtualInterfaceCopyIPStateDictionary();
}

uint64_t NEVirtualInterfaceCopyIPv4Routes()
{
  return _NEVirtualInterfaceCopyIPv4Routes();
}

uint64_t NEVirtualInterfaceCopyIPv6Routes()
{
  return _NEVirtualInterfaceCopyIPv6Routes();
}

uint64_t NEVirtualInterfaceCopyName()
{
  return _NEVirtualInterfaceCopyName();
}

uint64_t NEVirtualInterfaceCopyRoutes()
{
  return _NEVirtualInterfaceCopyRoutes();
}

uint64_t NEVirtualInterfaceCopyStatistics()
{
  return _NEVirtualInterfaceCopyStatistics();
}

uint64_t NEVirtualInterfaceCopyVPNServerAddress()
{
  return _NEVirtualInterfaceCopyVPNServerAddress();
}

uint64_t NEVirtualInterfaceCreateNexusExtended()
{
  return _NEVirtualInterfaceCreateNexusExtended();
}

uint64_t NEVirtualInterfaceCreateUserEthernet()
{
  return _NEVirtualInterfaceCreateUserEthernet();
}

uint64_t NEVirtualInterfaceEnableFlowswitch()
{
  return _NEVirtualInterfaceEnableFlowswitch();
}

uint64_t NEVirtualInterfaceGetDelegateInterfaceFunctionalType()
{
  return _NEVirtualInterfaceGetDelegateInterfaceFunctionalType();
}

uint64_t NEVirtualInterfaceGetType()
{
  return _NEVirtualInterfaceGetType();
}

uint64_t NEVirtualInterfaceInvalidate()
{
  return _NEVirtualInterfaceInvalidate();
}

uint64_t NEVirtualInterfaceIsPrimary()
{
  return _NEVirtualInterfaceIsPrimary();
}

uint64_t NEVirtualInterfaceIsVPN()
{
  return _NEVirtualInterfaceIsVPN();
}

uint64_t NEVirtualInterfaceNameIsVPN()
{
  return _NEVirtualInterfaceNameIsVPN();
}

uint64_t NEVirtualInterfaceRemoveAllAddresses()
{
  return _NEVirtualInterfaceRemoveAllAddresses();
}

uint64_t NEVirtualInterfaceRemoveAllRoutes()
{
  return _NEVirtualInterfaceRemoveAllRoutes();
}

uint64_t NEVirtualInterfaceSetAsPrimary()
{
  return _NEVirtualInterfaceSetAsPrimary();
}

uint64_t NEVirtualInterfaceSetDNSDomain()
{
  return _NEVirtualInterfaceSetDNSDomain();
}

uint64_t NEVirtualInterfaceSetDNSSearchDomains()
{
  return _NEVirtualInterfaceSetDNSSearchDomains();
}

uint64_t NEVirtualInterfaceSetDNSServers()
{
  return _NEVirtualInterfaceSetDNSServers();
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomains()
{
  return _NEVirtualInterfaceSetDNSSupplementalMatchDomains();
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch()
{
  return _NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch();
}

uint64_t NEVirtualInterfaceSetDelegateInterface()
{
  return _NEVirtualInterfaceSetDelegateInterface();
}

uint64_t NEVirtualInterfaceSetIPv4ConfigurationMethod()
{
  return _NEVirtualInterfaceSetIPv4ConfigurationMethod();
}

uint64_t NEVirtualInterfaceSetIPv4Router()
{
  return _NEVirtualInterfaceSetIPv4Router();
}

uint64_t NEVirtualInterfaceSetIPv6ConfigurationMethod()
{
  return _NEVirtualInterfaceSetIPv6ConfigurationMethod();
}

uint64_t NEVirtualInterfaceSetIPv6Router()
{
  return _NEVirtualInterfaceSetIPv6Router();
}

uint64_t NEVirtualInterfaceSetMTU()
{
  return _NEVirtualInterfaceSetMTU();
}

uint64_t NEVirtualInterfaceSetMTUOverhead()
{
  return _NEVirtualInterfaceSetMTUOverhead();
}

uint64_t NEVirtualInterfaceSetMaxPendingPackets()
{
  return _NEVirtualInterfaceSetMaxPendingPackets();
}

uint64_t NEVirtualInterfaceSetProxies()
{
  return _NEVirtualInterfaceSetProxies();
}

uint64_t NEVirtualInterfaceSetRankLast()
{
  return _NEVirtualInterfaceSetRankLast();
}

uint64_t NEVirtualInterfaceSetRankNever()
{
  return _NEVirtualInterfaceSetRankNever();
}

uint64_t NEVirtualInterfaceSetServiceID()
{
  return _NEVirtualInterfaceSetServiceID();
}

uint64_t NEVirtualInterfaceSetServiceIndex()
{
  return _NEVirtualInterfaceSetServiceIndex();
}

uint64_t NEVirtualInterfaceSetVPNServerAddress()
{
  return _NEVirtualInterfaceSetVPNServerAddress();
}

uint64_t NEVirtualInterfaceUpdateAdHocServiceReturnChanges()
{
  return _NEVirtualInterfaceUpdateAdHocServiceReturnChanges();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return _NSStringFromProtocol(proto);
}

uint64_t PLShouldLogRegisteredEvent()
{
  return _PLShouldLogRegisteredEvent();
}

CFArrayRef SCDynamicStoreCopyKeyList(SCDynamicStoreRef store, CFStringRef pattern)
{
  return _SCDynamicStoreCopyKeyList(store, pattern);
}

uint64_t SCDynamicStoreCopyProxiesWithOptions()
{
  return _SCDynamicStoreCopyProxiesWithOptions();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

SCDynamicStoreRef SCDynamicStoreCreateWithOptions(CFAllocatorRef allocator, CFStringRef name, CFDictionaryRef storeOptions, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreateWithOptions(allocator, name, storeOptions, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkServiceEntity(allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return _SCDynamicStoreSetMultiple(store, keysToSet, keysToRemove, keysToNotify);
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  return _SCDynamicStoreSetValue(store, key, value);
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

uint64_t SCNetworkProxiesCopyMatching()
{
  return _SCNetworkProxiesCopyMatching();
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

uint64_t WiFiManagerClientCreate()
{
  return _WiFiManagerClientCreate();
}

uint64_t WiFiManagerClientRegisterWowStateChangedCallback()
{
  return _WiFiManagerClientRegisterWowStateChangedCallback();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return _WiFiManagerClientScheduleWithRunLoop();
}

uint64_t WiFiManagerClientSetWoWState()
{
  return _WiFiManagerClientSetWoWState();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return _WiFiManagerClientUnscheduleFromRunLoop();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

int close(int a1)
{
  return _close(a1);
}

double difftime(time_t a1, time_t a2)
{
  return _difftime(a1, a2);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

uint64_t dns_configuration_copy()
{
  return _dns_configuration_copy();
}

uint64_t dns_configuration_free()
{
  return _dns_configuration_free();
}

int dup(int a1)
{
  return _dup(a1);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

uint64_t inputNotification2String()
{
  return _inputNotification2String();
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

uint64_t isa_nsarray()
{
  return _isa_nsarray();
}

uint64_t isa_nsdata()
{
  return _isa_nsdata();
}

uint64_t isa_nsdictionary()
{
  return _isa_nsdictionary();
}

uint64_t isa_nsnumber()
{
  return _isa_nsnumber();
}

uint64_t isa_nsstring()
{
  return _isa_nsstring();
}

uint64_t isa_nsurl()
{
  return _isa_nsurl();
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

char *__cdecl link_ntoa(const sockaddr_dl *a1)
{
  return _link_ntoa(a1);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

uint64_t myCFEqual()
{
  return _myCFEqual();
}

uint64_t myCFRelease()
{
  return _myCFRelease();
}

uint64_t myCFRetain()
{
  return _myCFRetain();
}

uint64_t ne_copy_cached_uuids_for_bundle_identifier()
{
  return _ne_copy_cached_uuids_for_bundle_identifier();
}

uint64_t ne_log_large_obj()
{
  return _ne_log_large_obj();
}

uint64_t ne_log_obj()
{
  return _ne_log_obj();
}

uint64_t ne_session_disable_restrictions()
{
  return _ne_session_disable_restrictions();
}

uint64_t ne_session_fallback_advisory()
{
  return _ne_session_fallback_advisory();
}

uint64_t ne_session_fallback_default()
{
  return _ne_session_fallback_default();
}

uint64_t ne_session_info_type_to_string()
{
  return _ne_session_info_type_to_string();
}

uint64_t ne_session_policy_copy_flow_divert_token_with_key()
{
  return _ne_session_policy_copy_flow_divert_token_with_key();
}

uint64_t ne_session_service_copy_cached_match_domains()
{
  return _ne_session_service_copy_cached_match_domains();
}

uint64_t ne_session_status_to_string()
{
  return _ne_session_status_to_string();
}

uint64_t ne_session_stop_reason_to_string()
{
  return _ne_session_stop_reason_to_string();
}

uint64_t ne_session_type_to_string()
{
  return _ne_session_type_to_string();
}

uint64_t ne_session_vod_evaluate_connection_present()
{
  return _ne_session_vod_evaluate_connection_present();
}

uint64_t ne_tracker_validate_domain()
{
  return _ne_tracker_validate_domain();
}

uint64_t ne_trie_has_high_ascii()
{
  return _ne_trie_has_high_ascii();
}

uint64_t ne_trie_init()
{
  return _ne_trie_init();
}

uint64_t ne_trie_insert()
{
  return _ne_trie_insert();
}

uint64_t ne_trie_search()
{
  return _ne_trie_search();
}

uint64_t nelog_is_debug_logging_enabled()
{
  return _nelog_is_debug_logging_enabled();
}

uint64_t nelog_is_extra_vpn_logging_enabled()
{
  return _nelog_is_extra_vpn_logging_enabled();
}

uint64_t nelog_is_info_logging_enabled()
{
  return _nelog_is_info_logging_enabled();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

uint64_t nw_array_append()
{
  return _nw_array_append();
}

uint64_t nw_array_create()
{
  return _nw_array_create();
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
}

uint64_t nw_connection_group_create_with_parameters()
{
  return _nw_connection_group_create_with_parameters();
}

uint64_t nw_connection_group_get_port()
{
  return _nw_connection_group_get_port();
}

void nw_connection_group_reply(nw_connection_group_t group, nw_content_context_t inbound_message, nw_content_context_t outbound_message, dispatch_data_t content)
{
}

uint64_t nw_connection_group_set_connection_limit()
{
  return _nw_connection_group_set_connection_limit();
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
}

void nw_connection_group_set_receive_handler(nw_connection_group_t group, uint32_t maximum_message_size, BOOL reject_oversized_messages, nw_connection_group_receive_handler_t receive_handler)
{
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
}

void nw_connection_group_start(nw_connection_group_t group)
{
}

uint64_t nw_endpoint_create_address_from_string()
{
  return _nw_endpoint_create_address_from_string();
}

nw_endpoint_t nw_endpoint_create_url(const char *url)
{
  return _nw_endpoint_create_url(url);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_address(endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_hostname(endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_port(endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_type(endpoint);
}

uint64_t nw_interpose_client_register()
{
  return _nw_interpose_client_register();
}

uint64_t nw_interpose_get_client_uuid()
{
  return _nw_interpose_get_client_uuid();
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return _nw_parameters_create_secure_udp(configure_dtls, configure_udp);
}

uint64_t nw_path_create_default_evaluator()
{
  return _nw_path_create_default_evaluator();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return _nw_path_create_evaluator_for_endpoint();
}

uint64_t nw_path_enumerate_resolver_configs()
{
  return _nw_path_enumerate_resolver_configs();
}

uint64_t nw_path_evaluator_copy_path()
{
  return _nw_path_evaluator_copy_path();
}

uint64_t nw_path_is_direct()
{
  return _nw_path_is_direct();
}

uint64_t nw_proxy_config_create_default_privacy_proxy()
{
  return _nw_proxy_config_create_default_privacy_proxy();
}

uint64_t nw_proxy_config_create_fallback_privacy_proxy()
{
  return _nw_proxy_config_create_fallback_privacy_proxy();
}

uint64_t nw_proxy_config_is_equal()
{
  return _nw_proxy_config_is_equal();
}

uint64_t nw_proxy_config_set_fallback_proxy_agent()
{
  return _nw_proxy_config_set_fallback_proxy_agent();
}

uint64_t nw_proxy_config_set_ignore_privacy_stance()
{
  return _nw_proxy_config_set_ignore_privacy_stance();
}

uint64_t nw_proxy_config_set_use_over_privacy_proxy()
{
  return _nw_proxy_config_set_use_over_privacy_proxy();
}

uint64_t nw_proxy_hop_add_client_certificate_reference()
{
  return _nw_proxy_hop_add_client_certificate_reference();
}

uint64_t nw_proxy_hop_add_extra_header()
{
  return _nw_proxy_hop_add_extra_header();
}

uint64_t nw_proxy_hop_add_server_raw_public_key()
{
  return _nw_proxy_hop_add_server_raw_public_key();
}

uint64_t nw_proxy_hop_create_masque()
{
  return _nw_proxy_hop_create_masque();
}

uint64_t nw_proxy_hop_set_client_identity_reference()
{
  return _nw_proxy_hop_set_client_identity_reference();
}

uint64_t nw_proxy_hop_set_masque_version()
{
  return _nw_proxy_hop_set_masque_version();
}

uint64_t nw_resolver_config_enumerate_name_servers()
{
  return _nw_resolver_config_enumerate_name_servers();
}

uint64_t nw_resolver_config_get_protocol()
{
  return _nw_resolver_config_get_protocol();
}

uint64_t nwi_ifstate_get_flags()
{
  return _nwi_ifstate_get_flags();
}

uint64_t nwi_ifstate_get_ifname()
{
  return _nwi_ifstate_get_ifname();
}

uint64_t nwi_ifstate_get_vpn_server()
{
  return _nwi_ifstate_get_vpn_server();
}

uint64_t nwi_state_copy()
{
  return _nwi_state_copy();
}

uint64_t nwi_state_get_ifstate()
{
  return _nwi_state_get_ifstate();
}

uint64_t nwi_state_get_interface_names()
{
  return _nwi_state_get_interface_names();
}

uint64_t nwi_state_get_notify_key()
{
  return _nwi_state_get_notify_key();
}

uint64_t nwi_state_release()
{
  return _nwi_state_release();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return _proc_pidinfo(pid, flavor, arg, buffer, buffersize);
}

void sandbox_free_error(char *errorbuf)
{
}

int sandbox_init(const char *profile, uint64_t flags, char **errorbuf)
{
  return _sandbox_init(profile, flags, errorbuf);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return _strerror_r(__errnum, __strerrbuf, __buflen);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return _strlcat(__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

void uidna_close(UIDNA *idna)
{
}

int32_t uidna_nameToASCII_UTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return _uidna_nameToASCII_UTF8(idna, name, length, dest, capacity, pInfo, pErrorCode);
}

UIDNA *__cdecl uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)
{
  return _uidna_openUTS46(options, pErrorCode);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return _xpc_connection_copy_entitlement_value();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return _xpc_connection_get_context(connection);
}

gid_t xpc_connection_get_egid(xpc_connection_t connection)
{
  return _xpc_connection_get_egid(connection);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return _xpc_connection_get_euid(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

uint64_t xpc_connection_set_instance()
{
  return _xpc_connection_set_instance();
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return _xpc_connection_set_oneshot_instance();
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

void xpc_connection_suspend(xpc_connection_t connection)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return _xpc_copy(object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return _xpc_data_create(bytes, length);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return _xpc_dictionary_copy_mach_send();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return _xpc_dictionary_get_remote_connection(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uuid(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

uint64_t xpc_dictionary_set_mach_send()
{
  return _xpc_dictionary_set_mach_send();
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

uint64_t xpc_event_publisher_activate()
{
  return _xpc_event_publisher_activate();
}

uint64_t xpc_event_publisher_create()
{
  return _xpc_event_publisher_create();
}

uint64_t xpc_event_publisher_fire_with_reply()
{
  return _xpc_event_publisher_fire_with_reply();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return _xpc_event_publisher_set_error_handler();
}

uint64_t xpc_event_publisher_set_handler()
{
  return _xpc_event_publisher_set_handler();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_strerror()
{
  return _xpc_strerror();
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return _xpc_string_get_length(xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return _xpc_uuid_get_bytes(xuuid);
}

id objc_msgSend_DNSSearchDomainMatch(void *a1, const char *a2, ...)
{
  return [a1 DNSSearchDomainMatch];
}

id objc_msgSend_DNSServerAddressMatch(void *a1, const char *a2, ...)
{
  return [a1 DNSServerAddressMatch];
}

id objc_msgSend_DNSSettings(void *a1, const char *a2, ...)
{
  return [a1 DNSSettings];
}

id objc_msgSend_HTTP2RelayURL(void *a1, const char *a2, ...)
{
  return [a1 HTTP2RelayURL];
}

id objc_msgSend_HTTP3RelayURL(void *a1, const char *a2, ...)
{
  return [a1 HTTP3RelayURL];
}

id objc_msgSend_IPv4Settings(void *a1, const char *a2, ...)
{
  return [a1 IPv4Settings];
}

id objc_msgSend_IPv6Settings(void *a1, const char *a2, ...)
{
  return [a1 IPv6Settings];
}

id objc_msgSend_MTU(void *a1, const char *a2, ...)
{
  return [a1 MTU];
}

id objc_msgSend_SCNCStatus(void *a1, const char *a2, ...)
{
  return [a1 SCNCStatus];
}

id objc_msgSend_SSIDMatch(void *a1, const char *a2, ...)
{
  return [a1 SSIDMatch];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_VPN(void *a1, const char *a2, ...)
{
  return [a1 VPN];
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return [a1 _createDispatchData];
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return [a1 _endpoint];
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return [a1 _xpcConnection];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return [a1 absoluteString];
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return [a1 action];
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return [a1 active];
}

id objc_msgSend_activeInterfaceProtocolKey(void *a1, const char *a2, ...)
{
  return [a1 activeInterfaceProtocolKey];
}

id objc_msgSend_additionalHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return [a1 additionalHTTPHeaderFields];
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return [a1 address];
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return [a1 addressFamily];
}

id objc_msgSend_addresses(void *a1, const char *a2, ...)
{
  return [a1 addresses];
}

id objc_msgSend_advisoryInterfaceArray(void *a1, const char *a2, ...)
{
  return [a1 advisoryInterfaceArray];
}

id objc_msgSend_agentFlags(void *a1, const char *a2, ...)
{
  return [a1 agentFlags];
}

id objc_msgSend_agentPluginClass(void *a1, const char *a2, ...)
{
  return [a1 agentPluginClass];
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return [a1 agentUUID];
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return [a1 allInterfaces];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allowedCaptiveNetworkPlugins(void *a1, const char *a2, ...)
{
  return [a1 allowedCaptiveNetworkPlugins];
}

id objc_msgSend_allowsUnsafeSocketAccess(void *a1, const char *a2, ...)
{
  return [a1 allowsUnsafeSocketAccess];
}

id objc_msgSend_alwaysOnVPN(void *a1, const char *a2, ...)
{
  return [a1 alwaysOnVPN];
}

id objc_msgSend_answerData(void *a1, const char *a2, ...)
{
  return [a1 answerData];
}

id objc_msgSend_appPush(void *a1, const char *a2, ...)
{
  return [a1 appPush];
}

id objc_msgSend_appRules(void *a1, const char *a2, ...)
{
  return [a1 appRules];
}

id objc_msgSend_appVPN(void *a1, const char *a2, ...)
{
  return [a1 appVPN];
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return [a1 application];
}

id objc_msgSend_applicationExceptions(void *a1, const char *a2, ...)
{
  return [a1 applicationExceptions];
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return [a1 applicationIdentifier];
}

id objc_msgSend_applications(void *a1, const char *a2, ...)
{
  return [a1 applications];
}

id objc_msgSend_appliesToLoopback(void *a1, const char *a2, ...)
{
  return [a1 appliesToLoopback];
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return [a1 apply];
}

id objc_msgSend_applyNWPathOverridesIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 applyNWPathOverridesIfNeeded];
}

id objc_msgSend_applyOverrides(void *a1, const char *a2, ...)
{
  return [a1 applyOverrides];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_auditTokenData(void *a1, const char *a2, ...)
{
  return [a1 auditTokenData];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return [a1 authenticationMethod];
}

id objc_msgSend_authenticationPlugin(void *a1, const char *a2, ...)
{
  return [a1 authenticationPlugin];
}

id objc_msgSend_authenticationPluginBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 authenticationPluginBundleIdentifier];
}

id objc_msgSend_authenticationPluginType(void *a1, const char *a2, ...)
{
  return [a1 authenticationPluginType];
}

id objc_msgSend_auxiliaryDataKey(void *a1, const char *a2, ...)
{
  return [a1 auxiliaryDataKey];
}

id objc_msgSend_bestAvailableNetworkDescription(void *a1, const char *a2, ...)
{
  return [a1 bestAvailableNetworkDescription];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_builtInPlugInsURL(void *a1, const char *a2, ...)
{
  return [a1 builtInPlugInsURL];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 bundleIdentifier];
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return [a1 bundlePath];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cPath(void *a1, const char *a2, ...)
{
  return [a1 cPath];
}

id objc_msgSend_cachedMachOUUIDs(void *a1, const char *a2, ...)
{
  return [a1 cachedMachOUUIDs];
}

id objc_msgSend_cachedStateHandlers(void *a1, const char *a2, ...)
{
  return [a1 cachedStateHandlers];
}

id objc_msgSend_canSleep(void *a1, const char *a2, ...)
{
  return [a1 canSleep];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return [a1 cancel];
}

id objc_msgSend_cellularBehavior(void *a1, const char *a2, ...)
{
  return [a1 cellularBehavior];
}

id objc_msgSend_cellularFallbackFlags(void *a1, const char *a2, ...)
{
  return [a1 cellularFallbackFlags];
}

id objc_msgSend_certificateReferences(void *a1, const char *a2, ...)
{
  return [a1 certificateReferences];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return [a1 clear];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return [a1 code];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return [a1 commit];
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return [a1 compact];
}

id objc_msgSend_configMethod(void *a1, const char *a2, ...)
{
  return [a1 configMethod];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return [a1 configuration];
}

id objc_msgSend_configurationIdentifier(void *a1, const char *a2, ...)
{
  return [a1 configurationIdentifier];
}

id objc_msgSend_configurationSignature(void *a1, const char *a2, ...)
{
  return [a1 configurationSignature];
}

id objc_msgSend_connectCount(void *a1, const char *a2, ...)
{
  return [a1 connectCount];
}

id objc_msgSend_connectParameters(void *a1, const char *a2, ...)
{
  return [a1 connectParameters];
}

id objc_msgSend_connectTime(void *a1, const char *a2, ...)
{
  return [a1 connectTime];
}

id objc_msgSend_connectedCount(void *a1, const char *a2, ...)
{
  return [a1 connectedCount];
}

id objc_msgSend_connectionRules(void *a1, const char *a2, ...)
{
  return [a1 connectionRules];
}

id objc_msgSend_considerAlternateUpdate(void *a1, const char *a2, ...)
{
  return [a1 considerAlternateUpdate];
}

id objc_msgSend_contentFilter(void *a1, const char *a2, ...)
{
  return [a1 contentFilter];
}

id objc_msgSend_controlPolicySession(void *a1, const char *a2, ...)
{
  return [a1 controlPolicySession];
}

id objc_msgSend_controlSocket(void *a1, const char *a2, ...)
{
  return [a1 controlSocket];
}

id objc_msgSend_controlUnit(void *a1, const char *a2, ...)
{
  return [a1 controlUnit];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_copyAggregatePathRules(void *a1, const char *a2, ...)
{
  return [a1 copyAggregatePathRules];
}

id objc_msgSend_copyCEndpoint(void *a1, const char *a2, ...)
{
  return [a1 copyCEndpoint];
}

id objc_msgSend_copyCachedMachOUUIDs(void *a1, const char *a2, ...)
{
  return [a1 copyCachedMachOUUIDs];
}

id objc_msgSend_copyDNSUUIDs(void *a1, const char *a2, ...)
{
  return [a1 copyDNSUUIDs];
}

id objc_msgSend_copyExtendedStatus(void *a1, const char *a2, ...)
{
  return [a1 copyExtendedStatus];
}

id objc_msgSend_copyLegacyDictionary(void *a1, const char *a2, ...)
{
  return [a1 copyLegacyDictionary];
}

id objc_msgSend_copyLegacyIPSecDictionary(void *a1, const char *a2, ...)
{
  return [a1 copyLegacyIPSecDictionary];
}

id objc_msgSend_copyNEHelperUUIDs(void *a1, const char *a2, ...)
{
  return [a1 copyNEHelperUUIDs];
}

id objc_msgSend_copyPassword(void *a1, const char *a2, ...)
{
  return [a1 copyPassword];
}

id objc_msgSend_copyStatistics(void *a1, const char *a2, ...)
{
  return [a1 copyStatistics];
}

id objc_msgSend_copyTunnelInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 copyTunnelInterfaceName];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_createResponse(void *a1, const char *a2, ...)
{
  return [a1 createResponse];
}

id objc_msgSend_dataProviderDesignatedRequirement(void *a1, const char *a2, ...)
{
  return [a1 dataProviderDesignatedRequirement];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_defaultAction(void *a1, const char *a2, ...)
{
  return [a1 defaultAction];
}

id objc_msgSend_defaultDropType(void *a1, const char *a2, ...)
{
  return [a1 defaultDropType];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return [a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return [a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return [a1 delegate];
}

id objc_msgSend_delegateInterfaceAddress(void *a1, const char *a2, ...)
{
  return [a1 delegateInterfaceAddress];
}

id objc_msgSend_delegateIsPlatformBinary(void *a1, const char *a2, ...)
{
  return [a1 delegateIsPlatformBinary];
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return [a1 delegateQueue];
}

id objc_msgSend_denyAll(void *a1, const char *a2, ...)
{
  return [a1 denyAll];
}

id objc_msgSend_denyCellularFallback(void *a1, const char *a2, ...)
{
  return [a1 denyCellularFallback];
}

id objc_msgSend_denyMulticast(void *a1, const char *a2, ...)
{
  return [a1 denyMulticast];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_designatedRequirement(void *a1, const char *a2, ...)
{
  return [a1 designatedRequirement];
}

id objc_msgSend_destinationAddress(void *a1, const char *a2, ...)
{
  return [a1 destinationAddress];
}

id objc_msgSend_destinationNetworkPrefixLength(void *a1, const char *a2, ...)
{
  return [a1 destinationNetworkPrefixLength];
}

id objc_msgSend_destinationSubnetMask(void *a1, const char *a2, ...)
{
  return [a1 destinationSubnetMask];
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return [a1 destroy];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_disableDefaultDrop(void *a1, const char *a2, ...)
{
  return [a1 disableDefaultDrop];
}

id objc_msgSend_disableDefaultDropAfterBoot(void *a1, const char *a2, ...)
{
  return [a1 disableDefaultDropAfterBoot];
}

id objc_msgSend_disableEncryptedDNSSettings(void *a1, const char *a2, ...)
{
  return [a1 disableEncryptedDNSSettings];
}

id objc_msgSend_disableOnDemand(void *a1, const char *a2, ...)
{
  return [a1 disableOnDemand];
}

id objc_msgSend_disconnectOnIdle(void *a1, const char *a2, ...)
{
  return [a1 disconnectOnIdle];
}

id objc_msgSend_disconnectOnIdleTimeout(void *a1, const char *a2, ...)
{
  return [a1 disconnectOnIdleTimeout];
}

id objc_msgSend_disconnectOnSleep(void *a1, const char *a2, ...)
{
  return [a1 disconnectOnSleep];
}

id objc_msgSend_disconnectOnWake(void *a1, const char *a2, ...)
{
  return [a1 disconnectOnWake];
}

id objc_msgSend_disconnectOnWakeTimeout(void *a1, const char *a2, ...)
{
  return [a1 disconnectOnWakeTimeout];
}

id objc_msgSend_disconnectedCount(void *a1, const char *a2, ...)
{
  return [a1 disconnectedCount];
}

id objc_msgSend_dnsAgent(void *a1, const char *a2, ...)
{
  return [a1 dnsAgent];
}

id objc_msgSend_dnsAgentRegistration(void *a1, const char *a2, ...)
{
  return [a1 dnsAgentRegistration];
}

id objc_msgSend_dnsOverHTTPSURL(void *a1, const char *a2, ...)
{
  return [a1 dnsOverHTTPSURL];
}

id objc_msgSend_dnsProxy(void *a1, const char *a2, ...)
{
  return [a1 dnsProxy];
}

id objc_msgSend_dnsRedirectionDetector(void *a1, const char *a2, ...)
{
  return [a1 dnsRedirectionDetector];
}

id objc_msgSend_dnsRedirectionTransaction(void *a1, const char *a2, ...)
{
  return [a1 dnsRedirectionTransaction];
}

id objc_msgSend_dnsSettings(void *a1, const char *a2, ...)
{
  return [a1 dnsSettings];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return [a1 domain];
}

id objc_msgSend_domainName(void *a1, const char *a2, ...)
{
  return [a1 domainName];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return [a1 drop];
}

id objc_msgSend_dropServer(void *a1, const char *a2, ...)
{
  return [a1 dropServer];
}

id objc_msgSend_enableFallback(void *a1, const char *a2, ...)
{
  return [a1 enableFallback];
}

id objc_msgSend_enableManualMode(void *a1, const char *a2, ...)
{
  return [a1 enableManualMode];
}

id objc_msgSend_enableRevocationCheck(void *a1, const char *a2, ...)
{
  return [a1 enableRevocationCheck];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return [a1 enabled];
}

id objc_msgSend_enforceRoutes(void *a1, const char *a2, ...)
{
  return [a1 enforceRoutes];
}

id objc_msgSend_entitlement(void *a1, const char *a2, ...)
{
  return [a1 entitlement];
}

id objc_msgSend_establishIPCPending(void *a1, const char *a2, ...)
{
  return [a1 establishIPCPending];
}

id objc_msgSend_ethernetAddress(void *a1, const char *a2, ...)
{
  return [a1 ethernetAddress];
}

id objc_msgSend_exceptionApps(void *a1, const char *a2, ...)
{
  return [a1 exceptionApps];
}

id objc_msgSend_excludeAPNs(void *a1, const char *a2, ...)
{
  return [a1 excludeAPNs];
}

id objc_msgSend_excludeCellularServices(void *a1, const char *a2, ...)
{
  return [a1 excludeCellularServices];
}

id objc_msgSend_excludeDeviceCommunication(void *a1, const char *a2, ...)
{
  return [a1 excludeDeviceCommunication];
}

id objc_msgSend_excludeLocalNetworks(void *a1, const char *a2, ...)
{
  return [a1 excludeLocalNetworks];
}

id objc_msgSend_excludedDomains(void *a1, const char *a2, ...)
{
  return [a1 excludedDomains];
}

id objc_msgSend_excludedNetworkRules(void *a1, const char *a2, ...)
{
  return [a1 excludedNetworkRules];
}

id objc_msgSend_excludedRoutes(void *a1, const char *a2, ...)
{
  return [a1 excludedRoutes];
}

id objc_msgSend_extensibleSSOProvider(void *a1, const char *a2, ...)
{
  return [a1 extensibleSSOProvider];
}

id objc_msgSend_extensionIdentifier(void *a1, const char *a2, ...)
{
  return [a1 extensionIdentifier];
}

id objc_msgSend_externalIdentifier(void *a1, const char *a2, ...)
{
  return [a1 externalIdentifier];
}

id objc_msgSend_failedConnectCountWithinInterval(void *a1, const char *a2, ...)
{
  return [a1 failedConnectCountWithinInterval];
}

id objc_msgSend_fallbackTraffic(void *a1, const char *a2, ...)
{
  return [a1 fallbackTraffic];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return [a1 fileDescriptor];
}

id objc_msgSend_filterBrowsers(void *a1, const char *a2, ...)
{
  return [a1 filterBrowsers];
}

id objc_msgSend_filterDataProviderBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 filterDataProviderBundleIdentifier];
}

id objc_msgSend_filterPacketProviderBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 filterPacketProviderBundleIdentifier];
}

id objc_msgSend_filterPackets(void *a1, const char *a2, ...)
{
  return [a1 filterPackets];
}

id objc_msgSend_filterSockets(void *a1, const char *a2, ...)
{
  return [a1 filterSockets];
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return [a1 finishTasksAndInvalidate];
}

id objc_msgSend_firstFailedConnectTime(void *a1, const char *a2, ...)
{
  return [a1 firstFailedConnectTime];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_flowRemoteAddressEmpty(void *a1, const char *a2, ...)
{
  return [a1 flowRemoteAddressEmpty];
}

id objc_msgSend_gatewayAddress(void *a1, const char *a2, ...)
{
  return [a1 gatewayAddress];
}

id objc_msgSend_generateSignature(void *a1, const char *a2, ...)
{
  return [a1 generateSignature];
}

id objc_msgSend_getIDSNetworkAgentDomain(void *a1, const char *a2, ...)
{
  return [a1 getIDSNetworkAgentDomain];
}

id objc_msgSend_gid(void *a1, const char *a2, ...)
{
  return [a1 gid];
}

id objc_msgSend_grade(void *a1, const char *a2, ...)
{
  return [a1 grade];
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return [a1 handle];
}

id objc_msgSend_handleCaptiveNetworkPluginsChanged(void *a1, const char *a2, ...)
{
  return [a1 handleCaptiveNetworkPluginsChanged];
}

id objc_msgSend_handleChangeEventForRankedInterfaces(void *a1, const char *a2, ...)
{
  return [a1 handleChangeEventForRankedInterfaces];
}

id objc_msgSend_handleClearConfiguration(void *a1, const char *a2, ...)
{
  return [a1 handleClearConfiguration];
}

id objc_msgSend_handleDeviceLock(void *a1, const char *a2, ...)
{
  return [a1 handleDeviceLock];
}

id objc_msgSend_handleDeviceUnlock(void *a1, const char *a2, ...)
{
  return [a1 handleDeviceUnlock];
}

id objc_msgSend_handleEstablishIPC(void *a1, const char *a2, ...)
{
  return [a1 handleEstablishIPC];
}

id objc_msgSend_handleEstablishIPCReplySent(void *a1, const char *a2, ...)
{
  return [a1 handleEstablishIPCReplySent];
}

id objc_msgSend_handleInitializeState(void *a1, const char *a2, ...)
{
  return [a1 handleInitializeState];
}

id objc_msgSend_handleInstalledAppsChanged(void *a1, const char *a2, ...)
{
  return [a1 handleInstalledAppsChanged];
}

id objc_msgSend_handleProviderStopped(void *a1, const char *a2, ...)
{
  return [a1 handleProviderStopped];
}

id objc_msgSend_handleSetConfiguration(void *a1, const char *a2, ...)
{
  return [a1 handleSetConfiguration];
}

id objc_msgSend_handleSleep(void *a1, const char *a2, ...)
{
  return [a1 handleSleep];
}

id objc_msgSend_handleStop(void *a1, const char *a2, ...)
{
  return [a1 handleStop];
}

id objc_msgSend_handleTimeout(void *a1, const char *a2, ...)
{
  return [a1 handleTimeout];
}

id objc_msgSend_handleUpdateConfiguration(void *a1, const char *a2, ...)
{
  return [a1 handleUpdateConfiguration];
}

id objc_msgSend_handleUserLogout(void *a1, const char *a2, ...)
{
  return [a1 handleUserLogout];
}

id objc_msgSend_handleUserSwitch(void *a1, const char *a2, ...)
{
  return [a1 handleUserSwitch];
}

id objc_msgSend_handleWakeup(void *a1, const char *a2, ...)
{
  return [a1 handleWakeup];
}

id objc_msgSend_hasDefaultRoute(void *a1, const char *a2, ...)
{
  return [a1 hasDefaultRoute];
}

id objc_msgSend_hasNonDefaultRules(void *a1, const char *a2, ...)
{
  return [a1 hasNonDefaultRules];
}

id objc_msgSend_hasRequiredFrameworks(void *a1, const char *a2, ...)
{
  return [a1 hasRequiredFrameworks];
}

id objc_msgSend_hasSignedResult(void *a1, const char *a2, ...)
{
  return [a1 hasSignedResult];
}

id objc_msgSend_highPolicySession(void *a1, const char *a2, ...)
{
  return [a1 highPolicySession];
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return [a1 hostname];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_identityReference(void *a1, const char *a2, ...)
{
  return [a1 identityReference];
}

id objc_msgSend_identityReferenceInternal(void *a1, const char *a2, ...)
{
  return [a1 identityReferenceInternal];
}

id objc_msgSend_ignoreFallback(void *a1, const char *a2, ...)
{
  return [a1 ignoreFallback];
}

id objc_msgSend_ignoreRouteRules(void *a1, const char *a2, ...)
{
  return [a1 ignoreRouteRules];
}

id objc_msgSend_includeAllNetworks(void *a1, const char *a2, ...)
{
  return [a1 includeAllNetworks];
}

id objc_msgSend_includedNetworkRules(void *a1, const char *a2, ...)
{
  return [a1 includedNetworkRules];
}

id objc_msgSend_includedRoutes(void *a1, const char *a2, ...)
{
  return [a1 includedRoutes];
}

id objc_msgSend_initFlowDivertDataSocket(void *a1, const char *a2, ...)
{
  return [a1 initFlowDivertDataSocket];
}

id objc_msgSend_initializePlugins(void *a1, const char *a2, ...)
{
  return [a1 initializePlugins];
}

id objc_msgSend_install(void *a1, const char *a2, ...)
{
  return [a1 install];
}

id objc_msgSend_installPended(void *a1, const char *a2, ...)
{
  return [a1 installPended];
}

id objc_msgSend_installPendedOnQueue(void *a1, const char *a2, ...)
{
  return [a1 installPendedOnQueue];
}

id objc_msgSend_installedMDMProfileIdentifier(void *a1, const char *a2, ...)
{
  return [a1 installedMDMProfileIdentifier];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return [a1 interface];
}

id objc_msgSend_interfaceIndex(void *a1, const char *a2, ...)
{
  return [a1 interfaceIndex];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return [a1 interfaceName];
}

id objc_msgSend_interfaceProtocolMapping(void *a1, const char *a2, ...)
{
  return [a1 interfaceProtocolMapping];
}

id objc_msgSend_interfaceTypeMatch(void *a1, const char *a2, ...)
{
  return [a1 interfaceTypeMatch];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return [a1 isActive];
}

id objc_msgSend_isAllowAllCaptiveNetworkPlugins(void *a1, const char *a2, ...)
{
  return [a1 isAllowAllCaptiveNetworkPlugins];
}

id objc_msgSend_isAllowCaptiveWebSheet(void *a1, const char *a2, ...)
{
  return [a1 isAllowCaptiveWebSheet];
}

id objc_msgSend_isDefaultRoute(void *a1, const char *a2, ...)
{
  return [a1 isDefaultRoute];
}

id objc_msgSend_isDeregisteredEnterpriseVPNSession(void *a1, const char *a2, ...)
{
  return [a1 isDeregisteredEnterpriseVPNSession];
}

id objc_msgSend_isDisconnectOnDemandEnabled(void *a1, const char *a2, ...)
{
  return [a1 isDisconnectOnDemandEnabled];
}

id objc_msgSend_isDropPersistent(void *a1, const char *a2, ...)
{
  return [a1 isDropPersistent];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return [a1 isEnabled];
}

id objc_msgSend_isFullyTransparent(void *a1, const char *a2, ...)
{
  return [a1 isFullyTransparent];
}

id objc_msgSend_isIdentifierExternal(void *a1, const char *a2, ...)
{
  return [a1 isIdentifierExternal];
}

id objc_msgSend_isInbound(void *a1, const char *a2, ...)
{
  return [a1 isInbound];
}

id objc_msgSend_isKernelActivated(void *a1, const char *a2, ...)
{
  return [a1 isKernelActivated];
}

id objc_msgSend_isLimitedToUDP(void *a1, const char *a2, ...)
{
  return [a1 isLimitedToUDP];
}

id objc_msgSend_isListener(void *a1, const char *a2, ...)
{
  return [a1 isListener];
}

id objc_msgSend_isLocal(void *a1, const char *a2, ...)
{
  return [a1 isLocal];
}

id objc_msgSend_isOnDemand(void *a1, const char *a2, ...)
{
  return [a1 isOnDemand];
}

id objc_msgSend_isOnDemandEnabled(void *a1, const char *a2, ...)
{
  return [a1 isOnDemandEnabled];
}

id objc_msgSend_isRegistered(void *a1, const char *a2, ...)
{
  return [a1 isRegistered];
}

id objc_msgSend_isSecondaryConnection(void *a1, const char *a2, ...)
{
  return [a1 isSecondaryConnection];
}

id objc_msgSend_isSecondaryInterface(void *a1, const char *a2, ...)
{
  return [a1 isSecondaryInterface];
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return [a1 isSupervised];
}

id objc_msgSend_isSystemProxyConnection(void *a1, const char *a2, ...)
{
  return [a1 isSystemProxyConnection];
}

id objc_msgSend_isUserActivated(void *a1, const char *a2, ...)
{
  return [a1 isUserActivated];
}

id objc_msgSend_isVoluntary(void *a1, const char *a2, ...)
{
  return [a1 isVoluntary];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return [a1 keyEnumerator];
}

id objc_msgSend_keyMaterial(void *a1, const char *a2, ...)
{
  return [a1 keyMaterial];
}

id objc_msgSend_lastConnectedDuration(void *a1, const char *a2, ...)
{
  return [a1 lastConnectedDuration];
}

id objc_msgSend_lastDisconnectError(void *a1, const char *a2, ...)
{
  return [a1 lastDisconnectError];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return [a1 lastObject];
}

id objc_msgSend_lastPrimaryInterface(void *a1, const char *a2, ...)
{
  return [a1 lastPrimaryInterface];
}

id objc_msgSend_lastStartMessage(void *a1, const char *a2, ...)
{
  return [a1 lastStartMessage];
}

id objc_msgSend_lastStatus(void *a1, const char *a2, ...)
{
  return [a1 lastStatus];
}

id objc_msgSend_lastStatusChangeTime(void *a1, const char *a2, ...)
{
  return [a1 lastStatusChangeTime];
}

id objc_msgSend_lastStopReason(void *a1, const char *a2, ...)
{
  return [a1 lastStopReason];
}

id objc_msgSend_leave(void *a1, const char *a2, ...)
{
  return [a1 leave];
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return [a1 legacyInfo];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return [a1 level];
}

id objc_msgSend_localNetworks(void *a1, const char *a2, ...)
{
  return [a1 localNetworks];
}

id objc_msgSend_lockSessionToCurrentProcess(void *a1, const char *a2, ...)
{
  return [a1 lockSessionToCurrentProcess];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_machOUUIDs(void *a1, const char *a2, ...)
{
  return [a1 machOUUIDs];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return [a1 mainQueue];
}

id objc_msgSend_managedPayloads(void *a1, const char *a2, ...)
{
  return [a1 managedPayloads];
}

id objc_msgSend_managerInterface(void *a1, const char *a2, ...)
{
  return [a1 managerInterface];
}

id objc_msgSend_managerObject(void *a1, const char *a2, ...)
{
  return [a1 managerObject];
}

id objc_msgSend_managerObjectFactory(void *a1, const char *a2, ...)
{
  return [a1 managerObjectFactory];
}

id objc_msgSend_matchAccountIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 matchAccountIdentifiers];
}

id objc_msgSend_matchDirection(void *a1, const char *a2, ...)
{
  return [a1 matchDirection];
}

id objc_msgSend_matchDomains(void *a1, const char *a2, ...)
{
  return [a1 matchDomains];
}

id objc_msgSend_matchDomainsNoSearch(void *a1, const char *a2, ...)
{
  return [a1 matchDomainsNoSearch];
}

id objc_msgSend_matchLocalNetworkEndpoint(void *a1, const char *a2, ...)
{
  return [a1 matchLocalNetworkEndpoint];
}

id objc_msgSend_matchLocalPrefix(void *a1, const char *a2, ...)
{
  return [a1 matchLocalPrefix];
}

id objc_msgSend_matchPath(void *a1, const char *a2, ...)
{
  return [a1 matchPath];
}

id objc_msgSend_matchPrivateLTENetworks(void *a1, const char *a2, ...)
{
  return [a1 matchPrivateLTENetworks];
}

id objc_msgSend_matchProtocol(void *a1, const char *a2, ...)
{
  return [a1 matchProtocol];
}

id objc_msgSend_matchRemoteHostOrNetworkEndpoint(void *a1, const char *a2, ...)
{
  return [a1 matchRemoteHostOrNetworkEndpoint];
}

id objc_msgSend_matchRemotePrefix(void *a1, const char *a2, ...)
{
  return [a1 matchRemotePrefix];
}

id objc_msgSend_matchSSIDs(void *a1, const char *a2, ...)
{
  return [a1 matchSSIDs];
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return [a1 matchSigningIdentifier];
}

id objc_msgSend_matchedRule(void *a1, const char *a2, ...)
{
  return [a1 matchedRule];
}

id objc_msgSend_maxConnectTime(void *a1, const char *a2, ...)
{
  return [a1 maxConnectTime];
}

id objc_msgSend_messageQueue(void *a1, const char *a2, ...)
{
  return [a1 messageQueue];
}

id objc_msgSend_mobileCountryCode(void *a1, const char *a2, ...)
{
  return [a1 mobileCountryCode];
}

id objc_msgSend_mobileNetworkCode(void *a1, const char *a2, ...)
{
  return [a1 mobileNetworkCode];
}

id objc_msgSend_mtu(void *a1, const char *a2, ...)
{
  return [a1 mtu];
}

id objc_msgSend_multicastPreferenceSet(void *a1, const char *a2, ...)
{
  return [a1 multicastPreferenceSet];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_natKeepAliveOffloadEnable(void *a1, const char *a2, ...)
{
  return [a1 natKeepAliveOffloadEnable];
}

id objc_msgSend_natKeepAliveOffloadInterval(void *a1, const char *a2, ...)
{
  return [a1 natKeepAliveOffloadInterval];
}

id objc_msgSend_networkAgent(void *a1, const char *a2, ...)
{
  return [a1 networkAgent];
}

id objc_msgSend_networkAgentInterfaces(void *a1, const char *a2, ...)
{
  return [a1 networkAgentInterfaces];
}

id objc_msgSend_networkAgentRegistration(void *a1, const char *a2, ...)
{
  return [a1 networkAgentRegistration];
}

id objc_msgSend_networkDescriptionArray(void *a1, const char *a2, ...)
{
  return [a1 networkDescriptionArray];
}

id objc_msgSend_networkPrefixLengths(void *a1, const char *a2, ...)
{
  return [a1 networkPrefixLengths];
}

id objc_msgSend_networkRule(void *a1, const char *a2, ...)
{
  return [a1 networkRule];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return [a1 notification];
}

id objc_msgSend_notifyChangedExtendedStatus(void *a1, const char *a2, ...)
{
  return [a1 notifyChangedExtendedStatus];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_onDemandDomainCache(void *a1, const char *a2, ...)
{
  return [a1 onDemandDomainCache];
}

id objc_msgSend_onDemandMonitor(void *a1, const char *a2, ...)
{
  return [a1 onDemandMonitor];
}

id objc_msgSend_onDemandPauseLevelInternal(void *a1, const char *a2, ...)
{
  return [a1 onDemandPauseLevelInternal];
}

id objc_msgSend_onDemandPauseTimerSource(void *a1, const char *a2, ...)
{
  return [a1 onDemandPauseTimerSource];
}

id objc_msgSend_onDemandRules(void *a1, const char *a2, ...)
{
  return [a1 onDemandRules];
}

id objc_msgSend_order(void *a1, const char *a2, ...)
{
  return [a1 order];
}

id objc_msgSend_packetProviderDesignatedRequirement(void *a1, const char *a2, ...)
{
  return [a1 packetProviderDesignatedRequirement];
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return [a1 parent];
}

id objc_msgSend_parentType(void *a1, const char *a2, ...)
{
  return [a1 parentType];
}

id objc_msgSend_pass(void *a1, const char *a2, ...)
{
  return [a1 pass];
}

id objc_msgSend_passwordKeychainItem(void *a1, const char *a2, ...)
{
  return [a1 passwordKeychainItem];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_pathController(void *a1, const char *a2, ...)
{
  return [a1 pathController];
}

id objc_msgSend_pathRules(void *a1, const char *a2, ...)
{
  return [a1 pathRules];
}

id objc_msgSend_pauseOnDemand(void *a1, const char *a2, ...)
{
  return [a1 pauseOnDemand];
}

id objc_msgSend_payloadInfo(void *a1, const char *a2, ...)
{
  return [a1 payloadInfo];
}

id objc_msgSend_payloadUUID(void *a1, const char *a2, ...)
{
  return [a1 payloadUUID];
}

id objc_msgSend_perApp(void *a1, const char *a2, ...)
{
  return [a1 perApp];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return [a1 pid];
}

id objc_msgSend_pidVersion(void *a1, const char *a2, ...)
{
  return [a1 pidVersion];
}

id objc_msgSend_platformBinary(void *a1, const char *a2, ...)
{
  return [a1 platformBinary];
}

id objc_msgSend_pluginCompletionHandler(void *a1, const char *a2, ...)
{
  return [a1 pluginCompletionHandler];
}

id objc_msgSend_pluginConfigurationEntities(void *a1, const char *a2, ...)
{
  return [a1 pluginConfigurationEntities];
}

id objc_msgSend_pluginConnection(void *a1, const char *a2, ...)
{
  return [a1 pluginConnection];
}

id objc_msgSend_pluginPIDArray(void *a1, const char *a2, ...)
{
  return [a1 pluginPIDArray];
}

id objc_msgSend_pluginType(void *a1, const char *a2, ...)
{
  return [a1 pluginType];
}

id objc_msgSend_policySession(void *a1, const char *a2, ...)
{
  return [a1 policySession];
}

id objc_msgSend_predictedInterfaceArray(void *a1, const char *a2, ...)
{
  return [a1 predictedInterfaceArray];
}

id objc_msgSend_prepareConfigurationForStart(void *a1, const char *a2, ...)
{
  return [a1 prepareConfigurationForStart];
}

id objc_msgSend_prepareNetwork(void *a1, const char *a2, ...)
{
  return [a1 prepareNetwork];
}

id objc_msgSend_preserveExistingConnections(void *a1, const char *a2, ...)
{
  return [a1 preserveExistingConnections];
}

id objc_msgSend_primaryCellularInterface(void *a1, const char *a2, ...)
{
  return [a1 primaryCellularInterface];
}

id objc_msgSend_primaryPhysicalInterface(void *a1, const char *a2, ...)
{
  return [a1 primaryPhysicalInterface];
}

id objc_msgSend_primaryTunnelPlugin(void *a1, const char *a2, ...)
{
  return [a1 primaryTunnelPlugin];
}

id objc_msgSend_primaryWiFiInterface(void *a1, const char *a2, ...)
{
  return [a1 primaryWiFiInterface];
}

id objc_msgSend_probeURL(void *a1, const char *a2, ...)
{
  return [a1 probeURL];
}

id objc_msgSend_profileIdentifier(void *a1, const char *a2, ...)
{
  return [a1 profileIdentifier];
}

id objc_msgSend_profileUUID(void *a1, const char *a2, ...)
{
  return [a1 profileUUID];
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return [a1 protocol];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return [a1 provider];
}

id objc_msgSend_providerBundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 providerBundleIdentifier];
}

id objc_msgSend_providerConfiguration(void *a1, const char *a2, ...)
{
  return [a1 providerConfiguration];
}

id objc_msgSend_providerDesignatedRequirement(void *a1, const char *a2, ...)
{
  return [a1 providerDesignatedRequirement];
}

id objc_msgSend_proxyConfig(void *a1, const char *a2, ...)
{
  return [a1 proxyConfig];
}

id objc_msgSend_proxySettings(void *a1, const char *a2, ...)
{
  return [a1 proxySettings];
}

id objc_msgSend_queries(void *a1, const char *a2, ...)
{
  return [a1 queries];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_rawPublicKeys(void *a1, const char *a2, ...)
{
  return [a1 rawPublicKeys];
}

id objc_msgSend_reassertedByPlugin(void *a1, const char *a2, ...)
{
  return [a1 reassertedByPlugin];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return [a1 recordType];
}

id objc_msgSend_registeredNetworkAgentInterfaces(void *a1, const char *a2, ...)
{
  return [a1 registeredNetworkAgentInterfaces];
}

id objc_msgSend_relay(void *a1, const char *a2, ...)
{
  return [a1 relay];
}

id objc_msgSend_relays(void *a1, const char *a2, ...)
{
  return [a1 relays];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectProxy];
}

id objc_msgSend_remotePluginInterface(void *a1, const char *a2, ...)
{
  return [a1 remotePluginInterface];
}

id objc_msgSend_remotePluginObject(void *a1, const char *a2, ...)
{
  return [a1 remotePluginObject];
}

id objc_msgSend_removeAllClients(void *a1, const char *a2, ...)
{
  return [a1 removeAllClients];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return [a1 removeAllPolicies];
}

id objc_msgSend_requestInstall(void *a1, const char *a2, ...)
{
  return [a1 requestInstall];
}

id objc_msgSend_requestUninstall(void *a1, const char *a2, ...)
{
  return [a1 requestUninstall];
}

id objc_msgSend_resetPerAppPolicy(void *a1, const char *a2, ...)
{
  return [a1 resetPerAppPolicy];
}

id objc_msgSend_resolvedEndpoints(void *a1, const char *a2, ...)
{
  return [a1 resolvedEndpoints];
}

id objc_msgSend_restartPending(void *a1, const char *a2, ...)
{
  return [a1 restartPending];
}

id objc_msgSend_restartSession(void *a1, const char *a2, ...)
{
  return [a1 restartSession];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_rotateEncryptionKey(void *a1, const char *a2, ...)
{
  return [a1 rotateEncryptionKey];
}

id objc_msgSend_router(void *a1, const char *a2, ...)
{
  return [a1 router];
}

id objc_msgSend_rules(void *a1, const char *a2, ...)
{
  return [a1 rules];
}

id objc_msgSend_scopeToDirectInterface(void *a1, const char *a2, ...)
{
  return [a1 scopeToDirectInterface];
}

id objc_msgSend_searchDomains(void *a1, const char *a2, ...)
{
  return [a1 searchDomains];
}

id objc_msgSend_sendConfigurationChangeHandledNotification(void *a1, const char *a2, ...)
{
  return [a1 sendConfigurationChangeHandledNotification];
}

id objc_msgSend_sendEstablishIPCReply(void *a1, const char *a2, ...)
{
  return [a1 sendEstablishIPCReply];
}

id objc_msgSend_sendExtensionFailed(void *a1, const char *a2, ...)
{
  return [a1 sendExtensionFailed];
}

id objc_msgSend_sendTimerEvent(void *a1, const char *a2, ...)
{
  return [a1 sendTimerEvent];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return [a1 server];
}

id objc_msgSend_serverAddress(void *a1, const char *a2, ...)
{
  return [a1 serverAddress];
}

id objc_msgSend_servers(void *a1, const char *a2, ...)
{
  return [a1 servers];
}

id objc_msgSend_serviceExceptions(void *a1, const char *a2, ...)
{
  return [a1 serviceExceptions];
}

id objc_msgSend_sessionContext(void *a1, const char *a2, ...)
{
  return [a1 sessionContext];
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return [a1 sessionType];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return [a1 set];
}

id objc_msgSend_setConfigurationCompletionHandlerArray(void *a1, const char *a2, ...)
{
  return [a1 setConfigurationCompletionHandlerArray];
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return [a1 settings];
}

id objc_msgSend_setupFromAuxiliaryData(void *a1, const char *a2, ...)
{
  return [a1 setupFromAuxiliaryData];
}

id objc_msgSend_sharedCache(void *a1, const char *a2, ...)
{
  return [a1 sharedCache];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return [a1 sharedConnection];
}

id objc_msgSend_sharedMaintainer(void *a1, const char *a2, ...)
{
  return [a1 sharedMaintainer];
}

id objc_msgSend_sharedManagerForAllUsers(void *a1, const char *a2, ...)
{
  return [a1 sharedManagerForAllUsers];
}

id objc_msgSend_sharedSecretKeychainItem(void *a1, const char *a2, ...)
{
  return [a1 sharedSecretKeychainItem];
}

id objc_msgSend_sleepOnDisconnect(void *a1, const char *a2, ...)
{
  return [a1 sleepOnDisconnect];
}

id objc_msgSend_sliceUUID(void *a1, const char *a2, ...)
{
  return [a1 sliceUUID];
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return [a1 slotID];
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return [a1 ssid];
}

id objc_msgSend_staleOnDemandDNSKeys(void *a1, const char *a2, ...)
{
  return [a1 staleOnDemandDNSKeys];
}

id objc_msgSend_startFilter(void *a1, const char *a2, ...)
{
  return [a1 startFilter];
}

id objc_msgSend_startMessage(void *a1, const char *a2, ...)
{
  return [a1 startMessage];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return [a1 state];
}

id objc_msgSend_stateHandler(void *a1, const char *a2, ...)
{
  return [a1 stateHandler];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return [a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return [a1 statusCode];
}

id objc_msgSend_stopped(void *a1, const char *a2, ...)
{
  return [a1 stopped];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_subnetMasks(void *a1, const char *a2, ...)
{
  return [a1 subnetMasks];
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return [a1 subscriptions];
}

id objc_msgSend_supportsDefaultDrop(void *a1, const char *a2, ...)
{
  return [a1 supportsDefaultDrop];
}

id objc_msgSend_syntheticDNSAnswerIPv4Prefix(void *a1, const char *a2, ...)
{
  return [a1 syntheticDNSAnswerIPv4Prefix];
}

id objc_msgSend_syntheticDNSAnswerIPv6Prefix(void *a1, const char *a2, ...)
{
  return [a1 syntheticDNSAnswerIPv6Prefix];
}

id objc_msgSend_temporaryAllowMulticastNetworkName(void *a1, const char *a2, ...)
{
  return [a1 temporaryAllowMulticastNetworkName];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_trackingAreaCode(void *a1, const char *a2, ...)
{
  return [a1 trackingAreaCode];
}

id objc_msgSend_trie(void *a1, const char *a2, ...)
{
  return [a1 trie];
}

id objc_msgSend_tunnelKind(void *a1, const char *a2, ...)
{
  return [a1 tunnelKind];
}

id objc_msgSend_tunnelOverheadBytes(void *a1, const char *a2, ...)
{
  return [a1 tunnelOverheadBytes];
}

id objc_msgSend_tunnelRemoteAddress(void *a1, const char *a2, ...)
{
  return [a1 tunnelRemoteAddress];
}

id objc_msgSend_tunnelType(void *a1, const char *a2, ...)
{
  return [a1 tunnelType];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return [a1 type];
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return [a1 uid];
}

id objc_msgSend_uninstall(void *a1, const char *a2, ...)
{
  return [a1 uninstall];
}

id objc_msgSend_uninstallOnQueue(void *a1, const char *a2, ...)
{
  return [a1 uninstallOnQueue];
}

id objc_msgSend_unpauseOnDemand(void *a1, const char *a2, ...)
{
  return [a1 unpauseOnDemand];
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return [a1 unregisterNetworkAgent];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_useDNSServers(void *a1, const char *a2, ...)
{
  return [a1 useDNSServers];
}

id objc_msgSend_userEthernetController(void *a1, const char *a2, ...)
{
  return [a1 userEthernetController];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return [a1 username];
}

id objc_msgSend_usesModernNetworkAPI(void *a1, const char *a2, ...)
{
  return [a1 usesModernNetworkAPI];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return [a1 uuid];
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return [a1 virtualInterface];
}

id objc_msgSend_waitForPerApp(void *a1, const char *a2, ...)
{
  return [a1 waitForPerApp];
}

id objc_msgSend_wakeup(void *a1, const char *a2, ...)
{
  return [a1 wakeup];
}

id objc_msgSend_weakAdvisory(void *a1, const char *a2, ...)
{
  return [a1 weakAdvisory];
}

id objc_msgSend_weakObjectsPointerArray(void *a1, const char *a2, ...)
{
  return [a1 weakObjectsPointerArray];
}

id objc_msgSend_wifiBehavior(void *a1, const char *a2, ...)
{
  return [a1 wifiBehavior];
}