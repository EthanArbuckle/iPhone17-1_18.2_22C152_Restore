int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  void *v4;

  if (qword_1000A1328 != -1) {
    swift_once();
  }
  dispatch_main();
}

uint64_t sub_1000030B4(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1000030C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t variable initialization expression of Clock.heartbeatTimer()
{
  return 0;
}

uint64_t variable initialization expression of OSActivity.activityState()
{
  return 0;
}

BOOL sub_10000312C(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

void type metadata accessor for UIInterfaceOrientationMask(uint64_t a1)
{
}

void type metadata accessor for RPDataLinkType(uint64_t a1)
{
}

__n128 initializeWithTake for Watchdog.DiagnosticState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100003170(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100003190(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for SidecarTransport(uint64_t a1)
{
}

void type metadata accessor for SidecarPacketType(uint64_t a1)
{
}

uint64_t sub_1000031F4(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000031FC(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_100003220(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

BOOL sub_100003238(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100003244(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_100003250(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

void sub_100003260(uint64_t a1@<X8>)
{
  sub_1000030BC();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_100003294@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RapportDeviceChangeFlags.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000032C0()
{
  return sub_10000364C(&qword_1000A1530, type metadata accessor for SidecarTransport);
}

BOOL sub_100003308(uint64_t *a1, uint64_t *a2)
{
  return == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int sub_100003314()
{
  return sub_10000331C(*v0);
}

Swift::Int sub_10000331C(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void sub_100003364(int a1)
{
  RapportDeviceChangeFlags.hash(into:)(a1, *v1);
}

Swift::Int sub_10000336C(uint64_t a1)
{
  return sub_100003374(a1, *v1);
}

Swift::Int sub_100003374(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

void *sub_1000033B8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1000033C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___s15SidecarTimeSync5ClockC14heartbeatTimer33_52E478E0294A7D1A30B0593D640BE43CLLSo24OS_dispatch_source_timer_pSgvpfi();
  *a1 = result;
  return result;
}

BOOL sub_1000033F0(uint64_t *a1)
{
  return sub_10000312C(*a1, *v1);
}

uint64_t sub_1000033FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000030B4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10000342C(uint64_t a1)
{
  uint64_t v2 = sub_10000387C(a1);
  uint64_t result = sub_10003ECFC(v2, v3);
  *uint64_t v1 = result;
  return result;
}

uint64_t sub_100003454@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003ED00(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100003484(uint64_t a1, void *a2)
{
  return sub_10005E1CC(a1, *a2);
}

uint64_t sub_10000348C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000031FC(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000034C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100003220(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000034F4(void *a1)
{
  return sub_10005E200(*a1);
}

uint64_t sub_1000034FC(void *a1)
{
  return sub_100050F84(*a1);
}

uint64_t sub_100003504(uint64_t *a1)
{
  return sub_10003ED18(*a1);
}

uint64_t sub_10000350C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000031F4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10000353C(void *a1)
{
  return sub_100050FA8(*a1, *v1);
}

BOOL sub_100003548(uint64_t *a1)
{
  return sub_100003238(*a1, *v1);
}

BOOL sub_100003554(uint64_t *a1)
{
  return sub_100050FAC(*a1, *v1);
}

BOOL sub_100003560()
{
  return sub_100003244(*v0);
}

uint64_t sub_100003568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100003580(uint64_t *a1)
{
  return sub_100003250(*a1);
}

void *sub_100003588@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100003594@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000030C4(a1);
  *a2 = result;
  return result;
}

void sub_1000035BC(void *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for CFData(uint64_t a1)
{
}

void type metadata accessor for SidecarStreamFlags(uint64_t a1)
{
}

void type metadata accessor for SidecarStreamType(uint64_t a1)
{
}

uint64_t sub_100003604()
{
  return sub_10000364C(&qword_1000A15B0, type metadata accessor for SidecarStreamFlags);
}

uint64_t sub_10000364C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003694()
{
  return sub_10000364C(&qword_1000A15B8, type metadata accessor for SidecarStreamFlags);
}

uint64_t sub_1000036DC()
{
  return sub_10000364C(&qword_1000A15C0, type metadata accessor for SidecarStreamFlags);
}

uint64_t sub_100003724()
{
  return sub_10000364C(&qword_1000A15C8, type metadata accessor for SidecarStreamFlags);
}

uint64_t initializeBufferWithCopyOfBuffer for Sockaddr(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *initializeWithCopy for Sockaddr(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t getEnumTagSinglePayload for Sockaddr(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Sockaddr(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
}

void sub_100003828(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000387C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10000388C()
{
  return _swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for EnhancedDiscoveryController()
{
  return self;
}

uint64_t sub_1000038E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1770);
  sub_100004964(v0, (uint64_t)qword_1000A1770);
  return Logger.init(subsystem:category:)();
}

id sub_100003968(char a1)
{
  uint64_t v3 = qword_1000A12D0;
  id v4 = v1;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A1770);
  id v6 = v4;
  v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_getObjectType();
    uint64_t v10 = _typeName(_:qualified:)();
    sub_100017070(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Loading %s. 'logErrorsWhenCalled' is set to: [%{BOOL}d]", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {
  }
  *((unsigned char *)v6 + OBJC_IVAR____TtC12SidecarRelay24SidecarRelayNullDelegate_logErrorsWhenCalled) = a1 & 1;

  v12 = (objc_class *)type metadata accessor for SidecarRelayNullDelegate();
  v15.receiver = v6;
  v15.super_class = v12;
  return [super init];
}

id sub_100003B5C(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(24);
  swift_getObjectType();
  uint64_t v5 = _typeName(_:qualified:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v19[0] = v5;
  v19[1] = v7;
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  sub_100004A00();
  v10._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v10);
  uint64_t v11 = v5;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC12SidecarRelay24SidecarRelayNullDelegate_logErrorsWhenCalled) == 1)
  {
    if (qword_1000A12D0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100004964(v12, (uint64_t)qword_1000A1770);
    swift_bridgeObjectRetain_n();
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      objc_super v15 = (uint8_t *)swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)objc_super v15 = 136380675;
      swift_bridgeObjectRetain();
      sub_100017070(v11, v7, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{private}s", v15, 0xCu);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_100021CF8(v16, v17, -999, v11, v7, 0);
}

void sub_100003DE4()
{
}

id sub_100003E24()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SidecarRelayNullDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for SidecarRelayNullDelegate()
{
  return self;
}

uint64_t sub_100003E80()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000017, v0);

  return swift_errorRelease();
}

uint64_t sub_100003F0C()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000021, v0);

  return swift_errorRelease();
}

uint64_t sub_100003F98()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000011, v0);

  return swift_errorRelease();
}

uint64_t sub_100004034()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000012, v0);

  return swift_errorRelease();
}

uint64_t sub_1000040B8()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000025, v0);

  return swift_errorRelease();
}

uint64_t sub_1000041D8()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000016, v0);
  swift_errorRelease();
  return 0;
}

void sub_100004254(uint64_t a1, void (**a2)(void, void, void))
{
  sub_100003B5C(0xD000000000000032, (void *)0x800000010007E100);
  sub_100004928(0, (unint64_t *)&unk_1000A1980);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v4 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, Class, void *))a2)[2](a2, isa, v4);

  swift_errorRelease();

  _Block_release(a2);
}

uint64_t sub_1000043B0(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, void *a6)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v14 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v14);
  id v15 = a1;
  sub_1000044D8((uint64_t)v13, (uint64_t)v15, (void (**)(void, void))v14, a5, a6);
  _Block_release(v14);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_1000044D8(uint64_t a1, uint64_t a2, void (**a3)(void, void), uint64_t a4, void *a5)
{
  sub_100003B5C(a4, a5);
  uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v6);

  swift_errorRelease();

  _Block_release(a3);
}

void sub_10000456C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  sub_100003B5C(0xD000000000000039, (void *)0x800000010007DFD0);
  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a4)[2](a4, v5);

  swift_errorRelease();

  _Block_release(a4);
}

void sub_100004680(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  sub_100003B5C(0xD00000000000001ELL, (void *)0x800000010007DFB0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, Class, void *))a4)[2](a4, isa, v6);

  swift_errorRelease();

  _Block_release(a4);
}

uint64_t sub_1000047CC()
{
  sub_100004A00();
  sub_100003B5C(0xD000000000000022, v0);
  swift_errorRelease();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000048D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100004928(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100004964(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_10000499C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100004A0C()
{
  return swift_slowDealloc();
}

uint64_t sub_100004A24@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100004964(v2, (uint64_t)qword_1000AA248);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

id sub_100004ACC(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap] = 0;
  uint64_t v3 = OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities;
  type metadata accessor for UUID();
  _s7SessionC8IdentityVMa(0);
  sub_1000126FC((uint64_t)&unk_1000A1910);
  id v4 = v1;
  *(void *)&v1[v3] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v5 = OBJC_IVAR____TtC12SidecarRelay6Client_streams;
  type metadata accessor for Relay.Session(0);
  sub_1000116B8(&qword_1000A3150);
  sub_1000126FC((uint64_t)&unk_1000A1920);
  *(void *)&v4[v5] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v6 = OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners;
  sub_100012740();
  *(void *)&v4[v6] = Dictionary.init(dictionaryLiteral:)();
  *(void *)&v4[OBJC_IVAR____TtC12SidecarRelay6Client_connection] = a1;
  id v7 = a1;
  unsigned int v8 = [v7 processIdentifier];
  *(_DWORD *)&v4[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier] = v8;

  v28.receiver = v4;
  v28.super_class = (Class)type metadata accessor for Client();
  id v9 = [super init];
  uint64_t v10 = self;
  id v11 = v9;
  id v12 = [v10 interfaceWithProtocol:&OBJC_PROTOCOL___SidecarRelay_Interface];
  [v7 setExportedInterface:v12];

  [v7 setExportedObject:v11];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  v26 = sub_1000127C4;
  uint64_t v27 = v13;
  v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  v24 = sub_10005A66C;
  v25 = &unk_100095EB0;
  os_log_type_t v14 = _Block_copy(&v22);
  id v15 = v11;
  swift_release();
  [v7 setInterruptionHandler:v14];
  _Block_release(v14);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  v26 = sub_1000127E4;
  uint64_t v27 = v16;
  v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  v24 = sub_10005A66C;
  v25 = &unk_100095F00;
  uint64_t v17 = _Block_copy(&v22);
  id v18 = v15;
  swift_release();
  [v7 setInvalidationHandler:v17];
  _Block_release(v17);
  id v19 = [v10 interfaceWithProtocol:&OBJC_PROTOCOL___SidecarCore_Interface];
  [v7 setRemoteObjectInterface:v19];

  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  v20 = (void *)static OS_dispatch_queue.main.getter();
  [v7 _setQueue:v20];

  [v7 resume];
  return v18;
}

uint64_t sub_100004ECC(void *a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xC8))();
}

uint64_t sub_100004F20(void *a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
}

void sub_100004F74()
{
  sub_10001394C();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013B78();
  __chkstk_darwin(v7);
  id v9 = (char *)&v25 - v8;
  uint64_t v10 = &v0[OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap];
  sub_100013AD0();
  if (*(void *)v10 && SidecarMapTableGetCount())
  {
    sub_100013EE8();
    sub_10001399C();
    v11();
    id v12 = v2;
    uint64_t v13 = (void *)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (sub_100013CB8(v14))
    {
      id v15 = (float *)sub_100013C9C();
      sub_100013C8C(v15, 1.5047e-36);
      sub_100013E88(*(_DWORD *)&v12[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier]);

      sub_100013E28((void *)&_mh_execute_header, v16, v17, "PID %d: Terminated with Active Sessions");
      sub_100004A0C();
    }
    else
    {

      uint64_t v13 = v12;
    }
  }
  else
  {
    sub_100013EE8();
    sub_10001399C();
    v18();
    id v19 = v2;
    uint64_t v13 = (void *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (sub_100013CB8(v20))
    {
      v21 = (float *)sub_100013C9C();
      sub_100013C8C(v21, 1.5047e-36);
      sub_100013E88(*(_DWORD *)&v19[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier]);

      sub_100013E28((void *)&_mh_execute_header, v22, v23, "PID %d: Terminated");
      sub_100004A0C();
    }
    else
    {

      uint64_t v13 = v19;
    }
    id v9 = v1;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  v24 = *(void **)&v2[OBJC_IVAR____TtC12SidecarRelay6Client_connection];
  [v24 invalidate];
  [v24 setExportedObject:0];
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_100024588();
  sub_100013964();
}

void sub_10000520C()
{
}

void sub_100005218()
{
}

void sub_100005224()
{
  sub_10001394C();
  uint64_t v3 = v2;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v4);
  sub_1000139A8();
  sub_1000139E0();
  sub_10001399C();
  v5();
  uint64_t v6 = v0;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (sub_100013CB8(v8))
  {
    id v9 = (float *)sub_100013C9C();
    sub_100013C8C(v9, 1.5047e-36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v7, v1, v3, (uint8_t *)v9, 8u);
    sub_100004A0C();
  }
  else
  {

    uint64_t v7 = v6;
  }

  uint64_t v10 = sub_100013BCC();
  v11(v10);
  sub_100004F74();
  sub_100013964();
}

void sub_100005378(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100008070();
  if ((v7 & 1) != 0
    || (uint64_t v8 = v6,
        uint64_t v9 = a2[3],
        uint64_t v10 = a2[4],
        sub_1000116FC(a2, v9),
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10),
        v12 >> 60 == 15))
  {
    sub_100013C50();
  }
  else
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    [v3 relaySession:v8 receivedOPACKData:Data._bridgeToObjectiveC()().super.isa dataLink:*(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink)];
    sub_100012DAC(v13, v14);
    sub_100013C50();
  }
}

uint64_t sub_10000546C(uint64_t a1, void *a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC12SidecarRelay6Client_streams);
  sub_100013AD0();
  uint64_t v6 = *v5;
  if (*(void *)(*v5 + 16) && (unint64_t v7 = sub_1000406F8(), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  swift_retain();
  id v10 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = sub_10003F4C8(0, v9[2] + 1, 1, (uint64_t)v9);
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    uint64_t v9 = sub_10003F4C8((void *)(v11 > 1), v12 + 1, 1, (uint64_t)v9);
  }
  v9[2] = v12 + 1;
  uint64_t v13 = &v9[2 * v12];
  v13[4] = a1;
  v13[5] = v10;
  swift_beginAccess();
  swift_retain();
  sub_1000440B4();
  swift_endAccess();
  return swift_release();
}

void sub_1000055B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    type metadata accessor for RapportStreamSession();
    uint64_t v6 = (void **)(a3 + 40);
    while (1)
    {
      unint64_t v7 = *v6;
      if (static RapportRemoteDisplayDevice.== infix(_:_:)((uint64_t)*(v6 - 1), a1)) {
        break;
      }
      v6 += 2;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    id v10 = v7;
    sub_100008070();
    if (v11)
    {
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000139C0();
      sub_10001397C(v12, v13, -1020);
      sub_100013B20();
    }
  }
  else
  {
LABEL_5:
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_10001397C(v8, v9, -120);
    sub_100013B20();
  }
}

uint64_t sub_1000056F0@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v33 = a1;
  uint64_t v30 = a3;
  uint64_t v35 = sub_1000116B8(&qword_1000A1998);
  uint64_t v5 = __chkstk_darwin(v35);
  unint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  sub_10004DC90(v34, a2);
  uint64_t v10 = v34[0];
  int64_t v11 = v34[3];
  unint64_t v12 = v34[4];
  uint64_t v31 = v34[1];
  int64_t v32 = (unint64_t)(v34[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    uint64_t v19 = *(void *)(v10 + 48);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v9, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v15, v20);
    uint64_t v21 = *(void *)(v10 + 56);
    uint64_t v22 = _s7SessionC8IdentityVMa(0);
    sub_100012FC0(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v15, (uint64_t)&v9[*(int *)(v35 + 48)], (void (*)(void))_s7SessionC8IdentityVMa);
    sub_10001316C((uint64_t)v9, (uint64_t)v7, &qword_1000A1998);
    char v23 = v33(v7);
    if (v3)
    {
      sub_1000131C8((uint64_t)v7, &qword_1000A1998);
      return swift_release();
    }
    if (v23)
    {
      swift_release();
      uint64_t v25 = v30;
      sub_10001316C((uint64_t)v7, v30, &qword_1000A1998);
      uint64_t v26 = v25;
      uint64_t v27 = 0;
      return sub_100012E34(v26, v27, 1, v35);
    }
    uint64_t result = sub_1000131C8((uint64_t)v7, &qword_1000A1998);
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v32) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v32) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v18);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v18 = v11 + 3;
      if (v11 + 3 >= v32) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v18);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v18 = v11 + 4;
      if (v11 + 4 >= v32) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v18);
      if (v17)
      {
LABEL_12:
        int64_t v16 = v18;
      }
      else
      {
        int64_t v16 = v11 + 5;
        if (v11 + 5 >= v32) {
          goto LABEL_26;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v16);
        if (!v17)
        {
          int64_t v24 = v11 + 6;
          while (v24 < v32)
          {
            unint64_t v17 = *(void *)(v31 + 8 * v24++);
            if (v17)
            {
              int64_t v16 = v24 - 1;
              goto LABEL_13;
            }
          }
LABEL_26:
          uint64_t v28 = v30;
          swift_release();
          uint64_t v26 = v28;
          uint64_t v27 = 1;
          return sub_100012E34(v26, v27, 1, v35);
        }
      }
    }
LABEL_13:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100005A1C(uint64_t a1)
{
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_streams);
  sub_100013AD0();
  uint64_t v5 = *v4;
  uint64_t v23 = v5 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v5 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * i);
    uint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000055B4(a1, v16, v17);
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v3;
    }
    uint64_t v3 = v18;
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      swift_release();
      return v3;
    }
    uint64_t result = swift_release();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v10);
    if (!v14)
    {
      int64_t v15 = v10 + 1;
      if (v10 + 1 >= v24) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v24) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v15);
      if (v14)
      {
LABEL_14:
        int64_t v10 = v15;
        goto LABEL_15;
      }
      int64_t v15 = v10 + 3;
      if (v10 + 3 < v24)
      {
        unint64_t v14 = *(void *)(v23 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            int64_t v10 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_29;
            }
            if (v10 >= v24) {
              goto LABEL_26;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v10);
            ++v15;
            if (v14) {
              goto LABEL_15;
            }
          }
        }
        goto LABEL_14;
      }
LABEL_26:
      swift_release();
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000139C0();
      sub_10001397C(v21, v22, -120);
      sub_100013B20();
      return v3;
    }
LABEL_15:
    unint64_t v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_100005C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC12SidecarRelay6Client_streams;
  unint64_t result = sub_100013AD0();
  if (*(void *)(*(void *)v7 + 16))
  {
    unint64_t result = sub_1000406F8();
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = swift_bridgeObjectRetain();
      sub_100005D80(v10, a1, a2);
      if (*(void *)(v11 + 16))
      {
        sub_100013EC8();
        swift_retain();
        sub_1000440B4();
        swift_endAccess();
        return swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_100013EC8();
        sub_100043794(a3);
        swift_endAccess();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void sub_100005D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v15 = a1 + 32;
    do
    {
      unint64_t v6 = v5;
      while (1)
      {
        if (v6 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        long long v18 = *(_OWORD *)(v15 + 16 * v6);
        swift_retain();
        id v7 = *((id *)&v18 + 1);
        id v8 = [v7 identifier];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        if (v9 == a2 && v11 == a3)
        {

          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0) {
          break;
        }

        swift_release();
LABEL_12:
        if (v4 == ++v6) {
          goto LABEL_19;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100060C84();
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      if (v14 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100060C84();
      }
      unint64_t v5 = v6 + 1;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v14 + 4] = v18;
    }
    while (v4 - 1 != v6);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100005F6C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  sub_100043794(a1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_100008070();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v6;
    if (a2) {
      a2 = (void *)_convertErrorToNSError(_:)();
    }
    [v3 relaySession:v8 closedWithError:a2];
  }
}

uint64_t sub_100006020(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10002CDDC();
  uint64_t v10 = v5;
  v6._countAndFlagsBits = 15392;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10;
}

uint64_t sub_1000060B0(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100006114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_100006150(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000061C8()
{
  return sub_100006150(*v0);
}

uint64_t sub_1000061D4(int a1)
{
  return sub_1000060B0(a1, *v1);
}

Swift::Int sub_1000061E0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100006250()
{
  return sub_100006020(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_10000625C(uint64_t *a1, uint64_t *a2)
{
  return sub_100006114(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_100006278()
{
  Swift::UInt v1 = v0;
  uint64_t v2 = *v0;
  if ((v1[1] & 2) != 0) {
    unint64_t v3 = *(void *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
  }
  else {
    unint64_t v3 = 0;
  }
  if ((unint64_t)(v2 - 1) < 3) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = 0;
  }
  sub_100011870(v4);
  _StringGuts.grow(_:)(32);
  v5._countAndFlagsBits = 0x694C6D6165727453;
  v5._object = (void *)0xEF2072656E657473;
  String.append(_:)(v5);
  sub_1000116B8(&qword_1000A18F8);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 541869600;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  sub_1000063C0(v3);
  v7._countAndFlagsBits = 0x2044495550202CLL;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000063C0(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    id v1 = RPStreamFlagsCopyDescription(a1);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned int v4 = v3;

    v5._countAndFlagsBits = v2;
    v5._object = v4;
    String.append(_:)(v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000647C()
{
  return sub_100006278();
}

void sub_1000064B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100013C20();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  Swift::UInt v26 = v25;
  uint64_t v28 = v27;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v29);
  sub_100013AFC();
  sub_100008070();
  if (v30)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_10001397C(v55, v56, -1020);
    swift_willThrow();
  }
  else
  {
    sub_100004928(0, &qword_1000A1958);
    uint64_t v31 = swift_retain();
    id v32 = sub_1000249FC(v31);
    if (!v21)
    {
      v33 = v32;
      swift_retain();
      v62 = v33;
      id v34 = [v33 identifier];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      v38 = (uint64_t *)(v24 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners);
      sub_100013AD0();
      uint64_t v39 = *v38;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10002472C(v26, v35, v37, v39, (uint64_t)v63);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_10001316C((uint64_t)v63, (uint64_t)v64, &qword_1000A1950);
      if (v66)
      {
        char v41 = v64[8];
        uint64_t v40 = v65;
        swift_beginAccess();
        *(void *)(v28 + 32) = &off_100095E50;
        swift_unknownObjectWeakAssign();
        RapportStreamSession.delegatedProcessUPID.setter(v40);
        uint64_t v42 = 0;
        if ((v41 & 2) != 0) {
          uint64_t v42 = *(void *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
        }
        uint64_t v43 = *(void *)RapportStreamFlags.handoff.unsafeMutableAddressor();
        uint64_t v44 = RapportStreamSession.streamFlags.getter();
        RapportStreamSession.streamFlags.setter(v43 | v42 | v44);
        uint64_t v45 = sub_100006A00();
        unint64_t v47 = v46;
        sub_10001399C();
        v48();
        swift_retain_n();
        swift_bridgeObjectRetain();
        v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v60 = v45;
          uint64_t v51 = swift_slowAlloc();
          a10 = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136446466;
          os_log_type_t v61 = v50;
          swift_bridgeObjectRetain();
          sub_100017070(v60, v47, &a10);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v51 + 12) = 2082;
          swift_retain();
          uint64_t v52 = RapportStreamSession.description.getter();
          unint64_t v54 = v53;
          swift_release();
          sub_100017070(v52, v54, &a10);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v49, v61, "%{public}s: Prepare %{public}s", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy();
          sub_100004A0C();
          sub_100004A0C();
        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        sub_1000139EC();
        v59();
        sub_10000546C(v28, v62);

        swift_bridgeObjectRelease();
        swift_release();
        sub_100013124((uint64_t)v63);
      }
      else
      {
        sub_100004928(0, (unint64_t *)&qword_1000A17C0);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000139C0();
        sub_10001397C(v57, v58, -120);
        swift_willThrow();

        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  sub_100013C38();
}

uint64_t sub_100006A00()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 47;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  sub_1000126B0();
  sub_100013BC0();
  v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 541346128;
}

void sub_100006AC4()
{
  sub_100013C20();
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000116B8(&qword_1000A1990);
  __chkstk_darwin(v7 - 8);
  sub_100013D1C();
  uint64_t v8 = sub_1000116B8(&qword_1000A2EC0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v67 = (uint64_t)&v57 - v12;
  uint64_t v13 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v13 - 8);
  sub_1000139F8();
  uint64_t v14 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_100013F5C();
  uint64_t v66 = v18;
  unsigned int v19 = RapportStreamSession.trafficFlags.getter();
  RapportStreamSession.trafficFlags.setter(v19 & 0xFFFFBDFF);
  sub_100005A1C(v6);
  uint64_t v68 = v21;
  if (!v1)
  {
    uint64_t v62 = v14;
    uint64_t v63 = v16;
    uint64_t v59 = v3;
    uint64_t v60 = v11;
    uint64_t v64 = v2;
    id v65 = v20;
    uint64_t v61 = 0;
    uint64_t v22 = sub_100006A00();
    unint64_t v24 = v23;
    sub_10001399C();
    v25();
    swift_retain_n();
    swift_bridgeObjectRetain();
    Swift::UInt v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446466;
      int v58 = v28;
      swift_bridgeObjectRetain();
      sub_100017070(v22, v24, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2082;
      uint64_t v57 = v29 + 14;
      swift_retain();
      uint64_t v30 = RapportStreamSession.description.getter();
      unint64_t v32 = v31;
      swift_release();
      sub_100017070(v30, v32, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v58, "%{public}s: Accept %{public}s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    sub_1000139EC();
    v33();
    id v34 = v65;
    swift_retain();
    id v35 = [v34 identifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    swift_beginAccess();
    sub_100043A58(v37, (uint64_t)v70);
    swift_endAccess();
    sub_10001316C((uint64_t)v70, (uint64_t)&v71, &qword_1000A1950);
    v38 = v72;
    if (v72)
    {
      sub_100012FC0(v68 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v64, (void (*)(void))_s7SessionC8IdentityVMa);
      uint64_t v39 = (uint64_t *)(v4 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
      uint64_t v40 = sub_100013AD0();
      uint64_t v41 = *v39;
      __chkstk_darwin(v40);
      swift_bridgeObjectRetain();
      uint64_t v42 = v59;
      sub_1000056F0((uint64_t (*)(char *))sub_100013104, v41, v59);
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_1000116B8(&qword_1000A1998);
      if (sub_100012E5C(v42, 1, v43) == 1)
      {
        sub_1000131C8(v42, &qword_1000A1990);
        uint64_t v44 = type metadata accessor for UUID();
        sub_100012E34(v67, 1, 1, v44);
      }
      else
      {
        uint64_t v47 = v42 + *(int *)(v43 + 48);
        uint64_t v44 = type metadata accessor for UUID();
        sub_1000139D0();
        uint64_t v48 = v67;
        uint64_t v49 = sub_100013A10();
        v50(v49);
        sub_100012E34(v48, 0, 1, v44);
        sub_100012E84(v47, (void (*)(void))_s7SessionC8IdentityVMa);
      }
      uint64_t v51 = (uint64_t)v60;
      sub_100012ED8(v67, (uint64_t)v60, &qword_1000A2EC0);
      type metadata accessor for UUID();
      if (sub_100012E5C(v51, 1, v44) == 1)
      {
        sub_1000131C8(v51, &qword_1000A2EC0);
        uint64_t v52 = 0;
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v52 = UUID.uuidString.getter();
        uint64_t v53 = v54;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v51, v44);
      }
      RapportStreamSession.trafficSessionID.setter(v52, v53);
      sub_100013124((uint64_t)v70);
      id v55 = v65;
      id v56 = v65;
      v38(v55, 0);

      sub_100013124((uint64_t)v70);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100013124((uint64_t)v70);
      swift_release();
      sub_1000131C8(v67, &qword_1000A2EC0);
      sub_100012E84(v64, (void (*)(void))_s7SessionC8IdentityVMa);
    }
    else
    {
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000139C0();
      sub_10001397C(v45, v46, -120);
      sub_100013B20();

      swift_bridgeObjectRelease();
      swift_release_n();
    }
  }
  sub_100013C38();
}

uint64_t sub_100007274(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(sub_1000116B8(&qword_1000A1998) + 48);
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = _s7SessionC8IdentityVMa(0), *(void *)(v3 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20))))
  {
    char v5 = *(unsigned char *)(v3 + *(int *)(v4 + 24)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_100007310(uint64_t a1)
{
  sub_100005A1C(a1);

  swift_release();

  return sub_100006A00();
}

void sub_100007380()
{
}

void sub_10000738C()
{
}

void sub_100007398()
{
  sub_10001394C();
  id v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v4);
  sub_1000139A8();
  uint64_t v5 = sub_100007310(v3);
  unint64_t v7 = v6;
  sub_1000139E0();
  sub_10001399C();
  v8();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = sub_100013B38();
    uint64_t v15 = sub_100013AB8();
    *(_DWORD *)uint64_t v11 = 136446466;
    swift_bridgeObjectRetain();
    sub_100017070(v5, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2082;
    swift_retain();
    RapportStreamSession.description.getter();
    swift_release();
    sub_100013CF0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013DCC();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v1, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    sub_1000139EC();
    v12();
  }
  else
  {

    sub_100013DCC();
    swift_bridgeObjectRelease_n();
    uint64_t v13 = sub_100013EB4();
    v14(v13);
  }
  sub_100013964();
}

void sub_1000075DC()
{
  sub_10001394C();
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v0);
  uint64_t v1 = sub_100013B50();
  unint64_t v3 = v2;
  sub_1000139E0();
  sub_10001399C();
  v4();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (_DWORD *)sub_100013B38();
    uint64_t v13 = sub_100013AB8();
    _DWORD *v7 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_100017070(v1, v3, &v13);
    sub_100013A60(v8);
    sub_100013D54();
    sub_100013E48();
    RapportStreamSession.description.getter();
    sub_100013F3C();
    uint64_t v9 = sub_100013CF0();
    sub_100013C68(v9);
    sub_100013D9C();
    swift_bridgeObjectRelease();
    sub_100013D34((void *)&_mh_execute_header, v10, v11, "%{public}s: Received Message %{public}s");
    sub_100013DF0();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100013D9C();
    sub_100013D6C();
    sub_100013BCC();
  }
  sub_100013B14();
  v12();
  sub_100013964();
}

void sub_10000778C()
{
  sub_10001394C();
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v0);
  uint64_t v1 = sub_100013B50();
  unint64_t v3 = v2;
  sub_1000139E0();
  sub_10001399C();
  v4();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (_DWORD *)sub_100013B38();
    uint64_t v13 = sub_100013AB8();
    _DWORD *v7 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_100017070(v1, v3, &v13);
    sub_100013A60(v8);
    sub_100013D54();
    sub_100013E48();
    RapportStreamSession.description.getter();
    sub_100013F3C();
    uint64_t v9 = sub_100013CF0();
    sub_100013C68(v9);
    sub_100013D9C();
    swift_bridgeObjectRelease();
    sub_100013D34((void *)&_mh_execute_header, v10, v11, "%{public}s: Received Request %{public}s");
    sub_100013DF0();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100013D9C();
    sub_100013D6C();
    sub_100013BCC();
  }
  sub_100013B14();
  v12();
  sub_100013964();
}

void sub_10000793C()
{
  sub_10001394C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v4);
  sub_100013B78();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100005A1C(v3);
  uint64_t v8 = v7;
  swift_release();
  uint64_t v23 = sub_100006A00();
  unint64_t v10 = v9;
  id v11 = RapportStreamSession.statusFlags.getter();
  sub_100013EE8();
  sub_10001399C();
  v12();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v24))
  {
    uint64_t v22 = v6;
    uint64_t v14 = sub_100013B38();
    v25[0] = sub_100013AB8();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v20 = v13;
    swift_bridgeObjectRetain();
    sub_100017070(v23, v10, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    swift_retain();
    uint64_t v15 = RapportStreamSession.description.getter();
    id v21 = v11;
    unint64_t v17 = v16;
    swift_release();
    sub_100017070(v15, v17, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    id v11 = v21;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v24, "%{public}s: Status Changed %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    uint64_t v6 = v22;
    sub_100004A0C();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  sub_100013B14();
  v18();
  NSString v19 = [v8 identifier];
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v1 relaySession:v6 stream:v19 status:v11];

  sub_100013964();
}

void sub_100007D28()
{
  sub_10001394C();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100013B94();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - v7;
  sub_100005A1C(v1);

  swift_release();
  uint64_t v10 = sub_100006A00();
  unint64_t v12 = v11;
  sub_1000139E0();
  sub_10001399C();
  v13();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = sub_100013B38();
    uint64_t v23 = sub_100013AB8();
    v25[0] = v23;
    *(_DWORD *)uint64_t v17 = 136446466;
    int v22 = v16;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100017070(v10, v12, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013D54();
    *(_WORD *)(v17 + 12) = 2082;
    swift_retain();
    uint64_t v18 = RapportStreamSession.description.getter();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v24 = sub_100017070(v18, v20, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013DCC();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v22, "%{public}s: Connection Ready %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100013DCC();
    sub_100013D6C();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v2);
  sub_100013964();
}

uint64_t sub_100008070()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  sub_100013AD0();
  uint64_t result = *v1;
  if (*v1) {
    return SidecarMapTableGetHandle();
  }
  return result;
}

void sub_1000080D0()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    id v4 = *v0;
  }
  else
  {
    id v2 = (id)SidecarMapTableCreateStrong();
    void *v0 = v2;
    id v4 = v2;
    uint64_t v1 = 0;
  }
  id v3 = v1;
  SidecarMapTableReplaceObject();
}

uint64_t sub_100008158(uint64_t a1)
{
  id v3 = (id *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  sub_100013AD0();
  if (!*v3) {
    goto LABEL_9;
  }
  id v4 = *v3;
  if ((id)SidecarMapTableGetObject())
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
    sub_10001309C(&v8, v9);
  }
  else
  {

    memset(v9, 0, sizeof(v9));
  }
  a1 = sub_1000116B8(&qword_1000A2F20);
  type metadata accessor for Relay.Session(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v10 = 0;

LABEL_9:
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_10001397C(v5, v6, -1020);
    sub_100013B20();
    return a1;
  }
  a1 = v10;

  if (!a1) {
    goto LABEL_9;
  }
  return a1;
}

uint64_t sub_10000829C()
{
  swift_beginAccess();
  uint64_t v0 = sub_100008358();
  swift_endAccess();
  if (!v0)
  {
    uint64_t v0 = sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_10001397C(v1, v2, -1020);
    sub_100013B20();
  }
  return v0;
}

uint64_t sub_100008358()
{
  if (!*v0) {
    return 0;
  }
  id v1 = *v0;
  if ((id)SidecarMapTableRemoveObject())
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10001309C(&v5, v6);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000116B8(&qword_1000A2F20);
  type metadata accessor for Relay.Session(0);
  if ((swift_dynamicCast() & 1) == 0) {
    *(void *)&long long v5 = 0;
  }
  id v3 = *v0;
  if (!*v0) {
    goto LABEL_11;
  }
  uint64_t Count = SidecarMapTableGetCount();

  if (!Count)
  {
    id v1 = v3;
LABEL_11:

    id *v0 = 0;
  }
  return v5;
}

void sub_100008444()
{
}

id sub_100008484()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Client();
  return [super dealloc];
}

uint64_t type metadata accessor for Client()
{
  return self;
}

uint64_t sub_100008570()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_connection) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000116B8(&qword_1000A1908);
  swift_dynamicCast();
  return v3;
}

void sub_1000085F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (void *)sub_100008570();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100013BCC();
  [v5 relaySession:isa openedByDevice:a2 dataLink:a3 service:String._bridgeToObjectiveC()()];
  swift_unknownObjectRelease();

  sub_100013C50();
}

void sub_1000087D4()
{
  sub_10001394C();
  objc_super v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100013B94();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_100006A00();
  unint64_t v12 = v11;
  uint64_t v28 = v4;
  if (v2)
  {
    sub_100013E68();
    uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 176);
    uint64_t v15 = swift_errorRetain();
    uint64_t v16 = v14(v15);
    __chkstk_darwin(v16);
    sub_100013D0C();
    *(void *)(v17 - 16) = v10;
    *(void *)(v17 - 8) = v12;
    __chkstk_darwin(v18);
    sub_100013AE8();
    sub_100019968(sub_100013078, v19, (void (*)(void))sub_100013904);
    sub_100013BB0();
    v20();
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100013E68();
    sub_10001399C();
    v21();
    swift_bridgeObjectRetain();
    int v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v27 = v22;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = sub_100013E10();
      *(_DWORD *)uint64_t v24 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_100017070(v10, v12, &v29);
      sub_100013F08(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v23, "%{public}s: Closing Session", v24, 0xCu);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  }
  Swift::UInt v26 = (void *)sub_100008570();
  if (v2) {
    objc_super v2 = (void *)_convertErrorToNSError(_:)();
  }
  [v26 relaySession:v28 closedWithError:v2];
  swift_unknownObjectRelease();

  sub_100013964();
}

void sub_100008B40()
{
  sub_10001394C();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v8);
  sub_100013F5C();
  uint64_t v25 = v7;
  uint64_t v9 = sub_100006A00();
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return;
  }
  unint64_t v11 = v10;
  uint64_t v23 = v9;
  id v12 = RPDataLinkTypeCopyDescription(v1);
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  sub_10001399C();
  v15();
  sub_1000128FC(v5, v3);
  sub_1000128FC(v5, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v22 = v1;
    uint64_t v18 = sub_100013E10();
    uint64_t v26 = sub_100013AB8();
    *(_DWORD *)uint64_t v18 = 136446722;
    swift_bridgeObjectRetain();
    sub_100017070(v23, v11, &v26);
    sub_100013CD4();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2048;
    sub_100013A10();
    Data.count.getter();
    sub_100013DB4();
    sub_100013CD4();
    sub_100013DB4();
    *(_WORD *)(v18 + 22) = 2082;
    swift_bridgeObjectRetain();
    sub_100017070(v24, v14, &v26);
    sub_100013CD4();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: Received %ld bytes [%{public}s]", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy();
    sub_100004A0C();
    uint64_t v1 = v22;
    sub_100004A0C();
  }
  else
  {
    sub_100013DB4();
    swift_bridgeObjectRelease_n();
    sub_100013DB4();

    swift_bridgeObjectRelease_n();
  }
  sub_1000139EC();
  v19();
  unint64_t v20 = (void *)sub_100008570();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v20 relaySession:v25 receivedOPACKData:isa dataLink:v1];
  swift_unknownObjectRelease();

  sub_100013964();
}

void sub_100008F0C()
{
  sub_100013A4C();
  unint64_t v2 = (void *)sub_100008570();
  id v3 = String._bridgeToObjectiveC()();
  [v2 relaySession:v1 stream:v3 status:v0];
  swift_unknownObjectRelease();
}

void sub_100009014()
{
  sub_10001394C();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1000139A8();
  sub_1000139E0();
  sub_10001399C();
  v10();
  id v11 = v0;
  swift_bridgeObjectRetain_n();
  id v12 = v11;
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v19 = v5;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = sub_100013E10();
    *(_DWORD *)uint64_t v15 = 67109378;

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 8) = 2082;
    swift_bridgeObjectRetain();
    sub_100017070(v19, v3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "PID %d: Starting Service Extension '%{public}s' - NOT A PRESENTER", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v16 = sub_100013BCC();
    v18(v16, v17);
  }
  sub_100013964();
}

uint64_t sub_1000092E4()
{
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v1);
  sub_1000139A8();
  sub_1000139E0();
  sub_10001399C();
  v2();
  unint64_t v3 = v0;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PID %d: Terminate Service", v6, 8u);
    sub_100004A0C();
  }
  else
  {

    uint64_t v4 = v3;
  }

  uint64_t v7 = sub_100013EB4();
  v8(v7);
  [(id)sub_100008570() relayTerminateService];
  return swift_unknownObjectRelease();
}

uint64_t sub_1000094E8(uint64_t a1, uint64_t a2)
{
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void **)(qword_1000AA240 + 56);
  uint64_t result = (uint64_t)[v4 respondsToSelector:"fetchRemoteDisplaySendingDeviceStatesWithCompletion:"];
  if (result)
  {
    v7[4] = a1;
    v7[5] = a2;
    v7[0] = _NSConcreteStackBlock;
    sub_100013E7C();
    v7[2] = sub_100009600;
    v7[3] = &unk_100096298;
    uint64_t v6 = _Block_copy(v7);
    swift_unknownObjectRetain();
    swift_retain();
    [v4 fetchRemoteDisplaySendingDeviceStatesWithCompletion:v6, v7[0]];
    _Block_release(v6);
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

void sub_100009600(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_100004928(0, (unint64_t *)&unk_1000A1980);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_10000976C()
{
  sub_10001394C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100013D1C();
  uint64_t v15 = _Block_copy(v8);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  id v17 = v10;
  sub_10000986C(v0, v6, v16, v4, v2);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
  sub_100013964();
}

uint64_t sub_10000986C(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4, uint64_t a5)
{
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v9 = *(void **)(qword_1000AA240 + 56);
  uint64_t result = (uint64_t)[v9 respondsToSelector:*a4];
  if (result)
  {
    swift_unknownObjectRetain();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v13[4] = a2;
    v13[5] = a3;
    v13[0] = _NSConcreteStackBlock;
    sub_100013E7C();
    v13[2] = sub_10002451C;
    v13[3] = a5;
    uint64_t v12 = _Block_copy(v13);
    swift_retain();
    [v9 *a4:isa:v12:v13[0]];
    _Block_release(v12);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000099CC()
{
  sub_100013A4C();
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(qword_1000AA240 + 56);
  uint64_t result = (uint64_t)[v2 respondsToSelector:"fetchDeviceReadinessStatusWithIDSIdentifier:completion:"];
  if (result)
  {
    swift_unknownObjectRetain();
    sub_100013A10();
    NSString v4 = String._bridgeToObjectiveC()();
    v6[4] = v1;
    v6[5] = v0;
    v6[0] = _NSConcreteStackBlock;
    sub_100013E7C();
    _OWORD v6[2] = sub_10002451C;
    v6[3] = &unk_1000961A8;
    uint64_t v5 = _Block_copy(v6);
    swift_retain();
    [v2 fetchDeviceReadinessStatusWithIDSIdentifier:v4 completion:v5];
    _Block_release(v5);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100009BB4()
{
  sub_100013A4C();
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(qword_1000AA240 + 56);
  uint64_t result = (uint64_t)[v2 respondsToSelector:"sendDataRequest:completion:"];
  if (result)
  {
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v6[4] = v1;
    v6[5] = v0;
    v6[0] = _NSConcreteStackBlock;
    sub_100013E7C();
    _OWORD v6[2] = sub_10001F6EC;
    v6[3] = &unk_100096158;
    uint64_t v5 = _Block_copy(v6);
    swift_retain();
    [v2 sendDataRequest:isa completion:v5, v6[0]];
    _Block_release(v5);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

void sub_100009DB4(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = sub_100021CF8(v8, v9, -1000, 0, 0, 0);
  (*(void (**)(void))((swift_isaMask & *a1) + 0xB0))();
  uint64_t v16 = a1;
  id v14 = v10;
  sub_100019968(sub_100013014, (uint64_t)v15, (void (*)(void))sub_100013904);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  id v11 = v10;
  uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a2)[2](a2, v12);

  _Block_release(a2);
}

void sub_100009FBC(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = sub_100021CF8(v8, v9, -1000, 0, 0, 0);
  (*(void (**)(void))((swift_isaMask & *a1) + 0xB0))();
  uint64_t v16 = a1;
  id v14 = v10;
  sub_100019968(sub_100013910, (uint64_t)v15, (void (*)(void))sub_100013904);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  id v11 = v10;
  uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a2)[2](a2, v12);

  _Block_release(a2);
}

uint64_t sub_10000A1AC()
{
  uint64_t v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0._countAndFlagsBits = 541346128;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return v4;
}

void sub_10000A260(uint64_t a1, void *a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *a2) + 0xB0))(v8);
  id v11 = a2;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 67109376;
    int v20 = *(_DWORD *)((char *)&v11->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v14 + 8) = 2048;
    uint64_t v19 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PID %d: Service Presenter Ready (%lx) - NOT A PRESENTER", (uint8_t *)v14, 0x12u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v11;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = sub_100021CF8(v15, v16, -1001, 0, 0, 0);
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v18);

  _Block_release(a3);
}

void sub_10000A500()
{
  sub_10001394C();
  os_log_type_t v27 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100013AFC();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_1000139A8();
  sub_1000139E0();
  sub_10001399C();
  v16();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v4, v5);
  id v17 = v0;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = sub_100013E10();
    *(_DWORD *)uint64_t v20 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v20 + 8) = 2082;
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = sub_100017070(v21, v22, &v28);
    sub_100013F08(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013BB0();
    v24();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v27, (uint8_t *)v20, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    sub_1000139EC();
    v25();
  }
  else
  {

    sub_100013BB0();
    v26();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  }
  sub_100013964();
}

uint64_t sub_10000A784(void *a1)
{
  type metadata accessor for UUID();
  sub_100013930();
  __chkstk_darwin(v2);
  sub_100013AFC();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a1;
  sub_10000A500();

  uint64_t v4 = sub_100013A10();
  return v5(v4);
}

void sub_10000A840(uint64_t a1, void (**a2)(void, void))
{
  a2[2](a2, 0);

  _Block_release(a2);
}

void sub_10000A8A0(uint64_t a1, unint64_t a2, void *a3, void (**a4)(void, void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v10);
  uint64_t v13 = a3;
  swift_bridgeObjectRetain_n();
  uint64_t v14 = v13;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = a4;
    uint64_t v31 = v18;
    *(_DWORD *)uint64_t v17 = 67109378;
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    int v19 = *(_DWORD *)&v14[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

    LODWORD(v30) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v17 + 8) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_100017070(a1, a2, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "PID %d: '%{public}s'", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy();
    a4 = v29;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  BOOL v20 = a1 == 42 && a2 == 0xE100000000000000;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (qword_1000A1328 != -1) {
      goto LABEL_29;
    }
  }
  else if (qword_1000A1328 != -1)
  {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v21 = sub_100024C78();
    unint64_t v22 = v21;
    uint64_t v31 = (uint64_t)_swiftEmptyArrayStorage;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      if (!v23) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v23) {
        goto LABEL_26;
      }
    }
    sub_100004928(0, &qword_1000A1978);
    if (v23 >= 1) {
      break;
    }
    __break(1u);
LABEL_29:
    swift_once();
  }
  for (uint64_t i = 0; i != v23; ++i)
  {
    if ((v22 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    if (sub_100061E50())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100004928(0, &qword_1000A1978);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class, void))a4)[2](a4, isa, 0);
  swift_bridgeObjectRelease();

  _Block_release(a4);
}

void sub_10000AE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void (**a8)(void, void))
{
  v141 = a8;
  uint64_t v140 = a6;
  uint64_t v147 = a5;
  uint64_t v154 = a4;
  uint64_t v150 = a3;
  uint64_t v148 = _s7SessionC8IdentityVMa(0);
  uint64_t v11 = __chkstk_darwin(v148);
  uint64_t v127 = (uint64_t)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v130 = (uint64_t)&v124 - v13;
  uint64_t v14 = sub_1000116B8(&qword_1000A1970);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v131 = (uint64_t)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v138 = (uint64_t)&v124 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v133 = (uint64_t)&v124 - v20;
  __chkstk_darwin(v19);
  uint64_t v155 = (uint64_t)&v124 - v21;
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v152 = *(void *)(v22 - 8);
  uint64_t v153 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  v139 = (char *)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v129 = (uint64_t)&v124 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v143 = (char *)&v124 - v28;
  __chkstk_darwin(v27);
  uint64_t v132 = (uint64_t)&v124 - v29;
  uint64_t v30 = sub_1000116B8(&qword_1000A2EC0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v144 = (uint64_t)&v124 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  id v34 = (char *)&v124 - v33;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  v136 = (char *)&v124 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  v145 = (char *)&v124 - v40;
  __chkstk_darwin(v39);
  v142 = (char *)&v124 - v41;
  uint64_t v42 = type metadata accessor for SidecarIdentity();
  uint64_t v43 = __chkstk_darwin(v42 - 8);
  uint64_t v45 = (char *)&v124 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v48 = (char *)&v124 - v47;
  __chkstk_darwin(v46);
  os_log_type_t v50 = (char *)&v124 - v49;
  uint64_t v137 = a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v52 = sub_100012954(isa);

  uint64_t v128 = v52;
  uint64_t v149 = sub_100006A00();
  unint64_t v54 = v53;
  id v55 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  uint64_t v135 = v36 + 16;
  v134 = v55;
  v55(v50, v147, v35);
  uint64_t v147 = a2;
  sub_100012ED8(a2, (uint64_t)v34, &qword_1000A2EC0);
  int v56 = sub_100012E5C((uint64_t)v34, 1, v35);
  v151 = v50;
  uint64_t v156 = v54;
  uint64_t v146 = v36;
  if (v56 == 1)
  {
    v142 = (char *)v35;
    uint64_t v57 = sub_1000131C8((uint64_t)v34, &qword_1000A2EC0);
    (*(void (**)(uint64_t))((swift_isaMask & *a7) + 0xB0))(v57);
    sub_100012FC0((uint64_t)v50, (uint64_t)v45, (void (*)(void))type metadata accessor for SidecarIdentity);
    swift_bridgeObjectRetain_n();
    unint64_t v58 = v154;
    swift_bridgeObjectRetain_n();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      v159 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136446722;
      swift_bridgeObjectRetain();
      uint64_t v157 = sub_100017070(v149, v54, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v61 + 12) = 2082;
      uint64_t v62 = sub_10005A15C();
      uint64_t v157 = sub_100017070(v62, v63, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100012E84((uint64_t)v45, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(_WORD *)(v61 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v157 = sub_100017070(v150, v58, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%{public}s: Connecting to %{public}s '%{public}s'", (uint8_t *)v61, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100012E84((uint64_t)v45, (void (*)(void))type metadata accessor for SidecarIdentity);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v74 = v153;
    v75 = v143;
    v143 = *(char **)(v152 + 8);
    ((void (*)(char *, uint64_t))v143)(v75, v153);
    uint64_t v76 = v155;
    uint64_t v77 = v148;
    uint64_t v35 = (uint64_t)v142;
    uint64_t v78 = v146;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v142, v34, v35);
    Class v64 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v65 = sub_100012954(v64);

    uint64_t v66 = v132;
    (*(void (**)(void))((swift_isaMask & *a7) + 0xB0))();
    sub_100012FC0((uint64_t)v50, (uint64_t)v48, (void (*)(void))type metadata accessor for SidecarIdentity);
    swift_bridgeObjectRetain_n();
    unint64_t v67 = v154;
    swift_bridgeObjectRetain_n();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    int v70 = v69;
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v71 = swift_slowAlloc();
      v143 = (char *)swift_slowAlloc();
      v159 = v143;
      *(_DWORD *)uint64_t v71 = 136446978;
      HIDWORD(v126) = v70;
      swift_bridgeObjectRetain();
      uint64_t v157 = sub_100017070(v149, v156, (uint64_t *)&v159);
      uint64_t v125 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 12) = 2082;
      uint64_t v72 = sub_10005A15C();
      uint64_t v157 = sub_100017070(v72, v73, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100012E84((uint64_t)v48, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(_WORD *)(v71 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v157 = sub_100017070(v150, v67, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 32) = 2048;
      uint64_t v157 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v68, BYTE4(v126), "%{public}s: Reconnecting to %{public}s '%{public}s' (%lx)", (uint8_t *)v71, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_100012E84((uint64_t)v48, (void (*)(void))type metadata accessor for SidecarIdentity);
      swift_bridgeObjectRelease_n();
    }
    uint64_t v74 = v153;
    v143 = *(char **)(v152 + 8);
    ((void (*)(uint64_t, uint64_t))v143)(v66, v153);
    uint64_t v78 = v146;
    (*(void (**)(char *, uint64_t))(v146 + 8))(v142, v35);
    uint64_t v76 = v155;
    uint64_t v77 = v148;
  }
  uint64_t v79 = v144;
  v80 = v145;
  sub_100012ED8(v147, v144, &qword_1000A2EC0);
  if (sub_100012E5C(v79, 1, v35) == 1)
  {
    sub_1000131C8(v79, &qword_1000A2EC0);
    sub_100012E34(v76, 1, 1, v77);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v80, v79, v35);
    v83 = (void *)((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities);
    swift_beginAccess();
    uint64_t v84 = *v83;
    swift_bridgeObjectRetain();
    sub_1000247C8(v84, v76);
    swift_bridgeObjectRelease();
    uint64_t v85 = v133;
    sub_100012ED8(v76, v133, &qword_1000A1970);
    if (sub_100012E5C(v85, 1, v77) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1000131C8(v85, &qword_1000A1970);
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100021CF8(v86, v87, -1020, 0, 0, 0);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v35);
      sub_1000131C8(v76, &qword_1000A1970);
      v88 = v141;
      v89 = v139;
      v90 = (void (*)(char *, uint64_t))v143;
      v119 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a7) + 0xB0);
      uint64_t v120 = swift_errorRetain();
      uint64_t v121 = v119(v120);
      __chkstk_darwin(v121);
      sub_100019968(sub_10000C31C, 0, (void (*)(void))sub_100013904);
      v90(v89, v74);
      swift_errorRetain();
      v122 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))v88)[2](v88, v122);

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v123 = (uint64_t)v151;
      goto LABEL_27;
    }
    sub_1000131C8(v85, &qword_1000A1970);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v35);
  }
  unint64_t v91 = v156;
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_100025AE4((uint64_t)a7, v150, v154, (uint64_t)v151, v140, v76, v81, v82, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, (uint64_t)v134,
    v135);
  uint64_t v93 = v92;
  swift_beginAccess();
  sub_1000080D0();
  swift_endAccess();
  uint64_t v94 = v93 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  uint64_t v95 = (uint64_t)v136;
  v134(v136, v137, v35);
  uint64_t v96 = v138;
  sub_100012FC0(v94, v138, (void (*)(void))_s7SessionC8IdentityVMa);
  sub_100012E34(v96, 0, 1, v77);
  swift_beginAccess();
  sub_100021B78(v96, v95);
  uint64_t v97 = swift_endAccess();
  uint64_t v98 = v77;
  uint64_t v99 = v129;
  (*(void (**)(uint64_t))((swift_isaMask & *a7) + 0xB0))(v97);
  uint64_t v100 = v130;
  uint64_t v101 = v99;
  sub_100012FC0(v94, v130, (void (*)(void))_s7SessionC8IdentityVMa);
  swift_bridgeObjectRetain();
  v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc();
    uint64_t v154 = swift_slowAlloc();
    uint64_t v158 = v154;
    *(_DWORD *)uint64_t v104 = 136446466;
    swift_bridgeObjectRetain();
    v159 = (char *)sub_100017070(v149, v91, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v104 + 12) = 2082;
    uint64_t v105 = sub_10005A15C();
    unint64_t v107 = v106;
    uint64_t v108 = *(int *)(v98 + 20);
    if (*(unsigned char *)(v100 + *(int *)(v98 + 24))) {
      uint64_t v109 = 0x65746F6D6572;
    }
    else {
      uint64_t v109 = 0x6C61636F6CLL;
    }
    if (*(unsigned char *)(v100 + *(int *)(v98 + 24))) {
      v110 = (void *)0xE600000000000000;
    }
    else {
      v110 = (void *)0xE500000000000000;
    }
    uint64_t v156 = v104 + 14;
    v159 = *(char **)(v100 + v108);
    sub_1000129C4();
    uint64_t v111 = String.init<A>(_:radix:uppercase:)();
    v113 = v112;
    v159 = (char *)v105;
    unint64_t v160 = v107;
    v114._countAndFlagsBits = 58;
    v114._object = (void *)0xE100000000000000;
    String.append(_:)(v114);
    v115._countAndFlagsBits = v109;
    v115._object = v110;
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    v116._countAndFlagsBits = 58;
    v116._object = (void *)0xE100000000000000;
    String.append(_:)(v116);
    v117._countAndFlagsBits = v111;
    v117._object = v113;
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    v159 = (char *)sub_100017070((uint64_t)v159, v160, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100012E84(v130, (void (*)(void))_s7SessionC8IdentityVMa);
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "%{public}s: Connected %{public}s", (uint8_t *)v104, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v118 = v129;
  }
  else
  {
    swift_release();

    sub_100012E84(v100, (void (*)(void))_s7SessionC8IdentityVMa);
    swift_bridgeObjectRelease_n();
    uint64_t v118 = v101;
  }
  ((void (*)(uint64_t, uint64_t))v143)(v118, v153);
  v88 = v141;
  uint64_t v123 = (uint64_t)v151;
  v141[2](v141, 0);
  sub_1000131C8(v155, &qword_1000A1970);
LABEL_27:
  sub_100012E84(v123, (void (*)(void))type metadata accessor for SidecarIdentity);
  _Block_release(v88);
}

uint64_t sub_10000C31C()
{
  return 0x6E65704F20435058;
}

void sub_10000C558(uint64_t a1, uint8_t *a2, void *a3, void (**a4)(void, void))
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v32 = a1;
  uint64_t v14 = sub_100006A00();
  unint64_t v16 = v15;
  uint64_t v31 = v14;
  if (a2)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
    uint64_t v18 = swift_errorRetain();
    uint64_t v19 = v17(v18);
    uint64_t v20 = __chkstk_darwin(v19);
    *(&v27 - 2) = (uint8_t *)v14;
    *(&v27 - 1) = (uint8_t *)v16;
    __chkstk_darwin(v20);
    *(&v27 - 2) = a2;
    sub_100019968(sub_100012DF4, v21, (void (*)(void))sub_100013904);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    swift_errorRelease();
  }
  else
  {
    uint64_t v30 = v7;
    (*(void (**)(void))((swift_isaMask & *a3) + 0xB0))();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v35 = v28;
      uint64_t v29 = v8;
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v27 = v24 + 4;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100017070(v14, v16, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s: Close Session", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v25 = v29;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v25 = v8;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v30);
  }
  sub_10000829C();
  swift_bridgeObjectRelease();
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_100025F44();
  uint64_t v26 = v33;
  v33[2](v33, 0);
  swift_release();
  _Block_release(v26);
}

void sub_10000CB28(uint64_t a1, void *a2, void (**a3)(void, void))
{
  uint64_t v52 = a3;
  uint64_t v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v41 - v14;
  uint64_t v47 = a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100012954(isa);

  uint64_t v17 = sub_100006A00();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(void))((swift_isaMask & *a2) + 0xB0);
  uint64_t v48 = (swift_isaMask & *a2) + 176;
  uint64_t v49 = v20;
  v20();
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v46 = v7;
  uint64_t v50 = v17;
  uint64_t v51 = v13;
  if (v23)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v41 = v10;
    v54[0] = v25;
    uint64_t v42 = a2;
    *(_DWORD *)uint64_t v24 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_100017070(v17, (unint64_t)v19, v54);
    a2 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Deallocate Session", v24, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v41;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v15, v9);
  uint64_t v27 = (char *)a2 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionIdentities;
  swift_beginAccess();
  if (!*(void *)(*(void *)v27 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  sub_100040AD0();
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = 559;
    id v33 = sub_100021CF8(v31, v32, -1020, 0, 0, 0);
    uint64_t v34 = swift_willThrow();
    uint64_t v35 = (uint64_t)v51;
    uint64_t v36 = ((uint64_t (*)(uint64_t))v49)(v34);
    __chkstk_darwin(v36);
    id v39 = v33;
    swift_bridgeObjectRetain();
    sub_1000195CC((void (*)(void))sub_100013904, (uint64_t)(&v41 - 4), v35, v50, v19);
    swift_bridgeObjectRelease();
    v26((char *)v35, v9);
    id v37 = v33;
    uint64_t v38 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))v52)[2](v52, v38);

    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1000116B8((uint64_t *)&unk_1000A1960);
  uint64_t v29 = v43;
  uint64_t v30 = (uint64_t)v45;
  Dictionary._Variant.remove(at:)();
  sub_100012E84(v30, (void (*)(void))_s7SessionC8IdentityVMa);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v46);
  swift_endAccess();
  v52[2](v52, 0);
LABEL_9:
  _Block_release(v52);
}

void sub_10000D1E8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, const void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v34 - v14;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = a5;
  _Block_copy(a5);
  uint64_t v43 = a1;
  uint64_t v16 = sub_100006A00();
  unint64_t v18 = v17;
  uint64_t v19 = *(void (**)(void))((swift_isaMask & *a4) + 0xB0);
  uint64_t v39 = (swift_isaMask & *a4) + 176;
  uint64_t v40 = v19;
  v19();
  swift_bridgeObjectRetain();
  sub_1000128FC(a2, a3);
  swift_bridgeObjectRetain();
  sub_1000128FC(a2, a3);
  uint64_t v42 = v15;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  unint64_t v44 = v18;
  uint64_t v41 = v16;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    id v37 = a4;
    uint64_t v24 = v23;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v48 = v36;
    *(_DWORD *)uint64_t v24 = 136446466;
    os_log_t v35 = v20;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_100017070(v16, v18, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v38 = v13;
    uint64_t v25 = a5;
    uint64_t v26 = Data.count.getter();
    sub_1000048D0(a2, a3);
    uint64_t v47 = v26;
    a5 = v25;
    uint64_t v27 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000048D0(a2, a3);
    os_log_t v28 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, v21, "%{public}s: Send %ld Bytes", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v10);
  }
  else
  {
    sub_1000048D0(a2, a3);
    swift_bridgeObjectRelease_n();
    sub_1000048D0(a2, a3);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v10);
  }
  sub_100008158(v43);
  swift_bridgeObjectRelease();
  id v29 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v31 = a2;
  Class v32 = Int._bridgeToObjectiveC()().super.super.isa;
  [v29 setObject:isa forKeyedSubscript:v32];

  sub_1000128FC(v31, a3);
  id v33 = v29;
  sub_100012D98(v31, a3);
  sub_10004D694();

  swift_release();
  sub_100012DAC(v31, a3);

  sub_100012DAC(v31, a3);
  swift_release();
  _Block_release(a5);
}

void sub_10000D818(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, const void *a8)
{
  uint64_t v70 = a6;
  uint64_t v65 = a4;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v73 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v55[-v18];
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = a8;
  uint64_t v71 = a8;
  _Block_copy(a8);
  uint64_t v20 = sub_100006A00();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    swift_release();
    _Block_release(v71);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
  uint64_t v66 = a1;
  if (HIDWORD(a3)) {
    goto LABEL_17;
  }
  uint64_t v22 = v20;
  unint64_t v23 = v21;
  unint64_t v63 = v17;
  uint64_t ProcessUniqueID = SidecarGetProcessUniqueID();
  uint64_t v25 = *(void (**)(void))((swift_isaMask & *a7) + 0xB0);
  uint64_t v61 = (swift_isaMask & *a7) + 176;
  uint64_t v62 = v25;
  v25();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  BOOL v29 = os_log_type_enabled(v26, v27);
  uint64_t v59 = a2;
  unint64_t v60 = a5;
  unint64_t v64 = a3;
  uint64_t v67 = ProcessUniqueID;
  uint64_t v68 = v22;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v75[0] = v58;
    *(_DWORD *)uint64_t v30 = 136447234;
    os_log_t v57 = v26;
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_100017070(v22, v23, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    if (ProcessUniqueID == v70) {
      uint64_t v31 = 7239503;
    }
    else {
      uint64_t v31 = 0x66666F646E6148;
    }
    if (ProcessUniqueID == v70) {
      unint64_t v32 = 0xE300000000000000;
    }
    else {
      unint64_t v32 = 0xE700000000000000;
    }
    uint64_t v74 = sub_100017070(v31, v32, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_100017070(v65, a5, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 32) = 2082;
    id v33 = RPStreamTypeCopyDescription(a2);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v56 = v28;
    uint64_t v35 = v34;
    unint64_t v37 = v36;

    uint64_t v74 = sub_100017070(v35, v37, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 42) = 2082;
    id v38 = RPStreamFlagsCopyDescription(v64);
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v42 = v72;
    uint64_t v74 = sub_100017070(v39, v41, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v43 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "%{public}s: Open(%s) Stream '%{public}s', %{public}s <%{public}s>", (uint8_t *)v30, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v44 = v42;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v44 = v72;
  }
  (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v19, v73);
  uint64_t v45 = sub_100008158(v66);
  uint64_t v66 = sub_100004928(0, &qword_1000A1958);
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v68;
  uint64_t v48 = v69;
  v46[2] = a7;
  v46[3] = v47;
  uint64_t v49 = v67;
  v46[4] = v23;
  v46[5] = v49;
  uint64_t v50 = v70;
  v46[6] = v70;
  v46[7] = sub_100013898;
  uint64_t v51 = v65;
  v46[8] = v48;
  v46[9] = v51;
  uint64_t v52 = v60;
  v46[10] = v60;
  v46[11] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = a7;
  swift_retain();
  uint64_t v54 = swift_retain();
  sub_10002691C(v54, v59, v64, v50, v51, v52, (uint64_t)sub_100012CCC, (uint64_t)v46);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(v71);
}

uint64_t sub_10000DF90(uint64_t a1, int a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(id, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v64 = a8;
  uint64_t v60 = a7;
  unint64_t v61 = a5;
  uint64_t v62 = a9;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v63 = &v51[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  uint64_t v22 = &v51[-v21];
  unint64_t v23 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
  int v65 = a2;
  if (a2)
  {
    uint64_t v24 = swift_errorRetain();
    uint64_t v25 = v23(v24);
    uint64_t v26 = __chkstk_darwin(v25);
    unint64_t v27 = v61;
    *(void *)&v51[-32] = a4;
    *(void *)&v51[-24] = v27;
    uint64_t v28 = v60;
    *(void *)&v51[-16] = a6;
    *(void *)&v51[-8] = v28;
    __chkstk_darwin(v26);
    *(void *)&v51[-16] = a1;
    sub_100019968((uint64_t (*)(void))sub_1000138A0, v29, (void (*)(void))sub_100013904);
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v22, v17);
    swift_errorRetain();
    v64(0, a1);
    sub_100012D18(a1, 1);
  }
  else
  {
    uint64_t v55 = a4;
    uint64_t v30 = v60;
    uint64_t v58 = v18;
    uint64_t v59 = v17;
    uint64_t v31 = a11;
    uint64_t v56 = a12;
    uint64_t v57 = a10;
    uint64_t v32 = swift_retain();
    v23(v32);
    sub_100012D0C(a1, 0);
    unint64_t v33 = v61;
    swift_bridgeObjectRetain();
    sub_100012D0C(a1, 0);
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v54 = a11;
      uint64_t v38 = v37;
      uint64_t v67 = swift_slowAlloc();
      uint64_t v53 = a3;
      *(_DWORD *)uint64_t v38 = 136446722;
      int v52 = v36;
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_100017070(v55, v33, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v38 + 12) = 2080;
      if (a6 == v30) {
        uint64_t v39 = 7239503;
      }
      else {
        uint64_t v39 = 0x66666F646E6148;
      }
      if (a6 == v30) {
        unint64_t v40 = 0xE300000000000000;
      }
      else {
        unint64_t v40 = 0xE700000000000000;
      }
      uint64_t v66 = sub_100017070(v39, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 22) = 2082;
      swift_retain();
      uint64_t v41 = RapportStreamSession.description.getter();
      unint64_t v43 = v42;
      sub_100012D18(a1, 0);
      uint64_t v66 = sub_100017070(v41, v43, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100012D18(a1, 0);
      sub_100012D18(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v52, "%{public}s: Opened(%s) %{public}s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v31 = v54;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100012D18(a1, 0);
      sub_100012D18(a1, 0);
    }

    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v63, v59);
    uint64_t v44 = v64;
    uint64_t v45 = *(void **)(a1 + 16);
    id v46 = objc_allocWithZone((Class)SidecarStream);
    swift_bridgeObjectRetain();
    id v47 = v45;
    id v48 = sub_10001264C(v57, v31, v47);
    sub_10000546C(a1, v48);
    id v49 = v48;
    v44(v48, 0);
  }
  return sub_100012D18(a1, v65 & 1);
}

#error "10000E4EC: call analysis failed (funcsize=12)"

void sub_10000E4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_10000E56C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006A00();
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    uint64_t v15 = swift_willThrow();
    uint64_t v16 = v26;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v15);
    uint64_t v18 = __chkstk_darwin(v17);
    __chkstk_darwin(v18);
    sub_100019968(sub_100012C18, v19, (void (*)(void))sub_100013904);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v16);
    return swift_errorRelease();
  }
  uint64_t v25 = a6;
  if (!a1)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100021CF8(v22, v23, -120, 0, 0, 0);
    goto LABEL_3;
  }
  id v21 = a1;
  sub_100008158(a4);
  swift_bridgeObjectRelease();
  sub_10002EAB4(a5, v25, v21);

  return swift_release();
}

void sub_10000E848(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10000E924(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, const void *a8)
{
  uint64_t v64 = a4;
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v71 - 8);
  uint64_t v16 = __chkstk_darwin(v71);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = a8;
  uint64_t v70 = a8;
  _Block_copy(a8);
  uint64_t v67 = a1;
  uint64_t v69 = sub_100006A00();
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_release();
    _Block_release(v70);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_20;
  }
  uint64_t v60 = a2;
  if (HIDWORD(a3)) {
    goto LABEL_20;
  }
  unint64_t v22 = v21;
  unint64_t v63 = v18;
  uint64_t ProcessUniqueID = SidecarGetProcessUniqueID();
  uint64_t v24 = *(void (**)(void))((swift_isaMask & *a7) + 0xB0);
  uint64_t v62 = (swift_isaMask & *a7) + 176;
  v24();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  int v56 = v26;
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v55 = a5;
  uint64_t v66 = a6;
  unint64_t v65 = v22;
  uint64_t v61 = a3;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v74[0] = v54;
    *(_DWORD *)uint64_t v28 = 136447234;
    uint64_t v58 = v24;
    swift_bridgeObjectRetain();
    v73[0] = sub_100017070(v69, v22, v74);
    uint64_t v57 = ProcessUniqueID;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    if (v57 == a6) {
      uint64_t v29 = 7239503;
    }
    else {
      uint64_t v29 = 0x66666F646E6148;
    }
    if (v57 == a6) {
      unint64_t v30 = 0xE300000000000000;
    }
    else {
      unint64_t v30 = 0xE700000000000000;
    }
    v73[0] = sub_100017070(v29, v30, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2082;
    swift_bridgeObjectRetain();
    v73[0] = sub_100017070(v64, a5, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 32) = 2082;
    id v31 = RPStreamTypeCopyDescription(v60);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v15;
    unint64_t v34 = v33;

    v73[0] = sub_100017070(v32, v34, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 42) = 2082;
    id v35 = RPStreamFlagsCopyDescription(v61);
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    v73[0] = sub_100017070(v36, v38, v74);
    uint64_t v24 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v15 = v59;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v56, "%{public}s: Listen(%s) Stream '%{public}s', %{public}s <%{public}s>", (uint8_t *)v28, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  v39(v20, v71);
  Swift::UInt v40 = sub_100008158(v67);
  uint64_t v58 = v24;
  uint64_t v59 = v15;
  uint64_t v41 = (void *)((char *)a7 + OBJC_IVAR____TtC12SidecarRelay6Client_streamListeners);
  swift_beginAccess();
  uint64_t v42 = *v41;
  swift_retain_n();
  uint64_t v43 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = v64;
  sub_10002472C(v40, v64, v43, v42, (uint64_t)v72);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100013124((uint64_t)v72);
  sub_10001316C((uint64_t)v72, (uint64_t)v73, &qword_1000A1950);
  if (v73[3])
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100021CF8(v45, v46, -121, 0, 0, 0);
    swift_willThrow();
    swift_bridgeObjectRelease();
    uint64_t v47 = swift_release_n();
    id v48 = v63;
    uint64_t v49 = ((uint64_t (*)(uint64_t))v58)(v47);
    uint64_t v50 = __chkstk_darwin(v49);
    __chkstk_darwin(v50);
    sub_100019968((uint64_t (*)(void))sub_100012B7C, v51, (void (*)(void))sub_100013904);
    swift_bridgeObjectRelease();
    v39(v48, v71);
    swift_errorRetain();
    int v52 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void *))v70 + 2))(v70, 0, v52);

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v74[0] = v60;
    v74[1] = v61;
    v74[2] = v66;
    v74[3] = (uint64_t)sub_100012AB0;
    v74[4] = v68;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10004414C(v74, v40, v44, v43);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  _Block_release(v70);
}

void sub_10000F260(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_100013F1C();
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a6;
  v14._object = a7;
  String.append(_:)(v14);
  if (a3 == a4) {
    uint64_t v15 = 7239503;
  }
  else {
    uint64_t v15 = 0x66666F646E6148;
  }
  if (a3 == a4) {
    unint64_t v16 = 0xE300000000000000;
  }
  else {
    unint64_t v16 = 0xE700000000000000;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x64656C6961462029;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  sub_100013C50();
}

#error "10000F360: call analysis failed (funcsize=12)"

uint64_t sub_10000F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (*a21)(uint64_t))
{
  sub_10001394C();
  unint64_t v22 = v21;
  uint64_t v24 = _Block_copy(v23);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v24);
  id v25 = v22;
  uint64_t v26 = sub_100013A10();
  a21(v26);
  _Block_release(v24);

  sub_100013964();
  return swift_bridgeObjectRelease();
}

void sub_10000F428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, SEL *a9)
{
  NSString v15 = String._bridgeToObjectiveC()();
  uint64_t ProcessUniqueID = SidecarGetProcessUniqueID();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v9;
  v17[3] = a1;
  v17[4] = a4;
  v17[5] = a5;
  aBlock[4] = a7;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E848;
  aBlock[3] = a8;
  Swift::String v18 = _Block_copy(aBlock);
  id v19 = v9;
  swift_bridgeObjectRetain();
  swift_release();
  [v19 *a9:a1:a2:a3:v15:ProcessUniqueID:v18];
  _Block_release(v18);
}

uint64_t sub_10000F550(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  Swift::String v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006A00();
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    uint64_t v15 = swift_willThrow();
    uint64_t v16 = v26;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v15);
    uint64_t v18 = __chkstk_darwin(v17);
    __chkstk_darwin(v18);
    sub_100019968(sub_100012B48, v19, (void (*)(void))sub_100013904);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v16);
    return swift_errorRelease();
  }
  uint64_t v25 = a6;
  if (!a1)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100021CF8(v22, v23, -120, 0, 0, 0);
    goto LABEL_3;
  }
  id v21 = a1;
  sub_100008158(a4);
  swift_bridgeObjectRelease();
  sub_10002EAB4(a5, v25, v21);

  return swift_release();
}

uint64_t sub_10000F87C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, SEL *a10)
{
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  id v17 = a1;
  uint64_t v18 = sub_100013A10();
  sub_10000F428(v18, v19, a5, v14, v16, a7, a8, a9, a10);

  return swift_bridgeObjectRelease();
}

void sub_10000F934()
{
  sub_10001394C();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v6);
  sub_1000139F8();
  uint64_t v7 = sub_100006A00();
  unint64_t v9 = v8;
  sub_1000139E0();
  sub_10001399C();
  v10();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = sub_100013B38();
    v18[0] = sub_100013AB8();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_100017070(v7, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013D54();
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v14 = v3;
    sub_100017070(v3, v1, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: Close Stream '%{public}s'", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    sub_1000139EC();
    v15();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    sub_100013D6C();
    sub_1000139EC();
    v16();
    uint64_t v14 = v3;
  }
  uint64_t v17 = sub_100008158(v5);
  sub_100005C80(v14, v1, v17);
  swift_release();
  sub_100013964();
}

void sub_10000FC34(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v32 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  _Block_copy(a3);
  uint64_t v12 = sub_100006A00();
  unint64_t v14 = v13;
  uint64_t v15 = *(void (**)(void))((swift_isaMask & *a2) + 0xB0);
  uint64_t v30 = (swift_isaMask & *a2) + 176;
  id v31 = v15;
  v15();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v33 = v12;
  unint64_t v34 = v14;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = a1;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = a3;
    uint64_t v37 = v21;
    uint64_t v27 = v11;
    uint64_t v28 = v6;
    *(_DWORD *)uint64_t v20 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_100017070(v12, v14, &v37);
    uint64_t v11 = v27;
    uint64_t v6 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s: TimeSync Requested", v20, 0xCu);
    swift_arrayDestroy();
    a3 = v29;
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v6);
  sub_100008158(a1);
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = v33;
  v22[2] = a2;
  v22[3] = v23;
  v22[4] = v34;
  v22[5] = sub_100012AB0;
  v22[6] = v11;
  uint64_t v24 = a2;
  swift_retain();
  sub_100026B78();
  swift_release();
  swift_release();
  swift_release();
  _Block_release(a3);
}

uint64_t sub_1000100E4(uint64_t a1, int a2, void *a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  unint64_t v34 = a6;
  uint64_t v35 = a7;
  unint64_t v33 = a5;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v31 - v16;
  BOOL v18 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0);
  int v36 = a2;
  if (a2)
  {
    uint64_t v19 = swift_errorRetain();
    uint64_t v20 = v18(v19);
    uint64_t v21 = __chkstk_darwin(v20);
    unint64_t v22 = v33;
    *(&v31 - 2) = a4;
    *(&v31 - 1) = v22;
    __chkstk_darwin(v21);
    *(&v31 - 2) = a1;
    sub_100019968(sub_10001389C, v23, (void (*)(void))sub_100013904);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    type metadata accessor for Clock();
    uint64_t v24 = static Clock.nullClockIdentifier.getter();
    swift_errorRetain();
    v34(v24, a1);
    sub_100012D18(a1, 1);
  }
  else
  {
    uint64_t v31 = v12;
    uint64_t v32 = v11;
    uint64_t v25 = swift_retain();
    v18(v25);
    unint64_t v26 = v33;
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100017070(a4, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: TimeSync Enabled", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    v34(*(void *)(a1 + 24), 0);
  }
  return sub_100012D18(a1, v36 & 1);
}

uint64_t sub_10001047C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_100013F1C();
  v7._countAndFlagsBits = sub_100013A10();
  String.append(_:)(v7);
  v8._countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  return v10;
}

void sub_100010508(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  Swift::String v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
}

void sub_100010588(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)((char *)a1 + OBJC_IVAR____TtC12SidecarRelay6Client_connection) auditToken];
  long long v19 = *(_OWORD *)v22;
  long long v20 = *(_OWORD *)&v22[16];
  uint64_t v8 = xpc_copy_entitlement_for_token();
  swift_unknownObjectRelease();
  if (v8)
  {
    uint64_t v18 = v4;
    if (qword_1000A1328 != -1) {
      swift_once();
    }
    sub_100026D90();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    memcpy(v21, v22, sizeof(v21));
    sub_1000127EC();
    uint64_t v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v16 = v15;
    sub_100012838((uint64_t)v22);
    sub_1000128FC(v14, v16);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, void))a2)[2](a2, isa, 0);

    sub_1000048D0(v14, v16);
    sub_1000048D0(v14, v16);
    swift_release();
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100021CF8(v9, v10, -1000, 0, 0, 0);
    uint64_t v11 = swift_willThrow();
    uint64_t v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB0))(v11);
    __chkstk_darwin(v12);
    sub_100019968(sub_100010950, 0, (void (*)(void))sub_100013904);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRetain();
    uint64_t v13 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v13);

    swift_errorRelease();
    swift_errorRelease();
  }
  _Block_release(a2);
}

uint64_t sub_100010950()
{
  return 0x65736F6E67616944;
}

void sub_10001098C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
}

uint64_t destroy for Client.StreamListener()
{
  return swift_release();
}

uint64_t initializeWithCopy for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for Client.StreamListener(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[4];
  a1[3] = a2[3];
  a1[4] = v3;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Client.StreamListener(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.StreamListener(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.StreamListener(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.StreamListener()
{
  return &type metadata for Client.StreamListener;
}

uint64_t destroy for Client.StreamListenerKey()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s12SidecarRelay6ClientC17StreamListenerKeyVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Client.StreamListenerKey(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Client.StreamListenerKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for Client.StreamListenerKey(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.StreamListenerKey(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.StreamListenerKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.StreamListenerKey()
{
  return &type metadata for Client.StreamListenerKey;
}

unint64_t sub_100010D64()
{
  unint64_t result = qword_1000A1888;
  if (!qword_1000A1888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1888);
  }
  return result;
}

unint64_t sub_100010DB4()
{
  unint64_t result = qword_1000A1890;
  if (!qword_1000A1890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1890);
  }
  return result;
}

BOOL sub_100010E00(char a1, char a2)
{
  return a1 == a2;
}

void sub_100010E10(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100010E38(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656E657473696CLL && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 6580592 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x736D6165727473 && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t static RapportControlFlags.infraWiFi.getter()
{
  return 4;
}

Swift::Int sub_100010FEC(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100011034()
{
  return 0;
}

uint64_t sub_100011040(char a1)
{
  uint64_t result = 0x72656E657473696CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 6580592;
      break;
    case 2:
      uint64_t result = 0x736E6F6973736573;
      break;
    case 3:
      uint64_t result = 0x736D6165727473;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1000110D0(char *a1, char *a2)
{
  return sub_100010E00(*a1, *a2);
}

Swift::Int sub_1000110DC()
{
  return sub_100010FEC(*v0);
}

void sub_1000110E4(uint64_t a1)
{
  sub_100010E10(a1, *v1);
}

Swift::Int sub_1000110EC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100011130()
{
  return sub_100011040(*v0);
}

uint64_t sub_100011138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100010E38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100011160()
{
  return sub_100011034();
}

uint64_t sub_100011180@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static RapportControlFlags.infraWiFi.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000111A8(uint64_t a1)
{
  unint64_t v2 = sub_100011740();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000111E4(uint64_t a1)
{
  unint64_t v2 = sub_100011740();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100011220()
{
  sub_100013C20();
  unint64_t v2 = v1;
  uint64_t v3 = sub_1000116B8(&qword_1000A18B8);
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013AFC();
  uint64_t v9 = v8 - v7;
  sub_1000116FC(v2, v2[3]);
  sub_100011740();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000116B8(&qword_1000A18C8);
  sub_10001373C((uint64_t)&unk_1000A18D0);
  sub_100013A8C();
  if (!v0)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100013A8C();
    sub_1000116B8(&qword_1000A18D8);
    sub_1000117D4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  sub_100013C38();
}

void sub_1000113E8()
{
  sub_100013C20();
  unint64_t v2 = v1;
  sub_1000116B8(&qword_1000A19B8);
  sub_100013930();
  __chkstk_darwin(v3);
  sub_1000139F8();
  sub_1000116FC(v2, v2[3]);
  sub_100011740();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1000136EC((uint64_t)v2);
  }
  else
  {
    sub_1000116B8(&qword_1000A18C8);
    sub_10001373C((uint64_t)&qword_1000A19C0);
    sub_100013A1C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_100013A1C();
    sub_1000116B8(&qword_1000A18D8);
    sub_10001379C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100013B14();
    v4();
    swift_bridgeObjectRetain();
    sub_1000136EC((uint64_t)v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013C38();
}

void sub_100011660(uint64_t a1@<X8>)
{
  sub_1000113E8();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(_DWORD *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
}

void sub_100011694()
{
}

uint64_t sub_1000116B8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *sub_1000116FC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100011740()
{
  unint64_t result = qword_1000A18C0;
  if (!qword_1000A18C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A18C0);
  }
  return result;
}

uint64_t sub_10001178C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000117D4()
{
  unint64_t result = qword_1000A18E0;
  if (!qword_1000A18E0)
  {
    sub_10001178C(&qword_1000A18D8);
    sub_100013838((uint64_t)&qword_1000A2FC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A18E0);
  }
  return result;
}

const char *sub_100011870(unsigned int a1)
{
  if (a1 > 3) {
    return "?";
  }
  else {
    return off_100096450[a1];
  }
}

void sub_100011894()
{
  sub_100013AD0();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_100011FA4(v1);
  swift_bridgeObjectRelease();
  unint64_t v65 = sub_100028784(v2);
  uint64_t v66 = v0;
  uint64_t v3 = (id *)(v0 + OBJC_IVAR____TtC12SidecarRelay6Client_sessionMap);
  sub_100013AD0();
  id v4 = *v3;
  id v5 = *v3;
  sub_100060E28();
  id v71 = v5;
  sub_1000123A4(v4);
  if (v7 == v8 >> 1)
  {
LABEL_2:

    swift_unknownObjectRelease();
    uint64_t v9 = sub_100028784((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v10 = (uint64_t *)(v66 + OBJC_IVAR____TtC12SidecarRelay6Client_streams);
    sub_100013AD0();
    uint64_t v11 = *v10;
    uint64_t v12 = *(void *)(*v10 + 16);
    uint64_t v13 = _swiftEmptyArrayStorage;
    if (!v12)
    {
LABEL_25:
      uint64_t v44 = sub_1000287A4((uint64_t)v13);
      if (!v65[2]) {
        swift_bridgeObjectRelease();
      }
      if (!v9[2]) {
        swift_bridgeObjectRelease();
      }
      if (!v44[2]) {
        swift_bridgeObjectRelease();
      }
      return;
    }
    uint64_t v64 = v9;
    swift_bridgeObjectRetain();
    sub_100060F18();
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v15 = sub_10004DCCC(v11);
    uint64_t v16 = 0;
    char v18 = v17 & 1;
    uint64_t v68 = v12;
    uint64_t v69 = v11 + 64;
    uint64_t v67 = v11;
    while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(unsigned char *)(v11 + 32))
    {
      if (((*(void *)(v69 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
        goto LABEL_47;
      }
      if (*(_DWORD *)(v11 + 36) != v14) {
        goto LABEL_48;
      }
      char v70 = v18;
      uint64_t v72 = v14;
      uint64_t v73 = v16;
      v75 = v13;
      uint64_t v19 = *(void *)(*(void *)(v11 + 56) + 8 * v15);
      uint64_t v20 = *(void *)(*(void *)(v11 + 48) + 8 * v15) + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
      swift_retain();
      swift_bridgeObjectRetain();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_100012954(isa);

      sub_1000126B0();
      sub_100013BC0();
      v22._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v23 = _s7SessionC8IdentityVMa(0);
      if (*(unsigned char *)(v20 + *(int *)(v23 + 24))) {
        uint64_t v24 = 0x65746F6D6572;
      }
      else {
        uint64_t v24 = 0x6C61636F6CLL;
      }
      if (*(unsigned char *)(v20 + *(int *)(v23 + 24))) {
        uint64_t v25 = (void *)0xE600000000000000;
      }
      else {
        uint64_t v25 = (void *)0xE500000000000000;
      }
      sub_1000129C4();
      sub_100013BC0();
      uint64_t v26 = String.init<A>(_:radix:uppercase:)();
      os_log_type_t v28 = v27;
      sub_100013D84();
      v29._countAndFlagsBits = v24;
      v29._object = v25;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      sub_100013D84();
      v30._countAndFlagsBits = v26;
      v30._object = v28;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v19 + 16);
      if (v31)
      {
        sub_100060E78();
        uint64_t v32 = (void **)(v19 + 40);
        do
        {
          unint64_t v33 = *v32;
          swift_retain();
          id v34 = v33;
          uint64_t v35 = RapportStreamSession.description.getter();
          uint64_t v37 = v36;

          swift_release();
          unint64_t v38 = _swiftEmptyArrayStorage[2];
          if (v38 >= _swiftEmptyArrayStorage[3] >> 1) {
            sub_100060E78();
          }
          _swiftEmptyArrayStorage[2] = v38 + 1;
          uint64_t v39 = &_swiftEmptyArrayStorage[2 * v38];
          v39[4] = v35;
          v39[5] = v37;
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v11 = v67;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      uint64_t v13 = v75;
      unint64_t v40 = v75[2];
      if (v40 >= v75[3] >> 1)
      {
        sub_100060F18();
        uint64_t v13 = v75;
      }
      uint64_t v16 = v73 + 1;
      v13[2] = v40 + 1;
      uint64_t v41 = &v13[3 * v40];
      v41[4] = 542327881;
      v41[5] = 0xE400000000000000;
      v41[6] = _swiftEmptyArrayStorage;
      uint64_t v42 = sub_10004DCD0(v15, v72, v70 & 1, v11);
      uint64_t v15 = v42;
      char v18 = v43 & 1;
      if (v73 + 1 == v68)
      {
        sub_100012A10(v42, v14, v18);
        swift_bridgeObjectRelease();
        uint64_t v9 = v64;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  else
  {
    int64_t v45 = v7;
    unint64_t v46 = v8 >> 1;
    unint64_t v74 = v8 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v76 = v8 >> 1;
    uint64_t v47 = (uint64_t *)(v6 + 16 * v7 + 8);
    while (v45 < (uint64_t)(v8 >> 1))
    {
      if ((uint64_t)v46 <= v45) {
        goto LABEL_50;
      }
      if (v8 >> 1 < v46) {
        goto LABEL_51;
      }
      uint64_t v48 = *v47;
      sub_1000129C4();
      swift_retain();
      uint64_t v49 = String.init<A>(_:radix:uppercase:)();
      uint64_t v77 = v50;
      uint64_t v78 = v49;
      uint64_t v51 = v48 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
      Class v52 = UUID._bridgeToObjectiveC()().super.isa;
      sub_100012954(v52);

      sub_1000126B0();
      sub_100013BC0();
      v53._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      uint64_t v54 = _s7SessionC8IdentityVMa(0);
      if (*(unsigned char *)(v51 + *(int *)(v54 + 24))) {
        uint64_t v55 = 0x65746F6D6572;
      }
      else {
        uint64_t v55 = 0x6C61636F6CLL;
      }
      if (*(unsigned char *)(v51 + *(int *)(v54 + 24))) {
        int v56 = (void *)0xE600000000000000;
      }
      else {
        int v56 = (void *)0xE500000000000000;
      }
      sub_100013BC0();
      uint64_t v57 = String.init<A>(_:radix:uppercase:)();
      uint64_t v59 = v58;
      sub_100013D84();
      v60._countAndFlagsBits = v55;
      v60._object = v56;
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      sub_100013D84();
      v61._countAndFlagsBits = v57;
      v61._object = v59;
      String.append(_:)(v61);
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v62 = _swiftEmptyArrayStorage[2];
      if (v62 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100060E28();
      }
      ++v45;
      _swiftEmptyArrayStorage[2] = v62 + 1;
      unint64_t v63 = &_swiftEmptyArrayStorage[4 * v62];
      v63[4] = v78;
      v63[5] = v77;
      v63[6] = 542327881;
      v63[7] = 0xE400000000000000;
      v47 += 2;
      unint64_t v8 = v74;
      unint64_t v46 = v76;
      if (v76 == v45) {
        goto LABEL_2;
      }
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t sub_100011FA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  sub_100060E28();
  uint64_t v2 = &_swiftEmptyArrayStorage;
  uint64_t v4 = sub_10004DCCC(a1);
  if (v4 < 0 || (unint64_t v6 = v4, v4 >= 1 << *(unsigned char *)(a1 + 32)))
  {
LABEL_24:
    __break(1u);
  }
  else
  {
    uint64_t v7 = a1 + 64;
    while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      if (v5 != *(_DWORD *)(a1 + 36)) {
        goto LABEL_26;
      }
      int v35 = v5;
      uint64_t v36 = v2;
      uint64_t v34 = v1;
      uint64_t v8 = *(void *)(a1 + 48) + 24 * v6;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(void **)(v8 + 16);
      uint64_t v11 = (uint64_t *)(*(void *)(a1 + 56) + 40 * v6);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10002CDDC();
      uint64_t v37 = v14;
      uint64_t v38 = v15;
      v16._countAndFlagsBits = 15392;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRetain();
      v17._countAndFlagsBits = v9;
      v17._object = v10;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 62;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      if ((unint64_t)(v13 - 1) < 3) {
        unsigned int v19 = v13;
      }
      else {
        unsigned int v19 = 0;
      }
      sub_100011870(v19);
      if ((v12 & 2) != 0) {
        unint64_t v20 = *(void *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
      }
      else {
        unint64_t v20 = 0;
      }
      _StringGuts.grow(_:)(32);
      v21._countAndFlagsBits = 0x694C6D6165727453;
      v21._object = (void *)0xEF2072656E657473;
      String.append(_:)(v21);
      sub_1000116B8(&qword_1000A18F8);
      _print_unlocked<A, B>(_:_:)();
      v22._countAndFlagsBits = 541869600;
      v22._object = (void *)0xE400000000000000;
      String.append(_:)(v22);
      if (HIDWORD(v20)) {
        goto LABEL_30;
      }
      id v23 = RPStreamFlagsCopyDescription(v20);
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 0x2044495550202CLL;
      v28._object = (void *)0xE700000000000000;
      String.append(_:)(v28);
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v2 = v36;
      unint64_t v30 = v36[2];
      if (v30 >= v36[3] >> 1)
      {
        sub_100060E28();
        uint64_t v2 = v36;
      }
      v2[2] = v30 + 1;
      uint64_t v31 = &v2[4 * v30];
      v31[4] = v37;
      v31[5] = v38;
      v31[6] = 0;
      v31[7] = 0xE000000000000000;
      if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(a1 + 32))) {
        goto LABEL_27;
      }
      uint64_t v7 = a1 + 64;
      if ((*(void *)(a1 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
        goto LABEL_28;
      }
      if (v35 != *(_DWORD *)(a1 + 36)) {
        goto LABEL_29;
      }
      uint64_t v32 = _HashTable.occupiedBucket(after:)();
      --v1;
      if (v34 == 1) {
        return (uint64_t)v2;
      }
      unint64_t v6 = v32;
      if ((v32 & 0x8000000000000000) == 0)
      {
        int v5 = *(_DWORD *)(a1 + 36);
        if (v32 < 1 << *(unsigned char *)(a1 + 32)) {
          continue;
        }
      }
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000123A4(void *a1)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (!a1)
  {
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  id v3 = a1;
  uint64_t Count = SidecarMapTableGetCount();
  int v5 = _swiftEmptyArrayStorage;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || Count > _swiftEmptyArrayStorage[3] >> 1)
  {
    if (_swiftEmptyArrayStorage[2] <= Count) {
      int64_t v7 = Count;
    }
    else {
      int64_t v7 = _swiftEmptyArrayStorage[2];
    }
    int v5 = sub_10003F828(isUniquelyReferenced_nonNull_native, v7, 0, (uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v15 = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v15;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100012A38;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100012A4C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001F0CC;
  aBlock[3] = &unk_100095F78;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  SidecarMapTableIterateObjects();

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v13 = sub_100012A38;
    uint64_t v2 = v15;
LABEL_11:
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    sub_100012A1C((uint64_t)v13);
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

void *sub_1000125B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100012A54(a2, (uint64_t)v10);
  type metadata accessor for Relay.Session(0);
  swift_dynamicCast();
  sub_10003F394();
  int v5 = *(void **)(*a3 + 16);
  uint64_t result = sub_10003F458(v5);
  uint64_t v7 = *a3;
  *(void *)(v7 + 16) = (char *)v5 + 1;
  uint64_t v8 = v7 + 16 * (void)v5;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = v9;
  *a3 = v7;
  return result;
}

id sub_10001264C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithIdentifier:v5 rapportStream:a3];

  return v6;
}

unint64_t sub_1000126B0()
{
  unint64_t result = qword_1000A1900;
  if (!qword_1000A1900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1900);
  }
  return result;
}

unint64_t sub_1000126FC(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100012740()
{
  unint64_t result = qword_1000A3140;
  if (!qword_1000A3140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3140);
  }
  return result;
}

uint64_t sub_10001278C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000127C4()
{
  return sub_100004ECC(*(void **)(v0 + 16));
}

uint64_t sub_1000127CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000127DC()
{
  return swift_release();
}

uint64_t sub_1000127E4()
{
  return sub_100004F20(*(void **)(v0 + 16));
}

unint64_t sub_1000127EC()
{
  unint64_t result = qword_1000A1940;
  if (!qword_1000A1940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1940);
  }
  return result;
}

uint64_t sub_100012838(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000128FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100012954(void *a1)
{
  id v1 = a1;
  v4[0] = 0;
  v4[1] = 0;
  [v1 getUUIDBytes:v4];
  unsigned int v2 = v4[0];

  return bswap32(v2);
}

unint64_t sub_1000129C4()
{
  unint64_t result = qword_1000A2E60;
  if (!qword_1000A2E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2E60);
  }
  return result;
}

uint64_t sub_100012A10(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100012A1C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100012A2C()
{
  return sub_100013B0C(v0, 24);
}

void *sub_100012A38(uint64_t a1, uint64_t a2)
{
  return sub_1000125B0(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100012A40()
{
  return sub_100013B0C(v0, 32);
}

uint64_t sub_100012A4C(uint64_t a1, uint64_t a2)
{
  return sub_10001F0A4(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100012A54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100012AB0(uint64_t a1, uint64_t a2)
{
  sub_10000E4FC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100012AB8()
{
  return sub_100013BFC(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)": TimeSync Failed");
}

uint64_t sub_100012ADC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100012B24(uint64_t a1, char a2)
{
  return sub_1000100E4(a1, a2 & 1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100012B3C(void *a1, uint64_t a2)
{
  return sub_10000F550(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100012B48()
{
  sub_100013DE4();
  return sub_10001047C(v0, v1, 20, 0xD000000000000014, v2);
}

void sub_100012B7C()
{
  sub_10000F260(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), 17, 0x6E657473694C203ALL, (void *)0xE900000000000028);
}

uint64_t sub_100012BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100012BCC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100012C0C(void *a1, uint64_t a2)
{
  return sub_10000E56C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100012C18()
{
  return sub_100013BD8(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)": Open(Own) Failed");
}

void sub_100012C3C()
{
  sub_10000F260(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), 15, 0x286E65704F203ALL, (void *)0xE700000000000000);
}

uint64_t sub_100012C74()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100012CCC(uint64_t a1, char a2)
{
  return sub_10000DF90(a1, a2 & 1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void (**)(id, uint64_t))(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t sub_100012D0C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_100012D18(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_release();
  }
}

void sub_100012D24(uint64_t a1)
{
  sub_10005ADC4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100012D2C()
{
  return sub_10001047C(*(void *)(v0 + 16), *(void *)(v0 + 24), 13, 0x4620646E6553203ALL, (void *)0xED000064656C6961);
}

uint64_t sub_100012D6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_errorRetain();
  return v1;
}

uint64_t sub_100012D98(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000128FC(a1, a2);
  }
  return a1;
}

uint64_t sub_100012DAC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000048D0(a1, a2);
  }
  return a1;
}

uint64_t sub_100012DC0()
{
  sub_100013DE4();
  return sub_10001047C(v0, v1, 22, 0xD000000000000016, v2);
}

uint64_t sub_100012DF4()
{
  return sub_10001047C(*(void *)(v0 + 16), *(void *)(v0 + 24), 15, 0x2065736F6C43203ALL, (void *)0xEF6E6F6973736553);
}

uint64_t sub_100012E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100012E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100012E84(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000139D0();
  sub_1000139EC();
  v3();
  return a1;
}

uint64_t sub_100012ED8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000116B8(a3);
  sub_1000139D0();
  uint64_t v4 = sub_100013EF4();
  v5(v4);
  return a2;
}

uint64_t sub_100012F28()
{
  sub_100013DE4();
  return sub_10001047C(v0, v1, 21, 0xD000000000000015, v2);
}

uint64_t sub_100012F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012FC0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000139D0();
  uint64_t v4 = sub_100013EF4();
  v5(v4);
  return a2;
}

uint64_t sub_100013014()
{
  return sub_10000A1AC();
}

void sub_100013030(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100013038(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100013040()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100013078()
{
  return sub_100013BFC(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)": Closing Session");
}

_OWORD *sub_10001309C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000130AC()
{
  return sub_100013BD8(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)": Connection Ready");
}

uint64_t sub_1000130D0()
{
  sub_100013DE4();
  return sub_10001047C(v0, v1, 16, 0xD000000000000010, v2);
}

uint64_t sub_100013104(uint64_t a1)
{
  return sub_100007274(a1, *(void *)(v1 + 16)) & 1;
}

void *sub_100013124(uint64_t a1)
{
  uint64_t v2 = sub_100013EA8(a1);
  v3(v2, v1[1], v1[2], v1[3], v1[4]);
  return v1;
}

uint64_t sub_10001315C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001316C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000116B8(a3);
  sub_1000139D0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000131C8(uint64_t a1, uint64_t *a2)
{
  sub_1000116B8(a2);
  sub_1000139D0();
  sub_1000139EC();
  v3();
  return a1;
}

unsigned char *initializeBufferWithCopyOfBuffer for Client.DiagnosticState.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Client.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Client.DiagnosticState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100013378);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1000133A0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000133AC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Client.DiagnosticState.CodingKeys()
{
  return &type metadata for Client.DiagnosticState.CodingKeys;
}

uint64_t destroy for Client.DiagnosticState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Client.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Client.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Client.DiagnosticState(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for Client.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Client.DiagnosticState(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Client.DiagnosticState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Client.DiagnosticState()
{
  return &type metadata for Client.DiagnosticState;
}

unint64_t sub_100013600()
{
  unint64_t result = qword_1000A19A0;
  if (!qword_1000A19A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19A0);
  }
  return result;
}

unint64_t sub_100013650()
{
  unint64_t result = qword_1000A19A8;
  if (!qword_1000A19A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19A8);
  }
  return result;
}

unint64_t sub_1000136A0()
{
  unint64_t result = qword_1000A19B0;
  if (!qword_1000A19B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19B0);
  }
  return result;
}

uint64_t sub_1000136EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10001373C(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    sub_10001178C(&qword_1000A18C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10001379C()
{
  unint64_t result = qword_1000A19C8;
  if (!qword_1000A19C8)
  {
    sub_10001178C(&qword_1000A18D8);
    sub_100013838((uint64_t)&unk_1000A19D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19C8);
  }
  return result;
}

unint64_t sub_100013838(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    sub_10001178C(&qword_1000A18F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

id sub_10001397C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100021CF8(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_100013A10()
{
  return v0;
}

uint64_t sub_100013A1C()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100013A60(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100013A8C()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100013AB8()
{
  return swift_slowAlloc();
}

uint64_t sub_100013AD0()
{
  return swift_beginAccess();
}

uint64_t sub_100013B0C(uint64_t a1, uint64_t a2)
{
  return _swift_deallocObject(a1, a2, 7);
}

uint64_t sub_100013B20()
{
  return swift_willThrow();
}

uint64_t sub_100013B38()
{
  return swift_slowAlloc();
}

uint64_t sub_100013B50()
{
  return sub_100007310(v0);
}

uint64_t sub_100013BCC()
{
  return v0;
}

uint64_t sub_100013BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001047C(a1, a2, 18, 0xD000000000000012, (void *)((a3 - 32) | 0x8000000000000000));
}

uint64_t sub_100013BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001047C(a1, a2, 17, 0xD000000000000011, (void *)((a3 - 32) | 0x8000000000000000));
}

uint64_t sub_100013C68(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

float *sub_100013C8C(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_100013C9C()
{
  return swift_slowAlloc();
}

BOOL sub_100013CB8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100013CD4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100013CF0()
{
  return sub_100017070(v1, v0, (uint64_t *)(v2 - 88));
}

void sub_100013D34(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_100013D54()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100013D6C()
{
  return swift_bridgeObjectRelease_n();
}

void sub_100013D84()
{
  uint64_t v1 = 58;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100013D9C()
{
  return swift_release_n();
}

uint64_t sub_100013DB4()
{
  return sub_1000048D0(v1, v0);
}

uint64_t sub_100013DCC()
{
  return swift_release_n();
}

uint64_t sub_100013DF0()
{
  return swift_arrayDestroy();
}

uint64_t sub_100013E10()
{
  return swift_slowAlloc();
}

void sub_100013E28(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_100013E48()
{
  *(_WORD *)(v0 + 12) = 2082;
  return swift_retain();
}

uint64_t sub_100013E88@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v1 - 108) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100013EA8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100013EB4()
{
  return v0;
}

uint64_t sub_100013EC8()
{
  return swift_beginAccess();
}

uint64_t sub_100013EF4()
{
  return v0;
}

uint64_t sub_100013F08(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_100013F1C()
{
  uint64_t v1 = 0;
  unint64_t v2 = 0xE000000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100013F3C()
{
  *(void *)(v1 - 112) = v0;
  return swift_release();
}

uint64_t sub_100013F70()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1A40);
  sub_100004964(v0, (uint64_t)qword_1000A1A40);
  return Logger.init(subsystem:category:)();
}

void *sub_100013FF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  *((unsigned char *)v1 + 24) = 0;
  id v3 = [objc_allocWithZone((Class)RPCompanionLinkClient) init];
  v1[2] = v3;
  id v4 = v3;
  sub_100015150(0xD000000000000011, 0x800000010007E270, v4);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  Swift::String v17 = sub_1000151B8;
  uint64_t v18 = v5;
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_10005A66C;
  Swift::String v16 = &unk_1000964C0;
  os_log_type_t v6 = _Block_copy(&v13);
  swift_release();
  [v4 setInterruptionHandler:v6];
  _Block_release(v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  Swift::String v17 = sub_1000151F4;
  uint64_t v18 = v7;
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_10005A66C;
  Swift::String v16 = &unk_100096510;
  uint64_t v8 = _Block_copy(&v13);
  swift_release();
  [v4 setInvalidationHandler:v8];
  _Block_release(v8);
  type metadata accessor for RemoteDisplayReadinessRequestHandler();
  swift_allocObject();
  v1[4] = sub_10001B764();
  type metadata accessor for RemoteDisplayInitiationRequestHandler();
  swift_allocObject();
  uint64_t v9 = sub_100023DEC(v4);
  id v10 = v4;
  sub_10001522C((uint64_t)v9, v1);
  swift_release();
  uint64_t v11 = swift_retain();
  sub_1000154FC(v11, v1);
  swift_release();

  return v1;
}

void sub_100014254(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  if (qword_1000A12D8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A1A40);
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = a2();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a3, v7, 2u);
    sub_100004A0C();
  }
}

uint64_t sub_100014344()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 invalidate];

  swift_release();
  return v0;
}

uint64_t sub_100014384()
{
  sub_100014344();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CompanionLinkServer()
{
  return self;
}

void sub_1000143DC()
{
  if (*(unsigned char *)(v0 + 24))
  {
    if (qword_1000A12D8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100004964(v1, (uint64_t)qword_1000A1A40);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Activation requested, but it's already activated.", v3, 2u);
      sub_100004A0C();
    }
  }
  else
  {
    uint64_t v4 = v0;
    *(unsigned char *)(v0 + 24) = 1;
    if (qword_1000A12D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100004964(v5, (uint64_t)qword_1000A1A40);
    swift_retain_n();
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v9 = _typeName(_:qualified:)();
      uint64_t aBlock = sub_100017070(v9, v10, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      id v11 = [*(id *)(v4 + 16) serviceType];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v15 = 0;
      }
      uint64_t aBlock = v13;
      uint64_t v23 = v15;
      sub_1000116B8(&qword_1000A1B38);
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t aBlock = sub_100017070(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Activating a [%s] that handles requests to the [%s] service.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v18 = *(void **)(v4 + 16);
    uint64_t v26 = sub_100015130;
    uint64_t v27 = v4;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v23 = 1107296256;
    uint64_t v24 = sub_10002451C;
    uint64_t v25 = &unk_100096470;
    unsigned int v19 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v18 activateWithCompletion:v19];
    _Block_release(v19);
  }
}

void sub_1000147B4(uint64_t a1)
{
  if (a1)
  {
    if (qword_1000A12D8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100004964(v1, (uint64_t)qword_1000A1A40);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)id v3 = 136315138;
      swift_errorRetain();
      sub_1000116B8(&qword_1000A1B40);
      uint64_t v4 = String.init<A>(describing:)();
      sub_100017070(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Activation failed. Error: [%s]", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000A12D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100004964(v6, (uint64_t)qword_1000A1A40);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Activation successful.", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100014A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7, uint64_t a8)
{
  unint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v36 = a2;
  uint64_t v37 = a5;
  uint64_t v35 = a1;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000A12D8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100004964(v15, (uint64_t)qword_1000A1A40);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = a3;
    unsigned int v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = a8;
    uint64_t v39 = v20;
    *(_DWORD *)unsigned int v19 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100017070(v37, a6, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received a [%{public}s] request", v19, 0xCu);
    swift_arrayDestroy();
    a8 = v32;
    swift_slowDealloc();
    a3 = v31;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for OSActivity();
  swift_initStackObject();
  uint64_t v22 = sub_100018FB8((unint64_t)"com.apple.sidecar.handle_companion_link_request", 2, v21);
  sub_10001589C();
  *uint64_t v14 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  char v23 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v23 & 1) == 0) {
    __break(1u);
  }
  uint64_t v24 = v33[3];
  uint64_t v25 = v33[4];
  sub_1000116FC(v33, v24);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v37;
  v26[3] = a6;
  uint64_t v27 = v34;
  v26[4] = a3;
  v26[5] = v27;
  v26[6] = v22;
  v26[7] = a8;
  Swift::String v28 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t), void *, uint64_t, uint64_t))(v25 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v28(v35, v36, sub_100015924, v26, v24, v25);
  swift_release();
  return swift_release();
}

void sub_100014E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void, void, void))
{
  if (qword_1000A12D8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100004964(v12, (uint64_t)qword_1000A1A40);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = a6;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    sub_100017070(a4, a5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sending a response to a [%{public}s] request", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v16;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a6(a1, a2, a3);
  OSActivity.close()();
}

uint64_t sub_100015020(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = _Block_copy(a4);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  swift_retain();
  v6(v7, a3, sub_100015894, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100015130(uint64_t a1)
{
}

uint64_t sub_100015138(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015148()
{
  return swift_release();
}

void sub_100015150(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setServiceType:v4];
}

void sub_1000151B8()
{
  sub_100014254(*(void *)(v0 + 16), (uint64_t (*)(void))&static os_log_type_t.error.getter, "Connection interrupted.");
}

void sub_1000151F4()
{
  sub_100014254(*(void *)(v0 + 16), (uint64_t (*)(void))&static os_log_type_t.default.getter, "Connection invalidated.");
}

uint64_t sub_10001522C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  v17[3] = type metadata accessor for RemoteDisplayInitiationRequestHandler();
  v17[4] = &off_100096F68;
  v17[0] = a1;
  uint64_t v5 = qword_1000A12D8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100004964(v6, (uint64_t)qword_1000A1A40);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)&v16[0] = sub_100017070(0xD000000000000015, 0x800000010007E810, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registering CompanionLink request handler for requests with identifier [%s]", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v10 = (void *)a2[2];
  NSString v11 = String._bridgeToObjectiveC()();
  sub_1000157CC((uint64_t)v17, (uint64_t)v16);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0xD000000000000015;
  v12[3] = 0x800000010007E810;
  sub_100015834(v16, (uint64_t)(v12 + 4));
  v12[9] = v4;
  v15[4] = (uint64_t)sub_1000159B8;
  v15[5] = (uint64_t)v12;
  v15[0] = (uint64_t)_NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = (uint64_t)sub_100015020;
  v15[3] = (uint64_t)&unk_100096600;
  uint64_t v13 = _Block_copy(v15);
  swift_release();
  [v10 registerRequestID:v11 options:0 handler:v13];
  _Block_release(v13);

  return sub_1000136EC((uint64_t)v17);
}

uint64_t sub_1000154FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  v17[3] = type metadata accessor for RemoteDisplayReadinessRequestHandler();
  v17[4] = &off_100096840;
  v17[0] = a1;
  uint64_t v5 = qword_1000A12D8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100004964(v6, (uint64_t)qword_1000A1A40);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)&v16[0] = sub_100017070(0xD000000000000016, 0x800000010007E760, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registering CompanionLink request handler for requests with identifier [%s]", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v10 = (void *)a2[2];
  NSString v11 = String._bridgeToObjectiveC()();
  sub_1000157CC((uint64_t)v17, (uint64_t)v16);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0xD000000000000016;
  v12[3] = 0x800000010007E760;
  sub_100015834(v16, (uint64_t)(v12 + 4));
  v12[9] = v4;
  v15[4] = (uint64_t)sub_10001584C;
  v15[5] = (uint64_t)v12;
  v15[0] = (uint64_t)_NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = (uint64_t)sub_100015020;
  v15[3] = (uint64_t)&unk_100096560;
  uint64_t v13 = _Block_copy(v15);
  swift_release();
  [v10 registerRequestID:v11 options:0 handler:v13];
  _Block_release(v13);

  return sub_1000136EC((uint64_t)v17);
}

uint64_t sub_1000157CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100015834(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10001584C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014A5C(a1, a2, a3, a4, v4[2], v4[3], v4 + 4, v4[9]);
}

uint64_t sub_10001585C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100015894(uint64_t a1, objc_class *a2, uint64_t a3)
{
  sub_10005AE28(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t sub_10001589C()
{
  unint64_t result = qword_1000A1930;
  if (!qword_1000A1930)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A1930);
  }
  return result;
}

uint64_t sub_1000158DC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100015924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100014E04(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void (**)(void, void, void))(v3 + 32));
}

uint64_t sub_100015958()
{
  swift_bridgeObjectRelease();
  sub_1000136EC(v0 + 32);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000159BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000159CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1B48);
  sub_100004964(v0, (uint64_t)qword_1000A1B48);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100015A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(unsigned char *)(v4 + 24) = 0;
  type metadata accessor for CompanionLinkClient();
  sub_100017888(a3, (uint64_t)v10);
  *(void *)(v4 + 16) = CompanionLinkClient.__allocating_init(destination:serviceType:)((uint64_t)v10, 0xD000000000000011, 0x800000010007E270);
  swift_retain();
  uint64_t v11 = *(void *)RapportControlFlags.AWDL.unsafeMutableAddressor();
  uint64_t v12 = *(void *)RapportControlFlags.infraWiFi.unsafeMutableAddressor();
  uint64_t v13 = *(void *)RapportControlFlags.BLE.unsafeMutableAddressor();
  if (!v11)
  {
    if (!v12)
    {
      uint64_t v11 = 0;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v12 & ~v11) != 0) {
LABEL_5:
  }
    v11 |= v12;
  if ((v13 & ~v11) != 0) {
LABEL_7:
  }
    v11 |= v13;
LABEL_8:
  CompanionLinkClient.controlFlags.setter(v11);
  swift_release();
  sub_1000178EC(a3);
  return v4;
}

uint64_t sub_100015B94()
{
  CompanionLinkClient.cancel()();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100015BD0()
{
  sub_100015B94();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationRequest()
{
  return self;
}

uint64_t sub_100015C28(void (*a1)(void), uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v8);
  sub_100017C94();
  if (v2[3])
  {
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100004964(v9, (uint64_t)qword_1000A1B48);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Already attempted to send the request.  Will not try again.", v12, 2u);
      sub_100004A0C();
    }

    sub_100017994();
    swift_allocError();
    void *v13 = 0;
    a1();
    return swift_errorRelease();
  }
  else
  {
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100004964(v15, (uint64_t)qword_1000A1B48);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v37 = a1;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315906;
      uint64_t v36 = v16;
      type metadata accessor for CompanionLinkClient();
      os_log_type_t v35 = v17;
      RapportMessageable.serviceType.getter();
      sub_1000116B8(&qword_1000A1B38);
      uint64_t v19 = String.init<A>(describing:)();
      sub_100017070(v19, v20, &v38);
      sub_100017CAC();
      sub_100013DCC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      id v21 = CompanionLinkClient.controlFlags.getter();
      id v22 = RPControlFlagsCopyDescription((unint64_t)v21);
      uint64_t v23 = v7;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = a2;
      unint64_t v27 = v26;

      uint64_t v28 = v24;
      uint64_t v7 = v23;
      sub_100017070(v28, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100013DCC();
      a2 = v25;
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2080;
      CompanionLinkClient.destinationDevice.getter(v3);
      uint64_t v29 = String.init<A>(describing:)();
      sub_100017070(v29, v30, &v38);
      sub_100017CAC();
      sub_100013DCC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 32) = 2080;
      uint64_t v31 = v4[4];
      unint64_t v32 = v4[5];
      swift_bridgeObjectRetain();
      sub_100017070(v31, v32, &v38);
      sub_100017CAC();
      sub_100013DCC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v35, "Activating client.  serviceType: [%s].  controlFlags: [%s].  destinationDevice: [%s]. idsDeviceIdentifierOfLocalDevice: [%s].", (uint8_t *)v18, 0x2Au);
      swift_arrayDestroy();
      sub_100004A0C();
      a1 = v37;
      sub_100004A0C();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v33 = swift_allocObject();
    swift_weakInit();
    uint64_t v34 = (void *)swift_allocObject();
    v34[2] = v33;
    v34[3] = a1;
    v34[4] = a2;
    void v34[5] = v7;
    swift_retain();
    swift_retain();
    CompanionLinkClient.activate(completion:)((uint64_t)sub_100017988, (uint64_t)v34);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100016100(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  if (a1)
  {
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100004964(v7, (uint64_t)qword_1000A1B48);
    swift_retain_n();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v42 = a3;
      os_log_type_t v11 = (void *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412546;
      uint64_t v45 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v11 = v45;
      swift_errorRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_beginAccess();
      swift_weakLoadStrong();
      sub_1000116B8(&qword_1000A1C60);
      uint64_t v12 = String.init<A>(describing:)();
      sub_100017070(v12, v13, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client activation failed. Error: [%@].  Request: [%s]", (uint8_t *)v10, 0x16u);
      sub_1000116B8((uint64_t *)&unk_1000A21F0);
      swift_arrayDestroy();
      a3 = v42;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();

      swift_release_n();
    }
    sub_100017994();
    uint64_t v28 = swift_allocError();
    *uint64_t v29 = a1;
    swift_errorRetain();
    ((void (*)(uint64_t))a3)(v28);
    return swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100004964(v31, (uint64_t)qword_1000A1B48);
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "The request object has been deallocated.  Will not try to send the request.", v34, 2u);
      swift_slowDealloc();
    }

    sub_100017994();
    swift_allocError();
    *os_log_type_t v35 = 1;
    a3();
    return swift_errorRelease();
  }
  uint64_t v15 = (void *)Strong;
  sub_1000116B8(&qword_1000A3EC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100081790;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x800000010007EC30;
  uint64_t v17 = v15[5];
  *(void *)(inited + 48) = v15[4];
  *(void *)(inited + 56) = v17;
  swift_bridgeObjectRetain();
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  if (qword_1000A12E0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100004964(v19, (uint64_t)qword_1000A1B48);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315650;
    sub_100017070(0xD000000000000015, 0x800000010007E810, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v23 = Dictionary.description.getter();
    uint64_t v43 = a4;
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    sub_100017070(v23, v25, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    type metadata accessor for RemoteDisplayInitiationRequest();
    swift_retain();
    uint64_t v26 = String.init<A>(describing:)();
    sub_100017070(v26, v27, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a4 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "The client has been activated.  Sending request with request ID: [%s].  requestBody: [%s].  Request: [%s]", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v44 = v15[2];
  swift_retain();
  sub_100028874(v18);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;
  uint64_t v41 = (void *)swift_allocObject();
  v41[2] = v15;
  v41[3] = a3;
  v41[4] = a4;
  type metadata accessor for CompanionLinkClient();
  swift_retain();
  swift_retain();
  RapportMessageable.sendRequest(id:request:destinationID:options:response:)(0xD000000000000015, 0x800000010007E810, v37, v38, v40, 0, (uint64_t)sub_100017A34, (uint64_t)v41);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1000168AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100004964(v7, (uint64_t)qword_1000A1B48);
    swift_retain_n();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      os_log_type_t v11 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412546;
      uint64_t v12 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v11 = v12;
      swift_errorRelease();
      *(_WORD *)(v10 + 12) = 2080;
      type metadata accessor for RemoteDisplayInitiationRequest();
      swift_retain();
      uint64_t v13 = String.init<A>(describing:)();
      sub_100017070(v13, v14, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request failed with error: [%@].  Request: [%s]", (uint8_t *)v10, 0x16u);
      sub_1000116B8((uint64_t *)&unk_1000A21F0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();

      swift_release_n();
    }
    a5(a3);
    return swift_errorRelease();
  }
  else
  {
    if (qword_1000A12E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100004964(v15, (uint64_t)qword_1000A1B48);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      type metadata accessor for RemoteDisplayInitiationRequest();
      swift_retain();
      uint64_t v19 = String.init<A>(describing:)();
      sub_100017070(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Remote display initiation request completed successfully.  Request: [%s]", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return ((uint64_t (*)(void))a5)(0);
  }
}

void sub_100016CC0(uint64_t a1, const char *a2)
{
  uint64_t v4 = v2;
  if (qword_1000A12E0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A1B48);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = *(void *)(v4 + 32);
    unint64_t v10 = *(void *)(v4 + 40);
    swift_bridgeObjectRetain();
    sub_100017070(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    swift_release();
  }
}

void sub_100016E84(uint64_t a1)
{
}

void sub_100016EA4(uint64_t a1)
{
}

uint64_t sub_100016EC4()
{
  uint64_t v2 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v2);
  sub_100017C94();
  _StringGuts.grow(_:)(65);
  v3._countAndFlagsBits = 91;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  sub_1000116B8(&qword_1000A1C50);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000025;
  v5._object = (void *)0x800000010007EBE0;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + 32);
  os_log_type_t v7 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000010007EC10;
  v9._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v9);
  CompanionLinkClient.destinationDevice.getter(v1);
  v10._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 93;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t sub_10001704C()
{
  return sub_100016EC4();
}

uint64_t sub_100017070(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100017144(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100012A54((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100012A54((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000136EC((uint64_t)v12);
  return v7;
}

uint64_t sub_100017144(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10001729C((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100017374(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_10001729C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100017374(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10001740C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100017644(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100017644((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10001740C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100017580(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100017580(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000116B8(&qword_1000A1C40);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000175E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_100017CC8(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_100017CC8(v3);
    return v4 | 8;
  }
}

char *sub_100017644(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000116B8(&qword_1000A1C40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000177F4(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001771C(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10001771C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1000177F4(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100017888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompanionLinkDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000178EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompanionLinkDevice();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100017948()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100017980()
{
  return sub_1000179E8(48);
}

uint64_t sub_100017988(uint64_t a1)
{
  return sub_100016100(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_100017994()
{
  unint64_t result = qword_1000A1C58;
  if (!qword_1000A1C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1C58);
  }
  return result;
}

uint64_t sub_1000179E0()
{
  return sub_1000179E8(40);
}

uint64_t sub_1000179E8(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100017A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000168AC(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(uint64_t))(v3 + 24));
}

void *initializeBufferWithCopyOfBuffer for RemoteDisplayInitiationRequest.RequestError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for RemoteDisplayInitiationRequest.RequestError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for RemoteDisplayInitiationRequest.RequestError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteDisplayInitiationRequest.RequestError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RemoteDisplayInitiationRequest.RequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100017C48(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100017C60(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RemoteDisplayInitiationRequest.RequestError()
{
  return &type metadata for RemoteDisplayInitiationRequest.RequestError;
}

uint64_t sub_100017CAC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t sub_100017CC8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_100017CE0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1C68);
  sub_100004964(v0, (uint64_t)qword_1000A1C68);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100017D64()
{
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    swift_retain();
    CompanionLinkClient.cancel()();
    swift_release();
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100017DBC()
{
  sub_100017D64();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CompanionLinkDeviceDetector()
{
  return self;
}

uint64_t sub_100017E14@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  CompanionLinkClient.localDevice.getter(a1);

  return swift_release();
}

void sub_100017E5C()
{
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    swift_retain();
    CompanionLinkClient.cancel()();
    swift_release();
    type metadata accessor for CompanionLinkClient();
    *(void *)(v0 + 16) = CompanionLinkClient.__allocating_init()();
    swift_release();
    *(unsigned char *)(v0 + 24) = 0;
  }
  else
  {
    if (qword_1000A12E8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100004964(v1, (uint64_t)qword_1000A1C68);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "The network device detector has not been started.  Will not stop.", v3, 2u);
      sub_100004A0C();
    }
  }
}

void sub_100017F98(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v5);
  sub_100013AFC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_1000116B8(&qword_1000A1D98);
  __chkstk_darwin(v9);
  sub_100018DA8();
  uint64_t v10 = RapportEndpoint.idsDeviceIdentifier.getter(v5, (uint64_t)&protocol witness table for CompanionLinkDevice);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    uint64_t v14 = *(int *)(v9 + 48);
    sub_100017888(a1, v2);
    *(unsigned char *)(v2 + v14) = a2;
    PassthroughSubject.send(_:)();
    sub_100018D48(v2);
  }
  else
  {
    if (qword_1000A12E8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100004964(v15, (uint64_t)qword_1000A1C68);
    sub_100017888(a1, v8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v19 = String.init<A>(describing:)();
      sub_100017070(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      uint64_t v21 = CompanionLinkDevice.description.getter();
      sub_100017070(v21, v22, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000178EC(v8);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "A device with a nil 'idsDeviceIdentifier' device was [%{public}s]: [%{public}s].  Ignoring.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      sub_1000178EC(v8);
    }
  }
}

uint64_t getEnumTagSinglePayload for CompanionLinkDeviceDetector.DeviceObservationState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompanionLinkDeviceDetector.DeviceObservationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000183B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionLinkDeviceDetector.DeviceObservationState()
{
  return &type metadata for CompanionLinkDeviceDetector.DeviceObservationState;
}

unint64_t sub_1000183F4()
{
  unint64_t result = qword_1000A1D90;
  if (!qword_1000A1D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A1D90);
  }
  return result;
}

void sub_100018440(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v5 - 8);
  sub_100013AFC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100018DA8();
  if (qword_1000A12E8 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100004964(v9, (uint64_t)qword_1000A1C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v11, v9);
  sub_100017888(a1, v8);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {
    sub_1000178EC(v8);

    uint64_t v23 = sub_100018DC0();
    v24(v23);
    goto LABEL_7;
  }
  uint64_t v14 = swift_slowAlloc();
  uint64_t v25 = swift_slowAlloc();
  *(_DWORD *)uint64_t v14 = 136446466;
  uint64_t v15 = CompanionLinkDevice.description.getter();
  sub_100017070(v15, v16, &v25);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1000178EC(v8);
  *(_WORD *)(v14 + 12) = 2082;
  if (!HIDWORD(a2))
  {
    id v17 = RPDeviceChangeFlagsCopyDescription(a2);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    sub_100017070(v18, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "CompanionLink device 'changed': [%{public}s].  Flags: [%{public}s]", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    uint64_t v21 = sub_100018DC0();
    v22(v21);
LABEL_7:
    sub_100017F98(a1, 0);
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100018794(uint64_t a1, const char *a2, char a3)
{
  uint64_t v6 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v6 - 8);
  sub_100013AFC();
  uint64_t v9 = v8 - v7;
  if (qword_1000A12E8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100004964(v10, (uint64_t)qword_1000A1C68);
  sub_100017888(a1, v9);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v16 = a2;
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v13 = 136446210;
    uint64_t v14 = CompanionLinkDevice.description.getter();
    sub_100017070(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000178EC(v9);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v16, v13, 0xCu);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {
    sub_1000178EC(v9);
  }

  sub_100017F98(a1, a3);
}

void sub_100018990(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  if (qword_1000A12E8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A1C68);
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = a2();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a3, v7, 2u);
    sub_100004A0C();
  }
}

void sub_100018A80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v2 - 8);
  sub_100013AFC();
  uint64_t v5 = v4 - v3;
  if (qword_1000A12E8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100004964(v6, (uint64_t)qword_1000A1C68);
  sub_100017888(a1, v5);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v10 = CompanionLinkDevice.description.getter();
    sub_100017070(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000178EC(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLink local device changed: [%{public}s]", v9, 0xCu);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {
    sub_1000178EC(v5);
  }
}

void sub_100018C4C(uint64_t a1)
{
}

void sub_100018C70(uint64_t a1)
{
}

void sub_100018C94(uint64_t a1)
{
}

void sub_100018CC8(uint64_t a1)
{
}

void sub_100018CFC(uint64_t a1)
{
}

void sub_100018D30(uint64_t a1)
{
}

uint64_t sub_100018D48(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A1D98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100018DC0()
{
  return v0;
}

uint64_t sub_100018DD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1DA0);
  sub_100004964(v0, (uint64_t)qword_1000A1DA0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100018E54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100018E84()
{
  sub_100018E54();

  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for CompanionLinkDeviceDiscoveryProxy()
{
  return self;
}

Swift::Void __swiftcall OSActivity.close()()
{
  if (*(void *)(v0 + 16))
  {
    swift_beginAccess();
    os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
    swift_endAccess();
    *(void *)(v0 + 16) = 0;
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100018F3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A1ED0);
  sub_100004964(v0, (uint64_t)qword_1000A1ED0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100018FB8@<X0>(unint64_t a1@<X0>, char a2@<W2>, unint64_t a3@<X8>)
{
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 16) = sub_100019078(a1, (void *)&_mh_execute_header, a2, a3);
  swift_unknownObjectRelease();
  if (*(void *)(v3 + 16))
  {
    swift_beginAccess();
    uint64_t v4 = swift_unknownObjectRetain();
    os_activity_scope_enter(v4, (os_activity_scope_state_t)(v3 + 24));
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  return v3;
}

unint64_t sub_100019078@<X0>(unint64_t description@<X0>, void *dso@<X3>, char a3@<W2>, unint64_t a4@<X8>)
{
  if ((a3 & 1) == 0)
  {
    if (description)
    {
      sub_100019378((char *)description, dso, (os_activity_t *)descriptiona);
      return *(void *)descriptiona;
    }
    __break(1u);
    goto LABEL_13;
  }
  a4 = HIDWORD(description);
  if (HIDWORD(description))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (description >> 11 == 27)
  {
LABEL_22:
    __break(1u);
    return description;
  }
  LODWORD(a4) = WORD1(description);
  if (WORD1(description) > 0x10u)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((description & 0xFFFFFF80) != 0)
  {
LABEL_15:
    int v5 = (description & 0x3F) << 8;
    unsigned int v6 = (v5 | (description >> 6)) + 33217;
    unsigned int v7 = (v5 | (description >> 6) & 0x3F) << 8;
    unsigned int v8 = (((v7 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
    unsigned int v9 = (v7 | (description >> 12)) + 8487393;
    if (a4) {
      unsigned int v4 = v8;
    }
    else {
      unsigned int v4 = v9;
    }
    if (description < 0x800) {
      unsigned int v4 = v6;
    }
    goto LABEL_10;
  }
  if (description > 0xFF)
  {
    __break(1u);
    goto LABEL_22;
  }
  unsigned int v4 = (description + 1);
LABEL_10:
  *(void *)descriptiona = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v4) >> 3)) & 7)));
  sub_100019378(descriptiona, dso, &v10);
  return (unint64_t)v10;
}

uint64_t OSActivity.deinit()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 16))
  {
    if (qword_1000A12F8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100004964(v2, (uint64_t)qword_1000A1ED0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      int v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v5 = 0;
      swift_slowDealloc();
    }

    swift_beginAccess();
    os_activity_scope_leave((os_activity_scope_state_t)(v1 + 24));
    swift_endAccess();
    *(void *)(v1 + 16) = 0;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return v1;
}

uint64_t OSActivity.__deallocating_deinit()
{
  OSActivity.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10001933C()
{
  qword_1000A1EE8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

os_activity_t sub_100019378@<X0>(char *description@<X0>, void *dso@<X2>, os_activity_t *a3@<X8>)
{
  if (dso && description)
  {
    if (qword_1000A1300 != -1) {
      swift_once();
    }
    os_activity_t result = _os_activity_create(dso, description, (os_activity_t)qword_1000A1EE8, OS_ACTIVITY_FLAG_DEFAULT);
  }
  else
  {
    if (qword_1000A12F8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100004964(v7, (uint64_t)qword_1000A1ED0);
    unsigned int v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_activity_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)os_activity_t v10 = 136315138;
      uint64_t v11 = StaticString.description.getter();
      sub_100017070(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create OS Activity [%s].", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    os_activity_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for OSActivity()
{
  return self;
}

uint64_t sub_100019598()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SidecarRelayDelegateLoader()
{
  return self;
}

void sub_1000195CC(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a1();
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v8 = [v7 localizedDescription];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  unint64_t v28 = v12;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a4;
  v14._object = a5;
  String.append(_:)(v14);
  v15._object = (void *)0x800000010007EE30;
  v15._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v15);
  uint64_t v17 = v27;
  unint64_t v16 = v28;
  id v26 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446979;
    swift_bridgeObjectRetain();
    sub_100017070(v17, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2082;
    id v21 = [v26 domain];
    uint64_t v22 = v9;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    sub_100017070(v23, v25, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2048;
    [v26 code];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 32) = 2081;
    swift_bridgeObjectRetain();
    sub_100017070(v22, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void sub_100019968(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
  a3();
  os_log_type_t v4 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v5 = [v4 localizedDescription];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  uint64_t v9 = a1();
  if (v10)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    id v27 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446979;
      swift_bridgeObjectRetain();
      sub_100017070(v11, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2082;
      id v16 = [v27 domain];
      uint64_t v17 = v6;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      sub_100017070(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2048;
      [v27 code];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 32) = 2081;
      swift_bridgeObjectRetain();
      sub_100017070(v17, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v15, 0x2Au);
      swift_arrayDestroy();
LABEL_6:
      sub_100004A0C();
      sub_100004A0C();

      return;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v27 = v4;
    swift_bridgeObjectRetain();
    Swift::String v13 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446723;
      id v23 = [v27 domain];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      sub_100017070(v24, v26, &v28);
      sub_100019E54();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      [v27 code];

      sub_100019E54();
      *(_WORD *)(v22 + 22) = 2081;
      swift_bridgeObjectRetain();
      sub_100017070(v6, v8, &v28);
      sub_100019E54();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v21, "%{public}s (%ld) %{private}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();
}

uint64_t sub_100019E54()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100019E70(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v10 = type metadata accessor for RapportRemoteDisplayDevice();
      if (RapportEndpoint.idsDeviceIdentifier.getter(v10, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice) == a2&& v11 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v8;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_16;
      }
      swift_release();
      ++v7;
      if (v9 == v6) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10001A000()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A2040);
  sub_100004964(v0, (uint64_t)qword_1000A2040);
  return Logger.init(subsystem:category:)();
}

void sub_10001A088(uint64_t a1, uint64_t a2, void (*a3)(void, void, id))
{
  if (qword_1000A1308 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100004964(v4, (uint64_t)qword_1000A2040);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "This platform does not support readiness requests.", v7, 2u);
    swift_slowDealloc();
  }

  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = sub_100021CF8(v8, v9, -999, 0, 0, 0);
  a3(0, 0, v10);
}

uint64_t sub_10001A204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  __chkstk_darwin(v10);
  uint64_t v20 = sub_10001BBB8();
  sub_100013930();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10001BB98();
  os_log_type_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = v9;
  aBlock[4] = sub_10001BAC8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_100096948;
  uint64_t v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10001BAD8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  uint64_t v16 = sub_10001BBE0();
  v17(v16);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5, v20);
  return swift_release();
}

void sub_10001A468(uint64_t a1, unint64_t a2, void (*a3)(void, void, void))
{
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  unint64_t v6 = sub_100024C78();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100019E70(v6, a1, a2);
  swift_bridgeObjectRelease();
  if (v7)
  {
    sub_100004928(0, &qword_1000A1978);
    swift_retain();
    id v8 = sub_100061E50();
    if (v8)
    {
      uint64_t v9 = v8;
      if (qword_1000A1308 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100004964(v10, (uint64_t)qword_1000A2040);
      id v11 = v9;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
        unint64_t v30 = a3;
        uint64_t v15 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v14 = 138477827;
        v31[0] = (uint64_t)v11;
        id v16 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v15 = v9;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully received a readiness ping. We should be able to start Sidecar with: [%{private}@]", v14, 0xCu);
        sub_1000116B8((uint64_t *)&unk_1000A21F0);
        swift_arrayDestroy();
        a3 = v30;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v25 = 0;
    }
    else
    {
      if (qword_1000A1308 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100004964(v21, (uint64_t)qword_1000A2040);
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        v31[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136380675;
        swift_bridgeObjectRetain();
        sub_100017070(a1, a2, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Could not convert device with an IDS identifier of [%{private}s]. Responding with Error.", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v11 = sub_100021CF8(v28, v29, -999, 0, 0, 0);
      id v25 = v11;
    }
    a3(0, 0, v25);
    swift_release();
  }
  else
  {
    if (qword_1000A1308 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100004964(v17, (uint64_t)qword_1000A2040);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136380675;
      swift_bridgeObjectRetain();
      sub_100017070(a1, a2, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Could not find a device with an IDS identifier of [%{private}s]. Responding with Error.", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = sub_100021CF8(v26, v27, -200, 0, 0, 0);
    a3(0, 0, v11);
  }
}

uint64_t sub_10001AAA4(uint64_t a1, uint64_t a2)
{
  return sub_10001AD34(a1, a2, (uint64_t)&unk_1000968E0, (uint64_t)sub_10001BA7C, (uint64_t)&unk_1000968F8);
}

uint64_t sub_10001AACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    swift_beginAccess();
    uint64_t v7 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v8 = sub_10002486C(a2, a3, v7);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = type metadata accessor for RemoteDisplayReadinessRequestHandler.ExpiringResponse();
        uint64_t v11 = *(void *)(v10 - 8);
        unint64_t v12 = v8 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v13 = *(void *)(v11 + 72);
        do
        {
          if (*(void *)(v12 + *(int *)(v10 + 20)))
          {
            swift_getObjectType();
            OS_dispatch_source.cancel()();
          }
          os_log_type_t v14 = (uint64_t *)(v12 + *(int *)(v10 + 24));
          uint64_t v15 = *v14;
          if (*v14)
          {
            uint64_t v16 = v14[1];
            if (swift_weakLoadStrong())
            {
              swift_retain();
              sub_10001A204(a2, a3, v15, v16);
              sub_100012A1C(v15);
              swift_release();
            }
          }
          v12 += v13;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        swift_beginAccess();
        sub_100043D30(a2, a3);
        swift_endAccess();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_10001AD0C(uint64_t a1, uint64_t a2)
{
  return sub_10001AD34(a1, a2, (uint64_t)&unk_100096890, (uint64_t)sub_10001BA14, (uint64_t)&unk_1000968A8);
}

uint64_t sub_10001AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  __chkstk_darwin(v8);
  uint64_t v20 = sub_10001BBB8();
  sub_100013930();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10001BB98();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = a5;
  os_log_type_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10001BAD8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  uint64_t v15 = sub_10001BBE0();
  v16(v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_10001AF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    sub_100043D30(a2, a3);
    swift_endAccess();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001B024()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001B04C()
{
  sub_10001B024();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RemoteDisplayReadinessRequestHandler()
{
  return self;
}

uint64_t *sub_10001B0A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    swift_unknownObjectRetain();
    if (!v11)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      return a1;
    }
    uint64_t v12 = v10[1];
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10001B198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t result = swift_unknownObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 24)))
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10001B230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  swift_unknownObjectRetain();
  if (v10)
  {
    uint64_t v11 = v9[1];
    *uint64_t v8 = v10;
    v8[1] = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  return a1;
}

uint64_t sub_10001B2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a1 + v7);
  uint64_t v11 = *(void *)(a2 + v7);
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      *uint64_t v8 = v11;
      v8[1] = v13;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v9 + 8);
  *uint64_t v8 = v11;
  v8[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10001B3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  if (*v9)
  {
    uint64_t v11 = v9[1];
    *uint64_t v8 = v10;
    v8[1] = v11;
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  return a1;
}

uint64_t sub_10001B460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *(void *)(a1 + v7);
  uint64_t v11 = *v9;
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = v9[1];
      *uint64_t v8 = v11;
      v8[1] = v13;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v12;
  swift_release();
  return a1;
}

uint64_t sub_10001B534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B548);
}

uint64_t sub_10001B548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_10001BB80();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100012E5C(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10001B5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B5F4);
}

void sub_10001B5F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_10001BB80();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_100012E34(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

uint64_t type metadata accessor for RemoteDisplayReadinessRequestHandler.ExpiringResponse()
{
  uint64_t result = qword_1000A2198;
  if (!qword_1000A2198) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001B6C4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10001B764()
{
  v6[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100013930();
  uint64_t v2 = v1;
  __chkstk_darwin();
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  static DispatchQoS.unspecified.getter();
  v6[1] = &_swiftEmptyArrayStorage;
  sub_10001BAD8(&qword_1000A2200, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000116B8(&qword_1000A2208);
  sub_10001BB20((unint64_t *)&unk_1000A2210, &qword_1000A2208);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6[0]);
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_1000116B8(&qword_1000A30B0);
  *(void *)(v0 + 24) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void sub_10001B9C0(uint64_t a1, uint64_t a2, void (*a3)(void, void, id))
{
}

uint64_t sub_10001B9D8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001BA14()
{
  return sub_10001AF84(v0[2], v0[3], v0[4]);
}

uint64_t sub_10001BA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001BA30()
{
  return swift_release();
}

uint64_t sub_10001BA3C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001BA7C()
{
  return sub_10001AACC(v0[2], v0[3], v0[4]);
}

uint64_t sub_10001BA88()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10001BAC8()
{
  sub_10001A468(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void, void, void))(v0 + 32));
}

uint64_t sub_10001BAD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001BB20(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001178C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10001BB98()
{
  *(void *)(v1 - 152) = *(void *)(v0 + 16);
}

uint64_t sub_10001BBB8()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10001BBE0()
{
  return v0;
}

uint64_t sub_10001BBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for CompanionLinkDevice();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - v8;
  unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10004DC90(v26, a1);
  uint64_t v10 = v26[0];
  int64_t v11 = v26[3];
  unint64_t v12 = v26[4];
  uint64_t v21 = v26[1];
  int64_t v22 = (unint64_t)(v26[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_15;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v22) {
      goto LABEL_27;
    }
    unint64_t v17 = *(void *)(v21 + 8 * v16);
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v22) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17) {
        goto LABEL_13;
      }
      int64_t v18 = v11 + 3;
      if (v11 + 3 >= v22) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17) {
        goto LABEL_13;
      }
      int64_t v18 = v11 + 4;
      if (v11 + 4 >= v22) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17)
      {
LABEL_13:
        int64_t v16 = v18;
      }
      else
      {
        int64_t v16 = v11 + 5;
        if (v11 + 5 >= v22) {
          goto LABEL_27;
        }
        unint64_t v17 = *(void *)(v21 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v11 + 6;
          while (v19 < v22)
          {
            unint64_t v17 = *(void *)(v21 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_14;
            }
          }
LABEL_27:
          swift_release();
          unint64_t v20 = v27;
          swift_release();
          return v20;
        }
      }
    }
LABEL_14:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
LABEL_15:
    sub_100017888(*(void *)(v10 + 56) + *(void *)(v23 + 72) * v15, (uint64_t)v9);
    sub_10001E678((uint64_t)v9, (uint64_t)v7);
    sub_10001C37C((uint64_t)v7, v24, &v25);
    uint64_t result = sub_1000178EC((uint64_t)v7);
    if (v2)
    {
      swift_release();
      unint64_t v20 = v27;
      swift_release();
      swift_bridgeObjectRelease();
      return v20;
    }
    if (v25)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10001BED8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000AA228);
  sub_100004964(v0, (uint64_t)qword_1000AA228);
  return Logger.init(subsystem:category:)();
}

void *sub_10001BF58(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[5] = &_swiftEmptySetSingleton;
  v2[6] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  v2[3] = &_swiftEmptyDictionarySingleton;
  v2[4] = &_swiftEmptyDictionarySingleton;
  v2[7] = &_swiftEmptySetSingleton;
  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_10001BFCC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_10001E180(a1, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    if (qword_1000A1310 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100004964(v6, (uint64_t)qword_1000AA228);
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      type metadata accessor for UUID();
      sub_10001E9A4((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v10 = Set.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      sub_100017070(v10, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "The set of connected remote display sessions has changed to [%s]", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return sub_10001E084();
  }
  return result;
}

uint64_t sub_10001C214(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  sub_10001BFCC(v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001C254()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  sub_100013930();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100013AFC();
  os_log_type_t v8 = (uint64_t *)(v7 - v6);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  *os_log_type_t v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v2);
  char v9 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v8, v2);
  if (v9)
  {
    swift_retain();
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = sub_10001BBF8(v11, v1);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001C37C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CompanionLinkDevice();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v32[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v32[-1] - v14;
  sub_100004928(0, &qword_1000A1978);
  sub_100017888(a1, (uint64_t)v15);
  id v16 = sub_100062558((uint64_t)v15);
  if (v16)
  {
    unint64_t v17 = v16;
    id v18 = [v16 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    sub_100029C58();
    char v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      uint64_t v21 = 2;
    }
    else
    {
      swift_beginAccess();
      uint64_t v28 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_100024870((uint64_t)v9, v28);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v21 = v29 != 0;
    }
    id v30 = [objc_allocWithZone((Class)SidecarDisplaySendingDeviceSessionState) initWithDevice:v17 sessionState:v21 visualDetectability:0];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    if (qword_1000A1310 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100004964(v22, (uint64_t)qword_1000AA228);
    sub_100017888(a1, (uint64_t)v13);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v26 = CompanionLinkDevice.description.getter();
      v32[4] = sub_100017070(v26, v27, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000178EC((uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Could not create SidecarDevice for device: [%s].", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000178EC((uint64_t)v13);
    }

    id v30 = 0;
  }
  *a3 = v30;
}

uint64_t sub_10001C734(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t))
{
  uint64_t v4 = v3;
  uint64_t v152 = (void (*)(uint64_t))a3;
  uint64_t v153 = a1;
  uint64_t v6 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v6 - 8);
  sub_10001EC1C();
  sub_10001EB4C();
  __chkstk_darwin(v7);
  sub_10001EC30();
  uint64_t v143 = v8;
  uint64_t v144 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v144);
  sub_10001EC1C();
  sub_10001EB4C();
  __chkstk_darwin(v9);
  sub_10001EB4C();
  __chkstk_darwin(v10);
  sub_10001EB4C();
  __chkstk_darwin(v11);
  sub_10001EC30();
  uint64_t v142 = v12;
  uint64_t v13 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  v145 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v133 - v20;
  __chkstk_darwin(v19);
  sub_10001EC30();
  uint64_t v137 = v22;
  __chkstk_darwin(v23);
  sub_10001EC30();
  uint64_t v135 = v24;
  uint64_t v136 = v25;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v133 - v27;
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  sub_100013930();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  sub_100013AFC();
  os_log_type_t v35 = (uint64_t *)(v34 - v33);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  *os_log_type_t v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v31 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v29);
  char v36 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v35, v29);
  if (v36)
  {
    uint64_t v151 = v4;
    if (qword_1000A1310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100004964(v37, (uint64_t)qword_1000AA228);
  uint64_t v147 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v148 = v15 + 16;
  v147(v28, v153, v13);
  uint64_t v149 = v38;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v150 = a2;
  uint64_t v146 = v15;
  v141 = v21;
  if (v41)
  {
    uint64_t v42 = (uint8_t *)sub_10001EAAC();
    v156[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136315138;
    os_log_type_t v35 = (uint64_t *)&v42[v38];
    sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v154 = sub_100017070(v43, v44, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = sub_10001EB5C();
    v46(v45);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Received a request to ask device with identifier [%s] to connect to this device and start a remote display session.", v42, 0xCu);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {
    uint64_t v47 = sub_10001EB5C();
    v48(v47);
  }

  uint64_t v49 = v151;
  swift_beginAccess();
  uint64_t v50 = *(void *)(v49 + 32);
  swift_bridgeObjectRetain();
  uint64_t v51 = v153;
  uint64_t v52 = sub_100024870(v153, v50);
  swift_bridgeObjectRelease();
  swift_release();
  if (v52)
  {
    sub_10001EAE0();
    v53();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      sub_10001EAAC();
      uint64_t v154 = sub_10001EB30();
      *(_DWORD *)uint64_t v49 = 136315138;
      sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v155 = sub_10001EC68(v56, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_10001EB78();
      v59(v58);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "A connection request to device with identifier [%s] is already in-flight.  Will not issue another connection request.", (uint8_t *)v49, 0xCu);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      uint64_t v72 = sub_10001EBEC();
      v73(v72);
    }

    unint64_t v74 = v150;
    sub_10001E5CC();
    uint64_t v75 = sub_10001EC3C();
    *unint64_t v76 = 0;
LABEL_22:
    v74(v75);
    return swift_errorRelease();
  }
  uint64_t v60 = v143;
  sub_100017E14(v143);
  uint64_t v61 = v144;
  if (sub_100012E5C(v60, 1, v144) == 1)
  {
    sub_10001E618(v60);
    sub_10001EAE0();
    v62();
    unint64_t v63 = (void *)Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (sub_10001EB14(v64))
    {
      sub_10001EAAC();
      uint64_t v154 = sub_10001EB30();
      *(_DWORD *)uint64_t v49 = 136315138;
      sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v67 = sub_10001EC68(v65, v66);
      sub_10001EB94(v67);
      swift_bridgeObjectRelease();
      uint64_t v68 = sub_10001EB78();
      v69(v68);
      sub_10001EAF4((void *)&_mh_execute_header, v70, v71, "Could not find local CompanionLink device.  Will not issue a connection request to device with identifier [%s].");
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      uint64_t v100 = sub_10001EBEC();
      v101(v100);
    }

    unint64_t v74 = v150;
    sub_10001E5CC();
    uint64_t v75 = sub_10001EC3C();
    void *v102 = 1;
    goto LABEL_22;
  }
  uint64_t v77 = v142;
  sub_10001E678(v60, v142);
  uint64_t v78 = RapportEndpoint.idsDeviceIdentifier.getter(v61, (uint64_t)&protocol witness table for CompanionLinkDevice);
  uint64_t v80 = v79;
  uint64_t v81 = HIBYTE(v79) & 0xF;
  if ((v79 & 0x2000000000000000) == 0) {
    uint64_t v81 = v78 & 0xFFFFFFFFFFFFLL;
  }
  if (v81)
  {
    uint64_t v82 = v78;
    uint64_t v83 = UUID.uuidString.getter();
    uint64_t v84 = v51;
    uint64_t v86 = v85;
    uint64_t v87 = *(void *)(v49 + 24);
    swift_bridgeObjectRetain();
    uint64_t v88 = v83;
    uint64_t v89 = v140;
    sub_1000248D0(v88, v86, v87, v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (sub_100012E5C(v89, 1, v61) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10001E618(v89);
      sub_10001EAE0();
      v90();
      unint64_t v91 = (void *)Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.error.getter();
      if (sub_10001EB14(v92))
      {
        sub_10001EAAC();
        uint64_t v154 = sub_10001EB30();
        *(_DWORD *)uint64_t v49 = 136315138;
        sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v95 = sub_10001EC68(v93, v94);
        sub_10001EB94(v95);
        swift_bridgeObjectRelease();
        uint64_t v96 = sub_10001EBD4();
        v97(v96);
        sub_10001EAF4((void *)&_mh_execute_header, v98, v99, "Could not find the remote CompanionLink device with identifier [%s].  Will not issue a connection request.");
        swift_arrayDestroy();
        sub_100004A0C();
        sub_100004A0C();
      }
      else
      {
        uint64_t v128 = sub_10001EBD4();
        v129(v128);
      }

      uint64_t v130 = (void (*)(void))v150;
      uint64_t v131 = v142;
      sub_10001E5CC();
      sub_10001EC3C();
      *uint64_t v132 = 3;
      v130();
      swift_errorRelease();
      uint64_t v125 = v131;
    }
    else
    {
      uint64_t v112 = v138;
      sub_10001E678(v89, v138);
      uint64_t v113 = v134;
      sub_100017888(v112, v134);
      type metadata accessor for RemoteDisplayInitiationRequest();
      swift_allocObject();
      sub_100015A60(v82, v80, v113);
      swift_beginAccess();
      uint64_t v114 = swift_retain();
      sub_1000441FC(v114, v84);
      swift_endAccess();
      uint64_t v115 = v135;
      Swift::String v116 = v35;
      sub_10001EAE0();
      v117();
      uint64_t v118 = v146;
      unint64_t v119 = (*(unsigned __int8 *)(v146 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
      unint64_t v120 = (v136 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v121 = v49;
      uint64_t v122 = swift_allocObject();
      *(void *)(v122 + 16) = v121;
      (*(void (**)(unint64_t, uint64_t, uint64_t *))(v118 + 32))(v122 + v119, v115, v116);
      uint64_t v123 = (void (**)(uint64_t))(v122 + v120);
      uint64_t v124 = v152;
      *uint64_t v123 = v150;
      v123[1] = v124;
      swift_retain();
      swift_retain();
      sub_100015C28((void (*)(void))sub_10001E784, v122);
      swift_release();
      sub_10001E084();
      swift_release();
      sub_1000178EC(v112);
      uint64_t v125 = v142;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v104 = v139;
    sub_100017888(v77, v139);
    uint64_t v105 = (void *)Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (sub_10001EB14(v106))
    {
      sub_10001EAAC();
      uint64_t v154 = sub_10001EB30();
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v107 = CompanionLinkDevice.description.getter();
      uint64_t v109 = sub_10001EC68(v107, v108);
      sub_10001EC04(v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000178EC(v104);
      sub_10001EAF4((void *)&_mh_execute_header, v110, v111, "Could not gather the local device's IDS identifier.  Will not issue a connection request.  Local device: [%s]");
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      sub_1000178EC(v104);
    }

    uint64_t v126 = (void (*)(void))v150;
    sub_10001E5CC();
    sub_10001EC3C();
    *uint64_t v127 = 2;
    v126();
    swift_errorRelease();
    uint64_t v125 = v77;
  }
  return sub_1000178EC(v125);
}

uint64_t sub_10001D35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v29 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  uint64_t v19 = v27;
  *(void *)(v18 + v17) = v26;
  uint64_t v20 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v28;
  void *v20 = v19;
  v20[1] = v21;
  aBlock[4] = sub_10001E8BC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_1000969C0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10001E9A4((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001E950();
  uint64_t v23 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = (void *)v29;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v32);
}

uint64_t sub_10001D728(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v30 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A1310 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100004964(v13, (uint64_t)qword_1000AA228);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v27 = a2;
    uint64_t v28 = a5;
    uint64_t v29 = a4;
    uint64_t v16 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = sub_100017070(v17, v18, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v16 + 12) = 2080;
    if (a3)
    {
      uint64_t v32 = a3;
      swift_errorRetain();
      sub_1000116B8((uint64_t *)&unk_1000A2FF0);
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      int v19 = swift_dynamicCast();
      uint64_t v20 = v31;
      if (!v19) {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v32 = v20;
    sub_1000116B8(qword_1000A23A0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v32 = sub_100017070(v21, v22, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Finished connection request to device with identifier: [%s]. Error: [%s].", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v29;
    a2 = v27;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  sub_100043D44(a2);
  swift_endAccess();
  swift_release();
  if (a3)
  {
    sub_10001E5CC();
    uint64_t v23 = swift_allocError();
    uint64_t *v24 = a3;
    swift_errorRetain();
    a4(v23);
    swift_errorRelease();
  }
  else
  {
    a4(0);
  }
  return sub_10001E084();
}

uint64_t sub_10001DB58(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  Swift::String v53 = a2;
  uint64_t v54 = a3;
  uint64_t v55 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  sub_100013930();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_100013AFC();
  uint64_t v20 = (uint64_t *)(v19 - v18);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t *v20 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v14);
  char v21 = _dispatchPreconditionTest(_:)();
  uint64_t v23 = *(void (**)(uint64_t *, uint64_t))(v16 + 8);
  os_log_type_t v22 = v16 + 8;
  v23(v20, v14);
  if (v21)
  {
    if (qword_1000A1310 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_100004964(v24, (uint64_t)qword_1000AA228);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v51(v13, v55, v5);
  uint64_t v52 = (void (*)(char *, uint64_t))v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = sub_10001EB14(v27);
  uint64_t v49 = v7;
  if (v28)
  {
    uint64_t v29 = sub_10001EAAC();
    uint64_t v50 = v4;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v48 = v11;
    v57[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v47 = v30 + 4;
    sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v56 = sub_100017070(v32, v33, v57);
    uint64_t v20 = (uint64_t *)&type metadata for Any;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v13, v5);
    _os_log_impl((void *)&_mh_execute_header, v26, v22, "Received a request to disconnect the remote display session with device with identifier: [%s].", v30, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v48;
    sub_100004A0C();
    uint64_t v4 = v50;
    sub_100004A0C();
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v13, v5);
  }

  swift_beginAccess();
  uint64_t v35 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_100024870(v55, v35);
  swift_bridgeObjectRelease();
  if (v36)
  {
    v51(v11, v55, v5);
    uint64_t v37 = (void *)Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (sub_10001EB14(v38))
    {
      sub_10001EAAC();
      uint64_t v56 = sub_10001EB30();
      uint64_t v52 = v34;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v50 = v4;
      sub_10001E9A4((unint64_t *)&unk_1000A2380, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_100017070(v39, v40, &v56);
      sub_10001EC04(v41);
      uint64_t v4 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v52(v11, v5);
      sub_10001EAF4((void *)&_mh_execute_header, v42, v43, "Before disconnecting, will cancel in-flight connection request to device with identifier: [%s]");
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      v34(v11, v5);
    }

    CompanionLinkClient.cancel()();
    swift_release();
  }
  unint64_t v44 = *(void **)(v4 + 48);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v44 closeDisplayServiceSessionsWithPeerIdentifier:isa];

  return v53(0);
}

uint64_t sub_10001E084()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v0 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  notify_post((const char *)(v0 + 32));

  return swift_release();
}

uint64_t sub_10001E0E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001E128()
{
  sub_10001E0E0();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RemoteDisplaySendingDevicesManager()
{
  return self;
}

uint64_t sub_10001E180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    sub_10001E9A4((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      sub_10001E9A4(&qword_1000A3020, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    uint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return 1;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t sub_10001E5CC()
{
  unint64_t result = qword_1000A2390;
  if (!qword_1000A2390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2390);
  }
  return result;
}

uint64_t sub_10001E618(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A1C48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001E678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompanionLinkDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E6DC()
{
  type metadata accessor for UUID();
  sub_100013930();
  sub_10001EC54();
  swift_release();
  uint64_t v3 = sub_10001EBBC();
  v4(v3);
  swift_release();

  return _swift_deallocObject(v0, v2 + 16, v1);
}

uint64_t sub_10001E784(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  sub_10001EAC8(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = v1 + v8;
  uint64_t v11 = (uint64_t *)(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  return sub_10001D35C(a1, v9, v10, v12, v13);
}

uint64_t sub_10001E804()
{
  type metadata accessor for UUID();
  sub_100013930();
  sub_10001EC54();
  swift_release();
  uint64_t v3 = sub_10001EBBC();
  v4(v3);
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v1);
}

uint64_t sub_10001E8BC()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_10001EAC8(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = v0 + v6;
  uint64_t v10 = *(void *)(v0 + v7);
  uint64_t v11 = v0 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *(void (**)(void))v11;
  uint64_t v13 = *(void *)(v11 + 8);

  return sub_10001D728(v8, v9, v10, v12, v13);
}

uint64_t sub_10001E938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E948()
{
  return swift_release();
}

unint64_t sub_10001E950()
{
  unint64_t result = qword_1000A3E60;
  if (!qword_1000A3E60)
  {
    sub_10001178C((uint64_t *)&unk_1000A21E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3E60);
  }
  return result;
}

uint64_t sub_10001E9A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteDisplaySendingDevicesManager.ConnectionError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RemoteDisplaySendingDevicesManager.ConnectionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteDisplaySendingDevicesManager.ConnectionError()
{
  return &type metadata for RemoteDisplaySendingDevicesManager.ConnectionError;
}

uint64_t sub_10001EAAC()
{
  return swift_slowAlloc();
}

uint64_t sub_10001EAC8(uint64_t a1)
{
  return a1 - 8;
}

void sub_10001EAF4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

BOOL sub_10001EB14(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001EB30()
{
  return swift_slowAlloc();
}

void sub_10001EB4C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_10001EB5C()
{
  uint64_t result = v1;
  *(void *)(v2 - 216) = *(void *)(v0 + 8);
  return result;
}

uint64_t sub_10001EB78()
{
  return v0;
}

uint64_t sub_10001EB94(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10001EBBC()
{
  return v0 + v1;
}

uint64_t sub_10001EBD4()
{
  return v0;
}

uint64_t sub_10001EBEC()
{
  return v0;
}

uint64_t sub_10001EC04(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_10001EC3C()
{
  return swift_allocError();
}

uint64_t sub_10001EC68(uint64_t a1, unint64_t a2)
{
  return sub_100017070(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_10001EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void **sub_10001EC88(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void sub_10001ECB8(id *a1)
{
}

void **sub_10001ECC0(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **sub_10001ECF8(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_10001ED2C(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001ED80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for MapTable()
{
  return sub_10001F424();
}

uint64_t sub_10001EDE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_10001EE04(void *a1, uint64_t a2)
{
  id v4 = a1;

  return sub_10001EE44(a1, a2);
}

uint64_t sub_10001EE44(void *a1, uint64_t a2)
{
  swift_getTupleTypeMetadata2();
  uint64_t v4 = static Array._allocateUninitialized(_:)();
  uint64_t v15 = v4;
  if (!a1)
  {
    uint64_t v12 = v4;
    uint64_t v11 = 0;
    goto LABEL_5;
  }
  id v5 = a1;
  Swift::Int Count = SidecarMapTableGetCount();
  type metadata accessor for Array();
  Array.reserveCapacity(_:)(Count);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = &v15;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10001F3D8;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_10001F3E4;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001F0CC;
  aBlock[3] = &unk_100096B20;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  SidecarMapTableIterateObjects();

  _Block_release(v9);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0)
  {
    uint64_t v11 = sub_10001F3D8;
    uint64_t v12 = v15;
LABEL_5:
    aBlock[0] = v12;
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v13 = ArraySlice.init<A>(_:)();

    swift_bridgeObjectRelease();
    sub_100012A1C((uint64_t)v11);
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001F0A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10001F0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v7[3] = swift_getObjectType();
  v7[0] = a3;
  swift_unknownObjectRetain();
  v5(a2, v7);
  return sub_1000136EC((uint64_t)v7);
}

uint64_t sub_10001F134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v10 = &v16[-v9];
  uint64_t v11 = *(void *)(a4 - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012A54(a2, (uint64_t)v16);
  swift_dynamicCast();
  int64_t v14 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v10 = a1;
  (*(void (**)(char *, unsigned char *, uint64_t))(v11 + 32))(v14, v13, a4);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t sub_10001F2B0()
{
  swift_getTupleTypeMetadata2();
  uint64_t v0 = type metadata accessor for ArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection<>.popFirst()(v0, WitnessTable);
}

void sub_10001F340(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = sub_10001EE04(v4, *(void *)(a1 + 16));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;

  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v11;
}

uint64_t static RapportDeviceChangeFlags.distance.getter()
{
  return 2;
}

uint64_t sub_10001F3B0()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_10001F3D8(uint64_t a1, uint64_t a2)
{
  return sub_10001F134(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_10001F3E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001F40C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001F41C()
{
  return swift_release();
}

uint64_t sub_10001F424()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10001F454()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_10001F45C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *sub_10001F49C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *sub_10001F4FC(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t sub_10001F534(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001F574(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MapTable.Iterator()
{
  return sub_10001F424();
}

uint64_t sub_10001F5D0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10001F5E0(uint64_t a1, uint64_t a2)
{
  sub_100004928(0, (unint64_t *)&unk_1000A1980);
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v4 = sub_100021A04();
  v5(v4);
}

void sub_10001F678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (a3) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v5 = sub_100021A04();
  v6(v5);
}

uint64_t sub_10001F6EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, unint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a2;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  id v10 = a3;
  v5(v7, v9, a3);

  sub_1000048D0(v7, v9);

  return swift_release();
}

uint64_t sub_10001F794()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A24B0);
  sub_100004964(v0, (uint64_t)qword_1000A24B0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10001F814(uint64_t a1)
{
  return sub_1000219C0(a1);
}

uint64_t sub_10001F820(uint64_t a1)
{
  return sub_1000219C0(a1);
}

uint64_t sub_10001F82C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_relayProxy) = a1;
  return swift_unknownObjectRelease();
}

id sub_10001F844()
{
  if (qword_1000A1318 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100004964(v0, (uint64_t)qword_1000A24B0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    NSArray v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)NSArray v3 = 136315138;
    sub_100017070(0xD000000000000033, 0x800000010007F090, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_100021CF8(v4, v5, -999, 0xD000000000000033, 0x800000010007F090, 0);
}

id sub_10001FA24()
{
  swift_retain();
  sub_100017E5C();
  swift_release();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SidecarRelayIntermediateDelegate();
  return [super dealloc];
}

void sub_10001FB28()
{
}

uint64_t type metadata accessor for SidecarRelayIntermediateDelegate()
{
  return self;
}

void sub_10001FB8C(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = swift_unknownObjectRetain();
  sub_10001F82C(v3);
  type metadata accessor for RemoteDisplaySendingDevicesManager();
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_10001BF58(v4, (uint64_t)a1);
  sub_10001F820((uint64_t)v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = ObjectType;
  v9[4] = sub_100021958;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  _OWORD v9[2] = sub_10001FEB0;
  v9[3] = &unk_100096D08;
  unint64_t v8 = _Block_copy(v9);
  swift_release();
  [a1 setDisplayServiceSessionsChangedListener:v8];
  _Block_release(v8);
}

void sub_10001FCEC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    uint64_t v4 = *(void *)(a1 + 16);
    if (qword_1000A1318 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100004964(v5, (uint64_t)qword_1000A24B0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "The set of remote display sessions has changed.  Sessions exist: [%{BOOL}d]", v8, 8u);
      swift_slowDealloc();
    }

    [v3 setRemoteDisplaySessionExists:v4 != 0];
    if (*(void *)&v3[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager])
    {
      swift_retain();
      uint64_t v9 = swift_bridgeObjectRetain();
      sub_10001C214(v9);
      swift_release();
    }
    else
    {
      sub_10001F844();

      swift_errorRelease();
    }
  }
}

uint64_t sub_10001FEB0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for UUID();
  sub_100021960((unint64_t *)&unk_1000A1910);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001FFB4()
{
  uint64_t v1 = v0;
  if (qword_1000A1318 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100004964(v2, (uint64_t)qword_1000A24B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Relay initialized", v5, 2u);
    sub_100004A0C();
  }

  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_companionLinkDeviceDetector];
  type metadata accessor for CompanionLinkDeviceDiscoveryProxy();
  uint64_t v7 = swift_allocObject();
  swift_retain();
  uint64_t v8 = sub_1000217B4(v6, (uint64_t)v1, v7);
  return sub_10001F814(v8);
}

void sub_10002011C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v10);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v13 + ((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = sub_100021718;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002451C;
  aBlock[3] = &unk_100096C90;
  int64_t v14 = _Block_copy(aBlock);
  swift_release();
  [v2 ignoreDetectionOfAnchorWithIdentifier:isa completion:v14];
  _Block_release(v14);
}

void sub_1000202D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A1318 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100004964(v8, (uint64_t)qword_1000A24B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v11 = 136315394;
    sub_100021960((unint64_t *)&unk_1000A2380);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v18 = sub_100017070(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v11 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v18 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v14 = 0;
    }
    *uint64_t v16 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error encountered while trying to ignore detection of anchor with identifier [%s].  Error: [%@]", (uint8_t *)v11, 0x16u);
    sub_1000116B8((uint64_t *)&unk_1000A21F0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRelease();
    swift_errorRelease();
  }
}

id sub_100020734(char a1)
{
  return sub_1000219D0(a1, "setDevicesAreNearby:", *(void **)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate));
}

id sub_1000207A0(char a1)
{
  return sub_1000219D0(a1, "setRemoteDisplaySessionExists:", *(void **)(v1 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate));
}

uint64_t sub_10002080C(void *a1)
{
  uint64_t v2 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (!xpc_dictionary_get_string(a1, v2))
  {
    if (qword_1000A1318 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100004964(v12, (uint64_t)qword_1000A24B0);
    swift_unknownObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v14))
    {

      swift_unknownObjectRelease_n();
      return 0;
    }
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    sub_1000116B8(&qword_1000A18F8);
    uint64_t v16 = String.init<A>(describing:)();
    sub_100017070(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    swift_unknownObjectRetain();
    sub_1000116B8(&qword_1000A2580);
    uint64_t v18 = String.init<A>(describing:)();
    sub_100017070(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Could not find [%s] in event [%s]", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
LABEL_19:
    sub_100004A0C();

    return 0;
  }
  uint64_t v4 = String.init(cString:)();
  unint64_t v5 = v3;
  if ((v4 != 0xD000000000000036 || v3 != 0x800000010007F110)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (qword_1000A1318 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100004964(v20, (uint64_t)qword_1000A24B0);
    swift_bridgeObjectRetain();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v21))
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
    swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    sub_100021A3C(4.8149e-34);
    sub_100017070(v4, v5, &v25);
    sub_1000219DC();
    swift_bridgeObjectRelease_n();
    sub_100021A1C((void *)&_mh_execute_header, v22, v23, "Unrecognized event name: [%s]");
    swift_arrayDestroy();
    sub_100004A0C();
    goto LABEL_19;
  }
  if (qword_1000A1318 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100004964(v6, (uint64_t)qword_1000A24B0);
  swift_bridgeObjectRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    sub_100021A3C(4.8149e-34);
    sub_100017070(v4, v5, &v25);
    sub_1000219DC();
    swift_bridgeObjectRelease_n();
    sub_100021A1C((void *)&_mh_execute_header, v9, v10, "Received event: [%s]");
    uint64_t v11 = 1;
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return v11;
}

uint64_t sub_100020D14(void (*a1)(uint64_t, id))
{
  if (*(void *)(v1
                 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager))
  {
    swift_retain();
    uint64_t v3 = sub_10001C254();
    a1(v3, 0);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_getObjectType();
    id v5 = sub_10001F844();
    a1((uint64_t)_swiftEmptyArrayStorage, v5);
    return swift_errorRelease();
  }
}

uint64_t sub_100020EAC(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t, void (*)(void), uint64_t))
{
  if (*(void *)(v4
                 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_remoteDisplaySendingDevicesManager))
  {
    swift_retain();
    a4(a1, a2, a3);
    return swift_release();
  }
  else
  {
    swift_getObjectType();
    sub_10001F844();
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_100020FA8(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, void (*a6)(void), void (*a7)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v11 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  id v19 = a1;
  sub_100020EAC((uint64_t)v16, a6, v18, a7);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v11);
}

void sub_1000210C4(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  if ([v4 respondsToSelector:"ignoreDetectionForAnchorIdentifier:"])
  {
    swift_unknownObjectRetain();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v4 ignoreDetectionForAnchorIdentifier:isa];
    swift_unknownObjectRelease();
  }
  a3[2](a3, 0);

  _Block_release(a3);
}

uint64_t sub_10002127C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(v4 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  uint64_t result = (uint64_t)[v7 respondsToSelector:"sendDataRequest:completion:"];
  if (result)
  {
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v11[4] = a3;
    v11[5] = a4;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10001F6EC;
    v11[3] = &unk_100096BC8;
    uint64_t v10 = _Block_copy(v11);
    swift_retain();
    [v7 sendDataRequest:isa completion:v10];
    _Block_release(v10);

    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100021470()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12SidecarRelay32SidecarRelayIntermediateDelegate_loadedRelayDelegate);
  if ([v1 respondsToSelector:"overridePresenterLaunchOptions:"])
  {
    swift_unknownObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    id v3 = [v1 overridePresenterLaunchOptions:isa];

    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    swift_unknownObjectRelease();

    return v4;
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10002162C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100021664(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100021674()
{
  return swift_release();
}

uint64_t sub_10002167C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100021718(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000202D0(a1, v4);
}

uint64_t sub_1000217B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CompanionLinkDevice();
  *(void *)(a3 + 16) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(a3 + 24) = &_swiftEmptySetSingleton;
  *(unsigned char *)(a3 + 40) = 0;
  if (qword_1000A12F0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A1DA0);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Loading", v8, 2u);
    swift_slowDealloc();
  }

  *(void *)(a3 + 32) = a2;
  swift_release();
  return a3;
}

uint64_t sub_1000218E8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100021920()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100021958(uint64_t a1)
{
}

uint64_t sub_100021960(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000219C0(uint64_t a1)
{
  *(void *)(v2 + v1) = a1;
  return swift_release();
}

id sub_1000219D0@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return [a3 a2:a1 & 1];
}

uint64_t sub_1000219DC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100021A04()
{
  return v0;
}

void sub_100021A1C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100021A3C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100021A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001309C((_OWORD *)a1, v6);
    sub_10004400C(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100021FC8(a1, &qword_1000A2F20);
    sub_1000435A8(v6, a2, a3);
    swift_bridgeObjectRelease();
    return sub_100021FC8((uint64_t)v6, &qword_1000A2F20);
  }
}

uint64_t sub_100021AF0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001309C((_OWORD *)a1, v4);
    sub_100044068();
    return sub_10002201C(a2);
  }
  else
  {
    sub_100021FC8(a1, &qword_1000A2F20);
    sub_1000436A4(v4, a2);
    sub_10002201C(a2);
    return sub_100021FC8((uint64_t)v4, &qword_1000A2F20);
  }
}

uint64_t sub_100021B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A1970);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SessionC8IdentityVMa(0);
  sub_1000139D0();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100012E5C(a1, 1, v10) == 1)
  {
    sub_100021FC8(a1, &qword_1000A1970);
    sub_100043BA4(a2);
    type metadata accessor for UUID();
    sub_1000139D0();
    (*(void (**)(uint64_t))(v11 + 8))(a2);
    return sub_100021FC8((uint64_t)v6, &qword_1000A1970);
  }
  else
  {
    sub_100012F5C(a1, (uint64_t)v9);
    sub_100044100();
    type metadata accessor for UUID();
    sub_1000139D0();
    return (*(uint64_t (**)(uint64_t))(v13 + 8))(a2);
  }
}

id sub_100021CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
  if (a5)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = &type metadata for String;
    v22[0] = a4;
    v22[1] = a5;
    sub_100021A5C((uint64_t)v22, v10, v11);
  }
  if (a6)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    swift_getErrorValue();
    uint64_t v23 = v21;
    uint64_t v15 = sub_100021F64(v22);
    (*(void (**)(uint64_t *))(*((void *)v21 - 1) + 16))(v15);
    sub_100021A5C((uint64_t)v22, v12, v14);
  }
  id v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = [v16 initWithDomain:v17 code:a3 userInfo:isa];

  swift_errorRelease();
  return v19;
}

id sub_100021EC8(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100021EE0(a1, a2, a3);
}

id sub_100021ED4(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100021EE0(a1, a2, a3);
}

id sub_100021EE0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_100021CF8(v6, v7, a1, a2, a3, 0);
}

uint64_t *sub_100021F64(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100021FC8(uint64_t a1, uint64_t *a2)
{
  sub_1000116B8(a2);
  sub_1000139D0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10002201C(uint64_t a1)
{
  return a1;
}

uint64_t SidecarPacketType.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 1801675054;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1801547310;
      break;
    case 2:
      uint64_t result = 0x7463656E6E6F632ELL;
      break;
    case 3:
      uint64_t result = 0x6E6E6F637369642ELL;
      break;
    case 4:
      uint64_t result = 0x65726975716E692ELL;
      break;
    case 5:
      uint64_t result = 0x7375746174732ELL;
      break;
    case 6:
      uint64_t result = 0x6567617373656D2ELL;
      break;
    default:
      uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
      break;
  }
  return result;
}

uint64_t sub_100022194()
{
  return SidecarPacketType.description.getter(*v0);
}

id sub_10002219C(uint64_t a1)
{
  type metadata accessor for Logger();
  sub_100023C40();
  __chkstk_darwin(v3);
  sub_1000139A8();
  *(NSNumber *)&long long v21 = Int._bridgeToObjectiveC()();
  sub_100004928(0, &qword_1000A2598);
  sub_1000237C8();
  AnyHashable.init<A>(_:)();
  sub_1000246C8((uint64_t)v20, a1, &v21);
  sub_10002201C((uint64_t)v20);
  if (v22) {
    sub_100023CF8();
  }
  else {
    sub_1000236F4((uint64_t)&v21);
  }
  v18.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  AnyHashable.init<A>(_:)();
  sub_1000246C8((uint64_t)v20, a1, &v21);
  swift_bridgeObjectRelease();
  sub_10002201C((uint64_t)v20);
  if (v22)
  {
    if (sub_100023CF8())
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v5 = OPACKDecodeData();
      sub_1000048D0((uint64_t)v18.super.super.isa, v19);

      if (v5)
      {
        self;
        uint64_t v6 = swift_dynamicCastObjCClass();
        if (v6) {
          return (id)v6;
        }
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    sub_1000236F4((uint64_t)&v21);
  }
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  sub_100023D38();
  id v10 = sub_100021EC8(v7, v8, v9);
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  sub_100004964(v1, (uint64_t)qword_1000AA248);
  uint64_t v11 = sub_100023CAC();
  uint64_t v13 = v12(v11);
  __chkstk_darwin(v13);
  sub_100019968((uint64_t (*)(void))sub_1000224E4, 0, (void (*)(void))sub_100013904);
  uint64_t v14 = sub_100013BCC();
  v15(v14);
  id v16 = [objc_allocWithZone((Class)NSDictionary) init];

  return v16;
}

unint64_t sub_1000224E4()
{
  return 0xD000000000000016;
}

uint64_t sub_100022500()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (v1 && sub_100023C20()) {
    return v3;
  }
  else {
    return 0;
  }
}

id sub_10002257C()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (v1)
  {
    *((void *)&v5 + 1) = swift_getObjectType();
    *(void *)&long long v4 = v1;
  }
  else
  {
    long long v4 = 0u;
    long long v5 = 0u;
  }
  id v2 = sub_100022604((uint64_t)&v4);
  sub_1000236F4((uint64_t)&v4);
  return v2;
}

id sub_100022604(uint64_t a1)
{
  sub_100023754(a1, (uint64_t)v17);
  if (!v18)
  {
    sub_1000236F4((uint64_t)v17);
    return 0;
  }
  sub_1000116B8(&qword_1000A2588);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)&v19[0];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v3 = (id)RPDecodeNSError();

  if (v3 && (sub_1000237BC() & 1) != 0)
  {
    *(void *)&long long v15 = 7169375;
    *((void *)&v15 + 1) = 0xE300000000000000;
    AnyHashable.init<A>(_:)();
    sub_1000246C8((uint64_t)v17, v1, &v15);
    swift_bridgeObjectRelease();
    sub_10002201C((uint64_t)v17);
    if (v16)
    {
      sub_10001309C(&v15, v19);
      id v4 = [v3 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      id v8 = [v3 code];
      sub_1000116B8(&qword_1000A2590);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100081790;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v10;
      sub_100012A54((uint64_t)v19, inited + 48);
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      id v12 = objc_allocWithZone((Class)NSError);
      id v13 = sub_100023640(v5, v7, (uint64_t)v8, v11);

      sub_1000136EC((uint64_t)v19);
      return v13;
    }
    else
    {
      sub_1000236F4((uint64_t)&v15);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100022838()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (!v1) {
    return 0;
  }
  if (sub_100023D4C()) {
    return v3;
  }
  return 0;
}

uint64_t sub_1000228C0()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (!v1) {
    return 0;
  }
  if (sub_100023D4C()) {
    return v3;
  }
  return 0;
}

uint64_t sub_100022948()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (!v1) {
    return 0;
  }
  int v2 = sub_100023C20();
  return sub_100023C7C(v2, v3, v4, v5, v6, v7, v8, v9, v11);
}

uint64_t sub_1000229C4()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (!v1) {
    return 0;
  }
  int v2 = sub_100023C20();
  return sub_100023C7C(v2, v3, v4, v5, v6, v7, v8, v9, v11);
}

uint64_t sub_100022A40(void *a1)
{
  uint64_t v2 = 2;
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v4 = [a1 objectForKey:isa];

  if (v4)
  {
    if (sub_100023C20()) {
      return v6;
    }
    else {
      return 2;
    }
  }
  return v2;
}

uint64_t sub_100022AD4()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v1 = sub_100023C94((uint64_t)isa, "objectForKey:");

  if (!v1) {
    return 0;
  }
  int v2 = sub_100023C20();
  return sub_100023C7C(v2, v3, v4, v5, v6, v7, v8, v9, v11);
}

uint64_t sub_100022B50(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v87 = 2683;
  unint64_t v88 = 0xE200000000000000;
  strcpy((char *)&v86, "  type: ");
  BYTE1(v86._object) = 0;
  WORD1(v86._object) = 0;
  HIDWORD(v86._object) = -402653184;
  uint64_t v5 = sub_100022A40(a1);
  v89._countAndFlagsBits = SidecarPacketType.description.getter(v5);
  sub_100023CC4(v89);
  swift_bridgeObjectRelease();
  sub_100023C04();
  sub_100023C60(v6, v7, v8, v9, v10, v11, v12, v13, v78, v82, v86._countAndFlagsBits, (uint64_t)v86._object);
  swift_bridgeObjectRelease();
  strcpy((char *)&v86, "  flags: 0x");
  HIDWORD(v86._object) = -352321536;
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v15 = [a1 objectForKey:isa];

  if (v15 && sub_100023C20()) {
    uint64_t v16 = v79;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v83 = v16;
  sub_1000129C4();
  v90._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  sub_100023CC4(v90);
  swift_bridgeObjectRelease();
  sub_100023C04();
  sub_100023C60(v17, v18, v19, v20, v21, v22, v23, v24, v79, v83, v86._countAndFlagsBits, (uint64_t)v86._object);
  swift_bridgeObjectRelease();
  strcpy((char *)&v86, "  channel: ");
  HIDWORD(v86._object) = -352321536;
  uint64_t v84 = sub_100022500();
  sub_1000126B0();
  v91._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  sub_100023CC4(v91);
  swift_bridgeObjectRelease();
  sub_100023C04();
  sub_100023C60(v25, v26, v27, v28, v29, v30, v31, v32, v80, v84, v86._countAndFlagsBits, (uint64_t)v86._object);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_100022838();
  if (v34)
  {
    strcpy((char *)&v86, "  service: ");
    HIDWORD(v86._object) = -352321536;
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease();
    sub_100023C04();
    sub_100023C60(v35, v36, v37, v38, v39, v40, v41, v42, v81, v85, v86._countAndFlagsBits, (uint64_t)v86._object);
    swift_bridgeObjectRelease();
  }
  uint64_t v43 = sub_100022948();
  if ((v44 & 1) == 0)
  {
    uint64_t v45 = v43;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v86, "  timestamp: ");
    HIWORD(v86._object) = -4864;
    v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100023CC4(v92);
    swift_bridgeObjectRelease();
    sub_100023C04();
    sub_100023C60(v46, v47, v48, v49, v50, v51, v52, v53, v81, v45, v86._countAndFlagsBits, (uint64_t)v86._object);
    swift_bridgeObjectRelease();
  }
  sub_1000229C4();
  if ((v54 & 1) == 0)
  {
    strcpy((char *)&v86, "  activity: ");
    BYTE5(v86._object) = 0;
    HIWORD(v86._object) = -5120;
    v93._countAndFlagsBits = Double.description.getter();
    sub_100023CC4(v93);
    swift_bridgeObjectRelease();
    sub_100023C04();
    sub_100023C60(v55, v56, v57, v58, v59, v60, v61, v62, v81, v85, v86._countAndFlagsBits, (uint64_t)v86._object);
    swift_bridgeObjectRelease();
  }
  if (sub_10002257C())
  {
    unint64_t v63 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    strcpy((char *)&v86, "  error: ");
    WORD1(v86._object) = 0;
    HIDWORD(v86._object) = -385875968;
    id v64 = [v63 debugDescription];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;

    v68._countAndFlagsBits = v65;
    v68._object = v67;
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    sub_100023C04();
    String.append(_:)(v86);

    swift_bridgeObjectRelease();
  }
  uint64_t v69 = sub_1000228C0();
  if (v70)
  {
    strcpy((char *)&v86, "  version: ");
    HIDWORD(v86._object) = -352321536;
    String.append(_:)(*(Swift::String *)&v69);
    swift_bridgeObjectRelease();
    sub_100023C04();
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
  }
  if (a3 >> 60 != 15)
  {
    strcpy((char *)&v86, "  body: ");
    BYTE1(v86._object) = 0;
    WORD1(v86._object) = 0;
    HIDWORD(v86._object) = -402653184;
    uint64_t v71 = sub_100013BCC();
    sub_100012D98(v71, v72);
    sub_100013BCC();
    v73._countAndFlagsBits = Data.description.getter();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    sub_100023C04();
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
    uint64_t v74 = sub_100013BCC();
    sub_100012DAC(v74, v75);
  }
  v76._countAndFlagsBits = 125;
  v76._object = (void *)0xE100000000000000;
  String.append(_:)(v76);
  return v87;
}

uint64_t sub_100022F98()
{
  return sub_100022B50(*(void **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_100022FA4()
{
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  int v2 = *v0;
  Class v3 = Int._bridgeToObjectiveC()().super.super.isa;
  [v2 setObject:isa forKeyedSubscript:v3];
}

uint64_t sub_100023010(uint64_t a1)
{
  if (a1)
  {
    id v1 = (void *)_convertErrorToNSError(_:)();
    id v2 = [objc_allocWithZone((Class)NSMutableDictionary) init];
    id v3 = v1;
    uint64_t v4 = (void *)_convertErrorToNSError(_:)();

    sub_100013BCC();
    RPEncodeNSError();

    if (sub_1000237BC())
    {
      id v5 = [v3 userInfo];
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100024664(v7, v8, v6, &v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        sub_10001309C(&v11, &v13);
        sub_1000116FC(&v13, v14);
        uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
        *(void *)&long long v11 = 7169375;
        *((void *)&v11 + 1) = 0xE300000000000000;
        [v2 __swift_setObject:v9 forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        sub_1000136EC((uint64_t)&v13);
      }
      else
      {

        sub_1000236F4((uint64_t)&v11);
      }
    }
    else
    {
    }
    return (uint64_t)v2;
  }
  else
  {
    sub_100004928(0, &qword_1000A2E40);
    return NSDictionary.init(dictionaryLiteral:)();
  }
}

void sub_1000231CC(uint64_t a1, char a2)
{
  if (a2)
  {
    id v5 = *v2;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v5 removeObjectForKey:];
  }
  else
  {
    Class v3 = UInt64._bridgeToObjectiveC()().super.super.isa;
    uint64_t v4 = *v2;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v4 setObject:v3 forKeyedSubscript:];
  }
}

uint64_t sub_100023264(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = a1;
  sub_100012D98(a2, a3);
  uint64_t v6 = sub_100022B50(v5, a2, a3);

  sub_100012DAC(a2, a3);
  return v6;
}

uint64_t sub_1000232DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for Logger();
  sub_100023C40();
  __chkstk_darwin(v6);
  sub_1000139A8();
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
  sub_1000116B8(&qword_1000A2588);
  Dictionary.reserveCapacity(_:)(2);
  uint64_t Data = OPACKEncoderCreateData();
  if (Data)
  {
    uint64_t v8 = Data;
    Int._bridgeToObjectiveC()();
    sub_100004928(0, &qword_1000A2598);
    sub_1000237C8();
    sub_100023D18();
    type metadata accessor for CFData(0);
    uint64_t v23 = v19;
    v22[0] = v8;
    sub_100021AF0((uint64_t)v22, (uint64_t)v24);
    if (a3 >> 60 != 15)
    {
      sub_1000128FC(a2, a3);
      v22[0] = Int._bridgeToObjectiveC()().super.super.isa;
      sub_100023D18();
      uint64_t v23 = &type metadata for Data;
      v22[0] = a2;
      v22[1] = a3;
      sub_100021AF0((uint64_t)v22, (uint64_t)v24);
    }
    return v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    sub_100023D38();
    id v12 = sub_100021EC8(v9, v10, v11);
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    sub_100004964(v3, (uint64_t)qword_1000AA248);
    uint64_t v13 = sub_100023CAC();
    uint64_t v15 = v14(v13);
    __chkstk_darwin(v15);
    sub_100019968((uint64_t (*)(void))sub_1000235D8, 0, (void (*)(void))sub_100012D6C);
    uint64_t v16 = sub_100013BCC();
    v17(v16);
    uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  }
  return v18;
}

unint64_t sub_1000235D8()
{
  return 0xD00000000000001DLL;
}

void sub_1000235F8(uint64_t a1, char a2)
{
}

uint64_t sub_100023600()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100012D98(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100023634()
{
  return sub_100023264(*(void **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

id sub_100023640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

uint64_t sub_1000236F4(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A2F20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100023754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000237BC()
{
  return _os_variant_has_internal_ui("com.apple.sidecar");
}

unint64_t sub_1000237C8()
{
  unint64_t result = qword_1000A25A0;
  if (!qword_1000A25A0)
  {
    sub_100004928(255, &qword_1000A2598);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A25A0);
  }
  return result;
}

uint64_t sub_100023834(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for MutablePacket()
{
  return &type metadata for MutablePacket;
}

void _s12SidecarRelay13MutablePacketVwxx_0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    sub_1000048D0(v3, v2);
  }
}

void *_s12SidecarRelay13MutablePacketVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v4 = a1 + 1;
  id v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  id v7 = v3;
  if (v6 >> 60 == 15)
  {
    *uint64_t v4 = *v5;
  }
  else
  {
    sub_100023CDC();
    a1[1] = v4;
    a1[2] = v6;
  }
  return a1;
}

uint64_t _s12SidecarRelay13MutablePacketVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = (_OWORD *)(a1 + 8);
  NSDictionary v8 = (_OWORD *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      sub_100023CDC();
      uint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      sub_1000048D0(v10, v11);
      return a1;
    }
    sub_100023834(a1 + 8);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    _OWORD *v7 = *v8;
    return a1;
  }
  sub_100023CDC();
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  return a1;
}

uint64_t _s12SidecarRelay13MutablePacketVwta_0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  id v5 = a2 + 1;
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = a2[2];
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v5;
      *(void *)(a1 + 16) = v7;
      sub_1000048D0(v8, v6);
      return a1;
    }
    sub_100023834(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
  return a1;
}

ValueMetadata *type metadata accessor for Packet()
{
  return &type metadata for Packet;
}

unint64_t sub_100023AA4(uint64_t a1)
{
  unint64_t result = sub_100023ACC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100023ACC()
{
  unint64_t result = qword_1000A25A8;
  if (!qword_1000A25A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A25A8);
  }
  return result;
}

unint64_t sub_100023B18(uint64_t a1)
{
  unint64_t result = sub_100023B40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100023B40()
{
  unint64_t result = qword_1000A25B0;
  if (!qword_1000A25B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A25B0);
  }
  return result;
}

unint64_t sub_100023B8C(uint64_t a1)
{
  unint64_t result = sub_100023BB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100023BB4()
{
  unint64_t result = qword_1000A25B8;
  if (!qword_1000A25B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A25B8);
  }
  return result;
}

void sub_100023C04()
{
  uint64_t v1 = 10;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100023C20()
{
  return swift_dynamicCast();
}

void sub_100023C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  String.append(_:)(*(Swift::String *)&a11);
}

uint64_t sub_100023C7C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1) {
    return a9;
  }
  else {
    return 0;
  }
}

id sub_100023C94(uint64_t a1, const char *a2)
{
  return [v2 a2:v3];
}

uint64_t sub_100023CAC()
{
  return v0;
}

void sub_100023CC4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100023CDC()
{
  uint64_t v3 = *v1;
  return sub_1000128FC(v3, v0);
}

uint64_t sub_100023CF8()
{
  return swift_dynamicCast();
}

uint64_t sub_100023D18()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_100023D4C()
{
  return swift_dynamicCast();
}

uint64_t sub_100023D6C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A25C0);
  sub_100004964(v0, (uint64_t)qword_1000A25C0);
  return Logger.init(subsystem:category:)();
}

void *sub_100023DEC(void *a1)
{
  v1[2] = a1;
  v1[3] = 0;
  type metadata accessor for EnhancedDiscoveryController();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 32) = 1;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = 0;
  v1[4] = v3;
  id v4 = a1;
  return v1;
}

void sub_100023E3C(uint64_t a1, uint64_t a2, void (*a3)(void, void, id), uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000A1320 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100004964(v13, (uint64_t)qword_1000A25C0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = v9;
    uint64_t v17 = v16;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v32 = v26;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v29 = a3;
    swift_bridgeObjectRetain();
    uint64_t v25 = (char *)&type metadata for Any + 8;
    uint64_t v18 = Dictionary.description.getter();
    uint64_t v30 = a4;
    uint64_t v19 = v18;
    uint64_t v28 = v8;
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_100017070(v19, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v31 = a2;
    swift_bridgeObjectRetain();
    sub_1000116B8((uint64_t *)&unk_1000A26B0);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v31 = sub_100017070(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a3 = v29;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Handling remote initiation request. Request: [%s. Options: [%s]", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t *v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  char v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v24) {
    sub_100024208(-999, 0xD000000000000042, 0x800000010007F280, a3);
  }
  else {
    __break(1u);
  }
}

void sub_100024208(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, id))
{
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  id v11 = sub_100021CF8(v8, v10, a1, a2, a3, 0);
  if (qword_1000A1320 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100004964(v12, (uint64_t)qword_1000A25C0);
  id v13 = v11;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412290;
    id v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error encountered: [%@].", v16, 0xCu);
    sub_1000116B8((uint64_t *)&unk_1000A21F0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v18 = v13;
  a4(0, 0, v13);
}

uint64_t sub_100024470()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000244A0()
{
  sub_100024470();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationRequestHandler()
{
  return self;
}

void sub_1000244F8(uint64_t a1, uint64_t a2, void (*a3)(void, void, id), uint64_t a4)
{
}

void sub_10002451C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_100024588()
{
  sub_100051D04();
  sub_1000510D4();
  uint64_t v1 = (void *)sub_1000416AC(v0);
  swift_endAccess();

  if (v1)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    sub_10004F5C8();
    swift_allocError();
    *uint64_t v2 = 0;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100013DE4();
    id v6 = sub_1000519C8(v3, v4, -101, 17, v5);
    sub_100051600();
  }
}

double sub_100024664@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10004063C(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_100012A54(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double sub_1000246C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1000406B4(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_100012A54(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10002472C@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v6 = 0uLL;
  if (*(void *)(a4 + 16))
  {
    unint64_t v8 = sub_1000409C0(a1, a2, a3);
    if (v9)
    {
      uint64_t v10 = *(void *)(a4 + 56) + 40 * v8;
      long long v14 = *(_OWORD *)v10;
      uint64_t v11 = *(void *)(v10 + 16);
      uint64_t v12 = *(void *)(v10 + 24);
      uint64_t result = swift_retain();
      long long v6 = v14;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t result = 0;
      long long v6 = 0uLL;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
  *(_OWORD *)a5 = v6;
  *(void *)(a5 + 16) = v11;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = result;
  return result;
}

uint64_t sub_1000247C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100040AD0(), (v5 & 1) != 0))
  {
    unint64_t v6 = v4;
    uint64_t v7 = *(void *)(a1 + 56);
    _s7SessionC8IdentityVMa(0);
    sub_1000139D0();
    sub_1000468D0(v7 + *(void *)(v8 + 72) * v6, a2, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v9 = sub_100051D10();
  }
  else
  {
    _s7SessionC8IdentityVMa(0);
    uint64_t v9 = sub_1000515C0();
  }

  return sub_100012E34(v9, v10, v11, v12);
}

uint64_t sub_100024870(uint64_t a1, uint64_t a2)
{
  return sub_100024888(a1, a2, (void (*)(void))sub_100040AD0);
}

uint64_t sub_100024888(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(void *)(a2 + 16) && (a3(), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1000248D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10004063C(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    type metadata accessor for CompanionLinkDevice();
    sub_1000139D0();
    sub_1000468D0(v9 + *(void *)(v10 + 72) * v8, a4, (void (*)(void))type metadata accessor for CompanionLinkDevice);
    uint64_t v11 = sub_100051D10();
  }
  else
  {
    type metadata accessor for CompanionLinkDevice();
    uint64_t v11 = sub_1000515C0();
  }

  return sub_100012E34(v11, v12, v13, v14);
}

uint64_t sub_100024974(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1000406B4(a1), (v2 & 1) != 0)) {
    return swift_unknownObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1000249B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10004063C(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

id sub_1000249FC(uint64_t a1)
{
  uint64_t v2 = RapportStreamSession.streamID.getter();
  if (!v3) {
    goto LABEL_4;
  }
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  uint64_t v19 = 58;
  unint64_t v20 = 0xE100000000000000;
  __chkstk_darwin(v2);
  uint64_t v18[2] = &v19;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10003EDA0(1, 0, sub_100050F88, (uint64_t)v18, v4, v5);
  swift_bridgeObjectRelease();
  sub_10003C650(v6);
  sub_100051BD8();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_1000516F8();
    static String._fromSubstring(_:)();
    sub_100051BD8();
    swift_bridgeObjectRelease();
    sub_1000516F8();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = *(id *)(a1 + 16);
    id v12 = [v9 initWithIdentifier:v10 rapportStream:v11, v19, v20];

    swift_release();
  }
  else
  {
LABEL_4:
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100013DE4();
    id v12 = sub_100021CF8(v13, v14, -1001, 0xD000000000000022, v15, 0);
    id v16 = v12;
    swift_willThrow();

    swift_release();
  }
  return v12;
}

uint64_t sub_100024C08(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = _s7SessionC8IdentityVMa(0), *(void *)(a1 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20))))
  {
    char v5 = *(unsigned char *)(a1 + *(int *)(v4 + 24)) ^ *(unsigned char *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_100024C78()
{
  sub_100013AD0();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_100028414(v0);
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100024CD8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v31 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v28 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v28 - v10;
  unint64_t v36 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10004DC94(a1, v35);
  uint64_t v12 = v35[0];
  int64_t v34 = v35[3];
  unint64_t v13 = v35[4];
  uint64_t v32 = v35[1];
  int64_t v33 = (unint64_t)(v35[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v34 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v17 >= v33) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v32 + 8 * v17);
    int64_t v19 = v34 + 1;
    if (!v18)
    {
      int64_t v19 = v34 + 2;
      if (v34 + 2 >= v33) {
        goto LABEL_25;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v34 + 3;
        if (v34 + 3 >= v33) {
          goto LABEL_25;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v34 + 4;
          if (v34 + 4 >= v33) {
            goto LABEL_25;
          }
          unint64_t v18 = *(void *)(v32 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v34 + 5;
            if (v34 + 5 >= v33) {
              goto LABEL_25;
            }
            unint64_t v18 = *(void *)(v32 + 8 * v19);
            if (!v18)
            {
              int64_t v20 = v34 + 6;
              while (v20 < v33)
              {
                unint64_t v18 = *(void *)(v32 + 8 * v20++);
                if (v18)
                {
                  int64_t v19 = v20 - 1;
                  goto LABEL_19;
                }
              }
LABEL_25:
              swift_release();
              unint64_t v27 = v36;

              return v27;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    int64_t v34 = v19;
LABEL_20:
    uint64_t v21 = *(void *)(v12 + 48);
    uint64_t v22 = _s7SessionC8IdentityVMa(0);
    sub_1000468D0(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v16, (uint64_t)v11, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v11[*(int *)(v4 + 48)] = *(void *)(*(void *)(v12 + 56) + 8 * v16);
    sub_10004F8D8((uint64_t)v11, (uint64_t)v9, &qword_1000A2E78);
    uint64_t v23 = *(void *)&v9[*(int *)(v4 + 48)];
    swift_retain();
    if (sub_10002D280())
    {
      char v24 = a2;
      uint64_t v25 = *(int *)(v4 + 48);
      uint64_t v26 = v31;
      sub_1000468D0((uint64_t)v9, v31, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)(v26 + v25) = v23;
      swift_retain();
      sub_100046880();
      sub_1000131C8((uint64_t)v9, &qword_1000A2E78);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      a2 = v24;
      uint64_t v12 = v29;
      id v11 = v30;
    }
    else
    {
      uint64_t result = sub_1000131C8((uint64_t)v9, &qword_1000A2E78);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100025064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v37 = a2;
  uint64_t v4 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v34 - v14;
  unint64_t v42 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10004DC94(a1, v41);
  uint64_t v38 = v41[0];
  int64_t v40 = v41[3];
  unint64_t v16 = v41[4];
  uint64_t v35 = v41[1];
  int64_t v36 = (unint64_t)(v41[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v40 << 6);
LABEL_20:
    uint64_t v24 = v38;
    uint64_t v25 = *(void *)(v38 + 48);
    uint64_t v26 = _s7SessionC8IdentityVMa(0);
    sub_1000468D0(v25 + *(void *)(*(void *)(v26 - 8) + 72) * v19, (uint64_t)v15, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v15[*(int *)(v4 + 48)] = *(void *)(*(void *)(v24 + 56) + 8 * v19);
    sub_10004F8D8((uint64_t)v15, (uint64_t)v13, &qword_1000A2E78);
    uint64_t v27 = *(int *)(v4 + 48);
    sub_1000468D0((uint64_t)v13, (uint64_t)v10, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v28 = *(void *)&v13[v27];
    *(void *)&v10[v27] = v28;
    uint64_t v29 = (void *)(v28 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    if (*v29 == v37 && v29[1] == v39)
    {
      swift_retain();
      sub_100046880();
LABEL_27:
      uint64_t v32 = *(int *)(v4 + 48);
      sub_1000468D0((uint64_t)v13, (uint64_t)v7, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)&v7[v32] = *(void *)&v13[v27];
      swift_retain();
      sub_100046880();
      sub_1000131C8((uint64_t)v13, &qword_1000A2E78);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_retain();
      sub_100046880();
      if (v31) {
        goto LABEL_27;
      }
      uint64_t result = sub_1000131C8((uint64_t)v13, &qword_1000A2E78);
    }
  }
  int64_t v20 = v40 + 1;
  if (!__OFADD__(v40, 1))
  {
    if (v20 >= v36) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    int64_t v22 = v40 + 1;
    if (!v21)
    {
      int64_t v22 = v40 + 2;
      if (v40 + 2 >= v36) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v40 + 3;
        if (v40 + 3 >= v36) {
          goto LABEL_30;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v40 + 4;
          if (v40 + 4 >= v36) {
            goto LABEL_30;
          }
          unint64_t v21 = *(void *)(v35 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v40 + 5;
            if (v40 + 5 >= v36) {
              goto LABEL_30;
            }
            unint64_t v21 = *(void *)(v35 + 8 * v22);
            if (!v21)
            {
              int64_t v23 = v40 + 6;
              while (v23 < v36)
              {
                unint64_t v21 = *(void *)(v35 + 8 * v23++);
                if (v21)
                {
                  int64_t v22 = v23 - 1;
                  goto LABEL_19;
                }
              }
LABEL_30:
              swift_release();
              unint64_t v33 = v42;
              swift_bridgeObjectRelease();
              return v33;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    int64_t v40 = v22;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100025484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a3;
  uint64_t v57 = a2;
  uint64_t v58 = a4;
  uint64_t v64 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v5 = __chkstk_darwin(v64);
  uint64_t v54 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v62 = (uint64_t)&v51 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v60 = (uint64_t)&v51 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v51 - v18;
  __chkstk_darwin(v17);
  uint64_t v59 = (uint64_t)&v51 - v20;
  unint64_t v67 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10004DC94(a1, v66);
  uint64_t v61 = v66[0];
  int64_t v63 = v66[3];
  unint64_t v21 = v66[4];
  uint64_t v55 = v66[1];
  int64_t v56 = (unint64_t)(v66[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v53 = v12;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      uint64_t v24 = (v21 - 1) & v21;
      unint64_t v25 = v23 | (v63 << 6);
      goto LABEL_20;
    }
    int64_t v26 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      break;
    }
    if (v26 >= v56) {
      goto LABEL_38;
    }
    unint64_t v27 = *(void *)(v55 + 8 * v26);
    int64_t v28 = v63 + 1;
    if (!v27)
    {
      int64_t v28 = v63 + 2;
      if (v63 + 2 >= v56) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v55 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v63 + 3;
        if (v63 + 3 >= v56) {
          goto LABEL_38;
        }
        unint64_t v27 = *(void *)(v55 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v63 + 4;
          if (v63 + 4 >= v56) {
            goto LABEL_38;
          }
          unint64_t v27 = *(void *)(v55 + 8 * v28);
          if (!v27)
          {
            int64_t v28 = v63 + 5;
            if (v63 + 5 >= v56) {
              goto LABEL_38;
            }
            unint64_t v27 = *(void *)(v55 + 8 * v28);
            if (!v27)
            {
              int64_t v29 = v63 + 6;
              while (v29 < v56)
              {
                unint64_t v27 = *(void *)(v55 + 8 * v29++);
                if (v27)
                {
                  int64_t v28 = v29 - 1;
                  goto LABEL_19;
                }
              }
LABEL_38:
              swift_release();
              unint64_t v50 = v67;
              swift_release();
              swift_bridgeObjectRelease();
              return v50;
            }
          }
        }
      }
    }
LABEL_19:
    uint64_t v24 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
    int64_t v63 = v28;
LABEL_20:
    uint64_t v30 = v61;
    uint64_t v31 = *(void *)(v61 + 48);
    uint64_t v32 = _s7SessionC8IdentityVMa(0);
    uint64_t v33 = v59;
    sub_1000468D0(v31 + *(void *)(*(void *)(v32 - 8) + 72) * v25, v59, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v34 = *(void *)(*(void *)(v30 + 56) + 8 * v25);
    uint64_t v35 = v64;
    *(void *)(v33 + *(int *)(v64 + 48)) = v34;
    sub_10004F8D8(v33, (uint64_t)v19, &qword_1000A2E78);
    uint64_t v36 = *(int *)(v35 + 48);
    uint64_t v37 = v60;
    sub_1000468D0((uint64_t)v19, v60, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)(v37 + v36) = *(void *)&v19[v36];
    uint64_t Strong = swift_weakLoadStrong();
    swift_retain();
    sub_100046880();
    unint64_t v65 = v24;
    if (Strong)
    {
      swift_release();
      LODWORD(Strong) = Strong == v57;
    }
    uint64_t v39 = v35;
    uint64_t v40 = *(int *)(v35 + 48);
    uint64_t v41 = v62;
    sub_1000468D0((uint64_t)v19, v62, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v42 = *(void *)&v19[v36];
    *(void *)(v41 + v40) = v42;
    if (!Strong)
    {
      swift_retain();
      sub_1000131C8(v41, &qword_1000A2E78);
      unint64_t v21 = v65;
      goto LABEL_31;
    }
    uint64_t v43 = *(int *)(v39 + 48);
    sub_1000468D0(v41, (uint64_t)v12, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v12[v43] = v42;
    if (!v58)
    {
      swift_retain_n();
      sub_1000131C8((uint64_t)v12, &qword_1000A2E78);
      sub_1000131C8(v41, &qword_1000A2E78);
LABEL_34:
      unint64_t v21 = v65;
      goto LABEL_35;
    }
    uint64_t v44 = *(int *)(v39 + 48);
    sub_1000468D0((uint64_t)v12, (uint64_t)v9, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v45 = v58;
    *(void *)&v9[v44] = v42;
    if (*(void *)(v42 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service) == v52
      && *(void *)(v42 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8) == v45)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_1000131C8((uint64_t)v12, &qword_1000A2E78);
      sub_1000131C8(v62, &qword_1000A2E78);
      swift_bridgeObjectRelease();
      sub_100046880();
      goto LABEL_34;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1000131C8((uint64_t)v12, &qword_1000A2E78);
    sub_1000131C8(v62, &qword_1000A2E78);
    swift_bridgeObjectRelease();
    sub_100046880();
    unint64_t v21 = v65;
    if (v47)
    {
LABEL_35:
      uint64_t v48 = *(int *)(v64 + 48);
      uint64_t v49 = v54;
      sub_1000468D0((uint64_t)v19, v54, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)(v49 + v48) = *(void *)&v19[v36];
      swift_retain();
      sub_100046880();
      sub_1000131C8((uint64_t)v19, &qword_1000A2E78);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      uint64_t v12 = v53;
    }
    else
    {
LABEL_31:
      uint64_t result = sub_1000131C8((uint64_t)v19, &qword_1000A2E78);
    }
  }
  __break(1u);
  return result;
}

void sub_100025AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100013C20();
  a19 = v22;
  a20 = v23;
  uint64_t v71 = v24;
  unint64_t v72 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v69 = v30;
  uint64_t v70 = v31;
  uint64_t v32 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  sub_100013AFC();
  uint64_t v38 = v37 - v36;
  uint64_t v39 = _s7SessionC8IdentityVMa(0);
  uint64_t v40 = sub_100051080(v39);
  __chkstk_darwin(v40);
  sub_1000516C8();
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v66 - v42;
  sub_100031B18(v29, v27, v44, v45, v46, v47, v48, v49, v66, v67);
  if (!v20)
  {
    uint64_t v67 = v27;
    uint64_t v68 = 0;
    sub_1000341E4(v29, (uint64_t)v43);
    sub_1000468D0((uint64_t)v43, v21, (void (*)(void))_s7SessionC8IdentityVMa);
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_100004964(v32, (uint64_t)qword_1000AA248);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v38, v50, v32);
    type metadata accessor for Relay.Session(0);
    uint64_t v51 = swift_allocObject();
    swift_bridgeObjectRetain();
    sub_100051B24();
    sub_10002D104();
    sub_10003404C(v51, (uint64_t)v43);
    swift_weakAssign();
    sub_10002E0B4();
    uint64_t v52 = sub_100051590();
    sub_1000318FC(v52, v53);
    swift_retain_n();
    sub_100051BAC();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      unint64_t v72 = v43;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      a10 = v71;
      *(_DWORD *)uint64_t v56 = 136446722;
      swift_retain();
      sub_10002CDDC();
      uint64_t v58 = v57;
      unint64_t v60 = v59;
      swift_release();
      uint64_t v73 = sub_100017070(v58, v60, &a10);
      sub_100051838();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2082;
      swift_retain();
      unint64_t v61 = RapportRemoteDisplaySession.description.getter();
      unint64_t v63 = v62;
      swift_release();
      uint64_t v73 = sub_100017070(v61, v63, &a10);
      sub_100051838();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 22) = 2082;
      switch(v67)
      {
        case 1:
          unint64_t v64 = 0xE400000000000000;
          uint64_t v65 = 1279547201;
          break;
        case 3:
          unint64_t v64 = 0xE400000000000000;
          uint64_t v65 = 1229343063;
          break;
        case 2:
          unint64_t v64 = 0xE300000000000000;
          uint64_t v65 = 4346709;
          break;
        default:
          uint64_t v65 = 0;
          unint64_t v64 = 0xE000000000000000;
          break;
      }
      uint64_t v73 = sub_100017070(v65, v64, &a10);
      sub_100051838();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}s: Session Opened with %{public}s (%{public}s)", (uint8_t *)v56, 0x20u);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }
    sub_100046880();
  }
  sub_100013C38();
}

void sub_100025F44()
{
  sub_10001394C();
  uint64_t v2 = v0;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for SidecarIdentity();
  uint64_t v10 = sub_100051080(v9);
  __chkstk_darwin(v10);
  sub_100017C94();
  uint64_t v87 = _s7SessionC8IdentityVMa(0);
  sub_1000139D0();
  __chkstk_darwin(v11);
  sub_10001EC1C();
  uint64_t v88 = v12;
  sub_1000510F0();
  __chkstk_darwin(v13);
  sub_1000512E4();
  id v90 = v14;
  sub_1000510F0();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v82 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100051198();
  Swift::String v91 = v17;
  int v89 = v4;
  if (v6)
  {
    swift_errorRetain();
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    sub_100004964(v18, (uint64_t)qword_1000AA248);
    sub_100051C88();
    sub_100051210();
    uint64_t v23 = v22();
    __chkstk_darwin(v23);
    sub_10005159C();
    *(void *)(v24 - 16) = v6;
    sub_100019968(sub_10004AF78, v8, (void (*)(void))sub_100013904);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v0, v18);
    swift_errorRelease();
    if (v4) {
LABEL_5:
    }
      sub_10002E3FC();
  }
  else
  {
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    sub_100004964(v18, (uint64_t)qword_1000AA248);
    sub_100051BAC();
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = sub_100051A00();
      uint64_t v92 = v1;
      unint64_t v63 = (uint8_t *)v62;
      uint64_t v64 = sub_100013E10();
      uint64_t v86 = v0;
      uint64_t v96 = v64;
      *(_DWORD *)unint64_t v63 = 136446210;
      uint64_t v85 = (uint64_t)(v63 + 4);
      swift_retain();
      sub_10002CDDC();
      uint64_t v66 = v65;
      unint64_t v68 = v67;
      swift_release();
      uint64_t v69 = sub_100017070(v66, v68, &v96);
      sub_100051D38(v69);
      LOBYTE(v4) = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100013DCC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "%{public}s: Close Session", v63, 0xCu);
      sub_1000514C8();
      uint64_t v2 = v86;
      sub_100004A0C();
      uint64_t v1 = v92;
      sub_100004A0C();
    }
    else
    {

      sub_100013DCC();
    }
    uint64_t v17 = v91;
    if (v4) {
      goto LABEL_5;
    }
  }
  sub_10002E558();
  sub_1000343C4(v8);
  uint64_t v25 = v8 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  sub_100034114(v8 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity);
  uint64_t v92 = v25;
  sub_1000468D0(v25, (uint64_t)v17, (void (*)(void))_s7SessionC8IdentityVMa);
  uint64_t v26 = (uint64_t *)(v2 + 152);
  sub_100013AD0();
  uint64_t v27 = *(void *)(v2 + 152);
  uint64_t v28 = "e_state_s";
  if (*(void *)(v27 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_100040814((uint64_t)v17);
    if (v30)
    {
      uint64_t v31 = v29;
      uint64_t v86 = v2;
      int v32 = *(_DWORD *)(v27 + 36);
      swift_bridgeObjectRelease();
      id v33 = sub_1000344F8(v90, v31, v32, 0, *v26);
      sub_100046880();
      if (*((unsigned char *)v33 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect) == 1)
      {
        if (qword_1000A1340 != -1) {
          swift_once();
        }
        sub_100004964(v18, (uint64_t)qword_1000AA248);
        uint64_t v34 = v88;
        sub_1000468D0((uint64_t)v17, v88, (void (*)(void))_s7SessionC8IdentityVMa);
        uint64_t v35 = (char *)v33;
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        int v38 = v37;
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v39 = swift_slowAlloc();
          uint64_t v85 = sub_100013E10();
          uint64_t v95 = (void *)v85;
          *(_DWORD *)uint64_t v39 = 136446466;
          os_log_t v84 = v36;
          uint64_t v40 = sub_10005A15C();
          uint64_t v41 = v34;
          uint64_t v42 = v40;
          unint64_t v44 = v43;
          uint64_t v45 = *(int *)(v87 + 20);
          BOOL v46 = *(unsigned char *)(v41 + *(int *)(v87 + 24)) == 0;
          uint64_t v47 = v1;
          if (*(unsigned char *)(v41 + *(int *)(v87 + 24))) {
            uint64_t v48 = 0x65746F6D6572;
          }
          else {
            uint64_t v48 = 0x6C61636F6CLL;
          }
          uint64_t v83 = v35;
          if (v46) {
            uint64_t v49 = (void *)0xE500000000000000;
          }
          else {
            uint64_t v49 = (void *)0xE600000000000000;
          }
          uint64_t v82 = v39 + 4;
          uint64_t v93 = *(void *)(v41 + v45);
          sub_1000129C4();
          uint64_t v50 = String.init<A>(_:radix:uppercase:)();
          LODWORD(v87) = v38;
          uint64_t v51 = v50;
          uint64_t v53 = v52;
          uint64_t v93 = v42;
          unint64_t v94 = v44;
          sub_100013D84();
          v54._countAndFlagsBits = v48;
          uint64_t v1 = v47;
          v54._object = v49;
          String.append(_:)(v54);
          swift_bridgeObjectRelease();
          sub_100013D84();
          v55._countAndFlagsBits = v51;
          v55._object = v53;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          uint64_t v56 = sub_100017070(v93, v94, (uint64_t *)&v95);
          sub_100051D38(v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100046880();
          *(_WORD *)(v39 + 12) = 1024;
          id v57 = v83;
          int v58 = *(_DWORD *)&v83[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

          LODWORD(v93) = v58;
          uint64_t v28 = "os_activity_scope_state_s" + 16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          os_log_t v59 = v84;
          _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v87, "%{public}s: Allow Session Reconnect to Service Provider PID %d", (uint8_t *)v39, 0x12u);
          swift_arrayDestroy();
          sub_100004A0C();
          sub_100004A0C();
        }
        else
        {

          sub_100046880();
          uint64_t v28 = "e_state_s";
        }
      }
      else
      {
        swift_beginAccess();
        sub_1000116B8(&qword_1000A2E58);
        Dictionary._Variant.remove(at:)();
        uint64_t v70 = v95;
        swift_endAccess();

        uint64_t v28 = "e_state_s";
        sub_100046880();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  sub_100004964(v18, (uint64_t)qword_1000AA248);
  sub_100051BAC();
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc();
    uint64_t v93 = sub_100013E10();
    *(_DWORD *)uint64_t v73 = *((void *)v28 + 138);
    swift_retain();
    sub_10002CDDC();
    uint64_t v75 = v74;
    uint64_t v76 = v1;
    unint64_t v78 = v77;
    swift_release();
    uint64_t v95 = (void *)sub_100017070(v75, v78, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013DCC();
    uint64_t v1 = v76;
    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 12) = 1024;
    LODWORD(v95) = v89 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "%{public}s: Close Session (Send Disconnect: %{BOOL}d)", (uint8_t *)v73, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100013DCC();
  }
  sub_100034690();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v80 = Strong;
    swift_weakAssign();
    sub_1000316A8(v80);
    uint64_t v81 = (uint64_t)v90;
    sub_1000468D0(v92, (uint64_t)v90, (void (*)(void))_s7SessionC8IdentityVMa);
    sub_10004DD54(v81, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
    sub_100051318();
    sub_100033D20();
    swift_release();
    sub_100046880();
  }
  sub_100046880();
  sub_100013964();
}

uint64_t sub_10002691C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a7;
  type metadata accessor for RapportStreamSession();
  uint64_t v12 = RapportStreamSession.__allocating_init()();
  RapportStreamSession.delegatedProcessUPID.setter(a4);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    uint64_t v30 = type metadata accessor for RapportRemoteDisplaySession();
    uint64_t v31 = &protocol witness table for RapportRemoteDisplaySession;
    uint64_t v28 = v14;
    swift_retain();
    RapportStreamSession.messenger.setter((uint64_t)&v28);
    swift_release();
    uint64_t v15 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    uint64_t v28 = *(void *)(v15 + *(int *)(_s7SessionC8IdentityVMa(0) + 20));
    sub_1000126B0();
    sub_100013BC0();
    uint64_t v28 = String.init<A>(_:radix:uppercase:)();
    uint64_t v29 = v16;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 58;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = sub_100051B24();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    RapportStreamSession.streamID.setter(v28, v29);
    if ((unint64_t)(a2 - 1) < 3) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = 0;
    }
    RapportStreamSession.streamType.setter(v19);
    uint64_t v20 = RapportStreamSession.streamFlags.getter();
    uint64_t v21 = 0;
    if ((a3 & 2) != 0) {
      uint64_t v21 = *(void *)RapportStreamFlags.lowLatency.unsafeMutableAddressor();
    }
    RapportStreamSession.streamFlags.setter(v21 | v20);
    unsigned int v22 = RapportStreamSession.trafficFlags.getter();
    RapportStreamSession.trafficFlags.setter(v22 & 0xFFFFBDFF);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v32;
    v23[3] = a8;
    v23[4] = v12;
    swift_retain();
    swift_retain();
    RapportStreamSession.prepare(completion:)((uint64_t)sub_10004F960, (uint64_t)v23);
    swift_release();
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v24, v25, -1020);
    sub_100051704();
  }
  return swift_release();
}

void sub_100026B78()
{
  sub_1000518D0();
  uint64_t v3 = v2;
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  uint64_t v5 = sub_100051080(v4);
  __chkstk_darwin(v5);
  sub_1000139F8();
  uint64_t v6 = type metadata accessor for SidecarIdentity();
  uint64_t v7 = sub_100051080(v6);
  __chkstk_darwin(v7);
  sub_100051854();
  uint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_1000468D0(v3 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v1, (void (*)(void))_s7SessionC8IdentityVMa);
  sub_10004DD54(v1, (uint64_t)v13, (void (*)(void))type metadata accessor for SidecarIdentity);
  swift_beginAccess();
  uint64_t v14 = sub_100024888((uint64_t)v13, *(void *)(v0 + 136), (void (*)(void))sub_100040760);
  swift_endAccess();
  sub_1000468D0((uint64_t)v13, v10, (void (*)(void))type metadata accessor for SidecarIdentity);
  if (!v14)
  {
    type metadata accessor for Domain();
    swift_allocObject();
    Domain.init()();
    swift_beginAccess();
    uint64_t v15 = swift_retain();
    sub_1000441A0(v15, v10, &unk_1000A2EB0);
    swift_endAccess();
  }
  sub_100046880();
  uint64_t v16 = sub_10005141C();
  Domain.allocate(completion:)(v16, v17);
  sub_10002E798();
  swift_release();
  sub_100046880();
  sub_1000516E4();
}

void sub_100026D90()
{
  sub_10001394C();
  uint64_t v242 = v2;
  uint64_t v259 = sub_1000116B8(&qword_1000A2EF8);
  sub_1000139D0();
  __chkstk_darwin(v3);
  sub_10001EC1C();
  uint64_t v258 = v4;
  sub_1000510F0();
  __chkstk_darwin(v5);
  sub_1000512E4();
  uint64_t v257 = v6;
  sub_1000510F0();
  __chkstk_darwin(v7);
  sub_1000512E4();
  uint64_t v256 = v8;
  sub_1000510F0();
  __chkstk_darwin(v9);
  sub_1000512E4();
  uint64_t v255 = v10;
  sub_1000510F0();
  __chkstk_darwin(v11);
  sub_10001EC30();
  uint64_t v254 = v12;
  uint64_t v253 = sub_1000116B8(&qword_1000A2E78);
  sub_1000139D0();
  __chkstk_darwin(v13);
  sub_10001EC1C();
  uint64_t v252 = v14;
  sub_1000510F0();
  __chkstk_darwin(v15);
  sub_1000512E4();
  uint64_t v251 = v16;
  sub_1000510F0();
  __chkstk_darwin(v17);
  sub_1000512E4();
  uint64_t v250 = v18;
  sub_1000510F0();
  __chkstk_darwin(v19);
  sub_1000512E4();
  uint64_t v249 = v20;
  sub_1000510F0();
  __chkstk_darwin(v21);
  sub_10001EC30();
  uint64_t v248 = v22;
  uint64_t v275 = sub_1000116B8(&qword_1000A2E70);
  sub_1000139D0();
  __chkstk_darwin(v23);
  sub_10001EC1C();
  uint64_t v246 = v24;
  sub_1000510F0();
  __chkstk_darwin(v25);
  sub_1000512E4();
  uint64_t v261 = v26;
  sub_1000510F0();
  __chkstk_darwin(v27);
  sub_1000512E4();
  uint64_t v273 = v28;
  sub_1000510F0();
  __chkstk_darwin(v29);
  sub_1000512E4();
  v245 = v30;
  sub_1000510F0();
  __chkstk_darwin(v31);
  sub_10001EC30();
  v244 = v32;
  uint64_t v269 = sub_1000116B8(&qword_1000A30B8);
  sub_100013930();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  sub_10001EC1C();
  uint64_t v265 = v36;
  sub_1000510F0();
  __chkstk_darwin(v37);
  sub_10001EC30();
  v263 = v38;
  sub_100013AD0();
  v243 = v0;
  uint64_t v39 = v0[20];
  unint64_t v40 = *(void *)(v39 + 16);
  if (v40)
  {
    uint64_t v294 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100060EC8();
    uint64_t v41 = _swiftEmptyArrayStorage;
    uint64_t v42 = sub_10004DE28(v39);
    if ((v42 & 0x8000000000000000) == 0 && (unint64_t v43 = v42, sub_100051864(), v45 ^ v46))
    {
      unint64_t v1 = v44;
      uint64_t v47 = v39 + 64;
      while ((*(void *)(v47 + 8 * (v43 >> 6)) & (1 << v43)) != 0)
      {
        if (*(_DWORD *)(v39 + 36) != v1) {
          goto LABEL_121;
        }
        unint64_t v277 = v40;
        uint64_t v48 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v43);
        uint64_t v49 = v48[1];
        uint64_t v281 = *v48;
        unint64_t v50 = *(void *)(*(void *)(v39 + 56) + 8 * v43);
        if (v50 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v279 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v279 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        uint64_t v294 = (uint64_t)v41;
        unint64_t v52 = v41[2];
        unint64_t v51 = v41[3];
        if (v52 >= v51 >> 1)
        {
          sub_100051814(v51);
          sub_100060EC8();
          uint64_t v41 = (void *)v294;
        }
        v41[2] = v52 + 1;
        uint64_t v53 = &v41[3 * v52];
        v53[4] = v281;
        v53[5] = v49;
        v53[6] = v279;
        if ((uint64_t)v43 >= -(-1 << *(unsigned char *)(v39 + 32))) {
          goto LABEL_122;
        }
        uint64_t v47 = v39 + 64;
        if ((*(void *)(v39 + 64 + 8 * (v43 >> 6)) & (1 << v43)) == 0) {
          goto LABEL_123;
        }
        if (*(_DWORD *)(v39 + 36) != v1) {
          goto LABEL_124;
        }
        uint64_t v54 = _HashTable.occupiedBucket(after:)();
        unint64_t v40 = v277 - 1;
        if (v277 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        unint64_t v43 = v54;
        if ((v54 & 0x8000000000000000) == 0)
        {
          unint64_t v1 = *(unsigned int *)(v39 + 36);
          if (v54 < 1 << *(unsigned char *)(v39 + 32)) {
            continue;
          }
        }
        goto LABEL_119;
      }
    }
    else
    {
LABEL_119:
      __break(1u);
    }
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    __break(1u);
    goto LABEL_125;
  }
  uint64_t v41 = _swiftEmptyArrayStorage;
LABEL_22:
  Swift::String v55 = sub_1000287C4((uint64_t)v41, &qword_1000A3120, (void (*)(uint64_t, uint64_t, void **))sub_100047768);
  sub_100013AD0();
  uint64_t v56 = v243[9];
  swift_bridgeObjectRetain_n();
  id v57 = sub_100046CB4(v56);
  swift_bridgeObjectRelease();
  uint64_t v294 = (uint64_t)v57;
  sub_10003EAEC(&v294, &qword_1000A30B8, (uint64_t (*)(uint64_t))sub_10004E138, (uint64_t (*)(void *))sub_100048698);
  v241 = v55;
  swift_bridgeObjectRelease();
  uint64_t v58 = v294;
  unint64_t v1 = *(void *)(v294 + 16);
  if (v1)
  {
    uint64_t v294 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100060E78();
    uint64_t v59 = v58 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    LODWORD(v279) = v58;
    uint64_t v281 = *(void *)(v34 + 72);
    uint64_t v60 = v294;
    do
    {
      sub_100012ED8(v59, (uint64_t)v263, &qword_1000A30B8);
      uint64_t v61 = *(int *)(v269 + 48);
      sub_1000468D0((uint64_t)v263, v265, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v265 + v61) = *(void *)&v263[v61];
      swift_retain();
      uint64_t v62 = RapportRemoteDisplayDiscovery.description.getter();
      uint64_t v64 = v63;
      swift_release();
      sub_100046880();
      uint64_t v65 = sub_1000516F8();
      sub_1000131C8(v65, v66);
      uint64_t v67 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005182C();
        sub_100051874();
        sub_100060E78();
        uint64_t v60 = v294;
      }
      unint64_t v69 = *(void *)(v60 + 16);
      unint64_t v68 = *(void *)(v60 + 24);
      if (v69 >= v68 >> 1)
      {
        sub_100051814(v68);
        sub_100060E78();
        uint64_t v60 = v294;
      }
      *(void *)(v60 + 16) = v69 + 1;
      uint64_t v70 = v60 + 16 * v69;
      *(void *)(v70 + 32) = v67;
      *(void *)(v70 + 40) = v64;
      v59 += v281;
      --v1;
    }
    while (v1);
    v240 = (void *)v60;
    swift_release();
  }
  else
  {
    swift_release();
    v240 = _swiftEmptyArrayStorage;
  }
  sub_100013AD0();
  uint64_t v71 = v243[12];
  uint64_t v39 = *(void *)(v71 + 16);
  os_log_type_t v72 = _swiftEmptyArrayStorage;
  if (v39)
  {
    v285 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100060E28();
    uint64_t v73 = sub_10004DE28(v71);
    if ((v73 & 0x8000000000000000) == 0)
    {
      unint64_t v74 = v73;
      sub_100051864();
      if (v45 != v46)
      {
        unint64_t v1 = v71 + 64;
        while ((*(void *)(v1 + 8 * (v74 >> 6)) & (1 << v74)) != 0)
        {
          if (*(_DWORD *)(v71 + 36) != v75) {
            goto LABEL_127;
          }
          int v266 = v75;
          uint64_t v269 = 1 << v74;
          unint64_t v277 = v74 >> 6;
          v263 = (char *)v39;
          uint64_t v76 = *(int *)(v275 + 48);
          uint64_t v77 = *(void *)(v71 + 48);
          unint64_t v78 = (int *)(type metadata accessor for Relay.RapportSessionKey(0) - 8);
          sub_1000468D0(v77 + *(void *)(*(void *)v78 + 72) * v74, (uint64_t)v244, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
          uint64_t v79 = *(void *)(*(void *)(v71 + 56) + 8 * v74);
          *(void *)&v244[v76] = v79;
          sub_1000468D0((uint64_t)v244, (uint64_t)v245, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
          *(void *)&v245[*(int *)(v275 + 48)] = v79;
          sub_10004F8D8((uint64_t)v245, v273, &qword_1000A2E70);
          sub_100051908();
          sub_1000131C8((uint64_t)v244, &qword_1000A2E70);
          uint64_t v80 = *(int *)(v275 + 48);
          sub_1000519BC();
          sub_1000468D0(v81, v82, v83);
          *(void *)(v261 + v80) = *(void *)(v273 + v80);
          uint64_t v84 = *(void *)(v261 + v78[7]);
          if (v84)
          {
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            uint64_t v86 = sub_100012954(isa);

            unint64_t v87 = 0xE400000000000000;
            uint64_t v294 = 542327881;
            unint64_t v295 = 0xE400000000000000;
            uint64_t v293 = v86;
            sub_1000126B0();
            sub_100013BC0();
            v88._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v88);
            swift_bridgeObjectRelease();
            sub_100013D84();
            switch(v84)
            {
              case 1:
                uint64_t v89 = 1279547201;
                break;
              case 2:
                unint64_t v87 = 0xE300000000000000;
                uint64_t v89 = 4346709;
                break;
              case 3:
                uint64_t v89 = 1229343063;
                break;
              default:
                uint64_t v89 = 0;
                unint64_t v87 = 0xE000000000000000;
                break;
            }
            unint64_t v93 = v87;
            String.append(_:)(*(Swift::String *)&v89);
            swift_bridgeObjectRelease();
            uint64_t v279 = v295;
            uint64_t v281 = v294;
          }
          else
          {
            Class v90 = UUID._bridgeToObjectiveC()().super.isa;
            uint64_t v91 = sub_100012954(v90);

            uint64_t v294 = 542327881;
            unint64_t v295 = 0xE400000000000000;
            uint64_t v293 = v91;
            sub_1000126B0();
            sub_100013BC0();
            v92._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v92);
            swift_bridgeObjectRelease();
            uint64_t v279 = v295;
            uint64_t v281 = v294;
          }
          sub_100046880();
          uint64_t v94 = *(int *)(v275 + 48);
          sub_1000468D0(v273, v246, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
          *(void *)(v246 + v94) = *(void *)(v273 + v80);
          swift_retain();
          unint64_t v1 = RapportRemoteDisplaySession.description.getter();
          uint64_t v39 = v95;
          swift_release();
          sub_100046880();
          sub_1000131C8(v273, &qword_1000A2E70);
          os_log_type_t v72 = v285;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10005182C();
            sub_100051874();
            sub_100060E28();
            os_log_type_t v72 = v285;
          }
          unint64_t v97 = v72[2];
          unint64_t v96 = v72[3];
          if (v97 >= v96 >> 1)
          {
            sub_100051808(v96);
            sub_100060E28();
            os_log_type_t v72 = v285;
          }
          v72[2] = v97 + 1;
          uint64_t v98 = &v72[4 * v97];
          v98[4] = v281;
          v98[5] = v279;
          v98[6] = v1;
          v98[7] = v39;
          sub_1000517F0();
          if (v45 == v46) {
            goto LABEL_128;
          }
          unint64_t v1 = v71 + 64;
          if ((*(void *)(v71 + 64 + 8 * v277) & v269) == 0) {
            goto LABEL_129;
          }
          if (*(_DWORD *)(v71 + 36) != v266) {
            goto LABEL_130;
          }
          sub_100051BFC();
          uint64_t v99 = _HashTable.occupiedBucket(after:)();
          uint64_t v39 = (uint64_t)(v263 - 1);
          if (v263 == (char *)1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          unint64_t v74 = v99;
          if ((v99 & 0x8000000000000000) == 0)
          {
            int v75 = *(_DWORD *)(v71 + 36);
            if (v99 < 1 << *(unsigned char *)(v71 + 32)) {
              continue;
            }
          }
          goto LABEL_125;
        }
        goto LABEL_126;
      }
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    swift_once();
LABEL_116:
    swift_retain();
    unsigned __int8 v227 = sub_10005AAE4();
    swift_release();
    id v228 = sub_10002C774();
    id v229 = RPErrorFlagsCopyDescription((unint64_t)v228);
    uint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v232 = v231;

    uint64_t v233 = v243[11];
    uint64_t v234 = String.init(cString:)();
    uint64_t v236 = v235;
    if (qword_1000A1380 != -1) {
      swift_once();
    }
    BOOL v237 = v1 == 0;
    BOOL v238 = sub_10005E744();
    LOBYTE(v285) = v237;
    *(void *)uint64_t v242 = v281;
    *(_DWORD *)(v242 + 8) = v279;
    *(void *)(v242 + 16) = v275;
    *(void *)(v242 + 24) = v273;
    *(void *)(v242 + 32) = v241;
    *(_DWORD *)(v242 + 40) = v277;
    *(_DWORD *)(v242 + 44) = v39;
    *(unsigned char *)(v242 + 48) = v237;
    *(unsigned char *)(v242 + 49) = v227 & 1;
    *(void *)(v242 + 56) = v240;
    *(void *)(v242 + 64) = v230;
    *(void *)(v242 + 72) = v232;
    *(void *)(v242 + 80) = v245;
    *(void *)(v242 + 88) = v244;
    *(void *)(v242 + 96) = v263;
    *(void *)(v242 + 104) = v269;
    *(unsigned char *)(v242 + 112) = v233 != 0;
    *(void *)(v242 + 120) = v234;
    *(void *)(v242 + 128) = v236;
    *(unsigned char *)(v242 + 136) = v238;
    *(void *)(v242 + 144) = v239;
    sub_100013964();
    return;
  }
LABEL_61:
  v245 = (char *)sub_1000287C4((uint64_t)v72, &qword_1000A3108, (void (*)(uint64_t, uint64_t, void **))sub_100047484);
  uint64_t v100 = swift_bridgeObjectRetain();
  sub_10002858C(v100);
  uint64_t v102 = v101;
  swift_bridgeObjectRelease();
  v244 = (char *)sub_1000287C4(v102, &qword_1000A3108, (void (*)(uint64_t, uint64_t, void **))sub_100047484);
  sub_100013AD0();
  uint64_t v103 = v243[15];
  int64_t v104 = *(void *)(v103 + 16);
  uint64_t v105 = _swiftEmptyArrayStorage;
  if (v104)
  {
    v292 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100060E08(0, v104, 0);
    sub_10004DE28(v103);
    uint64_t v108 = v106;
    char v109 = v107 & 1;
    uint64_t v247 = v103;
    do
    {
      int64_t v282 = v104;
      uint64_t v110 = *(int *)(v253 + 48);
      sub_100051D60(v248, v106, v107, v109 & 1, v108);
      uint64_t v115 = sub_1000345C4(v111, v112, v113, v114, v103);
      *(void *)(v248 + v110) = v115;
      sub_1000468D0(v248, v249, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)(v249 + *(int *)(v253 + 48)) = v115;
      sub_10004F8D8(v249, v250, &qword_1000A2E78);
      swift_retain();
      uint64_t v116 = sub_10005141C();
      sub_1000131C8(v116, v117);
      uint64_t v118 = *(int *)(v253 + 48);
      sub_1000468D0(v250, v251, (void (*)(void))_s7SessionC8IdentityVMa);
      uint64_t v270 = v118;
      *(void *)(v251 + v118) = *(void *)(v250 + v118);
      Class v119 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v120 = sub_100012954(v119);

      sub_1000517A0();
      v291 = (void *)v120;
      sub_1000126B0();
      sub_100013BC0();
      v121._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v121);
      swift_bridgeObjectRelease();
      uint64_t v122 = _s7SessionC8IdentityVMa(0);
      if (*(unsigned char *)(v251 + *(int *)(v122 + 24))) {
        uint64_t v123 = 0x65746F6D6572;
      }
      else {
        uint64_t v123 = 0x6C61636F6CLL;
      }
      if (*(unsigned char *)(v251 + *(int *)(v122 + 24))) {
        uint64_t v124 = (void *)0xE600000000000000;
      }
      else {
        uint64_t v124 = (void *)0xE500000000000000;
      }
      sub_1000129C4();
      sub_100013BC0();
      String.init<A>(_:radix:uppercase:)();
      sub_100013D84();
      v125._countAndFlagsBits = v123;
      v125._object = v124;
      String.append(_:)(v125);
      swift_bridgeObjectRelease();
      sub_100013D84();
      v126._countAndFlagsBits = sub_10005141C();
      String.append(_:)(v126);
      swift_bridgeObjectRelease();
      uint64_t v264 = v286;
      v267 = v285;
      sub_100046880();
      uint64_t v127 = *(int *)(v253 + 48);
      sub_1000468D0(v250, v252, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)(v252 + v127) = *(void *)(v250 + v270);
      swift_retain();
      sub_10003CEFC();
      swift_release();
      uint64_t v128 = v294;
      int v129 = v295;
      char v130 = BYTE4(v295);
      uint64_t v271 = v297;
      uint64_t v274 = v296;
      uint64_t v131 = v300;
      uint64_t v260 = v299;
      uint64_t v262 = v298;
      uint64_t v132 = v301;
      sub_100046880();
      sub_1000131C8(v250, &qword_1000A2E78);
      uint64_t v105 = v292;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005182C();
        uint64_t v133 = (char *)sub_100051874();
        sub_100060E08(v133, v134, v135);
        uint64_t v105 = v292;
      }
      unint64_t v137 = v105[2];
      unint64_t v136 = v105[3];
      uint64_t v103 = v247;
      if (v137 >= v136 >> 1)
      {
        BOOL v147 = sub_100051808(v136);
        sub_100060E08((char *)v147, v137 + 1, 1);
        uint64_t v105 = v292;
      }
      v105[2] = v137 + 1;
      uint64_t v138 = &v105[10 * v137];
      v138[4] = v267;
      v138[5] = v264;
      v138[6] = v128;
      *((_DWORD *)v138 + 14) = v129;
      *((unsigned char *)v138 + 60) = v130 & 1;
      v138[8] = v274;
      v138[9] = v271;
      v138[10] = v262;
      v138[11] = v260;
      v138[12] = v131;
      v138[13] = v132;
      uint64_t v139 = sub_100051318();
      uint64_t v141 = sub_10004DCD4(v139, v140, v275, v247);
      uint64_t v143 = v142;
      char v109 = v144 & 1;
      uint64_t v145 = sub_100051318();
      sub_100012A10(v145, v146, v275);
      uint64_t v108 = v143;
      int64_t v104 = v282 - 1;
    }
    while (v282 != 1);
    sub_100012A10(v141, v143, v109);
    swift_bridgeObjectRelease();
  }
  v263 = (char *)sub_1000287C4((uint64_t)v105, &qword_1000A30F8, (void (*)(uint64_t, uint64_t, void **))sub_100047110);
  sub_100013AD0();
  uint64_t v148 = v243[19];
  uint64_t v149 = *(void *)(v148 + 16);
  if (v149)
  {
    v291 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100060DB8();
    sub_10004DE28(v148);
    uint64_t v152 = v150;
    char v153 = v151 & 1;
    uint64_t v268 = v148;
    do
    {
      uint64_t v283 = v149;
      uint64_t v154 = *(int *)(v259 + 48);
      sub_100051D60(v254, v150, v151, v153 & 1, v152);
      id v159 = sub_1000344F8(v155, v156, v157, v158, v148);
      *(void *)(v254 + v154) = v159;
      sub_1000468D0(v254, v255, (void (*)(void))_s7SessionC8IdentityVMa);
      *(void *)(v255 + *(int *)(v259 + 48)) = v159;
      sub_10004F8D8(v255, v256, &qword_1000A2EF8);
      id v160 = v159;
      sub_1000131C8(v254, &qword_1000A2EF8);
      uint64_t v161 = *(int *)(v259 + 48);
      sub_1000468D0(v256, v257, (void (*)(void))_s7SessionC8IdentityVMa);
      uint64_t v272 = v161;
      *(void *)(v257 + v161) = *(void *)(v256 + v161);
      Class v162 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v163 = sub_100012954(v162);

      sub_1000517A0();
      uint64_t v287 = v163;
      sub_1000126B0();
      sub_100013BC0();
      v164._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v164);
      swift_bridgeObjectRelease();
      uint64_t v165 = _s7SessionC8IdentityVMa(0);
      if (*(unsigned char *)(v257 + *(int *)(v165 + 24))) {
        uint64_t v166 = 0x65746F6D6572;
      }
      else {
        uint64_t v166 = 0x6C61636F6CLL;
      }
      if (*(unsigned char *)(v257 + *(int *)(v165 + 24))) {
        v167 = (void *)0xE600000000000000;
      }
      else {
        v167 = (void *)0xE500000000000000;
      }
      sub_1000129C4();
      sub_100013BC0();
      String.init<A>(_:radix:uppercase:)();
      sub_100013D84();
      v168._countAndFlagsBits = v166;
      v168._object = v167;
      String.append(_:)(v168);
      swift_bridgeObjectRelease();
      sub_100013D84();
      v169._countAndFlagsBits = sub_100013A10();
      String.append(_:)(v169);
      swift_bridgeObjectRelease();
      v170 = v285;
      uint64_t v171 = v286;
      sub_100046880();
      uint64_t v172 = *(int *)(v259 + 48);
      sub_1000468D0(v256, v258, (void (*)(void))_s7SessionC8IdentityVMa);
      uint64_t v173 = *(void *)(v256 + v272);
      *(void *)(v258 + v172) = v173;
      int v174 = *(_DWORD *)(v173 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
      sub_100046880();
      sub_1000131C8(v256, &qword_1000A2EF8);
      v175 = v291;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005182C();
        sub_100051874();
        sub_100060DB8();
        v175 = v291;
      }
      unint64_t v177 = v175[2];
      unint64_t v176 = v175[3];
      uint64_t v148 = v268;
      if (v177 >= v176 >> 1)
      {
        sub_100051808(v176);
        sub_100060DB8();
        v175 = v291;
      }
      v175[2] = v177 + 1;
      v178 = &v175[3 * v177];
      v178[4] = v170;
      v178[5] = v171;
      *((_DWORD *)v178 + 12) = v174;
      uint64_t v179 = sub_100051318();
      uint64_t v181 = sub_10004DCD4(v179, v180, v275, v268);
      uint64_t v183 = v182;
      char v153 = v184 & 1;
      uint64_t v185 = sub_100051318();
      sub_100012A10(v185, v186, v275);
      uint64_t v152 = v183;
      uint64_t v149 = v283 - 1;
    }
    while (v283 != 1);
    sub_100012A10(v181, v183, v153);
    swift_bridgeObjectRelease();
  }
  else
  {
    v175 = _swiftEmptyArrayStorage;
  }
  uint64_t v269 = (uint64_t)sub_1000287C4((uint64_t)v175, &qword_1000A30E8, (void (*)(uint64_t, uint64_t, void **))sub_100046E48);
  sub_100013AD0();
  uint64_t v187 = v243[18];
  uint64_t v188 = swift_bridgeObjectRetain();
  uint64_t v189 = sub_10004E3D4(v188);
  if (!v189)
  {
    swift_bridgeObjectRelease();
    v194 = _swiftEmptyArrayStorage;
    goto LABEL_109;
  }
  uint64_t v190 = v189;
  v290 = _swiftEmptyArrayStorage;
  sub_100060D68();
  unint64_t v278 = v187 & 0xC000000000000001;
  if ((v187 & 0xC000000000000001) != 0)
  {
    uint64_t v191 = __CocoaSet.startIndex.getter();
    char v193 = 1;
  }
  else
  {
    uint64_t v191 = sub_10004E730(v187);
    char v193 = v195 & 1;
  }
  uint64_t v287 = v191;
  uint64_t v288 = v192;
  char v289 = v193;
  if ((v190 & 0x8000000000000000) == 0)
  {
    uint64_t v276 = v187;
    do
    {
      char v196 = v289;
      uint64_t v197 = sub_100051920();
      sub_10004E4D8(v197, v198, v199, v187);
      v201 = v200;
      sub_100011894();
      uint64_t v203 = v202;
      int v284 = v204;
      uint64_t v206 = v205;
      uint64_t v280 = v207;

      v208 = v290;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10005182C();
        sub_100051874();
        sub_100060D68();
        v208 = v290;
      }
      unint64_t v210 = v208[2];
      unint64_t v209 = v208[3];
      if (v210 >= v209 >> 1)
      {
        sub_100051808(v209);
        sub_100060D68();
        v208 = v290;
      }
      v208[2] = v210 + 1;
      v211 = &v208[4 * v210];
      v211[4] = v203;
      *((_DWORD *)v211 + 10) = v284;
      v211[6] = v206;
      v211[7] = v280;
      if (v278)
      {
        uint64_t v187 = v276;
        if ((v196 & 1) == 0) {
          goto LABEL_133;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_1000116B8(&qword_1000A30C0);
        v223 = (void (*)(void **, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v223(&v285, 0);
      }
      else
      {
        int64_t v212 = sub_100051920();
        uint64_t v187 = v276;
        int64_t v215 = sub_10004E3F4(v212, v213, v214, v276);
        uint64_t v217 = v216;
        char v219 = v218;
        uint64_t v220 = sub_100051920();
        sub_100012A10(v220, v221, v222);
        uint64_t v287 = v215;
        uint64_t v288 = v217;
        char v289 = v219 & 1;
      }
      --v190;
    }
    while (v190);
    sub_100012A10(v287, v288, v289);
    swift_bridgeObjectRelease();
    v194 = v290;
LABEL_109:
    uint64_t v281 = (uint64_t)v194;
    LODWORD(v279) = dword_1000A26E0;
    if (v243[3])
    {
      swift_retain();
      uint64_t v224 = RapportRemoteDisplayDiscovery.description.getter();
      uint64_t v273 = v225;
      uint64_t v275 = v224;
      swift_release();
    }
    else
    {
      uint64_t v273 = 0;
      uint64_t v275 = 0;
    }
    pid_t v226 = getpid();
    unint64_t v1 = v243[22];
    LODWORD(v277) = v226;
    if (v1) {
      LODWORD(v39) = *(_DWORD *)(v1 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
    }
    else {
      LODWORD(v39) = 0;
    }
    if (qword_1000A1378 == -1) {
      goto LABEL_116;
    }
    goto LABEL_131;
  }
  __break(1u);
LABEL_133:
  __break(1u);
  swift_release();
  __break(1u);
}

void sub_100028414(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = sub_10004DE28(v1);
    if ((v3 & 0x8000000000000000) == 0 && (unint64_t v4 = v3, sub_100051864(), v6 ^ v7))
    {
      int v8 = v5;
      uint64_t v9 = v1 + 64;
      uint64_t v11 = v1;
      while ((*(void *)(v9 + 8 * (v4 >> 6)) & (1 << v4)) != 0)
      {
        if (v8 != *(_DWORD *)(v1 + 36)) {
          goto LABEL_18;
        }
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        sub_100051B24();
        uint64_t v1 = v11;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        sub_1000517F0();
        if (v6 == v7) {
          goto LABEL_19;
        }
        if ((*(void *)(v9 + 8 * (v4 >> 6)) & (1 << v4)) == 0) {
          goto LABEL_20;
        }
        if (v8 != *(_DWORD *)(v11 + 36)) {
          goto LABEL_21;
        }
        sub_100051BFC();
        uint64_t v10 = _HashTable.occupiedBucket(after:)();
        if (!--v2) {
          return;
        }
        unint64_t v4 = v10;
        if ((v10 & 0x8000000000000000) == 0)
        {
          int v8 = *(_DWORD *)(v11 + 36);
          if (v10 < 1 << *(unsigned char *)(v11 + 32)) {
            continue;
          }
        }
        goto LABEL_15;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    else
    {
LABEL_15:
      __break(1u);
    }
  }
}

void sub_10002858C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100060E28();
    uint64_t v3 = sub_10004DE28(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v15 = v1;
          int v16 = v4;
          swift_retain();
          uint64_t v7 = String.init<A>(describing:)();
          uint64_t v17 = v8;
          uint64_t v18 = v7;
          uint64_t v9 = RapportStreamServer.description.getter();
          uint64_t v11 = v10;
          swift_release();
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          if (v12 >= _swiftEmptyArrayStorage[3] >> 1) {
            sub_100060E28();
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          uint64_t v13 = &_swiftEmptyArrayStorage[4 * v12];
          v13[4] = v18;
          v13[5] = v17;
          void v13[6] = v9;
          v13[7] = v11;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v6 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v16 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v14 = _HashTable.occupiedBucket(after:)();
          --v1;
          if (v15 == 1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v14 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void *sub_100028784(uint64_t a1)
{
  return sub_1000287C4(a1, &qword_1000A3108, (void (*)(uint64_t, uint64_t, void **))sub_100047484);
}

void *sub_1000287A4(uint64_t a1)
{
  return sub_1000287C4(a1, &qword_1000A30C8, (void (*)(uint64_t, uint64_t, void **))sub_100047A30);
}

void *sub_1000287C4(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  if (*(void *)(a1 + 16))
  {
    sub_1000116B8(a2);
    int v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int v4 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_100028874(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000116B8(&qword_1000A2F28);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v30 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v19 = v18[1];
    *(void *)&v39[0] = *v18;
    *((void *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
    sub_10001309C(&v34, v38);
    long long v31 = v35;
    long long v32 = v36;
    uint64_t v33 = v37;
    sub_10001309C(v38, v39);
    sub_10001309C(v39, &v35);
    unint64_t v20 = AnyHashable._rawHashValue(seed:)(v2[5]) & ~(-1 << *((unsigned char *)v2 + 32));
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) == 0)
    {
      sub_100051548();
      while (++v22 != v23 || (v21 & 1) == 0)
      {
        BOOL v24 = v22 == v23;
        if (v22 == v23) {
          uint64_t v22 = 0;
        }
        v21 |= v24;
        if (*(void *)&v6[8 * v22] != -1)
        {
          sub_1000514A0();
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    sub_1000514B4();
LABEL_38:
    sub_100051AB8();
    *(void *)&v6[v25] |= v26;
    uint64_t v28 = v2[6] + 40 * v27;
    *(_OWORD *)uint64_t v28 = v31;
    *(_OWORD *)(v28 + 16) = v32;
    *(void *)(v28 + 32) = v33;
    sub_10001309C(&v35, (_OWORD *)(v2[7] + 32 * v27));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v10 >= v29) {
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      sub_100051B18();
      if (v13 == v14) {
        goto LABEL_40;
      }
      sub_100051AEC();
      if (!v11)
      {
        sub_100051B18();
        if (v13 == v14) {
          goto LABEL_40;
        }
        sub_100051AEC();
        if (!v11)
        {
          sub_100051B18();
          if (v13 == v14) {
            goto LABEL_40;
          }
          sub_100051AEC();
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v7 = v12;
  }
  int64_t v16 = v15 + 4;
  if (v16 >= v29)
  {
LABEL_40:
    swift_release();
    sub_10004EE20();
    return;
  }
  unint64_t v11 = *(void *)(v30 + 8 * v16);
  if (v11)
  {
    int64_t v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_100051B18();
    if (v13 == v14) {
      goto LABEL_40;
    }
    sub_100051AEC();
    int64_t v16 = v17 + 1;
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_100028BDC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000116B8(&qword_1000A2F48);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    sub_10004EDC4(*(void *)(a1 + 48) + 40 * v10, (uint64_t)__src);
    sub_100012A54(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&__src[2] + 8);
    memcpy(__dst, __src, sizeof(__dst));
    long long v26 = __src[0];
    long long v27 = __src[1];
    uint64_t v28 = *(void *)&__src[2];
    sub_10001309C(&__dst[5], v30);
    swift_dynamicCast();
    uint64_t v31 = v28;
    v30[0] = v26;
    v30[1] = v27;
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v15 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)&v6[8 * (v16 >> 6)]) == 0)
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v20 || (v19 & 1) == 0)
      {
        BOOL v21 = v17 == v20;
        if (v17 == v20) {
          unint64_t v17 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v6[8 * v17];
        if (v22 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)&v6[8 * (v16 >> 6)])) | v16 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    uint64_t v23 = v2[6] + 40 * v18;
    *(_OWORD *)uint64_t v23 = v26;
    *(_OWORD *)(v23 + 16) = v27;
    *(void *)(v23 + 32) = v28;
    *(void *)(v2[7] + 8 * v18) = v29;
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v24) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v25 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v25 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v25 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_36:
    swift_release();
    sub_10004EE20();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100028F7C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000116B8(&qword_1000A2F28);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    sub_10004EDC4(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v38);
    uint64_t v40 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    long long v26 = v38[0];
    long long v28 = v38[1];
    uint64_t v30 = v39;
    *(void *)&v37[0] = v40;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    long long v33 = v26;
    long long v34 = v28;
    uint64_t v35 = v30;
    sub_10001309C(&v32, v36);
    long long v27 = v33;
    long long v29 = v34;
    uint64_t v31 = v35;
    sub_10001309C(v36, v37);
    sub_10001309C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v15 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)&v6[8 * (v16 >> 6)]) == 0)
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v20 || (v19 & 1) == 0)
      {
        BOOL v21 = v17 == v20;
        if (v17 == v20) {
          unint64_t v17 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v6[8 * v17];
        if (v22 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)&v6[8 * (v16 >> 6)])) | v16 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    uint64_t v23 = v2[6] + 40 * v18;
    *(_OWORD *)uint64_t v23 = v27;
    *(_OWORD *)(v23 + 16) = v29;
    *(void *)(v23 + 32) = v31;
    uint64_t result = (uint64_t)sub_10001309C(&v33, (_OWORD *)(v2[7] + 32 * v18));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v24) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v25 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v25 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v25 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_36:
    swift_release();
    sub_10004EE20();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v25 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10002932C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((a7 | a4))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a5)
  {
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    id v10 = objc_allocWithZone((Class)_DiagnosticsHandler);
    id v11 = sub_10003EBB0(a2, a5, (uint64_t)sub_10004FAE8, v9);
    swift_beginAccess();
    objc_setAssociatedObject(v11, &unk_1000A1EC8, v11, (void *)0x301);
    swift_endAccess();

    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10002941C()
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  sub_100026D90();
  memcpy(__dst, __src, sizeof(__dst));
  sub_1000127EC();
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  sub_100012838((uint64_t)__src);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000295D4(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v3 = &qword_1000A2E78;
  uint64_t v4 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v5 = __chkstk_darwin(v4);
  int64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v27 - v11;
  sub_10004DC94(a1, v32);
  uint64_t v31 = v32[0];
  int64_t v33 = v32[3];
  unint64_t v13 = v32[4];
  uint64_t v28 = v32[1];
  int64_t v29 = (unint64_t)(v32[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v33 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v17 >= v29) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v17);
    int64_t v19 = v33 + 1;
    if (!v18)
    {
      int64_t v19 = v33 + 2;
      if (v33 + 2 >= v29) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v28 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v33 + 3;
        if (v33 + 3 >= v29) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v28 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v33 + 4;
          if (v33 + 4 >= v29) {
            goto LABEL_24;
          }
          unint64_t v18 = *(void *)(v28 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v33 + 5;
            if (v33 + 5 >= v29) {
              goto LABEL_24;
            }
            unint64_t v18 = *(void *)(v28 + 8 * v19);
            if (!v18)
            {
              int64_t v20 = v33 + 6;
              while (v20 < v29)
              {
                unint64_t v18 = *(void *)(v28 + 8 * v20++);
                if (v18)
                {
                  int64_t v19 = v20 - 1;
                  goto LABEL_19;
                }
              }
LABEL_24:
              swift_release();
              swift_release();
              return 0;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    int64_t v33 = v19;
LABEL_20:
    uint64_t v21 = v31;
    uint64_t v22 = *(void *)(v31 + 48);
    uint64_t v23 = _s7SessionC8IdentityVMa(0);
    sub_1000468D0(v22 + *(void *)(*(void *)(v23 - 8) + 72) * v16, (uint64_t)v12, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v12[*(int *)(v4 + 48)] = *(void *)(*(void *)(v21 + 56) + 8 * v16);
    sub_10004F8D8((uint64_t)v12, (uint64_t)v10, v3);
    int64_t v24 = v3;
    uint64_t v25 = *(int *)(v4 + 48);
    sub_1000468D0((uint64_t)v10, (uint64_t)v7, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v7[v25] = *(void *)&v10[v25];
    uint64_t Strong = swift_weakLoadStrong();
    swift_retain();
    sub_100046880();
    if (Strong)
    {
      swift_release();
      uint64_t result = sub_1000131C8((uint64_t)v10, v24);
      uint64_t v3 = v24;
      if (Strong == v30)
      {
        swift_release();
        swift_release();
        return 1;
      }
    }
    else
    {
      uint64_t result = sub_1000131C8((uint64_t)v10, v24);
      uint64_t v3 = v24;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10002991C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v36 = sub_1000116B8(&qword_1000A2E70);
  uint64_t v3 = __chkstk_darwin(v36);
  uint64_t v35 = (uint64_t)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v34 = (uint64_t)v30 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v33 = (uint64_t)v30 - v8;
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)v30 - v9;
  uint64_t result = sub_10004DE28(a1);
  if (v12) {
    goto LABEL_22;
  }
  int v13 = *(_DWORD *)(a1 + 36);
  if (v13 != v11)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  if (result != v15)
  {
    uint64_t v16 = a1 + 64;
    uint64_t v31 = a1 + 64;
    while ((v14 & 0x8000000000000000) == 0 && v14 < v15)
    {
      if (v13 != v11 || (*(void *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
        goto LABEL_17;
      }
      int v38 = v13;
      _OWORD v30[2] = v11;
      uint64_t v17 = v36;
      uint64_t v18 = *(int *)(v36 + 48);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = type metadata accessor for Relay.RapportSessionKey(0);
      uint64_t v21 = v32;
      sub_1000468D0(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v14, v32, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
      uint64_t v22 = a1;
      uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
      *(void *)(v21 + v18) = v23;
      uint64_t v24 = v33;
      sub_1000468D0(v21, v33, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
      *(void *)(v24 + *(int *)(v17 + 48)) = v23;
      uint64_t v25 = v24;
      uint64_t v26 = v34;
      sub_10004F8D8(v25, v34, &qword_1000A2E70);
      swift_retain_n();
      sub_1000131C8(v21, &qword_1000A2E70);
      uint64_t v27 = *(int *)(v17 + 48);
      uint64_t v28 = v35;
      sub_1000468D0(v26, v35, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
      uint64_t v29 = *(void *)(v26 + v27);
      *(void *)(v28 + v27) = v29;
      sub_100046880();
      uint64_t result = sub_1000131C8(v26, &qword_1000A2E70);
      if (v29 == v37) {
        goto LABEL_15;
      }
      if (v14 >= -(-1 << *(unsigned char *)(v22 + 32))) {
        goto LABEL_18;
      }
      a1 = v22;
      uint64_t v16 = v31;
      if ((*(void *)(v31 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
        goto LABEL_19;
      }
      if (*(_DWORD *)(a1 + 36) != v38) {
        goto LABEL_20;
      }
      uint64_t result = _HashTable.occupiedBucket(after:)();
      uint64_t v14 = result;
      uint64_t v11 = *(unsigned int *)(a1 + 36);
      uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
      int v13 = *(_DWORD *)(a1 + 36);
      if (result == v15) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_14:
  uint64_t v14 = 0;
LABEL_15:
  swift_release();
  return v14;
}

void sub_100029C58()
{
  sub_10001394C();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100018DA8();
  if (*(void *)(v2 + 16))
  {
    sub_10003B620((uint64_t)&unk_1000A1910);
    dispatch thunk of Hashable._rawHashValue(seed:)();
    sub_100051B30();
    unint64_t v9 = v8 & ~v7;
    uint64_t v10 = v2 + 56;
    if ((*(void *)(v2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
    {
      uint64_t v17 = ~v7;
      uint64_t v18 = v2;
      uint64_t v11 = v5 + 16;
      char v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = *(void *)(v11 + 56);
      do
      {
        v12(v0, *(void *)(v18 + 48) + v13 * v9, v3);
        sub_10003B620((uint64_t)&qword_1000A3020);
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v15 = sub_100013A10();
        v16(v15);
        if (v14) {
          break;
        }
        unint64_t v9 = (v9 + 1) & v17;
      }
      while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
  }
  sub_100013964();
}

uint64_t sub_100029E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100029F54()
{
  type metadata accessor for Relay();
  swift_allocObject();
  uint64_t result = sub_10002A058();
  qword_1000AA240 = result;
  return result;
}

uint64_t sub_100029F90(uint64_t a1)
{
  return sub_10002F810(a1, qword_1000A26C0);
}

uint64_t sub_100029FB0()
{
  sub_100004928(0, &qword_1000A2F50);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1000A26D8 = result;
  return result;
}

uint64_t sub_10002A01C(uint64_t a1)
{
  return sub_10002F810(a1, qword_1000AA248);
}

Swift::Int sub_10002A038()
{
  return sub_10003D70C(*v0);
}

uint64_t sub_10002A058()
{
  uint64_t v1 = (uint64_t)v0;
  v0[2] = [objc_allocWithZone((Class)type metadata accessor for Relay.MachService()) init];
  v0[6] = 0;
  type metadata accessor for SidecarIdentity();
  type metadata accessor for RapportRemoteDisplayDevice();
  sub_10003B620((uint64_t)&unk_1000A2E30);
  v0[3] = 0;
  v0[4] = 0;
  v0[9] = Dictionary.init(dictionaryLiteral:)();
  v0[10] = &_swiftEmptyDictionarySingleton;
  v0[11] = 0;
  type metadata accessor for Relay.RapportSessionKey(0);
  type metadata accessor for RapportRemoteDisplaySession();
  sub_10003B620((uint64_t)&unk_1000A3168);
  v0[12] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for RapportStreamServer();
  v0[13] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for Relay.ConnectedSessionKey(0);
  type metadata accessor for Relay.Session(0);
  sub_10003B620((uint64_t)&unk_1000A3170);
  v0[14] = Dictionary.init(dictionaryLiteral:)();
  _s7SessionC8IdentityVMa(0);
  sub_10003B620((uint64_t)&unk_1000A2EA8);
  v0[15] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for Domain();
  v0[17] = Dictionary.init(dictionaryLiteral:)();
  v0[18] = &_swiftEmptySetSingleton;
  type metadata accessor for ServiceProvider();
  v0[19] = Dictionary.init(dictionaryLiteral:)();
  sub_1000116B8(&qword_1000A2EE8);
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  v0[21] = 0;
  v0[22] = 0;
  v0[20] = v2;
  sub_1000116B8(&qword_1000A2E90);
  swift_allocObject();
  v0[16] = PassthroughSubject.init()();
  type metadata accessor for CompanionLinkServer();
  swift_allocObject();
  v0[5] = sub_100013FF0();
  id v3 = objc_allocWithZone((Class)type metadata accessor for SidecarRelayNullDelegate());
  v0[7] = sub_100003968(0);
  sub_1000116B8(&qword_1000A3178);
  swift_allocObject();
  v0[8] = PassthroughSubject.init()();
  id v4 = objc_allocWithZone((Class)type metadata accessor for Relay.RelayProxy());
  swift_retain();
  id v5 = sub_10002F8A0();
  v0[6] = v5;
  id v6 = v5;
  swift_unknownObjectRelease();
  uint64_t v7 = (void *)v0[7];
  if ([v7 respondsToSelector:"setRelayProxy:"]) {
    [v7 setRelayProxy:v6];
  }
  sub_10002932C(v1, (uint64_t)"com.apple.sidecar", 17, 2, (uint64_t)"relay", 5, 2);
  sub_10002A538();
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  unint64_t v8 = static OS_dispatch_queue.main.getter();
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v1;
  v9[3] = 0xD00000000000001ALL;
  v9[4] = 0x800000010007FA90;
  v12[4] = sub_10004F9C4;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10002AE08;
  void v12[3] = &unk_100097390;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  swift_release();
  xpc_set_event_stream_handler("com.apple.rapport.matching", v8, v10);
  _Block_release(v10);

  if ([*(id *)(v1 + 56) respondsToSelector:"relayInitialized"])
  {
    [(id)swift_unknownObjectRetain() relayInitialized];
    swift_unknownObjectRelease();
  }

  return v1;
}

void sub_10002A538()
{
  if (!*(void *)(v0 + 24))
  {
    uint64_t v1 = v0;
    type metadata accessor for RapportRemoteDisplayDiscovery();
    uint64_t v2 = RapportRemoteDisplayDiscovery.__allocating_init()();
    *(void *)(v1 + 24) = v2;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v2 + 32) = &off_1000970B0;
    swift_unknownObjectWeakAssign();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_retain();
    swift_retain();
    RapportRemoteDisplayDiscovery.activate(completion:)((uint64_t)sub_10004F9D4, v3);
    swift_release();
    swift_release();
  }
}

void sub_10002A620(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (xpc_dictionary_get_string(a1, v8))
  {
    uint64_t v9 = String.init(cString:)();
    unint64_t v11 = v10;
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100004964(v12, (uint64_t)qword_1000AA248);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v22 = a4;
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 136446210;
      swift_bridgeObjectRetain();
      sub_100017070(v9, v11, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "=== %{public}s ===", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v22;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v9 == 0xD000000000000021 && v11 == 0x800000010007FAD0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_10002A538();
    }
    else if (v9 == 0xD00000000000001ELL && v11 == 0x800000010007FB00 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      sub_10002AB5C();
    }
    else if (v9 == 0xD00000000000002DLL && v11 == 0x800000010007FB20 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      swift_retain();
      sub_1000143DC();
      swift_release();
      sub_10002AC44(a1);
    }
    else
    {
      uint64_t v16 = *(void **)(a2 + 56);
      if ([v16 respondsToSelector:"handleRapportEvent:"]) {
        [v16 handleRapportEvent:a1];
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      BOOL v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315650;
        swift_bridgeObjectRetain();
        sub_100017070(v9, v11, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100017070(a3, a4, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 22) = 2080;
        sub_1000116B8(&qword_1000A3180);
        uint64_t v20 = String.init<A>(describing:)();
        sub_100017070(v20, v21, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Encountered XPC event with name [%s] from stream with name [%s].  Handled by the relay delegate: [%s]", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
  }
}

void sub_10002AB5C()
{
  if (!*(void *)(v0 + 32))
  {
    uint64_t v1 = v0;
    type metadata accessor for RapportRemoteDisplayServer();
    uint64_t v2 = RapportRemoteDisplayServer.__allocating_init()();
    *(void *)(v1 + 32) = v2;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v2 + 32) = &off_100097088;
    swift_unknownObjectWeakAssign();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_retain();
    swift_retain();
    RapportRemoteDisplayServer.activate(completion:)((uint64_t)sub_10004F9D4, v3);
    swift_release();
    swift_release();
  }
}

void sub_10002AC44(void *a1)
{
  if (!xpc_dictionary_get_BOOL(a1, "replyRequired"))
  {
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100004964(v2, (uint64_t)qword_1000AA248);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v3)) {
      goto LABEL_15;
    }
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    id v5 = "No Reply Requested for Rapport XPC Event (Unexpected)";
    goto LABEL_14;
  }
  if (xpc_dictionary_create_reply(a1))
  {
    xpc_dictionary_send_reply();
    swift_unknownObjectRelease();
    return;
  }
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100004964(v6, (uint64_t)qword_1000AA248);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    id v5 = "Failed to Create Reply to Rapport XPC Event";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, v5, v4, 2u);
    swift_slowDealloc();
  }
LABEL_15:
}

uint64_t sub_10002AE08(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10002AE68()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_10002AF28()
{
  sub_10002AE68();

  return _swift_deallocClassInstance(v0, 184, 7);
}

void sub_10002AF5C()
{
  sub_10001394C();
  uint64_t v1 = v0;
  os_log_type_t v3 = v2;
  id v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v11);
  sub_1000139F8();
  if (v9)
  {
    swift_errorRetain();
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    sub_100004964(v10, (uint64_t)qword_1000AA248);
    sub_100051210();
    uint64_t v13 = v12();
    __chkstk_darwin(v13);
    sub_1000515AC();
    sub_100019968(v5, v7, v3);
    sub_100051CE0();
    v14();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    sub_1000513A4(v10, (uint64_t)qword_1000AA248);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      BOOL v17 = (uint8_t *)sub_10001EAAC();
      uint64_t v23 = sub_100013E10();
      uint64_t v18 = sub_100051CB4(4.8751e-34);
      uint64_t v19 = v1(v18);
      unint64_t v21 = v20;
      swift_release();
      uint64_t v22 = sub_100017070(v19, v21, &v23);
      sub_100013F08(v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100051428();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: Activated", v17, 0xCu);
      sub_1000517B8();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      sub_100051428();
    }
  }
  sub_100013964();
}

void *sub_10002B1B8()
{
  sub_1000116B8(&qword_1000A2E28);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100081790;
  uid_t v1 = getuid();
  *(void *)(v0 + 56) = &type metadata for UInt32;
  *(void *)(v0 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v0 + 32) = v1;
  uint64_t v2 = String.init(format:_:)();
  uint64_t v4 = v3;
  type metadata accessor for DarwinNotification();
  swift_allocObject();
  uint64_t result = (void *)DarwinNotification.init(check:)(v2, v4);
  off_1000A26E8 = result;
  return result;
}

uint64_t sub_10002B270()
{
  uint64_t v1 = sub_10002B414(v0);
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100004964(v2, (uint64_t)qword_1000AA248);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Device Generation: %llx", v5, 0xCu);
    swift_slowDealloc();
  }

  if (qword_1000A1348 != -1) {
    swift_once();
  }
  uint64_t v6 = off_1000A26E8;
  swift_beginAccess();
  notify_set_state(v6[8], v1);
  PassthroughSubject.send(_:)();
  uint64_t v7 = String.utf8CString.getter();
  notify_post((const char *)(v7 + 32));
  return swift_release();
}

uint64_t sub_10002B414(uint64_t a1)
{
  swift_beginAccess();
  if (!*(void *)(*(void *)(a1 + 72) + 16)) {
    return 0;
  }
  ++dword_1000A26E0;
  uint64_t v2 = getpid();
  if ((v2 & 0x80000000) == 0) {
    return dword_1000A26E0 | (unint64_t)(v2 << 32);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10002B4CC()
{
  sub_10001394C();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000116B8(&qword_1000A2E10);
  uint64_t v6 = sub_100051080(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_100051258();
  sub_1000139D0();
  __chkstk_darwin(v8);
  sub_100013B78();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_100051C08();
  sub_100059E18(v10, v0);
  if (sub_100012E5C(v0, 1, v7) == 1)
  {
    sub_1000131C8(v0, &qword_1000A2E10);
  }
  else
  {
    sub_10004DD54(v0, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100004964(v11, (uint64_t)qword_1000A26C0);
    sub_1000468D0(v1, v2, (void (*)(void))type metadata accessor for SidecarIdentity);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      sub_100013B38();
      v24[0] = sub_10005177C();
      *(_DWORD *)uint64_t v0 = 136446466;
      uint64_t v14 = sub_10005A15C();
      uint64_t v16 = sub_100017070(v14, v15, v24);
      sub_1000515D4(v16);
      swift_bridgeObjectRelease();
      sub_100046880();
      *(_WORD *)(v0 + 12) = 2082;
      swift_retain();
      RapportRemoteDisplayDiscovery.description.getter();
      sub_100051A1C();
      uint64_t v17 = swift_release();
      uint64_t v19 = sub_100051A5C(v17, v18, v24);
      sub_100051998(v19);
      sub_10005171C();
      swift_bridgeObjectRelease();
      sub_100051950((void *)&_mh_execute_header, v12, v20, "%{public}s: Device Found %{public}s");
      sub_1000517D4();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      sub_100046880();

      sub_10005171C();
    }
    sub_1000510D4();
    sub_100043964(v1, &unk_1000A2E18, type metadata accessor for RapportRemoteDisplayDevice);
    swift_endAccess();
    swift_release();
    sub_1000510D4();
    uint64_t v21 = swift_retain();
    sub_1000441A0(v21, v1, &unk_1000A2E18);
    swift_endAccess();
    v24[0] = v4;
    type metadata accessor for RapportRemoteDisplayDevice();
    sub_100051CEC();
    uint64_t v22 = RapportEndpoint.idsDeviceIdentifier.getter(v4, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
    sub_10001AAA4(v22, v23);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10002B270();
    sub_100046880();
  }
  sub_100013964();
}

void sub_10002B844()
{
  sub_10001394C();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000116B8(&qword_1000A2E10);
  uint64_t v5 = sub_100051080(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100051258();
  sub_1000139D0();
  __chkstk_darwin(v7);
  sub_100013B78();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = swift_retain();
  sub_100059E18(v11, v0);
  if (sub_100012E5C(v0, 1, v6) == 1)
  {
    sub_1000131C8(v0, &qword_1000A2E10);
  }
  else
  {
    sub_10004DD54(v0, (uint64_t)v10, (void (*)(void))type metadata accessor for SidecarIdentity);
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100004964(v12, (uint64_t)qword_1000A26C0);
    sub_1000468D0((uint64_t)v10, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
    sub_100051908();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      sub_100013B38();
      v27[1] = v0;
      v28[0] = sub_10005177C();
      *(_DWORD *)uint64_t v0 = 136446466;
      uint64_t v15 = sub_10005A15C();
      uint64_t v17 = sub_100017070(v15, v16, v28);
      sub_1000515D4(v17);
      swift_bridgeObjectRelease();
      sub_100046880();
      *(_WORD *)(v0 + 12) = 2082;
      swift_retain();
      RapportRemoteDisplayDiscovery.description.getter();
      sub_100051A1C();
      uint64_t v18 = swift_release();
      uint64_t v20 = sub_100051A5C(v18, v19, v28);
      sub_100051998(v20);
      sub_100013D9C();
      swift_bridgeObjectRelease();
      sub_100051950((void *)&_mh_execute_header, v13, v21, "%{public}s: Device Lost %{public}s");
      sub_1000517D4();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      sub_100046880();

      sub_100013D9C();
    }
    uint64_t v22 = sub_10002BBEC((uint64_t)v10, 0);
    swift_release();
    sub_1000510D4();
    if (v22)
    {
      uint64_t v23 = swift_retain();
      sub_1000441A0(v23, v10, &unk_1000A2E18);
      swift_endAccess();
    }
    else
    {
      sub_100043964(v10, &unk_1000A2E18, type metadata accessor for RapportRemoteDisplayDevice);
      swift_endAccess();
      swift_release();
      v28[0] = v3;
      uint64_t v24 = type metadata accessor for RapportRemoteDisplayDevice();
      swift_retain();
      uint64_t v25 = RapportEndpoint.idsDeviceIdentifier.getter(v24, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
      sub_10001AD0C(v25, v26);
      swift_release();
      swift_bridgeObjectRelease();
      sub_10002B270();
    }
    sub_100046880();
  }
  sub_100013964();
}

uint64_t sub_10002BBEC(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1000116B8(&qword_1000A2E38);
    uint64_t v8 = (_UNKNOWN **)swift_allocObject();
    *((_OWORD *)v8 + 1) = xmmword_100081790;
    v8[4] = a2;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v8 = &off_100095A38;
    uint64_t v9 = 4;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t *)(v2 + 96);
  while (1)
  {
    uint64_t v12 = v8[v10 + 4];
    sub_1000468D0(a1, (uint64_t)v7, (void (*)(void))type metadata accessor for SidecarIdentity);
    *(void *)&v7[*(int *)(v5 + 20)] = v12;
    swift_beginAccess();
    uint64_t v13 = *v11;
    if (*(void *)(*v11 + 16))
    {
      unint64_t v14 = sub_1000408F4((uint64_t)v7);
      if (v15) {
        break;
      }
    }
    ++v10;
    swift_endAccess();
    sub_100046880();
    if (v9 == v10)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_endAccess();
  swift_retain();
  sub_100046880();
  swift_bridgeObjectRelease();
  return v16;
}

void sub_10002BDB4()
{
  sub_10001394C();
  uint64_t v2 = v0;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v8);
  sub_100051180();
  uint64_t v9 = sub_1000116B8(&qword_1000A2E10);
  uint64_t v10 = sub_100051080(v9);
  __chkstk_darwin(v10);
  sub_100013AFC();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for SidecarIdentity();
  sub_1000139D0();
  __chkstk_darwin(v15);
  sub_100051854();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  uint64_t v20 = sub_100051C08();
  sub_100059E18(v20, v13);
  if (sub_100012E5C(v13, 1, v14) == 1)
  {
    sub_1000131C8(v13, &qword_1000A2E10);
LABEL_13:
    sub_100013964();
    return;
  }
  sub_10004DD54(v13, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
  if (qword_1000A1330 != -1) {
    swift_once();
  }
  sub_100004964(v7, (uint64_t)qword_1000A26C0);
  sub_100051210();
  v21();
  sub_1000468D0(v1, v18, (void (*)(void))type metadata accessor for SidecarIdentity);
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v22, v23))
  {
    sub_100046880();

    sub_10005171C();
    uint64_t v38 = sub_100051590();
    v39(v38);
    goto LABEL_9;
  }
  os_log_type_t v43 = v23;
  uint64_t v44 = v2;
  uint64_t v24 = sub_100013E10();
  v45[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 136446722;
  uint64_t v25 = sub_10005A15C();
  sub_100017070(v25, v26, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100046880();
  *(_WORD *)(v24 + 12) = 2082;
  type metadata accessor for RapportRemoteDisplayDevice();
  id v27 = RapportEndpoint.statusFlags.getter();
  id v28 = RPStatusFlagsCopyDescription((unint64_t)v27);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v4;
  unint64_t v32 = v31;

  sub_100017070(v29, v32, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  sub_10005171C();
  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 22) = 2082;
  if (!HIDWORD(v30))
  {
    id v33 = RPDeviceChangeFlagsCopyDescription(v30);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    sub_100017070(v34, v36, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v43, "%{public}s: Device Changed <%{public}s [%{public}s]>", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();

    sub_100051590();
    sub_1000139EC();
    v37();
    uint64_t v2 = v44;
LABEL_9:
    swift_beginAccess();
    uint64_t v40 = sub_100024888(v1, *(void *)(v2 + 72), (void (*)(void))sub_100040760);
    swift_endAccess();
    sub_1000510D4();
    uint64_t v41 = swift_retain();
    sub_1000441A0(v41, v1, &unk_1000A2E18);
    swift_endAccess();
    if (v40 && (swift_retain(), char v42 = sub_10002C328(v6), swift_release(), (v42 & 1) != 0))
    {
      sub_100046880();
      swift_release();
    }
    else
    {
      sub_10002B270();
      swift_release();
      sub_100046880();
    }
    goto LABEL_13;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10002C328(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  if ([*(id *)(v1 + 16) isEqual:*(void *)(a1 + 16)]) {
    return 1;
  }
  uint64_t v4 = RapportEndpoint.cameraState.getter();
  if (v4 != RapportEndpoint.cameraState.getter())
  {
    char v6 = 0;
    goto LABEL_18;
  }
  if (RapportRemoteDisplayDevice.cameraCapabilities.getter())
  {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  if (RapportRemoteDisplayDevice.cameraCapabilities.getter())
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (v5.super.isa)
    {
      if (v7.super.isa)
      {
        sub_100004928(0, &qword_1000A2E40);
        uint64_t v8 = v5.super.isa;
        char v6 = static NSObject.== infix(_:_:)();

LABEL_16:
        goto LABEL_18;
      }
LABEL_13:
      char v6 = 0;
      v7.super.Class isa = v5.super.isa;
      goto LABEL_16;
    }
    if (v7.super.isa)
    {
      char v6 = 0;
      goto LABEL_16;
    }
  }
  else if (v5.super.isa)
  {
    goto LABEL_13;
  }
  char v6 = 1;
LABEL_18:
  uint64_t v9 = RapportEndpoint.identifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  uint64_t v11 = v10;
  if (v9 == RapportEndpoint.identifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice)
    && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  uint64_t v15 = RapportEndpoint.idsDeviceIdentifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  uint64_t v17 = v16;
  if (v15 == RapportEndpoint.idsDeviceIdentifier.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice)&& v17 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v20 & 1) == 0) {
      return result;
    }
  }
  uint64_t v21 = RapportEndpoint.model.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  uint64_t v23 = v22;
  if (v21 == RapportEndpoint.model.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice)
    && v23 == v24)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v26 & 1) == 0) {
      return result;
    }
  }
  uint64_t v27 = RapportEndpoint.name.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
  uint64_t v29 = v28;
  if (v27 == RapportEndpoint.name.getter(v2, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice)
    && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v32 & 1) == 0) {
      return result;
    }
  }
  id v33 = RapportEndpoint.statusFlags.getter();
  if (v33 != RapportEndpoint.statusFlags.getter()) {
    return 0;
  }
  Swift::Int rawValue = RapportEndpoint.sourceVersion.getter().rawValue;
  return (rawValue == RapportEndpoint.sourceVersion.getter().rawValue) & v6;
}

id sub_10002C774()
{
  if (!*(void *)(v0 + 24)) {
    return 0;
  }
  swift_retain();
  id v1 = RapportRemoteDisplayDiscovery.errorFlags.getter();
  swift_release();
  return v1;
}

void sub_10002C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100051280();
  a21 = v22;
  a22 = v23;
  if (qword_1000A1330 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_1000513A4(v24, (uint64_t)qword_1000A26C0);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (_DWORD *)sub_10001EAAC();
    a10 = sub_100013E10();
    *uint64_t v27 = 136446210;
    id v28 = sub_10002C774();
    id v29 = RPErrorFlagsCopyDescription((unint64_t)v28);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    sub_100017070(v30, v32, &a10);
    sub_1000219DC();
    sub_100051428();
    swift_bridgeObjectRelease();
    sub_100051C68((void *)&_mh_execute_header, v33, v34, "<%{public}s>");
    sub_1000514C8();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100051428();
  }
  sub_10005122C();
}

uint64_t sub_10002C900(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 72);
  if (!*(void *)(v5 + 16) || (unint64_t v6 = sub_100040760(a1), (v7 & 1) == 0))
  {
    swift_endAccess();
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v11, v12, -200);
    sub_100051704();
    return a1;
  }
  a1 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_endAccess();
  if (a2 == 3)
  {
    type metadata accessor for RapportRemoteDisplayDevice();
    sub_100051CEC();
    unint64_t v14 = (unint64_t)RapportEndpoint.statusFlags.getter();
    uint64_t v15 = *(void *)RapportStatusFlags.WiFi.unsafeMutableAddressor();
    if (v15 && (v15 & v14) != v15) {
      goto LABEL_21;
    }
    return a1;
  }
  if (a2 == 2)
  {
    type metadata accessor for RapportRemoteDisplayDevice();
    sub_100051CEC();
    unint64_t v16 = (unint64_t)RapportEndpoint.statusFlags.getter();
    uint64_t v17 = *(void *)RapportStatusFlags.USB.unsafeMutableAddressor();
    if (v17 && (v17 & v16) != v17) {
      goto LABEL_21;
    }
    return a1;
  }
  if (a2 != 1)
  {
    swift_retain();
    return a1;
  }
  type metadata accessor for RapportRemoteDisplayDevice();
  sub_100051CEC();
  unint64_t v8 = (unint64_t)RapportEndpoint.statusFlags.getter();
  uint64_t v9 = *(void *)RapportStatusFlags.BLE.unsafeMutableAddressor();
  uint64_t v10 = *(void *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
  if (!v9)
  {
    if (!v10) {
      return a1;
    }
    goto LABEL_19;
  }
  if ((v10 & ~v9) != 0) {
LABEL_19:
  }
    v9 |= v10;
  if ((v9 & ~v8) != 0)
  {
LABEL_21:
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v18, v19, -200);
    sub_100051704();
    swift_release();
  }
  return a1;
}

uint64_t sub_10002CB84()
{
  return swift_endAccess();
}

uint64_t sub_10002CC1C(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  if (qword_1000A1330 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100004964(v5, (uint64_t)qword_1000A26C0);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = a2();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a3, v8, 2u);
    sub_100004A0C();
  }

  return sub_10002CB84();
}

uint64_t sub_10002CD10(char a1)
{
  if (a1) {
    return 0x65746F6D6572;
  }
  else {
    return 0x6C61636F6CLL;
  }
}

BOOL sub_10002CD40(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10002CD50(uint64_t a1, char a2)
{
}

Swift::Int sub_10002CD78(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10002CDB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10002CD40(*a1, *a2);
}

Swift::Int sub_10002CDC4()
{
  return sub_10002CD78(*v0);
}

void sub_10002CDCC(uint64_t a1)
{
  sub_10002CD50(a1, *v1);
}

uint64_t sub_10002CDD4()
{
  return sub_10002CD10(*v0);
}

void sub_10002CDDC()
{
  sub_100051640();
  sub_10005A15C();
  uint64_t v1 = _s7SessionC8IdentityVMa(0);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    uint64_t v2 = 0x65746F6D6572;
  }
  else {
    uint64_t v2 = 0x6C61636F6CLL;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    unint64_t v3 = (void *)0xE600000000000000;
  }
  else {
    unint64_t v3 = (void *)0xE500000000000000;
  }
  sub_1000129C4();
  String.init<A>(_:radix:uppercase:)();
  sub_100051BD8();
  sub_100013D84();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_100013D84();
  v5._countAndFlagsBits = sub_1000516F8();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_100013C50();
}

void sub_10002CEC0()
{
  sub_100051D04();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  sub_100051318();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v2 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v2 + 24)));
}

Swift::Int sub_10002CF5C()
{
  sub_100051B94();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int sub_10002D01C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

void sub_10002D0D8()
{
}

void sub_10002D104()
{
  sub_1000518D0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(_DWORD *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink) = 0;
  swift_weakInit();
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue) = 0;
  sub_1000468D0(v6, v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (void (*)(void))_s7SessionC8IdentityVMa);
  type metadata accessor for Logger();
  sub_10001BB80();
  sub_100051210();
  v7();
  unint64_t v8 = (void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  *unint64_t v8 = v4;
  v8[1] = v2;
  sub_100004928(0, &qword_1000A1958);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  sub_100051CE0();
  v10();
  sub_100046880();
  *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_streams) = v9;
  sub_1000516E4();
}

uint64_t sub_10002D280()
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (!v2) {
    return 0;
  }
  sub_100051C28();
  type metadata accessor for Client();
  id v3 = v0;
  id v4 = v2;
  sub_100051A50();
  char v5 = static NSObject.== infix(_:_:)();

  return v5 & 1;
}

uint64_t sub_10002D2F0(uint64_t a1)
{
  uint64_t v1 = 0x6C616974696E692ELL;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      uint64_t v1 = 0x696E657473696C2ELL;
      break;
    case 2:
    case 3:
      sub_100051B50();
      break;
    case 4:
      uint64_t v1 = 0x676E69736F6C632ELL;
      break;
    case 5:
      uint64_t v1 = 0x6465736F6C632ELL;
      break;
    default:
      swift_errorRetain();
      sub_1000116B8((uint64_t *)&unk_1000A2FF0);
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        JUMPOUT(0x10002D4A0);
      }
      id v2 = [v5 debugDescription];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v3._countAndFlagsBits = sub_100051318();
      String.append(_:)(v3);

      swift_bridgeObjectRelease();
      uint64_t v1 = 0x28726F7272652ELL;
      swift_errorRelease();
      break;
  }
  return v1;
}

uint64_t sub_10002D4B8()
{
  return sub_10002D2F0(*v0);
}

uint64_t sub_10002D4C0(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state;
  switch(*(void *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state))
  {
    case 0:
      goto LABEL_9;
    case 1:
    case 2:
      if (!result) {
        return result;
      }
      goto LABEL_9;
    case 3:
      if ((unint64_t)(result - 1) >= 2) {
        goto LABEL_9;
      }
      return result;
    case 4:
      if ((unint64_t)(result - 1) >= 3) {
        goto LABEL_9;
      }
      return result;
    case 5:
      if ((unint64_t)(result - 1) >= 4)
      {
LABEL_9:
        uint64_t v3 = result;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease();
        v4._countAndFlagsBits = sub_10002D2F0(v3);
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._countAndFlagsBits = 15917;
        v5._object = (void *)0xE200000000000000;
        String.append(_:)(v5);
        unint64_t v6 = *(void *)(v1 + v2);
        sub_10004F8B8(v6);
        v7._countAndFlagsBits = sub_10002D2F0(v6);
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        sub_10004F8C8(v6);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10002D628);
      }
      return result;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10002D640(unint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  *(void *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) = a1;
  sub_10004F8B8(v3);
  sub_10004F8B8(a1);
  sub_10004F8C8(v3);
  sub_10002D4C0(v3);
  sub_10004F8C8(a1);

  return sub_10004F8C8(v3);
}

uint64_t sub_10002D6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_getErrorValue();
    uint64_t v17 = sub_10002DD2C((uint64_t)"SidecarRelay/Relay.swift", 24, 2, 539, v44, v45);
    uint64_t Strong = swift_weakLoadStrong();
    swift_errorRetain();
    swift_release();
    if (Strong)
    {
      uint64_t v38 = a4;
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_100004964(v13, (uint64_t)qword_1000AA248);
      uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v19, v13);
      __chkstk_darwin(v20);
      *(&v35 - 2) = (uint8_t *)v17;
      sub_100019968(sub_10004F778, a2, (void (*)(void))sub_100013904);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_errorRelease();
      a4 = v38;
    }
    else
    {
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      sub_100004964(v13, (uint64_t)qword_1000AA248);
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      int v23 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        LODWORD(v38) = v23;
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v37 = v25;
        *(_DWORD *)uint64_t v24 = 136446210;
        aBlock[0] = v25;
        unint64_t v35 = v24 + 4;
        unint64_t v36 = v24;
        swift_retain();
        sub_10002CDDC();
        uint64_t v27 = v26;
        unint64_t v29 = v28;
        swift_release();
        uint64_t v43 = sub_100017070(v27, v29, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v38, "%{public}s: Send Discarded", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_release_n();
      }
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v30 = (void *)static OS_dispatch_queue.main.getter();
  unint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = v39;
  uint64_t v31[2] = v39;
  v31[3] = a4;
  v31[4] = v17;
  aBlock[4] = (uint64_t)sub_10004F87C;
  aBlock[5] = (uint64_t)v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10005A66C;
  aBlock[3] = (uint64_t)&unk_1000972C8;
  uint64_t v33 = _Block_copy(aBlock);
  sub_10004F82C(v32);
  swift_errorRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10003B620((uint64_t)&unk_1000A3E50);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10004FBE8((uint64_t)&qword_1000A3E60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v12, v41);
}

uint64_t sub_10002DD2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a4;
  int v38 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v40 = v18;
  v17((char *)&v36 - v15, v18, v19);
  uint64_t v20 = _getErrorEmbeddedNSError<A>(_:)();
  uint64_t v41 = a6;
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a5);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21, v16, a5);
  }
  os_log_type_t v22 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v23 = [v22 domain:v36, v37];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v24 && v27 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      v17(v11, v40, a5);
      uint64_t v30 = _getErrorEmbeddedNSError<A>(_:)();
      if (v30)
      {
        uint64_t v31 = v30;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a5);
      }
      else
      {
        uint64_t v31 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v34, v11, a5);
      }
      goto LABEL_19;
    }
  }
  if ([v22 code] == (id)4099)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v31 = (uint64_t)sub_100021ED4(-71148, 0, 0);
  }
  else
  {
    v17(v14, v40, a5);
    uint64_t v32 = _getErrorEmbeddedNSError<A>(_:)();
    if (v32)
    {
      uint64_t v31 = v32;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, a5);
    }
    else
    {
      uint64_t v31 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v33, v14, a5);
    }
  }
LABEL_19:

  return v31;
}

void sub_10002E0B4()
{
  sub_1000518D0();
  unint64_t v3 = v2;
  uint64_t v4 = sub_1000116B8(&qword_1000A1970);
  uint64_t v5 = sub_100051080(v4);
  __chkstk_darwin(v5);
  sub_1000139A8();
  unint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = v3;
  id v7 = v3;

  sub_10002D640(2uLL);
  id v8 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  Class v10 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051508();

  swift_bridgeObjectRetain();
  sub_1000516F8();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v12 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051508();

  Class v13 = UInt._bridgeToObjectiveC()().super.super.isa;
  Class v14 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051508();

  uint64_t v15 = sub_10005141C();
  sub_100012ED8(v15, v16, &qword_1000A1970);
  uint64_t v17 = _s7SessionC8IdentityVMa(0);
  if (sub_100012E5C(v1, 1, v17) == 1)
  {
    sub_1000131C8(v1, &qword_1000A1970);
    uint64_t Data = 0;
LABEL_5:
    unint64_t v28 = 0xF000000000000000;
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v1 + *(int *)(v17 + 20));
  sub_100046880();
  Class v19 = Int._bridgeToObjectiveC()().super.super.isa;
  Class v20 = Int._bridgeToObjectiveC()().super.super.isa;
  [v8 setObject:v19 forKeyedSubscript:v20];

  id v21 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v18];
  uint64_t Data = (void *)OPACKEncoderCreateData();

  if (!Data) {
    goto LABEL_5;
  }
  id v26 = Data;
  uint64_t Data = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  sub_100012DAC(0, 0xF000000000000000);
LABEL_6:
  id v23 = v8;
  uint64_t v24 = sub_100051318();
  sub_100012D98(v24, v25);
  swift_retain();
  sub_100051A50();
  sub_10004D694();

  swift_release();
  sub_100012DAC((uint64_t)Data, v28);
  sub_10002F2C8();
  sub_10002EFBC();

  sub_100012DAC((uint64_t)Data, v28);
  sub_1000516E4();
}

uint64_t sub_10002E3B0(uint64_t result)
{
  if (result)
  {
    swift_errorRetain();
    sub_10002E558();
    return swift_errorRelease();
  }
  return result;
}

void sub_10002E3FC()
{
  sub_1000518D0();
  uint64_t v2 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state;
  if (*(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) > 3uLL)
  {
    sub_1000516E4();
  }
  else
  {
    unint64_t v3 = v1;
    id v4 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    Class v6 = Int._bridgeToObjectiveC()().super.super.isa;
    sub_100051AF8();

    swift_errorRetain();
    id v7 = (void *)sub_100023010((uint64_t)v3);
    Class v8 = Int._bridgeToObjectiveC()().super.super.isa;
    sub_100051AF8();

    swift_errorRelease();
    swift_retain();
    id v9 = v4;
    uint64_t v10 = sub_100051C28();
    sub_100012D98(v10, 0xF000000000000000);
    sub_10004D694();

    swift_release();
    sub_100012DAC(0, 0xF000000000000000);
    if (*(void *)(v0 + v2) <= 5uLL) {
      sub_10002D640(4uLL);
    }

    sub_100051CD4();
    sub_1000516E4();
    sub_100012DAC(v11, v12);
  }
}

void sub_10002E558()
{
  sub_100051D04();
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  if (v3 - 2 >= 3)
  {
    if (v3 >= 2) {
      return;
    }
  }
  else
  {
    id v4 = *(void **)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = sub_100051A50();
      sub_100005F6C(v6, v7);
    }
  }
  if (v2) {
    swift_errorRetain();
  }
  else {
    unint64_t v2 = 5;
  }
  sub_10002D640(v2);
  sub_1000510D4();
  sub_1000116B8((uint64_t *)&unk_1000A3090);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
}

uint64_t sub_10002E624(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  Class v4 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051ACC();

  type metadata accessor for System();
  sub_10005A6B0();
  v5.super.super.Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  Class v6 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051ACC();

  if (a1 == 3)
  {
    if (qword_1000A1358 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    v5.super.super.Class isa = (Class)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v7 = Int._bridgeToObjectiveC()().super.super.isa;
    [v2 setObject:v5.super.super.isa forKeyedSubscript:v7];
  }
  id v8 = v2;
  sub_10005108C();

  sub_100012DAC(0, 0xF000000000000000);
  uint64_t v9 = sub_100051CD4();

  return sub_100012DAC(v9, v10);
}

BOOL == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10002E798()
{
  id v0 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  Class v2 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051160();

  type metadata accessor for System();
  sub_10005A6B0();
  Class v3 = UInt._bridgeToObjectiveC()().super.super.isa;
  Class v4 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051160();

  id v5 = v0;
  sub_10005108C();

  sub_100012DAC(0, 0xF000000000000000);
  uint64_t v6 = sub_100051CD4();

  return sub_100012DAC(v6, v7);
}

uint64_t sub_10002E870()
{
  id v0 = [objc_allocWithZone((Class)NSMutableDictionary) initWithCapacity:8];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  Class v2 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051160();

  type metadata accessor for System();
  sub_10005A6B0();
  Class v3 = UInt._bridgeToObjectiveC()().super.super.isa;
  Class v4 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051160();

  if (qword_1000A1358 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v6 = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100051160();

  id v7 = v0;
  sub_10005108C();

  sub_100012DAC(0, 0xF000000000000000);
  uint64_t v8 = sub_100051CD4();

  return sub_100012DAC(v8, v9);
}

unint64_t sub_10002E9BC(void *a1)
{
  uint64_t v2 = v1;
  sub_10002F098();
  Class v4 = *(void **)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  *(void *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client) = a1;
  NSString v5 = a1;

  unint64_t result = sub_10002D640(3uLL);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue);
  if (v7)
  {
    *(void *)(v2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue) = 0;
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      unint64_t v9 = *(void (**)(uint64_t, unsigned char *))((swift_isaMask & *v5) + 0xD8);
      uint64_t v10 = v7 + 32;
      do
      {
        sub_1000157CC(v10, (uint64_t)v11);
        v9(v2, v11);
        sub_1000136EC((uint64_t)v11);
        v10 += 40;
        --v8;
      }
      while (v8);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10002EAB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = RapportDeviceChangeFlags.rawValue.getter;
  uint64_t v16 = 0;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_10002EC54;
  Class v14 = &unk_1000971D8;
  Class v6 = _Block_copy(&v11);
  [a3 setHandler:v6];
  _Block_release(v6);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  uint64_t v15 = sub_10004F720;
  uint64_t v16 = v8;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_10002451C;
  Class v14 = &unk_100097250;
  unint64_t v9 = _Block_copy(&v11);
  swift_bridgeObjectRetain();
  id v10 = a3;
  swift_release();
  [v10 activateWithCompletion:v9];
  _Block_release(v9);
}

uint64_t sub_10002EC54(uint64_t a1, uint64_t a2)
{
  Class v3 = *(void (**)(long long *))(a1 + 32);
  if (a2)
  {
    *((void *)&v6 + 1) = swift_getObjectType();
    *(void *)&long long v5 = a2;
  }
  else
  {
    long long v5 = 0u;
    long long v6 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  v3(&v5);
  swift_release();
  return sub_1000131C8((uint64_t)&v5, &qword_1000A2F20);
}

uint64_t sub_10002ECDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, result + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_logger, v9);
      swift_release();
      swift_bridgeObjectRetain_n();
      Class v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        v18[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        v17[0] = v16 + 4;
        swift_bridgeObjectRetain();
        v17[1] = sub_100017070(a3, a4, v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to activate stream %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100044270(a5, a3, a4, sub_100046118);
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10002EFBC()
{
  uint64_t v2 = type metadata accessor for Date();
  sub_100013930();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1000139A8();
  Date.init(timeIntervalSinceNow:)();
  if (qword_1000A1380 != -1) {
    swift_once();
  }
  sub_10004E14C(v0, v1, qword_1000AA2D8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
}

uint64_t sub_10002F098()
{
  uint64_t v1 = v0;
  if (qword_1000A1380 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1000AA2D8;
  unint64_t v3 = sub_10003B620((uint64_t)&unk_1000A3058);
  uint64_t v4 = swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  __chkstk_darwin(v4);
  v7[2] = v1;
  v7[3] = v3;
  swift_bridgeObjectRetain();
  *(void *)(v2 + 16) = sub_10005E304((uint64_t (*)(char *))sub_10004F6B8, (uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  return sub_10005EA78();
}

void sub_10002F1C4()
{
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000139C0();
  id v2 = sub_100051048(v0, v1, -201);
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  id v3 = v2;
  sub_100051A50();
  sub_100025F44();
}

double sub_10002F2A4()
{
  return sub_10002F2EC();
}

double sub_10002F2C8()
{
  return sub_10002F2EC();
}

double sub_10002F2EC()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10004F8D8((uint64_t)v5, (uint64_t)v6, &qword_1000A2F20);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_1000131C8((uint64_t)v6, &qword_1000A2F20);
  }
  return 10.0;
}

#error "10002F438: call analysis failed (funcsize=44)"

void sub_10002F4BC()
{
  id v2 = *(void **)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (v2)
  {
    id v3 = v2;
    sub_1000518B8();
    sub_100006AC4();
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v4, v5, -1020);
    swift_willThrow();
  }
}

uint64_t sub_10002F56C()
{
  sub_100046880();
  type metadata accessor for Logger();
  sub_1000139D0();
  sub_1000139EC();
  v1();
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  swift_bridgeObjectRelease();
  sub_10004F8C8(*(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002F64C()
{
  sub_10002F56C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

Swift::Int sub_10002F6A4()
{
  sub_100051B94();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

void sub_10002F6E4()
{
}

Swift::Int sub_10002F708()
{
  return sub_10002F6A4();
}

void sub_10002F72C()
{
}

Swift::Int sub_10002F784()
{
  return Hasher._finalize()();
}

uint64_t sub_10002F7EC(uint64_t a1)
{
  return sub_10002F810(a1, qword_1000A26F0);
}

uint64_t sub_10002F810(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000499C(v3, a2);
  uint64_t v4 = sub_10005141C();
  sub_100004964(v4, v5);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10002F884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2
                + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener);
  void *v3 = a1;
  v3[1] = a2;
  return swift_release();
}

id sub_10002F8A0()
{
  uint64_t v1 = sub_1000116B8(&qword_1000A3188);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000116B8(&qword_1000A3190);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  *(void *)&v0[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_cancellables] = &_swiftEmptySetSingleton;
  uint64_t v8 = &v0[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener];
  *(void *)uint64_t v8 = RapportDeviceChangeFlags.rawValue.getter;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  swift_weakAssign();
  uint64_t v10 = (objc_class *)type metadata accessor for Relay.RelayProxy();
  v18.receiver = v0;
  v18.super_class = v10;
  id v11 = [super init];
  v16[0] = sub_10002FC10();
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  id v17 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  sub_100012E34((uint64_t)v3, 1, 1, v12);
  sub_1000116B8(&qword_1000A3198);
  sub_10004FBE8((uint64_t)&unk_1000A31A0);
  sub_10004FAF0();
  Publisher.receive<A>(on:options:)();
  sub_1000131C8((uint64_t)v3, &qword_1000A3188);

  swift_release();
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10004FB80;
  *(void *)(v14 + 24) = v13;
  sub_10004FBE8((uint64_t)&unk_1000A31B0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  swift_release();
  return v11;
}

uint64_t sub_10002FC10()
{
  return Publisher.eraseToAnyPublisher()();
}

void sub_10002FC8C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100030A98();
  }
}

uint64_t sub_10002FCE0(uint64_t a1, uint64_t a2)
{
  if (qword_1000A1350 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100004964(v4, (uint64_t)qword_1000A26F0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting display service sessions changed listener", v7, 2u);
    swift_slowDealloc();
  }

  swift_retain();

  return sub_10002F884(a1, a2);
}

void sub_10002FE78(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

void sub_10002FF28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v52 = (unint64_t)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v47 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v47 - v15;
  if (qword_1000A1350 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100004964(v17, (uint64_t)qword_1000A26F0);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  unint64_t v54 = v9 + 16;
  v53(v16, a1, v8);
  uint64_t v55 = v18;
  Class v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v50 = a1;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    unint64_t v57 = v9;
    id v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t Strong = (uint64_t)v7;
    uint64_t v61 = v24;
    *(_DWORD *)id v23 = 136315138;
    unint64_t v51 = v14;
    sub_10003B620((uint64_t)&unk_1000A2380);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = sub_100017070(v25, v26, &v61);
    a1 = v50;
    uint64_t v14 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v57 + 8);
    v59(v16, v8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "A request was made to close the display service session with identifier: [%s]", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = (char *)Strong;
    swift_slowDealloc();
    unint64_t v9 = v57;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v9 + 8);
    v59(v16, v8);
  }

  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    unint64_t v41 = v52;
    v53((char *)v52, a1, v8);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      sub_10003B620((uint64_t)&unk_1000A2380);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = sub_100017070(v45, v46, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v59((char *)v41, v8);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Could not find 'relay'.  Will not close the display service session with identifier: [%s]", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v59((char *)v41, v8);
    }

    return;
  }
  unint64_t v27 = (unint64_t)sub_100030830();
  unint64_t v52 = v27;
  if (v27 >> 62)
  {
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    if (v29) {
      goto LABEL_9;
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v29) {
    goto LABEL_26;
  }
LABEL_9:
  unint64_t v51 = (char *)v29;
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    unint64_t v57 = v52 & 0xC000000000000001;
    unint64_t v58 = v9 + 8;
    unint64_t v31 = v52;
    *(void *)&long long v28 = 136315138;
    long long v48 = v28;
    v47[1] = (char *)&type metadata for Any + 8;
    uint64_t v32 = v51;
    uint64_t v49 = v4;
    do
    {
      if (v57)
      {
        uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v33 = *(void *)(v31 + 8 * (void)v30 + 32);
        swift_retain();
      }
      sub_1000468D0(v33 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v7, (void (*)(void))_s7SessionC8IdentityVMa);
      sub_10004DD54((uint64_t)v7, (uint64_t)v4, (void (*)(void))type metadata accessor for SidecarIdentity);
      char v34 = static UUID.== infix(_:_:)();
      v59(v4, v8);
      if (v34)
      {
        v53(v14, a1, v8);
        unint64_t v35 = Logger.logObject.getter();
        uint64_t v36 = v14;
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v61 = swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = v48;
          sub_10003B620((uint64_t)&unk_1000A2380);
          uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v38 + 4) = sub_100017070(v39, v40, &v61);
          swift_bridgeObjectRelease();
          v59(v36, v8);
          _os_log_impl((void *)&_mh_execute_header, v35, v37, "Closing remote display session with device with identifier: [%s].", (uint8_t *)v38, 0xCu);
          swift_arrayDestroy();
          uint64_t v4 = v49;
          swift_slowDealloc();
          a1 = v50;
          swift_slowDealloc();
        }
        else
        {
          v59(v36, v8);
        }

        uint64_t v14 = v36;
        sub_100025F44();
        uint64_t v32 = v51;
        unint64_t v31 = v52;
      }
      ++v30;
      swift_release();
    }
    while (v32 != v30);
    goto LABEL_26;
  }
  __break(1u);
}

void *sub_100030830()
{
  if (swift_weakLoadStrong())
  {
    uint64_t v0 = sub_1000309C8();
    uint64_t v2 = sub_100030954(v0, v1);
    swift_release();
    swift_bridgeObjectRelease();
    return (void *)v2;
  }
  else
  {
    if (qword_1000A1350 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100004964(v4, (uint64_t)qword_1000A26F0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not find 'relay'.  Will return an empty collection of remote display sessions", v7, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_100030954(uint64_t a1, uint64_t a2)
{
  sub_100013AD0();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_100025064(v4, a1, a2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000309C8()
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier);
  if (*(void *)(v0
                 + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy____lazy_storage___remoteDisplayServiceIdentifier
                 + 8))
  {
    uint64_t v2 = *v1;
  }
  else
  {
    id v3 = [self serviceWithName:SidecarServiceNameDisplay];
    id v4 = [v3 serviceIdentifier];

    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *uint64_t v1 = v2;
    v1[1] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

size_t sub_100030A98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v2 - 8);
  uint64_t v29 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (unint64_t)sub_100030830();
  unint64_t v12 = v11;
  if (!(v11 >> 62))
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v23 = sub_100052FF4((uint64_t)v16);
    uint64_t v24 = *(void (**)(uint64_t))(v1
                                         + OBJC_IVAR____TtCC12SidecarRelay5RelayP33_1C5D654CC83EDCEF3B22927C4D40C7FB10RelayProxy_sessionsChangedListener);
    swift_retain();
    v24(v23);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v30 = _swiftEmptyArrayStorage;
  size_t result = sub_100060F68(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v30;
    uint64_t v25 = v1;
    unint64_t v26 = v12 & 0xC000000000000001;
    uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v27 = v13;
    unint64_t v28 = v12;
    do
    {
      if (v26)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v18 = *(void *)(v12 + 8 * v15 + 32);
        swift_retain();
      }
      sub_1000468D0(v18 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v6, (void (*)(void))_s7SessionC8IdentityVMa);
      uint64_t v19 = v29;
      sub_10004DD54((uint64_t)v6, v29, (void (*)(void))type metadata accessor for SidecarIdentity);
      os_log_type_t v20 = *v17;
      (*v17)(v10, v19, v7);
      swift_release();
      uint64_t v30 = v16;
      unint64_t v22 = v16[2];
      unint64_t v21 = v16[3];
      if (v22 >= v21 >> 1)
      {
        sub_100060F68(v21 > 1, v22 + 1, 1);
        uint64_t v16 = v30;
      }
      ++v15;
      long long v16[2] = v22 + 1;
      v20((char *)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v22, (uint64_t)v10, v7);
      unint64_t v12 = v28;
    }
    while (v27 != v15);
    swift_bridgeObjectRelease();
    uint64_t v1 = v25;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void sub_100030DCC()
{
}

id sub_100030E20()
{
  return sub_10003A37C(0, type metadata accessor for Relay.RelayProxy);
}

uint64_t sub_100030EB0()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 88);
  if (*(void *)(*(void *)(v0 + 96) + 16))
  {
    if (result) {
      return result;
    }
    *(void *)(v0 + 88) = os_transaction_create();
  }
  else
  {
    if (!result) {
      return result;
    }
    *(void *)(v0 + 88) = 0;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100030F18()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Relay.RapportSessionKey(0) + 20));
  if (!v1) {
    return sub_10005A15C();
  }
  uint64_t v7 = sub_10005A15C();
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  switch(v1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1279547201;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1229343063;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 4346709;
      break;
    default:
      uint64_t v4 = 0;
      unint64_t v3 = 0xE000000000000000;
      break;
  }
  unint64_t v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_100030FD8()
{
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 20)));
}

BOOL sub_100031068(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Relay.RapportSessionKey(0);
  return *(void *)(a1 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20));
}

Swift::Int sub_1000310B8()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 20)));
  return Hasher._finalize()();
}

Swift::Int sub_100031160(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

uint64_t sub_100031208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Relay.RapportSessionKey(0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000468D0(a2, (uint64_t)v10, (void (*)(void))type metadata accessor for SidecarIdentity);
  *(void *)&v10[*(int *)(v8 + 28)] = a3;
  swift_beginAccess();
  uint64_t v11 = sub_100024888((uint64_t)v10, *(void *)(v3 + 96), (void (*)(void))sub_1000408F4);
  if (v11)
  {
    uint64_t v12 = v11;
    swift_endAccess();
    type metadata accessor for RapportRemoteDisplaySession();
    if (!static RapportRemoteDisplaySession.== infix(_:_:)(v12, a1))
    {
      if (qword_1000A1330 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100004964(v13, (uint64_t)qword_1000A26C0);
      swift_retain_n();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v25[0] = v23;
        *(_DWORD *)uint64_t v16 = 136446210;
        unint64_t v22 = v16 + 4;
        swift_retain();
        unint64_t v17 = RapportRemoteDisplaySession.description.getter();
        unint64_t v19 = v18;
        swift_release();
        uint64_t v24 = sub_100017070(v17, v19, v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Canceling %{public}s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      RapportRemoteDisplaySession.cancel()();
    }
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v20 = swift_retain();
  sub_100044214(v20, v10, sub_100045640);
  swift_endAccess();
  return sub_100046880();
}

uint64_t sub_100031534(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v2 - 8);
  swift_beginAccess();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002991C(v3, a1);
  uint64_t v6 = v5;
  unsigned __int8 v8 = v7;
  int v9 = ~v7;
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_beginAccess();
    sub_1000116B8(&qword_1000A2E68);
    Dictionary._Variant.remove(at:)();
    swift_endAccess();
    sub_10004AFB8(v4, v6, v8);
    swift_release();
    sub_100046880();
  }
  return sub_1000316A8(a1);
}

uint64_t sub_1000316A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10004BC50(v3, v2);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v4;
  return swift_bridgeObjectRelease();
}

void sub_10003171C()
{
  Hasher._combine(_:)(*v0);
  uint64_t v1 = (char *)v0 + *(int *)(type metadata accessor for Relay.ConnectedSessionKey(0) + 20);
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(void *)&v1[*(int *)(v2 + 20)]);
  Hasher._combine(_:)(v1[*(int *)(v2 + 24)]);
}

BOOL sub_1000317E0(void *a1, void *a2)
{
  BOOL result = 0;
  if (*a1 == *a2)
  {
    uint64_t v4 = *(int *)(type metadata accessor for Relay.ConnectedSessionKey(0) + 20);
    uint64_t v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    if (static UUID.== infix(_:_:)())
    {
      uint64_t v7 = _s7SessionC8IdentityVMa(0);
      if (*(void *)&v5[*(int *)(v7 + 20)] == *(void *)&v6[*(int *)(v7 + 20)]
        && v5[*(int *)(v7 + 24)] == v6[*(int *)(v7 + 24)])
      {
        return 1;
      }
    }
  }
  return result;
}

Swift::Int sub_100031874()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000318BC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000318FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Relay.ConnectedSessionKey(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a2 + 32);
  sub_1000468D0(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v7 + *(int *)(v5 + 28), (void (*)(void))_s7SessionC8IdentityVMa);
  void *v7 = v8;
  swift_beginAccess();
  uint64_t v9 = swift_retain();
  sub_100044214(v9, v7, sub_100045960);
  swift_endAccess();
  return sub_100046880();
}

uint64_t sub_100031A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Relay.ConnectedSessionKey(0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000468D0(a1, (uint64_t)v8 + *(int *)(v6 + 28), (void (*)(void))_s7SessionC8IdentityVMa);
  *uint64_t v8 = a2;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 112);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100040A64(v8), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
    swift_retain();
  }
  else
  {
    uint64_t v12 = 0;
  }
  swift_endAccess();
  sub_100046880();
  return v12;
}

void sub_100031B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_100013C20();
  uint64_t v12 = v10;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for SidecarIdentity();
  uint64_t v18 = sub_100051080(v17);
  __chkstk_darwin(v18);
  sub_100018DA8();
  unint64_t v19 = (unint64_t)sub_10002C774();
  if ((*(void *)RapportErrorFlags.noManatee.unsafeMutableAddressor() & ~v19) == 0)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v20, v21, -301);
    sub_100051704();
    goto LABEL_12;
  }
  uint64_t v22 = sub_10002C900(v16, v14);
  if (v11) {
    goto LABEL_12;
  }
  uint64_t v74 = v16;
  uint64_t v76 = (char *)v14;
  uint64_t v78 = v22;
  v81[0] = v22;
  uint64_t v23 = type metadata accessor for RapportRemoteDisplayDevice();
  unint64_t v24 = (unint64_t)RapportEndpoint.statusFlags.getter();
  uint64_t v25 = *(void *)RapportStatusFlags.WiFi.unsafeMutableAddressor();
  uint64_t v26 = *(void *)RapportStatusFlags.BLE.unsafeMutableAddressor();
  uint64_t v27 = *(void *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
  if ((*(void *)RapportStatusFlags.USB.unsafeMutableAddressor() & ~v24) != 0)
  {
    unint64_t v31 = (unint64_t)sub_10002C774();
    if ((*(void *)RapportErrorFlags.WiFiHostAP.unsafeMutableAddressor() & ~v31) != 0)
    {
      unint64_t v35 = (unint64_t)sub_10002C774();
      if ((*(void *)RapportErrorFlags.WiFiOff.unsafeMutableAddressor() & ~v35) != 0)
      {
        BOOL v48 = (v26 & v24) != v26 || (v27 & v24) != v27;
        if ((v25 & v24) == v25 || !v48) {
          goto LABEL_5;
        }
        v81[0] = v78;
        RapportEndpoint.model.getter(v23, (uint64_t)&protocol witness table for RapportRemoteDisplayDevice);
        v49._countAndFlagsBits = 0x447974696C616552;
        v49._object = (void *)0xED00006563697665;
        Swift::Bool v50 = String.hasPrefix(_:)(v49);
        swift_bridgeObjectRelease();
        sub_100004928(0, (unint64_t *)&qword_1000A17C0);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000139C0();
        if (v50) {
          uint64_t v34 = -457;
        }
        else {
          uint64_t v34 = -203;
        }
      }
      else
      {
        sub_100004928(0, (unint64_t *)&qword_1000A17C0);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000139C0();
        uint64_t v34 = -303;
      }
    }
    else
    {
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000139C0();
      uint64_t v34 = -302;
    }
    sub_100051048(v32, v33, v34);
    sub_100051704();
    swift_release();
    goto LABEL_12;
  }
LABEL_5:
  id v28 = [self standardUserDefaults];
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 objectForKey:v29];

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  uint64_t v36 = v74;
  sub_10004F8D8((uint64_t)&v79, (uint64_t)v81, &qword_1000A2F20);
  if (v82)
  {
    if swift_dynamicCast() && (a10)
    {
      os_log_type_t v37 = v76 - 1;
      if ((unint64_t)(v76 - 1) >= 3)
      {
        unint64_t v39 = 0;
        goto LABEL_24;
      }
      uint64_t v38 = &unk_100082768;
      goto LABEL_22;
    }
  }
  else
  {
    sub_1000131C8((uint64_t)v81, &qword_1000A2F20);
  }
  os_log_type_t v37 = v76 - 1;
  if ((unint64_t)(v76 - 1) >= 3)
  {
    unint64_t v39 = 0x200000;
    goto LABEL_24;
  }
  uint64_t v38 = &unk_100082780;
LABEL_22:
  unint64_t v39 = v38[(void)v37];
LABEL_24:
  if (!sub_10002BBEC(v74, v76))
  {
    uint64_t v75 = type metadata accessor for RapportRemoteDisplaySession();
    uint64_t v40 = RapportRemoteDisplaySession.__allocating_init()();
    swift_retain();
    RapportRemoteDisplaySession.controlFlags.setter(v39);
    uint64_t v41 = swift_retain();
    RapportRemoteDisplaySession.destinationDevice.setter(v41);
    swift_beginAccess();
    *(void *)(v40 + 24) = &off_100097030;
    swift_unknownObjectWeakAssign();
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100004964(v42, (uint64_t)qword_1000A26C0);
    swift_retain_n();
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    int v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      HIDWORD(v73) = v45;
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v72 = (void *)swift_slowAlloc();
      *(void *)&long long v79 = v72;
      uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
      *(_DWORD *)unint64_t v46 = 136446210;
      uint64_t v70 = (uint64_t)(v46 + 4);
      swift_retain();
      RapportRemoteDisplaySession.description.getter();
      sub_100051A1C();
      swift_release();
      sub_100017070(v40, v39, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100051BE4();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, BYTE4(v73), "%{public}s Started", v46, 0xCu);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      sub_100051BE4();
    }
    *(void *)&long long v79 = v40;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v12;
    *(void *)(v54 + 24) = v40;
    swift_retain_n();
    swift_retain();
    RapportMessageable.registerEvent(id:options:handler:)(v51, v53, 0, (uint64_t)sub_10004F970, v54, v75, (uint64_t)&protocol witness table for RapportRemoteDisplaySession, v55, v69, v70, v71, v72, v73, v75, (uint64_t)v76, v78, v79, *((uint64_t *)&v79 + 1), v80,
      *((uint64_t *)&v80 + 1),
      v81[0],
      v81[1],
      v81[2],
      v82);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100031208(v40, v36, v77);
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v12;
    *(void *)(v56 + 24) = v40;
    swift_retain();
    swift_retain();
    RapportRemoteDisplaySession.activate(completion:)((uint64_t)sub_10004F97C, v56);
    swift_release();
    swift_release();
  }
  sub_100030EB0();
  if (qword_1000A1330 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_100004964(v57, (uint64_t)qword_1000A26C0);
  uint64_t v58 = sub_100051590();
  sub_1000468D0(v58, v59, v60);
  swift_retain_n();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = swift_slowAlloc();
    *(void *)&long long v79 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136446466;
    uint64_t v64 = sub_10005A15C();
    sub_100017070(v64, v65, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100046880();
    *(_WORD *)(v63 + 12) = 2082;
    swift_retain();
    RapportRemoteDisplaySession.description.getter();
    swift_release();
    uint64_t v66 = sub_100051658();
    sub_100017070(v66, v67, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100051BE4();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}s: Opened %{public}s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
    swift_release();
  }
  else
  {
    swift_release();
    sub_100046880();

    sub_100051BE4();
  }
LABEL_12:
  sub_100013C38();
}

void sub_10003247C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000324B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v117) = a4;
  uint64_t v115 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v112 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v111 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v116);
  uint64_t v113 = (uint64_t)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v10 - 8);
  uint64_t v119 = (uint64_t)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v118);
  uint64_t v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v120 = sub_10002219C(v14);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  if (qword_1000A1338 != -1) {
    swift_once();
  }
  unint64_t v19 = qword_1000A26D8;
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  uint64_t v21 = &off_1000A1000;
  if (!os_log_type_enabled(v19, v20))
  {
LABEL_10:
    if (!a3) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v37 = sub_100028BDC(a3);
    uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v123 = v38;
    AnyHashable.init<A>(_:)();
    uint64_t v39 = sub_100024974((uint64_t)v124, v37);
    sub_10002201C((uint64_t)v124);
    if (v39)
    {
      uint64_t v110 = v5;
      uint64_t v121 = v39;
      if (swift_dynamicCast())
      {
        if (v122 == 0xD000000000000011 && v123 == 0x800000010007E270)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v123 = v41;
          AnyHashable.init<A>(_:)();
          uint64_t v42 = sub_100024974((uint64_t)v124, v37);
          sub_10002201C((uint64_t)v124);
          if (v42)
          {
            uint64_t v121 = v42;
            if (swift_dynamicCast())
            {
              uint64_t v43 = v119;
              sub_100059EE0(v119);
              if (sub_100012E5C(v43, 1, v118) == 1)
              {
                swift_bridgeObjectRelease();
                sub_1000131C8(v43, &qword_1000A2E10);
                goto LABEL_24;
              }
              sub_10004DD54(v43, (uint64_t)v13, (void (*)(void))type metadata accessor for SidecarIdentity);
              uint64_t v47 = v110;
              sub_100030EB0();
              BOOL v48 = v120;
              sub_100012D98((uint64_t)v16, (unint64_t)v18);
              uint64_t v120 = v48;
              if (v117)
              {
                uint64_t v52 = sub_10004EA04((uint64_t)v13, v48, (uint64_t)v16, (unint64_t)v18, v47);
              }
              else
              {
                uint64_t v49 = sub_100022500();
                uint64_t v50 = v113;
                sub_1000468D0((uint64_t)v13, v113, (void (*)(void))type metadata accessor for SidecarIdentity);
                uint64_t v51 = v116;
                *(void *)(v50 + *(int *)(v116 + 20)) = v49;
                BOOL v48 = v120;
                *(unsigned char *)(v50 + *(int *)(v51 + 24)) = 0;
                uint64_t v52 = sub_100031A0C(v50, *(void *)(v115 + 32));
                sub_100046880();
              }

              sub_100012DAC((uint64_t)v16, (unint64_t)v18);
              if (!v52)
              {
                swift_bridgeObjectRelease();
                if (v21[104] != (ClassDescriptor *)-1) {
                  swift_once();
                }
                sub_100004964(v7, (uint64_t)qword_1000AA248);
                uint64_t v60 = v48;
                sub_100012D98((uint64_t)v16, (unint64_t)v18);
                uint64_t v61 = Logger.logObject.getter();
                os_log_type_t v62 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v61, v62))
                {
                  uint64_t v63 = (uint8_t *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v63 = 134217984;
                  v124[0] = sub_100022500();
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
                  _os_log_impl((void *)&_mh_execute_header, v61, v62, "%lx: Ignoring Unexpected Message", v63, 0xCu);
                  swift_slowDealloc();
                }
                else
                {

                  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
                  uint64_t v61 = v60;
                }

                goto LABEL_79;
              }
              *(_DWORD *)(v52 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink) = sub_1000382A0(v37);
              uint64_t v53 = v52;
              uint64_t Strong = swift_weakLoadStrong();
              swift_release();
              if (!Strong) {
                swift_weakAssign();
              }
              uint64_t v55 = v53;
              if ((*(unsigned char *)(v53 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) & 1) == 0)
              {
                uint64_t v119 = 0x296C6C756E28;
                *(unsigned char *)(v53 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_loggedLink) = 1;
                uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v123 = v56;
                AnyHashable.init<A>(_:)();
                uint64_t v57 = sub_100024974((uint64_t)v124, v37);
                sub_10002201C((uint64_t)v124);
                uint64_t v105 = v18;
                if (v57 && (uint64_t v121 = v57, swift_dynamicCast()))
                {
                  uint64_t v58 = v122;
                  unint64_t v59 = v123;
                }
                else
                {
                  unint64_t v59 = 0xE600000000000000;
                  uint64_t v58 = 0x296C6C756E28;
                }
                uint64_t v118 = v58;
                uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v123 = v64;
                AnyHashable.init<A>(_:)();
                uint64_t v65 = sub_100024974((uint64_t)v124, v37);
                sub_10002201C((uint64_t)v124);
                int64_t v104 = v16;
                char v109 = v13;
                if (v65 && (uint64_t v121 = v65, swift_dynamicCast()))
                {
                  unint64_t v66 = v123;
                  uint64_t v119 = v122;
                }
                else
                {
                  unint64_t v66 = 0xE600000000000000;
                }
                char v67 = *(unsigned char *)(v55 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity + *(int *)(v116 + 24));
                unint64_t v68 = v21[104];
                uint64_t v114 = v7;
                uint64_t v69 = v55;
                if (v67)
                {
                  if (v68 != (ClassDescriptor *)-1) {
                    swift_once();
                  }
                  sub_100004964(v7, (uint64_t)qword_1000AA248);
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v70 = Logger.logObject.getter();
                  os_log_type_t v71 = static os_log_type_t.default.getter();
                  int v72 = v71;
                  if (os_log_type_enabled(v70, v71))
                  {
                    uint64_t v73 = swift_slowAlloc();
                    LODWORD(v117) = v72;
                    uint64_t v74 = v69;
                    uint64_t v75 = v73;
                    uint64_t v116 = swift_slowAlloc();
                    v124[0] = v116;
                    *(_DWORD *)uint64_t v75 = 136446722;
                    swift_retain();
                    sub_10002CDDC();
                    uint64_t v77 = v76;
                    unint64_t v79 = v78;
                    uint64_t v113 = v74;
                    swift_release();
                    uint64_t v122 = sub_100017070(v77, v79, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v75 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    uint64_t v122 = sub_100017070(v118, v59, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v75 + 22) = 2082;
                    swift_bridgeObjectRetain();
                    uint64_t v122 = sub_100017070(v119, v66, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v117, "=== %{public}s %{public}s -> %{public}s ===", (uint8_t *)v75, 0x20u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    uint64_t v18 = v105;
                    uint64_t v16 = v104;
                    uint64_t v55 = v113;
                    uint64_t v7 = v114;
                    goto LABEL_62;
                  }
                }
                else
                {
                  if (v68 != (ClassDescriptor *)-1) {
                    swift_once();
                  }
                  sub_100004964(v7, (uint64_t)qword_1000AA248);
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v70 = Logger.logObject.getter();
                  os_log_type_t v80 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v70, v80))
                  {
                    uint64_t v81 = swift_slowAlloc();
                    uint64_t v116 = v59;
                    uint64_t v82 = v55;
                    uint64_t v83 = v81;
                    uint64_t v117 = swift_slowAlloc();
                    v124[0] = v117;
                    *(_DWORD *)uint64_t v83 = 136446722;
                    swift_retain();
                    sub_10002CDDC();
                    uint64_t v85 = v84;
                    unint64_t v87 = v86;
                    swift_release();
                    uint64_t v122 = sub_100017070(v85, v87, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v83 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    uint64_t v122 = sub_100017070(v119, v66, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v83 + 22) = 2082;
                    unint64_t v88 = v116;
                    swift_bridgeObjectRetain();
                    uint64_t v122 = sub_100017070(v118, v88, v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v70, v80, "=== %{public}s %{public}s -> %{public}s ===", (uint8_t *)v83, 0x20u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    uint64_t v18 = v105;
                    uint64_t v16 = v104;
                    uint64_t v7 = v114;
                    uint64_t v55 = v82;
                    goto LABEL_62;
                  }
                }

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_release_n();
                uint64_t v18 = v105;
                uint64_t v16 = v104;
                uint64_t v7 = v114;
                uint64_t v55 = v69;
              }
LABEL_62:
              unint64_t v89 = v55;
              Class v90 = v120;
              uint64_t v91 = sub_100022A40(v120);
              Class isa = Int._bridgeToObjectiveC()().super.super.isa;
              id v93 = [v90 objectForKey:isa];

              if (v93)
              {
                v124[0] = (uint64_t)v93;
                if (swift_dynamicCast() & 1) != 0 && (v122) {
                  sub_10002E624(v91);
                }
              }
              switch(v91)
              {
                case 1:
                case 7:
                  swift_bridgeObjectRelease();
                  os_log_type_t v44 = v120;
                  sub_100012D98((uint64_t)v16, (unint64_t)v18);
                  sub_10004E7B0(v44, (uint64_t)v16, (unint64_t)v18, v89);

                  swift_release();
                  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
                  sub_100046880();
                  goto LABEL_28;
                case 2:
                  sub_100046880();

                  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
                  swift_release();
                  swift_bridgeObjectRelease();
                  return;
                case 3:
                  swift_bridgeObjectRelease();
                  sub_100035624(v89, v120, v16, v18);
                  sub_100046880();

                  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
                  swift_release();
                  return;
                case 4:
                  swift_bridgeObjectRelease();
                  uint64_t v100 = v120;
                  sub_10002257C();
                  sub_100025F44();
                  swift_errorRelease();

                  goto LABEL_77;
                case 5:
                  swift_bridgeObjectRelease();
                  sub_10002E870();
                  goto LABEL_76;
                case 6:
                  uint64_t v101 = sub_100028F7C(v37);
                  swift_bridgeObjectRelease();
                  uint64_t v102 = v120;
                  sub_100037E60(v89, (uint64_t)v120, (uint64_t)v16, (uint64_t)v18, v101);

                  swift_release();
                  swift_bridgeObjectRelease();
                  break;
                default:
                  swift_bridgeObjectRelease();
                  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
                  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  sub_100021CF8(v94, v95, -1010, 0, 0, 0);
                  swift_willThrow();
                  if (qword_1000A1340 != -1) {
                    swift_once();
                  }
                  uint64_t v96 = sub_100004964(v7, (uint64_t)qword_1000AA248);
                  unint64_t v97 = v111;
                  uint64_t v98 = v112;
                  uint64_t v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 16))(v111, v96, v7);
                  __chkstk_darwin(v99);
                  sub_100019968(sub_100038368, 0, (void (*)(void))sub_100013904);
                  (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v7);
                  swift_errorRetain();
                  sub_100025F44();
                  swift_errorRelease();
                  swift_errorRelease();
LABEL_76:

LABEL_77:
                  swift_release();
                  break;
              }
LABEL_79:
              sub_100012DAC((uint64_t)v16, (unint64_t)v18);
              sub_100046880();
              return;
            }
          }
          goto LABEL_23;
        }
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v40) {
          goto LABEL_19;
        }
      }
    }
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!a3) {
    Dictionary.init(dictionaryLiteral:)();
  }
  swift_bridgeObjectRetain();
  v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v114 = v7;
  sub_100004964(v7, (uint64_t)qword_1000AA248);
  uint64_t v23 = v120;
  sub_100012D98((uint64_t)v16, (unint64_t)v18);
  unint64_t v24 = v22.super.isa;
  uint64_t v25 = v23;
  sub_100012D98((uint64_t)v16, (unint64_t)v18);
  uint64_t v26 = v24;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    os_log_t v107 = v27;
    uint64_t v30 = v29;
    uint64_t v106 = (void *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    v124[0] = v108;
    *(_DWORD *)uint64_t v30 = 136446466;
    uint64_t v110 = v4;
    uint64_t v31 = sub_100022B50(v25, (uint64_t)v16, (unint64_t)v18);
    char v109 = v13;
    uint64_t v122 = sub_100017070(v31, v32, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    sub_100012DAC((uint64_t)v16, (unint64_t)v18);

    sub_100012DAC((uint64_t)v16, (unint64_t)v18);
    *(_WORD *)(v30 + 12) = 2114;
    uint64_t v122 = (uint64_t)v26;
    uint64_t v33 = v26;
    uint64_t v34 = v18;
    unint64_t v35 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v106 = v26;

    os_log_t v36 = v107;
    _os_log_impl((void *)&_mh_execute_header, v107, v28, "Received %{public}s, %{public}@", (uint8_t *)v30, 0x16u);
    sub_1000116B8((uint64_t *)&unk_1000A21F0);
    swift_arrayDestroy();
    uint64_t v13 = v35;
    uint64_t v18 = v34;
    uint64_t v5 = v110;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v114;
    uint64_t v21 = &off_1000A1000;
    goto LABEL_10;
  }

  sub_100012DAC((uint64_t)v16, (unint64_t)v18);
  sub_100012DAC((uint64_t)v16, (unint64_t)v18);

  uint64_t v7 = v114;
  uint64_t v21 = &off_1000A1000;
  if (a3) {
    goto LABEL_11;
  }
LABEL_24:
  if (v21[104] != (ClassDescriptor *)-1) {
    swift_once();
  }
  sub_100004964(v7, (uint64_t)qword_1000AA248);
  os_log_type_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Received Malformed Message", v46, 2u);
    swift_slowDealloc();

LABEL_28:
    sub_100012DAC((uint64_t)v16, (unint64_t)v18);
  }
  else
  {

    sub_100012DAC((uint64_t)v16, (unint64_t)v18);
  }
}

void sub_100033968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_100004964(v5, (uint64_t)qword_1000A26C0);
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    __chkstk_darwin(v10);
    *(&v17 - 2) = a1;
    sub_100019968(sub_10004F984, a3, (void (*)(void))sub_100013904);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_errorRelease();
  }
  else
  {
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    sub_100004964(v5, (uint64_t)qword_1000A26C0);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_retain();
      unint64_t v14 = RapportRemoteDisplaySession.description.getter();
      unint64_t v16 = v15;
      swift_release();
      uint64_t v17 = sub_100017070(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Activated %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_100033C98()
{
  uint64_t v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0._object = (void *)0x800000010007FA20;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  v1._countAndFlagsBits = RapportRemoteDisplaySession.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return v4;
}

void sub_100033D20()
{
  sub_10001394C();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SidecarIdentity();
  uint64_t v8 = sub_100051080(v7);
  __chkstk_darwin(v8);
  sub_100051180();
  sub_100013AD0();
  swift_retain();
  uint64_t v9 = swift_bridgeObjectRetain();
  char v10 = sub_1000295D4(v9, v6);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100004964(v11, (uint64_t)qword_1000A26C0);
    sub_1000468D0(v4, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
    sub_100051BAC();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      sub_100013B38();
      v19[0] = sub_10005177C();
      *(_DWORD *)uint64_t v2 = 136446466;
      uint64_t v14 = sub_10005A15C();
      sub_100017070(v14, v15, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100046880();
      *(_WORD *)(v2 + 12) = 2082;
      swift_retain();
      RapportRemoteDisplaySession.description.getter();
      sub_100051A1C();
      uint64_t v16 = swift_release();
      sub_100051A5C(v16, v17, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100013DCC();
      swift_bridgeObjectRelease();
      sub_100051950((void *)&_mh_execute_header, v12, v18, "%{public}s: Canceling %{public}s");
      sub_1000517D4();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {
      sub_100046880();

      sub_100013DCC();
    }
    RapportRemoteDisplaySession.cancel()();
    sub_100031534(v6);
    swift_beginAccess();
    if (sub_100024888(v4, *(void *)(v0 + 80), (void (*)(void))sub_100040760))
    {
      swift_endAccess();
      sub_1000510D4();
      sub_100043964(v4, &unk_1000A2E18, type metadata accessor for RapportRemoteDisplayDevice);
      swift_endAccess();
      swift_release();
      sub_10002B844();
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
  }
  sub_100030EB0();
  sub_100013964();
}

uint64_t sub_10003404C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v3 = swift_retain();
  sub_100044214(v3, a2, sub_1000457D0);
  swift_endAccess();
  sub_1000116B8(&qword_1000A2E90);
  sub_10004FBE8((uint64_t)&unk_1000A2E98);
  return Subject<>.send()();
}

uint64_t sub_100034114(uint64_t a1)
{
  return Subject<>.send()();
}

uint64_t sub_1000341E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = _s7SessionC8IdentityVMa(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = 0;
  uint64_t v10 = *(int *)(v6 + 20);
  uint64_t v11 = v2 + 120;
  while (1)
  {
    uint64_t v12 = arc4random() & 0x7FFFFFFF;
    sub_1000468D0(a1, (uint64_t)v8, (void (*)(void))type metadata accessor for SidecarIdentity);
    *(void *)&v8[*(int *)(v5 + 20)] = v12;
    v8[*(int *)(v5 + 24)] = 0;
    if (v9) {
      sub_100046880();
    }
    uint64_t result = sub_10004DD54((uint64_t)v8, a2, (void (*)(void))_s7SessionC8IdentityVMa);
    if (!*(void *)(a2 + v10)) {
      break;
    }
    swift_beginAccess();
    if (!*(void *)(*(void *)v11 + 16)) {
      return swift_endAccess();
    }
    sub_100040814(a2);
    if ((v14 & 1) == 0) {
      return swift_endAccess();
    }
    swift_endAccess();
    char v9 = 1;
  }
  return result;
}

uint64_t sub_100034344(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_100013F1C();
  sub_10002CDDC();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  return v9;
}

uint64_t sub_1000343C4(uint64_t a1)
{
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  uint64_t v5 = sub_100051080(v4);
  __chkstk_darwin(v5);
  sub_1000139A8();
  uint64_t v6 = type metadata accessor for SidecarIdentity();
  uint64_t v7 = sub_100051080(v6);
  __chkstk_darwin(v7);
  sub_100017C94();
  sub_1000468D0(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v1, (void (*)(void))_s7SessionC8IdentityVMa);
  uint64_t v8 = sub_100051318();
  sub_10004DD54(v8, v9, v10);
  sub_1000510D4();
  sub_100043964(v2, &unk_1000A2EB0, type metadata accessor for Domain);
  swift_endAccess();
  swift_release();
  return sub_100046880();
}

id sub_1000344F8(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = *(void *)(a5 + 48);
  uint64_t v9 = _s7SessionC8IdentityVMa(0);
  sub_1000468D0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v7, (void (*)(void))_s7SessionC8IdentityVMa);
  uint64_t v10 = *(void **)(*(void *)(a5 + 56) + 8 * a2);

  return v10;
}

uint64_t sub_1000345C4(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a5 + 48);
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  sub_1000468D0(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a2, v6, (void (*)(void))_s7SessionC8IdentityVMa);

  return swift_retain();
}

id sub_100034690()
{
  uint64_t v1 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v29 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v29 - v8;
  id result = (id)swift_beginAccess();
  if (!*(void *)(v0[15] + 16))
  {
    id result = (id)swift_beginAccess();
    if (!*(void *)(v0[19] + 16))
    {
      id result = (id)v0[22];
      if (result) {
        id result = [result relayTerminateService];
      }
    }
  }
  uint64_t v11 = (void *)v0[21];
  if (!v11) {
    return result;
  }
  v29[0] = v0;
  uint64_t v12 = v0[15];
  sub_10004DC94(v12, v36);
  uint64_t v13 = v36[0];
  int64_t v35 = v36[3];
  unint64_t v14 = v36[4];
  uint64_t v32 = v36[1];
  int64_t v33 = (unint64_t)(v36[2] + 64) >> 6;
  v29[1] = v12;
  swift_bridgeObjectRetain_n();
  id v30 = v11;
  id result = (id)swift_unknownObjectRetain();
  uint64_t v15 = &qword_1000A2E78;
  uint64_t v34 = "com.apple.sidecar.markupdisplay";
  unint64_t v31 = 0x800000010007DE80;
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v35 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(v13 + 48);
    uint64_t v23 = _s7SessionC8IdentityVMa(0);
    sub_1000468D0(v22 + *(void *)(*(void *)(v23 - 8) + 72) * v17, (uint64_t)v9, (void (*)(void))_s7SessionC8IdentityVMa);
    *(void *)&v9[*(int *)(v1 + 48)] = *(void *)(*(void *)(v13 + 56) + 8 * v17);
    unint64_t v24 = v15;
    sub_10004F8D8((uint64_t)v9, (uint64_t)v7, v15);
    uint64_t v25 = *(int *)(v1 + 48);
    sub_1000468D0((uint64_t)v7, (uint64_t)v4, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v26 = *(void *)&v7[v25];
    *(void *)&v4[v25] = v26;
    uint64_t v27 = (void *)(v26 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    if (*v27 == 0xD000000000000019 && v27[1] == v31)
    {
      swift_retain();
      sub_100046880();
      sub_1000131C8((uint64_t)v7, &qword_1000A2E78);
LABEL_32:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (id)swift_release();
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_retain();
    sub_100046880();
    uint64_t v15 = v24;
    id result = (id)sub_1000131C8((uint64_t)v7, v24);
    if (v28) {
      goto LABEL_32;
    }
  }
  int64_t v18 = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
    return result;
  }
  if (v18 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v18);
  int64_t v20 = v35 + 1;
  if (v19) {
    goto LABEL_26;
  }
  int64_t v20 = v35 + 2;
  if (v35 + 2 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_26;
  }
  int64_t v20 = v35 + 3;
  if (v35 + 3 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_26;
  }
  int64_t v20 = v35 + 4;
  if (v35 + 4 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_26;
  }
  int64_t v20 = v35 + 5;
  if (v35 + 5 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19) {
    goto LABEL_26;
  }
  int64_t v20 = v35 + 6;
  if (v35 + 6 >= v33) {
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v32 + 8 * v20);
  if (v19)
  {
LABEL_26:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    int64_t v35 = v20;
    goto LABEL_27;
  }
  int64_t v21 = v35 + 7;
  while (v21 < v33)
  {
    unint64_t v19 = *(void *)(v32 + 8 * v21++);
    if (v19)
    {
      int64_t v20 = v21 - 1;
      goto LABEL_26;
    }
  }
LABEL_33:
  swift_bridgeObjectRelease();
  swift_release();
  [v30 invalidate];
  swift_unknownObjectRelease();
  *(void *)(v29[0] + 168) = 0;
  return (id)swift_unknownObjectRelease();
}

uint64_t sub_100034ADC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    sub_100025F44();
    swift_release();
  }
LABEL_9:

  return swift_bridgeObjectRelease();
}

uint64_t sub_100034BD8(void *a1)
{
  swift_beginAccess();
  id v2 = a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_100024CD8(v3, v2);
  swift_bridgeObjectRelease();
  sub_100034ADC(v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_100034C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(v3 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v8 = sub_100025484(v7, a1, a2, a3);
  swift_bridgeObjectRelease();
  sub_100034ADC(v8);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v9 != 0;
}

void sub_100034D70(void *a1)
{
  swift_beginAccess();
  sub_10004B428(&v2, a1, type metadata accessor for Client, &unk_1000A3030, type metadata accessor for Client, type metadata accessor for Client);
  swift_endAccess();
}

void sub_100034E04(uint64_t a1, const char *a2)
{
  if (qword_1000A1330 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100004964(v3, (uint64_t)qword_1000A26C0);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    sub_100004A0C();
  }
}

#error "1000351E0: call analysis failed (funcsize=420)"

void sub_1000355F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

id sub_100035624(unint64_t a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v6 = v5;
  unint64_t v7 = (unint64_t)v4;
  int64_t v134 = a4;
  char v135 = a2;
  unint64_t v136 = a3;
  uint64_t v125 = _s7SessionC8IdentityVMa(0);
  uint64_t v133 = *(void *)(v125 - 8);
  uint64_t v9 = __chkstk_darwin(v125);
  uint64_t v124 = (uint64_t)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v120 - v11;
  uint64_t v132 = sub_1000116B8(&qword_1000A2E78);
  uint64_t v13 = __chkstk_darwin(v132);
  uint64_t v131 = ((char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v130 = (uint64_t)&v120 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v129 = (uint64_t)&v120 - v18;
  __chkstk_darwin(v17);
  uint64_t v128 = (uint64_t)&v120 - v19;
  unint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  unint64_t v137 = *(uint8_t **)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  uint64_t v21 = qword_1000A1340;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100004964(v22, (uint64_t)qword_1000AA248);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v127 = v23;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = &unk_1000AA000;
  Swift::String v126 = (uint64_t *)v12;
  if (v26)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v123 = v6;
    uint64_t v122 = v29;
    v140[0] = v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    swift_retain();
    sub_10002CDDC();
    uint64_t v31 = v30;
    unint64_t v32 = v20;
    int64_t v33 = (void *)v7;
    unint64_t v35 = v34;
    swift_release();
    uint64_t v138 = sub_100017070(v31, v35, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unint64_t v7 = (unint64_t)v33;
    unint64_t v20 = v32;
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v138 = sub_100017070((uint64_t)v137, v32, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: Connecting '%{public}s'", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    uint64_t v6 = v123;
    swift_slowDealloc();
    uint64_t v27 = (void *)&unk_1000AA000;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  os_log_t v36 = v134;
  uint64_t v37 = (uint64_t)v135;
  uint64_t v38 = (uint64_t)v136;
  if (qword_1000A1368 != -1) {
    swift_once();
  }
  uint64_t v39 = (uint64_t)v137;
  if ((sub_100029E1C((uint64_t)v137, v20, qword_1000AA2B8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v119 = 1383;
    LOBYTE(v118) = 2;
    uint64_t v42 = -103;
    goto LABEL_12;
  }
  if (*(void *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client))
  {
    swift_bridgeObjectRelease();
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v119 = 1388;
    LOBYTE(v118) = 2;
    uint64_t v42 = -100;
LABEL_12:
    sub_100021CF8(v40, v41, v42, 0, 0, 0);
    return (id)swift_willThrow();
  }
  if (v39 == 0xD000000000000019 && v20 == 0x800000010007DE80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v44 = swift_beginAccess();
    __chkstk_darwin(v44);
    *(&v120 - 4) = a1;
    *(&v120 - 3) = v45;
    unint64_t v118 = v20;
    uint64_t v46 = swift_bridgeObjectRetain();
    uint64_t v47 = sub_10004BDC0(v46, (uint64_t (*)(char *, uint64_t))sub_10004ED40, &v120 - 6);
    swift_bridgeObjectRelease();
    if (v47[2])
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      os_log_t v36 = Logger.logObject.getter();
      uint64_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, (os_log_type_t)v6))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        v140[0] = v127;
        *(_DWORD *)uint64_t v39 = 136446722;
        unint64_t v136 = v47;
        swift_retain();
        sub_10002CDDC();
        uint64_t v49 = v48;
        unint64_t v51 = v50;
        swift_release();
        unint64_t v141 = sub_100017070(v49, v51, v140);
        unint64_t v7 = (unint64_t)&v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2082;
        swift_bridgeObjectRetain();
        unint64_t v141 = sub_100017070((uint64_t)v137, v20, v140);
        Swift::String v126 = &v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v39 + 22) = 2082;
        uint64_t v52 = (uint64_t)v136;
        uint64_t v27 = (void *)v136[2];
        if (v27)
        {
          LODWORD(v123) = v6;
          uint64_t v124 = v39;
          uint64_t v125 = (uint64_t)v36;
          unint64_t v141 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v53 = (uint64_t)&v141;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v54 = sub_10004DE28(v52);
          if ((v54 & 0x8000000000000000) == 0)
          {
            a1 = v54;
            if (v54 < 1 << *(unsigned char *)(v52 + 32))
            {
              os_log_t v36 = (v52 + 64);
              int64_t v134 = (v52 + 64);
              while (1)
              {
                unint64_t v7 = a1 >> 6;
                uint64_t isa = (uint64_t)v36[a1 >> 6].isa;
                uint64_t v6 = 1 << a1;
                if ((isa & (1 << a1)) == 0) {
                  break;
                }
                uint64_t isa = *(unsigned int *)(v52 + 36);
                if (v55 != isa) {
                  goto LABEL_66;
                }
                unint64_t v137 = (uint8_t *)v55;
                char v135 = v27;
                uint64_t v57 = v132;
                uint64_t v58 = *(int *)(v132 + 48);
                uint64_t v59 = *(void *)(v52 + 48) + *(void *)(v133 + 72) * a1;
                uint64_t v60 = v128;
                sub_1000468D0(v59, v128, (void (*)(void))_s7SessionC8IdentityVMa);
                uint64_t v61 = *(void *)(v136[7] + 8 * a1);
                *(void *)(v60 + v58) = v61;
                uint64_t v62 = v129;
                sub_1000468D0(v60, v129, (void (*)(void))_s7SessionC8IdentityVMa);
                *(void *)(v62 + *(int *)(v57 + 48)) = v61;
                uint64_t v63 = v62;
                uint64_t v64 = v130;
                sub_10004F8D8(v63, v130, &qword_1000A2E78);
                swift_retain_n();
                uint64_t v65 = v60;
                uint64_t v52 = (uint64_t)v136;
                sub_1000131C8(v65, &qword_1000A2E78);
                uint64_t v66 = *(int *)(v57 + 48);
                os_log_t v36 = v131;
                sub_1000468D0(v64, (uint64_t)v131, (void (*)(void))_s7SessionC8IdentityVMa);
                uint64_t v39 = *(void *)(v64 + v66);
                *(Class *)((char *)&v36->isa + v66) = (Class)v39;
                swift_retain();
                sub_100046880();
                sub_1000131C8(v64, &qword_1000A2E78);
                uint64_t v53 = (uint64_t)&v141;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                unint64_t v20 = *(void *)(v141 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                uint64_t isa = -1 << *(unsigned char *)(v52 + 32);
                if ((uint64_t)a1 >= -isa) {
                  goto LABEL_67;
                }
                os_log_t v36 = v134;
                if (((uint64_t)v134[v7].isa & v6) == 0) {
                  goto LABEL_68;
                }
                if (v137 != *(_DWORD *)(v52 + 36)) {
                  goto LABEL_69;
                }
                uint64_t v67 = _HashTable.occupiedBucket(after:)();
                uint64_t v27 = (void *)((char *)v135 - 1);
                if (v135 == (void *)1)
                {
                  uint64_t v39 = v124;
                  os_log_t v36 = v125;
                  LOBYTE(v6) = v123;
                  goto LABEL_54;
                }
                a1 = v67;
                if ((v67 & 0x8000000000000000) == 0)
                {
                  uint64_t v55 = *(unsigned int *)(v52 + 36);
                  if (v67 < 1 << *(unsigned char *)(v52 + 32)) {
                    continue;
                  }
                }
                goto LABEL_30;
              }
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
              goto LABEL_70;
            }
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_54:
        type metadata accessor for Relay.Session(0);
        uint64_t v109 = Array.description.getter();
        unint64_t v111 = v110;
        swift_bridgeObjectRelease();
        unint64_t v141 = sub_100017070(v109, v111, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v6, "%{public}s: Existing Sessions for %{public}s: %{public}s", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v119 = 1401;
      LOBYTE(v118) = 2;
      uint64_t v42 = -105;
      goto LABEL_12;
    }
LABEL_31:
    swift_release();
    uint64_t v37 = (uint64_t)v135;
    uint64_t v38 = (uint64_t)v136;
    uint64_t v39 = (uint64_t)v137;
  }
  uint64_t v68 = sub_100022AD4();
  if (v69)
  {
    uint64_t v68 = (uint64_t)sub_100036A6C(v37, v38, (unint64_t)v36);
    if (v70)
    {
LABEL_40:
      swift_beginAccess();
      uint64_t v88 = *(void *)(v7 + 160);
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_1000249B8(v39, v20, v88);
      swift_bridgeObjectRelease();
      if (!v53)
      {
        swift_endAccess();
LABEL_78:
        sub_100036C44(v39, v20);
        return (id)swift_bridgeObjectRelease();
      }
      unint64_t v136 = (void *)(v7 + 160);
      unint64_t v141 = v53;
      swift_endAccess();
      uint64_t isa = v53 & 0xFFFFFFFFFFFFFF8;
      os_log_t v36 = ((unint64_t)v53 >> 62);
      if (!((unint64_t)v53 >> 62))
      {
        if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_77:
          swift_bridgeObjectRelease();
          goto LABEL_78;
        }
        goto LABEL_43;
      }
LABEL_70:
      if (v53 < 0) {
        uint64_t v27 = (void *)v53;
      }
      else {
        uint64_t v27 = (void *)isa;
      }
      swift_bridgeObjectRetain();
      uint64_t v114 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v114) {
        goto LABEL_77;
      }
      swift_bridgeObjectRetain();
      uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
      id result = (id)swift_bridgeObjectRelease();
      if (!v115)
      {
LABEL_87:
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v39 = (uint64_t)v137;
      if (!v116)
      {
        __break(1u);
        goto LABEL_77;
      }
LABEL_43:
      if ((v53 & 0xC000000000000001) != 0)
      {
        id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        Class v90 = result;
        if (v36)
        {
          swift_bridgeObjectRetain();
          uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
          id result = (id)swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)v137;
          goto LABEL_47;
        }
        uint64_t v89 = v53 & 0xFFFFFFFFFFFFFF8;
        uint64_t v39 = (uint64_t)v137;
      }
      else
      {
        uint64_t v89 = v53 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_83;
        }
        id result = *(id *)(v53 + 32);
        Class v90 = result;
      }
      uint64_t v91 = *(void *)(v89 + 16);
LABEL_47:
      unint64_t v121 = v7;
      if (v91)
      {
        sub_10004DEA8(0, 1);
        swift_retain_n();
        uint64_t v27 = v90;
        Swift::String v92 = Logger.logObject.getter();
        os_log_type_t v93 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v92, v93))
        {
          uint64_t v94 = swift_slowAlloc();
          uint64_t v95 = swift_slowAlloc();
          uint64_t v123 = v6;
          char v135 = (void *)v95;
          v140[0] = v95;
          *(_DWORD *)uint64_t v94 = 136446466;
          swift_retain();
          sub_10002CDDC();
          uint64_t v97 = v96;
          unint64_t v98 = v20;
          unint64_t v100 = v99;
          swift_release();
          uint64_t v139 = sub_100017070(v97, v100, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          unint64_t v20 = v98;
          swift_bridgeObjectRelease();
          *(_WORD *)(v94 + 12) = 1024;
          int v101 = *(_DWORD *)((char *)v27 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);

          LODWORD(v139) = v101;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v92, v93, "%{public}s: Connecting to Pending Service Provider PID %d", (uint8_t *)v94, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v39 = (uint64_t)v137;
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        sub_100036B98(a1, v27);
        uint64_t v53 = v141;
        if (!(v141 >> 62))
        {
          if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_64:
            swift_beginAccess();
            sub_100044270(v53, v39, v20, sub_1000463D0);
            swift_endAccess();

            return (id)swift_bridgeObjectRelease();
          }
LABEL_84:
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_100043E58(v39, v20, &qword_1000A2EE0, &qword_1000A2EE8);
          swift_endAccess();
          swift_bridgeObjectRelease();

          return (id)swift_bridgeObjectRelease();
        }
LABEL_83:
        swift_bridgeObjectRetain();
        uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v117) {
          goto LABEL_64;
        }
        goto LABEL_84;
      }
      __break(1u);
      goto LABEL_87;
    }
  }
  uint64_t v71 = v68;
  uint64_t v27 = (void *)(a1 + v27[76]);
  uint64_t v72 = v124;
  sub_1000468D0((uint64_t)v27, v124, (void (*)(void))_s7SessionC8IdentityVMa);
  uint64_t v73 = (uint64_t)v126;
  sub_10004DD54(v72, (uint64_t)v126, (void (*)(void))type metadata accessor for SidecarIdentity);
  uint64_t v74 = v125;
  *(void *)(v73 + *(int *)(v125 + 20)) = v71;
  *(unsigned char *)(v73 + *(int *)(v74 + 24)) = 1;
  swift_beginAccess();
  uint64_t v75 = (unsigned char *)sub_100043870(v73, &qword_1000A2ED8, type metadata accessor for ServiceProvider);
  swift_endAccess();
  if (!v75)
  {
    sub_100046880();
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  char v76 = v75[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect];
  swift_retain();
  if (v76)
  {
    uint64_t v77 = v75;
    swift_retain();
    uint64_t v75 = v77;
    unint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      unint64_t v121 = v7;
      uint64_t v81 = v80;
      uint64_t v82 = swift_slowAlloc();
      uint64_t v123 = v6;
      v140[0] = v82;
      *(_DWORD *)uint64_t v81 = 136446466;
      swift_retain();
      sub_10002CDDC();
      uint64_t v84 = v83;
      unint64_t v86 = v85;
      swift_release();
      unint64_t v141 = sub_100017070(v84, v86, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v81 + 12) = 1024;
      int v87 = *(_DWORD *)&v75[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

      LODWORD(v141) = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v78, v79, "%{public}s: Reconnecting to Service Provider PID %d", (uint8_t *)v81, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    sub_100036B98(a1, v75);
  }
  else
  {
    swift_retain();
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      int64_t v104 = (uint8_t *)swift_slowAlloc();
      v140[0] = swift_slowAlloc();
      *(_DWORD *)int64_t v104 = 136446210;
      unint64_t v137 = v104 + 4;
      swift_retain();
      sub_10002CDDC();
      uint64_t v106 = v105;
      unint64_t v108 = v107;
      swift_release();
      unint64_t v141 = sub_100017070(v106, v108, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "%{public}s: Canceling Reconnect to Closed Service Provider", v104, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v119 = 1432;
    LOBYTE(v118) = 2;
    sub_100021CF8(v112, v113, 3072, 0, 0, 0);
    swift_willThrow();
  }

  return (id)sub_100046880();
}

uint64_t sub_100036A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  if (v5 == a4 && v6 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id sub_100036A6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15) {
    return 0;
  }
  sub_1000128FC(a2, a3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v6 = OPACKDecodeData();

  if (!v6)
  {
    sub_100012DAC(a2, a3);
    return 0;
  }
  self;
  unint64_t v7 = (void *)swift_dynamicCastObjCClass();
  if (!v7)
  {
    sub_100012DAC(a2, a3);
    swift_unknownObjectRelease();
    return 0;
  }
  id v9 = [v7 integerValue];
  swift_unknownObjectRelease();
  sub_100012DAC(a2, a3);
  return v9;
}

uint64_t sub_100036B98(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
  swift_beginAccess();
  id v4 = a2;
  sub_100044214(v4, v3, sub_100046240);
  swift_endAccess();
  sub_10002E9BC(v4);
  return sub_1000370F0((uint64_t *)v4);
}

void sub_100036C44(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 extensionForIdentifier:v7];

  if (v8)
  {
    id v9 = *(void **)(v3 + 176);
    if (v9)
    {
      uint64_t v10 = qword_1000A1340;
      id v11 = v9;
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100004964(v12, (uint64_t)qword_1000AA248);
      id v13 = v11;
      swift_bridgeObjectRetain_n();
      uint64_t v14 = (char *)v13;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v28 = v3;
        uint64_t v17 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_100017070(a1, a2, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v17 + 12) = 1024;
        int v18 = *(_DWORD *)&v14[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

        LODWORD(v30) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Requesting Service Provider '%{public}s' from Service Presenter PID %d", (uint8_t *)v17, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v3 = v28;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (!*(void *)(v3 + 168)
        && (a1 == 0xD000000000000019 && a2 == 0x800000010007DE80
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        id v21 = [objc_allocWithZone((Class)SBSLockScreenService) init];
        NSString v22 = String._bridgeToObjectiveC()();
        uint64_t v23 = v14;
        id v24 = [v21 preventSpuriousScreenUndimWithReason:v22];

        *(void *)(v3 + 168) = v24;
        uint64_t v14 = v23;
        swift_unknownObjectRelease();
        [v21 invalidate];
      }
      os_log_type_t v25 = (void *)swift_allocObject();
      uint64_t v25[2] = v3;
      uint64_t v25[3] = v14;
      v25[4] = a1;
      v25[5] = a2;
      aBlock[4] = (uint64_t)sub_10004ED94;
      aBlock[5] = (uint64_t)v25;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10002451C;
      aBlock[3] = (uint64_t)&unk_100097138;
      BOOL v26 = _Block_copy(aBlock);
      uint64_t v27 = v14;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v27 relayPresenterStartServiceExtension:v8 completion:v26];
      _Block_release(v26);
    }
    else
    {

      type metadata accessor for ServicePresenter();
      sub_1000532EC();
    }
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100021CF8(v19, v20, -103, 0, 0, 0);
    swift_willThrow();
  }
}

uint64_t sub_1000370F0(uint64_t *a1)
{
  uint64_t v107 = _s7SessionC8IdentityVMa(0);
  uint64_t v112 = *(void *)(v107 - 8);
  uint64_t v3 = __chkstk_darwin(v107);
  uint64_t v111 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t)&v93 - v5;
  uint64_t v7 = sub_1000116B8(&qword_1000A2EF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v93 - v11;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    goto LABEL_92;
  }
LABEL_2:
  id v13 = &_swiftEmptySetSingleton;
LABEL_3:
  uint64_t v117 = (uint64_t)v13;
  uint64_t v109 = v1 + 19;
  swift_beginAccess();
  Class isa = v1[19].isa;
  uint64_t v15 = *((void *)isa + 8);
  uint64_t v95 = (char *)isa + 64;
  uint64_t v16 = 1 << *((unsigned char *)isa + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v19 = (uint64_t *)((char *)a1 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
  unint64_t v108 = v1 + 15;
  int64_t v104 = (unint64_t)(v16 + 63) >> 6;
  int64_t v93 = v104 - 1;
  uint64_t v20 = swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v110 = v20;
  uint64_t v94 = v20 + 104;
  *(void *)&long long v22 = 136446466;
  long long v97 = v22;
  uint64_t v96 = (char *)&type metadata for Any + 8;
  uint64_t v106 = v12;
  uint64_t v105 = v19;
  unint64_t v99 = a1;
  uint64_t v98 = v6;
  if (v18)
  {
LABEL_6:
    unint64_t v113 = v21;
    *(void *)&long long v114 = (v18 - 1) & v18;
    unint64_t v23 = __clz(__rbit64(v18)) | (v21 << 6);
LABEL_7:
    uint64_t v24 = v110;
    sub_1000468D0(*(void *)(v110 + 48) + *(void *)(v112 + 72) * v23, v10, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v1 = *(NSObject **)(v24 + 56);
    uint64_t v25 = sub_1000116B8(&qword_1000A2EF8);
    Class v26 = v1[v23].isa;
    *(void *)(v10 + *(int *)(v25 + 48)) = v26;
    sub_100012E34(v10, 0, 1, v25);
    uint64_t v27 = v26;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v28 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_2;
      }
      sub_10004CBE4((unint64_t)_swiftEmptyArrayStorage);
      goto LABEL_3;
    }
    if (v28 >= v104)
    {
      unint64_t v30 = v21;
    }
    else
    {
      unint64_t v29 = *(void *)&v95[8 * v28];
      if (v29) {
        goto LABEL_11;
      }
      unint64_t v30 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v104)
      {
        unint64_t v29 = *(void *)&v95[8 * v21 + 16];
        if (v29)
        {
          int64_t v28 = v21 + 2;
LABEL_11:
          unint64_t v113 = v28;
          *(void *)&long long v114 = (v29 - 1) & v29;
          unint64_t v23 = __clz(__rbit64(v29)) + (v28 << 6);
          goto LABEL_7;
        }
        unint64_t v30 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v104)
        {
          unint64_t v29 = *(void *)&v95[8 * v21 + 24];
          if (v29)
          {
            int64_t v28 = v21 + 3;
            goto LABEL_11;
          }
          int64_t v28 = v21 + 4;
          unint64_t v30 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v104)
          {
            unint64_t v29 = *(void *)&v95[8 * v28];
            if (v29) {
              goto LABEL_11;
            }
            while ((uint64_t)(v21 + 5) < v104)
            {
              unint64_t v29 = *(void *)(v94 + 8 * v21++);
              if (v29)
              {
                int64_t v28 = v21 + 4;
                goto LABEL_11;
              }
            }
            unint64_t v30 = v93;
          }
        }
      }
    }
    uint64_t v31 = sub_1000116B8(&qword_1000A2EF8);
    sub_100012E34(v10, 1, 1, v31);
    unint64_t v113 = v30;
    *(void *)&long long v114 = 0;
LABEL_14:
    sub_10004F8D8(v10, (uint64_t)v12, &qword_1000A2EF0);
    uint64_t v32 = sub_1000116B8(&qword_1000A2EF8);
    if (sub_100012E5C((uint64_t)v12, 1, v32) == 1) {
      break;
    }
    int64_t v33 = *(char **)&v12[*(int *)(v32 + 48)];
    sub_10004DD54((uint64_t)v12, v6, (void (*)(void))_s7SessionC8IdentityVMa);
    unint64_t v34 = (uint64_t *)v33;
    BOOL v35 = *(void *)&v33[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier] == *v19
       && *(void *)&v33[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8] == v19[1];
    if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      os_log_t v36 = (NSObject **)v108;
      swift_beginAccess();
      uint64_t v1 = *v36;
      if (*v36)[2].isa && (sub_100040814(v6), (v37))
      {
        swift_endAccess();
        uint64_t v38 = v34;
      }
      else
      {
        swift_endAccess();
        uint64_t v38 = v34;
        if (qword_1000A1340 != -1) {
          swift_once();
        }
        uint64_t v39 = type metadata accessor for Logger();
        sub_100004964(v39, (uint64_t)qword_1000AA248);
        sub_1000468D0(v6, v111, (void (*)(void))_s7SessionC8IdentityVMa);
        uint64_t v40 = v34;
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        int v43 = v42;
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v103 = swift_slowAlloc();
          uint64_t v116 = v103;
          *(_DWORD *)uint64_t v44 = v97;
          int v101 = v40;
          uint64_t v45 = v111;
          int v102 = v43;
          Class v46 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v47 = sub_100012954(v46);

          uint64_t v118 = 542327881;
          unint64_t v119 = 0xE400000000000000;
          uint64_t v115 = v47;
          sub_1000126B0();
          v48._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          os_log_t v100 = v41;
          uint64_t v49 = v10;
          uint64_t v50 = v118;
          unint64_t v51 = v119;
          if (*(unsigned char *)(v45 + *(int *)(v107 + 24))) {
            uint64_t v52 = 0x65746F6D6572;
          }
          else {
            uint64_t v52 = 0x6C61636F6CLL;
          }
          if (*(unsigned char *)(v45 + *(int *)(v107 + 24))) {
            uint64_t v53 = (void *)0xE600000000000000;
          }
          else {
            uint64_t v53 = (void *)0xE500000000000000;
          }
          uint64_t v118 = *(void *)(v45 + *(int *)(v107 + 20));
          sub_1000129C4();
          uint64_t v54 = String.init<A>(_:radix:uppercase:)();
          unint64_t v56 = v55;
          uint64_t v118 = v50;
          unint64_t v119 = v51;
          uint64_t v10 = v49;
          v57._countAndFlagsBits = 58;
          v57._object = (void *)0xE100000000000000;
          String.append(_:)(v57);
          v58._countAndFlagsBits = v52;
          a1 = v99;
          v58._object = v53;
          String.append(_:)(v58);
          swift_bridgeObjectRelease();
          v59._countAndFlagsBits = 58;
          v59._object = (void *)0xE100000000000000;
          String.append(_:)(v59);
          v60._countAndFlagsBits = v54;
          uint64_t v38 = v34;
          v60._object = v56;
          String.append(_:)(v60);
          uint64_t v6 = v98;
          swift_bridgeObjectRelease();
          *(void *)(v44 + 4) = sub_100017070(v118, v119, (uint64_t *)&v116);
          swift_bridgeObjectRelease();
          sub_100046880();
          *(_WORD *)(v44 + 12) = 1024;
          id v61 = v101;
          int v62 = *(_DWORD *)&v101[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];

          *(_DWORD *)(v44 + 14) = v62;
          os_log_t v63 = v100;
          _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v102, "%{public}s: Removing Service Provider PID %d", (uint8_t *)v44, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100046880();
        }
        uint64_t v64 = (NSObject **)v109;
        swift_beginAccess();
        uint64_t v1 = *v64;
        swift_bridgeObjectRetain();
        unint64_t v65 = sub_100040814(v6);
        char v67 = v66;
        swift_bridgeObjectRelease();
        uint64_t v68 = 0;
        if (v67)
        {
          char v69 = (uint64_t *)v109;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v116 = *v69;
          uint64_t v71 = (uint64_t)v116;
          *char v69 = 0x8000000000000000;
          Swift::Int v72 = *(void *)(v71 + 24);
          sub_1000116B8(&qword_1000A2ED8);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v72);
          uint64_t v1 = v116;
          sub_100046880();
          uint64_t v68 = (void *)*((void *)v1[7].isa + v65);
          type metadata accessor for ServiceProvider();
          sub_10003B620((uint64_t)&unk_1000A2EA8);
          _NativeDictionary._delete(at:)();
          *char v69 = (uint64_t)v1;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();

        uint64_t v12 = v106;
        uint64_t v19 = v105;
      }
      if (v38 == a1)
      {
        sub_100046880();
      }
      else
      {
        uint64_t v1 = &v117;
        sub_10004B428(&v118, v38, type metadata accessor for ServiceProvider, &qword_1000A2F10, type metadata accessor for ServiceProvider, type metadata accessor for ServiceProvider);

        sub_100046880();
      }
    }
    else
    {
      sub_100046880();
    }
    unint64_t v21 = v113;
    unint64_t v18 = v114;
    if ((void)v114) {
      goto LABEL_6;
    }
  }
  swift_release();
  uint64_t v74 = v117;
  if ((v117 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    uint64_t v1 = type metadata accessor for ServiceProvider();
    sub_10003B620((uint64_t)&unk_1000A2F00);
    Set.Iterator.init(_cocoa:)();
    uint64_t v74 = v118;
    unint64_t v113 = v119;
    uint64_t v75 = v120;
    uint64_t v6 = v121;
    unint64_t v76 = v122;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v77 = -1 << *(unsigned char *)(v117 + 32);
    uint64_t v78 = *(void *)(v117 + 56);
    unint64_t v113 = v117 + 56;
    uint64_t v75 = ~v77;
    uint64_t v79 = -v77;
    if (v79 < 64) {
      uint64_t v80 = ~(-1 << v79);
    }
    else {
      uint64_t v80 = -1;
    }
    unint64_t v76 = v80 & v78;
  }
  uint64_t v112 = v74 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v110 = v75;
  int64_t v81 = (unint64_t)(v75 + 64) >> 6;
  a1 = qword_1000AA248;
  *(void *)&long long v73 = 67109120;
  long long v114 = v73;
  uint64_t v111 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  if (v74 < 0)
  {
    while (1)
    {
      uint64_t v83 = __CocoaSet.Iterator.next()();
      if (!v83) {
        break;
      }
      uint64_t v115 = v83;
      type metadata accessor for ServiceProvider();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v84 = v116;
      swift_unknownObjectRelease();
      uint64_t v10 = v6;
      uint64_t v12 = (char *)v76;
      if (!v84) {
        break;
      }
LABEL_82:
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      uint64_t v88 = type metadata accessor for Logger();
      sub_100004964(v88, (uint64_t)qword_1000AA248);
      uint64_t v89 = v84;
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v1, v90))
      {
        uint64_t v91 = swift_slowAlloc();
        *(_DWORD *)uint64_t v91 = v114;
        *(_DWORD *)(v91 + 4) = *(_DWORD *)((char *)&v89->isa + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);

        _os_log_impl((void *)&_mh_execute_header, v1, v90, "Terminating Service Provider PID %d", (uint8_t *)v91, 8u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v1 = v89;
      }

      [v89 relayTerminateService];
      uint64_t v6 = v10;
      unint64_t v76 = (unint64_t)v12;
      if ((v74 & 0x8000000000000000) == 0) {
        goto LABEL_62;
      }
    }
    return sub_10004EE20();
  }
LABEL_62:
  if (v76)
  {
    uint64_t v12 = (char *)((v76 - 1) & v76);
    unint64_t v82 = __clz(__rbit64(v76)) | (v6 << 6);
    uint64_t v10 = v6;
LABEL_81:
    uint64_t v84 = *(id *)(*(void *)(v74 + 48) + 8 * v82);
    if (v84) {
      goto LABEL_82;
    }
    return sub_10004EE20();
  }
  int64_t v85 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_91;
  }
  if (v85 < v81)
  {
    unint64_t v86 = *(void *)(v113 + 8 * v85);
    uint64_t v10 = v6 + 1;
    if (v86) {
      goto LABEL_80;
    }
    uint64_t v10 = v6 + 2;
    if (v6 + 2 >= v81) {
      return sub_10004EE20();
    }
    unint64_t v86 = *(void *)(v113 + 8 * v10);
    if (v86) {
      goto LABEL_80;
    }
    uint64_t v10 = v6 + 3;
    if (v6 + 3 >= v81) {
      return sub_10004EE20();
    }
    unint64_t v86 = *(void *)(v113 + 8 * v10);
    if (v86) {
      goto LABEL_80;
    }
    uint64_t v10 = v6 + 4;
    if (v6 + 4 >= v81) {
      return sub_10004EE20();
    }
    unint64_t v86 = *(void *)(v113 + 8 * v10);
    if (v86)
    {
LABEL_80:
      uint64_t v12 = (char *)((v86 - 1) & v86);
      unint64_t v82 = __clz(__rbit64(v86)) + (v10 << 6);
      goto LABEL_81;
    }
    int64_t v87 = v6 + 5;
    while (v87 < v81)
    {
      unint64_t v86 = *(void *)(v113 + 8 * v87++);
      if (v86)
      {
        uint64_t v10 = v87 - 1;
        goto LABEL_80;
      }
    }
  }
  return sub_10004EE20();
}

uint64_t sub_100037E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000468D0(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, (uint64_t)v14, (void (*)(void))_s7SessionC8IdentityVMa);
  sub_10004DD54((uint64_t)v14, (uint64_t)v17, (void (*)(void))type metadata accessor for SidecarIdentity);
  swift_beginAccess();
  if (!sub_100024888((uint64_t)v17, *(void *)(v5 + 136), (void (*)(void))sub_100040760))
  {
    swift_endAccess();
    return sub_100046880();
  }
  swift_endAccess();
  if (Domain.isBound.getter())
  {
    sub_100046880();
    return swift_release();
  }
  if (!a5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_14;
  }
  v23[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23[2] = v19;
  AnyHashable.init<A>(_:)();
  sub_1000246C8((uint64_t)v24, a5, &v25);
  sub_10002201C((uint64_t)v24);
  if (!*((void *)&v26 + 1))
  {
LABEL_14:
    swift_release();
    sub_1000131C8((uint64_t)&v25, &qword_1000A2F20);
    return sub_100046880();
  }
  if (!swift_dynamicCast())
  {
    swift_release();
    return sub_100046880();
  }
  Domain.bind(peer:)(v24[0]);
  if (!v20)
  {
    sub_100046880();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100004964(v8, (uint64_t)qword_1000AA248);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  __chkstk_darwin(v22);
  v23[-2] = v20;
  sub_100019968((uint64_t (*)(void))sub_100038284, 0, (void (*)(void))sub_100013904);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100046880();
  return swift_errorRelease();
}

unint64_t sub_100038284()
{
  return 0xD000000000000017;
}

uint64_t sub_1000382A0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  uint64_t v2 = sub_100024974((uint64_t)v5, a1);
  sub_10002201C((uint64_t)v5);
  if (v2 && (swift_dynamicCast() & 1) != 0) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100038368()
{
  return 0x2065766965636552;
}

void sub_10003838C()
{
  sub_10001394C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v5);
  sub_100051198();
  if (v1)
  {
    swift_errorRetain();
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    sub_100004964(v4, (uint64_t)qword_1000A26C0);
    sub_100051C88();
    sub_100051210();
    uint64_t v7 = v6();
    __chkstk_darwin(v7);
    sub_10005159C();
    *(void *)(v8 - 16) = v1;
    sub_100019968((uint64_t (*)(void))sub_10004AF34, v3, (void (*)(void))sub_100013904);
    uint64_t v9 = sub_100051658();
    v10(v9);
    swift_errorRelease();
  }
  else
  {
    if (qword_1000A1330 != -1) {
      swift_once();
    }
    sub_100004964(v4, (uint64_t)qword_1000A26C0);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)sub_100051A00();
      uint64_t v21 = sub_100013E10();
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_retain();
      unint64_t v14 = RapportRemoteDisplaySession.description.getter();
      unint64_t v16 = v15;
      swift_release();
      uint64_t v17 = sub_100017070(v14, v16, &v21);
      sub_100013F08(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10005171C();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s Ended", v13, 0xCu);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      sub_10005171C();
    }
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    sub_100051304();
    sub_100021ED4(v18, v19, v20);
  }
  swift_errorRetain();
  swift_errorRetain();
  sub_100034C70(v3, 0, 0);
  swift_errorRelease();
  swift_errorRelease();
  sub_100013964();
}

uint64_t sub_10003869C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_100004964(v9, (uint64_t)qword_1000AA248);
    uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
    uint64_t v16 = __chkstk_darwin(v15);
    *(&v19 - 4) = a3;
    *(&v19 - 3) = a4;
    *(&v19 - 2) = a5;
    __chkstk_darwin(v16);
    *(&v19 - 2) = a1;
    sub_100019968(sub_10004EDB8, v17, (void (*)(void))sub_100013904);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    unint64_t v18 = sub_100030954(a4, a5);
    sub_100034ADC(v18);
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10003889C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._countAndFlagsBits = 541346128;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x800000010007F740;
  v7._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  v8._countAndFlagsBits = a2;
  v8._object = a3;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x64656C6961462027;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t sub_100038988(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = (unint64_t)a1;
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8);
  uint64_t v6 = qword_1000A1340;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v7 = type metadata accessor for Logger();
    sub_100004964(v7, (uint64_t)qword_1000AA248);
    swift_bridgeObjectRetain_n();
    Swift::String v8 = (id)v3;
    Swift::String v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v11 + 8) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_100051BFC();
      sub_100017070(v12, v13, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "PID %d: Register Service Provider '%{public}s'", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      sub_100004A0C();
      sub_100004A0C();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v15 = sub_100051BFC();
    unint64_t v17 = sub_100030954(v15, v16);
    unint64_t v3 = v17;
    uint64_t v29 = v5;
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      if (!v18) {
        break;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v18) {
        break;
      }
    }
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v19 = *(void *)(v3 + 32);
      swift_retain();
    }
    if (*(void *)(v19 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1)
    {
LABEL_10:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_100036B98(v19, v8);
      return swift_release();
    }
    swift_release();
    if (v18 == 1) {
      break;
    }
    uint64_t v5 = 5;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v19 = *(void *)(v3 + 8 * v5);
        swift_retain();
      }
      uint64_t v21 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (*(void *)(v19 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1) {
        goto LABEL_10;
      }
      swift_release();
      ++v5;
      if (v21 == v18) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_29:
    swift_once();
  }
LABEL_19:
  swift_bridgeObjectRelease_n();
  swift_beginAccess();
  uint64_t v22 = *(void *)(v2 + 160);
  if (*(void *)(v22 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_10004063C(v29, v4);
    uint64_t v24 = v8;
    if ((v25 & 1) == 0)
    {
      unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_25;
    }
    unint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
  }
  else
  {
    unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v24 = v8;
  }
  swift_bridgeObjectRetain();
LABEL_25:
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v27 = v24;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v28 >> 1)
  {
    sub_100051808(v28);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_beginAccess();
  sub_100044270(v26, v29, v4, sub_1000463D0);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100038DF0()
{
  sub_1000116B8(&qword_1000A2EE8);
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  *(void *)(v0 + 160) = v1;
  return swift_bridgeObjectRelease();
}

void sub_100038E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10005189C();
  a23 = v25;
  a24 = v26;
  sub_100051A44();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100004964(v27, (uint64_t)qword_1000AA248);
  unint64_t v28 = v24;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    a12 = sub_100013E10();
    *(_DWORD *)uint64_t v31 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 8) = 2082;
    uint64_t v32 = *(void *)&v28[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier];
    unint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier + 8];
    swift_bridgeObjectRetain();
    sub_100017070(v32, v33, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "PID %d: Unregister Service Provider '%{public}s'", (uint8_t *)v31, 0x12u);
    sub_1000514C8();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {
  }
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  sub_10004F5C8();
  swift_allocError();
  *unint64_t v34 = 2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100013DE4();
  id v38 = sub_1000519C8(v35, v36, -101, 27, v37);
  sub_100051600();
  sub_1000370F0((uint64_t *)v28);

  sub_100051880();
}

void sub_10003909C()
{
  sub_100013C20();
  uint64_t v5 = v2;
  uint64_t v57 = v1;
  sub_100051C28();
  uint64_t v6 = type metadata accessor for Logger();
  sub_100013930();
  int64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100017C94();
  uint64_t v10 = sub_1000116B8(&qword_1000A3028);
  uint64_t v11 = sub_100051080(v10);
  __chkstk_darwin(v11);
  sub_1000516C8();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v51 - v13;
  if (qword_1000A1340 == -1) {
    goto LABEL_2;
  }
LABEL_42:
  swift_once();
LABEL_2:
  uint64_t v15 = sub_100004964(v6, (uint64_t)qword_1000AA248);
  uint64_t v16 = (char *)(id)v0;
  unsigned char v51[4] = v15;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v53 = v16;
  if (v19)
  {
    unint64_t v20 = v3;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    int v56 = *(_DWORD *)&v53[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "PID %d: Register Service Presenter", v21, 8u);
    unint64_t v3 = v20;
    uint64_t v16 = v53;
    sub_100004A0C();
  }
  else
  {
  }
  if (*(void *)(v57 + 176))
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000139C0();
    sub_100051048(v22, v23, -100);
    swift_willThrow();
LABEL_39:
    sub_100051210();
    uint64_t v47 = v46();
    uint64_t v48 = __chkstk_darwin(v47);
    __chkstk_darwin(v48);
    sub_1000515AC();
    sub_100019968(sub_10004F678, v49, (void (*)(void))sub_100013904);
    sub_100051CE0();
    v50();
    swift_willThrow();
LABEL_40:
    sub_100013C38();
    return;
  }
  v51[1] = v3;
  v51[2] = v8;
  v51[3] = v6;
  *(void *)(v57 + 176) = v16;
  swift_beginAccess();
  unint64_t v0 = *(void *)(v57 + 120);
  uint64_t v24 = *(void *)(v0 + 64);
  unint64_t v52 = v0 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v3 = v26 & v24;
  int64_t v54 = (unint64_t)(v25 + 63) >> 6;
  v51[0] = v54 - 1;
  uint64_t v27 = v16;
  unint64_t v55 = v0;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  unint64_t v28 = &qword_1000A2E78;
  if (v3)
  {
LABEL_10:
    unint64_t v29 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    unint64_t v30 = v29 | (v8 << 6);
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v37 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v37 < v54)
    {
      unint64_t v38 = *(void *)(v52 + 8 * v37);
      if (v38) {
        goto LABEL_15;
      }
      v8 += 2;
      if (v37 + 1 >= v54)
      {
        int64_t v8 = v37;
        goto LABEL_20;
      }
      unint64_t v38 = *(void *)(v52 + 8 * v8);
      if (v38)
      {
        ++v37;
        goto LABEL_15;
      }
      if (v37 + 2 < v54) {
        break;
      }
    }
LABEL_20:
    uint64_t v39 = sub_1000116B8(v28);
    sub_100012E34(v4, 1, 1, v39);
    unint64_t v3 = 0;
LABEL_21:
    uint64_t v40 = sub_100051B24();
    sub_10004F8D8(v40, v41, &qword_1000A3028);
    uint64_t v42 = sub_1000116B8(v28);
    if (sub_100012E5C((uint64_t)v14, 1, v42) == 1)
    {
      swift_release();
      goto LABEL_40;
    }
    uint64_t v6 = (uint64_t)v28;
    uint64_t v43 = *(void *)&v14[*(int *)(v42 + 48)];
    uint64_t v44 = *(void *)(v43 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
    unint64_t v0 = *(void *)(v43 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
    swift_bridgeObjectRetain();
    sub_100036C44(v44, v0);
    if (v5)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_100046880();
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    swift_release();
    sub_100046880();
    unint64_t v28 = (uint64_t *)v6;
    if (v3) {
      goto LABEL_10;
    }
  }
  unint64_t v38 = *(void *)(v52 + 8 * (v37 + 2));
  if (v38)
  {
    v37 += 2;
    goto LABEL_15;
  }
  int64_t v45 = v37 + 3;
  if (v37 + 3 >= v54)
  {
    int64_t v8 = v37 + 2;
    goto LABEL_20;
  }
  unint64_t v38 = *(void *)(v52 + 8 * v45);
  if (v38)
  {
    v37 += 3;
LABEL_15:
    unint64_t v3 = (v38 - 1) & v38;
    unint64_t v30 = __clz(__rbit64(v38)) + (v37 << 6);
    int64_t v8 = v37;
LABEL_11:
    unint64_t v31 = v55;
    uint64_t v32 = *(void *)(v55 + 48);
    uint64_t v33 = _s7SessionC8IdentityVMa(0);
    sub_100051080(v33);
    sub_1000468D0(v32 + *(void *)(v34 + 72) * v30, v4, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v35 = *(void *)(v31 + 56);
    uint64_t v36 = sub_1000116B8(v28);
    *(void *)(v4 + *(int *)(v36 + 48)) = *(void *)(v35 + 8 * v30);
    sub_100012E34(v4, 0, 1, v36);
    swift_retain();
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v37 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    if (v37 >= v54)
    {
      int64_t v8 = v51[0];
      goto LABEL_20;
    }
    unint64_t v38 = *(void *)(v52 + 8 * v37);
    ++v45;
    if (v38) {
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_1000396AC()
{
  uint64_t v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0._countAndFlagsBits = 541346128;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000010007F8A0;
  v2._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v2);
  return v4;
}

void sub_10003975C()
{
  sub_100051A44();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100004964(v2, (uint64_t)qword_1000AA248);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PID %d: Unregister Service Presenter", v6, 8u);
    sub_100004A0C();
  }
  else
  {
  }
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  sub_10004F5C8();
  swift_allocError();
  unsigned char *v7 = 3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000139C0();
  sub_100013DE4();
  id v11 = sub_1000519C8(v8, v9, -101, 28, v10);
  uint64_t v12 = *(void **)(v0 + 176);
  if (v12)
  {
    type metadata accessor for ServicePresenter();
    id v13 = v3;
    id v14 = v12;
    char v15 = static NSObject.== infix(_:_:)();

    if (v15)
    {
      sub_100053A80();
      uint64_t v16 = *(void **)(v0 + 176);
      *(void *)(v0 + 176) = 0;
    }
  }
  id v17 = v11;
  sub_100051600();
}

uint64_t sub_100039978(uint64_t a1)
{
  return sub_10002CC1C(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Discovery Interrupted");
}

uint64_t sub_1000399AC(uint64_t a1)
{
  return sub_10002CC1C(a1, (uint64_t (*)(void))&static os_log_type_t.error.getter, "Discovery Invalidated");
}

void sub_1000399F0(uint64_t a1)
{
}

void sub_100039A10(uint64_t a1)
{
}

void sub_100039A38()
{
  sub_1000518D0();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v4);
  sub_100051198();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  sub_100004964(v3, (uint64_t)qword_1000AA248);
  sub_100051210();
  uint64_t v6 = v5();
  __chkstk_darwin(v6);
  sub_100013AE8();
  sub_100019968((uint64_t (*)(void))sub_10004EE74, v2, (void (*)(void))sub_100013904);
  uint64_t v7 = sub_100051658();
  v8(v7);
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    sub_1000519BC();
    sub_10003838C();
    swift_release();
  }
  sub_1000516E4();
}

void sub_100039B98()
{
  sub_1000511DC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  os_log_type_t v5 = v4;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_100013F1C();
  v6._countAndFlagsBits = v5();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v3;
  v7._object = v1;
  String.append(_:)(v7);
  sub_100051120();
}

void sub_100039C18()
{
  sub_1000511DC();
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  sub_100051304();
  sub_100021EC8(v0, v1, v2);
  sub_100039A38();
  sub_100051120();
}

void sub_100039CB4()
{
}

void sub_100039CD8()
{
}

id sub_100039CFC()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithMachServiceName:v1];

  return v2;
}

void sub_100039D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_1000511DC();
  a16 = v18;
  a17 = v19;
  uint64_t v20 = OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener;
  sub_100004928(0, (unint64_t *)&unk_1000A3038);
  uint64_t v21 = v17;
  *(void *)&v17[v20] = sub_100039CFC();

  uint64_t v22 = (objc_class *)type metadata accessor for Relay.MachService();
  a9.receiver = v21;
  a9.super_class = v22;
  uint64_t v23 = (char *)[super init];
  uint64_t v24 = OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener;
  uint64_t v25 = *(void **)&v23[OBJC_IVAR____TtCC12SidecarRelay5Relay11MachService_xpcListener];
  uint64_t v26 = v23;
  [v25 setDelegate:v26];
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  id v27 = v25;
  unint64_t v28 = (void *)static OS_dispatch_queue.main.getter();
  [v27 _setQueue:v28];

  id v29 = *(id *)&v23[v24];
  [v29 resume];

  sub_100051120();
}

#error "100039EB4: call analysis failed (funcsize=9)"

void sub_100039EC4()
{
  sub_1000518D0();
  id v2 = v1;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100017C94();
  [v2 auditToken];
  if (sub_1000237BC())
  {
    uint64_t v7 = xpc_copy_entitlement_for_token();
    swift_unknownObjectRelease();
    if (v7)
    {
      objc_allocWithZone((Class)type metadata accessor for TestClient());
      id v8 = sub_10005D0FC(v2);
LABEL_24:
      id v27 = v8;
      if (qword_1000A1328 != -1) {
        swift_once();
      }
      sub_100034D70(v27);

      goto LABEL_27;
    }
  }
  uint64_t v9 = (void *)xpc_copy_entitlement_for_token();
  if (!v9)
  {
LABEL_13:
    uint64_t v19 = (void *)xpc_copy_entitlement_for_token();
    if (v19)
    {
      if (xpc_BOOL_get_value(v19))
      {
        id v20 = objc_allocWithZone((Class)type metadata accessor for ServicePresenter());
        id v21 = sub_100004ACC(v2);
        if (qword_1000A1328 != -1) {
          swift_once();
        }
        sub_100034D70(v21);

        goto LABEL_18;
      }
      swift_unknownObjectRelease();
    }
    objc_allocWithZone((Class)type metadata accessor for Client());
    id v8 = sub_100004ACC(v2);
    goto LABEL_24;
  }
  if (!xpc_string_get_string_ptr(v9))
  {
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  String.init(cString:)();
  if (qword_1000A1368 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100051590();
  if (sub_100029E1C(v10, v11, v12))
  {
    id v13 = objc_allocWithZone((Class)type metadata accessor for ServiceProvider());
    id v14 = v2;
    uint64_t v15 = sub_100051590();
    uint64_t v18 = sub_100057DE0(v15, v16, v17);
    if (qword_1000A1328 != -1) {
      swift_once();
    }
    sub_100034D70(v18);

LABEL_18:
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000139C0();
  id v24 = sub_100051048(v22, v23, -103);
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  sub_100004964(v3, (uint64_t)qword_1000AA248);
  sub_100051210();
  uint64_t v26 = v25();
  __chkstk_darwin(v26);
  sub_1000515AC();
  sub_100019968((uint64_t (*)(void))sub_10003A2E8, 0, (void (*)(void))sub_100012D6C);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v3);

LABEL_27:
  sub_1000516E4();
}

unint64_t sub_10003A2E8()
{
  return 0xD000000000000013;
}

id sub_10003A364(uint64_t a1)
{
  return sub_10003A37C(a1, type metadata accessor for Relay.MachService);
}

id sub_10003A37C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t SidecarTransport.description.getter(uint64_t a1)
{
  uint64_t v1 = 1229343063;
  uint64_t v2 = 4346709;
  if (a1 != 2) {
    uint64_t v2 = 0;
  }
  if (a1 != 3) {
    uint64_t v1 = v2;
  }
  if (a1 == 1) {
    return 1279547201;
  }
  else {
    return v1;
  }
}

uint64_t sub_10003A414()
{
  return SidecarTransport.description.getter(*v0);
}

void *sub_10003A41C()
{
  return &protocol witness table for String;
}

uint64_t type metadata accessor for Relay()
{
  return self;
}

uint64_t sub_10003A44C()
{
  return type metadata accessor for Relay.Session(0);
}

uint64_t type metadata accessor for Relay.Session(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A28B0);
}

uint64_t sub_10003A474()
{
  uint64_t result = _s7SessionC8IdentityVMa(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t _s7SessionC8IdentityVMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A2D50);
}

uint64_t type metadata accessor for Relay.RelayProxy()
{
  return self;
}

uint64_t type metadata accessor for Relay.MachService()
{
  return self;
}

uint64_t sub_10003A5F4(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10003A64C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 5;
    }
  }
  return result;
}

void type metadata accessor for Relay.Session.State()
{
}

uint64_t *sub_10003A6A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    uint64_t v9 = _s7SessionC8IdentityVMa(0);
    *(void *)&v6[*(int *)(v9 + 20)] = *(void *)&v7[*(int *)(v9 + 20)];
    v6[*(int *)(v9 + 24)] = v7[*(int *)(v9 + 24)];
  }
  return v3;
}

uint64_t sub_10003A794(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_10003A7FC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  *(void *)&v5[*(int *)(v8 + 20)] = *(void *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

void *sub_10003A898(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  *(void *)&v5[*(int *)(v8 + 20)] = *(void *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

void *sub_10003A934(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  *(void *)&v5[*(int *)(v8 + 20)] = *(void *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

void *sub_10003A9D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  *(void *)&v5[*(int *)(v8 + 20)] = *(void *)&v6[*(int *)(v8 + 20)];
  v5[*(int *)(v8 + 24)] = v6[*(int *)(v8 + 24)];
  return a1;
}

uint64_t sub_10003AA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AA80);
}

uint64_t sub_10003AA80(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1) {
    return *a1 == 0;
  }
  uint64_t v7 = _s7SessionC8IdentityVMa(0);
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 20);

  return sub_100012E5C(v8, a2, v7);
}

uint64_t sub_10003AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003AB10);
}

void *sub_10003AB10(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (a3 == 1)
  {
    *uint64_t result = 0;
  }
  else
  {
    uint64_t v7 = _s7SessionC8IdentityVMa(0);
    uint64_t v8 = (uint64_t)v4 + *(int *)(a4 + 20);
    return (void *)sub_100012E34(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for Relay.ConnectedSessionKey(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A2C30);
}

uint64_t sub_10003ABA8()
{
  uint64_t result = _s7SessionC8IdentityVMa(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10003AC44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10003AD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10003AD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10003AE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10003AF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AF18);
}

uint64_t sub_10003AF18()
{
  uint64_t v2 = sub_100051A28();

  return sub_100012E5C(v1, v0, v2);
}

uint64_t sub_10003AF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003AF68);
}

uint64_t sub_10003AF68()
{
  sub_100051A28();
  uint64_t v0 = sub_100051C34();

  return sub_100012E34(v0, v1, v2, v3);
}

uint64_t type metadata accessor for Relay.RapportSessionKey(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A2CC0);
}

uint64_t sub_10003AFBC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003AFF0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10003B088(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_10003B15C(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000139D0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);

  return v4(a1, v2);
}

uint64_t sub_10003B1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10003B23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10003B2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10003B348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10003B3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B3E0);
}

uint64_t sub_10003B3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for SidecarIdentity();
  sub_10001BB80();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100012E5C(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v9 >= 2) {
      return v9 - 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10003B468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B47C);
}

void sub_10003B47C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_100051A28();
  sub_10001BB80();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_100051C34();
    sub_100012E34(v9, v10, v11, v12);
  }
  else
  {
    *(unsigned char *)(v5 + *(int *)(a4 + 24)) = v4 + 1;
  }
}

uint64_t sub_10003B4EC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10003B590()
{
  return sub_10003B620((uint64_t)&unk_1000A2D90);
}

unint64_t sub_10003B5D8()
{
  return sub_10003B620((uint64_t)&unk_1000A2D98);
}

unint64_t sub_10003B620(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10003B664()
{
  return sub_10003B620((uint64_t)&unk_1000A2DA0);
}

uint64_t *sub_10003B6B0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v12);
  id v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v58 = a1;
  RapportStreamSession.messenger.getter((uint64_t)v59);
  uint64_t v15 = v60;
  if (!v60)
  {
    uint64_t v26 = &qword_1000A2F58;
    id v27 = v59;
    goto LABEL_8;
  }
  int64_t v54 = v8;
  uint64_t v55 = v2;
  int v56 = v14;
  uint64_t v16 = v61;
  id v17 = sub_1000116FC(v59, v60);
  uint64_t v18 = *(void *)(v15 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v20);
  sub_1000131C8((uint64_t)v59, &qword_1000A2F58);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
  self;
  uint64_t v22 = (void *)swift_dynamicCastObjCClass();
  if (v22)
  {
    uint64_t v23 = (uint64_t)v22;
    id v24 = [v22 destinationDevice];
    if (v24)
    {
      id v25 = v24;
      sub_10005A070(v25, (uint64_t)v11);
      if (sub_100012E5C((uint64_t)v11, 1, (uint64_t)v12) == 1)
      {

        swift_unknownObjectRelease();
        uint64_t v26 = &qword_1000A2E10;
        id v27 = v11;
LABEL_8:
        sub_1000131C8((uint64_t)v27, v26);
        goto LABEL_9;
      }
      uint64_t v62 = v21;
      uint64_t v33 = (uint64_t)v56;
      sub_10004DD54((uint64_t)v11, (uint64_t)v56, (void (*)(void))type metadata accessor for SidecarIdentity);
      uint64_t v34 = RapportStreamSession.streamID.getter();
      if (v35)
      {
        uint64_t v36 = v34;
        uint64_t v12 = v35;
        id v58 = v25;
        v59[0] = 58;
        v59[1] = 0xE100000000000000;
        __chkstk_darwin(v34);
        unint64_t v51 = v59;
        swift_bridgeObjectRetain();
        int64_t v37 = (void *)sub_10003EDA0(1, 0, sub_10004EEB0, (uint64_t)(&v53 - 4), v36, (unint64_t)v12);
        swift_bridgeObjectRelease();
        if (v37[2]
          && (uint64_t v38 = v37[4],
              unint64_t v39 = v37[5],
              unint64_t v40 = v37[6],
              uint64_t v12 = (uint64_t *)v37[7],
              swift_bridgeObjectRetain(),
              swift_bridgeObjectRelease(),
              (v39 ^ v38) >> 14))
        {
          uint64_t v41 = sub_10004EED0(v38, v39, v40, (unint64_t)v12, 16);
          id v25 = v58;
          if ((v42 & 0x100) != 0)
          {
            uint64_t v44 = sub_10004CE28(v38, v39, v40, (uint64_t)v12, 16);
            char v46 = v45;
            swift_bridgeObjectRelease();
            if (v46) {
              goto LABEL_23;
            }
          }
          else
          {
            char v43 = v42;
            uint64_t v44 = (unsigned __int8 *)v41;
            swift_bridgeObjectRelease();
            if (v43) {
              goto LABEL_23;
            }
          }
          uint64_t v47 = (uint64_t)v54;
          sub_1000468D0(v33, (uint64_t)v54, (void (*)(void))type metadata accessor for SidecarIdentity);
          uint64_t v48 = v57;
          *(void *)(v47 + *(int *)(v57 + 20)) = v44;
          *(unsigned char *)(v47 + *(int *)(v48 + 24)) = 0;
          uint64_t v12 = (uint64_t *)sub_100031A0C(v47, v23);
          sub_100046880();
          id v25 = v58;
          if (v12)
          {
            sub_100046880();

            swift_unknownObjectRelease();
            return v12;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          id v25 = v58;
        }
      }
LABEL_23:
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = 1888;
      LOBYTE(v51) = 2;
      sub_100021CF8(v49, v50, -1020, 0, 0, 0);
      swift_willThrow();

      swift_unknownObjectRelease();
      sub_100046880();
      return v12;
    }
  }
  swift_unknownObjectRelease();
LABEL_9:
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  unint64_t v28 = sub_100021EC8(-6714, 0xD000000000000024, 0x800000010007F780);
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_100004964(v4, (uint64_t)qword_1000AA248);
  uint64_t v30 = v62;
  uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v6, v29, v4);
  uint64_t v12 = &v53;
  __chkstk_darwin(v31);
  unint64_t v51 = v28;
  sub_100019968((uint64_t (*)(void))sub_10003BDE4, 0, (void (*)(void))sub_100013904);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  swift_willThrow();
  return v12;
}

unint64_t sub_10003BDE4()
{
  return 0xD00000000000001ELL;
}

void sub_10003BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100051280();
  a21 = v22;
  a22 = v23;
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_1000513A4(v24, (uint64_t)qword_1000AA248);
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (_DWORD *)sub_10001EAAC();
    a10 = sub_100013E10();
    *id v27 = 136446210;
    swift_retain();
    uint64_t v28 = RapportStreamServer.description.getter();
    unint64_t v30 = v29;
    swift_release();
    sub_100017070(v28, v30, &a10);
    sub_1000219DC();
    sub_100051428();
    swift_bridgeObjectRelease();
    sub_100051C68((void *)&_mh_execute_header, v31, v32, "%{public}s Invalidated");
    sub_1000514C8();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100051428();
  }
  sub_10005122C();
}

void sub_10003BF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100051280();
  a21 = v22;
  a22 = v23;
  id v25 = v24;
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_1000513A4(v26, (uint64_t)qword_1000AA248);
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)sub_10001EAAC();
    a10 = sub_100013E10();
    sub_100051CB4(4.8751e-34);
    RapportStreamSession.description.getter();
    sub_100051A1C();
    uint64_t v30 = swift_release();
    sub_100051A5C(v30, v31, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100051428();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Prepare %{public}s", v29, 0xCu);
    sub_1000517B8();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    sub_100051428();
  }
  swift_retain();
  uint64_t v32 = swift_retain();
  sub_10003C0C8(v32, v25);
  sub_10005122C();
}

uint64_t sub_10003C0A4()
{
  return 0x2065726170657250;
}

uint64_t sub_10003C0C8(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  sub_10003B6B0(a2);
  char v5 = sub_10002F400(a2);
  swift_release();
  swift_release();
  swift_release();
  return v5 & 1;
}

void sub_10003C2EC()
{
  sub_10001394C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Logger();
  sub_100013930();
  __chkstk_darwin(v5);
  sub_100013AFC();
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  sub_100004964(v4, (uint64_t)qword_1000AA248);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)sub_10001EAAC();
    sub_100013E10();
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_retain();
    RapportStreamSession.description.getter();
    swift_release();
    uint64_t v9 = sub_100051658();
    sub_100017070(v9, v10, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accept %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    swift_release_n();
  }
  sub_10003B6B0(v3);
  sub_10002F4BC();
  v1(0);
  swift_release();
  sub_100013964();
}

uint64_t sub_10003C5F4()
{
  return 0x4620747065636341;
}

#error "10003C624: call analysis failed (funcsize=6)"

#error "10003C640: call analysis failed (funcsize=7)"

uint64_t sub_10003C650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10003C6B4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return a2(a4, 0);
  }
  swift_errorRetain();
  a2(a1, 1);

  return swift_errorRelease();
}

uint64_t sub_10003C730(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x746E65696C63 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1919247728 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_10003C920()
{
  return 5;
}

uint64_t sub_10003C928(char a1)
{
  uint64_t result = 0x6C656E6E616863;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746E65696C63;
      break;
    case 2:
      uint64_t result = 1919247728;
      break;
    case 3:
      uint64_t result = 0x65636976726573;
      break;
    case 4:
      uint64_t result = 0x6574617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003C9C4(void *a1)
{
  sub_1000116B8(&qword_1000A2F70);
  sub_100013930();
  __chkstk_darwin(v3);
  sub_1000116FC(a1, a1[3]);
  sub_10004F47C();
  sub_100051C48();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100051358();
    sub_100051358();
    sub_100051358();
  }
  uint64_t v4 = sub_100051930();
  return v5(v4);
}

void sub_10003CB40()
{
  sub_100013C20();
  BOOL v2 = v1;
  uint64_t v4 = v3;
  sub_1000116B8(&qword_1000A3200);
  sub_100013930();
  __chkstk_darwin(v5);
  sub_100013AFC();
  sub_1000116FC(v2, v2[3]);
  sub_10004F47C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_1000136EC((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v7 = sub_100051A74();
    uint64_t v9 = v8;
    uint64_t v19 = v7;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_100051A74();
    uint64_t v18 = v10;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100051A74();
    uint64_t v13 = v12;
    uint64_t v16 = v11;
    uint64_t v14 = sub_1000514F4();
    v15(v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1000136EC((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 8) = v20;
    *(unsigned char *)(v4 + 12) = BYTE4(v20) & 1;
    *(void *)(v4 + 16) = v19;
    *(void *)(v4 + 24) = v9;
    *(void *)(v4 + 32) = v17;
    *(void *)(v4 + 40) = v18;
    *(void *)(v4 + 48) = v16;
    *(void *)(v4 + 56) = v13;
  }
  sub_100013C38();
}

uint64_t sub_10003CDD0()
{
  return sub_10003C928(*v0);
}

uint64_t sub_10003CDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003C730(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003CE00@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10003C920();
  *a1 = result;
  return result;
}

uint64_t sub_10003CE28(uint64_t a1)
{
  unint64_t v2 = sub_10004F47C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CE64(uint64_t a1)
{
  unint64_t v2 = sub_10004F47C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10003CEA0@<D0>(_OWORD *a1@<X8>)
{
  sub_10003CB40();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

uint64_t sub_10003CEE4(void *a1)
{
  return sub_10003C9C4(a1);
}

void sub_10003CEFC()
{
  sub_10001394C();
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = _s7SessionC8IdentityVMa(0) - 8;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = sub_100051258();
  uint64_t v9 = sub_100051080(v8);
  __chkstk_darwin(v9);
  sub_100017C94();
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity + *(int *)(v7 + 28));
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
  if (v10) {
    int v11 = *(_DWORD *)(v10 + OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier);
  }
  else {
    int v11 = 0;
  }
  BOOL v12 = v10 == 0;
  sub_1000468D0(v0 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v0, (void (*)(void))_s7SessionC8IdentityVMa);
  sub_10004DD54(v0, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
  uint64_t v13 = sub_10005A15C();
  uint64_t v15 = v14;
  sub_100046880();
  uint64_t v17 = *(void *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service);
  uint64_t v16 = *(void *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_service + 8);
  unint64_t v18 = *(void *)(v4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state);
  swift_bridgeObjectRetain();
  sub_10004F8B8(v18);
  sub_10002D2F0(v18);
  sub_100051BD8();
  sub_10004F8C8(v18);
  *(void *)uint64_t v6 = v19;
  *(_DWORD *)(v6 + 8) = v11;
  *(unsigned char *)(v6 + 12) = v12;
  *(void *)(v6 + 16) = v13;
  *(void *)(v6 + 24) = v15;
  *(void *)(v6 + 32) = v17;
  *(void *)(v6 + 40) = v16;
  *(void *)(v6 + 48) = v2;
  *(void *)(v6 + 56) = v3;
  sub_100013964();
}

uint64_t sub_10003D0A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746E65696C63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010007FB80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x7265766F63736964 && a2 == 0xE900000000000079;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000017 && a2 == 0x800000010007F490 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 6580592 && a2 == 0xE300000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        BOOL v8 = a1 == 0x65746E6573657270 && a2 == 0xE900000000000072;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD000000000000021 && a2 == 0x800000010007FBA0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x4474726F70706172 && a2 == 0xEE00736563697665;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x800000010007FBD0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else
          {
            BOOL v10 = a1 == 0x5374726F70706172 && a2 == 0xEF736E6F69737365;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else if (a1 == 0xD000000000000014 && a2 == 0x800000010007F3F0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 10;
            }
            else
            {
              BOOL v11 = a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 11;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x800000010007F470 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 12;
              }
              else
              {
                BOOL v12 = a1 == 0x746361736E617274 && a2 == 0xEB000000006E6F69;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 13;
                }
                else
                {
                  BOOL v13 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 14;
                  }
                  else if (a1 == 0x676F646863746177 && a2 == 0xE800000000000000)
                  {
                    swift_bridgeObjectRelease();
                    return 15;
                  }
                  else
                  {
                    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v15) {
                      return 15;
                    }
                    else {
                      return 16;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t static RapportDeviceChangeFlags.name.getter()
{
  return 16;
}

Swift::Int sub_10003D70C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_10003D74C(char a1)
{
  unint64_t result = 0x73746E65696C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x7265766F63736964;
      break;
    case 3:
    case 12:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 6580592;
      break;
    case 5:
      unint64_t result = 0x65746E6573657270;
      break;
    case 6:
      unint64_t result = 0xD000000000000021;
      break;
    case 7:
      unint64_t result = 0x4474726F70706172;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x5374726F70706172;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0x736E6F6973736573;
      break;
    case 13:
      unint64_t result = 0x746361736E617274;
      break;
    case 14:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 15:
      unint64_t result = 0x676F646863746177;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003D950(void *a1)
{
  sub_1000116B8(&qword_1000A2F80);
  sub_100013930();
  __chkstk_darwin(v3);
  sub_1000116FC(a1, a1[3]);
  sub_10004F4C8();
  sub_100051C48();
  sub_1000116B8(&qword_1000A2F90);
  sub_100050BAC((uint64_t)&unk_1000A2F98);
  sub_100051134();
  if (!v1)
  {
    sub_10005157C();
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000116B8(&qword_1000A2FA8);
    sub_10004F514((uint64_t)&unk_1000A2FB0);
    sub_1000513D4();
    sub_10005157C();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_10005157C();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000518E4(6);
    sub_1000116B8(&qword_1000A18F0);
    sub_100013838((uint64_t)&qword_1000A2FC0);
    sub_100051134();
    sub_100051358();
    sub_1000116B8(&qword_1000A18C8);
    sub_10004F514((uint64_t)&unk_1000A18D0);
    sub_1000513D4();
    sub_1000513D4();
    sub_1000116B8(&qword_1000A2FC8);
    sub_100050D44();
    sub_100051134();
    sub_1000116B8(&qword_1000A2FD8);
    sub_10004F514((uint64_t)&unk_1000A2FE0);
    sub_1000513D4();
    sub_1000518E4(13);
    sub_100051358();
    sub_10004F57C();
    sub_1000513D4();
  }
  uint64_t v4 = sub_100051930();
  return v5(v4);
}

void sub_10003DDA0()
{
  sub_100013C20();
  BOOL v2 = v1;
  uint64_t v4 = v3;
  sub_1000116B8(&qword_1000A3208);
  sub_100013930();
  __chkstk_darwin(v5);
  sub_1000139F8();
  char v90 = 1;
  uint64_t v55 = (uint64_t)v2;
  sub_1000116FC(v2, v2[3]);
  sub_10004F4C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    int v53 = 0;
    unsigned int v6 = 4;
  }
  else
  {
    uint64_t v44 = v4;
    sub_1000116B8(&qword_1000A2F90);
    sub_100050BAC((uint64_t)&unk_1000A3210);
    sub_100051374();
    swift_bridgeObjectRetain();
    sub_100051248();
    uint64_t v49 = v59;
    int v14 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v59) = 2;
    sub_100051248();
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    sub_1000116B8(&qword_1000A2FA8);
    sub_100050C64();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v57 = v16;
    swift_bridgeObjectRetain();
    sub_100051248();
    uint64_t v48 = v59;
    unsigned int v42 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100051248();
    unint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = HIDWORD(v17) & 1;
    char v90 = BYTE4(v17) & 1;
    LOBYTE(v59) = 6;
    unsigned int v41 = v17;
    sub_100051248();
    char v38 = KeyedDecodingContainer.decode(_:forKey:)();
    char v40 = v18;
    sub_1000116B8(&qword_1000A18F0);
    sub_100013838((uint64_t)&unk_1000A19D0);
    sub_100051374();
    uint64_t v19 = v59;
    LOBYTE(v59) = 8;
    swift_bridgeObjectRetain();
    sub_100051248();
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v52 = v19;
    uint64_t v21 = v20;
    sub_1000116B8(&qword_1000A18C8);
    sub_100050CD8();
    swift_bridgeObjectRetain();
    sub_10005155C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LOBYTE(v58[0]) = 10;
    uint64_t v51 = v59;
    swift_bridgeObjectRetain();
    sub_10005155C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000116B8(&qword_1000A2FC8);
    LOBYTE(v58[0]) = 11;
    sub_100050D44();
    uint64_t v23 = v22;
    uint64_t v50 = v59;
    swift_bridgeObjectRetain();
    sub_1000513EC();
    if (!v23)
    {
      sub_1000116B8(&qword_1000A2FD8);
      LOBYTE(v58[0]) = 12;
      unint64_t v26 = sub_100050DFC();
      uint64_t v47 = v59;
      swift_bridgeObjectRetain();
      sub_1000513EC();
      if (!v26)
      {
        uint64_t v46 = v59;
        swift_bridgeObjectRetain();
        sub_100051B3C();
        char v29 = KeyedDecodingContainer.decode(_:forKey:)();
        LOBYTE(v59) = 14;
        sub_100051B3C();
        uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v45 = v31;
        uint64_t v32 = v30;
        char v84 = 15;
        sub_100050E70();
        swift_bridgeObjectRetain();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        char v33 = v38 & 1;
        char v36 = v38 & 1;
        uint64_t v34 = sub_10005102C();
        v35(v34);
        char v39 = v85;
        uint64_t v54 = v86;
        v58[0] = v49;
        LODWORD(v58[1]) = v14;
        v58[2] = v43;
        v58[3] = v57;
        v58[4] = v48;
        v58[5] = __PAIR64__(v41, v42);
        LOBYTE(v58[6]) = v40;
        BYTE1(v58[6]) = v33;
        v58[7] = v52;
        v58[8] = v37;
        v58[9] = v21;
        v58[10] = v51;
        v58[11] = v50;
        v58[12] = v47;
        v58[13] = v46;
        LOBYTE(v58[14]) = v29 & 1;
        v58[15] = v32;
        v58[16] = v45;
        LOBYTE(v58[17]) = v85;
        v58[18] = v86;
        sub_100050EBC((uint64_t)v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000136EC(v55);
        uint64_t v59 = v49;
        int v60 = v14;
        uint64_t v61 = v43;
        uint64_t v62 = v57;
        uint64_t v63 = v48;
        unsigned int v64 = v42;
        unsigned int v65 = v41;
        char v66 = v90;
        char v67 = v36;
        int v68 = *(_DWORD *)&v88[7];
        __int16 v69 = v89;
        uint64_t v70 = v52;
        uint64_t v71 = v37;
        uint64_t v72 = v21;
        uint64_t v73 = v51;
        uint64_t v74 = v50;
        uint64_t v75 = v47;
        uint64_t v76 = v46;
        char v77 = v29 & 1;
        *(_DWORD *)&v78[3] = *(_DWORD *)&v88[3];
        *(_DWORD *)uint64_t v78 = *(_DWORD *)v88;
        uint64_t v79 = v32;
        uint64_t v80 = v45;
        char v81 = v39;
        *(_DWORD *)unint64_t v82 = *(_DWORD *)v87;
        *(_DWORD *)&v82[3] = *(_DWORD *)&v87[3];
        uint64_t v83 = v54;
        sub_100012838((uint64_t)&v59);
        memcpy(v44, v58, 0x98uLL);
        goto LABEL_21;
      }
      uint64_t v27 = sub_10005102C();
      v28(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000136EC(v55);
      int v56 = 1;
      int v11 = 1;
      int v12 = 1;
      int v13 = 1;
      int v53 = 1;
      int v7 = 1;
      BOOL v8 = v26 == 0;
      goto LABEL_5;
    }
    uint64_t v24 = sub_10005102C();
    v25(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v6 = 1933;
    int v53 = 1;
  }
  sub_1000136EC(v55);
  int v7 = 0;
  BOOL v8 = 0;
  int v9 = 0;
  BOOL v10 = 0;
  int v56 = (v6 >> 3) & 1;
  int v11 = (v6 >> 7) & 1;
  int v12 = (v6 >> 8) & 1;
  int v13 = (v6 >> 9) & 1;
  if (v6)
  {
LABEL_5:
    BOOL v10 = v8;
    swift_bridgeObjectRelease();
    int v9 = v7;
  }
  swift_bridgeObjectRelease();
  if (v56) {
    swift_bridgeObjectRelease();
  }
  if (v11) {
    swift_bridgeObjectRelease();
  }
  if (v12) {
    swift_bridgeObjectRelease();
  }
  if (v13) {
    swift_bridgeObjectRelease();
  }
  if (v53) {
    swift_bridgeObjectRelease();
  }
  if (v9)
  {
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_21;
    }
  }
  else if (!v10)
  {
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
LABEL_21:
  sub_100013C38();
}

unint64_t sub_10003E7B8()
{
  return sub_10003D74C(*v0);
}

uint64_t sub_10003E7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003D0A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003E7E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static RapportDeviceChangeFlags.name.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003E810(uint64_t a1)
{
  unint64_t v2 = sub_10004F4C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003E84C(uint64_t a1)
{
  unint64_t v2 = sub_10004F4C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10003E888(void *a1@<X8>)
{
  sub_10003DDA0();
  if (!v1) {
    memcpy(a1, __src, 0x98uLL);
  }
}

uint64_t sub_10003E8D4(void *a1)
{
  return sub_10003D950(a1);
}

unint64_t sub_10003E8F0()
{
  unint64_t result = qword_1000A2DD0;
  if (!qword_1000A2DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2DD0);
  }
  return result;
}

unint64_t sub_10003E93C()
{
  return sub_10003B620((uint64_t)&unk_1000A2DF8);
}

unint64_t sub_10003E984(uint64_t a1)
{
  unint64_t result = sub_10003B620((uint64_t)&unk_1000A1920);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003E9DC(uint64_t a1)
{
  unint64_t result = sub_10003B620((uint64_t)&unk_1000A2E08);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003EA34()
{
  uint64_t result = sub_10003EA58();
  qword_1000A2708 = result;
  unk_1000A2710 = v1;
  return result;
}

uint64_t sub_10003EA58()
{
  uint64_t v0 = CFBundleGetMainBundle();
  CFTypeRef v1 = (id)CFBundleGetValueForInfoDictionaryKey(v0, kCFBundleVersionKey);

  if (v1 && swift_dynamicCast()) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_10003EAEC(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(sub_1000116B8(a2) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

id sub_10003EBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10003EC6C;
  v10[3] = &unk_100097430;
  uint64_t v7 = _Block_copy(v10);
  id v8 = [v4 initWithSubsystem:a1 category:a2 provider:v7];
  _Block_release(v7);
  swift_release();
  return v8;
}

Class sub_10003EC6C(uint64_t a1)
{
  CFTypeRef v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  unint64_t v5 = v4;
  swift_release();
  if (v5 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100012DAC(v3, v5);
  }

  return isa;
}

uint64_t sub_10003ED00(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_10003ED08(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_10003ED18(uint64_t result)
{
  *v1 ^= result;
  return result;
}

BOOL sub_10003ED28(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

void RapportDeviceChangeFlags.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t sub_10003ED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10003EDA0(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v49[3] = a4;
  if (a1 < 0) {
    goto LABEL_38;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  unsigned int v41 = (char **)(v10 + 16);
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v29 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v29 = 11;
    }
    sub_10003F20C(v29 | (v11 << 16), v46, a2 & 1, v10);
    swift_bridgeObjectRelease();
    int v13 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v40 = a1;
  unint64_t v47 = 4 * v12;
  int v13 = (char *)_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v49[0] = String.subscript.getter();
    v49[1] = v17;
    char v18 = a3(v49);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v14 = String.index(after:)();
      goto LABEL_21;
    }
    int v20 = (v15 >> 14 == v14 >> 14) & a2;
    if (v20 != 1)
    {
      if (v14 >> 14 < v15 >> 14) {
        goto LABEL_38;
      }
      uint64_t v21 = String.subscript.getter();
      uint64_t v42 = v23;
      uint64_t v43 = v22;
      uint64_t v44 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v13 = sub_10003F4FC(0, *((void *)v13 + 2) + 1, 1, (uint64_t)v13);
      }
      unint64_t v26 = *((void *)v13 + 2);
      unint64_t v25 = *((void *)v13 + 3);
      if (v26 >= v25 >> 1) {
        int v13 = sub_10003F4FC((char *)(v25 > 1), v26 + 1, 1, (uint64_t)v13);
      }
      *((void *)v13 + 2) = v26 + 1;
      uint64_t v27 = &v13[32 * v26];
      *((void *)v27 + 4) = v21;
      *((void *)v27 + 5) = v44;
      *((void *)v27 + 6) = v43;
      *((void *)v27 + 7) = v42;
      *unsigned int v41 = v13;
    }
    uint64_t v28 = String.index(after:)();
    unint64_t v14 = v28;
    *(void *)(v46 + 16) = v28;
    if ((v20 & 1) == 0 && *((void *)v13 + 2) == v40) {
      break;
    }
    unint64_t v15 = v28;
    unint64_t v16 = v28;
LABEL_21:
    if (v47 == v14 >> 14) {
      goto LABEL_30;
    }
  }
  unint64_t v16 = v28;
  unint64_t v15 = v28;
LABEL_30:
  if (v47 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v47 < v16 >> 14)
  {
LABEL_38:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v30 = String.subscript.getter();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  sub_10003F338((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003F4FC);
  uint64_t v37 = *((void *)*v41 + 2);
  sub_10003F410(v37, (uint64_t (*)(BOOL))sub_10003F4FC);
  int v13 = *v41;
  *((void *)v13 + 2) = v37 + 1;
  char v38 = &v13[32 * v37];
  *((void *)v38 + 4) = v30;
  *((void *)v38 + 5) = v32;
  *((void *)v38 + 6) = v34;
  *((void *)v38 + 7) = v36;
  *unsigned int v41 = v13;
LABEL_35:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_36:
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_10003F20C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_10003F338((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003F4FC);
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16);
    sub_10003F410(v14, (uint64_t (*)(BOOL))sub_10003F4FC);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + 16) = v14 + 1;
    unint64_t v16 = (void *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003F338(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *CFTypeRef v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *CFTypeRef v1 = result;
  }
  return result;
}

void *sub_10003F394()
{
  uint64_t v1 = *v0;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!result)
  {
    uint64_t result = sub_10003F85C(result, *(void *)(v1 + 16) + 1, 1, v1, &qword_1000A30D8, (void (*)(void, uint64_t, void *, uint64_t))sub_10003FDCC, (void (*)(uint64_t, uint64_t, void *))sub_100040390);
    uint64_t *v0 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_10003F410(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

void *sub_10003F458(void *result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_10003F85C((void *)(v2 > 1), (int64_t)result + 1, 1, *v1, &qword_1000A30D8, (void (*)(void, uint64_t, void *, uint64_t))sub_10003FDCC, (void (*)(uint64_t, uint64_t, void *))sub_100040390);
    *uint64_t v1 = (uint64_t)result;
  }
  return result;
}

void *sub_10003F4C8(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10003F85C(a1, a2, a3, a4, &qword_1000A3158, (void (*)(void, uint64_t, void *, uint64_t))sub_10003FA58, (void (*)(uint64_t, uint64_t, void *))sub_100040004);
}

char *sub_10003F4FC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000116B8(&qword_1000A2F68);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    sub_100040064((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003FB70(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

uint64_t sub_10003F5EC(char a1, int64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000116B8(&qword_1000A3068);
  uint64_t v10 = *(void *)(sub_1000116B8(&qword_1000A3E20) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1000116B8(&qword_1000A3E20) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    sub_1000402A4(a4 + v17, v8, v18, &qword_1000A3E20);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003FC68(0, v8, v18, a4);
  }
  return (uint64_t)v13;
}

void *sub_10003F828(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10003F85C(a1, a2, a3, a4, &qword_1000A30D8, (void (*)(void, uint64_t, void *, uint64_t))sub_10003FDCC, (void (*)(uint64_t, uint64_t, void *))sub_100040390);
}

void *sub_10003F85C(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    sub_1000116B8(a5);
    BOOL v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    BOOL v15 = &_swiftEmptyArrayStorage;
  }
  unint64_t v17 = v15 + 4;
  if (v10)
  {
    a7(a4 + 32, v13, v17);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    a6(0, v13, v17, a4);
  }
  return v15;
}

char *sub_10003F960(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000116B8(&qword_1000A2F38);
    char v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  if (v5)
  {
    sub_100040424((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003FEE4(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

uint64_t sub_10003FA58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000116B8(&qword_1000A3160);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003FB70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003FC68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_1000116B8(&qword_1000A3E20) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003FDCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000116B8(&qword_1000A30E0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003FEE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1000116B8(&qword_1000A2F40);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100040004(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    uint64_t result = (char *)sub_100050FEC();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100051010(a3, result);
  }
  return result;
}

char *sub_100040064(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void sub_1000400F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_100040104(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    uint64_t result = (char *)sub_100050FEC();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100051010(a3, result);
  }
  return result;
}

char *sub_10004016C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    uint64_t result = (char *)sub_100050FEC();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100051010(a3, result);
  }
  return result;
}

char *sub_1000401CC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    uint64_t result = (char *)sub_100050FEC();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100051010(a3, result);
  }
  return result;
}

char *sub_100040230(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    uint64_t result = (char *)sub_100050FEC();
    __break(1u);
  }
  else if (a3 != result || &result[80 * a2] <= a3)
  {
    return (char *)sub_100051010(a3, result);
  }
  return result;
}

void sub_100040298(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000402A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    sub_100050FEC();
    __break(1u);
  }
  else
  {
    sub_100051BC4();
    if (v8 && (sub_1000116B8(a4), sub_1000139D0(), v5 + *(void *)(v9 + 72) * v4 > v6))
    {
      if (v6 != v5)
      {
        sub_1000512F0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      sub_1000116B8(a4);
      sub_1000512F0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *sub_100040390(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100040424(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

void sub_1000404C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1000139C0();
    sub_100050FEC();
    __break(1u);
  }
  else
  {
    sub_100051BC4();
    if (v5 && (type metadata accessor for UUID(), sub_1000139D0(), v3 + *(void *)(v6 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_1000512F0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      type metadata accessor for UUID();
      sub_1000512F0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *sub_1000405A8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

unint64_t sub_10004063C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100040B60(a1, a2, v4);
}

unint64_t sub_1000406B4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100040C44(a1, v4);
}

unint64_t sub_1000406F8()
{
  sub_100051D04();
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  Swift::Int v1 = Hasher._finalize()();

  return sub_100040D0C(v0, v1);
}

unint64_t sub_100040760(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100040DA8(a1, v2);
}

unint64_t sub_100040814(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(void *)(a1 + *(int *)(v2 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + *(int *)(v2 + 24)));
  Swift::Int v3 = Hasher._finalize()();

  return sub_100040F08(a1, v3);
}

unint64_t sub_1000408F4(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = type metadata accessor for Relay.RapportSessionKey(0);
  Hasher._combine(_:)(*(void *)(a1 + *(int *)(v2 + 20)));
  Swift::Int v3 = Hasher._finalize()();

  return sub_1000410B0(a1, v3);
}

unint64_t sub_1000409C0(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v6 = Hasher._finalize()();

  return sub_100041244(a1, a2, a3, v6);
}

unint64_t sub_100040A64(void *a1)
{
  Hasher.init(_seed:)();
  sub_10003171C();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100041318(a1, v2);
}

unint64_t sub_100040AD0()
{
  sub_100051A44();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  sub_100051318();
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000414EC(v0, v1);
}

unint64_t sub_100040B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100040C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10004EDC4(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10002201C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100040D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100040DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SidecarIdentity() - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_1000468D0(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, (void (*)(void))type metadata accessor for SidecarIdentity);
      char v12 = static UUID.== infix(_:_:)();
      sub_100046880();
      if (v12) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100040F08(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1000468D0(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (void (*)(void))_s7SessionC8IdentityVMa);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && *(void *)&v8[*(int *)(v5 + 20)] == *(void *)(a1 + *(int *)(v5 + 20))
        && v8[*(int *)(v5 + 24)] == *(unsigned char *)(a1 + *(int *)(v5 + 24)))
      {
        break;
      }
      sub_100046880();
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_100046880();
  }
  return v10;
}

unint64_t sub_1000410B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1000468D0(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && *(void *)&v8[*(int *)(v5 + 20)] == *(void *)(a1 + *(int *)(v5 + 20)))
      {
        break;
      }
      sub_100046880();
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_100046880();
  }
  return v10;
}

unint64_t sub_100041244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = (void *)(v12 + 24 * v7);
      if (*v13 == a1)
      {
        BOOL v14 = v13[1] == a2 && v13[2] == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_100041318(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Relay.ConnectedSessionKey(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1000468D0(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
      if (*v8 == *a1)
      {
        uint64_t v13 = *(int *)(v5 + 20);
        BOOL v14 = (char *)v8 + v13;
        BOOL v15 = (char *)a1 + v13;
        if (static UUID.== infix(_:_:)())
        {
          uint64_t v16 = _s7SessionC8IdentityVMa(0);
          if (*(void *)&v14[*(int *)(v16 + 20)] == *(void *)&v15[*(int *)(v16 + 20)]
            && v14[*(int *)(v16 + 24)] == v15[*(int *)(v16 + 24)])
          {
            break;
          }
        }
      }
      sub_100046880();
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_100046880();
  }
  return v10;
}

unint64_t sub_1000414EC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_10003B620((uint64_t)&unk_1000A3020);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_1000416AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    Swift::Int v8 = *(void *)(v4 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
    uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v11 = v9 & ~v10;
    if ((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
    {
      type metadata accessor for Client();
      id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v18 = *v2;
        uint64_t v20 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100041A20();
          uint64_t v18 = v20;
        }
        uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
        sub_1000431A0(v11);
        *uint64_t v2 = v20;
        goto LABEL_12;
      }
      uint64_t v14 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v14;
        if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_9;
        }
      }
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  id v5 = a1;
  char v6 = __CocoaSet.contains(_:)();

  if ((v6 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v7 = sub_100041878();
LABEL_12:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100041878()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  sub_100043338(v3, v2, (uint64_t)&unk_1000A3030, (uint64_t)type metadata accessor for Client, v4, v5, v6, v7, v21, v22, v24);
  uint64_t v9 = v8;
  uint64_t v23 = v8;
  Swift::Int v10 = *(void *)(v8 + 40);
  swift_retain();
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    type metadata accessor for Client();
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = static NSObject.== infix(_:_:)();

    if (v15)
    {
LABEL_6:
      swift_release();
      uint64_t v19 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_1000431A0(v13);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v23;
        return v19;
      }
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100041A20()
{
  sub_1000518D0();
  uint64_t v1 = v0;
  sub_1000116B8(v2);
  uint64_t v3 = (void *)*v0;
  uint64_t v4 = static _SetStorage.copy(original:)();
  if (!v3[2])
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v4;
    sub_1000516E4();
    return;
  }
  sub_100051B64();
  uint64_t v6 = v3 + 7;
  unint64_t v8 = (unint64_t)(v7 + 63) >> 6;
  if ((void *)v4 != v3 || v5 >= &v3[v8 + 7]) {
    memmove(v5, v3 + 7, 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v4 + 16) = v3[2];
  sub_100051B64();
  uint64_t v12 = v3[7];
  uint64_t v13 = -1;
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = v22 + (v10 << 6))
  {
    uint64_t v23 = *(void **)(v3[6] + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v23;
    id v24 = v23;
    if (v14) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15) {
      goto LABEL_28;
    }
    ++v10;
    if (!v6[v18])
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      if (!v6[v10])
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        if (!v6[v10]) {
          break;
        }
      }
    }
LABEL_25:
    sub_100051988();
    unint64_t v14 = v21 & v20;
  }
  int64_t v19 = v18 + 3;
  if (v19 >= v15) {
    goto LABEL_28;
  }
  if (v6[v19])
  {
    int64_t v10 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    ++v19;
    if (v6[v10]) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
}

void *sub_100041BAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000116B8((uint64_t *)&unk_1000A3048);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  id v24 = v1;
  unint64_t v25 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v25, 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v15 = -1;
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  unint64_t v16 = v15 & v14;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  if ((v15 & v14) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    unint64_t v22 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v22, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v22, v5, v2);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v26) {
        goto LABEL_28;
      }
      unint64_t v20 = *((void *)v25 + v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v26) {
          goto LABEL_28;
        }
        unint64_t v20 = *((void *)v25 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v16 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v26)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  unint64_t v20 = *((void *)v25 + v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v25 + v12);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100041E5C()
{
  uint64_t v1 = v0;
  sub_1000116B8(&qword_1000A2F18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    unint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *unint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100042010()
{
  sub_100051280();
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  sub_1000116B8(v3);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  if (!v2[2])
  {
    swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    sub_10005122C();
    return;
  }
  uint64_t v29 = v0;
  sub_100051B64();
  uint64_t v6 = v2 + 7;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v2[7];
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v4 + 56;
  swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = v18 + (v11 << 6))
  {
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(v2[6] + 8 * i);
    unint64_t v21 = NSObject._rawHashValue(seed:)(v19) & ~(-1 << *(unsigned char *)(v4 + 32));
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) == 0)
    {
      sub_100051548();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        BOOL v25 = v23 == v24;
        if (v23 == v24) {
          uint64_t v23 = 0;
        }
        v22 |= v25;
        if (*(void *)(v10 + 8 * v23) != -1)
        {
          sub_1000514A0();
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    sub_1000514B4();
LABEL_30:
    sub_100051AB8();
    *(void *)(v10 + v26) |= v27;
    *(void *)(*(void *)(v4 + 48) + 8 * v28) = v20;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    ++v11;
    if (!v6[v14])
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_32;
      }
      if (!v6[v11])
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_32;
        }
        if (!v6[v11]) {
          break;
        }
      }
    }
LABEL_20:
    sub_100051988();
    unint64_t v8 = v17 & v16;
  }
  int64_t v15 = v14 + 3;
  if (v15 >= v9)
  {
LABEL_32:
    sub_100013D9C();
    uint64_t v1 = v29;
    goto LABEL_34;
  }
  if (v6[v15])
  {
    int64_t v11 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_32;
    }
    ++v15;
    if (v6[v11]) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_100042228()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000116B8((uint64_t *)&unk_1000A3048);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_10003B620((uint64_t)&unk_1000A1910);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000425D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000116B8(&qword_1000A2F18);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_100042880()
{
  sub_100051280();
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000116B8(v3);
  uint64_t v4 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v4;
  if (*(void *)(v2 + 16))
  {
    int64_t v29 = v0;
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v7 = (void *)(v2 + 56);
    if (v6 < 64) {
      uint64_t v8 = ~(-1 << v6);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v11 = v4 + 56;
    swift_retain();
    int64_t v12 = 0;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = v19 + (v12 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      unint64_t v21 = NSObject._rawHashValue(seed:)(*(void *)(v5 + 40)) & ~(-1 << *(unsigned char *)(v5 + 32));
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        sub_100051548();
        while (++v24 != v25 || (v23 & 1) == 0)
        {
          BOOL v26 = v24 == v25;
          if (v24 == v25) {
            uint64_t v24 = 0;
          }
          v23 |= v26;
          if (*(void *)(v11 + 8 * v24) != -1)
          {
            sub_1000514A0();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      sub_1000514B4();
LABEL_30:
      *(void *)(v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v5 + 48) + 8 * v22) = v20;
      ++*(void *)(v5 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v10) {
        goto LABEL_32;
      }
      ++v12;
      if (!v7[v15])
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v10) {
          goto LABEL_32;
        }
        if (!v7[v12])
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v10) {
            goto LABEL_32;
          }
          if (!v7[v12])
          {
            int64_t v16 = v15 + 3;
            if (v16 >= v10)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v29;
              sub_100051B64();
              if (v27 > 63)
              {
                sub_10004358C(0, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else
              {
                sub_100051B30();
                void *v7 = v28;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            if (!v7[v16])
            {
              while (1)
              {
                int64_t v12 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v10) {
                  goto LABEL_32;
                }
                ++v16;
                if (v7[v12]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v16;
          }
        }
      }
LABEL_20:
      sub_100051988();
      unint64_t v9 = v18 & v17;
    }
  }
  swift_release();
  *uint64_t v1 = v5;
  sub_10005122C();
}

uint64_t sub_100042ACC()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unsigned int v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000116B8((uint64_t *)&unk_1000A3048);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_10003B620((uint64_t)&unk_1000A1910);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_10004358C(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100042EC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000116B8(&qword_1000A2F18);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *unint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_10004358C(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *char v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1000431A0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_15:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            BOOL v19 = v2 != v6 || v17 >= v18 + 1;
            int64_t v2 = v6;
            if (v19)
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_100043338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_10005189C();
  if (!v13)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  int64_t v14 = v12;
  sub_1000116B8(v11);
  uint64_t v26 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
LABEL_18:
    sub_100051880();
    return;
  }
  v14(0);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v15 = v26;
    if (*(void *)(v26 + 24) <= *(void *)(v26 + 16))
    {
      sub_100042880();
      uint64_t v15 = v26;
    }
    Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
    uint64_t v17 = v15 + 56;
    uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v19 = v16 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v15 + 56 + 8 * (v19 >> 6))) == 0) {
      break;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v15 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v15 + 48) + 8 * v21) = a11;
    ++*(void *)(v15 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v22 = 0;
  unint64_t v23 = (unint64_t)(63 - v18) >> 6;
  while (++v20 != v23 || (v22 & 1) == 0)
  {
    BOOL v24 = v20 == v23;
    if (v20 == v23) {
      unint64_t v20 = 0;
    }
    v22 |= v24;
    uint64_t v25 = *(void *)(v17 + 8 * v20);
    if (v25 != -1)
    {
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
}

unint64_t sub_10004350C(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  sub_100051B30();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_10004358C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

#error "10004360C: call analysis failed (funcsize=62)"

#error "1000436FC: call analysis failed (funcsize=59)"

#error "1000437D8: call analysis failed (funcsize=50)"

#error "1000438B0: call analysis failed (funcsize=57)"

#error "1000439A4: call analysis failed (funcsize=57)"

uint64_t sub_100043A58@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain();
  Swift::UInt v7 = sub_100013A10();
  unint64_t v9 = sub_1000409C0(v7, v8, a1);
  uint64_t result = sub_100051C9C();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t v12 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    Swift::Int v13 = *(void *)(v12 + 24);
    sub_1000116B8(&qword_1000A3130);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v14 = *(void *)(v20 + 56) + 40 * v9;
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    long long v19 = *(_OWORD *)(v14 + 24);
    sub_100012740();
    _NativeDictionary._delete(at:)();
    uint64_t *v3 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    long long v18 = v19;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v18 = 0uLL;
  }
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(_OWORD *)(a2 + 24) = v18;
  return result;
}

#error "100043C14: call analysis failed (funcsize=96)"

uint64_t sub_100043D30(uint64_t a1, uint64_t a2)
{
  return sub_100043E58(a1, a2, &unk_1000A30A8, &qword_1000A30B0);
}

#error "100043DA4: call analysis failed (funcsize=67)"

#error "100043EB8: call analysis failed (funcsize=51)"

#error "100043F90: call analysis failed (funcsize=56)"

#error "100044040: call analysis failed (funcsize=23)"

uint64_t sub_100044068()
{
  sub_100051620();
  uint64_t v0 = (_OWORD *)sub_1000510FC();
  uint64_t v3 = sub_1000453F0(v0, v1, v2);
  sub_10005121C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000440B4()
{
  sub_100051620();
  uint64_t v0 = sub_1000510FC();
  uint64_t v3 = sub_100045528(v0, v1, v2);
  sub_10005121C(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100044100()
{
  sub_100051620();
  uint64_t v0 = sub_1000510FC();
  uint64_t v3 = sub_100045AF0(v0, v1, v2);
  sub_10005121C(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

#error "100044178: call analysis failed (funcsize=21)"

#error "1000441D4: call analysis failed (funcsize=23)"

uint64_t sub_1000441FC(uint64_t a1, uint64_t a2)
{
  return sub_100044214(a1, a2, sub_100045F88);
}

#error "100044248: call analysis failed (funcsize=23)"

#error "1000442C0: call analysis failed (funcsize=30)"

#error "100044314: call analysis failed (funcsize=21)"

uint64_t sub_10004433C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000116B8(&qword_1000A30E8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    int v23 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * i);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    BOOL v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *BOOL v32 = v22;
    v32[1] = v21;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v35)
    {
      swift_release();
      uint64_t v3 = v34;
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v35) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v35)
  {
    unint64_t v18 = *(void *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v35) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v36 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v34;
LABEL_34:
  if (v37)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_10004358C(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100044638(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000116B8(&qword_1000A30F8);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v39 = v5;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      unint64_t v22 = *(void *)(v5 + 56) + (i << 6);
      char v45 = *(unsigned char *)(v22 + 12);
      int v46 = *(_DWORD *)(v22 + 8);
      uint64_t v23 = *(void *)(v22 + 24);
      uint64_t v24 = *(void *)(v22 + 40);
      uint64_t v43 = *(void *)(v22 + 32);
      uint64_t v44 = *(void *)(v22 + 16);
      uint64_t v25 = *(void *)(v22 + 56);
      uint64_t v41 = *(void *)v22;
      uint64_t v42 = *(void *)(v22 + 48);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t v34 = (void *)(*(void *)(v7 + 48) + 16 * v29);
      *uint64_t v34 = v20;
      v34[1] = v21;
      unint64_t v35 = *(void *)(v7 + 56) + (v29 << 6);
      *(void *)unint64_t v35 = v41;
      *(_DWORD *)(v35 + 8) = v46;
      *(unsigned char *)(v35 + 12) = v45;
      *(void *)(v35 + 16) = v44;
      *(void *)(v35 + 24) = v23;
      *(void *)(v35 + 32) = v43;
      *(void *)(v35 + 40) = v24;
      *(void *)(v35 + 48) = v42;
      *(void *)(v35 + 56) = v25;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_39;
      }
      if (v16 >= v37) {
        goto LABEL_32;
      }
      unint64_t v17 = v38[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v37) {
          goto LABEL_32;
        }
        unint64_t v17 = v38[v13];
        if (!v17)
        {
          int64_t v18 = v16 + 2;
          if (v18 >= v37)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v2;
            if (v40)
            {
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                sub_10004358C(0, (unint64_t)(v36 + 63) >> 6, v38);
              }
              else {
                void *v38 = -1 << v36;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          unint64_t v17 = v38[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_40;
              }
              if (v13 >= v37) {
                goto LABEL_32;
              }
              unint64_t v17 = v38[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_18:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10004499C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000116B8(&qword_1000A3108);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t v34 = (void *)(*(void *)(v7 + 48) + 16 * v29);
    *uint64_t v34 = v22;
    v34[1] = v21;
    unint64_t v35 = (void *)(*(void *)(v7 + 56) + 16 * v29);
    *unint64_t v35 = v24;
    v35[1] = v25;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v38)
    {
      swift_release();
      uint64_t v3 = v37;
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v39 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v38) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v39 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v38)
  {
    unint64_t v18 = *(void *)(v39 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v38) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v39 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v37;
LABEL_34:
  if (v40)
  {
    uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
    if (v36 >= 64) {
      sub_10004358C(0, (unint64_t)(v36 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v36;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100044CAC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000116B8(&qword_1000A3120);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    BOOL v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *BOOL v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v35)
    {
      swift_release();
      uint64_t v3 = v34;
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v35) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v35)
  {
    unint64_t v18 = *(void *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v35) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v36 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v34;
LABEL_34:
  if (v37)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_10004358C(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100044FA8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000116B8(&qword_1000A30C8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    BOOL v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *BOOL v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_10004358C(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

_OWORD *sub_1000452B0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10004063C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000116B8(&qword_1000A2EB8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10004063C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (_OWORD *)(v20[7] + 32 * v16);
    sub_1000136EC((uint64_t)v21);
    return sub_10001309C(a1, v21);
  }
  else
  {
    sub_100046798(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

_OWORD *sub_1000453F0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1000406B4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000116B8((uint64_t *)&unk_1000A3080);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1000406B4(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    char v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_1000136EC((uint64_t)v19);
    return sub_10001309C(a1, v19);
  }
  else
  {
    sub_10004EDC4(a2, (uint64_t)v21);
    return sub_100046804(v14, (uint64_t)v21, a1, v18);
  }
}

uint64_t sub_100045528(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1000406F8();
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000116B8(&qword_1000A3148);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1000406F8();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    type metadata accessor for Relay.Session(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_100046924(v14, a2, a1, v18);
    return swift_retain();
  }
  return result;
}

uint64_t sub_100045640(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Relay.RapportSessionKey(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v12 = sub_1000408F4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_1000116B8(&qword_1000A2EC8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_1000408F4(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = v21[7];
    uint64_t result = swift_release();
    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_1000468D0(a2, (uint64_t)v10, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
    return sub_100046BBC(v17, (uint64_t)v10, a1, v21, type metadata accessor for Relay.RapportSessionKey, (void (*)(void))type metadata accessor for Relay.RapportSessionKey);
  }
  return result;
}

uint64_t sub_1000457D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v12 = sub_100040814(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_1000116B8(&qword_1000A2EA0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_100040814(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = v21[7];
    uint64_t result = swift_release();
    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_1000468D0(a2, (uint64_t)v10, (void (*)(void))_s7SessionC8IdentityVMa);
    return sub_100046BBC(v17, (uint64_t)v10, a1, v21, _s7SessionC8IdentityVMa, (void (*)(void))_s7SessionC8IdentityVMa);
  }
  return result;
}

uint64_t sub_100045960(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Relay.ConnectedSessionKey(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v12 = sub_100040A64(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_1000116B8(&qword_1000A3138);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_100040A64(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = v21[7];
    uint64_t result = swift_release();
    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_1000468D0((uint64_t)a2, (uint64_t)v10, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    return sub_100046BBC(v17, (uint64_t)v10, a1, v21, type metadata accessor for Relay.ConnectedSessionKey, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
  }
  return result;
}

uint64_t sub_100045AF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100040AD0();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1000116B8(&qword_1000A3018);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100040AD0();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t v24 = v23 + *(void *)(*(void *)(_s7SessionC8IdentityVMa(0) - 8) + 72) * v18;
    return sub_10004F614(a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100046968(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t sub_100045CC4(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v13 = sub_1000409C0(a2, a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1000116B8(&qword_1000A3130);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1000409C0(a2, a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = v22[7] + 40 * v18;
    uint64_t result = swift_release();
    long long v25 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a1;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(v23 + 32) = *(void *)(a1 + 32);
  }
  else
  {
    sub_100046A58(v18, a2, a3, a4, a1, v22);
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100045E24()
{
  sub_10001394C();
  uint64_t v3 = v2;
  uint64_t v4 = (void **)v0;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for SidecarIdentity();
  sub_1000139D0();
  __chkstk_darwin(v11);
  sub_100018DA8();
  unint64_t v12 = (void *)*v0;
  unint64_t v13 = sub_100040760(v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1000116B8(v3);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, v17))
  {
    unint64_t v20 = sub_100040760(v8);
    if ((v19 & 1) == (v21 & 1))
    {
      unint64_t v18 = v20;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    swift_release();
    *(void *)(v23 + 8 * v18) = v10;
  }
  else
  {
    sub_1000468D0(v8, v1, (void (*)(void))type metadata accessor for SidecarIdentity);
    unint64_t v24 = sub_100051590();
    sub_100046BBC(v24, v25, v10, v22, v26, v27);
  }
  sub_100013964();
}

uint64_t sub_100045F88(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100040AD0();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1000116B8(&qword_1000A30A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100040AD0();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100046ABC(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

void sub_100046118(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10004063C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000116B8(&qword_1000A3070);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10004063C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];

    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100046B74(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain();
  }
}

void sub_100046240(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void *)*v3;
  unint64_t v12 = sub_100040814(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_1000116B8(&qword_1000A2ED8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_100040814(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = v21[7];

    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_1000468D0(a2, (uint64_t)v10, (void (*)(void))_s7SessionC8IdentityVMa);
    sub_100046BBC(v17, (uint64_t)v10, a1, v21, _s7SessionC8IdentityVMa, (void (*)(void))_s7SessionC8IdentityVMa);
  }
}

uint64_t sub_1000463D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10004063C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000116B8(&qword_1000A2EE0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10004063C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  char v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100046B74(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000464F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  char v12 = (void *)*v5;
  unint64_t v13 = sub_10004063C(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_1000116B8(&qword_1000A3008);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10004063C(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 16 * v18);
    uint64_t result = swift_release();
    *uint64_t v23 = a1;
    v23[1] = a2;
  }
  else
  {
    sub_100046C68(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100046638(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003B620((uint64_t)&unk_1000A1910);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v6 = _s7SessionC8IdentityVMa(0);
  Hasher._combine(_:)(*(void *)(a1 + *(int *)(v6 + 20)));
  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + *(int *)(v6 + 24)));
  Hasher._finalize()();
  unint64_t v7 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
  uint64_t result = sub_10004DD54(a1, a3[6] + *(void *)(*(void *)(v6 - 8) + 72) * v7, (void (*)(void))_s7SessionC8IdentityVMa);
  *(void *)(a3[7] + 8 * v7) = a2;
  ++a3[2];
  return result;
}

_OWORD *sub_100046798(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10001309C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_100046804(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10001309C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_100046880()
{
  uint64_t v1 = sub_100051C28();
  v2(v1);
  sub_1000139D0();
  sub_1000139EC();
  v3();
  return v0;
}

uint64_t sub_1000468D0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000139D0();
  uint64_t v4 = sub_100013EF4();
  v5(v4);
  return a2;
}

unint64_t sub_100046924(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100046968(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = _s7SessionC8IdentityVMa(0);
  uint64_t result = sub_10004DD54(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (void (*)(void))_s7SessionC8IdentityVMa);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_100046A58(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 24 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  uint64_t v7 = a6[7] + 40 * result;
  long long v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  *(void *)(v7 + 32) = *(void *)(a5 + 32);
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t sub_100046ABC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100046B74(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100046BBC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), void (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  uint64_t result = sub_10004DD54(a2, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

unint64_t sub_100046C68(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  void *v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void *sub_100046CB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000116B8(&qword_1000A3EE0);
  uint64_t v3 = *(void *)(sub_1000116B8(&qword_1000A30B8) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_1000116B8(&qword_1000A30B8) - 8);
      uint64_t v10 = sub_10004ABD4(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_10004EE20();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100046E48(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v5 = (_DWORD *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v5 - 2);
    uint64_t v6 = *((void *)v5 - 1);
    int v8 = *v5;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_10004063C(v7, v6);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v15 = v10;
    if (v9[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000116B8(&qword_1000A30F0);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    unint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    char v19 = (uint64_t *)(v18[6] + 16 * v11);
    *char v19 = v7;
    v19[1] = v6;
    *(_DWORD *)(v18[7] + 4 * v11) = v8;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v5 += 6;
    uint64_t v18[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_10004433C(v14, a2 & 1);
  unint64_t v16 = sub_10004063C(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_1000116B8((uint64_t *)&unk_1000A2FF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x800000010007FA00;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100047110(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v33 = v5;
  if (!v5) {
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v32 = v4;
  while (1)
  {
    if (v7 >= *(void *)(v4 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v8 = *(void *)(v4 + v6 + 32);
    uint64_t v9 = *(void *)(v4 + v6 + 40);
    uint64_t v10 = *(void *)(v4 + v6 + 48);
    char v40 = *(unsigned char *)(v4 + v6 + 60);
    int v41 = *(_DWORD *)(v4 + v6 + 56);
    uint64_t v11 = *(void *)(v4 + v6 + 72);
    uint64_t v12 = *(void *)(v4 + v6 + 88);
    uint64_t v38 = *(void *)(v4 + v6 + 80);
    uint64_t v39 = *(void *)(v4 + v6 + 64);
    uint64_t v13 = *(void *)(v4 + v6 + 104);
    uint64_t v37 = *(void *)(v4 + v6 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v9) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v34 = v13;
    uint64_t v35 = v12;
    uint64_t v36 = v11;
    uint64_t v14 = (void *)*a3;
    unint64_t v16 = sub_10004063C(v8, v9);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_21;
    }
    char v20 = v15;
    if (v14[3] < v19) {
      break;
    }
    if (a2)
    {
      if (v15) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_1000116B8(&qword_1000A3100);
      _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    Swift::String v24 = (uint64_t *)(v23[6] + 16 * v16);
    uint64_t *v24 = v8;
    v24[1] = v9;
    unint64_t v25 = v23[7] + (v16 << 6);
    *(void *)unint64_t v25 = v10;
    *(_DWORD *)(v25 + 8) = v41;
    *(unsigned char *)(v25 + 12) = v40;
    *(void *)(v25 + 16) = v39;
    *(void *)(v25 + 24) = v36;
    *(void *)(v25 + 32) = v38;
    *(void *)(v25 + 40) = v35;
    *(void *)(v25 + 48) = v37;
    *(void *)(v25 + 56) = v34;
    uint64_t v26 = v23[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_22;
    }
    ++v7;
    v23[2] = v28;
    v6 += 80;
    a2 = 1;
    uint64_t v4 = v32;
    if (v33 == v7) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100044638(v19, a2 & 1);
  unint64_t v21 = sub_10004063C(v8, v9);
  if ((v20 & 1) != (v22 & 1)) {
    goto LABEL_23;
  }
  unint64_t v16 = v21;
  if ((v20 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_1000116B8((uint64_t *)&unk_1000A2FF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v30._object = (void *)0x800000010007FA00;
  v30._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v30);
  _print_unlocked<A, B>(_:_:)();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100047484(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  while (1)
  {
    uint64_t v7 = *(v5 - 3);
    uint64_t v6 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_10004063C(v7, v6);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000116B8((uint64_t *)&unk_1000A3110);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    char v20 = (uint64_t *)(v19[6] + 16 * v12);
    uint64_t *v20 = v7;
    v20[1] = v6;
    unint64_t v21 = (void *)(v19[7] + 16 * v12);
    void *v21 = v9;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v5 += 4;
    _OWORD v19[2] = v24;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_10004499C(v15, a2 & 1);
  unint64_t v17 = sub_10004063C(v7, v6);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_1000116B8((uint64_t *)&unk_1000A2FF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x800000010007FA00;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)();
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100047768(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v7 = *(v5 - 2);
    uint64_t v6 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_10004063C(v7, v6);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v15 = v10;
    if (v9[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000116B8(&qword_1000A3128);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    char v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v19 = (uint64_t *)(v18[6] + 16 * v11);
    *uint64_t v19 = v7;
    v19[1] = v6;
    *(void *)(v18[7] + 8 * v11) = v8;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v5 += 3;
    uint64_t v18[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100044CAC(v14, a2 & 1);
  unint64_t v16 = sub_10004063C(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_1000116B8((uint64_t *)&unk_1000A2FF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x800000010007FA00;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100047A30(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  for (unint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    uint64_t v7 = *(i - 2);
    uint64_t v6 = *(i - 1);
    uint64_t v8 = *i;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_10004063C(v7, v6);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v15 = v10;
    if (v9[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1000116B8(&qword_1000A30D0);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    char v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v19 = (uint64_t *)(v18[6] + 16 * v11);
    *uint64_t v19 = v7;
    v19[1] = v6;
    *(void *)(v18[7] + 8 * v11) = v8;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    uint64_t v18[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100044FA8(v14, a2 & 1);
  unint64_t v16 = sub_10004063C(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_1000116B8((uint64_t *)&unk_1000A2FF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x800000010007FA00;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100047D08(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v129 = *(void *)(v4 - 8);
  uint64_t v130 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v126 = (uint64_t)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v136 = (uint64_t)&v119 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v133 = (uint64_t)&v119 - v10;
  __chkstk_darwin(v9);
  uint64_t v132 = (uint64_t)&v119 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12) {
        sub_10004976C(0, v12, 1, a1);
      }
      return;
    }
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  Swift::Int v14 = v13;
  uint64_t v122 = sub_100060020(v12 / 2);
  uint64_t v123 = v12;
  unint64_t v128 = v15;
  if (v12 <= 0)
  {
    char v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v60 = _swiftEmptyArrayStorage[2];
LABEL_104:
    if (v60 < 2) {
      goto LABEL_118;
    }
    uint64_t v111 = *a1;
    while (1)
    {
      unint64_t v112 = v60 - 2;
      if (v60 < 2) {
        break;
      }
      if (!v111) {
        goto LABEL_150;
      }
      unint64_t v113 = v17;
      long long v114 = v17 + 32;
      uint64_t v115 = *(void *)&v17[16 * v112 + 32];
      uint64_t v116 = *(void *)&v17[16 * v60 + 24];
      sub_100049E4C(v111 + *(void *)(v129 + 72) * v115, v111 + *(void *)(v129 + 72) * *(void *)&v114[16 * v60 - 16], v111 + *(void *)(v129 + 72) * v116, v128);
      if (v2) {
        goto LABEL_116;
      }
      if (v116 < v115) {
        goto LABEL_137;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v113 = sub_10004ABAC((uint64_t)v113);
      }
      if (v112 >= *((void *)v113 + 2)) {
        goto LABEL_138;
      }
      uint64_t v117 = &v113[16 * v112 + 32];
      *(void *)uint64_t v117 = v115;
      *((void *)v117 + 1) = v116;
      unint64_t v118 = *((void *)v113 + 2);
      if (v60 > v118) {
        goto LABEL_139;
      }
      char v17 = v113;
      memmove(&v113[16 * v60 + 16], &v113[16 * v60 + 32], 16 * (v118 - v60));
      *((void *)v113 + 2) = v118 - 1;
      unint64_t v60 = v118 - 1;
      if (v118 <= 2) {
        goto LABEL_118;
      }
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  Swift::Int v121 = v14;
  Swift::Int v16 = 0;
  char v17 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v18 = v12;
  char v135 = a1;
  while (1)
  {
    Swift::Int v19 = v16;
    Swift::Int v20 = v16 + 1;
    Swift::Int v127 = v16;
    if (v16 + 1 >= v18)
    {
      Swift::Int v37 = v16 + 1;
    }
    else
    {
      uint64_t v124 = v2;
      uint64_t v21 = *a1;
      uint64_t v22 = *(void *)(v129 + 72);
      uint64_t v23 = v132;
      sub_100012ED8(*a1 + v22 * v20, v132, &qword_1000A3E20);
      uint64_t v24 = v21 + v22 * v19;
      uint64_t v25 = v133;
      sub_100012ED8(v24, v133, &qword_1000A3E20);
      LODWORD(v134) = static Date.< infix(_:_:)();
      uint64_t v26 = v25;
      Swift::Int v19 = v127;
      sub_1000131C8(v26, &qword_1000A3E20);
      sub_1000131C8(v23, &qword_1000A3E20);
      Swift::Int v27 = v19 + 2;
      uint64_t v137 = v22;
      uint64_t v131 = v21;
      if (v19 + 2 >= v18)
      {
        Swift::Int v30 = v19 + 2;
        uint64_t v36 = v22;
      }
      else
      {
        uint64_t v28 = v22 * v20;
        uint64_t v29 = v21;
        Swift::Int v30 = v27;
        uint64_t v31 = v22 * v27;
        while (1)
        {
          Swift::Int v32 = v18;
          uint64_t v33 = v132;
          sub_100012ED8(v29 + v31, v132, &qword_1000A3E20);
          uint64_t v34 = v133;
          sub_100012ED8(v29 + v28, v133, &qword_1000A3E20);
          int v35 = static Date.< infix(_:_:)();
          sub_1000131C8(v34, &qword_1000A3E20);
          sub_1000131C8(v33, &qword_1000A3E20);
          if ((v134 ^ v35)) {
            break;
          }
          uint64_t v36 = v137;
          v29 += v137;
          ++v30;
          Swift::Int v18 = v32;
          if (v30 >= v32)
          {
            Swift::Int v30 = v32;
            a1 = v135;
            Swift::Int v19 = v127;
            goto LABEL_13;
          }
        }
        a1 = v135;
        Swift::Int v19 = v127;
        Swift::Int v18 = v32;
        uint64_t v36 = v137;
      }
LABEL_13:
      if (v134)
      {
        if (v30 < v19) {
          goto LABEL_143;
        }
        Swift::Int v37 = v30;
        if (v19 < v30)
        {
          Swift::Int v134 = v18;
          uint64_t v120 = v17;
          uint64_t v38 = 0;
          uint64_t v39 = v36 * (v30 - 1);
          uint64_t v40 = v30 * v36;
          uint64_t v41 = v19 * v36;
          uint64_t v42 = v131;
          do
          {
            if (v19 != v37 + v38 - 1)
            {
              if (!v42) {
                goto LABEL_149;
              }
              sub_10004F8D8(v42 + v41, v126, &qword_1000A3E20);
              if (v41 < v39 || v42 + v41 >= (unint64_t)(v42 + v40))
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v41 != v39)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_10004F8D8(v126, v42 + v39, &qword_1000A3E20);
              a1 = v135;
              Swift::Int v37 = v30;
              uint64_t v36 = v137;
            }
            ++v19;
            --v38;
            v39 -= v36;
            v40 -= v36;
            v41 += v36;
          }
          while (v19 < v37 + v38);
          char v17 = v120;
          uint64_t v2 = v124;
          Swift::Int v19 = v127;
          Swift::Int v18 = v134;
          goto LABEL_32;
        }
      }
      else
      {
        Swift::Int v37 = v30;
      }
      uint64_t v2 = v124;
    }
LABEL_32:
    if (v37 < v18)
    {
      if (__OFSUB__(v37, v19)) {
        goto LABEL_141;
      }
      if (v37 - v19 < v121)
      {
        if (__OFADD__(v19, v121)) {
          goto LABEL_144;
        }
        if (v19 + v121 >= v18) {
          Swift::Int v44 = v18;
        }
        else {
          Swift::Int v44 = v19 + v121;
        }
        if (v44 < v19) {
          goto LABEL_145;
        }
        if (v37 != v44)
        {
          uint64_t v120 = v17;
          uint64_t v124 = v2;
          Swift::Int v125 = v44;
          uint64_t v45 = *(void *)(v129 + 72);
          uint64_t v137 = v45 * (v37 - 1);
          uint64_t v131 = v45;
          Swift::Int v46 = v37 * v45;
          do
          {
            uint64_t v47 = 0;
            Swift::Int v134 = v37;
            while (1)
            {
              uint64_t v48 = *a1;
              Swift::Int v49 = v46;
              uint64_t v50 = v46 + v47 + *a1;
              uint64_t v51 = a1;
              uint64_t v52 = v132;
              sub_100012ED8(v50, v132, &qword_1000A3E20);
              uint64_t v53 = v133;
              sub_100012ED8(v137 + v47 + v48, v133, &qword_1000A3E20);
              LOBYTE(v48) = static Date.< infix(_:_:)();
              sub_1000131C8(v53, &qword_1000A3E20);
              sub_1000131C8(v52, &qword_1000A3E20);
              if ((v48 & 1) == 0) {
                break;
              }
              uint64_t v54 = *v51;
              if (!*v51) {
                goto LABEL_147;
              }
              Swift::Int v46 = v49;
              uint64_t v55 = v54 + v137 + v47;
              sub_10004F8D8(v54 + v49 + v47, v136, &qword_1000A3E20);
              swift_arrayInitWithTakeFrontToBack();
              sub_10004F8D8(v136, v55, &qword_1000A3E20);
              v47 -= v131;
              ++v19;
              Swift::Int v56 = v134;
              a1 = v135;
              if (v134 == v19) {
                goto LABEL_48;
              }
            }
            Swift::Int v56 = v134;
            a1 = v51;
            Swift::Int v46 = v49;
LABEL_48:
            Swift::Int v37 = v56 + 1;
            v137 += v131;
            v46 += v131;
            Swift::Int v19 = v127;
          }
          while (v37 != v125);
          Swift::Int v37 = v125;
          uint64_t v2 = v124;
          char v17 = v120;
        }
      }
    }
    if (v37 < v19) {
      goto LABEL_140;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v134 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      char v17 = sub_10004AAB4(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v59 = *((void *)v17 + 2);
    unint64_t v58 = *((void *)v17 + 3);
    unint64_t v60 = v59 + 1;
    if (v59 >= v58 >> 1) {
      char v17 = sub_10004AAB4((char *)(v58 > 1), v59 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v60;
    uint64_t v61 = v17 + 32;
    uint64_t v62 = &v17[16 * v59 + 32];
    Swift::Int v63 = v134;
    *(void *)uint64_t v62 = v19;
    *((void *)v62 + 1) = v63;
    if (v59) {
      break;
    }
    unint64_t v60 = 1;
LABEL_98:
    Swift::Int v18 = a1[1];
    Swift::Int v16 = v134;
    if (v134 >= v18) {
      goto LABEL_104;
    }
  }
  while (1)
  {
    unint64_t v64 = v60 - 1;
    if (v60 >= 4)
    {
      __int16 v69 = &v61[16 * v60];
      uint64_t v70 = *((void *)v69 - 8);
      uint64_t v71 = *((void *)v69 - 7);
      BOOL v75 = __OFSUB__(v71, v70);
      uint64_t v72 = v71 - v70;
      if (v75) {
        goto LABEL_125;
      }
      uint64_t v74 = *((void *)v69 - 6);
      uint64_t v73 = *((void *)v69 - 5);
      BOOL v75 = __OFSUB__(v73, v74);
      uint64_t v67 = v73 - v74;
      char v68 = v75;
      if (v75) {
        goto LABEL_126;
      }
      unint64_t v76 = v60 - 2;
      char v77 = &v61[16 * v60 - 32];
      uint64_t v79 = *(void *)v77;
      uint64_t v78 = *((void *)v77 + 1);
      BOOL v75 = __OFSUB__(v78, v79);
      uint64_t v80 = v78 - v79;
      if (v75) {
        goto LABEL_127;
      }
      BOOL v75 = __OFADD__(v67, v80);
      uint64_t v81 = v67 + v80;
      if (v75) {
        goto LABEL_129;
      }
      if (v81 >= v72)
      {
        unint64_t v99 = &v61[16 * v64];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v75 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v75) {
          goto LABEL_135;
        }
        BOOL v92 = v67 < v102;
        goto LABEL_87;
      }
    }
    else
    {
      if (v60 != 3)
      {
        uint64_t v93 = *((void *)v17 + 4);
        uint64_t v94 = *((void *)v17 + 5);
        BOOL v75 = __OFSUB__(v94, v93);
        uint64_t v86 = v94 - v93;
        char v87 = v75;
        goto LABEL_81;
      }
      uint64_t v66 = *((void *)v17 + 4);
      uint64_t v65 = *((void *)v17 + 5);
      BOOL v75 = __OFSUB__(v65, v66);
      uint64_t v67 = v65 - v66;
      char v68 = v75;
    }
    if (v68) {
      goto LABEL_128;
    }
    unint64_t v76 = v60 - 2;
    unint64_t v82 = &v61[16 * v60 - 32];
    uint64_t v84 = *(void *)v82;
    uint64_t v83 = *((void *)v82 + 1);
    BOOL v85 = __OFSUB__(v83, v84);
    uint64_t v86 = v83 - v84;
    char v87 = v85;
    if (v85) {
      goto LABEL_130;
    }
    uint64_t v88 = &v61[16 * v64];
    uint64_t v90 = *(void *)v88;
    uint64_t v89 = *((void *)v88 + 1);
    BOOL v75 = __OFSUB__(v89, v90);
    uint64_t v91 = v89 - v90;
    if (v75) {
      goto LABEL_132;
    }
    if (__OFADD__(v86, v91)) {
      goto LABEL_134;
    }
    if (v86 + v91 >= v67)
    {
      BOOL v92 = v67 < v91;
LABEL_87:
      if (v92) {
        unint64_t v64 = v76;
      }
      goto LABEL_89;
    }
LABEL_81:
    if (v87) {
      goto LABEL_131;
    }
    uint64_t v95 = &v61[16 * v64];
    uint64_t v97 = *(void *)v95;
    uint64_t v96 = *((void *)v95 + 1);
    BOOL v75 = __OFSUB__(v96, v97);
    uint64_t v98 = v96 - v97;
    if (v75) {
      goto LABEL_133;
    }
    if (v98 < v86) {
      goto LABEL_98;
    }
LABEL_89:
    unint64_t v103 = v64 - 1;
    if (v64 - 1 >= v60)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    uint64_t v104 = *a1;
    if (!*a1) {
      goto LABEL_148;
    }
    uint64_t v105 = v17;
    uint64_t v106 = &v61[16 * v103];
    uint64_t v107 = *(void *)v106;
    unint64_t v108 = &v61[16 * v64];
    uint64_t v109 = *((void *)v108 + 1);
    sub_100049E4C(v104 + *(void *)(v129 + 72) * *(void *)v106, v104 + *(void *)(v129 + 72) * *(void *)v108, v104 + *(void *)(v129 + 72) * v109, v128);
    if (v2) {
      break;
    }
    if (v109 < v107) {
      goto LABEL_122;
    }
    if (v64 > *((void *)v105 + 2)) {
      goto LABEL_123;
    }
    *(void *)uint64_t v106 = v107;
    *(void *)&v61[16 * v103 + 8] = v109;
    unint64_t v110 = *((void *)v105 + 2);
    if (v64 >= v110) {
      goto LABEL_124;
    }
    char v17 = v105;
    unint64_t v60 = v110 - 1;
    memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
    *((void *)v105 + 2) = v110 - 1;
    a1 = v135;
    if (v110 <= 2) {
      goto LABEL_98;
    }
  }
LABEL_116:
  swift_bridgeObjectRelease();
  if (v123 >= -1) {
    goto LABEL_119;
  }
  __break(1u);
LABEL_118:
  swift_bridgeObjectRelease();
  if (v123 >= -1)
  {
LABEL_119:
    *(void *)(v122 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
}

void sub_100048698(uint64_t *a1)
{
  uint64_t v206 = sub_1000116B8(&qword_1000A30B8);
  uint64_t v195 = *(void *)(v206 - 8);
  uint64_t v2 = __chkstk_darwin(v206);
  uint64_t v188 = (uint64_t)&v178 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v207 = (uint64_t)&v178 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v199 = (uint64_t)&v178 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v198 = (uint64_t)&v178 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v12 = (char *)&v178 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v178 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v190 = (uint64_t)&v178 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v189 = (uint64_t)&v178 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v193 = (uint64_t)&v178 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v192 = (uint64_t)&v178 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v178 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v182 = (uint64_t)&v178 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v184 = (uint64_t)&v178 - v30;
  __chkstk_darwin(v29);
  uint64_t v183 = (uint64_t)&v178 - v31;
  Swift::Int v32 = a1[1];
  Swift::Int v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if (v32 < 0) {
      goto LABEL_160;
    }
    if (v32) {
      sub_1000499E0(0, v32, 1, a1);
    }
    return;
  }
  Swift::Int v181 = v33;
  uint64_t v179 = sub_10006011C(v32 / 2);
  unint64_t v194 = v34;
  uint64_t v180 = v32;
  if (v32 <= 0) {
    goto LABEL_122;
  }
  v178 = v26;
  Swift::Int v35 = 0;
  uint64_t v36 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v37 = v32;
  uint64_t v197 = a1;
  v201 = v12;
  int v204 = v15;
  while (1)
  {
    Swift::Int v38 = v35;
    Swift::Int v39 = v35 + 1;
    uint64_t v187 = v36;
    if (v35 + 1 < v37)
    {
      Swift::Int v208 = v37;
      uint64_t v209 = v35 + 1;
      uint64_t v40 = *a1;
      Swift::Int v41 = *(void *)(v195 + 72);
      uint64_t v42 = v183;
      sub_100012ED8(*a1 + v41 * v39, v183, &qword_1000A30B8);
      Swift::Int v191 = v38;
      uint64_t v185 = v40;
      Swift::Int v210 = v41;
      uint64_t v43 = v184;
      sub_100012ED8(v40 + v41 * v38, v184, &qword_1000A30B8);
      uint64_t v44 = v206;
      uint64_t v45 = *(int *)(v206 + 48);
      uint64_t v46 = v182;
      sub_1000468D0(v42, v182, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v46 + v45) = *(void *)(v42 + v45);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v48 = sub_100012954(isa);

      uint64_t v211 = 542327881;
      unint64_t v212 = 0xE400000000000000;
      uint64_t v213 = v48;
      unint64_t v49 = sub_1000126B0();
      v50._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      uint64_t v51 = v211;
      unint64_t v52 = v212;
      sub_100046880();
      uint64_t v53 = *(int *)(v44 + 48);
      uint64_t v54 = (uint64_t)v178;
      sub_1000468D0(v43, (uint64_t)v178, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v54 + v53) = *(void *)(v43 + v53);
      Class v55 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v56 = sub_100012954(v55);

      uint64_t v211 = 542327881;
      unint64_t v212 = 0xE400000000000000;
      uint64_t v213 = v56;
      uint64_t v202 = v49;
      v57._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      uint64_t v59 = v211;
      unint64_t v58 = v212;
      sub_100046880();
      if (v51 == v59 && v52 == v58) {
        LODWORD(v203) = 0;
      }
      else {
        LODWORD(v203) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v61 = v196;
      Swift::Int v37 = v208;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000131C8(v184, &qword_1000A30B8);
      sub_1000131C8(v183, &qword_1000A30B8);
      Swift::Int v39 = v191 + 2;
      unint64_t v15 = v204;
      if (v191 + 2 >= v37)
      {
        Swift::Int v12 = v201;
      }
      else
      {
        uint64_t v196 = v61;
        uint64_t v200 = v210 * v209;
        uint64_t v62 = v185;
        uint64_t v186 = v210 * v39;
        while (1)
        {
          Swift::Int v205 = v39;
          uint64_t v63 = v192;
          sub_100012ED8(v62 + v186, v192, &qword_1000A30B8);
          uint64_t v64 = v193;
          sub_100012ED8(v62 + v200, v193, &qword_1000A30B8);
          uint64_t v65 = v206;
          uint64_t v66 = *(int *)(v206 + 48);
          uint64_t v67 = v189;
          sub_1000468D0(v63, v189, (void (*)(void))type metadata accessor for SidecarIdentity);
          *(void *)(v67 + v66) = *(void *)(v63 + v66);
          Class v68 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v69 = sub_100012954(v68);

          uint64_t v211 = 542327881;
          unint64_t v212 = 0xE400000000000000;
          uint64_t v213 = v69;
          v70._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v70);
          swift_bridgeObjectRelease();
          unint64_t v71 = v212;
          uint64_t v209 = v211;
          sub_100046880();
          uint64_t v72 = *(int *)(v65 + 48);
          uint64_t v73 = v190;
          sub_1000468D0(v64, v190, (void (*)(void))type metadata accessor for SidecarIdentity);
          *(void *)(v73 + v72) = *(void *)(v64 + v72);
          Class v74 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v75 = sub_100012954(v74);

          uint64_t v211 = 542327881;
          unint64_t v212 = 0xE400000000000000;
          uint64_t v213 = v75;
          v76._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          uint64_t v78 = v211;
          unint64_t v77 = v212;
          sub_100046880();
          BOOL v79 = v209 == v78 && v71 == v77;
          int v80 = v79 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000131C8(v193, &qword_1000A30B8);
          sub_1000131C8(v192, &qword_1000A30B8);
          unint64_t v15 = v204;
          Swift::Int v37 = v208;
          if ((v203 ^ v80)) {
            break;
          }
          Swift::Int v39 = v205 + 1;
          v62 += v210;
          if (v205 + 1 >= v208)
          {
            Swift::Int v39 = v208;
            uint64_t v61 = v196;
            Swift::Int v12 = v201;
            goto LABEL_24;
          }
        }
        uint64_t v61 = v196;
        Swift::Int v12 = v201;
        Swift::Int v39 = v205;
      }
LABEL_24:
      uint64_t v196 = v61;
      if (v203)
      {
        if (v39 < v191) {
          goto LABEL_161;
        }
        if (v191 >= v39)
        {
          a1 = v197;
          Swift::Int v38 = v191;
        }
        else
        {
          uint64_t v81 = 0;
          uint64_t v82 = v210 * (v39 - 1);
          Swift::Int v83 = v39 * v210;
          Swift::Int v84 = v191;
          uint64_t v85 = v191 * v210;
          do
          {
            if (v84 != v39 + v81 - 1)
            {
              uint64_t v86 = v185;
              if (!v185) {
                goto LABEL_167;
              }
              unint64_t v87 = v185 + v85;
              sub_10004F8D8(v185 + v85, v188, &qword_1000A30B8);
              if (v85 < v82 || v87 >= v86 + v83)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v85 != v82)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_10004F8D8(v188, v86 + v82, &qword_1000A30B8);
            }
            ++v84;
            --v81;
            v82 -= v210;
            v83 -= v210;
            v85 += v210;
          }
          while (v84 < v39 + v81);
          a1 = v197;
          Swift::Int v12 = v201;
          unint64_t v15 = v204;
          Swift::Int v38 = v191;
          Swift::Int v37 = v208;
        }
      }
      else
      {
        a1 = v197;
        Swift::Int v38 = v191;
      }
    }
    if (v39 < v37)
    {
      if (__OFSUB__(v39, v38)) {
        goto LABEL_159;
      }
      if (v39 - v38 < v181)
      {
        if (__OFADD__(v38, v181)) {
          goto LABEL_162;
        }
        if (v38 + v181 >= v37) {
          Swift::Int v89 = v37;
        }
        else {
          Swift::Int v89 = v38 + v181;
        }
        if (v89 < v38)
        {
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (v39 != v89)
        {
          Swift::Int v191 = v38;
          uint64_t v90 = *(void *)(v195 + 72);
          uint64_t v91 = v90 * (v39 - 1);
          uint64_t v200 = v90;
          Swift::Int v92 = v39 * v90;
          uint64_t v186 = v89;
          do
          {
            uint64_t v93 = 0;
            Swift::Int v94 = v191;
            Swift::Int v205 = v39;
            uint64_t v202 = v91;
            Swift::Int v203 = v92;
            while (1)
            {
              Swift::Int v210 = v94;
              uint64_t v95 = *a1;
              uint64_t v209 = v92 + v93;
              sub_100012ED8(v92 + v93 + v95, (uint64_t)v15, &qword_1000A30B8);
              Swift::Int v208 = v91 + v93;
              sub_100012ED8(v91 + v93 + v95, (uint64_t)v12, &qword_1000A30B8);
              uint64_t v96 = v206;
              uint64_t v97 = *(int *)(v206 + 48);
              uint64_t v98 = v198;
              sub_1000468D0((uint64_t)v15, v198, (void (*)(void))type metadata accessor for SidecarIdentity);
              *(void *)(v98 + v97) = *(void *)&v15[v97];
              Class v99 = UUID._bridgeToObjectiveC()().super.isa;
              uint64_t v100 = sub_100012954(v99);

              uint64_t v211 = 542327881;
              unint64_t v212 = 0xE400000000000000;
              uint64_t v213 = v100;
              sub_1000126B0();
              v101._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v101);
              swift_bridgeObjectRelease();
              uint64_t v103 = v211;
              unint64_t v102 = v212;
              Swift::Int v12 = v201;
              sub_100046880();
              uint64_t v104 = *(int *)(v96 + 48);
              uint64_t v105 = v199;
              sub_1000468D0((uint64_t)v12, v199, (void (*)(void))type metadata accessor for SidecarIdentity);
              *(void *)(v105 + v104) = *(void *)&v12[v104];
              Class v106 = UUID._bridgeToObjectiveC()().super.isa;
              uint64_t v107 = sub_100012954(v106);

              uint64_t v211 = 542327881;
              unint64_t v212 = 0xE400000000000000;
              uint64_t v213 = v107;
              v108._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v108);
              swift_bridgeObjectRelease();
              uint64_t v110 = v211;
              unint64_t v109 = v212;
              sub_100046880();
              if (v103 == v110 && v102 == v109) {
                break;
              }
              char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000131C8((uint64_t)v12, &qword_1000A30B8);
              unint64_t v15 = v204;
              sub_1000131C8((uint64_t)v204, &qword_1000A30B8);
              if ((v112 & 1) == 0) {
                goto LABEL_63;
              }
              a1 = v197;
              uint64_t v113 = *v197;
              Swift::Int v92 = v203;
              if (!*v197) {
                goto LABEL_165;
              }
              uint64_t v91 = v202;
              uint64_t v114 = v113 + v202 + v93;
              sub_10004F8D8(v113 + v203 + v93, v207, &qword_1000A30B8);
              swift_arrayInitWithTakeFrontToBack();
              sub_10004F8D8(v207, v114, &qword_1000A30B8);
              v93 -= v200;
              Swift::Int v94 = v210 + 1;
              Swift::Int v115 = v205;
              if (v205 == v210 + 1) {
                goto LABEL_64;
              }
            }
            swift_bridgeObjectRelease_n();
            sub_1000131C8((uint64_t)v12, &qword_1000A30B8);
            unint64_t v15 = v204;
            sub_1000131C8((uint64_t)v204, &qword_1000A30B8);
LABEL_63:
            a1 = v197;
            Swift::Int v115 = v205;
            uint64_t v91 = v202;
            Swift::Int v92 = v203;
LABEL_64:
            Swift::Int v39 = v115 + 1;
            v91 += v200;
            v92 += v200;
          }
          while (v39 != v186);
          Swift::Int v39 = v186;
          Swift::Int v38 = v191;
        }
      }
    }
    if (v39 < v38) {
      goto LABEL_158;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v205 = v39;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v36 = v187;
    }
    else {
      uint64_t v36 = sub_10004AAB4(0, *((void *)v187 + 2) + 1, 1, v187);
    }
    unint64_t v118 = *((void *)v36 + 2);
    unint64_t v117 = *((void *)v36 + 3);
    unint64_t v119 = v118 + 1;
    if (v118 >= v117 >> 1) {
      uint64_t v36 = sub_10004AAB4((char *)(v117 > 1), v118 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v119;
    uint64_t v120 = v36 + 32;
    Swift::Int v121 = &v36[16 * v118 + 32];
    Swift::Int v122 = v205;
    *(void *)Swift::Int v121 = v38;
    *((void *)v121 + 1) = v122;
    if (v118) {
      break;
    }
    unint64_t v119 = 1;
LABEL_114:
    Swift::Int v37 = a1[1];
    Swift::Int v35 = v205;
    Swift::Int v12 = v201;
    if (v205 >= v37) {
      goto LABEL_123;
    }
  }
  while (1)
  {
    unint64_t v123 = v119 - 1;
    if (v119 >= 4)
    {
      unint64_t v128 = &v120[16 * v119];
      uint64_t v129 = *((void *)v128 - 8);
      uint64_t v130 = *((void *)v128 - 7);
      BOOL v134 = __OFSUB__(v130, v129);
      uint64_t v131 = v130 - v129;
      if (v134) {
        goto LABEL_143;
      }
      uint64_t v133 = *((void *)v128 - 6);
      uint64_t v132 = *((void *)v128 - 5);
      BOOL v134 = __OFSUB__(v132, v133);
      uint64_t v126 = v132 - v133;
      char v127 = v134;
      if (v134) {
        goto LABEL_144;
      }
      unint64_t v135 = v119 - 2;
      uint64_t v136 = &v120[16 * v119 - 32];
      uint64_t v138 = *(void *)v136;
      uint64_t v137 = *((void *)v136 + 1);
      BOOL v134 = __OFSUB__(v137, v138);
      uint64_t v139 = v137 - v138;
      if (v134) {
        goto LABEL_145;
      }
      BOOL v134 = __OFADD__(v126, v139);
      uint64_t v140 = v126 + v139;
      if (v134) {
        goto LABEL_147;
      }
      if (v140 >= v131)
      {
        uint64_t v158 = &v120[16 * v123];
        uint64_t v160 = *(void *)v158;
        uint64_t v159 = *((void *)v158 + 1);
        BOOL v134 = __OFSUB__(v159, v160);
        uint64_t v161 = v159 - v160;
        if (v134) {
          goto LABEL_153;
        }
        BOOL v151 = v126 < v161;
        goto LABEL_103;
      }
    }
    else
    {
      if (v119 != 3)
      {
        uint64_t v152 = *((void *)v36 + 4);
        uint64_t v153 = *((void *)v36 + 5);
        BOOL v134 = __OFSUB__(v153, v152);
        uint64_t v145 = v153 - v152;
        char v146 = v134;
        goto LABEL_97;
      }
      uint64_t v125 = *((void *)v36 + 4);
      uint64_t v124 = *((void *)v36 + 5);
      BOOL v134 = __OFSUB__(v124, v125);
      uint64_t v126 = v124 - v125;
      char v127 = v134;
    }
    if (v127) {
      goto LABEL_146;
    }
    unint64_t v135 = v119 - 2;
    unint64_t v141 = &v120[16 * v119 - 32];
    uint64_t v143 = *(void *)v141;
    uint64_t v142 = *((void *)v141 + 1);
    BOOL v144 = __OFSUB__(v142, v143);
    uint64_t v145 = v142 - v143;
    char v146 = v144;
    if (v144) {
      goto LABEL_148;
    }
    BOOL v147 = &v120[16 * v123];
    uint64_t v149 = *(void *)v147;
    uint64_t v148 = *((void *)v147 + 1);
    BOOL v134 = __OFSUB__(v148, v149);
    uint64_t v150 = v148 - v149;
    if (v134) {
      goto LABEL_150;
    }
    if (__OFADD__(v145, v150)) {
      goto LABEL_152;
    }
    if (v145 + v150 >= v126)
    {
      BOOL v151 = v126 < v150;
LABEL_103:
      if (v151) {
        unint64_t v123 = v135;
      }
      goto LABEL_105;
    }
LABEL_97:
    if (v146) {
      goto LABEL_149;
    }
    uint64_t v154 = &v120[16 * v123];
    uint64_t v156 = *(void *)v154;
    uint64_t v155 = *((void *)v154 + 1);
    BOOL v134 = __OFSUB__(v155, v156);
    uint64_t v157 = v155 - v156;
    if (v134) {
      goto LABEL_151;
    }
    if (v157 < v145) {
      goto LABEL_114;
    }
LABEL_105:
    unint64_t v162 = v123 - 1;
    if (v123 - 1 >= v119)
    {
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (!*a1) {
      goto LABEL_166;
    }
    uint64_t v163 = v36;
    Swift::String v164 = &v120[16 * v162];
    uint64_t v165 = *(void *)v164;
    uint64_t v166 = &v120[16 * v123];
    uint64_t v167 = *((void *)v166 + 1);
    uint64_t v168 = v196;
    sub_10004A254(*a1 + *(void *)(v195 + 72) * *(void *)v164, *a1 + *(void *)(v195 + 72) * *(void *)v166, *a1 + *(void *)(v195 + 72) * v167, v194);
    uint64_t v196 = v168;
    if (v168) {
      break;
    }
    if (v167 < v165) {
      goto LABEL_140;
    }
    if (v123 > *((void *)v163 + 2)) {
      goto LABEL_141;
    }
    *(void *)Swift::String v164 = v165;
    *(void *)&v120[16 * v162 + 8] = v167;
    unint64_t v169 = *((void *)v163 + 2);
    if (v123 >= v169) {
      goto LABEL_142;
    }
    unint64_t v119 = v169 - 1;
    memmove(&v120[16 * v123], v166 + 16, 16 * (v169 - 1 - v123));
    uint64_t v36 = v163;
    *((void *)v163 + 2) = v169 - 1;
    unint64_t v15 = v204;
    if (v169 <= 2) {
      goto LABEL_114;
    }
  }
LABEL_120:
  swift_bridgeObjectRelease();
  if (v180 >= -1) {
    goto LABEL_137;
  }
  __break(1u);
LABEL_122:
  uint64_t v36 = (char *)_swiftEmptyArrayStorage;
  unint64_t v119 = _swiftEmptyArrayStorage[2];
LABEL_123:
  if (v119 >= 2)
  {
    uint64_t v170 = *a1;
    uint64_t v171 = v196;
    while (1)
    {
      unint64_t v172 = v119 - 2;
      if (v119 < 2) {
        break;
      }
      if (!v170) {
        goto LABEL_168;
      }
      uint64_t v173 = v36;
      uint64_t v174 = *(void *)&v36[16 * v172 + 32];
      uint64_t v175 = *(void *)&v36[16 * v119 + 24];
      sub_10004A254(v170 + *(void *)(v195 + 72) * v174, v170 + *(void *)(v195 + 72) * *(void *)&v36[16 * v119 + 16], v170 + *(void *)(v195 + 72) * v175, v194);
      if (v171) {
        goto LABEL_120;
      }
      if (v175 < v174) {
        goto LABEL_155;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v173 = sub_10004ABAC((uint64_t)v173);
      }
      if (v172 >= *((void *)v173 + 2)) {
        goto LABEL_156;
      }
      unint64_t v176 = &v173[16 * v172 + 32];
      *(void *)unint64_t v176 = v174;
      *((void *)v176 + 1) = v175;
      unint64_t v177 = *((void *)v173 + 2);
      if (v119 > v177) {
        goto LABEL_157;
      }
      memmove(&v173[16 * v119 + 16], &v173[16 * v119 + 32], 16 * (v177 - v119));
      uint64_t v36 = v173;
      *((void *)v173 + 2) = v177 - 1;
      unint64_t v119 = v177 - 1;
      if (v177 <= 2) {
        goto LABEL_136;
      }
    }
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
LABEL_136:
  swift_bridgeObjectRelease();
  if (v180 >= -1)
  {
LABEL_137:
    *(void *)(v179 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
}

uint64_t sub_10004976C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  uint64_t v26 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v7 = __chkstk_darwin(v26);
  uint64_t v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)&v23 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v29 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v32 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v31 = v15 * v29;
    while (2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v25;
      do
      {
        uint64_t v18 = *a4;
        sub_100012ED8(v31 + v16 + *a4, (uint64_t)v14, &qword_1000A3E20);
        uint64_t v19 = v27;
        sub_100012ED8(v32 + v16 + v18, v27, &qword_1000A3E20);
        LOBYTE(v18) = static Date.< infix(_:_:)();
        sub_1000131C8(v19, &qword_1000A3E20);
        uint64_t result = sub_1000131C8((uint64_t)v14, &qword_1000A3E20);
        if ((v18 & 1) == 0) {
          break;
        }
        uint64_t v20 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v21 = a4;
        uint64_t v22 = v20 + v32 + v16;
        sub_10004F8D8(v20 + v31 + v16, v30, &qword_1000A3E20);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_10004F8D8(v30, v22, &qword_1000A3E20);
        v16 -= v28;
        ++v17;
        a4 = v21;
      }
      while (v29 != v17);
      v32 += v28;
      v31 += v28;
      if (++v29 != v24) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1000499E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v58 = a4;
  uint64_t v45 = a1;
  uint64_t v54 = sub_1000116B8(&qword_1000A30B8);
  uint64_t v6 = __chkstk_darwin(v54);
  uint64_t v55 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v43 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v43 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v53 = a3;
  uint64_t v44 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = *(void *)(v16 + 72);
    uint64_t v20 = v19 * (v53 - 1);
    uint64_t v50 = v19;
    uint64_t v21 = v19 * v53;
    uint64_t v46 = v14;
    uint64_t v47 = (char *)&v43 - v17;
    while (2)
    {
      uint64_t v22 = 0;
      uint64_t v59 = v45;
      uint64_t v51 = v21;
      uint64_t v52 = v20;
      while (1)
      {
        uint64_t v23 = *v58;
        uint64_t v57 = v21 + v22;
        sub_100012ED8(v21 + v22 + v23, (uint64_t)v18, &qword_1000A30B8);
        uint64_t v56 = v20 + v22;
        sub_100012ED8(v20 + v22 + v23, (uint64_t)v14, &qword_1000A30B8);
        uint64_t v24 = v54;
        uint64_t v25 = *(int *)(v54 + 48);
        uint64_t v26 = v48;
        sub_1000468D0((uint64_t)v18, v48, (void (*)(void))type metadata accessor for SidecarIdentity);
        *(void *)(v26 + v25) = *(void *)&v18[v25];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v28 = sub_100012954(isa);

        uint64_t v61 = 542327881;
        unint64_t v62 = 0xE400000000000000;
        uint64_t v63 = v28;
        sub_1000126B0();
        v29._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        uint64_t v31 = v61;
        unint64_t v30 = v62;
        unint64_t v60 = type metadata accessor for SidecarIdentity;
        uint64_t v14 = v46;
        sub_100046880();
        uint64_t v32 = *(int *)(v24 + 48);
        uint64_t v33 = v49;
        sub_1000468D0((uint64_t)v14, v49, (void (*)(void))type metadata accessor for SidecarIdentity);
        *(void *)(v33 + v32) = *(void *)&v14[v32];
        Class v34 = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v35 = sub_100012954(v34);

        uint64_t v61 = 542327881;
        unint64_t v62 = 0xE400000000000000;
        uint64_t v63 = v35;
        v36._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        uint64_t v38 = v61;
        unint64_t v37 = v62;
        sub_100046880();
        if (v31 == v38 && v30 == v37) {
          break;
        }
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000131C8((uint64_t)v14, &qword_1000A30B8);
        uint64_t v18 = v47;
        uint64_t result = sub_1000131C8((uint64_t)v47, &qword_1000A30B8);
        uint64_t v21 = v51;
        uint64_t v20 = v52;
        if (v40)
        {
          uint64_t v41 = *v58;
          if (!*v58)
          {
            __break(1u);
            return result;
          }
          uint64_t v42 = v41 + v52 + v22;
          sub_10004F8D8(v41 + v51 + v22, v55, &qword_1000A30B8);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = sub_10004F8D8(v55, v42, &qword_1000A30B8);
          v22 -= v50;
          if (v53 != ++v59) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      sub_1000131C8((uint64_t)v14, &qword_1000A30B8);
      uint64_t v18 = v47;
      uint64_t result = sub_1000131C8((uint64_t)v47, &qword_1000A30B8);
      uint64_t v21 = v51;
      uint64_t v20 = v52;
LABEL_13:
      v20 += v50;
      v21 += v50;
      if (++v53 != v44) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_100049E4C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v51 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  int64_t v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_75;
  }
  int64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_76;
  }
  uint64_t v18 = v14 / v13;
  uint64_t v19 = v16 / v13;
  uint64_t v46 = v13;
  if (v14 / v13 >= v16 / v13)
  {
    sub_1000402A4(a2, v16 / v13, a4, &qword_1000A3E20);
    unint64_t v20 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2) {
      goto LABEL_69;
    }
    unint64_t v48 = a1;
    uint64_t v49 = -v13;
    unint64_t v47 = a4;
    while (1)
    {
      unint64_t v30 = a3;
      uint64_t v31 = v49;
      a3 += v49;
      unint64_t v50 = v20 + v49;
      unint64_t v32 = v20;
      sub_100012ED8(v20 + v49, (uint64_t)v11, &qword_1000A3E20);
      unint64_t v33 = a2 + v31;
      uint64_t v34 = a2 + v31;
      uint64_t v35 = (uint64_t)v11;
      uint64_t v36 = v52;
      sub_100012ED8(v34, v52, &qword_1000A3E20);
      char v37 = static Date.< infix(_:_:)();
      uint64_t v38 = v36;
      uint64_t v11 = (char *)v35;
      sub_1000131C8(v38, &qword_1000A3E20);
      sub_1000131C8(v35, &qword_1000A3E20);
      if (v37)
      {
        unint64_t v20 = v32;
        if (v30 >= a2 && a3 < a2)
        {
          unint64_t v41 = v48;
          if (v30 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v33;
          a4 = v47;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack();
        a2 = v33;
      }
      else if (v30 < v32 || a3 >= v32)
      {
        unint64_t v20 = v50;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        unint64_t v20 = v50;
        if (v30 != v32) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      a4 = v47;
      unint64_t v41 = v48;
LABEL_64:
      if (v20 <= a4 || a2 <= v41)
      {
        uint64_t v13 = v46;
        goto LABEL_69;
      }
    }
  }
  sub_1000402A4(a1, v14 / v13, a4, &qword_1000A3E20);
  unint64_t v20 = a4 + v18 * v13;
  unint64_t v50 = a3;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    uint64_t v22 = v52;
    do
    {
      sub_100012ED8(a2, (uint64_t)v11, &qword_1000A3E20);
      sub_100012ED8(a4, v22, &qword_1000A3E20);
      char v23 = static Date.< infix(_:_:)();
      sub_1000131C8(v22, &qword_1000A3E20);
      sub_1000131C8((uint64_t)v11, &qword_1000A3E20);
      if (v23)
      {
        unint64_t v24 = a2 + v13;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        unint64_t v26 = a4 + v13;
        if (a1 < a4 || a1 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v24 = a2;
        a4 = v26;
        uint64_t v13 = v46;
      }
      a1 += v13;
      BOOL v28 = a4 >= v20 || v24 >= v50;
      a2 = v24;
    }
    while (!v28);
  }
  a2 = a1;
LABEL_69:
  int64_t v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_1000402A4(a4, v43 / v13, a2, &qword_1000A3E20);
    return;
  }
LABEL_77:
  __break(1u);
}

void sub_10004A254(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v102 = sub_1000116B8(&qword_1000A30B8);
  uint64_t v8 = __chkstk_darwin(v102);
  uint64_t v93 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v92 = (uint64_t)&v88 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v98 = (uint64_t)&v88 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  int64_t v16 = (char *)&v88 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v95 = (unint64_t)&v88 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v94 = (unint64_t)&v88 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  char v23 = (char *)&v88 - v22;
  __chkstk_darwin(v21);
  unint64_t v96 = (unint64_t)&v88 - v24;
  uint64_t v26 = *(void *)(v25 + 72);
  if (!v26)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  int64_t v27 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v26 == -1) {
    goto LABEL_88;
  }
  int64_t v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v26 == -1) {
    goto LABEL_89;
  }
  uint64_t v31 = v27 / v26;
  uint64_t v32 = v29 / v26;
  uint64_t v97 = v26;
  if (v27 / v26 >= v29 / v26)
  {
    sub_1000402A4(a2, v29 / v26, a4, &qword_1000A30B8);
    unint64_t v33 = a4 + v32 * v26;
    if (v32 * v26 < 1 || a1 >= a2) {
      goto LABEL_50;
    }
    uint64_t v63 = -v26;
    unint64_t v100 = a4;
    unint64_t v101 = a1;
    uint64_t v90 = -v26;
    uint64_t v91 = v16;
    uint64_t v64 = v98;
    while (1)
    {
      unint64_t v99 = v33;
      unint64_t v95 = v33 + v63;
      unint64_t v96 = a3;
      sub_100012ED8(v33 + v63, (uint64_t)v16, &qword_1000A30B8);
      unint64_t v103 = a2;
      unint64_t v94 = a2 + v63;
      sub_100012ED8(a2 + v63, v64, &qword_1000A30B8);
      uint64_t v65 = v102;
      uint64_t v66 = *(int *)(v102 + 48);
      uint64_t v67 = v92;
      sub_1000468D0((uint64_t)v16, v92, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v67 + v66) = *(void *)&v16[v66];
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v69 = sub_100012954(isa);

      uint64_t v104 = 542327881;
      unint64_t v105 = 0xE400000000000000;
      uint64_t v106 = v69;
      sub_1000126B0();
      v70._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      uint64_t v72 = v104;
      unint64_t v71 = v105;
      sub_100046880();
      uint64_t v73 = *(int *)(v65 + 48);
      uint64_t v74 = v93;
      sub_1000468D0(v64, v93, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v74 + v73) = *(void *)(v64 + v73);
      Class v75 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v76 = sub_100012954(v75);

      uint64_t v104 = 542327881;
      unint64_t v105 = 0xE400000000000000;
      uint64_t v106 = v76;
      v77._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      uint64_t v78 = v104;
      unint64_t v79 = v105;
      sub_100046880();
      if (v72 == v78 && v71 == v79) {
        char v81 = 0;
      }
      else {
        char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = v90;
      unint64_t v82 = v96;
      a3 = v96 + v90;
      sub_1000131C8(v98, &qword_1000A30B8);
      int64_t v16 = v91;
      sub_1000131C8((uint64_t)v91, &qword_1000A30B8);
      a2 = v103;
      unint64_t v83 = v101;
      if (v81)
      {
        BOOL v84 = v82 < v103 || a3 >= v103;
        a4 = v100;
        if (v84)
        {
          a2 = v94;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a2 = v94;
          if (v82 != v103) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        uint64_t v26 = v97;
        unint64_t v33 = v99;
        goto LABEL_81;
      }
      a4 = v100;
      if (v82 < v99 || a3 >= v99)
      {
        uint64_t v86 = v95;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v82 == v99)
        {
          unint64_t v33 = v95;
          goto LABEL_79;
        }
        uint64_t v86 = v95;
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v33 = v86;
LABEL_79:
      uint64_t v26 = v97;
LABEL_81:
      if (v33 <= a4 || a2 <= v83) {
        goto LABEL_50;
      }
    }
  }
  sub_1000402A4(a1, v27 / v26, a4, &qword_1000A30B8);
  unint64_t v33 = a4 + v31 * v26;
  if (v31 * v26 >= 1 && a2 < a3)
  {
    uint64_t v35 = v96;
    unint64_t v99 = a4 + v31 * v26;
    unint64_t v89 = a3;
    while (1)
    {
      unint64_t v101 = a1;
      unint64_t v103 = a2;
      sub_100012ED8(a2, v35, &qword_1000A30B8);
      unint64_t v100 = a4;
      sub_100012ED8(a4, (uint64_t)v23, &qword_1000A30B8);
      uint64_t v36 = (uint64_t)v23;
      uint64_t v37 = v102;
      uint64_t v38 = *(int *)(v102 + 48);
      uint64_t v39 = v94;
      sub_1000468D0(v35, v94, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v39 + v38) = *(void *)(v35 + v38);
      Class v40 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v41 = sub_100012954(v40);

      uint64_t v104 = 542327881;
      unint64_t v105 = 0xE400000000000000;
      uint64_t v106 = v41;
      sub_1000126B0();
      v42._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v44 = v104;
      unint64_t v43 = v105;
      sub_100046880();
      uint64_t v45 = *(int *)(v37 + 48);
      uint64_t v46 = v95;
      sub_1000468D0(v36, v95, (void (*)(void))type metadata accessor for SidecarIdentity);
      *(void *)(v46 + v45) = *(void *)(v36 + v45);
      Class v47 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v48 = sub_100012954(v47);

      uint64_t v104 = 542327881;
      unint64_t v105 = 0xE400000000000000;
      uint64_t v106 = v48;
      v49._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      uint64_t v51 = v104;
      unint64_t v50 = v105;
      sub_100046880();
      if (v44 == v51 && v43 == v50) {
        break;
      }
      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000131C8(v36, &qword_1000A30B8);
      uint64_t v35 = v96;
      sub_1000131C8(v96, &qword_1000A30B8);
      uint64_t v26 = v97;
      char v23 = (char *)v36;
      if ((v53 & 1) == 0) {
        goto LABEL_28;
      }
      unint64_t v54 = v103 + v97;
      unint64_t v55 = v101;
      BOOL v56 = v101 < v103 || v101 >= v54;
      unint64_t v57 = v89;
      if (v56)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v101 != v103)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      a4 = v100;
LABEL_39:
      unint64_t v33 = v99;
      a1 = v55 + v26;
      BOOL v59 = a4 >= v99 || v54 >= v57;
      a2 = v54;
      if (v59) {
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_1000131C8(v36, &qword_1000A30B8);
    uint64_t v35 = v96;
    sub_1000131C8(v96, &qword_1000A30B8);
    uint64_t v26 = v97;
    char v23 = (char *)v36;
LABEL_28:
    unint64_t v55 = v101;
    a4 = v100 + v26;
    BOOL v58 = v101 < v100 || v101 >= a4;
    unint64_t v57 = v89;
    unint64_t v54 = v103;
    if (v58)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v101 != v100)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    goto LABEL_39;
  }
LABEL_44:
  a2 = a1;
LABEL_50:
  int64_t v61 = v33 - a4;
  if (v26 != -1 || v61 != 0x8000000000000000)
  {
    sub_1000402A4(a4, v61 / v26, a2, &qword_1000A30B8);
    return;
  }
LABEL_90:
  __break(1u);
}

char *sub_10004AAB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000116B8(&qword_1000A3060);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10004ABAC(uint64_t a1)
{
  return sub_10004AAB4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004ABC0(uint64_t a1)
{
  return sub_10003F5EC(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10004ABD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000116B8(&qword_1000A30B8);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  size_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v35 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v29 = v35;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v33 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v34 = (unint64_t)(63 - v16) >> 6;
  int64_t v31 = v34 - 1;
  uint64_t v21 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v27 = *(void *)(a4 + 48);
    uint64_t v28 = type metadata accessor for SidecarIdentity();
    sub_1000468D0(v27 + *(void *)(*(void *)(v28 - 8) + 72) * v23, (uint64_t)v11, (void (*)(void))type metadata accessor for SidecarIdentity);
    *(void *)&v11[*(int *)(v37 + 48)] = *(void *)(*(void *)(a4 + 56) + 8 * v23);
    sub_10004F8D8((uint64_t)v11, (uint64_t)v14, &qword_1000A30B8);
    sub_10004F8D8((uint64_t)v14, a2, &qword_1000A30B8);
    if (v20 == v21)
    {
      a3 = v21;
      swift_retain();
      goto LABEL_38;
    }
    a2 += *(void *)(v36 + 72);
    uint64_t result = swift_retain();
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v24 >= v34) {
      goto LABEL_33;
    }
    unint64_t v25 = *(void *)(v35 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v34)
      {
        unint64_t v18 = 0;
        int64_t v19 = v24;
      }
      else
      {
        unint64_t v25 = *(void *)(v35 + 8 * v19);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v26 = v24 + 2;
        if (v24 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (v25)
        {
LABEL_17:
          int64_t v24 = v26;
          goto LABEL_18;
        }
        int64_t v19 = v24 + 3;
        if (v24 + 3 < v34)
        {
          unint64_t v25 = *(void *)(v35 + 8 * v19);
          if (v25)
          {
LABEL_14:
            int64_t v24 = v19;
            goto LABEL_18;
          }
          int64_t v26 = v24 + 4;
          if (v24 + 4 >= v34)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v25 = *(void *)(v35 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_42;
              }
              if (v24 >= v34)
              {
                unint64_t v18 = 0;
                int64_t v19 = v31;
                goto LABEL_37;
              }
              unint64_t v25 = *(void *)(v35 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v32;
      a1 = v33;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_10004AF34()
{
}

uint64_t sub_10004AF78()
{
  return sub_100034344(v0, 15, 0x2065736F6C43203ALL, (void *)0xEF6E6F6973736553);
}

uint64_t sub_10004AFB8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100012A10(result, a2, a3 & 1);
  }
  return result;
}

void sub_10004AFD0()
{
  sub_10001394C();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100051180();
  uint64_t v11 = *v0;
  sub_10003B620((uint64_t)&unk_1000A1910);
  swift_bridgeObjectRetain();
  uint64_t v31 = v4;
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_100051B30();
  unint64_t v14 = v13 & ~v12;
  uint64_t v30 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v27 = v6;
    uint64_t v28 = ~v12;
    uint64_t v17 = *(void (**)(void, void, void))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v29 = *(void *)(v16 + 56);
    unint64_t v18 = (void (**)(uint64_t, uint64_t))(v16 - 8);
    while (1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v15;
      v15(v1, *(void *)(v11 + 48) + v29 * v14, v7);
      sub_10003B620((uint64_t)&unk_1000A3020);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v18;
      (*v18)(v1, v7);
      if (v21) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v28;
      uint64_t v11 = v19;
      uint64_t v15 = v20;
      if (((*(void *)(v30 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v7);
    v20(v27, *(void *)(*v2 + 48) + v29 * v14, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v9 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000519BC();
    ((void (*)(void))v15)();
    uint64_t v32 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v24 = sub_1000516F8();
    sub_10004B6B0(v24, v25, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v32;
    swift_bridgeObjectRelease();
    sub_1000519BC();
    v26();
  }
  sub_100013964();
}

uint64_t sub_10004B29C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_100051AA4();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (void *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_100051AA4();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  Swift::Int v23 = sub_100013A10();
  Swift::Int v25 = sub_10004B950(v23, v24, v10, isUniquelyReferenced_nonNull_native);
  sub_1000514E4(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34);
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

#error "10004B5E0: call analysis failed (funcsize=162)"

uint64_t sub_10004B6B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100042ACC();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100041BAC();
      goto LABEL_12;
    }
    sub_100042228();
  }
  uint64_t v12 = *v3;
  sub_10003B620((uint64_t)&unk_1000A1910);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10003B620((uint64_t)&unk_1000A3020);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10004B950(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100042EC4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100041E5C();
      goto LABEL_22;
    }
    sub_1000425D4();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void sub_10004BAEC()
{
  sub_10001394C();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = *(void *)(*v0 + 16);
  unint64_t v9 = *(void *)(*v0 + 24);
  if (v9 > v8 && (v1 & 1) != 0) {
    goto LABEL_14;
  }
  if (v1)
  {
    sub_100042880();
  }
  else
  {
    if (v9 > v8)
    {
      sub_100041A20();
      goto LABEL_14;
    }
    sub_100042010();
  }
  uint64_t v10 = *v0;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v0 + 40));
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v5 = v11 & ~v12;
  sub_100051D4C();
  if (v13)
  {
    v3(0);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * v5);
    char v15 = static NSObject.== infix(_:_:)();

    if (v15)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v5 = (v5 + 1) & v16;
        sub_100051D4C();
        if ((v17 & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v5);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v0;
  *(void *)(*v0 + 8 * (v5 >> 6) + 56) |= 1 << v5;
  *(void *)(*(void *)(v20 + 48) + 8 * v5) = v7;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v20 + 16) = v23;
    sub_100013964();
  }
}

uint64_t sub_10004BC50(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v7 = (unint64_t *)((char *)&v11 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10004358C(0, v6, v7);
    uint64_t v8 = sub_10004BF44(v7, v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    unint64_t v9 = (unint64_t *)swift_slowAlloc();
    sub_10004358C(0, v6, v9);
    a2 = sub_10004BF44(v9, v6, v4, a2);
    swift_slowDealloc();
  }
  return a2;
}

void *sub_10004BDC0(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, uint64_t), void *a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v9 = (unint64_t *)((char *)&v13 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10004358C(0, v8, v9);
    uint64_t v10 = sub_10004C2A4(v9, v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (unint64_t *)swift_slowAlloc();
    sub_10004358C(0, v8, v11);
    a3 = sub_10004C2A4(v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_10004BF44(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a2;
  uint64_t v37 = a4;
  uint64_t v31 = a1;
  uint64_t v36 = sub_1000116B8(&qword_1000A2E80);
  uint64_t v5 = __chkstk_darwin(v36);
  char v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Relay.ConnectedSessionKey(0);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t result = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  uint64_t v38 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v32 = 0;
  uint64_t v33 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v34 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_20;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v34) {
      return sub_10004C544(v31, v30, v32, v38);
    }
    unint64_t v22 = *(void *)(v33 + 8 * v21);
    ++v14;
    if (!v22)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v34) {
        return sub_10004C544(v31, v30, v32, v38);
      }
      unint64_t v22 = *(void *)(v33 + 8 * v14);
      if (!v22)
      {
        int64_t v14 = v21 + 2;
        if (v21 + 2 >= v34) {
          return sub_10004C544(v31, v30, v32, v38);
        }
        unint64_t v22 = *(void *)(v33 + 8 * v14);
        if (!v22) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v18 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_20:
    uint64_t v24 = v38;
    sub_1000468D0(v38[6] + *(void *)(v35 + 72) * v20, (uint64_t)v13, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    uint64_t v25 = *(void *)(v24[7] + 8 * v20);
    sub_1000468D0((uint64_t)v13, (uint64_t)v9, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    uint64_t v26 = *(int *)(v36 + 48);
    *(void *)&v9[v26] = v25;
    sub_1000468D0((uint64_t)v9, (uint64_t)v7, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    swift_retain_n();
    sub_1000131C8((uint64_t)v9, &qword_1000A2E80);
    *(uint64_t *)((char *)v7 + v26) = v25;
    uint64_t v27 = *v7;
    sub_100046880();
    swift_release();
    uint64_t result = sub_100046880();
    if (v27 != v37)
    {
      *(unint64_t *)((char *)v31 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
        return sub_10004C544(v31, v30, v32, v38);
      }
    }
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v34) {
    return sub_10004C544(v31, v30, v32, v38);
  }
  unint64_t v22 = *(void *)(v33 + 8 * v23);
  if (v22)
  {
    int64_t v14 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v14 >= v34) {
      return sub_10004C544(v31, v30, v32, v38);
    }
    unint64_t v22 = *(void *)(v33 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10004C2A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v23 = a2;
  uint64_t v28 = a4;
  uint64_t v24 = a1;
  uint64_t v5 = _s7SessionC8IdentityVMa(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (void *)__chkstk_darwin(v5 - 8);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v27) {
      return sub_10004C968(v24, v23, v25, (void *)a3);
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v27) {
        return sub_10004C968(v24, v23, v25, (void *)a3);
      }
      unint64_t v18 = *(void *)(v26 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v27) {
          return sub_10004C968(v24, v23, v25, (void *)a3);
        }
        unint64_t v18 = *(void *)(v26 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_20:
    sub_1000468D0(*(void *)(a3 + 48) + *(void *)(v6 + 72) * v16, (uint64_t)v9, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v20 = *(void *)(*(void *)(a3 + 56) + 8 * v16);
    swift_retain();
    char v21 = v28(v9, v20);
    swift_release();
    uint64_t result = (void *)sub_100046880();
    if (v21)
    {
      *(unint64_t *)((char *)v24 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return sub_10004C968(v24, v23, v25, (void *)a3);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v27) {
    return sub_10004C968(v24, v23, v25, (void *)a3);
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v27) {
      return sub_10004C968(v24, v23, v25, (void *)a3);
    }
    unint64_t v18 = *(void *)(v26 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10004C544(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Relay.ConnectedSessionKey(0);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (Swift::UInt *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v42 = (uint64_t)&v38 - v12;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1000116B8(&qword_1000A2E88);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = result;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  uint64_t v17 = result + 64;
  uint64_t v41 = a4;
  while (1)
  {
    if (v15)
    {
      uint64_t v45 = (v15 - 1) & v15;
      uint64_t v46 = v16;
      unint64_t v18 = __clz(__rbit64(v15)) | (v16 << 6);
    }
    else
    {
      uint64_t v19 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v40) {
        return v14;
      }
      unint64_t v20 = v39[v19];
      uint64_t v21 = v16 + 1;
      if (!v20)
      {
        uint64_t v21 = v16 + 2;
        if (v16 + 2 >= v40) {
          return v14;
        }
        unint64_t v20 = v39[v21];
        if (!v20)
        {
          uint64_t v21 = v16 + 3;
          if (v16 + 3 >= v40) {
            return v14;
          }
          unint64_t v20 = v39[v21];
          if (!v20)
          {
            uint64_t v22 = v16 + 4;
            if (v16 + 4 >= v40) {
              return v14;
            }
            unint64_t v20 = v39[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v40) {
                  return v14;
                }
                unint64_t v20 = v39[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v16 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v45 = (v20 - 1) & v20;
      uint64_t v46 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = v42;
    uint64_t v24 = *(void *)(v43 + 72);
    sub_1000468D0(a4[6] + v24 * v18, v42, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    uint64_t v25 = *(void *)(a4[7] + 8 * v18);
    sub_10004DD54(v23, (uint64_t)v11, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v11);
    uint64_t v26 = v11;
    int64_t v27 = (char *)v11 + *(int *)(v44 + 20);
    type metadata accessor for UUID();
    sub_10003B620((uint64_t)&unk_1000A1910);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v28 = _s7SessionC8IdentityVMa(0);
    Hasher._combine(_:)(*(void *)&v27[*(int *)(v28 + 20)]);
    Hasher._combine(_:)(v27[*(int *)(v28 + 24)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v17 + 8 * (v30 >> 6))) == 0) {
      break;
    }
    unint64_t v32 = __clz(__rbit64((-1 << v30) & ~*(void *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v11 = v26;
LABEL_34:
    *(void *)(v17 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    uint64_t result = sub_10004DD54((uint64_t)v11, *(void *)(v14 + 48) + v32 * v24, (void (*)(void))type metadata accessor for Relay.ConnectedSessionKey);
    *(void *)(*(void *)(v14 + 56) + 8 * v32) = v25;
    ++*(void *)(v14 + 16);
    if (__OFSUB__(a3--, 1)) {
      goto LABEL_39;
    }
    a4 = v41;
    unint64_t v15 = v45;
    uint64_t v16 = v46;
    if (!a3) {
      return v14;
    }
  }
  char v33 = 0;
  unint64_t v34 = (unint64_t)(63 - v29) >> 6;
  uint64_t v11 = v26;
  while (++v31 != v34 || (v33 & 1) == 0)
  {
    BOOL v35 = v31 == v34;
    if (v31 == v34) {
      unint64_t v31 = 0;
    }
    v33 |= v35;
    uint64_t v36 = *(void *)(v17 + 8 * v31);
    if (v36 != -1)
    {
      unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10004C968(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = _s7SessionC8IdentityVMa(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - v13;
  if (!a3) {
    return &_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }
  sub_1000116B8(&qword_1000A2ED0);
  uint64_t result = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v16 = result;
  int64_t v27 = a1;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v18 << 6);
    }
    else
    {
      uint64_t v21 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_30;
      }
      if (v21 >= a2) {
        return v16;
      }
      unint64_t v22 = v27[v21];
      ++v18;
      if (!v22)
      {
        uint64_t v18 = v21 + 1;
        if (v21 + 1 >= a2) {
          return v16;
        }
        unint64_t v22 = v27[v18];
        if (!v22)
        {
          uint64_t v18 = v21 + 2;
          if (v21 + 2 >= a2) {
            return v16;
          }
          unint64_t v22 = v27[v18];
          if (!v22)
          {
            uint64_t v23 = v21 + 3;
            if (v23 >= a2) {
              return v16;
            }
            unint64_t v22 = v27[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v18 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_31;
                }
                if (v18 >= a2) {
                  return v16;
                }
                unint64_t v22 = v27[v18];
                ++v23;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v18 = v23;
          }
        }
      }
LABEL_24:
      unint64_t v17 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    }
    sub_1000468D0(a4[6] + *(void *)(v9 + 72) * v20, (uint64_t)v14, (void (*)(void))_s7SessionC8IdentityVMa);
    uint64_t v24 = *(void *)(a4[7] + 8 * v20);
    sub_10004DD54((uint64_t)v14, (uint64_t)v12, (void (*)(void))_s7SessionC8IdentityVMa);
    swift_retain();
    uint64_t result = (void *)sub_100046638((uint64_t)v12, v24, v16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      return v16;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_10004CBE4(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_1000116B8(&qword_1000A2F10);
  uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_26;
    }
  }
  unint64_t v6 = 0;
  char v7 = (char *)(v3 + 7);
  unint64_t v27 = a1 & 0xC000000000000001;
  unint64_t v24 = a1 + 32;
  uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v26 = v5;
  while (1)
  {
    if (v27)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v6 >= *(void *)(v25 + 16)) {
        goto LABEL_29;
      }
      id v8 = *(id *)(v24 + 8 * v6);
    }
    uint64_t v9 = v8;
    BOOL v10 = __OFADD__(v6++, 1);
    if (v10) {
      break;
    }
    Swift::Int v11 = NSObject._rawHashValue(seed:)(v3[5]);
    uint64_t v12 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v13 = v11 & ~v12;
    unint64_t v14 = v13 >> 6;
    uint64_t v15 = *(void *)&v7[8 * (v13 >> 6)];
    uint64_t v16 = 1 << v13;
    if (((1 << v13) & v15) != 0)
    {
      type metadata accessor for ServiceProvider();
      id v17 = *(id *)(v3[6] + 8 * v13);
      char v18 = static NSObject.== infix(_:_:)();

      if (v18)
      {
LABEL_21:

        uint64_t v5 = v26;
        goto LABEL_25;
      }
      uint64_t v19 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v19;
        unint64_t v14 = v13 >> 6;
        uint64_t v15 = *(void *)&v7[8 * (v13 >> 6)];
        uint64_t v16 = 1 << v13;
        if ((v15 & (1 << v13)) == 0) {
          break;
        }
        id v20 = *(id *)(v3[6] + 8 * v13);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_21;
        }
      }
      uint64_t v5 = v26;
    }
    *(void *)&v7[8 * v14] = v16 | v15;
    *(void *)(v3[6] + 8 * v13) = v9;
    uint64_t v22 = v3[2];
    BOOL v10 = __OFADD__(v22, 1);
    uint64_t v23 = v22 + 1;
    if (v10) {
      goto LABEL_28;
    }
    v3[2] = v23;
LABEL_25:
    if (v6 == v5) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

unsigned __int8 *sub_10004CE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_10004EFAC();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_10004D198();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_10004CF1C(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_10004CF1C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004D198()
{
  unint64_t v0 = sub_10004D204();
  uint64_t v4 = sub_10004D238(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10004D204()
{
  return String.subscript.getter();
}

uint64_t sub_10004D238(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10004D390(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100017580(v9, 0),
          unint64_t v12 = sub_10004D490((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10004D390(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1000175E8(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000175E8(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_10004D490(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_1000175E8(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_1000175E8(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_10004D694()
{
  sub_10001394C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v63[3] = &type metadata for MutablePacket;
  v63[0] = v10;
  v63[1] = v8;
  v63[4] = sub_10004F72C();
  v63[2] = v7;
  if ((unint64_t)(*(void *)(v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) - 1) <= 2
    && (uint64_t Strong = swift_weakLoadStrong()) != 0)
  {
    uint64_t v55 = Strong;
    BOOL v56 = v5;
    uint64_t v57 = v3;
    sub_1000157CC((uint64_t)v63, (uint64_t)v60);
    uint64_t v54 = v1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    uint64_t v13 = *(void *)(v54 + *(int *)(_s7SessionC8IdentityVMa(0) + 20));
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    sub_10004F790((uint64_t)v60, v61);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    id v17 = v11;
    sub_100012D98(v9, v7);
    v16(v13, v15, v14);
    uint64_t v18 = mach_continuous_approximate_time();
    uint64_t v19 = v61;
    uint64_t v20 = v62;
    sub_10004F790((uint64_t)v60, v61);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 96))(v18, 0, v19, v20);
    if (qword_1000A1338 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_1000A26D8;
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    uint64_t v24 = (uint64_t)v5;
    uint64_t v23 = v57;
    if (os_log_type_enabled(v21, v22))
    {
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100004964(v25, (uint64_t)qword_1000AA248);
      sub_100051908();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = sub_100013B38();
        v58[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446466;
        sub_10002CDDC();
        sub_100017070(v29, v30, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100013D9C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2082;
        sub_100013AD0();
        unint64_t v31 = sub_1000116FC(v60, v61);
        __chkstk_darwin(v31);
        sub_100051198();
        sub_100051210();
        v32();
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v35 = v34;
        uint64_t v36 = sub_100051658();
        v37(v36);
        uint64_t v24 = (uint64_t)v56;
        uint64_t v23 = v57;
        uint64_t v59 = sub_100017070(v33, v35, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s: Send %{public}s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        sub_100004A0C();
        sub_100004A0C();
      }
      else
      {

        sub_100013D9C();
      }
    }
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = v1;
    v46[3] = v24;
    v46[4] = v23;
    uint64_t v59 = v55;
    sub_100013AD0();
    unint64_t v47 = sub_1000116FC(v60, v61)[2];
    swift_retain();
    sub_10004F82C(v24);
    uint64_t v48 = sub_100051658();
    uint64_t v50 = sub_1000232DC(v48, v49, v47);
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    type metadata accessor for RapportRemoteDisplaySession();
    swift_retain();
    RapportMessageable.sendEvent(id:event:destinationID:options:completion:)(0xD000000000000011, 0x800000010007E270, v50, v51, v53, 0, sub_10004F820, (uint64_t)v46);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_1000136EC((uint64_t)v60);
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    id v38 = v11;
    sub_100012D98(v9, v7);
    sub_100051304();
    id v42 = sub_100021ED4(v39, v40, v41);
    __chkstk_darwin(v42);
    sub_10005159C();
    *(void *)(v44 - 16) = v43;
    sub_100019968(sub_10004F778, v1, (void (*)(void))sub_100013904);
    if (v5)
    {
      id v45 = v42;
      v5(v42);
    }
    else
    {
    }
  }
  sub_1000136EC((uint64_t)v63);
  sub_100013964();
}

uint64_t sub_10004DC94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_10004DCD4(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10004DD54(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000139D0();
  uint64_t v4 = sub_100051D24();
  v5(v4);
  return a2;
}

void sub_10004DDAC(uint64_t a1, uint64_t a2)
{
  sub_1000355F0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_10004DDB4()
{
}

uint64_t sub_10004DDFC(uint64_t *a1, uint64_t *a2)
{
  return sub_10003ED5C(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10004DE28(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10004DEA8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v6 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v6 < v2)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v2 - v4))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  if (__OFADD__(v7, v5))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v8 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v3 = v8;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v8 & 0x8000000000000000) != 0
    || (v8 & 0x4000000000000000) != 0
    || (uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8, v7 + v5 > *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v8 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v11 = v10 + 32;
  unint64_t v12 = (char *)(v10 + 32 + 8 * v4);
  type metadata accessor for ServiceProvider();
  swift_arrayDestroy();
  if (!v5) {
    goto LABEL_24;
  }
  if ((unint64_t)*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFSUB__(v13, v2))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_1000405A8((char *)(v11 + 8 * v2), v13 - v2, v12);
  if ((unint64_t)*v3 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
  if (__OFADD__(v15, v5))
  {
    __break(1u);
    return result;
  }
  *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v15 + v5;
LABEL_24:

  return specialized Array._endMutation()();
}

void sub_10004E138()
{
}

uint64_t sub_10004E14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_10003B620((uint64_t)&unk_1000A3058);
  uint64_t v11 = (uint64_t *)(a3 + 16);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = *(int *)(v6 + 48);
    uint64_t v15 = (void *)(v12
                   + v14
                   + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    while (*v15 != a1)
    {
      uint64_t v15 = (void *)((char *)v15 + *(void *)(v7 + 72));
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v14 = *(int *)(v6 + 48);
LABEL_7:
    uint64_t v16 = &v9[v14];
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v9, a2, v17);
    *(void *)uint64_t v16 = a1;
    *((void *)v16 + 1) = v10;
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_10003F338((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003F5EC);
    uint64_t v18 = *(void *)(*v11 + 16);
    sub_10003F410(v18, (uint64_t (*)(BOOL))sub_10003F5EC);
    uint64_t v19 = *v11;
    *(void *)(v19 + 16) = v18 + 1;
    sub_10004F8D8((uint64_t)v9, v19+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18, &qword_1000A3E20);
    swift_endAccess();
  }
  swift_beginAccess();
  sub_10003EAEC((uint64_t *)(a3 + 16), &qword_1000A3E20, sub_10004ABC0, (uint64_t (*)(void *))sub_100047D08);
  swift_endAccess();
  return sub_10005EA78();
}

uint64_t sub_10004E3D4(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.count.getter();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

int64_t sub_10004E3F4(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_10004E4D8(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      type metadata accessor for Client();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for Client();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_10004E730(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10004E7B0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id v15 = &type metadata for Packet;
  id v12 = a1;
  uint64_t v13 = a2;
  unint64_t v16 = sub_10004EE28();
  unint64_t v14 = a3;
  id v7 = v12;
  sub_100012D98(v13, a3);
  if (sub_100022A40(v7) == 1)
  {
    if (*(void *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 2)
    {
      sub_10002F098();
      sub_10002D640(3uLL);
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_client);
    if (v8)
    {
      id v9 = *(void (**)(uint64_t, id *))((swift_isaMask & *v8) + 0xD8);
      char v10 = v8;
      v9(a4, &v12);
    }
    else if (*(void *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_state) == 1)
    {
      sub_10004E8E8(v7, a2, a3, a4);
    }
  }
  return sub_1000136EC((uint64_t)&v12);
}

uint64_t sub_10004E8E8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue;
  if (*(void *)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue)) {
    uint64_t v8 = *(char **)(a4 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_messageQueue);
  }
  else {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  }
  id v9 = a1;
  sub_100012D98(a2, a3);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_10003F960(0, *((void *)v8 + 2) + 1, 1, (uint64_t)v8);
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v8 = sub_10003F960((char *)(v10 > 1), v11 + 1, 1, (uint64_t)v8);
  }
  id v15 = &type metadata for Packet;
  *(void *)&long long v13 = v9;
  *((void *)&v13 + 1) = a2;
  unint64_t v16 = sub_10004EE28();
  unint64_t v14 = a3;
  *((void *)v8 + 2) = v11 + 1;
  sub_100015834(&v13, (uint64_t)&v8[40 * v11 + 32]);
  *(void *)(a4 + v7) = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004EA04(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s7SessionC8IdentityVMa(0);
  uint64_t v13 = __chkstk_darwin(v12);
  id v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  id v18 = a2;
  sub_100012D98(a3, a4);
  uint64_t v19 = sub_100022500();
  if (!v19) {
    goto LABEL_9;
  }
  uint64_t v20 = v19;
  sub_1000468D0(a1, (uint64_t)v17, (void (*)(void))type metadata accessor for SidecarIdentity);
  *(void *)&v17[*(int *)(v12 + 20)] = v20;
  v17[*(int *)(v12 + 24)] = 1;
  swift_beginAccess();
  uint64_t v21 = sub_100024888((uint64_t)v17, *(void *)(a5 + 120), (void (*)(void))sub_100040814);
  swift_endAccess();
  if (!v21)
  {
    uint64_t v22 = sub_100022838();
    if (v23)
    {
      uint64_t v26 = v22;
      sub_1000468D0((uint64_t)v17, (uint64_t)v15, (void (*)(void))_s7SessionC8IdentityVMa);
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_100004964(v10, (uint64_t)qword_1000AA248);
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v28, v24, v10);
      type metadata accessor for Relay.Session(0);
      uint64_t v21 = swift_allocObject();
      sub_10002D104();
      sub_10003404C(v21, (uint64_t)v17);
      sub_10002D640(1uLL);
      sub_10002F2A4();
      sub_10002EFBC();
      goto LABEL_7;
    }
    sub_100046880();
LABEL_9:

    sub_100012DAC(a3, a4);
    return 0;
  }
LABEL_7:
  sub_100046880();

  sub_100012DAC(a3, a4);
  return v21;
}

uint64_t sub_10004ED40(uint64_t a1, uint64_t a2)
{
  return sub_100036A28(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10004ED4C()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004ED94(uint64_t a1)
{
  return sub_10003869C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10004EDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004EDB0()
{
  return swift_release();
}

uint64_t sub_10004EDB8()
{
  return sub_10003889C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10004EDC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10004EE20()
{
  return swift_release();
}

unint64_t sub_10004EE28()
{
  unint64_t result = qword_1000A2F30;
  if (!qword_1000A2F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2F30);
  }
  return result;
}

void sub_10004EE74()
{
}

uint64_t sub_10004EEB0(uint64_t *a1)
{
  return sub_10004DDFC(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10004EED0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_10004EFF8((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_10004EFAC()
{
  unint64_t result = qword_1000A2F60;
  if (!qword_1000A2F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2F60);
  }
  return result;
}

uint64_t sub_10004EFF8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    unint64_t result = sub_1000175E8(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_96;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_1000175E8(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    uint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_1000175E8(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    uint64_t v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 48;
        unsigned __int8 v38 = a7 + 55;
        unsigned __int8 v39 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v37 = 58;
        }
        else
        {
          unsigned __int8 v39 = 97;
          unsigned __int8 v38 = 65;
        }
        if (v25)
        {
          uint64_t v30 = 0;
          uint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                uint64_t v35 = 0;
                if (v42 < 0x61 || v42 >= v39) {
                  return v35;
                }
                char v43 = -87;
              }
              else
              {
                char v43 = -55;
              }
            }
            else
            {
              char v43 = -48;
            }
            uint64_t v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
              return 0;
            }
            uint64_t v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43))) {
              return 0;
            }
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v45 = a7 + 48;
      unsigned __int8 v46 = a7 + 55;
      unsigned __int8 v47 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = 58;
      }
      else
      {
        unsigned __int8 v47 = 97;
        unsigned __int8 v46 = 65;
      }
      if (v25)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              uint64_t v35 = 0;
              if (v49 < 0x61 || v49 >= v47) {
                return v35;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          uint64_t v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63) {
            return 0;
          }
          uint64_t v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50))) {
            return 0;
          }
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }
      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }
      if (v25)
      {
        uint64_t v30 = 0;
        unint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          uint64_t v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63) {
            return 0;
          }
          uint64_t v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34))) {
            return 0;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_10004F43C()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100051674();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004F46C()
{
  uint64_t v0 = sub_100051674();
  return _swift_deallocObject(v0, v1, v2);
}

unint64_t sub_10004F47C()
{
  unint64_t result = qword_1000A2F78;
  if (!qword_1000A2F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2F78);
  }
  return result;
}

unint64_t sub_10004F4C8()
{
  unint64_t result = qword_1000A2F88;
  if (!qword_1000A2F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2F88);
  }
  return result;
}

unint64_t sub_10004F514(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    sub_10001178C(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10004F57C()
{
  unint64_t result = qword_1000A3DC0;
  if (!qword_1000A3DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3DC0);
  }
  return result;
}

unint64_t sub_10004F5C8()
{
  unint64_t result = qword_1000A3000;
  if (!qword_1000A3000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3000);
  }
  return result;
}

uint64_t sub_10004F614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F678()
{
  return sub_1000396AC();
}

uint64_t sub_10004F680()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100051674();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_10004F6B0(uint64_t a1)
{
  sub_10002FE78(a1, *(void *)(v1 + 16));
}

BOOL sub_10004F6B8(uint64_t a1)
{
  return sub_10005E888(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004F6D8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004F720(uint64_t a1)
{
  return sub_10002ECDC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

unint64_t sub_10004F72C()
{
  unint64_t result = qword_1000A3078;
  if (!qword_1000A3078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3078);
  }
  return result;
}

uint64_t sub_10004F778()
{
  return sub_100051324();
}

uint64_t sub_10004F790(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10004F7E0()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  uint64_t v1 = sub_100051664();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004F820(uint64_t a1)
{
  return sub_10002D6B4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004F82C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10004F83C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_errorRelease();
  uint64_t v1 = sub_100051664();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004F87C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(*(void *)(v0 + 32));
  }
  return result;
}

uint64_t sub_10004F8B0(uint64_t result)
{
  return sub_10002E3B0(result);
}

unint64_t sub_10004F8B8(unint64_t result)
{
  if (result >= 6) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_10004F8C8(unint64_t result)
{
  if (result >= 6) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10004F8D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000116B8(a3);
  sub_1000139D0();
  uint64_t v4 = sub_100051D24();
  v5(v4);
  return a2;
}

uint64_t sub_10004F928()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_100051664();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004F960(uint64_t a1)
{
  return sub_10003C6B4(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10004F970(uint64_t a1, uint64_t a2)
{
  sub_10003247C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_10004F97C(uint64_t a1)
{
  sub_100033968(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004F984()
{
  return sub_100033C98();
}

uint64_t sub_10004F98C()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100051664();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_10004F9C4(void *a1)
{
  sub_10002A620(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10004F9D4()
{
}

void sub_10004FA2C()
{
}

uint64_t sub_10004FA78()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FAB8()
{
  swift_weakDestroy();
  uint64_t v0 = sub_100051674();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004FAE8()
{
  return sub_10002941C();
}

unint64_t sub_10004FAF0()
{
  unint64_t result = qword_1000A31A8;
  if (!qword_1000A31A8)
  {
    sub_100004928(255, (unint64_t *)&qword_1000A1930);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31A8);
  }
  return result;
}

uint64_t sub_10004FB50()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100051674();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_10004FB80()
{
}

uint64_t sub_10004FB88()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FBC0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10004FBE8(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    sub_10001178C(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Relay.RelayError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004FCF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Relay.RelayError()
{
  return &type metadata for Relay.RelayError;
}

uint64_t getEnumTagSinglePayload for Relay.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Relay.DiagnosticState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004FE80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Relay.DiagnosticState.CodingKeys()
{
  return &type metadata for Relay.DiagnosticState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Relay.Session.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Relay.Session.DiagnosticState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005000CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Relay.Session.DiagnosticState.CodingKeys()
{
  return &type metadata for Relay.Session.DiagnosticState.CodingKeys;
}

uint64_t sub_100050044()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100050088(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000500F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_1000501A0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000501B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100050224(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100050264(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Relay.Session.DiagnosticState()
{
}

uint64_t sub_1000502C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100050344(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v4 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v4;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100050458(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = v4;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1000505E0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t sub_1000505E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000506E8(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 152))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100050728(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Relay.DiagnosticState()
{
}

uint64_t getEnumTagSinglePayload for TestServer.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100050820(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000508ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100050914(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void _s7SessionC8IdentityV6DomainOMa()
{
}

unint64_t sub_100050930()
{
  unint64_t result = qword_1000A31C0;
  if (!qword_1000A31C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31C0);
  }
  return result;
}

unint64_t sub_100050980()
{
  unint64_t result = qword_1000A31C8;
  if (!qword_1000A31C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31C8);
  }
  return result;
}

unint64_t sub_1000509D0()
{
  unint64_t result = qword_1000A31D0;
  if (!qword_1000A31D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31D0);
  }
  return result;
}

unint64_t sub_100050A20()
{
  unint64_t result = qword_1000A31D8;
  if (!qword_1000A31D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31D8);
  }
  return result;
}

unint64_t sub_100050A70()
{
  unint64_t result = qword_1000A31E0;
  if (!qword_1000A31E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31E0);
  }
  return result;
}

unint64_t sub_100050AC0()
{
  unint64_t result = qword_1000A31E8;
  if (!qword_1000A31E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31E8);
  }
  return result;
}

unint64_t sub_100050B10()
{
  unint64_t result = qword_1000A31F0;
  if (!qword_1000A31F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31F0);
  }
  return result;
}

unint64_t sub_100050B60()
{
  unint64_t result = qword_1000A31F8;
  if (!qword_1000A31F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A31F8);
  }
  return result;
}

unint64_t sub_100050BAC(uint64_t a1)
{
  unint64_t result = sub_100013EA8(a1);
  if (!result)
  {
    unsigned int v4 = v3;
    sub_10001178C(&qword_1000A2F90);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_100050C18()
{
  unint64_t result = qword_1000A3218;
  if (!qword_1000A3218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3218);
  }
  return result;
}

unint64_t sub_100050C64()
{
  unint64_t result = qword_1000A3220;
  if (!qword_1000A3220)
  {
    sub_10001178C(&qword_1000A2FA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3220);
  }
  return result;
}

unint64_t sub_100050CD8()
{
  unint64_t result = qword_1000A19C0;
  if (!qword_1000A19C0)
  {
    sub_10001178C(&qword_1000A18C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A19C0);
  }
  return result;
}

void sub_100050D44()
{
  sub_1000511DC();
  if (!sub_100013EA8(v1))
  {
    int v3 = v2;
    sub_10001178C(&qword_1000A2FC8);
    v3();
    sub_100051658();
    atomic_store(swift_getWitnessTable(), v0);
  }
  sub_100051120();
}

unint64_t sub_100050DB0()
{
  unint64_t result = qword_1000A3230;
  if (!qword_1000A3230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3230);
  }
  return result;
}

unint64_t sub_100050DFC()
{
  unint64_t result = qword_1000A3238;
  if (!qword_1000A3238)
  {
    sub_10001178C(&qword_1000A2FD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3238);
  }
  return result;
}

unint64_t sub_100050E70()
{
  unint64_t result = qword_1000A3240;
  if (!qword_1000A3240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3240);
  }
  return result;
}

uint64_t sub_100050EBC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100050F88(uint64_t *a1)
{
  return sub_10004EEB0(a1) & 1;
}

uint64_t sub_100050FEC()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *sub_100051010@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10005102C()
{
  return v0;
}

id sub_100051048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100021CF8(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_100051068()
{
  return v0;
}

uint64_t sub_100051080(uint64_t a1)
{
  return a1 - 8;
}

void sub_10005108C()
{
  sub_100012D98(0, 0xF000000000000000);
  sub_10004D694();
}

uint64_t sub_1000510D4()
{
  return swift_beginAccess();
}

uint64_t sub_1000510FC()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100051134()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

id sub_100051160()
{
  uint64_t v5 = *(const char **)(v3 + 1496);
  return [v1 v5:v0 v2];
}

uint64_t sub_1000511B0()
{
  void *v0 = 0x8000000000000000;
  return sub_1000116B8(v1);
}

uint64_t sub_1000511F0()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_10005121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_100051248()
{
  return v0 + 328;
}

uint64_t sub_100051258()
{
  return type metadata accessor for SidecarIdentity();
}

void sub_10005129C()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_1000512B8()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000512F0()
{
  return v0;
}

uint64_t sub_100051318()
{
  return v0;
}

uint64_t sub_100051324()
{
  return sub_100034344(v0, 12, 0x4520646E6553203ALL, (void *)0xEC000000726F7272);
}

uint64_t sub_100051358()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100051374()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1000513A4(uint64_t a1, uint64_t a2)
{
  sub_100004964(a1, a2);
  return swift_retain_n();
}

uint64_t sub_1000513D4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1000513EC()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10005141C()
{
  return v0;
}

uint64_t sub_100051428()
{
  return swift_release_n();
}

BOOL sub_100051440(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100051460(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100051480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000514C8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000514E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *Swift::Bool v10 = a10;
  return result;
}

uint64_t sub_1000514F4()
{
  return v0;
}

id sub_100051508()
{
  uint64_t v5 = *(const char **)(v3 + 1496);
  return [v0 v5:v1 v2];
}

uint64_t sub_100051528()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_10005155C()
{
  return v0;
}

uint64_t sub_100051590()
{
  return v0;
}

uint64_t sub_1000515C0()
{
  return v0;
}

uint64_t sub_1000515D4(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100051600()
{
  return sub_100034BD8(v0);
}

uint64_t sub_100051620()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100051658()
{
  return v0;
}

uint64_t sub_100051664()
{
  return v0;
}

uint64_t sub_100051674()
{
  return v0;
}

uint64_t sub_100051684()
{
  return swift_bridgeObjectRetain();
}

void sub_1000516AC()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_1000516F8()
{
  return v0;
}

uint64_t sub_100051704()
{
  return swift_willThrow();
}

uint64_t sub_10005171C()
{
  return swift_release_n();
}

uint64_t sub_100051734()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_100051758()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_10005177C()
{
  return swift_slowAlloc();
}

uint64_t sub_100051798(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void sub_1000517A0()
{
  *(void *)(v0 + 248) = 542327881;
  *(void *)(v0 + 256) = 0xE400000000000000;
}

uint64_t sub_1000517B8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000517D4()
{
  return swift_arrayDestroy();
}

BOOL sub_100051808@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_100051814@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100051838()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100051874()
{
  return 0;
}

uint64_t sub_1000518B8()
{
  return v0;
}

uint64_t sub_1000518E4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100051908()
{
  return swift_retain_n();
}

uint64_t sub_100051920()
{
  return v0;
}

uint64_t sub_100051930()
{
  return v0;
}

void sub_100051950(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

uint64_t sub_10005196C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100051998(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_1000519C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return sub_100021CF8(a1, a2, a3, v7, a5, v5);
}

uint64_t sub_1000519E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100051A00()
{
  return swift_slowAlloc();
}

uint64_t sub_100051A28()
{
  return type metadata accessor for SidecarIdentity();
}

uint64_t sub_100051A50()
{
  return v0;
}

uint64_t sub_100051A5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100017070(v3, v4, a3);
}

uint64_t sub_100051A74()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

id sub_100051ACC()
{
  uint64_t v5 = *(const char **)(v3 + 1496);
  return [v1 v5:v0 v2];
}

id sub_100051AF8()
{
  uint64_t v5 = *(const char **)(v3 + 1496);
  return [v0 v5:v1 v2];
}

uint64_t sub_100051B24()
{
  return v0;
}

uint64_t sub_100051B3C()
{
  return v0 + 328;
}

uint64_t sub_100051B70()
{
  return 0;
}

uint64_t sub_100051B7C()
{
  void *v0 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100051B94()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_100051BAC()
{
  return swift_retain_n();
}

uint64_t sub_100051BE4()
{
  return swift_release_n();
}

uint64_t sub_100051BFC()
{
  return v0;
}

uint64_t sub_100051C08()
{
  return swift_retain();
}

uint64_t sub_100051C28()
{
  return 0;
}

uint64_t sub_100051C34()
{
  return v0;
}

uint64_t sub_100051C48()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

void sub_100051C68(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100051C88()
{
  return v0;
}

uint64_t sub_100051C9C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100051CB4(float a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t sub_100051CD4()
{
  return 0;
}

uint64_t sub_100051CEC()
{
  return swift_retain();
}

uint64_t sub_100051D10()
{
  return v0;
}

uint64_t sub_100051D24()
{
  return v0;
}

uint64_t sub_100051D38(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

void sub_100051D60(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + 224) = a5;
  *(_DWORD *)(v5 + 216) = a4;
}

uint64_t sub_100051D74()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000AA2A0);
  sub_100004964(v0, (uint64_t)qword_1000AA2A0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100051DF0@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100004964(v2, (uint64_t)qword_1000AA2A0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void sub_100051E98()
{
}

void sub_100051EB0()
{
}

void sub_100051EC8(void (*a1)(void))
{
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_10003975C();
}

void sub_100051F30(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_10003909C();
  a2[2](a2, 0);

  _Block_release(a2);
}

void sub_100052218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void))
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100052F30();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = sub_100021CF8(v13, v14, -103, 0, 0, 0);
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100004964(v9, (uint64_t)qword_1000AA2A0);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16, v9);
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  sub_100019968(sub_100052F70, v19, (void (*)(void))sub_100013904);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v20 = v15;
  uint64_t v21 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a8)[2](a8, v21);

  _Block_release(a8);
}

uint64_t sub_100052458(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._countAndFlagsBits = 541346128;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = a3;
  v8._object = a4;
  String.append(_:)(v8);
  return v10;
}

void sub_100052724(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100004964(v9, (uint64_t)qword_1000AA2A0);
  id v10 = v4;
  swift_bridgeObjectRetain_n();
  id v11 = v10;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 67109378;

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 8) = 2082;
    swift_bridgeObjectRetain();
    sub_100017070(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PID %d: Service Presenter Starting Service Extension '%{public}s'", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v15 = (void *)sub_100008570();
  NSString v16 = String._bridgeToObjectiveC()();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10002451C;
  aBlock[3] = (uint64_t)&unk_100097858;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v15 relayPresenterStartServiceExtension:v16 completion:v17];
  _Block_release(v17);
  swift_unknownObjectRelease();
}

void sub_100052A94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100004964(v7, (uint64_t)qword_1000AA2A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  Swift::String v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v21[1] = a1;
    uint64_t v12 = v11;
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109378;
    LODWORD(v22) = *(_DWORD *)&v8[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v12 + 8) = 2082;
    uint64_t v13 = UUID.uuidString.getter();
    uint64_t v22 = sub_100017070(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_100052FE0();
    v16(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "PID %d: Service Presenter Service Extension Ready '%{public}s'", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    uint64_t v17 = sub_100052FE0();
    v18(v17);
  }

  uint64_t v19 = (void *)sub_100008570();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v19 relayPresenterServiceExtensionReady:isa];
  swift_unknownObjectRelease();
}

id sub_100052E24()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServicePresenter();
  return [super dealloc];
}

uint64_t type metadata accessor for ServicePresenter()
{
  return self;
}

uint64_t sub_100052E80()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100052EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100052EC8()
{
  return swift_release();
}

uint64_t sub_100052ED0(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A2EC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100052F30()
{
  unint64_t result = qword_1000A17C0;
  if (!qword_1000A17C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A17C0);
  }
  return result;
}

uint64_t sub_100052F70()
{
  return sub_100052458(*(void *)(v0 + 16), 25, 0xD000000000000015, (void *)0x800000010007FC50);
}

uint64_t sub_100052FA8()
{
  return sub_100052458(*(void *)(v0 + 16), 39, 0xD000000000000023, (void *)0x800000010007FC70);
}

uint64_t sub_100052FE0()
{
  return v0;
}

uint64_t sub_100052FF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v21 - v9;
  uint64_t v11 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100057690((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v24 = Set.init(minimumCapacity:)();
  uint64_t v21 = a1;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = v4 + 16;
    NSString v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v17 = v21 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v22 = *(void *)(v15 + 56);
    uint64_t v23 = v16;
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v19 = (void (**)(char *, uint64_t))(v15 - 8);
    while (1)
    {
      v23(v13, v17, v2);
      sub_100012E34((uint64_t)v13, 0, 1, v2);
      if (sub_100012E5C((uint64_t)v13, 1, v2) == 1) {
        break;
      }
      (*v18)(v8, v13, v2);
      sub_10004AFD0();
      (*v19)(v10, v2);
      v17 += v22;
      if (!--v14) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_100012E34((uint64_t)v13, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_100053238(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10004B29C(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void sub_1000532EC()
{
  if ((byte_1000A3280 & 1) == 0)
  {
    id v1 = [self serviceWithDefaultShellEndpoint];
    if (v1)
    {
      id v32 = v1;
      if (qword_1000A1378 != -1) {
        swift_once();
      }
      id v33 = v0;
      swift_retain();
      unsigned __int8 v2 = sub_10005ACC4();
      swift_release();
      if (qword_1000A1360 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100004964(v3, (uint64_t)qword_1000AA2A0);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136446210;
        uint64_t aBlock = v7;
        if (v2) {
          uint64_t v8 = 0x64656B636F4CLL;
        }
        else {
          uint64_t v8 = 0x64656B636F6C6E55;
        }
        if (v2) {
          unint64_t v9 = 0xE600000000000000;
        }
        else {
          unint64_t v9 = 0xE800000000000000;
        }
        sub_100017070(v8, v9, &aBlock);
        sub_1000578FC();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "=== Launching Service Presenter (Screen %{public}s) ===", v6, 0xCu);
        swift_arrayDestroy();
        sub_100004A0C();
        sub_100004A0C();
      }

      sub_1000116B8(&qword_1000A3730);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000827C0;
      uint64_t aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v11;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Bool;
      *(unsigned char *)(inited + 72) = 1;
      uint64_t aBlock = 0xD000000000000031;
      unint64_t v36 = 0x800000010007FFF0;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 168) = &type metadata for Bool;
      *(unsigned char *)(inited + 144) = 1;
      uint64_t v41 = Dictionary.init(dictionaryLiteral:)();
      if (qword_1000A1328 != -1) {
        swift_once();
      }
      uint64_t v12 = *(void **)(qword_1000AA240 + 56);
      if ([v12 respondsToSelector:"overridePresenterLaunchOptions:"])
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v14 = [v12 overridePresenterLaunchOptions:isa];

        uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();

        NSString v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Overriding launch options", v18, 2u);
          sub_100004A0C();
        }

        swift_bridgeObjectRelease();
        uint64_t v41 = v15;
      }
      sub_100004928(0, (unint64_t *)&unk_1000A3738);
      uint64_t v21 = swift_bridgeObjectRetain();
      id v22 = sub_100054668(v21);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446723;
        sub_100017070(0xD000000000000011, 0x800000010007E270, &aBlock);
        sub_1000578FC();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2048;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 22) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v26 = Dictionary.description.getter();
        unint64_t v28 = v27;
        swift_bridgeObjectRelease();
        sub_100017070(v26, v28, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Opening application with bundle identifier [%{public}s] using [%ld] options [%{private}s]", (uint8_t *)v25, 0x20u);
        swift_arrayDestroy();
        sub_100004A0C();
        sub_100004A0C();
      }

      NSString v29 = String._bridgeToObjectiveC()();
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v33;
      unsigned __int8 v39 = sub_100057310;
      uint64_t v40 = v30;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v36 = 1107296256;
      unsigned __int8 v37 = sub_10000E848;
      unsigned __int8 v38 = &unk_1000978A8;
      unint64_t v31 = _Block_copy(&aBlock);
      swift_release();
      [v32 openApplication:v29 withOptions:v22 completion:v31];
      _Block_release(v31);

      byte_1000A3280 = 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v34 = sub_100021CF8(v19, v20, -999, 0, 0, 0);
      sub_100053BB0(0, (uint64_t)v34);
    }
  }
}

uint64_t sub_100053A80()
{
  swift_beginAccess();
  objc_setAssociatedObject(v0, &unk_1000AA2C0, 0, (void *)0x301);
  return swift_endAccess();
}

uint64_t sub_100053ADC()
{
  uint64_t v0 = sub_100053238((uint64_t)&off_100095A78);
  uint64_t result = sub_100053B14((uint64_t)&off_100095B08, v0);
  qword_1000AA2B8 = result;
  return result;
}

uint64_t sub_100053B14(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      sub_10004B29C(&v8, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v6 = a2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_100053BB0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_getErrorValue();
    uint64_t v8 = sub_1000541EC(v16[2], v16[3]);
    if (qword_1000A1360 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_100004964(v4, (uint64_t)qword_1000AA2A0);
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    __chkstk_darwin(v10);
    v16[-2] = v8;
    sub_100019968((uint64_t (*)(void))sub_10005464C, 0, (void (*)(void))sub_100012D6C);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (qword_1000A1328 != -1) {
      swift_once();
    }
    sub_100038DF0();
    swift_errorRelease();
  }
  else
  {
    if (qword_1000A1360 != -1) {
      swift_once();
    }
    sub_100004964(v4, (uint64_t)qword_1000AA2A0);
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v14 = 67109120;
      if (a1) {
        unsigned int v15 = [v11 pid];
      }
      else {
        unsigned int v15 = 0;
      }
      unsigned int v17 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Service Presenter PID %d Launched", v14, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
  }
  byte_1000A3280 = 0;
}

uint64_t sub_100053EBC()
{
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  sub_10005734C();
  id v1 = v0;
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
  }
  else
  {
    swift_allocError();
    *uint64_t v2 = v27;
  }
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v4 = [v3 domain];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v5 && v8 == v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if ([v3 code] != (id)1) {
      goto LABEL_24;
    }
    id v14 = [v3 userInfo];
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100024664(v16, v17, v15, &v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v28)
    {
      sub_1000236F4((uint64_t)&v27);
      goto LABEL_24;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_24;
    }
    id v18 = v26;
    uint64_t v19 = sub_100053EBC();

    goto LABEL_27;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v5 && v11 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_22:
    if ([v3 code] != (id)7) {
      goto LABEL_24;
    }
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = (uint64_t)sub_100021CF8(v20, v21, -202, 0, 0, 0);
LABEL_27:

    return v19;
  }
LABEL_24:
  *(void *)&long long v27 = v1;
  id v22 = v1;
  uint64_t v23 = _getErrorEmbeddedNSError<A>(_:)();
  if (!v23)
  {
    uint64_t v19 = swift_allocError();
    void *v24 = v27;
    goto LABEL_27;
  }
  uint64_t v19 = v23;

  return v19;
}

uint64_t sub_1000541EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v37 - v10, v3, a1);
  uint64_t v13 = _getErrorEmbeddedNSError<A>(_:)();
  uint64_t v38 = v3;
  uint64_t v39 = a2;
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v14, v11, a1);
  }
  uint64_t v15 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v16 = [v15 domain];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v20 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v17 && v23 == v19)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          goto LABEL_24;
        }
      }
      if ([v15 code] == (id)7)
      {
        sub_100004928(0, (unint64_t *)&qword_1000A17C0);
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = (uint64_t)sub_100021CF8(v32, v33, -202, 0, 0, 0);
        goto LABEL_27;
      }
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
  if ([v15 code] == (id)1)
  {
    id v26 = [v15 userInfo];
    uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100024664(v28, v29, v27, &v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42)
    {
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      if (swift_dynamicCast())
      {
        id v30 = v40;
        uint64_t v31 = sub_100053EBC();

        goto LABEL_27;
      }
    }
    else
    {
      sub_1000236F4((uint64_t)&v41);
    }
  }
LABEL_24:
  v12(v9, v38, a1);
  uint64_t v34 = _getErrorEmbeddedNSError<A>(_:)();
  if (v34)
  {
    uint64_t v31 = v34;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  else
  {
    uint64_t v31 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v35, v9, a1);
  }
LABEL_27:

  return v31;
}

unint64_t sub_10005464C()
{
  return 0xD00000000000002ALL;
}

id sub_100054668(uint64_t a1)
{
  if (a1)
  {
    v1.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v1.super.Class isa = 0;
  }
  id v2 = [(id)swift_getObjCClassFromMetadata() optionsWithDictionary:v1.super.isa];

  return v2;
}

void sub_1000546F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion;
  if (*(void *)(*(void *)(v2
                             + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion)
                 + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations) != a1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger);
    id v9 = objc_allocWithZone((Class)_s15AppPresentationC18SecureAppAssertionCMa(0));
    uint64_t v10 = sub_100056120((uint64_t)v7, a1);
    uint64_t v11 = *(void **)(v2 + v8);
    *(void *)(v2 + v8) = v10;
  }
}

uint64_t sub_100054808(char *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v38 = a5;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v37 - 8);
  uint64_t v11 = __chkstk_darwin(v37);
  uint64_t v39 = (void (*)(char *, uint64_t))((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - v13;
  *(void *)(v6
            + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion) = 0;
  swift_bridgeObjectRetain_n();
  uint64_t v42 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 67109378;
    LODWORD(v43) = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 8) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_100017070(a2, a3, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Showing Service Presenter PID %d %{public}s", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v18 = a2;
  uint64_t v35 = a2;
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a4;
  uint64_t v19 = v6
      + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger;
  uint64_t v20 = v41;
  uint64_t v21 = v42;
  char v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  uint64_t v23 = v37;
  v22(v6 + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger, (uint64_t)v42, v37);
  v22((uint64_t)v14, v19, v23);
  id v24 = objc_allocWithZone((Class)_s15AppPresentationC18SecureAppAssertionCMa(0));
  swift_bridgeObjectRetain();
  *(void *)(v6
            + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion) = sub_100056120((uint64_t)v14, v38);
  v22((uint64_t)v14, (uint64_t)v21, v23);
  _s15AppPresentationC20AppSwitcherAssertionCMa(0);
  char v25 = (char *)swift_allocObject();
  uint64_t v26 = (uint64_t)v39;
  v22((uint64_t)v39, (uint64_t)v14, v23);
  unint64_t v36 = a3;
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_100055130(v18, a3, v26, v25, (uint64_t)&unk_1000979F8, (uint64_t)sub_10005757C, (uint64_t)&unk_100097A10, (void (*)(NSString, void *))&SBSRequestAppSwitcherAppearanceForHiddenApplication);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v39(v14, v23);
  *(void *)(v6 + 40) = v27;
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v28 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  id v30 = v42;
  v22((uint64_t)v14, (uint64_t)v42, v23);
  unint64_t v31 = (*(unsigned __int8 *)(v20 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  uint64_t v33 = v35;
  *((void *)v32 + 2) = v29;
  *((void *)v32 + 3) = v33;
  *((void *)v32 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v32[v31], v14, v23);
  swift_retain();
  OS_dispatch_queue.after(_:closure:)();

  swift_release();
  v39(v30, v23);
  swift_release();
  return v6;
}

uint64_t sub_100054CB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v19 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    os_log_type_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v16(v13, a4, v7);
    _s15AppPresentationC21SuggestedAppAssertionCMa(0);
    uint64_t v17 = (char *)swift_allocObject();
    v16(v11, (uint64_t)v13, v7);
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_100055130(a2, a3, (uint64_t)v11, v17, (uint64_t)&unk_100097958, (uint64_t)sub_10005757C, (uint64_t)&unk_100097970, (void (*)(NSString, void *))&SBSRequestSuggestedApplication);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    *(void *)(v15
              + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_suggestedAppAssertion) = v18;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100054EA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_logger;
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Dismissing Service Presenter PID %d", v5, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v2, v6);
  objc_release(*(id *)(v1
                     + OBJC_IVAR____TtCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation_secureAppAssertion));
  swift_release();
  return v1;
}

uint64_t sub_10005500C()
{
  return sub_100055E74(sub_100054EA4);
}

uint64_t sub_100055024()
{
  return _s15AppPresentationCMa(0);
}

uint64_t _s15AppPresentationCMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A32C8);
}

uint64_t sub_10005504C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005511C()
{
  return 0x296C6C756E28;
}

char *sub_100055130(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(NSString, void *))
{
  uint64_t v53 = a8;
  uint64_t v49 = a7;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  type metadata accessor for Logger();
  sub_100013930();
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v16);
  uint64_t v47 = v17;
  uint64_t v48 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = a1;
  uint64_t v54 = a1;
  *((void *)a4 + 4) = a2;
  uint64_t v52 = v13;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v13 + 16);
  uint64_t v19 = v18(&a4[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation12AppAssertion_logger], a3);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 128))(v19);
  unint64_t v22 = v21;
  swift_bridgeObjectRetain_n();
  unint64_t v55 = v22;
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v46 = v20;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v45 = a3;
    uint64_t v27 = v26;
    uint64_t v43 = swift_slowAlloc();
    aBlock[0] = v43;
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v44 = v18;
    unint64_t v28 = v55;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_100017070(v20, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_100017070(v54, a2, aBlock);
    uint64_t v18 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Acquiring '%{public}s' for '%{public}s'", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    sub_100004A0C();
    a3 = v45;
    sub_100004A0C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v30 = v47;
  uint64_t v29 = v48;
  ((void (*)(char *, uint64_t, uint64_t))v18)(v48, a3, v47);
  uint64_t v31 = v52;
  unint64_t v32 = (*(unsigned __int8 *)(v52 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  unint64_t v33 = (v15 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v34 + v32, v29, v30);
  uint64_t v35 = (uint64_t *)(v34 + v33);
  uint64_t v37 = v54;
  unint64_t v36 = v55;
  *uint64_t v35 = v46;
  v35[1] = v36;
  uint64_t v38 = (uint64_t *)(v34 + ((v33 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t *v38 = v37;
  v38[1] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v39 = String._bridgeToObjectiveC()();
  aBlock[4] = v51;
  aBlock[5] = v34;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100055FB4;
  aBlock[3] = v49;
  uint64_t v40 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v53(v39, v40);
  _Block_release(v40);
  swift_bridgeObjectRelease();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a3, v30);
  return a4;
}

uint64_t sub_100055538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v36 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v19 = (v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v21 + v18, v17, v14);
  unint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v33;
  *unint64_t v22 = v32;
  v22[1] = v23;
  os_log_type_t v24 = (void *)(v21 + v20);
  uint64_t v25 = v35;
  void *v24 = v34;
  v24[1] = v25;
  aBlock[4] = sub_100057630;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_1000979C0;
  uint64_t v26 = _Block_copy(aBlock);
  id v27 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100057690((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001E950();
  uint64_t v29 = v37;
  uint64_t v28 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v30 = (void *)v36;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v13, v40);
}

void sub_100055914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  id v13 = a2;

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  oslog = Logger.logObject.getter();
  if (a2)
  {
    LOBYTE(v14) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, (os_log_type_t)v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      swift_bridgeObjectRetain();
      sub_100017070(a4, a5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_100017070(a6, a7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = "Acquired '%{public}s' for '%{public}s'";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v14, v16, (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    uint64_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, (os_log_type_t)v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      swift_bridgeObjectRetain();
      sub_100017070(a4, a5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_100017070(a6, a7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = "Failed to Acquire '%{public}s' for '%{public}s'";
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

void *sub_100055C0C()
{
  unint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation12AppAssertion_logger;
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v5 = (*(uint64_t (**)(void))(*v0 + 128))();
    sub_100017070(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2082;
    uint64_t v7 = v0[3];
    unint64_t v8 = v0[4];
    swift_bridgeObjectRetain();
    sub_100017070(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Invalidating '%s' for '%{public}s'", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v9 = (void *)v0[2];
  if (v9)
  {
    [v9 invalidate];
    uint64_t v10 = (void *)v0[2];
  }
  else
  {
    uint64_t v10 = 0;
  }

  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v1, v11);
  return v0;
}

uint64_t sub_100055E5C()
{
  return sub_100055E74((uint64_t (*)(void))sub_100055C0C);
}

uint64_t sub_100055E74(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_100055ECC()
{
  return _s15AppPresentationC12AppAssertionCMa(0);
}

uint64_t _s15AppPresentationC12AppAssertionCMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A33F0);
}

uint64_t sub_100055EF4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100055F98()
{
  return 0xD000000000000014;
}

void sub_100055FB4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_100056024()
{
  return _s15AppPresentationC20AppSwitcherAssertionCMa(0);
}

uint64_t _s15AppPresentationC20AppSwitcherAssertionCMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A34D0);
}

unint64_t sub_100056050()
{
  return 0xD000000000000015;
}

uint64_t sub_10005606C()
{
  uint64_t v0 = sub_100055C0C();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000560C0()
{
  return _s15AppPresentationC21SuggestedAppAssertionCMa(0);
}

uint64_t _s15AppPresentationC21SuggestedAppAssertionCMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A35B8);
}

uint64_t sub_1000560E8()
{
  return swift_updateClassMetadata2();
}

char *sub_100056120(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion] = 0;
  unint64_t v6 = &v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_logger];
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations] = a2;
  v14.receiver = v2;
  v14.super_class = ObjectType;
  uint64_t v9 = (char *)[super init];
  sub_100056274();
  uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion];
  *(void *)&v9[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion] = v11;

  id v12 = [self sharedBacklight];
  [v12 addObserver:v9];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

void sub_100056274()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v4 = 134217984;
    v10[0] = *(void *)&v1[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Acquiring Secure App Assertion (%lx)", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v5 = self;
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_orientations];
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v10[4] = sub_100057824;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10002451C;
  v10[3] = &unk_100097A60;
  uint64_t v8 = _Block_copy(v10);
  swift_release();
  id v9 = [v5 acquireSecureAppAssertionWithType:6 supportedOrientations:v6 errorHandler:v8];
  _Block_release(v8);
  if (!v9) {
    __break(1u);
  }
}

id sub_100056450()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating Secure App Assertion (%lx)", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  id v6 = [self sharedBacklight];
  [v6 removeObserver:v2];

  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion];
  if (v7) {
    [v7 invalidate];
  }
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_100056668()
{
  return _s15AppPresentationC18SecureAppAssertionCMa(0);
}

uint64_t _s15AppPresentationC18SecureAppAssertionCMa(uint64_t a1)
{
  return sub_10003AFBC(a1, qword_1000A3718);
}

uint64_t sub_100056690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_10005786C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_100097AB0;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100057690((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001E950();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v16);
}

void sub_10005695C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1000569B8(a2);
  }
}

void sub_1000569B8(uint64_t a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    __chkstk_darwin(a1);
    swift_errorRetain();
    sub_100019968((uint64_t (*)(void))sub_100056B18, 0, (void (*)(void))sub_100013904);
    swift_errorRelease();
  }
  else
  {
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Secure App Assertion Failed", v5, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v6 = OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion;
  uint64_t v7 = *(void **)(v2
                + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion);
  if (v7)
  {
    [v7 invalidate];
    uint64_t v8 = *(void **)(v2 + v6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(v2 + v6) = 0;
}

unint64_t sub_100056B18()
{
  return 0xD00000000000001BLL;
}

void sub_100056B34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v5 = a3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    id v9 = (id)NSStringFromBLSBacklightState();
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    sub_100017070(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    id v13 = v5;
    sub_1000116B8((uint64_t *)&unk_1000A3750);
    uint64_t v14 = String.init<A>(describing:)();
    sub_100017070(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Backlight Changed: %s, for reason %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v16 = OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion;
  if (!*(void *)(v4
                  + OBJC_IVAR____TtCCC12SidecarRelay16ServicePresenterP33_82D211662E7B4B6BB6B9239E3718712D15AppPresentation18SecureAppAssertion_assertion)
    && (BLSBacklightStateIsActive() & 1) == 0)
  {
    sub_100056274();
    uint64_t v17 = *(void **)(v4 + v16);
    *(void *)(v4 + v16) = v18;
  }
}

void sub_100056DE8()
{
}

uint64_t sub_100056E3C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100056EE4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  sub_100013930();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  id v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v10 = objc_getAssociatedObject(v2, &unk_1000AA2C0);
  swift_endAccess();
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  sub_1000573DC((uint64_t)v16, (uint64_t)v17);
  if (v18)
  {
    _s15AppPresentationCMa(0);
    if (swift_dynamicCast())
    {
      sub_1000546F4(a1);
      return swift_release();
    }
  }
  else
  {
    sub_1000236F4((uint64_t)v17);
  }
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100004964(v4, (uint64_t)qword_1000AA2A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v4);
  int v12 = *(_DWORD *)&v2[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
  _s15AppPresentationCMa(0);
  swift_allocObject();
  id v13 = (void *)sub_100054808(v9, 0xD000000000000011, 0x800000010007E270, v12, a1);
  swift_beginAccess();
  objc_setAssociatedObject(v2, &unk_1000AA2C0, v13, (void *)0x301);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100057120(uint64_t a1)
{
  if (qword_1000A1360 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100004964(v3, (uint64_t)qword_1000AA2A0);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v7 + 8) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "=== Service Presenter PID %d Ready %lu ===", (uint8_t *)v7, 0x12u);
    sub_100004A0C();
  }
  else
  {
  }
  return sub_100056EE4(a1);
}

uint64_t sub_100057300()
{
  uint64_t v0 = sub_100051674();
  return _swift_deallocObject(v0, v1, v2);
}

void sub_100057310(void *a1, uint64_t a2)
{
}

uint64_t sub_100057334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057344()
{
  return swift_release();
}

unint64_t sub_10005734C()
{
  unint64_t result = qword_1000A3748;
  if (!qword_1000A3748)
  {
    sub_100004928(255, (unint64_t *)&qword_1000A17C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3748);
  }
  return result;
}

uint64_t sub_1000573AC()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100051674();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000573DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057444()
{
  swift_weakDestroy();
  uint64_t v0 = sub_100051674();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100057474()
{
  type metadata accessor for Logger();
  sub_100013930();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 40) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10001EBBC();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_100057510()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100054CB0(v2, v3, v4, v5);
}

uint64_t sub_100057580()
{
  type metadata accessor for Logger();
  sub_100013930();
  sub_10005789C();

  uint64_t v3 = sub_10001EBBC();
  v4(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v2, v1);
}

void sub_100057630()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EAC8(v0);
  sub_1000578E4();
  sub_1000578CC();

  sub_100055914(v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100057690(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000576DC()
{
  type metadata accessor for Logger();
  sub_100013930();
  sub_10005789C();
  uint64_t v3 = sub_10001EBBC();
  v4(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v2, v1);
}

uint64_t sub_100057784(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  sub_10001EAC8(v2);
  sub_1000578E4();
  sub_1000578CC();

  return sub_100055538(a1, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000577F4()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100051674();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100057824(uint64_t a1)
{
  return sub_100056690(a1, v1);
}

uint64_t sub_10005782C()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10005786C()
{
  sub_10005695C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005789C()
{
  return swift_release();
}

uint64_t sub_100057910()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A3760);
  sub_100004964(v0, (uint64_t)qword_1000A3760);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100057990()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 56))
  {
    uint64_t v2 = qword_1000A1370;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100004964(v3, (uint64_t)qword_1000A3760);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cancelling timer that is still alive during deinitialization.", v6, 2u);
      swift_slowDealloc();
    }

    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = *(void (**)(id, uint64_t))(v1 + 40);
  if (v7)
  {
    uint64_t v8 = qword_1000A1370;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100004964(v9, (uint64_t)qword_1000A3760);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      int v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Calling completion block that was left unexecuted during deinitialization.", v12, 2u);
      swift_slowDealloc();
    }

    sub_100052F30();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = sub_100021CF8(v13, v14, -999, 0xD000000000000043, 0x80000001000801A0, 0);
    v7(v15, v16);

    sub_100012A1C((uint64_t)v7);
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_100012A1C(*(void *)(v1 + 40));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t sub_100057C18()
{
  sub_100057990();

  return _swift_deallocClassInstance(v0, 82, 7);
}

uint64_t type metadata accessor for RemoteDisplayInitiationOperation()
{
  return self;
}

uint64_t sub_100057C70()
{
  _StringGuts.grow(_:)(39);
  uint64_t v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = v1;
  v2._object = (void *)0x8000000100080170;
  v2._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 93;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t sub_100057D54()
{
  return sub_100057C70();
}

uint64_t sub_100057D78()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    id v2 = *v0;
  }
  else
  {
    id v3 = (id)SidecarMapTableCreateStrong();
    void *v0 = v3;
    id v2 = v3;
    uint64_t v1 = 0;
  }
  id v4 = v1;
  uint64_t v5 = SidecarMapTableAddObject();

  return v5;
}

unsigned char *sub_100057DE0(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(v3 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect) = 0;
  uint64_t v7 = (void *)(v3 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_serviceIdentifier);
  void *v7 = a1;
  v7[1] = a2;
  swift_bridgeObjectRetain();
  id v8 = a3;
  uint64_t v9 = sub_100004ACC(v8);
  if (a1 == 0xD000000000000019 && a2 == 0x800000010007DDE0 || (sub_1000599BC() & 1) != 0) {
    v9[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect] = 1;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000010007DE80)
  {
    swift_bridgeObjectRelease();

LABEL_9:
    v9[OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect] = 1;
    return v9;
  }
  char v10 = sub_1000599BC();
  swift_bridgeObjectRelease();

  if (v10) {
    goto LABEL_9;
  }
  return v9;
}

uint64_t sub_100057EDC()
{
  return sub_100057F0C(sub_10000520C);
}

uint64_t sub_100057EF4()
{
  return sub_100057F0C(sub_100005218);
}

#error "100057F44: call analysis failed (funcsize=24)"

uint64_t sub_100057F74(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  __chkstk_darwin(v4);
  sub_100013AFC();
  uint64_t v57 = v6 - v5;
  uint64_t v7 = type metadata accessor for SidecarIdentity();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v56 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v49 - v10;
  uint64_t v12 = sub_1000116B8(&qword_1000A1970);
  __chkstk_darwin(v12 - 8);
  sub_100013AFC();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v18 = v17;
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)&v49 - v23;
  uint64_t result = sub_100008070();
  if (v26)
  {
    sub_1000599F0();
    uint64_t v27 = sub_100057D78();
    swift_endAccess();
    uint64_t v55 = v27;
    id v28 = sub_1000596B0(v27);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v54 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v24, v16);
    uint64_t v29 = a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity;
    sub_100059744(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_identity, v15);
    sub_100012E34(v15, 0, 1, v4);
    sub_1000599F0();
    sub_100021B78(v15, (uint64_t)v22);
    swift_endAccess();
    if (qword_1000A1328 != -1) {
      swift_once();
    }
    uint64_t v53 = v29;
    uint64_t v30 = v29;
    uint64_t v31 = v57;
    sub_100059744(v30, v57);
    sub_1000597A8(v31, (uint64_t)v11);
    sub_10002C900((uint64_t)v11, 0);
    sub_10005980C((uint64_t)v11);
    sub_100004928(0, &qword_1000A1978);
    id v32 = sub_100061E50();
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = v16;
      uint64_t v35 = v54;
    }
    else
    {
      uint64_t v36 = sub_100006A00();
      unint64_t v38 = v37;
      if (qword_1000A1340 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100004964(v39, (uint64_t)qword_1000AA248);
      swift_bridgeObjectRetain();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        uint64_t v52 = v2;
        uint64_t v43 = (uint8_t *)v42;
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = v16;
        v59[0] = v50;
        *(_DWORD *)uint64_t v43 = 136446210;
        uint64_t v49 = v43 + 4;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_100017070(v36, v38, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s: Device Not Found", v43, 0xCu);
        swift_arrayDestroy();
        uint64_t v16 = v51;
        sub_100004A0C();
        id v2 = v52;
        sub_100004A0C();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_100059744(v53, v31);
      uint64_t v44 = v56;
      sub_1000597A8(v31, v56);
      uint64_t v35 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v22, v44, v16);
      id v45 = objc_allocWithZone((Class)SidecarDevice);
      id v33 = sub_100059868((uint64_t)v22);
      uint64_t v34 = v16;
    }
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v47 = *(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink);
    NSString v48 = String._bridgeToObjectiveC()();
    [v2 relaySession:isa openedByDevice:v33 dataLink:v47 service:v48];

    (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v34);
    return v55;
  }
  return result;
}

void sub_100058554(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  sub_1000116FC(a2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    uint64_t v11 = sub_100057F74(a1);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v3 relaySession:v11 receivedOPACKData:isa dataLink:*(int *)(a1 + OBJC_IVAR____TtCC12SidecarRelay5Relay7Session_dataLink)];
    sub_100012DAC(v9, v10);
  }
}

void sub_100058654(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  if (qword_1000A1328 != -1) {
    swift_once();
  }
  sub_100038988(a1);
  a2[2](a2, 0);

  _Block_release(a2);
}

void sub_1000588F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void))
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = sub_100021CF8(v13, v14, -103, 0, 0, 0);
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100004964(v9, (uint64_t)qword_1000AA248);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v16, v9);
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  sub_100019968(sub_100052F70, v19, (void (*)(void))sub_100013904);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v20 = v15;
  uint64_t v21 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a8)[2](a8, v21);

  _Block_release(a8);
}

void sub_100058D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v11 - 8);
  sub_100013AFC();
  uint64_t v14 = v13 - v12;
  v15.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100059630(a2, v14);
  uint64_t v16 = type metadata accessor for UUID();
  Class isa = 0;
  if (sub_100012E5C(v14, 1, v16) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v14, v16);
  }
  NSString v18 = String._bridgeToObjectiveC()();
  Class v19 = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a7;
  aBlock[5] = a8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002451C;
  aBlock[3] = &unk_100097AD8;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v23.receiver = v21;
  v23.super_class = (Class)type metadata accessor for ServiceProvider();
  [v23 relaySessionOpen:v15.super.isa isa:v18 v19:v19 a6:v20];
  _Block_release(v20);
}

void sub_100058F44(void *a1, void (**a2)(void, void))
{
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100004964(v4, (uint64_t)qword_1000AA248);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v8 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "PID %d: Allow Reconnect = %{BOOL}d", (uint8_t *)v8, 0xEu);
    swift_slowDealloc();
  }
  else
  {
  }
  *((unsigned char *)v5 + OBJC_IVAR____TtC12SidecarRelay15ServiceProvider_allowsReconnect) = 0;
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_1000590E8(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
}

void sub_10005915C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013AFC();
  uint64_t v9 = v8 - v7;
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100004964(v10, (uint64_t)qword_1000AA248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a1, v3);
  id v11 = v1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v14 + 8) = 2082;
    uint64_t v15 = UUID.uuidString.getter();
    sub_100017070(v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_100059A14();
    v18(v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PID %d: Service Extension Ready '%{public}s'", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy();
    sub_100004A0C();
    sub_100004A0C();
  }
  else
  {

    uint64_t v19 = sub_100059A14();
    v20(v19);
  }

  if (qword_1000A1328 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void **)(qword_1000AA240 + 176);
  if (v21)
  {
    id v22 = v21;
    v23.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v22 relayPresenterServiceExtensionReady:v23.super.isa];
  }
  else
  {
    os_log_type_t v24 = (char *)v11;
    v23.super.Class isa = (Class)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v23.super.isa, v25))
    {
      char v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v26 = 67109120;
      LODWORD(v27) = *(_DWORD *)&v24[OBJC_IVAR____TtC12SidecarRelay6Client_processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v23.super.isa, v25, "PID %d: No Service Presenter", v26, 8u);
      sub_100004A0C();
    }
    else
    {

      v23.super.Class isa = (Class)v24;
    }
  }
}

uint64_t sub_1000595B8()
{
  return sub_1000599E8();
}

id sub_1000595C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServiceProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for ServiceProvider()
{
  return self;
}

uint64_t sub_100059630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2EC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100059698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000596A8()
{
  return swift_release();
}

id sub_1000596B0(int a1)
{
  v3[0] = HIBYTE(a1);
  v3[1] = BYTE2(a1);
  v3[2] = BYTE1(a1);
  v3[3] = a1;
  uint64_t v4 = -1;
  int v5 = -1;
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v3];

  return v1;
}

uint64_t sub_100059744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s7SessionC8IdentityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000597A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SidecarIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005980C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SidecarIdentity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100059868(uint64_t a1)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v2 initWithIdentifier:isa model:v5 name:v6 version:v7];

  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  return v8;
}

uint64_t sub_100059984()
{
  return sub_100052458(*(void *)(v0 + 16), 38, 0xD000000000000022, (void *)0x80000001000802C0);
}

uint64_t sub_1000599BC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000599E8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000599F0()
{
  return swift_beginAccess();
}

uint64_t sub_100059A14()
{
  return v0;
}

uint64_t sub_100059A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  NSString v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_100059A94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100059AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100059B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100059BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100059C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100059C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059C9C);
}

uint64_t sub_100059C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_100012E5C(a1, a2, v4);
}

uint64_t sub_100059CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059CF8);
}

uint64_t sub_100059CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_100012E34(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SidecarIdentity()
{
  uint64_t result = qword_1000A3A00;
  if (!qword_1000A3A00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100059D8C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100059E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v5 - 8);
  sub_100051198();
  sub_10005A070(*(id *)(a1 + 16), v2);
  swift_release();
  uint64_t v6 = type metadata accessor for SidecarIdentity();
  if (sub_10005A4D8(v6))
  {
    sub_10005A47C(v2, &qword_1000A2E10);
    uint64_t v7 = 1;
  }
  else
  {
    sub_1000597A8(v2, a2);
    uint64_t v7 = 0;
  }
  return sub_100012E34(a2, v7, 1, a1);
}

uint64_t sub_100059EE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v3 - 8);
  sub_100051198();
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (sub_100012E5C(v1, 1, v4) == 1)
  {
    sub_10005A47C(v1, &qword_1000A2EC0);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    v9(v7, v1, v4);
    v9((char *)a1, (uint64_t)v7, v4);
    uint64_t v8 = 0;
  }
  uint64_t v10 = type metadata accessor for SidecarIdentity();
  return sub_100012E34(a1, v8, 1, v10);
}

uint64_t sub_10005A070@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v5 - 8);
  sub_100051198();
  id v6 = a1;
  sub_10005A40C(v6);
  if (v7)
  {
    sub_100059EE0(v2);

    uint64_t v8 = type metadata accessor for SidecarIdentity();
    if (sub_10005A4D8(v8) != 1)
    {
      sub_1000597A8(v2, a2);
      uint64_t v10 = a2;
      uint64_t v11 = 0;
      uint64_t v9 = (uint64_t)v6;
      return sub_100012E34(v10, v11, 1, v9);
    }
    sub_10005A47C(v2, &qword_1000A2E10);
  }
  else
  {
  }
  uint64_t v9 = type metadata accessor for SidecarIdentity();
  uint64_t v10 = a2;
  uint64_t v11 = 1;
  return sub_100012E34(v10, v11, 1, v9);
}

uint64_t sub_10005A15C()
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100012954(isa);

  sub_1000126B0();
  v1._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 542327881;
}

uint64_t sub_10005A1E0()
{
  type metadata accessor for UUID();
  sub_10005A3C4((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10005A264()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005A2F4()
{
  return Hasher._finalize()();
}

uint64_t sub_10005A37C()
{
  return sub_10005A3C4(&qword_1000A3A38, (void (*)(uint64_t))type metadata accessor for SidecarIdentity);
}

uint64_t sub_10005A3C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005A40C(void *a1)
{
  id v2 = [a1 idsDeviceIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10005A47C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000116B8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005A4D8(uint64_t a1)
{
  return sub_100012E5C(v1, 1, a1);
}

const char *sub_10005A4F8()
{
  v12[0].socklen_t sa_len = *v0;
  memcpy(&v12[0].sa_family, v0 + 1, 0x7FuLL);
  if (v12[0].sa_len) {
    socklen_t sa_len = v12[0].sa_len;
  }
  else {
    socklen_t sa_len = 128;
  }
  uint64_t v2 = (char *)swift_slowAlloc();
  uint64_t v3 = (char *)swift_slowAlloc();
  int v4 = getnameinfo(v12, sa_len, v2, 0x401u, v3, 0x20u, 26);
  if (!v4)
  {
    uint64_t v6 = String.init(cString:)();
    uint64_t v7 = String.init(cString:)();
    uint64_t v9 = v8;
    v10._countAndFlagsBits = 58;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = v7;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t result = gai_strerror(v4);
  if (result)
  {
    uint64_t v6 = String.init(cString:)();
LABEL_8:
    swift_slowDealloc();
    swift_slowDealloc();
    return (const char *)v6;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Sockaddr()
{
  return &type metadata for Sockaddr;
}

{
  return &type metadata for Sockaddr;
}

uint64_t sub_10005A66C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10005A6B0()
{
  if (qword_1000A1378 != -1) {
    swift_once();
  }
  swift_retain();
  if (sub_10005ACD0()) {
    uint64_t v0 = 2;
  }
  else {
    uint64_t v0 = 0;
  }
  if (sub_10005ACC4()) {
    uint64_t v1 = v0 | 8;
  }
  else {
    uint64_t v1 = v0;
  }
  int IsActive = IOPMUserIsActive();
  swift_release();
  if (IsActive) {
    return v1 | 4;
  }
  else {
    return v1;
  }
}

uint64_t sub_10005A750()
{
  type metadata accessor for System();
  swift_allocObject();
  uint64_t result = sub_10005A78C();
  qword_1000AA2C8 = result;
  return result;
}

uint64_t sub_10005A78C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)CUSystemMonitor) init];
  *(void *)(v1 + 16) = v6;
  *(void *)(v1 + 24) = sub_10007B378();
  sub_10001589C();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  id v7 = v6;
  uint64_t v8 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v7 setDispatchQueue:v8];

  NSString v18 = (uint64_t (*)())RapportDeviceChangeFlags.rawValue.getter;
  uint64_t v19 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  uint64_t v17 = &unk_100097B80;
  uint64_t v9 = _Block_copy(&aBlock);
  [v7 setPrimaryAppleIDChangedHandler:v9];
  _Block_release(v9);
  NSString v18 = (uint64_t (*)())RapportDeviceChangeFlags.rawValue.getter;
  uint64_t v19 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  uint64_t v17 = &unk_100097BA8;
  Swift::String v10 = _Block_copy(&aBlock);
  [v7 setScreenLockedChangedHandler:v10];
  _Block_release(v10);
  NSString v18 = (uint64_t (*)())RapportDeviceChangeFlags.rawValue.getter;
  uint64_t v19 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  uint64_t v17 = &unk_100097BD0;
  Swift::String v11 = _Block_copy(&aBlock);
  [v7 setScreenOnChangedHandler:v11];
  _Block_release(v11);
  NSString v18 = sub_10005AD84;
  uint64_t v19 = v1;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  uint64_t v17 = &unk_100097BF8;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v7 activateWithCompletion:v12];
  _Block_release(v12);

  return v1;
}

uint64_t sub_10005AADC(uint64_t a1)
{
  return sub_10007B3D0(*(void *)(a1 + 24));
}

id sub_10005AAE4()
{
  sub_10007B41C(*(pthread_mutex_t **)(v0 + 24));
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1000573DC((uint64_t)&v10, (uint64_t)v12);
  if (v13)
  {
    if sub_10005ADA4() && (v9) {
      return 0;
    }
  }
  else
  {
    sub_1000236F4((uint64_t)v12);
  }
  id v5 = [v1 standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1000573DC((uint64_t)&v10, (uint64_t)v12);
  if (v13)
  {
    if sub_10005ADA4() && (v9) {
      return 0;
    }
  }
  else
  {
    sub_1000236F4((uint64_t)v12);
  }
  return [*(id *)(v0 + 16) manateeAvailable];
}

id sub_10005ACC4()
{
  return sub_10005ACDC((SEL *)&selRef_screenLocked);
}

id sub_10005ACD0()
{
  return sub_10005ACDC((SEL *)&selRef_screenOn);
}

id sub_10005ACDC(SEL *a1)
{
  sub_10007B41C(*(pthread_mutex_t **)(v1 + 24));
  return [*(id *)(v1 + 16) *a1];
}

uint64_t sub_10005AD10()
{
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for System()
{
  return self;
}

uint64_t sub_10005AD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005AD7C()
{
  return swift_release();
}

uint64_t sub_10005AD84()
{
  return sub_10005AADC(v0);
}

uint64_t sub_10005ADA4()
{
  return swift_dynamicCast();
}

void sub_10005ADC4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10005AE28(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa = a2;
  if (a1)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v7.super.Class isa = 0;
  if (a2) {
LABEL_3:
  }
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v7.super.isa, isa);
}

BOOL sub_10005AF10(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

id sub_10005AF3C()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  NSString v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = v0;
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))((uint64_t)v7 + OBJC_IVAR____TtC12SidecarRelay10TestDevice_uuid, v6, v1);

  uint64_t v8 = (objc_class *)type metadata accessor for TestDevice();
  v10.receiver = v7;
  v10.super_class = v8;
  return [super init];
}

void sub_10005B030()
{
}

uint64_t sub_10005B0B4()
{
  uint64_t v3 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10005E28C();
  sub_1000139D0();
  __chkstk_darwin(v5);
  sub_10005E2D8();
  sub_10005A070(v1, v2);
  uint64_t result = sub_100012E5C(v2, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000597A8(v2, v0);
    v7._countAndFlagsBits = sub_10005A15C();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_10005980C(v0);
    return 0x6976654474736554;
  }
  return result;
}

uint64_t sub_10005B240()
{
  return UUID.uuidString.getter();
}

uint64_t sub_10005B2D0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005B364()
{
  id v0 = sub_10005DD9C();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

void sub_10005B414()
{
}

id sub_10005B4A0()
{
  return sub_10005DAA8(0, type metadata accessor for TestDevice);
}

uint64_t sub_10005B520()
{
  return type metadata accessor for TestDevice();
}

uint64_t type metadata accessor for TestDevice()
{
  uint64_t result = qword_1000A3B40;
  if (!qword_1000A3B40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B570()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005B618()
{
  uint64_t v3 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10005E28C();
  sub_1000139D0();
  __chkstk_darwin(v5);
  sub_10005E2D8();
  sub_10005A070(*(id *)(v1 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice), v2);
  uint64_t result = sub_100012E5C(v2, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000597A8(v2, v0);
    strcpy((char *)v8, "TestSession ");
    BYTE5(v8[1]) = 0;
    HIWORD(v8[1]) = -5120;
    v7._countAndFlagsBits = sub_10005A15C();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_10005980C(v0);
    return v8[0];
  }
  return result;
}

void *sub_10005B76C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice);
  id v2 = v1;
  return v1;
}

uint64_t sub_10005B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a4;
  *(void *)(v9 + 24) = a5;
  sub_10005E2B4();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000442E8(sub_10005DD6C, v9, a1, a2);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void sub_10005B994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a2) {
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v6.super.Class isa = 0;
  }
  Class isa = v6.super.isa;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_10005BA4C(uint64_t a1, uint64_t a2)
{
  sub_10005E2B4();
  uint64_t v4 = sub_100043F24(a1, a2);
  uint64_t result = swift_endAccess();
  if (v4) {
    return sub_100012A1C(v4);
  }
  return result;
}

void sub_10005BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  id v8 = sub_100021EC8(-6772, 0, 0);
  if (a7)
  {
    id v9 = v8;
    a7();
    id v8 = v9;
  }
}

uint64_t sub_10005BDE0()
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10001BBB8();
  sub_100013930();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100018DA8();
  id v11 = [v0 dispatchQueue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  aBlock[4] = sub_10005DC94;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_100097D60;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v0;
  static DispatchQoS.unspecified.getter();
  sub_10005DC14((unint64_t *)&unk_1000A3E50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001E950();
  sub_10005E270();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
  return swift_release();
}

void sub_10005C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void, void, void))
{
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = sub_100021CF8(v9, v10, 3328, 0, 0, 0);
  uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void, void, void *))a8)[2](a8, 0, 0, v12);

  _Block_release(a8);
}

void sub_10005C334()
{
}

id sub_10005C374(uint64_t a1)
{
  return sub_10005DAA8(a1, type metadata accessor for TestSession);
}

uint64_t type metadata accessor for TestSession()
{
  return self;
}

id sub_10005C470(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_10005C4E0()
{
  uint64_t v1 = sub_1000116B8(&qword_1000A2E10);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SidecarIdentity();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005A070(*(id *)(v0 + OBJC_IVAR____TtC12SidecarRelay11TestSession_testDevice), (uint64_t)v3);
  uint64_t result = sub_100012E5C((uint64_t)v3, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1000597A8((uint64_t)v3, (uint64_t)v6);
    strcpy((char *)v10, "ProxySession ");
    HIWORD(v10[1]) = -4864;
    v8._countAndFlagsBits = sub_10005A15C();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = v10[0];
    sub_10005980C((uint64_t)v6);
    return v9;
  }
  return result;
}

id sub_10005C634()
{
  return sub_10005DAA8(0, type metadata accessor for TestServer.ProxySession);
}

uint64_t sub_10005C650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v24 = sub_10001BBB8();
  sub_100013930();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_100018DA8();
  id v19 = [v9 dispatchQueue];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = a5;
  uint64_t v21 = _Block_copy(aBlock);
  sub_10004F82C(a1);
  static DispatchQoS.unspecified.getter();
  sub_10005DC14((unint64_t *)&unk_1000A3E50, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001E950();
  sub_10005E270();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v12);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v7, v24);
  return swift_release();
}

id sub_10005C95C()
{
  uint64_t v1 = OBJC_IVAR____TtC12SidecarRelay10TestServer_sessions;
  type metadata accessor for TestSession();
  type metadata accessor for TestServer.ProxySession();
  sub_10005DC14(&qword_1000A3C90, v2, (void (*)(uint64_t))type metadata accessor for TestSession);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = OBJC_IVAR____TtC12SidecarRelay10TestServer_proxies;
  sub_10005DC14(&qword_1000A3C98, 255, (void (*)(uint64_t))type metadata accessor for TestServer.ProxySession);
  *(void *)&v3[v4] = Dictionary.init(dictionaryLiteral:)();

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for TestServer();
  return [super init];
}

id sub_10005CAA0(uint64_t a1)
{
  return sub_10005DAA8(a1, type metadata accessor for TestServer);
}

uint64_t type metadata accessor for TestServer()
{
  return self;
}

uint64_t type metadata accessor for TestServer.ProxySession()
{
  return self;
}

uint64_t sub_10005CB4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736569786F7270 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6973736573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int sub_10005CC3C(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10005CC84(char a1)
{
  if (a1) {
    return 0x736E6F6973736573;
  }
  else {
    return 0x736569786F7270;
  }
}

uint64_t sub_10005CCBC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000116B8(&qword_1000A3C78);
  sub_100013930();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000116FC(a1, a1[3]);
  sub_10005DB60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  char v15 = 0;
  sub_1000116B8(&qword_1000A18C8);
  sub_10005E168(&qword_1000A18D0);
  sub_10005E234();
  if (!v3)
  {
    uint64_t v16 = a3;
    char v15 = 1;
    sub_10005E234();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v7);
}

uint64_t sub_10005CE1C(void *a1)
{
  sub_1000116B8(&qword_1000A3CB8);
  sub_100013930();
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  sub_1000116FC(a1, v4);
  sub_10005DB60();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000136EC((uint64_t)a1);
  }
  else
  {
    sub_1000116B8(&qword_1000A18C8);
    sub_10005E168((unint64_t *)&qword_1000A19C0);
    sub_10005E204();
    uint64_t v4 = v8;
    swift_bridgeObjectRetain();
    sub_10005E204();
    uint64_t v6 = sub_10005E2F0();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_1000136EC((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

Swift::Int sub_10005CFDC()
{
  return sub_10005CC3C(*v0);
}

uint64_t sub_10005CFE4()
{
  return sub_10005CC84(*v0);
}

uint64_t sub_10005CFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005CB4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D014@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static RapportDeviceChangeFlags.distance.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10005D03C(uint64_t a1)
{
  unint64_t v2 = sub_10005DB60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D078(uint64_t a1)
{
  unint64_t v2 = sub_10005DB60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005D0B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10005CE1C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10005D0E0(void *a1)
{
  return sub_10005CCBC(a1, *v1, v1[1]);
}

id sub_10005D0FC(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC12SidecarRelay10TestClient_testDevice;
  id v4 = objc_allocWithZone((Class)type metadata accessor for TestDevice());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 init];

  id v6 = a1;
  id v7 = sub_100004ACC(v6);
  uint64_t v8 = qword_1000A1328;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }

  return v9;
}

uint64_t sub_10005D1B8()
{
  return sub_10005D1E8((uint64_t (*)(void))sub_10000520C);
}

uint64_t sub_10005D1D0()
{
  return sub_10005D1E8((uint64_t (*)(void))sub_100005218);
}

uint64_t sub_10005D1E8(uint64_t (*a1)(void))
{
  uint64_t result = a1();
  if (qword_1000A1328 != -1)
  {
    return swift_once();
  }
  return result;
}

void sub_10005D244(uint64_t a1, unint64_t a2, void *a3, void (**a4)(void, void, void))
{
  if (qword_1000A1340 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100004964(v8, (uint64_t)qword_1000AA248);
  id v9 = a3;
  swift_bridgeObjectRetain_n();
  uint64_t v10 = (char *)v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109378;

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2082;
    swift_bridgeObjectRetain();
    sub_100017070(a1, a2, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PID %d: Devices '%{public}s'", (uint8_t *)v13, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)&v10[OBJC_IVAR____TtC12SidecarRelay10TestClient_testDevice];
  type metadata accessor for RapportRemoteDisplayDevice();
  swift_allocObject();
  RapportRemoteDisplayDevice.init(device:)((uint64_t)v14);
  sub_100004928(0, &qword_1000A1978);
  id v15 = v14;
  swift_retain();
  id v16 = sub_100061E50();
  if (v16)
  {
    uint64_t v17 = v16;
    sub_1000116B8(&qword_1000A3C88);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_100082A60;
    *(void *)(v18 + 32) = v17;
    uint64_t v25 = v18;
    specialized Array._endMutation()();
    id v19 = v17;
    v20.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, void))a4)[2](a4, v20.super.isa, 0);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = sub_100021CF8(v21, v22, -200, 0, 0, 0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v20.super.Class isa = (Class)_convertErrorToNSError(_:)();
    ((void (**)(void, Class, Class))a4)[2](a4, isa, v20.super.isa);
  }
  _Block_release(a4);
}

void sub_10005D674()
{
}

id sub_10005D680(uint64_t a1)
{
  return sub_10005DAA8(a1, type metadata accessor for TestClient);
}

uint64_t type metadata accessor for TestClient()
{
  return self;
}

void sub_10005D6C8(uint64_t a1, uint64_t a2)
{
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002451C;
  aBlock[3] = &unk_100097C70;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for TestProvider();
  [super relayRegisterServiceProvider:v3];
  _Block_release(v3);
  if (qword_1000A1328 != -1) {
    swift_once();
  }
}

void sub_10005DA84()
{
}

id sub_10005DA90(uint64_t a1)
{
  return sub_10005DAA8(a1, type metadata accessor for TestProvider);
}

id sub_10005DAA8(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for TestProvider()
{
  return self;
}

unint64_t sub_10005DB14()
{
  unint64_t result = qword_1000A3C50;
  if (!qword_1000A3C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3C50);
  }
  return result;
}

unint64_t sub_10005DB60()
{
  unint64_t result = qword_1000A3C80;
  if (!qword_1000A3C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3C80);
  }
  return result;
}

uint64_t sub_10005DBAC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005DBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005DBF4()
{
  return swift_release();
}

uint64_t sub_10005DBFC(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_10005DC14(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005DC5C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10005DC94()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC12SidecarRelay11TestSession_valid) == 1) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC12SidecarRelay11TestSession_valvoid (*v29)(void, void, id) = 0;
  }
}

uint64_t sub_10005DCB8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005DCF8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0);
  }
  return result;
}

void sub_10005DD2C(uint64_t a1, uint64_t a2)
{
  sub_10005B994(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10005DD34()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005DD6C(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

id sub_10005DD9C()
{
  uint64_t v0 = MGGetStringAnswer();

  return v0;
}

unsigned char *storeEnumTagSinglePayload for TestServer.DiagnosticState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005DE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TestServer.DiagnosticState.CodingKeys()
{
  return &type metadata for TestServer.DiagnosticState.CodingKeys;
}

uint64_t destroy for TestServer.DiagnosticState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s12SidecarRelay10TestServerC15DiagnosticStateVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TestServer.DiagnosticState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TestServer.DiagnosticState(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TestServer.DiagnosticState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TestServer.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TestServer.DiagnosticState()
{
  return &type metadata for TestServer.DiagnosticState;
}

unint64_t sub_10005E07C()
{
  unint64_t result = qword_1000A3CA0;
  if (!qword_1000A3CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3CA0);
  }
  return result;
}

unint64_t sub_10005E0CC()
{
  unint64_t result = qword_1000A3CA8;
  if (!qword_1000A3CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3CA8);
  }
  return result;
}

unint64_t sub_10005E11C()
{
  unint64_t result = qword_1000A3CB0;
  if (!qword_1000A3CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3CB0);
  }
  return result;
}

uint64_t sub_10005E168(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001178C(&qword_1000A18C8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E204()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10005E234()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void sub_10005E260(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10005E268(uint64_t a1@<X8>)
{
}

uint64_t sub_10005E270()
{
  return v0 - 136;
}

uint64_t sub_10005E28C()
{
  return type metadata accessor for SidecarIdentity();
}

uint64_t sub_10005E2B4()
{
  return swift_beginAccess();
}

uint64_t sub_10005E2F0()
{
  return v0;
}

uint64_t sub_10005E304(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v8 = sub_10001EAC8(v7);
  uint64_t v25 = v9;
  __chkstk_darwin(v8);
  sub_10001EC1C();
  uint64_t v24 = v10;
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v21 - v13;
  id v15 = _swiftEmptyArrayStorage;
  char v26 = _swiftEmptyArrayStorage;
  uint64_t v23 = *(void *)(a3 + 16);
  if (v23)
  {
    unint64_t v16 = 0;
    v21[1] = a2;
    uint64_t v22 = a3;
    v21[0] = a1;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      id v15 = *(void **)(v25 + 72);
      sub_10006002C(a3 + v17 + (void)v15 * v16, (uint64_t)v14);
      char v18 = a1(v14);
      if (v3)
      {
        sub_10005A47C((uint64_t)v14, &qword_1000A3E20);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }
      if (v18)
      {
        sub_1000600B4((uint64_t)v14, v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100060CD4();
        }
        id v19 = v26;
        unint64_t v20 = v26[2];
        if (v20 >= v26[3] >> 1)
        {
          sub_100060CD4();
          id v19 = v26;
        }
        _OWORD v19[2] = v20 + 1;
        uint64_t result = sub_1000600B4(v24, (uint64_t)v19 + v17 + v20 * (void)v15);
        a3 = v22;
        a1 = (uint64_t (*)(char *))v21[0];
      }
      else
      {
        uint64_t result = sub_10005A47C((uint64_t)v14, &qword_1000A3E20);
      }
      if (v23 == ++v16)
      {
        id v15 = v26;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  return result;
}

void *sub_10005E51C(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  unsigned int v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    id v19 = _swiftEmptyArrayStorage;
    sub_100060D18();
    unsigned int v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = *(void *)(sub_1000116B8(&qword_1000A3E20) - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v16 = *(void *)(v8 + 72);
    while (1)
    {
      a1(v18, v9);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v18[0];
      uint64_t v11 = v18[1];
      uint64_t v12 = v18[2];
      id v19 = v6;
      unint64_t v13 = v6[2];
      if (v13 >= v6[3] >> 1)
      {
        sub_100060D18();
        unsigned int v6 = v19;
      }
      _OWORD v6[2] = v13 + 1;
      uint64_t v14 = &v6[3 * v13];
      v14[4] = v10;
      v14[5] = v11;
      v14[6] = v12;
      v9 += v16;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_10005E698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_1000116B8(&qword_1000A3E20);
  uint64_t v6 = v5;
  if (v4)
  {
    sub_10006002C(a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), a2);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return sub_100012E34(a2, v7, 1, v6);
}

BOOL sub_10005E744()
{
  uint64_t v2 = type metadata accessor for Date();
  sub_100013930();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100061D9C();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v11 = v1;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10005E51C((void (*)(void *__return_ptr, uint64_t))sub_10006161C, (uint64_t)v10, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v0 + 24);
  if (!v7[2]) {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  return v8 != 0;
}

uint64_t sub_10005E850()
{
  type metadata accessor for Watchdog();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  *(void *)(result + 24) = 0;
  qword_1000AA2D8 = result;
  return result;
}

BOOL sub_10005E888(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + *(int *)(sub_1000116B8(&qword_1000A3E20) + 48)) != a2;
}

uint64_t sub_10005E8D8()
{
  uint64_t v2 = type metadata accessor for Date();
  sub_100013930();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100061D9C();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v10 = v1;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 16) = sub_10005E304((uint64_t (*)(char *))sub_100060094, (uint64_t)v9, v6);
  uint64_t v7 = swift_bridgeObjectRelease();
  sub_10005EA78(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
}

uint64_t sub_10005E9C0()
{
  type metadata accessor for Date();
  sub_100060F88(&qword_1000A3E70, (void (*)(uint64_t))&type metadata accessor for Date);
  char v0 = dispatch thunk of static Comparable.< infix(_:_:)();
  if ((v0 & 1) == 0)
  {
    sub_1000116B8(&qword_1000A3E20);
    sub_10002F1C4();
  }
  return v0 & 1;
}

uint64_t sub_10005EA78()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  sub_100013930();
  uint64_t v42 = v3;
  __chkstk_darwin(v4);
  sub_10001EC1C();
  uint64_t v44 = v5;
  __chkstk_darwin(v6);
  uint64_t v43 = (uint64_t)v41 - v7;
  type metadata accessor for DispatchWallTime();
  sub_100013930();
  uint64_t v45 = v8;
  uint64_t v46 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t v15 = sub_1000116B8(&qword_1000A3E10);
  __chkstk_darwin(v15 - 8);
  sub_100013AFC();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_1000116B8(&qword_1000A3E18);
  __chkstk_darwin(v19 - 8);
  sub_100013AFC();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = type metadata accessor for Date();
  sub_100013930();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  sub_100013AFC();
  uint64_t v29 = v28 - v27;
  swift_beginAccess();
  sub_10005E698(*(void *)(v1 + 16), v18);
  uint64_t v30 = sub_1000116B8(&qword_1000A3E20);
  if (sub_100012E5C(v18, 1, v30) == 1)
  {
    sub_10005A47C(v18, &qword_1000A3E10);
    sub_100012E34(v22, 1, 1, v23);
    goto LABEL_4;
  }
  v41[1] = v2;
  swift_unknownObjectRelease();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
  v31(v22, v18, v23);
  sub_100012E34(v22, 0, 1, v23);
  if (sub_100012E5C(v22, 1, v23) == 1)
  {
LABEL_4:
    uint64_t result = sub_10005A47C(v22, &qword_1000A3E18);
    if (*(void *)(v1 + 24))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
      *(void *)(v1 + 24) = 0;
      return swift_unknownObjectRelease();
    }
    return result;
  }
  v31(v29, v22, v23);
  Date.timeIntervalSinceNow.getter();
  if (v33 <= 0.0)
  {
    sub_10005E8D8();
  }
  else
  {
    static DispatchWallTime.now()();
    + infix(_:_:)();
    uint64_t v34 = v46 + 8;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v46 + 8);
    v35(v12, v45);
    uint64_t v36 = *(void *)(v1 + 24);
    uint64_t v46 = v34;
    v41[0] = v35;
    if (!v36) {
      sub_10005EEBC(v1);
    }
    uint64_t v37 = v42;
    swift_getObjectType();
    sub_10005F370(v43);
    sub_10005F3E4(v44);
    swift_unknownObjectRetain();
    OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
    unint64_t v38 = *(void (**)(uint64_t))(v37 + 8);
    sub_100061E18();
    v38(v39);
    sub_100061E18();
    v38(v40);
    OS_dispatch_source.activate()();
    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v41[0])(v14, v45);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v29, v23);
}

uint64_t sub_10005EEBC(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v1 - 8);
  uint64_t v17 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, &qword_1000A3E28);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100060F88(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_getObjectType();
  aBlock[4] = sub_10005F250;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_100097F88;
  uint64_t v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v15);
  *(void *)(v18 + 24) = v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return v12;
}

uint64_t sub_10005F250()
{
  if (qword_1000A1380 != -1) {
    swift_once();
  }
  return sub_10005E8D8();
}

uint64_t sub_10005F2A8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10005F370@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10005F3E4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10005F45C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10005F484()
{
  sub_10005F45C();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Watchdog()
{
  return self;
}

uint64_t sub_10005F4E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10005F5D4(char a1)
{
  if (a1) {
    return 0x7463656A626FLL;
  }
  else {
    return 0x6974617269707865;
  }
}

uint64_t sub_10005F60C(void *a1)
{
  sub_1000116B8(&qword_1000A3F10);
  sub_100013930();
  __chkstk_darwin(v3);
  sub_1000116FC(a1, a1[3]);
  sub_100061A10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_100061E18();
  return v4();
}

uint64_t sub_10005F75C(void *a1)
{
  sub_1000116B8(&qword_1000A3F20);
  sub_100013930();
  __chkstk_darwin(v3);
  uint64_t v4 = (uint64_t)sub_1000116FC(a1, a1[3]);
  sub_100061A10();
  sub_100061DD4();
  if (!v1)
  {
    sub_100061DC4();
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_100061DC4();
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_100061D50();
    v7(v6);
  }
  sub_1000136EC((uint64_t)a1);
  return v4;
}

uint64_t sub_10005F8AC()
{
  return sub_10005F5D4(*v0);
}

uint64_t sub_10005F8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005F4E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005F8DC(uint64_t a1)
{
  unint64_t v2 = sub_100061A10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F918(uint64_t a1)
{
  unint64_t v2 = sub_100061A10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F954@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10005F75C(a1);
  if (!v2)
  {
    *a2 = v6;
    a2[1] = result;
    a2[2] = v5;
  }
  return result;
}

uint64_t sub_10005F984(void *a1)
{
  return sub_10005F60C(a1);
}

uint64_t sub_10005F9A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656D6974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10005FA8C(char a1)
{
  if (a1) {
    return 0x736D657469;
  }
  else {
    return 0x72656D6974;
  }
}

uint64_t sub_10005FAB4(void *a1)
{
  sub_1000116B8(&qword_1000A3DE8);
  sub_100013930();
  __chkstk_darwin(v3);
  sub_1000116FC(a1, a1[3]);
  sub_10005FEF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    sub_1000116B8(&qword_1000A3DF8);
    sub_100061A5C(&qword_1000A3E00, (void (*)(void))sub_10005FF3C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  sub_100061E18();
  return v4();
}

uint64_t sub_10005FC44(void *a1)
{
  sub_1000116B8(&qword_1000A3F28);
  sub_100013930();
  __chkstk_darwin(v2);
  sub_1000116FC(a1, a1[3]);
  sub_10005FEF0();
  sub_100061DD4();
  sub_100061DC4();
  char v3 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_1000116B8(&qword_1000A3DF8);
  sub_100061A5C(&qword_1000A3F30, (void (*)(void))sub_100061ACC);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v4 = sub_100061D50();
  v5(v4);
  sub_1000136EC((uint64_t)a1);
  return v3 & 1;
}

Swift::Int sub_10005FDD8()
{
  return sub_10005CC3C(*v0);
}

uint64_t sub_10005FDF4()
{
  return sub_10005FA8C(*v0);
}

uint64_t sub_10005FDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005F9A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005FE24(uint64_t a1)
{
  unint64_t v2 = sub_10005FEF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005FE60(uint64_t a1)
{
  unint64_t v2 = sub_10005FEF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005FE9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10005FC44(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10005FED0(void *a1)
{
  return sub_10005FAB4(a1);
}

unint64_t sub_10005FEF0()
{
  unint64_t result = qword_1000A3DF0;
  if (!qword_1000A3DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3DF0);
  }
  return result;
}

unint64_t sub_10005FF3C()
{
  unint64_t result = qword_1000A3E08;
  if (!qword_1000A3E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3E08);
  }
  return result;
}

uint64_t sub_10005FF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005FF98()
{
  return swift_release();
}

uint64_t sub_10005FFA0@<X0>(void *a1@<X8>)
{
  Date.timeIntervalSince(_:)();
  uint64_t v3 = v2;
  sub_1000116B8(&qword_1000A3E20);
  swift_getObjectType();
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *a1 = v3;
  a1[1] = result;
  a1[2] = v5;
  return result;
}

uint64_t sub_100060020(uint64_t a1)
{
  return sub_100060128(a1, &qword_1000A3E20);
}

uint64_t sub_10006002C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A3E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060094()
{
  return sub_10005E9C0() & 1;
}

uint64_t sub_1000600B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A3E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006011C(uint64_t a1)
{
  return sub_100060128(a1, &qword_1000A30B8);
}

uint64_t sub_100060128(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    sub_100061D28();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_1000116B8(a2);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      _OWORD v4[2] = a1;
    }
    else
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    uint64_t v5 = sub_1000116B8(a2);
    sub_100061D68(v5);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1000601E8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    sub_100061D28();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3160);
    sub_100061E24();
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1000602C4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1000603A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060488(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3EA8);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_10006058C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 80 * a2 > a1 ? (BOOL v3 = a1 + 80 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3EB8);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060690(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3EC8);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060790(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060870(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a2 < 0
    || ((uint64_t v6 = *(void *)(*(void *)(sub_1000116B8(a4) - 8) + 72) * a2, v7 = a3 + v6, v8 = a1 + v6, v7 > a1)
      ? (BOOL v9 = v8 > a3)
      : (BOOL v9 = 0),
        v9))
  {
    sub_100061D28();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_100061E24();
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060964(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3EF0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060A68(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000116B8(&qword_1000A3E90);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100060B6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v5 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72) * a2,
         unint64_t v6 = a3 + v5,
         unint64_t v7 = a1 + v5,
         v6 > a1)
      ? (BOOL v8 = v7 > a3)
      : (BOOL v8 = 0),
        v8))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

void sub_100060C84()
{
  sub_100061180();
  void *v0 = v1;
}

void sub_100060CD4()
{
  sub_10006126C();
  void *v0 = v1;
}

void sub_100060D18()
{
  sub_1000613B4();
  void *v0 = v1;
}

void sub_100060D68()
{
  sub_1000610BC();
  void *v0 = v1;
}

void sub_100060DB8()
{
  sub_1000613B4();
  void *v0 = v1;
}

char *sub_100060E08(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100060FD0(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void sub_100060E28()
{
  sub_1000610BC();
  void *v0 = v1;
}

void sub_100060E78()
{
  sub_100061180();
  void *v0 = v1;
}

void sub_100060EC8()
{
  sub_1000613B4();
  void *v0 = v1;
}

void sub_100060F18()
{
  sub_1000613B4();
  void *v0 = v1;
}

size_t sub_100060F68(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100061480(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100060F88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100060FD0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000116B8(&qword_1000A3EB0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100040230(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10006058C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_1000610BC()
{
  sub_100061D3C();
  if (v5)
  {
    sub_100061D8C();
    if (v6 != v7)
    {
      sub_100061E44();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100061D7C();
    }
  }
  sub_100061E08();
  if (v4)
  {
    sub_1000116B8(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100061E38((uint64_t)(v10 - 32) / 32);
  }
  uint64_t v11 = sub_100061DF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_100061180()
{
  sub_100061D3C();
  if (v5)
  {
    sub_100061D8C();
    if (v6 != v7)
    {
      sub_100061E44();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100061D7C();
    }
  }
  sub_100061E08();
  if (v4)
  {
    sub_1000116B8(v8);
    uint64_t v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100061E38((uint64_t)(v10 - 32) / 16);
  }
  uint64_t v11 = sub_100061DF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_100061244()
{
}

void sub_10006126C()
{
  sub_100061D3C();
  if (v6)
  {
    sub_100061D8C();
    if (v8 != v9)
    {
      sub_100061E44();
      if (v8)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_100061D7C();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (!v11)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_1000116B8(v5);
  uint64_t v12 = sub_1000116B8(v2);
  sub_10001EAC8(v12);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = j__malloc_size(v17);
  if (!v14)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 - v16 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_23;
  }
  sub_100061E38((uint64_t)(v18 - v16) / v14);
LABEL_18:
  uint64_t v20 = sub_1000116B8(v2);
  sub_100061D68(v20);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v17 + v22;
  unint64_t v24 = v0 + v22;
  if (v3)
  {
    v1(v24, v10, v23);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_100060870(v24, v10, v23, v2);
  }
  swift_release();
}

void sub_1000613B4()
{
  sub_100061D3C();
  if (v5)
  {
    sub_100061D8C();
    if (v6 != v7)
    {
      sub_100061E44();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_100061D7C();
    }
  }
  sub_100061E08();
  if (v4)
  {
    sub_1000116B8(v8);
    char v9 = (const void *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_100061E38((uint64_t)(v10 - 32) / 24);
  }
  uint64_t v11 = sub_100061DF8();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

size_t sub_100061480(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000116B8(&qword_1000A3E78);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = a4 + v16;
  if (v5)
  {
    sub_1000404C0(v17, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100060B6C(v17, v8, (unint64_t)v13 + v16);
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_10006161C@<X0>(void *a1@<X8>)
{
  return sub_10005FFA0(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for Watchdog.DiagnosticState.Item(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Watchdog.DiagnosticState.Item()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Watchdog.DiagnosticState.Item(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Watchdog.DiagnosticState.Item(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Watchdog.DiagnosticState.Item(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Watchdog.DiagnosticState.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.Item()
{
  return &type metadata for Watchdog.DiagnosticState.Item;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.CodingKeys()
{
  return &type metadata for Watchdog.DiagnosticState.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Watchdog.DiagnosticState()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Watchdog.DiagnosticState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Watchdog.DiagnosticState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Watchdog.DiagnosticState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState()
{
  return &type metadata for Watchdog.DiagnosticState;
}

unint64_t sub_100061924()
{
  unint64_t result = qword_1000A3EF8;
  if (!qword_1000A3EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3EF8);
  }
  return result;
}

unint64_t sub_100061974()
{
  unint64_t result = qword_1000A3F00;
  if (!qword_1000A3F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F00);
  }
  return result;
}

unint64_t sub_1000619C4()
{
  unint64_t result = qword_1000A3F08;
  if (!qword_1000A3F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F08);
  }
  return result;
}

unint64_t sub_100061A10()
{
  unint64_t result = qword_1000A3F18;
  if (!qword_1000A3F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F18);
  }
  return result;
}

uint64_t sub_100061A5C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001178C(&qword_1000A3DF8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100061ACC()
{
  unint64_t result = qword_1000A3F38;
  if (!qword_1000A3F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F38);
  }
  return result;
}

unsigned char *_s12SidecarRelay8WatchdogC15DiagnosticStateV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100061BE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Watchdog.DiagnosticState.Item.CodingKeys()
{
  return &type metadata for Watchdog.DiagnosticState.Item.CodingKeys;
}

unint64_t sub_100061C20()
{
  unint64_t result = qword_1000A3F40;
  if (!qword_1000A3F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F40);
  }
  return result;
}

unint64_t sub_100061C70()
{
  unint64_t result = qword_1000A3F48;
  if (!qword_1000A3F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F48);
  }
  return result;
}

unint64_t sub_100061CC0()
{
  unint64_t result = qword_1000A3F50;
  if (!qword_1000A3F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3F50);
  }
  return result;
}

uint64_t sub_100061D50()
{
  return v0;
}

uint64_t sub_100061D68(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100061D9C()
{
  return Date.init()();
}

uint64_t sub_100061DD4()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_100061DF8()
{
  return v0 + 32;
}

uint64_t sub_100061E24()
{
  return v0;
}

void sub_100061E38(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

id sub_100061E50()
{
  uint64_t v0 = swift_retain();
  id v1 = sub_1000621D0(v0);
  id v2 = v1;
  if (v1)
  {
    Class v3 = (Class)v1;
    if (RapportRemoteDisplayDevice.cameraCapabilities.getter())
    {
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(objc_class *)v3 setCameraCapabilities:isa];

      Class v3 = isa;
    }
  }
  swift_release();
  return v2;
}

uint64_t sub_100061F04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000116FC(a1, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(v7, v8);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for UUID();
  if (sub_100012E5C((uint64_t)v6, 1, v9) == 1)
  {
    sub_100052ED0((uint64_t)v6);
    if (qword_1000A1340 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100004964(v10, (uint64_t)qword_1000AA248);
    sub_1000157CC((uint64_t)a1, (uint64_t)v21);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      sub_1000157CC((uint64_t)v21, (uint64_t)v19);
      sub_1000116B8(&qword_1000A3F60);
      uint64_t v14 = String.init<A>(describing:)();
      v19[0] = sub_100017070(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000136EC((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No Persistent ID for Rapport Device '%{public}s'", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000136EC((uint64_t)v21);
    }

    uint64_t v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v6, v9);
    uint64_t v16 = 0;
  }
  return sub_100012E34(a2, v16, 1, v9);
}

id sub_1000621D0(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25[3] = type metadata accessor for RapportRemoteDisplayDevice();
  v25[4] = &protocol witness table for RapportRemoteDisplayDevice;
  v25[0] = a1;
  sub_100061F04(v25, (uint64_t)v4);
  if (sub_100012E5C((uint64_t)v4, 1, v5) == 1)
  {
    sub_100052ED0((uint64_t)v4);
    id v9 = 0;
  }
  else
  {
    uint64_t v24 = v6;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    off_1000A4520();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    off_1000A4528();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    off_1000A4550();
    id v12 = (id)RPVersionToSourceVersionString();
    if (v12)
    {
      uint64_t v13 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v16 = v14;
    Class v17 = isa;
    id v18 = [v16 initWithIdentifier:isa model:v10 name:v11 version:v15];

    uint64_t v19 = (id (__cdecl *)())off_1000A4548;
    id v9 = v18;
    [v9 setStatus:v19()];
    [v9 setCameraState:off_1000A44F8()];
    off_1000A4518();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setMediaRouteIdentifier:v20];

    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  }
  sub_1000136EC((uint64_t)v25);
  return v9;
}

id sub_100062558(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[3] = type metadata accessor for CompanionLinkDevice();
  v35[4] = (uint64_t)&protocol witness table for CompanionLinkDevice;
  id v9 = sub_100021F64(v35);
  sub_10001E678(a1, (uint64_t)v9);
  sub_100061F04(v35, (uint64_t)v4);
  if (sub_100012E5C((uint64_t)v4, 1, v5) == 1)
  {
    sub_100052ED0((uint64_t)v4);
    id v10 = 0;
  }
  else
  {
    uint64_t v34 = v6;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v11 = sub_1000628B4();
    v12(v11);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1000628B4();
    v14(v13);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_1000628B4();
    v17(v16);
    id v18 = (id)RPVersionToSourceVersionString();
    if (v18)
    {
      uint64_t v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v22 = v20;
    uint64_t v24 = v32;
    Class v23 = isa;
    id v25 = [v22 initWithIdentifier:isa model:v32 name:v15 version:v21];

    id v10 = v25;
    [v10 setStatus:CompanionLinkDevice.statusFlags.getter()];
    uint64_t v26 = sub_1000628B4();
    [v10 setCameraState:v27(v26)];
    uint64_t v28 = sub_1000628B4();
    v29(v28);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 setMediaRouteIdentifier:v30];

    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v5);
  }
  sub_1000136EC((uint64_t)v35);
  return v10;
}

uint64_t sub_1000628B4()
{
  return v0;
}

uint64_t CompanionLinkDevice.id.getter()
{
  type metadata accessor for UUID();
  sub_1000139D0();
  uint64_t v0 = sub_100065D38();

  return v1(v0);
}

id CompanionLinkDevice._endpoint.getter()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  id v1 = (void *)sub_100065D44(v0);

  return v1;
}

uint64_t type metadata accessor for CompanionLinkDevice()
{
  uint64_t result = qword_1000A4130;
  if (!qword_1000A4130) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id CompanionLinkDevice.statusFlags.getter()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  id v1 = (void *)sub_100065D44(v0);

  return [v1 statusFlags];
}

uint64_t CompanionLinkDevice.init(id:)@<X0>(uint64_t a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)RPCompanionLinkDevice) init];
  uint64_t v3 = UUID.uuidString.getter();
  sub_100064FA8(v3, v4, v2);

  *(void *)(a1 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20)) = v2;
  type metadata accessor for UUID();
  sub_1000139D0();
  uint64_t v5 = sub_100065D38();

  return v6(v5);
}

uint64_t sub_100062A78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  sub_100013930();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100018DA8();
  uint64_t v12 = type metadata accessor for CompanionLinkDevice();
  sub_1000139D0();
  __chkstk_darwin(v13);
  NSString v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = a1;
  sub_100065118(v16, (SEL *)&selRef_idsDeviceIdentifier);
  if (v17)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (sub_100012E5C((uint64_t)v7, 1, v8) != 1)
    {
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19(v2, v7, v8);
      *(void *)&v15[*(int *)(v12 + 20)] = v16;
      v19(v15, v2, v8);
      sub_10001E678((uint64_t)v15, a2);
      uint64_t v18 = 0;
      return sub_100012E34(a2, v18, 1, v12);
    }

    sub_100021FC8((uint64_t)v7, &qword_1000A2EC0);
  }
  else
  {
  }
  uint64_t v18 = 1;
  return sub_100012E34(a2, v18, 1, v12);
}

uint64_t sub_100062C58()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  if ([(id)sub_100065D44(v0) accountID])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  return sub_100065D38();
}

uint64_t sub_100062CBC()
{
  if ([*(id *)(v0 + 16) accountID])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  return sub_100065D38();
}

uint64_t sub_100062D18()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  return (int)[(id)sub_100065D44(v0) activityLevel];
}

uint64_t sub_100062D48()
{
  return (int)[*(id *)(v0 + 16) activityLevel];
}

uint64_t sub_100062D70()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  id v1 = [(id)sub_100065D44(v0) activityLevelTimeStamp];
  if (v1)
  {
    id v2 = v1;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
  }
  type metadata accessor for Date();
  uint64_t v3 = sub_100065E50();

  return sub_100012E34(v3, v4, v5, v6);
}

uint64_t sub_100062DEC()
{
  id v1 = [*(id *)(v0 + 16) activityLevelTimeStamp];
  if (v1)
  {
    id v2 = v1;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
  }
  type metadata accessor for Date();
  uint64_t v3 = sub_100065E50();

  return sub_100012E34(v3, v4, v5, v6);
}

void *sub_100062E60()
{
  uint64_t v1 = type metadata accessor for CompanionLinkDevice();
  if (![(id)sub_100065D44(v1) homeKitUserIdentifiers]) {
    return _swiftEmptyArrayStorage;
  }
  sub_100065E64();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v2;
}

void *sub_100062EC8()
{
  if (![*(id *)(v1 + 16) homeKitUserIdentifiers]) {
    return _swiftEmptyArrayStorage;
  }
  sub_100065E64();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v2;
}

uint64_t sub_100062F28()
{
  return sub_100063064((SEL *)&selRef_identifier);
}

uint64_t sub_100062F34()
{
  return sub_1000630D0((SEL *)&selRef_identifier);
}

uint64_t sub_100062F40()
{
  return sub_100063064((SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_100062F4C()
{
  return sub_1000630D0((SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_100062F58()
{
  return sub_100063064((SEL *)&selRef_model);
}

uint64_t sub_100062F64()
{
  return sub_1000630D0((SEL *)&selRef_model);
}

uint64_t sub_100062F70()
{
  return sub_100063064((SEL *)&selRef_name);
}

uint64_t sub_100062F7C()
{
  return sub_1000630D0((SEL *)&selRef_name);
}

uint64_t sub_100062F88()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  id v1 = [(id)sub_100065D44(v0) serviceInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100062FF4()
{
  id v1 = [*(id *)(v0 + 16) serviceInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100063058()
{
  return sub_100063064((SEL *)&selRef_serviceType);
}

uint64_t sub_100063064(SEL *a1)
{
  uint64_t v2 = type metadata accessor for CompanionLinkDevice();
  if ([(id)sub_100065D44(v2) *a1])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  else
  {
    sub_100065E24();
  }
  return sub_100065D38();
}

uint64_t sub_1000630C4()
{
  return sub_1000630D0((SEL *)&selRef_serviceType);
}

uint64_t sub_1000630D0(SEL *a1)
{
  if ([*(id *)(v1 + 16) *a1])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  else
  {
    sub_100065E24();
  }
  return sub_100065D38();
}

void *sub_100063128()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  id v1 = [(id)sub_100065D44(v0) serviceTypes];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v3;
}

void *sub_100063190()
{
  id v1 = [*(id *)(v0 + 16) serviceTypes];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v3;
}

CompanionLink::RapportSourceVersion sub_1000631F4()
{
  uint64_t v0 = type metadata accessor for CompanionLinkDevice();
  if ([(id)sub_100065D44(v0) sourceVersion])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  else
  {
    sub_100065E24();
  }
  uint64_t v1 = sub_100065D38();

  return RapportSourceVersion.init(stringValue:)(*(Swift::String *)&v1);
}

CompanionLink::RapportSourceVersion sub_100063264()
{
  if ([*(id *)(v0 + 16) sourceVersion])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  else
  {
    sub_100065E24();
  }
  uint64_t v1 = sub_100065D38();

  return RapportSourceVersion.init(stringValue:)(*(Swift::String *)&v1);
}

uint64_t static CompanionLinkDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date();
  sub_100013930();
  uint64_t v91 = v5;
  __chkstk_darwin(v6);
  sub_100013F5C();
  uint64_t v88 = v7;
  uint64_t v93 = sub_1000116B8(&qword_1000A3FB0);
  sub_1000139D0();
  __chkstk_darwin(v8);
  sub_100013F5C();
  uint64_t v95 = v9;
  uint64_t v10 = sub_1000116B8(&qword_1000A3E18);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v92 = (uint64_t)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v96 = (uint64_t)&v87 - v14;
  __chkstk_darwin(v13);
  unint64_t v94 = (char *)&v87 - v15;
  uint64_t v16 = type metadata accessor for CompanionLinkDevice();
  uint64_t v90 = *(int *)(v16 + 20);
  uint64_t v17 = *(void **)(a1 + v90);
  unsigned int v18 = [v17 flags];
  uint64_t v89 = *(int *)(v16 + 20);
  uint64_t v19 = *(void **)(a2 + v89);
  if (v18 != [v19 flags]) {
    return 0;
  }
  id v20 = [v17 accountID];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
  }
  id v25 = (char *)[v19 accountID];
  if (!v25)
  {
    sub_100065E14();
    if (!v24) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v2 = v25;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (!v24)
  {
    sub_100065E14();
    if (!v28) {
      goto LABEL_19;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v28) {
    goto LABEL_17;
  }
  sub_100065E14();
  BOOL v29 = v22 == v26 && v24 == v28;
  if (v29)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      return 0;
    }
  }
LABEL_19:
  unsigned int v31 = [v17 activityLevel];
  if (v31 != [v19 activityLevel]) {
    return 0;
  }
  uint64_t v32 = (uint64_t)v94;
  sub_100062D70();
  uint64_t v33 = v96;
  sub_100062D70();
  uint64_t v34 = v95;
  uint64_t v35 = (void *)(v95 + *(int *)(v93 + 48));
  sub_10006500C(v32, v95);
  sub_10006500C(v33, (uint64_t)v35);
  sub_100065E30(v34);
  if (!v29)
  {
    uint64_t v36 = v92;
    sub_10006500C(v34, v92);
    sub_100065E30((uint64_t)v35);
    if (!v37)
    {
      uint64_t v38 = v91;
      uint64_t v39 = v88;
      (*(void (**)(uint64_t, void *, uint64_t))(v91 + 32))(v88, v35, a1);
      sub_100065C8C(&qword_1000A3FC0, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v93) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = (void *)v32;
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v40(v39, a1);
      sub_100021FC8(v96, &qword_1000A3E18);
      uint64_t v41 = sub_100065D38();
      sub_100021FC8(v41, v42);
      v40(v36, a1);
      sub_100021FC8(v34, &qword_1000A3E18);
      if ((v93 & 1) == 0) {
        return 0;
      }
      goto LABEL_30;
    }
    sub_100021FC8(v33, &qword_1000A3E18);
    sub_100021FC8(v32, &qword_1000A3E18);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v36, a1);
LABEL_28:
    sub_100021FC8(v34, &qword_1000A3FB0);
    return 0;
  }
  sub_100021FC8(v33, &qword_1000A3E18);
  sub_100021FC8(v32, &qword_1000A3E18);
  sub_100065E30((uint64_t)v35);
  if (!v29) {
    goto LABEL_28;
  }
  sub_100021FC8(v34, &qword_1000A3E18);
LABEL_30:
  uint64_t v43 = *(void **)(a2 + v90);
  if ([v43 homeKitUserIdentifiers])
  {
    sub_100065E64();
    uint64_t v44 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v44 = _swiftEmptyArrayStorage;
  }
  uint64_t v45 = *(void **)&v2[v89];
  id v46 = [v45 homeKitUserIdentifiers];
  if (v46)
  {
    uint64_t v47 = v46;
    type metadata accessor for UUID();
    uint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v48 = (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v49 = sub_100063D0C((uint64_t)v44, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0) {
    return 0;
  }
  id v50 = [v43 identifier];
  if (v50)
  {
    uint64_t v49 = (uint64_t)v50;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  if ([v45 identifier])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DC0();
  }
  else
  {
    sub_100065E08();
  }
  if ((char **)v48 == &stru_10009EFF8.name && v44 == (void *)v49)
  {
    sub_100065DD8();
  }
  else
  {
    sub_100065D14();
    sub_100065DF0();
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0) {
      return 0;
    }
  }
  id v52 = [v43 idsDeviceIdentifier];
  if (v52)
  {
    uint64_t v49 = (uint64_t)v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  if ([v45 idsDeviceIdentifier])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DC0();
  }
  else
  {
    sub_100065E08();
  }
  if ((char **)v48 == &stru_10009EFF8.name && v44 == (void *)v49)
  {
    sub_100065DD8();
  }
  else
  {
    sub_100065D14();
    sub_100065DF0();
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0) {
      return 0;
    }
  }
  id v54 = [v43 model];
  if (v54)
  {
    uint64_t v49 = (uint64_t)v54;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  if ([v45 model])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DC0();
  }
  else
  {
    sub_100065E08();
  }
  if ((char **)v48 == &stru_10009EFF8.name && v44 == (void *)v49)
  {
    sub_100065DD8();
  }
  else
  {
    sub_100065D14();
    sub_100065DF0();
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0) {
      return 0;
    }
  }
  id v56 = [v43 name];
  if (v56)
  {
    uint64_t v49 = (uint64_t)v56;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  if ([v45 name])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DC0();
  }
  else
  {
    sub_100065E08();
  }
  if ((char **)v48 == &stru_10009EFF8.name && v44 == (void *)v49)
  {
    sub_100065DD8();
  }
  else
  {
    sub_100065D14();
    sub_100065DF0();
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0) {
      return 0;
    }
  }
  sub_100065074();
  id v58 = [v43 serviceInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v59.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v60 = [v45 serviceInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v61.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v62 = static NSObject.== infix(_:_:)();

  if (v62)
  {
    uint64_t v63 = (objc_class *)[v43 serviceType];
    if (v63)
    {
      v61.super.Class isa = v63;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100065D5C();
    }
    else
    {
      sub_100065D50();
    }
    if ([v45 serviceType])
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100065DC0();
    }
    else
    {
      sub_100065E08();
    }
    if ((char **)v59.super.isa == &stru_10009EFF8.name && (Class)v62 == v61.super.isa)
    {
      sub_100065DD8();
    }
    else
    {
      sub_100065D14();
      sub_100065DF0();
      swift_bridgeObjectRelease();
      if (((uint64_t)v59.super.isa & 1) == 0) {
        return 0;
      }
    }
    id v65 = [v43 serviceTypes];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v67 = _swiftEmptyArrayStorage;
    }
    id v68 = [v45 serviceTypes];
    if (v68)
    {
      uint64_t v69 = v68;
      Swift::String v70 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      Swift::String v70 = _swiftEmptyArrayStorage;
    }
    char v71 = sub_100063F2C(v67, v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v71)
    {
      id v72 = [v43 statusFlags];
      if (v72 == [v45 statusFlags])
      {
        id v73 = [v43 sourceVersion];
        if (v73)
        {
          uint64_t v74 = v73;
          uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::String v77 = v76;
        }
        else
        {
          uint64_t v75 = 0;
          Swift::String v77 = (void *)0xE000000000000000;
        }
        v78._countAndFlagsBits = v75;
        v78._object = v77;
        v79.Swift::Int rawValue = RapportSourceVersion.init(stringValue:)(v78).rawValue;
        id v80 = [v45 sourceVersion];
        if (v80)
        {
          char v81 = v80;
          uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          BOOL v84 = v83;
        }
        else
        {
          uint64_t v82 = 0;
          BOOL v84 = (void *)0xE000000000000000;
        }
        v85._countAndFlagsBits = v82;
        v85._object = v84;
        if (v79.rawValue == RapportSourceVersion.init(stringValue:)(v85).rawValue) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100063D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      unsigned int v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      char v30 = (void (**)(char *, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        id v20 = v9;
        uint64_t v21 = v32;
        v32(v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        sub_100065C8C(&qword_1000A3020, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24(v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_100063F2C(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a1 + 7;
  uint64_t v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

void CompanionLinkDevice.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Date();
  sub_100013930();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100018DA8();
  uint64_t v9 = sub_1000116B8(&qword_1000A3E18);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v37 = *(int *)(type metadata accessor for CompanionLinkDevice() + 20);
  uint64_t v15 = *(void **)(v1 + v37);
  Hasher._combine(_:)((Swift::UInt32)[v15 flags]);
  id v16 = [v15 accountID];
  if (v16)
  {
    uint64_t v17 = v16;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v5;

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    uint64_t v5 = v36;
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((int)[v15 activityLevel]);
  sub_100062D70();
  sub_10006500C((uint64_t)v14, (uint64_t)v12);
  if (sub_100012E5C((uint64_t)v12, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2, v12, v5);
    Hasher._combine(_:)(1u);
    sub_100065C8C(&qword_1000A3FC8, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  }
  uint64_t v18 = v37;
  sub_100021FC8((uint64_t)v14, &qword_1000A3E18);
  uint64_t v19 = *(void **)(v3 + v18);
  id v20 = [v19 homeKitUserIdentifiers];
  if (v20)
  {
    uint64_t v21 = v20;
    type metadata accessor for UUID();
    uint64_t v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  sub_1000651FC(a1, (uint64_t)v22);
  swift_bridgeObjectRelease();
  if ([v19 identifier])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  sub_100065D8C();
  swift_bridgeObjectRelease();
  if ([v19 idsDeviceIdentifier])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  sub_100065D8C();
  swift_bridgeObjectRelease();
  if ([v19 model])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  sub_100065D8C();
  swift_bridgeObjectRelease();
  if ([v19 name])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  sub_100065D8C();
  swift_bridgeObjectRelease();
  id v23 = [v19 serviceInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSObject.hash(into:)();

  if ([v19 serviceType])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065D5C();
  }
  else
  {
    sub_100065D50();
  }
  sub_100065D8C();
  swift_bridgeObjectRelease();
  id v25 = [v19 serviceTypes];
  if (v25)
  {
    BOOL v26 = v25;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v27 = sub_100065D38();
  sub_100065184(v27, v28);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)((Swift::UInt)[v19 statusFlags]);
  id v29 = [v19 sourceVersion];
  if (v29)
  {
    char v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = (void *)0xE000000000000000;
  }
  v34._countAndFlagsBits = v31;
  v34._object = v33;
  v35.Swift::Int rawValue = RapportSourceVersion.init(stringValue:)(v34).rawValue;
  Hasher._combine(_:)(v35.rawValue);
}

Swift::Int CompanionLinkDevice.hashValue.getter()
{
  Hasher.init(_seed:)();
  CompanionLinkDevice.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000645B0()
{
  Hasher.init(_seed:)();
  CompanionLinkDevice.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t CompanionLinkDevice.description.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20));
  id v2 = [v1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = v3;
  id v4 = RPStatusFlagsCopyDescription((unint64_t)[v1 statusFlags]);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3C204653202CLL;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  if ([v1 sourceVersion])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100065DA8();
  }
  else
  {
    sub_100065E24();
  }
  v11._countAndFlagsBits = sub_100065D38();
  RapportSourceVersion.init(stringValue:)(v11);
  id v12 = (id)RPVersionToSourceVersionString();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    id v16 = (void *)0xE000000000000000;
  }
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 39;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x27205653202CLL;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1000647A0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 6580577 && a2 == 0xE300000000000000;
  if (v3 || (sub_100065CD4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 25705 && a2 == 0xE200000000000000;
    if (v6 || (sub_100065CD4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 7562345 && a2 == 0xE300000000000000;
      if (v7 || (sub_100065CD4() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000;
        if (v8 || (sub_100065CD4() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 1701667182 && a2 == 0xE400000000000000;
          if (v9 || (sub_100065CD4() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 2020569712 && a2 == 0xE400000000000000;
            if (v10 || (sub_100065CD4() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 1868983913 && a2 == 0xE400000000000000;
              if (v11 || (sub_100065CD4() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
                if (v12 || (sub_100065CD4() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x7365636976726573 && a2 == 0xE800000000000000;
                  if (v13 || (sub_100065CD4() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
                    if (v14 || (sub_100065CD4() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      char v16 = sub_100065CD4();
                      swift_bridgeObjectRelease();
                      if (v16) {
                        return 10;
                      }
                      else {
                        return 11;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100064AA8(char a1)
{
  return qword_1000831C0[a1];
}

uint64_t sub_100064ACC()
{
  return sub_100064AA8(*v0);
}

uint64_t sub_100064AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000647A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100064AFC(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100064B08(uint64_t a1)
{
  unint64_t v2 = sub_10006542C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100064B44(uint64_t a1)
{
  unint64_t v2 = sub_10006542C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CompanionLinkDevice.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  sub_1000116B8(&qword_1000A3FD0);
  sub_100013930();
  __chkstk_darwin(v6);
  sub_100018DA8();
  sub_1000116FC(a1, a1[3]);
  sub_10006542C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v7 = *(id *)(v4 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20));
  sub_100065118(v7, (SEL *)&selRef_accountID);
  if (v8)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  id v9 = v7;
  sub_100065118(v9, (SEL *)&selRef_identifier);
  if (v10)
  {
    sub_100065CF0(1);
    uint64_t v3 = v2;
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  id v11 = v9;
  sub_100065118(v11, (SEL *)&selRef_idsDeviceIdentifier);
  if (v12)
  {
    sub_100065CF0(2);
    uint64_t v3 = v2;
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  id v13 = v11;
  sub_100065118(v13, (SEL *)&selRef_model);
  if (v14)
  {
    sub_100065CF0(3);
    uint64_t v3 = v2;
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  id v15 = v13;
  sub_100065118(v15, (SEL *)&selRef_name);
  if (v16)
  {
    sub_100065CF0(4);
    uint64_t v3 = v2;
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  if ([v15 proximity])
  {
    uint64_t v2 = v3;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_18;
    }
  }
  id v20 = v15;
  sub_100065118(v20, (SEL *)&selRef_serviceType);
  if (v21)
  {
    sub_100065CF0(7);
    uint64_t v3 = v2;
    if (v2) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  id v22 = v20;
  if (!sub_1000650B4(v22)) {
    goto LABEL_25;
  }
  sub_1000116B8(&qword_1000A18F0);
  sub_100065478();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v3)
  {
LABEL_27:
    uint64_t v25 = sub_100065D74();
    v26(v25);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_25:
  id v23 = [v22 statusFlags];
  if (v23)
  {
    id v24 = RPStatusFlagsCopyDescription((unint64_t)v23);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  sub_100065118(v22, (SEL *)&selRef_sourceVersion);
  if (!v27)
  {
LABEL_18:
    uint64_t v17 = sub_100065D74();
    return v18(v17);
  }
  sub_100065CF0(10);
  uint64_t v28 = sub_100065D74();
  v29(v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100064EF4(void *a1)
{
  return CompanionLinkDevice.encode(to:)(a1);
}

uint64_t variable initialization expression of RapportRemoteDisplayServer.sessions()
{
  type metadata accessor for RapportRemoteDisplaySession();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t variable initialization expression of Clock.heartbeat()
{
  return 0;
}

uint64_t variable initialization expression of RapportStreamServer.activating()
{
  type metadata accessor for RapportStreamSession();

  return Dictionary.init(dictionaryLiteral:)();
}

void sub_100064FA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setIdentifier:v4];
}

uint64_t sub_10006500C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A3E18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100065074()
{
  unint64_t result = qword_1000A3FB8;
  if (!qword_1000A3FB8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A3FB8);
  }
  return result;
}

uint64_t sub_1000650B4(void *a1)
{
  id v2 = [a1 serviceTypes];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100065118(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_100065184(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1000651FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v18 = a1;
  Hasher._combine(_:)(v11);
  if (!v11) {
    return sub_100012E34((uint64_t)v10, 1, 1, v4);
  }
  uint64_t v12 = v5 + 16;
  Swift::String v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v13 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v14 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  id v15 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v16 = *(void *)(v12 + 56);
  while (1)
  {
    v19(v10, v13, v4);
    sub_100012E34((uint64_t)v10, 0, 1, v4);
    uint64_t result = sub_100012E5C((uint64_t)v10, 1, v4);
    if (result == 1) {
      break;
    }
    (*v14)(v7, v10, v4);
    sub_100065C8C((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*v15)(v7, v4);
    v13 += v16;
    if (!--v11) {
      return sub_100012E34((uint64_t)v10, 1, 1, v4);
    }
  }
  return result;
}

unint64_t sub_10006542C()
{
  unint64_t result = qword_1000A3FD8;
  if (!qword_1000A3FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A3FD8);
  }
  return result;
}

unint64_t sub_100065478()
{
  unint64_t result = qword_1000A2FC0;
  if (!qword_1000A2FC0)
  {
    sub_10001178C(&qword_1000A18F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A2FC0);
  }
  return result;
}

uint64_t sub_1000654E4()
{
  return sub_100065C8C((unint64_t *)&unk_1000A1910, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10006552C()
{
  return sub_100065C8C(&qword_1000A4070, (void (*)(uint64_t))type metadata accessor for CompanionLinkDevice);
}

uint64_t *initializeBufferWithCopyOfBuffer for CompanionLinkDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void destroy for CompanionLinkDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t assignWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100065858);
}

uint64_t sub_100065858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100065E64();
  sub_10001BB80();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100012E5C(v3, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(v3 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000658F0);
}

void sub_1000658F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_10001BB80();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_100012E34(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_100065978()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100065B64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionLinkDevice.CodingKeys()
{
  return &type metadata for CompanionLinkDevice.CodingKeys;
}

unint64_t sub_100065BA0()
{
  unint64_t result = qword_1000A4168;
  if (!qword_1000A4168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4168);
  }
  return result;
}

unint64_t sub_100065BF0()
{
  unint64_t result = qword_1000A4170;
  if (!qword_1000A4170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4170);
  }
  return result;
}

unint64_t sub_100065C40()
{
  unint64_t result = qword_1000A4178;
  if (!qword_1000A4178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4178);
  }
  return result;
}

uint64_t sub_100065C8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100065CD4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100065CF0@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100065D14()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100065D38()
{
  return v0;
}

uint64_t sub_100065D44(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 20));
}

void sub_100065D5C()
{
}

uint64_t sub_100065D74()
{
  return v0;
}

uint64_t sub_100065D8C()
{
  return String.hash(into:)();
}

void sub_100065DA8()
{
}

void sub_100065DC0()
{
}

uint64_t sub_100065DD8()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100065DF0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100065E30(uint64_t a1)
{
  return sub_100012E5C(a1, 1, v1);
}

uint64_t sub_100065E50()
{
  return v0;
}

uint64_t sub_100065E64()
{
  return type metadata accessor for UUID();
}

void *RapportErrorFlags.notSignedIn.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.notSignedIn;
}

uint64_t static RapportDeviceChangeFlags.advertisementData.getter()
{
  return 1;
}

void *RapportErrorFlags.bluetoothOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.bluetoothOff;
}

void *RapportErrorFlags.WiFiOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.WiFiOff;
}

void *RapportErrorFlags.noDevices.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.noDevices;
}

uint64_t static RapportDeviceChangeFlags.IE.getter()
{
  return 8;
}

void *RapportErrorFlags.keychainOff.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.keychainOff;
}

void *RapportErrorFlags.nonHSA2.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.nonHSA2;
}

uint64_t static RapportDeviceChangeFlags.RSSI.getter()
{
  return 32;
}

void *RapportErrorFlags.homeKitNotConfigured.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.homeKitNotConfigured;
}

uint64_t static RapportDeviceChangeFlags.SSID.getter()
{
  return 64;
}

void *RapportErrorFlags.WiFiHostAP.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.WiFiHostAP;
}

uint64_t static RapportDeviceChangeFlags.proximity.getter()
{
  return 128;
}

void *RapportErrorFlags.noManatee.unsafeMutableAddressor()
{
  return &static RapportErrorFlags.noManatee;
}

uint64_t static RapportDeviceChangeFlags.relativeLocation.getter()
{
  return 256;
}

uint64_t RapportDeviceChangeFlags.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*RapportDeviceChangeFlags.rawValue.modify())(void)
{
  return RapportDeviceChangeFlags.rawValue.getter;
}

uint64_t sub_100065F40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006DBEC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100065F70@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003ECFC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100065FA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006DBF0(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100065FD0(void *a1, uint64_t *a2)
{
  return sub_10005AF10(a1, *a2);
}

void sub_100065FD8(uint64_t *a1)
{
}

void sub_100065FE0(uint64_t *a1)
{
}

void sub_100065FE8(uint64_t *a1)
{
}

BOOL sub_100065FF0(uint64_t *a1)
{
  return sub_10003ED28(*a1, *v1);
}

void sub_100065FFC(uint64_t *a1)
{
}

uint64_t sub_100066004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10006DC24();
  *a1 = result;
  return result;
}

uint64_t sub_10006602C()
{
  return sub_10006DECC(*v0);
}

uint64_t sub_100066034(uint64_t a1)
{
  return sub_10006DED0(a1, *v1);
}

uint64_t RapportErrorFlags.description.getter(unint64_t a1)
{
  id v1 = RPErrorFlagsCopyDescription(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

unint64_t sub_10006608C()
{
  unint64_t result = qword_1000A4180;
  if (!qword_1000A4180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4180);
  }
  return result;
}

unint64_t sub_1000660DC()
{
  unint64_t result = qword_1000A4188;
  if (!qword_1000A4188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4188);
  }
  return result;
}

unint64_t sub_10006612C()
{
  unint64_t result = qword_1000A4190;
  if (!qword_1000A4190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4190);
  }
  return result;
}

unint64_t sub_10006617C()
{
  unint64_t result = qword_1000A4198;
  if (!qword_1000A4198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4198);
  }
  return result;
}

uint64_t sub_1000661C8()
{
  return RapportErrorFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportErrorFlags()
{
  return &type metadata for RapportErrorFlags;
}

id sub_1000661E0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_100021CF8(v6, v7, a1, a2, a3, 0);
}

uint64_t RapportStatusFlags.description.getter(unint64_t a1)
{
  id v1 = RPStatusFlagsCopyDescription(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

const char *RapportStatusFlags.asleep.unsafeMutableAddressor()
{
  return " ";
}

const char *RapportStatusFlags.AWDL.unsafeMutableAddressor()
{
  return "\b";
}

void *RapportStatusFlags.AWDLDegraded.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLDegraded;
}

uint64_t static RapportStatusFlags.AWDLDegraded.getter()
{
  return 0x2000000;
}

void *RapportStatusFlags.AWDLRetro.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLRetro;
}

uint64_t static RapportStatusFlags.AWDLRetro.getter()
{
  return 0x4000000;
}

void *RapportStatusFlags.BLE.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.BLE;
}

void *RapportStatusFlags.local.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.local;
}

uint64_t static RapportControlFlags.proximity.getter()
{
  return 0x200000000;
}

void *RapportStatusFlags.owner.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.owner;
}

uint64_t static RapportControlFlags.moreComing.getter()
{
  return 0x80000;
}

void *RapportStatusFlags.WiFi.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFi;
}

void *RapportStatusFlags.WiFiP2P.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFiP2P;
}

uint64_t static RapportDeviceChangeFlags.removed.getter()
{
  return 512;
}

void *RapportStatusFlags.USB.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.USB;
}

uint64_t static RapportStatusFlags.USB.getter()
{
  return 0x1000000;
}

uint64_t sub_100066360@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10006DEA8(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100066394@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10006DEAC(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000663C8(void *a1)
{
  return sub_10006DEB4(*a1);
}

uint64_t sub_1000663D0(void *a1)
{
  return sub_10006DE9C(*a1);
}

uint64_t sub_1000663D8(void *a1)
{
  return sub_10006DEA4(*a1);
}

uint64_t sub_1000663E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006DEA0(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100066410(uint64_t *a1)
{
  return sub_10006DEB0(*a1, *v1);
}

BOOL sub_10006641C()
{
  return sub_10006DEC0(*v0);
}

uint64_t sub_100066424(void *a1)
{
  return sub_10006DEBC(*a1);
}

unint64_t sub_100066430()
{
  unint64_t result = qword_1000A41A0;
  if (!qword_1000A41A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A41A0);
  }
  return result;
}

unint64_t sub_100066480()
{
  unint64_t result = qword_1000A41A8;
  if (!qword_1000A41A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A41A8);
  }
  return result;
}

unint64_t sub_1000664D0()
{
  unint64_t result = qword_1000A41B0;
  if (!qword_1000A41B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A41B0);
  }
  return result;
}

unint64_t sub_100066520()
{
  unint64_t result = qword_1000A41B8;
  if (!qword_1000A41B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A41B8);
  }
  return result;
}

uint64_t sub_10006656C()
{
  return RapportStatusFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStatusFlags()
{
  return &type metadata for RapportStatusFlags;
}

uint64_t RapportRemoteDisplaySession.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t RapportRemoteDisplaySession.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*RapportRemoteDisplaySession.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  unsigned char v3[4] = v5;
  return sub_1000666B0;
}

void sub_1000666B0(uint64_t a1, char a2)
{
  int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t RapportRemoteDisplaySession.__allocating_init(session:)()
{
  uint64_t v1 = sub_100067AD4();
  RapportRemoteDisplaySession.init(session:)(v0);
  return v1;
}

uint64_t RapportRemoteDisplaySession.init(session:)(void *a1)
{
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 32) = a1;
  uint64_t v3 = sub_100067AB8();
  swift_weakInit();
  id v15 = sub_100066A2C;
  uint64_t v16 = v3;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_10002451C;
  uint64_t v14 = &unk_100098360;
  char v4 = _Block_copy(&v11);
  id v5 = a1;
  swift_release();
  [v5 setErrorHandler:v4];
  _Block_release(v4);
  uint64_t v6 = sub_100067AB8();
  swift_weakInit();
  id v15 = sub_100066B04;
  uint64_t v16 = v6;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_10005A66C;
  uint64_t v14 = &unk_100098388;
  uint64_t v7 = _Block_copy(&v11);
  swift_release();
  [v5 setInterruptionHandler:v7];
  _Block_release(v7);
  uint64_t v8 = sub_100067AB8();
  swift_weakInit();
  id v15 = sub_100066C1C;
  uint64_t v16 = v8;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_10005A66C;
  uint64_t v14 = &unk_1000983B0;
  uint64_t v9 = _Block_copy(&v11);
  swift_release();
  [v5 setInvalidationHandler:v9];

  _Block_release(v9);
  return v1;
}

uint64_t sub_100066994()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000669CC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100066A34(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100066A2C(uint64_t a1)
{
  return sub_1000669CC(a1);
}

uint64_t sub_100066A34(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    swift_beginAccess();
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      id v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8);
      swift_errorRetain();
      v5(v1, v2, ObjectType, v3);
      swift_unknownObjectRelease();
      return swift_errorRelease();
    }
  }
  return result;
}

uint64_t sub_100066AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100066AFC()
{
  return swift_release();
}

uint64_t sub_100066B04()
{
  return sub_100066BBC(v0, (void (*)(void))sub_100066B34);
}

uint64_t sub_100066B34()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100066BBC(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

uint64_t sub_100066C1C()
{
  return sub_100066BBC(v0, (void (*)(void))sub_100066C4C);
}

uint64_t sub_100066C4C()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RapportRemoteDisplaySession.__allocating_init()()
{
  [objc_allocWithZone((Class)RPRemoteDisplaySession) init];
  uint64_t v1 = sub_100067AD4();
  RapportRemoteDisplaySession.init(session:)(v0);
  return v1;
}

uint64_t RapportRemoteDisplaySession.deinit()
{
  RapportRemoteDisplaySession.cancel()();
  sub_100066DA4(v0 + 16);

  return v0;
}

Swift::Void __swiftcall RapportRemoteDisplaySession.cancel()()
{
  [*(id *)(v0 + 32) invalidate];
  swift_beginAccess();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakAssign();
}

uint64_t sub_100066DA4(uint64_t a1)
{
  return a1;
}

uint64_t RapportRemoteDisplaySession.__deallocating_deinit()
{
  RapportRemoteDisplaySession.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

id RapportRemoteDisplaySession.controlFlags.getter()
{
  return [*(id *)(v0 + 32) controlFlags];
}

id RapportRemoteDisplaySession.controlFlags.setter(uint64_t a1)
{
  return [*(id *)(v1 + 32) setControlFlags:a1];
}

id (*RapportRemoteDisplaySession.controlFlags.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 32);
  a1[1] = v3;
  *a1 = [v3 controlFlags];
  return sub_100066E78;
}

id sub_100066E78(uint64_t a1)
{
  return [*(id *)(a1 + 8) setControlFlags:*(void *)a1];
}

uint64_t RapportRemoteDisplaySession.destinationDevice.getter()
{
  id v1 = [*(id *)(v0 + 32) destinationDevice];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for RapportRemoteDisplayDevice();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 16) = v2;
  return v3;
}

uint64_t RapportRemoteDisplaySession.destinationDevice.setter(uint64_t a1)
{
  id v2 = *(void **)(v1 + 32);
  if (a1) {
    id v3 = *(id *)(a1 + 16);
  }
  else {
    id v3 = 0;
  }
  [v2 setDestinationDevice:v3];

  return swift_release();
}

uint64_t (*RapportRemoteDisplaySession.destinationDevice.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = RapportRemoteDisplaySession.destinationDevice.getter();
  return sub_100066FB8;
}

uint64_t sub_100066FB8(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return RapportRemoteDisplaySession.destinationDevice.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  RapportRemoteDisplaySession.destinationDevice.setter(v2);

  return swift_release();
}

id RapportRemoteDisplaySession.dispatchQueue.getter()
{
  id v1 = [*(id *)(v0 + 32) dispatchQueue];

  return v1;
}

void RapportRemoteDisplaySession.dispatchQueue.setter(void *a1)
{
  [*(id *)(v1 + 32) setDispatchQueue:a1];
}

void (*RapportRemoteDisplaySession.dispatchQueue.modify(void *a1))(id *a1)
{
  id v3 = *(void **)(v1 + 32);
  a1[1] = v3;
  *a1 = [v3 dispatchQueue];
  return sub_1000670EC;
}

void sub_1000670EC(id *a1)
{
  id v1 = *a1;
  [a1[1] setDispatchQueue:];
}

void RapportRemoteDisplaySession.activate(completion:)(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(v2 + 32);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10002451C;
  v5[3] = &unk_1000983D8;
  char v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 activateWithCompletion:v4];
  _Block_release(v4);
}

void RapportRemoteDisplaySession.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  id v10 = *(void **)(v6 + 32);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10002451C;
    v13[3] = &unk_100098400;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  [v10 sendEventID:v11 event:v12.super.isa options:isa completion:a5];
  _Block_release(a5);
}

void RapportRemoteDisplaySession.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  id v10 = *(void **)(v6 + 32);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14[4] = a5;
  v14[5] = a6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100067478;
  void v14[3] = &unk_100098428;
  uint64_t v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  [v10 sendRequestID:v11 request:v12.super.isa options:isa responseHandler:v13];
  _Block_release(v13);
}

uint64_t sub_100067478(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  if (a3) {
LABEL_3:
  }
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  swift_retain();
  id v8 = a4;
  v6(v7, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_10006755C()
{
}

uint64_t sub_100067580()
{
  return RapportRemoteDisplaySession.messenger.getter();
}

id sub_1000675A4()
{
  return RapportRemoteDisplaySession.dispatchQueue.getter();
}

uint64_t sub_1000675C8()
{
  id v1 = [*(id *)(v0 + 32) serviceType];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100067630(void *a1)
{
  id v1 = [a1 serviceType];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t RapportStreamServer.serviceType.getter()
{
  id v1 = [*(id *)(v0 + 16) serviceType];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000676FC(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
}

void sub_100067720(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
}

unint64_t RapportRemoteDisplaySession.description.getter()
{
  id v1 = RPControlFlagsCopyDescription((unint64_t)[*(id *)(v0 + 32) controlFlags]);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x3C204643202CLL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  if (RapportRemoteDisplaySession.destinationDevice.getter()
    && (RapportRemoteDisplayDevice.persistentIdentifier.getter(), uint64_t v9 = v8, swift_release(), v9))
  {
    sub_100067948(8);
  }
  else
  {
    Substring.init(_:)();
  }
  v10._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 39;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x27204444202CLL;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v13 = sub_1000675C8();
  unint64_t v15 = v14;
  swift_release();
  if (v15) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 39;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x27205453202CLL;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t sub_100067948(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

unint64_t sub_100067A08()
{
  return RapportRemoteDisplaySession.description.getter();
}

BOOL static RapportRemoteDisplaySession.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

BOOL sub_100067A40(uint64_t *a1, uint64_t *a2)
{
  return static RapportRemoteDisplaySession.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for RapportRemoteDisplaySession()
{
  return self;
}

id _s13CompanionLink27RapportRemoteDisplaySessionC9messengerSo08RPRemoteeF0Cvg_0()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_100067AB8()
{
  return swift_allocObject();
}

uint64_t sub_100067AD4()
{
  return swift_allocObject();
}

void *RapportSourceVersion.skyAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyAligned;
}

uint64_t static RapportSourceVersion.skyAligned.getter()
{
  return 3000000;
}

void *RapportSourceVersion.starAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.starAligned;
}

uint64_t static RapportSourceVersion.starAligned.getter()
{
  return 3050000;
}

void *RapportSourceVersion.skyBAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyBAligned;
}

uint64_t static RapportSourceVersion.skyBAligned.getter()
{
  return 3100000;
}

void *RapportSourceVersion.skyCAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyCAligned;
}

uint64_t static RapportSourceVersion.skyCAligned.getter()
{
  return 3200000;
}

void *RapportSourceVersion.skyDAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyDAligned;
}

uint64_t static RapportSourceVersion.skyDAligned.getter()
{
  return 3300000;
}

void *RapportSourceVersion.skyEchoAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyEchoAligned;
}

uint64_t static RapportSourceVersion.skyEchoAligned.getter()
{
  return 3400000;
}

CompanionLink::RapportSourceVersion __swiftcall RapportSourceVersion.init(stringValue:)(Swift::String stringValue)
{
  sub_100067C5C();
  uint64_t v1 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = sub_100067CA8(0, 10000, v2, v1);
  result.Swift::Int rawValue = sub_100067CA8(1, 100, v2, v1);
  BOOL v5 = __OFADD__(v3, result.rawValue);
  uint64_t v6 = v3 + result.rawValue;
  if (v5)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v7 = sub_100067CA8(2, 1, v2, v1);
  swift_bridgeObjectRelease();
  result.Swift::Int rawValue = v6 + v7;
  if (__OFADD__(v6, v7)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_100067C5C()
{
  unint64_t result = qword_1000A42A8;
  if (!qword_1000A42A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42A8);
  }
  return result;
}

uint64_t sub_100067CA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  if (result >= a3) {
    return v7;
  }
  if (result < 0)
  {
    __break(1u);
    goto LABEL_59;
  }
  if (*(void *)(a4 + 16) <= (unint64_t)result)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain();
    uint64_t v13 = (uint64_t)sub_1000680DC(v5, v6, 10);
    LOBYTE(v5) = v27;
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  uint64_t v4 = a2;
  uint64_t v8 = a4 + 16 * result;
  uint64_t v5 = *(void *)(v8 + 32);
  unint64_t v6 = *(void *)(v8 + 40);
  uint64_t v9 = HIBYTE(v6) & 0xF;
  uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11) {
    return 0;
  }
  if ((v6 & 0x1000000000000000) != 0) {
    goto LABEL_60;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0) {
      Swift::String v12 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      Swift::String v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v13 = (uint64_t)sub_10004CF1C(v12, v10, 10);
    LOBYTE(v5) = v14 & 1;
LABEL_47:
    if ((v5 & 1) == 0)
    {
      uint64_t v7 = v13 * v4;
      if ((unsigned __int128)(v13 * (__int128)v4) >> 64 == (v13 * v4) >> 63) {
        return v7;
      }
      __break(1u);
    }
    return 0;
  }
  v28[0] = *(void *)(v8 + 32);
  v28[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (!v9) {
      goto LABEL_63;
    }
    if (v9 == 1 || (BYTE1(v5) - 48) > 9u) {
      goto LABEL_34;
    }
    uint64_t v13 = (BYTE1(v5) - 48);
    if (v9 != 2)
    {
      if ((BYTE2(v5) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
      uint64_t v15 = v9 - 3;
      if (v9 != 3)
      {
        uint64_t v16 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          unsigned int v17 = *v16 - 48;
          if (v17 > 9) {
            goto LABEL_34;
          }
          uint64_t v18 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
            goto LABEL_34;
          }
          uint64_t v13 = v18 + v17;
          if (__OFADD__(v18, v17)) {
            goto LABEL_34;
          }
          LOBYTE(v5) = 0;
          ++v16;
          if (!--v15) {
            goto LABEL_47;
          }
        }
      }
    }
LABEL_46:
    LOBYTE(v5) = 0;
    goto LABEL_47;
  }
  if (v5 != 45)
  {
    if (!v9 || (v5 - 48) > 9u) {
      goto LABEL_34;
    }
    uint64_t v13 = (v5 - 48);
    if (v9 != 1)
    {
      if ((BYTE1(v5) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
      uint64_t v19 = v9 - 2;
      if (v9 != 2)
      {
        Swift::String v20 = (unsigned __int8 *)v28 + 2;
        while (1)
        {
          unsigned int v21 = *v20 - 48;
          if (v21 > 9) {
            goto LABEL_34;
          }
          uint64_t v22 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
            goto LABEL_34;
          }
          uint64_t v13 = v22 + v21;
          if (__OFADD__(v22, v21)) {
            goto LABEL_34;
          }
          LOBYTE(v5) = 0;
          ++v20;
          if (!--v19) {
            goto LABEL_47;
          }
        }
      }
    }
    goto LABEL_46;
  }
  if (v9)
  {
    if (v9 != 1 && (BYTE1(v5) - 48) <= 9u)
    {
      if (v9 == 2)
      {
        LOBYTE(v5) = 0;
        uint64_t v13 = -(uint64_t)(BYTE1(v5) - 48);
        goto LABEL_47;
      }
      if ((BYTE2(v5) - 48) <= 9u)
      {
        uint64_t v13 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
        uint64_t v23 = v9 - 3;
        if (v9 == 3) {
          goto LABEL_46;
        }
        id v24 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            break;
          }
          uint64_t v26 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
            break;
          }
          uint64_t v13 = v26 - v25;
          if (__OFSUB__(v26, v25)) {
            break;
          }
          LOBYTE(v5) = 0;
          ++v24;
          if (!--v23) {
            goto LABEL_47;
          }
        }
      }
    }
LABEL_34:
    uint64_t v13 = 0;
    LOBYTE(v5) = 1;
    goto LABEL_47;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t RapportSourceVersion.stringValue.getter()
{
  id v0 = (id)RPVersionToSourceVersionString();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100068014()
{
  return RapportSourceVersion.stringValue.getter();
}

BOOL static RapportSourceVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_10006802C()
{
  unint64_t result = qword_1000A42B0;
  if (!qword_1000A42B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42B0);
  }
  return result;
}

BOOL sub_100068078(uint64_t *a1, uint64_t *a2)
{
  return static RapportSourceVersion.< infix(_:_:)(*a1, *a2);
}

BOOL sub_100068084(uint64_t *a1, uint64_t *a2)
{
  return sub_100068090(*a1, *a2);
}

BOOL sub_100068090(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_10006809C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000680A8(*a1, *a2);
}

BOOL sub_1000680A8(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_1000680B4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000680D0(*a1, *a2);
}

ValueMetadata *type metadata accessor for RapportSourceVersion()
{
  return &type metadata for RapportSourceVersion;
}

BOOL sub_1000680D0(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

unsigned __int8 *sub_1000680DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10004D198();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_10004CF1C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t RapportControlFlags.description.getter(unint64_t a1)
{
  id v1 = RPControlFlagsCopyDescription(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void *RapportControlFlags.noIPv6.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noIPv6;
}

void *RapportControlFlags.BLE.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BLE;
}

void *RapportControlFlags.infraWiFi.unsafeMutableAddressor()
{
  return &static RapportControlFlags.infraWiFi;
}

void *RapportControlFlags.AWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.AWDL;
}

void *RapportControlFlags.NAN.unsafeMutableAddressor()
{
  return &static RapportControlFlags.NAN;
}

void *RapportControlFlags.BTPipe.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BTPipe;
}

void *RapportControlFlags.forceL2CAP.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceL2CAP;
}

void *RapportControlFlags.forceBLE.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceBLE;
}

uint64_t static RapportControlFlags.forceBLE.getter()
{
  return 0x8000;
}

void *RapportControlFlags.BLEScreenOff.unsafeMutableAddressor()
{
  return &static RapportControlFlags.BLEScreenOff;
}

uint64_t static RapportControlFlags.BLEScreenOff.getter()
{
  return 0x10000;
}

void *RapportControlFlags.forceAWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceAWDL;
}

uint64_t static RapportControlFlags.forceAWDL.getter()
{
  return 0x20000;
}

void *RapportControlFlags.forceUSB.unsafeMutableAddressor()
{
  return &static RapportControlFlags.forceUSB;
}

uint64_t static RapportControlFlags.forceUSB.getter()
{
  return 0x40000;
}

void *RapportControlFlags.moreComing.unsafeMutableAddressor()
{
  return &static RapportControlFlags.moreComing;
}

void *RapportControlFlags.noInfraWiFi.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noInfraWiFi;
}

uint64_t static RapportControlFlags.noInfraWiFi.getter()
{
  return 0x200000;
}

void *RapportControlFlags.noAWDL.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noAWDL;
}

uint64_t static RapportControlFlags.noAWDL.getter()
{
  return 0x400000;
}

void *RapportControlFlags.OPACKNoCopy.unsafeMutableAddressor()
{
  return &static RapportControlFlags.OPACKNoCopy;
}

uint64_t static RapportControlFlags.OPACKNoCopy.getter()
{
  return 0x40000000;
}

void *RapportControlFlags.proximity.unsafeMutableAddressor()
{
  return &static RapportControlFlags.proximity;
}

void *RapportControlFlags.ensemble.unsafeMutableAddressor()
{
  return &static RapportControlFlags.ensemble;
}

uint64_t static RapportControlFlags.ensemble.getter()
{
  return 0x10000000000;
}

void *RapportControlFlags.noL2CAP.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noL2CAP;
}

uint64_t static RapportControlFlags.noL2CAP.getter()
{
  return 0x20000000000;
}

void *RapportControlFlags.noUSB.unsafeMutableAddressor()
{
  return &static RapportControlFlags.noUSB;
}

uint64_t static RapportControlFlags.noUSB.getter()
{
  return 0x40000000000;
}

unint64_t sub_100068348()
{
  unint64_t result = qword_1000A42B8;
  if (!qword_1000A42B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42B8);
  }
  return result;
}

unint64_t sub_100068398()
{
  unint64_t result = qword_1000A42C0;
  if (!qword_1000A42C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42C0);
  }
  return result;
}

unint64_t sub_1000683E8()
{
  unint64_t result = qword_1000A42C8;
  if (!qword_1000A42C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42C8);
  }
  return result;
}

unint64_t sub_100068438()
{
  unint64_t result = qword_1000A42D0;
  if (!qword_1000A42D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42D0);
  }
  return result;
}

uint64_t sub_100068484()
{
  return RapportControlFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportControlFlags()
{
  return &type metadata for RapportControlFlags;
}

uint64_t RapportDeviceChangeFlags.init(_:)(uint64_t result)
{
  return result;
}

void *RapportStreamFlags.dontStart.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.dontStart;
}

void *RapportStreamFlags.lowLatency.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.lowLatency;
}

void *RapportStreamFlags.handoff.unsafeMutableAddressor()
{
  return &static RapportStreamFlags.handoff;
}

uint64_t RapportStreamFlags.description.getter(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    id v1 = RPStreamFlagsCopyDescription(a1);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v2;
  }
  return result;
}

unint64_t sub_100068570()
{
  unint64_t result = qword_1000A42D8;
  if (!qword_1000A42D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42D8);
  }
  return result;
}

unint64_t sub_1000685C0()
{
  unint64_t result = qword_1000A42E0;
  if (!qword_1000A42E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42E0);
  }
  return result;
}

unint64_t sub_100068610()
{
  unint64_t result = qword_1000A42E8;
  if (!qword_1000A42E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42E8);
  }
  return result;
}

unint64_t sub_100068660()
{
  unint64_t result = qword_1000A42F0;
  if (!qword_1000A42F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A42F0);
  }
  return result;
}

uint64_t sub_1000686AC()
{
  return RapportStreamFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStreamFlags()
{
  return &type metadata for RapportStreamFlags;
}

uint64_t RapportRemoteDisplayDiscovery.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t RapportRemoteDisplayDiscovery.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*RapportRemoteDisplayDiscovery.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 32);
  v3[3] = Strong;
  unsigned char v3[4] = v5;
  return sub_1000687F0;
}

void sub_1000687F0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 32) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t RapportRemoteDisplayDiscovery.__allocating_init(discovery:)()
{
  uint64_t v1 = sub_100067AD4();
  RapportRemoteDisplayDiscovery.init(discovery:)(v0);
  return v1;
}

uint64_t RapportRemoteDisplayDiscovery.init(discovery:)(void *a1)
{
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 16) = a1;
  sub_100067AB8();
  sub_1000698E0();
  uint64_t v18 = sub_100068C28;
  uint64_t v19 = v2;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005A66C;
  unsigned int v17 = &unk_100098548;
  unint64_t v4 = _Block_copy(&v14);
  id v5 = a1;
  uint64_t v6 = swift_release();
  sub_1000698FC(v6, "setInterruptionHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  uint64_t v18 = sub_100068CF8;
  uint64_t v19 = (uint64_t)v4;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005A66C;
  unsigned int v17 = &unk_100098570;
  _Block_copy(&v14);
  uint64_t v7 = sub_100069914();
  sub_1000698FC(v7, "setInvalidationHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  uint64_t v18 = sub_100068DB0;
  uint64_t v19 = (uint64_t)v4;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_100068EC8;
  unsigned int v17 = &unk_100098598;
  _Block_copy(&v14);
  uint64_t v8 = sub_100069914();
  sub_1000698FC(v8, "setDeviceFoundHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  uint64_t v18 = sub_100068FA4;
  uint64_t v19 = (uint64_t)v4;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_100068EC8;
  unsigned int v17 = &unk_1000985C0;
  _Block_copy(&v14);
  uint64_t v9 = sub_100069914();
  sub_1000698FC(v9, "setDeviceLostHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  uint64_t v18 = sub_100069130;
  uint64_t v19 = (uint64_t)v4;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10006922C;
  unsigned int v17 = &unk_1000985E8;
  _Block_copy(&v14);
  uint64_t v10 = sub_100069914();
  sub_1000698FC(v10, "setDeviceChangedHandler:");
  _Block_release(v4);
  uint64_t v11 = sub_100067AB8();
  swift_weakInit();
  uint64_t v18 = sub_100069300;
  uint64_t v19 = v11;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005A66C;
  unsigned int v17 = &unk_100098610;
  Swift::String v12 = _Block_copy(&v14);
  swift_release();
  [v5 setErrorFlagsChangedHandler:v12];

  _Block_release(v12);
  return v1;
}

uint64_t sub_100068BF0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100068C28()
{
  return sub_1000692A0(v0, (void (*)(void))sub_100068C70);
}

uint64_t sub_100068C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100068C68()
{
  return swift_release();
}

uint64_t sub_100068C70()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100068CF8()
{
  return sub_1000692A0(v0, (void (*)(void))sub_100068D28);
}

uint64_t sub_100068D28()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100068DB0(uint64_t a1)
{
  return sub_100068F30(a1, v1, (void (*)(uint64_t))sub_100068DE0);
}

uint64_t sub_100068DE0(void *a1)
{
  type metadata accessor for RapportRemoteDisplayDevice();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 16) = a1;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
    id v7 = a1;
    v6(v3, ObjectType, v4);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    id v9 = a1;
    return swift_release();
  }
}

void sub_100068EC8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100068F30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100068FA4(uint64_t a1)
{
  return sub_100068F30(a1, v1, (void (*)(uint64_t))sub_100068FD4);
}

uint64_t sub_100068FD4(void *a1)
{
  type metadata accessor for RapportRemoteDisplayDevice();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 16) = a1;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    id v7 = a1;
    v6(v3, ObjectType, v4);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    id v9 = a1;
    return swift_release();
  }
}

uint64_t sub_1000690BC(void *a1, unsigned int a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100069138(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_100069130(void *a1, unsigned int a2)
{
  return sub_1000690BC(a1, a2);
}

uint64_t sub_100069138(void *a1, unsigned int a2)
{
  type metadata accessor for RapportRemoteDisplayDevice();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 16) = a1;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = a2;
    uint64_t ObjectType = swift_getObjectType();
    id v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 32);
    id v10 = a1;
    v9(v5, v7, ObjectType, v6);
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    id v12 = a1;
    return swift_release();
  }
}

void sub_10006922C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000692A0(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

uint64_t sub_100069300()
{
  return sub_1000692A0(v0, (void (*)(void))sub_100069330);
}

uint64_t sub_100069330()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RapportRemoteDisplayDiscovery.__allocating_init()()
{
  [objc_allocWithZone((Class)RPRemoteDisplayDiscovery) init];
  uint64_t v1 = sub_100067AD4();
  RapportRemoteDisplayDiscovery.init(discovery:)(v0);
  return v1;
}

void *RapportRemoteDisplayDiscovery.devices.getter()
{
  id v1 = [*(id *)(v0 + 16) discoveredDevices];
  sub_100069590();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      id v7 = v6;
      ++v5;
      type metadata accessor for RapportRemoteDisplayDevice();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 32) = 0;
      swift_unknownObjectWeakInit();
      *(void *)(v8 + 16) = v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v3 != v5);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t sub_100069590()
{
  unint64_t result = qword_1000A42F8;
  if (!qword_1000A42F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000A42F8);
  }
  return result;
}

id RapportRemoteDisplayDiscovery.dispatchQueue.getter()
{
  id v1 = [*(id *)(v0 + 16) dispatchQueue];

  return v1;
}

void RapportRemoteDisplayDiscovery.dispatchQueue.setter(void *a1)
{
  [*(id *)(v1 + 16) setDispatchQueue:a1];
}

void (*RapportRemoteDisplayDiscovery.dispatchQueue.modify(void *a1))(id *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = [v3 dispatchQueue];
  return sub_1000670EC;
}

id RapportRemoteDisplayDiscovery.errorFlags.getter()
{
  return [*(id *)(v0 + 16) errorFlags];
}

void RapportRemoteDisplayDiscovery.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10002451C;
  v5[3] = &unk_100098638;
  id v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 activateWithCompletion:v4];
  _Block_release(v4);
}

Swift::Void __swiftcall RapportRemoteDisplayDiscovery.cancel()()
{
  [*(id *)(v0 + 16) invalidate];
}

uint64_t RapportRemoteDisplayDiscovery.deinit()
{
  sub_100066DA4(v0 + 24);
  return v0;
}

uint64_t RapportRemoteDisplayDiscovery.__deallocating_deinit()
{
  sub_100066DA4(v0 + 24);

  return _swift_deallocClassInstance(v0, 40, 7);
}

void sub_1000697EC()
{
}

uint64_t RapportRemoteDisplayDiscovery.description.getter()
{
  id v1 = [*(id *)(v0 + 16) description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100069868()
{
  return RapportRemoteDisplayDiscovery.description.getter();
}

uint64_t type metadata accessor for RapportRemoteDisplayDiscovery()
{
  return self;
}

uint64_t sub_1000698E0()
{
  return swift_weakInit();
}

id sub_1000698FC(uint64_t a1, const char *a2)
{
  return [v2 a2:v3];
}

uint64_t sub_100069914()
{
  return swift_release();
}

uint64_t sub_10006992C()
{
  return sub_1000675C8();
}

uint64_t RapportMessageable.serviceType.getter()
{
  sub_10006C6B0();
  id v1 = [(id)v0() serviceType];
  swift_unknownObjectRelease();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_1000699D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)v2 + 32);
  if (a2)
  {
    id v4 = v3;
    id v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = v3;
    id v6 = 0;
  }
  [v3 setServiceType:v6];
}

void sub_100069A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a2)
  {
    swift_unknownObjectRetain();
    id v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    id v4 = 0;
  }
  [v3 setServiceType:v4];
  swift_unknownObjectRelease();
}

void sub_100069B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)v2 + 16);
  if (a2)
  {
    id v4 = v3;
    id v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = v3;
    id v6 = 0;
  }
  [v3 setServiceType:v6];
}

void RapportMessageable.serviceType.setter(uint64_t a1, uint64_t a2)
{
  sub_10006C6B0();
  id v4 = (void *)v3();
  if (a2)
  {
    id v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = 0;
  }
  [v4 setServiceType:v5];
  swift_unknownObjectRelease();
}

uint64_t (*sub_100069C40(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = sub_1000675C8();
  a1[1] = v3;
  return sub_100069C8C;
}

uint64_t sub_100069C8C(uint64_t *a1, char a2)
{
  return sub_10006C404(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1000699D8);
}

void (*RapportMessageable.serviceType.modify())(void **a1, char a2)
{
  sub_10006C728();
  id v4 = malloc(0x28uLL);
  void *v3 = v4;
  v4[3] = v0;
  v4[4] = v1;
  _OWORD v4[2] = v2;
  *id v4 = RapportMessageable.serviceType.getter();
  v4[1] = v5;
  return sub_100069D18;
}

void sub_100069D18(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_10006C770();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10006C770();
  }

  free(v2);
}

void sub_100069D88(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
}

void sub_100069DAC(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  id v9 = *(id *)(v5 + 32);
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C67C;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10006B834;
  v13[3] = &unk_100098B68;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v9 registerEventID:v10 options:isa handler:v12];
  _Block_release(v12);
}

void sub_100069F04(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5, void *a6)
{
  swift_unknownObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C67C;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10006B834;
  v13[3] = &unk_100098A78;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [a6 registerEventID:v10 options:isa handler:v12];
  _Block_release(v12);
  swift_unknownObjectRelease();
}

void sub_10006A058(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  id v9 = *(id *)(v5 + 16);
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C67C;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10006B834;
  v13[3] = &unk_100098938;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v9 registerEventID:v10 options:isa handler:v12];
  _Block_release(v12);
}

void RapportMessageable.registerEvent(id:options:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, uint64_t a3), void *a12, uint64_t (*a13)(uint64_t a1, uint64_t a2), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10006C738();
  a23 = v27;
  a24 = v28;
  uint64_t v35 = sub_10006C680(v29, v30, v31, v32, v33, v34);
  v36(v35);
  NSString v37 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v26;
  *(void *)(v38 + 24) = v24;
  a13 = sub_10006B82C;
  a14 = v38;
  a9 = _NSConcreteStackBlock;
  sub_100013E7C();
  a11 = sub_10006B834;
  a12 = &unk_100098688;
  uint64_t v39 = _Block_copy(&a9);
  swift_retain();
  uint64_t v40 = swift_release();
  sub_10006C750(v40, "registerEventID:options:handler:");
  _Block_release(v39);
  swift_unknownObjectRelease();

  sub_10006C710();
}

void sub_10006A2D4(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
}

void sub_10006A2F8(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  id v9 = *(id *)(v5 + 32);
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C5B4;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100015020;
  v13[3] = &unk_100098B18;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v9 registerRequestID:v10 options:isa handler:v12];
  _Block_release(v12);
}

void sub_10006A450(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5, void *a6)
{
  swift_unknownObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C5B4;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100015020;
  v13[3] = &unk_100098A28;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [a6 registerRequestID:v10 options:isa handler:v12];
  _Block_release(v12);
  swift_unknownObjectRelease();
}

void sub_10006A5A4(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5)
{
  id v9 = *(id *)(v5 + 16);
  NSString v10 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10006C5B4;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100015020;
  v13[3] = &unk_1000988E8;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v9 registerRequestID:v10 options:isa handler:v12];
  _Block_release(v12);
}

void RapportMessageable.registerRequest(id:options:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4), void *a12, uint64_t (*a13)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10006C738();
  a23 = v27;
  a24 = v28;
  uint64_t v35 = sub_10006C680(v29, v30, v31, v32, v33, v34);
  v36(v35);
  NSString v37 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v26;
  *(void *)(v38 + 24) = v24;
  a13 = sub_10006B9C8;
  a14 = v38;
  a9 = _NSConcreteStackBlock;
  sub_100013E7C();
  a11 = sub_100015020;
  a12 = &unk_1000986D8;
  uint64_t v39 = _Block_copy(&a9);
  swift_retain();
  uint64_t v40 = swift_release();
  sub_10006C750(v40, "registerRequestID:options:handler:");
  _Block_release(v39);
  swift_unknownObjectRelease();

  sub_10006C710();
}

void sub_10006A820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
}

void sub_10006A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  id v12 = *(id *)(v8 + 32);
  NSString v13 = String._bridgeToObjectiveC()();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a7)
  {
    uint64_t v16[4] = a7;
    v16[5] = a8;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    _OWORD v16[2] = sub_10002451C;
    void v16[3] = &unk_100098AC8;
    a7 = _Block_copy(v16);
    swift_retain();
    swift_release();
  }
  [v12 sendEventID:v13 event:v14.super.isa destinationID:v15 options:isa completion:a7];
  _Block_release(a7);
}

void sub_10006A9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8, void *a9)
{
  swift_unknownObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v14 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a7)
  {
    v15[4] = a7;
    v15[5] = a8;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    void v15[2] = sub_10002451C;
    v15[3] = &unk_1000989D8;
    a7 = _Block_copy(v15);
    swift_retain();
    swift_release();
  }
  [a9 sendEventID:v12 event:v13.super.isa destinationID:v14 options:isa completion:a7];
  _Block_release(a7);
  swift_unknownObjectRelease();
}

void sub_10006AB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  id v12 = *(id *)(v8 + 16);
  NSString v13 = String._bridgeToObjectiveC()();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a7)
  {
    uint64_t v16[4] = a7;
    v16[5] = a8;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    _OWORD v16[2] = sub_10002451C;
    void v16[3] = &unk_100098898;
    a7 = _Block_copy(v16);
    swift_retain();
    swift_release();
  }
  [v12 sendEventID:v13 event:v14.super.isa destinationID:v15 options:isa completion:a7];
  _Block_release(a7);
}

void RapportMessageable.sendEvent(id:event:destinationID:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  sub_10006C6B0();
  id v12 = (void *)v11();
  NSString v13 = String._bridgeToObjectiveC()();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a7)
  {
    uint64_t v16[4] = a7;
    v16[5] = a8;
    v16[0] = _NSConcreteStackBlock;
    sub_100013E7C();
    _OWORD v16[2] = sub_10002451C;
    void v16[3] = &unk_100098700;
    a7 = _Block_copy(v16);
    swift_retain();
    swift_release();
  }
  [v12 sendEventID:v13 event:v14.super.isa destinationID:v15 options:isa completion:v16[0]];
  _Block_release(a7);
  swift_unknownObjectRelease();
}

void sub_10006AE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006AEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  id v12 = *(id *)(v8 + 32);
  NSString v13 = String._bridgeToObjectiveC()();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v17[4] = a7;
  void v17[5] = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_100067478;
  v17[3] = &unk_100098AA0;
  uint64_t v16 = _Block_copy(v17);
  swift_retain();
  swift_release();
  [v12 sendRequestID:v13 request:v14.super.isa destinationID:v15 options:isa responseHandler:v16];
  _Block_release(v16);
}

void sub_10006B030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8, void *a9)
{
  swift_unknownObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v14 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v16[4] = a7;
  v16[5] = a8;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  _OWORD v16[2] = sub_100067478;
  void v16[3] = &unk_1000989B0;
  NSString v15 = _Block_copy(v16);
  swift_retain();
  swift_release();
  [a9 sendRequestID:v12 request:v13.super.isa destinationID:v14 options:isa responseHandler:v15];
  _Block_release(v15);
  swift_unknownObjectRelease();
}

void sub_10006B1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  id v12 = *(id *)(v8 + 16);
  NSString v13 = String._bridgeToObjectiveC()();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v17[4] = a7;
  void v17[5] = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_100067478;
  v17[3] = &unk_100098870;
  uint64_t v16 = _Block_copy(v17);
  swift_retain();
  swift_release();
  [v12 sendRequestID:v13 request:v14.super.isa destinationID:v15 options:isa responseHandler:v16];
  _Block_release(v16);
}

void RapportMessageable.sendRequest(id:request:destinationID:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  sub_10006C6B0();
  v11();
  NSString v12 = String._bridgeToObjectiveC()();
  v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v14 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  void v18[4] = a7;
  v18[5] = a8;
  v18[0] = _NSConcreteStackBlock;
  sub_100013E7C();
  uint64_t v18[2] = sub_100067478;
  void v18[3] = &unk_100098728;
  NSString v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  uint64_t v16 = (void *)sub_10006C6DC();
  [v16 v17:v18[0]];
  _Block_release(v15);
  swift_unknownObjectRelease();
}

void sub_10006B4C8()
{
}

Swift::Void __swiftcall RapportMessageable.unregisterEvent(id:)(Swift::String id)
{
}

void sub_10006B500()
{
}

void sub_10006B52C()
{
  sub_10006C728();
  id v1 = v0[4];
  NSString v2 = sub_10006C6F4();
  sub_10006C6BC((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v11);
}

void sub_10006B584()
{
  swift_unknownObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  sub_10006C6BC((uint64_t)v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t)v9);
  swift_unknownObjectRelease();
}

void sub_10006B5F4()
{
  sub_10006C728();
  id v1 = v0[2];
  NSString v2 = sub_10006C6F4();
  sub_10006C6BC((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v11);
}

Swift::Void __swiftcall RapportMessageable.unregisterRequest(id:)(Swift::String id)
{
}

void sub_10006B658()
{
  sub_10006C6B0();
  v0();
  NSString v1 = sub_10006C6F4();
  sub_10006C6BC((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, (uint64_t)v10);
  swift_unknownObjectRelease();
}

id sub_10006B6CC(void *a1)
{
  id v1 = [a1 dispatchQueue];

  return v1;
}

id RapportMessageable.dispatchQueue.getter()
{
  sub_10006C6B0();
  id v1 = [(id)v0() dispatchQueue];
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_10006B754(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  }
  swift_bridgeObjectRetain();
  a3(a1, v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B7F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006B82C(uint64_t a1, uint64_t a2)
{
  return sub_10006B754(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10006B834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006B908()
{
  return swift_release();
}

uint64_t sub_10006B910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  }
  swift_bridgeObjectRetain();
  a5(a1, v9, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006B910(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

void sub_10006B9D0(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6, void *a7)
{
  swift_unknownObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10002451C;
    v13[3] = &unk_100098988;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  [a7 sendEventID:v11 event:v12.super.isa options:isa completion:a5];
  _Block_release(a5);
  swift_unknownObjectRelease();
}

void sub_10006BB38(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  id v10 = *(id *)(v6 + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10002451C;
    v13[3] = &unk_100098848;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  [v10 sendEventID:v11 event:v12.super.isa options:isa completion:a5];
  _Block_release(a5);
}

void RapportMessageable.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void (*a11)(uint64_t a1, void *a2), void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10006C738();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  Class isa = v30;
  sub_10006C6B0();
  uint64_t v33 = (void *)v32();
  NSString v34 = String._bridgeToObjectiveC()();
  v35.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (v29)
  {
    a13 = v29;
    a14 = v27;
    a9 = _NSConcreteStackBlock;
    sub_100013E7C();
    a11 = sub_10002451C;
    a12 = &unk_100098750;
    uint64_t v29 = _Block_copy(&a9);
    swift_retain();
    swift_release();
  }
  [v33 sendEventID:v34 event:v35.super.isa options:isa completion:v29];
  _Block_release(v29);
  swift_unknownObjectRelease();

  sub_10006C710();
}

void sub_10006BE00(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6, void *a7)
{
  swift_unknownObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14[4] = a5;
  v14[5] = a6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100067478;
  void v14[3] = &unk_100098960;
  NSDictionary v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  [a7 sendRequestID:v11 request:v12.super.isa options:isa responseHandler:v13];
  _Block_release(v13);
  swift_unknownObjectRelease();
}

void sub_10006BF64(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  id v10 = *(id *)(v6 + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14[4] = a5;
  v14[5] = a6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100067478;
  void v14[3] = &unk_100098820;
  NSDictionary v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  [v10 sendRequestID:v11 request:v12.super.isa options:isa responseHandler:v13];
  _Block_release(v13);
}

void RapportMessageable.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10006C738();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  Class isa = v30;
  sub_10006C6B0();
  v32();
  NSString v33 = String._bridgeToObjectiveC()();
  v34.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  a13 = v29;
  a14 = v27;
  a9 = _NSConcreteStackBlock;
  sub_100013E7C();
  a11 = sub_100067478;
  a12 = &unk_100098778;
  NSDictionary v35 = _Block_copy(&a9);
  swift_retain();
  swift_release();
  uint64_t v36 = (void *)sub_10006C6DC();
  [v36 v37];
  _Block_release(v35);
  swift_unknownObjectRelease();

  sub_10006C710();
}

uint64_t AnyRapportMessageable.messenger.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v1 = a1;
  return result;
}

uint64_t sub_10006C244()
{
  return swift_unknownObjectRetain();
}

id sub_10006C24C()
{
  return sub_10006B6CC(*v0);
}

uint64_t sub_10006C254()
{
  return sub_100067630(*v0);
}

uint64_t (*sub_10006C260(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = sub_100067630(*v1);
  a1[1] = v3;
  return sub_10006C2AC;
}

uint64_t sub_10006C2AC(uint64_t *a1, char a2)
{
  return sub_10006C404(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100069A6C);
}

void sub_10006C2C4(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_100069F04(a1, a2, a3, a4, a5, *v5);
}

void sub_10006C2CC(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  sub_10006A450(a1, a2, a3, a4, a5, *v5);
}

void sub_10006C2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
  sub_10006A9D0(a1, a2, a3, a4, a5, a6, a7, a8, *v8);
}

void sub_10006C2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
  sub_10006B030(a1, a2, a3, a4, a5, a6, a7, a8, *v8);
}

void sub_10006C2EC()
{
}

void sub_10006C310()
{
}

void sub_10006C334(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  sub_10006B9D0(a1, a2, a3, a4, a5, a6, *v6);
}

void sub_10006C33C(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  sub_10006BE00(a1, a2, a3, a4, a5, a6, *v6);
}

ValueMetadata *type metadata accessor for AnyRapportMessageable()
{
  return &type metadata for AnyRapportMessageable;
}

id sub_10006C354()
{
  return RapportRemoteDisplayDiscovery.dispatchQueue.getter();
}

uint64_t sub_10006C378()
{
  return RapportStreamServer.serviceType.getter();
}

uint64_t (*sub_10006C3A0(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RapportStreamServer.serviceType.getter();
  a1[1] = v3;
  return sub_10006C3EC;
}

uint64_t sub_10006C3EC(uint64_t *a1, char a2)
{
  return sub_10006C404(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100069B08);
}

uint64_t sub_10006C404(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);

  return swift_bridgeObjectRelease();
}

void sub_10006C484(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
}

void sub_10006C4A8(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
}

void sub_10006C4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
}

void sub_10006C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006C514()
{
}

void sub_10006C540()
{
}

void sub_10006C56C(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
}

void sub_10006C590(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_10006C680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a6;
}

id sub_10006C6BC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSDictionary v13 = *v10;
  return [v11 v13:a1];
}

uint64_t sub_10006C6DC()
{
  return v0;
}

NSString sub_10006C6F4()
{
  return String._bridgeToObjectiveC()();
}

id sub_10006C750(uint64_t a1, const char *a2)
{
  return [v2 a2:v3 v4:v5];
}

void sub_10006C770()
{
  RapportMessageable.serviceType.setter(v0, v1);
}

uint64_t RapportRemoteDisplayServer.__allocating_init(server:)()
{
  uint64_t v1 = sub_10006D3AC();
  RapportRemoteDisplayServer.init(server:)(v0);
  return v1;
}

void *RapportRemoteDisplayServer.init(server:)(void *a1)
{
  v1[4] = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for RapportRemoteDisplaySession();
  v1[5] = Dictionary.init(dictionaryLiteral:)();
  v1[2] = a1;
  sub_100067AB8();
  sub_1000698E0();
  NSString v15 = sub_10006CAB8;
  uint64_t v16 = v2;
  NSString v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  NSDictionary v13 = sub_10005A66C;
  NSString v14 = &unk_100098BB8;
  uint64_t v4 = _Block_copy(&v11);
  id v5 = a1;
  swift_release();
  [v5 setInterruptionHandler:v4];
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  NSString v15 = sub_10006CBE8;
  uint64_t v16 = (uint64_t)v4;
  NSString v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  NSDictionary v13 = sub_10005A66C;
  NSString v14 = &unk_100098BE0;
  uint64_t v6 = _Block_copy(&v11);
  swift_release();
  [v5 setInvalidationHandler:v6];
  _Block_release(v6);
  sub_100067AB8();
  sub_1000698E0();
  NSString v15 = sub_10006CD1C;
  uint64_t v16 = (uint64_t)v6;
  NSString v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  NSDictionary v13 = sub_10006CE9C;
  NSString v14 = &unk_100098C08;
  int v7 = _Block_copy(&v11);
  swift_release();
  [v5 setSessionStartHandler:v7];
  _Block_release(v7);
  uint64_t v8 = sub_100067AB8();
  swift_weakInit();
  NSString v15 = sub_10006CFC8;
  uint64_t v16 = v8;
  NSString v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  NSDictionary v13 = sub_10006D140;
  NSString v14 = &unk_100098C30;
  uint64_t v9 = _Block_copy(&v11);
  swift_release();
  [v5 setSessionEndedHandler:v9];

  _Block_release(v9);
  return v1;
}

uint64_t sub_10006CA80()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006CAB8()
{
  return sub_10006CB88(v0, (void (*)(void))sub_10006CB00);
}

uint64_t sub_10006CAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006CAF8()
{
  return swift_release();
}

uint64_t sub_10006CB00()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10006CB88(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

uint64_t sub_10006CBE8()
{
  return sub_10006CB88(v0, (void (*)(void))sub_10006CC18);
}

uint64_t sub_10006CC18()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10006CCA0(void *a1, void (*a2)(void), uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10006CD24(a1, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006CD1C(void *a1, void (*a2)(void), uint64_t a3)
{
  return sub_10006CCA0(a1, a2, a3);
}

void sub_10006CD24(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for RapportRemoteDisplaySession();
  swift_allocObject();
  id v8 = a1;
  uint64_t v9 = RapportRemoteDisplaySession.init(session:)(v8);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v10 = *(void *)(v4 + 32);
    swift_beginAccess();
    uint64_t v11 = swift_retain();
    sub_100071E14(v11, (uint64_t)v8);
    swift_endAccess();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v10 + 24))(v4, v9, a2, a3, ObjectType, v10);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100052F30();
    id v13 = sub_1000661E0(-6714, 0xD000000000000025, 0x8000000100080910);
    a2();
    swift_release();
  }
}

void sub_10006CE9C(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  id v5 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v5;
  swift_retain();
  id v6 = a2;
  v4();
  swift_release();
  swift_release();
}

uint64_t sub_10006CF54(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10006CFD0(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006CFC8(uint64_t a1, uint64_t a2)
{
  return sub_10006CF54(a1, a2);
}

uint64_t sub_10006CFD0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v5 = sub_100071CFC(a1);
  if ((v6 & 1) == 0) {
    return swift_endAccess();
  }
  unint64_t v7 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0x8000000000000000;
  Swift::Int v9 = *(void *)(v14 + 24);
  sub_1000116B8(&qword_1000A4498);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  uint64_t v10 = *(void *)(*(void *)(v14 + 56) + 8 * v7);
  type metadata accessor for RapportRemoteDisplaySession();
  _NativeDictionary._delete(at:)();
  *(void *)(v2 + 40) = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  if (!swift_unknownObjectWeakLoadStrong()) {
    return swift_release();
  }
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(v2, v10, a2, ObjectType, v11);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_10006D140(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t RapportRemoteDisplayServer.__allocating_init()()
{
  [objc_allocWithZone((Class)RPRemoteDisplayServer) init];
  uint64_t v1 = sub_10006D3AC();
  RapportRemoteDisplayServer.init(server:)(v0);
  return v1;
}

void RapportRemoteDisplayServer.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10002451C;
  v5[3] = &unk_100098C58;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 activateWithCompletion:v4];
  _Block_release(v4);
}

uint64_t RapportRemoteDisplayServer.deinit()
{
  sub_100066DA4(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RapportRemoteDisplayServer.__deallocating_deinit()
{
  RapportRemoteDisplayServer.deinit();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RapportRemoteDisplayServer()
{
  return self;
}

uint64_t sub_10006D354()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006D3AC()
{
  return swift_allocObject();
}

uint64_t RapportEndpoint.accountID.getter()
{
  sub_10006DBD8();
  uint64_t v1 = (void *)v0();
  id v2 = [v1 accountID];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t RapportEndpoint.activityLevel.getter()
{
  sub_10006DBD8();
  uint64_t v1 = (void *)v0();
  signed int v2 = [v1 activityLevel];

  return v2;
}

uint64_t RapportEndpoint.activityLevelTimeStamp.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10006DBD8();
  uint64_t v3 = (void *)v2();
  id v4 = [v3 activityLevelTimeStamp];

  if (v4)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for Date();

  return sub_100012E34(a1, v5, 1, v6);
}

uint64_t sub_10006D52C()
{
  return [*(id *)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20)) cameraState];
}

uint64_t sub_10006D560()
{
  return [*(id *)(v0 + 16) cameraState];
}

uint64_t RapportEndpoint.cameraState.getter()
{
  sub_10006DBD8();
  uint64_t v1 = (void *)v0();
  unsigned int v2 = [v1 cameraState];

  return v2;
}

void *RapportEndpoint.homeKitUserIdentifiers.getter()
{
  sub_10006DBD8();
  uint64_t v1 = (void *)v0();
  id v2 = [v1 homeKitUserIdentifiers];

  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  type metadata accessor for UUID();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v3;
}

uint64_t RapportEndpoint.identifier.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_identifier);
}

uint64_t RapportEndpoint.idsDeviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_idsDeviceIdentifier);
}

uint64_t sub_10006D664()
{
  id v1 = [*(id *)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20)) mediaRouteIdentifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10006D6D8()
{
  id v1 = [*(id *)(v0 + 16) mediaRouteIdentifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t RapportEndpoint.mediaRouteIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_mediaRouteIdentifier);
}

uint64_t RapportEndpoint.model.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_model);
}

uint64_t RapportEndpoint.name.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_name);
}

uint64_t RapportEndpoint.serviceInfo.getter()
{
  sub_10006DBD8();
  id v1 = (void *)v0();
  id v2 = [v1 serviceInfo];

  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

uint64_t RapportEndpoint.serviceType.getter(uint64_t a1, uint64_t a2)
{
  return sub_10006D7F4(a1, a2, (SEL *)&selRef_serviceType);
}

uint64_t sub_10006D7F4(uint64_t a1, uint64_t a2, SEL *a3)
{
  sub_10006DBD8();
  uint64_t v5 = (void *)v4();
  id v6 = [v5 *a3];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

void *RapportEndpoint.serviceTypes.getter()
{
  sub_10006DBD8();
  id v1 = (void *)v0();
  id v2 = [v1 serviceTypes];

  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return (void *)v3;
}

CompanionLink::RapportSourceVersion RapportEndpoint.sourceVersion.getter()
{
  sub_10006DBD8();
  id v1 = (void *)v0();
  id v2 = [v1 sourceVersion];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v5;

  return RapportSourceVersion.init(stringValue:)(*(Swift::String *)&v6);
}

id RapportStreamSession.statusFlags.getter()
{
  return [*(id *)(v0 + 16) statusFlags];
}

id RapportEndpoint.statusFlags.getter()
{
  sub_10006DBD8();
  id v1 = (void *)v0();
  id v2 = [v1 statusFlags];

  return v2;
}

uint64_t sub_10006D9BC()
{
  return sub_100062CBC();
}

uint64_t sub_10006D9E0()
{
  return sub_100062D48();
}

uint64_t sub_10006DA04()
{
  return sub_100062DEC();
}

uint64_t sub_10006DA28()
{
  return sub_10006D560();
}

void *sub_10006DA4C()
{
  return sub_100062EC8();
}

uint64_t sub_10006DA70()
{
  return sub_100062F34();
}

uint64_t sub_10006DA94()
{
  return sub_100062F4C();
}

uint64_t sub_10006DAB8()
{
  return sub_10006D6D8();
}

uint64_t sub_10006DADC()
{
  return sub_100062F64();
}

uint64_t sub_10006DB00()
{
  return sub_100062F7C();
}

uint64_t sub_10006DB24()
{
  return sub_100062FF4();
}

uint64_t sub_10006DB48()
{
  return sub_1000630C4();
}

void *sub_10006DB6C()
{
  return sub_100063190();
}

id sub_10006DB90()
{
  return RapportStreamSession.statusFlags.getter();
}

CompanionLink::RapportSourceVersion sub_10006DBB4()
{
  return sub_100063264();
}

void sub_10006DBF4(uint64_t a1)
{
  sub_10006DEC4(*v1 | a1);
}

void sub_10006DC00(uint64_t a1)
{
  sub_10006DEC4(*v1 & a1);
}

void sub_10006DC0C(uint64_t a1)
{
  sub_10006DEC4(*v1 ^ a1);
}

void sub_10006DC18(uint64_t a1)
{
  sub_10006DEC4(*v1 & ~a1);
}

void *RapportDeviceChangeFlags.advertisementData.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.advertisementData;
}

void *RapportDeviceChangeFlags.attributes.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.attributes;
}

void *RapportDeviceChangeFlags.distance.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.distance;
}

void *RapportDeviceChangeFlags.IE.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.IE;
}

void *RapportDeviceChangeFlags.name.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.name;
}

void *RapportDeviceChangeFlags.RSSI.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.RSSI;
}

void *RapportDeviceChangeFlags.SSID.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.SSID;
}

void *RapportDeviceChangeFlags.proximity.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.proximity;
}

void *RapportDeviceChangeFlags.relativeLocation.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.relativeLocation;
}

void *RapportDeviceChangeFlags.removed.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.removed;
}

uint64_t RapportDeviceChangeFlags.description.getter(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    id v1 = RPDeviceChangeFlagsCopyDescription(a1);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v2;
  }
  return result;
}

unint64_t sub_10006DD48()
{
  unint64_t result = qword_1000A44A0;
  if (!qword_1000A44A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A44A0);
  }
  return result;
}

unint64_t sub_10006DD98()
{
  unint64_t result = qword_1000A44A8;
  if (!qword_1000A44A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A44A8);
  }
  return result;
}

unint64_t sub_10006DDE8()
{
  unint64_t result = qword_1000A44B0;
  if (!qword_1000A44B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A44B0);
  }
  return result;
}

unint64_t sub_10006DE38()
{
  unint64_t result = qword_1000A44B8;
  if (!qword_1000A44B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A44B8);
  }
  return result;
}

uint64_t sub_10006DE84()
{
  return RapportDeviceChangeFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportDeviceChangeFlags()
{
  return &type metadata for RapportDeviceChangeFlags;
}

void sub_10006DEC4(uint64_t a1@<X8>)
{
  *id v1 = a1;
}

void sub_10006DED4()
{
  static RapportStreamQoS.default = 0;
}

uint64_t RapportStreamQoS.init(_:)(uint64_t result)
{
  return (int)result;
}

uint64_t *RapportStreamQoS.default.unsafeMutableAddressor()
{
  if (qword_1000A3F68 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.default;
}

uint64_t static RapportStreamQoS.default.getter()
{
  return sub_10006E2D8(&qword_1000A3F68, (uint64_t)&static RapportStreamQoS.default);
}

void sub_10006DF58()
{
  static RapportStreamQoS.background = 1;
}

uint64_t *RapportStreamQoS.background.unsafeMutableAddressor()
{
  if (qword_1000A3F70 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.background;
}

uint64_t static RapportStreamQoS.background.getter()
{
  return sub_10006E2D8(&qword_1000A3F70, (uint64_t)&static RapportStreamQoS.background);
}

void sub_10006DFD8()
{
  static RapportStreamQoS.video = 2;
}

uint64_t *RapportStreamQoS.video.unsafeMutableAddressor()
{
  if (qword_1000A3F78 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.video;
}

uint64_t static RapportStreamQoS.video.getter()
{
  return sub_10006E2D8(&qword_1000A3F78, (uint64_t)&static RapportStreamQoS.video);
}

void sub_10006E058()
{
  static RapportStreamQoS.voice = 3;
}

uint64_t *RapportStreamQoS.voice.unsafeMutableAddressor()
{
  if (qword_1000A3F80 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.voice;
}

uint64_t static RapportStreamQoS.voice.getter()
{
  return sub_10006E2D8(&qword_1000A3F80, (uint64_t)&static RapportStreamQoS.voice);
}

void sub_10006E0D8()
{
  static RapportStreamQoS.airPlayAudio = 10;
}

uint64_t *RapportStreamQoS.airPlayAudio.unsafeMutableAddressor()
{
  if (qword_1000A3F88 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.airPlayAudio;
}

uint64_t static RapportStreamQoS.airPlayAudio.getter()
{
  return sub_10006E2D8(&qword_1000A3F88, (uint64_t)&static RapportStreamQoS.airPlayAudio);
}

void sub_10006E158()
{
  static RapportStreamQoS.airPlayScreenAudio = 11;
}

uint64_t *RapportStreamQoS.airPlayScreenAudio.unsafeMutableAddressor()
{
  if (qword_1000A3F90 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.airPlayScreenAudio;
}

uint64_t static RapportStreamQoS.airPlayScreenAudio.getter()
{
  return sub_10006E2D8(&qword_1000A3F90, (uint64_t)&static RapportStreamQoS.airPlayScreenAudio);
}

void sub_10006E1D8()
{
  static RapportStreamQoS.airPlayScreenVideo = 12;
}

uint64_t *RapportStreamQoS.airPlayScreenVideo.unsafeMutableAddressor()
{
  if (qword_1000A3F98 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.airPlayScreenVideo;
}

uint64_t static RapportStreamQoS.airPlayScreenVideo.getter()
{
  return sub_10006E2D8(&qword_1000A3F98, (uint64_t)&static RapportStreamQoS.airPlayScreenVideo);
}

void sub_10006E258()
{
  static RapportStreamQoS.ntp = 20;
}

uint64_t *RapportStreamQoS.ntp.unsafeMutableAddressor()
{
  if (qword_1000A3FA0 != -1) {
    swift_once();
  }
  return &static RapportStreamQoS.ntp;
}

uint64_t static RapportStreamQoS.ntp.getter()
{
  return sub_10006E2D8(&qword_1000A3FA0, (uint64_t)&static RapportStreamQoS.ntp);
}

uint64_t sub_10006E2D8(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

Swift::Int sub_10006E314()
{
  return sub_10000331C(*v0);
}

Swift::Int sub_10006E330(uint64_t a1)
{
  return sub_100003374(a1, *v1);
}

uint64_t RapportStreamQoS.description.getter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    id v1 = RPStreamQoSCopyDescription(result);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v2;
  }
  __break(1u);
  return result;
}

unint64_t sub_10006E3BC()
{
  unint64_t result = qword_1000A44C0;
  if (!qword_1000A44C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A44C0);
  }
  return result;
}

uint64_t sub_10006E408()
{
  return RapportStreamQoS.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStreamQoS()
{
  return &type metadata for RapportStreamQoS;
}

uint64_t RapportRemoteDisplayDevice.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 16) = a1;
  return v2;
}

uint64_t RapportRemoteDisplayDevice.persistentIdentifier.getter()
{
  id v1 = [*(id *)(v0 + 16) persistentIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t RapportRemoteDisplayDevice.init(device:)(uint64_t a1)
{
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t RapportRemoteDisplayDevice.cameraCapabilities.getter()
{
  id v1 = [*(id *)(v0 + 16) cameraCapabilities];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t RapportRemoteDisplayDevice.flags.getter()
{
  return [*(id *)(v0 + 16) flags];
}

uint64_t sub_10006E5A8()
{
  return RapportRemoteDisplayDevice._endpoint.getter();
}

BOOL static RapportRemoteDisplayDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL sub_10006E5E0(uint64_t *a1, uint64_t *a2)
{
  return static RapportRemoteDisplayDevice.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for RapportRemoteDisplayDevice()
{
  return self;
}

id RapportStreamSession.session.getter()
{
  return *(id *)(v0 + 16);
}

void sub_10006E630(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
  a3();
  unint64_t v4 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v5 = [v4 localizedDescription];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  uint64_t v9 = a1();
  if (v10)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    id v27 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446979;
      swift_bridgeObjectRetain();
      sub_100017070(v11, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2082;
      id v16 = [v27 domain];
      uint64_t v17 = v6;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      sub_100017070(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2048;
      [v27 code];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 32) = 2081;
      swift_bridgeObjectRetain();
      sub_100017070(v17, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v15, 0x2Au);
      swift_arrayDestroy();
LABEL_6:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v27 = v4;
    swift_bridgeObjectRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446723;
      id v23 = [v27 domain];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      sub_100017070(v24, v26, &v28);
      sub_100019E54();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      [v27 code];

      sub_100019E54();
      *(_WORD *)(v22 + 22) = 2081;
      swift_bridgeObjectRetain();
      sub_100017070(v6, v8, &v28);
      sub_100019E54();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v21, "%{public}s (%ld) %{private}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();
}

uint64_t CompanionLinkClient.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t CompanionLinkClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CompanionLinkClient.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = Strong;
  unsigned char v3[4] = v5;
  return sub_10006EC58;
}

void sub_10006EC58(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 40) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

id CompanionLinkClient.id.getter()
{
  return [*(id *)(v0 + 16) clientID];
}

id CompanionLinkClient.controlFlags.getter()
{
  return [*(id *)(v0 + 16) controlFlags];
}

id CompanionLinkClient.controlFlags.setter(uint64_t a1)
{
  return [*(id *)(v1 + 16) setControlFlags:a1];
}

id (*CompanionLinkClient.controlFlags.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = [v3 controlFlags];
  return sub_100066E78;
}

uint64_t CompanionLinkClient.destinationDevice.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 16) destinationDevice];
  if (v3)
  {
    return sub_100062A78(v3, a1);
  }
  else
  {
    type metadata accessor for CompanionLinkDevice();
    uint64_t v5 = sub_1000515C0();
    return sub_100012E34(v5, v6, v7, v8);
  }
}

uint64_t CompanionLinkClient.destinationDevice.setter(uint64_t a1)
{
  uint64_t v3 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + 16);
  sub_10006EEC8(a1, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for CompanionLinkDevice();
  if (sub_100012E5C((uint64_t)v5, 1, v7) == 1)
  {
    sub_10001E618((uint64_t)v5);
    id v8 = 0;
  }
  else
  {
    id v8 = *(id *)&v5[*(int *)(v7 + 20)];
    sub_1000178EC((uint64_t)v5);
  }
  [v6 setDestinationDevice:v8];

  return sub_10001E618(a1);
}

uint64_t sub_10006EEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A1C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*CompanionLinkClient.destinationDevice.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_1000116B8(&qword_1000A1C48) - 8) + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  CompanionLinkClient.destinationDevice.getter((uint64_t)v4);
  return sub_10006EFBC;
}

void sub_10006EFBC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_10006EEC8((uint64_t)v3, (uint64_t)v2);
    CompanionLinkClient.destinationDevice.setter((uint64_t)v2);
    sub_10001E618((uint64_t)v3);
  }
  else
  {
    CompanionLinkClient.destinationDevice.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t CompanionLinkClient.localDevice.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 16) localDevice];
  if (v3)
  {
    return sub_100062A78(v3, a1);
  }
  else
  {
    type metadata accessor for CompanionLinkDevice();
    uint64_t v5 = sub_1000515C0();
    return sub_100012E34(v5, v6, v7, v8);
  }
}

uint64_t sub_10006F0A0(uint64_t a1)
{
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)(v1 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t CompanionLinkClient.__allocating_init()()
{
  id v0 = [objc_allocWithZone((Class)RPCompanionLinkClient) init];
  uint64_t v1 = swift_allocObject();
  sub_10006F0A0((uint64_t)v0);
  id v2 = v0;
  swift_retain();
  sub_10006F158(v2);

  swift_release();
  return v1;
}

void sub_10006F158(void *a1)
{
  id v2 = [self mainBundle];
  sub_100070904(v2);
  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  [a1 setAppID:v4];

  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_1000709AC;
  uint64_t v25 = v5;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_10005A66C;
  id v23 = &unk_100098DC8;
  uint64_t v6 = _Block_copy(&v20);
  swift_release();
  [a1 setDisconnectHandler:v6];
  _Block_release(v6);
  sub_10001589C();
  uint64_t v7 = (void *)static OS_dispatch_queue.main.getter();
  [a1 setDispatchQueue:v7];

  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_1000709DC;
  uint64_t v25 = v8;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_100068EC8;
  id v23 = &unk_100098DF0;
  uint64_t v9 = _Block_copy(&v20);
  swift_release();
  [a1 setDeviceFoundHandler:v9];
  _Block_release(v9);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_100070A0C;
  uint64_t v25 = v10;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_100068EC8;
  id v23 = &unk_100098E18;
  uint64_t v11 = _Block_copy(&v20);
  swift_release();
  [a1 setDeviceLostHandler:v11];
  _Block_release(v11);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_100070A3C;
  uint64_t v25 = v12;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_10006922C;
  id v23 = &unk_100098E40;
  id v13 = _Block_copy(&v20);
  swift_release();
  [a1 setDeviceChangedHandler:v13];
  _Block_release(v13);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_100070A44;
  uint64_t v25 = v14;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_10005A66C;
  id v23 = &unk_100098E68;
  uint64_t v15 = _Block_copy(&v20);
  swift_release();
  [a1 setInterruptionHandler:v15];
  _Block_release(v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_100070A74;
  uint64_t v25 = v16;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_10005A66C;
  id v23 = &unk_100098E90;
  uint64_t v17 = _Block_copy(&v20);
  swift_release();
  [a1 setInvalidationHandler:v17];
  _Block_release(v17);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = sub_100070AA4;
  uint64_t v25 = v18;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_100068EC8;
  id v23 = &unk_100098EB8;
  unint64_t v19 = _Block_copy(&v20);
  swift_release();
  [a1 setLocalDeviceUpdatedHandler:v19];
  _Block_release(v19);
}

uint64_t CompanionLinkClient.__allocating_init(destination:serviceType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone((Class)RPCompanionLinkClient) init];
  uint64_t v6 = swift_allocObject();
  sub_10006F0A0((uint64_t)v5);
  id v7 = v5;
  swift_retain();
  sub_10006F158(v7);
  uint64_t v8 = *(void **)(v6 + 16);
  [v8 setDestinationDevice:*(void *)(a1 + *(int *)(type metadata accessor for CompanionLinkDevice() + 20))];
  if (a3)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  [v8 setServiceType:v9];

  swift_release();
  sub_1000178EC(a1);
  return v6;
}

void sub_10006F764()
{
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v0, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1000A3FA8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100004964(v3, (uint64_t)qword_1000AA320);
    NSString v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CompanionLinkClient disconnected", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10006F8A4(void *a1)
{
  uint64_t v3 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062A78(a1, (uint64_t)v5);
  if (sub_100012E5C((uint64_t)v5, 1, v6) == 1) {
    return sub_10001E618((uint64_t)v5);
  }
  sub_10001E678((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, ObjectType, v10);
    swift_unknownObjectRelease();
  }
  return sub_1000178EC((uint64_t)v8);
}

uint64_t sub_10006FA10(void *a1)
{
  uint64_t v3 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062A78(a1, (uint64_t)v5);
  if (sub_100012E5C((uint64_t)v5, 1, v6) == 1) {
    return sub_10001E618((uint64_t)v5);
  }
  sub_10001E678((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(v8, ObjectType, v10);
    swift_unknownObjectRelease();
  }
  return sub_1000178EC((uint64_t)v8);
}

uint64_t sub_10006FB7C(void *a1, unsigned int a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10006FBF0(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006FBF0(void *a1, unsigned int a2)
{
  uint64_t v5 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062A78(a1, (uint64_t)v7);
  if (sub_100012E5C((uint64_t)v7, 1, v8) == 1) {
    return sub_10001E618((uint64_t)v7);
  }
  sub_10001E678((uint64_t)v7, (uint64_t)v10);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v12 = *(void *)(v2 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 8))(v10, a2, ObjectType, v12);
    swift_unknownObjectRelease();
  }
  return sub_1000178EC((uint64_t)v10);
}

void sub_10006FD68()
{
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 40))(v0, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1000A3FA8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100004964(v3, (uint64_t)qword_1000AA320);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CompanionLinkClient interrupted", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10006FEA8(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

void sub_10006FF08()
{
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v0, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1000A3FA8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100004964(v3, (uint64_t)qword_1000AA320);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CompanionLinkClient invalidated", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100070048(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000700BC(void *a1)
{
  uint64_t v3 = sub_1000116B8(&qword_1000A1C48);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CompanionLinkDevice();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062A78(a1, (uint64_t)v5);
  if (sub_100012E5C((uint64_t)v5, 1, v6) == 1) {
    return sub_10001E618((uint64_t)v5);
  }
  sub_10001E678((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 56))(v8, ObjectType, v10);
    swift_unknownObjectRelease();
  }
  return sub_1000178EC((uint64_t)v8);
}

void CompanionLinkClient.activate(completion:)(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  v8[4] = sub_10007036C;
  v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  void v8[2] = sub_10002451C;
  v8[3] = &unk_100098D20;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  sub_10004F82C(a1);
  swift_release();
  [v5 activateWithCompletion:v7];
  _Block_release(v7);
}

uint64_t sub_100070324()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10007036C(uint64_t a1)
{
  sub_1000703B0(a1, *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100070398(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000703A8()
{
  return swift_release();
}

void sub_1000703B0(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain();
    a2(a1);
    sub_100012A1C((uint64_t)a2);
    return;
  }
  if (a1)
  {
    unint64_t v26 = _convertErrorToNSError(_:)();
    if (*(unsigned char *)(v2 + 24) != 1) {
      goto LABEL_27;
    }
    id v9 = [v26 domain];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    id v13 = [v26 code];
    if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v14)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0) {
        goto LABEL_27;
      }
    }
    if (v13 != (id)4099)
    {
LABEL_27:
      if (qword_1000A3FA8 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_100004964(v5, (uint64_t)qword_1000AA320);
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v23, v5);
      __chkstk_darwin(v24);
      *(&v25 - 2) = (uint64_t)v26;
      sub_10006E630((uint64_t (*)(void))sub_1000707FC, 0, (void (*)(void))sub_100012D6C);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return;
    }
    if (qword_1000A3FA8 != -1) {
      swift_once();
    }
    sub_100004964(v5, (uint64_t)qword_1000AA320);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "CompanionLinkClient invalidated before activation completion", v21, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1000A3FA8 != -1) {
      swift_once();
    }
    sub_100004964(v5, (uint64_t)qword_1000AA320);
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v17, "CompanionLinkClient activated", v18, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v22 = v26;
}

unint64_t sub_1000707FC()
{
  return 0xD000000000000025;
}

Swift::Void __swiftcall CompanionLinkClient.cancel()()
{
  *(unsigned char *)(v0 + 24) = 1;
  [*(id *)(v0 + 16) invalidate];
}

uint64_t CompanionLinkClient.deinit()
{
  sub_100066DA4(v0 + 32);
  return v0;
}

uint64_t CompanionLinkClient.__deallocating_deinit()
{
  sub_100066DA4(v0 + 32);

  return _swift_deallocClassInstance(v0, 48, 7);
}

void sub_100070898()
{
}

id sub_1000708BC()
{
  return RapportStreamSession.session.getter();
}

uint64_t type metadata accessor for CompanionLinkClient()
{
  return self;
}

uint64_t sub_100070904(void *a1)
{
  id v2 = [a1 bundleIdentifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100070974()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000709AC()
{
  return sub_10006FEA8(v0, sub_10006F764);
}

uint64_t sub_1000709DC(uint64_t a1)
{
  return sub_100070048(a1, v1, (void (*)(uint64_t))sub_10006F8A4);
}

uint64_t sub_100070A0C(uint64_t a1)
{
  return sub_100070048(a1, v1, (void (*)(uint64_t))sub_10006FA10);
}

uint64_t sub_100070A3C(void *a1, unsigned int a2)
{
  return sub_10006FB7C(a1, a2);
}

uint64_t sub_100070A44()
{
  return sub_10006FEA8(v0, sub_10006FD68);
}

uint64_t sub_100070A74()
{
  return sub_10006FEA8(v0, sub_10006FF08);
}

uint64_t sub_100070AA4(uint64_t a1)
{
  return sub_100070048(a1, v1, (void (*)(uint64_t))sub_1000700BC);
}

uint64_t RapportStreamServer.__allocating_init(server:)()
{
  uint64_t v1 = sub_10006D3AC();
  RapportStreamServer.init(server:)(v0);
  return v1;
}

void *RapportStreamServer.init(server:)(void *a1)
{
  v1[4] = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for RapportStreamSession();
  v1[5] = Dictionary.init(dictionaryLiteral:)();
  v1[2] = a1;
  uint64_t v3 = sub_100067AB8();
  swift_weakInit();
  uint64_t v15 = sub_100070E24;
  uint64_t v16 = v3;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  id v13 = sub_10005A66C;
  uint64_t v14 = &unk_100098F08;
  uint64_t v4 = _Block_copy(&v11);
  id v5 = a1;
  swift_release();
  [v5 setInvalidationHandler:v4];
  _Block_release(v4);
  uint64_t v6 = sub_100067AB8();
  swift_weakInit();
  uint64_t v15 = sub_100070F48;
  uint64_t v16 = v6;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  id v13 = sub_1000710B0;
  uint64_t v14 = &unk_100098F30;
  uint64_t v7 = _Block_copy(&v11);
  swift_release();
  [v5 setStreamAcceptHandler:v7];
  _Block_release(v7);
  uint64_t v8 = sub_100067AB8();
  swift_weakInit();
  uint64_t v15 = sub_1000711EC;
  uint64_t v16 = v8;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  id v13 = sub_100071378;
  uint64_t v14 = &unk_100098F58;
  id v9 = _Block_copy(&v11);
  swift_release();
  [v5 setStreamPrepareHandlerEx:v9];

  _Block_release(v9);
  return v1;
}

uint64_t sub_100070D94()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070DCC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100070E44();
    return swift_release();
  }
  return result;
}

uint64_t sub_100070E24()
{
  return sub_100070DCC();
}

uint64_t sub_100070E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100070E3C()
{
  return swift_release();
}

uint64_t sub_100070E44()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100070ECC(void *a1, void (*a2)(void), uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100070F50(a1, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_100070F48(void *a1, void (*a2)(void), uint64_t a3)
{
  return sub_100070ECC(a1, a2, a3);
}

void sub_100070F50(void *a1, void (*a2)(void), uint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = sub_100071D40((uint64_t)a1);
  swift_endAccess();
  if (!v7)
  {
    type metadata accessor for RapportStreamSession();
    swift_allocObject();
    uint64_t v7 = RapportStreamSession.init(session:)(a1);
  }
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v8 = *(void *)(v3 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, v7, a2, a3, ObjectType, v8);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100052F30();
    id v10 = sub_1000661E0(-6714, 0xD00000000000001DLL, 0x8000000100080B00);
    a2();
    swift_release();
  }
}

void sub_1000710B0(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  id v5 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v5;
  swift_retain();
  id v6 = a2;
  v4();
  swift_release();
  swift_release();
}

uint64_t sub_100071168(void *a1, void *a2)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    char v4 = sub_1000711F4(a1, a2);
    swift_release();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1000711EC(void *a1, void *a2)
{
  return sub_100071168(a1, a2);
}

uint64_t sub_1000711F4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for RapportStreamSession();
  swift_allocObject();
  id v6 = a1;
  uint64_t v7 = RapportStreamSession.init(session:)(v6);
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v8 = *(void *)(v3 + 32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(v3, v7, ObjectType, v8);
    char v12 = v11;
    swift_unknownObjectRelease();
    swift_beginAccess();
    uint64_t v13 = swift_retain();
    sub_100071E20(v13, (uint64_t)v6, &qword_1000A47A0);
    swift_endAccess();
    if (v12)
    {
      if (a2)
      {
        swift_errorRetain();
        uint64_t v15 = (void *)_convertErrorToNSError(_:)();
        id v16 = v15;
        *a2 = v15;
        swift_release();
        sub_100071E98(v10, 1);
      }
      else
      {
        swift_release();
      }
      sub_100071E98(v10, 1);
      return 0;
    }
    else
    {
      swift_release();
      return v10 & 1;
    }
  }
  else
  {
    swift_release();
    return 1;
  }
}

uint64_t sub_100071378(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  char v5 = v3();
  swift_release();

  return v5 & 1;
}

uint64_t RapportStreamServer.__allocating_init()()
{
  [objc_allocWithZone((Class)RPStreamServer) init];
  uint64_t v1 = sub_10006D3AC();
  RapportStreamServer.init(server:)(v0);
  return v1;
}

double RapportStreamSession.messenger.getter@<D0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 16) messenger];
  if (v3)
  {
    *(void *)(a1 + 24) = &type metadata for AnyRapportMessageable;
    *(void *)(a1 + 32) = &protocol witness table for AnyRapportMessageable;
    *(void *)a1 = v3;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t RapportStreamServer.messenger.setter(uint64_t a1)
{
  id v3 = *(void **)(v1 + 16);
  sub_10007154C(a1, (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9)
  {
    uint64_t v5 = v10;
    sub_1000116FC(v8, v9);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    sub_1000136EC((uint64_t)v8);
  }
  else
  {
    sub_1000715B4((uint64_t)v8);
    uint64_t v6 = 0;
  }
  [v3 setMessenger:v6];
  swift_unknownObjectRelease();
  return sub_1000715B4(a1);
}

uint64_t sub_10007154C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8(&qword_1000A2F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000715B4(uint64_t a1)
{
  uint64_t v2 = sub_1000116B8(&qword_1000A2F58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*RapportStreamServer.messenger.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  RapportStreamSession.messenger.getter((uint64_t)v3);
  return sub_100071674;
}

void sub_100071674(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    sub_10007154C(*a1, (uint64_t)v2 + 40);
    RapportStreamServer.messenger.setter((uint64_t)v2 + 40);
    sub_1000715B4((uint64_t)v2);
  }
  else
  {
    RapportStreamServer.messenger.setter(*a1);
  }

  free(v2);
}

void RapportStreamServer.serviceType.setter(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(v2 + 16);
  if (a2)
  {
    id v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = 0;
  }
  [v3 setServiceType:v4];
}

void (*RapportStreamServer.serviceType.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RapportStreamServer.serviceType.getter();
  a1[1] = v3;
  return sub_1000717A8;
}

void sub_1000717A8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    RapportStreamServer.serviceType.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    RapportStreamServer.serviceType.setter(*a1, v2);
  }
}

uint64_t RapportStreamSession.streamFlags.getter()
{
  return [*(id *)(v0 + 16) streamFlags];
}

id RapportStreamServer.streamFlags.setter(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    sub_100071FE4();
    id result = (id)sub_100071FFC();
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void **)(v1 + 16);
    return [v3 setStreamFlags:a1];
  }
  return result;
}

id (*RapportStreamServer.streamFlags.modify(void *a1))(unint64_t *a1)
{
  a1[1] = v1;
  *a1 = [*(id *)(v1 + 16) streamFlags];
  return sub_100071904;
}

id sub_100071904(unint64_t *a1)
{
  return RapportStreamServer.streamFlags.setter(*a1);
}

uint64_t RapportStreamSession.streamQoS.getter()
{
  return (int)[*(id *)(v0 + 16) streamQoS];
}

uint64_t RapportStreamSession.streamQoS.setter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return (uint64_t)[*(id *)(v1 + 16) setStreamQoS:result];
  }
  __break(1u);
  return result;
}

uint64_t (*RapportStreamSession.streamQoS.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = (int)[*(id *)(v1 + 16) streamQoS];
  return sub_1000719DC;
}

uint64_t sub_1000719DC(uint64_t *a1)
{
  return RapportStreamSession.streamQoS.setter(*a1);
}

void RapportStreamServer.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10002451C;
  v5[3] = &unk_100098F80;
  id v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 activateWithCompletion:v4];
  _Block_release(v4);
}

uint64_t RapportStreamServer.description.getter()
{
  strcpy((char *)v21, "StreamServer");
  BYTE5(v21[1]) = 0;
  HIWORD(v21[1]) = -5120;
  v1._countAndFlagsBits = 0x3C204C46202CLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *(void **)(v0 + 16);
  sub_1000063C0([v2 streamFlags]);
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v5 = RPStreamQoSCopyDescription((int)[v2 streamQoS]);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x20536F51202CLL;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x3C204653202CLL;
  v11._object = (void *)0xE600000000000000;
  String.append(_:)(v11);
  sub_1000063C0([v2 streamFlags]);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = RapportStreamServer.serviceType.getter();
  if (v15)
  {
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 39;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x27205453202CLL;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21[0];
}

uint64_t sub_100071CB4()
{
  return RapportStreamServer.description.getter();
}

uint64_t type metadata accessor for RapportStreamServer()
{
  return self;
}

unint64_t sub_100071CFC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100040D0C(a1, v2);
}

uint64_t sub_100071D40(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_100071CFC(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v7 = *v1;
  *Swift::String v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_1000116B8(&qword_1000A47A0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(*(void *)(v11 + 56) + 8 * v5);
  type metadata accessor for RapportStreamSession();
  _NativeDictionary._delete(at:)();
  *uint64_t v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100071E14(uint64_t a1, uint64_t a2)
{
  return sub_100071E20(a1, a2, &qword_1000A4498);
}

uint64_t sub_100071E20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = sub_1000511F0();
  sub_100071EA4(v5, v6, v7, a3);
  void *v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100071E98(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_100071EA4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  Swift::String v10 = (void *)*v4;
  unint64_t v11 = sub_100071CFC(a2);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000116B8(a4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100071CFC(a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  os_log_type_t v20 = *v6;
  if ((v17 & 1) == 0) {
    return sub_100046924(v16, a2, a1, v20);
  }
  uint64_t v21 = v20[7];
  unint64_t result = swift_release();
  *(void *)(v21 + 8 * v16) = a1;
  return result;
}

uint64_t sub_100071F94()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100071FFC()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100072020()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000AA320);
  sub_100004964(v0, (uint64_t)qword_1000AA320);
  return Logger.init(subsystem:category:)();
}

uint64_t RapportStreamSession.__allocating_init(session:)()
{
  uint64_t v1 = sub_100067AD4();
  RapportStreamSession.init(session:)(v0);
  return v1;
}

uint64_t RapportStreamSession.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t RapportStreamSession.init(session:)(void *a1)
{
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 16) = a1;
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_1000724F4;
  uint64_t v19 = v2;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  char v17 = &unk_100098FF8;
  char v4 = _Block_copy(&v14);
  id v5 = a1;
  uint64_t v6 = swift_release();
  sub_1000698FC(v6, "setFlowControlWriteChangedHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_100072588;
  uint64_t v19 = (uint64_t)v4;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  char v17 = &unk_100099020;
  _Block_copy(&v14);
  uint64_t v7 = sub_100069914();
  sub_1000698FC(v7, "setInvalidationHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_100072640;
  uint64_t v19 = (uint64_t)v4;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  char v17 = &unk_100099048;
  _Block_copy(&v14);
  sub_100069914();
  RPStreamSessionSetDisconnectHandler(v5, v4);
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_100072784;
  uint64_t v19 = (uint64_t)v4;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10007288C;
  char v17 = &unk_100099070;
  _Block_copy(&v14);
  uint64_t v8 = sub_100069914();
  sub_1000698FC(v8, "setReceivedEventHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_100072A1C;
  uint64_t v19 = (uint64_t)v4;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_100072B38;
  char v17 = &unk_100099098;
  _Block_copy(&v14);
  uint64_t v9 = sub_100069914();
  sub_1000698FC(v9, "setReceivedRequestHandler:");
  _Block_release(v4);
  sub_100067AB8();
  sub_1000698E0();
  unint64_t v18 = sub_1000724F4;
  uint64_t v19 = (uint64_t)v4;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  char v17 = &unk_1000990C0;
  _Block_copy(&v14);
  uint64_t v10 = sub_100069914();
  sub_1000698FC(v10, "setStatusChangedHandler:");
  _Block_release(v4);
  uint64_t v11 = sub_100067AB8();
  swift_weakInit();
  unint64_t v18 = sub_100072D30;
  uint64_t v19 = v11;
  BOOL v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  unint64_t v16 = sub_10005A66C;
  char v17 = &unk_1000990E8;
  char v12 = _Block_copy(&v14);
  swift_release();
  [v5 setConnectionReadyHandler:v12];

  _Block_release(v12);
  return v1;
}

uint64_t sub_1000724BC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000724F4()
{
  return sub_100072C70();
}

uint64_t sub_100072510(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100072520()
{
  return swift_release();
}

uint64_t sub_100072528(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

uint64_t sub_100072588()
{
  return sub_100072528(v0, (void (*)(void))sub_1000725B8);
}

uint64_t sub_1000725B8()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100072640()
{
  return sub_100072528(v0, (void (*)(void))sub_100072670);
}

uint64_t sub_100072670()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000726F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10007278C(a1, a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t sub_100072784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000726F8(a1, a2, a3, a4);
}

uint64_t sub_10007278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v8 = *(void *)(v4 + 32);
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24);
    swift_bridgeObjectRetain();
    v11(v4, a3, v9, ObjectType, v8);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10007288C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a4) {
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v5(v6, v8, v9, a4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100072978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100072A24(a1, a2, a3, a4, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_100072A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100072978(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100072A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v12 = *(void *)(v6 + 32);
    uint64_t v16 = a3;
    if (a4) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    v15(v6, v16, v13, a5, a6, ObjectType, v12);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100072B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a4) {
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v12 = _Block_copy(a5);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  swift_retain();
  v7(v8, v10, v11, a4, sub_100015894, v13);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100072C70()
{
  sub_1000741C4();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100072CB8();
    return swift_release();
  }
  return result;
}

uint64_t sub_100072CB8()
{
  sub_1000741C4();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100072D30()
{
  return sub_100072528(v0, (void (*)(void))sub_100072D60);
}

uint64_t sub_100072D60()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0, ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RapportStreamSession.__allocating_init()()
{
  [objc_allocWithZone((Class)RPStreamSession) init];
  uint64_t v1 = sub_100067AD4();
  RapportStreamSession.init(session:)(v0);
  return v1;
}

uint64_t RapportStreamSession.deinit()
{
  RapportStreamSession.cancel()();

  sub_100066DA4(v0 + 24);
  return v0;
}

Swift::Void __swiftcall RapportStreamSession.cancel()()
{
  [*(id *)(v0 + 16) invalidate];
  swift_beginAccess();
  *(void *)(v0 + 32) = 0;
  swift_unknownObjectWeakAssign();
}

uint64_t RapportStreamSession.__deallocating_deinit()
{
  RapportStreamSession.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t RapportStreamSession.serviceType.getter()
{
  return sub_1000735CC((SEL *)&selRef_serviceType);
}

void RapportStreamSession.serviceType.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*RapportStreamSession.serviceType.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RapportStreamSession.serviceType.getter();
  a1[1] = v3;
  return sub_100072F4C;
}

uint64_t sub_100072F4C(uint64_t *a1, char a2)
{
  return sub_1000733A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))RapportStreamSession.serviceType.setter);
}

id RapportStreamSession.delegatedProcessUPID.getter()
{
  return [*(id *)(v0 + 16) delegatedProcessUPID];
}

id RapportStreamSession.delegatedProcessUPID.setter(uint64_t a1)
{
  return [*(id *)(v1 + 16) setDelegatedProcessUPID:a1];
}

id (*RapportStreamSession.delegatedProcessUPID.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = [v3 delegatedProcessUPID];
  return sub_100072FDC;
}

id sub_100072FDC(uint64_t a1)
{
  return [*(id *)(a1 + 8) setDelegatedProcessUPID:*(void *)a1];
}

id RapportStreamSession.flowControlWriteState.getter()
{
  return [*(id *)(v0 + 16) flowControlWriteState];
}

uint64_t RapportStreamSession.messenger.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  sub_10007154C(a1, (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9)
  {
    uint64_t v5 = v10;
    sub_1000116FC(v8, v9);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    sub_1000136EC((uint64_t)v8);
  }
  else
  {
    sub_10005A47C((uint64_t)v8, &qword_1000A2F58);
    uint64_t v6 = 0;
  }
  [v3 setMessenger:v6];
  swift_unknownObjectRelease();
  return sub_10005A47C(a1, &qword_1000A2F58);
}

void (*RapportStreamSession.messenger.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  RapportStreamSession.messenger.getter((uint64_t)v3);
  return sub_10007312C;
}

void sub_10007312C(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    sub_10007154C(*a1, (uint64_t)v2 + 40);
    RapportStreamSession.messenger.setter((uint64_t)v2 + 40);
    sub_10005A47C((uint64_t)v2, &qword_1000A2F58);
  }
  else
  {
    RapportStreamSession.messenger.setter(*a1);
  }

  free(v2);
}

uint64_t RapportStreamSession.nwClientID.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 16) nwClientID];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = type metadata accessor for UUID();

  return sub_100012E34(a1, v5, 1, v6);
}

id RapportStreamSession.streamFlags.setter(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    id v3 = *(void **)(v1 + 16);
    return [v3 setStreamFlags:a1];
  }
  return result;
}

id (*RapportStreamSession.streamFlags.modify(void *a1))(unint64_t *a1)
{
  a1[1] = v1;
  *a1 = [*(id *)(v1 + 16) streamFlags];
  return sub_10007330C;
}

id sub_10007330C(unint64_t *a1)
{
  return RapportStreamSession.streamFlags.setter(*a1);
}

uint64_t RapportStreamSession.streamID.getter()
{
  return sub_1000735CC((SEL *)&selRef_streamID);
}

void RapportStreamSession.streamID.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*RapportStreamSession.streamID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RapportStreamSession.streamID.getter();
  a1[1] = v3;
  return sub_100073390;
}

uint64_t sub_100073390(uint64_t *a1, char a2)
{
  return sub_1000733A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))RapportStreamSession.streamID.setter);
}

uint64_t sub_1000733A8(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);

  return swift_bridgeObjectRelease();
}

uint64_t RapportStreamSession.streamKey.getter()
{
  id v1 = [*(id *)(v0 + 16) streamKey];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id RapportStreamSession.streamSocket.getter()
{
  return [*(id *)(v0 + 16) streamSocket];
}

id RapportStreamSession.streamType.getter()
{
  return [*(id *)(v0 + 16) streamType];
}

id RapportStreamSession.streamType.setter(uint64_t a1)
{
  return [*(id *)(v1 + 16) setStreamType:a1];
}

id (*RapportStreamSession.streamType.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = [v3 streamType];
  return sub_100073518;
}

id sub_100073518(uint64_t a1, uint64_t a2)
{
  return sub_1000735A8(a1, a2, (SEL *)&selRef_setStreamType_);
}

id RapportStreamSession.trafficFlags.getter()
{
  return [*(id *)(v0 + 16) trafficFlags];
}

id RapportStreamSession.trafficFlags.setter(uint64_t a1)
{
  return [*(id *)(v1 + 16) setTrafficFlags:a1];
}

id (*RapportStreamSession.trafficFlags.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = [v3 trafficFlags];
  return sub_10007359C;
}

id sub_10007359C(uint64_t a1, uint64_t a2)
{
  return sub_1000735A8(a1, a2, (SEL *)&selRef_setTrafficFlags_);
}

id sub_1000735A8(uint64_t a1, uint64_t a2, SEL *a3)
{
  return [*(id *)a1 *a3:*(unsigned int *)(a1 + 8)];
}

uint64_t RapportStreamSession.trafficSessionID.getter()
{
  return sub_1000735CC((SEL *)&selRef_trafficSessionID);
}

uint64_t sub_1000735CC(SEL *a1)
{
  id v2 = [*(id *)(v1 + 16) *a1];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void RapportStreamSession.trafficSessionID.setter(uint64_t a1, uint64_t a2)
{
}

void sub_100073640(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = *(void **)(v3 + 16);
  if (a2)
  {
    id v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  [v5 *a3:v6];
}

uint64_t (*RapportStreamSession.trafficSessionID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = RapportStreamSession.trafficSessionID.getter();
  a1[1] = v3;
  return sub_100073700;
}

uint64_t sub_100073700(uint64_t *a1, char a2)
{
  return sub_1000733A8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))RapportStreamSession.trafficSessionID.setter);
}

void RapportStreamSession.activate(completion:)(uint64_t a1, uint64_t a2)
{
}

void RapportStreamSession.prepare(completion:)(uint64_t a1, uint64_t a2)
{
}

void sub_100073740(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v6 = *(void **)(v4 + 16);
  v8[4] = a1;
  v8[5] = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  void v8[2] = sub_10002451C;
  void v8[3] = a3;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  [v6 *a4:v7];
  _Block_release(v7);
}

void RapportStreamSession.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  uint64_t v10 = *(void **)(v6 + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10002451C;
    v13[3] = &unk_100099160;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  [v10 sendEventID:v11 event:v12.super.isa options:isa completion:a5];
  _Block_release(a5);
}

void RapportStreamSession.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void **)(v6 + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14[4] = a5;
  v14[5] = a6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100067478;
  void v14[3] = &unk_100099188;
  uint64_t v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  [v10 sendRequestID:v11 request:v12.super.isa options:isa responseHandler:v13];
  _Block_release(v13);
}

void sub_100073A84()
{
}

void sub_100073AA8(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
}

void sub_100073ACC(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
}

uint64_t RapportStreamSession.description.getter()
{
  sub_1000116B8(&qword_1000A2EC0);
  __chkstk_darwin();
  id v2 = (char *)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55[0] = 0;
  v55[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v55, "StreamSession ");
  HIBYTE(v55[1]) = -18;
  uint64_t v7 = *(void **)(v0 + 16);
  id v8 = RPStreamTypeCopyDescription([v7 streamType]);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0x3C204C46202CLL;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  sub_1000063C0([v7 streamFlags]);
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  sub_1000741E4();
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x3C204653202CLL;
  v54._object = (void *)0xE600000000000000;
  id v15 = RPStatusFlagsCopyDescription((unint64_t)[v7 statusFlags]);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  sub_1000741E4();
  swift_bridgeObjectRelease();
  id v21 = [v7 delegatedProcessUPID];
  if (v21)
  {
    v54._countAndFlagsBits = 0x205044202CLL;
    v54._object = (void *)0xE500000000000000;
    id v53 = v21;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    sub_1000741E4();
    swift_bridgeObjectRelease();
  }
  v54._countAndFlagsBits = 0x204346202CLL;
  v54._object = (void *)0xE500000000000000;
  id v23 = RPFlowControlStateCopyDescription([v7 flowControlWriteState]);
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  sub_1000741E4();
  swift_bridgeObjectRelease();
  RapportStreamSession.nwClientID.getter((uint64_t)v2);
  if (sub_100012E5C((uint64_t)v2, 1, v3) == 1)
  {
    sub_10005A47C((uint64_t)v2, &qword_1000A2EC0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    v54._countAndFlagsBits = 0x20574E202CLL;
    v54._object = (void *)0xE500000000000000;
    v28._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v29 = RapportStreamSession.serviceType.getter();
  if (v30)
  {
    sub_10007421C(*(Swift::String *)&v29, 1414733868);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 39;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    sub_100074200();
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = RapportStreamSession.streamID.getter();
  if (v33)
  {
    sub_10007421C(*(Swift::String *)&v32, 1145643052);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 39;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    sub_100074200();
    swift_bridgeObjectRelease();
  }
  unsigned int v35 = [v7 streamSocket];
  if (v35 != -1)
  {
    v54._countAndFlagsBits = 0x204446202CLL;
    v54._object = (void *)0xE500000000000000;
    LODWORD(v53) = v35;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    sub_100074200();
    swift_bridgeObjectRelease();
  }
  v54._countAndFlagsBits = 0x20536F51202CLL;
  v54._object = (void *)0xE600000000000000;
  id v37 = RPStreamQoSCopyDescription((int)[v7 streamQoS]);
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  sub_100074200();
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x3C204654202CLL;
  v54._object = (void *)0xE600000000000000;
  id v42 = CUTrafficFlagsCopyDescription([v7 trafficFlags]);
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 62;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  uint64_t v48 = RapportStreamSession.trafficSessionID.getter();
  if (v49)
  {
    v54._countAndFlagsBits = 0x272044495354202CLL;
    v54._object = (void *)0xE800000000000000;
    String.append(_:)(*(Swift::String *)&v48);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 39;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
  }
  return v55[0];
}

uint64_t sub_1000740F4()
{
  return RapportStreamSession.description.getter();
}

uint64_t type metadata accessor for RapportStreamSession()
{
  return self;
}

uint64_t sub_10007413C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000741C4()
{
  return swift_beginAccess();
}

void sub_1000741E4()
{
  uint64_t v2 = *(void *)(v0 - 112);
  uint64_t v3 = *(void *)(v0 - 104);
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_100074200()
{
  uint64_t v2 = *(void *)(v0 - 112);
  uint64_t v3 = *(void *)(v0 - 104);
  String.append(_:)(*(Swift::String *)&v2);
}

void sub_10007421C(Swift::String a1@<X1:X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 112) = a2 & 0xFFFF0000FFFFFFFFLL | 0x272000000000;
  *(void *)(v2 - 104) = 0xE600000000000000;
  String.append(_:)(a1);
}

uint64_t DarwinNotification.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t variable initialization expression of DarwinNotification.token()
{
  return 0xFFFFFFFFLL;
}

uint64_t DarwinNotification.token.getter()
{
  sub_100013AD0();
  return *(unsigned int *)(v0 + 32);
}

uint64_t DarwinNotification.handler.getter()
{
  sub_100013AD0();
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10004F82C(v1);
  return v1;
}

uint64_t DarwinNotification.handler.setter(uint64_t a1, uint64_t a2)
{
  sub_1000749F0();
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return sub_100012A1C(v5);
}

uint64_t (*DarwinNotification.handler.modify())()
{
  return j__swift_endAccess;
}

uint64_t DarwinNotification.__allocating_init(check:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  DarwinNotification.init(check:)(a1, a2);
  return v4;
}

uint64_t DarwinNotification.init(check:)(uint64_t a1, uint64_t a2)
{
  sub_1000749BC(a1, a2);
  uint64_t v4 = (const char *)(String.utf8CString.getter() + 32);
  sub_1000749D8();
  notify_register_check(v4, v2);
  swift_endAccess();
  swift_release();
  sub_100074440();
  return v3;
}

uint64_t sub_100074440()
{
  sub_100013AD0();
  int v1 = *(_DWORD *)(v0 + 32);
  uint64_t state64 = DarwinNotification.state.getter();
  notify_get_state(v1, &state64);
  return DarwinNotification.state.setter(state64);
}

uint64_t DarwinNotification.__allocating_init(dispatch:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  DarwinNotification.init(dispatch:queue:)(a1, a2, a3);
  return v6;
}

uint64_t DarwinNotification.init(dispatch:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1000749BC(a1, a2);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  v11[4] = sub_1000746A0;
  v11[5] = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_100074738;
  v11[3] = &unk_100099218;
  uint64_t v7 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  id v8 = a3;
  swift_release();
  uint64_t v9 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  sub_1000749D8();
  notify_register_dispatch((const char *)(v9 + 32), v3, v8, v7);
  swift_endAccess();
  swift_release();
  _Block_release(v7);

  sub_100074440();
  return v4;
}

uint64_t sub_100074668()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000746A0()
{
  sub_100013AD0();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    sub_100013AD0();
    uint64_t v2 = *(void (**)(uint64_t))(v1 + 40);
    if (v2)
    {
      sub_10004F82C(*(void *)(v1 + 40));
      uint64_t v3 = swift_release();
      v2(v3);
      return sub_100012A1C((uint64_t)v2);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100074738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10007478C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007479C()
{
  return swift_release();
}

uint64_t DarwinNotification.state.getter()
{
  sub_100013AD0();
  int v1 = *(_DWORD *)(v0 + 32);
  sub_1000749D8();
  notify_get_state(v1, (uint64_t *)(v0 + 56));
  swift_endAccess();
  return *(void *)(v0 + 56);
}

uint64_t DarwinNotification.state.setter(uint64_t a1)
{
  uint64_t result = sub_1000749F0();
  if (*(void *)(v1 + 56) != a1)
  {
    *(void *)(v1 + 56) = a1;
    sub_100013AD0();
    notify_set_state(*(_DWORD *)(v1 + 32), a1);
    uint64_t v4 = String.utf8CString.getter();
    notify_post((const char *)(v4 + 32));
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall DarwinNotification.cancel()()
{
  sub_1000749F0();
  int v1 = *(_DWORD *)(v0 + 32);
  if (v1 != -1)
  {
    notify_cancel(v1);
    *(_DWORD *)(v0 + 32) = -1;
  }
}

uint64_t DarwinNotification.deinit()
{
  DarwinNotification.cancel()();
  swift_bridgeObjectRelease();
  sub_100012A1C(*(void *)(v0 + 40));
  return v0;
}

uint64_t DarwinNotification.__deallocating_deinit()
{
  DarwinNotification.deinit();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t (*DarwinNotification.state.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = DarwinNotification.state.getter();
  return sub_100074974;
}

uint64_t sub_100074974(uint64_t *a1)
{
  return DarwinNotification.state.setter(*a1);
}

uint64_t type metadata accessor for DarwinNotification()
{
  return self;
}

uint64_t sub_1000749BC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + 32) = -1;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t sub_1000749D8()
{
  return swift_beginAccess();
}

uint64_t sub_1000749F0()
{
  return swift_beginAccess();
}

uint64_t static DispatchTimeInterval.seconds(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 < 0.0) {
    goto LABEL_39;
  }
  if (a2 >= 9223372040.0)
  {
    if (a2 >= 9.22337204e12)
    {
      if (a2 >= 9.22337204e15)
      {
        sub_10007653C();
        if (v6)
        {
          sub_10007654C();
          if (v4)
          {
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          if (v12 <= -9.22337204e18)
          {
LABEL_38:
            __break(1u);
LABEL_39:
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          sub_100076850(v12);
          uint64_t v7 = (unsigned int *)&enum case for DispatchTimeInterval.seconds(_:);
        }
        else
        {
          uint64_t v7 = (unsigned int *)&enum case for DispatchTimeInterval.never(_:);
        }
      }
      else
      {
        sub_10007654C();
        if (v4)
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v10 <= -9.22337204e18)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        sub_10007653C();
        if (!v6) {
          goto LABEL_36;
        }
        sub_100076850(v11);
        uint64_t v7 = (unsigned int *)&enum case for DispatchTimeInterval.milliseconds(_:);
      }
    }
    else
    {
      sub_10007654C();
      if (v4)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v8 <= -9.22337204e18)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      sub_10007653C();
      if (!v6) {
        goto LABEL_33;
      }
      sub_100076850(v9);
      uint64_t v7 = (unsigned int *)&enum case for DispatchTimeInterval.microseconds(_:);
    }
    goto LABEL_25;
  }
  sub_10007654C();
  if (v4)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_10007653C();
  if (!v6) {
    goto LABEL_30;
  }
  sub_100076850(v5);
  uint64_t v7 = (unsigned int *)&enum case for DispatchTimeInterval.nanoseconds(_:);
LABEL_25:
  uint64_t v13 = *v7;
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  id v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104);

  return v15(a1, v13, v14);
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:)(Swift::Double a1)
{
  sub_1000763AC();
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  sub_100013930();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1000765C0();
  __chkstk_darwin(v7);
  sub_100076810();
  sub_100013930();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1000765A4();
  __chkstk_darwin(v11);
  sub_1000767F0();
  + infix(_:_:)();
  double v12 = *(void (**)(void))(v9 + 8);
  sub_100076500();
  v12();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v2, enum case for DispatchTimeInterval.never(_:), v3);
  sub_10005F3E4(v1);
  sub_100076664();
  uint64_t v13 = *(void (**)(void))(v5 + 8);
  sub_10007655C();
  v13();
  sub_10007655C();
  v13();
  sub_100076500();
  v12();
  sub_1000763C8();
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:interval:)(Swift::Double _, Swift::Double interval)
{
  sub_1000763AC();
  double v5 = v4;
  type metadata accessor for DispatchTimeInterval();
  sub_100013930();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1000765C0();
  __chkstk_darwin(v9);
  sub_100076810();
  sub_100013930();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1000765A4();
  __chkstk_darwin(v13);
  sub_1000767F0();
  + infix(_:_:)();
  uint64_t v14 = *(void (**)(void))(v11 + 8);
  sub_100076500();
  v14();
  static DispatchTimeInterval.seconds(_:)(v3, v5);
  sub_10005F3E4(v2);
  sub_100076664();
  id v15 = *(void (**)(void))(v7 + 8);
  sub_10007655C();
  v15();
  sub_10007655C();
  v15();
  sub_100076500();
  v14();
  sub_1000763C8();
}

uint64_t sub_100074EC0()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  sub_100013930();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  double v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v0);
  uint64_t v6 = static OS_dispatch_queue.global(qos:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  static OS_dispatch_queue.defaultPriority = v6;
  return result;
}

uint64_t *OS_dispatch_queue.defaultPriority.unsafeMutableAddressor()
{
  if (qword_1000AA190 != -1) {
    swift_once();
  }
  return &static OS_dispatch_queue.defaultPriority;
}

id static OS_dispatch_queue.defaultPriority.getter()
{
  if (qword_1000AA190 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static OS_dispatch_queue.defaultPriority;

  return v0;
}

void OS_dispatch_queue.after(_:closure:)()
{
  sub_1000763AC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  uint64_t v26 = v5;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  sub_100013930();
  uint64_t v24 = v10;
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  sub_100013930();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  Swift::String v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v21 = (char *)&v23 - v20;
  static DispatchTime.now()();
  + infix(_:_:)();
  id v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v13);
  v28[4] = v3;
  v28[5] = v1;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256;
  void v28[2] = sub_10005A66C;
  void v28[3] = &unk_1000992C0;
  Swift::String v22 = _Block_copy(v28);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  Swift::String v27 = _swiftEmptyArrayStorage;
  sub_1000756B8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  v23(v21, v13);
  swift_release();
  sub_1000763C8();
}

uint64_t sub_100075334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100075344()
{
  return swift_release();
}

void OS_dispatch_queue.once(_:closure:)()
{
  sub_1000763AC();
  sub_1000766A0(v1, v2);
  sub_100013930();
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  Swift::String v46 = (uint64_t *)((char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000510F0();
  uint64_t v7 = __chkstk_darwin(v6);
  sub_1000766F4(v7, v8, v9, v10, v11, v12, v13, v14, v45[0]);
  v45[9] = type metadata accessor for DispatchTime();
  sub_100013930();
  uint64_t v49 = v15;
  __chkstk_darwin(v16);
  sub_10007638C(v17, v45[0]);
  uint64_t v19 = __chkstk_darwin(v18);
  sub_10007640C(v19, v20, v21, v22, v23, v24, v25, v26, v45[0]);
  sub_100013930();
  uint64_t v45[3] = v28;
  v45[4] = v27;
  __chkstk_darwin(v27);
  v45[2] = sub_1000763E4();
  sub_100013930();
  __chkstk_darwin(v29);
  sub_1000765DC();
  sub_100013930();
  __chkstk_darwin(v30);
  sub_100013D1C();
  sub_100004928(0, &qword_1000A3E28);
  v50[0] = _swiftEmptyArrayStorage;
  sub_1000756B8(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  sub_100076510();
  sub_100076830();
  uint64_t v31 = sub_10007662C();
  v32(v31);
  swift_getObjectType();
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v45[6];
  v33[2] = v45[5];
  uint64_t v33[3] = v34;
  v33[4] = &qword_1000A3E38;
  v50[4] = sub_100075704;
  v50[5] = v33;
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 1107296256;
  v50[2] = sub_10005A66C;
  v50[3] = &unk_100099310;
  unsigned int v35 = _Block_copy(v50);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  sub_100076768();
  _Block_release(v35);
  uint64_t v36 = sub_100076430();
  v37(v36);
  uint64_t v38 = sub_1000766C4();
  v39(v38);
  swift_release();
  static DispatchTime.now()();
  sub_1000767BC();
  + infix(_:_:)();
  uint64_t v40 = sub_10007648C();
  ((void (*)(uint64_t))v35)(v40);
  uint64_t v41 = sub_100076444();
  v42(v41);
  sub_10005F3E4(v46);
  sub_100076588();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v43 = *(void (**)(void))(v0 + 8);
  sub_1000764E0();
  v43();
  sub_1000764E0();
  v43();
  uint64_t v44 = sub_10007670C();
  ((void (*)(uint64_t))v35)(v44);
  OS_dispatch_source.resume()();
  sub_10007675C();
  sub_1000763C8();
}

uint64_t sub_1000756B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OS_dispatch_queue.wallOnce(_:closure:)()
{
  sub_1000763AC();
  sub_1000766A0(v1, v2);
  sub_100013930();
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  Swift::String v46 = (uint64_t *)((char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000510F0();
  uint64_t v7 = __chkstk_darwin(v6);
  sub_1000766F4(v7, v8, v9, v10, v11, v12, v13, v14, v45[0]);
  v45[9] = type metadata accessor for DispatchWallTime();
  sub_100013930();
  uint64_t v49 = v15;
  __chkstk_darwin(v16);
  sub_10007638C(v17, v45[0]);
  uint64_t v19 = __chkstk_darwin(v18);
  sub_10007640C(v19, v20, v21, v22, v23, v24, v25, v26, v45[0]);
  sub_100013930();
  uint64_t v45[3] = v28;
  v45[4] = v27;
  __chkstk_darwin(v27);
  v45[2] = sub_1000763E4();
  sub_100013930();
  __chkstk_darwin(v29);
  sub_1000765DC();
  sub_100013930();
  __chkstk_darwin(v30);
  sub_100013D1C();
  sub_100004928(0, &qword_1000A3E28);
  v50[0] = _swiftEmptyArrayStorage;
  sub_1000756B8(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  sub_100076510();
  sub_100076830();
  uint64_t v31 = sub_10007662C();
  v32(v31);
  swift_getObjectType();
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v45[6];
  v33[2] = v45[5];
  uint64_t v33[3] = v34;
  v33[4] = &qword_1000A3E38;
  v50[4] = sub_100075704;
  v50[5] = v33;
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 1107296256;
  v50[2] = sub_10005A66C;
  v50[3] = &unk_100099360;
  unsigned int v35 = _Block_copy(v50);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  sub_100076768();
  _Block_release(v35);
  uint64_t v36 = sub_100076430();
  v37(v36);
  uint64_t v38 = sub_1000766C4();
  v39(v38);
  swift_release();
  static DispatchWallTime.now()();
  sub_1000767BC();
  + infix(_:_:)();
  uint64_t v40 = sub_10007648C();
  ((void (*)(uint64_t))v35)(v40);
  uint64_t v41 = sub_100076444();
  v42(v41);
  sub_10005F3E4(v46);
  sub_100076588();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
  uint64_t v43 = *(void (**)(void))(v0 + 8);
  sub_1000764E0();
  v43();
  sub_1000764E0();
  v43();
  uint64_t v44 = sub_10007670C();
  ((void (*)(uint64_t))v35)(v44);
  OS_dispatch_source.resume()();
  sub_10007675C();
  sub_1000763C8();
}

uint64_t sub_100075A78()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100075AB8()
{
  (*(void (**)(void))(v0 + 16))();
  swift_getObjectType();
  OS_dispatch_source.cancel()();
}

void OS_dispatch_queue.timer(_:interval:closure:)()
{
  sub_1000763AC();
  sub_100076724(v1, v2);
  sub_100013930();
  uint64_t v44 = v4;
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t *)((char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000510F0();
  uint64_t v7 = __chkstk_darwin(v6);
  sub_1000766DC(v7, v8, v9, v10, v11, v12, v13, v14, v42[0]);
  type metadata accessor for DispatchTime();
  sub_100013930();
  v42[9] = v16;
  v42[10] = v15;
  __chkstk_darwin(v15);
  sub_10007638C(v17, v42[0]);
  uint64_t v19 = __chkstk_darwin(v18);
  sub_10007640C(v19, v20, v21, v22, v23, v24, v25, v26, v42[0]);
  sub_100013930();
  v42[2] = v28;
  v42[3] = v27;
  __chkstk_darwin(v27);
  v42[1] = sub_1000763E4();
  sub_100013930();
  v42[0] = v29;
  __chkstk_darwin(v30);
  sub_100076604();
  sub_100013930();
  __chkstk_darwin(v31);
  sub_100013D1C();
  sub_100004928(0, &qword_1000A3E28);
  v46[0] = _swiftEmptyArrayStorage;
  sub_1000756B8(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  sub_1000764B0();
  static OS_dispatch_source.makeTimerSource(flags:queue:)();
  uint64_t v32 = sub_100076648();
  v33(v32);
  swift_getObjectType();
  v46[4] = v42[5];
  v46[5] = v42[6];
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 1107296256;
  v46[2] = sub_10005A66C;
  v46[3] = &unk_100099388;
  uint64_t v34 = _Block_copy(v46);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  sub_1000767D0();
  _Block_release(v34);
  uint64_t v35 = sub_100076430();
  v36(v35);
  uint64_t v37 = sub_100076468();
  v38(v37);
  swift_release();
  static DispatchTime.now()();
  sub_1000767A8();
  + infix(_:_:)();
  uint64_t v39 = sub_10007656C();
  v0(v39);
  sub_100076788();
  sub_10005F3E4(v43);
  sub_100076688();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v40 = *(void (**)(void))(v44 + 8);
  sub_1000764F0();
  v40();
  sub_1000764F0();
  v40();
  uint64_t v41 = sub_100076748();
  v0(v41);
  OS_dispatch_source.resume()();
  sub_10007675C();
  sub_1000763C8();
}

void OS_dispatch_queue.wallTimer(_:interval:closure:)()
{
  sub_1000763AC();
  sub_100076724(v1, v2);
  sub_100013930();
  uint64_t v44 = v4;
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t *)((char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000510F0();
  uint64_t v7 = __chkstk_darwin(v6);
  sub_1000766DC(v7, v8, v9, v10, v11, v12, v13, v14, v42[0]);
  type metadata accessor for DispatchWallTime();
  sub_100013930();
  v42[9] = v16;
  v42[10] = v15;
  __chkstk_darwin(v15);
  sub_10007638C(v17, v42[0]);
  uint64_t v19 = __chkstk_darwin(v18);
  sub_10007640C(v19, v20, v21, v22, v23, v24, v25, v26, v42[0]);
  sub_100013930();
  v42[2] = v28;
  v42[3] = v27;
  __chkstk_darwin(v27);
  v42[1] = sub_1000763E4();
  sub_100013930();
  v42[0] = v29;
  __chkstk_darwin(v30);
  sub_100076604();
  sub_100013930();
  __chkstk_darwin(v31);
  sub_100013D1C();
  sub_100004928(0, &qword_1000A3E28);
  v46[0] = _swiftEmptyArrayStorage;
  sub_1000756B8(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  sub_1000764B0();
  static OS_dispatch_source.makeTimerSource(flags:queue:)();
  uint64_t v32 = sub_100076648();
  v33(v32);
  swift_getObjectType();
  v46[4] = v42[5];
  v46[5] = v42[6];
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 1107296256;
  v46[2] = sub_10005A66C;
  v46[3] = &unk_1000993B0;
  uint64_t v34 = _Block_copy(v46);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  sub_1000767D0();
  _Block_release(v34);
  uint64_t v35 = sub_100076430();
  v36(v35);
  uint64_t v37 = sub_100076468();
  v38(v37);
  swift_release();
  static DispatchWallTime.now()();
  sub_1000767A8();
  + infix(_:_:)();
  uint64_t v39 = sub_10007656C();
  v0(v39);
  sub_100076788();
  sub_10005F3E4(v43);
  sub_100076688();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
  uint64_t v40 = *(void (**)(void))(v44 + 8);
  sub_1000764F0();
  v40();
  sub_1000764F0();
  v40();
  uint64_t v41 = sub_100076748();
  v0(v41);
  OS_dispatch_source.resume()();
  sub_10007675C();
  sub_1000763C8();
}

uint64_t OS_dispatch_semaphore.wait(_:)()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  sub_100013930();
  uint64_t v2 = v1;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v6, v0);
  uint64_t v10 = OS_dispatch_semaphore.wait(timeout:)() & 1;
  v9(v8, v0);
  return v10;
}

uint64_t static OS_dispatch_source.makeSignalSourceIgnored(signal:queue:)(int a1)
{
  uint64_t v2 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(a1, v2);
  sub_100004928(0, &qword_1000A3E28);
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

double OS_dispatch_source_data_replace.doubleData.getter()
{
  return COERCE_DOUBLE(OS_dispatch_source.data.getter());
}

void OS_dispatch_source_data_replace.doubleData.setter(double a1)
{
}

void (*OS_dispatch_source_data_replace.doubleData.modify(uint64_t *a1, uint64_t a2))(Swift::UInt *a1)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = OS_dispatch_source.data.getter();
  return sub_100076344;
}

void sub_100076344(Swift::UInt *a1)
{
}

void sub_10007638C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000763E4()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10007640C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 216) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_100076430()
{
  return v0;
}

uint64_t sub_100076444()
{
  return *(void *)(v0 - 192);
}

uint64_t sub_100076468()
{
  return v0;
}

uint64_t sub_10007648C()
{
  *(void *)(v1 - 160) += 8;
  return v0;
}

uint64_t sub_1000764B0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100076510()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10007656C()
{
  return v0;
}

uint64_t sub_100076588()
{
  return v0;
}

uint64_t sub_1000765DC()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t sub_100076604()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t sub_10007662C()
{
  return v0;
}

uint64_t sub_100076648()
{
  return v0;
}

uint64_t sub_100076664()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t sub_100076688()
{
  return v0;
}

uint64_t sub_1000766A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 - 264) = v2;
  *(void *)(v3 - 232) = a1;
  *(void *)(v3 - 224) = a2;
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t sub_1000766C4()
{
  return v0;
}

uint64_t sub_1000766DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 184) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_1000766F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 192) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_10007670C()
{
  return v0;
}

uint64_t sub_100076724(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 - 240) = v2;
  *(void *)(v3 - 232) = a1;
  *(void *)(v3 - 224) = a2;
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t sub_100076748()
{
  return v0;
}

uint64_t sub_10007675C()
{
  return v0;
}

uint64_t sub_100076768()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t sub_100076788()
{
  uint64_t v3 = *(void *)(v0 - 184);
  return static DispatchTimeInterval.seconds(_:)(v3, v2);
}

double sub_1000767A8()
{
  return v0;
}

double sub_1000767BC()
{
  return v0;
}

uint64_t sub_1000767D0()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t sub_1000767F0()
{
  return static DispatchTime.now()();
}

uint64_t sub_100076810()
{
  return type metadata accessor for DispatchTime();
}

uint64_t sub_100076830()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

void sub_100076850(double a1)
{
  *uint64_t v1 = (uint64_t)a1;
}

void ClassHashable.hash(into:)()
{
  Hasher._combine(_:)(v0);
}

uint64_t sub_100076888()
{
  return 0;
}

uint64_t sub_1000768F8()
{
  unsigned int v1 = *(_DWORD *)(v0 + 24);
  if (*(unsigned char *)(v0 + 1) != 30 || v1 == 0) {
    return 0;
  }
  uint64_t v4 = (char *)swift_slowAlloc();
  if (if_indextoname(v1, v4)) {
    uint64_t v3 = String.init(cString:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t variable initialization expression of Domain.result()
{
  return 0;
}

uint64_t variable initialization expression of Domain.peer@<X0>(uint64_t a1@<X8>)
{
  sub_100076A08((uint64_t)v3);
  return sub_100076A28((uint64_t)v3, a1);
}

double sub_100076A08(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_100076A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000116B8((uint64_t *)&unk_1000A4920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *variable initialization expression of Domain.completions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of Clock.masterIdentifier()
{
  return TSNullgPTPClockIdentity;
}

uint64_t sub_100076ABC()
{
  uint64_t v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  sub_10007A8E0();
  v1._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return v4;
}

id sub_100076B50()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for TimeSyncManager()) init];
  qword_1000A4930 = (uint64_t)result;
  return result;
}

id sub_100076B84()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Swift::String v2 = &v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation];
  *(void *)Swift::String v2 = 0;
  v2[8] = -1;
  *(void *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_clocks] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions] = _swiftEmptyArrayStorage;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100076C18()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000499C(v0, qword_1000A4938);
  sub_100004964(v0, (uint64_t)qword_1000A4938);
  return Logger.init(subsystem:category:)();
}

BOOL sub_100076C90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
  swift_beginAccess();
  swift_retain();
  sub_10007A2E0((uint64_t *)&unk_1000A4B80);
  uint64_t v7 = *(char **)(*v6 + 16);
  sub_10007A33C(v7, (uint64_t *)&unk_1000A4B80);
  uint64_t v8 = *v6;
  *(void *)(v8 + 16) = v7 + 1;
  uint64_t v9 = v8 + 16 * (void)v7;
  *(void *)(v9 + 32) = sub_10007A640;
  *(void *)(v9 + 40) = v5;
  swift_endAccess();
  return sub_100076D6C();
}

BOOL sub_100076D6C()
{
  int v1 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation
                          + 8);
  if (v1 != 255)
  {
    uint64_t v2 = *(void **)(v0
                  + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
    uint64_t v3 = (uint64_t *)(v0
                   + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
    swift_beginAccess();
    uint64_t v4 = *v3;
    uint64_t *v3 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007A798(v2, v1);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = v4 + 40;
      do
      {
        uint64_t v7 = *(void (**)(void **))(v6 - 8);
        uint64_t v9 = v2;
        char v10 = v1 & 1;
        swift_retain();
        v7(&v9);
        swift_release();
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    sub_10007A708(v2, v1);
    swift_bridgeObjectRelease();
  }
  return v1 != 255;
}

void sub_100076E60(uint64_t a1, uint64_t a2)
{
  sub_100076C90(a1, a2);
  if (!sub_100076D6C())
  {
    if (qword_1000A4918 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100004964(v2, (uint64_t)qword_1000A4938);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Activating TimeSync", v5, 2u);
      swift_slowDealloc();
    }

    sub_100076F68();
  }
}

void sub_100076F68()
{
  int v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  v5[4] = sub_10007A72C;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10005A66C;
  v5[3] = &unk_100099618;
  uint64_t v3 = _Block_copy(v5);
  id v4 = v0;
  swift_release();
  [v1 notifyWhenClockManagerIsAvailable:v3];
  _Block_release(v3);
}

void sub_10007704C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4918 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100004964(v2, (uint64_t)qword_1000A4938);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "TSClockManager is Available", v9, 2u);
    swift_slowDealloc();
  }

  id v10 = [self sharedClockManager];
  [v10 addClient:a1];
  aBlock[0] = 0;
  unsigned int v11 = [v10 addgPTPServicesWithError:aBlock];
  id v12 = aBlock[0];
  if (v11)
  {
    uint64_t v13 = self;
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a1;
    aBlock[4] = sub_10007A734;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10005A66C;
    aBlock[3] = &unk_100099668;
    uint64_t v15 = _Block_copy(aBlock);
    id v16 = v12;
    id v17 = a1;
    swift_release();
    [v13 notifyWhengPTPManagerIsAvailable:v15];
    _Block_release(v15);
  }
  else
  {
    id v18 = aBlock[0];
    uint64_t v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    __chkstk_darwin(v20);
    aBlock[-2] = v19;
    sub_10006E630(sub_10007780C, 0, (void (*)(void))sub_100012D6C);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_errorRetain();
    sub_100077520(v19, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_1000773E4()
{
  if (qword_1000A4918 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100004964(v0, (uint64_t)qword_1000A4938);
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "gPTPManager is Available", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self sharedgPTPManager];
  id v5 = v4;
  sub_100077520(v4, 0);
}

uint64_t sub_100077520(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unsigned int v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  id v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v2;
  *(void *)(v13 + 24) = a1;
  char v14 = a2 & 1;
  *(unsigned char *)(v13 + 32) = a2 & 1;
  aBlock[4] = sub_10007A780;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_1000996B8;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v3;
  sub_10007A78C(a1, v14);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000756B8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v18);
}

uint64_t sub_10007780C()
{
  return 0x636E7953656D6954;
}

BOOL sub_100077830(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  id v5 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(void *)uint64_t v4 = a2;
  unsigned __int8 v6 = *(unsigned char *)(v4 + 8);
  char v7 = a3 & 1;
  *(unsigned char *)(v4 + 8) = a3 & 1;
  sub_10007A708(v5, v6);
  sub_10007A78C(a2, v7);
  return sub_100076D6C();
}

id sub_100077890()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10007792C()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4918 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100004964(v9, (uint64_t)qword_1000A4938);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "TimeSync Connection Interrupted", v12, 2u);
    swift_slowDealloc();
  }

  sub_100004928(0, (unint64_t *)&qword_1000A1930);
  uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  aBlock[4] = sub_10007A6E8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_1000995C8;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000756B8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000116B8((uint64_t *)&unk_1000A21E0);
  sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v19);
}

void sub_100077CAC(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(void *)uint64_t v1 = 0;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(v1 + 8) = -1;
  sub_10007A708(v2, v3);
  sub_100076F68();
}

uint64_t sub_100077D5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4918 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100004964(v4, (uint64_t)qword_1000A4938);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v10 = __chkstk_darwin(v9);
  *(&v16 - 2) = v11;
  __chkstk_darwin(v10);
  *(&v16 - 2) = a1;
  sub_10006E630(sub_10007A8D8, v12, (void (*)(void))sub_100013904);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  int v14 = *(unsigned __int8 *)(v2 + 24);
  if (v14 == 255 || (v14 & 1) == 0)
  {
    uint64_t v15 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = a1;
    *(unsigned char *)(v2 + 24) = 1;
    sub_100078328(v15, v14);
    swift_errorRetain();
    return sub_100077F54();
  }
  return result;
}

BOOL sub_100077F54()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    swift_beginAccess();
    uint64_t v3 = *(void *)(v0 + 168);
    *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
    sub_10007A92C(v2, v1);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = v3 + 40;
      do
      {
        uint64_t v6 = *(void (**)(uint64_t *))(v5 - 8);
        uint64_t v8 = v2;
        char v9 = v1 & 1;
        swift_retain();
        v6(&v8);
        swift_release();
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    sub_100078328(v2, v1);
    swift_bridgeObjectRelease();
  }
  return v1 != 255;
}

uint64_t Domain.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Domain.init()();
  return v0;
}

uint64_t Domain.init()()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = -1;
  sub_100076A08((uint64_t)v2);
  sub_100076A28((uint64_t)v2, v0 + 32);
  *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t Domain.deinit()
{
  Domain.deallocate()();
  sub_100078328(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Void __swiftcall Domain.deallocate()()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 24);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4 != TSNullClockIdentifier)
    {
      sub_100012D0C(*(void *)(v0 + 16), 0);
      if (qword_1000A4918 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100004964(v5, (uint64_t)qword_1000A4938);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%llx: Deallocating", v8, 0xCu);
        swift_slowDealloc();
      }

      if (qword_1000A4910 != -1) {
        swift_once();
      }
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v1;
      *(void *)(v9 + 24) = v4;
      swift_retain();
      sub_100076E60((uint64_t)sub_100078DA0, v9);
      swift_release();
      sub_100078328(v3, v2);
    }
  }
  sub_100004928(0, (unint64_t *)&qword_1000A17C0);
  id v10 = sub_10007A9C8(-536870212, 0, 0);
  uint64_t v11 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = v10;
  unsigned __int8 v12 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(v1 + 24) = 1;
  sub_100078328(v11, v12);
}

uint64_t sub_100078328(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100012D18(result, a2 & 1);
  }
  return result;
}

uint64_t Domain.__deallocating_deinit()
{
  Domain.deinit();

  return _swift_deallocClassInstance(v0, 176, 7);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Domain.bind(peer:)(Swift::String peer)
{
  memset(v2, 0, sizeof(v2));
  sub_100078418();
  if (!v1)
  {
    memcpy(__dst, v2, sizeof(__dst));
    sub_100078510(__dst);
  }
}

uint64_t sub_100078418()
{
  String.utf8CString.getter();
  int v0 = StringToSockAddr();
  swift_release();
  uint64_t result = noErr.getter();
  if (v0 != result)
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    sub_100021EC8(v0, 0, 0);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100078510(const void *a1)
{
  sub_100076A28(v1 + 32, (uint64_t)v5);
  sub_100076A28((uint64_t)v5, (uint64_t)v6);
  if (sub_10007A5F4((uint64_t)v6) == 1)
  {
    memcpy(__dst, a1, 0x80uLL);
    sub_10007A944((uint64_t)__dst);
    sub_100076A28((uint64_t)__dst, v1 + 32);
    return sub_100078630();
  }
  else
  {
    sub_100004928(0, (unint64_t *)&qword_1000A17C0);
    sub_10007A9C8(-536870212, 0, 0);
    return swift_willThrow();
  }
}

BOOL Domain.isBound.getter()
{
  sub_100076A28(v0 + 32, (uint64_t)v2);
  return sub_10007A5F4((uint64_t)v2) == 0;
}

uint64_t sub_100078630()
{
  uint64_t result = sub_100077F54();
  if ((result & 1) == 0)
  {
    sub_100076A28(v0 + 32, (uint64_t)v10);
    sub_100076A28((uint64_t)v10, (uint64_t)__src);
    uint64_t result = sub_10007A5F4((uint64_t)__src);
    if (result != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      if (qword_1000A4918 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_100004964(v2, (uint64_t)qword_1000A4938);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136446210;
        uint64_t v6 = sub_10005A4F8();
        sub_100017070((uint64_t)v6, v7, &v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Allocating", v5, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (qword_1000A4910 != -1) {
        swift_once();
      }
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v0;
      memcpy((void *)(v8 + 24), __dst, 0x80uLL);
      swift_retain();
      sub_100076E60((uint64_t)sub_10007A880, v8);
      return swift_release();
    }
  }
  return result;
}

uint64_t Domain.allocate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  sub_10007A2E0(&qword_1000A4B70);
  uint64_t v6 = *(char **)(*(void *)(v2 + 168) + 16);
  sub_10007A33C(v6, &qword_1000A4B70);
  uint64_t v7 = *(void *)(v2 + 168);
  *(void *)(v7 + 16) = v6 + 1;
  uint64_t v8 = v7 + 16 * (void)v6;
  *(void *)(v8 + 32) = sub_10007A640;
  *(void *)(v8 + 40) = v5;
  swift_endAccess();
  return sub_100078630();
}

void sub_100078958(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    swift_errorRetain();
    if (qword_1000A4918 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_100004964(v7, (uint64_t)qword_1000A4938);
    uint64_t v17 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
    uint64_t v18 = __chkstk_darwin(v17);
    *(void *)&v26[-16] = a4;
    __chkstk_darwin(v18);
    *(void *)&v26[-16] = a1;
    sub_10006E630(sub_10007A9B4, v19, (void (*)(void))sub_100013904);
    sub_10007A720(a1, 1);
    goto LABEL_14;
  }
  id v27 = 0;
  if (([a1 removePTPInstanceWithIdentifier:a4 error:&v27] & 1) == 0)
  {
    id v20 = v27;
    uint64_t v21 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1000A4918 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_100004964(v7, (uint64_t)qword_1000A4938);
    uint64_t v23 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, v22, v7);
    uint64_t v24 = __chkstk_darwin(v23);
    *(void *)&v26[-16] = a4;
    __chkstk_darwin(v24);
    *(void *)&v26[-16] = v21;
    sub_10006E630(sub_10007A9B4, v25, (void (*)(void))sub_100013904);
    sub_10007A720(a1, 0);
    swift_errorRelease();
LABEL_14:
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  uint64_t v11 = qword_1000A4918;
  id v12 = v27;
  if (v11 != -1) {
    swift_once();
  }
  sub_100004964(v7, (uint64_t)qword_1000A4938);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    id v27 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%llx: Deallocated", v15, 0xCu);
    swift_slowDealloc();
  }
  sub_10007A720(a1, 0);
}

uint64_t sub_100078D70()
{
  swift_release();
  uint64_t v0 = sub_10007A9B8();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_100078DA0(void *a1, char a2)
{
  sub_100078958(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_100078DAC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100077D5C((uint64_t)a1);
    sub_10007A720(a1, 1);
  }
  else
  {
    id v10 = 0;
    uint64_t v11 = TSNullClockIdentifier;
    if ([a1 addPTPInstance:&v11 error:&v10])
    {
      uint64_t v6 = v11;
      id v7 = v10;
      sub_100078F08(v6, a4, 10);
      sub_10007A720(a1, 0);
    }
    else
    {
      id v8 = v10;
      uint64_t v9 = _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100077D5C(v9);
      sub_10007A720(a1, 0);
      swift_errorRelease();
    }
  }
}

uint64_t sub_100078F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for DispatchQoS();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (uint64_t *)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v60 = *(void *)(v13 - 8);
  uint64_t v61 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v57 - v17;
  int v19 = *(unsigned __int8 *)(a2 + 1);
  if (v19 == 30)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *(void *)(a2 + 16);
  }
  else
  {
    if (v19 != 2)
    {
LABEL_18:
      sub_100004928(0, (unint64_t *)&qword_1000A17C0);
      uint64_t v55 = (uint64_t)sub_10007A9C8(-536870212, 0, 0);
      swift_willThrow();
      goto LABEL_20;
    }
    uint64_t v20 = sub_100076888();
  }
  v71[0] = v20;
  v71[1] = v21;
  sub_1000768F8();
  if (!v22) {
    goto LABEL_18;
  }
  uint64_t v59 = v3;
  id v23 = [self sharedClockManager];
  uint64_t v24 = a1;
  id v25 = v23;
  uint64_t v58 = v24;
  id v26 = [v23 clockWithClockIdentifier:];

  if (!v26) {
    goto LABEL_16;
  }
  self;
  uint64_t v27 = swift_dynamicCastObjCClass();
  if (!v27)
  {

LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v44 = v68;
    if (v68)
    {
      sub_100004928(0, (unint64_t *)&qword_1000A1930);
      uint64_t v57 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      void *v12 = 100;
      (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.milliseconds(_:), v9);
      + infix(_:_:)();
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v45 = v61;
      Swift::String v46 = *(void (**)(char *, uint64_t))(v60 + 8);
      v46(v16, v61);
      uint64_t v47 = (void *)swift_allocObject();
      uint64_t v48 = v58;
      void v47[2] = v59;
      v47[3] = v48;
      memcpy(v47 + 4, (const void *)a2, 0x80uLL);
      v47[20] = v44;
      aBlock[4] = sub_10007A8C8;
      aBlock[5] = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_10005A66C;
      aBlock[3] = &unk_1000997A8;
      uint64_t v49 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      Swift::String v50 = v62;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1000756B8((unint64_t *)&unk_1000A3E50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000116B8((uint64_t *)&unk_1000A21E0);
      sub_10001BB20((unint64_t *)&qword_1000A3E60, (uint64_t *)&unk_1000A21E0);
      uint64_t v51 = v64;
      uint64_t v52 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v53 = (void *)v57;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v49);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v52);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v65);
      return ((uint64_t (*)(char *, uint64_t))v46)(v18, v45);
    }
    goto LABEL_18;
  }
  uint64_t v28 = (void *)v27;
  LOWORD(v69) = 0;
  NSString v29 = String._bridgeToObjectiveC()();
  aBlock[0] = 0;
  unsigned int v30 = [v28 addUnicastUDPv6EtEPortOnInterfaceNamed:v29 withDestinationAddress:v71 allocatedPortNumber:&v69 error:aBlock];

  if (v30)
  {
    id v31 = aBlock[0];
    swift_bridgeObjectRelease();
    if (qword_1000A4918 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100004964(v32, (uint64_t)qword_1000A4938);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = v58;
    if (v35)
    {
      uint64_t v37 = swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446466;
      uint64_t v38 = sub_10005A4F8();
      uint64_t v69 = sub_100017070((uint64_t)v38, v39, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2048;
      uint64_t v69 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s: Allocated %llx", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for Clock();
    swift_allocObject();
    uint64_t v40 = sub_10007988C(v28);
    uint64_t v41 = v59;
    uint64_t v42 = *(void *)(v59 + 16);
    *(void *)(v59 + 16) = v40;
    unsigned __int8 v43 = *(unsigned char *)(v41 + 24);
    *(unsigned char *)(v41 + 24) = 0;
    sub_100078328(v42, v43);
    return sub_100077F54();
  }
  id v56 = aBlock[0];
  uint64_t v55 = _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_20:
  sub_100077D5C(v55);
  swift_errorRelease();
  return sub_100077F54();
}

uint64_t sub_10007979C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!__OFSUB__(a4, 1)) {
    return sub_100078F08(a2, a3, a4 - 1);
  }
  __break(1u);
  return result;
}

uint64_t Clock.clockIdentifier.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t static Clock.nullClockIdentifier.getter()
{
  return TSNullClockIdentifier;
}

uint64_t Clock.__allocating_init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Clock.init(clockIdentifier:)(a1);
  return v2;
}

uint64_t Clock.init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v2 = TSNullgPTPClockIdentity;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 16) = [objc_allocWithZone((Class)TSgPTPClock) initWithClockIdentifier:a1];
  return v1;
}

uint64_t sub_10007988C(void *a1)
{
  *(void *)(v1 + 32) = TSNullgPTPClockIdentity;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  id v3 = [a1 clockIdentifier];
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v3;
  return v1;
}

Swift::UInt64 __swiftcall Clock.domainTimeForMachAbsoluteTime(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = TSNullgPTPClockIdentity;
  Swift::UInt64 result = (Swift::UInt64)[*(id *)(v1 + 16) convertFromMachAbsoluteToDomainTime:a1 grandmasterUsed:&v3];
  *(void *)(v1 + 32) = v3;
  return result;
}

Swift::UInt64 __swiftcall Clock.machAbsoluteTimeForDomainTime(_:)(Swift::UInt64 a1)
{
  uint64_t v4 = TSNullgPTPClockIdentity;
  __int16 v3 = 0;
  Swift::UInt64 result = (Swift::UInt64)[*(id *)(v1 + 16) convertFromDomainToMachAbsoluteTime:a1 grandmasterUsed:&v4 portNumber:&v3];
  *(void *)(v1 + 32) = v4;
  return result;
}

uint64_t sub_1000799D0()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 48);
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    if (!v2) {
      return sub_100079A24();
    }
  }
  else if (v2)
  {
    return sub_100079EC8();
  }
  return result;
}

uint64_t sub_100079A24()
{
  uint64_t v48 = type metadata accessor for DispatchTimeInterval();
  sub_100013930();
  uint64_t v46 = v0;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v45 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v38 - v4);
  uint64_t v49 = type metadata accessor for DispatchTime();
  sub_100013930();
  uint64_t v47 = v6;
  __chkstk_darwin(v7);
  sub_100013AFC();
  uint64_t v44 = v9 - v8;
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013930();
  uint64_t v42 = v11;
  uint64_t v43 = v10;
  __chkstk_darwin(v10);
  sub_100013AFC();
  uint64_t v14 = v13 - v12;
  type metadata accessor for DispatchQoS();
  sub_100013930();
  uint64_t v39 = v16;
  uint64_t v40 = v15;
  __chkstk_darwin(v15);
  sub_100013AFC();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for OS_dispatch_source.TimerFlags();
  sub_100013930();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_100013AFC();
  uint64_t v26 = v25 - v24;
  sub_100004928(0, &qword_1000A3E28);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000756B8(&qword_1000A3E30, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_1000116B8(&qword_1000A3E38);
  sub_10001BB20((unint64_t *)&unk_1000A3E40, &qword_1000A3E38);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v20);
  swift_getObjectType();
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v41;
  swift_weakInit();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v28;
  *(void *)(v30 + 24) = v27;
  aBlock[4] = sub_10007A820;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005A66C;
  aBlock[3] = &unk_100099730;
  id v31 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  sub_10005F2A8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v31);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v14, v43);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v19, v40);
  swift_release();
  swift_release();
  uint64_t v32 = v44;
  static DispatchTime.now()();
  *uint64_t v5 = 5;
  uint64_t v33 = v46;
  uint64_t v34 = v48;
  (*(void (**)(void *, void, uint64_t))(v46 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v48);
  BOOL v35 = v45;
  sub_10005F3E4(v45);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v36 = *(void (**)(void *, uint64_t))(v33 + 8);
  v36(v35, v34);
  v36(v5, v34);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v32, v49);
  OS_dispatch_source.activate()();
  *(void *)(v29 + 48) = v27;
  return swift_unknownObjectRelease();
}

uint64_t sub_100079EC8()
{
  if (*(void *)(v0 + 48))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  *(void *)(v0 + 48) = 0;

  return swift_unknownObjectRelease();
}

uint64_t Clock.heartbeat.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Clock.heartbeat.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 40) = a1;
  return sub_1000799D0();
}

uint64_t (*Clock.heartbeat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_10007A00C;
}

uint64_t sub_10007A00C(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1000799D0();
  }
  return result;
}

void sub_10007A040()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t v2 = mach_absolute_time();
    Swift::UInt64 v3 = Clock.domainTimeForMachAbsoluteTime(_:)(v2);
    sub_10007A828(*(void *)(v1 + 32), v2, v3, (int)[*(id *)(v1 + 16) lockState]);
    if (qword_1000A4918 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100004964(v4, (uint64_t)qword_1000A4938);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134218752;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v7 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 32) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%llx: (%llx) %llu -> %llu", (uint8_t *)v7, 0x2Au);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    if (v3 == TSInvalidTime)
    {
      swift_getObjectType();
      OS_dispatch_source.cancel()();
    }
    swift_release();
  }
  else
  {
    swift_getObjectType();
    OS_dispatch_source.cancel()();
  }
}

uint64_t Clock.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Clock.__deallocating_deinit()
{
  Clock.deinit();

  return _swift_deallocClassInstance(v0, 56, 7);
}

char *sub_10007A2E0(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = sub_10007A380(result, *(void *)(v3 + 16) + 1, 1, v3, a1);
    *uint64_t v1 = (uint64_t)result;
  }
  return result;
}

char *sub_10007A33C(char *result, uint64_t *a2)
{
  unint64_t v3 = *(void *)(*v2 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v3 >> 1))
  {
    uint64_t result = sub_10007A380((char *)(v3 > 1), (int64_t)(result + 1), 1, *v2, a2);
    *uint64_t v2 = (uint64_t)result;
  }
  return result;
}

char *sub_10007A380(char *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *(void *)(a4 + 24);
    uint64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v8 = a2;
      }
    }
  }
  else
  {
    uint64_t v8 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v8 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000116B8(a5);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  if (v6)
  {
    sub_10007A56C((char *)(a4 + 32), v9, v13);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10007A46C(0, v9, (unint64_t)v13, a4);
  }
  return v11;
}

uint64_t sub_10007A46C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000116B8(&qword_1000A4B78);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  sub_100061D28();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10007A56C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100061D28();
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_10007A5F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10007A610()
{
  swift_release();
  uint64_t v0 = sub_10007A9B8();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t type metadata accessor for TimeSyncManager()
{
  return self;
}

uint64_t type metadata accessor for Domain()
{
  return self;
}

uint64_t type metadata accessor for Clock()
{
  return self;
}

uint64_t sub_10007A6B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10007A6E8()
{
  sub_100077CAC(*(void *)(v0 + 16));
}

uint64_t sub_10007A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007A700()
{
  return swift_release();
}

void sub_10007A708(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_10007A720(a1, a2 & 1);
  }
}

void sub_10007A720(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

void sub_10007A72C()
{
  sub_10007704C(*(void **)(v0 + 16));
}

void sub_10007A734()
{
}

uint64_t sub_10007A73C()
{
  sub_10007A720(*(void **)(v0 + 24), *(unsigned char *)(v0 + 32));

  return _swift_deallocObject(v0, 33, 7);
}

BOOL sub_10007A780()
{
  return sub_100077830(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

id sub_10007A78C(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

id sub_10007A798(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10007A78C(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10007A7B0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007A7E8()
{
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v0 = sub_10007A9B8();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_10007A820()
{
}

uint64_t sub_10007A828(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return _kdebug_trace(553976352, a1, a2, a3, a4);
}

uint64_t sub_10007A848()
{
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

void sub_10007A880(void *a1, char a2)
{
  sub_100078DAC(a1, a2 & 1, *(void *)(v2 + 16), v2 + 24);
}

uint64_t sub_10007A890()
{
  swift_release();

  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_10007A8C8()
{
  return sub_10007979C(v0[2], v0[3], (uint64_t)(v0 + 4), v0[20]);
}

uint64_t sub_10007A8D8()
{
  return sub_100076ABC();
}

unint64_t sub_10007A8E0()
{
  unint64_t result = qword_1000A4B68;
  if (!qword_1000A4B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000A4B68);
  }
  return result;
}

uint64_t sub_10007A92C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100012D0C(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10007A944(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_10007A94C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10007A9B8()
{
  return v0;
}

id sub_10007A9C8(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100021EE0(a1, a2, a3);
}

id sub_10007AD14(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handler:a2];
}

void sub_10007AD20(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v16 = 0;
  uint64_t v3 = +[NSPropertyListSerialization propertyListWithData:v2 options:0 format:0 error:&v16];
  id v4 = v16;
  if (v3)
  {
    unint64_t v5 = sub_10007AF30(v3);
    id v15 = v4;
    unint64_t v6 = +[NSJSONSerialization dataWithJSONObject:v5 options:7 error:&v15];
    id v7 = v15;

    id v4 = v7;
    if (v6) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (v4)
  {
    unint64_t v6 = +[NSJSONSerialization dataWithJSONObject:v4 options:7 error:0];
  }
LABEL_7:
  uint64_t v8 = objc_opt_new();
  [v8 setFormatOptions:2163];
  uint64_t v9 = +[NSTimeZone systemTimeZone];
  [v8 setTimeZone:v9];

  uint64_t v10 = +[NSDate date];
  uint64_t v11 = [v8 stringFromDate:v10];
  size_t v12 = +[NSString stringWithFormat:@"%s-%@.json", *(void *)(*(void *)(a1 + 32) + 32), v11];
  uint64_t v13 = +[_DiagnosticsHandler tmpDir];
  uint64_t v14 = +[NSURL fileURLWithPath:v12 isDirectory:0 relativeToURL:v13];

  [v6 writeToURL:v14 atomically:0];
}

id sub_10007AF30(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v2 count]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10007B190;
    v10[3] = &unk_100099850;
    v10[4] = v3;
    [v2 enumerateKeysAndObjectsUsingBlock:v10];
LABEL_5:

    goto LABEL_14;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    uint64_t v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_10007B21C;
    v9[3] = &unk_100099878;
    v9[4] = v3;
    [v2 enumerateObjectsUsingBlock:v9];
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = [v1 base64EncodedStringWithOptions:0];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = v1;
      unint64_t v6 = objc_opt_new();
      [v6 setFormatOptions:2163];
      id v7 = +[NSTimeZone systemTimeZone];
      [v6 setTimeZone:v7];

      uint64_t v3 = [v6 stringFromDate:v5];

      goto LABEL_14;
    }
    if (+[NSJSONSerialization isValidJSONObject:v1])
    {
      id v4 = v1;
    }
    else
    {
      id v4 = [v1 description];
    }
  }
  uint64_t v3 = v4;
LABEL_14:

  return v3;
}

void sub_10007B190(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_10007AF30(a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v6 = *(void **)(a1 + 32);
  id v7 = sub_10007AF30(v5);

  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_10007B21C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  sub_10007AF30(a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 addObject:v3];
}

char *sub_10007B378()
{
  uint64_t v0 = (char *)malloc_type_malloc(0x78uLL, 0x1000040EBE173EBuLL);
  pthread_mutex_init((pthread_mutex_t *)v0, 0);
  pthread_cond_init((pthread_cond_t *)(v0 + 64), 0);
  atomic_store(0, (unsigned __int8 *)v0 + 112);
  return v0;
}

uint64_t sub_10007B3D0(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  atomic_store(1u, (unsigned __int8 *)(a1 + 112));
  pthread_cond_signal((pthread_cond_t *)(a1 + 64));

  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

pthread_mutex_t *sub_10007B41C(pthread_mutex_t *result)
{
  id v1 = (unsigned __int8 *)&result[1].__opaque[40];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&result[1].__opaque[40]);
  if ((v2 & 1) == 0)
  {
    id v3 = result;
    pthread_mutex_lock(result);
    unsigned __int8 v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
    {
      do
      {
        pthread_cond_wait((pthread_cond_t *)&v3[1], v3);
        unsigned __int8 v5 = atomic_load((unsigned __int8 *)&v3[1].__opaque[40]);
      }
      while ((v5 & 1) == 0);
    }
    return (pthread_mutex_t *)pthread_mutex_unlock(v3);
  }
  return result;
}

id CUTrafficFlagsCopyDescription(unsigned int a1)
{
  return sub_10007B4A0(a1, "");
}

id sub_10007B4A0(unint64_t a1, unsigned char *a2)
{
  id v4 = objc_alloc_init((Class)NSMutableString);
  char v5 = *a2;
  do
  {
    unint64_t v6 = a2 + 1;
    if (((1 << v5) & a1) != 0)
    {
      if ([v4 length]) {
        id v7 = " ";
      }
      else {
        id v7 = "";
      }
      [v4 appendFormat:@"%s%s", v7, v6];
    }
    id v8 = &v6[strlen(v6)];
    int v9 = *((unsigned __int8 *)v8 + 1);
    a2 = v8 + 1;
    char v5 = v9;
  }
  while (v9);

  return v4;
}

id RPControlFlagsCopyDescription(unint64_t a1)
{
  return sub_10007B4A0(a1, byte_1000849F3);
}

id RPDataLinkTypeCopyDescription(unsigned int a1)
{
  if (a1 > 0xB) {
    id v1 = "?";
  }
  else {
    id v1 = (&off_100099898)[a1];
  }
  return +[NSString stringWithCString:v1 encoding:4];
}

id RPDeviceChangeFlagsCopyDescription(unsigned int a1)
{
  return sub_10007B4A0(a1, byte_100084C78);
}

id RPErrorFlagsCopyDescription(unint64_t a1)
{
  return sub_10007B4A0(a1, byte_100084CBB);
}

id RPFlowControlStateCopyDescription(unsigned int a1)
{
  if (a1 > 2) {
    id v1 = "?";
  }
  else {
    id v1 = (&off_1000998F8)[a1];
  }
  return +[NSString stringWithCString:v1 encoding:4];
}

id RPStreamQoSCopyDescription(int a1)
{
  id v1 = "Default";
  switch(a1)
  {
    case 0:
      return +[NSString stringWithCString:v1 encoding:4];
    case 1:
      id v1 = "Background";
      break;
    case 2:
      id v1 = "Video";
      break;
    case 3:
      id v1 = "Voice";
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_5;
    case 10:
      id v1 = "AirPlayAudio";
      break;
    case 11:
      id v1 = "AirPlayScreenAudio";
      break;
    case 12:
      id v1 = "AirPlayScreenVideo";
      break;
    default:
      if (a1 == 20) {
        id v1 = "NTP";
      }
      else {
LABEL_5:
      }
        id v1 = "?";
      break;
  }
  return +[NSString stringWithCString:v1 encoding:4];
}

id RPStatusFlagsCopyDescription(unint64_t a1)
{
  return sub_10007B4A0(a1, byte_100084D4D);
}

id RPStreamFlagsCopyDescription(unsigned int a1)
{
  return sub_10007B4A0(a1, byte_100084F0C);
}

id RPStreamTypeCopyDescription(unsigned int a1)
{
  if (a1 > 3) {
    id v1 = "?";
  }
  else {
    id v1 = (&off_100099910)[a1];
  }
  return +[NSString stringWithCString:v1 encoding:4];
}

void RPStreamSessionSetDisconnectHandler(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v4 = objc_retainBlock(v3);
    [v5 performSelector:"setDisconnectHandler:" withObject:v4];
  }
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return dispatch thunk of PropertyListEncoder.outputFormat.setter();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.count.getter()
{
  return Data.count.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return Date.init(timeIntervalSinceNow:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_EVENT_KEY_NAME.getter()
{
  return XPC_EVENT_KEY_NAME.getter();
}

uint64_t noErr.getter()
{
  return noErr.getter();
}

uint64_t SIG_IGN.getter()
{
  return SIG_IGN.getter();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t static DispatchWallTime.now()()
{
  return static DispatchWallTime.now()();
}

uint64_t type metadata accessor for DispatchWallTime()
{
  return type metadata accessor for DispatchWallTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Dictionary._Variant.remove(at:)()
{
  return Dictionary._Variant.remove(at:)();
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return Sequence._copyContents(initializing:)();
}

uint64_t Sequence.underestimatedCount.getter()
{
  return Sequence.underestimatedCount.getter();
}

uint64_t Sequence._copyToContiguousArray()()
{
  return Sequence._copyToContiguousArray()();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OS_dispatch_source.data.getter()
{
  return OS_dispatch_source.data.getter();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

Swift::Void __swiftcall OS_dispatch_source.activate()()
{
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

uint64_t OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

Swift::Void __swiftcall OS_dispatch_source_data_replace.replace(data:)(Swift::UInt data)
{
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)UInt._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t type metadata accessor for ArraySlice()
{
  return type metadata accessor for ArraySlice();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return ArraySlice.init<A>(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BLSBacklightStateIsActive()
{
  return _BLSBacklightStateIsActive();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return _CFBundleGetMainBundle();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return _CFBundleGetValueForInfoDictionaryKey(bundle, key);
}

uint64_t IOPMUserIsActive()
{
  return _IOPMUserIsActive();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t NSStringFromBLSBacklightState()
{
  return _NSStringFromBLSBacklightState();
}

uint64_t OPACKDecodeData()
{
  return _OPACKDecodeData();
}

uint64_t OPACKEncoderCreateData()
{
  return _OPACKEncoderCreateData();
}

uint64_t RPDecodeNSError()
{
  return _RPDecodeNSError();
}

uint64_t RPEncodeNSError()
{
  return _RPEncodeNSError();
}

uint64_t RPVersionToSourceVersionString()
{
  return _RPVersionToSourceVersionString();
}

uint64_t SidecarGetProcessUniqueID()
{
  return _SidecarGetProcessUniqueID();
}

uint64_t SidecarMapTableAddObject()
{
  return _SidecarMapTableAddObject();
}

uint64_t SidecarMapTableCreateStrong()
{
  return _SidecarMapTableCreateStrong();
}

uint64_t SidecarMapTableGetCount()
{
  return _SidecarMapTableGetCount();
}

uint64_t SidecarMapTableGetHandle()
{
  return _SidecarMapTableGetHandle();
}

uint64_t SidecarMapTableGetObject()
{
  return _SidecarMapTableGetObject();
}

uint64_t SidecarMapTableIterateObjects()
{
  return _SidecarMapTableIterateObjects();
}

uint64_t SidecarMapTableRemoveObject()
{
  return _SidecarMapTableRemoveObject();
}

uint64_t SidecarMapTableReplaceObject()
{
  return _SidecarMapTableReplaceObject();
}

uint64_t StringToSockAddr()
{
  return _StringToSockAddr();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t _dirhelper()
{
  return __dirhelper();
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

int asprintf(char **a1, const char *a2, ...)
{
  return _asprintf(a1, a2);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_main(void)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

const char *__cdecl gai_strerror(int a1)
{
  return _gai_strerror(a1);
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return _getnameinfo(a1, a2, a3, a4, a5, a6, a7);
}

pid_t getpid(void)
{
  return _getpid();
}

uid_t getuid(void)
{
  return _getuid();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return _if_indextoname(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_continuous_approximate_time(void)
{
  return _mach_continuous_approximate_time();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_storeStrong(id *location, id obj)
{
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_state_remove_handler()
{
  return _os_state_remove_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return _pthread_cond_init(a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return _pthread_cond_signal(a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return _pthread_cond_wait(a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return _xpc_copy_entitlement_for_token();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return _xpc_dictionary_send_reply();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithJSONObject:x0, x1, x2];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:isDirectory:];
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:x0 isDirectory:x1 relativeToURL:x2];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDBytes:];
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return [a1 isValidJSONObject:];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_setFormatOptions_(void *a1, const char *a2, ...)
{
  return [a1 setFormatOptions:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return [a1 setTimeZone:];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return [a1 stringFromDate:x0];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 systemTimeZone];
}

id objc_msgSend_tmpDir(void *a1, const char *a2, ...)
{
  return _[a1 tmpDir];
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:atomically:];
}