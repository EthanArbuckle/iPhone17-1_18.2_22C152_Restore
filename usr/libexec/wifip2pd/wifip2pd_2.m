char *sub_100114C10(void **a1, const void **a2, void *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  v3 = (char *)*a2;
  v4 = *a3 - (void)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_100114CC8(void **a1, const void **a2, void *a3)
{
  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

char *sub_100114D84(void **a1, const void **a2, void *a3)
{
  v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_100114E40(uint64_t a1)
{
  return sub_100114B14(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100114E54(uint64_t a1)
{
  return sub_100084BEC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100114E68(uint64_t a1)
{
  return sub_100084D50(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100114E7C(uint64_t a1)
{
  return sub_100085308(0, *(void *)(a1 + 16), 0, (char *)a1);
}

BOOL _s7CoreP2P14RadioResourcesO15SymbolicChannelO21__derived_enum_equalsySbAE_AEtFZ_0(unint64_t a1, char a2, unint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4) {
      return a1 == a3;
    }
    return 0;
  }
  if (a2 == 1)
  {
    if (a4 == 1
      && a1 == a3
      && ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a3 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a1))
      {
        case 2:
          if (BYTE5(a3) != 2) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 3:
          if (BYTE5(a3) != 3) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 4:
          if (BYTE5(a3) != 4) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 5:
          if (BYTE5(a3) != 5) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 6:
          if (BYTE5(a3) != 6) {
            return 0;
          }
          BOOL result = 1;
          break;
        default:
          if (BYTE5(a3) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a3 >> 40) & 1)) {
            return 0;
          }
          BOOL result = 1;
          break;
      }
      return result;
    }
    return 0;
  }
  switch(a1)
  {
    case 1uLL:
      if (a4 != 2 || a3 != 1) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 2uLL:
      if (a4 != 2 || a3 != 2) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 3uLL:
      if (a4 != 2 || a3 != 3) {
        return 0;
      }
      BOOL result = 1;
      break;
    default:
      if (a4 != 2 || a3) {
        return 0;
      }
      BOOL result = 1;
      break;
  }
  return result;
}

uint64_t sub_100115064(unint64_t a1, unint64_t a2)
{
  if (a1 != a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      uint64_t v2 = 0;
      if (BYTE5(a2) == 2) {
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v2 = 0;
      if (BYTE5(a2) == 3) {
        goto LABEL_17;
      }
      break;
    case 4:
      uint64_t v2 = 0;
      if (BYTE5(a2) == 4) {
        goto LABEL_17;
      }
      break;
    case 5:
      uint64_t v2 = 0;
      if (BYTE5(a2) == 5) {
        goto LABEL_17;
      }
      break;
    case 6:
      uint64_t v2 = 0;
      if (BYTE5(a2) == 6) {
        goto LABEL_17;
      }
      break;
    default:
      if (BYTE5(a2) - 2 < 5) {
        return 0;
      }
      uint64_t v2 = 0;
      if (((a1 & 0x10000000000) == 0) != ((a2 >> 40) & 1))
      {
LABEL_17:
        if (BYTE6(a2) == BYTE6(a1)) {
          uint64_t v2 = ((a1 & 0x100000000000000) == 0) ^ HIBYTE(a2) & 1u;
        }
      }
      break;
  }
  return v2;
}

unint64_t _s7CoreP2P14RadioResourcesO8PriorityO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 0xD) {
    return 13;
  }
  return result;
}

uint64_t sub_1001151A0(uint64_t a1)
{
  return sub_10011301C(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(unsigned __int8 *)(v1 + 65));
}

uint64_t sub_1001151D8(uint64_t a1)
{
  return sub_1001131A8(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

unint64_t sub_1001151F0()
{
  unint64_t result = qword_10047FCD8;
  if (!qword_10047FCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCD8);
  }
  return result;
}

unint64_t sub_100115248()
{
  unint64_t result = qword_10047FCE0;
  if (!qword_10047FCE0)
  {
    sub_100014434(&qword_10047FCE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCE0);
  }
  return result;
}

unint64_t sub_1001152A8()
{
  unint64_t result = qword_10047FCF0;
  if (!qword_10047FCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCF0);
  }
  return result;
}

unint64_t sub_100115300()
{
  unint64_t result = qword_10047FCF8;
  if (!qword_10047FCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for RadioResources()
{
  return &type metadata for RadioResources;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.IEEE80211CipherSuite(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RadioResources.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    char *result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001154C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.Priority()
{
  return &type metadata for RadioResources.Priority;
}

uint64_t getEnumTagSinglePayload for RadioResources.SymbolicChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResources.SymbolicChannel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100115584(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10011559C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.SymbolicChannel()
{
  return &type metadata for RadioResources.SymbolicChannel;
}

uint64_t destroy for NANAttribute.DeviceLink()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  int v3 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RadioResources.SymbolicChannel.Resolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDataResponseReceivedEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataResponseReceivedEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.SymbolicChannel.Resolver()
{
  return &type metadata for RadioResources.SymbolicChannel.Resolver;
}

uint64_t getEnumTagSinglePayload for RadioResources.PreferredChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResources.PreferredChannel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadioResources.PreferredChannel()
{
  return &type metadata for RadioResources.PreferredChannel;
}

void NANMasterRank.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  unint64_t v7 = HIWORD(a2);
  unint64_t v8 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
}

unint64_t sub_1001158D8()
{
  uint64_t v1 = 0x61466D6F646E6172;
  if (*v0 != 1) {
    uint64_t v1 = 0x73736572646461;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_100115940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001173B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100115968(uint64_t a1)
{
  unint64_t v2 = sub_1001168B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001159A4(uint64_t a1)
{
  unint64_t v2 = sub_1001168B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANMasterRank.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100010BCC(&qword_10047FD08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001168B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[8] = BYTE2(a2);
    v10[9] = BYTE3(a2);
    v10[10] = BYTE4(a2);
    v10[11] = BYTE5(a2);
    v10[12] = BYTE6(a2);
    v10[13] = HIBYTE(a2);
    v10[7] = 2;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANMasterRank.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

unint64_t NANMasterRank.init(from:)(void *a1)
{
  return sub_100116A8C(a1);
}

unint64_t sub_100115C98@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_100116A8C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100115CC4(void *a1)
{
  return NANMasterRank.encode(to:)(a1, *v1);
}

Swift::Int sub_100115CE0()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Swift::UInt8 v8 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_100115DB8()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Swift::UInt8 v7 = v0[7];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_100115E58()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Swift::UInt8 v8 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_100115F2C(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P13NANMasterRankV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t NANRole.description.getter(char a1)
{
  uint64_t v1 = 0x4D20726F68636E41;
  uint64_t v2 = 0x72657473614DLL;
  unint64_t v3 = 0x7473614D206E6F4ELL;
  if ((a1 & 1) == 0) {
    unint64_t v3 = 0xD000000000000013;
  }
  if (a1 != 4) {
    uint64_t v2 = v3;
  }
  if (a1 != 3) {
    uint64_t v1 = v2;
  }
  if (a1 == 2) {
    return 0x6974616D6F747541;
  }
  else {
    return v1;
  }
}

void NANRole.hash(into:)(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 4:
      Swift::UInt v2 = 2;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Swift::UInt8 v3 = a2 & 1;
  Hasher._combine(_:)(3uLL);
  Hasher._combine(_:)(v3);
}

BOOL static NANRole.__derived_enum_equals(_:_:)(char a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2:
      return a2 == 2;
    case 3:
      return a2 == 3;
    case 4:
      return a2 == 4;
  }
  if (a2 - 2 < 3) {
    return 0;
  }
  return (((a1 & 1) == 0) ^ a2) & 1;
}

Swift::Int NANRole.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  switch(a1)
  {
    case 2:
      Swift::UInt v2 = 0;
      break;
    case 3:
      Swift::UInt v2 = 1;
      break;
    case 4:
      Swift::UInt v2 = 2;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(a1 & 1);
      return Hasher._finalize()();
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_10011616C()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0;
      break;
    case 3:
      Swift::UInt v2 = 1;
      break;
    case 4:
      Swift::UInt v2 = 2;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100116204()
{
  int v1 = *v0;
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 4:
      Swift::UInt v2 = 2;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  Swift::UInt8 v3 = v1 & 1;
  Hasher._combine(_:)(3uLL);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_100116274()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0;
      break;
    case 3:
      Swift::UInt v2 = 1;
      break;
    case 4:
      Swift::UInt v2 = 2;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100116308()
{
  int v1 = *v0;
  uint64_t v2 = 0x4D20726F68636E41;
  uint64_t v3 = 0x72657473614DLL;
  unint64_t v4 = 0x7473614D206E6F4ELL;
  if ((v1 & 1) == 0) {
    unint64_t v4 = 0xD000000000000013;
  }
  if (v1 != 4) {
    uint64_t v3 = v4;
  }
  if (v1 != 3) {
    uint64_t v2 = v3;
  }
  if (v1 == 2) {
    return 0x6974616D6F747541;
  }
  else {
    return v2;
  }
}

BOOL sub_1001163C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 2:
      return v3 == 2;
    case 3:
      return v3 == 3;
    case 4:
      return v3 == 4;
  }
  if ((v3 - 2) < 3) {
    return 0;
  }
  return (((v2 & 1) == 0) ^ v3) & 1;
}

void *NANElectionParameters.Flags.syncToSelf.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.syncToSelf;
}

void *NANElectionParameters.Flags.useTSFTiming.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.useTSFTiming;
}

void *NANElectionParameters.Flags.anchorMasterRecordUpdate.unsafeMutableAddressor()
{
  return &static NANElectionParameters.Flags.anchorMasterRecordUpdate;
}

uint64_t NANElectionParameters.flags.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t NANElectionParameters.cluster.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t NANElectionParameters.cluster.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2;
  *(_DWORD *)(v2 + 20) = HIDWORD(a2);
  return result;
}

uint64_t NANElectionParameters.localTSF.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NANBeacon.Metadata.tsf.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t NANElectionParameters.rxBeaconTSF.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t NANElectionParameters.rxBeaconTSF.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

void NANElectionParameters.hash(into:)()
{
  sub_100116C80((unsigned char *)v0, &v16);
  sub_100116C80(&v16, &v17);
  switch(v17)
  {
    case 4:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(0);
      break;
    default:
      Swift::UInt8 v1 = v17 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      break;
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 7);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Swift::UInt32 v15 = *(_DWORD *)(v0 + 20);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 14);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 15);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 16);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 8));
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(*(void *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
}

Swift::Int NANElectionParameters.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001166B0()
{
  return Hasher._finalize()();
}

void sub_100116704()
{
}

Swift::Int sub_100116740()
{
  return Hasher._finalize()();
}

BOOL sub_100116790(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P21NANElectionParametersV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v7);
}

BOOL _s7CoreP2P13NANMasterRankV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a2) {
    return 0;
  }
  LOBYTE(v6) = BYTE2(a1);
  BYTE1(v6) = BYTE3(a1);
  BYTE2(v6) = BYTE4(a1);
  HIBYTE(v6) = BYTE5(a1);
  LOBYTE(v7) = BYTE6(a1);
  HIBYTE(v7) = HIBYTE(a1);
  LOBYTE(v4) = BYTE2(a2);
  BYTE1(v4) = BYTE3(a2);
  BYTE2(v4) = BYTE4(a2);
  HIBYTE(v4) = BYTE5(a2);
  LOBYTE(v5) = BYTE6(a2);
  HIBYTE(v5) = HIBYTE(a2);
  return v6 == v4 && v7 == v5;
}

unint64_t sub_1001168B4()
{
  unint64_t result = qword_10047FD10;
  if (!qword_10047FD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD10);
  }
  return result;
}

BOOL _s7CoreP2P21NANElectionParametersV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_100116C80((unsigned char *)a1, &v8);
  sub_100116C80((unsigned char *)a2, &v7);
  sub_100116C80(&v8, &v9);
  int v4 = v9;
  switch(v9)
  {
    case 4u:
      sub_100116C80(&v7, &v10);
      if (v10 != 4) {
        return 0;
      }
      goto LABEL_12;
    case 3u:
      sub_100116C80(&v7, &v10);
      if (v10 != 3) {
        return 0;
      }
      goto LABEL_12;
    case 2u:
      sub_100116C80(&v7, &v10);
      if (v10 != 2) {
        return 0;
      }
LABEL_12:
      if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1))
      {
        BOOL v6 = *(_DWORD *)(a1 + 2) == *(_DWORD *)(a2 + 2)
          && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6);
        if (v6
          && sub_10020D248(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 20) << 32), *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 20) << 32))&& *(void *)(a1 + 24) == *(void *)(a2 + 24))
        {
          return *(void *)(a1 + 32) == *(void *)(a2 + 32);
        }
      }
      return 0;
  }
  sub_100116C80(&v7, &v10);
  BOOL result = 0;
  if (v10 - 2 >= 3 && ((v4 ^ v10) & 1) == 0) {
    goto LABEL_12;
  }
  return result;
}

unint64_t sub_100116A8C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FD68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  BOOL v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001168B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v16 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v15 = 1;
  unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v13[7] = 2;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v9 = v13[8];
  uint64_t v10 = v13[9];
  uint64_t v11 = v14;
  sub_100010754((uint64_t)a1);
  return (v9 << 16) | (v10 << 24) | (v11 << 32) | ((unint64_t)v8 << 8) | v7;
}

unsigned char *sub_100116C80(unsigned char *a1, unsigned char *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_100116C94()
{
  unint64_t result = qword_10047FD18;
  if (!qword_10047FD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD18);
  }
  return result;
}

unint64_t sub_100116CEC()
{
  unint64_t result = qword_10047FD20;
  if (!qword_10047FD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD20);
  }
  return result;
}

unint64_t sub_100116D44()
{
  unint64_t result = qword_10047FD28;
  if (!qword_10047FD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD28);
  }
  return result;
}

unint64_t sub_100116D9C()
{
  unint64_t result = qword_10047FD30;
  if (!qword_10047FD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD30);
  }
  return result;
}

unint64_t sub_100116DF4()
{
  unint64_t result = qword_10047FD38;
  if (!qword_10047FD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD38);
  }
  return result;
}

unint64_t sub_100116E4C()
{
  unint64_t result = qword_10047FD40;
  if (!qword_10047FD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD40);
  }
  return result;
}

unint64_t sub_100116EA4()
{
  unint64_t result = qword_10047FD48;
  if (!qword_10047FD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD48);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMasterRank()
{
  return &type metadata for NANMasterRank;
}

uint64_t getEnumTagSinglePayload for NANRole(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100116FB8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 2;
  if (v8 <= 2) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NANRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1001170A0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANRole()
{
  return &type metadata for NANRole;
}

uint64_t getEnumTagSinglePayload for NANElectionParameters(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[40]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 3;
  }
  else {
    int v4 = -4;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANElectionParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANElectionParameters()
{
  return &type metadata for NANElectionParameters;
}

ValueMetadata *type metadata accessor for NANElectionParameters.Flags()
{
  return &type metadata for NANElectionParameters.Flags;
}

unsigned char *storeEnumTagSinglePayload for NANMasterRank.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100117270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMasterRank.CodingKeys()
{
  return &type metadata for NANMasterRank.CodingKeys;
}

unint64_t sub_1001172AC()
{
  unint64_t result = qword_10047FD50;
  if (!qword_10047FD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD50);
  }
  return result;
}

unint64_t sub_100117304()
{
  unint64_t result = qword_10047FD58;
  if (!qword_10047FD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD58);
  }
  return result;
}

unint64_t sub_10011735C()
{
  unint64_t result = qword_10047FD60;
  if (!qword_10047FD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD60);
  }
  return result;
}

uint64_t sub_1001173B0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DBB10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61466D6F646E6172 && a2 == 0xEC000000726F7463 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *IPv4Address.any.unsafeMutableAddressor()
{
  return &static IPv4Address.any;
}

BOOL IPv4Address.isLinkLocal.getter(unsigned __int16 a1)
{
  return a1 == 65193;
}

BOOL IPv6Address.isLinkLocal.getter(__int16 a1)
{
  return (a1 & 0xC0FF) == 33022;
}

uint64_t IPv4Address.init(_:)(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = sub_1002579EC(a1, a2);
  sub_10000C970(a1, a2);
  return v4;
}

uint64_t IPv6Address.init(_:scopedInterface:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1002577C8(a1, a2);
  sub_10000C970(a1, a2);
  return v4;
}

uint64_t IPv4Address.data.getter(int a1)
{
  int v7 = a1;
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = &v7;
  v8[1] = v8;
  uint64_t v1 = sub_1000369C4(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unsigned int v2 = (unsigned char *)*v1;
  if (*v1 && (v3 = (unsigned char *)v1[1], uint64_t v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      uint64_t v5 = sub_100013D9C(v2, v3);
    }
    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      uint64_t v5 = sub_1001264EC((uint64_t)v2, (uint64_t)v3);
    }
    else
    {
      uint64_t v5 = sub_100126568((uint64_t)v2, (uint64_t)v3);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_100010754((uint64_t)v8);
  return v5;
}

uint64_t IPv4Address.description.getter(int a1)
{
  unsigned int v2 = (char *)swift_slowAlloc();
  int v5 = a1;
  inet_ntop(2, &v5, v2, 0x10u);
  uint64_t v3 = String.init(cString:)();
  swift_slowDealloc();
  return v3;
}

uint64_t IPv4Address.customMirror.getter(int a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = a1;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_100071B44((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void IPv4Address.hash(into:)(int a1, Swift::UInt32 a2)
{
}

void *IPv4Address.broadcast.unsafeMutableAddressor()
{
  return &static IPv4Address.broadcast;
}

Swift::Int IPv4Address.hashValue.getter(Swift::UInt32 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100117A8C()
{
  int v1 = *v0;
  uint64_t v2 = (char *)swift_slowAlloc();
  int v5 = v1;
  inet_ntop(2, &v5, v2, 0x10u);
  uint64_t v3 = String.init(cString:)();
  swift_slowDealloc();
  return v3;
}

uint64_t sub_100117B38()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *v0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_100071B44((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t IPv4Address.init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_1000369C4(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    sub_100010754((uint64_t)v5);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

uint64_t IPv4Address.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t sub_100117E4C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_1000369C4(v7, v7[3]);
  int v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  sub_100010754((uint64_t)v7);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t sub_100117F0C(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t IPv6Address.address.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t IPv6Address.scopedInterfaceName.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t IPv6Address.scopedInterfaceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t IPv6Address.data.getter(uint64_t a1, uint64_t a2)
{
  v9[0] = a1;
  v9[1] = a2;
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = v9;
  v8[1] = &v10;
  uint64_t v2 = sub_1000369C4(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_100013D9C(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1001264EC((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_100126568((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_100010754((uint64_t)v8);
  return v6;
}

uint64_t IPv6Address.description.getter(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (char *)swift_slowAlloc();
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  inet_ntop(30, &v18, v8, 0x2Eu);
  uint64_t v9 = String.init(cString:)();
  unint64_t v11 = v10;
  if (a4)
  {
    uint64_t v18 = 37;
    unint64_t v19 = 0xE100000000000000;
    v12._countAndFlagsBits = a3;
    v12._object = a4;
    String.append(_:)(v12);
    uint64_t v14 = v18;
    Swift::UInt8 v13 = (void *)v19;
  }
  else
  {
    uint64_t v14 = 0;
    Swift::UInt8 v13 = (void *)0xE000000000000000;
  }
  uint64_t v18 = v9;
  unint64_t v19 = v11;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v18;
  swift_slowDealloc();
  return v16;
}

uint64_t IPv6Address.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  Swift::UInt8 v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[1] = _swiftEmptyArrayStorage;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Mirror.AncestorRepresentation.generated(_:), v8);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100071B44((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void IPv6Address.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v6 = sub_10011A3BC((uint64_t)v9, (uint64_t)&v10);
  unint64_t v8 = v7;
  Data.hash(into:)();
  sub_10000C970(v6, v8);
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t IPv6Address.multicastMACAddress.getter(uint64_t a1, uint64_t a2)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v2 = sub_10011A3BC((uint64_t)v10, (uint64_t)&v11);
  unint64_t v4 = v3;
  unsigned __int8 v5 = Data.subscript.getter();
  unsigned __int8 v6 = Data.subscript.getter();
  unsigned __int8 v7 = Data.subscript.getter();
  unsigned __int8 v8 = Data.subscript.getter();
  sub_10000C970(v2, v4);
  return ((unint64_t)v6 << 24) | ((unint64_t)v5 << 16) | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | 0x3333;
}

void sub_1001185F0()
{
  uint64_t v0 = *(void *)&in6addr_any.__u6_addr32[2];
  static IPv6Address.any = *(void *)in6addr_any.__u6_addr8;
  *(void *)algn_100488518 = v0;
  qword_100488520 = 0;
  unk_100488528 = 0;
}

uint64_t *IPv6Address.any.unsafeMutableAddressor()
{
  if (qword_10047BFC0 != -1) {
    swift_once();
  }
  return &static IPv6Address.any;
}

uint64_t static IPv6Address.any.getter()
{
  if (qword_10047BFC0 != -1) {
    swift_once();
  }
  uint64_t v0 = static IPv6Address.any;
  swift_bridgeObjectRetain();
  return v0;
}

void sub_1001186D8()
{
  uint64_t v0 = *(void *)&in6addr_any.__u6_addr32[2];
  static IPv6Address.broadcast = *(void *)in6addr_any.__u6_addr8;
  *(void *)algn_100488538 = v0;
  qword_100488540 = 0;
  unk_100488548 = 0;
}

uint64_t *IPv6Address.broadcast.unsafeMutableAddressor()
{
  if (qword_10047BFC8 != -1) {
    swift_once();
  }
  return &static IPv6Address.broadcast;
}

uint64_t static IPv6Address.broadcast.getter()
{
  if (qword_10047BFC8 != -1) {
    swift_once();
  }
  uint64_t v0 = static IPv6Address.broadcast;
  swift_bridgeObjectRetain();
  return v0;
}

Swift::Int IPv6Address.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v7 = sub_10011A3BC((uint64_t)v11, (uint64_t)&v12);
  unint64_t v9 = v8;
  Data.hash(into:)();
  sub_10000C970(v7, v9);
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001188B0()
{
  return IPv6Address.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void sub_1001188BC()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  v6[0] = *v0;
  v6[1] = v1;
  uint64_t v3 = sub_10011A3BC((uint64_t)v6, (uint64_t)&v7);
  unint64_t v5 = v4;
  Data.hash(into:)();
  sub_10000C970(v3, v5);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1001189A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  v8[0] = v1;
  v8[1] = v2;
  uint64_t v4 = sub_10011A3BC((uint64_t)v8, (uint64_t)&v9);
  unint64_t v6 = v5;
  Data.hash(into:)();
  sub_10000C970(v4, v6);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100118A8C()
{
  return IPv6Address.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100118A98()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  unint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v0;
  uint64_t v8 = *((void *)v0 + 2);
  uint64_t v9 = *((void *)v0 + 3);
  long long v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  v12[1] = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100071B44((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100118C6C(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t IPv6Address.init(from:)(void *a1)
{
  uint64_t result = sub_1001193E0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t IPv6Address.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100119174(a1, a2, a3);
}

uint64_t sub_100118CCC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001193E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100118CFC(void *a1)
{
  return sub_100119174(a1, *v1, v1[1]);
}

uint64_t Layer3Protocol.description.getter()
{
  uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Layer3Protocol.rawValue.getter(char a1)
{
  if (a1) {
    return 7365749;
  }
  else {
    return 7365492;
  }
}

void *Layer3Protocol.defaultValue.unsafeMutableAddressor()
{
  return &static Layer3Protocol.defaultValue;
}

CoreP2P::Layer3Protocol_optional __swiftcall Layer3Protocol.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044DCC8, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CoreP2P_Layer3Protocol_udp;
  }
  else {
    v4.value = CoreP2P_Layer3Protocol_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static Layer3Protocol.allCases.getter()
{
  return &off_100450200;
}

uint64_t sub_100118DF0(char *a1, char *a2)
{
  return sub_100041FA4(*a1, *a2);
}

uint64_t sub_100118DFC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044DCC8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100118E5C(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = 7365749;
  }
  else {
    uint64_t v2 = 7365492;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

void sub_100118E80(void *a1@<X8>)
{
  *a1 = &off_100450228;
}

Swift::Int sub_100118E90()
{
  return Hasher._finalize()();
}

uint64_t sub_100118EF4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100118F3C()
{
  return Hasher._finalize()();
}

uint64_t sub_100118F9C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100118FFC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10011904C()
{
  uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 != a5 || a2 != a6) {
    return 0;
  }
  uint64_t result = (a4 | a8) == 0;
  if (a4 && a8)
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_100119174(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v5 = sub_10011A3BC((uint64_t)v9, (uint64_t)v10);
  unint64_t v7 = v6;
  sub_100039448((uint64_t)v10, v11);
  sub_1000742DC();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  sub_10000C970(v5, v7);
  return sub_100010754((uint64_t)v10);
}

uint64_t _s7CoreP2P14Layer3ProtocolO8dnsLabelACSgSS_tcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  uint64_t v5 = sub_10011AD60(a1, a2);
  if (!v6) {
    goto LABEL_14;
  }
  if (v5 != 95 || v6 != 0xE100000000000000)
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_10;
    }
LABEL_14:
    v17._uint64_t countAndFlagsBits = a1;
    v17._object = (void *)a2;
    Swift::Int v18 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044DCC8, v17);
    swift_bridgeObjectRelease();
    if (v18 == 1) {
      unsigned int v15 = 1;
    }
    else {
      unsigned int v15 = 2;
    }
    BOOL v16 = v18 == 0;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_10:
  unint64_t v9 = String.index(after:)();
  sub_10011AF00(v9, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._fromSubstring(_:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  Swift::Int v14 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044DCC8, v13);
  swift_bridgeObjectRelease();
  if (v14 == 1) {
    unsigned int v15 = 1;
  }
  else {
    unsigned int v15 = 2;
  }
  BOOL v16 = v14 == 0;
LABEL_18:
  if (v16) {
    return 0;
  }
  else {
    return v15;
  }
}

uint64_t sub_1001193E0(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v4 = v10;
    sub_100039448((uint64_t)v9, v10);
    uint64_t v5 = UnkeyedDecodingContainer.decodeData(with:)(16, v4);
    unint64_t v7 = v6;
    sub_100013D44(v5, v6);
    uint64_t v3 = sub_1002577C8(v5, v7);
    sub_10000C970(v5, v7);
    sub_10000C970(v5, v7);
    sub_100010754((uint64_t)v9);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_100119600()
{
  unint64_t result = qword_10047FD70;
  if (!qword_10047FD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD70);
  }
  return result;
}

unint64_t sub_100119658()
{
  unint64_t result = qword_10047FD78;
  if (!qword_10047FD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD78);
  }
  return result;
}

uint64_t sub_1001196AC()
{
  return sub_100071B44(&qword_10047FD80, &qword_10047FD88);
}

unint64_t sub_1001196D8()
{
  unint64_t result = qword_10047FD90;
  if (!qword_10047FD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD90);
  }
  return result;
}

ValueMetadata *type metadata accessor for IPv4Address()
{
  return &type metadata for IPv4Address;
}

uint64_t initializeWithCopy for IPv6Address(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IPv6Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IPv6Address(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IPv6Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IPv6Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IPv6Address()
{
  return &type metadata for IPv6Address;
}

unsigned char *storeEnumTagSinglePayload for Layer3Protocol(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100119988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Layer3Protocol()
{
  return &type metadata for Layer3Protocol;
}

unint64_t sub_1001199C0()
{
  unint64_t result = qword_10047FD98;
  if (!qword_10047FD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD98);
  }
  return result;
}

uint64_t static DNSRecords.createPeerLossRecord(for:hostname:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v8 = WiFiAddress.ipv6LinkLocalAddress.getter(v7);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  a4[3] = (uint64_t)&type metadata for DNSRecords.AAAA;
  a4[4] = (uint64_t)&protocol witness table for DNSRecords.AAAA;
  uint64_t result = swift_allocObject();
  *a4 = result;
  *(unsigned char *)(result + 16) = 27;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(unsigned char *)(result + 40) = 1;
  *(void *)(result + 48) = v8;
  *(void *)(result + 56) = v10;
  *(void *)(result + 64) = v12;
  *(void *)(result + 72) = v14;
  return result;
}

uint64_t static DNSRecords.createRecord(with:value:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (a4 >> 60 != 15)
  {
    if (qword_10047BFE8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_38;
  }
  uint64_t v11 = 0;
  while (2)
  {
    if (qword_10047BFE0 != -1) {
      swift_once();
    }
    uint64_t v19 = 0;
    switch(*(void *)algn_10047FDA8 >> 62)
    {
      case 1:
        LODWORD(v19) = HIDWORD(qword_10047FDA0) - qword_10047FDA0;
        if (__OFSUB__(HIDWORD(qword_10047FDA0), qword_10047FDA0)) {
          goto LABEL_41;
        }
        uint64_t v19 = (int)v19;
        break;
      case 2:
        uint64_t v21 = *(void *)(qword_10047FDA0 + 16);
        uint64_t v20 = *(void *)(qword_10047FDA0 + 24);
        BOOL v15 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v15) {
          break;
        }
        goto LABEL_42;
      case 3:
        break;
      default:
        uint64_t v19 = algn_10047FDA8[6];
        break;
    }
    uint64_t v22 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v22) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_43;
        }
        uint64_t v22 = (int)v22;
LABEL_27:
        BOOL v15 = __OFADD__(v19, v22);
        uint64_t v25 = v19 + v22;
        if (v15)
        {
          __break(1u);
          goto LABEL_37;
        }
        BOOL v15 = __OFADD__(v25, v11);
        uint64_t v26 = v25 + v11;
        if (v15)
        {
LABEL_37:
          __break(1u);
LABEL_38:
          swift_once();
LABEL_4:
          uint64_t v12 = 0;
          switch(*(void *)algn_10047FDB8 >> 62)
          {
            case 1:
              LODWORD(v12) = HIDWORD(qword_10047FDB0) - qword_10047FDB0;
              if (__OFSUB__(HIDWORD(qword_10047FDB0), qword_10047FDB0)) {
                goto LABEL_45;
              }
              uint64_t v12 = (int)v12;
LABEL_9:
              uint64_t v16 = 0;
              switch(a4 >> 62)
              {
                case 1uLL:
                  LODWORD(v16) = HIDWORD(a3) - a3;
                  if (__OFSUB__(HIDWORD(a3), a3)) {
                    goto LABEL_47;
                  }
                  uint64_t v16 = (int)v16;
LABEL_14:
                  uint64_t v11 = v12 + v16;
                  if (!__OFADD__(v12, v16)) {
                    continue;
                  }
                  __break(1u);
                  break;
                case 2uLL:
                  uint64_t v18 = *(void *)(a3 + 16);
                  uint64_t v17 = *(void *)(a3 + 24);
                  BOOL v15 = __OFSUB__(v17, v18);
                  uint64_t v16 = v17 - v18;
                  if (!v15) {
                    goto LABEL_14;
                  }
                  goto LABEL_48;
                case 3uLL:
                  goto LABEL_14;
                default:
                  uint64_t v16 = BYTE6(a4);
                  goto LABEL_14;
              }
              break;
            case 2:
              uint64_t v14 = *(void *)(qword_10047FDB0 + 16);
              uint64_t v13 = *(void *)(qword_10047FDB0 + 24);
              BOOL v15 = __OFSUB__(v13, v14);
              uint64_t v12 = v13 - v14;
              if (!v15) {
                goto LABEL_9;
              }
              goto LABEL_46;
            case 3:
              goto LABEL_9;
            default:
              uint64_t v12 = algn_10047FDB8[6];
              goto LABEL_9;
          }
          goto LABEL_40;
        }
        if (v26 < 0)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
        }
        if (v26 <= 1024 || swift_stdlib_isStackAllocationSafe())
        {
          __chkstk_darwin();
          sub_100121C28((uint64_t)&v30 - v27, (uint64_t)&v30 + v26 - v27, a1, a2, a3, a4, (uint64_t *)v31);
          if (v5)
          {
            return swift_willThrow();
          }
          else
          {
            sub_10006EF50(v31, (uint64_t)v32);
            return sub_10006EF50(v32, (uint64_t)a5);
          }
        }
        else
        {
          uint64_t v29 = swift_slowAlloc();
          sub_100121C28(v29, v29 + v26, a1, a2, a3, a4, a5);
          return swift_slowDealloc();
        }
      case 2uLL:
        uint64_t v24 = *(void *)(a1 + 16);
        uint64_t v23 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v23, v24);
        uint64_t v22 = v23 - v24;
        if (!v15) {
          goto LABEL_27;
        }
        goto LABEL_44;
      case 3uLL:
        goto LABEL_27;
      default:
        uint64_t v22 = BYTE6(a2);
        goto LABEL_27;
    }
  }
}

BOOL static DNSRecords.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  return sub_10012625C(a1, a2, a3 & 0xFF01, a4, a5, a6 & 0xFF01);
}

uint64_t DNSRecords.TXT.keyData.getter()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  unsigned __int8 v5 = *(unsigned char *)(v0 + 32);
  __int16 v6 = *(unsigned __int8 *)(v0 + 33);
  sub_100127238(v1, v2);
  uint64_t v7 = sub_10011E7CC(15, v3, v4, v5 & 1u | (v6 << 8));
  unint64_t v9 = v8;
  sub_100125FAC(v7, v8);
  sub_10000C970(v7, v9);
  return 0;
}

uint64_t DNSRecords.TXT.valueData.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100013D44(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t DNSRecords.PTR.keyData.getter()
{
  return sub_10011E7CC(11, *(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t DNSRecords.PTR.valueData.getter()
{
  return sub_100126E00(*v0, v0[1]);
}

uint64_t DNSRecords.AAAA.keyData.getter()
{
  return DNSRecords.BrowseHost.keyData.getter(*(unsigned char *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t DNSRecords.AAAA.valueData.getter()
{
  long long v8 = *(_OWORD *)(v0 + 32);
  v7[3] = &type metadata for UnsafeRawBufferPointer;
  void v7[4] = &protocol witness table for UnsafeRawBufferPointer;
  v7[0] = &v8;
  v7[1] = &v9;
  uint64_t v1 = sub_1000369C4(v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unint64_t v2 = (unsigned char *)*v1;
  if (*v1 && (v3 = (unsigned char *)v1[1], uint64_t v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      uint64_t v5 = sub_100013D9C(v2, v3);
    }
    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      uint64_t v5 = sub_1001264EC((uint64_t)v2, (uint64_t)v3);
    }
    else
    {
      uint64_t v5 = sub_100126568((uint64_t)v2, (uint64_t)v3);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_100010754((uint64_t)v7);
  return v5;
}

uint64_t DNSRecords.SRV.keyData.getter()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  __int16 v5 = *(unsigned __int8 *)(v0 + 32);
  __int16 v6 = *(unsigned __int8 *)(v0 + 33);
  sub_100127238(v1, v2);
  uint64_t v7 = sub_10011E7CC(32, v3, v4, v5 | (unsigned __int16)(v6 << 8));
  unint64_t v9 = v8;
  sub_100125FAC(v7, v8);
  sub_10000C970(v7, v9);
  return 0;
}

uint64_t DNSRecords.SRV.valueData.getter()
{
  long long v17 = xmmword_1003B2440;
  unint64_t v1 = (int *)type metadata accessor for DNSRecords.SRV();
  LOWORD(v14[0]) = *(_WORD *)(v0 + v1[7]);
  uint64_t v2 = sub_10011A3BC((uint64_t)v14, (uint64_t)v14 + 2);
  unint64_t v4 = v3;
  sub_100125FAC(v2, v3);
  sub_10000C970(v2, v4);
  LOWORD(v14[0]) = *(_WORD *)(v0 + v1[8]);
  uint64_t v5 = sub_10011A3BC((uint64_t)v14, (uint64_t)v14 + 2);
  unint64_t v7 = v6;
  sub_100125FAC(v5, v6);
  sub_10000C970(v5, v7);
  LOWORD(v14[0]) = bswap32(NWEndpoint.Port.rawValue.getter()) >> 16;
  uint64_t v8 = sub_10011A3BC((uint64_t)v14, (uint64_t)v14 + 2);
  unint64_t v10 = v9;
  sub_100125FAC(v8, v9);
  sub_10000C970(v8, v10);
  sub_10011DE1C(*(void *)(v0 + v1[6]), *(void *)(v0 + v1[6] + 8));
  uint64_t v11 = sub_100010BCC(&qword_10047E738);
  uint64_t v15 = v11;
  uint64_t v12 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  uint64_t v16 = v12;
  LOBYTE(v14[0]) = -64;
  sub_1000369C4(v14, v11);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v14);
  uint64_t v15 = v11;
  uint64_t v16 = v12;
  LOBYTE(v14[0]) = 17;
  sub_1000369C4(v14, v11);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v14);
  return v17;
}

uint64_t NANSubscribe.Configuration.rangingMandatory.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t DNSRecords.AAAA.init(host:address:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(unsigned char *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  return result;
}

uint64_t sub_10011A3BC(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_1000369C4(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (unint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_100013D9C(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1001264EC((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_100126568((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_100010754((uint64_t)v8);
  return v6;
}

uint64_t sub_10011A478(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100010BCC((uint64_t *)&unk_1004882E0);
  if (swift_dynamicCast())
  {
    sub_10006EF50(v38, (uint64_t)&v41);
    sub_1000369C4(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    sub_100010754((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_1000380B4((uint64_t)v38, &qword_10047E758);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      unint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      unint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_1001266AC(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_100126710(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin();
  unint64_t v13 = (unint64_t)sub_10024B5A0((void *(*)(uint64_t *__return_ptr, char *, char *))sub_100128EFC);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_10024AF24(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_10024AF24(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_10000C95C(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_10000C95C((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_10011A9A8(uint64_t a1, uint64_t a2)
{
  v7[3] = &type metadata for UnsafeMutableRawBufferPointer;
  void v7[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v7[0] = a1;
  v7[1] = a2;
  unint64_t v2 = sub_1000369C4(v7, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (unsigned char *)v2[1];
    uint64_t v5 = (uint64_t)&v4[-v3];
    if (v4 == (unsigned char *)v3)
    {
      uint64_t v3 = 0;
    }
    else if (v5 <= 14)
    {
      uint64_t v3 = sub_100013D9C((unsigned char *)*v2, v4);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(bytes:length:)();
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v3 = swift_allocObject();
        *(void *)(v3 + 16) = 0;
        *(void *)(v3 + 24) = v5;
      }
      else
      {
        uint64_t v3 = v5 << 32;
      }
    }
  }
  sub_100010754((uint64_t)v7);
  return v3;
}

uint64_t sub_10011AAAC(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_1000369C4(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_100013D44(a1, a2);
      sub_100013D44(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      sub_100125EC4(v8, v13, &v27);
      sub_10000C970(v5, v6);
LABEL_27:
      sub_10000C970(a1, a2);
      uint64_t v24 = v27;
      sub_100010754((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_100013D44(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        BOOL v23 = v22;
      }
      else {
        BOOL v23 = 0;
      }
      sub_100125EC4(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_100013D44(a1, a2);
      unint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_100013D44(a1, a2);
      unint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_100125EC4(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_10011AD60(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_10011ADA8(uint64_t a1, unint64_t a2)
{
  int v2 = 1;
  unsigned __int8 v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a1;
      if ((int)a1 != a1 >> 32) {
        goto LABEL_15;
      }
      unsigned __int8 v3 = 0;
      return v3 | (v2 << 8);
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          if (v4 >= v5) {
            goto LABEL_23;
          }
          uint64_t v6 = __DataStorage._bytes.getter();
          if (!v6) {
            goto LABEL_25;
          }
          uint64_t v7 = v6;
          a1 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - a1;
          if (!__OFSUB__(v4, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_15:
        if (v4 < (int)a1 || v4 >= a1 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        uint64_t v9 = __DataStorage._bytes.getter();
        if (v9)
        {
          uint64_t v7 = v9;
          uint64_t v10 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - v10;
          if (!__OFSUB__(v4, v10))
          {
LABEL_19:
            int v2 = 0;
            unsigned __int8 v3 = *(unsigned char *)(v7 + v8);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x10011AEF0);
      }
      unsigned __int8 v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      int v2 = (a2 & 0xFF000000000000) == 0;
      if ((a2 & 0xFF000000000000) != 0) {
        unsigned __int8 v3 = a1;
      }
      else {
        unsigned __int8 v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

unint64_t sub_10011AF00(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_10011AF4C(char a1)
{
  uint64_t v4 = sub_100010BCC(&qword_10047E738);
  uint64_t v5 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  LOBYTE(v3[0]) = a1;
  sub_1000369C4(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return sub_100010754((uint64_t)v3);
}

uint64_t sub_10011B074(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x10011B0E0);
  }
  return result;
}

BOOL static DNSRecords.PTR.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return !StringProtocol.caseInsensitiveCompare<A>(_:)()
      && sub_10012625C(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 33) << 8));
}

uint64_t static DNSRecords.TXT.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 32);
  __int16 v6 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 32);
  __int16 v10 = *(unsigned __int8 *)(a2 + 33);
  sub_10001D82C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)()
    || !sub_10012625C(v13, v4, v5 & 1 | (v6 << 8), v7, v8, v9 & 1 | (v10 << 8)))
  {
    char v11 = 0;
  }
  else
  {
    char v11 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48));
  }
  return v11 & 1;
}

uint64_t AWDLActionFrame.ServiceResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v185 = a2;
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  v183 = (uint64_t *)((char *)&v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for NWEndpoint.Port();
  uint64_t v184 = *(void *)(v4 - 8);
  __chkstk_darwin();
  __int16 v6 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  uint64_t v8 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  char v11 = (uint64_t *)((char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v157 - v12);
  uint64_t v14 = a1[3];
  v186 = a1;
  sub_1000369C4(a1, v14);
  uint64_t v15 = v187;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v15) {
    goto LABEL_11;
  }
  v180 = v11;
  uint64_t v181 = v9;
  v187 = v8;
  v182 = v13;
  v178 = v6;
  uint64_t v179 = v4;
  sub_100039448((uint64_t)v198, v199);
  __int16 v16 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  if ((unsigned __int16)(v16 - 256) <= 0xFF01u)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    *(unsigned char *)(v17 + 16) = 2;
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v18 = (unsigned __int16)(v16 - 1);
  uint64_t v19 = v199;
  sub_100039448((uint64_t)v198, v199);
  uint64_t v20 = UnkeyedDecodingContainer.decodeData(with:)(v18, v19);
  unint64_t v176 = v21;
  unint64_t v177 = v20;
  sub_100039448((uint64_t)v198, v199);
  unsigned __int8 v22 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  char v23 = _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(v22);
  if (v23 == 65) {
    goto LABEL_5;
  }
  char v25 = v23;
  sub_100039448((uint64_t)v198, v199);
  unsigned __int16 v26 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  sub_100039448((uint64_t)v198, v199);
  unsigned __int16 v27 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v32 = v176;
  uint64_t v33 = v177;
  if (v26 <= v27 || (unsigned __int16 v34 = v26 - v27, v26 - v27 == 0xFFFF))
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v37 = 0;
    *(void *)(v37 + 8) = 0;
    *(unsigned char *)(v37 + 16) = 2;
    swift_willThrow();
    uint64_t v28 = v33;
    unint64_t v29 = v32;
    goto LABEL_9;
  }
  unint64_t v35 = v176 >> 62;
  uint64_t v36 = 0;
  switch(v176 >> 62)
  {
    case 1uLL:
      uint64_t v36 = (int)v177;
      break;
    case 2uLL:
      uint64_t v36 = *(void *)(v177 + 16);
      break;
    default:
      break;
  }
  uint64_t v175 = 0;
  if (v25 != 11)
  {
    unsigned __int8 v43 = Data.subscript.getter();
    uint64_t v44 = v36 + 1;
    if (!__OFADD__(v36, 1))
    {
      uint64_t v45 = v43;
      unint64_t v46 = sub_1000C06EC(v44, v33, v32);
      uint64_t v48 = v46;
      unint64_t v49 = v47;
      switch(v47 >> 62)
      {
        case 1uLL:
          unint64_t v53 = HIDWORD(v46);
          sub_10000C970(v46, v47);
          LODWORD(v50) = v53 - v48;
          if (__OFSUB__(v53, v48)) {
            goto LABEL_227;
          }
          uint64_t v50 = (int)v50;
          goto LABEL_33;
        case 2uLL:
          uint64_t v52 = *(void *)(v46 + 16);
          uint64_t v51 = *(void *)(v46 + 24);
          sub_10000C970(v46, v47);
          uint64_t v50 = v51 - v52;
          if (!__OFSUB__(v51, v52)) {
            goto LABEL_33;
          }
          __break(1u);
LABEL_29:
          sub_10000C970(v48, v49);
          if (!v45) {
            goto LABEL_34;
          }
          goto LABEL_156;
        case 3uLL:
          goto LABEL_29;
        default:
          sub_10000C970(v46, v47);
          uint64_t v50 = BYTE6(v49);
LABEL_33:
          if (v50 < v45) {
            goto LABEL_156;
          }
LABEL_34:
          uint64_t v54 = sub_10011B074(v44, v45, v177, v176);
          if (v54 < v44)
          {
            __break(1u);
            goto LABEL_218;
          }
          uint64_t v36 = v54;
          uint64_t v55 = Data._Representation.subscript.getter();
          unint64_t v57 = v56;
          static String.Encoding.utf8.getter();
          uint64_t v160 = String.init(data:encoding:)();
          uint64_t v59 = v58;
          LOBYTE(v66) = sub_10000C970(v55, v57);
          uint64_t v170 = v59;
          if (!v59) {
            goto LABEL_5;
          }
          switch((int)v35)
          {
            case 1:
              uint64_t v60 = (uint64_t)v177 >> 32;
              goto LABEL_154;
            case 2:
              uint64_t v60 = *(void *)(v177 + 24);
              goto LABEL_154;
            case 3:
              if (v36) {
                goto LABEL_42;
              }
              goto LABEL_155;
            default:
              uint64_t v60 = BYTE6(v176);
LABEL_154:
              if (v36 != v60) {
                goto LABEL_42;
              }
LABEL_155:
              swift_bridgeObjectRelease();
              break;
          }
LABEL_156:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v24 = 0;
          *(void *)(v24 + 8) = 0;
          break;
      }
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_208;
  }
  sub_100039448((uint64_t)v198, v199);
  uint64_t v38 = v175;
  unsigned __int8 v39 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  if (v38) {
    goto LABEL_8;
  }
  uint64_t v40 = v39;
  uint64_t v41 = v199;
  sub_100039448((uint64_t)v198, v199);
  uint64_t v42 = UnkeyedDecodingContainer.decodeData(with:)(v40, v41);
  uint64_t v175 = 0;
  uint64_t v61 = v42;
  unint64_t v63 = v62;
  static String.Encoding.utf8.getter();
  uint64_t v160 = String.init(data:encoding:)();
  uint64_t v65 = v64;
  LOBYTE(v66) = sub_10000C970(v61, v63);
  uint64_t v170 = v65;
  if (!v65)
  {
LABEL_5:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_1003B00B0;
LABEL_6:
    *(unsigned char *)(v24 + 16) = 2;
    swift_willThrow();
    goto LABEL_8;
  }
LABEL_42:
  int v67 = 0;
  uint64_t v158 = 0;
  uint64_t v44 = 0;
  uint64_t v172 = (uint64_t)v177 >> 32;
  uint64_t v174 = BYTE6(v176);
  uint64_t v168 = (int)v177;
  LODWORD(v159) = 2;
  unint64_t v166 = v177 >> 8;
  unint64_t v165 = v177 >> 16;
  unint64_t v164 = v177 >> 24;
  unint64_t v163 = HIDWORD(v177);
  unint64_t v162 = v177 >> 40;
  unint64_t v161 = HIWORD(v177);
  uint64_t v171 = v35;
  int64_t v167 = v36;
  while (2)
  {
    int v169 = v67;
    uint64_t v68 = v167;
LABEL_44:
    uint64_t v173 = v44;
    uint64_t v69 = v174;
    switch(v171)
    {
      case 1:
        uint64_t v69 = v172;
        goto LABEL_47;
      case 2:
        uint64_t v69 = *(void *)(v177 + 24);
        goto LABEL_47;
      case 3:
        uint64_t v66 = swift_bridgeObjectRelease();
        if (v36) {
          goto LABEL_249;
        }
        uint64_t v173 = 0;
        goto LABEL_159;
      default:
LABEL_47:
        if (v68 == v69) {
          goto LABEL_158;
        }
        if (v35)
        {
          if (v35 == 1)
          {
            if (v68 < v168 || v68 >= v172) {
              goto LABEL_223;
            }
            uint64_t v70 = __DataStorage._bytes.getter();
            if (!v70)
            {
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
              JUMPOUT(0x10011CCC4);
            }
            uint64_t v44 = v70;
            uint64_t v66 = __DataStorage._offset.getter();
            uint64_t v71 = v68 - v66;
            if (__OFSUB__(v68, v66)) {
              goto LABEL_224;
            }
          }
          else
          {
            if (v68 < *(void *)(v177 + 16)) {
              goto LABEL_222;
            }
            if (v68 >= *(void *)(v177 + 24)) {
              goto LABEL_225;
            }
            uint64_t v73 = __DataStorage._bytes.getter();
            if (!v73) {
              goto LABEL_259;
            }
            uint64_t v44 = v73;
            uint64_t v66 = __DataStorage._offset.getter();
            uint64_t v71 = v68 - v66;
            if (__OFSUB__(v68, v66)) {
              goto LABEL_226;
            }
          }
          unsigned int v72 = *(unsigned __int8 *)(v44 + v71);
        }
        else
        {
          if (v68 >= v174)
          {
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
            goto LABEL_234;
          }
          char v188 = v177;
          char v189 = v166;
          char v190 = v165;
          char v191 = v164;
          char v192 = v163;
          char v193 = v162;
          char v194 = v161;
          char v195 = HIBYTE(v177);
          int v196 = v176;
          __int16 v197 = WORD2(v176);
          unsigned int v72 = *(&v188 + v68);
        }
        uint64_t v74 = v68 + 1;
        if (v72 != 192)
        {
          if (v72 > 0x3F)
          {
LABEL_157:
            swift_bridgeObjectRelease();
LABEL_158:
            swift_bridgeObjectRelease();
LABEL_159:
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v111 = 0;
            *(void *)(v111 + 8) = 0;
            goto LABEL_216;
          }
          if (v35)
          {
            uint64_t v83 = v172;
            uint64_t v84 = v168;
            if (v35 != 1)
            {
              uint64_t v84 = *(void *)(v177 + 16);
              uint64_t v83 = *(void *)(v177 + 24);
            }
          }
          else
          {
            uint64_t v83 = v174;
            uint64_t v84 = v171;
          }
          if (v83 <= v68 || v83 < v84)
          {
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            if (v175
              || (uint64_t v142 = v66,
                  uint64_t v143 = v199,
                  sub_100039448((uint64_t)v198, v199),
                  uint64_t v144 = v175,
                  uint64_t v66 = UnkeyedDecodingContainer.decodeData(with:)(v142, v143),
                  (uint64_t v175 = v144) != 0))
            {
              (*(void (**)(char *, uint64_t))(v184 + 8))(v178, v179);
              swift_bridgeObjectRelease();
              sub_10000C970(v177, v176);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_22;
            }
LABEL_253:
            uint64_t v145 = v66;
            unint64_t v146 = v90;
            uint64_t v147 = sub_10011A478(0x6C61636F6CuLL, 0xE500000000000000);
            unint64_t v149 = v148;
            char v150 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v145, v146, v147, v148);
            sub_10000C970(v147, v149);
            sub_10000C970(v145, v146);
            if (v150)
            {
              swift_bridgeObjectRelease();
              sub_10000C970(v177, v176);
              goto LABEL_255;
            }
LABEL_256:
            swift_bridgeObjectRelease();
LABEL_257:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000F000();
            swift_allocError();
            *(_OWORD *)uint64_t v156 = xmmword_1003B00B0;
            *(unsigned char *)(v156 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v177, v176);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v184 + 8))(v178, v179);
            goto LABEL_10;
          }
          uint64_t v44 = v72;
          unint64_t v85 = Data._Representation.subscript.getter();
          switch(v86 >> 62)
          {
            case 1uLL:
              int v91 = v85;
              int64_t v167 = HIDWORD(v85);
              uint64_t v66 = sub_10000C970(v85, v86);
              LODWORD(v88) = v167 - v91;
              if (__OFSUB__(v167, v91)) {
                goto LABEL_251;
              }
              uint64_t v88 = (int)v88;
LABEL_108:
              if (v88 < v44) {
                goto LABEL_157;
              }
LABEL_111:
              int64_t v167 = v74 + v44;
              if (__OFADD__(v74, v44)) {
                goto LABEL_242;
              }
              if (v35)
              {
                uint64_t v92 = v172;
                int64_t v93 = v168;
                if (v35 != 1)
                {
                  int64_t v93 = *(void *)(v177 + 16);
                  uint64_t v92 = *(void *)(v177 + 24);
                }
              }
              else
              {
                uint64_t v92 = v174;
                int64_t v93 = v171;
              }
              if (v92 < v167 || v167 < v93) {
                goto LABEL_243;
              }
              if (v167 <= v68) {
                goto LABEL_244;
              }
              uint64_t v94 = Data._Representation.subscript.getter();
              unint64_t v96 = v95;
              static String.Encoding.utf8.getter();
              uint64_t v48 = String.init(data:encoding:)();
              unint64_t v98 = v97;
              sub_10000C970(v94, v96);
              if (!v98) {
                goto LABEL_157;
              }
              uint64_t v44 = v98;
              if (!v173)
              {
                swift_bridgeObjectRetain();
                uint64_t v68 = v167;
LABEL_132:
                if (v159 == 2)
                {
                  LODWORD(v159) = 2;
                  int v67 = v169;
                }
                else
                {
                  if (v169)
                  {
                    LODWORD(v159) = v159 & 1;
                    uint64_t v158 = v48;
                    goto LABEL_168;
                  }
                  int v67 = 0;
                }
                uint64_t v158 = v48;
LABEL_137:
                int64_t v167 = v68;
                goto LABEL_138;
              }
              if (v159 != 2)
              {
                if (v169)
                {
LABEL_213:
                  swift_bridgeObjectRelease();
                  goto LABEL_214;
                }
LABEL_218:
                if (v48 == 0x6C61636F6CLL && v44 == 0xE500000000000000)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_235;
                }
LABEL_234:
                char v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v135) {
                  goto LABEL_235;
                }
                goto LABEL_214;
              }
              if ((v98 & 0x2000000000000000) != 0) {
                uint64_t v99 = HIBYTE(v98) & 0xF;
              }
              else {
                uint64_t v99 = v48 & 0xFFFFFFFFFFFFLL;
              }
              if (!v99) {
                goto LABEL_213;
              }
              uint64_t v100 = 7;
              if ((((unint64_t)v44 >> 60) & ((v48 & 0x800000000000000) == 0)) != 0) {
                uint64_t v100 = 11;
              }
              uint64_t v159 = v100;
              swift_bridgeObjectRetain();
              if (String.subscript.getter() == 95 && v101 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
LABEL_140:
                uint64_t v66 = String.index(after:)();
                if (4 * v99 < (unint64_t)v66 >> 14)
                {
                  __break(1u);
LABEL_249:
                  __break(1u);
LABEL_250:
                  __break(1u);
LABEL_251:
                  __break(1u);
LABEL_252:
                  __break(1u);
                  goto LABEL_253;
                }
                String.subscript.getter();
                uint64_t v159 = v102;
                uint64_t v157 = v103;
                swift_bridgeObjectRelease();
                uint64_t v104 = static String._fromSubstring(_:)();
                v106 = v105;
                swift_bridgeObjectRelease();
                v107._uint64_t countAndFlagsBits = v104;
                v107._object = v106;
                Swift::Int v108 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FD40, v107);
                swift_bridgeObjectRelease();
                if (v108)
                {
                  if (v108 != 1) {
                    goto LABEL_213;
                  }
                  LODWORD(v159) = 1;
                }
                else
                {
                  LODWORD(v159) = 0;
                }
                swift_bridgeObjectRelease();
LABEL_146:
                if (v169) {
                  goto LABEL_167;
                }
                int v67 = 0;
                uint64_t v44 = v173;
                goto LABEL_138;
              }
              LODWORD(v157) = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v157) {
                goto LABEL_140;
              }
              v109._uint64_t countAndFlagsBits = v48;
              v109._object = (void *)v44;
              Swift::Int v110 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FD90, v109);
              swift_bridgeObjectRelease();
              if (v110)
              {
                if (v110 != 1) {
                  goto LABEL_213;
                }
                swift_bridgeObjectRelease();
                LODWORD(v159) = 1;
                goto LABEL_146;
              }
              swift_bridgeObjectRelease();
              int v67 = 0;
              uint64_t v44 = v173;
              LODWORD(v159) = 0;
              if (v169)
              {
                LODWORD(v159) = 0;
                goto LABEL_167;
              }
LABEL_138:
              swift_bridgeObjectRetain();
              LOBYTE(v66) = swift_bridgeObjectRelease();
              break;
            case 2uLL:
              uint64_t v89 = *(void *)(v85 + 16);
              int64_t v167 = *(void *)(v85 + 24);
              uint64_t v66 = sub_10000C970(v85, v86);
              uint64_t v88 = v167 - v89;
              if (!__OFSUB__(v167, v89)) {
                goto LABEL_108;
              }
              goto LABEL_252;
            case 3uLL:
              LOBYTE(v66) = sub_10000C970(v85, v86);
              if (!v72) {
                goto LABEL_111;
              }
              goto LABEL_157;
            default:
              unsigned __int8 v87 = BYTE6(v86);
              LOBYTE(v66) = sub_10000C970(v85, v86);
              uint64_t v88 = v87;
              goto LABEL_108;
          }
          continue;
        }
        uint64_t v75 = v174;
        if (v35)
        {
          uint64_t v75 = v172;
          if (v35 != 1) {
            uint64_t v75 = *(void *)(v177 + 24);
          }
        }
        if (v74 == v75) {
          goto LABEL_157;
        }
        if (v35)
        {
          if (v35 == 1)
          {
            if (v74 < v168 || v74 >= v172) {
              goto LABEL_230;
            }
            uint64_t v76 = __DataStorage._bytes.getter();
            if (!v76) {
              goto LABEL_260;
            }
            uint64_t v77 = v76;
            uint64_t v78 = __DataStorage._offset.getter();
            uint64_t v79 = v74 - v78;
            if (__OFSUB__(v74, v78)) {
              goto LABEL_232;
            }
          }
          else
          {
            if (v74 < *(void *)(v177 + 16)) {
              goto LABEL_229;
            }
            if (v74 >= *(void *)(v177 + 24)) {
              goto LABEL_231;
            }
            uint64_t v81 = __DataStorage._bytes.getter();
            if (!v81) {
              goto LABEL_261;
            }
            uint64_t v77 = v81;
            uint64_t v82 = __DataStorage._offset.getter();
            uint64_t v79 = v74 - v82;
            if (__OFSUB__(v74, v82)) {
              goto LABEL_233;
            }
          }
          char v80 = *(unsigned char *)(v77 + v79);
        }
        else
        {
          if (v74 >= v174) {
            goto LABEL_228;
          }
          char v188 = v177;
          char v189 = v166;
          char v190 = v165;
          char v191 = v164;
          char v192 = v163;
          char v193 = v162;
          char v194 = v161;
          char v195 = HIBYTE(v177);
          int v196 = v176;
          __int16 v197 = WORD2(v176);
          char v80 = *(&v188 + v68 + 1);
        }
        LOBYTE(v66) = sub_100126DE8(v80);
        v68 += 2;
        if (v66 != 11)
        {
          switch((char)v66)
          {
            case 0:
              LODWORD(v174) = 0;
              goto LABEL_177;
            case 1:
              LODWORD(v174) = 1;
LABEL_177:
              uint64_t v44 = 0xE800000000000000;
              uint64_t v113 = 0x79616C707269615FLL;
              goto LABEL_178;
            case 2:
              if (v173) {
                goto LABEL_214;
              }
              uint64_t v48 = 0x79616C707269615FLL;
              uint64_t v44 = 0xE800000000000000;
              goto LABEL_132;
            case 3:
              LODWORD(v174) = 0;
              goto LABEL_172;
            case 4:
              LODWORD(v174) = 1;
LABEL_172:
              uint64_t v44 = 0xE500000000000000;
              uint64_t v113 = 0x706F61725FLL;
              goto LABEL_178;
            case 5:
              if (v173) {
                goto LABEL_214;
              }
              uint64_t v48 = 0x706F61725FLL;
              uint64_t v44 = 0xE500000000000000;
              goto LABEL_132;
            case 6:
              LODWORD(v174) = 0;
              goto LABEL_174;
            case 7:
              LODWORD(v174) = 1;
LABEL_174:
              uint64_t v44 = 0xE800000000000000;
              uint64_t v113 = 0x706F72647269615FLL;
LABEL_178:
              uint64_t v158 = v113;
              swift_bridgeObjectRelease();
              if (v173) {
                BOOL v114 = 0;
              }
              else {
                BOOL v114 = v159 == 2;
              }
              int v115 = !v114;
              if ((v115 | v169)) {
                goto LABEL_214;
              }
              uint64_t v173 = 0;
              goto LABEL_186;
            case 8:
              if (v173) {
                goto LABEL_214;
              }
              uint64_t v48 = 0x706F72647269615FLL;
              uint64_t v44 = 0xE800000000000000;
              goto LABEL_132;
            case 9:
              if (!v173 || v159 != 2) {
                goto LABEL_214;
              }
              LODWORD(v159) = 0;
              goto LABEL_167;
            case 10:
              if (!v173 || v159 != 2) {
                goto LABEL_214;
              }
              int v112 = 1;
              goto LABEL_166;
            case 11:
              goto LABEL_261;
            case 12:
            case 13:
              goto LABEL_214;
            default:
              goto LABEL_157;
          }
        }
        uint64_t v44 = 0;
        int v169 = 1;
        if (!v173) {
          goto LABEL_44;
        }
        if (v159 == 2)
        {
          LODWORD(v159) = 2;
          int v67 = 1;
          uint64_t v44 = v173;
          goto LABEL_137;
        }
LABEL_235:
        int v112 = v159 & 1;
LABEL_166:
        LODWORD(v159) = v112;
LABEL_167:
        uint64_t v44 = v173;
LABEL_168:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        LODWORD(v174) = v159;
        uint64_t v173 = v44;
LABEL_186:
        switch(v25)
        {
          case 32:
            sub_100039448((uint64_t)v198, v199);
            uint64_t v118 = v175;
            unsigned __int16 v119 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            uint64_t v36 = v118;
            if (v118) {
              goto LABEL_211;
            }
            unsigned __int16 v34 = v119;
            sub_100039448((uint64_t)v198, v199);
            LODWORD(v180) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            sub_100039448((uint64_t)v198, v199);
            dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            v120 = (void (*)(void, void, void))v183;
            NWEndpoint.Port.init(rawValue:)();
            if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v184 + 48))(v120, 1, v179) == 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000380B4((uint64_t)v183, &qword_10047CEF0);
              goto LABEL_215;
            }
LABEL_208:
            v131 = (void (*)(void, void, void))v183;
            v183 = *(void **)(v184 + 32);
            ((void (*)(char *, void, uint64_t))v183)(v178, v131, v179);
            sub_100039448((uint64_t)v198, v199);
            unsigned __int8 v132 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            if (!v36)
            {
              uint64_t v133 = v132;
              uint64_t v134 = v199;
              sub_100039448((uint64_t)v198, v199);
              uint64_t v136 = UnkeyedDecodingContainer.decodeData(with:)(v133, v134);
              unint64_t v138 = v137;
              static String.Encoding.utf8.getter();
              uint64_t v172 = String.init(data:encoding:)();
              v140 = v139;
              sub_10000C970(v136, v138);
              v187 = v140;
              if (!v140) {
                goto LABEL_257;
              }
              sub_100039448((uint64_t)v198, v199);
              int v141 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              sub_100039448((uint64_t)v198, v199);
              LOBYTE(v66) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              uint64_t v175 = 0;
              if (v141 != 192) {
                goto LABEL_245;
              }
              if (v66 != 17 && v66 != 12) {
                goto LABEL_256;
              }
              sub_10000C970(v177, v176);
              swift_bridgeObjectRelease();
LABEL_255:
              v151 = (int *)type metadata accessor for DNSRecords.SRV();
              v152 = v182;
              ((void (*)(char *, char *, uint64_t))v183)((char *)v182 + v151[5], v178, v179);
              uint64_t v153 = v170;
              uint64_t *v152 = v160;
              v152[1] = v153;
              v152[2] = v158;
              v152[3] = v44;
              *((unsigned char *)v152 + 32) = v174;
              *((unsigned char *)v152 + 33) = 1;
              v154 = (uint64_t *)((char *)v152 + v151[6]);
              v155 = v187;
              uint64_t *v154 = v172;
              v154[1] = (uint64_t)v155;
              *(_WORD *)((char *)v152 + v151[7]) = v34;
              *(_WORD *)((char *)v152 + v151[8]) = (_WORD)v180;
LABEL_190:
              swift_storeEnumTagMultiPayload();
LABEL_204:
              sub_100010754((uint64_t)v198);
              sub_1001271A4((uint64_t)v182, v185, type metadata accessor for AWDLActionFrame.ServiceResponse);
              return sub_100010754((uint64_t)v186);
            }
            (*(void (**)(char *, uint64_t))(v184 + 8))(v178, v179);
LABEL_211:
            swift_bridgeObjectRelease();
            sub_10000C970(v177, v176);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100010754((uint64_t)v198);
            uint64_t v30 = (uint64_t)v186;
            return sub_100010754(v30);
          case 15:
            uint64_t v121 = v199;
            sub_100039448((uint64_t)v198, v199);
            uint64_t v122 = v175;
            uint64_t v66 = UnkeyedDecodingContainer.decodeData(with:)(v34, v121);
            uint64_t v175 = v122;
            if (v122)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10000C970(v177, v176);
LABEL_22:
              sub_100010754((uint64_t)v198);
              uint64_t v30 = (uint64_t)v186;
              return sub_100010754(v30);
            }
            unint64_t v124 = v123;
            uint64_t v125 = v66;
            switch(v123 >> 62)
            {
              case 1uLL:
                uint64_t v66 = (int)v66;
                uint64_t v90 = v125 >> 32;
                goto LABEL_202;
              case 2uLL:
                uint64_t v66 = *(void *)(v66 + 16);
                uint64_t v90 = *(void *)(v125 + 24);
LABEL_202:
                if (v90 >= v66) {
                  goto LABEL_203;
                }
                goto LABEL_250;
              default:
LABEL_203:
                uint64_t v126 = Data.subdata(in:)();
                uint64_t v128 = v127;
                swift_bridgeObjectRelease();
                sub_10000C970(v177, v176);
                sub_10000C970(v125, v124);
                uint64_t v129 = (uint64_t)v180;
                uint64_t v130 = v170;
                uint64_t *v180 = v160;
                *(void *)(v129 + 8) = v130;
                *(void *)(v129 + 16) = v158;
                *(void *)(v129 + 24) = v44;
                *(unsigned char *)(v129 + 32) = v174;
                *(unsigned char *)(v129 + 33) = 1;
                *(void *)(v129 + 40) = v126;
                *(void *)(v129 + 48) = v128;
                swift_storeEnumTagMultiPayload();
                sub_1001271A4(v129, (uint64_t)v182, type metadata accessor for AWDLActionFrame.ServiceResponse);
                break;
            }
            goto LABEL_204;
          case 11:
            swift_bridgeObjectRelease();
            sub_10000C970(v177, v176);
            v116 = v182;
            uint64_t v117 = v170;
            uint64_t *v182 = v160;
            v116[1] = v117;
            v116[2] = v158;
            v116[3] = v44;
            *((unsigned char *)v116 + 32) = v174;
            *((unsigned char *)v116 + 33) = 1;
            goto LABEL_190;
        }
LABEL_214:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_215:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v111 = xmmword_1003B00B0;
LABEL_216:
        *(unsigned char *)(v111 + 16) = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_8:
        unint64_t v29 = v176;
        uint64_t v28 = v177;
LABEL_9:
        sub_10000C970(v28, v29);
LABEL_10:
        sub_100010754((uint64_t)v198);
LABEL_11:
        uint64_t v30 = (uint64_t)v186;
        return sub_100010754(v30);
    }
  }
}

uint64_t AWDLActionFrame.ServiceResponse.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v81 = a1;
  uint64_t v82 = type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  __int16 v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryEncoder();
  uint64_t v10 = swift_allocObject();
  long long v86 = xmmword_1003B2440;
  *(_OWORD *)(v10 + 16) = xmmword_1003B2440;
  uint64_t v80 = v10 + 16;
  *(void *)(v10 + 32) = v9;
  unint64_t v11 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v86;
  uint64_t v79 = v12 + 16;
  *(void *)(v12 + 32) = v11;
  uint64_t v13 = (void *)swift_allocObject();
  v13[5] = &type metadata for BinaryEncoder.UnkeyedContainer;
  unint64_t v14 = sub_100088B84();
  *(void *)&long long v86 = v10;
  v13[2] = v10;
  uint64_t v83 = v13 + 2;
  unint64_t v85 = v13;
  v13[6] = v14;
  sub_100127140(v4, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v84 = v12;
    unint64_t v24 = *(void *)v8;
    unint64_t v23 = *((void *)v8 + 1);
    unint64_t v25 = *((void *)v8 + 2);
    unint64_t v26 = *((void *)v8 + 3);
    __int16 v27 = v8[32] | (v8[33] << 8);
    uint64_t v28 = v86;
    swift_retain();
    uint64_t v29 = (uint64_t)v85;
    sub_10012599C(v25, v26, v27, (uint64_t)v85);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    uint64_t v94 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v95 = v14;
    *(void *)&long long v93 = v84;
    uint64_t v34 = (uint64_t)v83;
    swift_beginAccess();
    swift_retain();
    sub_100010754(v34);
    sub_10006EF50(&v93, v34);
    sub_1001253AC(v24, v23, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_100039448(v34, *(void *)(v29 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    swift_beginAccess();
    sub_100039448(v34, *(void *)(v29 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    int v43 = 11;
LABEL_14:
    sub_1000369C4(v81, v81[3]);
    dispatch thunk of Encoder.unkeyedContainer()();
    uint64_t v44 = (uint64_t)v83;
    swift_beginAccess();
    sub_100010754(v44);
    sub_10006EF50(&v93, v44);
    swift_beginAccess();
    uint64_t v45 = *(void *)(v28 + 16);
    unint64_t v46 = *(void *)(v28 + 24);
    uint64_t v47 = 0;
    switch(v46 >> 62)
    {
      case 1uLL:
        LODWORD(v47) = HIDWORD(v45) - v45;
        if (__OFSUB__(HIDWORD(v45), v45)) {
          goto LABEL_31;
        }
        uint64_t v47 = (int)v47;
LABEL_19:
        unint64_t v55 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
        }
        if ((v55 & 0x8000000000000000) != 0 || v55 >= 0x10000) {
          goto LABEL_35;
        }
        break;
      case 2uLL:
        uint64_t v53 = v45 + 16;
        uint64_t v52 = *(void *)(v45 + 16);
        uint64_t v51 = *(void *)(v53 + 8);
        BOOL v54 = __OFSUB__(v51, v52);
        uint64_t v47 = v51 - v52;
        if (!v54) {
          goto LABEL_19;
        }
        goto LABEL_32;
      case 3uLL:
        goto LABEL_19;
      default:
        uint64_t v47 = BYTE6(v46);
        goto LABEL_19;
    }
    uint64_t v56 = (uint64_t)v83;
    swift_beginAccess();
    uint64_t v57 = (uint64_t)v85;
    sub_100039448(v56, v85[5]);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    LODWORD(v82) = v43;
    swift_endAccess();
    unint64_t v59 = *(void *)(v86 + 24);
    uint64_t v89 = *(void *)(v86 + 16);
    uint64_t v58 = v89;
    unint64_t v90 = v59;
    swift_beginAccess();
    sub_100039448(v56, *(void *)(v57 + 40));
    sub_100013D44(v58, v59);
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    swift_endAccess();
    sub_10000C970(v58, v59);
    uint64_t v60 = (uint64_t)v85;
    switch((int)v82)
    {
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        goto LABEL_36;
      default:
        uint64_t v65 = (uint64_t)v83;
        swift_beginAccess();
        sub_100039448(v65, *(void *)(v60 + 40));
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        swift_endAccess();
        swift_beginAccess();
        uint64_t v66 = v84;
        uint64_t v67 = *(void *)(v84 + 16);
        switch(*(void *)(v84 + 24) >> 62)
        {
          case 1:
            BOOL v54 = __OFSUB__(HIDWORD(v67), v67);
            int v68 = HIDWORD(v67) - v67;
            if (v54)
            {
              __break(1u);
LABEL_34:
              __break(1u);
            }
            else
            {
              unint64_t v69 = v68;
LABEL_27:
              if ((v69 & 0x8000000000000000) == 0 && v69 < 0x10000)
              {
LABEL_29:
                uint64_t v73 = (uint64_t)v83;
                swift_beginAccess();
                sub_100039448(v73, *(void *)(v60 + 40));
                dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                swift_endAccess();
                swift_beginAccess();
                sub_100039448(v73, *(void *)(v60 + 40));
                dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                swift_endAccess();
                unint64_t v75 = *(void *)(v66 + 24);
                uint64_t v87 = *(void *)(v66 + 16);
                uint64_t v74 = v87;
                unint64_t v88 = v75;
                swift_beginAccess();
                sub_100039448(v73, *(void *)(v60 + 40));
                sub_100013D44(v74, v75);
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                swift_endAccess();
                swift_release();
                swift_release();
                sub_10000C970(v74, v75);
                return swift_release();
              }
            }
LABEL_35:
            _assertionFailure(_:_:file:line:flags:)();
LABEL_36:
            __break(1u);
            JUMPOUT(0x10011DDA4);
          case 2:
            uint64_t v72 = v67 + 16;
            uint64_t v70 = *(void *)(v67 + 16);
            uint64_t v71 = *(void *)(v72 + 8);
            unint64_t v69 = v71 - v70;
            if (!__OFSUB__(v71, v70)) {
              goto LABEL_27;
            }
            goto LABEL_34;
          default:
            goto LABEL_29;
        }
    }
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1001271A4((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    unint64_t v30 = *(void *)v6;
    unint64_t v31 = *((void *)v6 + 1);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v32 = (uint64_t)v85;
    sub_1001253AC(v30, v31, (uint64_t)v85);
    if (v3)
    {
      sub_1000361F0((uint64_t)v6);
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t v84 = v12;
    swift_bridgeObjectRelease();
    unint64_t v35 = *((void *)v6 + 2);
    unint64_t v36 = *((void *)v6 + 3);
    __int16 v37 = v6[32] | (v6[33] << 8);
    swift_bridgeObjectRetain();
    sub_10012599C(v35, v36, v37, v32);
    swift_bridgeObjectRelease();
    uint64_t v94 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v95 = v14;
    *(void *)&long long v93 = v84;
    uint64_t v42 = (uint64_t)v83;
    swift_beginAccess();
    swift_retain();
    sub_100010754(v42);
    sub_10006EF50(&v93, v42);
    swift_beginAccess();
    sub_100039448(v42, *(void *)(v32 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    swift_beginAccess();
    sub_100039448(v42, *(void *)(v32 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    LOWORD(v93) = bswap32(NWEndpoint.Port.rawValue.getter()) >> 16;
    uint64_t v48 = sub_10011A3BC((uint64_t)&v93, (uint64_t)&v93 + 2);
    unint64_t v50 = v49;
    uint64_t v91 = v48;
    unint64_t v92 = v49;
    swift_beginAccess();
    sub_100039448(v42, *(void *)(v32 + 40));
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    swift_endAccess();
    sub_10000C970(v48, v50);
    uint64_t v61 = (unint64_t *)&v6[*(int *)(v82 + 24)];
    unint64_t v63 = *v61;
    unint64_t v62 = v61[1];
    swift_bridgeObjectRetain();
    sub_1001253AC(v63, v62, v32);
    swift_bridgeObjectRelease();
    uint64_t v64 = (uint64_t)v83;
    swift_beginAccess();
    sub_100039448(v64, *(void *)(v32 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    swift_beginAccess();
    sub_100039448(v64, *(void *)(v32 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    swift_endAccess();
    sub_1000361F0((uint64_t)v6);
    int v43 = 32;
    goto LABEL_12;
  }
  uint64_t v84 = v12;
  unint64_t v16 = *(void *)v8;
  unint64_t v17 = *((void *)v8 + 1);
  unint64_t v78 = *((void *)v8 + 2);
  uint64_t v82 = *((void *)v8 + 3);
  __int16 v18 = v8[32];
  __int16 v19 = v8[33];
  uint64_t v21 = *((void *)v8 + 5);
  unint64_t v20 = *((void *)v8 + 6);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = (uint64_t)v85;
  sub_1001253AC(v16, v17, (uint64_t)v85);
  if (!v3)
  {
    uint64_t v76 = v21;
    unint64_t v77 = v20;
    swift_bridgeObjectRelease();
    unint64_t v33 = v82;
    swift_bridgeObjectRetain();
    sub_10012599C(v78, v33, v18 | (v19 << 8), v22);
    swift_bridgeObjectRelease();
    uint64_t v94 = &type metadata for BinaryEncoder.UnkeyedContainer;
    unint64_t v95 = v14;
    *(void *)&long long v93 = v84;
    uint64_t v39 = (uint64_t)v83;
    swift_beginAccess();
    swift_retain();
    sub_100010754(v39);
    sub_10006EF50(&v93, v39);
    uint64_t v40 = v76;
    unint64_t v41 = v77;
    uint64_t v91 = v76;
    unint64_t v92 = v77;
    swift_beginAccess();
    sub_100039448(v39, *(void *)(v22 + 40));
    sub_100013D44(v40, v41);
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C970(v40, v41);
    sub_10000C970(v40, v41);
    int v43 = 15;
LABEL_12:
    uint64_t v28 = v86;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  sub_10000C970(v21, v20);
  return swift_release();
}

uint64_t sub_10011DE1C(unint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10011A478(a1, a2);
  unint64_t v5 = v4 >> 62;
  uint64_t v6 = v8;
  unint64_t v7 = v4;
  LOBYTE(v8) = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(v6) - v6;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 < 64)
      {
        if (!v5)
        {
          LOBYTE(v8) = BYTE6(v4);
LABEL_15:
          sub_10011AF4C(v8);
          sub_100013D44(v6, v7);
          sub_100125FAC(v6, v7);
          sub_10000C970(v6, v7);
          goto LABEL_16;
        }
        if (v5 != 1)
        {
          uint64_t v14 = *(void *)(v6 + 16);
          uint64_t v13 = *(void *)(v6 + 24);
          unint64_t v8 = v13 - v14;
          if (!__OFSUB__(v13, v14)) {
            goto LABEL_13;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        if (!__OFSUB__(HIDWORD(v6), v6))
        {
          unint64_t v8 = HIDWORD(v6) - (int)v6;
LABEL_13:
          if ((v8 & 0x8000000000000000) == 0 && v8 < 0x100) {
            goto LABEL_15;
          }
LABEL_23:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10011DFE0);
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
LABEL_16:
      return sub_10000C970(v6, v7);
    case 2uLL:
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v9 = BYTE6(v4);
      goto LABEL_6;
  }
}

uint64_t DNSRecords.RecordType.rawValue.getter(char a1)
{
  return word_1003BF024[a1];
}

uint64_t sub_10011E004()
{
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  __int16 v5 = *(unsigned __int8 *)(v0 + 40);
  __int16 v6 = *(unsigned __int8 *)(v0 + 41);
  char v7 = *(unsigned char *)v0;
  sub_100127238(v1, v2);
  uint64_t v8 = sub_10011E7CC(v7, v3, v4, v5 | (unsigned __int16)(v6 << 8));
  unint64_t v10 = v9;
  sub_100125FAC(v8, v9);
  sub_10000C970(v8, v10);
  return 0;
}

uint64_t sub_10011E094()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_10011E09C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.Identifier.domainName.getter()
{
  return 0x6C61636F6CLL;
}

uint64_t DNSRecords.BrowseHost.keyData.getter(char a1, unint64_t a2, unint64_t a3, char a4)
{
  long long v15 = xmmword_1003B2440;
  sub_100127238(a2, a3);
  uint64_t v6 = sub_100010BCC(&qword_10047E738);
  uint64_t v13 = v6;
  uint64_t v7 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  uint64_t v14 = v7;
  LOBYTE(v12[0]) = -64;
  sub_1000369C4(v12, v6);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v12);
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  LOBYTE(v12[0]) = 17;
  sub_1000369C4(v12, v6);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v12);
  LOWORD(v12[0]) = word_1003BEFA2[a1];
  uint64_t v8 = sub_10011A3BC((uint64_t)v12, (uint64_t)v12 + 2);
  unint64_t v10 = v9;
  sub_100125FAC(v8, v9);
  sub_10000C970(v8, v10);
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  LOBYTE(v12[0]) = a4;
  sub_1000369C4(v12, v6);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v12);
  return v15;
}

void DNSRecords.BrowseHost.hash(into:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, Swift::UInt8 a5)
{
}

BOOL static DNSRecords.BrowseHost.__derived_struct_equals(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  if (word_1003BF024[a1] != word_1003BF024[a5]) {
    return 0;
  }
  if (a2 == a6 && a3 == a7) {
    return a4 == a8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v10) {
    return a4 == a8;
  }
  return result;
}

Swift::Int DNSRecords.BrowseHost.hashValue.getter(char a1, uint64_t a2, uint64_t a3, Swift::UInt8 a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_10011E548()
{
  uint64_t v1 = *v0;
  Swift::UInt8 v2 = v0[24];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003BF024[v1]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10011E5DC()
{
  Swift::UInt8 v1 = v0[24];
  Hasher._combine(_:)(word_1003BF024[*v0]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10011E654()
{
  uint64_t v1 = *v0;
  Swift::UInt8 v2 = v0[24];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003BF024[v1]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10011E6E4(char *a1, char *a2)
{
  if (word_1003BF024[*a1] != word_1003BF024[*a2]) {
    return 0;
  }
  int v2 = a1[24];
  int v3 = a2[24];
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t DNSRecords.PTR.instanceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t NANInternetSharingStatistics.submitted.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t DNSRecords.Identifier.protocolType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result & 1;
  return result;
}

uint64_t DNSRecords.Identifier.version.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  return HIBYTE(a3);
}

CoreP2P::DNSRecords::Identifier __swiftcall DNSRecords.Identifier.init(serviceName:protocolType:version:)(Swift::String serviceName, CoreP2P::Layer3Protocol protocolType, Swift::UInt8 version)
{
  __int16 v3 = protocolType & 1 | (version << 8);
  result.serviceName = serviceName;
  result.protocolType = v3;
  result.version = HIBYTE(v3);
  return result;
}

uint64_t sub_10011E7CC(char a1, unint64_t a2, unint64_t a3, __int16 a4)
{
  long long v18 = xmmword_1003B2440;
  sub_100127238(a2, a3);
  uint64_t v6 = sub_100010BCC(&qword_10047E738);
  uint64_t v16 = v6;
  uint64_t v7 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  uint64_t v17 = v7;
  LOBYTE(v15[0]) = -64;
  sub_1000369C4(v15, v6);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v15);
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  if (a4) {
    char v8 = 28;
  }
  else {
    char v8 = 12;
  }
  LOBYTE(v15[0]) = v8;
  sub_1000369C4(v15, v6);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v15);
  char v9 = HIBYTE(a4);
  LOWORD(v15[0]) = word_1003BEFA2[a1];
  uint64_t v10 = sub_10011A3BC((uint64_t)v15, (uint64_t)v15 + 2);
  unint64_t v12 = v11;
  sub_100125FAC(v10, v11);
  sub_10000C970(v10, v12);
  uint64_t v13 = sub_100010BCC(&qword_10047E738);
  uint64_t v16 = v13;
  uint64_t v17 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  LOBYTE(v15[0]) = v9;
  sub_1000369C4(v15, v13);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v15);
  return v18;
}

uint64_t DNSRecords.Identifier.keyData.getter(unint64_t a1, unint64_t a2, __int16 a3)
{
  return sub_10011E7CC(11, a1, a2, a3 & 0xFF01);
}

uint64_t DNSRecords.PTR.type.getter()
{
  return 11;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DNSRecords.Identifier.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 24366;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  if (a3) {
    uint64_t v5 = 7365749;
  }
  else {
    uint64_t v5 = 7365492;
  }
  unint64_t v6 = 0xE300000000000000;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
}

void DNSRecords.Identifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  Swift::UInt8 v4 = HIBYTE(a4);
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
}

uint64_t sub_10011ED34()
{
  Swift::Int v0 = sub_100017B2C((uint64_t)&off_100450250);
  uint64_t result = swift_arrayDestroy();
  static DNSRecords.Identifier.allKnownIdentifiers = v0;
  return result;
}

const char *DNSRecords.Identifier.airdrop.unsafeMutableAddressor()
{
  return "_airdrop";
}

const char *DNSRecords.Identifier.airplay.unsafeMutableAddressor()
{
  return "_airplay";
}

const char *DNSRecords.Identifier.raop.unsafeMutableAddressor()
{
  return "_raop";
}

const char *DNSRecords.Identifier.airplayP2P.unsafeMutableAddressor()
{
  return "_airplay-p2p";
}

const char *DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor()
{
  return "_wifid";
}

void *DNSRecords.Identifier.companionLink.unsafeMutableAddressor()
{
  return &static DNSRecords.Identifier.companionLink;
}

const char *DNSRecords.Identifier.remoteDisplay.unsafeMutableAddressor()
{
  return "_rdlink";
}

const char *DNSRecords.Identifier.dfsMonitoring.unsafeMutableAddressor()
{
  return "_dfsMon";
}

const char *DNSRecords.Identifier.timeSync.unsafeMutableAddressor()
{
  return "_ieee1588";
}

const char *DNSRecords.Identifier.atpAWDLService.unsafeMutableAddressor()
{
  return "_atp";
}

const char *DNSRecords.Identifier.testAWDLService.unsafeMutableAddressor()
{
  return "_test";
}

uint64_t *DNSRecords.Identifier.allKnownIdentifiers.unsafeMutableAddressor()
{
  if (qword_10047BFD0 != -1) {
    swift_once();
  }
  return &static DNSRecords.Identifier.allKnownIdentifiers;
}

uint64_t static DNSRecords.Identifier.allKnownIdentifiers.getter()
{
  return sub_100075A04(&qword_10047BFD0);
}

uint64_t DNSRecords.Identifier.service.getter(uint64_t a1)
{
  return a1;
}

void *DNSRecords.defaultVersion.unsafeMutableAddressor()
{
  return &static DNSRecords.defaultVersion;
}

uint64_t static DNSRecords.Identifier.dfsMonitoring.getter()
{
  return 0x6E6F4D7366645FLL;
}

uint64_t static DNSRecords.Identifier.atpAWDLService.getter()
{
  return 1886675295;
}

uint64_t static DNSRecords.Identifier.testAWDLService.getter()
{
  return 0x747365745FLL;
}

uint64_t static DNSRecords.Identifier.airdrop.getter()
{
  return 0x706F72647269615FLL;
}

uint64_t static DNSRecords.Identifier.airplay.getter()
{
  return 0x79616C707269615FLL;
}

uint64_t static DNSRecords.Identifier.raop.getter()
{
  return 0x706F61725FLL;
}

uint64_t static DNSRecords.Identifier.airplayP2P.getter()
{
  return 0x79616C707269615FLL;
}

uint64_t static DNSRecords.Identifier.assistedDiscovery.getter()
{
  return 0x64696669775FLL;
}

uint64_t static DNSRecords.Identifier.companionLink.getter()
{
  return 0x696E61706D6F635FLL;
}

uint64_t static DNSRecords.Identifier.remoteDisplay.getter()
{
  return 0x6B6E696C64725FLL;
}

uint64_t static DNSRecords.Identifier.timeSync.getter()
{
  return 0x383531656565695FLL;
}

const char *DNSRecords.Identifier.googlecast.unsafeMutableAddressor()
{
  return "_googlecast";
}

uint64_t static DNSRecords.Identifier.googlecast.getter()
{
  return 0x63656C676F6F675FLL;
}

uint64_t sub_10011F02C()
{
  Swift::Int v0 = sub_100017B2C((uint64_t)&off_100450378);
  uint64_t result = swift_arrayDestroy();
  static DNSRecords.Identifier.deniedList = v0;
  return result;
}

uint64_t *DNSRecords.Identifier.deniedList.unsafeMutableAddressor()
{
  if (qword_10047BFD8 != -1) {
    swift_once();
  }
  return &static DNSRecords.Identifier.deniedList;
}

uint64_t static DNSRecords.Identifier.deniedList.getter()
{
  return sub_100075A04(&qword_10047BFD8);
}

Swift::Int DNSRecords.Identifier.hashValue.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  Swift::UInt8 v3 = HIBYTE(a3);
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10011F198()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 17);
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10011F24C()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 17);
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10011F2D8()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 17);
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10011F388()
{
  return sub_10011E7CC(11, *(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 17) << 8));
}

uint64_t sub_10011F3A0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10011F3E8()
{
  int v1 = *((unsigned __int8 *)v0 + 16);
  uint64_t v8 = *v0;
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 24366;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  if (v1) {
    uint64_t v3 = 7365749;
  }
  else {
    uint64_t v3 = 7365492;
  }
  unint64_t v4 = 0xE300000000000000;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  return v8;
}

BOOL sub_10011F480(uint64_t a1, uint64_t a2)
{
  return sub_10012625C(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 17) << 8), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 17) << 8));
}

uint64_t MutableDriverProperty.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.SRV.service.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.PTR.identifier.setter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = a3;
  unsigned int v7 = a3 >> 8;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = v4 & 1;
  *(unsigned char *)(v3 + 33) = v7;
  return result;
}

uint64_t DNSRecords.PTR.description.getter()
{
  long long v12 = *v0;
  uint64_t v9 = v12;
  sub_100036198((uint64_t)&v12);
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  Swift::String v10 = (Swift::String)v0[1];
  __int16 v11 = *((_WORD *)v0 + 16);
  Swift::String v8 = v10;
  sub_100036198((uint64_t)&v10);
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 24366;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  if ((_BYTE)v11) {
    uint64_t v3 = 7365749;
  }
  else {
    uint64_t v3 = 7365492;
  }
  unint64_t v4 = 0xE300000000000000;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_1000361C4((uint64_t)&v10);
  return v9;
}

uint64_t DNSRecords.PTR.hash(into:)()
{
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_WORD *)uint64_t v3 = *(_WORD *)(v0 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3[1]);
  return sub_1000361C4((uint64_t)&v2);
}

Swift::Int DNSRecords.PTR.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v2 = *(_OWORD *)(v0 + 16);
  __int16 v3 = *(_WORD *)(v0 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(HIBYTE(v3));
  sub_1000361C4((uint64_t)&v2);
  return Hasher._finalize()();
}

uint64_t sub_10011F840()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 33);
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10011F920()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 33);
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

BOOL sub_10011FA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  __int16 v4 = *(unsigned __int8 *)(a1 + 32);
  __int16 v5 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  __int16 v8 = *(unsigned __int8 *)(a2 + 32);
  __int16 v9 = *(unsigned __int8 *)(a2 + 33);
  sub_10001D82C();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)()
      && sub_10012625C(v2, v3, v4 | (v5 << 8), v6, v7, v8 | (v9 << 8));
}

uint64_t DNSRecords.TXT.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 33);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 33) = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 DNSRecords.TXT.name.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_WORD *)(v1 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

uint64_t DNSRecords.TXT.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)(v2 + 40), *(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t DNSRecords.TXT.service.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.TXT.hash(into:)()
{
  long long v5 = *(_OWORD *)(v0 + 16);
  __int16 v6 = *(_WORD *)(v0 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  sub_100036198((uint64_t)&v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v7 = v6;
  Swift::UInt8 v1 = HIBYTE(v6);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  sub_1000361C4((uint64_t)&v5);
  swift_bridgeObjectRelease();
  sub_1000361C4((uint64_t)&v5);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 48);
  sub_100013D44(v3, v2);
  Data.hash(into:)();
  return sub_10000C970(v3, v2);
}

Swift::Int DNSRecords.TXT.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10011FD80()
{
  return Hasher._finalize()();
}

uint64_t sub_10011FDBC()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  __int16 v5 = *(unsigned __int8 *)(v0 + 32);
  __int16 v6 = *(unsigned __int8 *)(v0 + 33);
  sub_100127238(v1, v2);
  uint64_t v7 = sub_10011E7CC(15, v3, v4, v5 | (unsigned __int16)(v6 << 8));
  unint64_t v9 = v8;
  sub_100125FAC(v7, v8);
  sub_10000C970(v7, v9);
  return 0;
}

uint64_t sub_10011FE40(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 16);
  __int16 v13 = *(unsigned __int8 *)(a1 + 32);
  __int16 v2 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  __int16 v7 = *(unsigned __int8 *)(a2 + 32);
  __int16 v8 = *(unsigned __int8 *)(a2 + 33);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  sub_10001D82C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)()
    || !sub_10012625C(v15, v14, v13 | (v2 << 8), v5, v6, v7 | (v8 << 8)))
  {
    char v11 = 0;
  }
  else
  {
    char v11 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4, v9, v10);
  }
  return v11 & 1;
}

uint64_t DNSRecords.SRV.portNumber.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DNSRecords.SRV() + 20);
  uint64_t v4 = type metadata accessor for NWEndpoint.Port();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t DNSRecords.SRV.portNumber.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DNSRecords.SRV() + 20);
  uint64_t v4 = type metadata accessor for NWEndpoint.Port();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*DNSRecords.SRV.portNumber.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.hostname.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.SRV.hostname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for DNSRecords.SRV() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DNSRecords.SRV.hostname.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.weight.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV() + 28));
}

uint64_t DNSRecords.SRV.weight.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for DNSRecords.SRV();
  *(_WORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*DNSRecords.SRV.weight.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t DNSRecords.SRV.priority.getter()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for DNSRecords.SRV() + 32));
}

uint64_t DNSRecords.SRV.priority.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for DNSRecords.SRV();
  *(_WORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*DNSRecords.SRV.priority.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void DNSRecords.SRV.hash(into:)()
{
  uint64_t v1 = v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 33);
  String.lowercased()();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v3 = type metadata accessor for DNSRecords.SRV();
  type metadata accessor for NWEndpoint.Port();
  sub_100128EB4(&qword_10047E198, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_WORD *)(v1 + *(int *)(v3 + 28)));
  Hasher._combine(_:)(*(_WORD *)(v1 + *(int *)(v3 + 32)));
}

Swift::Int DNSRecords.SRV.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100120464()
{
  return Hasher._finalize()();
}

uint64_t DNSRecords.AAAA.host.setter(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = a3;
  *(unsigned char *)(v4 + 24) = a4;
  return result;
}

uint64_t DNSRecords.AAAA.type.getter()
{
  if (*v0 == 27) {
    return 27;
  }
  __break(1u);
  return result;
}

void DNSRecords.ARPA.hash(into:)()
{
  *(_OWORD *)&v6[9] = *(_OWORD *)((char *)v0 + 9);
  *(_OWORD *)uint64_t v6 = *v0;
  Hasher._combine(_:)(word_1003BF024[v6[0]]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v6[24]);
  sub_10012720C((uint64_t)v6);
  long long v1 = v0[3];
  v8[0] = v0[2];
  v8[1] = v1;
  uint64_t v2 = *((void *)&v1 + 1);
  long long v7 = v8[0];
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10011A3BC((uint64_t)&v7, (uint64_t)v8);
  unint64_t v5 = v4;
  Data.hash(into:)();
  sub_10000C970(v3, v5);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10012740C((uint64_t)v8);
    sub_10012740C((uint64_t)v8);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static DNSRecords.ARPA.__derived_struct_equals(_:_:)(char *a1, char *a2)
{
  if (word_1003BF024[*a1] != word_1003BF024[*a2]) {
    return 0;
  }
  int v4 = a1[24];
  int v5 = a2[24];
  BOOL v6 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v4 != v5) {
    return 0;
  }
  uint64_t v7 = *((void *)a1 + 4);
  uint64_t v8 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v11 = *((void *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 5);
  uint64_t v13 = *((void *)a2 + 6);
  uint64_t v14 = *((void *)a2 + 7);

  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v7, v8, v9, v10, v11, v12, v13, v14);
}

Swift::Int DNSRecords.ARPA.hashValue.getter()
{
  return sub_100121B4C((void (*)(unsigned char *))DNSRecords.ARPA.hash(into:));
}

Swift::Int sub_100120730(uint64_t a1, uint64_t a2)
{
  return sub_100121B9C(a1, a2, (void (*)(unsigned char *))DNSRecords.ARPA.hash(into:));
}

Swift::Int sub_10012074C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100121BE4(a1, a2, a3, (void (*)(unsigned char *))DNSRecords.ARPA.hash(into:));
}

uint64_t sub_100120764()
{
  uint64_t v1 = *(void *)(v0 + 40);
  v3[0] = *(void *)(v0 + 32);
  v3[1] = v1;
  return sub_10011A3BC((uint64_t)v3, (uint64_t)&v4);
}

uint64_t sub_1001207C4(char *a1, char *a2)
{
  if (word_1003BF024[*a1] != word_1003BF024[*a2]) {
    return 0;
  }
  int v2 = a1[24];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v5 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 7);
  int v7 = a2[24];
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 5);
  uint64_t v10 = *((void *)a2 + 6);
  uint64_t v11 = *((void *)a2 + 7);
  if ((*((void *)a1 + 1) != *((void *)a2 + 1) || *((void *)a1 + 2) != *((void *)a2 + 2))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v2 != v7) {
    return 0;
  }

  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v4, v3, v5, v6, v9, v8, v10, v11);
}

uint64_t DNSRecords.ARPABrowse.ipv6Address.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DNSRecords.ARPABrowse.ipv6Address.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t NANDatapath.Configuration.serviceType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t DNSRecords.ARPABrowse.keyData.getter()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = DNSRecords.ARPA.keyData.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DNSRecords.ARPA.keyData.getter()
{
  long long v80 = xmmword_1003B2440;
  long long v76 = *(_OWORD *)(v0 + 32);
  uint64_t v1 = sub_10011A3BC((uint64_t)&v76, (uint64_t)&v77);
  unint64_t v3 = v2 >> 62;
  unint64_t v4 = v1;
  unint64_t v5 = v2;
  uint64_t v6 = 0;
  uint64_t v70 = v1 >> 32;
  uint64_t v71 = BYTE6(v2);
  switch(v2 >> 62)
  {
    case 1uLL:
      sub_100013D44(v1, v2);
      uint64_t v6 = v70;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v1 + 24);
      sub_100013D44(v1, v2);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = BYTE6(v2);
      break;
  }
  uint64_t v7 = (int)v4;
  unint64_t v67 = v4 >> 16;
  unint64_t v68 = v4 >> 8;
  unint64_t v65 = HIDWORD(v4);
  unint64_t v66 = v4 >> 24;
  unint64_t v63 = HIWORD(v4);
  unint64_t v64 = v4 >> 40;
  unint64_t v61 = v5 >> 8;
  unint64_t v62 = HIBYTE(v4);
  unint64_t v59 = v5 >> 24;
  unint64_t v60 = v5 >> 16;
  unint64_t v69 = v5;
  unint64_t v57 = v5 >> 40;
  unint64_t v58 = HIDWORD(v5);
  uint64_t v8 = v3;
  uint64_t v74 = v3;
  unint64_t v72 = v4;
  uint64_t v73 = (int)v4;
  while (2)
  {
    uint64_t v10 = v7;
    switch(v8)
    {
      case 0:
      case 3:
        if (!v6) {
          goto LABEL_59;
        }
        goto LABEL_12;
      case 1:
        goto LABEL_11;
      case 2:
        uint64_t v10 = *(void *)(v4 + 16);
LABEL_11:
        if (v6 == v10) {
          goto LABEL_58;
        }
LABEL_12:
        BOOL v11 = __OFSUB__(v6--, 1);
        if (!v11)
        {
          switch(v8)
          {
            case 1:
              if (v6 < v7 || v6 >= v70) {
                goto LABEL_62;
              }
              uint64_t v17 = __DataStorage._bytes.getter();
              if (!v17) {
                goto LABEL_77;
              }
              uint64_t v14 = v17;
              uint64_t v18 = __DataStorage._offset.getter();
              uint64_t v16 = v6 - v18;
              if (!__OFSUB__(v6, v18)) {
                goto LABEL_26;
              }
              goto LABEL_64;
            case 2:
              if (v6 < *(void *)(v4 + 16)) {
                goto LABEL_61;
              }
              if (v6 >= *(void *)(v4 + 24)) {
                goto LABEL_63;
              }
              uint64_t v13 = __DataStorage._bytes.getter();
              if (!v13) {
                goto LABEL_78;
              }
              uint64_t v14 = v13;
              uint64_t v15 = __DataStorage._offset.getter();
              uint64_t v16 = v6 - v15;
              if (__OFSUB__(v6, v15)) {
                goto LABEL_65;
              }
LABEL_26:
              LODWORD(v12) = *(unsigned __int8 *)(v14 + v16);
              break;
            case 3:
              goto LABEL_76;
            default:
              if (v6 >= v71)
              {
                __break(1u);
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
LABEL_63:
                __break(1u);
LABEL_64:
                __break(1u);
LABEL_65:
                __break(1u);
                goto LABEL_66;
              }
              LOBYTE(v76) = v4;
              BYTE1(v76) = v68;
              BYTE2(v76) = v67;
              BYTE3(v76) = v66;
              BYTE4(v76) = v65;
              BYTE5(v76) = v64;
              BYTE6(v76) = v63;
              BYTE7(v76) = v62;
              BYTE8(v76) = v69;
              BYTE9(v76) = v61;
              BYTE10(v76) = v60;
              BYTE11(v76) = v59;
              BYTE12(v76) = v58;
              BYTE13(v76) = v57;
              LODWORD(v12) = *((unsigned __int8 *)&v76 + v6);
              break;
          }
          sub_100010BCC((uint64_t *)&unk_10047CF90);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_1003B2450;
          *(void *)(v19 + 56) = &type metadata for UInt8;
          *(void *)(v19 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v19 + 32) = v12 & 0xF;
          unint64_t v20 = String.init(format:_:)();
          unint64_t v22 = v21;
          swift_bridgeObjectRetain();
          uint64_t v23 = sub_10011A478(v20, v22);
          unint64_t v25 = v24 >> 62;
          uint64_t v26 = v23;
          unint64_t v27 = v24;
          LOBYTE(v28) = 0;
          switch(v24 >> 62)
          {
            case 1uLL:
              LODWORD(v29) = HIDWORD(v23) - v23;
              if (__OFSUB__(HIDWORD(v23), v23))
              {
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
                goto LABEL_79;
              }
              uint64_t v29 = (int)v29;
LABEL_32:
              if (v29 <= 63)
              {
                if (v25)
                {
                  if (v25 == 1)
                  {
                    if (__OFSUB__(HIDWORD(v23), v23)) {
                      goto LABEL_72;
                    }
                    unint64_t v28 = HIDWORD(v23) - (int)v23;
                  }
                  else
                  {
                    uint64_t v33 = *(void *)(v23 + 16);
                    uint64_t v32 = *(void *)(v23 + 24);
                    unint64_t v28 = v32 - v33;
                    if (__OFSUB__(v32, v33)) {
                      goto LABEL_73;
                    }
                  }
                  if ((v28 & 0x8000000000000000) != 0 || v28 >= 0x100) {
                    goto LABEL_80;
                  }
                }
                else
                {
                  LOBYTE(v28) = BYTE6(v24);
                }
LABEL_41:
                uint64_t v34 = sub_100010BCC(&qword_10047E738);
                uint64_t v78 = v34;
                uint64_t v79 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
                LOBYTE(v76) = v28;
                char v75 = *(unsigned char *)sub_1000369C4(&v76, v34);
                Data._Representation.replaceSubrange(_:with:count:)();
                sub_100010754((uint64_t)&v76);
                sub_100013D44(v26, v27);
                sub_100125FAC(v26, v27);
                sub_10000C970(v26, v27);
                unint64_t v4 = v72;
                uint64_t v7 = v73;
              }
              sub_10000C970(v26, v27);
              swift_bridgeObjectRelease();
              uint64_t v35 = swift_allocObject();
              *(_OWORD *)(v35 + 16) = xmmword_1003B2450;
              *(void *)(v35 + 56) = &type metadata for UInt8;
              *(void *)(v35 + 64) = &protocol witness table for UInt8;
              *(unsigned char *)(v35 + 32) = v12 >> 4;
              unint64_t v36 = String.init(format:_:)();
              unint64_t v38 = v37;
              swift_bridgeObjectRetain();
              uint64_t v39 = sub_10011A478(v36, v38);
              unint64_t v41 = v40 >> 62;
              uint64_t v42 = v39;
              unint64_t v43 = v40;
              LOBYTE(v12) = 0;
              switch(v40 >> 62)
              {
                case 1uLL:
                  LODWORD(v44) = HIDWORD(v39) - v39;
                  if (__OFSUB__(HIDWORD(v39), v39)) {
                    goto LABEL_70;
                  }
                  uint64_t v44 = (int)v44;
LABEL_47:
                  if (v44 > 63) {
                    goto LABEL_6;
                  }
                  if (v41)
                  {
                    if (v41 == 1)
                    {
                      if (__OFSUB__(HIDWORD(v39), v39)) {
                        goto LABEL_74;
                      }
                      unint64_t v12 = HIDWORD(v39) - (int)v39;
                    }
                    else
                    {
                      uint64_t v48 = *(void *)(v39 + 16);
                      uint64_t v47 = *(void *)(v39 + 24);
                      unint64_t v12 = v47 - v48;
                      if (__OFSUB__(v47, v48)) {
                        goto LABEL_75;
                      }
                    }
                    if ((v12 & 0x8000000000000000) != 0 || v12 >= 0x100)
                    {
LABEL_80:
                      _assertionFailure(_:_:file:line:flags:)();
                      __break(1u);
                      JUMPOUT(0x100121340);
                    }
                  }
                  else
                  {
                    LOBYTE(v12) = BYTE6(v40);
                  }
LABEL_56:
                  uint64_t v9 = sub_100010BCC(&qword_10047E738);
                  uint64_t v78 = v9;
                  uint64_t v79 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
                  LOBYTE(v76) = v12;
                  char v75 = *(unsigned char *)sub_1000369C4(&v76, v9);
                  Data._Representation.replaceSubrange(_:with:count:)();
                  sub_100010754((uint64_t)&v76);
                  sub_100013D44(v42, v43);
                  sub_100125FAC(v42, v43);
                  sub_10000C970(v42, v43);
LABEL_6:
                  sub_10000C970(v42, v43);
                  swift_bridgeObjectRelease();
                  uint64_t v8 = v74;
                  break;
                case 2uLL:
                  uint64_t v46 = *(void *)(v39 + 16);
                  uint64_t v45 = *(void *)(v39 + 24);
                  BOOL v11 = __OFSUB__(v45, v46);
                  uint64_t v44 = v45 - v46;
                  if (!v11) {
                    goto LABEL_47;
                  }
                  goto LABEL_71;
                case 3uLL:
                  goto LABEL_56;
                default:
                  uint64_t v44 = BYTE6(v40);
                  goto LABEL_47;
              }
              break;
            case 2uLL:
              uint64_t v31 = *(void *)(v23 + 16);
              uint64_t v30 = *(void *)(v23 + 24);
              BOOL v11 = __OFSUB__(v30, v31);
              uint64_t v29 = v30 - v31;
              if (!v11) {
                goto LABEL_32;
              }
              goto LABEL_69;
            case 3uLL:
              goto LABEL_41;
            default:
              uint64_t v29 = BYTE6(v24);
              goto LABEL_32;
          }
          continue;
        }
        __break(1u);
LABEL_58:
        sub_10000C970(v4, v69);
LABEL_59:
        sub_100127238(0x367069uLL, 0xE300000000000000);
        sub_100127238(0x61707261uLL, 0xE400000000000000);
LABEL_66:
        uint64_t v49 = sub_100010BCC(&qword_10047E738);
        uint64_t v78 = v49;
        uint64_t v50 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
        uint64_t v79 = v50;
        LOBYTE(v76) = 0;
        char v75 = *(unsigned char *)sub_1000369C4(&v76, v49);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100010754((uint64_t)&v76);
        if (*v56 != 11) {
LABEL_79:
        }
          __break(1u);
        char v51 = v56[24];
        LOWORD(v76) = 3072;
        uint64_t v52 = sub_10011A3BC((uint64_t)&v76, (uint64_t)&v76 + 2);
        unint64_t v54 = v53;
        sub_100125FAC(v52, v53);
        sub_10000C970(v52, v54);
        uint64_t v78 = v49;
        uint64_t v79 = v50;
        LOBYTE(v76) = v51;
        char v75 = *(unsigned char *)sub_1000369C4(&v76, v49);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100010754((uint64_t)&v76);
        sub_10000C970(v4, v69);
        return v80;
      default:
        JUMPOUT(0);
    }
  }
}

void DNSRecords.ARPABrowse.hash(into:)()
{
  long long v5 = *(_OWORD *)v0;
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_10011A3BC((uint64_t)&v5, (uint64_t)&v6);
  unint64_t v4 = v3;
  Data.hash(into:)();
  sub_10000C970(v2, v4);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10012740C(v0);
    sub_10012740C(v0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32));
}

BOOL static DNSRecords.ARPABrowse.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return (_s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0&& *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
}

Swift::Int DNSRecords.ARPABrowse.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  long long v7 = *(_OWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10011A3BC((uint64_t)&v7, (uint64_t)&v8);
  unint64_t v5 = v4;
  Data.hash(into:)();
  sub_10000C970(v3, v5);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_10012740C(v1);
    sub_10012740C(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + 32));
  return Hasher._finalize()();
}

uint64_t sub_100121634()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = DNSRecords.ARPA.keyData.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Int sub_1001216B8()
{
  return DNSRecords.ARPABrowse.hashValue.getter();
}

void sub_1001216F4()
{
}

Swift::Int sub_100121730()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[3];
  Swift::UInt8 v4 = *((unsigned char *)v0 + 32);
  Hasher.init(_seed:)();
  v9[0] = v1;
  v9[1] = v2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10011A3BC((uint64_t)v9, (uint64_t)&v10);
  unint64_t v7 = v6;
  Data.hash(into:)();
  sub_10000C970(v5, v7);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_10012183C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a2 + 32);
  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24)) & (v2 == v3);
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV4hostAC10BrowseHostVvg_0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV11ipv6AddressAA04IPv6F0Vvg_0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s7CoreP2P10DNSRecordsO4ARPAV11ipv6AddressAA04IPv6F0Vvs_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
  return result;
}

uint64_t DNSRecords.ARPA.type.getter()
{
  if (*v0 == 11) {
    return 11;
  }
  __break(1u);
  return result;
}

uint64_t DNSRecords.ARPA.valueData.getter()
{
  long long v7 = xmmword_1003B2440;
  sub_100127238(*(void *)(v0 + 8), *(void *)(v0 + 16));
  uint64_t v1 = sub_100010BCC(&qword_10047E738);
  uint64_t v5 = v1;
  uint64_t v2 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
  uint64_t v6 = v2;
  LOBYTE(v4[0]) = -64;
  sub_1000369C4(v4, v1);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v4);
  uint64_t v5 = v1;
  uint64_t v6 = v2;
  LOBYTE(v4[0]) = 17;
  sub_1000369C4(v4, v1);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100010754((uint64_t)v4);
  return v7;
}

Swift::Int sub_100121B4C(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100121B9C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_100121BE4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100121C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v8 = v7;
  unint64_t v53 = a6;
  uint64_t v50 = a5;
  uint64_t v14 = type metadata accessor for Data.Deallocator();
  uint64_t v48 = *(void *)(v14 - 8);
  uint64_t v49 = v14;
  __chkstk_darwin();
  uint64_t v47 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047BFE0 != -1) {
    swift_once();
  }
  unint64_t v16 = 0;
  switch(*(void *)algn_10047FDA8 >> 62)
  {
    case 1:
      if (__OFSUB__(HIDWORD(qword_10047FDA0), qword_10047FDA0)) {
        goto LABEL_59;
      }
      unint64_t v16 = HIDWORD(qword_10047FDA0) - (int)qword_10047FDA0;
LABEL_8:
      if (a1) {
        uint64_t v19 = a2 - a1;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v16 & 0x8000000000000000) == 0 && v19 >= (uint64_t)v16)
      {
        v44[0] = a2 - a1;
        uint64_t v45 = a2;
        uint64_t v46 = a7;
        uint64_t v51 = qword_10047FDA0;
        unint64_t v52 = *(void *)algn_10047FDA8;
        sub_100074B70();
        a7 = &v51;
        DataProtocol.copyBytes(to:)();
        uint64_t v20 = 0;
        switch(a4 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_61;
            }
            uint64_t v20 = (int)v20;
LABEL_18:
            v44[1] = v7;
            unint64_t v8 = v16 + v20;
            if (__OFADD__(v16, v20)) {
              goto LABEL_49;
            }
            if ((v8 & 0x8000000000000000) != 0 || v19 < (uint64_t)v8) {
              goto LABEL_50;
            }
            uint64_t v51 = a3;
            unint64_t v52 = a4;
            if (v8 < v16) {
              goto LABEL_51;
            }
            DataProtocol.copyBytes(to:)();
            a3 = v53 >> 60;
            if (v53 >> 60 == 15) {
              goto LABEL_43;
            }
            a7 = (uint64_t *)(v53 >> 62);
            sub_100013D44(v50, v53);
            if (qword_10047BFE8 == -1) {
              goto LABEL_24;
            }
            goto LABEL_52;
          case 2uLL:
            uint64_t v22 = *(void *)(a3 + 16);
            uint64_t v21 = *(void *)(a3 + 24);
            BOOL v23 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v23) {
              goto LABEL_18;
            }
            goto LABEL_62;
          case 3uLL:
            goto LABEL_18;
          default:
            uint64_t v20 = BYTE6(a4);
            goto LABEL_18;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_once();
      break;
    case 2:
      uint64_t v18 = *(void *)(qword_10047FDA0 + 16);
      uint64_t v17 = *(void *)(qword_10047FDA0 + 24);
      unint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_8;
      }
      goto LABEL_60;
    case 3:
      goto LABEL_8;
    default:
      unint64_t v16 = algn_10047FDA8[6];
      goto LABEL_8;
  }
LABEL_24:
  uint64_t v24 = 0;
  switch(*(void *)algn_10047FDB8 >> 62)
  {
    case 1:
      LODWORD(v24) = HIDWORD(qword_10047FDB0) - qword_10047FDB0;
      if (__OFSUB__(HIDWORD(qword_10047FDB0), qword_10047FDB0)) {
        goto LABEL_63;
      }
      uint64_t v24 = (int)v24;
LABEL_29:
      unint64_t v27 = v8 + v24;
      if (__OFADD__(v8, v24))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((v27 & 0x8000000000000000) != 0 || v19 < (uint64_t)v27) {
        goto LABEL_54;
      }
      uint64_t v51 = qword_10047FDB0;
      unint64_t v52 = *(void *)algn_10047FDB8;
      if (v27 < v8)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        JUMPOUT(0x100122198);
      }
      DataProtocol.copyBytes(to:)();
      uint64_t v28 = 0;
      uint64_t v29 = v50;
      switch((int)a7)
      {
        case 1:
          LODWORD(v28) = HIDWORD(v50) - v50;
          if (__OFSUB__(HIDWORD(v50), v50)) {
            goto LABEL_65;
          }
          uint64_t v28 = (int)v28;
LABEL_38:
          BOOL v23 = __OFADD__(v27, v28);
          unint64_t v32 = v27 + v28;
          if (v23) {
            goto LABEL_56;
          }
          if ((v32 & 0x8000000000000000) != 0 || v19 < (uint64_t)v32) {
            goto LABEL_57;
          }
          uint64_t v51 = v50;
          unint64_t v52 = v53;
          if (v32 < v27) {
            goto LABEL_58;
          }
          unint64_t v33 = v53;
          DataProtocol.copyBytes(to:)();
          sub_10000C95C(v29, v33);
          break;
        case 2:
          uint64_t v31 = *(void *)(v50 + 16);
          uint64_t v30 = *(void *)(v50 + 24);
          BOOL v23 = __OFSUB__(v30, v31);
          uint64_t v28 = v30 - v31;
          if (!v23) {
            goto LABEL_38;
          }
          goto LABEL_66;
        case 3:
          goto LABEL_38;
        default:
          uint64_t v28 = BYTE6(v53);
          goto LABEL_38;
      }
LABEL_43:
      if (!a1) {
        goto LABEL_67;
      }
      uint64_t v35 = v47;
      uint64_t v34 = v48;
      uint64_t v36 = v49;
      (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, enum case for Data.Deallocator.none(_:), v49);
      Data.Deallocator._deallocator.getter();
      if (v45 == a1)
      {
        unint64_t v37 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
        v37(a1, 0);
        swift_release();
        swift_release();
        uint64_t v38 = 0;
        unint64_t v39 = 0xC000000000000000;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_retain();
        uint64_t v40 = v44[0];
        uint64_t v41 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        uint64_t v38 = sub_100003D88(v41, v40);
        unint64_t v39 = v42;
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
      sub_1001221D8(v38, v39, a3 < 0xF, v46);
      return sub_10000C970(v38, v39);
    case 2:
      uint64_t v26 = *(void *)(qword_10047FDB0 + 16);
      uint64_t v25 = *(void *)(qword_10047FDB0 + 24);
      BOOL v23 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v23) {
        goto LABEL_29;
      }
      goto LABEL_64;
    case 3:
      goto LABEL_29;
    default:
      uint64_t v24 = algn_10047FDB8[6];
      goto LABEL_29;
  }
}

uint64_t sub_1001221D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v194 = type metadata accessor for NWEndpoint.Port();
  uint64_t v193 = *(void *)(v194 - 8);
  BOOL v11 = (void *)__chkstk_darwin();
  uint64_t v13 = (char *)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a2 >> 62;
  uint64_t v15 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (int)a1;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  if (qword_10047BFE0 != -1) {
    BOOL v11 = (void *)swift_once();
  }
  uint64_t v16 = 0;
  switch(*(void *)algn_10047FDA8 >> 62)
  {
    case 1:
      if (!__OFSUB__(HIDWORD(qword_10047FDA0), qword_10047FDA0))
      {
        uint64_t v16 = HIDWORD(qword_10047FDA0) - (int)qword_10047FDA0;
LABEL_11:
        char v195 = a4;
        int64_t v19 = sub_10011B074(v15, v16, a1, a2);
        uint64_t v20 = swift_allocObject();
        uint64_t v21 = sub_100123940(a1, a2, v19);
        uint64_t v23 = v4;
        if (v4) {
          return swift_deallocUninitializedObject();
        }
        char v190 = (uint64_t *)(v20 + 16);
        *(void *)(v20 + 16) = v21;
        uint64_t v25 = v22;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        switch((int)v14)
        {
          case 1:
            uint64_t v27 = (int)a1;
            uint64_t v26 = a1 >> 32;
            break;
          case 2:
            uint64_t v27 = *(void *)(a1 + 16);
            uint64_t v26 = *(void *)(a1 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v27 = 0;
            uint64_t v26 = BYTE6(a2);
            break;
        }
        if (v26 < v25 || v26 < v27)
        {
          __break(1u);
          goto LABEL_153;
        }
        unint64_t v189 = v14;
        char v192 = (uint64_t *)v20;
        uint64_t v28 = Data._Representation.subscript.getter();
        unint64_t v30 = v29;
        unsigned int v31 = sub_100257908(v28, v29);
        uint64_t v191 = 0;
        unsigned int v32 = v31;
        sub_10000C970(v28, v30);
        unsigned __int8 v33 = _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(bswap32(v32) >> 16);
        if (v33 == 65)
        {
LABEL_20:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v34 = xmmword_1003B00B0;
LABEL_21:
          *(unsigned char *)(v34 + 16) = 2;
          swift_willThrow();
          return swift_release();
        }
        unsigned __int8 v35 = v33;
        uint64_t v36 = sub_10011B074(v25, 2, a1, a2);
        uint64_t v37 = Data.subscript.getter();
        BOOL v38 = __OFADD__(v36, 1);
        unint64_t v39 = (uint64_t *)(v36 + 1);
        if (v38)
        {
          __break(1u);
          goto LABEL_173;
        }
        uint64_t v40 = v37;
        uint64_t v41 = v191;
        if (a3)
        {
          if (qword_10047BFE8 != -1) {
            swift_once();
          }
          uint64_t v42 = 0;
          switch(*(void *)algn_10047FDB8 >> 62)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(qword_10047FDB0), qword_10047FDB0))
              {
                uint64_t v42 = HIDWORD(qword_10047FDB0) - (int)qword_10047FDB0;
LABEL_48:
                int64_t v54 = sub_10011B074((uint64_t)v39, v42, a1, a2);
                a3 = v54;
                switch(v35)
                {
                  case 0xBu:
                    LOBYTE(v13) = v40;
                    unint64_t v55 = sub_100123940(a1, a2, v54);
                    if (v41) {
                      return swift_release();
                    }
                    uint64_t v40 = (uint64_t)v55;
                    unint64_t v39 = v190;
                    a3 = *v190;
                    uint64_t v56 = *(void *)(*v190 + 16);
                    if (!v56) {
                      goto LABEL_151;
                    }
                    if (v56 == 3)
                    {
                      if (v55[2])
                      {
                        uint64_t v57 = v55[4];
                        uint64_t v58 = v55[5];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        sub_10020B270(0, 0, v57, v58);
                        sub_10012455C((uint64_t)v192, (char)v13, (uint64_t)v196);
                        unint64_t v148 = v195;
                        v195[3] = (uint64_t)&type metadata for DNSRecords.PTR;
                        v148[4] = (uint64_t)&protocol witness table for DNSRecords.PTR;
                        uint64_t v149 = swift_allocObject();
                        *unint64_t v148 = v149;
                        uint64_t result = swift_release();
                        long long v150 = v196[1];
                        *(_OWORD *)(v149 + 16) = v196[0];
                        *(_OWORD *)(v149 + 32) = v150;
                        *(_WORD *)(v149 + 48) = v197;
                        return result;
                      }
                      swift_bridgeObjectRelease();
LABEL_135:
                      sub_10000F000();
                      swift_allocError();
                      *(void *)uint64_t v34 = 0;
                      *(void *)(v34 + 8) = 0;
                      goto LABEL_21;
                    }
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      goto LABEL_186;
                    }
                    uint64_t v92 = *(void *)(a3 + 16);
                    if (v92) {
                      goto LABEL_97;
                    }
                    goto LABEL_187;
                  case 0xFu:
                    unint64_t v39 = v192;
                    switch(v189)
                    {
                      case 1uLL:
                        uint64_t v65 = a1 >> 32;
                        goto LABEL_80;
                      case 2uLL:
                        uint64_t v65 = *(void *)(a1 + 24);
                        goto LABEL_80;
                      case 3uLL:
                        if ((v54 & 0x8000000000000000) == 0) {
                          goto LABEL_85;
                        }
                        goto LABEL_81;
                      default:
                        uint64_t v65 = BYTE6(a2);
LABEL_80:
                        if (v54 >= v65)
                        {
LABEL_85:
                          sub_10000F000();
                          swift_allocError();
                          *(void *)uint64_t v83 = 0;
                          *(void *)(v83 + 8) = 0;
                          *(unsigned char *)(v83 + 16) = 2;
                          swift_willThrow();
                          return swift_release();
                        }
LABEL_81:
                        sub_10012455C((uint64_t)v192, v40, (uint64_t)v198);
                        if (v41) {
                          return swift_release();
                        }
                        *(void *)&long long v194 = v198[0];
                        uint64_t v193 = v198[1];
                        uint64_t v13 = (char *)v198[3];
                        uint64_t v191 = v198[2];
                        uint64_t v40 = v199;
                        char v81 = v200;
                        uint64_t v82 = 0;
                        switch(v189)
                        {
                          case 1uLL:
                            uint64_t v82 = a1 >> 32;
                            break;
                          case 2uLL:
                            uint64_t v82 = *(void *)(a1 + 24);
                            break;
                          case 3uLL:
                            break;
                          default:
                            uint64_t v82 = BYTE6(a2);
                            break;
                        }
                        if (v82 < a3) {
                          goto LABEL_184;
                        }
                        uint64_t v135 = Data.subdata(in:)();
                        uint64_t v137 = v136;
                        unint64_t v138 = v195;
                        v195[3] = (uint64_t)&type metadata for DNSRecords.TXT;
                        v138[4] = (uint64_t)&protocol witness table for DNSRecords.TXT;
                        uint64_t v139 = swift_allocObject();
                        *unint64_t v138 = v139;
                        uint64_t result = swift_release();
                        uint64_t v140 = v193;
                        *(void *)(v139 + 16) = v194;
                        *(void *)(v139 + 24) = v140;
                        *(void *)(v139 + 32) = v191;
                        *(void *)(v139 + 40) = v13;
                        *(unsigned char *)(v139 + 48) = v40;
                        *(unsigned char *)(v139 + 49) = v81;
                        *(void *)(v139 + 56) = v135;
                        *(void *)(v139 + 64) = v137;
                        break;
                    }
                    return result;
                  case 0x1Bu:
                    uint64_t v10 = (char *)v190;
                    if (*(void *)(*v190 + 16) != 2) {
                      goto LABEL_135;
                    }
                    uint64_t v66 = 0;
                    uint64_t v67 = 0;
                    switch(v189)
                    {
                      case 1uLL:
                        uint64_t v67 = (int)a1;
                        uint64_t v66 = a1 >> 32;
                        break;
                      case 2uLL:
                        uint64_t v67 = *(void *)(a1 + 16);
                        uint64_t v66 = *(void *)(a1 + 24);
                        break;
                      case 3uLL:
                        break;
                      default:
                        uint64_t v67 = 0;
                        uint64_t v66 = BYTE6(a2);
                        break;
                    }
                    if (v66 < v54 || v66 < v67) {
                      goto LABEL_180;
                    }
                    char v97 = v40;
                    uint64_t v98 = Data._Representation.subscript.getter();
                    unint64_t v100 = v99;
                    uint64_t v101 = v191;
                    uint64_t v102 = sub_1002577C8(v98, v99);
                    uint64_t v104 = v103;
                    sub_10000C970(v98, v100);
                    if (v101)
                    {
                      swift_errorRelease();
                      goto LABEL_20;
                    }
                    uint64_t v105 = *(void *)v10;
                    uint64_t v106 = *(void *)(*(void *)v10 + 16);
                    if (!v106) {
                      goto LABEL_20;
                    }
                    uint64_t v108 = *(void *)(v105 + 32);
                    uint64_t v107 = *(void *)(v105 + 40);
                    uint64_t v109 = v105 + 32 + 16 * v106;
                    if ((*(void *)(v109 - 16) != 0x6C61636F6CLL || *(void *)(v109 - 8) != 0xE500000000000000)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      goto LABEL_20;
                    }
                    Swift::Int v110 = v195;
                    v195[3] = (uint64_t)&type metadata for DNSRecords.AAAA;
                    v110[4] = (uint64_t)&protocol witness table for DNSRecords.AAAA;
                    uint64_t v111 = swift_allocObject();
                    *Swift::Int v110 = v111;
                    swift_bridgeObjectRetain();
                    uint64_t result = swift_release();
                    *(unsigned char *)(v111 + 16) = 27;
                    *(void *)(v111 + 24) = v108;
                    *(void *)(v111 + 32) = v107;
                    *(unsigned char *)(v111 + 40) = v97;
                    *(void *)(v111 + 48) = v102;
                    *(void *)(v111 + 56) = v104;
                    *(void *)(v111 + 64) = 0;
                    *(void *)(v111 + 72) = 0;
                    return result;
                  case 0x20u:
                    uint64_t v68 = 0;
                    uint64_t v69 = 0;
                    switch(v189)
                    {
                      case 1uLL:
                        uint64_t v69 = (int)a1;
                        uint64_t v68 = a1 >> 32;
                        break;
                      case 2uLL:
                        uint64_t v69 = *(void *)(a1 + 16);
                        uint64_t v68 = *(void *)(a1 + 24);
                        break;
                      case 3uLL:
                        break;
                      default:
                        uint64_t v69 = 0;
                        uint64_t v68 = BYTE6(a2);
                        break;
                    }
                    LODWORD(v190) = v40;
                    if (v68 < v54 || v68 < v69) {
                      goto LABEL_177;
                    }
                    uint64_t v40 = Data._Representation.subscript.getter();
                    unint64_t v39 = (uint64_t *)v84;
                    int v85 = sub_100257908(v40, v84);
                    if (v41)
                    {
                      sub_10000C970(v40, (unint64_t)v39);
                      return swift_release();
                    }
                    int v188 = v85;
                    sub_10000C970(v40, (unint64_t)v39);
                    uint64_t v86 = sub_10011B074(a3, 2, a1, a2);
                    a3 = v86;
                    uint64_t v87 = 0;
                    uint64_t v88 = 0;
                    switch(v189)
                    {
                      case 1uLL:
                        uint64_t v88 = (int)a1;
                        uint64_t v87 = a1 >> 32;
                        break;
                      case 2uLL:
                        uint64_t v88 = *(void *)(a1 + 16);
                        uint64_t v87 = *(void *)(a1 + 24);
                        break;
                      case 3uLL:
                        break;
                      default:
                        uint64_t v88 = 0;
                        uint64_t v87 = BYTE6(a2);
                        break;
                    }
                    if (v87 >= v86 && v87 >= v88)
                    {
                      uint64_t v40 = Data._Representation.subscript.getter();
                      unint64_t v39 = (uint64_t *)v124;
                      int v125 = sub_100257908(v40, v124);
                      int v187 = v125;
                      sub_10000C970(v40, (unint64_t)v39);
                      uint64_t v126 = sub_10011B074(a3, 2, a1, a2);
                      a3 = v126;
                      uint64_t v127 = 0;
                      uint64_t v128 = 0;
                      switch(v189)
                      {
                        case 1uLL:
                          uint64_t v128 = (int)a1;
                          uint64_t v127 = a1 >> 32;
                          break;
                        case 2uLL:
                          uint64_t v128 = *(void *)(a1 + 16);
                          uint64_t v127 = *(void *)(a1 + 24);
                          break;
                        case 3uLL:
                          break;
                        default:
                          uint64_t v128 = 0;
                          uint64_t v127 = BYTE6(a2);
                          break;
                      }
                      if (v127 >= v126 && v127 >= v128)
                      {
                        uint64_t v141 = Data._Representation.subscript.getter();
                        unint64_t v143 = v142;
                        sub_100257908(v141, v142);
                        uint64_t v191 = 0;
                        sub_10000C970(v141, v143);
                        NWEndpoint.Port.init(rawValue:)();
                        uint64_t v23 = v193;
                        uint64_t v25 = v194;
                        if ((*(unsigned int (**)(char *, uint64_t, void))(v193 + 48))(v10, 1, v194) == 1)
                        {
                          sub_1000380B4((uint64_t)v10, &qword_10047CEF0);
                          goto LABEL_20;
                        }
LABEL_153:
                        unint64_t v189 = *(void *)(v23 + 32);
                        ((void (*)(char *, char *, uint64_t))v189)(v13, v10, v25);
                        NWEndpoint.Port.rawValue.getter();
                        int64_t v161 = sub_10011B074(a3, 2, a1, a2);
                        uint64_t v162 = v191;
                        BOOL v11 = sub_100123940(a1, a2, v161);
                        uint64_t v163 = v23;
                        uint64_t v15 = v162;
                        if (v162)
                        {
                          (*(void (**)(char *, uint64_t))(v163 + 8))(v13, v25);
                          return swift_release();
                        }
                        goto LABEL_157;
                      }
LABEL_185:
                      __break(1u);
LABEL_186:
                      a3 = (uint64_t)sub_1001DFD48((void *)a3);
                      uint64_t v92 = *(void *)(a3 + 16);
                      if (!v92)
                      {
LABEL_187:
                        __break(1u);
                        goto LABEL_188;
                      }
LABEL_97:
                      uint64_t v93 = v92 - 1;
                      uint64_t v94 = a3 + 16 * v93;
                      uint64_t v95 = *(void *)(v94 + 32);
                      uint64_t v96 = *(void *)(v94 + 40);
                      *(void *)(a3 + 16) = v93;
                      *unint64_t v39 = a3;
                      if (v95 == 1634759265 && v96 == 0xE400000000000000)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_128;
                      }
LABEL_127:
                      char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v129 & 1) == 0) {
                        goto LABEL_151;
                      }
LABEL_128:
                      a3 = *v39;
                      if (!*(void *)(*v39 + 16)) {
                        goto LABEL_151;
                      }
                      if (swift_isUniquelyReferenced_nonNull_native())
                      {
                        uint64_t v130 = *(void *)(a3 + 16);
                        if (!v130)
                        {
LABEL_189:
                          __break(1u);
                          JUMPOUT(0x100123848);
                        }
                        goto LABEL_131;
                      }
LABEL_188:
                      a3 = (uint64_t)sub_1001DFD48((void *)a3);
                      uint64_t v130 = *(void *)(a3 + 16);
                      if (!v130) {
                        goto LABEL_189;
                      }
LABEL_131:
                      uint64_t v131 = v130 - 1;
                      uint64_t v132 = a3 + 16 * v131;
                      uint64_t v133 = *(void *)(v132 + 32);
                      uint64_t v134 = *(void *)(v132 + 40);
                      *(void *)(a3 + 16) = v131;
                      *unint64_t v39 = a3;
                      if (v133 == 3567721 && v134 == 0xE300000000000000)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        char v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if ((v151 & 1) == 0) {
                          goto LABEL_151;
                        }
                      }
                      uint64_t v152 = v41;
                      uint64_t v208 = *v39;
                      sub_100010BCC(&qword_10047FEA8);
                      sub_10000F9CC(&qword_10047FEB0, &qword_10047FEA8);
                      swift_bridgeObjectRetain();
                      uint64_t v153 = BidirectionalCollection<>.joined(separator:)();
                      unint64_t v155 = v154;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v156 = String.hexData.getter(v153, v155);
                      unint64_t v158 = v157;
                      swift_bridgeObjectRelease();
                      if (v158 >> 60 != 15)
                      {
                        uint64_t v159 = sub_1002577C8(v156, v158);
                        if (v152)
                        {
                          sub_10000C95C(v156, v158);
                          swift_errorRelease();
                        }
                        else
                        {
                          uint64_t v170 = v159;
                          uint64_t v171 = v160;
                          sub_10000C95C(v156, v158);
                          uint64_t v172 = *(void *)(v40 + 16);
                          if (v172)
                          {
                            *(void *)&long long v194 = *(void *)(v40 + 32);
                            uint64_t v173 = *(void *)(v40 + 40);
                            uint64_t v174 = v40 + 32 + 16 * v172;
                            uint64_t v176 = *(void *)(v174 - 16);
                            uint64_t v175 = *(void *)(v174 - 8);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRelease();
                            if (v176 == 0x6C61636F6CLL && v175 == 0xE500000000000000)
                            {
                              swift_bridgeObjectRelease();
                            }
                            else
                            {
                              char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              if ((v178 & 1) == 0) {
                                goto LABEL_151;
                              }
                            }
                            uint64_t v179 = v195;
                            v195[3] = (uint64_t)&type metadata for DNSRecords.ARPA;
                            v179[4] = (uint64_t)&protocol witness table for DNSRecords.ARPA;
                            uint64_t v180 = swift_allocObject();
                            *uint64_t v179 = v180;
                            uint64_t result = swift_release();
                            *(unsigned char *)(v180 + 16) = 11;
                            *(void *)(v180 + 24) = v194;
                            *(void *)(v180 + 32) = v173;
                            *(unsigned char *)(v180 + 40) = (_BYTE)v13;
                            *(void *)(v180 + 48) = v170;
                            *(void *)(v180 + 56) = v171;
                            *(void *)(v180 + 64) = 0;
                            *(void *)(v180 + 72) = 0;
                            return result;
                          }
                        }
                      }
LABEL_151:
                      swift_bridgeObjectRelease();
                      goto LABEL_20;
                    }
                    break;
                  default:
                    goto LABEL_20;
                }
                goto LABEL_181;
              }
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
              break;
            case 2:
              uint64_t v52 = *(void *)(qword_10047FDB0 + 16);
              uint64_t v53 = *(void *)(qword_10047FDB0 + 24);
              uint64_t v42 = v53 - v52;
              if (!__OFSUB__(v53, v52)) {
                goto LABEL_48;
              }
              goto LABEL_176;
            case 3:
              goto LABEL_48;
            default:
              uint64_t v42 = algn_10047FDB8[6];
              goto LABEL_48;
          }
          goto LABEL_178;
        }
        if (v35 > 0x1Au)
        {
          uint64_t v10 = (char *)v190;
          uint64_t v13 = (char *)v192;
          if (v35 != 53 && v35 != 27) {
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v10 = (char *)v190;
          uint64_t v13 = (char *)v192;
          if (v35)
          {
            if (v35 == 11)
            {
              unint64_t v39 = (uint64_t *)*v190;
              if (*(void *)(*v190 + 16) != 3) {
                goto LABEL_65;
              }
              if (v39[8] != 0x6C61636F6CLL || v39[9] != 0xE500000000000000)
              {
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  goto LABEL_65;
                }
                uint64_t v70 = v39[2];
                if (!v70) {
                  goto LABEL_65;
                }
                if (v70 == 1)
                {
                  __break(1u);
                  goto LABEL_127;
                }
              }
              uint64_t v41 = v39[4];
              uint64_t v43 = v39[5];
              uint64_t v44 = v39[6];
              unint64_t v39 = (uint64_t *)v39[7];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v45 = _s7CoreP2P14Layer3ProtocolO8dnsLabelACSgSS_tcfC_0(v44, (unint64_t)v39);
              if (v45 != 2)
              {
                char v89 = v45 & 1;
                char v90 = v40;
                uint64_t v91 = v195;
                v195[3] = (uint64_t)&type metadata for DNSRecords.Identifier;
                v91[4] = (uint64_t)&protocol witness table for DNSRecords.Identifier;
                uint64_t result = swift_release();
                *uint64_t v91 = v41;
                v91[1] = v43;
                *((unsigned char *)v91 + 16) = v89;
                *((unsigned char *)v91 + 17) = v90;
                return result;
              }
              swift_bridgeObjectRelease();
LABEL_65:
              a3 = *(void *)v10;
              if (!*(void *)(*(void *)v10 + 16)) {
                goto LABEL_115;
              }
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v71 = *(void *)(a3 + 16);
                if (!v71) {
                  goto LABEL_179;
                }
                goto LABEL_68;
              }
LABEL_178:
              a3 = (uint64_t)sub_1001DFD48((void *)a3);
              uint64_t v71 = *(void *)(a3 + 16);
              if (!v71)
              {
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
                goto LABEL_182;
              }
LABEL_68:
              uint64_t v72 = v71 - 1;
              uint64_t v73 = a3 + 16 * v72;
              uint64_t v74 = *(void *)(v73 + 32);
              unint64_t v39 = *(uint64_t **)(v73 + 40);
              *(void *)(a3 + 16) = v72;
              *(void *)uint64_t v10 = a3;
              if (v74 == 1634759265 && v39 == (uint64_t *)0xE400000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v75 & 1) == 0) {
                  goto LABEL_115;
                }
              }
              a3 = *(void *)v10;
              if (!*(void *)(*(void *)v10 + 16)) {
                goto LABEL_115;
              }
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v76 = *(void *)(a3 + 16);
                if (!v76) {
                  goto LABEL_183;
                }
LABEL_75:
                uint64_t v77 = v76 - 1;
                uint64_t v78 = a3 + 16 * v77;
                uint64_t v79 = *(void *)(v78 + 32);
                uint64_t v80 = *(void *)(v78 + 40);
                *(void *)(a3 + 16) = v77;
                *(void *)uint64_t v10 = a3;
                if (v79 == 3567721 && v80 == 0xE300000000000000)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_112;
                }
                char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v112)
                {
LABEL_112:
                  uint64_t v208 = *(void *)v10;
                  sub_100010BCC(&qword_10047FEA8);
                  sub_10000F9CC(&qword_10047FEB0, &qword_10047FEA8);
                  swift_bridgeObjectRetain();
                  uint64_t v113 = BidirectionalCollection<>.joined(separator:)();
                  unint64_t v115 = v114;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v116 = String.hexData.getter(v113, v115);
                  unint64_t v118 = v117;
                  swift_bridgeObjectRelease();
                  if (v118 >> 60 != 15)
                  {
                    char v119 = v40;
                    uint64_t v120 = v191;
                    uint64_t v121 = sub_1002577C8(v116, v118);
                    if (!v120)
                    {
                      uint64_t v144 = v121;
                      uint64_t v145 = v122;
                      sub_10000C95C(v116, v118);
                      unint64_t v146 = v195;
                      v195[3] = (uint64_t)&type metadata for DNSRecords.ARPABrowse;
                      v146[4] = (uint64_t)&protocol witness table for DNSRecords.ARPABrowse;
                      uint64_t v147 = swift_allocObject();
                      *unint64_t v146 = v147;
                      uint64_t result = swift_release();
                      *(void *)(v147 + 16) = v144;
                      *(void *)(v147 + 24) = v145;
                      *(void *)(v147 + 32) = 0;
                      *(void *)(v147 + 40) = 0;
                      *(unsigned char *)(v147 + 48) = v119;
                      return result;
                    }
                    sub_10000C95C(v116, v118);
                    swift_errorRelease();
                  }
                }
LABEL_115:
                sub_10000F000();
                swift_allocError();
                *(_OWORD *)uint64_t v123 = xmmword_1003B00B0;
                *(unsigned char *)(v123 + 16) = 2;
                swift_willThrow();
                return swift_release();
              }
LABEL_182:
              a3 = (uint64_t)sub_1001DFD48((void *)a3);
              uint64_t v76 = *(void *)(a3 + 16);
              if (!v76)
              {
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
                goto LABEL_185;
              }
              goto LABEL_75;
            }
LABEL_54:
            sub_10012455C((uint64_t)v13, v37, (uint64_t)&v203);
            if (!v41)
            {
              long long v194 = v203;
              uint64_t v59 = v204;
              uint64_t v60 = v205;
              char v61 = v206;
              char v62 = v207;
              unint64_t v63 = v195;
              v195[3] = (uint64_t)&type metadata for DNSRecords.Browse;
              v63[4] = (uint64_t)&off_10045C390;
              uint64_t v64 = swift_allocObject();
              *unint64_t v63 = v64;
              uint64_t result = swift_release();
              *(unsigned char *)(v64 + 16) = v35;
              *(_OWORD *)(v64 + 24) = v194;
              *(void *)(v64 + 40) = v59;
              *(void *)(v64 + 48) = v60;
              *(unsigned char *)(v64 + 56) = v61;
              *(unsigned char *)(v64 + 57) = v62;
              return result;
            }
            return swift_release();
          }
        }
        uint64_t v46 = *(void **)v10;
        if (*(void *)(*(void *)v10 + 16) == 2
          && (v46[6] == 0x6C61636F6CLL && v46[7] == 0xE500000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && v46[2]))
        {
          uint64_t v48 = v46[4];
          uint64_t v47 = v46[5];
          char v49 = v40;
          uint64_t v50 = v195;
          v195[3] = (uint64_t)&type metadata for DNSRecords.BrowseHost;
          v50[4] = (uint64_t)&protocol witness table for DNSRecords.BrowseHost;
          uint64_t v51 = swift_allocObject();
          *uint64_t v50 = v51;
          swift_bridgeObjectRetain();
          uint64_t result = swift_release();
          *(unsigned char *)(v51 + 16) = v35;
          *(void *)(v51 + 24) = v48;
          *(void *)(v51 + 32) = v47;
          *(unsigned char *)(v51 + 40) = v49;
          return result;
        }
        goto LABEL_115;
      }
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      uint64_t v164 = v11[2];
      if (!v164) {
        goto LABEL_173;
      }
      uint64_t v165 = v11[4];
      uint64_t v166 = v11[5];
      uint64_t v167 = (uint64_t)&v11[2 * v164 + 4];
      uint64_t v169 = *(void *)(v167 - 16);
      uint64_t v168 = *(void *)(v167 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v169 == 0x6C61636F6CLL && v168 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_168;
      }
      char v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v177 & 1) == 0)
      {
LABEL_173:
        swift_bridgeObjectRelease();
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v186 = xmmword_1003B00B0;
        *(unsigned char *)(v186 + 16) = 2;
        swift_willThrow();
        (*(void (**)(char *, void))(v193 + 8))(v13, v194);
        return swift_release();
      }
LABEL_168:
      sub_10012455C((uint64_t)v192, (char)v190, (uint64_t)v201);
      if (v15)
      {
        (*(void (**)(char *, void))(v193 + 8))(v13, v194);
        swift_release();
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v181 = (int *)type metadata accessor for DNSRecords.SRV();
        v182 = v195;
        v195[3] = (uint64_t)v181;
        v182[4] = (uint64_t)&protocol witness table for DNSRecords.SRV;
        v183 = sub_1000382F0(v182);
        ((void (*)(char *, char *, void))v189)((char *)v183 + v181[5], v13, v194);
        uint64_t result = swift_release();
        long long v184 = v201[1];
        *(_OWORD *)v183 = v201[0];
        *((_OWORD *)v183 + 1) = v184;
        *((_WORD *)v183 + 16) = v202;
        uint64_t v185 = (uint64_t *)((char *)v183 + v181[6]);
        *uint64_t v185 = v165;
        v185[1] = v166;
        *(_WORD *)((char *)v183 + v181[7]) = v188;
        *(_WORD *)((char *)v183 + v181[8]) = v187;
      }
      return result;
    case 2:
      uint64_t v17 = *(void *)(qword_10047FDA0 + 16);
      uint64_t v18 = *(void *)(qword_10047FDA0 + 24);
      uint64_t v16 = v18 - v17;
      if (!__OFSUB__(v18, v17)) {
        goto LABEL_11;
      }
      goto LABEL_156;
    case 3:
      goto LABEL_11;
    default:
      uint64_t v16 = algn_10047FDA8[6];
      goto LABEL_11;
  }
}

void *sub_100123940(unint64_t a1, unint64_t a2, int64_t a3)
{
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  BOOL v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v100 = a2;
  unint64_t v12 = a2 >> 62;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (int)a1;
      uint64_t v14 = (uint64_t)a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
LABEL_5:
      if (v14 >= v13) {
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_143;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = 0;
      uint64_t v14 = BYTE6(v100);
LABEL_6:
      if (v13 > a3 || v14 <= a3) {
        goto LABEL_94;
      }
      uint64_t v82 = v11;
      char v81 = v4;
      uint64_t v15 = (uint64_t)a1 >> 32;
      int64_t v101 = BYTE6(v100);
      int64_t v16 = (int)a1;
      int64_t v3 = v100 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v93 = a1 >> 8;
      uint64_t v5 = _swiftEmptyArrayStorage;
      unint64_t v91 = a1 >> 24;
      unint64_t v92 = a1 >> 16;
      unint64_t v94 = HIDWORD(a1);
      unint64_t v89 = HIWORD(a1);
      unint64_t v90 = a1 >> 40;
      unint64_t v87 = v100 >> 8;
      unint64_t v88 = HIBYTE(a1);
      unint64_t v85 = v100 >> 24;
      unint64_t v86 = v100 >> 16;
      unint64_t v84 = HIDWORD(v100);
      unint64_t v83 = v100 >> 40;
      int64_t v80 = a3;
      int64_t v17 = a3;
      uint64_t v98 = (uint64_t)a1 >> 32;
      uint64_t v99 = v12;
      unint64_t v96 = v12;
      uint64_t v97 = (int)a1;
      unint64_t v95 = v100 & 0x3FFFFFFFFFFFFFFFLL;
      break;
  }
  while (2)
  {
    uint64_t v21 = v17;
    int64_t v22 = v101;
    switch(v99)
    {
      case 1:
        int64_t v22 = v15;
        goto LABEL_14;
      case 2:
        if (v17 < *(void *)(a1 + 24)) {
          goto LABEL_17;
        }
        goto LABEL_93;
      case 3:
        swift_bridgeObjectRelease();
        if ((v80 & 0x8000000000000000) == 0) {
          goto LABEL_94;
        }
        __break(1u);
LABEL_92:
        sub_10000C970(v15, v17);
        goto LABEL_93;
      default:
LABEL_14:
        if (v17 >= v22) {
          goto LABEL_93;
        }
LABEL_17:
        if (!v12)
        {
          if (v17 >= v101) {
            goto LABEL_144;
          }
          v102[0] = v16;
          v102[1] = v93;
          v102[2] = v92;
          v102[3] = v91;
          v102[4] = v94;
          v102[5] = v90;
          v102[6] = v89;
          v102[7] = v88;
          v102[8] = v100;
          v102[9] = v87;
          v102[10] = v86;
          v102[11] = v85;
          v102[12] = v84;
          v102[13] = v83;
          unint64_t v26 = v102[v17];
          uint64_t v27 = (void *)(v17 + 1);
          if (!v102[v17]) {
            return v5;
          }
LABEL_33:
          if (v26 > 0x3F)
          {
            uint64_t v103 = v5;
            if (v26 < 0xC0) {
              return v5;
            }
            if (v12)
            {
              uint64_t v55 = v15;
              if (v12 != 1)
              {
                int64_t v16 = *(void *)(a1 + 16);
                uint64_t v55 = *(void *)(a1 + 24);
              }
            }
            else
            {
              uint64_t v55 = v101;
              int64_t v16 = v99;
            }
            if (v55 >= v21 && v55 >= v16)
            {
              uint64_t v6 = v5;
              uint64_t v58 = Data._Representation.subscript.getter();
              unint64_t v60 = v59;
              char v61 = v81;
              uint64_t v62 = sub_100257908(v58, v59);
              uint64_t v5 = v61;
              if (v61) {
                goto LABEL_100;
              }
              int64_t v17 = v62;
              sub_10000C970(v58, v60);
              sub_10011B074(v21, 2, a1, v100);
              unint64_t v26 = v101;
              int64_t v3 = v80;
              uint64_t v15 = v98;
              if (v12)
              {
                if (v12 == 1)
                {
                  unint64_t v26 = (v94 - a1);
                  if (!__OFSUB__(v94, a1))
                  {
                    unint64_t v26 = (int)v26;
                    goto LABEL_107;
                  }
                  goto LABEL_157;
                }
                uint64_t v65 = *(void *)(a1 + 16);
                uint64_t v64 = *(void *)(a1 + 24);
                BOOL v66 = __OFSUB__(v64, v65);
                unint64_t v26 = v64 - v65;
                if (v66)
                {
LABEL_158:
                  __break(1u);
                  goto LABEL_159;
                }
              }
LABEL_107:
              uint64_t v30 = bswap32(v17 & 0xFFFFFF3F) >> 16;
              if ((uint64_t)v26 > v30)
              {
                switch(v30)
                {
                  case 0x1C:
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v6 = sub_1000C5698(0, v6[2] + 1, 1, v6);
                    }
                    unint64_t v67 = v6[2];
                    unint64_t v26 = v6[3];
                    int64_t v68 = v26 >> 1;
                    int64_t v17 = v67 + 1;
                    if (v26 >> 1 <= v67)
                    {
                      uint64_t v6 = sub_1000C5698((void *)(v26 > 1), v67 + 1, 1, v6);
                      unint64_t v26 = v6[3];
                      int64_t v68 = v26 >> 1;
                    }
                    void v6[2] = v17;
                    uint64_t v70 = &v6[2 * v67];
                    v70[4] = 7365749;
                    v70[5] = 0xE300000000000000;
LABEL_121:
                    int64_t v3 = v67 + 2;
                    if (v68 >= v3)
                    {
LABEL_122:
                      void v6[2] = v3;
                      uint64_t v71 = &v6[2 * v17];
LABEL_128:
                      v71[4] = 0x6C61636F6CLL;
                      v71[5] = 0xE500000000000000;
                      return v6;
                    }
LABEL_159:
                    uint64_t v6 = sub_1000C5698((void *)(v26 > 1), v3, 1, v6);
                    goto LABEL_122;
                  case 0x11:
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v6 = sub_1000C5698(0, v6[2] + 1, 1, v6);
                    }
                    unint64_t v73 = v6[2];
                    unint64_t v72 = v6[3];
                    if (v73 >= v72 >> 1) {
                      uint64_t v6 = sub_1000C5698((void *)(v72 > 1), v73 + 1, 1, v6);
                    }
                    void v6[2] = v73 + 1;
                    uint64_t v71 = &v6[2 * v73];
                    goto LABEL_128;
                  case 0xC:
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v6 = sub_1000C5698(0, v6[2] + 1, 1, v6);
                    }
                    unint64_t v67 = v6[2];
                    unint64_t v26 = v6[3];
                    int64_t v68 = v26 >> 1;
                    int64_t v17 = v67 + 1;
                    if (v26 >> 1 <= v67)
                    {
                      uint64_t v6 = sub_1000C5698((void *)(v26 > 1), v67 + 1, 1, v6);
                      unint64_t v26 = v6[3];
                      int64_t v68 = v26 >> 1;
                    }
                    void v6[2] = v17;
                    uint64_t v69 = &v6[2 * v67];
                    v69[4] = 7365492;
                    v69[5] = 0xE300000000000000;
                    goto LABEL_121;
                }
                if (!v12) {
                  goto LABEL_136;
                }
                uint64_t v74 = v97;
                if (v12 != 1) {
                  uint64_t v74 = *(void *)(a1 + 16);
                }
LABEL_137:
                if (sub_10011B074(v74, v30, a1, v100) < v3)
                {
                  if (!v12) {
                    goto LABEL_151;
                  }
                  int64_t v75 = v97;
                  if (v12 != 1)
                  {
                    int64_t v75 = *(void *)(a1 + 16);
                    uint64_t v15 = *(void *)(a1 + 24);
                  }
                  goto LABEL_152;
                }
              }
LABEL_93:
              swift_bridgeObjectRelease();
LABEL_94:
              sub_10000F000();
              swift_allocError();
              *(void *)uint64_t v56 = 0;
              *(void *)(v56 + 8) = 0;
              *(unsigned char *)(v56 + 16) = 2;
              swift_willThrow();
              return v6;
            }
            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
          if (v12)
          {
            uint64_t v30 = v15;
            uint64_t v31 = v16;
            if (v12 != 1)
            {
              uint64_t v31 = *(void *)(a1 + 16);
              uint64_t v30 = *(void *)(a1 + 24);
            }
          }
          else
          {
            uint64_t v30 = v101;
            uint64_t v31 = v99;
          }
          if (v30 <= v21 || v30 < v31)
          {
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            uint64_t v74 = v99;
            goto LABEL_137;
          }
          int64_t v3 = v26;
          uint64_t v6 = v27;
          unint64_t v32 = Data._Representation.subscript.getter();
          uint64_t v15 = v32;
          int64_t v17 = v33;
          switch(v33 >> 62)
          {
            case 1uLL:
              unint64_t v35 = HIDWORD(v32);
              sub_10000C970(v32, v33);
              LODWORD(v34) = v35 - v15;
              if (__OFSUB__(v35, v15)) {
                goto LABEL_149;
              }
              int64_t v34 = (int)v34;
              break;
            case 2uLL:
              uint64_t v36 = *(void *)(v32 + 16);
              uint64_t v37 = *(void *)(v32 + 24);
              sub_10000C970(v32, v33);
              int64_t v34 = v37 - v36;
              if (__OFSUB__(v37, v36)) {
                goto LABEL_150;
              }
              LODWORD(v12) = v96;
              break;
            case 3uLL:
              goto LABEL_92;
            default:
              sub_10000C970(v32, v33);
              int64_t v34 = BYTE6(v17);
              goto LABEL_47;
          }
          int64_t v16 = v97;
LABEL_47:
          if (v34 < v3) {
            goto LABEL_93;
          }
          int64_t v17 = (int64_t)v6 + v3;
          if (__OFADD__(v6, v3)) {
            goto LABEL_133;
          }
          if (v12)
          {
            int64_t v38 = v98;
            if (v12 != 1)
            {
              int64_t v16 = *(void *)(a1 + 16);
              int64_t v38 = *(void *)(a1 + 24);
            }
          }
          else
          {
            int64_t v38 = v101;
            int64_t v16 = v99;
          }
          if (v38 < v17 || v17 < v16) {
            goto LABEL_134;
          }
          int64_t v39 = v101;
          switch(v99)
          {
            case 1:
              int64_t v39 = v98;
              goto LABEL_58;
            case 2:
              int64_t v39 = *(void *)(a1 + 24);
              goto LABEL_58;
            case 3:
              if (v17 <= 0) {
                goto LABEL_61;
              }
              goto LABEL_93;
            default:
LABEL_58:
              if (v39 < v17) {
                goto LABEL_93;
              }
LABEL_61:
              if (v17 <= v21) {
                goto LABEL_135;
              }
              uint64_t v40 = Data._Representation.subscript.getter();
              unint64_t v12 = v41;
              if (sub_100125050(0x11u, v40, v41))
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v5 = sub_1000C5698(0, v5[2] + 1, 1, v5);
                }
                unint64_t v43 = v5[2];
                unint64_t v42 = v5[3];
                if (v43 >= v42 >> 1) {
                  uint64_t v5 = sub_1000C5698((void *)(v42 > 1), v43 + 1, 1, v5);
                }
                _OWORD v5[2] = v43 + 1;
                uint64_t v44 = &v5[2 * v43];
                v44[4] = 0x6C61636F6CLL;
                uint64_t v20 = v44 + 4;
                uint64_t v6 = (void *)0xE500000000000000;
                goto LABEL_11;
              }
              if (sub_100125050(0xCu, v40, v12))
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v5 = sub_1000C5698(0, v5[2] + 1, 1, v5);
                }
                unint64_t v46 = v5[2];
                unint64_t v45 = v5[3];
                if (v46 >= v45 >> 1) {
                  uint64_t v5 = sub_1000C5698((void *)(v45 > 1), v46 + 1, 1, v5);
                }
                _OWORD v5[2] = v46 + 1;
                uint64_t v18 = &v5[2 * v46];
                uint64_t v19 = 7365492;
LABEL_10:
                v18[4] = v19;
                uint64_t v20 = v18 + 4;
                uint64_t v6 = (void *)0xE300000000000000;
                goto LABEL_11;
              }
              if (sub_100125050(0x1Cu, v40, v12))
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v5 = sub_1000C5698(0, v5[2] + 1, 1, v5);
                }
                unint64_t v48 = v5[2];
                unint64_t v47 = v5[3];
                if (v48 >= v47 >> 1) {
                  uint64_t v5 = sub_1000C5698((void *)(v47 > 1), v48 + 1, 1, v5);
                }
                _OWORD v5[2] = v48 + 1;
                uint64_t v18 = &v5[2 * v48];
                uint64_t v19 = 7365749;
                goto LABEL_10;
              }
              static String.Encoding.utf8.getter();
              uint64_t v49 = String.init(data:encoding:)();
              if (!v50)
              {
                swift_bridgeObjectRelease();
                sub_10000F000();
                swift_allocError();
                *(_OWORD *)uint64_t v63 = xmmword_1003B00B0;
                *(unsigned char *)(v63 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v40, v12);
                return v6;
              }
              uint64_t v51 = v49;
              uint64_t v6 = v50;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v5 = sub_1000C5698(0, v5[2] + 1, 1, v5);
              }
              unint64_t v53 = v5[2];
              unint64_t v52 = v5[3];
              if (v53 >= v52 >> 1) {
                uint64_t v5 = sub_1000C5698((void *)(v52 > 1), v53 + 1, 1, v5);
              }
              _OWORD v5[2] = v53 + 1;
              int64_t v54 = &v5[2 * v53];
              v54[4] = v51;
              uint64_t v20 = v54 + 4;
LABEL_11:
              v20[1] = v6;
              sub_10000C970(v40, v12);
              LODWORD(v12) = v96;
              int64_t v16 = v97;
              uint64_t v15 = v98;
              int64_t v3 = v95;
              break;
          }
          continue;
        }
        if (v12 != 1)
        {
          if (v17 < *(void *)(a1 + 16)) {
            goto LABEL_145;
          }
          if (v17 >= *(void *)(a1 + 24)) {
            goto LABEL_147;
          }
          uint64_t v28 = __DataStorage._bytes.getter();
          if (!v28) {
            goto LABEL_161;
          }
          int64_t v17 = v28;
          uint64_t v29 = __DataStorage._offset.getter();
          uint64_t v25 = v21 - v29;
          if (__OFSUB__(v21, v29)) {
            goto LABEL_148;
          }
          goto LABEL_32;
        }
        if (v17 >= v16 && v17 < v15)
        {
          uint64_t v23 = __DataStorage._bytes.getter();
          if (v23)
          {
            int64_t v17 = v23;
            uint64_t v24 = __DataStorage._offset.getter();
            uint64_t v25 = v21 - v24;
            if (__OFSUB__(v21, v24)) {
              goto LABEL_146;
            }
LABEL_32:
            unint64_t v26 = *(unsigned __int8 *)(v17 + v25);
            uint64_t v27 = (void *)(v21 + 1);
            if (!v26) {
              return v5;
            }
            goto LABEL_33;
          }
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          JUMPOUT(0x100124518);
        }
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        uint64_t v15 = v101;
        int64_t v75 = v99;
LABEL_152:
        if (v15 < v75 || v75 > v3) {
          goto LABEL_162;
        }
        uint64_t v58 = Data._Representation.subscript.getter();
        unint64_t v60 = v76;
        uint64_t v77 = sub_100123940();
        if (!v5)
        {
          uint64_t v78 = v77;
          sub_10000C970(v58, v60);
          sub_1001DE7F0(v78);
          return v103;
        }
LABEL_100:
        swift_bridgeObjectRelease();
        sub_10000C970(v58, v60);
        return v6;
    }
  }
}

uint64_t sub_10012455C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7[2] != 4) {
    goto LABEL_11;
  }
  if (v7[10] == 0x6C61636F6CLL && v7[11] == 0xE500000000000000) {
    goto LABEL_9;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
  unint64_t v10 = v7[2];
  if (!v10) {
    goto LABEL_11;
  }
  if (v10 >= 3)
  {
LABEL_9:
    uint64_t v12 = v7[4];
    uint64_t v11 = v7[5];
    uint64_t v13 = v7[8];
    unint64_t v14 = v7[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v15 = _s7CoreP2P14Layer3ProtocolO8dnsLabelACSgSS_tcfC_0(v13, v14);
    if (v15 == 2)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
      *(unsigned char *)(v16 + 16) = 2;
      return swift_willThrow();
    }
    char v17 = v15;
    uint64_t result = swift_beginAccess();
    uint64_t v18 = *v6;
    if (*(void *)(*v6 + 16) >= 2uLL)
    {
      uint64_t v20 = *(void *)(v18 + 48);
      uint64_t v19 = *(void *)(v18 + 56);
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = v11;
      *(void *)(a3 + 16) = v20;
      *(void *)(a3 + 24) = v19;
      *(unsigned char *)(a3 + 32) = v17 & 1;
      *(unsigned char *)(a3 + 33) = a2;
      return swift_bridgeObjectRetain();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t DNSRecords.RecordType.description.getter(char a1)
{
  v1._uint64_t countAndFlagsBits = sub_10012479C(a1);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 91;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 10077;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return 39;
}

uint64_t sub_10012479C(char a1)
{
  uint64_t result = 0x73736572646441;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x72655320656D614ELL;
      break;
    case 2:
      uint64_t result = 0xD000000000000010;
      break;
    case 3:
      uint64_t result = 0x726F46206C69614DLL;
      break;
    case 4:
      uint64_t result = 0x6163696E6F6E6143;
      break;
    case 5:
      uint64_t result = 0xD000000000000012;
      break;
    case 6:
      uint64_t result = 0x786F626C69614DLL;
      break;
    case 7:
      uint64_t result = 0x6F7247206C69614DLL;
      break;
    case 8:
      uint64_t result = 0x6E6552206C69614DLL;
      break;
    case 9:
      uint64_t result = 0x5252204C4C554ELL;
      break;
    case 10:
      uint64_t result = 0xD000000000000012;
      break;
    case 11:
    case 13:
    case 30:
    case 41:
    case 43:
    case 46:
      uint64_t result = 0xD000000000000013;
      break;
    case 12:
      uint64_t result = 0xD000000000000010;
      break;
    case 14:
      uint64_t result = 0x637845206C69614DLL;
      break;
    case 15:
      uint64_t result = 0xD000000000000015;
      break;
    case 16:
      uint64_t result = 0xD000000000000012;
      break;
    case 17:
      uint64_t result = 0xD000000000000011;
      break;
    case 18:
      uint64_t result = 0xD000000000000014;
      break;
    case 19:
      uint64_t result = 0xD000000000000014;
      break;
    case 20:
      uint64_t result = 0x726574756F52;
      break;
    case 21:
      uint64_t v3 = 0x61205041534ELL;
      goto LABEL_29;
    case 22:
      uint64_t result = 0xD000000000000020;
      break;
    case 23:
      uint64_t result = 0xD000000000000012;
      break;
    case 24:
      uint64_t result = 0x7974697275636553;
      break;
    case 25:
      uint64_t result = 0xD000000000000012;
      break;
    case 26:
      uint64_t result = 0xD000000000000021;
      break;
    case 27:
      uint64_t v3 = 0x412036765049;
LABEL_29:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6464000000000000;
      break;
    case 28:
      uint64_t result = 0xD000000000000014;
      break;
    case 29:
      uint64_t result = 0xD000000000000016;
      break;
    case 31:
      uint64_t result = 0x4C20646F726D694ELL;
      break;
    case 32:
    case 52:
      uint64_t result = 0x2065636976726553;
      break;
    case 33:
      uint64_t result = 0x72646441204D5441;
      break;
    case 34:
      uint64_t result = 0xD000000000000018;
      break;
    case 35:
      uint64_t result = 0x686378452079654BLL;
      break;
    case 36:
      uint64_t result = 0xD000000000000014;
      break;
    case 37:
      uint64_t result = 0xD000000000000019;
      break;
    case 38:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 39:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 40:
      uint64_t result = 0xD000000000000016;
      break;
    case 42:
      uint64_t result = 0xD000000000000011;
      break;
    case 44:
      uint64_t result = 0x59454B4345535049;
      break;
    case 45:
      uint64_t result = 0x4749535252;
      break;
    case 47:
      uint64_t result = 0x59454B534E44;
      break;
    case 48:
      uint64_t result = 0xD000000000000016;
      break;
    case 49:
    case 50:
      uint64_t result = 0xD000000000000028;
      break;
    case 51:
      uint64_t result = 0xD000000000000016;
      break;
    case 53:
      uint64_t result = 0xD000000000000015;
      break;
    case 54:
      uint64_t result = 0xD000000000000022;
      break;
    case 55:
    case 56:
    case 57:
    case 58:
      uint64_t result = 0x7365522D414E4149;
      break;
    case 59:
      uint64_t result = 0x746361736E617254;
      break;
    case 60:
      uint64_t result = 0xD000000000000015;
      break;
    case 61:
      uint64_t result = 0xD000000000000019;
      break;
    case 62:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 63:
      uint64_t result = 0xD000000000000018;
      break;
    case 64:
      uint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100124EB4(char *a1, char *a2)
{
  return word_1003BF024[*a1] == word_1003BF024[*a2];
}

Swift::Int sub_100124ED8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003BF024[v1]);
  return Hasher._finalize()();
}

void sub_100124F28()
{
  Hasher._combine(_:)(word_1003BF024[*v0]);
}

Swift::Int sub_100124F60()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003BF024[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100124FAC@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100124FD8(_WORD *a1@<X8>)
{
  *a1 = word_1003BF024[*v1];
}

uint64_t sub_100124FF0()
{
  return DNSRecords.RecordType.description.getter(*v0);
}

uint64_t sub_100124FF8()
{
  uint64_t result = sub_1001265EC((uint64_t)&off_10044DC80);
  qword_10047FDA0 = result;
  *(void *)algn_10047FDA8 = v1;
  return result;
}

uint64_t sub_100125024()
{
  uint64_t result = sub_1001265EC((uint64_t)&off_10044DC58);
  qword_10047FDB0 = result;
  *(void *)algn_10047FDB8 = v1;
  return result;
}

uint64_t sub_100125050(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  if (qword_10047BFE0 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10047FDA0;
  unint64_t v7 = *(void *)algn_10047FDA8;
  uint64_t v8 = 0;
  switch(*(void *)algn_10047FDA8 >> 62)
  {
    case 1:
      uint64_t v8 = (int)qword_10047FDA0;
      goto LABEL_6;
    case 2:
      uint64_t v8 = *(void *)(qword_10047FDA0 + 16);
LABEL_6:
      sub_100013D44(qword_10047FDA0, *(unint64_t *)algn_10047FDA8);
      break;
    default:
      break;
  }
  uint64_t v9 = sub_10011B074(v8, a1 + 1, v6, v7);
  sub_10000C970(v6, v7);
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_37;
      }
      uint64_t v10 = HIDWORD(a2) - (int)a2;
LABEL_12:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      switch(*(void *)algn_10047FDA8 >> 62)
      {
        case 1:
          uint64_t v14 = (int)qword_10047FDA0;
          uint64_t v13 = qword_10047FDA0 >> 32;
          break;
        case 2:
          uint64_t v14 = *(void *)(qword_10047FDA0 + 16);
          uint64_t v13 = *(void *)(qword_10047FDA0 + 24);
          break;
        case 3:
          break;
        default:
          uint64_t v14 = 0;
          uint64_t v13 = algn_10047FDA8[6];
          break;
      }
      if (v13 < v9 || v13 < v14)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x10012535CLL);
      }
      unint64_t v16 = Data._Representation.subscript.getter();
      int v18 = v16;
      unsigned __int8 v19 = BYTE6(v17);
      switch(v17 >> 62)
      {
        case 1uLL:
          unint64_t v21 = HIDWORD(v16);
          sub_10000C970(v16, v17);
          LODWORD(v20) = v21 - v18;
          if (__OFSUB__(v21, v18)) {
            goto LABEL_39;
          }
          uint64_t v20 = (int)v20;
LABEL_25:
          if (v20 < v10) {
            return 0;
          }
LABEL_26:
          uint64_t v24 = 0;
          switch(a3 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(a2), a2)) {
                goto LABEL_41;
              }
              uint64_t v24 = HIDWORD(a2) - (int)a2;
LABEL_33:
              if (sub_10011B074(v9, v24, qword_10047FDA0, *(unint64_t *)algn_10047FDA8) < v9) {
                goto LABEL_36;
              }
              uint64_t v28 = Data._Representation.subscript.getter();
              unint64_t v30 = v29;
              char v31 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, v28, v29);
              sub_10000C970(v28, v30);
              uint64_t result = v31 & 1;
              break;
            case 2uLL:
              uint64_t v27 = *(void *)(a2 + 16);
              uint64_t v26 = *(void *)(a2 + 24);
              uint64_t v24 = v26 - v27;
              if (!__OFSUB__(v26, v27)) {
                goto LABEL_33;
              }
              goto LABEL_42;
            case 3uLL:
              goto LABEL_33;
            default:
              uint64_t v24 = BYTE6(a3);
              goto LABEL_33;
          }
          return result;
        case 2uLL:
          uint64_t v23 = *(void *)(v16 + 16);
          uint64_t v22 = *(void *)(v16 + 24);
          sub_10000C970(v16, v17);
          uint64_t v20 = v22 - v23;
          if (!__OFSUB__(v22, v23)) {
            goto LABEL_25;
          }
          goto LABEL_40;
        case 3uLL:
          sub_10000C970(v16, v17);
          if (v10 > 0) {
            return 0;
          }
          goto LABEL_26;
        default:
          sub_10000C970(v16, v17);
          uint64_t v20 = v19;
          goto LABEL_25;
      }
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_12;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_12;
  }
}

uint64_t sub_1001253AC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = String.count.getter();
  if ((v7 & 0x8000000000000000) != 0 || v7 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    sub_100039448(a3 + 16, *(void *)(a3 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (!v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_10011A478(a1, a2);
      unint64_t v11 = v10;
      swift_beginAccess();
      sub_100039448(a3 + 16, *(void *)(a3 + 40));
      sub_1000742DC();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      swift_endAccess();
      return sub_10000C970(v9, v11);
    }
  }
  return result;
}

uint64_t sub_10012556C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v5 = a1 == 0x79616C707269615FLL && a2 == 0xE800000000000000;
  if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_beginAccess();
    sub_100039448(a3 + 16, *(void *)(a3 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (!v3)
    {
LABEL_7:
      swift_beginAccess();
      sub_100039448(a3 + 16, *(void *)(a3 + 40));
LABEL_8:
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      return swift_endAccess();
    }
  }
  else if (a1 == 0x706F61725FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_beginAccess();
    sub_100039448(a3 + 16, *(void *)(a3 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (!v3) {
      goto LABEL_7;
    }
  }
  else if (a1 == 0x706F72647269615FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_beginAccess();
    sub_100039448(a3 + 16, *(void *)(a3 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v3)
    {
      swift_endAccess();
      swift_beginAccess();
      sub_100039448(a3 + 16, *(void *)(a3 + 40));
      goto LABEL_8;
    }
    return swift_endAccess();
  }
  else
  {
    return sub_1001253AC(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100125848(char a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  if (a1)
  {
    swift_beginAccess();
    sub_100039448(v4, *(void *)(a2 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (v2) {
      return result;
    }
  }
  else
  {
    swift_beginAccess();
    sub_100039448(v4, *(void *)(a2 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (v2) {
      return result;
    }
  }
  swift_beginAccess();
  sub_100039448(v4, *(void *)(a2 + 40));
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  return swift_endAccess();
}

uint64_t sub_10012599C(unint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  __int16 v9 = a3 & 0xFF01;
  if (sub_10012625C(0x79616C707269615FLL, 0xE800000000000000, 256, a1, a2, a3 & 0xFF01)
    || (sub_10001D82C(), !StringProtocol.caseInsensitiveCompare<A>(_:)())
    && ((a3 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t result = swift_endAccess();
    if (v4) {
      return result;
    }
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    goto LABEL_29;
  }
  if (sub_10012625C(0x706F61725FLL, 0xE500000000000000, 256, a1, a2, v9))
  {
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v4) {
      goto LABEL_28;
    }
    return swift_endAccess();
  }
  if (!StringProtocol.caseInsensitiveCompare<A>(_:)()
    && ((a3 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v4) {
      goto LABEL_28;
    }
    return swift_endAccess();
  }
  if (sub_10012625C(0x706F72647269615FLL, 0xE800000000000000, 256, a1, a2, v9))
  {
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v4) {
      goto LABEL_28;
    }
    return swift_endAccess();
  }
  if (!StringProtocol.caseInsensitiveCompare<A>(_:)()
    && ((a3 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && HIBYTE(a3) == 1)
  {
    swift_beginAccess();
    sub_100039448(a4 + 16, *(void *)(a4 + 40));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v4)
    {
LABEL_28:
      swift_endAccess();
      swift_beginAccess();
      sub_100039448(a4 + 16, *(void *)(a4 + 40));
LABEL_29:
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    return swift_endAccess();
  }
  uint64_t result = sub_10012556C(a1, a2, a4);
  if (!v4) {
    return sub_100125848(a3 & 1, a4);
  }
  return result;
}

unsigned char *sub_100125EC4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_100013D9C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1001264EC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_100126568((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_100125F3C(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100125FAC(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_1000369C4(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_100013D44(a1, a2);
      sub_100013D44(v5, v6);
      sub_10024C558((int)v5, v5 >> 32);
      sub_10000C970(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_100013D44(a1, a2);
      swift_retain();
      swift_retain();
      sub_10024C558(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_100013D44(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return sub_100010754((uint64_t)v10);
}

uint64_t sub_1001261D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_10012625C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  sub_10001D82C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
    return 0;
  }
  if (a3) {
    uint64_t v9 = 7365749;
  }
  else {
    uint64_t v9 = 7365492;
  }
  if (a6) {
    uint64_t v10 = 7365749;
  }
  else {
    uint64_t v10 = 7365492;
  }
  if (v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    BOOL result = 0;
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  return HIBYTE(a3) == (unsigned __int16)(a6 & 0xFF00) >> 8;
}

BOOL _s7CoreP2P10DNSRecordsO3SRVV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v18 = a1[2];
  __int16 v5 = *((unsigned __int8 *)a1 + 32);
  __int16 v6 = *((unsigned __int8 *)a1 + 33);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  __int16 v9 = *((unsigned __int8 *)a2 + 32);
  __int16 v10 = *((unsigned __int8 *)a2 + 33);
  uint64_t v20 = *a1;
  uint64_t v19 = *a2;
  sub_10001D82C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
    return 0;
  }
  if (!sub_10012625C(v18, v4, v5 | (v6 << 8), v7, v8, v9 | (v10 << 8))) {
    return 0;
  }
  char v11 = (int *)type metadata accessor for DNSRecords.SRV();
  type metadata accessor for NWEndpoint.Port();
  sub_100128EB4(&qword_10047E1B0, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((unsigned __int16)v20 != (unsigned __int16)v19) {
    return 0;
  }
  uint64_t v12 = v11[6];
  uint64_t v13 = *(uint64_t *)((char *)a1 + v12);
  uint64_t v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  char v15 = (uint64_t *)((char *)a2 + v12);
  if (v13 == *v15 && v14 == v15[1]
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v16 & 1) != 0))
  {
    if (*(unsigned __int16 *)((char *)a1 + v11[7]) == *(unsigned __int16 *)((char *)a2 + v11[7])) {
      return *(unsigned __int16 *)((char *)a1 + v11[8]) == *(unsigned __int16 *)((char *)a2 + v11[8]);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001264EC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_100126568(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1001265EC(uint64_t a1)
{
  uint64_t v9 = sub_100010BCC(&qword_10047E7D0);
  uint64_t v10 = sub_10000F9CC((unint64_t *)&qword_10047FEA0, &qword_10047E7D0);
  v8[0] = a1;
  uint64_t v2 = sub_1000369C4(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_100125EC4(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100010754((uint64_t)v8);
  return v5;
}

unsigned char *sub_1001266AC(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_100013D9C(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_1001264EC((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_100126568((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_100126710(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t _s7CoreP2P10DNSRecordsO10RecordTypeO8rawValueAESgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 9;
      break;
    case 10:
      uint64_t result = 10;
      break;
    case 11:
      uint64_t result = 11;
      break;
    case 12:
      uint64_t result = 12;
      break;
    case 13:
      uint64_t result = 13;
      break;
    case 14:
      uint64_t result = 14;
      break;
    case 15:
      uint64_t result = 15;
      break;
    case 16:
      uint64_t result = 16;
      break;
    case 17:
      uint64_t result = 17;
      break;
    case 18:
      uint64_t result = 18;
      break;
    case 19:
      uint64_t result = 19;
      break;
    case 20:
      uint64_t result = 20;
      break;
    case 21:
      uint64_t result = 21;
      break;
    case 22:
      uint64_t result = 22;
      break;
    case 23:
      uint64_t result = 23;
      break;
    case 24:
      uint64_t result = 24;
      break;
    case 25:
      uint64_t result = 25;
      break;
    case 26:
      uint64_t result = 26;
      break;
    case 27:
      uint64_t result = 27;
      break;
    case 28:
      uint64_t result = 28;
      break;
    case 29:
      uint64_t result = 29;
      break;
    case 30:
      uint64_t result = 30;
      break;
    case 31:
      uint64_t result = 31;
      break;
    case 32:
      uint64_t result = 32;
      break;
    case 33:
      uint64_t result = 33;
      break;
    case 34:
      uint64_t result = 34;
      break;
    case 35:
      uint64_t result = 35;
      break;
    case 36:
      uint64_t result = 36;
      break;
    case 37:
      uint64_t result = 37;
      break;
    case 38:
      uint64_t result = 38;
      break;
    case 39:
      uint64_t result = 39;
      break;
    case 40:
      uint64_t result = 40;
      break;
    case 41:
      uint64_t result = 41;
      break;
    case 42:
      uint64_t result = 42;
      break;
    case 43:
      uint64_t result = 43;
      break;
    case 44:
      uint64_t result = 44;
      break;
    case 45:
      uint64_t result = 45;
      break;
    case 46:
      uint64_t result = 46;
      break;
    case 47:
      uint64_t result = 47;
      break;
    case 48:
      uint64_t result = 48;
      break;
    case 49:
      uint64_t result = 49;
      break;
    case 50:
      uint64_t result = 50;
      break;
    case 54:
      uint64_t result = 51;
      break;
    case 63:
      uint64_t result = 52;
      break;
    case 64:
      uint64_t result = 53;
      break;
    case 98:
      uint64_t result = 54;
      break;
    case 99:
      uint64_t result = 55;
      break;
    case 100:
      uint64_t result = 56;
      break;
    case 101:
      uint64_t result = 57;
      break;
    case 102:
      uint64_t result = 58;
      break;
    case 248:
      uint64_t result = 59;
      break;
    case 249:
      uint64_t result = 60;
      break;
    case 250:
      uint64_t result = 61;
      break;
    case 251:
      uint64_t result = 62;
      break;
    case 252:
      uint64_t result = 63;
      break;
    case 253:
      uint64_t result = 64;
      break;
    default:
      uint64_t result = 65;
      break;
  }
  return result;
}

uint64_t sub_100126DE8(char a1)
{
  if ((a1 - 1) >= 0xEu) {
    return 14;
  }
  else {
    return (a1 - 1);
  }
}

uint64_t sub_100126E00(unint64_t a1, unint64_t a2)
{
  long long v11 = xmmword_1003B2440;
  sub_100127238(a1, a2);
  if (qword_10047BFE0 != -1) {
    swift_once();
  }
  LOBYTE(v2) = 0;
  switch(*(void *)algn_10047FDA8 >> 62)
  {
    case 1:
      if (__OFSUB__(HIDWORD(qword_10047FDA0), qword_10047FDA0))
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      unint64_t v2 = HIDWORD(qword_10047FDA0) - (int)qword_10047FDA0;
LABEL_8:
      if ((v2 & 0x8000000000000000) != 0 || v2 >= 0x100)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1001270D8);
      }
LABEL_10:
      uint64_t v5 = sub_100010BCC(&qword_10047E738);
      uint64_t v9 = v5;
      uint64_t v6 = sub_10000F9CC(&qword_10047E740, &qword_10047E738);
      uint64_t v10 = v6;
      LOBYTE(v8[0]) = -64;
      sub_1000369C4(v8, v5);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_100010754((uint64_t)v8);
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      LOBYTE(v8[0]) = v2;
      sub_1000369C4(v8, v5);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_100010754((uint64_t)v8);
      return v11;
    case 2:
      uint64_t v3 = *(void *)(qword_10047FDA0 + 16);
      uint64_t v4 = *(void *)(qword_10047FDA0 + 24);
      unint64_t v2 = v4 - v3;
      if (!__OFSUB__(v4, v3)) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3:
      goto LABEL_10;
    default:
      LOBYTE(v2) = algn_10047FDA8[6];
      goto LABEL_10;
  }
}

uint64_t sub_100127108()
{
  sub_100010754(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100127140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001271A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012720C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100127238(unint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10011A478(a1, a2);
  unint64_t v5 = v4 >> 62;
  uint64_t v6 = v8;
  unint64_t v7 = v4;
  LOBYTE(v8) = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(v6) - v6;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 < 64)
      {
        if (!v5)
        {
          LOBYTE(v8) = BYTE6(v4);
LABEL_15:
          sub_10011AF4C(v8);
          sub_100013D44(v6, v7);
          sub_100125FAC(v6, v7);
          sub_10000C970(v6, v7);
          goto LABEL_16;
        }
        if (v5 != 1)
        {
          uint64_t v14 = *(void *)(v6 + 16);
          uint64_t v13 = *(void *)(v6 + 24);
          unint64_t v8 = v13 - v14;
          if (!__OFSUB__(v13, v14)) {
            goto LABEL_13;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        if (!__OFSUB__(HIDWORD(v6), v6))
        {
          unint64_t v8 = HIDWORD(v6) - (int)v6;
LABEL_13:
          if ((v8 & 0x8000000000000000) == 0 && v8 < 0x100) {
            goto LABEL_15;
          }
LABEL_23:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1001273FCLL);
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
LABEL_16:
      return sub_10000C970(v6, v7);
    case 2uLL:
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v9 = BYTE6(v4);
      goto LABEL_6;
  }
}

uint64_t sub_10012740C(uint64_t a1)
{
  return a1;
}

unint64_t sub_10012743C()
{
  unint64_t result = qword_10047FDC0;
  if (!qword_10047FDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDC0);
  }
  return result;
}

unint64_t sub_100127494()
{
  unint64_t result = qword_100488370;
  if (!qword_100488370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100488370);
  }
  return result;
}

unint64_t sub_1001274EC()
{
  unint64_t result = qword_10047FDC8;
  if (!qword_10047FDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDC8);
  }
  return result;
}

unint64_t sub_100127544()
{
  unint64_t result = qword_10047FDD0;
  if (!qword_10047FDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDD0);
  }
  return result;
}

uint64_t sub_100127598()
{
  return sub_100128EB4(&qword_10047FDD8, (void (*)(uint64_t))type metadata accessor for DNSRecords.SRV);
}

unint64_t sub_1001275E4()
{
  unint64_t result = qword_10047FDE0;
  if (!qword_10047FDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDE0);
  }
  return result;
}

unint64_t sub_10012763C()
{
  unint64_t result = qword_10047FDE8;
  if (!qword_10047FDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDE8);
  }
  return result;
}

unint64_t sub_100127694()
{
  unint64_t result = qword_10047FDF0;
  if (!qword_10047FDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDF0);
  }
  return result;
}

unint64_t sub_1001276EC()
{
  unint64_t result = qword_10047FDF8;
  if (!qword_10047FDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FDF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords()
{
  return &type metadata for DNSRecords;
}

uint64_t initializeWithCopy for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.BrowseHost(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.BrowseHost(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.BrowseHost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.BrowseHost()
{
  return &type metadata for DNSRecords.BrowseHost;
}

uint64_t sub_1001278EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.Identifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for NANBloomFilter(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.Identifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.Identifier()
{
  return &type metadata for DNSRecords.Identifier;
}

uint64_t destroy for DNSRecords.PTR()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.PTR(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.PTR(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.PTR(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.PTR()
{
  return &type metadata for DNSRecords.PTR;
}

uint64_t destroy for DNSRecords.TXT(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);

  return sub_10000C970(v2, v3);
}

uint64_t initializeWithCopy for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013D44(v5, v6);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 48);
  sub_100013D44(v5, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  sub_10000C970(v6, v7);
  return a1;
}

__n128 initializeWithTake for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DNSRecords.TXT(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10000C970(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.TXT(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.TXT(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.TXT()
{
  return &type metadata for DNSRecords.TXT;
}

void *initializeBufferWithCopyOfBuffer for DNSRecords.SRV(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v10 = a3[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    uint64_t v13 = type metadata accessor for NWEndpoint.Port();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    unint64_t v17 = (void *)((char *)v4 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *unint64_t v17 = *v18;
    v17[1] = v19;
    *(_WORD *)((char *)v4 + v16) = *(_WORD *)((char *)a2 + v16);
    *(_WORD *)((char *)v4 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DNSRecords.SRV(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  uint64_t v12 = type metadata accessor for NWEndpoint.Port();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v14);
  unint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(_WORD *)(a1 + v15) = *(_WORD *)(a2 + v15);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_WORD *)(a1 + v11) = *(_WORD *)(a2 + v11);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for DNSRecords.SRV(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  *(_WORD *)(a1 + v17) = *(_WORD *)(a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.SRV(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012849C);
}

uint64_t sub_10012849C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NWEndpoint.Port();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DNSRecords.SRV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128560);
}

uint64_t sub_100128560(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint.Port();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100128608()
{
  uint64_t result = type metadata accessor for NWEndpoint.Port();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 initializeWithTake for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.AAAA()
{
  return &type metadata for DNSRecords.AAAA;
}

uint64_t initializeWithCopy for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.ARPABrowse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.ARPABrowse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.ARPABrowse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.ARPABrowse()
{
  return &type metadata for DNSRecords.ARPABrowse;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7CoreP2P10DNSRecordsO4AAAAVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100128A8C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.ARPA()
{
  return &type metadata for DNSRecords.ARPA;
}

uint64_t getEnumTagSinglePayload for DNSRecords.RecordType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xC0) {
    goto LABEL_17;
  }
  if (a2 + 64 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 64) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 64;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x41;
  int v8 = v6 - 65;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DNSRecords.RecordType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 64 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 64) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBF)
  {
    unsigned int v6 = ((a2 - 192) >> 8) + 1;
    void *result = a2 + 64;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100128C48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 64;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.RecordType()
{
  return &type metadata for DNSRecords.RecordType;
}

uint64_t destroy for DNSRecords.Browse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DNSRecords.Browse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for DNSRecords.Browse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DNSRecords.Browse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DNSRecords.Browse()
{
  return &type metadata for DNSRecords.Browse;
}

uint64_t sub_100128EB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100128EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  void v12[2] = v13;
  uint64_t result = sub_100125F3C((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100128F68, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_100128F68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1001261D0(a1, a2);
}

uint64_t sub_100128F88()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100128FC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100129000()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100129038()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100129070()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001290BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001290FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 50, 7);
}

uint64_t AWDLIdleActivity.init(durationSinceLastUnicastTx:durationSinceLastUnicastRx:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);

  return v9(v7, a2, v6);
}

uint64_t type metadata accessor for AWDLIdleActivity(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047FFF8);
}

void __swiftcall NANDataResponseReceivedEvent.init(datapathID:publishID:initiatorDataAddress:responderDataAddress:responderManagementAddress:attributes:)(CoreP2P::NANDataResponseReceivedEvent *__return_ptr retstr, Swift::UInt8 datapathID, Swift::UInt8 publishID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::WiFiAddress *responderDataAddress, CoreP2P::WiFiAddress *responderManagementAddress, Swift::OpaquePointer attributes)
{
}

unint64_t _s7CoreP2P27NANDataRequestReceivedEventV10datapathID07publishH026initiatorManagementAddress0j4DataL010attributesACs5UInt8V_AjA04WiFiL0VALSayAA12NANAttributeOGtcfC_0(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

void __swiftcall NANDataEstablishedEvent.init(datapathID:initiatorDataAddress:type:responderDataAddress:)(CoreP2P::NANDataEstablishedEvent *__return_ptr retstr, Swift::UInt8 datapathID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::NANDatapath::DatapathType type, CoreP2P::WiFiAddress *responderDataAddress)
{
}

unint64_t NANDataTerminationEvent.init(datapathID:initiatorDataAddress:type:reason:)(unsigned __int8 a1, uint64_t a2, char a3)
{
  return a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8) | ((unint64_t)(a3 & 1) << 56);
}

unint64_t NANDataHostAssistRequest.init(datapathID:publishID:initiatorManagementAddress:initiatorDataAddress:frameType:reason:)(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

unint64_t _s7CoreP2P24NANFollowUpReceivedEventV15localInstanceID04peerhI00J7Address4rssi10attributesACs5UInt8V_AjA04WiFiK0VAA4RSSIVSayAA12NANAttributeOGtcfC_0(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3)
{
  return a1 | ((unint64_t)a2 << 8) | (a3 << 16);
}

void __swiftcall NANFollowUpTransferCompleteEvent.init(localInstanceID:peerInstanceID:peerAddress:status:)(CoreP2P::NANFollowUpTransferCompleteEvent *__return_ptr retstr, Swift::UInt8 localInstanceID, Swift::UInt8 peerInstanceID, CoreP2P::WiFiAddress *peerAddress, CoreP2P::NANTransferCompleteStatus status)
{
}

uint64_t NANOOBActionFrameReceivedEvent.init(peerAddress:localAddress:actionFrame:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_WORD *)a7  = result;
  *(unsigned char *)(a7 + 2)  = BYTE2(result);
  *(unsigned char *)(a7 + 3)  = BYTE3(result);
  *(unsigned char *)(a7 + 4)  = BYTE4(result);
  *(unsigned char *)(a7 + 5)  = BYTE5(result);
  *(_WORD *)(a7 + 6)  = a2;
  *(unsigned char *)(a7 + 8)  = BYTE2(a2);
  *(unsigned char *)(a7 + 9)  = BYTE3(a2);
  *(unsigned char *)(a7 + 10)  = BYTE4(a2);
  *(unsigned char *)(a7 + 11)  = BYTE5(a2);
  *(unsigned char *)(a7 + 16)  = a3;
  *(void *)(a7 + 24)  = a4;
  *(void *)(a7 + 32)  = a5;
  *(void *)(a7 + 40)  = a6;
  return result;
}

CoreP2P::NANOOBActionFrameTrasmitStatus __swiftcall NANOOBActionFrameTrasmitStatus.init(token:result:reason:)(Swift::UInt16 token, CoreP2P::NANOOBActionFrameTrasmitStatus::Result result, CoreP2P::NANOOBActionFrameTrasmitStatus::Reason reason)
{
  return (CoreP2P::NANOOBActionFrameTrasmitStatus)((result << 16) | (reason << 24) | token);
}

uint64_t AWDLSoftAPChannelChangedEvent.init(enabled:channel:)(char a1, int a2)
{
  LOBYTE(v3)  = a1;
  HIDWORD(v3)  = a2;
  return v3;
}

uint64_t DriverEvent.shortDescription.getter()
{
  uint64_t v1 = type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10013303C(v0, (uint64_t)v6, type metadata accessor for DriverEvent);
  uint64_t v7 = 0xD000000000000013;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100133104((uint64_t)v6, (uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      uint64_t v7 = DriverEvent.AWDL.shortDescription.getter();
      sub_1001330A4((uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      break;
    case 2u:
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = *((void *)v6 + 1);
      uint64_t v11 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      uint64_t v12 = *((void *)v6 + 4);
      int v13 = v6[40];
      uint64_t v7 = 0xD000000000000010;
      uint64_t v14 = v6[41];
      uint64_t v15 = &type metadata for InfraScanStartEvent;
      switch(v14)
      {
        case 1:
          goto LABEL_19;
        case 2:
          uint64_t v15 = &type metadata for InfraScanCompleteEvent;
          goto LABEL_19;
        case 3:
          uint64_t v15 = &type metadata for InfraAssociationStartEvent;
          goto LABEL_19;
        case 4:
          uint64_t v15 = &type metadata for InfraAssociationJoinStatus;
          goto LABEL_19;
        case 5:
          uint64_t v15 = &type metadata for InfraAssociationReadyEvent;
LABEL_19:
          uint64_t v31 = (uint64_t)v15;
          uint64_t v23 = v8;
          sub_100010BCC(&qword_10047FEB8);
          uint64_t v7 = String.init<A>(describing:)();
          sub_1000135D4(v23, v9, v11, v10, v12, v13, v14);
          break;
        case 6:
          uint64_t v7 = 0xD000000000000012;
          break;
        case 7:
          uint64_t v7 = 0xD000000000000015;
          break;
        case 8:
          uint64_t v7 = 0xD000000000000015;
          break;
        case 9:
          uint64_t v7 = 0xD000000000000013;
          break;
        case 10:
          if (v11 | v9 | v8 | v10 | v12) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v13 == 0;
          }
          if (v24)
          {
            uint64_t v7 = 0x6863207265776F50;
          }
          else
          {
            uint64_t v25 = v11 | v9 | v10 | v12;
            if (v13) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v8 == 1;
            }
            if (v26 && v25 == 0)
            {
              uint64_t v7 = 0xD000000000000014;
            }
            else
            {
              BOOL v29 = v8 == 2 && v25 == 0;
              if (v13 == 0 && v29) {
                uint64_t v7 = 0x6168632044495353;
              }
              else {
                uint64_t v7 = 0x6863204449535342;
              }
            }
          }
          break;
        default:
          return v7;
      }
      break;
    case 3u:
      int v16 = *v6;
      uint64_t v31 = 0x206D6574737953;
      unint64_t v32 = 0xE700000000000000;
      if (v16) {
        uint64_t v17 = 0x656B617720646964;
      }
      else {
        uint64_t v17 = 0x656C73206C6C6977;
      }
      if (v16) {
        unint64_t v18 = 0xE800000000000000;
      }
      else {
        unint64_t v18 = 0xEA00000000007065;
      }
      unint64_t v19 = v18;
      String.append(_:)(*(Swift::String *)&v17);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 4u:
      char v20 = *v6;
      uint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v21._uint64_t countAndFlagsBits = 0x676F646863746157;
      v21._object  = (void *)0xEF20746573655220;
      String.append(_:)(v21);
      v30[7]  = v20;
      _print_unlocked<A, B>(_:_:)();
LABEL_14:
      uint64_t v7 = v31;
      break;
    case 5u:
      return v7;
    default:
      sub_10006E544((uint64_t)v6, (uint64_t)&v31);
      uint64_t v7 = DriverEvent.NAN.shortDescription.getter();
      sub_1001344F4((uint64_t)&v31, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      break;
  }
  return v7;
}

void NANClusterChangeEvent.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

BOOL static NANClusterChangeEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5)  = BYTE4(a1);
  HIBYTE(v5)  = BYTE5(a1);
  LOBYTE(v4)  = BYTE4(a2);
  HIBYTE(v4)  = BYTE5(a2);
  return a1 == a2 && v5 == v4;
}

Swift::Int NANClusterChangeEvent.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_100129A00()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void sub_100129AB0()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_100129B30()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL sub_100129BDC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
}

void NANRoleChangeEvent.hash(into:)(uint64_t a1, char a2, Swift::UInt a3)
{
  switch(a2)
  {
    case 2:
      Swift::UInt v4 = 0;
      break;
    case 3:
      Swift::UInt v4 = 1;
      break;
    case 4:
      Swift::UInt v4 = 2;
      break;
    default:
      Swift::UInt8 v5 = a2 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v5);
      goto LABEL_9;
  }
  Hasher._combine(_:)(v4);
LABEL_9:
  Hasher._combine(_:)(a3);
}

BOOL static NANRoleChangeEvent.__derived_struct_equals(_:_:)(char a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  switch(a1)
  {
    case 2:
      if (a3 != 2) {
        return 0;
      }
      return a2 == a4;
    case 3:
      if (a3 != 3) {
        return 0;
      }
      return a2 == a4;
    case 4:
      if (a3 == 4) {
        return a2 == a4;
      }
      break;
    default:
      if (a3 - 2 >= 3 && ((a1 & 1) == 0) != (a3 & 1)) {
        return a2 == a4;
      }
      break;
  }
  return 0;
}

Swift::Int NANRoleChangeEvent.hashValue.getter(char a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  switch(a1)
  {
    case 2:
      Swift::UInt v4 = 0;
      break;
    case 3:
      Swift::UInt v4 = 1;
      break;
    case 4:
      Swift::UInt v4 = 2;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(a1 & 1);
      goto LABEL_9;
  }
  Hasher._combine(_:)(v4);
LABEL_9:
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_100129DF4()
{
  return NANRoleChangeEvent.hashValue.getter(*(unsigned char *)v0, *(void *)(v0 + 8));
}

void sub_100129E00()
{
  int v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  switch(v1)
  {
    case 2:
      Swift::UInt v3 = 0;
      break;
    case 3:
      Swift::UInt v3 = 1;
      break;
    case 4:
      Swift::UInt v3 = 2;
      break;
    default:
      Swift::UInt8 v4 = v1 & 1;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v4);
      goto LABEL_9;
  }
  Hasher._combine(_:)(v3);
LABEL_9:
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100129E84()
{
  int v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 2:
      Swift::UInt v3 = 0;
      break;
    case 3:
      Swift::UInt v3 = 1;
      break;
    case 4:
      Swift::UInt v3 = 2;
      break;
    default:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1 & 1);
      goto LABEL_9;
  }
  Hasher._combine(_:)(v3);
LABEL_9:
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100129F30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 2:
      if (v3 != 2) {
        return 0;
      }
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 3:
      if (v3 != 3) {
        return 0;
      }
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 4:
      if (v3 == 4) {
        return *((void *)a1 + 1) == *((void *)a2 + 1);
      }
      break;
    default:
      if ((v3 - 2) >= 3 && ((v2 & 1) == 0) != (v3 & 1)) {
        return *((void *)a1 + 1) == *((void *)a2 + 1);
      }
      break;
  }
  return 0;
}

uint64_t static NANFollowUpReceivedEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100131648(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t sub_100129FDC()
{
  return NANFollowUpReceivedEvent.hashValue.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_100129FE8(int a1)
{
  return NANFollowUpReceivedEvent.hash(into:)(a1, *v1);
}

uint64_t sub_100129FF4(uint64_t *a1, uint64_t *a2)
{
  return sub_100131648(*a1, a1[1], a1[2], *a2, a2[1], a2[2]) & 1;
}

uint64_t sub_10012A030(uint64_t a1, uint64_t a2)
{
  return sub_10012AB2C(a1, a2, (uint64_t (*)(void, unint64_t, void))NANDataRequestReceivedEvent.hashValue.getter);
}

uint64_t sub_10012A048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AB54(a1, a2, a3, (uint64_t (*)(uint64_t, void, unint64_t, void))NANDataRequestReceivedEvent.hash(into:));
}

unint64_t NANDataResponseReceivedEvent.responderManagementAddress.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return ((unint64_t)HIBYTE(a3) << 40) | ((unint64_t)BYTE2(a3) << 32) | (a3 << 16) & 0xFF000000 | (a3 << 16) & 0xFF0000 | HIWORD(a2);
}

void NANDataResponseReceivedEvent.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  Swift::UInt8 v6 = a4;
  Swift::UInt8 v7 = a3;
  unint64_t v9 = a2 >> 8;
  unint64_t v10 = a2 >> 16;
  unint64_t v11 = a2 >> 24;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = a2 >> 40;
  *(void *)unint64_t v18 = HIWORD(a2);
  *(void *)unint64_t v19 = HIBYTE(a2);
  *(void *)char v20 = a3 >> 8;
  *(void *)Swift::String v21 = a3 >> 16;
  *(void *)uint64_t v22 = a3 >> 24;
  *(void *)uint64_t v23 = HIDWORD(a3);
  *(void *)BOOL v24 = a3 >> 40;
  *(void *)uint64_t v25 = HIWORD(a3);
  *(void *)BOOL v26 = HIBYTE(a3);
  *(_DWORD *)uint64_t v27 = a4 >> 8;
  *(_DWORD *)uint64_t v28 = HIWORD(a4);
  unsigned int v29 = HIBYTE(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  Hasher._combine(_:)(v25[0]);
  Hasher._combine(_:)(v26[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v27[0]);
  Hasher._combine(_:)(v28[0]);
  Hasher._combine(_:)(v29);
  Swift::UInt v14 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    uint64_t v15 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v16 = a5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)(a1);
      v16 += v17;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
}

Swift::Int NANDataResponseReceivedEvent.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt8 v5 = a3;
  Swift::UInt8 v6 = a2;
  Swift::UInt8 v7 = a1;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)unint64_t v18 = HIWORD(a1);
  *(void *)unint64_t v19 = HIBYTE(a1);
  *(void *)char v20 = a2 >> 8;
  *(void *)Swift::String v21 = a2 >> 16;
  *(void *)uint64_t v22 = a2 >> 24;
  *(void *)uint64_t v23 = HIDWORD(a2);
  *(void *)BOOL v24 = a2 >> 40;
  *(void *)uint64_t v25 = HIWORD(a2);
  *(void *)BOOL v26 = HIBYTE(a2);
  *(_DWORD *)uint64_t v27 = a3 >> 8;
  *(_DWORD *)uint64_t v28 = HIWORD(a3);
  *(_DWORD *)unsigned int v29 = HIBYTE(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  Hasher._combine(_:)(v25[0]);
  Hasher._combine(_:)(v26[0]);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v27[0]);
  Hasher._combine(_:)(v28[0]);
  Hasher._combine(_:)(v29[0]);
  Swift::UInt v13 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v30);
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int sub_10012A4F0()
{
  return NANDataResponseReceivedEvent.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_DWORD *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10012A500(uint64_t a1)
{
  NANDataResponseReceivedEvent.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_10012A510()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v20 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v21 = *(unsigned char *)(v0 + 14);
  Swift::UInt8 v22 = *(unsigned char *)(v0 + 15);
  Swift::UInt8 v23 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v24 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v25 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v26 = *(unsigned char *)(v0 + 19);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  Swift::UInt v10 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v12 = v1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v27);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_10012A750(uint64_t a1, uint64_t a2)
{
  return static NANDataResponseReceivedEvent.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), *(void *)(a2 + 24));
}

void _s7CoreP2P27NANDataRequestReceivedEventV4hash4intoys6HasherVz_tF_0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  Swift::UInt8 v5 = a3;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = a2 >> 24;
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = a2 >> 40;
  unint64_t v12 = HIWORD(a2);
  *(void *)Swift::UInt8 v17 = HIBYTE(a2);
  *(void *)Swift::UInt8 v18 = a3 >> 8;
  *(void *)Swift::UInt8 v19 = a3 >> 16;
  *(void *)Swift::UInt8 v20 = a3 >> 24;
  *(void *)Swift::UInt8 v21 = HIDWORD(a3);
  *(void *)Swift::UInt8 v22 = a3 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Swift::UInt v13 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)(a1);
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
}

uint64_t static NANDataConfirmReceivedEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001314C4(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6) & 1;
}

Swift::Int _s7CoreP2P27NANDataRequestReceivedEventV9hashValueSivg_0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::UInt8 v4 = a2;
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v11 = HIWORD(a1);
  *(void *)Swift::UInt8 v17 = HIBYTE(a1);
  *(void *)Swift::UInt8 v18 = a2 >> 8;
  *(void *)Swift::UInt8 v19 = a2 >> 16;
  *(void *)Swift::UInt8 v20 = a2 >> 24;
  *(void *)Swift::UInt8 v21 = HIDWORD(a2);
  *(void *)Swift::UInt8 v22 = a2 >> 40;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Swift::UInt v12 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v23);
      v14 += v15;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_10012AB2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, unint64_t, void))
{
  return a3(*(void *)v3, *(unsigned int *)(v3 + 8) | ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 13) << 40), *(void *)(v3 + 16));
}

uint64_t sub_10012AB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, unint64_t, void))
{
  return a4(a1, *(void *)v4, *(unsigned int *)(v4 + 8) | ((unint64_t)*(unsigned __int8 *)(v4 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 13) << 40), *(void *)(v4 + 16));
}

Swift::Int sub_10012AB7C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v20 = *(unsigned char *)(v0 + 13);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Swift::UInt v10 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v12 = v1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v21);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_10012AD54(uint64_t a1, uint64_t a2)
{
  return sub_1001314C4(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40), *(void *)(a1 + 16), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40), *(void *)(a2 + 16)) & 1;
}

void NANDataEstablishedEvent.hash(into:)(int a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(BYTE1(a3));
  Hasher._combine(_:)(BYTE2(a3));
  Hasher._combine(_:)(BYTE3(a3));
  Hasher._combine(_:)(BYTE4(a3));
  Hasher._combine(_:)(BYTE5(a3));
}

BOOL static NANDataEstablishedEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100130274(a1 & 0x1FFFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL, a3 & 0x1FFFFFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFFFLL);
}

Swift::Int NANDataEstablishedEvent.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(BYTE1(a2));
  Hasher._combine(_:)(BYTE2(a2));
  Hasher._combine(_:)(BYTE3(a2));
  Hasher._combine(_:)(BYTE4(a2));
  Hasher._combine(_:)(BYTE5(a2));
  return Hasher._finalize()();
}

Swift::Int sub_10012B05C()
{
  uint64_t v1 = 0x100000000000000;
  if (!*((unsigned char *)v0 + 7)) {
    uint64_t v1 = 0;
  }
  return NANDataEstablishedEvent.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48) | v1, v0[2] | ((unint64_t)*((unsigned __int8 *)v0 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v0+ 13) << 40));
}

void sub_10012B0A4(int a1)
{
  uint64_t v2 = 0x100000000000000;
  if (!*((unsigned char *)v1 + 7)) {
    uint64_t v2 = 0;
  }
  NANDataEstablishedEvent.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48) | v2, v1[2] | ((unint64_t)*((unsigned __int8 *)v1 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 13) << 40));
}

Swift::Int sub_10012B0EC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 4);
  uint64_t v3 = *((unsigned __int8 *)v0 + 5);
  uint64_t v4 = *((unsigned __int8 *)v0 + 6);
  int v5 = *((unsigned __int8 *)v0 + 7);
  uint64_t v6 = v0[2];
  uint64_t v7 = *((unsigned __int8 *)v0 + 12);
  uint64_t v8 = *((unsigned __int8 *)v0 + 13);
  Hasher.init(_seed:)();
  uint64_t v9 = 0x100000000000000;
  if (!v5) {
    uint64_t v9 = 0;
  }
  NANDataEstablishedEvent.hash(into:)((int)&v11, v1 | (v2 << 32) | (v3 << 40) | (v4 << 48) | v9, v6 | (v7 << 32) | (v8 << 40));
  return Hasher._finalize()();
}

BOOL sub_10012B184(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 6);
  uint64_t v3 = a1[2];
  uint64_t v4 = *((unsigned __int8 *)a1 + 12);
  uint64_t v5 = *((unsigned __int8 *)a1 + 13);
  unint64_t v6 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40);
  if (*((unsigned char *)a1 + 7)) {
    uint64_t v7 = 0x100000000000000;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v6 | (v2 << 48) | v7;
  if (*((unsigned char *)a2 + 7)) {
    uint64_t v9 = 0x100000000000000;
  }
  else {
    uint64_t v9 = 0;
  }
  return sub_100130274(v8, v3 | (v4 << 32) | (v5 << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v9, a2[2] | ((unint64_t)*((unsigned __int8 *)a2 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)a2+ 13) << 40));
}

void NANDataTerminationEvent.hash(into:)(int a1, unint64_t a2, Swift::UInt a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
}

BOOL static NANDataTerminationEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100130EB8(a1 & 0x1FFFFFFFFFFFFFFLL, a2, a3 & 0x1FFFFFFFFFFFFFFLL, a4);
}

Swift::Int NANDataTerminationEvent.hashValue.getter(unint64_t a1, Swift::UInt a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10012B428()
{
  uint64_t v1 = 0x100000000000000;
  if (!*((unsigned char *)v0 + 7)) {
    uint64_t v1 = 0;
  }
  return NANDataTerminationEvent.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48) | v1, *((void *)v0 + 1));
}

void sub_10012B460()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10012B550()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_10012B674(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = 0x100000000000000;
  if (*((unsigned char *)a1 + 7)) {
    uint64_t v4 = 0x100000000000000;
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | v4;
  if (!*((unsigned char *)a2 + 7)) {
    uint64_t v3 = 0;
  }
  return sub_100130EB8(v5, v2, *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v3, *((void *)a2 + 1));
}

unint64_t NANDataHostAssistRequest.frameType.getter(uint64_t a1, unint64_t a2)
{
  return HIWORD(a2);
}

unint64_t NANDataHostAssistRequest.reason.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2);
}

void NANDataHostAssistRequest.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  *(void *)uint64_t v13 = a3 >> 8;
  *(void *)uint64_t v14 = a3 >> 16;
  *(void *)Swift::UInt8 v15 = a3 >> 24;
  *(void *)Swift::UInt8 v16 = HIDWORD(a3);
  *(void *)Swift::UInt8 v17 = a3 >> 40;
  int v11 = BYTE6(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  if (v11 == 15)
  {
    Swift::UInt8 v12 = 0;
LABEL_6:
    Hasher._combine(_:)(v12);
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  if (v11 != 14)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt8 v12 = byte_1003C02DC[SBYTE6(a3)];
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  Hasher._combine(_:)(HIBYTE(a3));
}

Swift::Int NANDataHostAssistRequest.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  *(void *)uint64_t v13 = HIBYTE(a1);
  *(void *)uint64_t v14 = a2 >> 8;
  *(void *)Swift::UInt8 v15 = a2 >> 16;
  *(void *)Swift::UInt8 v16 = a2 >> 24;
  *(void *)Swift::UInt8 v17 = HIDWORD(a2);
  *(void *)Swift::UInt8 v18 = a2 >> 40;
  int v10 = BYTE6(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  if (v10 == 15)
  {
    Swift::UInt8 v11 = 0;
LABEL_6:
    Hasher._combine(_:)(v11);
    goto LABEL_7;
  }
  Hasher._combine(_:)(1u);
  if (v10 != 14)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt8 v11 = byte_1003C02DC[SBYTE6(a2)];
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  Hasher._combine(_:)(HIBYTE(a2));
  return Hasher._finalize()();
}

Swift::Int sub_10012B9F8()
{
  return NANDataHostAssistRequest.hashValue.getter(*v0, v0[1]);
}

void sub_10012BA00(int a1)
{
  NANDataHostAssistRequest.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_10012BA08()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  NANDataHostAssistRequest.hash(into:)((int)&v4, v1, v2);
  return Hasher._finalize()();
}

BOOL sub_10012BA50(uint64_t a1, uint64_t *a2)
{
  return _s7CoreP2P24NANDataHostAssistRequestV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *a2, a2[1]);
}

void NANPublishTerminatedEvent.hash(into:)(int a1, Swift::UInt8 a2, Swift::UInt a3)
{
}

BOOL static NANPublishTerminatedEvent.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

Swift::Int _s7CoreP2P27NANSubscribeTerminatedEventV9hashValueSivg_0(Swift::UInt8 a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10012BB1C()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10012BB7C()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10012BBBC()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_10012BC18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t NANFollowUpReceivedEvent.serviceInfo.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  unint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (char *)v30 - v6;
  __chkstk_darwin();
  unint64_t v9 = (char *)v30 - v8;
  uint64_t v10 = __chkstk_darwin();
  uint64_t v13 = (char *)v30 - v12;
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    v30[1]  = v10;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v16 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    uint64_t v17 = v15;
    uint64_t v18 = v14;
    while (1)
    {
      sub_10013303C(v17, (uint64_t)v9, type metadata accessor for NANAttribute);
      if (NANAttribute.attributeType.getter() == 14) {
        break;
      }
      sub_1001330A4((uint64_t)v9, type metadata accessor for NANAttribute);
      v17 += v16;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    sub_100133104((uint64_t)v9, (uint64_t)v13, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload() == 14) {
      return *((void *)v13 + 2);
    }
    sub_1001330A4((uint64_t)v13, type metadata accessor for NANAttribute);
LABEL_9:
    uint64_t result = swift_bridgeObjectRetain();
    for (i  = 0; ; ++i)
    {
      uint64_t v22 = i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
        return result;
      }
      sub_10013303C(v15, (uint64_t)v5, type metadata accessor for NANAttribute);
      if (NANAttribute.attributeType.getter() == 3) {
        break;
      }
      uint64_t result = sub_1001330A4((uint64_t)v5, type metadata accessor for NANAttribute);
      v15 += v16;
      if (v22 == v14)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
    }
    swift_bridgeObjectRelease();
    sub_100133104((uint64_t)v5, (uint64_t)v7, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v23 = *(void *)v7;
      unint64_t v24 = *((void *)v7 + 1);
      uint64_t v25 = *((void *)v7 + 4);
      unint64_t v26 = *((void *)v7 + 5);
      uint64_t v27 = *((unsigned __int16 *)v7 + 24) | (v7[50] << 16);
      uint64_t v19 = *((void *)v7 + 7);
      uint64_t v28 = *((void *)v7 + 8);
      unint64_t v29 = *((void *)v7 + 9);
      sub_10013316C(v19, v28, v29);
      sub_10000C970(v23, v24);
      swift_bridgeObjectRelease();
      sub_100133188(v25, v26, v27);
      sub_1001331AC(v19, v28, v29);
      return v19;
    }
    sub_1001330A4((uint64_t)v7, type metadata accessor for NANAttribute);
  }
  return 4;
}

void *NANFollowUpReceivedEvent.followUpMessage.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = NANFollowUpReceivedEvent.serviceInfo.getter(a1, a2, a3);
  if (v5 == 4) {
    return 0;
  }
  uint64_t v6 = v3;
  unint64_t v7 = v4;
  if (v5 != 2
    || (sub_100013D44(v3, v4), (uint64_t v8 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v6, v7)) == 0))
  {
    sub_10013316C(v5, v6, v7);
    uint64_t v8 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v6, v7);
    swift_bridgeObjectRelease();
  }
  sub_1001331AC(v5, v6, v7);
  return v8;
}

void _s7CoreP2P24NANFollowUpReceivedEventV4hash4intoys6HasherVz_tF_0(uint64_t a1, unint64_t a2, Swift::UInt a3, uint64_t a4)
{
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  unint64_t v12 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a3);
  Swift::UInt v13 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)(a1);
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
}

Swift::Int _s7CoreP2P24NANFollowUpReceivedEventV9hashValueSivg_0(unint64_t a1, Swift::UInt a2, uint64_t a3)
{
  Swift::UInt8 v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a2);
  Swift::UInt v12 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v18);
      v14 += v15;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int sub_10012C354()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Swift::UInt v15 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 7);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v15);
  Swift::UInt v10 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v12 = v1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v16);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t NANTransferCompleteStatus.apiError.getter(char a1)
{
  if (a1) {
    return 7;
  }
  else {
    return 0;
  }
}

BOOL NANTransferCompleteStatus.shouldRetry.getter(char a1)
{
  return a1 != 3 && a1 != 0;
}

unint64_t NANTransferCompleteStatus.description.getter(char a1)
{
  unint64_t result = 0x73736563637573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x756F2064656D6974;
      break;
    case 2:
      unint64_t result = 0x646570706F7264;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10012C588()
{
  unint64_t result = 0x73736563637573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x756F2064656D6974;
      break;
    case 2:
      unint64_t result = 0x646570706F7264;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

void NANFollowUpTransferCompleteEvent.hash(into:)(int a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
}

Swift::Int NANFollowUpTransferCompleteEvent.hashValue.getter(unint64_t a1, unsigned __int8 a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10012C7B0()
{
  Swift::UInt v1 = v0[8];
  Swift::UInt8 v2 = *v0;
  Swift::UInt8 v3 = v0[1];
  Swift::UInt8 v4 = v0[2];
  Swift::UInt8 v5 = v0[3];
  Swift::UInt8 v6 = v0[4];
  Swift::UInt8 v7 = v0[5];
  Swift::UInt8 v8 = v0[6];
  Swift::UInt8 v9 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10012C898()
{
  Swift::UInt v1 = v0[8];
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Swift::UInt8 v8 = v0[7];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10012C944()
{
  Swift::UInt v1 = v0[8];
  Swift::UInt8 v2 = *v0;
  Swift::UInt8 v3 = v0[1];
  Swift::UInt8 v4 = v0[2];
  Swift::UInt8 v5 = v0[3];
  Swift::UInt8 v6 = v0[4];
  Swift::UInt8 v7 = v0[5];
  Swift::UInt8 v8 = v0[6];
  Swift::UInt8 v9 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_10012CA28(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P32NANFollowUpTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

unint64_t NANDataManagementFrameTransferCompleteEvent.frameType.getter(unint64_t a1)
{
  return HIBYTE(a1);
}

uint64_t NANDataManagementFrameTransferCompleteEvent.init(datapathID:initiatorDataAddress:frameType:status:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8) | (a3 << 56);
}

void NANDataManagementFrameTransferCompleteEvent.hash(into:)(int a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (HIBYTE(a2) == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C02DC[(uint64_t)a2 >> 56]);
  }
  Hasher._combine(_:)(a3);
}

Swift::Int NANDataManagementFrameTransferCompleteEvent.hashValue.getter(unint64_t a1, unsigned __int8 a2)
{
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (HIBYTE(a1) == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C02DC[(uint64_t)a1 >> 56]);
  }
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10012CC48()
{
  return NANDataManagementFrameTransferCompleteEvent.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_10012CC54()
{
  uint64_t v1 = (char)v0[7];
  Swift::UInt v2 = v0[8];
  Swift::UInt8 v3 = v0[1];
  Swift::UInt8 v4 = v0[2];
  Swift::UInt8 v5 = v0[3];
  Swift::UInt8 v6 = v0[4];
  Swift::UInt8 v7 = v0[5];
  Swift::UInt8 v8 = v0[6];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C02DC[v1]);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10012CD24()
{
  uint64_t v1 = (char)v0[7];
  Swift::UInt v2 = v0[8];
  Swift::UInt8 v3 = *v0;
  Swift::UInt8 v4 = v0[1];
  Swift::UInt8 v5 = v0[2];
  Swift::UInt8 v6 = v0[3];
  Swift::UInt8 v7 = v0[4];
  Swift::UInt8 v8 = v0[5];
  Swift::UInt8 v9 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C02DC[v1]);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10012CE30(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P43NANDataManagementFrameTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t NANOOBActionFrameTrasmitStatus.reason.getter(unsigned int a1)
{
  return HIBYTE(a1);
}

void NANOOBActionFrameTrasmitStatus.hash(into:)(int a1, unsigned int a2)
{
  unsigned __int8 v2 = BYTE2(a2);
  Swift::UInt v3 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

BOOL static NANOOBActionFrameTrasmitStatus.__derived_struct_equals(_:_:)(unsigned int a1, int a2)
{
  return ((a2 ^ a1) & 0xFF0000) == 0 && (unsigned __int16)a1 == (unsigned __int16)a2 && (a2 ^ a1) >> 24 == 0;
}

Swift::Int NANOOBActionFrameTrasmitStatus.hashValue.getter(unsigned int a1)
{
  Swift::UInt v2 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(BYTE2(a1));
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_10012CF28()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 2);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 3);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10012CF98()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 2);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10012CFE4()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 2);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 3);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10012D050(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && *((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2)
      && *((unsigned __int8 *)a1 + 3) == *((unsigned __int8 *)a2 + 3);
}

uint64_t NANOOBActionFrameReceivedEvent.actionFrame.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 16);
  sub_10006EAC4(v1);
  return v2;
}

BOOL NANOOBActionFrameReceivedEvent.isSecure.getter()
{
  return *(unsigned char *)(v0 + 16) == 4;
}

void NANOOBActionFrameReceivedEvent.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v1 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v1 + 5);
  Hasher._combine(_:)(*(unsigned char *)v1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Swift::UInt8 v9 = *(unsigned char *)(v1 + 7);
  Swift::UInt8 v10 = *(unsigned char *)(v1 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v1 + 9);
  Swift::UInt8 v12 = *(unsigned char *)(v1 + 10);
  Swift::UInt8 v13 = *(unsigned char *)(v1 + 11);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 6));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  long long v14 = *(_OWORD *)(v1 + 32);
  v29[0]  = *(_OWORD *)(v1 + 16);
  v29[1]  = v14;
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * LOBYTE(v29[0])));
  sub_1001342C8((__n128 *)((char *)v29 + 8), &v30);
  sub_1001342C8(&v30, &v31);
  unint64_t v15 = v31.n128_u64[0];
  if (v31.n128_u32[0] >> 30)
  {
    if (v31.n128_u32[0] >> 30 != 1)
    {
      Hasher._combine(_:)(0);
      sub_100134354(v1);
LABEL_17:
      sub_100134354(v2);
      return;
    }
    v31.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
    Swift::UInt32 v16 = v31.n128_u32[2];
    uint64_t v17 = v32;
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(v15);
    if ((v15 & 0x100) != 0) {
      Swift::UInt8 v18 = 3;
    }
    else {
      Swift::UInt8 v18 = 0;
    }
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(BYTE2(v15));
    Hasher._combine(_:)(HIDWORD(v15));
    Hasher._combine(_:)(v16);
    Swift::UInt v19 = *(void *)(v17 + 16);
    Hasher._combine(_:)(v19);
    if (v19)
    {
      uint64_t v20 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
      uint64_t v21 = v17 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      sub_100134324(v2);
      uint64_t v22 = *(void *)(v20 + 72);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)(a1);
        v21 += v22;
        --v19;
      }
      while (v19);
      goto LABEL_17;
    }
  }
  else
  {
    v31.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
    __n128 v33 = v31;
    Hasher._combine(_:)(1uLL);
    sub_100134384(&v33, &v34);
    sub_100134384(&v34, &v35);
    uint64_t v23 = v35;
    if (v35 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_1003C02DC[v23]);
    }
    unint64_t v24 = v33.n128_u64[1];
    Swift::UInt v25 = *(void *)(v33.n128_u64[1] + 16);
    Hasher._combine(_:)(v25);
    if (v25)
    {
      uint64_t v26 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
      unint64_t v27 = v24 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      sub_100134324(v2);
      uint64_t v28 = *(void *)(v26 + 72);
      do
      {
        NANAttribute.hash(into:)(a1);
        v27 += v28;
        --v25;
      }
      while (v25);
      goto LABEL_17;
    }
  }
}

Swift::Int NANOOBActionFrameReceivedEvent.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANOOBActionFrameReceivedEvent.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10012D450()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  long long v6 = v0[2];
  Hasher.init(_seed:)();
  NANOOBActionFrameReceivedEvent.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_10012D4A4(uint64_t a1)
{
}

Swift::Int sub_10012D4E0()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  long long v6 = v0[2];
  Hasher.init(_seed:)();
  NANOOBActionFrameReceivedEvent.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_10012D530(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  _OWORD v8[2] = v5;
  return static NANOOBActionFrameReceivedEvent.__derived_struct_equals(_:_:)(v7, v8) & 1;
}

uint64_t NANDiscoveryWindowStartEvent.expectedTSF.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t NANBeacon.Metadata.rate.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t NANDiscoveryWindowStartEvent.channel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24)  = result;
  *(unsigned char *)(v1 + 28)  = BYTE4(result);
  *(unsigned char *)(v1 + 29)  = BYTE5(result);
  return result;
}

void NANDiscoveryWindowStartEvent.hash(into:)(int a1, Swift::UInt a2, Swift::UInt64 a3, Swift::UInt64 a4, unint64_t a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(a5);
  Hasher._combine(_:)(0x801004u >> ((a5 >> 29) & 0xF8));
  switch(BYTE5(a5))
  {
    case 2:
      Swift::UInt v8 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v8 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v8 = 5;
LABEL_8:
      Hasher._combine(_:)(v8);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a5) & 1);
      break;
  }
}

uint64_t static NANDiscoveryWindowStartEvent.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100131048(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7, a8 & 0xFFFFFFFFFFFFLL);
}

Swift::Int NANDiscoveryWindowStartEvent.hashValue.getter(Swift::UInt a1, Swift::UInt64 a2, Swift::UInt64 a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  NANDiscoveryWindowStartEvent.hash(into:)((int)&v9, a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_10012D700()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 29);
  Hasher.init(_seed:)();
  NANDiscoveryWindowStartEvent.hash(into:)((int)&v8, v1, v2, v3, v4 | (v5 << 32) | (v6 << 40));
  return Hasher._finalize()();
}

void sub_10012D778(int a1)
{
  NANDiscoveryWindowStartEvent.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 29) << 40));
}

Swift::Int sub_10012D798()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 29);
  Hasher.init(_seed:)();
  NANDiscoveryWindowStartEvent.hash(into:)((int)&v8, v1, v2, v3, v4 | (v5 << 32) | (v6 << 40));
  return Hasher._finalize()();
}

uint64_t sub_10012D80C(uint64_t a1, uint64_t a2)
{
  return sub_100131048(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 40));
}

unint64_t AWDLSoftAPChannelChangedEvent.channel.getter(unint64_t a1, unsigned __int16 a2)
{
  return HIDWORD(a1) | ((unint64_t)a2 << 32);
}

void AWDLSoftAPChannelChangedEvent.hash(into:)(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v3 = HIDWORD(a2) | ((unint64_t)a3 << 32);
  Hasher._combine(_:)(a2 & 1);
  if ((v3 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v4 = 0;
LABEL_3:
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(0x801004u >> ((v3 >> 29) & 0xF8));
    switch(v3 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v4 = BYTE5(v3) & 1;
        goto LABEL_3;
    }
  }
}

uint64_t static AWDLSoftAPChannelChangedEvent.__derived_struct_equals(_:_:)(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int16 a4)
{
  LODWORD(v6)  = a3;
  LOBYTE(v6)  = a1 & 1;
  HIDWORD(v6)  = HIDWORD(a1);
  unint64_t v4 = v6;
  LOBYTE(v6)  = a3 & 1;
  HIDWORD(v6)  = HIDWORD(a3);
  return sub_10013116C(v4, a2, v6, a4);
}

Swift::Int AWDLSoftAPChannelChangedEvent.hashValue.getter(unint64_t a1, unsigned __int16 a2)
{
  char v2 = a1;
  v7[0]  = a1;
  unint64_t v4 = HIDWORD(a1);
  Hasher.init(_seed:)();
  LOBYTE(v6)  = v2 & 1;
  HIDWORD(v6)  = v4;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v7, v6, a2);
  return Hasher._finalize()();
}

Swift::Int sub_10012DA30()
{
  char v1 = *v0;
  unsigned __int16 v2 = *((_WORD *)v0 + 4);
  int v3 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  LOBYTE(v5)  = v1;
  HIDWORD(v5)  = v3;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v6, v5, v2);
  return Hasher._finalize()();
}

void sub_10012DA94(uint64_t a1)
{
  HIDWORD(v2)  = *(_DWORD *)(v1 + 4);
  AWDLSoftAPChannelChangedEvent.hash(into:)(a1, v2, *(_WORD *)(v1 + 8));
}

Swift::Int sub_10012DAB0()
{
  char v1 = *v0;
  unsigned __int16 v2 = *((_WORD *)v0 + 4);
  int v3 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  LOBYTE(v5)  = v1;
  HIDWORD(v5)  = v3;
  AWDLSoftAPChannelChangedEvent.hash(into:)((uint64_t)v6, v5, v2);
  return Hasher._finalize()();
}

uint64_t sub_10012DB10(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = *(_WORD *)(a1 + 8);
  HIDWORD(v5)  = *(_DWORD *)(a1 + 4);
  unint64_t v3 = v5;
  LOBYTE(v5)  = *(unsigned char *)a2;
  HIDWORD(v5)  = *(_DWORD *)(a2 + 4);
  return sub_10013116C(v3, v2, v5, *(_WORD *)(a2 + 8));
}

unint64_t AWDLSoftErrorReport.description.getter()
{
  sub_10006B904(v0, (uint64_t)v6);
  uint64_t v1 = v6[0];
  uint64_t v2 = v6[1];
  if (v7) {
    uint64_t v3 = 978474068;
  }
  else {
    uint64_t v3 = 977556808;
  }
  unint64_t v5 = v3 & 0xFFFF0000FFFFFFFFLL | 0x2000000000;
  String.append(_:)(*(Swift::String *)&v1);
  return v5;
}

uint64_t AWDLSoftErrorReport.hash(into:)()
{
  sub_10006B904(v0, (uint64_t)&v2);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return String.hash(into:)();
}

Swift::Int AWDLSoftErrorReport.hashValue.getter()
{
  Hasher.init(_seed:)();
  sub_10006B904(v0, (uint64_t)&v2);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_10012DCF8()
{
  char v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10012DD98()
{
  if (*(unsigned char *)(v0 + 32))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }

  return String.hash(into:)();
}

Swift::Int sub_10012DE2C()
{
  char v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  String.hash(into:)();
  return Hasher._finalize()();
}

unint64_t sub_10012DEC8()
{
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v1 = 978474068;
  }
  else {
    uint64_t v1 = 977556808;
  }
  unint64_t v3 = v1 & 0xFFFF0000FFFFFFFFLL | 0x2000000000;
  String.append(_:)(*(Swift::String *)v0);
  return v3;
}

uint64_t sub_10012DF24(uint64_t a1, uint64_t a2)
{
  sub_10006B904(a1, (uint64_t)v4);
  sub_10006B904(a2, (uint64_t)v5);
  return _s7CoreP2P19AWDLSoftErrorReportO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t NANInternetSharingStatistics.Requester.dhcpDelay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AWDLIdleActivity.durationSinceLastUnicastRx.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void AWDLIdleActivity.hash(into:)(uint64_t a1)
{
  v29[1]  = a1;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (void *)((char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  char v7 = (void *)((char *)v29 - v6);
  char v8 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v29[0]  = v1;
  v8((char *)v29 - v6, v1, v2);
  char v9 = *(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88);
  int v10 = v9(v7, v2);
  int v11 = enum case for DispatchTimeInterval.seconds(_:);
  if (v10 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v7, v2);
    unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v7 <= 0) {
      unint64_t v12 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v7 * (__int128)1000000000) >> 64 == (1000000000 * *v7) >> 63) {
      Swift::UInt64 v13 = 1000000000 * *v7;
    }
    else {
      Swift::UInt64 v13 = v12;
    }
    goto LABEL_16;
  }
  if (v10 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v7, v2);
    uint64_t v14 = *v7;
    uint64_t v15 = 1000000;
LABEL_11:
    Swift::UInt64 v16 = v14 * v15;
    BOOL v17 = (unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63;
    BOOL v18 = v14 <= 0;
    unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    if (v18) {
      unint64_t v19 = 0x8000000000000000;
    }
    if (v17) {
      Swift::UInt64 v13 = v19;
    }
    else {
      Swift::UInt64 v13 = v16;
    }
    goto LABEL_16;
  }
  if (v10 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v7, v2);
    uint64_t v14 = *v7;
    uint64_t v15 = 1000;
    goto LABEL_11;
  }
  if (v10 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v7, v2);
    Swift::UInt64 v13 = *v7;
  }
  else
  {
    if (v10 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v7, v2);
    }
    Swift::UInt64 v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_16:
  Hasher._combine(_:)(v13);
  uint64_t v20 = type metadata accessor for AWDLIdleActivity(0);
  v8((char *)v5, v29[0] + *(int *)(v20 + 20), v2);
  int v21 = v9(v5, v2);
  if (v21 == v11)
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v5 <= 0) {
      unint64_t v22 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v5 * (__int128)1000000000) >> 64 == (1000000000 * *v5) >> 63) {
      Swift::UInt64 v23 = 1000000000 * *v5;
    }
    else {
      Swift::UInt64 v23 = v22;
    }
    goto LABEL_31;
  }
  if (v21 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v24 = *v5;
    uint64_t v25 = 1000000;
LABEL_26:
    Swift::UInt64 v26 = v24 * v25;
    BOOL v27 = (unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63;
    BOOL v18 = v24 <= 0;
    unint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    if (v18) {
      unint64_t v28 = 0x8000000000000000;
    }
    if (v27) {
      Swift::UInt64 v23 = v28;
    }
    else {
      Swift::UInt64 v23 = v26;
    }
    goto LABEL_31;
  }
  if (v21 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v24 = *v5;
    uint64_t v25 = 1000;
    goto LABEL_26;
  }
  if (v21 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    Swift::UInt64 v23 = *v5;
  }
  else
  {
    if (v21 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    }
    Swift::UInt64 v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_31:
  Hasher._combine(_:)(v23);
}

uint64_t static AWDLIdleActivity.__derived_struct_equals(_:_:)()
{
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for AWDLIdleActivity(0);

  return static DispatchTimeInterval.== infix(_:_:)();
}

Swift::Int AWDLIdleActivity.hashValue.getter()
{
  Hasher.init(_seed:)();
  AWDLIdleActivity.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10012E524()
{
  Hasher.init(_seed:)();
  AWDLIdleActivity.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10012E560()
{
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static DispatchTimeInterval.== infix(_:_:)();
}

unint64_t DriverEvent.NAN.peerAttributes.getter()
{
  sub_10006E544(v0, (uint64_t)v10);
  sub_10006E544((uint64_t)v10, (uint64_t)v12);
  sub_10006E544(v0, (uint64_t)v11);
  switch(sub_1001343E0((uint64_t)v11))
  {
    case 2u:
    case 3u:
    case 5u:
    case 0xDu:
      uint64_t v2 = NANBitmap.Channel.operatingClass.getter(v11);
      uint64_t v3 = *(unsigned int *)(v2 + 2);
      uint64_t v4 = *(unsigned __int8 *)(v2 + 6);
      uint64_t v5 = *(unsigned __int8 *)(v2 + 7);
      goto LABEL_6;
    case 6u:
      uint64_t v6 = NANBitmap.Channel.operatingClass.getter(v11);
      unint64_t v1 = *(unsigned int *)(v6 + 14) | ((unint64_t)*(unsigned __int8 *)(v6 + 18) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 19) << 40);
      sub_10006E544((uint64_t)v12, (uint64_t)v9);
      NANBitmap.Channel.operatingClass.getter(v9);
      goto LABEL_7;
    case 7u:
      uint64_t v7 = NANBitmap.Channel.operatingClass.getter(v11);
      uint64_t v3 = *(unsigned int *)(v7 + 8);
      uint64_t v4 = *(unsigned __int8 *)(v7 + 12);
      uint64_t v5 = *(unsigned __int8 *)(v7 + 13);
LABEL_6:
      unint64_t v1 = v3 | (v4 << 32) | (v5 << 40);
      sub_10006E544((uint64_t)v12, (uint64_t)v9);
      NANBitmap.Channel.operatingClass.getter(v9);
LABEL_7:
      swift_bridgeObjectRetain();
      break;
    default:
      NANBitmap.Channel.operatingClass.getter(v11);
      unint64_t v1 = 0;
      break;
  }
  return v1;
}

uint64_t sub_10012E74C(uint64_t a1, uint64_t a2)
{
  sub_10006E544(a1, (uint64_t)v4);
  sub_10006E544(a2, (uint64_t)v5);
  return _s7CoreP2P11DriverEventO3NANO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_10012E7A0(long long *a1, long long *a2)
{
  sub_1001344DC(a1, v4);
  sub_1001344DC(a2, v5);
  return _s7CoreP2P11DriverEventO5InfraO21__derived_enum_equalsySbAE_AEtFZ_0(v4, v5) & 1;
}

uint64_t DriverEvent.NAN.shortDescription.getter()
{
  sub_10006E544(v0, (uint64_t)v3);
  switch(sub_1001343E0((uint64_t)v3))
  {
    case 0x14u:
      NANBitmap.Channel.operatingClass.getter(v3);
      uint64_t v1 = 0xD000000000000018;
      break;
    case 0x15u:
      uint64_t v1 = 0xD000000000000010;
      NANBitmap.Channel.operatingClass.getter(v3);
      break;
    default:
      NANBitmap.Channel.operatingClass.getter(v3);
      sub_100010BCC(&qword_10047FEB8);
      uint64_t v1 = String.init<A>(describing:)();
      break;
  }
  return v1;
}

uint64_t DriverEvent.NAN.description.getter()
{
  uint64_t v1 = v0;
  sub_10006E544(v0, (uint64_t)v29);
  sub_10006E544((uint64_t)v29, (uint64_t)v32);
  sub_10006E544(v0, (uint64_t)v30);
  switch(sub_1001343E0((uint64_t)v30))
  {
    case 1u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      *(_OWORD *)unint64_t v28 = *(_OWORD *)NANBitmap.Channel.operatingClass.getter(v30);
      __dst[0]  = *(_OWORD *)v28;
      return String.init<A>(describing:)();
    case 2u:
    case 3u:
    case 5u:
    case 7u:
    case 0xDu:
      uint64_t v6 = NANBitmap.Channel.operatingClass.getter(v30);
      *(void *)&__dst[1]  = *(void *)(v6 + 16);
      __dst[0]  = *(_OWORD *)v6;
      v27[0]  = __dst[0];
      *(void *)&v27[1]  = *(void *)&__dst[1];
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      NANBitmap.Channel.operatingClass.getter(v28);
      swift_bridgeObjectRetain();
      return String.init<A>(describing:)();
    case 4u:
    case 0xEu:
      uint64_t v3 = NANBitmap.Channel.operatingClass.getter(v30);
      v28[8]  = *(unsigned char *)(v3 + 8);
      *(void *)unint64_t v28 = *(void *)v3;
      *(void *)&__dst[0]  = *(void *)v28;
      BYTE8(__dst[0])  = v28[8];
      return String.init<A>(describing:)();
    case 6u:
      uint64_t v4 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v30);
      __dst[1]  = v4[1];
      __dst[0]  = *v4;
      v27[0]  = __dst[0];
      v27[1]  = __dst[1];
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      NANBitmap.Channel.operatingClass.getter(v28);
      swift_bridgeObjectRetain();
      return String.init<A>(describing:)();
    case 8u:
      uint64_t v5 = (void *)NANBitmap.Channel.operatingClass.getter(v30);
      *(void *)&v28[6]  = *(void *)((char *)v5 + 6);
      *(void *)unint64_t v28 = *v5;
      *(void *)&__dst[0]  = *(void *)v28;
      *(void *)((char *)__dst + 6)  = *(void *)&v28[6];
      return String.init<A>(describing:)();
    case 0xFu:
      *(_DWORD *)unint64_t v28 = *(_DWORD *)NANBitmap.Channel.operatingClass.getter(v30);
      return String.init<A>(describing:)();
    case 0x10u:
      uint64_t v7 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v30);
      __dst[2]  = v7[2];
      __dst[1]  = v7[1];
      __dst[0]  = *v7;
      v27[0]  = __dst[0];
      v27[1]  = __dst[1];
      v27[2]  = __dst[2];
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      uint64_t v8 = NANBitmap.Channel.operatingClass.getter(v28);
      sub_10006EAC4(*(void *)(v8 + 24));
      return String.init<A>(describing:)();
    case 0x11u:
      char v9 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v30);
      *(_OWORD *)&v28[14]  = *(_OWORD *)((char *)v9 + 14);
      *(_OWORD *)unint64_t v28 = *v9;
      __dst[0]  = *(_OWORD *)v28;
      *(_OWORD *)((char *)__dst + 14)  = *(_OWORD *)&v28[14];
      return String.init<A>(describing:)();
    case 0x12u:
      uint64_t v12 = NANBitmap.Channel.operatingClass.getter(v30);
      __dst[8]  = *(_OWORD *)(v12 + 128);
      __dst[9]  = *(_OWORD *)(v12 + 144);
      __dst[10]  = *(_OWORD *)(v12 + 160);
      __dst[11]  = *(_OWORD *)(v12 + 176);
      __dst[4]  = *(_OWORD *)(v12 + 64);
      __dst[5]  = *(_OWORD *)(v12 + 80);
      __dst[6]  = *(_OWORD *)(v12 + 96);
      __dst[7]  = *(_OWORD *)(v12 + 112);
      __dst[0]  = *(_OWORD *)v12;
      __dst[1]  = *(_OWORD *)(v12 + 16);
      __dst[2]  = *(_OWORD *)(v12 + 32);
      __dst[3]  = *(_OWORD *)(v12 + 48);
      uint64_t v13 = *(void *)(v12 + 192);
      int v14 = *(_DWORD *)(v12 + 200);
      __int16 v15 = *(_WORD *)(v12 + 204);
      uint64_t v16 = *(void *)(v12 + 208);
      uint64_t v17 = *(void *)(v12 + 216);
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      uint64_t v18 = NANBitmap.Channel.operatingClass.getter(v28);
      sub_10006E61C(v18);
      v19._uint64_t countAndFlagsBits = DriverEvent.NAN.shortDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 40;
      v20._object  = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v27[8]  = __dst[8];
      v27[9]  = __dst[9];
      v27[10]  = __dst[10];
      *(_OWORD *)((char *)&v27[10] + 9)  = *(_OWORD *)((char *)&__dst[10] + 9);
      v27[4]  = __dst[4];
      v27[5]  = __dst[5];
      v27[6]  = __dst[6];
      v27[7]  = __dst[7];
      HIWORD(v27[0])  = HIWORD(__dst[0]);
      v27[2]  = __dst[2];
      v27[3]  = __dst[3];
      _print_unlocked<A, B>(_:_:)();
      v21._uint64_t countAndFlagsBits = 32;
      v21._object  = (void *)0xE100000000000000;
      String.append(_:)(v21);
      *(void *)&v27[0]  = v13;
      DWORD2(v27[0])  = v14;
      WORD6(v27[0])  = v15;
      *(void *)&v27[1]  = v16;
      *((void *)&v27[1] + 1)  = v17;
      _print_unlocked<A, B>(_:_:)();
      v22._uint64_t countAndFlagsBits = 41;
      v22._object  = (void *)0xE100000000000000;
      String.append(_:)(v22);
      sub_1001344F4(v0, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      return 0;
    case 0x13u:
      Swift::UInt64 v23 = (const void *)NANBitmap.Channel.operatingClass.getter(v30);
      memcpy(__dst, v23, 0x169uLL);
      memcpy(v27, __dst, 0x169uLL);
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      uint64_t v24 = NANBitmap.Channel.operatingClass.getter(v28);
      sub_1001343E8(v24);
      return String.init<A>(describing:)();
    case 0x14u:
      NANBitmap.Channel.operatingClass.getter(v30);
      sub_10006E544((uint64_t)v32, (uint64_t)v28);
      NANBitmap.Channel.operatingClass.getter(v28);
      swift_bridgeObjectRetain();
      uint64_t v10 = Array.description.getter();
      sub_1001344F4(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      return v10;
    case 0x15u:
      int v25 = *(unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v30);
      uint64_t v26 = 0x7A48472035;
      if (v25 != 1) {
        uint64_t v26 = 0x7A48472036;
      }
      if (v25) {
        return v26;
      }
      else {
        return 0x7A484720342E32;
      }
    default:
      uint64_t v2 = NANBitmap.Channel.operatingClass.getter(v30);
      *(_WORD *)&v28[4]  = *(_WORD *)(v2 + 4);
      *(_DWORD *)unint64_t v28 = *(_DWORD *)v2;
      LODWORD(__dst[0])  = *(_DWORD *)v28;
      WORD2(__dst[0])  = *(_WORD *)&v28[4];
      return String.init<A>(describing:)();
  }
}

uint64_t sub_10012F17C()
{
  sub_10006E544(v0, (uint64_t)&v2);
  return DriverEvent.NAN.description.getter();
}

uint64_t DriverEvent.AWDL.shortDescription.getter()
{
  uint64_t v1 = type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013303C(v0, (uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0x5364657461647075;
  uint64_t v6 = &type metadata for AWDLThreadCoexistenceEvent;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_10006DE90(*((void *)v3 + 1));
      uint64_t v7 = sub_100010BCC(&qword_10047DC40);
      sub_1001330A4((uint64_t)&v3[*(int *)(v7 + 48)], type metadata accessor for AWDLActionFrame.Header);
      uint64_t v6 = &type metadata for IEEE80211Frame.Management.ActionFrame;
      goto LABEL_11;
    case 2:
      sub_1001330A4((uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      return 0xD000000000000018;
    case 3:
      sub_1001330A4((uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      return 0xD00000000000001BLL;
    case 4:
      goto LABEL_11;
    case 5:
      uint64_t v6 = &type metadata for AWDLSoftAPChannelChangedEvent;
      goto LABEL_11;
    case 6:
      sub_1001330A4((uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      uint64_t v6 = &type metadata for AWDLSoftErrorReport;
      goto LABEL_11;
    case 7:
      return 0x7265655074736F6CLL;
    case 8:

      uint64_t v6 = &type metadata for AWDLStatistics.Failure;
      goto LABEL_11;
    case 9:
      sub_1001330A4((uint64_t)v3, type metadata accessor for DriverEvent.AWDL);
      uint64_t v6 = (ValueMetadata *)type metadata accessor for AWDLIdleActivity(0);
LABEL_11:
      v8[1]  = v6;
      sub_100010BCC(&qword_10047FEB8);
      uint64_t result = String.init<A>(describing:)();
      break;
    case 10:
      return result;
    case 11:
      uint64_t result = 0xD000000000000016;
      break;
    case 12:
      uint64_t result = 0xD000000000000011;
      break;
    case 13:
      uint64_t result = 0x73736553656C6469;
      break;
    default:
      uint64_t result = 0x656D69746C616572;
      break;
  }
  return result;
}

uint64_t DriverEvent.AWDL.description.getter()
{
  type metadata accessor for AWDLIdleActivity(0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.Header(0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin();
  uint64_t v6 = (unsigned __int16 *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013303C(v0, (uint64_t)v6, type metadata accessor for DriverEvent.AWDL);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v13 = *(unsigned char *)v6;
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v6 + 2);
      uint64_t v16 = *((void *)v6 + 3);
      uint64_t v17 = sub_100010BCC(&qword_10047DC40);
      sub_100133104((uint64_t)v6 + *(int *)(v17 + 48), (uint64_t)v4, type metadata accessor for AWDLActionFrame.Header);
      v53._uint64_t countAndFlagsBits = 0;
      v53._object  = (void *)0xE000000000000000;
      v18._uint64_t countAndFlagsBits = DriverEvent.AWDL.shortDescription.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 40;
      v19._object  = (void *)0xE100000000000000;
      String.append(_:)(v19);
      LOBYTE(v49)  = v13;
      unint64_t v50 = v14;
      uint64_t v51 = v15;
      uint64_t v52 = v16;
      _print_unlocked<A, B>(_:_:)();
      sub_10006DE90(v14);
      v20._uint64_t countAndFlagsBits = 32;
      v20._object  = (void *)0xE100000000000000;
      String.append(_:)(v20);
      _print_unlocked<A, B>(_:_:)();
      v21._uint64_t countAndFlagsBits = 41;
      v21._object  = (void *)0xE100000000000000;
      String.append(_:)(v21);
      uint64_t countAndFlagsBits = v53._countAndFlagsBits;
      sub_1001330A4((uint64_t)v4, type metadata accessor for AWDLActionFrame.Header);
      return countAndFlagsBits;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 3u:
      sub_1001330A4((uint64_t)v6, type metadata accessor for DriverEvent.AWDL);
      goto LABEL_18;
    case 4u:
      __int16 v43 = *v6;
      uint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      v44._uint64_t countAndFlagsBits = DriverEvent.AWDL.shortDescription.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._uint64_t countAndFlagsBits = 40;
      v45._object  = (void *)0xE100000000000000;
      String.append(_:)(v45);
      LOWORD(v53._countAndFlagsBits)  = v43;
      goto LABEL_21;
    case 5u:
      char v23 = *(unsigned char *)v6;
      int v24 = *((_DWORD *)v6 + 1);
      unsigned __int16 v25 = v6[4];
      uint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      v26._uint64_t countAndFlagsBits = DriverEvent.AWDL.shortDescription.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 40;
      v27._object  = (void *)0xE100000000000000;
      String.append(_:)(v27);
      LOBYTE(v53._countAndFlagsBits)  = v23;
      LOWORD(v53._object)  = v25;
      HIDWORD(v53._countAndFlagsBits)  = v24;
LABEL_21:
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_24;
    case 6u:
      uint64_t v28 = *(void *)v6;
      unint64_t v29 = (void *)*((void *)v6 + 1);
      uint64_t v30 = *((void *)v6 + 2);
      uint64_t v31 = *((void *)v6 + 3);
      char v32 = *((unsigned char *)v6 + 32);
      uint64_t v49 = DriverEvent.AWDL.shortDescription.getter();
      unint64_t v50 = v33;
      v34._uint64_t countAndFlagsBits = 40;
      v34._object  = (void *)0xE100000000000000;
      String.append(_:)(v34);
      if (v32) {
        uint64_t v35 = 978474068;
      }
      else {
        uint64_t v35 = 977556808;
      }
      v53._uint64_t countAndFlagsBits = v35 & 0xFFFF0000FFFFFFFFLL | 0x2000000000;
      v53._object  = (void *)0xE500000000000000;
      v46._uint64_t countAndFlagsBits = v28;
      v46._object  = v29;
      String.append(_:)(v46);
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      sub_10006B9A0(v28, (uint64_t)v29, v30, v31, v32);
      goto LABEL_24;
    case 7u:
      uint64_t v36 = *(unsigned int *)(v6 + 1);
      uint64_t v37 = *v6;
      uint64_t v49 = DriverEvent.AWDL.shortDescription.getter();
      unint64_t v50 = v38;
      v39._uint64_t countAndFlagsBits = 40;
      v39._object  = (void *)0xE100000000000000;
      String.append(_:)(v39);
      uint64_t v10 = WiFiAddress.description.getter(v37 | (v36 << 16));
      goto LABEL_16;
    case 8u:

      goto LABEL_18;
    case 9u:
      sub_100133104((uint64_t)v6, (uint64_t)v2, type metadata accessor for AWDLIdleActivity);
      uint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      v40._uint64_t countAndFlagsBits = DriverEvent.AWDL.shortDescription.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 40;
      v41._object  = (void *)0xE100000000000000;
      String.append(_:)(v41);
      _print_unlocked<A, B>(_:_:)();
      v42._uint64_t countAndFlagsBits = 41;
      v42._object  = (void *)0xE100000000000000;
      String.append(_:)(v42);
      uint64_t countAndFlagsBits = v49;
      sub_1001330A4((uint64_t)v2, type metadata accessor for AWDLIdleActivity);
      return countAndFlagsBits;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_18:
      uint64_t countAndFlagsBits = DriverEvent.AWDL.shortDescription.getter();
      break;
    default:
      int v7 = *(unsigned __int8 *)v6;
      uint64_t v49 = DriverEvent.AWDL.shortDescription.getter();
      unint64_t v50 = v8;
      v9._uint64_t countAndFlagsBits = 40;
      v9._object  = (void *)0xE100000000000000;
      String.append(_:)(v9);
      if (v7) {
        uint64_t v10 = 0x64657472617473;
      }
      else {
        uint64_t v10 = 0x6465646E65;
      }
      if (v7) {
        unint64_t v11 = 0xE700000000000000;
      }
      else {
        unint64_t v11 = 0xE500000000000000;
      }
      unint64_t v12 = v11;
LABEL_16:
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
LABEL_24:
      v47._uint64_t countAndFlagsBits = 41;
      v47._object  = (void *)0xE100000000000000;
      String.append(_:)(v47);
      uint64_t countAndFlagsBits = v49;
      break;
  }
  return countAndFlagsBits;
}

uint64_t DriverEvent.Infra.shortDescription.getter()
{
  sub_1001344DC(v0, &v8);
  uint64_t result = 0xD000000000000010;
  uint64_t v2 = &type metadata for InfraScanStartEvent;
  switch(v13)
  {
    case 1:
      goto LABEL_6;
    case 2:
      uint64_t v2 = &type metadata for InfraScanCompleteEvent;
      goto LABEL_6;
    case 3:
      uint64_t v2 = &type metadata for InfraAssociationStartEvent;
      goto LABEL_6;
    case 4:
      uint64_t v2 = &type metadata for InfraAssociationJoinStatus;
      goto LABEL_6;
    case 5:
      uint64_t v2 = &type metadata for InfraAssociationReadyEvent;
LABEL_6:
      int v7 = v2;
      sub_100010BCC(&qword_10047FEB8);
      return String.init<A>(describing:)();
    case 6:
      return 0xD000000000000012;
    case 7:
      goto LABEL_9;
    case 8:
      sub_100103E80((uint64_t)&v8, (uint64_t)&v7);
LABEL_9:
      uint64_t result = 0xD000000000000015;
      break;
    case 9:
      uint64_t result = 0xD000000000000013;
      break;
    case 10:
      uint64_t v3 = v10 | v11;
      if (v12 || v3 | (unint64_t)v8 | v9 | *((void *)&v8 + 1))
      {
        uint64_t v4 = v3 | v9 | *((void *)&v8 + 1);
        if (v12 || (void)v8 != 1 || v4)
        {
          BOOL v6 = (void)v8 == 2 && v4 == 0;
          if (v12 == 0 && v6) {
            uint64_t result = 0x6168632044495353;
          }
          else {
            uint64_t result = 0x6863204449535342;
          }
        }
        else
        {
          uint64_t result = 0xD000000000000014;
        }
      }
      else
      {
        uint64_t result = 0x6863207265776F50;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DriverEvent.Infra.description.getter()
{
  sub_1001344DC(v0, &v20);
  uint64_t v1 = *((void *)&v20 + 1);
  uint64_t v2 = v21;
  uint64_t v3 = v22;
  uint64_t v4 = v23;
  unsigned __int8 v5 = v24;
  sub_1001344DC(v0, &v25);
  switch(v30)
  {
    case 1:
    case 4:
      swift_bridgeObjectRetain();
      return String.init<A>(describing:)();
    case 2:
    case 3:
      return String.init<A>(describing:)();
    case 5:
      sub_1000DDF34(v1, v2, v3, v4, v5);
      return String.init<A>(describing:)();
    case 6:
    case 7:
      uint64_t v18 = DriverEvent.Infra.shortDescription.getter();
      swift_bridgeObjectRetain();
      v6._uint64_t countAndFlagsBits = 32;
      v6._object  = (void *)0xE100000000000000;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      uint64_t v7 = v18;
      goto LABEL_4;
    case 8:
      if ((v25 & 0xFF00000000) == 0x300000000) {
        return 48;
      }
      else {
        return Channel.description.getter(v25 & 0xFFFFFFFFFFFFLL);
      }
    case 9:
      return WiFiAddress.description.getter(v25 & 0xFFFFFFFFFFFFLL);
    case 10:
      uint64_t v14 = v27 | v28;
      if (!v29 && !(v14 | (unint64_t)v25 | v26 | *((void *)&v25 + 1))) {
        return 0x6863207265776F50;
      }
      uint64_t v15 = v14 | v26 | *((void *)&v25 + 1);
      if (!v29 && (void)v25 == 1 && !v15) {
        return 0xD000000000000014;
      }
      BOOL v17 = (void)v25 == 2 && v15 == 0;
      if (v29 == 0 && v17) {
        return 0x6168632044495353;
      }
      else {
        return 0x6863204449535342;
      }
    default:
      char v31 = v25 & 1;
      uint64_t v19 = DriverEvent.Infra.shortDescription.getter();
      swift_bridgeObjectRetain();
      v8._uint64_t countAndFlagsBits = 32;
      v8._object  = (void *)0xE100000000000000;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      uint64_t v7 = v19;
LABEL_4:
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v11 = v10;
      swift_bridgeObjectRetain();
      v12._uint64_t countAndFlagsBits = v9;
      v12._object  = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
  }
}

uint64_t sub_10012FF64()
{
  sub_1001344DC(v0, v2);
  return DriverEvent.Infra.description.getter();
}

uint64_t DriverEvent.SystemState.description.getter(char a1)
{
  if (a1) {
    return 0x656B617720646964;
  }
  else {
    return 0x656C73206C6C6977;
  }
}

uint64_t sub_10012FFD8()
{
  if (*v0) {
    return 0x656B617720646964;
  }
  else {
    return 0x656C73206C6C6977;
  }
}

uint64_t type metadata accessor for DriverEvent.AWDL(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100480148);
}

uint64_t DriverEvent.description.getter()
{
  type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin();
  uint64_t v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v4 = (_OWORD *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013303C(v0, (uint64_t)v4, type metadata accessor for DriverEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100133104((uint64_t)v4, (uint64_t)v2, type metadata accessor for DriverEvent.AWDL);
      uint64_t v5 = DriverEvent.AWDL.description.getter();
      sub_1001330A4((uint64_t)v2, type metadata accessor for DriverEvent.AWDL);
      break;
    case 2u:
      sub_1001344DC(v4, v7);
      uint64_t v5 = DriverEvent.Infra.description.getter();
      sub_10013BC40((uint64_t)v7, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
      break;
    case 3u:
    case 4u:
    case 5u:
      uint64_t v5 = DriverEvent.shortDescription.getter();
      break;
    default:
      sub_10006E544((uint64_t)v4, (uint64_t)v7);
      sub_1001344F4((uint64_t)v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
      uint64_t v5 = DriverEvent.NAN.description.getter();
      sub_1001344F4((uint64_t)v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      sub_1001344F4((uint64_t)v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      break;
  }
  return v5;
}

BOOL sub_100130274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  LOBYTE(v20)  = BYTE1(a1);
  BYTE1(v20)  = BYTE2(a1);
  BYTE2(v20)  = BYTE3(a1);
  HIBYTE(v20)  = BYTE4(a1);
  LOBYTE(v22)  = BYTE5(a1);
  HIBYTE(v22)  = BYTE6(a1);
  LOBYTE(v16)  = BYTE1(a3);
  BYTE1(v16)  = BYTE2(a3);
  BYTE2(v16)  = BYTE3(a3);
  HIBYTE(v16)  = BYTE4(a3);
  LOBYTE(v18)  = BYTE5(a3);
  HIBYTE(v18)  = BYTE6(a3);
  if (v20 != v16 || v22 != v18) {
    return 0;
  }
  BOOL v8 = (a1 & 0x100000000000000) == 0;
  if ((a1 & 0x100000000000000) != 0) {
    uint64_t v9 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v9 = 0x74736163696E75;
  }
  if (v8) {
    unint64_t v10 = 0xE700000000000000;
  }
  else {
    unint64_t v10 = 0xE900000000000074;
  }
  BOOL v11 = (a3 & 0x100000000000000) == 0;
  if ((a3 & 0x100000000000000) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75;
  }
  if (v11) {
    unint64_t v13 = 0xE700000000000000;
  }
  else {
    unint64_t v13 = 0xE900000000000074;
  }
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  LOWORD(v21)  = a2;
  BYTE2(v21)  = BYTE2(a2);
  HIBYTE(v21)  = BYTE3(a2);
  LOBYTE(v23)  = BYTE4(a2);
  HIBYTE(v23)  = BYTE5(a2);
  LOWORD(v17)  = a4;
  BYTE2(v17)  = BYTE2(a4);
  HIBYTE(v17)  = BYTE3(a4);
  LOBYTE(v19)  = BYTE4(a4);
  HIBYTE(v19)  = BYTE5(a4);
  return v21 == v17 && v23 == v19;
}

BOOL _s7CoreP2P24NANDataHostAssistRequestV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a3) {
    return 0;
  }
  LOBYTE(v11)  = BYTE2(a1);
  BYTE1(v11)  = BYTE3(a1);
  BYTE2(v11)  = BYTE4(a1);
  HIBYTE(v11)  = BYTE5(a1);
  LOBYTE(v13)  = BYTE6(a1);
  HIBYTE(v13)  = HIBYTE(a1);
  LOBYTE(v7)  = BYTE2(a3);
  BYTE1(v7)  = BYTE3(a3);
  BYTE2(v7)  = BYTE4(a3);
  HIBYTE(v7)  = BYTE5(a3);
  LOBYTE(v9)  = BYTE6(a3);
  HIBYTE(v9)  = HIBYTE(a3);
  if (v11 != v7 || v13 != v9) {
    return 0;
  }
  LOWORD(v12)  = a2;
  BYTE2(v12)  = BYTE2(a2);
  HIBYTE(v12)  = BYTE3(a2);
  LOBYTE(v14)  = BYTE4(a2);
  HIBYTE(v14)  = BYTE5(a2);
  LOWORD(v8)  = a4;
  BYTE2(v8)  = BYTE2(a4);
  HIBYTE(v8)  = BYTE3(a4);
  LOBYTE(v10)  = BYTE4(a4);
  HIBYTE(v10)  = BYTE5(a4);
  if (v12 != v8 || v14 != v10) {
    return 0;
  }
  if (BYTE6(a2) != 15)
  {
    if (BYTE6(a4) != 15)
    {
      if (BYTE6(a2) == 14)
      {
        if (BYTE6(a4) == 14) {
          return (a4 ^ a2) >> 56 == 0;
        }
      }
      else if (BYTE6(a4) != 14 && byte_1003C02DC[SBYTE6(a2)] == byte_1003C02DC[SBYTE6(a4)])
      {
        return (a4 ^ a2) >> 56 == 0;
      }
    }
    return 0;
  }
  if (BYTE6(a4) != 15) {
    return 0;
  }
  return (a4 ^ a2) >> 56 == 0;
}

uint64_t _s7CoreP2P11DriverEventO5InfraO21__derived_enum_equalsySbAE_AEtFZ_0(long long *a1, long long *a2)
{
  sub_1001344DC(a1, &v47);
  unint64_t v4 = v47;
  uint64_t v5 = v47 & 0xFFFFFFFFFFFFLL;
  unint64_t v6 = (unint64_t)v47 >> 8;
  switch(v52)
  {
    case 1:
      sub_1001344DC(a2, &v42);
      if (v46 != 1) {
        goto LABEL_94;
      }
      started  = _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v42);
      return started & 1;
    case 2:
      sub_1001344DC(a2, &v42);
      if (v46 != 2) {
        goto LABEL_94;
      }
      BOOL v8 = v42 == v4;
      goto LABEL_35;
    case 3:
      int v33 = v47;
      __int16 v34 = WORD2(v47);
      sub_1001344DC(a2, &v42);
      if (v46 == 3)
      {
        int v37 = v42;
        unsigned __int16 v38 = WORD2(v42);
        __int16 v35 = v34;
        if (v33 == v42 && ((0x801004u >> (8 * v35)) & 0xFFC) == ((0x801004u >> (8 * v38)) & 0xFFC))
        {
          sub_10013BC84((unsigned char *)&v35 + 1, &v36);
          sub_10013BC84((unsigned char *)&v38 + 1, &v39);
          sub_10013BC84(&v36, &v41);
          int v9 = v41;
          switch(v41)
          {
            case 2u:
              sub_10013BC84(&v39, &v40);
              if (v40 != 2) {
                goto LABEL_94;
              }
              goto LABEL_80;
            case 3u:
              sub_10013BC84(&v39, &v40);
              if (v40 != 3) {
                goto LABEL_94;
              }
              goto LABEL_80;
            case 4u:
              sub_10013BC84(&v39, &v40);
              if (v40 != 4) {
                goto LABEL_94;
              }
              goto LABEL_80;
            case 5u:
              sub_10013BC84(&v39, &v40);
              if (v40 != 5) {
                goto LABEL_94;
              }
              goto LABEL_80;
            case 6u:
              sub_10013BC84(&v39, &v40);
              if (v40 != 6) {
                goto LABEL_94;
              }
              goto LABEL_80;
            default:
              sub_10013BC84(&v39, &v40);
              if v40 - 2 < 5 || ((v9 ^ v40)) {
                goto LABEL_94;
              }
              goto LABEL_80;
          }
        }
      }
      goto LABEL_94;
    case 4:
      uint64_t v10 = *((void *)&v47 + 1);
      uint64_t v11 = v48;
      int v12 = v49;
      sub_1001344DC(a2, &v42);
      if (v46 != 4) {
        goto LABEL_94;
      }
      started  = sub_1000DD31C(v4 & 0xFFFFFFFFFFFFLL, v10, v11, v12, v42 | ((unint64_t)BYTE4(v42) << 32) | ((unint64_t)BYTE5(v42) << 40), v43.i64[0], v43.i64[1], v44.i32[0]);
      return started & 1;
    case 5:
      uint64_t v13 = *((void *)&v47 + 1);
      uint64_t v14 = v48;
      uint64_t v15 = v49;
      uint64_t v16 = v50;
      int v17 = v51;
      sub_1001344DC(a2, &v42);
      if (v46 != 5 || (unsigned __int16)v42 != (unsigned __int16)v4) {
        goto LABEL_94;
      }
      if (v17 == 255)
      {
        if (v45 == 255) {
          goto LABEL_80;
        }
      }
      else
      {
        if (v45 == 255) {
          goto LABEL_94;
        }
        uint64_t v26 = v43.i64[0];
        if (v17)
        {
          if (v45)
          {
            uint64_t v28 = v44.i64[0];
            uint64_t v32 = v43.i64[1];
            uint64_t v29 = v44.i64[1];
            sub_10013BC40((uint64_t)a2, (void (*)(void, void, void, void, void, void, void))sub_100004C48);
            sub_10013BC40((uint64_t)a1, (void (*)(void, void, void, void, void, void, void))sub_100004C48);
            char v30 = _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v13, v14, v15, v16, v26, v32, v28, v29);
            sub_10013BC40((uint64_t)a2, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
            sub_10013BC40((uint64_t)a1, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
            if (v30) {
              goto LABEL_80;
            }
          }
        }
        else if ((v45 & 1) == 0 && v13 == v43.i32[0])
        {
          goto LABEL_80;
        }
      }
      goto LABEL_94;
    case 6:
      sub_1001344DC(a2, &v42);
      if (v46 == 6) {
        goto LABEL_24;
      }
      goto LABEL_94;
    case 7:
      sub_1001344DC(a2, &v42);
      if (v46 != 7) {
        goto LABEL_94;
      }
LABEL_24:
      if (word_1003C022C[(char)v4] != word_1003C022C[(char)v42]
        || word_1003C0298[(char)v6] != word_1003C0298[SBYTE1(v42)])
      {
        goto LABEL_94;
      }
      goto LABEL_80;
    case 8:
      sub_1001344DC(a2, &v42);
      if (v46 != 8) {
        goto LABEL_94;
      }
      unint64_t v18 = v42 | ((unint64_t)WORD2(v42) << 32);
      uint64_t v19 = v18 & 0xFF00000000;
      if ((v5 & 0xFF00000000) == 0x300000000)
      {
        if (v19 == 0x300000000) {
          goto LABEL_80;
        }
      }
      else if (v19 != 0x300000000 {
             && v4 == v42
      }
             && ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v18 >> 29) & 0xF8)) & 0xFFC))
      {
        unint64_t v25 = v18 >> 40;
        switch(BYTE5(v4))
        {
          case 2:
            if (v25 != 2) {
              goto LABEL_94;
            }
            goto LABEL_80;
          case 3:
            if (v25 != 3) {
              goto LABEL_94;
            }
            goto LABEL_80;
          case 4:
            if (v25 != 4) {
              goto LABEL_94;
            }
            goto LABEL_80;
          case 5:
            if (v25 != 5) {
              goto LABEL_94;
            }
            goto LABEL_80;
          case 6:
            if (v25 != 6) {
              goto LABEL_94;
            }
            goto LABEL_80;
          default:
            if ((v25 - 2) < 5 || ((v5 & 0x10000000000) == 0) == ((v18 >> 40) & 1)) {
              goto LABEL_94;
            }
            goto LABEL_80;
        }
      }
      goto LABEL_94;
    case 9:
      int v37 = v47;
      unsigned __int16 v38 = WORD2(v47);
      sub_1001344DC(a2, &v42);
      if (v46 != 9) {
        goto LABEL_94;
      }
      BOOL v8 = v37 == v42 && v38 == WORD2(v42);
LABEL_35:
      started  = v8;
      return started & 1;
    case 10:
      if (v51) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = (v49 | v50 | (unint64_t)v47 | v48 | *((void *)&v47 + 1)) == 0;
      }
      if (v20)
      {
        sub_1001344DC(a2, &v42);
        if (v46 != 10) {
          goto LABEL_94;
        }
        if (v45) {
          goto LABEL_94;
        }
        int8x16_t v22 = vorrq_s8(v43, v44);
        if (*(void *)&vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)) | v42) {
          goto LABEL_94;
        }
        goto LABEL_80;
      }
      uint64_t v21 = v49 | v50 | v48 | *((void *)&v47 + 1);
      if (v51 || (void)v47 != 1 || v21)
      {
        if (v51 || (void)v47 != 2 || v21)
        {
          sub_1001344DC(a2, &v42);
          if (v46 != 10 || v45 || v42 != 3) {
            goto LABEL_94;
          }
        }
        else
        {
          sub_1001344DC(a2, &v42);
          if (v46 != 10 || v45 || v42 != 2) {
            goto LABEL_94;
          }
        }
      }
      else
      {
        sub_1001344DC(a2, &v42);
        if (v46 != 10 || v45 || v42 != 1) {
          goto LABEL_94;
        }
      }
      int8x16_t v27 = vorrq_s8(v43, v44);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))
      {
LABEL_80:
        started  = 1;
        return started & 1;
      }
LABEL_94:
      started  = 0;
      return started & 1;
    default:
      sub_1001344DC(a2, &v42);
      if (v46) {
        goto LABEL_94;
      }
      started  = ((v4 & 1) == 0) ^ v42;
      return started & 1;
  }
}

uint64_t _s7CoreP2P19AWDLSoftErrorReportO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_10006B904(a1, (uint64_t)v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  if ((v20 & 1) == 0)
  {
    sub_10006B904(a2, (uint64_t)&v14);
    if ((v18 & 1) == 0)
    {
      if (v3 != v14 || v4 != v15) {
        goto LABEL_17;
      }
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v5 = v19[2];
  uint64_t v6 = v19[3];
  sub_10006B904(a2, (uint64_t)&v14);
  if (v18 != 1)
  {
LABEL_12:
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  BOOL v9 = v3 == v14 && v4 == v15;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0))
  {
    if (v5 != v7 || v6 != v8)
    {
LABEL_17:
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v11 & 1;
    }
LABEL_18:
    char v11 = 1;
  }
  return v11 & 1;
}

BOOL sub_100130EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  LOBYTE(v17)  = BYTE1(a1);
  BYTE1(v17)  = BYTE2(a1);
  BYTE2(v17)  = BYTE3(a1);
  HIBYTE(v17)  = BYTE4(a1);
  LOBYTE(v18)  = BYTE5(a1);
  HIBYTE(v18)  = BYTE6(a1);
  LOBYTE(v15)  = BYTE1(a3);
  BYTE1(v15)  = BYTE2(a3);
  BYTE2(v15)  = BYTE3(a3);
  HIBYTE(v15)  = BYTE4(a3);
  LOBYTE(v16)  = BYTE5(a3);
  HIBYTE(v16)  = BYTE6(a3);
  if (v17 != v15 || v18 != v16) {
    return 0;
  }
  BOOL v8 = (a1 & 0x100000000000000) == 0;
  if ((a1 & 0x100000000000000) != 0) {
    uint64_t v9 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v9 = 0x74736163696E75;
  }
  if (v8) {
    unint64_t v10 = 0xE700000000000000;
  }
  else {
    unint64_t v10 = 0xE900000000000074;
  }
  BOOL v11 = (a3 & 0x100000000000000) == 0;
  if ((a3 & 0x100000000000000) != 0) {
    uint64_t v12 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v12 = 0x74736163696E75;
  }
  if (v11) {
    unint64_t v13 = 0xE700000000000000;
  }
  else {
    unint64_t v13 = 0xE900000000000074;
  }
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
    return a2 == a4;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v14) {
    return a2 == a4;
  }
  return result;
}

uint64_t sub_100131048(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result = 0;
  if (a1 == a5 && a2 == a6 && a3 == a7)
  {
    if (a4 == a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0;
          }
          uint64_t result = 1;
          break;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0;
          }
          uint64_t result = 1;
          break;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0;
          }
          uint64_t result = 1;
          break;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0;
          }
          uint64_t result = 1;
          break;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0;
          }
          uint64_t result = 1;
          break;
        default:
          if (BYTE5(a8) - 2 < 5 || ((a4 & 0x10000000000) == 0) == ((a8 >> 40) & 1)) {
            return 0;
          }
          uint64_t result = 1;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10013116C(unint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int16 a4)
{
  if (((a1 ^ a3) & 1) == 0)
  {
    unint64_t v4 = HIDWORD(a1) | ((unint64_t)a2 << 32);
    unint64_t v5 = HIDWORD(a3) | ((unint64_t)a4 << 32);
    uint64_t v6 = v5 & 0xFF00000000;
    if ((v4 & 0xFF00000000) == 0x300000000)
    {
      if (v6 == 0x300000000) {
        return 1;
      }
    }
    else if (v6 != 0x300000000 {
           && HIDWORD(a1) == HIDWORD(a3)
    }
           && ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v5 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(v4))
      {
        case 2:
          return BYTE5(v5) == 2;
        case 3:
          return BYTE5(v5) == 3;
        case 4:
          return BYTE5(v5) == 4;
        case 5:
          return BYTE5(v5) == 5;
        case 6:
          return BYTE5(v5) == 6;
        default:
          return BYTE5(v5) - 2 >= 5 && ((v4 & 0x10000000000) == 0) != ((v5 >> 40) & 1);
      }
    }
  }
  return 0;
}

BOOL _s7CoreP2P32NANFollowUpTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a3) {
    return 0;
  }
  LOBYTE(v9)  = BYTE2(a1);
  BYTE1(v9)  = BYTE3(a1);
  BYTE2(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOBYTE(v10)  = BYTE6(a1);
  HIBYTE(v10)  = HIBYTE(a1);
  LOBYTE(v7)  = BYTE2(a3);
  BYTE1(v7)  = BYTE3(a3);
  BYTE2(v7)  = BYTE4(a3);
  HIBYTE(v7)  = BYTE5(a3);
  LOBYTE(v8)  = BYTE6(a3);
  HIBYTE(v8)  = HIBYTE(a3);
  return v9 == v7 && v10 == v8 && a2 == a4;
}

BOOL _s7CoreP2P43NANDataManagementFrameTransferCompleteEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a1 != a3) {
    return 0;
  }
  LOBYTE(v9)  = BYTE1(a1);
  BYTE1(v9)  = BYTE2(a1);
  BYTE2(v9)  = BYTE3(a1);
  HIBYTE(v9)  = BYTE4(a1);
  LOBYTE(v10)  = BYTE5(a1);
  HIBYTE(v10)  = BYTE6(a1);
  LOBYTE(v7)  = BYTE1(a3);
  BYTE1(v7)  = BYTE2(a3);
  BYTE2(v7)  = BYTE3(a3);
  HIBYTE(v7)  = BYTE4(a3);
  LOBYTE(v8)  = BYTE5(a3);
  HIBYTE(v8)  = BYTE6(a3);
  if (v9 != v7 || v10 != v8) {
    return 0;
  }
  unint64_t v6 = a3 & 0xFF00000000000000;
  if (HIBYTE(a1) != 14)
  {
    if (v6 != 0xE00000000000000 && byte_1003C02DC[a1 >> 56] == byte_1003C02DC[a3 >> 56]) {
      return a2 == a4;
    }
    return 0;
  }
  if (v6 != 0xE00000000000000) {
    return 0;
  }
  return a2 == a4;
}

uint64_t sub_1001314C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a4) {
    return 0;
  }
  LOBYTE(v13)  = BYTE2(a1);
  BYTE1(v13)  = BYTE3(a1);
  BYTE2(v13)  = BYTE4(a1);
  HIBYTE(v13)  = BYTE5(a1);
  LOBYTE(v15)  = BYTE6(a1);
  HIBYTE(v15)  = HIBYTE(a1);
  LOBYTE(v9)  = BYTE2(a4);
  BYTE1(v9)  = BYTE3(a4);
  BYTE2(v9)  = BYTE4(a4);
  HIBYTE(v9)  = BYTE5(a4);
  LOBYTE(v11)  = BYTE6(a4);
  HIBYTE(v11)  = HIBYTE(a4);
  if (v13 != v9 || v15 != v11) {
    return 0;
  }
  LOWORD(v14)  = a2;
  BYTE2(v14)  = BYTE2(a2);
  HIBYTE(v14)  = BYTE3(a2);
  LOBYTE(v16)  = BYTE4(a2);
  HIBYTE(v16)  = BYTE5(a2);
  LOWORD(v10)  = a5;
  BYTE2(v10)  = BYTE2(a5);
  HIBYTE(v10)  = BYTE3(a5);
  LOBYTE(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  if (v14 != v10 || v16 != v12) {
    return 0;
  }

  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a6);
}

uint64_t sub_100131648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a4) {
    return 0;
  }
  LOBYTE(v10)  = BYTE2(a1);
  BYTE1(v10)  = BYTE3(a1);
  BYTE2(v10)  = BYTE4(a1);
  HIBYTE(v10)  = BYTE5(a1);
  LOBYTE(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v8)  = BYTE2(a4);
  BYTE1(v8)  = BYTE3(a4);
  BYTE2(v8)  = BYTE4(a4);
  HIBYTE(v8)  = BYTE5(a4);
  LOBYTE(v9)  = BYTE6(a4);
  HIBYTE(v9)  = HIBYTE(a4);
  BOOL v6 = v10 == v8 && v11 == v9;
  if (!v6 || a2 != a5) {
    return 0;
  }

  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a6);
}

uint64_t _s7CoreP2P11DriverEventO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin();
  uint64_t v21 = (unsigned __int8 *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  unint64_t v4 = (unsigned __int8 *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v6 = (char *)&v21 - v5;
  __chkstk_darwin();
  int v8 = (long long *)((char *)&v21 - v7);
  __chkstk_darwin();
  int v10 = (char *)&v21 - v9;
  __chkstk_darwin();
  __int16 v12 = (char *)&v21 - v11;
  sub_100010BCC(&qword_100480180);
  uint64_t v13 = __chkstk_darwin();
  __int16 v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v16 = (long long *)&v15[*(int *)(v13 + 56)];
  sub_10013303C(v22, (uint64_t)v15, type metadata accessor for DriverEvent);
  sub_10013303C(v23, (uint64_t)v16, type metadata accessor for DriverEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10013303C((uint64_t)v15, (uint64_t)v10, type metadata accessor for DriverEvent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        int v17 = v21;
        sub_100133104((uint64_t)v16, (uint64_t)v21, type metadata accessor for DriverEvent.AWDL);
        char v18 = _s7CoreP2P11DriverEventO4AWDLO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v10, v17);
        sub_1001330A4((uint64_t)v17, type metadata accessor for DriverEvent.AWDL);
        sub_1001330A4((uint64_t)v10, type metadata accessor for DriverEvent.AWDL);
        goto LABEL_18;
      }
      sub_1001330A4((uint64_t)v10, type metadata accessor for DriverEvent.AWDL);
      goto LABEL_16;
    case 2u:
      sub_10013303C((uint64_t)v15, (uint64_t)v8, type metadata accessor for DriverEvent);
      sub_1001344DC(v8, v24);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        sub_1001344DC(v16, v25);
        char v18 = _s7CoreP2P11DriverEventO5InfraO21__derived_enum_equalsySbAE_AEtFZ_0(v24, v25);
        sub_10013BC40((uint64_t)v24, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
        sub_10013BC40((uint64_t)v25, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
        goto LABEL_18;
      }
      sub_10013BC40((uint64_t)v24, (void (*)(void, void, void, void, void, void, void))sub_1000135D4);
      goto LABEL_16;
    case 3u:
      sub_10013303C((uint64_t)v15, (uint64_t)v6, type metadata accessor for DriverEvent);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_16;
      }
      char v19 = *v6 ^ *(unsigned char *)v16;
      sub_1001330A4((uint64_t)v15, type metadata accessor for DriverEvent);
      char v18 = v19 ^ 1;
      return v18 & 1;
    case 4u:
      sub_10013303C((uint64_t)v15, (uint64_t)v4, type metadata accessor for DriverEvent);
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_16;
      }
      char v18 = *v4 == *(unsigned __int8 *)v16;
      goto LABEL_18;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_16;
      }
      sub_1001330A4((uint64_t)v15, type metadata accessor for DriverEvent);
      char v18 = 1;
      return v18 & 1;
    default:
      sub_10013303C((uint64_t)v15, (uint64_t)v12, type metadata accessor for DriverEvent);
      sub_10006E544((uint64_t)v12, (uint64_t)v24);
      if (swift_getEnumCaseMultiPayload())
      {
        sub_1001344F4((uint64_t)v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
LABEL_16:
        sub_1000380B4((uint64_t)v15, &qword_100480180);
        char v18 = 0;
      }
      else
      {
        sub_10006E544((uint64_t)v16, (uint64_t)v25);
        char v18 = _s7CoreP2P11DriverEventO3NANO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v24, (uint64_t)v25);
        sub_1001344F4((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        sub_1001344F4((uint64_t)v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
LABEL_18:
        sub_1001330A4((uint64_t)v15, type metadata accessor for DriverEvent);
      }
      return v18 & 1;
  }
}

uint64_t _s7CoreP2P11DriverEventO4AWDLO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v147 = (char *)a1;
  unint64_t v148 = a2;
  uint64_t v136 = type metadata accessor for AWDLIdleActivity(0);
  __chkstk_darwin();
  unint64_t v138 = (unsigned __int8 *)&v136 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  __chkstk_darwin();
  uint64_t v139 = (unsigned __int8 *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.Header(0);
  __chkstk_darwin();
  uint64_t v140 = (uint64_t)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v141 = (uint64_t)&v136 - v5;
  type metadata accessor for DriverEvent.AWDL(0);
  __chkstk_darwin();
  uint64_t v145 = (unsigned __int8 *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v144 = (uint64_t)&v136 - v7;
  __chkstk_darwin();
  uint64_t v143 = (uint64_t)&v136 - v8;
  __chkstk_darwin();
  int v10 = (char *)&v136 - v9;
  __chkstk_darwin();
  unint64_t v142 = (unsigned __int8 *)&v136 - v11;
  __chkstk_darwin();
  uint64_t v13 = (unsigned __int8 *)&v136 - v12;
  __chkstk_darwin();
  unint64_t v146 = (unsigned __int8 *)&v136 - v14;
  __chkstk_darwin();
  __int16 v16 = (long long *)((char *)&v136 - v15);
  __chkstk_darwin();
  char v18 = (char *)&v136 - v17;
  __chkstk_darwin();
  char v20 = (char *)&v136 - v19;
  sub_100010BCC(&qword_100480188);
  uint64_t v21 = __chkstk_darwin();
  uint64_t v23 = (char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  sub_10013303C((uint64_t)v147, (uint64_t)v23, type metadata accessor for DriverEvent.AWDL);
  uint64_t v25 = (uint64_t)v148;
  unint64_t v148 = (unsigned __int8 *)v24;
  sub_10013303C(v25, v24, type metadata accessor for DriverEvent.AWDL);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10013303C((uint64_t)v23, (uint64_t)v18, type metadata accessor for DriverEvent.AWDL);
      uint64_t v30 = *((void *)v18 + 1);
      uint64_t v29 = *((void *)v18 + 2);
      uint64_t v31 = *((void *)v18 + 3);
      uint64_t v32 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
      uint64_t v33 = (uint64_t)&v18[v32];
      __int16 v34 = v148;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        sub_1001330A4((uint64_t)&v18[v32], type metadata accessor for AWDLActionFrame.Header);
        sub_10006DE90(v30);
        goto LABEL_66;
      }
      uint64_t v145 = (unsigned __int8 *)v29;
      unint64_t v146 = (unsigned __int8 *)v31;
      uint64_t v147 = v23;
      char v35 = *v18;
      char v36 = *v34;
      uint64_t v38 = *((void *)v34 + 1);
      uint64_t v37 = *((void *)v34 + 2);
      uint64_t v39 = (uint64_t)&v34[v32];
      uint64_t v40 = *((void *)v34 + 3);
      sub_100133104(v33, v141, type metadata accessor for AWDLActionFrame.Header);
      uint64_t v41 = v39;
      uint64_t v42 = v140;
      sub_100133104(v41, v140, type metadata accessor for AWDLActionFrame.Header);
      if (((0x7F7E0907060504uLL >> (8 * v35)) & 0x7F) != ((0x7F7E0907060504uLL >> (8 * v36)) & 0x7F)) {
        goto LABEL_105;
      }
      if (v30 >> 30)
      {
        if (v30 >> 30 == 1)
        {
          if ((v38 & 0xC0000000) == 0x40000000)
          {
            char v43 = sub_1000FDF7C(v30 & 0xFFFFFFFF00FF01FFLL, (int)v145, (uint64_t)v146, v38 & 0xFFFFFFFF00FF01FFLL, v37, v40);
            uint64_t v44 = v30;
            goto LABEL_103;
          }
        }
        else if ((v38 & 0xC0000000) == 0x80000000 && v38 == 0x80000000 && !(v40 | v37))
        {
          sub_10006DE90(v30);
          sub_10006DE90(0x80000000);
          uint64_t v126 = (uint64_t)v147;
LABEL_104:
          uint64_t v135 = v141;
          char v28 = _s7CoreP2P15AWDLActionFrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(v141, v42);
          sub_1001330A4(v42, type metadata accessor for AWDLActionFrame.Header);
          sub_1001330A4(v135, type metadata accessor for AWDLActionFrame.Header);
          sub_1001330A4(v126, type metadata accessor for DriverEvent.AWDL);
          return v28 & 1;
        }
      }
      else if ((v38 & 0xC0000000) == 0)
      {
        if (v30 == 14)
        {
          if (v38 != 14) {
            goto LABEL_105;
          }
        }
        else if (v38 == 14 || byte_1003C02DC[(char)v30] != byte_1003C02DC[(char)v38])
        {
          goto LABEL_105;
        }
        char v43 = _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v145, v37);
        uint64_t v44 = v30;
LABEL_103:
        sub_10006DE90(v44);
        sub_10006DE90(v38);
        uint64_t v126 = (uint64_t)v147;
        if (v43) {
          goto LABEL_104;
        }
LABEL_106:
        sub_1001330A4(v42, type metadata accessor for AWDLActionFrame.Header);
        sub_1001330A4(v141, type metadata accessor for AWDLActionFrame.Header);
        sub_1001330A4(v126, type metadata accessor for DriverEvent.AWDL);
        goto LABEL_67;
      }
LABEL_105:
      sub_10006DE90(v30);
      sub_10006DE90(v38);
      uint64_t v126 = (uint64_t)v147;
      goto LABEL_106;
    case 2u:
      sub_10013303C((uint64_t)v23, (uint64_t)v16, type metadata accessor for DriverEvent.AWDL);
      long long v45 = v16[5];
      long long v155 = v16[4];
      long long v156 = v45;
      long long v157 = v16[6];
      long long v46 = v16[1];
      long long v151 = *v16;
      long long v152 = v46;
      long long v47 = v16[3];
      long long v153 = v16[2];
      long long v154 = v47;
      uint64_t v48 = (long long *)v148;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        long long v49 = v48[5];
        long long v169 = v48[4];
        long long v170 = v49;
        long long v171 = v48[6];
        long long v50 = v48[1];
        long long v165 = *v48;
        long long v166 = v50;
        long long v51 = v48[3];
        long long v167 = v48[2];
        long long v168 = v51;
        char v28 = _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v151, (uint64_t)&v165);
        sub_10013BCE0((uint64_t)&v151);
        sub_10013BCE0((uint64_t)&v165);
        goto LABEL_44;
      }
      sub_10013BCE0((uint64_t)&v151);
      goto LABEL_66;
    case 3u:
      char v52 = v146;
      sub_10013303C((uint64_t)v23, (uint64_t)v146, type metadata accessor for DriverEvent.AWDL);
      uint64_t v53 = (uint64_t)v148;
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v120 = type metadata accessor for AWDLStatistics.LowLatencyStatistics;
        goto LABEL_65;
      }
      int64_t v54 = v139;
      sub_100133104(v53, (uint64_t)v139, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      if (_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(v52, v54))
      {
        uint64_t v55 = &v52[*(int *)(v137 + 20)];
        long long v56 = *((_OWORD *)v55 + 10);
        long long v57 = *((_OWORD *)v55 + 12);
        long long v162 = *((_OWORD *)v55 + 11);
        long long v163 = v57;
        uint64_t v164 = *((void *)v55 + 26);
        long long v58 = *((_OWORD *)v55 + 6);
        long long v59 = *((_OWORD *)v55 + 8);
        long long v60 = *((_OWORD *)v55 + 9);
        long long v158 = *((_OWORD *)v55 + 7);
        long long v159 = v59;
        long long v160 = v60;
        long long v161 = v56;
        long long v61 = *((_OWORD *)v55 + 2);
        long long v62 = *((_OWORD *)v55 + 4);
        long long v63 = *((_OWORD *)v55 + 5);
        long long v154 = *((_OWORD *)v55 + 3);
        long long v155 = v62;
        long long v156 = v63;
        long long v157 = v58;
        long long v64 = *(_OWORD *)v55;
        long long v152 = *((_OWORD *)v55 + 1);
        long long v153 = v61;
        long long v66 = *(_OWORD *)(v55 + 264);
        long long v65 = *(_OWORD *)(v55 + 280);
        v149[2]  = *(_OWORD *)(v55 + 248);
        v149[3]  = v66;
        long long v67 = *(_OWORD *)(v55 + 232);
        long long v68 = *(_OWORD *)(v55 + 328);
        v149[8]  = *(_OWORD *)(v55 + 344);
        long long v69 = *(_OWORD *)(v55 + 296);
        v149[6]  = *(_OWORD *)(v55 + 312);
        v149[7]  = v68;
        v149[4]  = v65;
        v149[5]  = v69;
        v149[0]  = *(_OWORD *)(v55 + 216);
        v149[1]  = v67;
        uint64_t v70 = &v54[*(int *)(v137 + 20)];
        long long v71 = *((_OWORD *)v70 + 11);
        long long v175 = *((_OWORD *)v70 + 10);
        long long v176 = v71;
        long long v177 = *((_OWORD *)v70 + 12);
        uint64_t v178 = *((void *)v70 + 26);
        long long v72 = *((_OWORD *)v70 + 7);
        long long v171 = *((_OWORD *)v70 + 6);
        long long v172 = v72;
        long long v73 = *((_OWORD *)v70 + 9);
        long long v173 = *((_OWORD *)v70 + 8);
        long long v174 = v73;
        long long v74 = *((_OWORD *)v70 + 3);
        long long v167 = *((_OWORD *)v70 + 2);
        long long v168 = v74;
        long long v75 = *((_OWORD *)v70 + 5);
        long long v169 = *((_OWORD *)v70 + 4);
        long long v170 = v75;
        long long v76 = *((_OWORD *)v70 + 1);
        long long v165 = *(_OWORD *)v70;
        long long v166 = v76;
        long long v77 = *(_OWORD *)(v70 + 296);
        long long v78 = *(_OWORD *)(v70 + 328);
        long long v79 = *(_OWORD *)(v70 + 344);
        v150[6]  = *(_OWORD *)(v70 + 312);
        v150[7]  = v78;
        v150[8]  = v79;
        long long v151 = v64;
        long long v80 = *(_OWORD *)(v70 + 264);
        long long v81 = *(_OWORD *)(v70 + 280);
        v150[2]  = *(_OWORD *)(v70 + 248);
        v150[3]  = v80;
        long long v82 = *(_OWORD *)(v70 + 232);
        v150[4]  = v81;
        v150[5]  = v77;
        v150[0]  = *(_OWORD *)(v70 + 216);
        v150[1]  = v82;
        if (_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(&v151, &v165)&& _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v149, (uint64_t *)v150))
        {
          unint64_t v83 = type metadata accessor for AWDLStatistics.LowLatencyStatistics;
          goto LABEL_49;
        }
      }
      uint64_t v122 = type metadata accessor for AWDLStatistics.LowLatencyStatistics;
      goto LABEL_71;
    case 4u:
      sub_10013303C((uint64_t)v23, (uint64_t)v13, type metadata accessor for DriverEvent.AWDL);
      unint64_t v84 = v148;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_66;
      }
      BOOL v85 = *v13 == *v84 && v13[1] == v84[1];
      goto LABEL_39;
    case 5u:
      unint64_t v86 = v142;
      sub_10013303C((uint64_t)v23, (uint64_t)v142, type metadata accessor for DriverEvent.AWDL);
      uint64_t v87 = *((unsigned __int16 *)v86 + 4);
      uint64_t v88 = *((unsigned int *)v86 + 1);
      unint64_t v89 = v148;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_66;
      }
      if (*v86 != *v89) {
        goto LABEL_72;
      }
      unint64_t v90 = v88 | (v87 << 32);
      unint64_t v91 = *((unsigned int *)v89 + 1) | ((unint64_t)*((unsigned __int16 *)v89 + 4) << 32);
      uint64_t v92 = v91 & 0xFF00000000;
      if ((v90 & 0xFF00000000) == 0x300000000)
      {
        if (v92 == 0x300000000) {
          goto LABEL_57;
        }
      }
      else if (v92 != 0x300000000 {
             && v88 == *((_DWORD *)v89 + 1)
      }
             && ((0x801004u >> ((v90 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v91 >> 29) & 0xF8)) & 0xFFC))
      {
        switch(BYTE5(v90))
        {
          case 2:
            if (BYTE5(v91) != 2) {
              goto LABEL_72;
            }
            goto LABEL_57;
          case 3:
            if (BYTE5(v91) != 3) {
              goto LABEL_72;
            }
            goto LABEL_57;
          case 4:
            if (BYTE5(v91) != 4) {
              goto LABEL_72;
            }
            goto LABEL_57;
          case 5:
            if (BYTE5(v91) != 5) {
              goto LABEL_72;
            }
            goto LABEL_57;
          case 6:
            if (BYTE5(v91) != 6) {
              goto LABEL_72;
            }
            goto LABEL_57;
          default:
            if (BYTE5(v91) - 2 < 5 || ((v90 & 0x10000000000) == 0) == ((v91 >> 40) & 1)) {
              goto LABEL_72;
            }
            goto LABEL_57;
        }
      }
      goto LABEL_72;
    case 6u:
      sub_10013303C((uint64_t)v23, (uint64_t)v10, type metadata accessor for DriverEvent.AWDL);
      uint64_t v94 = *(void *)v10;
      uint64_t v93 = *((void *)v10 + 1);
      uint64_t v96 = *((void *)v10 + 2);
      uint64_t v95 = *((void *)v10 + 3);
      char v97 = v10[32];
      uint64_t v98 = v148;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        sub_10006B9A0(v94, v93, v96, v95, v97);
        goto LABEL_66;
      }
      uint64_t v147 = v23;
      uint64_t v100 = *(void *)v98;
      uint64_t v99 = *((void *)v98 + 1);
      uint64_t v102 = *((void *)v98 + 2);
      uint64_t v101 = *((void *)v98 + 3);
      unsigned __int8 v103 = v98[32];
      if ((v97 & 1) == 0)
      {
        if ((v98[32] & 1) == 0)
        {
          uint64_t v125 = *((void *)v98 + 3);
          if (v94 == v100 && v93 == v99)
          {
            sub_10006B9A0(v94, v93, v96, v95, 0);
            sub_10006B9A0(v94, v93, v102, v125, 0);
            goto LABEL_99;
          }
          uint64_t v127 = v99;
          char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_10006B9A0(v94, v93, v96, v95, 0);
          uint64_t v129 = v100;
          uint64_t v130 = v127;
          uint64_t v131 = v102;
          uint64_t v132 = v125;
          char v133 = 0;
          goto LABEL_98;
        }
        unint64_t v146 = *(unsigned __int8 **)v98;
        uint64_t v106 = v99;
        uint64_t v104 = v102;
        uint64_t v105 = v101;
        goto LABEL_75;
      }
      uint64_t v104 = *((void *)v98 + 2);
      unint64_t v146 = *(unsigned __int8 **)v98;
      if ((v103 & 1) == 0)
      {
        uint64_t v106 = v99;
        uint64_t v105 = v101;
        char v124 = 0;
        goto LABEL_83;
      }
      if (v94 != v100 || v93 != v99)
      {
        uint64_t v105 = v101;
        uint64_t v106 = v99;
        char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v99 = v106;
        uint64_t v101 = v105;
        if ((v107 & 1) == 0)
        {
LABEL_75:
          char v124 = 1;
LABEL_83:
          sub_10006B9A0(v94, v93, v96, v95, v97);
          sub_10006B9A0((uint64_t)v146, v106, v104, v105, v124);
          goto LABEL_84;
        }
      }
      uint64_t v108 = v99;
      if (v96 != v104 || v95 != v101)
      {
        uint64_t v134 = v101;
        char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_10006B9A0(v94, v93, v96, v95, 1);
        uint64_t v129 = (uint64_t)v146;
        uint64_t v130 = v108;
        uint64_t v131 = v104;
        uint64_t v132 = v134;
        char v133 = 1;
LABEL_98:
        sub_10006B9A0(v129, v130, v131, v132, v133);
        if (v128) {
          goto LABEL_99;
        }
LABEL_84:
        sub_1001330A4((uint64_t)v147, type metadata accessor for DriverEvent.AWDL);
        goto LABEL_67;
      }
      sub_10006B9A0(v94, v93, v96, v95, 1);
      sub_10006B9A0((uint64_t)v146, v108, v96, v95, 1);
LABEL_99:
      uint64_t v119 = (uint64_t)v147;
LABEL_58:
      sub_1001330A4(v119, type metadata accessor for DriverEvent.AWDL);
      char v28 = 1;
      return v28 & 1;
    case 7u:
      uint64_t v109 = v143;
      sub_10013303C((uint64_t)v23, v143, type metadata accessor for DriverEvent.AWDL);
      Swift::Int v110 = v148;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_66;
      }
      int v111 = *(unsigned __int16 *)(v109 + 4);
      int v112 = *((unsigned __int16 *)v110 + 2);
      LODWORD(v165)  = *(_DWORD *)v109;
      WORD2(v165)  = v111;
      BOOL v85 = v165 == *(_DWORD *)v110 && v111 == v112;
LABEL_39:
      char v28 = v85;
      goto LABEL_44;
    case 8u:
      uint64_t v113 = v144;
      sub_10013303C((uint64_t)v23, v144, type metadata accessor for DriverEvent.AWDL);
      unint64_t v114 = *(void **)v113;
      unint64_t v115 = v148;
      if (swift_getEnumCaseMultiPayload() != 8)
      {

        goto LABEL_66;
      }
      uint64_t v116 = *(void **)v115;
      char v28 = _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v114, *(unsigned char *)(v113 + 8), *(void *)v115, v115[8]);

LABEL_44:
      sub_1001330A4((uint64_t)v23, type metadata accessor for DriverEvent.AWDL);
      return v28 & 1;
    case 9u:
      char v52 = v145;
      sub_10013303C((uint64_t)v23, (uint64_t)v145, type metadata accessor for DriverEvent.AWDL);
      uint64_t v117 = (uint64_t)v148;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        int64_t v54 = v138;
        sub_100133104(v117, (uint64_t)v138, type metadata accessor for AWDLIdleActivity);
        if ((static DispatchTimeInterval.== infix(_:_:)() & 1) != 0
          && (static DispatchTimeInterval.== infix(_:_:)() & 1) != 0)
        {
          unint64_t v83 = type metadata accessor for AWDLIdleActivity;
LABEL_49:
          unint64_t v118 = v83;
          sub_1001330A4((uint64_t)v54, v83);
          sub_1001330A4((uint64_t)v52, v118);
LABEL_57:
          uint64_t v119 = (uint64_t)v23;
          goto LABEL_58;
        }
        uint64_t v122 = type metadata accessor for AWDLIdleActivity;
LABEL_71:
        uint64_t v123 = v122;
        sub_1001330A4((uint64_t)v54, v122);
        sub_1001330A4((uint64_t)v52, v123);
LABEL_72:
        sub_1001330A4((uint64_t)v23, type metadata accessor for DriverEvent.AWDL);
      }
      else
      {
        uint64_t v120 = type metadata accessor for AWDLIdleActivity;
LABEL_65:
        sub_1001330A4((uint64_t)v52, v120);
LABEL_66:
        sub_1000380B4((uint64_t)v23, &qword_100480188);
      }
LABEL_67:
      char v28 = 0;
      return v28 & 1;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_66;
      }
      goto LABEL_57;
    case 0xBu:
      if (swift_getEnumCaseMultiPayload() != 11) {
        goto LABEL_66;
      }
      goto LABEL_57;
    case 0xCu:
      if (swift_getEnumCaseMultiPayload() != 12) {
        goto LABEL_66;
      }
      goto LABEL_57;
    case 0xDu:
      if (swift_getEnumCaseMultiPayload() == 13) {
        goto LABEL_57;
      }
      goto LABEL_66;
    default:
      sub_10013303C((uint64_t)v23, (uint64_t)v20, type metadata accessor for DriverEvent.AWDL);
      uint64_t v26 = v148;
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_66;
      }
      char v27 = *v20 ^ *v26;
      sub_1001330A4((uint64_t)v23, type metadata accessor for DriverEvent.AWDL);
      char v28 = v27 ^ 1;
      return v28 & 1;
  }
}

uint64_t _s7CoreP2P30NANOOBActionFrameReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 6) != *(_DWORD *)(a2 + 6) || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10)) {
    return 0;
  }
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 16);
  char v12 = *(unsigned char *)(a1 + 16);

  return _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V23__derived_struct_equalsySbAG_AGtFZ_0(v12, v6, v5, v7, v11, v8, v9, v10);
}

uint64_t _s7CoreP2P28NANDataResponseReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a5) {
    return 0;
  }
  LOBYTE(v17)  = BYTE2(a1);
  BYTE1(v17)  = BYTE3(a1);
  BYTE2(v17)  = BYTE4(a1);
  HIBYTE(v17)  = BYTE5(a1);
  LOBYTE(v19)  = BYTE6(a1);
  HIBYTE(v19)  = HIBYTE(a1);
  LOBYTE(v12)  = BYTE2(a5);
  BYTE1(v12)  = BYTE3(a5);
  BYTE2(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  LOBYTE(v15)  = BYTE6(a5);
  HIBYTE(v15)  = HIBYTE(a5);
  if (v17 != v12 || v19 != v15) {
    return 0;
  }
  LOWORD(v18)  = a2;
  BYTE2(v18)  = BYTE2(a2);
  HIBYTE(v18)  = BYTE3(a2);
  LOBYTE(v20)  = BYTE4(a2);
  HIBYTE(v20)  = BYTE5(a2);
  LOWORD(v13)  = a6;
  BYTE2(v13)  = BYTE2(a6);
  HIBYTE(v13)  = BYTE3(a6);
  LOBYTE(v16)  = BYTE4(a6);
  HIBYTE(v16)  = BYTE5(a6);
  if (v18 != v13 || v20 != v16) {
    return 0;
  }
  BYTE6(v14)  = BYTE6(a2);
  BYTE7(v14)  = HIBYTE(a2);
  DWORD2(v14)  = a3;
  LOBYTE(v14)  = BYTE6(a6);
  BYTE1(v14)  = HIBYTE(a6);
  *(_DWORD *)((char *)&v14 + 2)  = a7;
  if (*(_DWORD *)((char *)&v14 + 6) != v14 || HIWORD(a3) != HIWORD(a7)) {
    return 0;
  }

  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a4, a8);
}

uint64_t sub_10013303C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001330A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100133104(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10013316C(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 4) {
    return sub_100013D44(a2, a3);
  }
  return result;
}

uint64_t sub_100133188(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (BYTE2(a3) != 255) {
    return sub_1001331A0(result, a2, a3, BYTE2(a3) & 1);
  }
  return result;
}

uint64_t sub_1001331A0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return sub_10000C970(a1, a2);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001331AC(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 4) {
    return sub_10000C970(a2, a3);
  }
  return result;
}

uint64_t _s7CoreP2P11DriverEventO3NANO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_10006E544(a1, (uint64_t)v148);
  switch(sub_1001343E0((uint64_t)v148))
  {
    case 1u:
      __dst[0]  = *(_OWORD *)NANBitmap.Channel.operatingClass.getter(v148);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 1) {
        goto LABEL_194;
      }
      v146[0]  = *(_OWORD *)NANBitmap.Channel.operatingClass.getter(v147);
      sub_100116C80(__dst, v144);
      sub_100116C80(v146, v145);
      sub_100116C80(v144, v151);
      int v7 = LOBYTE(v151[0]);
      switch(LOBYTE(v151[0]))
      {
        case 4u:
          sub_100116C80(v145, v150);
          if (LOBYTE(v150[0]) != 4) {
            goto LABEL_194;
          }
          break;
        case 3u:
          sub_100116C80(v145, v150);
          if (LOBYTE(v150[0]) != 3) {
            goto LABEL_194;
          }
          break;
        case 2u:
          sub_100116C80(v145, v150);
          if (LOBYTE(v150[0]) != 2) {
            goto LABEL_194;
          }
          break;
        default:
          sub_100116C80(v145, v150);
          if LOBYTE(v150[0]) - 2 < 3 || ((v7 ^ LOBYTE(v150[0]))) {
            goto LABEL_194;
          }
          break;
      }
      if (*((void *)&__dst[0] + 1) != *((void *)&v146[0] + 1)) {
        goto LABEL_194;
      }
      goto LABEL_151;
    case 2u:
      uint64_t v8 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v9 = *v8;
      int v10 = v8[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v8 + 2);
      WORD2(__dst[0])  = *((_WORD *)v8 + 3);
      uint64_t v12 = *((void *)v8 + 1);
      uint64_t v11 = *((void *)v8 + 2);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) == 2) {
        goto LABEL_84;
      }
      goto LABEL_194;
    case 3u:
      int v13 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v9 = *v13;
      int v10 = v13[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v13 + 2);
      WORD2(__dst[0])  = *((_WORD *)v13 + 3);
      uint64_t v12 = *((void *)v13 + 1);
      uint64_t v11 = *((void *)v13 + 2);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 3) {
        goto LABEL_194;
      }
      goto LABEL_84;
    case 4u:
      uint64_t v14 = NANBitmap.Channel.operatingClass.getter(v148);
      char v15 = *(unsigned char *)(v14 + 8);
      *(void *)&__dst[0]  = *(void *)v14;
      BYTE8(__dst[0])  = v15;
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 4) {
        goto LABEL_194;
      }
      uint64_t v16 = NANBitmap.Channel.operatingClass.getter(v147);
      char v17 = *(unsigned char *)(v16 + 8);
      *(void *)&v146[0]  = *(void *)v16;
      BYTE8(v146[0])  = v17;
      if (LOBYTE(__dst[0]) != LOBYTE(v146[0])) {
        goto LABEL_194;
      }
      if (*(_DWORD *)((char *)__dst + 1) != *(_DWORD *)((char *)v146 + 1)
        || *(unsigned __int16 *)((char *)__dst + 5) != *(unsigned __int16 *)((char *)v146 + 5))
      {
        goto LABEL_194;
      }
      sub_100134384((unsigned char *)__dst + 7, v144);
      sub_100134384((unsigned char *)v146 + 7, v145);
      sub_100134384(v144, v151);
      uint64_t v19 = SLOBYTE(v151[0]);
      if (SLOBYTE(v151[0]) == 14)
      {
        sub_100134384(v145, v150);
        if (LOBYTE(v150[0]) != 14) {
          goto LABEL_194;
        }
      }
      else
      {
        sub_100134384(v145, v150);
        if (SLOBYTE(v150[0]) == 14 || byte_1003C02DC[v19] != byte_1003C02DC[SLOBYTE(v150[0])]) {
          goto LABEL_194;
        }
      }
      if (BYTE8(__dst[0]) == BYTE8(v146[0])) {
        goto LABEL_151;
      }
      goto LABEL_194;
    case 5u:
      __int16 v20 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v21 = *v20;
      int v22 = v20[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v20 + 2);
      WORD2(__dst[0])  = *((_WORD *)v20 + 3);
      LODWORD(v146[0])  = *((_DWORD *)v20 + 2);
      WORD2(v146[0])  = *((_WORD *)v20 + 6);
      uint64_t v11 = *((void *)v20 + 2);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) == 5) {
        goto LABEL_31;
      }
      goto LABEL_194;
    case 6u:
      uint64_t v23 = NANBitmap.Channel.operatingClass.getter(v148);
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      int v26 = *(_DWORD *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 6) {
        goto LABEL_194;
      }
      uint64_t v28 = NANBitmap.Channel.operatingClass.getter(v147);
      started  = _s7CoreP2P28NANDataResponseReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0(v24, v25, v26, v27, *(void *)v28, *(void *)(v28 + 8), *(_DWORD *)(v28 + 16), *(void *)(v28 + 24));
      return started & 1;
    case 7u:
      uint64_t v30 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v21 = *v30;
      int v22 = v30[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v30 + 2);
      WORD2(__dst[0])  = *((_WORD *)v30 + 3);
      LODWORD(v146[0])  = *((_DWORD *)v30 + 2);
      WORD2(v146[0])  = *((_WORD *)v30 + 6);
      uint64_t v11 = *((void *)v30 + 2);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 7) {
        goto LABEL_194;
      }
LABEL_31:
      uint64_t v31 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v21 != *v31 || v22 != v31[1]) {
        goto LABEL_194;
      }
      uint64_t v32 = *((void *)v31 + 2);
      LODWORD(v151[0])  = __dst[0];
      WORD2(v151[0])  = WORD2(__dst[0]);
      if (LODWORD(__dst[0]) != *(_DWORD *)(v31 + 2) || WORD2(__dst[0]) != *((unsigned __int16 *)v31 + 3)) {
        goto LABEL_194;
      }
      LODWORD(v151[0])  = v146[0];
      WORD2(v151[0])  = WORD2(v146[0]);
      if (LODWORD(v146[0]) != *((_DWORD *)v31 + 2) || WORD2(v146[0]) != *((unsigned __int16 *)v31 + 6)) {
        goto LABEL_194;
      }
      goto LABEL_92;
    case 8u:
      char v35 = (unsigned int *)NANBitmap.Channel.operatingClass.getter(v148);
      uint64_t v36 = *v35;
      uint64_t v37 = *((unsigned __int8 *)v35 + 4);
      uint64_t v38 = *((unsigned __int8 *)v35 + 5);
      uint64_t v39 = *((unsigned __int8 *)v35 + 6);
      int v40 = *((unsigned __int8 *)v35 + 7);
      uint64_t v41 = v35[2];
      uint64_t v42 = *((unsigned __int8 *)v35 + 12);
      uint64_t v43 = *((unsigned __int8 *)v35 + 13);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 8) {
        goto LABEL_194;
      }
      uint64_t v44 = (unsigned int *)NANBitmap.Channel.operatingClass.getter(v147);
      uint64_t v45 = *v44;
      uint64_t v46 = *((unsigned __int8 *)v44 + 4);
      uint64_t v47 = *((unsigned __int8 *)v44 + 5);
      uint64_t v48 = *((unsigned __int8 *)v44 + 6);
      int v49 = *((unsigned __int8 *)v44 + 7);
      uint64_t v50 = v44[2];
      uint64_t v51 = *((unsigned __int8 *)v44 + 12);
      uint64_t v52 = *((unsigned __int8 *)v44 + 13);
      if (v40) {
        uint64_t v53 = 0x100000000000000;
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t v54 = v36 | (v37 << 32) | (v38 << 40) | (v39 << 48) | v53;
      uint64_t v55 = v45 | (v46 << 32);
      if (v49) {
        uint64_t v56 = 0x100000000000000;
      }
      else {
        uint64_t v56 = 0;
      }
      started  = sub_100130274(v54, v41 | (v42 << 32) | (v43 << 40), v55 | (v47 << 40) | (v48 << 48) | v56, v50 | (v51 << 32) | (v52 << 40));
      return started & 1;
    case 9u:
      long long v57 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v58 = *v57;
      LODWORD(__dst[0])  = *(_DWORD *)(v57 + 1);
      WORD2(__dst[0])  = *(_WORD *)(v57 + 5);
      unsigned __int8 v59 = v57[7];
      uint64_t v60 = *((void *)v57 + 1);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 9) {
        goto LABEL_194;
      }
      long long v61 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v58 != *v61) {
        goto LABEL_194;
      }
      unsigned __int8 v62 = v61[7];
      uint64_t v63 = *((void *)v61 + 1);
      LODWORD(v146[0])  = __dst[0];
      WORD2(v146[0])  = WORD2(__dst[0]);
      if (LODWORD(__dst[0]) != *(_DWORD *)(v61 + 1) || WORD2(__dst[0]) != *(unsigned __int16 *)(v61 + 5)) {
        goto LABEL_194;
      }
      if (v59) {
        uint64_t v65 = 0x73616369746C756DLL;
      }
      else {
        uint64_t v65 = 0x74736163696E75;
      }
      if (v59) {
        unint64_t v66 = 0xE900000000000074;
      }
      else {
        unint64_t v66 = 0xE700000000000000;
      }
      if (v62) {
        uint64_t v67 = 0x73616369746C756DLL;
      }
      else {
        uint64_t v67 = 0x74736163696E75;
      }
      if (v62) {
        unint64_t v68 = 0xE900000000000074;
      }
      else {
        unint64_t v68 = 0xE700000000000000;
      }
      if (v65 == v67 && v66 == v68)
      {
        swift_bridgeObjectRelease_n();
        if (v60 == v63) {
          goto LABEL_151;
        }
      }
      else
      {
        char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v140 & 1) != 0 && v60 == v63) {
          goto LABEL_151;
        }
      }
      goto LABEL_194;
    case 0xAu:
      long long v69 = (uint64_t *)NANBitmap.Channel.operatingClass.getter(v148);
      uint64_t v70 = *v69;
      unint64_t v71 = v69[1];
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 10) {
        goto LABEL_194;
      }
      long long v72 = (uint64_t *)NANBitmap.Channel.operatingClass.getter(v147);
      started  = _s7CoreP2P24NANDataHostAssistRequestV23__derived_struct_equalsySbAC_ACtFZ_0(v70, v71, *v72, v72[1]);
      return started & 1;
    case 0xBu:
      long long v73 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v74 = *v73;
      uint64_t v75 = *((void *)v73 + 1);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) == 11) {
        goto LABEL_80;
      }
      goto LABEL_194;
    case 0xCu:
      long long v76 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v74 = *v76;
      uint64_t v75 = *((void *)v76 + 1);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 12) {
        goto LABEL_194;
      }
LABEL_80:
      long long v77 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v74 != *v77 || v75 != *((void *)v77 + 1)) {
        goto LABEL_194;
      }
      goto LABEL_151;
    case 0xDu:
      long long v78 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v9 = *v78;
      int v10 = v78[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v78 + 2);
      WORD2(__dst[0])  = *((_WORD *)v78 + 3);
      uint64_t v12 = *((void *)v78 + 1);
      uint64_t v11 = *((void *)v78 + 2);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 13) {
        goto LABEL_194;
      }
LABEL_84:
      long long v79 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v9 != *v79 || v10 != v79[1]) {
        goto LABEL_194;
      }
      uint64_t v80 = *((void *)v79 + 1);
      uint64_t v32 = *((void *)v79 + 2);
      LODWORD(v146[0])  = __dst[0];
      WORD2(v146[0])  = WORD2(__dst[0]);
      BOOL v81 = LODWORD(__dst[0]) == *(_DWORD *)(v79 + 2) && WORD2(__dst[0]) == *((unsigned __int16 *)v79 + 3);
      if (!v81 || v12 != v80) {
        goto LABEL_194;
      }
LABEL_92:
      if ((_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v32) & 1) == 0) {
        goto LABEL_194;
      }
      goto LABEL_151;
    case 0xEu:
      long long v82 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v83 = *v82;
      int v84 = v82[1];
      LODWORD(__dst[0])  = *(_DWORD *)(v82 + 2);
      WORD2(__dst[0])  = *((_WORD *)v82 + 3);
      int v85 = v82[8];
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 14) {
        goto LABEL_194;
      }
      unint64_t v86 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v83 != *v86 || v84 != v86[1]) {
        goto LABEL_194;
      }
      int v88 = v86[8];
      LODWORD(v146[0])  = __dst[0];
      WORD2(v146[0])  = WORD2(__dst[0]);
      BOOL v89 = LODWORD(__dst[0]) == *(_DWORD *)(v86 + 2) && WORD2(__dst[0]) == *((unsigned __int16 *)v86 + 3);
      if (!v89 || v85 != v88) {
        goto LABEL_194;
      }
      goto LABEL_151;
    case 0xFu:
      unint64_t v90 = (unsigned __int16 *)NANBitmap.Channel.operatingClass.getter(v148);
      int v91 = *v90;
      int v92 = *((unsigned __int8 *)v90 + 2);
      int v93 = *((unsigned __int8 *)v90 + 3);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 15) {
        goto LABEL_194;
      }
      uint64_t v94 = (unsigned __int16 *)NANBitmap.Channel.operatingClass.getter(v147);
      if (v91 != *v94) {
        goto LABEL_194;
      }
      if (v92 != *((unsigned __int8 *)v94 + 2) || v93 != *((unsigned __int8 *)v94 + 3)) {
        goto LABEL_194;
      }
      goto LABEL_151;
    case 0x10u:
      uint64_t v96 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v148);
      __dst[0]  = *v96;
      __dst[1]  = v96[1];
      __dst[2]  = v96[2];
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 16) {
        goto LABEL_194;
      }
      char v97 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v147);
      v146[0]  = *v97;
      v146[1]  = v97[1];
      v146[2]  = v97[2];
      started  = _s7CoreP2P30NANOOBActionFrameReceivedEventV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)__dst, (uint64_t)v146);
      return started & 1;
    case 0x11u:
      uint64_t v98 = NANBitmap.Channel.operatingClass.getter(v148);
      uint64_t v99 = *(void *)v98;
      uint64_t v100 = *(void *)(v98 + 8);
      uint64_t v101 = *(void *)(v98 + 16);
      LODWORD(v151[0])  = *(_DWORD *)(v98 + 24);
      WORD2(v151[0])  = *(_WORD *)(v98 + 28);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) == 17)
      {
        uint64_t v102 = NANBitmap.Channel.operatingClass.getter(v147);
        BOOL v103 = v99 == *(void *)v102 && v100 == *(void *)(v102 + 8);
        if (v103 && v101 == *(void *)(v102 + 16))
        {
          LODWORD(v146[0])  = v151[0];
          WORD2(v146[0])  = WORD2(v151[0]);
          LODWORD(__dst[0])  = *(_DWORD *)(v102 + 24);
          WORD2(__dst[0])  = *(_WORD *)(v102 + 28);
          if (LODWORD(v151[0]) == LODWORD(__dst[0])
            && ((0x801004u >> (8 * BYTE4(v146[0]))) & 0xFFC) == ((0x801004u >> (8 * BYTE4(__dst[0]))) & 0xFFC))
          {
            sub_10013BC84((unsigned char *)v146 + 5, &v143);
            sub_10013BC84((unsigned char *)__dst + 5, v144);
            sub_10013BC84(&v143, v150);
            int v105 = LOBYTE(v150[0]);
            switch(LOBYTE(v150[0]))
            {
              case 2:
                sub_10013BC84(v144, v145);
                if (v145[0] != 2) {
                  goto LABEL_194;
                }
                goto LABEL_151;
              case 3:
                sub_10013BC84(v144, v145);
                if (v145[0] != 3) {
                  goto LABEL_194;
                }
                goto LABEL_151;
              case 4:
                sub_10013BC84(v144, v145);
                if (v145[0] != 4) {
                  goto LABEL_194;
                }
                goto LABEL_151;
              case 5:
                sub_10013BC84(v144, v145);
                if (v145[0] != 5) {
                  goto LABEL_194;
                }
                goto LABEL_151;
              case 6:
                sub_10013BC84(v144, v145);
                if (v145[0] != 6) {
                  goto LABEL_194;
                }
                goto LABEL_151;
              default:
                sub_10013BC84(v144, v145);
                if v145[0] - 2 < 5 || ((v105 ^ v145[0])) {
                  goto LABEL_194;
                }
                goto LABEL_151;
            }
          }
        }
      }
      goto LABEL_194;
    case 0x12u:
      uint64_t v106 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v148);
      long long v107 = v106[1];
      __dst[0]  = *v106;
      __dst[1]  = v107;
      long long v108 = v106[5];
      long long v110 = v106[2];
      long long v109 = v106[3];
      __dst[4]  = v106[4];
      __dst[5]  = v108;
      __dst[2]  = v110;
      __dst[3]  = v109;
      long long v111 = v106[9];
      long long v113 = v106[6];
      long long v112 = v106[7];
      __dst[8]  = v106[8];
      __dst[9]  = v111;
      __dst[6]  = v113;
      __dst[7]  = v112;
      long long v114 = v106[13];
      long long v116 = v106[10];
      long long v115 = v106[11];
      __dst[12]  = v106[12];
      __dst[13]  = v114;
      __dst[10]  = v116;
      __dst[11]  = v115;
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 18) {
        goto LABEL_194;
      }
      uint64_t v117 = (_OWORD *)NANBitmap.Channel.operatingClass.getter(v147);
      long long v118 = v117[1];
      v146[0]  = *v117;
      v146[1]  = v118;
      long long v119 = v117[5];
      long long v121 = v117[2];
      long long v120 = v117[3];
      v146[4]  = v117[4];
      v146[5]  = v119;
      v146[2]  = v121;
      v146[3]  = v120;
      long long v122 = v117[9];
      long long v124 = v117[6];
      long long v123 = v117[7];
      v146[8]  = v117[8];
      v146[9]  = v122;
      v146[6]  = v124;
      v146[7]  = v123;
      long long v125 = v117[13];
      long long v127 = v117[10];
      long long v126 = v117[11];
      v146[12]  = v117[12];
      v146[13]  = v125;
      v146[10]  = v127;
      v146[11]  = v126;
      uint64_t v128 = *((void *)&__dst[0] + 1);
      uint64_t v129 = *(void *)&__dst[0];
      unint64_t v130 = *(void *)&__dst[1];
      unint64_t v131 = v118;
      sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
      sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
      if (_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(v129, v128, v130, *(uint64_t *)&v146[0], *((uint64_t *)&v146[0] + 1), v131))
      {
        sub_10013BD30((uint64_t)&__dst[1] + 8, (uint64_t)v145);
        switch(sub_10013BD8C((uint64_t)v145))
        {
          case 1u:
            sub_10013BD30((uint64_t)&v146[1] + 8, (uint64_t)v151);
            int v137 = sub_10013BD8C((uint64_t)v151);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            if (v137 != 1) {
              goto LABEL_194;
            }
            break;
          case 2u:
            sub_10013BD30((uint64_t)&v146[1] + 8, (uint64_t)v151);
            int v138 = sub_10013BD8C((uint64_t)v151);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            if (v138 != 2) {
              goto LABEL_194;
            }
            break;
          case 3u:
            sub_10013BD30((uint64_t)&v146[1] + 8, (uint64_t)v151);
            int v139 = sub_10013BD8C((uint64_t)v151);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            if (v139 != 3) {
              goto LABEL_194;
            }
            break;
          default:
            sub_10013BDA0((uint64_t)v145, (uint64_t)v150);
            sub_10013BD30((uint64_t)&v146[1] + 8, (uint64_t)v144);
            if (sub_10013BD8C((uint64_t)v144)) {
              goto LABEL_134;
            }
            sub_10013BDA0((uint64_t)v144, (uint64_t)v151);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            BOOL v141 = _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(v150, v151);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            if (!v141) {
              goto LABEL_194;
            }
            break;
        }
        if (*(void *)&__dst[12] == *(void *)&v146[12]
          && DWORD2(__dst[12]) == DWORD2(v146[12])
          && ((0x801004u >> (8 * BYTE12(__dst[12]))) & 0xFFC) == ((0x801004u >> (8 * BYTE12(v146[12]))) & 0xFFC))
        {
          switch(BYTE13(__dst[12]))
          {
            case 2:
              if (BYTE13(v146[12]) != 2) {
                goto LABEL_194;
              }
              break;
            case 3:
              if (BYTE13(v146[12]) != 3) {
                goto LABEL_194;
              }
              break;
            case 4:
              if (BYTE13(v146[12]) != 4) {
                goto LABEL_194;
              }
              break;
            case 5:
              if (BYTE13(v146[12]) != 5) {
                goto LABEL_194;
              }
              break;
            case 6:
              if (BYTE13(v146[12]) != 6) {
                goto LABEL_194;
              }
              break;
            default:
              if (BYTE13(v146[12]) - 2 < 5 || ((BYTE13(__dst[12]) & 1) == 0) == (BYTE13(v146[12]) & 1)) {
                goto LABEL_194;
              }
              break;
          }
          if (__dst[13] == v146[13])
          {
LABEL_151:
            started  = 1;
            return started & 1;
          }
        }
      }
      else
      {
LABEL_134:
        sub_1001344F4(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        sub_1001344F4(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      }
LABEL_194:
      started  = 0;
      return started & 1;
    case 0x13u:
      uint64_t v132 = (const void *)NANBitmap.Channel.operatingClass.getter(v148);
      memcpy(__dst, v132, 0x169uLL);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 19) {
        goto LABEL_194;
      }
      char v133 = (const void *)NANBitmap.Channel.operatingClass.getter(v147);
      memcpy(v146, v133, 0x169uLL);
      started  = _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)__dst, (uint64_t)v146);
      return started & 1;
    case 0x14u:
      uint64_t v134 = *(void *)NANBitmap.Channel.operatingClass.getter(v148);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 20) {
        goto LABEL_194;
      }
      uint64_t v135 = (uint64_t *)NANBitmap.Channel.operatingClass.getter(v147);
      started  = _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(v134, *v135);
      return started & 1;
    case 0x15u:
      char v136 = *(unsigned char *)NANBitmap.Channel.operatingClass.getter(v148);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147) != 21) {
        goto LABEL_194;
      }
      BOOL v6 = ((0x801004u >> (8 * v136)) & 0xFFC) == ((0x801004u >> (8
                                                                * *(unsigned char *)NANBitmap.Channel.operatingClass.getter(v147))) & 0xFFC);
      goto LABEL_141;
    default:
      uint64_t v4 = NANBitmap.Channel.operatingClass.getter(v148);
      LODWORD(__dst[0])  = *(_DWORD *)v4;
      WORD2(__dst[0])  = *(_WORD *)(v4 + 4);
      sub_10006E544(a2, (uint64_t)v147);
      if (sub_1001343E0((uint64_t)v147)) {
        goto LABEL_194;
      }
      uint64_t v5 = NANBitmap.Channel.operatingClass.getter(v147);
      BOOL v6 = LODWORD(__dst[0]) == *(_DWORD *)v5 && WORD2(__dst[0]) == *(unsigned __int16 *)(v5 + 4);
LABEL_141:
      started  = v6;
      return started & 1;
  }
}

__n128 *sub_1001342C8(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_100134324(uint64_t a1)
{
  return a1;
}

uint64_t sub_100134354(uint64_t a1)
{
  return a1;
}

unsigned char *sub_100134384(unsigned char *a1, unsigned char *a2)
{
  return a2;
}

uint64_t sub_1001343E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 361);
}

uint64_t sub_1001343E8(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1001344DC(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26)  = *(long long *)((char *)a1 + 26);
  *a2  = v2;
  a2[1]  = v3;
  return a2;
}

uint64_t sub_1001344F4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v11 = *(_WORD *)(a1 + 360);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    *(void *)(a1 + 352),
    v11);
  return a1;
}

void sub_100134598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,char a47)
{
  switch(a47)
  {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 13:
    case 20:
      goto LABEL_2;
    case 16:
      sub_10006EAC4(a4);
      break;
    case 18:
      LOBYTE(v47)  = a24;
      sub_10006E6A4(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
        a23,
        v47,
        (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      break;
    case 19:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_2:
      swift_bridgeObjectRetain();
      break;
    default:
      return;
  }
}

unint64_t sub_1001347F0()
{
  unint64_t result = qword_10047FEC0;
  if (!qword_10047FEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEC0);
  }
  return result;
}

unint64_t sub_100134848()
{
  unint64_t result = qword_10047FEC8;
  if (!qword_10047FEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEC8);
  }
  return result;
}

unint64_t sub_1001348A0()
{
  unint64_t result = qword_10047FED0;
  if (!qword_10047FED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FED0);
  }
  return result;
}

unint64_t sub_1001348F8()
{
  unint64_t result = qword_10047FED8;
  if (!qword_10047FED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FED8);
  }
  return result;
}

unint64_t sub_100134950()
{
  unint64_t result = qword_10047FEE0;
  if (!qword_10047FEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEE0);
  }
  return result;
}

unint64_t sub_1001349A8()
{
  unint64_t result = qword_10047FEE8;
  if (!qword_10047FEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEE8);
  }
  return result;
}

unint64_t sub_100134A00()
{
  unint64_t result = qword_10047FEF0;
  if (!qword_10047FEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEF0);
  }
  return result;
}

unint64_t sub_100134A58()
{
  unint64_t result = qword_10047FEF8;
  if (!qword_10047FEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEF8);
  }
  return result;
}

unint64_t sub_100134AB0()
{
  unint64_t result = qword_10047FF00;
  if (!qword_10047FF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF00);
  }
  return result;
}

unint64_t sub_100134B08()
{
  unint64_t result = qword_10047FF08;
  if (!qword_10047FF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF08);
  }
  return result;
}

unint64_t sub_100134B60()
{
  unint64_t result = qword_10047FF10;
  if (!qword_10047FF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF10);
  }
  return result;
}

unint64_t sub_100134BB8()
{
  unint64_t result = qword_10047FF18;
  if (!qword_10047FF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF18);
  }
  return result;
}

unint64_t sub_100134C10()
{
  unint64_t result = qword_10047FF20;
  if (!qword_10047FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF20);
  }
  return result;
}

unint64_t sub_100134C68()
{
  unint64_t result = qword_10047FF28;
  if (!qword_10047FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF28);
  }
  return result;
}

unint64_t sub_100134CC0()
{
  unint64_t result = qword_10047FF30;
  if (!qword_10047FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF30);
  }
  return result;
}

unint64_t sub_100134D18()
{
  unint64_t result = qword_10047FF38;
  if (!qword_10047FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF38);
  }
  return result;
}

unint64_t sub_100134D70()
{
  unint64_t result = qword_10047FF40;
  if (!qword_10047FF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF40);
  }
  return result;
}

unint64_t sub_100134DC8()
{
  unint64_t result = qword_10047FF48;
  if (!qword_10047FF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF48);
  }
  return result;
}

unint64_t sub_100134E20()
{
  unint64_t result = qword_10047FF50;
  if (!qword_10047FF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF50);
  }
  return result;
}

unint64_t sub_100134E78()
{
  unint64_t result = qword_10047FF58;
  if (!qword_10047FF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF58);
  }
  return result;
}

unint64_t sub_100134ED0()
{
  unint64_t result = qword_10047FF60;
  if (!qword_10047FF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF60);
  }
  return result;
}

unint64_t sub_100134F28()
{
  unint64_t result = qword_10047FF68;
  if (!qword_10047FF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF68);
  }
  return result;
}

unint64_t sub_100134F80()
{
  unint64_t result = qword_10047FF70;
  if (!qword_10047FF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF70);
  }
  return result;
}

unint64_t sub_100134FD8()
{
  unint64_t result = qword_10047FF78;
  if (!qword_10047FF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF78);
  }
  return result;
}

unint64_t sub_100135030()
{
  unint64_t result = qword_10047FF80;
  if (!qword_10047FF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF80);
  }
  return result;
}

unint64_t sub_100135088()
{
  unint64_t result = qword_10047FF88;
  if (!qword_10047FF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF88);
  }
  return result;
}

unint64_t sub_1001350E0()
{
  unint64_t result = qword_10047FF90;
  if (!qword_10047FF90)
  {
    type metadata accessor for AWDLIdleActivity(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF90);
  }
  return result;
}

unint64_t sub_10013513C()
{
  unint64_t result = qword_10047FF98;
  if (!qword_10047FF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FF98);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANClusterChangeEvent()
{
  return &type metadata for NANClusterChangeEvent;
}

uint64_t getEnumTagSinglePayload for NANRoleChangeEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[16]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 3;
  }
  else {
    int v4 = -4;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANRoleChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANRoleChangeEvent()
{
  return &type metadata for NANRoleChangeEvent;
}

ValueMetadata *type metadata accessor for NANDiscoveryResultEvent()
{
  return &type metadata for NANDiscoveryResultEvent;
}

ValueMetadata *type metadata accessor for NANPublishRepliedEvent()
{
  return &type metadata for NANPublishRepliedEvent;
}

ValueMetadata *type metadata accessor for NANDataRequestReceivedEvent()
{
  return &type metadata for NANDataRequestReceivedEvent;
}

uint64_t initializeWithCopy for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
  *(_WORD *)(a1 + 18)  = *(_WORD *)(a2 + 18);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12)  = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13)  = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14)  = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15)  = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19)  = *(unsigned char *)(a2 + 19);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANDataResponseReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANDataResponseReceivedEvent()
{
  return &type metadata for NANDataResponseReceivedEvent;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12)  = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13)  = *(unsigned char *)(a2 + 13);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7CoreP2P27NANDataRequestReceivedEventVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANDataConfirmReceivedEvent()
{
  return &type metadata for NANDataConfirmReceivedEvent;
}

uint64_t getEnumTagSinglePayload for NANDataEstablishedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataEstablishedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 12)  = 0;
    *(_DWORD *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 14)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 14)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataEstablishedEvent()
{
  return &type metadata for NANDataEstablishedEvent;
}

uint64_t getEnumTagSinglePayload for NANDataTerminationEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataTerminationEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataTerminationEvent()
{
  return &type metadata for NANDataTerminationEvent;
}

uint64_t getEnumTagSinglePayload for NANDataHostAssistRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 15);
  BOOL v4 = v3 >= 0xA;
  int v5 = v3 - 10;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDataHostAssistRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)unint64_t result = a2 - 247;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 15)  = a2 + 9;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataHostAssistRequest()
{
  return &type metadata for NANDataHostAssistRequest;
}

unsigned char *storeEnumTagSinglePayload for NANDataHostAssistRequest.Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    void *result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100135820);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataHostAssistRequest.Reason()
{
  return &type metadata for NANDataHostAssistRequest.Reason;
}

ValueMetadata *type metadata accessor for NANSubscribeTerminatedEvent()
{
  return &type metadata for NANSubscribeTerminatedEvent;
}

ValueMetadata *type metadata accessor for NANPublishTerminatedEvent()
{
  return &type metadata for NANPublishTerminatedEvent;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s7CoreP2P23NANDiscoveryResultEventVwta_0(void *a1, void *a2)
{
  *a1  = *a2;
  uint64_t v3 = a2[2];
  a1[1]  = a2[1];
  a1[2]  = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANFollowUpReceivedEvent()
{
  return &type metadata for NANFollowUpReceivedEvent;
}

ValueMetadata *type metadata accessor for NANTransferCompleteStatus()
{
  return &type metadata for NANTransferCompleteStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDataManagementFrameTransferCompleteEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8)  = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANFollowUpTransferCompleteEvent()
{
  return &type metadata for NANFollowUpTransferCompleteEvent;
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8)  = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataManagementFrameTransferCompleteEvent()
{
  return &type metadata for NANDataManagementFrameTransferCompleteEvent;
}

unsigned char *storeEnumTagSinglePayload for WatchdogResetStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    void *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100135B34);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchdogResetStatus()
{
  return &type metadata for WatchdogResetStatus;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 3);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 4)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 4)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 3)  = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus;
}

unsigned char *_s7CoreP2P25NANTransferCompleteStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100135CCCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Reason()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Reason;
}

unsigned char *storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus.Result(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100135DD0);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Result()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Result;
}

uint64_t destroy for NANOOBActionFrameReceivedEvent(uint64_t a1)
{
  return sub_10006DE90(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  sub_10006EAC4(v3);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  *(void *)(a1 + 40)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  sub_10006EAC4(v3);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  *(void *)(a1 + 40)  = v5;
  sub_10006DE90(v6);
  return a1;
}

uint64_t assignWithTake for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = v3;
  sub_10006DE90(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameReceivedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFE && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3)  = (*(_DWORD *)(a1 + 24) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 24) >> 9);
  LODWORD(v3)  = *(_DWORD *)(a1 + 24);
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameReceivedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 32766;
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 32)  = 0;
      *(void *)(result + 40)  = 0;
      *(void *)(result + 24)  = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameReceivedEvent()
{
  return &type metadata for NANOOBActionFrameReceivedEvent;
}

uint64_t getEnumTagSinglePayload for NANDiscoveryWindowStartEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDiscoveryWindowStartEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 30)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 30)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 28)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDiscoveryWindowStartEvent()
{
  return &type metadata for NANDiscoveryWindowStartEvent;
}

uint64_t storeEnumTagSinglePayload for AWDLThreadCoexistenceEvent(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001361F0);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLThreadCoexistenceEvent()
{
  return &type metadata for AWDLThreadCoexistenceEvent;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLSoftAPChannelChangedEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8)  = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[10]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10)  = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftAPChannelChangedEvent()
{
  return &type metadata for AWDLSoftAPChannelChangedEvent;
}

uint64_t destroy for AWDLSoftErrorReport(uint64_t a1)
{
  return sub_10006B9A0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10006B960(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  return a1;
}

uint64_t assignWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10006B960(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  sub_10006B9A0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v9;
  *(unsigned char *)(a1 + 32)  = v3;
  sub_10006B9A0(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(unsigned char *)(result + 32)  = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001364AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1001364B4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32)  = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftErrorReport()
{
  return &type metadata for AWDLSoftErrorReport;
}

uint64_t *initializeBufferWithCopyOfBuffer for AWDLIdleActivity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    char v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for AWDLIdleActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t initializeWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001368CC);
}

uint64_t sub_1001368CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013694C);
}

uint64_t sub_10013694C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1001369BC()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for DriverEvent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v19 = *(void *)a2;
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        uint64_t v23 = *(void *)(a2 + 32);
        char v24 = *(unsigned char *)(a2 + 41);
        unsigned __int8 v25 = *(unsigned char *)(a2 + 40);
        sub_100004C48(v19, v20, v21, v22, v23, v25, v24);
        *(void *)a1  = v19;
        *(void *)(a1 + 8)  = v20;
        *(void *)(a1 + 16)  = v21;
        *(void *)(a1 + 24)  = v22;
        *(void *)(a1 + 32)  = v23;
        *(unsigned char *)(a1 + 40)  = v25;
        *(unsigned char *)(a1 + 41)  = v24;
        goto LABEL_18;
      case 1:
        uint64_t v26 = type metadata accessor for DriverEvent.AWDL(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *(unsigned char *)a1  = *(unsigned char *)a2;
            uint64_t v27 = *(void *)(a2 + 8);
            uint64_t v28 = *(void *)(a2 + 16);
            uint64_t v29 = *(void *)(a2 + 24);
            sub_10006EAC4(v27);
            *(void *)(a1 + 8)  = v27;
            *(void *)(a1 + 16)  = v28;
            *(void *)(a1 + 24)  = v29;
            uint64_t v30 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
            uint64_t v31 = a1 + v30;
            uint64_t v32 = a2 + v30;
            *(_DWORD *)uint64_t v31 = *(_DWORD *)(a2 + v30);
            *(_WORD *)(v31 + 4)  = *(_WORD *)(a2 + v30 + 4);
            *(_DWORD *)(v31 + 6)  = *(_DWORD *)(a2 + v30 + 6);
            *(_WORD *)(v31 + 10)  = *(_WORD *)(a2 + v30 + 10);
            *(_DWORD *)(v31 + 12)  = *(_DWORD *)(a2 + v30 + 12);
            *(_WORD *)(v31 + 16)  = *(_WORD *)(a2 + v30 + 16);
            *(_DWORD *)(v31 + 20)  = *(_DWORD *)(a2 + v30 + 20);
            uint64_t v33 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
            uint64_t v34 = v33[8];
            uint64_t v35 = v31 + v34;
            uint64_t v36 = v32 + v34;
            uint64_t v37 = type metadata accessor for DispatchTimeInterval();
            uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
            v38(v35, v36, v37);
            v38(v31 + v33[9], v32 + v33[9], v37);
            *(_DWORD *)(v31 + v33[10])  = *(_DWORD *)(v32 + v33[10]);
            *(_DWORD *)(v31 + v33[11])  = *(_DWORD *)(v32 + v33[11]);
            *(void *)(v31 + v33[12])  = *(void *)(v32 + v33[12]);
            *(_DWORD *)(v31 + v33[13])  = *(_DWORD *)(v32 + v33[13]);
            *(void *)(v31 + v33[14])  = *(void *)(v32 + v33[14]);
            *(_DWORD *)(v31 + v33[15])  = *(_DWORD *)(v32 + v33[15]);
            *(void *)(v31 + v33[16])  = *(void *)(v32 + v33[16]);
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 2u:
            long long v39 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1  = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16)  = v39;
            *(void *)(a1 + 32)  = *(void *)(a2 + 32);
            *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
            *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
            *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
            *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
            *(unsigned char *)(a1 + 52)  = *(unsigned char *)(a2 + 52);
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(void *)(a1 + 60)  = *(void *)(a2 + 60);
            *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
            *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
            uint64_t v40 = *(void *)(a2 + 88);
            *(void *)(a1 + 80)  = *(void *)(a2 + 80);
            *(void *)(a1 + 88)  = v40;
            uint64_t v42 = *(void *)(a2 + 96);
            uint64_t v41 = *(void *)(a2 + 104);
            *(void *)(a1 + 96)  = v42;
            *(void *)(a1 + 104)  = v41;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 3u:
            *(unsigned char *)a1  = *(unsigned char *)a2;
            *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
            *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
            *(void *)(a1 + 24)  = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
            int v43 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48)  = v43;
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
            long long v44 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80)  = v44;
            *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
            *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
            uint64_t v45 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
            uint64_t v46 = v45[20];
            uint64_t v47 = a1 + v46;
            uint64_t v48 = a2 + v46;
            uint64_t v49 = type metadata accessor for DispatchTimeInterval();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
            *(void *)(a1 + v45[21])  = *(void *)(a2 + v45[21]);
            *(void *)(a1 + v45[22])  = *(void *)(a2 + v45[22]);
            *(void *)(a1 + v45[23])  = *(void *)(a2 + v45[23]);
            *(void *)(a1 + v45[24])  = *(void *)(a2 + v45[24]);
            *(void *)(a1 + v45[25])  = *(void *)(a2 + v45[25]);
            *(void *)(a1 + v45[26])  = *(void *)(a2 + v45[26]);
            *(void *)(a1 + v45[27])  = *(void *)(a2 + v45[27]);
            *(void *)(a1 + v45[28])  = *(void *)(a2 + v45[28]);
            *(_WORD *)(a1 + v45[29])  = *(_WORD *)(a2 + v45[29]);
            *(unsigned char *)(a1 + v45[30])  = *(unsigned char *)(a2 + v45[30]);
            *(unsigned char *)(a1 + v45[31])  = *(unsigned char *)(a2 + v45[31]);
            *(unsigned char *)(a1 + v45[32])  = *(unsigned char *)(a2 + v45[32]);
            *(unsigned char *)(a1 + v45[33])  = *(unsigned char *)(a2 + v45[33]);
            *(unsigned char *)(a1 + v45[34])  = *(unsigned char *)(a2 + v45[34]);
            *(unsigned char *)(a1 + v45[35])  = *(unsigned char *)(a2 + v45[35]);
            uint64_t v50 = v45[36];
            uint64_t v51 = (void *)(a1 + v50);
            uint64_t v52 = (void *)(a2 + v50);
            uint64_t v120 = v52[1];
            *uint64_t v51 = *v52;
            v51[1]  = v120;
            *(unsigned char *)(a1 + v45[37])  = *(unsigned char *)(a2 + v45[37]);
            *(void *)(a1 + v45[38])  = *(void *)(a2 + v45[38]);
            *(void *)(a1 + v45[39])  = *(void *)(a2 + v45[39]);
            *(void *)(a1 + v45[40])  = *(void *)(a2 + v45[40]);
            *(void *)(a1 + v45[41])  = *(void *)(a2 + v45[41]);
            *(void *)(a1 + v45[42])  = *(void *)(a2 + v45[42]);
            *(void *)(a1 + v45[43])  = *(void *)(a2 + v45[43]);
            uint64_t v53 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
            uint64_t v54 = a1 + v53;
            uint64_t v55 = a2 + v53;
            long long v56 = *(_OWORD *)(v55 + 176);
            *(_OWORD *)(v54 + 160)  = *(_OWORD *)(v55 + 160);
            *(_OWORD *)(v54 + 176)  = v56;
            *(_OWORD *)(v54 + 192)  = *(_OWORD *)(v55 + 192);
            long long v57 = *(_OWORD *)(v55 + 112);
            *(_OWORD *)(v54 + 96)  = *(_OWORD *)(v55 + 96);
            *(_OWORD *)(v54 + 112)  = v57;
            long long v58 = *(_OWORD *)(v55 + 144);
            *(_OWORD *)(v54 + 128)  = *(_OWORD *)(v55 + 128);
            *(_OWORD *)(v54 + 144)  = v58;
            long long v59 = *(_OWORD *)(v55 + 48);
            *(_OWORD *)(v54 + 32)  = *(_OWORD *)(v55 + 32);
            *(_OWORD *)(v54 + 48)  = v59;
            long long v60 = *(_OWORD *)(v55 + 80);
            *(_OWORD *)(v54 + 64)  = *(_OWORD *)(v55 + 64);
            *(_OWORD *)(v54 + 80)  = v60;
            long long v61 = *(_OWORD *)(v55 + 16);
            *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
            *(_OWORD *)(v54 + 16)  = v61;
            uint64_t v62 = *(void *)(v55 + 216);
            *(void *)(v54 + 208)  = *(void *)(v55 + 208);
            *(void *)(v54 + 216)  = v62;
            uint64_t v63 = *(void *)(v55 + 232);
            *(void *)(v54 + 224)  = *(void *)(v55 + 224);
            *(void *)(v54 + 232)  = v63;
            uint64_t v64 = *(void *)(v55 + 248);
            *(void *)(v54 + 240)  = *(void *)(v55 + 240);
            *(void *)(v54 + 248)  = v64;
            uint64_t v65 = *(void *)(v55 + 264);
            *(void *)(v54 + 256)  = *(void *)(v55 + 256);
            *(void *)(v54 + 264)  = v65;
            uint64_t v105 = *(void *)(v55 + 280);
            *(void *)(v54 + 272)  = *(void *)(v55 + 272);
            *(void *)(v54 + 280)  = v105;
            uint64_t v108 = *(void *)(v55 + 296);
            *(void *)(v54 + 288)  = *(void *)(v55 + 288);
            *(void *)(v54 + 296)  = v108;
            uint64_t v111 = *(void *)(v55 + 312);
            *(void *)(v54 + 304)  = *(void *)(v55 + 304);
            *(void *)(v54 + 312)  = v111;
            uint64_t v114 = *(void *)(v55 + 328);
            *(void *)(v54 + 320)  = *(void *)(v55 + 320);
            *(void *)(v54 + 328)  = v114;
            uint64_t v117 = *(void *)(v55 + 344);
            *(void *)(v54 + 336)  = *(void *)(v55 + 336);
            *(void *)(v54 + 344)  = v117;
            *(void *)(v54 + 352)  = *(void *)(v55 + 352);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 6u:
            uint64_t v66 = *(void *)a2;
            uint64_t v67 = *(void *)(a2 + 8);
            uint64_t v68 = *(void *)(a2 + 16);
            uint64_t v69 = *(void *)(a2 + 24);
            char v70 = *(unsigned char *)(a2 + 32);
            sub_10006B960(v66, v67, v68, v69, v70);
            *(void *)a1  = v66;
            *(void *)(a1 + 8)  = v67;
            *(void *)(a1 + 16)  = v68;
            *(void *)(a1 + 24)  = v69;
            *(unsigned char *)(a1 + 32)  = v70;
            goto LABEL_17;
          case 8u:
            unint64_t v71 = *(void **)a2;
            *(void *)a1  = *(void *)a2;
            *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
            id v72 = v71;
            goto LABEL_17;
          case 9u:
            uint64_t v73 = type metadata accessor for DispatchTimeInterval();
            int v74 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16);
            v74(a1, a2, v73);
            uint64_t v75 = type metadata accessor for AWDLIdleActivity(0);
            v74(a1 + *(int *)(v75 + 20), a2 + *(int *)(v75 + 20), v73);
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v26 - 8) + 64));
            break;
        }
        goto LABEL_18;
      case 0:
        uint64_t v118 = *(void *)(a2 + 80);
        uint64_t v119 = *(void *)(a2 + 72);
        uint64_t v115 = *(void *)(a2 + 96);
        uint64_t v116 = *(void *)(a2 + 88);
        uint64_t v112 = *(void *)(a2 + 112);
        uint64_t v113 = *(void *)(a2 + 104);
        uint64_t v109 = *(void *)(a2 + 128);
        uint64_t v110 = *(void *)(a2 + 120);
        uint64_t v106 = *(void *)(a2 + 144);
        uint64_t v107 = *(void *)(a2 + 136);
        uint64_t v77 = *(void *)(a2 + 152);
        uint64_t v78 = *(void *)(a2 + 160);
        uint64_t v79 = *(void *)(a2 + 168);
        uint64_t v80 = *(void *)(a2 + 176);
        uint64_t v81 = *(void *)(a2 + 184);
        uint64_t v82 = *(void *)(a2 + 192);
        uint64_t v83 = *(void *)(a2 + 200);
        uint64_t v84 = *(void *)(a2 + 208);
        uint64_t v85 = *(void *)(a2 + 216);
        uint64_t v86 = *(void *)(a2 + 224);
        uint64_t v87 = *(void *)(a2 + 232);
        uint64_t v88 = *(void *)(a2 + 240);
        uint64_t v89 = *(void *)(a2 + 248);
        uint64_t v90 = *(void *)(a2 + 256);
        uint64_t v91 = *(void *)(a2 + 264);
        uint64_t v92 = *(void *)(a2 + 272);
        uint64_t v93 = *(void *)(a2 + 280);
        uint64_t v94 = *(void *)(a2 + 288);
        uint64_t v95 = *(void *)(a2 + 296);
        uint64_t v96 = *(void *)(a2 + 304);
        uint64_t v97 = *(void *)(a2 + 312);
        uint64_t v98 = *(void *)(a2 + 320);
        uint64_t v99 = *(void *)(a2 + 328);
        uint64_t v100 = *(void *)(a2 + 336);
        uint64_t v101 = *(void *)(a2 + 344);
        uint64_t v102 = *(void *)(a2 + 352);
        char v103 = *(unsigned char *)(a2 + 360);
        char v104 = *(unsigned char *)(a2 + 361);
        uint64_t v8 = *(void *)(a2 + 64);
        uint64_t v10 = *(void *)(a2 + 8);
        uint64_t v9 = *(void *)a2;
        uint64_t v11 = *(void *)a2;
        uint64_t v13 = *(void *)(a2 + 24);
        uint64_t v12 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 32);
        uint64_t v15 = *(void *)(a2 + 40);
        uint64_t v16 = *(void *)(a2 + 48);
        unint64_t v17 = *(void *)(a2 + 56);
        sub_100134598(v11, v10, v12, v13, v14, v15, v16, v17, v8, v119, v118, v116, v115, v113, v112, v110, v109, v107, v106,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104);
        *(void *)a1  = v9;
        *(void *)(a1 + 8)  = v10;
        *(void *)(a1 + 16)  = v12;
        *(void *)(a1 + 24)  = v13;
        *(void *)(a1 + 32)  = v14;
        *(void *)(a1 + 40)  = v15;
        *(void *)(a1 + 48)  = v16;
        *(void *)(a1 + 56)  = v17;
        *(void *)(a1 + 64)  = v8;
        *(void *)(a1 + 72)  = v119;
        *(void *)(a1 + 80)  = v118;
        *(void *)(a1 + 88)  = v116;
        *(void *)(a1 + 96)  = v115;
        *(void *)(a1 + 104)  = v113;
        *(void *)(a1 + 112)  = v112;
        *(void *)(a1 + 120)  = v110;
        *(void *)(a1 + 128)  = v109;
        *(void *)(a1 + 136)  = v107;
        *(void *)(a1 + 144)  = v106;
        *(void *)(a1 + 152)  = v77;
        *(void *)(a1 + 160)  = v78;
        *(void *)(a1 + 168)  = v79;
        *(void *)(a1 + 176)  = v80;
        *(void *)(a1 + 184)  = v81;
        *(void *)(a1 + 192)  = v82;
        *(void *)(a1 + 200)  = v83;
        *(void *)(a1 + 208)  = v84;
        *(void *)(a1 + 216)  = v85;
        *(void *)(a1 + 224)  = v86;
        *(void *)(a1 + 232)  = v87;
        *(void *)(a1 + 240)  = v88;
        *(void *)(a1 + 248)  = v89;
        *(void *)(a1 + 256)  = v90;
        *(void *)(a1 + 264)  = v91;
        *(void *)(a1 + 272)  = v92;
        *(void *)(a1 + 280)  = v93;
        *(void *)(a1 + 288)  = v94;
        *(void *)(a1 + 296)  = v95;
        *(void *)(a1 + 304)  = v96;
        *(void *)(a1 + 312)  = v97;
        *(void *)(a1 + 320)  = v98;
        *(void *)(a1 + 328)  = v99;
        *(void *)(a1 + 336)  = v100;
        *(void *)(a1 + 344)  = v101;
        *(void *)(a1 + 352)  = v102;
        *(unsigned char *)(a1 + 360)  = v103;
        *(unsigned char *)(a1 + 361)  = v104;
LABEL_18:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t assignWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001330A4(a1, type metadata accessor for DriverEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v8 = *(void *)a2;
        uint64_t v9 = *(void *)(a2 + 8);
        uint64_t v10 = *(void *)(a2 + 16);
        uint64_t v11 = *(void *)(a2 + 24);
        uint64_t v12 = *(void *)(a2 + 32);
        char v13 = *(unsigned char *)(a2 + 41);
        unsigned __int8 v14 = *(unsigned char *)(a2 + 40);
        sub_100004C48(v8, v9, v10, v11, v12, v14, v13);
        *(void *)a1  = v8;
        *(void *)(a1 + 8)  = v9;
        *(void *)(a1 + 16)  = v10;
        *(void *)(a1 + 24)  = v11;
        *(void *)(a1 + 32)  = v12;
        *(unsigned char *)(a1 + 40)  = v14;
        *(unsigned char *)(a1 + 41)  = v13;
        goto LABEL_17;
      case 1:
        uint64_t v15 = type metadata accessor for DriverEvent.AWDL(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *(unsigned char *)a1  = *(unsigned char *)a2;
            uint64_t v16 = *(void *)(a2 + 8);
            uint64_t v17 = *(void *)(a2 + 16);
            uint64_t v18 = *(void *)(a2 + 24);
            sub_10006EAC4(v16);
            *(void *)(a1 + 8)  = v16;
            *(void *)(a1 + 16)  = v17;
            *(void *)(a1 + 24)  = v18;
            uint64_t v19 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
            uint64_t v20 = a1 + v19;
            uint64_t v21 = a2 + v19;
            LODWORD(v19)  = *(_DWORD *)(a2 + v19);
            *(_WORD *)(v20 + 4)  = *(_WORD *)(v21 + 4);
            *(_DWORD *)uint64_t v20 = v19;
            LOWORD(v19)  = *(_WORD *)(v21 + 10);
            *(_DWORD *)(v20 + 6)  = *(_DWORD *)(v21 + 6);
            *(_WORD *)(v20 + 10)  = v19;
            LOWORD(v19)  = *(_WORD *)(v21 + 16);
            *(_DWORD *)(v20 + 12)  = *(_DWORD *)(v21 + 12);
            *(_WORD *)(v20 + 16)  = v19;
            *(_DWORD *)(v20 + 20)  = *(_DWORD *)(v21 + 20);
            uint64_t v22 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
            uint64_t v23 = v22[8];
            uint64_t v24 = v20 + v23;
            uint64_t v25 = v21 + v23;
            uint64_t v26 = type metadata accessor for DispatchTimeInterval();
            uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
            v27(v24, v25, v26);
            v27(v20 + v22[9], v21 + v22[9], v26);
            *(_DWORD *)(v20 + v22[10])  = *(_DWORD *)(v21 + v22[10]);
            *(_DWORD *)(v20 + v22[11])  = *(_DWORD *)(v21 + v22[11]);
            *(void *)(v20 + v22[12])  = *(void *)(v21 + v22[12]);
            *(_DWORD *)(v20 + v22[13])  = *(_DWORD *)(v21 + v22[13]);
            *(void *)(v20 + v22[14])  = *(void *)(v21 + v22[14]);
            *(_DWORD *)(v20 + v22[15])  = *(_DWORD *)(v21 + v22[15]);
            *(void *)(v20 + v22[16])  = *(void *)(v21 + v22[16]);
            swift_bridgeObjectRetain();
            goto LABEL_16;
          case 2u:
            *(void *)a1  = *(void *)a2;
            *(void *)(a1 + 8)  = *(void *)(a2 + 8);
            *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
            *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
            *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
            *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
            *(_WORD *)(a1 + 34)  = *(_WORD *)(a2 + 34);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_WORD *)(a1 + 38)  = *(_WORD *)(a2 + 38);
            *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
            *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
            *(unsigned char *)(a1 + 43)  = *(unsigned char *)(a2 + 43);
            *(unsigned char *)(a1 + 44)  = *(unsigned char *)(a2 + 44);
            *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
            *(unsigned char *)(a1 + 52)  = *(unsigned char *)(a2 + 52);
            *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
            *(unsigned char *)(a1 + 60)  = *(unsigned char *)(a2 + 60);
            *(unsigned char *)(a1 + 61)  = *(unsigned char *)(a2 + 61);
            *(unsigned char *)(a1 + 62)  = *(unsigned char *)(a2 + 62);
            *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
            *(unsigned char *)(a1 + 64)  = *(unsigned char *)(a2 + 64);
            *(unsigned char *)(a1 + 65)  = *(unsigned char *)(a2 + 65);
            *(unsigned char *)(a1 + 66)  = *(unsigned char *)(a2 + 66);
            *(unsigned char *)(a1 + 67)  = *(unsigned char *)(a2 + 67);
            *(unsigned char *)(a1 + 68)  = *(unsigned char *)(a2 + 68);
            *(unsigned char *)(a1 + 69)  = *(unsigned char *)(a2 + 69);
            *(unsigned char *)(a1 + 70)  = *(unsigned char *)(a2 + 70);
            *(unsigned char *)(a1 + 71)  = *(unsigned char *)(a2 + 71);
            *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
            *(void *)(a1 + 80)  = *(void *)(a2 + 80);
            *(void *)(a1 + 88)  = *(void *)(a2 + 88);
            *(void *)(a1 + 96)  = *(void *)(a2 + 96);
            *(void *)(a1 + 104)  = *(void *)(a2 + 104);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_16;
          case 3u:
            *(unsigned char *)a1  = *(unsigned char *)a2;
            *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
            *(void *)(a1 + 8)  = *(void *)(a2 + 8);
            *(void *)(a1 + 16)  = *(void *)(a2 + 16);
            *(void *)(a1 + 24)  = *(void *)(a2 + 24);
            int v28 = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 32)  = v28;
            int v29 = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
            *(_DWORD *)(a1 + 40)  = v29;
            int v30 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48)  = v30;
            int v31 = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
            *(_DWORD *)(a1 + 56)  = v31;
            *(void *)(a1 + 64)  = *(void *)(a2 + 64);
            *(void *)(a1 + 72)  = *(void *)(a2 + 72);
            *(void *)(a1 + 80)  = *(void *)(a2 + 80);
            *(void *)(a1 + 88)  = *(void *)(a2 + 88);
            *(void *)(a1 + 96)  = *(void *)(a2 + 96);
            *(void *)(a1 + 104)  = *(void *)(a2 + 104);
            *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
            uint64_t v32 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
            uint64_t v33 = v32[20];
            uint64_t v34 = a1 + v33;
            uint64_t v35 = a2 + v33;
            uint64_t v36 = type metadata accessor for DispatchTimeInterval();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
            *(void *)(a1 + v32[21])  = *(void *)(a2 + v32[21]);
            *(void *)(a1 + v32[22])  = *(void *)(a2 + v32[22]);
            *(void *)(a1 + v32[23])  = *(void *)(a2 + v32[23]);
            *(void *)(a1 + v32[24])  = *(void *)(a2 + v32[24]);
            *(void *)(a1 + v32[25])  = *(void *)(a2 + v32[25]);
            *(void *)(a1 + v32[26])  = *(void *)(a2 + v32[26]);
            *(void *)(a1 + v32[27])  = *(void *)(a2 + v32[27]);
            *(void *)(a1 + v32[28])  = *(void *)(a2 + v32[28]);
            *(_WORD *)(a1 + v32[29])  = *(_WORD *)(a2 + v32[29]);
            *(unsigned char *)(a1 + v32[30])  = *(unsigned char *)(a2 + v32[30]);
            *(unsigned char *)(a1 + v32[31])  = *(unsigned char *)(a2 + v32[31]);
            *(unsigned char *)(a1 + v32[32])  = *(unsigned char *)(a2 + v32[32]);
            *(unsigned char *)(a1 + v32[33])  = *(unsigned char *)(a2 + v32[33]);
            *(unsigned char *)(a1 + v32[34])  = *(unsigned char *)(a2 + v32[34]);
            *(unsigned char *)(a1 + v32[35])  = *(unsigned char *)(a2 + v32[35]);
            uint64_t v37 = v32[36];
            uint64_t v38 = (void *)(a1 + v37);
            long long v39 = (void *)(a2 + v37);
            *uint64_t v38 = *v39;
            v38[1]  = v39[1];
            *(unsigned char *)(a1 + v32[37])  = *(unsigned char *)(a2 + v32[37]);
            *(void *)(a1 + v32[38])  = *(void *)(a2 + v32[38]);
            *(void *)(a1 + v32[39])  = *(void *)(a2 + v32[39]);
            *(void *)(a1 + v32[40])  = *(void *)(a2 + v32[40]);
            *(void *)(a1 + v32[41])  = *(void *)(a2 + v32[41]);
            *(void *)(a1 + v32[42])  = *(void *)(a2 + v32[42]);
            *(void *)(a1 + v32[43])  = *(void *)(a2 + v32[43]);
            uint64_t v40 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
            uint64_t v41 = a1 + v40;
            uint64_t v42 = a2 + v40;
            uint64_t v43 = *(void *)(v42 + 208);
            long long v45 = *(_OWORD *)(v42 + 176);
            long long v44 = *(_OWORD *)(v42 + 192);
            *(_OWORD *)(v41 + 160)  = *(_OWORD *)(v42 + 160);
            *(_OWORD *)(v41 + 176)  = v45;
            *(_OWORD *)(v41 + 192)  = v44;
            *(void *)(v41 + 208)  = v43;
            long long v47 = *(_OWORD *)(v42 + 128);
            long long v46 = *(_OWORD *)(v42 + 144);
            long long v48 = *(_OWORD *)(v42 + 112);
            *(_OWORD *)(v41 + 96)  = *(_OWORD *)(v42 + 96);
            *(_OWORD *)(v41 + 112)  = v48;
            *(_OWORD *)(v41 + 128)  = v47;
            *(_OWORD *)(v41 + 144)  = v46;
            long long v50 = *(_OWORD *)(v42 + 64);
            long long v49 = *(_OWORD *)(v42 + 80);
            long long v51 = *(_OWORD *)(v42 + 48);
            *(_OWORD *)(v41 + 32)  = *(_OWORD *)(v42 + 32);
            *(_OWORD *)(v41 + 48)  = v51;
            *(_OWORD *)(v41 + 64)  = v50;
            *(_OWORD *)(v41 + 80)  = v49;
            long long v52 = *(_OWORD *)(v42 + 16);
            *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
            *(_OWORD *)(v41 + 16)  = v52;
            *(void *)(v41 + 216)  = *(void *)(v42 + 216);
            *(void *)(v41 + 224)  = *(void *)(v42 + 224);
            *(void *)(v41 + 232)  = *(void *)(v42 + 232);
            *(void *)(v41 + 240)  = *(void *)(v42 + 240);
            *(void *)(v41 + 248)  = *(void *)(v42 + 248);
            *(void *)(v41 + 256)  = *(void *)(v42 + 256);
            *(void *)(v41 + 264)  = *(void *)(v42 + 264);
            *(void *)(v41 + 272)  = *(void *)(v42 + 272);
            *(void *)(v41 + 280)  = *(void *)(v42 + 280);
            *(void *)(v41 + 288)  = *(void *)(v42 + 288);
            *(void *)(v41 + 296)  = *(void *)(v42 + 296);
            *(void *)(v41 + 304)  = *(void *)(v42 + 304);
            *(void *)(v41 + 312)  = *(void *)(v42 + 312);
            *(void *)(v41 + 320)  = *(void *)(v42 + 320);
            *(void *)(v41 + 328)  = *(void *)(v42 + 328);
            *(void *)(v41 + 336)  = *(void *)(v42 + 336);
            *(void *)(v41 + 344)  = *(void *)(v42 + 344);
            *(void *)(v41 + 352)  = *(void *)(v42 + 352);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_16;
          case 6u:
            uint64_t v53 = *(void *)a2;
            uint64_t v54 = *(void *)(a2 + 8);
            uint64_t v55 = *(void *)(a2 + 16);
            uint64_t v56 = *(void *)(a2 + 24);
            char v57 = *(unsigned char *)(a2 + 32);
            sub_10006B960(v53, v54, v55, v56, v57);
            *(void *)a1  = v53;
            *(void *)(a1 + 8)  = v54;
            *(void *)(a1 + 16)  = v55;
            *(void *)(a1 + 24)  = v56;
            *(unsigned char *)(a1 + 32)  = v57;
            goto LABEL_16;
          case 8u:
            long long v58 = *(void **)a2;
            *(void *)a1  = *(void *)a2;
            *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
            id v59 = v58;
            goto LABEL_16;
          case 9u:
            uint64_t v60 = type metadata accessor for DispatchTimeInterval();
            long long v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16);
            v61(a1, a2, v60);
            uint64_t v62 = type metadata accessor for AWDLIdleActivity(0);
            v61(a1 + *(int *)(v62 + 20), a2 + *(int *)(v62 + 20), v60);
LABEL_16:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
            break;
        }
        goto LABEL_17;
      case 0:
        uint64_t v93 = *(void *)(a2 + 8);
        uint64_t v94 = *(void *)a2;
        uint64_t v91 = *(void *)(a2 + 24);
        uint64_t v92 = *(void *)(a2 + 16);
        uint64_t v90 = *(void *)(a2 + 32);
        uint64_t v89 = *(void *)(a2 + 40);
        uint64_t v88 = *(void *)(a2 + 48);
        unint64_t v95 = *(void *)(a2 + 56);
        uint64_t v108 = *(void *)(a2 + 80);
        uint64_t v109 = *(void *)(a2 + 72);
        uint64_t v106 = *(void *)(a2 + 96);
        uint64_t v107 = *(void *)(a2 + 88);
        uint64_t v104 = *(void *)(a2 + 112);
        uint64_t v105 = *(void *)(a2 + 104);
        uint64_t v102 = *(void *)(a2 + 128);
        uint64_t v103 = *(void *)(a2 + 120);
        uint64_t v100 = *(void *)(a2 + 144);
        uint64_t v101 = *(void *)(a2 + 136);
        uint64_t v64 = *(void *)(a2 + 152);
        uint64_t v65 = *(void *)(a2 + 160);
        uint64_t v66 = *(void *)(a2 + 168);
        uint64_t v67 = *(void *)(a2 + 176);
        uint64_t v68 = *(void *)(a2 + 184);
        uint64_t v69 = *(void *)(a2 + 192);
        uint64_t v70 = *(void *)(a2 + 200);
        uint64_t v71 = *(void *)(a2 + 208);
        uint64_t v72 = *(void *)(a2 + 216);
        uint64_t v73 = *(void *)(a2 + 224);
        uint64_t v74 = *(void *)(a2 + 232);
        uint64_t v75 = *(void *)(a2 + 240);
        uint64_t v76 = *(void *)(a2 + 248);
        uint64_t v77 = *(void *)(a2 + 256);
        uint64_t v78 = *(void *)(a2 + 264);
        uint64_t v79 = *(void *)(a2 + 272);
        uint64_t v80 = *(void *)(a2 + 280);
        uint64_t v81 = *(void *)(a2 + 288);
        uint64_t v82 = *(void *)(a2 + 296);
        uint64_t v83 = *(void *)(a2 + 304);
        uint64_t v84 = *(void *)(a2 + 312);
        uint64_t v85 = *(void *)(a2 + 320);
        uint64_t v86 = *(void *)(a2 + 328);
        uint64_t v87 = *(void *)(a2 + 336);
        uint64_t v96 = *(void *)(a2 + 344);
        uint64_t v97 = *(void *)(a2 + 352);
        char v98 = *(unsigned char *)(a2 + 360);
        char v99 = *(unsigned char *)(a2 + 361);
        uint64_t v7 = *(void *)(a2 + 64);
        sub_100134598(v94, v93, v92, v91, v90, v89, v88, v95, v7, v109, v108, v107, v106, v105, v104, v103, v102, v101, v100,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v96,
          v97,
          v98,
          v99);
        *(void *)a1  = v94;
        *(void *)(a1 + 8)  = v93;
        *(void *)(a1 + 16)  = v92;
        *(void *)(a1 + 24)  = v91;
        *(void *)(a1 + 32)  = v90;
        *(void *)(a1 + 40)  = v89;
        *(void *)(a1 + 48)  = v88;
        *(void *)(a1 + 56)  = v95;
        *(void *)(a1 + 64)  = v7;
        *(void *)(a1 + 72)  = v109;
        *(void *)(a1 + 80)  = v108;
        *(void *)(a1 + 88)  = v107;
        *(void *)(a1 + 96)  = v106;
        *(void *)(a1 + 104)  = v105;
        *(void *)(a1 + 112)  = v104;
        *(void *)(a1 + 120)  = v103;
        *(void *)(a1 + 128)  = v102;
        *(void *)(a1 + 136)  = v101;
        *(void *)(a1 + 144)  = v100;
        *(void *)(a1 + 152)  = v64;
        *(void *)(a1 + 160)  = v65;
        *(void *)(a1 + 168)  = v66;
        *(void *)(a1 + 176)  = v67;
        *(void *)(a1 + 184)  = v68;
        *(void *)(a1 + 192)  = v69;
        *(void *)(a1 + 200)  = v70;
        *(void *)(a1 + 208)  = v71;
        *(void *)(a1 + 216)  = v72;
        *(void *)(a1 + 224)  = v73;
        *(void *)(a1 + 232)  = v74;
        *(void *)(a1 + 240)  = v75;
        *(void *)(a1 + 248)  = v76;
        *(void *)(a1 + 256)  = v77;
        *(void *)(a1 + 264)  = v78;
        *(void *)(a1 + 272)  = v79;
        *(void *)(a1 + 280)  = v80;
        *(void *)(a1 + 288)  = v81;
        *(void *)(a1 + 296)  = v82;
        *(void *)(a1 + 304)  = v83;
        *(void *)(a1 + 312)  = v84;
        *(void *)(a1 + 320)  = v85;
        *(void *)(a1 + 328)  = v86;
        *(void *)(a1 + 336)  = v87;
        *(void *)(a1 + 344)  = v96;
        *(void *)(a1 + 352)  = v97;
        *(unsigned char *)(a1 + 360)  = v98;
        *(unsigned char *)(a1 + 361)  = v99;
LABEL_17:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DriverEvent.AWDL(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 9:
        uint64_t v18 = type metadata accessor for DispatchTimeInterval();
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
        v19(a1, a2, v18);
        uint64_t v20 = type metadata accessor for AWDLIdleActivity(0);
        v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
        swift_storeEnumTagMultiPayload();
        break;
      case 3:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v21 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v21;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        long long v22 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v22;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        uint64_t v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        uint64_t v24 = v23[20];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
        *(void *)&a1[v23[21]]  = *(void *)&a2[v23[21]];
        *(void *)&a1[v23[22]]  = *(void *)&a2[v23[22]];
        *(void *)&a1[v23[23]]  = *(void *)&a2[v23[23]];
        *(void *)&a1[v23[24]]  = *(void *)&a2[v23[24]];
        *(void *)&a1[v23[25]]  = *(void *)&a2[v23[25]];
        *(void *)&a1[v23[26]]  = *(void *)&a2[v23[26]];
        *(void *)&a1[v23[27]]  = *(void *)&a2[v23[27]];
        *(void *)&a1[v23[28]]  = *(void *)&a2[v23[28]];
        *(_WORD *)&a1[v23[29]]  = *(_WORD *)&a2[v23[29]];
        a1[v23[30]]  = a2[v23[30]];
        a1[v23[31]]  = a2[v23[31]];
        a1[v23[32]]  = a2[v23[32]];
        a1[v23[33]]  = a2[v23[33]];
        a1[v23[34]]  = a2[v23[34]];
        a1[v23[35]]  = a2[v23[35]];
        *(_OWORD *)&a1[v23[36]]  = *(_OWORD *)&a2[v23[36]];
        a1[v23[37]]  = a2[v23[37]];
        *(void *)&a1[v23[38]]  = *(void *)&a2[v23[38]];
        *(void *)&a1[v23[39]]  = *(void *)&a2[v23[39]];
        *(void *)&a1[v23[40]]  = *(void *)&a2[v23[40]];
        *(void *)&a1[v23[41]]  = *(void *)&a2[v23[41]];
        *(void *)&a1[v23[42]]  = *(void *)&a2[v23[42]];
        *(void *)&a1[v23[43]]  = *(void *)&a2[v23[43]];
        uint64_t v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
        memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        long long v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v8;
        uint64_t v9 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
        *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
        *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
        *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
        *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
        *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
        uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        uint64_t v13 = v12[8];
        unsigned __int8 v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        uint64_t v16 = type metadata accessor for DispatchTimeInterval();
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
        *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
        *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
        *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001330A4((uint64_t)a1, type metadata accessor for DriverEvent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DriverEvent.AWDL(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 9:
          uint64_t v18 = type metadata accessor for DispatchTimeInterval();
          uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
          v19(a1, a2, v18);
          uint64_t v20 = type metadata accessor for AWDLIdleActivity(0);
          v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
          swift_storeEnumTagMultiPayload();
          break;
        case 3:
          *a1  = *a2;
          *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
          *((void *)a1 + 3)  = *((void *)a2 + 3);
          *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
          *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
          *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
          *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
          int v21 = *((_DWORD *)a2 + 12);
          *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
          *((_DWORD *)a1 + 12)  = v21;
          *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
          *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
          long long v22 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5)  = v22;
          *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
          a1[112]  = a2[112];
          uint64_t v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          uint64_t v24 = v23[20];
          uint64_t v25 = &a1[v24];
          uint64_t v26 = &a2[v24];
          uint64_t v27 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
          *(void *)&a1[v23[21]]  = *(void *)&a2[v23[21]];
          *(void *)&a1[v23[22]]  = *(void *)&a2[v23[22]];
          *(void *)&a1[v23[23]]  = *(void *)&a2[v23[23]];
          *(void *)&a1[v23[24]]  = *(void *)&a2[v23[24]];
          *(void *)&a1[v23[25]]  = *(void *)&a2[v23[25]];
          *(void *)&a1[v23[26]]  = *(void *)&a2[v23[26]];
          *(void *)&a1[v23[27]]  = *(void *)&a2[v23[27]];
          *(void *)&a1[v23[28]]  = *(void *)&a2[v23[28]];
          *(_WORD *)&a1[v23[29]]  = *(_WORD *)&a2[v23[29]];
          a1[v23[30]]  = a2[v23[30]];
          a1[v23[31]]  = a2[v23[31]];
          a1[v23[32]]  = a2[v23[32]];
          a1[v23[33]]  = a2[v23[33]];
          a1[v23[34]]  = a2[v23[34]];
          a1[v23[35]]  = a2[v23[35]];
          *(_OWORD *)&a1[v23[36]]  = *(_OWORD *)&a2[v23[36]];
          a1[v23[37]]  = a2[v23[37]];
          *(void *)&a1[v23[38]]  = *(void *)&a2[v23[38]];
          *(void *)&a1[v23[39]]  = *(void *)&a2[v23[39]];
          *(void *)&a1[v23[40]]  = *(void *)&a2[v23[40]];
          *(void *)&a1[v23[41]]  = *(void *)&a2[v23[41]];
          *(void *)&a1[v23[42]]  = *(void *)&a2[v23[42]];
          *(void *)&a1[v23[43]]  = *(void *)&a2[v23[43]];
          uint64_t v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
          memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
          swift_storeEnumTagMultiPayload();
          break;
        case 1:
          long long v8 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1  = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1)  = v8;
          uint64_t v9 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
          uint64_t v10 = &a1[v9];
          uint64_t v11 = &a2[v9];
          *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
          *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
          *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
          *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
          *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
          *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
          *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
          uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          uint64_t v13 = v12[8];
          unsigned __int8 v14 = &v10[v13];
          uint64_t v15 = &v11[v13];
          uint64_t v16 = type metadata accessor for DispatchTimeInterval();
          uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
          v17(v14, v15, v16);
          v17(&v10[v12[9]], &v11[v12[9]], v16);
          *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
          *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
          *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
          *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
          *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
          *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
          *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100138B04()
{
  uint64_t result = type metadata accessor for DriverEvent.AWDL(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void destroy for DriverEvent.NAN(uint64_t a1)
{
  __int16 v9 = *(_WORD *)(a1 + 360);
  long long v7 = *(_OWORD *)(a1 + 320);
  long long v8 = *(_OWORD *)(a1 + 336);
  long long v5 = *(_OWORD *)(a1 + 288);
  long long v6 = *(_OWORD *)(a1 + 304);
  long long v3 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 272);
  long long v1 = *(_OWORD *)(a1 + 224);
  long long v2 = *(_OWORD *)(a1 + 240);
  sub_10006DC3C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v1,
    *((uint64_t *)&v1 + 1),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    *(void *)(a1 + 352),
    v9,
    SHIBYTE(v9));
}

uint64_t initializeWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *(void *)(a2 + 72);
  uint64_t v50 = *(void *)(a2 + 64);
  uint64_t v47 = *(void *)(a2 + 88);
  uint64_t v48 = *(void *)(a2 + 80);
  uint64_t v45 = *(void *)(a2 + 104);
  uint64_t v46 = *(void *)(a2 + 96);
  uint64_t v43 = *(void *)(a2 + 120);
  uint64_t v44 = *(void *)(a2 + 112);
  uint64_t v41 = *(void *)(a2 + 136);
  uint64_t v42 = *(void *)(a2 + 128);
  uint64_t v40 = *(void *)(a2 + 144);
  uint64_t v13 = *(void *)(a2 + 152);
  uint64_t v14 = *(void *)(a2 + 160);
  uint64_t v15 = *(void *)(a2 + 168);
  uint64_t v16 = *(void *)(a2 + 176);
  uint64_t v17 = *(void *)(a2 + 184);
  uint64_t v18 = *(void *)(a2 + 192);
  uint64_t v19 = *(void *)(a2 + 200);
  uint64_t v20 = *(void *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 224);
  uint64_t v21 = *(void *)(a2 + 216);
  uint64_t v22 = *(void *)(a2 + 232);
  uint64_t v23 = *(void *)(a2 + 240);
  uint64_t v24 = *(void *)(a2 + 248);
  uint64_t v25 = *(void *)(a2 + 256);
  uint64_t v26 = *(void *)(a2 + 264);
  uint64_t v27 = *(void *)(a2 + 272);
  uint64_t v28 = *(void *)(a2 + 280);
  uint64_t v29 = *(void *)(a2 + 288);
  uint64_t v30 = *(void *)(a2 + 296);
  uint64_t v31 = *(void *)(a2 + 304);
  uint64_t v32 = *(void *)(a2 + 312);
  uint64_t v33 = *(void *)(a2 + 320);
  uint64_t v34 = *(void *)(a2 + 328);
  uint64_t v35 = *(void *)(a2 + 336);
  uint64_t v36 = *(void *)(a2 + 344);
  uint64_t v37 = *(void *)(a2 + 352);
  char v38 = *(unsigned char *)(a2 + 360);
  char v39 = *(unsigned char *)(a2 + 361);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_100134598(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v50, v49, v48, v47, v46, v45, v44, v43, v42, v41, v40,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v3,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = v7;
  *(void *)(a1 + 32)  = v8;
  *(void *)(a1 + 40)  = v9;
  *(void *)(a1 + 48)  = v10;
  *(void *)(a1 + 56)  = v11;
  *(void *)(a1 + 64)  = v50;
  *(void *)(a1 + 72)  = v49;
  *(void *)(a1 + 80)  = v48;
  *(void *)(a1 + 88)  = v47;
  *(void *)(a1 + 96)  = v46;
  *(void *)(a1 + 104)  = v45;
  *(void *)(a1 + 112)  = v44;
  *(void *)(a1 + 120)  = v43;
  *(void *)(a1 + 128)  = v42;
  *(void *)(a1 + 136)  = v41;
  *(void *)(a1 + 144)  = v40;
  *(void *)(a1 + 152)  = v13;
  *(void *)(a1 + 160)  = v14;
  *(void *)(a1 + 168)  = v15;
  *(void *)(a1 + 176)  = v16;
  *(void *)(a1 + 184)  = v17;
  *(void *)(a1 + 192)  = v18;
  *(void *)(a1 + 200)  = v19;
  *(void *)(a1 + 208)  = v20;
  *(void *)(a1 + 216)  = v21;
  *(void *)(a1 + 224)  = v3;
  *(void *)(a1 + 232)  = v22;
  *(void *)(a1 + 240)  = v23;
  *(void *)(a1 + 248)  = v24;
  *(void *)(a1 + 256)  = v25;
  *(void *)(a1 + 264)  = v26;
  *(void *)(a1 + 272)  = v27;
  *(void *)(a1 + 280)  = v28;
  *(void *)(a1 + 288)  = v29;
  *(void *)(a1 + 296)  = v30;
  *(void *)(a1 + 304)  = v31;
  *(void *)(a1 + 312)  = v32;
  *(void *)(a1 + 320)  = v33;
  *(void *)(a1 + 328)  = v34;
  *(void *)(a1 + 336)  = v35;
  *(void *)(a1 + 344)  = v36;
  *(void *)(a1 + 352)  = v37;
  *(unsigned char *)(a1 + 360)  = v38;
  *(unsigned char *)(a1 + 361)  = v39;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *(void *)a2;
  uint64_t v78 = *(void *)(a2 + 8);
  uint64_t v75 = *(void *)(a2 + 24);
  uint64_t v76 = *(void *)(a2 + 16);
  uint64_t v73 = *(void *)(a2 + 40);
  uint64_t v74 = *(void *)(a2 + 32);
  unint64_t v71 = *(void *)(a2 + 56);
  uint64_t v72 = *(void *)(a2 + 48);
  uint64_t v69 = *(void *)(a2 + 72);
  uint64_t v70 = *(void *)(a2 + 64);
  uint64_t v67 = *(void *)(a2 + 88);
  uint64_t v68 = *(void *)(a2 + 80);
  uint64_t v65 = *(void *)(a2 + 104);
  uint64_t v66 = *(void *)(a2 + 96);
  uint64_t v63 = *(void *)(a2 + 120);
  uint64_t v64 = *(void *)(a2 + 112);
  uint64_t v61 = *(void *)(a2 + 136);
  uint64_t v62 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 152);
  uint64_t v60 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 168);
  uint64_t v6 = *(void *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 184);
  uint64_t v8 = *(void *)(a2 + 192);
  uint64_t v9 = *(void *)(a2 + 200);
  uint64_t v10 = *(void *)(a2 + 216);
  uint64_t v11 = *(void *)(a2 + 224);
  uint64_t v41 = *(void *)(a2 + 208);
  uint64_t v42 = *(void *)(a2 + 232);
  uint64_t v43 = *(void *)(a2 + 240);
  uint64_t v44 = *(void *)(a2 + 248);
  uint64_t v45 = *(void *)(a2 + 256);
  uint64_t v46 = *(void *)(a2 + 264);
  uint64_t v47 = *(void *)(a2 + 272);
  uint64_t v48 = *(void *)(a2 + 280);
  uint64_t v49 = *(void *)(a2 + 288);
  uint64_t v50 = *(void *)(a2 + 296);
  uint64_t v51 = *(void *)(a2 + 304);
  uint64_t v52 = *(void *)(a2 + 312);
  uint64_t v53 = *(void *)(a2 + 320);
  uint64_t v54 = *(void *)(a2 + 328);
  uint64_t v55 = *(void *)(a2 + 336);
  uint64_t v56 = *(void *)(a2 + 344);
  uint64_t v57 = *(void *)(a2 + 352);
  char v58 = *(unsigned char *)(a2 + 360);
  char v59 = *(unsigned char *)(a2 + 361);
  sub_100134598(*(void *)a2, v78, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v41,
    v10,
    v11,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1  = v77;
  *(void *)(a1 + 8)  = v78;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v76;
  *(void *)(a1 + 24)  = v75;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32)  = v74;
  *(void *)(a1 + 40)  = v73;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48)  = v72;
  *(void *)(a1 + 56)  = v71;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64)  = v70;
  *(void *)(a1 + 72)  = v69;
  *(void *)(a1 + 80)  = v68;
  *(void *)(a1 + 88)  = v67;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96)  = v66;
  *(void *)(a1 + 104)  = v65;
  *(void *)(a1 + 112)  = v64;
  *(void *)(a1 + 120)  = v63;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128)  = v62;
  *(void *)(a1 + 136)  = v61;
  *(void *)(a1 + 144)  = v60;
  *(void *)(a1 + 152)  = v3;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160)  = v4;
  *(void *)(a1 + 168)  = v5;
  *(void *)(a1 + 176)  = v6;
  *(void *)(a1 + 184)  = v7;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 192)  = v8;
  *(void *)(a1 + 200)  = v9;
  *(void *)(a1 + 208)  = v41;
  *(void *)(a1 + 216)  = v10;
  long long v30 = *(_OWORD *)(a1 + 224);
  long long v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 224)  = v11;
  *(void *)(a1 + 232)  = v42;
  *(void *)(a1 + 240)  = v43;
  *(void *)(a1 + 248)  = v44;
  long long v32 = *(_OWORD *)(a1 + 256);
  long long v33 = *(_OWORD *)(a1 + 272);
  *(void *)(a1 + 256)  = v45;
  *(void *)(a1 + 264)  = v46;
  *(void *)(a1 + 272)  = v47;
  *(void *)(a1 + 280)  = v48;
  long long v34 = *(_OWORD *)(a1 + 288);
  long long v35 = *(_OWORD *)(a1 + 304);
  *(void *)(a1 + 288)  = v49;
  *(void *)(a1 + 296)  = v50;
  *(void *)(a1 + 304)  = v51;
  *(void *)(a1 + 312)  = v52;
  long long v36 = *(_OWORD *)(a1 + 320);
  long long v37 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320)  = v53;
  *(void *)(a1 + 328)  = v54;
  *(void *)(a1 + 336)  = v55;
  *(void *)(a1 + 344)  = v56;
  uint64_t v38 = *(void *)(a1 + 352);
  *(void *)(a1 + 352)  = v57;
  __int16 v39 = *(_WORD *)(a1 + 360);
  *(unsigned char *)(a1 + 360)  = v58;
  *(unsigned char *)(a1 + 361)  = v59;
  sub_10006DC3C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    SBYTE8(v27),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    v39,
    SHIBYTE(v39));
  return a1;
}

void *initializeWithTake for DriverEvent.NAN(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x16AuLL);
}

uint64_t assignWithTake for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 352);
  __int16 v5 = *(_WORD *)(a2 + 360);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 128);
  long long v19 = *(_OWORD *)(a1 + 144);
  long long v20 = *(_OWORD *)(a1 + 160);
  long long v21 = *(_OWORD *)(a1 + 176);
  long long v22 = *(_OWORD *)(a1 + 192);
  long long v23 = *(_OWORD *)(a1 + 208);
  long long v24 = *(_OWORD *)(a1 + 224);
  long long v25 = *(_OWORD *)(a1 + 240);
  long long v26 = *(_OWORD *)(a1 + 256);
  long long v27 = *(_OWORD *)(a1 + 272);
  long long v28 = *(_OWORD *)(a1 + 288);
  long long v29 = *(_OWORD *)(a1 + 304);
  long long v30 = *(_OWORD *)(a1 + 320);
  long long v31 = *(_OWORD *)(a1 + 336);
  uint64_t v32 = *(void *)(a1 + 352);
  __int16 v33 = *(_WORD *)(a1 + 360);
  long long v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v34;
  long long v35 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v35;
  long long v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v36;
  long long v37 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v37;
  long long v38 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v38;
  long long v39 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v39;
  long long v40 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208)  = v40;
  long long v41 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224)  = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240)  = v41;
  long long v42 = *(_OWORD *)(a2 + 272);
  long long v43 = *(_OWORD *)(a2 + 288);
  long long v44 = *(_OWORD *)(a2 + 304);
  long long v45 = *(_OWORD *)(a2 + 320);
  long long v46 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 256)  = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272)  = v42;
  *(_OWORD *)(a1 + 288)  = v43;
  *(_OWORD *)(a1 + 304)  = v44;
  *(_OWORD *)(a1 + 320)  = v45;
  *(_OWORD *)(a1 + 336)  = v46;
  *(void *)(a1 + 352)  = v4;
  *(_WORD *)(a1 + 360)  = v5;
  sub_10006DC3C(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    SBYTE8(v21),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    v33,
    SHIBYTE(v33));
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.NAN(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEB && *(unsigned char *)(a1 + 362)) {
    return (*(_DWORD *)a1 + 235);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 361);
  if (v3 <= 0x15) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.NAN(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 360)  = 0;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)uint64_t result = a2 - 235;
    if (a3 >= 0xEB) {
      *(unsigned char *)(result + 362)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xEB) {
      *(unsigned char *)(result + 362)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 361)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001394FC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 361)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.NAN()
{
  return &type metadata for DriverEvent.NAN;
}

char *initializeBufferWithCopyOfBuffer for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1  = *a2;
        uint64_t v7 = *((void *)a2 + 1);
        uint64_t v8 = *((void *)a2 + 2);
        uint64_t v9 = *((void *)a2 + 3);
        sub_10006EAC4(v7);
        *((void *)a1 + 1)  = v7;
        *((void *)a1 + 2)  = v8;
        *((void *)a1 + 3)  = v9;
        uint64_t v10 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_DWORD *)uint64_t v11 = *(_DWORD *)&a2[v10];
        *((_WORD *)v11 + 2)  = *(_WORD *)&a2[v10 + 4];
        *(_DWORD *)(v11 + 6)  = *(_DWORD *)&a2[v10 + 6];
        *((_WORD *)v11 + 5)  = *(_WORD *)&a2[v10 + 10];
        *((_DWORD *)v11 + 3)  = *(_DWORD *)&a2[v10 + 12];
        *((_WORD *)v11 + 8)  = *(_WORD *)&a2[v10 + 16];
        *((_DWORD *)v11 + 5)  = *(_DWORD *)&a2[v10 + 20];
        unint64_t v13 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        uint64_t v14 = v13[8];
        long long v15 = &v11[v14];
        long long v16 = &v12[v14];
        uint64_t v17 = type metadata accessor for DispatchTimeInterval();
        long long v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        v18(v15, v16, v17);
        v18(&v11[v13[9]], &v12[v13[9]], v17);
        *(_DWORD *)&v11[v13[10]]  = *(_DWORD *)&v12[v13[10]];
        *(_DWORD *)&v11[v13[11]]  = *(_DWORD *)&v12[v13[11]];
        *(void *)&v11[v13[12]]  = *(void *)&v12[v13[12]];
        *(_DWORD *)&v11[v13[13]]  = *(_DWORD *)&v12[v13[13]];
        *(void *)&v11[v13[14]]  = *(void *)&v12[v13[14]];
        *(_DWORD *)&v11[v13[15]]  = *(_DWORD *)&v12[v13[15]];
        *(void *)&v11[v13[16]]  = *(void *)&v12[v13[16]];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        long long v21 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v21;
        *((void *)a1 + 4)  = *((void *)a2 + 4);
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        a1[42]  = a2[42];
        *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
        *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
        a1[52]  = a2[52];
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *(void *)(a1 + 60)  = *(void *)(a2 + 60);
        *((_DWORD *)a1 + 17)  = *((_DWORD *)a2 + 17);
        a1[72]  = a2[72];
        uint64_t v22 = *((void *)a2 + 11);
        *((void *)a1 + 10)  = *((void *)a2 + 10);
        *((void *)a1 + 11)  = v22;
        uint64_t v24 = *((void *)a2 + 12);
        uint64_t v23 = *((void *)a2 + 13);
        *((void *)a1 + 12)  = v24;
        *((void *)a1 + 13)  = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v25 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v25;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        long long v26 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v26;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        long long v27 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        uint64_t v28 = v27[20];
        long long v29 = &a1[v28];
        long long v30 = &a2[v28];
        uint64_t v31 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        *(void *)&a1[v27[21]]  = *(void *)&a2[v27[21]];
        *(void *)&a1[v27[22]]  = *(void *)&a2[v27[22]];
        *(void *)&a1[v27[23]]  = *(void *)&a2[v27[23]];
        *(void *)&a1[v27[24]]  = *(void *)&a2[v27[24]];
        *(void *)&a1[v27[25]]  = *(void *)&a2[v27[25]];
        *(void *)&a1[v27[26]]  = *(void *)&a2[v27[26]];
        *(void *)&a1[v27[27]]  = *(void *)&a2[v27[27]];
        *(void *)&a1[v27[28]]  = *(void *)&a2[v27[28]];
        *(_WORD *)&a1[v27[29]]  = *(_WORD *)&a2[v27[29]];
        a1[v27[30]]  = a2[v27[30]];
        a1[v27[31]]  = a2[v27[31]];
        a1[v27[32]]  = a2[v27[32]];
        a1[v27[33]]  = a2[v27[33]];
        a1[v27[34]]  = a2[v27[34]];
        a1[v27[35]]  = a2[v27[35]];
        uint64_t v32 = v27[36];
        __int16 v33 = &a1[v32];
        long long v34 = &a2[v32];
        uint64_t v64 = *((void *)v34 + 1);
        *(void *)__int16 v33 = *(void *)v34;
        *((void *)v33 + 1)  = v64;
        a1[v27[37]]  = a2[v27[37]];
        *(void *)&a1[v27[38]]  = *(void *)&a2[v27[38]];
        *(void *)&a1[v27[39]]  = *(void *)&a2[v27[39]];
        *(void *)&a1[v27[40]]  = *(void *)&a2[v27[40]];
        *(void *)&a1[v27[41]]  = *(void *)&a2[v27[41]];
        *(void *)&a1[v27[42]]  = *(void *)&a2[v27[42]];
        *(void *)&a1[v27[43]]  = *(void *)&a2[v27[43]];
        uint64_t v35 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
        long long v36 = &a1[v35];
        long long v37 = &a2[v35];
        long long v38 = *((_OWORD *)v37 + 11);
        *((_OWORD *)v36 + 10)  = *((_OWORD *)v37 + 10);
        *((_OWORD *)v36 + 11)  = v38;
        *((_OWORD *)v36 + 12)  = *((_OWORD *)v37 + 12);
        long long v39 = *((_OWORD *)v37 + 7);
        *((_OWORD *)v36 + 6)  = *((_OWORD *)v37 + 6);
        *((_OWORD *)v36 + 7)  = v39;
        long long v40 = *((_OWORD *)v37 + 9);
        *((_OWORD *)v36 + 8)  = *((_OWORD *)v37 + 8);
        *((_OWORD *)v36 + 9)  = v40;
        long long v41 = *((_OWORD *)v37 + 3);
        *((_OWORD *)v36 + 2)  = *((_OWORD *)v37 + 2);
        *((_OWORD *)v36 + 3)  = v41;
        long long v42 = *((_OWORD *)v37 + 5);
        *((_OWORD *)v36 + 4)  = *((_OWORD *)v37 + 4);
        *((_OWORD *)v36 + 5)  = v42;
        long long v43 = *((_OWORD *)v37 + 1);
        *(_OWORD *)long long v36 = *(_OWORD *)v37;
        *((_OWORD *)v36 + 1)  = v43;
        uint64_t v44 = *((void *)v37 + 27);
        *((void *)v36 + 26)  = *((void *)v37 + 26);
        *((void *)v36 + 27)  = v44;
        uint64_t v45 = *((void *)v37 + 29);
        *((void *)v36 + 28)  = *((void *)v37 + 28);
        *((void *)v36 + 29)  = v45;
        uint64_t v46 = *((void *)v37 + 31);
        *((void *)v36 + 30)  = *((void *)v37 + 30);
        *((void *)v36 + 31)  = v46;
        uint64_t v47 = *((void *)v37 + 33);
        *((void *)v36 + 32)  = *((void *)v37 + 32);
        *((void *)v36 + 33)  = v47;
        uint64_t v48 = *((void *)v37 + 35);
        *((void *)v36 + 34)  = *((void *)v37 + 34);
        *((void *)v36 + 35)  = v48;
        uint64_t v49 = *((void *)v37 + 37);
        *((void *)v36 + 36)  = *((void *)v37 + 36);
        *((void *)v36 + 37)  = v49;
        uint64_t v50 = *((void *)v37 + 39);
        *((void *)v36 + 38)  = *((void *)v37 + 38);
        *((void *)v36 + 39)  = v50;
        uint64_t v51 = *((void *)v37 + 41);
        *((void *)v36 + 40)  = *((void *)v37 + 40);
        *((void *)v36 + 41)  = v51;
        uint64_t v62 = *((void *)v37 + 43);
        uint64_t v63 = *((void *)v37 + 44);
        *((void *)v36 + 42)  = *((void *)v37 + 42);
        *((void *)v36 + 43)  = v62;
        *((void *)v36 + 44)  = v63;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v52 = *(void *)a2;
        uint64_t v53 = *((void *)a2 + 1);
        uint64_t v54 = *((void *)a2 + 2);
        uint64_t v55 = *((void *)a2 + 3);
        char v56 = a2[32];
        sub_10006B960(v52, v53, v54, v55, v56);
        *(void *)a1  = v52;
        *((void *)a1 + 1)  = v53;
        *((void *)a1 + 2)  = v54;
        *((void *)a1 + 3)  = v55;
        a1[32]  = v56;
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v57 = *(void **)a2;
        *(void *)a1  = *(void *)a2;
        a1[8]  = a2[8];
        id v58 = v57;
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v59 = type metadata accessor for DispatchTimeInterval();
        uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
        v60(a1, a2, v59);
        uint64_t v61 = type metadata accessor for AWDLIdleActivity(0);
        v60(&a1[*(int *)(v61 + 20)], &a2[*(int *)(v61 + 20)], v59);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for DriverEvent.AWDL(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10006DE90(*(void *)(a1 + 8));
      uint64_t v2 = a1 + *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
      uint64_t v3 = type metadata accessor for AWDLActionFrame.Header(0);
      uint64_t v4 = v2 + *(int *)(v3 + 32);
      uint64_t v5 = type metadata accessor for DispatchTimeInterval();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(v4, v5);
      v6(v2 + *(int *)(v3 + 36), v5);
      goto LABEL_5;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      uint64_t v7 = a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
      uint64_t v8 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      swift_bridgeObjectRelease();
      type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    case 6u:
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      char v13 = *(unsigned char *)(a1 + 32);
      sub_10006B9A0(v9, v10, v11, v12, v13);
      break;
    case 8u:
      uint64_t v14 = *(void **)a1;

      break;
    case 9u:
      uint64_t v15 = type metadata accessor for DispatchTimeInterval();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v17)((void *)(v15 - 8), a1, v15);
      uint64_t v16 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);
      v17(v16, v15);
      break;
    default:
      return;
  }
}

char *initializeWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *a1  = *a2;
      uint64_t v6 = *((void *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 2);
      uint64_t v8 = *((void *)a2 + 3);
      sub_10006EAC4(v6);
      *((void *)a1 + 1)  = v6;
      *((void *)a1 + 2)  = v7;
      *((void *)a1 + 3)  = v8;
      uint64_t v9 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      *(_DWORD *)uint64_t v10 = *(_DWORD *)&a2[v9];
      *((_WORD *)v10 + 2)  = *(_WORD *)&a2[v9 + 4];
      *(_DWORD *)(v10 + 6)  = *(_DWORD *)&a2[v9 + 6];
      *((_WORD *)v10 + 5)  = *(_WORD *)&a2[v9 + 10];
      *((_DWORD *)v10 + 3)  = *(_DWORD *)&a2[v9 + 12];
      *((_WORD *)v10 + 8)  = *(_WORD *)&a2[v9 + 16];
      *((_DWORD *)v10 + 5)  = *(_DWORD *)&a2[v9 + 20];
      uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
      uint64_t v13 = v12[8];
      uint64_t v14 = &v10[v13];
      uint64_t v15 = &v11[v13];
      uint64_t v16 = type metadata accessor for DispatchTimeInterval();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v14, v15, v16);
      v17(&v10[v12[9]], &v11[v12[9]], v16);
      *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
      *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
      *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
      *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
      *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
      *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
      *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 2u:
      long long v18 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1)  = v18;
      *((void *)a1 + 4)  = *((void *)a2 + 4);
      *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
      a1[42]  = a2[42];
      *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
      *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
      a1[52]  = a2[52];
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *(void *)(a1 + 60)  = *(void *)(a2 + 60);
      *((_DWORD *)a1 + 17)  = *((_DWORD *)a2 + 17);
      a1[72]  = a2[72];
      uint64_t v19 = *((void *)a2 + 11);
      *((void *)a1 + 10)  = *((void *)a2 + 10);
      *((void *)a1 + 11)  = v19;
      uint64_t v21 = *((void *)a2 + 12);
      uint64_t v20 = *((void *)a2 + 13);
      *((void *)a1 + 12)  = v21;
      *((void *)a1 + 13)  = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
      int v22 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12)  = v22;
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
      long long v23 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5)  = v23;
      *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
      a1[112]  = a2[112];
      uint64_t v24 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
      uint64_t v25 = v24[20];
      long long v26 = &a1[v25];
      long long v27 = &a2[v25];
      uint64_t v28 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      *(void *)&a1[v24[21]]  = *(void *)&a2[v24[21]];
      *(void *)&a1[v24[22]]  = *(void *)&a2[v24[22]];
      *(void *)&a1[v24[23]]  = *(void *)&a2[v24[23]];
      *(void *)&a1[v24[24]]  = *(void *)&a2[v24[24]];
      *(void *)&a1[v24[25]]  = *(void *)&a2[v24[25]];
      *(void *)&a1[v24[26]]  = *(void *)&a2[v24[26]];
      *(void *)&a1[v24[27]]  = *(void *)&a2[v24[27]];
      *(void *)&a1[v24[28]]  = *(void *)&a2[v24[28]];
      *(_WORD *)&a1[v24[29]]  = *(_WORD *)&a2[v24[29]];
      a1[v24[30]]  = a2[v24[30]];
      a1[v24[31]]  = a2[v24[31]];
      a1[v24[32]]  = a2[v24[32]];
      a1[v24[33]]  = a2[v24[33]];
      a1[v24[34]]  = a2[v24[34]];
      a1[v24[35]]  = a2[v24[35]];
      uint64_t v29 = v24[36];
      long long v30 = &a1[v29];
      uint64_t v31 = &a2[v29];
      uint64_t v62 = *((void *)v31 + 1);
      *(void *)long long v30 = *(void *)v31;
      *((void *)v30 + 1)  = v62;
      a1[v24[37]]  = a2[v24[37]];
      *(void *)&a1[v24[38]]  = *(void *)&a2[v24[38]];
      *(void *)&a1[v24[39]]  = *(void *)&a2[v24[39]];
      *(void *)&a1[v24[40]]  = *(void *)&a2[v24[40]];
      *(void *)&a1[v24[41]]  = *(void *)&a2[v24[41]];
      *(void *)&a1[v24[42]]  = *(void *)&a2[v24[42]];
      *(void *)&a1[v24[43]]  = *(void *)&a2[v24[43]];
      uint64_t v32 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
      __int16 v33 = &a1[v32];
      long long v34 = &a2[v32];
      long long v35 = *((_OWORD *)v34 + 11);
      *((_OWORD *)v33 + 10)  = *((_OWORD *)v34 + 10);
      *((_OWORD *)v33 + 11)  = v35;
      *((_OWORD *)v33 + 12)  = *((_OWORD *)v34 + 12);
      long long v36 = *((_OWORD *)v34 + 7);
      *((_OWORD *)v33 + 6)  = *((_OWORD *)v34 + 6);
      *((_OWORD *)v33 + 7)  = v36;
      long long v37 = *((_OWORD *)v34 + 9);
      *((_OWORD *)v33 + 8)  = *((_OWORD *)v34 + 8);
      *((_OWORD *)v33 + 9)  = v37;
      long long v38 = *((_OWORD *)v34 + 3);
      *((_OWORD *)v33 + 2)  = *((_OWORD *)v34 + 2);
      *((_OWORD *)v33 + 3)  = v38;
      long long v39 = *((_OWORD *)v34 + 5);
      *((_OWORD *)v33 + 4)  = *((_OWORD *)v34 + 4);
      *((_OWORD *)v33 + 5)  = v39;
      long long v40 = *((_OWORD *)v34 + 1);
      *(_OWORD *)__int16 v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1)  = v40;
      uint64_t v41 = *((void *)v34 + 27);
      *((void *)v33 + 26)  = *((void *)v34 + 26);
      *((void *)v33 + 27)  = v41;
      uint64_t v42 = *((void *)v34 + 29);
      *((void *)v33 + 28)  = *((void *)v34 + 28);
      *((void *)v33 + 29)  = v42;
      uint64_t v43 = *((void *)v34 + 31);
      *((void *)v33 + 30)  = *((void *)v34 + 30);
      *((void *)v33 + 31)  = v43;
      uint64_t v44 = *((void *)v34 + 33);
      *((void *)v33 + 32)  = *((void *)v34 + 32);
      *((void *)v33 + 33)  = v44;
      uint64_t v45 = *((void *)v34 + 35);
      *((void *)v33 + 34)  = *((void *)v34 + 34);
      *((void *)v33 + 35)  = v45;
      uint64_t v46 = *((void *)v34 + 37);
      *((void *)v33 + 36)  = *((void *)v34 + 36);
      *((void *)v33 + 37)  = v46;
      uint64_t v47 = *((void *)v34 + 39);
      *((void *)v33 + 38)  = *((void *)v34 + 38);
      *((void *)v33 + 39)  = v47;
      uint64_t v48 = *((void *)v34 + 41);
      *((void *)v33 + 40)  = *((void *)v34 + 40);
      *((void *)v33 + 41)  = v48;
      uint64_t v60 = *((void *)v34 + 43);
      uint64_t v61 = *((void *)v34 + 44);
      *((void *)v33 + 42)  = *((void *)v34 + 42);
      *((void *)v33 + 43)  = v60;
      *((void *)v33 + 44)  = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 6u:
      uint64_t v49 = *(void *)a2;
      uint64_t v50 = *((void *)a2 + 1);
      uint64_t v51 = *((void *)a2 + 2);
      uint64_t v52 = *((void *)a2 + 3);
      char v53 = a2[32];
      sub_10006B960(v49, v50, v51, v52, v53);
      *(void *)a1  = v49;
      *((void *)a1 + 1)  = v50;
      *((void *)a1 + 2)  = v51;
      *((void *)a1 + 3)  = v52;
      a1[32]  = v53;
      goto LABEL_9;
    case 8u:
      uint64_t v54 = *(void **)a2;
      *(void *)a1  = *(void *)a2;
      a1[8]  = a2[8];
      id v55 = v54;
      goto LABEL_9;
    case 9u:
      uint64_t v56 = type metadata accessor for DispatchTimeInterval();
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
      v57(a1, a2, v56);
      uint64_t v58 = type metadata accessor for AWDLIdleActivity(0);
      v57(&a1[*(int *)(v58 + 20)], &a2[*(int *)(v58 + 20)], v56);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001330A4((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1  = *a2;
        uint64_t v6 = *((void *)a2 + 1);
        uint64_t v7 = *((void *)a2 + 2);
        uint64_t v8 = *((void *)a2 + 3);
        sub_10006EAC4(v6);
        *((void *)a1 + 1)  = v6;
        *((void *)a1 + 2)  = v7;
        *((void *)a1 + 3)  = v8;
        uint64_t v9 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        LODWORD(v9)  = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
        *(_DWORD *)uint64_t v10 = v9;
        LOWORD(v9)  = *((_WORD *)v11 + 5);
        *(_DWORD *)(v10 + 6)  = *(_DWORD *)(v11 + 6);
        *((_WORD *)v10 + 5)  = v9;
        LOWORD(v9)  = *((_WORD *)v11 + 8);
        *((_DWORD *)v10 + 3)  = *((_DWORD *)v11 + 3);
        *((_WORD *)v10 + 8)  = v9;
        *((_DWORD *)v10 + 5)  = *((_DWORD *)v11 + 5);
        uint64_t v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        uint64_t v13 = v12[8];
        uint64_t v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        uint64_t v16 = type metadata accessor for DispatchTimeInterval();
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]]  = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]]  = *(_DWORD *)&v11[v12[11]];
        *(void *)&v10[v12[12]]  = *(void *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]]  = *(_DWORD *)&v11[v12[13]];
        *(void *)&v10[v12[14]]  = *(void *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]]  = *(_DWORD *)&v11[v12[15]];
        *(void *)&v10[v12[16]]  = *(void *)&v11[v12[16]];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 2u:
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
        *((_DWORD *)a1 + 6)  = *((_DWORD *)a2 + 6);
        *((_DWORD *)a1 + 7)  = *((_DWORD *)a2 + 7);
        *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
        *((_WORD *)a1 + 17)  = *((_WORD *)a2 + 17);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_WORD *)a1 + 19)  = *((_WORD *)a2 + 19);
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        a1[42]  = a2[42];
        a1[43]  = a2[43];
        a1[44]  = a2[44];
        *((_DWORD *)a1 + 12)  = *((_DWORD *)a2 + 12);
        a1[52]  = a2[52];
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        a1[60]  = a2[60];
        a1[61]  = a2[61];
        a1[62]  = a2[62];
        a1[63]  = a2[63];
        a1[64]  = a2[64];
        a1[65]  = a2[65];
        a1[66]  = a2[66];
        a1[67]  = a2[67];
        a1[68]  = a2[68];
        a1[69]  = a2[69];
        a1[70]  = a2[70];
        a1[71]  = a2[71];
        a1[72]  = a2[72];
        *((void *)a1 + 10)  = *((void *)a2 + 10);
        *((void *)a1 + 11)  = *((void *)a2 + 11);
        *((void *)a1 + 12)  = *((void *)a2 + 12);
        *((void *)a1 + 13)  = *((void *)a2 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        int v18 = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 8)  = v18;
        int v19 = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        *((_DWORD *)a1 + 10)  = v19;
        int v20 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v20;
        int v21 = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        *((_DWORD *)a1 + 14)  = v21;
        *((void *)a1 + 8)  = *((void *)a2 + 8);
        *((void *)a1 + 9)  = *((void *)a2 + 9);
        *((void *)a1 + 10)  = *((void *)a2 + 10);
        *((void *)a1 + 11)  = *((void *)a2 + 11);
        *((void *)a1 + 12)  = *((void *)a2 + 12);
        *((void *)a1 + 13)  = *((void *)a2 + 13);
        a1[112]  = a2[112];
        int v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        uint64_t v23 = v22[20];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        *(void *)&a1[v22[21]]  = *(void *)&a2[v22[21]];
        *(void *)&a1[v22[22]]  = *(void *)&a2[v22[22]];
        *(void *)&a1[v22[23]]  = *(void *)&a2[v22[23]];
        *(void *)&a1[v22[24]]  = *(void *)&a2[v22[24]];
        *(void *)&a1[v22[25]]  = *(void *)&a2[v22[25]];
        *(void *)&a1[v22[26]]  = *(void *)&a2[v22[26]];
        *(void *)&a1[v22[27]]  = *(void *)&a2[v22[27]];
        *(void *)&a1[v22[28]]  = *(void *)&a2[v22[28]];
        *(_WORD *)&a1[v22[29]]  = *(_WORD *)&a2[v22[29]];
        a1[v22[30]]  = a2[v22[30]];
        a1[v22[31]]  = a2[v22[31]];
        a1[v22[32]]  = a2[v22[32]];
        a1[v22[33]]  = a2[v22[33]];
        a1[v22[34]]  = a2[v22[34]];
        a1[v22[35]]  = a2[v22[35]];
        uint64_t v27 = v22[36];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        *(void *)uint64_t v28 = *(void *)v29;
        *((void *)v28 + 1)  = *((void *)v29 + 1);
        a1[v22[37]]  = a2[v22[37]];
        *(void *)&a1[v22[38]]  = *(void *)&a2[v22[38]];
        *(void *)&a1[v22[39]]  = *(void *)&a2[v22[39]];
        *(void *)&a1[v22[40]]  = *(void *)&a2[v22[40]];
        *(void *)&a1[v22[41]]  = *(void *)&a2[v22[41]];
        *(void *)&a1[v22[42]]  = *(void *)&a2[v22[42]];
        *(void *)&a1[v22[43]]  = *(void *)&a2[v22[43]];
        uint64_t v30 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
        uint64_t v31 = &a1[v30];
        uint64_t v32 = &a2[v30];
        uint64_t v33 = *((void *)v32 + 26);
        long long v35 = *((_OWORD *)v32 + 11);
        long long v34 = *((_OWORD *)v32 + 12);
        *((_OWORD *)v31 + 10)  = *((_OWORD *)v32 + 10);
        *((_OWORD *)v31 + 11)  = v35;
        *((_OWORD *)v31 + 12)  = v34;
        *((void *)v31 + 26)  = v33;
        long long v37 = *((_OWORD *)v32 + 8);
        long long v36 = *((_OWORD *)v32 + 9);
        long long v38 = *((_OWORD *)v32 + 7);
        *((_OWORD *)v31 + 6)  = *((_OWORD *)v32 + 6);
        *((_OWORD *)v31 + 7)  = v38;
        *((_OWORD *)v31 + 8)  = v37;
        *((_OWORD *)v31 + 9)  = v36;
        long long v40 = *((_OWORD *)v32 + 4);
        long long v39 = *((_OWORD *)v32 + 5);
        long long v41 = *((_OWORD *)v32 + 3);
        *((_OWORD *)v31 + 2)  = *((_OWORD *)v32 + 2);
        *((_OWORD *)v31 + 3)  = v41;
        *((_OWORD *)v31 + 4)  = v40;
        *((_OWORD *)v31 + 5)  = v39;
        long long v42 = *((_OWORD *)v32 + 1);
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1)  = v42;
        *((void *)v31 + 27)  = *((void *)v32 + 27);
        *((void *)v31 + 28)  = *((void *)v32 + 28);
        *((void *)v31 + 29)  = *((void *)v32 + 29);
        *((void *)v31 + 30)  = *((void *)v32 + 30);
        *((void *)v31 + 31)  = *((void *)v32 + 31);
        *((void *)v31 + 32)  = *((void *)v32 + 32);
        *((void *)v31 + 33)  = *((void *)v32 + 33);
        *((void *)v31 + 34)  = *((void *)v32 + 34);
        *((void *)v31 + 35)  = *((void *)v32 + 35);
        *((void *)v31 + 36)  = *((void *)v32 + 36);
        *((void *)v31 + 37)  = *((void *)v32 + 37);
        *((void *)v31 + 38)  = *((void *)v32 + 38);
        *((void *)v31 + 39)  = *((void *)v32 + 39);
        *((void *)v31 + 40)  = *((void *)v32 + 40);
        *((void *)v31 + 41)  = *((void *)v32 + 41);
        *((void *)v31 + 42)  = *((void *)v32 + 42);
        *((void *)v31 + 43)  = *((void *)v32 + 43);
        *((void *)v31 + 44)  = *((void *)v32 + 44);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 6u:
        uint64_t v43 = *(void *)a2;
        uint64_t v44 = *((void *)a2 + 1);
        uint64_t v45 = *((void *)a2 + 2);
        uint64_t v46 = *((void *)a2 + 3);
        char v47 = a2[32];
        sub_10006B960(v43, v44, v45, v46, v47);
        *(void *)a1  = v43;
        *((void *)a1 + 1)  = v44;
        *((void *)a1 + 2)  = v45;
        *((void *)a1 + 3)  = v46;
        a1[32]  = v47;
        goto LABEL_10;
      case 8u:
        uint64_t v48 = *(void **)a2;
        *(void *)a1  = *(void *)a2;
        a1[8]  = a2[8];
        id v49 = v48;
        goto LABEL_10;
      case 9u:
        uint64_t v50 = type metadata accessor for DispatchTimeInterval();
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16);
        v51(a1, a2, v50);
        uint64_t v52 = type metadata accessor for AWDLIdleActivity(0);
        v51(&a1[*(int *)(v52 + 20)], &a2[*(int *)(v52 + 20)], v50);
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 9:
      uint64_t v17 = type metadata accessor for DispatchTimeInterval();
      int v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
      v18(a1, a2, v17);
      uint64_t v19 = type metadata accessor for AWDLIdleActivity(0);
      v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
      swift_storeEnumTagMultiPayload();
      break;
    case 3:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
      int v20 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12)  = v20;
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
      long long v21 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5)  = v21;
      *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
      a1[112]  = a2[112];
      int v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
      uint64_t v23 = v22[20];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      uint64_t v26 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      *(void *)&a1[v22[21]]  = *(void *)&a2[v22[21]];
      *(void *)&a1[v22[22]]  = *(void *)&a2[v22[22]];
      *(void *)&a1[v22[23]]  = *(void *)&a2[v22[23]];
      *(void *)&a1[v22[24]]  = *(void *)&a2[v22[24]];
      *(void *)&a1[v22[25]]  = *(void *)&a2[v22[25]];
      *(void *)&a1[v22[26]]  = *(void *)&a2[v22[26]];
      *(void *)&a1[v22[27]]  = *(void *)&a2[v22[27]];
      *(void *)&a1[v22[28]]  = *(void *)&a2[v22[28]];
      *(_WORD *)&a1[v22[29]]  = *(_WORD *)&a2[v22[29]];
      a1[v22[30]]  = a2[v22[30]];
      a1[v22[31]]  = a2[v22[31]];
      a1[v22[32]]  = a2[v22[32]];
      a1[v22[33]]  = a2[v22[33]];
      a1[v22[34]]  = a2[v22[34]];
      a1[v22[35]]  = a2[v22[35]];
      *(_OWORD *)&a1[v22[36]]  = *(_OWORD *)&a2[v22[36]];
      a1[v22[37]]  = a2[v22[37]];
      *(void *)&a1[v22[38]]  = *(void *)&a2[v22[38]];
      *(void *)&a1[v22[39]]  = *(void *)&a2[v22[39]];
      *(void *)&a1[v22[40]]  = *(void *)&a2[v22[40]];
      *(void *)&a1[v22[41]]  = *(void *)&a2[v22[41]];
      *(void *)&a1[v22[42]]  = *(void *)&a2[v22[42]];
      *(void *)&a1[v22[43]]  = *(void *)&a2[v22[43]];
      uint64_t v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
      memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
      swift_storeEnumTagMultiPayload();
      break;
    case 1:
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1)  = v7;
      uint64_t v8 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      *(_DWORD *)uint64_t v9 = *(_DWORD *)&a2[v8];
      *((_WORD *)v9 + 2)  = *(_WORD *)&a2[v8 + 4];
      *(_DWORD *)(v9 + 6)  = *(_DWORD *)&a2[v8 + 6];
      *((_WORD *)v9 + 5)  = *(_WORD *)&a2[v8 + 10];
      *((_DWORD *)v9 + 3)  = *(_DWORD *)&a2[v8 + 12];
      *((_WORD *)v9 + 8)  = *(_WORD *)&a2[v8 + 16];
      *((_DWORD *)v9 + 5)  = *(_DWORD *)&a2[v8 + 20];
      uint64_t v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
      uint64_t v12 = v11[8];
      uint64_t v13 = &v9[v12];
      uint64_t v14 = &v10[v12];
      uint64_t v15 = type metadata accessor for DispatchTimeInterval();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v13, v14, v15);
      v16(&v9[v11[9]], &v10[v11[9]], v15);
      *(_DWORD *)&v9[v11[10]]  = *(_DWORD *)&v10[v11[10]];
      *(_DWORD *)&v9[v11[11]]  = *(_DWORD *)&v10[v11[11]];
      *(void *)&v9[v11[12]]  = *(void *)&v10[v11[12]];
      *(_DWORD *)&v9[v11[13]]  = *(_DWORD *)&v10[v11[13]];
      *(void *)&v9[v11[14]]  = *(void *)&v10[v11[14]];
      *(_DWORD *)&v9[v11[15]]  = *(_DWORD *)&v10[v11[15]];
      *(void *)&v9[v11[16]]  = *(void *)&v10[v11[16]];
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001330A4((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 9:
        uint64_t v17 = type metadata accessor for DispatchTimeInterval();
        int v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
        v18(a1, a2, v17);
        uint64_t v19 = type metadata accessor for AWDLIdleActivity(0);
        v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
        swift_storeEnumTagMultiPayload();
        break;
      case 3:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        *((_DWORD *)a1 + 8)  = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18)  = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10)  = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22)  = *((_WORD *)a2 + 22);
        int v20 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26)  = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12)  = v20;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30)  = *((_WORD *)a2 + 30);
        long long v21 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4)  = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5)  = v21;
        *((_OWORD *)a1 + 6)  = *((_OWORD *)a2 + 6);
        a1[112]  = a2[112];
        int v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        uint64_t v23 = v22[20];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        *(void *)&a1[v22[21]]  = *(void *)&a2[v22[21]];
        *(void *)&a1[v22[22]]  = *(void *)&a2[v22[22]];
        *(void *)&a1[v22[23]]  = *(void *)&a2[v22[23]];
        *(void *)&a1[v22[24]]  = *(void *)&a2[v22[24]];
        *(void *)&a1[v22[25]]  = *(void *)&a2[v22[25]];
        *(void *)&a1[v22[26]]  = *(void *)&a2[v22[26]];
        *(void *)&a1[v22[27]]  = *(void *)&a2[v22[27]];
        *(void *)&a1[v22[28]]  = *(void *)&a2[v22[28]];
        *(_WORD *)&a1[v22[29]]  = *(_WORD *)&a2[v22[29]];
        a1[v22[30]]  = a2[v22[30]];
        a1[v22[31]]  = a2[v22[31]];
        a1[v22[32]]  = a2[v22[32]];
        a1[v22[33]]  = a2[v22[33]];
        a1[v22[34]]  = a2[v22[34]];
        a1[v22[35]]  = a2[v22[35]];
        *(_OWORD *)&a1[v22[36]]  = *(_OWORD *)&a2[v22[36]];
        a1[v22[37]]  = a2[v22[37]];
        *(void *)&a1[v22[38]]  = *(void *)&a2[v22[38]];
        *(void *)&a1[v22[39]]  = *(void *)&a2[v22[39]];
        *(void *)&a1[v22[40]]  = *(void *)&a2[v22[40]];
        *(void *)&a1[v22[41]]  = *(void *)&a2[v22[41]];
        *(void *)&a1[v22[42]]  = *(void *)&a2[v22[42]];
        *(void *)&a1[v22[43]]  = *(void *)&a2[v22[43]];
        uint64_t v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
        memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload();
        break;
      case 1:
        long long v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v7;
        uint64_t v8 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        *(_DWORD *)uint64_t v9 = *(_DWORD *)&a2[v8];
        *((_WORD *)v9 + 2)  = *(_WORD *)&a2[v8 + 4];
        *(_DWORD *)(v9 + 6)  = *(_DWORD *)&a2[v8 + 6];
        *((_WORD *)v9 + 5)  = *(_WORD *)&a2[v8 + 10];
        *((_DWORD *)v9 + 3)  = *(_DWORD *)&a2[v8 + 12];
        *((_WORD *)v9 + 8)  = *(_WORD *)&a2[v8 + 16];
        *((_DWORD *)v9 + 5)  = *(_DWORD *)&a2[v8 + 20];
        uint64_t v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        uint64_t v12 = v11[8];
        uint64_t v13 = &v9[v12];
        uint64_t v14 = &v10[v12];
        uint64_t v15 = type metadata accessor for DispatchTimeInterval();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
        v16(v13, v14, v15);
        v16(&v9[v11[9]], &v10[v11[9]], v15);
        *(_DWORD *)&v9[v11[10]]  = *(_DWORD *)&v10[v11[10]];
        *(_DWORD *)&v9[v11[11]]  = *(_DWORD *)&v10[v11[11]];
        *(void *)&v9[v11[12]]  = *(void *)&v10[v11[12]];
        *(_DWORD *)&v9[v11[13]]  = *(_DWORD *)&v10[v11[13]];
        *(void *)&v9[v11[14]]  = *(void *)&v10[v11[14]];
        *(_DWORD *)&v9[v11[15]]  = *(_DWORD *)&v10[v11[15]];
        *(void *)&v9[v11[16]]  = *(void *)&v10[v11[16]];
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10013B768()
{
  v4[4]  = &unk_1003C0130;
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v4[5]  = v4;
    v4[6]  = &unk_1003C0188;
    uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics(319);
    if (v2 <= 0x3F)
    {
      v4[7]  = *(void *)(result - 8) + 64;
      v4[8]  = &unk_1003C01A0;
      v4[9]  = &unk_1003C01B8;
      v4[10]  = &unk_1003C01D0;
      v4[11]  = &unk_1003C01E8;
      v4[12]  = &unk_1003C0200;
      uint64_t result = type metadata accessor for AWDLIdleActivity(319);
      if (v3 <= 0x3F)
      {
        v4[13]  = *(void *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for DriverEvent.Infra(uint64_t a1)
{
  return sub_1000135D4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40), *(unsigned char *)(a1 + 41));
}

uint64_t initializeWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 40);
  sub_100004C48(*(void *)a2, v4, v5, v6, v7, v9, v8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(unsigned char *)(a1 + 40)  = v9;
  *(unsigned char *)(a1 + 41)  = v8;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 40);
  sub_100004C48(*(void *)a2, v4, v5, v6, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  unsigned __int8 v15 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40)  = v9;
  char v16 = *(unsigned char *)(a1 + 41);
  *(unsigned char *)(a1 + 41)  = v8;
  sub_1000135D4(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  __int16 v4 = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  char v11 = *(unsigned char *)(a1 + 41);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 40);
  *(_WORD *)(a1 + 40)  = v4;
  sub_1000135D4(v5, v7, v6, v8, v9, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.Infra(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.Infra(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 42)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 42)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10013BAEC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 41) <= 9u) {
    return *(unsigned __int8 *)(a1 + 41);
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_10013BB04(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(void *)uint64_t result = a2 - 10;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    LOBYTE(a2)  = 10;
  }
  *(unsigned char *)(result + 41)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.Infra()
{
  return &type metadata for DriverEvent.Infra;
}

unsigned char *storeEnumTagSinglePayload for DriverEvent.SystemState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013BC08);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.SystemState()
{
  return &type metadata for DriverEvent.SystemState;
}

uint64_t sub_10013BC40(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

unsigned char *sub_10013BC84(unsigned char *a1, unsigned char *a2)
{
  return a2;
}

uint64_t sub_10013BCE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013BD30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10013BD8C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 34);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10013BDA0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10013BE24(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  while ((a1 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    unint64_t v2 = v6;
    if (a2 >> 62) {
      goto LABEL_31;
    }
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      goto LABEL_32;
    }
LABEL_8:
    unint64_t v8 = 0;
    uint64_t v9 = v5 - 1;
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_25;
        }
        id v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      char v11 = v10;
      [v2 value];
      double v13 = v12;
      [v11 value];
      double v15 = v13 - v14;
      if (v15 <= 0.0) {
        double v15 = 0.0;
      }
      [v2 setValue:v15];

      if (v9 == v8) {
        goto LABEL_28;
      }
      unint64_t v16 = v8 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v16 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_26;
        }
        id v17 = *(id *)(a1 + 40 + 8 * v8);
      }
      unint64_t v2 = v17;
      if (__OFADD__(v16, 1)) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_28;
    }
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_8;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame;
}

void *AWDLTrafficRegistrationOptions.remoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteCamera;
}

void *AWDLTrafficRegistrationOptions.tvRemoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.tvRemoteCamera;
}

void *AWDLTrafficRegistrationOptions.remoteScreen.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteScreen;
}

uint64_t WiFiP2PError.description.getter()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_10013C238()
{
  return WiFiP2PError.description.getter();
}

uint64_t sub_10013C240()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10013C2D0()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t WiFiAwareTerminationReason.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t result = 0xD000000000000011;
  switch(v1)
  {
    case 0:
      return result;
    case 2:
      unint64_t result = 0x754F2064656D6954;
      break;
    case 3:
      unint64_t result = 0x7165522072657355;
      break;
    case 4:
      unint64_t result = 0x6961462070696843;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

unint64_t sub_10013C43C()
{
  return WiFiAwareTerminationReason.description.getter(*v0);
}

uint64_t sub_10013C444()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10013C4D4()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t WiFiP2PInternetSharingPolicy.description.getter()
{
  return 0xD000000000000011;
}

unint64_t sub_10013C614()
{
  return WiFiP2PInternetSharingPolicy.description.getter();
}

id WiFiAwarePublisherDataSessionHandle.init(_:)(unint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = [objc_allocWithZone((Class)WiFiMACAddress) initWithAddress:(a1 >> 8) & 0xFFFFFFFFFFFFLL];
  id v4 = [v2 initWithDatapathID:a1 initiatorDataAddress:v3];

  return v4;
}

uint64_t WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter()
{
  unsigned __int8 v1 = [v0 datapathID];
  id v2 = [v0 initiatorDataAddress];
  unint64_t v3 = WiFiMACAddress.wifiAddress.getter();

  return v1 | ((v3 & 0xFFFFFFFFFFFFLL) << 8);
}

uint64_t WiFiAwareDataSessionLinkStatus.description.getter(uint64_t a1)
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  if (a1 == 1) {
    uint64_t v1 = 0x657669746361;
  }
  if (a1) {
    return v1;
  }
  else {
    return 1701602409;
  }
}

uint64_t sub_10013C74C()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  if (*v0 == 1) {
    uint64_t v1 = 0x657669746361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701602409;
  }
}

uint64_t AWDLTrafficRegistrationService.serviceType.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_14;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    return 2;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10) {
    goto LABEL_14;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    return 2;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
    goto LABEL_14;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18) {
    return 2;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
    goto LABEL_14;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23) {
    return 2;
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27) {
    goto LABEL_14;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    return 2;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32)
  {
LABEL_14:
    uint64_t v6 = 2;
    swift_bridgeObjectRelease_n();
    return v6;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_14;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_6;
      }
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
      if (v13 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != v16)
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_6;
        }
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v21 != v22)
        {
          char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_15;
        }
      }
    }
LABEL_14:
    char v6 = 1;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
LABEL_6:
  char v6 = 1;
  return v6 & 1;
}

uint64_t AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter()
{
  if (AWDLTrafficRegistrationService.serviceType.getter() != 2) {
    goto LABEL_7;
  }
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_13;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v9 != v10)
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_14:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
LABEL_13:
    char v6 = 1;
    goto LABEL_14;
  }
LABEL_7:
  char v6 = 1;
  return v6 & 1;
}

uint64_t sub_10013CD10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static AWDLTrafficRegistrationOptions.remoteScreen.getter()
{
  return 0x20000000;
}

uint64_t static AWDLTrafficRegistrationOptions.tvRemoteCamera.getter()
{
  return 0x40000000;
}

uint64_t static AWDLTrafficRegistrationOptions.remoteCamera.getter()
{
  return 0x80000000;
}

const mach_header_64 *static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.getter()
{
  return &_mh_execute_header;
}

id AWDLTrafficRegistrationConfiguration.init(peerAddress:umiOptions:isActive:)(uint64_t a1, char a2, char *a3)
{
  char v3 = 1;
  id v4 = (void **)&AWDLTrafficRegistrationServiceAirPlay;
  id v6 = 0;
  switch(a2)
  {
    case 1:
    case 3:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceAirPlay;
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return v6;
    case 15:
      id v4 = (void **)&AWDLTrafficRegistrationServiceRealTimeMode;
      char v3 = 1;
      goto LABEL_21;
    case 16:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceRealTimeMode;
      goto LABEL_21;
    case 17:
      id v4 = (void **)&AWDLTrafficRegistrationServiceDeviceToDeviceMigration;
      char v3 = 1;
      goto LABEL_21;
    case 18:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceDeviceToDeviceMigration;
      goto LABEL_21;
    case 22:
      id v4 = (void **)&AWDLTrafficRegistrationServiceUniversalControl;
      char v3 = 1;
      goto LABEL_21;
    case 23:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceUniversalControl;
      goto LABEL_21;
    case 24:
    case 26:
      id v4 = (void **)&AWDLTrafficRegistrationServiceSidecar;
      char v3 = 1;
      goto LABEL_21;
    case 25:
    case 27:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceSidecar;
      goto LABEL_21;
    case 33:
      id v4 = (void **)&AWDLTrafficRegistrationServiceMPRemoteCamera;
      char v3 = 1;
      goto LABEL_21;
    case 34:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceMPRemoteCamera;
      goto LABEL_21;
    case 35:
      id v4 = (void **)&AWDLTrafficRegistrationServiceEdgeKit;
      char v3 = 1;
      goto LABEL_21;
    case 36:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceEdgeKit;
      goto LABEL_21;
    case 37:
      id v4 = (void **)&AWDLTrafficRegistrationServiceRemoteCamera;
      char v3 = 1;
      goto LABEL_21;
    case 38:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceRemoteCamera;
      goto LABEL_21;
    case 39:
      id v4 = (void **)&AWDLTrafficRegistrationServiceTVRemoteCamera;
      char v3 = 1;
      goto LABEL_21;
    case 40:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceTVRemoteCamera;
      goto LABEL_21;
    case 41:
      id v4 = (void **)&AWDLTrafficRegistrationServiceRemoteScreen;
      char v3 = 1;
      goto LABEL_21;
    case 42:
      char v3 = 0;
      id v4 = (void **)&AWDLTrafficRegistrationServiceRemoteScreen;
      goto LABEL_21;
    default:
LABEL_21:
      uint64_t v7 = *v4;
      *a3  = v3;
      id v8 = v7;
      id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v10 = [objc_allocWithZone((Class)WiFiMACAddress) initWithAddress:a1 & 0xFFFFFFFFFFFFLL];
      id v6 = [v9 initWithUniqueIdentifier:v8 peerAddress:v10];

      return v6;
  }
}

uint64_t WiFiP2PSPITransactionType.desiredLatency.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 11:
      uint64_t result = 5;
      break;
    case 17:
      uint64_t result = 6;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_10013D0CC()
{
  return WiFiP2PSPITransactionType.description.getter(*v0);
}

uint64_t WiFiAwarePublishConfiguration.furtherServiceDiscoveryFunction.getter()
{
  if ([v0 furtherServiceDiscoveryRequired]) {
    return (uint64_t)[v0 jumboServiceDiscoveryMessages];
  }
  else {
    return 2;
  }
}

unint64_t WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter()
{
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  id v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  id v6 = (char *)&v20 - v5;
  __chkstk_darwin();
  id v8 = (BOOL *)&v20 - v7;
  unint64_t v21 = sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
  *id v8 = [v0 protocolType] != 0;
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  uint64_t v10 = 1;
  swift_storeEnumTagMultiPayload();
  char v11 = *(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v11(v8, 0, 1, v9);
  sub_10013EFA4((uint64_t)v8, (uint64_t)v6);
  sub_100027C1C((uint64_t)v6, 1);
  sub_1000380B4((uint64_t)v8, &qword_10047CF68);
  [v0 servicePort];
  NWEndpoint.Port.init(rawValue:)();
  NANGenericServiceProtocol.port.setter((uint64_t)v2);
  id v12 = [v0 hostname];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v17 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(v14, v16);
    if (v18)
    {
      *id v4 = v17;
      v4[1]  = v18;
      swift_storeEnumTagMultiPayload();
      uint64_t v10 = 0;
    }
  }
  v11((BOOL *)v4, v10, 1, v9);
  sub_10013EFA4((uint64_t)v4, (uint64_t)v8);
  sub_100027C1C((uint64_t)v8, 2);
  sub_1000380B4((uint64_t)v4, &qword_10047CF68);
  return v21;
}

BOOL Layer3Protocol.init(apiProtocolType:)(uint64_t a1)
{
  return a1 != 0;
}

id WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void *a10)
{
  sub_10006EC68(a7, (uint64_t)v35, (uint64_t *)&unk_100486F60);
  uint64_t v14 = v36;
  uint64_t v13 = v37;
  unint64_t v15 = v38;
  sub_10006EC68(a7, (uint64_t)&v39, (uint64_t *)&unk_100486F60);
  if (v40 != 5)
  {
    long long v42 = v39;
    long long v43 = v40;
    uint64_t v44 = v41;
    if (a8)
    {
      sub_10013316C(v14, v13, v15);
      id v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8);
      swift_bridgeObjectRelease();
      if (v16)
      {
LABEL_19:
        sub_10013F00C(a7);
        if (BYTE2(v42)) {
          char v22 = (BYTE2(v42) & 2) != 0;
        }
        else {
          char v22 = 2;
        }
        uint64_t v20 = (WORD1(v42) >> 2) & 1;
        unint64_t v21 = ((unint64_t)WORD1(v42) >> 6) & 1;
        goto LABEL_23;
      }
    }
    else
    {
      sub_10013316C(v14, v13, v15);
    }
    sub_10006EC68((uint64_t)&v43, (uint64_t)v45, (uint64_t *)&unk_100485B70);
    sub_10006EC68((uint64_t)v45, (uint64_t)&v46, (uint64_t *)&unk_100485B70);
    if (v46 != 4
      && (long long v48 = v46, v49 = v47, v46 == 2)
      && (uint64_t v23 = *((void *)&v48 + 1),
          unint64_t v24 = v49,
          sub_10013F0EC((uint64_t)&v48),
          (uint64_t v25 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v23, v24)) != 0))
    {
      id v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter((uint64_t)v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v16 = 0;
    }
    goto LABEL_19;
  }
  if (!a8
    || (id v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8), swift_bridgeObjectRelease(), !v16))
  {
    sub_10006EC68(a6 + 56, (uint64_t)&v46, (uint64_t *)&unk_100485B70);
    sub_10006EC68((uint64_t)&v46, (uint64_t)&v48, (uint64_t *)&unk_100485B70);
    if (v48 != 4
      && (long long v42 = v48, *(void *)&v43 = v49, v48 == 2)
      && (uint64_t v17 = *((void *)&v42 + 1),
          unint64_t v18 = v43,
          sub_10013F0EC((uint64_t)&v42),
          (uint64_t v19 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v17, v18)) != 0))
    {
      id v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter((uint64_t)v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v16 = 0;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  char v22 = 2;
LABEL_23:
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v27 = [objc_allocWithZone((Class)WiFiMACAddress) initWithAddress:a1 >> 16];
  uint64_t v28 = 1;
  if (v22) {
    uint64_t v28 = 2;
  }
  if (v22 == 2) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  LOBYTE(v32)  = a9 & 1;
  id v30 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithServiceName:v26 serviceSpecificInfo:v16 publishID:BYTE1(a1) subscribeID:a1 publisherAddressKey:v27 datapathSupported:v20 datapathCipherSuite:v21 fsdFunction:v29 rssi:a2 pairSetupRequired:v32 pairingConfiguration:a10];

  sub_10013F00C(a7);
  sub_10013F060(a6);
  swift_bridgeObjectRelease();

  return v30;
}

id NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  NANGenericServiceProtocol.instanceName.getter(a1);
  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  [v2 setInstanceName:v4];

  uint64_t v5 = NANGenericServiceProtocol.textInfo.getter(a1);
  if (v6 >> 60 == 15)
  {
    isa  = 0;
  }
  else
  {
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    isa  = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C95C(v8, v9);
  }
  [v2 setTxtRecordData:isa];

  uint64_t v10 = NANGenericServiceProtocol.blob.getter(a1);
  if (v11 >> 60 == 15)
  {
    NANGenericServiceProtocol.vendorSpecificData.getter(a1);
    if (v13 >> 60 == 15)
    {
      Class v14 = 0;
      goto LABEL_13;
    }
    uint64_t v15 = v12;
    unint64_t v16 = v13;
  }
  else
  {
    uint64_t v15 = v10;
    unint64_t v16 = v11;
  }
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000C970(v15, v16);
LABEL_13:
  [v2 setBlob:v14];

  id v17 = [v2 instanceName];
  if (v17)
  {
  }
  else
  {
    id v18 = [v2 txtRecordData];
    if (v18 || (id v18 = [v2 blob]) != 0)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      sub_10000C970(v20, v22);
    }
    else
    {

      return 0;
    }
  }
  return v2;
}

uint64_t Layer3Protocol.init(apiProtocolType:)(uint64_t a1, char a2)
{
  if (a2) {
    return 2;
  }
  else {
    return a1 != 0;
  }
}

uint64_t Layer3Protocol.apiProtocolType.getter(char a1)
{
  return a1 & 1;
}

void WiFiAwareDataSessionStatisticsReport.difference(from:)(void *a1)
{
  id v3 = v1;
  id v4 = [v3 dfsChannelsCount];
  id v5 = [v4 integerValue];

  id v6 = [a1 dfsChannelsCount];
  id v7 = [v6 integerValue];

  if (__OFSUB__(v5, v7))
  {
    __break(1u);
    goto LABEL_33;
  }
  isa  = Int._bridgeToObjectiveC()().super.super.isa;
  [v3 setDfsChannelsCount:isa];

  id v9 = v3;
  id v10 = [v9 csaCount];
  id v11 = [v10 integerValue];

  id v12 = [a1 csaCount];
  id v13 = [v12 integerValue];

  if (__OFSUB__(v11, v13))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  Class v14 = Int._bridgeToObjectiveC()().super.super.isa;
  [v9 setCsaCount:v14];

  id v15 = v9;
  id v16 = [v15 quietIECount];
  id v17 = [v16 integerValue];

  id v18 = [a1 quietIECount];
  id v19 = [v18 integerValue];

  if (__OFSUB__(v17, v19))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  Class v20 = Int._bridgeToObjectiveC()().super.super.isa;
  [v15 setQuietIECount:v20];

  id v21 = v15;
  id v22 = [v21 txErrorCount];
  id v23 = [v22 integerValue];

  id v24 = [a1 txErrorCount];
  id v25 = [v24 integerValue];

  if (__OFSUB__(v23, v25))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  Class v26 = Int._bridgeToObjectiveC()().super.super.isa;
  [v21 setTxErrorCount:v26];

  id v27 = v21;
  id v28 = [v27 packetsOn2GCount];
  id v29 = [v28 integerValue];

  id v30 = [a1 packetsOn2GCount];
  id v31 = [v30 integerValue];

  if (__OFSUB__(v29, v31))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  Class v32 = Int._bridgeToObjectiveC()().super.super.isa;
  [v27 setPacketsOn2GCount:v32];

  id v33 = v27;
  id v34 = [v33 packetsNAVOn2GCount];
  id v35 = [v34 integerValue];

  id v36 = [a1 packetsNAVOn2GCount];
  id v37 = [v36 integerValue];

  if (__OFSUB__(v35, v37))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  Class v38 = Int._bridgeToObjectiveC()().super.super.isa;
  [v33 setPacketsNAVOn2GCount:v38];

  id v39 = v33;
  id v40 = [v39 packetsHOFOn2GCount];
  id v41 = [v40 integerValue];

  id v42 = [a1 packetsHOFOn2GCount];
  id v43 = [v42 integerValue];

  if (__OFSUB__(v41, v43))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  Class v44 = Int._bridgeToObjectiveC()().super.super.isa;
  [v39 setPacketsHOFOn2GCount:v44];

  id v45 = v39;
  id v46 = [v45 packetsOn5GCount];
  id v47 = [v46 integerValue];

  id v48 = [a1 packetsOn5GCount];
  id v49 = [v48 integerValue];

  if (__OFSUB__(v47, v49))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  Class v50 = Int._bridgeToObjectiveC()().super.super.isa;
  [v45 setPacketsOn5GCount:v50];

  id v51 = v45;
  id v52 = [v51 packetsOverridenOn5GCount];
  id v53 = [v52 integerValue];

  id v54 = [a1 packetsOverridenOn5GCount];
  id v55 = [v54 integerValue];

  if (__OFSUB__(v53, v55))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  Class v56 = Int._bridgeToObjectiveC()().super.super.isa;
  [v51 setPacketsOverridenOn5GCount:v56];

  id v57 = v51;
  id v58 = [v57 infraRelayRequestersCount];
  id v59 = [v58 integerValue];

  id v60 = [a1 infraRelayRequestersCount];
  id v61 = [v60 integerValue];

  if (__OFSUB__(v59, v61))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  Class v62 = Int._bridgeToObjectiveC()().super.super.isa;
  [v57 setInfraRelayRequestersCount:v62];

  id v63 = v57;
  id v64 = [v63 txExpiredCount];
  id v65 = [v64 integerValue];

  id v66 = [a1 txExpiredCount];
  id v67 = [v66 integerValue];

  if (__OFSUB__(v65, v67))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  Class v68 = Int._bridgeToObjectiveC()().super.super.isa;
  [v63 setTxExpiredCount:v68];

  id v69 = v63;
  id v70 = [v69 txNoACKCount];
  id v71 = [v70 integerValue];

  id v72 = [a1 txNoACKCount];
  id v73 = [v72 integerValue];

  if (__OFSUB__(v71, v73))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  Class v74 = Int._bridgeToObjectiveC()().super.super.isa;
  [v69 setTxNoACKCount:v74];

  id v75 = v69;
  id v76 = [v75 txFailedCount];
  id v77 = [v76 integerValue];

  id v78 = [a1 txFailedCount];
  id v79 = [v78 integerValue];

  if (__OFSUB__(v77, v79))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  Class v80 = Int._bridgeToObjectiveC()().super.super.isa;
  [v75 setTxFailedCount:v80];

  id v81 = v75;
  id v82 = [v81 txNoResourcesCount];
  id v83 = [v82 integerValue];

  id v84 = [a1 txNoResourcesCount];
  id v85 = [v84 integerValue];

  if (__OFSUB__(v83, v85))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  Class v86 = Int._bridgeToObjectiveC()().super.super.isa;
  [v81 setTxNoResourcesCount:v86];

  id v87 = v81;
  id v88 = [v87 txIOErrorCount];
  id v89 = [v88 integerValue];

  id v90 = [a1 txIOErrorCount];
  id v91 = [v90 integerValue];

  if (__OFSUB__(v89, v91))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  Class v92 = Int._bridgeToObjectiveC()().super.super.isa;
  [v87 setTxIOErrorCount:v92];

  id v93 = v87;
  id v94 = [v93 txMemoryErrorCount];
  id v95 = [v94 integerValue];

  id v96 = [a1 txMemoryErrorCount];
  id v97 = [v96 integerValue];

  if (__OFSUB__(v95, v97))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  Class v98 = Int._bridgeToObjectiveC()().super.super.isa;
  [v93 setTxMemoryErrorCount:v98];

  id v99 = v93;
  id v100 = [v99 txChipModeErrorCount];
  id v101 = [v100 integerValue];

  id v102 = [a1 txChipModeErrorCount];
  id v103 = [v102 integerValue];

  if (__OFSUB__(v101, v103))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  Class v104 = Int._bridgeToObjectiveC()().super.super.isa;
  [v99 setTxChipModeErrorCount:v104];

  id v105 = v99;
  id v106 = [v105 txNoRemotePeerCount];
  id v107 = [v106 integerValue];

  id v108 = [a1 txNoRemotePeerCount];
  id v109 = [v108 integerValue];

  if (__OFSUB__(v107, v109))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  Class v110 = Int._bridgeToObjectiveC()().super.super.isa;
  [v105 setTxNoRemotePeerCount:v110];

  id v111 = v105;
  id v112 = [v111 txInternalErrorCount];
  id v113 = [v112 integerValue];

  id v114 = [a1 txInternalErrorCount];
  id v115 = [v114 integerValue];

  if (__OFSUB__(v113, v115))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  Class v116 = Int._bridgeToObjectiveC()().super.super.isa;
  [v111 setTxInternalErrorCount:v116];

  id v117 = v111;
  id v118 = [v117 txDroppedCount];
  id v119 = [v118 integerValue];

  id v120 = [a1 txDroppedCount];
  id v121 = [v120 integerValue];

  if (__OFSUB__(v119, v121))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  Class v122 = Int._bridgeToObjectiveC()().super.super.isa;
  [v117 setTxDroppedCount:v122];

  id v123 = v117;
  id v124 = [v123 txFirmwareFreePacketCount];
  id v125 = [v124 integerValue];

  id v126 = [a1 txFirmwareFreePacketCount];
  id v127 = [v126 integerValue];

  if (__OFSUB__(v125, v127))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  Class v128 = Int._bridgeToObjectiveC()().super.super.isa;
  [v123 setTxFirmwareFreePacketCount:v128];

  id v129 = v123;
  id v130 = [v129 txMaxRetriesCount];
  id v131 = [v130 integerValue];

  id v132 = [a1 txMaxRetriesCount];
  id v133 = [v132 integerValue];

  if (__OFSUB__(v131, v133))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  Class v134 = Int._bridgeToObjectiveC()().super.super.isa;
  [v129 setTxMaxRetriesCount:v134];

  id v135 = v129;
  id v136 = [v135 txForceLifetimeExpiredCount];
  id v137 = [v136 integerValue];

  id v138 = [a1 txForceLifetimeExpiredCount];
  id v139 = [v138 integerValue];

  if (__OFSUB__(v137, v139))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  Class v140 = Int._bridgeToObjectiveC()().super.super.isa;
  [v135 setTxForceLifetimeExpiredCount:v140];

  id v141 = v135;
  id v142 = [v141 channelSequenceMismatchOn5GCount];
  id v143 = [v142 integerValue];

  id v144 = [a1 channelSequenceMismatchOn5GCount];
  id v145 = [v144 integerValue];

  if (__OFSUB__(v143, v145))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  Class v146 = Int._bridgeToObjectiveC()().super.super.isa;
  [v141 setChannelSequenceMismatchOn5GCount:v146];

  id v147 = v141;
  id v148 = [v147 channelSequenceMismatchOn2GCount];
  id v149 = [v148 integerValue];

  id v150 = [a1 channelSequenceMismatchOn2GCount];
  id v151 = [v150 integerValue];

  if (__OFSUB__(v149, v151))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  Class v152 = Int._bridgeToObjectiveC()().super.super.isa;
  [v147 setChannelSequenceMismatchOn2GCount:v152];

  id v153 = v147;
  id v154 = [v153 infraScanCount];
  id v155 = [v154 integerValue];

  id v156 = [a1 infraScanCount];
  id v157 = [v156 integerValue];

  if (__OFSUB__(v155, v157))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  Class v158 = Int._bridgeToObjectiveC()().super.super.isa;
  [v153 setInfraScanCount:v158];

  id v159 = v153;
  id v160 = [v159 infraAssocCount];
  id v161 = [v160 integerValue];

  id v162 = [a1 infraAssocCount];
  id v163 = [v162 integerValue];

  if (__OFSUB__(v161, v163))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  Class v164 = Int._bridgeToObjectiveC()().super.super.isa;
  [v159 setInfraAssocCount:v164];

  id v165 = v159;
  id v166 = [v165 infraDisassocCount];
  id v167 = [v166 integerValue];

  id v168 = [a1 infraDisassocCount];
  id v169 = [v168 integerValue];

  if (__OFSUB__(v167, v169))
  {
LABEL_59:
    __break(1u);
    return;
  }
  Class v170 = Int._bridgeToObjectiveC()().super.super.isa;
  [v165 setInfraDisassocCount:v170];

  id v171 = v165;
  id v172 = [v171 txCCAHistogram];
  sub_10013F11C();
  unint64_t v173 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v174 = a1;
  id v175 = [v174 txCCAHistogram];
  unint64_t v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v173, v176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v177 = v171;
  id v178 = [v177 rxRSSIHistogram];
  unint64_t v179 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v180 = v174;
  id v181 = [v180 rxRSSIHistogram];
  v182  = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v179, v182);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v183  = v177;
  id v184 = [v183 rxFWDelayHistogram];
  unint64_t v185 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v186 = v180;
  id v187 = [v186 rxFWDelayHistogram];
  unint64_t v188 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v185, v188);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v189 = v183;
  id v190 = [v189 rxIPCDelayHistogram];
  unint64_t v191 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v192 = v186;
  id v193 = [v192 rxIPCDelayHistogram];
  unint64_t v194 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v191, v194);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v195 = v189;
  id v196 = [v195 txConsecutiveErrorsHistogram];
  unint64_t v197 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v198  = v192;
  id v199 = [v198 txConsecutiveErrorsHistogram];
  unint64_t v200 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v197, v200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v201  = v195;
  id v202 = [v201 txPacketExpiryHistogram];
  unint64_t v203 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v204 = v198;
  id v205 = [v204 txPacketExpiryHistogram];
  unint64_t v206 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10013BE24(v203, v206);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t DNSRecords.Identifier.serviceType.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v5 = a3 & 0xFF01;
  if (sub_10012625C(0x79616C707269615FLL, 0xE800000000000000, 256, a1, a2, a3 & 0xFF01)
    || sub_10012625C(0x79616C707269615FLL, 0xEC0000007032702DLL, 256, a1, a2, v5)
    || sub_10012625C(0x706F61725FLL, 0xE500000000000000, 256, a1, a2, v5)
    || sub_10012625C(0x696E61706D6F635FLL, 0xEF6B6E696C2D6E6FLL, 256, a1, a2, v5))
  {
    return 2;
  }
  if (sub_10012625C(0x6B6E696C64725FLL, 0xE700000000000000, 256, a1, a2, v5)) {
    return 2;
  }
  return 0;
}

id NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter(uint64_t a1)
{
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  id v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NWEndpoint.Port();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v12 = (char *)&v20 - v11;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v13 = sub_1000310AC(1);
  if ((v14 & 1) == 0) {
    return 0;
  }
  sub_10013F15C(*(void *)(a1 + 56) + *(void *)(v8 + 72) * v13, (uint64_t)v10);
  sub_10013F1C0((uint64_t)v10, (uint64_t)v12);
  char v15 = sub_10007C268();
  sub_10013F224((uint64_t)v12);
  if (v15 == 2) {
    return 0;
  }
  NANGenericServiceProtocol.port.getter(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000380B4((uint64_t)v3, &qword_10047CEF0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  id v16 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v15 & 1 servicePort:(unsigned __int16)NWEndpoint.Port.rawValue.getter()];
  NANGenericServiceProtocol.serviceName.getter(a1);
  if (v18)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  [v16 setHostname:v19];

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10013EFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047CF68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013F00C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013F040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3 != 5) {
    return sub_1001331AC(a3, a4, a5);
  }
  return result;
}

uint64_t sub_10013F060(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = *(void *)(a1 + 72);
  sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  sub_100133188(v2, v3, v4);
  sub_1001331AC(v5, v6, v7);
  return a1;
}

uint64_t sub_10013F0EC(uint64_t a1)
{
  return a1;
}

unint64_t sub_10013F11C()
{
  unint64_t result = qword_10047E970;
  if (!qword_10047E970)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10047E970);
  }
  return result;
}

uint64_t sub_10013F15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013F1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013F224(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013F280(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_10013F2C8()
{
  return Hasher._finalize()();
}

uint64_t sub_10013F3F0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F504()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F61C@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1001DFD98(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[2 * a1];
    long long v10 = *((_OWORD *)v8 + 2);
    uint64_t v9 = v8 + 4;
    *a2  = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      _OWORD v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *NANMatchingFilter.maximumLength.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.maximumLength;
}

unint64_t NANMatchingFilter.FilterType.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x546873696C627570;
      break;
    case 3:
      unint64_t result = 0x526873696C627570;
      break;
    case 4:
      unint64_t result = 0x73655265676E6172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10013F7EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100041E14(*a1, *a2);
}

unint64_t sub_10013F7F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

unint64_t sub_10013F828@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = NANMatchingFilter.FilterType.rawValue.getter(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

Swift::Int sub_10013F854()
{
  return sub_10013F2C8();
}

uint64_t sub_10013F85C()
{
  return sub_10013F3F0();
}

Swift::Int sub_10013F864()
{
  return sub_1001E1518();
}

uint64_t sub_10013F86C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10013F8CC()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANMatchingFilter.RespondCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.RespondCondition.defaultValue;
}

CoreP2P::NANMatchingFilter::RespondCondition_optional __swiftcall NANMatchingFilter.RespondCondition.init(rawValue:)(Swift::String rawValue)
{
  object  = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F3F0, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value  = CoreP2P_NANMatchingFilter_RespondCondition_txNotEqualRx;
  }
  else {
    v4.value  = CoreP2P_NANMatchingFilter_RespondCondition_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t NANMatchingFilter.RespondCondition.rawValue.getter(char a1)
{
  if (a1) {
    return 0x757145746F4E7874;
  }
  else {
    return 0x526C617571457874;
  }
}

uint64_t sub_10013F9C0(char *a1, char *a2)
{
  return sub_100041D60(*a1, *a2);
}

uint64_t sub_10013F9CC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F3F0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2  = v5;
  return result;
}

void sub_10013FA2C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x526C617571457874;
  if (*v1) {
    uint64_t v2 = 0x757145746F4E7874;
  }
  unint64_t v3 = 0xE900000000000078;
  if (*v1) {
    unint64_t v3 = 0xEC00000078526C61;
  }
  *a1  = v2;
  a1[1]  = v3;
}

Swift::Int sub_10013FA78()
{
  return Hasher._finalize()();
}

uint64_t sub_10013FB08()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10013FB84()
{
  return Hasher._finalize()();
}

uint64_t sub_10013FC10()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10013FC70()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANMatchingFilter.addFilter(_:)(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047E270);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2450;
  *(void *)(inited + 32)  = a1;
  *(void *)(inited + 40)  = a2;
  sub_100013D44(a1, a2);
  NANMatchingFilter.addFilters(_:)((Swift::OpaquePointer)inited);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

Swift::Void __swiftcall NANMatchingFilter.addFilters(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1 = *((void *)a1._rawValue + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (2)
    {
      CoreP2P::NANMatchingFilter::RespondCondition_optional v4 = (char *)a1._rawValue + 16 * v3;
      long long v5 = *((_OWORD *)v4 + 2);
      unint64_t v6 = *((void *)v4 + 5);
      long long v14 = v5;
      switch(v6 >> 62)
      {
        case 1uLL:
          uint64_t v7 = v5;
          if (__OFSUB__(DWORD1(v5), v5))
          {
            __break(1u);
LABEL_20:
            __break(1u);
            JUMPOUT(0x10013FEF0);
          }
          uint64_t v8 = DWORD1(v5) - (int)v5;
LABEL_11:
          sub_100013D44(v7, v6);
          *(void *)&long long v5 = v14;
          if (v8 > 32)
          {
LABEL_3:
            sub_10000C970(v5, v6);
          }
          else
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_100083604(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v12 = _swiftEmptyArrayStorage[2];
            unint64_t v11 = _swiftEmptyArrayStorage[3];
            long long v13 = v14;
            if (v12 >= v11 >> 1)
            {
              sub_100083604(v11 > 1, v12 + 1, 1);
              long long v13 = v14;
            }
            _swiftEmptyArrayStorage[2]  = v12 + 1;
            *(_OWORD *)&_swiftEmptyArrayStorage[2 * v12 + 4]  = v13;
          }
          if (v1 != ++v3) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        case 2uLL:
          uint64_t v7 = v5;
          uint64_t v10 = *(void *)(v5 + 16);
          uint64_t v9 = *(void *)(v5 + 24);
          uint64_t v8 = v9 - v10;
          if (!__OFSUB__(v9, v10)) {
            goto LABEL_11;
          }
          goto LABEL_20;
        case 3uLL:
          goto LABEL_12;
        default:
          if (BYTE6(v6) <= 0x20uLL) {
            goto LABEL_12;
          }
          goto LABEL_3;
      }
      break;
    }
  }
  sub_1001DEBD4((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t NANMatchingFilter.removeFilter(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10013FFDC(a1, a2, v5);
  LOBYTE(a1)  = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    sub_10013F61C(v6, &v9);
    return sub_10000C970(v9, *((unint64_t *)&v9 + 1));
  }
  return result;
}

uint64_t sub_10013FF78(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    int v6 = *(_DWORD *)(a2 + 36 + 4 * result++);
    if (v6 == a1) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_10013FFDC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    unint64_t v4 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = a2 >> 62;
    unint64_t v73 = HIDWORD(a1);
    size_t v79 = HIDWORD(a1) - (int)a1;
    unint64_t v80 = a2 >> 62;
    BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v78 = v8;
    uint64_t v76 = *(void *)(a3 + 16);
    uint64_t v77 = (int)a1;
    uint64_t v74 = a1 >> 32;
    uint64_t v72 = (a1 >> 32) - (int)a1;
    long long v9 = (unint64_t *)(a3 + 40);
    uint64_t v81 = v7;
    __n  = BYTE6(a2);
    while (1)
    {
      uint64_t v11 = *(v9 - 1);
      unint64_t v10 = *v9;
      unint64_t v12 = *v9 >> 62;
      v9 += 2;
      uint64_t v13 = 0;
      switch(v12)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v11), v11))
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
          }
          uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
          sub_100013D44(v11, v10);
          break;
        case 2uLL:
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v14 = *(void *)(v11 + 24);
          uint64_t v13 = v14 - v15;
          if (!__OFSUB__(v14, v15)) {
            goto LABEL_14;
          }
          goto LABEL_120;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v10);
          break;
      }
      size_t v16 = __n;
      switch(v81)
      {
        case 1:
          size_t v16 = v79;
          if (v78) {
            goto LABEL_121;
          }
          goto LABEL_19;
        case 2:
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          BOOL v19 = __OFSUB__(v17, v18);
          size_t v16 = v17 - v18;
          if (!v19) {
            goto LABEL_19;
          }
          goto LABEL_122;
        case 3:
          if (v13) {
            goto LABEL_7;
          }
          goto LABEL_117;
        default:
LABEL_19:
          if (v13 == v16)
          {
            if (v13 < 1)
            {
LABEL_117:
              sub_10000C970(v11, v10);
              return v6;
            }
            switch((int)v12)
            {
              case 1:
                if ((int)v11 > v11 >> 32) {
                  goto LABEL_123;
                }
                uint64_t v23 = __DataStorage._bytes.getter();
                if (v23)
                {
                  uint64_t v24 = v23;
                  uint64_t v25 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v11, v25)) {
                    goto LABEL_125;
                  }
                  Class v26 = (const void *)(v24 + (int)v11 - v25);
                }
                else
                {
                  Class v26 = 0;
                }
                __DataStorage._length.getter();
                LODWORD(v7)  = v80;
                if (!v80)
                {
                  LOWORD(__s1[0])  = a1;
                  BYTE2(__s1[0])  = BYTE2(a1);
                  BYTE3(__s1[0])  = BYTE3(a1);
                  BYTE4(__s1[0])  = v73;
                  BYTE5(__s1[0])  = BYTE5(a1);
                  BYTE6(__s1[0])  = BYTE6(a1);
                  HIBYTE(__s1[0])  = HIBYTE(a1);
                  LOWORD(__s1[1])  = v4;
                  BYTE2(__s1[1])  = BYTE2(v4);
                  BYTE3(__s1[1])  = BYTE3(v4);
                  BYTE4(__s1[1])  = BYTE4(v4);
                  BYTE5(__s1[1])  = BYTE5(v4);
                  if (!v26) {
                    goto LABEL_153;
                  }
                  int v34 = memcmp(v26, __s1, __n);
                  goto LABEL_114;
                }
                if (v80 == 1)
                {
                  if (v74 < v77) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  id v41 = (char *)__DataStorage._bytes.getter();
                  if (v41)
                  {
                    uint64_t v42 = __DataStorage._offset.getter();
                    if (__OFSUB__(v77, v42)) {
                      goto LABEL_141;
                    }
                    v41 += v77 - v42;
                  }
                  uint64_t v43 = __DataStorage._length.getter();
                  size_t v44 = v72;
                  if (v43 < v72) {
                    size_t v44 = v43;
                  }
                  if (!v26) {
                    goto LABEL_146;
                  }
                  if (!v41) {
                    goto LABEL_147;
                  }
                  int v34 = memcmp(v26, v41, v44);
                  sub_10000C970(a1, v4);
                  goto LABEL_114;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v64 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                id v65 = (char *)__DataStorage._bytes.getter();
                if (v65)
                {
                  uint64_t v66 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v66)) {
                    goto LABEL_140;
                  }
                  v65 += v63 - v66;
                }
                BOOL v19 = __OFSUB__(v64, v63);
                int64_t v67 = v64 - v63;
                if (v19) {
                  goto LABEL_135;
                }
                uint64_t v68 = __DataStorage._length.getter();
                if (v68 >= v67) {
                  size_t v69 = v67;
                }
                else {
                  size_t v69 = v68;
                }
                if (!v26) {
                  goto LABEL_154;
                }
                unint64_t v4 = a2;
                LODWORD(v7)  = v80;
                if (!v65) {
                  goto LABEL_155;
                }
                int v34 = memcmp(v26, v65, v69);
                swift_release();
                goto LABEL_113;
              case 2:
                uint64_t v27 = *(void *)(v11 + 16);
                swift_retain();
                swift_retain();
                id v28 = (char *)__DataStorage._bytes.getter();
                if (!v28) {
                  goto LABEL_36;
                }
                uint64_t v29 = __DataStorage._offset.getter();
                if (__OFSUB__(v27, v29)) {
                  goto LABEL_124;
                }
                v28 += v27 - v29;
LABEL_36:
                __DataStorage._length.getter();
                LODWORD(v7)  = v80;
                if (!v80)
                {
                  LOWORD(__s1[0])  = a1;
                  BYTE2(__s1[0])  = BYTE2(a1);
                  BYTE3(__s1[0])  = BYTE3(a1);
                  BYTE4(__s1[0])  = v73;
                  BYTE5(__s1[0])  = BYTE5(a1);
                  BYTE6(__s1[0])  = BYTE6(a1);
                  HIBYTE(__s1[0])  = HIBYTE(a1);
                  LOWORD(__s1[1])  = v4;
                  BYTE2(__s1[1])  = BYTE2(v4);
                  BYTE3(__s1[1])  = BYTE3(v4);
                  BYTE4(__s1[1])  = BYTE4(v4);
                  BYTE5(__s1[1])  = BYTE5(v4);
                  if (!v28) {
                    goto LABEL_150;
                  }
                  int v34 = memcmp(v28, __s1, __n);
                  goto LABEL_89;
                }
                if (v80 == 1)
                {
                  if (v74 < v77) {
                    goto LABEL_128;
                  }
                  swift_retain();
                  id v30 = (char *)__DataStorage._bytes.getter();
                  if (v30)
                  {
                    uint64_t v31 = __DataStorage._offset.getter();
                    if (__OFSUB__(v77, v31)) {
                      goto LABEL_139;
                    }
                    v30 += v77 - v31;
                  }
                  uint64_t v32 = __DataStorage._length.getter();
                  size_t v33 = v72;
                  if (v32 < v72) {
                    size_t v33 = v32;
                  }
                  if (!v28) {
                    goto LABEL_143;
                  }
                  if (!v30) {
                    goto LABEL_144;
                  }
                  int v34 = memcmp(v28, v30, v33);
                  unint64_t v4 = a2;
                  sub_10000C970(a1, a2);
LABEL_89:
                  swift_release();
LABEL_113:
                  swift_release();
LABEL_114:
                  sub_10000C970(v11, v10);
                  uint64_t v3 = v76;
                  if (!v34) {
                    return v6;
                  }
                  break;
                }
                uint64_t v56 = *(void *)(a1 + 16);
                uint64_t v71 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                id v57 = (char *)__DataStorage._bytes.getter();
                if (v57)
                {
                  uint64_t v58 = __DataStorage._offset.getter();
                  if (__OFSUB__(v56, v58)) {
                    goto LABEL_138;
                  }
                  v57 += v56 - v58;
                }
                BOOL v19 = __OFSUB__(v71, v56);
                int64_t v59 = v71 - v56;
                if (v19) {
                  goto LABEL_133;
                }
                uint64_t v60 = __DataStorage._length.getter();
                if (v60 >= v59) {
                  size_t v61 = v59;
                }
                else {
                  size_t v61 = v60;
                }
                if (!v28) {
                  goto LABEL_151;
                }
                LODWORD(v7)  = v80;
                if (!v57) {
                  goto LABEL_152;
                }
                int v62 = memcmp(v28, v57, v61);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_10000C970(v11, v10);
                unint64_t v4 = a2;
                uint64_t v3 = v76;
                if (!v62) {
                  return v6;
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v7) {
                  goto LABEL_57;
                }
                if (v7 == 1)
                {
                  if (v74 < v77) {
                    goto LABEL_127;
                  }
                  sub_100013D44(a1, v4);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v21 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  unint64_t v7 = v77 - v36;
                  if (__OFSUB__(v77, v36)) {
                    goto LABEL_132;
                  }
LABEL_52:
                  uint64_t v37 = __DataStorage._length.getter();
                  if (v37 >= v72) {
                    size_t v38 = v72;
                  }
                  else {
                    size_t v38 = v37;
                  }
                  int v39 = memcmp(__s1, (const void *)(v21 + v7), v38);
                  sub_10000C970(a1, v4);
                  sub_10000C970(v11, v10);
                  LODWORD(v7)  = v80;
                  if (!v39) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v52 = *(void *)(a1 + 16);
                  uint64_t v51 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  id v47 = (char *)__DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v53 = __DataStorage._offset.getter();
                    if (__OFSUB__(v52, v53)) {
                      goto LABEL_137;
                    }
                    v47 += v52 - v53;
                  }
                  BOOL v19 = __OFSUB__(v51, v52);
                  int64_t v49 = v51 - v52;
                  if (v19) {
                    goto LABEL_130;
                  }
                  uint64_t v50 = __DataStorage._length.getter();
                  if (!v47) {
                    goto LABEL_149;
                  }
LABEL_82:
                  if (v50 >= v49) {
                    size_t v54 = v49;
                  }
                  else {
                    size_t v54 = v50;
                  }
                  int v55 = memcmp(__s1, v47, v54);
                  swift_release();
                  swift_release();
                  sub_10000C970(v11, v10);
                  unint64_t v4 = a2;
                  LODWORD(v7)  = v80;
                  if (!v55) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0]  = v11;
                LOWORD(__s1[1])  = v10;
                BYTE2(__s1[1])  = BYTE2(v10);
                BYTE3(__s1[1])  = BYTE3(v10);
                BYTE4(__s1[1])  = BYTE4(v10);
                BYTE5(__s1[1])  = BYTE5(v10);
                if (!v7)
                {
LABEL_57:
                  __s2  = a1;
                  char v84 = BYTE2(a1);
                  char v85 = BYTE3(a1);
                  char v86 = v73;
                  char v87 = BYTE5(a1);
                  char v88 = BYTE6(a1);
                  char v89 = HIBYTE(a1);
                  __int16 v90 = v4;
                  char v91 = BYTE2(v4);
                  char v92 = BYTE3(v4);
                  char v93 = BYTE4(v4);
                  char v94 = BYTE5(v4);
                  int v40 = memcmp(__s1, &__s2, __n);
                  sub_10000C970(v11, v10);
                  if (!v40) {
                    return v6;
                  }
                  break;
                }
                if (v7 == 1)
                {
                  if (v74 < v77) {
                    goto LABEL_126;
                  }
                  sub_100013D44(a1, v4);
                  uint64_t v20 = __DataStorage._bytes.getter();
                  if (!v20)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
                    JUMPOUT(0x100140918);
                  }
                  uint64_t v21 = v20;
                  uint64_t v22 = __DataStorage._offset.getter();
                  unint64_t v7 = v77 - v22;
                  if (__OFSUB__(v77, v22)) {
                    goto LABEL_131;
                  }
                  goto LABEL_52;
                }
                uint64_t v45 = *(void *)(a1 + 16);
                uint64_t v46 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                id v47 = (char *)__DataStorage._bytes.getter();
                if (v47)
                {
                  uint64_t v48 = __DataStorage._offset.getter();
                  if (__OFSUB__(v45, v48)) {
                    goto LABEL_136;
                  }
                  v47 += v45 - v48;
                }
                BOOL v19 = __OFSUB__(v46, v45);
                int64_t v49 = v46 - v45;
                if (v19) {
                  goto LABEL_129;
                }
                uint64_t v50 = __DataStorage._length.getter();
                if (!v47) {
                  goto LABEL_148;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_10000C970(v11, v10);
          }
          if (v3 == ++v6) {
            return 0;
          }
          break;
      }
    }
  }
  return 0;
}

uint64_t sub_100140948(unsigned __int8 a1, unint64_t a2, unint64_t a3)
{
  int v3 = a1;
  unint64_t v4 = a3 >> 62;
  uint64_t v7 = 0;
  uint64_t v29 = (int)a2;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a2;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  uint64_t v30 = (uint64_t)a2 >> 32;
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = a2 >> 8;
  unint64_t v25 = HIDWORD(a2);
  unint64_t v26 = a2 >> 24;
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = a2 >> 40;
  unint64_t v21 = a3 >> 8;
  unint64_t v22 = HIBYTE(a2);
  unint64_t v19 = a3 >> 24;
  unint64_t v20 = a3 >> 16;
  unint64_t v17 = a3 >> 40;
  unint64_t v18 = HIDWORD(a3);
  uint64_t v16 = v7;
  while (2)
  {
    uint64_t v8 = BYTE6(a3);
    switch((int)v4)
    {
      case 0:
        goto LABEL_8;
      case 1:
        uint64_t v8 = v30;
        goto LABEL_8;
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
LABEL_8:
        if (v7 != v8)
        {
          if (v4)
          {
            if (v4 == 1)
            {
              if (v7 < v29 || v7 >= v30)
              {
                __break(1u);
LABEL_31:
                __break(1u);
LABEL_32:
                __break(1u);
LABEL_33:
                __break(1u);
LABEL_34:
                __break(1u);
LABEL_35:
                __break(1u);
LABEL_36:
                __break(1u);
LABEL_37:
                __break(1u);
LABEL_38:
                __break(1u);
              }
              uint64_t v9 = __DataStorage._bytes.getter();
              if (!v9) {
                goto LABEL_37;
              }
              uint64_t v10 = v9;
              uint64_t v11 = __DataStorage._offset.getter();
              uint64_t v12 = v7 - v11;
              if (__OFSUB__(v7, v11)) {
                goto LABEL_33;
              }
            }
            else
            {
              if (v7 < *(void *)(a2 + 16)) {
                goto LABEL_32;
              }
              if (v7 >= *(void *)(a2 + 24)) {
                goto LABEL_34;
              }
              uint64_t v13 = __DataStorage._bytes.getter();
              if (!v13) {
                goto LABEL_38;
              }
              uint64_t v10 = v13;
              uint64_t v14 = __DataStorage._offset.getter();
              uint64_t v12 = v7 - v14;
              if (__OFSUB__(v7, v14)) {
                goto LABEL_35;
              }
            }
            if (*(unsigned __int8 *)(v10 + v12) == v3) {
              return v7;
            }
          }
          else
          {
            if (v7 >= BYTE6(a3)) {
              goto LABEL_31;
            }
            v31[0]  = a2;
            v31[1]  = v28;
            long long v31[2] = v27;
            v31[3]  = v26;
            v31[4]  = v25;
            v31[5]  = v24;
            v31[6]  = v23;
            v31[7]  = v22;
            v31[8]  = a3;
            v31[9]  = v21;
            v31[10]  = v20;
            v31[11]  = v19;
            v31[12]  = v18;
            v31[13]  = v17;
            if (v31[v7] == v3) {
              return v7;
            }
          }
          ++v7;
          continue;
        }
        return 0;
      case 3:
        if (v16) {
          goto LABEL_36;
        }
        return 0;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t NANMatchingFilter.count.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

BOOL NANMatchingFilter.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 0;
}

void NANMatchingFilter.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v4 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (unint64_t *)(a3 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_100013D44(v6, *v5);
      Data.hash(into:)();
      sub_10000C970(v6, v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t static NANMatchingFilter.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_100041E14(a1, a3) & 1) == 0) {
    return 0;
  }

  return sub_1000965CC(a2, a4);
}

uint64_t sub_100140E20()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100140E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100141DA0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100140E80(uint64_t a1)
{
  unint64_t v2 = sub_1001414C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100140EBC(uint64_t a1)
{
  unint64_t v2 = sub_1001414C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANMatchingFilter.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100010BCC(&qword_1004801A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001414C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_100141518();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1]  = a3;
    char v13 = 1;
    sub_100010BCC(&qword_1004801B8);
    sub_100141F7C(&qword_1004801C0, (void (*)(void))sub_1000742DC);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANMatchingFilter.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  NANMatchingFilter.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

uint64_t NANMatchingFilter.init(from:)(void *a1)
{
  return sub_10014169C(a1);
}

Swift::Int sub_100141130()
{
  uint64_t v1 = *((void *)v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  NANMatchingFilter.hash(into:)((uint64_t)v4, v2, v1);
  return Hasher._finalize()();
}

void sub_100141180(uint64_t a1)
{
  NANMatchingFilter.hash(into:)(a1, *v1, *((void *)v1 + 1));
}

Swift::Int sub_10014118C()
{
  uint64_t v1 = *((void *)v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  NANMatchingFilter.hash(into:)((uint64_t)v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001411D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10014169C(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_100141208(void *a1)
{
  return NANMatchingFilter.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_100141228(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a2 + 1);
  if ((sub_100041E14(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return sub_1000965CC(v2, v3);
}

CoreP2P::NANMatchingFilter __swiftcall NANMatchingFilter.init(type:)(CoreP2P::NANMatchingFilter::FilterType type)
{
  uint64_t v1 = &_swiftEmptyArrayStorage;
  result.matchingFilterList._rawValue  = v1;
  result.type  = type;
  return result;
}

uint64_t sub_100141294()
{
  return _s7CoreP2P17NANMatchingFilterV11descriptionSSvg_0(*v0);
}

uint64_t NANMatchingFilter.FilterType.description.getter(char a1)
{
  uint64_t result = 0x6269726373627553;
  switch(a1)
  {
    case 2:
      uint64_t result = 0x206873696C627550;
      break;
    case 3:
      uint64_t result = 0x206873696C627550;
      break;
    case 4:
      uint64_t result = 0x65522065676E6152;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100141368()
{
  uint64_t result = 0x6269726373627553;
  switch(*v0)
  {
    case 2:
      uint64_t result = 0x206873696C627550;
      break;
    case 3:
      uint64_t result = 0x206873696C627550;
      break;
    case 4:
      uint64_t result = 0x65522065676E6152;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100141430()
{
  if (*v0) {
    return 0x757145746F4E7874;
  }
  else {
    return 0x526C617571457874;
  }
}

unint64_t _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F358, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1001414C4()
{
  unint64_t result = qword_1004801A8;
  if (!qword_1004801A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801A8);
  }
  return result;
}

unint64_t sub_100141518()
{
  unint64_t result = qword_1004801B0;
  if (!qword_1004801B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801B0);
  }
  return result;
}

uint64_t _s7CoreP2P17NANMatchingFilterV11descriptionSSvg_0(char a1)
{
  uint64_t v2 = 0x6269726373627553;
  unint64_t v3 = 0xEC00000058542065;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xEC00000058522065;
      break;
    case 2:
      uint64_t v2 = 0x206873696C627550;
      unint64_t v3 = 0xEA00000000005854;
      break;
    case 3:
      uint64_t v2 = 0x206873696C627550;
      unint64_t v3 = 0xEA00000000005852;
      break;
    case 4:
      unint64_t v3 = 0xEE0065736E6F7073;
      uint64_t v2 = 0x65522065676E6152;
      break;
    default:
      break;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 62;
  v5._object  = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x6E69686374614D3CLL;
}

uint64_t sub_10014169C(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100480208);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  Swift::String v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001414C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30]  = 0;
  sub_100141F28();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_100010BCC(&qword_1004801B8);
  v8[15]  = 1;
  sub_100141F7C(&qword_100480218, (void (*)(void))sub_10008B6F4);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

unint64_t sub_1001418B0()
{
  unint64_t result = qword_1004801C8;
  if (!qword_1004801C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801C8);
  }
  return result;
}

unint64_t sub_100141908()
{
  unint64_t result = qword_1004801D0;
  if (!qword_1004801D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801D0);
  }
  return result;
}

unint64_t sub_100141960()
{
  unint64_t result = qword_1004801D8;
  if (!qword_1004801D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801D8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANMatchingFilter()
{
  return &type metadata for NANMatchingFilter;
}

unsigned char *storeEnumTagSinglePayload for NANMatchingFilter.FilterType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100141B48);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.FilterType()
{
  return &type metadata for NANMatchingFilter.FilterType;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.RespondCondition()
{
  return &type metadata for NANMatchingFilter.RespondCondition;
}

unsigned char *_s7CoreP2P17NANMatchingFilterV16RespondConditionOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100141C60);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.CodingKeys()
{
  return &type metadata for NANMatchingFilter.CodingKeys;
}

unint64_t sub_100141C9C()
{
  unint64_t result = qword_1004801E0;
  if (!qword_1004801E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801E0);
  }
  return result;
}

unint64_t sub_100141CF4()
{
  unint64_t result = qword_1004801E8;
  if (!qword_1004801E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801E8);
  }
  return result;
}

unint64_t sub_100141D4C()
{
  unint64_t result = qword_1004801F0;
  if (!qword_1004801F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801F0);
  }
  return result;
}

uint64_t sub_100141DA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DC530)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100141E80()
{
  unint64_t result = qword_1004801F8;
  if (!qword_1004801F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004801F8);
  }
  return result;
}

unint64_t sub_100141ED4()
{
  unint64_t result = qword_100480200;
  if (!qword_100480200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480200);
  }
  return result;
}

unint64_t sub_100141F28()
{
  unint64_t result = qword_100480210;
  if (!qword_100480210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480210);
  }
  return result;
}

uint64_t sub_100141F7C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(&qword_1004801B8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Data.load<A>(as:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  int64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v13 = (char *)v23 - v12;
  switch(v14 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_22;
      }
      if (HIDWORD(a2) - (int)a2 < v9) {
        goto LABEL_11;
      }
      goto LABEL_6;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      BOOL v17 = __OFSUB__(v16, v15);
      int64_t v18 = v16 - v15;
      if (v17) {
        goto LABEL_21;
      }
      if (v18 < v9)
      {
LABEL_11:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v21 = 0;
        *(void *)(v21 + 8)  = 0;
        *(unsigned char *)(v21 + 16)  = 2;
        return swift_willThrow();
      }
LABEL_6:
      uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
      if ((v19 & (unint64_t)(v19 + 1)) != 0)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      uint64_t v24 = v11;
      if (v19 > 0xF
        || *(uint64_t *)(v8 + 72) > 1024 && !swift_stdlib_isStackAllocationSafe())
      {
        swift_slowAlloc();
        sub_100142498(a2, a3, v9, a4, v24);
        if (!v4) {
          return swift_slowDealloc();
        }
        swift_errorRelease();
        swift_slowDealloc();
        __break(1u);
LABEL_24:
        swift_willThrow();
        swift_errorRelease();
        __break(1u);
        JUMPOUT(0x100142308);
      }
      v23[1]  = v23;
      __chkstk_darwin();
      sub_100142498(a2, a3, v9, a4, (uint64_t)v10);
      if (v4) {
        goto LABEL_24;
      }
      unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v22(v13, v10, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(v24, v13, a4);
    case 3uLL:
      if (v9 > 0) {
        goto LABEL_11;
      }
      goto LABEL_6;
    default:
      if (BYTE6(a3) < v9) {
        goto LABEL_11;
      }
      goto LABEL_6;
  }
}

uint64_t Data.colonFormatedString.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16)  = a1;
  *(void *)(v4 + 24)  = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16)  = sub_100142914;
  *(void *)(v5 + 24)  = v4;
  sub_100013D44(a1, a2);
  sub_100013D44(a1, a2);
  sub_100010BCC(&qword_100480220);
  sub_100142988();
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)();
  sub_10000C970(a1, a2);
  swift_release();
  return v6;
}

uint64_t sub_10014241C(char a1)
{
  sub_100010BCC((uint64_t *)&unk_10047CF90);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16)  = xmmword_1003B2450;
  *(void *)(v2 + 56)  = &type metadata for UInt8;
  *(void *)(v2 + 64)  = &protocol witness table for UInt8;
  *(unsigned char *)(v2 + 32)  = a1;

  return String.init(format:_:)();
}

uint64_t sub_100142498@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, size_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int64_t v9 = (const void *)a2;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 <= a1 >> 32)
      {
        sub_100013D44(a1, a2);
        BOOL v17 = (char *)__DataStorage._bytes.getter();
        if (!v17)
        {
LABEL_13:
          __DataStorage._length.getter();
          uint64_t v19 = (void *)UnsafeMutableBufferPointer.baseAddress.getter();
          if (v19)
          {
            if (v17)
            {
              memcpy(v19, v17, a3);
              if (!v5)
              {
                sub_10000C970(a1, (unint64_t)v9);
                goto LABEL_23;
              }
              goto LABEL_35;
            }
          }
          else
          {
LABEL_31:
            __break(1u);
          }
          __break(1u);
          goto LABEL_33;
        }
        uint64_t v18 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)a1, v18))
        {
          v17 += (int)a1 - v18;
          goto LABEL_13;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      __break(1u);
      goto LABEL_26;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      memset(__src, 0, 14);
      uint64_t v11 = (void *)UnsafeMutableBufferPointer.baseAddress.getter();
      if (v11) {
        goto LABEL_8;
      }
      __break(1u);
      goto LABEL_31;
    default:
      __src[0]  = a1;
      LOWORD(__src[1])  = a2;
      BYTE2(__src[1])  = BYTE2(a2);
      BYTE3(__src[1])  = BYTE3(a2);
      BYTE4(__src[1])  = BYTE4(a2);
      BYTE5(__src[1])  = BYTE5(a2);
      uint64_t v11 = (void *)UnsafeMutableBufferPointer.baseAddress.getter();
      if (v11)
      {
LABEL_8:
        memcpy(v11, __src, a3);
        goto LABEL_23;
      }
      __break(1u);
LABEL_4:
      __n  = a3;
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v14 = __DataStorage._bytes.getter();
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = __DataStorage._offset.getter();
        if (__OFSUB__(v12, v16))
        {
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        int64_t v9 = (const void *)(v15 + v12 - v16);
      }
      else
      {
        int64_t v9 = 0;
      }
      if (__OFSUB__(v13, v12))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      __DataStorage._length.getter();
      unint64_t v20 = (void *)UnsafeMutableBufferPointer.baseAddress.getter();
      if (!v20)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (!v9)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        sub_10000C970(a1, (unint64_t)v9);
        __break(1u);
        goto LABEL_36;
      }
      memcpy(v20, v9, __n);
      if (v5)
      {
LABEL_36:
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x10014279CLL);
      }
      swift_release();
      swift_release();
LABEL_23:
      uint64_t v21 = UnsafeMutableBufferPointer.baseAddress.getter();
      if (!v21) {
        goto LABEL_29;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v21, a4);
  }
}

uint64_t Data.init(uuid:)(uint64_t a1)
{
  uint64_t v13 = UUID.uuid.getter();
  char v14 = v2;
  char v15 = v3;
  char v16 = v4;
  char v17 = v5;
  char v18 = v6;
  char v19 = v7;
  char v20 = v8;
  char v21 = v9;
  uint64_t v10 = sub_10011A3BC((uint64_t)&v13, (uint64_t)&v22);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

uint64_t sub_1001428DC()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100142914(char a1)
{
  return sub_10014241C(a1);
}

uint64_t sub_10014291C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100142954@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2  = result;
  a2[1]  = v5;
  return result;
}

unint64_t sub_100142988()
{
  unint64_t result = qword_100480228;
  if (!qword_100480228)
  {
    sub_100014434(&qword_100480220);
    sub_1001429FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480228);
  }
  return result;
}

unint64_t sub_1001429FC()
{
  unint64_t result = qword_100480230;
  if (!qword_100480230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480230);
  }
  return result;
}

BOOL static NANBeacon.Metadata.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100142CF0(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL, a7, a8);
}

uint64_t NANBeacon.Metadata.channel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8)  = result;
  *(unsigned char *)(v1 + 12)  = BYTE4(result);
  *(unsigned char *)(v1 + 13)  = BYTE5(result);
  return result;
}

BOOL sub_100142A7C(uint64_t a1, uint64_t a2)
{
  return sub_100142CF0(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.hash(into:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, a3);

  return swift_bridgeObjectRelease();
}

uint64_t static NANDiscoveryBeaconTransmissionSchedule.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
  }
  else {
    return 0;
  }
}

Swift::Int NANDiscoveryBeaconTransmissionSchedule.hashValue.getter(Swift::UInt64 a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v5, a2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_100142B9C()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100142C08(uint64_t a1)
{
  uint64_t v3 = v1[1];
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100142C64()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100142CCC(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a2[1]);
  }
  else {
    return 0;
  }
}

BOOL sub_100142CF0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = 0;
  if (a1 == a5 && a2 == a6)
  {
    if (((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a6 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a2))
      {
        case 2:
          BOOL result = 0;
          if (BYTE5(a6) == 2) {
            goto LABEL_18;
          }
          break;
        case 3:
          BOOL result = 0;
          if (BYTE5(a6) == 3) {
            goto LABEL_18;
          }
          break;
        case 4:
          BOOL result = 0;
          if (BYTE5(a6) == 4) {
            goto LABEL_18;
          }
          break;
        case 5:
          BOOL result = 0;
          if (BYTE5(a6) == 5) {
            goto LABEL_18;
          }
          break;
        case 6:
          BOOL result = 0;
          if (BYTE5(a6) == 6) {
            goto LABEL_18;
          }
          break;
        default:
          if (BYTE5(a6) - 2 < 5) {
            return 0;
          }
          BOOL result = 0;
          if (((a2 & 0x10000000000) == 0) != ((a6 >> 40) & 1))
          {
LABEL_18:
            if (a3 == a7) {
              BOOL result = a4 == a8;
            }
          }
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100142E18()
{
  unint64_t result = qword_100480238[0];
  if (!qword_100480238[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100480238);
  }
  return result;
}

unint64_t sub_100142E70()
{
  unint64_t result = qword_100487B70;
  if (!qword_100487B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487B70);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBeacon()
{
  return &type metadata for NANBeacon;
}

uint64_t getEnumTagSinglePayload for NANBeacon.Metadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBeacon.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBeacon.Metadata()
{
  return &type metadata for NANBeacon.Metadata;
}

ValueMetadata *type metadata accessor for NANDiscoveryBeaconTransmissionSchedule()
{
  return &type metadata for NANDiscoveryBeaconTransmissionSchedule;
}

uint64_t sub_100142F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_100142F84()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100143028(uint64_t *a1, uint64_t *a2)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_100143108(uint64_t a1)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_100143188(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100143204(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100143280(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1001432FC(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100143378(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6)  = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6)  = *a1;
        break;
      case 3:
        LODWORD(v6)  = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6)  = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6)  = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_10014352C(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1  = v13;
          a1[2]  = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1  = v13;
        }
        else
        {
          *a1  = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1  = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8]  = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8]  = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8]  = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x10014376CLL);
    case 4:
      *(_DWORD *)&a1[v8]  = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for SplitBitEnum()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001437AC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100143834(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 32);
  v10[0]  = *(_OWORD *)(a2 + 16);
  v10[1]  = v4;
  long long v12 = v10[0];
  long long v13 = v4;
  uint64_t v14 = v3;
  long long v11 = *(_OWORD *)(a2 + 56);
  long long v15 = v11;
  type metadata accessor for SplitBitEnum.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  size_t v8 = (char *)v10 - v7;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_getAssociatedTypeWitness();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001439E8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v37 = a7;
  uint64_t v30 = a9;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = AssociatedTypeWitness;
  __chkstk_darwin();
  int v34 = (char *)&v29 - v18;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  type metadata accessor for SplitBitEnum.CodingKeys();
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v31 = *(void *)(v35 - 8);
  __chkstk_darwin();
  char v20 = (char *)&v29 - v19;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = v36;
  uint64_t v36 = a6;
  uint64_t v42 = a6;
  uint64_t v43 = v37;
  uint64_t v44 = a8;
  uint64_t v21 = type metadata accessor for SplitBitEnum();
  uint64_t v37 = *(void *)(v21 - 8);
  __chkstk_darwin();
  unint64_t v23 = (char *)&v29 - v22;
  sub_1000369C4(a1, a1[3]);
  uint64_t v24 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v45 = v21;
    uint64_t v25 = v31;
    uint64_t v26 = v32;
    uint64_t v27 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v35);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v34, v27);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v30, v23, v45);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_100143D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_100143DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001437AC(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_100143DF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static NANBitmap.Band.tvWhiteSpaces.getter();
  *a1  = result & 1;
  return result;
}

uint64_t sub_100143E30(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100143E84(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100143ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100143D1C(a1, a2);
}

uint64_t sub_100143EE8@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001439E8(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3);
}

uint64_t sub_100143F14(void *a1, uint64_t a2)
{
  return sub_100143834(a1, a2);
}

uint64_t sub_100143F2C(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable();
  uint64_t v3 = *(void *)(a1 + 64);

  return OptionSet<>.init()(a1, WitnessTable, v3);
}

uint64_t sub_100143F94(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable();

  return OptionSet<>.contains(_:)(a1, a2, WitnessTable);
}

uint64_t sub_100143FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001440BC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.union(_:));
}

uint64_t sub_10014400C(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  OptionSet.intersection(_:)();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(v2, a2);
}

uint64_t sub_1001440A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001440BC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.symmetricDifference(_:));
}

uint64_t sub_1001440BC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  WitnessTable  = swift_getWitnessTable();
  a4(a1, a2, WitnessTable);
  unsigned int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  v10(v4, a2);

  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
}

uint64_t sub_10014418C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable();
  char v5 = OptionSet<>.insert(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  return v5 & 1;
}

uint64_t sub_100144224(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable();

  return OptionSet<>.remove(_:)(a1, a2, WitnessTable);
}

uint64_t sub_10014428C(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  OptionSet<>.update(with:)();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(a1, a2);
}

uint64_t sub_100144324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001443B8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))&OptionSet<>.formUnion(_:));
}

uint64_t sub_10014433C(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable();
  uint64_t v5 = *(void *)(a2 + 64);

  return OptionSet<>.formIntersection(_:)(a1, a2, WitnessTable, v5);
}

uint64_t sub_1001443A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001443B8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, void))&OptionSet<>.formSymmetricDifference(_:));
}

uint64_t sub_1001443B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  WitnessTable  = swift_getWitnessTable();
  a4(a1, a2, WitnessTable, *(void *)(a2 + 64));
  size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v8(a1, a2);
}

uint64_t sub_100144454(uint64_t a1, uint64_t a2)
{
  SetAlgebra.subtracting(_:)();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v4(v2, a2);
}

uint64_t sub_1001444C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100143D1C(a1, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v5(a3, 0, 1, a2);
}

uint64_t sub_10014453C@<X0>(uint64_t a1@<X8>)
{
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t sub_1001445BC()
{
  return sub_1001445F4() & 1;
}

uint64_t sub_1001445F4()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100144668(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable();

  return SetAlgebra<>.init(arrayLiteral:)(a1, a2, WitnessTable);
}

uint64_t sub_1001446D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001446EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100144708()
{
  return swift_getWitnessTable();
}

uint64_t sub_100144724()
{
  return swift_getWitnessTable();
}

uint64_t sub_100144740()
{
  swift_getAssociatedTypeWitness();

  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_1001447B0(uint64_t a1, uint64_t a2)
{
  WitnessTable  = swift_getWitnessTable();
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 16);

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, v5);
}

uint64_t sub_100144824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WitnessTable  = swift_getWitnessTable();
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a2 + 64) + 8) + 16);

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, v7);
}

uint64_t type metadata accessor for SplitBitEnum.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001448B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

unsigned char *sub_1001448B8(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100144954);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10014497C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100144998()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001449B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001449D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  unsigned int v4 = (unsigned __int8 *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v20 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v21) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v20 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v21) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v20 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v21) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v20 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v21) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v20 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_5:
    sub_100148D14(*(void *)(a1 + 48) + *(void *)(v2 + 72) * v14, (uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_10014C9B0((uint64_t)v6, (uint64_t)v4, type metadata accessor for AWDLPeer.AdvertisedService);
    unsigned __int8 v15 = *v4;
    type metadata accessor for AWDLPeer(0);
    sub_1001742AC(v15);
    uint64_t result = sub_100148C94((uint64_t)v4, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v21) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v20 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v21) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v20 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t AWDLPeer.averageRSSIAcrossBands.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AWDLPeer(0);
  uint64_t v3 = __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0 + *(int *)(v3 + 96);
  uint64_t v7 = *(void *)v6;
  int v8 = *(unsigned __int8 *)(v6 + 8);
  sub_100148D14(v1, (uint64_t)v5, type metadata accessor for AWDLPeer);
  if (v8 == 1) {
    uint64_t v7 = *(void *)&v5[*(int *)(v2 + 92)];
  }
  sub_100148C94((uint64_t)v5, type metadata accessor for AWDLPeer);
  return v7;
}

uint64_t type metadata accessor for AWDLPeer(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_1004803C0);
}

uint64_t AWDLPeer.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

unint64_t AWDLPeer.macAddress.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 20)) | ((unint64_t)*(unsigned int *)(v0 + *(int *)(v1 + 20) + 2) << 16);
}

uint64_t AWDLPeer.macAddress.setter(unint64_t a1)
{
  char v2 = a1;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t result = type metadata accessor for AWDLPeer(0);
  uint64_t v9 = (unsigned char *)(v1 + *(int *)(result + 20));
  *uint64_t v9 = v2;
  v9[1]  = v3;
  void v9[2] = v4;
  v9[3]  = v5;
  v9[4]  = v6;
  v9[5]  = v7;
  return result;
}

uint64_t (*AWDLPeer.macAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.lastUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 24);
  uint64_t v4 = type metadata accessor for DispatchTime();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AWDLPeer.numberOfActionFrames.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 28));
}

uint64_t AWDLPeer.numberOfActionFrames.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0);
  *(void *)(v1 + *(int *)(result + 28))  = a1;
  return result;
}

uint64_t (*AWDLPeer.numberOfActionFrames.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.deprecatedElectionParameter.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 32));
}

__n128 AWDLPeer.electionParameter.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 36);
  char v4 = *(unsigned char *)(v3 + 48);
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v5;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32)  = result;
  *(unsigned char *)(a1 + 48)  = v4;
  return result;
}

uint64_t AWDLPeer.serviceParameter.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 40);
  uint64_t v2 = *(void *)v1;
  sub_1001450E0(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
  return v2;
}

uint64_t sub_1001450E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15) {
    return sub_100013D44(a3, a4);
  }
  return result;
}

uint64_t AWDLPeer.lastProcessedServiceUpdateIndicator.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 44)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 44) + 2) << 16);
}

uint64_t AWDLPeer.synchronizationParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer(0);
  return sub_1000136F4(v1 + *(int *)(v3 + 48), a1, &qword_100480340);
}

uint64_t AWDLPeer.arpa.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLPeer.dataPathStateParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer(0);
  return sub_1000136F4(v1 + *(int *)(v3 + 56), a1, (uint64_t *)&unk_1004882F0);
}

__n128 AWDLPeer.nanSynchronization.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 60);
  uint64_t v4 = *(void *)(v3 + 32);
  char v5 = *(unsigned char *)(v3 + 40);
  __n128 result = *(__n128 *)v3;
  long long v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v7;
  *(void *)(a1 + 32)  = v4;
  *(unsigned char *)(a1 + 40)  = v5;
  return result;
}

uint64_t AWDLPeer.version.getter()
{
  uint64_t v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 64)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 64) + 2) << 16);
}

__n128 AWDLPeer.realtimeGroup.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 68);
  uint64_t v4 = *(void *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16)  = v6;
  *(void *)(a1 + 32)  = v4;
  return result;
}

uint64_t AWDLPeer.preferredChannels.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLPeer.advertisedServices.getter()
{
  type metadata accessor for AWDLPeer(0);

  return swift_bridgeObjectRetain();
}

uint64_t AWDLPeer.countryCode.getter()
{
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v2 = (unsigned __int16 *)((char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for AWDLPeer(0);
  sub_1000136F4(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_1004882F0);
  uint64_t v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_1000380B4((uint64_t)v2, (uint64_t *)&unk_1004882F0);
  }
  else
  {
    unsigned int v5 = *v2;
    char v6 = *((unsigned char *)v2 + 2);
    sub_100148C94((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
    if ((v6 & 1) == 0)
    {
      unsigned int v7 = v5 >> 8;
      return v5 | (v7 << 8);
    }
  }
  if (qword_10047BFF8 != -1) {
    swift_once();
  }
  LOBYTE(v5)  = static CountryCode.unknown;
  unsigned int v7 = HIBYTE(static CountryCode.unknown);
  return v5 | (v7 << 8);
}

uint64_t AWDLPeer.infrastructureChannel.getter()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AWDLPeer(0);
  uint64_t v5 = __chkstk_darwin();
  unsigned int v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = (unint64_t *)(v1 + *(int *)(v5 + 72));
  unint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100148D14(v1, (uint64_t)v7, type metadata accessor for AWDLPeer);
  if (v10)
  {
    long long v11 = type metadata accessor for AWDLPeer;
    uint64_t v12 = (uint64_t)v7;
LABEL_6:
    sub_100148C94(v12, v11);
    return v9 & 0xFFFFFFFFFFFFLL;
  }
  sub_1000136F4((uint64_t)&v7[*(int *)(v4 + 56)], (uint64_t)v3, (uint64_t *)&unk_1004882F0);
  sub_100148C94((uint64_t)v7, type metadata accessor for AWDLPeer);
  uint64_t v13 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v3, 1, v13) != 1)
  {
    unint64_t v9 = *((unsigned int *)v3 + 5) | ((unint64_t)*((unsigned __int16 *)v3 + 12) << 32);
    long long v11 = type metadata accessor for AWDLActionFrame.DataPathState;
    uint64_t v12 = (uint64_t)v3;
    goto LABEL_6;
  }
  sub_1000380B4((uint64_t)v3, (uint64_t *)&unk_1004882F0);
  unint64_t v9 = 0x300000000;
  return v9 & 0xFFFFFFFFFFFFLL;
}

uint64_t AWDLPeer.supportsSimultaneousDualBand.getter()
{
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AWDLPeer(0);
  sub_1000136F4(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_1004882F0);
  uint64_t v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_1000380B4((uint64_t)v2, (uint64_t *)&unk_1004882F0);
    return 0;
  }
  else
  {
    uint64_t v5 = v2[84];
    sub_100148C94((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
  }
  return v5;
}

uint64_t AWDLPeer.supportsDFSProxy.getter()
{
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AWDLPeer(0);
  sub_1000136F4(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_1004882F0);
  uint64_t v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_1000380B4((uint64_t)v2, (uint64_t *)&unk_1004882F0);
    return 0;
  }
  else
  {
    uint64_t v5 = v2[85];
    sub_100148C94((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
  }
  return v5;
}

unint64_t AWDLPeer.syncContention.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 84));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t AWDLPeer.mactime.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 88));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t AWDLPeer.AdvertisedService.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 41);
  *(void *)a1  = *(void *)(v1 + 8);
  *(void *)(a1 + 8)  = v2;
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 32)  = v5;
  *(unsigned char *)(a1 + 33)  = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 AWDLPeer.AdvertisedService.service.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8)  = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24)  = v4;
  *(_WORD *)(v1 + 40)  = *(_WORD *)(a1 + 32);
  return result;
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000136F4(v1 + 48, a1, &qword_100480348);
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.setter(uint64_t a1)
{
  return sub_10006D1A4(a1, v1 + 48, &qword_100480348);
}

uint64_t (*AWDLPeer.AdvertisedService.advertisementInfo.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  return sub_100148D14(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLPeer.AdvertisedService(0) + 28);

  return sub_100148D7C(a1, v3);
}

uint64_t (*AWDLPeer.AdvertisedService.datapathInfo.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 41);
  String.lowercased()();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

BOOL static AWDLPeer.AdvertisedService.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  __int16 v4 = *(unsigned __int8 *)(a1 + 40);
  __int16 v5 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  __int16 v8 = *(unsigned __int8 *)(a2 + 40);
  __int16 v9 = *(unsigned __int8 *)(a2 + 41);
  sub_10001D82C();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)()
      && sub_10012625C(v2, v3, v4 | (v5 << 8), v6, v7, v8 | (v9 << 8));
}

Swift::Int AWDLPeer.AdvertisedService.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100145CE0()
{
  return Hasher._finalize()();
}

uint64_t AWDLPeer.reachability.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 104));
}

uint64_t AWDLPeer.peerPresencePosted.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 108));
}

uint64_t AWDLPeer.peerPresencePosted.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0);
  *(unsigned char *)(v1 + *(int *)(result + 108))  = a1;
  return result;
}

uint64_t (*AWDLPeer.peerPresencePosted.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 112));
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0);
  *(unsigned char *)(v1 + *(int *)(result + 112))  = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverTrafficRegistrations.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 116));
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0);
  *(unsigned char *)(v1 + *(int *)(result + 116))  = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverResponderTrafficRegistrations.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.init(macAddress:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v35 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v7 = (int *)type metadata accessor for AWDLPeer(0);
  uint64_t v8 = v7[6];
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  unint64_t v33 = HIDWORD(a1);
  unint64_t v34 = a1 >> 40;
  unint64_t v31 = a1 >> 16;
  unint64_t v32 = a1 >> 24;
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  *(void *)(a2 + v7[7])  = 0;
  uint64_t v9 = a2 + v7[8];
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8)  = 0;
  *(void *)(v9 + 16)  = 0;
  *(_WORD *)(v9 + 24)  = 256;
  uint64_t v10 = a2 + v7[9];
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16)  = 0u;
  *(_OWORD *)(v10 + 32)  = 0u;
  *(unsigned char *)(v10 + 48)  = 1;
  long long v11 = (void *)(a2 + v7[10]);
  *long long v11 = 0;
  v11[1]  = 0;
  void v11[2] = 0;
  v11[3]  = 0xF000000000000000;
  uint64_t v12 = a2 + v7[11];
  *(_WORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 2)  = 1;
  uint64_t v13 = (_OWORD *)(a2 + v7[12]);
  v13[1]  = 0u;
  void v13[2] = 0u;
  *uint64_t v13 = 0u;
  unint64_t v14 = (void *)(a2 + v7[13]);
  *unint64_t v14 = 0;
  v14[1]  = 0;
  v14[2]  = 0;
  uint64_t v15 = a2 + v7[14];
  uint64_t v16 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = a2 + v7[15];
  *(void *)(v17 + 32)  = 0;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16)  = 0u;
  *(unsigned char *)(v17 + 40)  = 1;
  uint64_t v18 = a2 + v7[16];
  *(_WORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 2)  = 1;
  uint64_t v19 = a2 + v7[17];
  *(_OWORD *)uint64_t v19 = xmmword_1003B00A0;
  *(void *)(v19 + 24)  = 0;
  *(void *)(v19 + 32)  = 0;
  *(void *)(v19 + 16)  = 0;
  uint64_t v20 = (void *)(a2 + v7[18]);
  *uint64_t v20 = 0;
  v20[1]  = 0;
  int64_t v21 = (void *)(a2 + v7[19]);
  uint64_t v22 = sub_100017DF0((uint64_t)&off_1004503D8);
  *int64_t v21 = &_swiftEmptySetSingleton;
  v21[1]  = v22;
  *(void *)(a2 + v7[20])  = &_swiftEmptySetSingleton;
  uint64_t v23 = a2 + v7[21];
  *(_DWORD *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 4)  = 1;
  uint64_t v24 = a2 + v7[22];
  *(_DWORD *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 4)  = 1;
  uint64_t v25 = a2 + v7[23];
  *(void *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 8)  = 1;
  uint64_t v26 = a2 + v7[24];
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8)  = 1;
  uint64_t v27 = a2 + v7[25];
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8)  = 1;
  *(unsigned char *)(a2 + v7[26])  = 0;
  *(unsigned char *)(a2 + v7[27])  = 0;
  *(unsigned char *)(a2 + v7[28])  = 0;
  *(unsigned char *)(a2 + v7[29])  = 0;
  uint64_t v28 = a2 + v7[5];
  *(_WORD *)uint64_t v28 = a1;
  *(unsigned char *)(v28 + 2)  = v31;
  *(unsigned char *)(v28 + 3)  = v32;
  *(unsigned char *)(v28 + 4)  = v33;
  *(unsigned char *)(v28 + 5)  = v34;
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(a2 + v8, v6, v35);
}

uint64_t sub_1001462B0(uint64_t a1, int a2)
{
  void (**v266)(long long *__return_ptr, uint64_t);
  uint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  unsigned __int16 *v274;
  uint64_t v275;
  char *v276;
  __int16 v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  long long *v295;
  long long *v296;
  void (**v297)(long long *__return_ptr, uint64_t);
  long long *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t (*v303)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v304;
  double (*v305)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  unint64_t v306;
  uint64_t (*v307)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v308;
  void (**v309)(long long *__return_ptr, uint64_t);
  double (*v310)@<D0>(uint64_t@<X8>);
  double (*v311)@<D0>(uint64_t@<X8>);
  void (**v312)(long long *__return_ptr, uint64_t);
  double (*v313)@<D0>(uint64_t@<X8>);
  void *v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int (**v328)(uint64_t, uint64_t, uint64_t);
  uint64_t *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int16 *v341;
  long long v342;
  char *v343;
  uint64_t v344;
  unint64_t v345;
  void (**v346)(long long *__return_ptr, uint64_t);
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  long long v351;
  long long v352;
  __int16 v353;
  long long v354;
  long long v355;
  __int16 v356;
  _OWORD v357[3];
  uint64_t v358;
  long long v359;
  long long v360;
  __int16 v361;
  long long v362;
  long long v363;
  __int16 v364;
  long long v365;
  long long v366;
  __int16 v367;
  long long v368;
  __int16 v369;
  long long v370;
  long long v371;
  long long v372;
  __int16 v373;

  LODWORD(v3)  = a2;
  v300  = 0;
  sub_100010BCC((uint64_t *)&unk_100486B80);
  __chkstk_darwin();
  v320  = (char *)&v288 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v314  = (uint64_t *)((char *)&v288 - v6);
  __chkstk_darwin();
  v319  = (uint64_t)&v288 - v7;
  __chkstk_darwin();
  v344  = (uint64_t)&v288 - v8;
  v338  = type metadata accessor for AWDLPeer.AdvertisedService(0);
  v325  = *(void *)(v338 - 8);
  __chkstk_darwin();
  v318  = (uint64_t)&v288 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v317  = (uint64_t)&v288 - v10;
  __chkstk_darwin();
  v343  = (char *)&v288 - v11;
  sub_100010BCC(&qword_1004804F8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v288 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v337  = (char *)&v288 - v14;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  v331  = (uint64_t)&v288 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v321  = (uint64_t *)((char *)&v288 - v16);
  v334  = type metadata accessor for DNSRecords.SRV();
  uint64_t v17 = *(void *)(v334 - 8);
  __chkstk_darwin();
  v332  = (uint64_t)&v288 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v299  = (uint64_t)&v288 - v19;
  v301  = v20;
  __chkstk_darwin();
  v316  = (uint64_t)&v288 - v21;
  v333  = sub_100010BCC(&qword_100480500);
  v322  = *(void *)(v333 - 8);
  __chkstk_darwin();
  v330  = (uint64_t *)((char *)&v288 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v315  = (uint64_t *)((char *)&v288 - v23);
  v323  = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  v324  = (uint64_t *)((char *)&v288 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v340  = (uint64_t)&v288 - v25;
  uint64_t v26 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
  __chkstk_darwin();
  uint64_t v28 = (unsigned __int8 *)&v288 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for AWDLPeer(0);
  uint64_t v30 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))a1;
  uint64_t v31 = *(int *)(v29 + 44);
  v349  = v2;
  v341  = (unsigned __int16 *)(v2 + v31);
  int v32 = *(unsigned __int8 *)(v2 + v31 + 2);
  unint64_t v33 = *(char **)(a1 + 16);
  v335  = (int *)v29;
  if (v33)
  {
    unint64_t v34 = (int *)v29;
    LODWORD(v346)  = v32;
    uint64_t v35 = (uint64_t)v30 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    v326  = v17;
    v297  = (void (**)(long long *__return_ptr, uint64_t))(v17 + 56);
    v298  = &v360;
    v295  = &v352;
    v296  = &v366;
    v328  = v30;
    swift_bridgeObjectRetain();
    v304  = 0;
    v305  = 0;
    v310  = 0;
    v311  = 0;
    v308  = 0;
    v309  = 0;
    v302  = 0;
    v303  = 0;
    v306  = 0;
    v307  = 0;
    v312  = 0;
    v313  = 0;
    LODWORD(v339)  = 0;
    LODWORD(v327)  = 0;
    uint64_t v36 = 0;
    v348  = *(void *)(v26 + 72);
    uint64_t v37 = v35;
    v329  = (uint64_t *)&_swiftEmptyDictionarySingleton;
    LODWORD(v345)  = v3;
    v347  = v35;
    v336  = v13;
    while (1)
    {
      uint64_t v13 = v33;
      if (v36 >= v33)
      {
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
      while (2)
      {
        uint64_t v40 = v37 + v348 * (void)v36++;
        sub_100148D14(v40, (uint64_t)v28, type metadata accessor for AWDLActionFrame.AWDLAttribute);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
LABEL_13:
            uint64_t v41 = v340;
            sub_10014C9B0((uint64_t)v28, v340, type metadata accessor for AWDLActionFrame.ServiceResponse);
            if ((v346 & 1) == 0)
            {
              sub_100148C94(v41, type metadata accessor for AWDLActionFrame.ServiceResponse);
              if (v36 == v33)
              {
                swift_bridgeObjectRelease();
                if (v339 & 1) == 0 && (v3)
                {
                  v285  = v349 + v34[17];
                  *(_OWORD *)v285  = xmmword_1003B00A0;
                  *(void *)(v285 + 24)  = 0;
                  *(void *)(v285 + 32)  = 0;
                  *(void *)(v285 + 16)  = 0;
                }
                goto LABEL_151;
              }
              LODWORD(v346)  = 0;
LABEL_8:
              if (v36 <= v33) {
                uint64_t v13 = v33;
              }
              else {
                uint64_t v13 = v36;
              }
              if (v36 >= v33) {
                goto LABEL_153;
              }
              continue;
            }
            sub_100148D14(v41, (uint64_t)v324, type metadata accessor for AWDLActionFrame.ServiceResponse);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            char v94 = v329;
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                uint64_t v95 = (uint64_t)v324;
                long long v96 = *((_OWORD *)v324 + 1);
                v357[0]  = *(_OWORD *)v324;
                v357[1]  = v96;
                v357[2]  = *((_OWORD *)v324 + 2);
                uint64_t v97 = v324[6];
                *(void *)&v342  = v324[5];
                v358  = v97;
                uint64_t v98 = v324[1];
                v292  = *v324;
                v293  = v98;
                v294  = v324[2];
                v327  = v324[3];
                v291  = *((unsigned __int8 *)v324 + 32);
                id v99 = v329;
                v290  = *((unsigned __int8 *)v324 + 33);
                v367  = *((_WORD *)v324 + 16);
                v365  = v357[0];
                v366  = v96;
                long long v100 = *((_OWORD *)v324 + 1);
                v354  = *(_OWORD *)v324;
                v355  = v100;
                v356  = *((_WORD *)v324 + 16);
                v370  = v354;
                v368  = *v296;
                v369  = *((_WORD *)v296 + 8);
                uint64_t v101 = swift_allocObject();
                long long v102 = *(_OWORD *)(v95 + 16);
                *(_OWORD *)(v101 + 16)  = *(_OWORD *)v95;
                *(_OWORD *)(v101 + 32)  = v102;
                *(_OWORD *)(v101 + 48)  = *(_OWORD *)(v95 + 32);
                *(void *)(v101 + 64)  = *(void *)(v95 + 48);
                sub_100036198((uint64_t)&v370);
                sub_100036198((uint64_t)&v368);
                sub_1000368C0((uint64_t)v357);
                sub_100011E30((uint64_t)v303);
                uint64_t v103 = swift_allocObject();
                *(void *)(v103 + 16)  = sub_10014CC04;
                *(void *)(v103 + 24)  = v101;
                sub_1000368C0((uint64_t)v357);
                sub_100011E30((uint64_t)v310);
                LODWORD(v346)  = swift_isUniquelyReferenced_nonNull_native();
                v350  = v94;
                unint64_t v105 = sub_1000312E0((uint64_t)&v354);
                uint64_t v106 = v94[2];
                BOOL v107 = (v104 & 1) == 0;
                uint64_t v108 = v106 + v107;
                if (!__OFADD__(v106, v107))
                {
                  char v109 = v104;
                  uint64_t v110 = v99[3];
                  v288  = v97;
                  v289  = v101;
                  if (v110 < v108)
                  {
                    sub_10016D320(v108, (int)v346);
                    unint64_t v111 = sub_1000312E0((uint64_t)&v354);
                    if ((v109 & 1) == (v112 & 1))
                    {
                      unint64_t v113 = v111;
                      goto LABEL_62;
                    }
LABEL_165:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    JUMPOUT(0x100148340);
                  }
                  unint64_t v113 = v105;
                  if ((v346 & 1) == 0) {
                    sub_100171FF0();
                  }
LABEL_62:
                  uint64_t v3 = v350;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  if ((v109 & 1) == 0)
                  {
                    uint64_t v150 = (uint64_t)v315;
                    sub_1001484B0(*(void (**)(long long *__return_ptr, uint64_t))(v103 + 16), (uint64_t)v315);
                    v3[(v113 >> 6) + 8] |= 1 << v113;
                    uint64_t v151 = v3[6] + 40 * v113;
                    long long v152 = v355;
                    *(_OWORD *)uint64_t v151 = v354;
                    *(_OWORD *)(v151 + 16)  = v152;
                    *(_WORD *)(v151 + 32)  = v356;
                    sub_10006EC68(v150, v3[7] + *(void *)(v322 + 72) * v113, &qword_100480500);
                    uint64_t v153 = v3[2];
                    BOOL v124 = __OFADD__(v153, 1);
                    uint64_t v154 = v153 + 1;
                    if (!v124)
                    {
                      void v3[2] = v154;
                      sub_100036198((uint64_t)&v370);
                      sub_100036198((uint64_t)&v368);
                      goto LABEL_65;
                    }
LABEL_163:
                    __break(1u);
LABEL_164:
                    __break(1u);
                    goto LABEL_165;
                  }
LABEL_65:
                  uint64_t v155 = v291 | (v290 << 8);
                  uint64_t v156 = v103;
                  uint64_t v157 = v3[7];
                  v329  = v3;
                  swift_bridgeObjectRelease();
                  Class v158 = (void *)(v157 + *(void *)(v322 + 72) * v113);
                  uint64_t v159 = v158[5];
                  uint64_t v160 = v158[6];
                  uint64_t v161 = v158[7];
                  uint64_t v162 = v158[8];
                  uint64_t v163 = v158[9];
                  uint64_t v164 = v158[10];
                  unint64_t v165 = v158[11];
                  uint64_t v166 = v293;
                  v158[5]  = v292;
                  v158[6]  = v166;
                  unint64_t v167 = v327;
                  v158[7]  = v294;
                  v158[8]  = v167;
                  uint64_t v168 = v342;
                  v158[9]  = v155;
                  v158[10]  = v168;
                  v158[11]  = v288;
                  sub_100036090(v159, v160, v161, v162, v163, v164, v165);
                  sub_100036910((uint64_t)v357);
                  sub_1000361C4((uint64_t)&v370);
                  sub_1000361C4((uint64_t)&v368);
                  v310  = sub_10014CC90;
                  v302  = v289;
                  v303  = sub_10014CC04;
                  v308  = v156;
                  unint64_t v34 = v335;
                  uint64_t v13 = v336;
                  LOBYTE(v3)  = v345;
                  goto LABEL_78;
                }
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
                goto LABEL_163;
              }
              v346  = (void (**)(long long *__return_ptr, uint64_t))type metadata accessor for DNSRecords.SRV;
              uint64_t v131 = v316;
              sub_10014C9B0((uint64_t)v324, v316, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
              v361  = *(_WORD *)(v131 + 32);
              long long v132 = *(_OWORD *)(v131 + 16);
              v359  = *(_OWORD *)v131;
              v360  = v132;
              v362  = v359;
              uint64_t v133 = v299;
              v363  = *v298;
              v364  = *((_WORD *)v298 + 8);
              *(void *)&v342  = type metadata accessor for DNSRecords.SRV;
              sub_100148D14(v131, v299, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
              unint64_t v134 = (*(unsigned __int8 *)(v326 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v326 + 80);
              uint64_t v135 = swift_allocObject();
              uint64_t v136 = v135 + v134;
              unint64_t v137 = v135;
              sub_10014C9B0(v133, v136, (uint64_t (*)(void))v346);
              sub_100036198((uint64_t)&v362);
              sub_100036198((uint64_t)&v363);
              sub_100011E30((uint64_t)v307);
              id v138 = (unsigned int (**)(void, void, void))v321;
              sub_100148D14(v131, (uint64_t)v321, (uint64_t (*)(void))v342);
              (*(void (**)(unsigned int (**)(void, void, void), void, uint64_t, uint64_t))(v326 + 56))(v138, 0, 1, v334);
              uint64_t v139 = swift_allocObject();
              *(void *)(v139 + 16)  = sub_10014CB24;
              *(void *)(v139 + 24)  = v137;
              v327  = v137;
              v346  = (void (**)(long long *__return_ptr, uint64_t))v139;
              sub_100011E30((uint64_t)v313);
              isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
              v350  = v94;
              unint64_t v142 = sub_1000312E0((uint64_t)&v359);
              uint64_t v143 = v94[2];
              BOOL v144 = (v141 & 1) == 0;
              BOOL v124 = __OFADD__(v143, v144);
              uint64_t v145 = v143 + v144;
              Class v146 = v94;
              uint64_t v13 = v336;
              if (v124) {
                goto LABEL_160;
              }
              char v147 = v141;
              if (v146[3] >= v145)
              {
                LOBYTE(v3)  = v345;
                *(void *)&v342  = v142;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  char v188 = v141;
                  sub_100171FF0();
                  char v147 = v188;
                }
              }
              else
              {
                sub_10016D320(v145, isUniquelyReferenced_nonNull_native);
                unint64_t v148 = sub_1000312E0((uint64_t)&v359);
                LOBYTE(v3)  = v345;
                if ((v147 & 1) != (v149 & 1)) {
                  goto LABEL_165;
                }
                *(void *)&v342  = v148;
              }
              unint64_t v179 = v350;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v147 & 1) == 0)
              {
                uint64_t v180 = (uint64_t)v315;
                sub_1001484B0(v346[2], (uint64_t)v315);
                uint64_t v181 = v342;
                v179[((unint64_t)v342 >> 6) + 8] |= 1 << v342;
                v182  = v179[6] + 40 * v181;
                v183  = v360;
                *(_OWORD *)v182  = v359;
                *(_OWORD *)(v182 + 16)  = v183;
                *(_WORD *)(v182 + 32)  = v361;
                sub_10006EC68(v180, v179[7] + *(void *)(v322 + 72) * v181, &qword_100480500);
                uint64_t v184 = v179[2];
                BOOL v124 = __OFADD__(v184, 1);
                uint64_t v185 = v184 + 1;
                if (v124) {
                  goto LABEL_162;
                }
                v179[2]  = v185;
                sub_100036198((uint64_t)&v362);
                sub_100036198((uint64_t)&v363);
              }
              uint64_t v186 = v179[7];
              v329  = v179;
              swift_bridgeObjectRelease();
              sub_10006D1A4((uint64_t)v321, v186 + *(void *)(v322 + 72) * v342 + *(int *)(v333 + 64), &qword_10047CC00);
              sub_1000361C4((uint64_t)&v362);
              sub_1000361C4((uint64_t)&v363);
              sub_100148C94(v316, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
              v313  = sub_10014CBB4;
              v306  = v327;
              v307  = sub_10014CB24;
              v312  = v346;
              goto LABEL_78;
            }
            uint64_t v114 = (uint64_t)v324;
            v353  = *((_WORD *)v324 + 16);
            long long v115 = *((_OWORD *)v324 + 1);
            v351  = *(_OWORD *)v324;
            v352  = v115;
            long long v116 = *v295;
            v371  = v351;
            v372  = v116;
            v373  = *((_WORD *)v295 + 8);
            uint64_t v117 = swift_allocObject();
            long long v118 = *(_OWORD *)(v114 + 16);
            *(_OWORD *)(v117 + 16)  = *(_OWORD *)v114;
            *(_OWORD *)(v117 + 32)  = v118;
            *(_WORD *)(v117 + 48)  = *(_WORD *)(v114 + 32);
            sub_100036198((uint64_t)&v371);
            sub_100036198((uint64_t)&v372);
            sub_100036198((uint64_t)&v371);
            sub_100036198((uint64_t)&v372);
            sub_100011E30((uint64_t)v305);
            uint64_t v119 = swift_allocObject();
            *(void *)(v119 + 16)  = sub_10014CC5C;
            *(void *)(v119 + 24)  = v117;
            v346  = (void (**)(long long *__return_ptr, uint64_t))v119;
            sub_100011E30((uint64_t)v311);
            LODWORD(v327)  = swift_isUniquelyReferenced_nonNull_native();
            v350  = v94;
            unint64_t v121 = sub_1000312E0((uint64_t)&v351);
            uint64_t v122 = v94[2];
            BOOL v123 = (v120 & 1) == 0;
            BOOL v124 = __OFADD__(v122, v123);
            uint64_t v125 = v122 + v123;
            id v126 = v94;
            uint64_t v13 = v336;
            if (v124) {
              goto LABEL_161;
            }
            char v127 = v120;
            uint64_t v128 = v126[3];
            v294  = v117;
            if (v128 >= v125)
            {
              *(void *)&v342  = v121;
              if ((v327 & 1) == 0)
              {
                char v187 = v120;
                sub_100171FF0();
                char v127 = v187;
              }
            }
            else
            {
              LODWORD(v329)  = v120;
              sub_10016D320(v125, v327);
              unint64_t v129 = sub_1000312E0((uint64_t)&v351);
              char v127 = (char)v329;
              if ((v329 & 1) != (v130 & 1)) {
                goto LABEL_165;
              }
              *(void *)&v342  = v129;
            }
            id v169 = v350;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            if ((v127 & 1) == 0)
            {
              uint64_t v170 = (uint64_t)v315;
              sub_1001484B0(v346[2], (uint64_t)v315);
              uint64_t v171 = v342;
              v169[((unint64_t)v342 >> 6) + 8] |= 1 << v342;
              uint64_t v172 = v169[6] + 40 * v171;
              long long v173 = v352;
              *(_OWORD *)uint64_t v172 = v351;
              *(_OWORD *)(v172 + 16)  = v173;
              *(_WORD *)(v172 + 32)  = v353;
              sub_10006EC68(v170, v169[7] + *(void *)(v322 + 72) * v171, &qword_100480500);
              uint64_t v174 = v169[2];
              BOOL v124 = __OFADD__(v174, 1);
              uint64_t v175 = v174 + 1;
              if (v124) {
                goto LABEL_164;
              }
              v169[2]  = v175;
              sub_100036198((uint64_t)&v371);
              sub_100036198((uint64_t)&v372);
            }
            uint64_t v176 = v169[7];
            v329  = v169;
            swift_bridgeObjectRelease();
            uint64_t v177 = v176 + *(void *)(v322 + 72) * v342;
            *(_WORD *)(v177 + 32)  = v353;
            long long v178 = v352;
            *(_OWORD *)uint64_t v177 = v351;
            *(_OWORD *)(v177 + 16)  = v178;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000361C4((uint64_t)&v371);
            sub_1000361C4((uint64_t)&v372);
            v311  = sub_10014CC90;
            v304  = v294;
            v305  = sub_10014CC5C;
            v309  = v346;
LABEL_78:
            sub_100148C94(v340, type metadata accessor for AWDLActionFrame.ServiceResponse);
            LODWORD(v346)  = 1;
            LODWORD(v327)  = 1;
            uint64_t v37 = v347;
            if (v36 == v33) {
              goto LABEL_155;
            }
            break;
          case 2u:
LABEL_25:
            uint64_t v56 = *v28;
            uint64_t v57 = *((unsigned __int16 *)v28 + 1);
            uint64_t v58 = v28[4];
            uint64_t v59 = v28[5];
            v342  = *(_OWORD *)(v28 + 8);
            uint64_t v60 = *((unsigned __int16 *)v28 + 16);
            uint64_t v61 = *((void *)v28 + 5);
            unint64_t v62 = v56 | (v57 << 16) | (v58 << 32) | (v59 << 40) | ((unint64_t)*((unsigned __int16 *)v28 + 3) << 48);
            uint64_t v63 = *((void *)v28 + 3);
            uint64_t v64 = v349 + v335[12];
            swift_bridgeObjectRelease();
            *(void *)uint64_t v64 = v62;
            unint64_t v34 = v335;
            *(_OWORD *)(v64 + 8)  = v342;
            *(void *)(v64 + 24)  = v63;
            *(void *)(v64 + 32)  = v60;
            uint64_t v37 = v347;
            *(void *)(v64 + 40)  = v61;
            goto LABEL_32;
          case 3u:
LABEL_29:
            unsigned __int8 v66 = v28[24];
            uint64_t v67 = *((void *)v28 + 1);
            unint64_t v68 = v28[16] | ((unint64_t)*((unsigned int *)v28 + 5) << 32);
            uint64_t v69 = v349 + v34[8];
            *(void *)uint64_t v69 = *v28 | ((unint64_t)*((unsigned __int16 *)v28 + 1) << 16) | ((unint64_t)v28[4] << 32) | ((unint64_t)v28[5] << 40) | ((unint64_t)v28[6] << 48) | ((unint64_t)v28[7] << 56);
            *(void *)(v69 + 8)  = v67;
            *(void *)(v69 + 16)  = v68;
            *(_WORD *)(v69 + 24)  = v66;
            goto LABEL_7;
          case 5u:
LABEL_36:
            uint64_t v77 = *((unsigned __int16 *)v28 + 2);
            BOOL v78 = (v341[1] & 1) == 0 && v77 == *v341;
            uint64_t v79 = *v28;
            uint64_t v80 = *((unsigned __int16 *)v28 + 1);
            uint64_t v81 = *((unsigned int *)v28 + 2);
            uint64_t v82 = *((void *)v28 + 2);
            uint64_t v83 = *((void *)v28 + 3);
            LODWORD(v346)  = !v78;
            uint64_t v3 = (uint64_t *)(v79 | (v80 << 16) | (v77 << 32));
            uint64_t v84 = v349 + v34[10];
            sub_10014CC74(*(void *)v84, *(void *)(v84 + 8), *(void *)(v84 + 16), *(void *)(v84 + 24));
            *(void *)uint64_t v84 = v3;
            *(void *)(v84 + 8)  = v81;
            *(void *)(v84 + 16)  = v82;
            *(void *)(v84 + 24)  = v83;
            unint64_t v34 = v335;
            LOBYTE(v3)  = v345;
            uint64_t v37 = v347;
            goto LABEL_7;
          case 6u:
LABEL_6:
            uint64_t v38 = v349 + v34[14];
            sub_1000380B4(v38, (uint64_t *)&unk_1004882F0);
            sub_10014C9B0((uint64_t)v28, v38, type metadata accessor for AWDLActionFrame.DataPathState);
            uint64_t v39 = type metadata accessor for AWDLActionFrame.DataPathState(0);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
            goto LABEL_7;
          case 7u:
LABEL_31:
            uint64_t v70 = *v28;
            uint64_t v71 = *((void *)v28 + 1);
            uint64_t v72 = *((void *)v28 + 2);
            unint64_t v73 = (void *)(v349 + v34[13]);
            swift_bridgeObjectRelease();
            *unint64_t v73 = v70;
            v73[1]  = v71;
            uint64_t v37 = v347;
            v73[2]  = v72;
LABEL_32:
            LOBYTE(v3)  = v345;
            goto LABEL_7;
          case 9u:
LABEL_27:
            uint64_t v65 = v349 + v34[16];
            *(_WORD *)uint64_t v65 = *(_WORD *)v28;
            *(unsigned char *)(v65 + 2)  = 0;
            goto LABEL_7;
          case 0xBu:
LABEL_43:
            unint64_t v90 = *((unsigned int *)v28 + 2) | ((unint64_t)v28[12] << 32) | ((unint64_t)v28[13] << 40);
            uint64_t v91 = *((void *)v28 + 4);
            uint64_t v92 = v349 + v34[15];
            *(void *)uint64_t v92 = *(void *)v28;
            *(void *)(v92 + 8)  = v90;
            *(_OWORD *)(v92 + 16)  = *((_OWORD *)v28 + 1);
            *(void *)(v92 + 32)  = v91;
            *(unsigned char *)(v92 + 40)  = 0;
            goto LABEL_7;
          case 0xCu:
LABEL_41:
            uint64_t v85 = *((void *)v28 + 2);
            uint64_t v86 = *((void *)v28 + 5);
            unint64_t v87 = v28[24] | ((unint64_t)*((unsigned int *)v28 + 7) << 32);
            unint64_t v88 = v28[32] | ((unint64_t)*((unsigned int *)v28 + 9) << 32);
            uint64_t v89 = v349 + v34[9];
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v28;
            *(void *)(v89 + 16)  = v85;
            *(void *)(v89 + 24)  = v87;
            *(void *)(v89 + 32)  = v88;
            *(void *)(v89 + 40)  = v86;
            *(unsigned char *)(v89 + 48)  = 0;
            goto LABEL_7;
          case 0x11u:
            unint64_t v42 = *((unsigned int *)v28 + 2) | ((unint64_t)*((unsigned __int16 *)v28 + 6) << 32);
            unint64_t v43 = *((void *)v28 + 2);
            unint64_t v44 = v28[24] | ((unint64_t)*((unsigned int *)v28 + 7) << 32);
            unint64_t v45 = *((unsigned __int16 *)v28 + 16) | ((unint64_t)v28[34] << 16) | ((unint64_t)v28[35] << 24) | ((unint64_t)v28[36] << 32) | ((unint64_t)v28[37] << 40) | ((unint64_t)v28[38] << 48);
            uint64_t v46 = v28[39];
            id v47 = (unint64_t *)(v349 + v34[17]);
            *id v47 = *(unsigned int *)v28 | ((unint64_t)v28[4] << 32) | ((unint64_t)v28[5] << 40) | ((unint64_t)v28[6] << 48);
            v47[1]  = v42;
            v47[2]  = v43;
            v47[3]  = v44;
            v47[4]  = v45 | (v46 << 56);
            if (v36 == v33) {
              goto LABEL_88;
            }
            uint64_t v48 = v37 + v348 * (void)v36;
            do
            {
              if (v13 == v36) {
                goto LABEL_153;
              }
              sub_100148D14(v48, (uint64_t)v28, type metadata accessor for AWDLActionFrame.AWDLAttribute);
              int v49 = swift_getEnumCaseMultiPayload();
              if (v49 != 17)
              {
                switch(v49)
                {
                  case 1:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_13;
                  case 2:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_25;
                  case 3:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_29;
                  case 5:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_36;
                  case 6:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_6;
                  case 7:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_31;
                  case 9:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_27;
                  case 11:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_43;
                  case 12:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_41;
                  case 18:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_34;
                  default:
                    ++v36;
                    LODWORD(v339)  = 1;
                    goto LABEL_45;
                }
              }
              ++v36;
              unint64_t v50 = *((unsigned int *)v28 + 2) | ((unint64_t)*((unsigned __int16 *)v28 + 6) << 32);
              unint64_t v51 = *((void *)v28 + 2);
              unint64_t v52 = v28[24] | ((unint64_t)*((unsigned int *)v28 + 7) << 32);
              unint64_t v53 = *((unsigned __int16 *)v28 + 16) | ((unint64_t)v28[34] << 16) | ((unint64_t)v28[35] << 24) | ((unint64_t)v28[36] << 32) | ((unint64_t)v28[37] << 40) | ((unint64_t)v28[38] << 48);
              uint64_t v54 = v28[39];
              int v55 = (unint64_t *)(v349 + v34[17]);
              *int v55 = *(unsigned int *)v28 | ((unint64_t)v28[4] << 32) | ((unint64_t)v28[5] << 40) | ((unint64_t)v28[6] << 48);
              v55[1]  = v50;
              v55[2]  = v51;
              v55[3]  = v52;
              v55[4]  = v53 | (v54 << 56);
              v48 += v348;
            }
            while (v33 != v36);
LABEL_88:
            swift_bridgeObjectRelease();
LABEL_89:
            uint64_t v13 = v336;
            uint64_t v189 = (uint64_t)v337;
            uint64_t v17 = v326;
            if (v346) {
              goto LABEL_90;
            }
            goto LABEL_151;
          case 0x12u:
LABEL_34:
            unint64_t v74 = *((void *)v28 + 1);
            unint64_t v75 = *(unsigned int *)v28 | ((unint64_t)v28[4] << 32) | ((unint64_t)v28[5] << 40);
            uint64_t v76 = (unint64_t *)(v349 + v34[18]);
            swift_bridgeObjectRelease();
            *uint64_t v76 = v75;
            v76[1]  = v74;
            uint64_t v37 = v347;
            goto LABEL_7;
          default:
LABEL_45:
            sub_100148C94((uint64_t)v28, type metadata accessor for AWDLActionFrame.AWDLAttribute);
LABEL_7:
            if (v36 != v33) {
              goto LABEL_8;
            }
            swift_bridgeObjectRelease();
            if (v339 & 1 | ((v3 & 1) == 0)) {
              goto LABEL_89;
            }
            uint64_t v13 = v336;
            uint64_t v189 = (uint64_t)v337;
            uint64_t v17 = v326;
            LOBYTE(v32)  = (_BYTE)v346;
            goto LABEL_86;
        }
        break;
      }
    }
  }
  if (v3)
  {
    v304  = 0;
    v305  = 0;
    v310  = 0;
    v311  = 0;
    v308  = 0;
    v309  = 0;
    v302  = 0;
    v303  = 0;
    v306  = 0;
    v307  = 0;
    v312  = 0;
    v313  = 0;
    LODWORD(v327)  = 0;
    v329  = (uint64_t *)&_swiftEmptyDictionarySingleton;
    uint64_t v189 = (uint64_t)v337;
LABEL_86:
    uint64_t v190 = v349 + v335[17];
    *(_OWORD *)uint64_t v190 = xmmword_1003B00A0;
    *(void *)(v190 + 24)  = 0;
    *(void *)(v190 + 32)  = 0;
    *(void *)(v190 + 16)  = 0;
    if ((v32 & 1) == 0) {
      goto LABEL_151;
    }
LABEL_90:
    if (v327) {
      goto LABEL_91;
    }
  }
  else
  {
    v304  = 0;
    v305  = 0;
    v310  = 0;
    v311  = 0;
    v308  = 0;
    v309  = 0;
    v302  = 0;
    v303  = 0;
    v306  = 0;
    v307  = 0;
    v312  = 0;
    v313  = 0;
    v329  = (uint64_t *)&_swiftEmptyDictionarySingleton;
    uint64_t v189 = (uint64_t)v337;
    if ((v32 & 1) == 0) {
      goto LABEL_151;
    }
  }
  uint64_t v194 = v349 + v335[10];
  unint64_t v195 = *(void *)(v194 + 24);
  if (v195 >> 60 == 15)
  {
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    unint64_t v195 = 0xF000000000000000;
  }
  else
  {
    uint64_t v196 = *(unsigned int *)(v194 + 8);
    uint64_t v197 = *(void *)(v194 + 16);
    sub_100013D44(v197, *(void *)(v194 + 24));
  }
  v198  = v17;
  id v199 = v13;
  if (qword_10047BFB8 != -1) {
    swift_once();
  }
  uint64_t v200 = static AWDLActionFrame.ServiceParameter.SSTH.zero;
  v201  = qword_100488500;
  unint64_t v202 = qword_100488508;
  if (v195 >> 60 == 15)
  {
    sub_100013D44(qword_100488500, qword_100488508);
    sub_10006E0D8(v196, v197, v195);
    sub_10006E0D8(v200, v201, v202);
LABEL_151:
    swift_bridgeObjectRelease();
    goto LABEL_152;
  }
  if (static AWDLActionFrame.ServiceParameter.SSTH.zero != v196)
  {
    sub_10006E0D8(v196, v197, v195);
    goto LABEL_151;
  }
  sub_100013D44(qword_100488500, qword_100488508);
  sub_10006E968(v196, v197, v195);
  char v203 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v197, v195, v201, v202);
  sub_10000C970(v201, v202);
  sub_10006E0D8(v196, v197, v195);
  sub_10006E0D8(v196, v197, v195);
  uint64_t v13 = v199;
  uint64_t v17 = v198;
  if ((v203 & 1) == 0) {
    goto LABEL_151;
  }
  while (1)
  {
LABEL_91:
    uint64_t v191 = v349 + v335[10];
    unint64_t v192 = *(void *)(v191 + 24) >> 60;
    if (v192 == 15) {
      unsigned __int16 v193 = 0;
    }
    else {
      unsigned __int16 v193 = *(_WORD *)(v191 + 4);
    }
    id v204 = v341;
    *v341  = v193;
    *((unsigned char *)v204 + 2)  = v192 > 0xE;
    id v205 = (void *)(v349 + v335[20]);
    v350  = (uint64_t *)*v205;
    v315  = v205;
    *id v205 = &_swiftEmptySetSingleton;
    uint64_t v206 = v329[8];
    v301  = (char *)(v329 + 8);
    uint64_t v207 = 1 << *((unsigned char *)v329 + 32);
    uint64_t v208 = -1;
    if (v207 < 64) {
      uint64_t v208 = ~(-1 << v207);
    }
    v209  = v208 & v206;
    v210  = (unint64_t)(v207 + 63) >> 6;
    v328  = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    v321  = (uint64_t *)(v325 + 48);
    v297  = (void (**)(long long *__return_ptr, uint64_t))(v210 - 1);
    v211  = swift_bridgeObjectRetain();
    v212  = 0;
    v316  = v210;
    uint64_t v3 = &qword_100480508;
    v298  = (long long *)(v210 - 5);
    v299  = v211 + 104;
    v336  = v13;
    if (v209) {
      break;
    }
LABEL_111:
    v225  = v212 + 1;
    if (!__OFADD__(v212, 1))
    {
      if (v225 < v316)
      {
        v226  = *(void *)&v301[8 * v225];
        if (v226)
        {
LABEL_114:
          v214  = (v226 - 1) & v226;
          v215  = __clz(__rbit64(v226)) + (v225 << 6);
          v212  = v225;
          goto LABEL_110;
        }
        if (v212 + 2 >= v316)
        {
          ++v212;
        }
        else
        {
          v226  = *(void *)&v301[8 * v212 + 16];
          if (v226)
          {
            v225  = v212 + 2;
            goto LABEL_114;
          }
          if (v212 + 3 >= v316)
          {
            v212 += 2;
          }
          else
          {
            v226  = *(void *)&v301[8 * v212 + 24];
            if (v226)
            {
              v225  = v212 + 3;
              goto LABEL_114;
            }
            v225  = v212 + 4;
            if (v212 + 4 >= v316)
            {
              v212 += 3;
            }
            else
            {
              v226  = *(void *)&v301[8 * v225];
              if (v226) {
                goto LABEL_114;
              }
              while (v298 != (long long *)v212)
              {
                v226  = *(void *)(v299 + 8 * v212++);
                if (v226)
                {
                  v225  = v212 + 4;
                  goto LABEL_114;
                }
              }
              v212  = (uint64_t)v297;
            }
          }
        }
      }
      v227  = sub_100010BCC(&qword_100480508);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v227 - 8) + 56))(v13, 1, 1, v227);
      v214  = 0;
      goto LABEL_120;
    }
LABEL_154:
    __break(1u);
LABEL_155:
    swift_bridgeObjectRelease();
    if (v339)
    {
      uint64_t v189 = (uint64_t)v337;
      uint64_t v17 = v326;
    }
    else
    {
      uint64_t v189 = (uint64_t)v337;
      uint64_t v17 = v326;
      if (v3)
      {
        v287  = v349 + v335[17];
        *(_OWORD *)v287  = xmmword_1003B00A0;
        *(void *)(v287 + 24)  = 0;
        *(void *)(v287 + 32)  = 0;
        *(void *)(v287 + 16)  = 0;
      }
    }
  }
  while (1)
  {
    v213  = __clz(__rbit64(v209));
    v214  = (v209 - 1) & v209;
    v215  = v213 | (v212 << 6);
LABEL_110:
    v216  = v329[7];
    v217  = v329[6] + 40 * v215;
    v218  = *(void *)v217;
    v219  = *(void *)(v217 + 8);
    v220  = *(void *)(v217 + 16);
    v221  = *(void *)(v217 + 24);
    v222  = *(unsigned char *)(v217 + 32);
    LOBYTE(v217)  = *(unsigned char *)(v217 + 33);
    *(void *)uint64_t v13 = v218;
    *((void *)v13 + 1)  = v219;
    *((void *)v13 + 2)  = v220;
    *((void *)v13 + 3)  = v221;
    v13[32]  = v222;
    v13[33]  = v217;
    v223  = v216 + *(void *)(v322 + 72) * v215;
    v224  = sub_100010BCC(&qword_100480508);
    sub_1000136F4(v223, (uint64_t)&v13[*(int *)(v224 + 48)], &qword_100480500);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56))(v13, 0, 1, v224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_120:
    sub_10006EC68((uint64_t)v13, v189, &qword_1004804F8);
    v228  = sub_100010BCC(&qword_100480508);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 48))(v189, 1, v228) == 1) {
      break;
    }
    v345  = v214;
    v346  = (void (**)(long long *__return_ptr, uint64_t))v212;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v229  = v189 + *(int *)(v228 + 48);
    v230  = *(void *)v229;
    v231  = *(void *)(v229 + 8);
    v232  = *(unsigned __int16 **)(v229 + 16);
    v233  = *(void *)(v229 + 24);
    v234  = *(unsigned __int8 *)(v229 + 32);
    v235  = *(unsigned __int8 *)(v229 + 33);
    v236  = *(void *)(v229 + 40);
    v237  = *(void *)(v229 + 48);
    v238  = *(void *)(v229 + 56);
    v239  = *(void *)(v229 + 64);
    v241  = *(void *)(v229 + 72);
    v240  = *(void *)(v229 + 80);
    v242  = *(void *)(v229 + 88);
    v243  = *(int *)(v333 + 64);
    v244  = v229 + v243;
    v245  = v330;
    v246  = (char *)v330 + v243;
    v341  = v232;
    *(void *)&v342  = v230;
    *v330  = v230;
    v245[1]  = v231;
    v245[2]  = v232;
    v245[3]  = v233;
    LODWORD(v339)  = v234;
    *((unsigned char *)v245 + 32)  = v234;
    LODWORD(v340)  = v235;
    *((unsigned char *)v245 + 33)  = v235;
    v347  = v237;
    v348  = v236;
    v245[5]  = v236;
    v245[6]  = v237;
    v245[7]  = v238;
    v245[8]  = v239;
    v245[9]  = v241;
    v245[10]  = v240;
    v245[11]  = v242;
    sub_10006EC68(v244, (uint64_t)v245 + v243, &qword_10047CC00);
    v247  = (uint64_t)v246;
    v248  = v331;
    sub_10006EC68(v247, v331, &qword_10047CC00);
    if ((*v328)(v248, 1, v334) == 1)
    {
      sub_100036090(v348, v347, v238, v239, v241, v240, v242);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000380B4(v248, &qword_10047CC00);
      uint64_t v13 = v336;
      uint64_t v189 = (uint64_t)v337;
      uint64_t v3 = &qword_100480508;
      v209  = v345;
      v212  = (uint64_t)v346;
      if (!v345) {
        goto LABEL_111;
      }
    }
    else
    {
      v249  = v332;
      sub_10014C9B0(v248, v332, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      v250  = (uint64_t)v343;
      sub_100148D14(v249, (uint64_t)&v343[*(int *)(v338 + 28)], (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      *(unsigned char *)v250  = 0;
      *(void *)(v250 + 8)  = v342;
      *(void *)(v250 + 16)  = v231;
      *(void *)(v250 + 24)  = v341;
      *(void *)(v250 + 32)  = v233;
      *(unsigned char *)(v250 + 40)  = v339;
      *(unsigned char *)(v250 + 41)  = v340;
      v251  = v348;
      v252  = v242;
      v253  = v240;
      v254  = v241;
      v255  = v239;
      v256  = v238;
      v257  = v347;
      *(void *)(v250 + 48)  = v348;
      *(void *)(v250 + 56)  = v257;
      *(void *)(v250 + 64)  = v256;
      *(void *)(v250 + 72)  = v255;
      *(void *)(v250 + 80)  = v254;
      *(void *)(v250 + 88)  = v253;
      *(void *)(v250 + 96)  = v252;
      sub_1000362B4(v251, v257, v256, v255, v254, v253, v252);
      v258  = v344;
      sub_100173F20(v250, v344);
      v259  = v319;
      sub_1000136F4(v258, v319, (uint64_t *)&unk_100486B80);
      v260  = v252;
      v261  = v348;
      v326  = v253;
      v327  = v260;
      v324  = (uint64_t *)v255;
      v325  = v254;
      v323  = v256;
      if (v257)
      {
        v262  = (unsigned __int16 *)v257;
        v263  = v254;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100013D44(v253, v260);
        sub_1000380B4(v259, (uint64_t *)&unk_100486B80);
        v341  = v262;
        *(void *)&v342  = v261;
        v339  = v255;
        v340  = v256;
        v264  = v253;
        v265  = v260;
        v266  = v346;
        v267  = v338;
      }
      else
      {
        v268  = v314;
        sub_10006EC68(v259, (uint64_t)v314, (uint64_t *)&unk_100486B80);
        if (((unsigned int (*)(void *, uint64_t, uint64_t))*v321)(v268, 1, v338) == 1)
        {
          sub_1000380B4((uint64_t)v268, (uint64_t *)&unk_100486B80);
          v341  = 0;
          *(void *)&v342  = 0;
          v339  = 0;
          v340  = 0;
          v263  = 0;
          v264  = 0;
          v265  = 0;
        }
        else
        {
          v269  = v268[6];
          v270  = v268[8];
          v271  = v268[9];
          v272  = v268[10];
          v264  = v268[11];
          v265  = v268[12];
          v341  = (unsigned __int16 *)v268[7];
          *(void *)&v342  = v269;
          v339  = v271;
          v340  = v270;
          v263  = v272;
          sub_1000362B4(v269, (uint64_t)v341, v270, v271, v272, v264, v265);
          sub_100148C94((uint64_t)v268, type metadata accessor for AWDLPeer.AdvertisedService);
        }
        v266  = v346;
        v267  = v338;
      }
      v273  = v343;
      sub_100036090(*((void *)v343 + 6), *((void *)v343 + 7), *((void *)v343 + 8), *((void *)v343 + 9), *((void *)v343 + 10), *((void *)v343 + 11), *((void *)v343 + 12));
      v274  = v341;
      v273[6]  = v342;
      v273[7]  = v274;
      v275  = v339;
      v273[8]  = v340;
      v273[9]  = v275;
      v273[10]  = v263;
      v273[11]  = v264;
      v273[12]  = v265;
      v276  = v320;
      sub_1000136F4(v344, (uint64_t)v320, (uint64_t *)&unk_100486B80);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))*v321)(v276, 1, v267) != 1)
      {
        v280  = (uint64_t)v276;
        v278  = *v276;
        sub_100148C94(v280, type metadata accessor for AWDLPeer.AdvertisedService);
        uint64_t v189 = (uint64_t)v337;
        v212  = (uint64_t)v266;
LABEL_132:
        v281  = (uint64_t)v343;
        *v343  = v278;
        v282  = v318;
        sub_100148D14(v281, v318, type metadata accessor for AWDLPeer.AdvertisedService);
        v283  = v317;
        sub_1000FA5F0(v317, v282);
        sub_100036090(v348, v347, v323, (uint64_t)v324, v325, v326, v327);
        sub_100148C94(v283, type metadata accessor for AWDLPeer.AdvertisedService);
        sub_1000380B4(v344, (uint64_t *)&unk_100486B80);
        sub_100148C94(v332, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
        v279  = v281;
        goto LABEL_133;
      }
      sub_1000380B4((uint64_t)v276, (uint64_t *)&unk_100486B80);
      v277  = sub_100157010();
      v278  = v277;
      uint64_t v189 = (uint64_t)v337;
      v212  = (uint64_t)v266;
      if ((v277 & 0x100) == 0) {
        goto LABEL_132;
      }
      sub_100036090(v348, v347, v323, (uint64_t)v324, v325, v326, v327);
      sub_1000380B4(v344, (uint64_t *)&unk_100486B80);
      sub_100148C94(v332, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      v279  = (uint64_t)v343;
LABEL_133:
      sub_100148C94(v279, type metadata accessor for AWDLPeer.AdvertisedService);
      uint64_t v13 = v336;
      v209  = v345;
      uint64_t v3 = &qword_100480508;
      if (!v345) {
        goto LABEL_111;
      }
    }
  }
  swift_release();
  v284  = swift_bridgeObjectRetain();
  sub_1001449D0(v284);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_152:
  sub_100011E30((uint64_t)v305);
  sub_100011E30((uint64_t)v311);
  sub_100011E30((uint64_t)v303);
  sub_100011E30((uint64_t)v310);
  sub_100011E30((uint64_t)v307);
  return sub_100011E30((uint64_t)v313);
}

double sub_1001483D0@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  char v7 = *((unsigned char *)a2 + 33);
  char v8 = a2[2] & 1;
  long long v14 = *a2;
  long long v11 = v14;
  long long v12 = a2[1];
  __int16 v13 = *((_WORD *)a2 + 16);
  uint64_t v9 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  sub_100036198((uint64_t)&v14);
  sub_100036198((uint64_t)&v12);
  *(_OWORD *)a3  = v11;
  *(void *)(a3 + 16)  = v5;
  *(void *)(a3 + 24)  = v6;
  *(unsigned char *)(a3 + 32)  = v8;
  *(unsigned char *)(a3 + 33)  = v7;
  double result = 0.0;
  *(_OWORD *)(a3 + 40)  = 0u;
  *(_OWORD *)(a3 + 56)  = 0u;
  *(_OWORD *)(a3 + 72)  = 0u;
  *(void *)(a3 + 88)  = 0;
  return result;
}

double sub_1001484B0@<D0>(void (*a1)(long long *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100010BCC(&qword_100480500);
  a1(&v14, a2 + *(int *)(v4 + 64));
  double result = *(double *)&v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  char v9 = v18;
  uint64_t v10 = v22;
  long long v11 = v19;
  long long v12 = v20;
  long long v13 = v21;
  *(_OWORD *)a2  = v14;
  *(void *)(a2 + 16)  = v6;
  *(void *)(a2 + 24)  = v7;
  *(unsigned char *)(a2 + 32)  = v8;
  *(unsigned char *)(a2 + 33)  = v9;
  *(_OWORD *)(a2 + 40)  = v11;
  *(_OWORD *)(a2 + 56)  = v12;
  *(_OWORD *)(a2 + 72)  = v13;
  *(void *)(a2 + 88)  = v10;
  return result;
}

uint64_t sub_100148548@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  char v9 = *((unsigned char *)a2 + 32);
  char v10 = *((unsigned char *)a2 + 33);
  uint64_t v11 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  *(void *)a3  = v6;
  *(void *)(a3 + 8)  = v5;
  *(void *)(a3 + 16)  = v8;
  *(void *)(a3 + 24)  = v7;
  *(unsigned char *)(a3 + 32)  = v9;
  *(unsigned char *)(a3 + 33)  = v10;
  *(_OWORD *)(a3 + 40)  = 0u;
  *(_OWORD *)(a3 + 56)  = 0u;
  *(_OWORD *)(a3 + 72)  = 0u;
  *(void *)(a3 + 88)  = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t AWDLPeer.received(actionFrame:with:)(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unsigned int v9 = a1;
  unint64_t v33 = HIDWORD(a1);
  uint64_t v10 = *(void *)(type metadata accessor for DispatchTime() - 8);
  uint64_t v11 = __chkstk_darwin();
  long long v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *(unsigned __int8 *)(a4 + 16);
  uint64_t v32 = v11;
  if (v14)
  {
    if (v14 == 1)
    {
      uint64_t v15 = type metadata accessor for AWDLActionFrame.Header(0);
      uint64_t v16 = *(void *)(a4 + *(int *)(v15 + 48));
      char v17 = (int *)type metadata accessor for AWDLPeer(0);
      uint64_t v18 = v17[24];
    }
    else
    {
      uint64_t v15 = type metadata accessor for AWDLActionFrame.Header(0);
      uint64_t v16 = *(void *)(a4 + *(int *)(v15 + 48));
      char v17 = (int *)type metadata accessor for AWDLPeer(0);
      uint64_t v18 = v17[25];
    }
  }
  else
  {
    uint64_t v15 = type metadata accessor for AWDLActionFrame.Header(0);
    uint64_t v16 = *(void *)(a4 + *(int *)(v15 + 48));
    char v17 = (int *)type metadata accessor for AWDLPeer(0);
    uint64_t v18 = v17[23];
  }
  uint64_t v19 = v5 + v18;
  *(void *)uint64_t v19 = v16;
  unsigned int v20 = v33;
  *(unsigned char *)(v19 + 8)  = 0;
  BOOL v21 = v20 >= a2;
  unsigned int v22 = v20 - a2;
  BOOL v23 = v20 < a2;
  if (v21) {
    unsigned int v24 = v22;
  }
  else {
    unsigned int v24 = 0;
  }
  type metadata accessor for AWDLPeer(0);
  uint64_t v25 = v5 + v17[21];
  *(_DWORD *)uint64_t v25 = v24;
  *(unsigned char *)(v25 + 4)  = v23;
  type metadata accessor for AWDLActionFrame.Header(0);
  uint64_t v26 = v5 + v17[22];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)(a4 + *(int *)(v15 + 52));
  *(unsigned char *)(v26 + 4)  = 0;
  sub_1001462B0(a3, (v9 >> 8) & 1);
  uint64_t v27 = v17[7];
  uint64_t v28 = *(void *)(v5 + v27);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(void *)(v5 + v27)  = v30;
  if (qword_10047BFF0 != -1) {
LABEL_13:
  }
    swift_once();
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v5 + v17[6], v13, v32);
}

void AWDLPeer.hash(into:)()
{
  uint64_t v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 20));
  Swift::UInt8 v2 = v1[1];
  Swift::UInt8 v3 = v1[2];
  Swift::UInt8 v4 = v1[3];
  Swift::UInt8 v5 = v1[4];
  Swift::UInt8 v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

BOOL static AWDLPeer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for AWDLPeer(0) + 20);
  Swift::UInt8 v5 = (_DWORD *)(a1 + v4);
  int v6 = *(unsigned __int16 *)(a1 + v4 + 4);
  uint64_t v7 = a2 + v4;
  return *v5 == *(_DWORD *)v7 && v6 == *(unsigned __int16 *)(v7 + 4);
}

Swift::Int AWDLPeer.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 20));
  Swift::UInt8 v2 = v1[1];
  Swift::UInt8 v3 = v1[2];
  Swift::UInt8 v4 = v1[3];
  Swift::UInt8 v5 = v1[4];
  Swift::UInt8 v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_100148A38(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt8 v3 = (Swift::UInt8 *)(v1 + *(int *)(a1 + 20));
  LOBYTE(a1)  = v3[1];
  Swift::UInt8 v4 = v3[2];
  Swift::UInt8 v5 = v3[3];
  Swift::UInt8 v6 = v3[4];
  Swift::UInt8 v7 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_100148AE8(uint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  Swift::UInt8 v4 = v3[1];
  Swift::UInt8 v5 = v3[2];
  Swift::UInt8 v6 = v3[3];
  Swift::UInt8 v7 = v3[4];
  Swift::UInt8 v8 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
}

Swift::Int sub_100148B70(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Swift::UInt8 v4 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  LOBYTE(a2)  = v4[1];
  Swift::UInt8 v5 = v4[2];
  Swift::UInt8 v6 = v4[3];
  Swift::UInt8 v7 = v4[4];
  Swift::UInt8 v8 = v4[5];
  Hasher._combine(_:)(*v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_100148C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  Swift::UInt8 v4 = (_DWORD *)(a1 + v3);
  int v5 = *(unsigned __int16 *)(a1 + v3 + 4);
  uint64_t v6 = a2 + v3;
  return *v4 == *(_DWORD *)v6 && v5 == *(unsigned __int16 *)(v6 + 4);
}

uint64_t sub_100148C94(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AWDLPeer.AdvertisedService(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004804B8);
}

uint64_t sub_100148D14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100148D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100148DE4()
{
  unint64_t result = qword_100480350;
  if (!qword_100480350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480350);
  }
  return result;
}

uint64_t sub_100148E38()
{
  return sub_100148EC8(&qword_100480358, (void (*)(uint64_t))type metadata accessor for AWDLPeer.AdvertisedService);
}

uint64_t sub_100148E80()
{
  return sub_100148EC8(&qword_100480360, (void (*)(uint64_t))type metadata accessor for AWDLPeer);
}

uint64_t sub_100148EC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AWDLPeer(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1  = *a2;
    a1  = (void *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
    uint64_t v12 = (char *)a1 + v9;
    long long v13 = (char *)a2 + v9;
    uint64_t v14 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = a3[8];
    *(void *)((char *)a1 + a3[7])  = *(void *)((char *)a2 + a3[7]);
    uint64_t v16 = (_OWORD *)((char *)a1 + v15);
    char v17 = (_OWORD *)((char *)a2 + v15);
    *uint64_t v16 = *v17;
    *(_OWORD *)((char *)v16 + 10)  = *(_OWORD *)((char *)v17 + 10);
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    unsigned int v20 = (char *)a1 + v18;
    BOOL v21 = (char *)a2 + v18;
    long long v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)unsigned int v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1)  = v22;
    *((_OWORD *)v20 + 2)  = *((_OWORD *)v21 + 2);
    v20[48]  = v21[48];
    BOOL v23 = (char *)a1 + v19;
    unsigned int v24 = (char *)a2 + v19;
    unint64_t v25 = *(void *)((char *)a2 + v19 + 24);
    if (v25 >> 60 == 15)
    {
      long long v26 = *((_OWORD *)v24 + 1);
      *(_OWORD *)BOOL v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1)  = v26;
    }
    else
    {
      *BOOL v23 = *v24;
      *(_DWORD *)(v23 + 2)  = *(_DWORD *)(v24 + 2);
      *((_DWORD *)v23 + 2)  = *((_DWORD *)v24 + 2);
      uint64_t v28 = *((void *)v24 + 2);
      sub_100013D44(v28, v25);
      *((void *)v23 + 2)  = v28;
      *((void *)v23 + 3)  = v25;
    }
    uint64_t v29 = a3[11];
    uint64_t v30 = a3[12];
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    *(_WORD *)uint64_t v31 = *(_WORD *)v32;
    long long v31[2] = v32[2];
    unint64_t v33 = (char *)a1 + v30;
    unint64_t v34 = (char *)a2 + v30;
    *unint64_t v33 = *v34;
    *(_DWORD *)(v33 + 2)  = *(_DWORD *)(v34 + 2);
    *(void *)(v33 + 6)  = *(void *)(v34 + 6);
    *(void *)(v33 + 14)  = *(void *)(v34 + 14);
    *((_WORD *)v33 + 13)  = *((_WORD *)v34 + 13);
    *(_DWORD *)(v33 + 22)  = *(_DWORD *)(v34 + 22);
    *((_WORD *)v33 + 14)  = *((_WORD *)v34 + 14);
    *(_DWORD *)(v33 + 30)  = *(_DWORD *)(v34 + 30);
    *((void *)v33 + 5)  = *((void *)v34 + 5);
    uint64_t v35 = a3[13];
    uint64_t v36 = a3[14];
    uint64_t v37 = (char *)a1 + v35;
    uint64_t v38 = (char *)a2 + v35;
    *uint64_t v37 = *v38;
    uint64_t v39 = *((void *)v38 + 2);
    *((void *)v37 + 1)  = *((void *)v38 + 1);
    *((void *)v37 + 2)  = v39;
    uint64_t v40 = (_WORD *)((char *)a1 + v36);
    uint64_t v41 = (_WORD *)((char *)a2 + v36);
    uint64_t v42 = type metadata accessor for AWDLActionFrame.DataPathState(0);
    uint64_t v43 = *(void *)(v42 - 8);
    unint64_t v44 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v43 + 48);
    unint64_t v45 = (int *)v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44(v41, 1, v45))
    {
      uint64_t v46 = sub_100010BCC((uint64_t *)&unk_1004882F0);
      memcpy(v40, v41, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      uint64_t v100 = v43;
      *uint64_t v40 = *v41;
      *((unsigned char *)v40 + 2)  = *((unsigned char *)v41 + 2);
      *((_DWORD *)v40 + 1)  = *((_DWORD *)v41 + 1);
      v40[4]  = v41[4];
      *(_DWORD *)(v40 + 5)  = *(_DWORD *)(v41 + 5);
      *(_DWORD *)((char *)v40 + 13)  = *(_DWORD *)((char *)v41 + 13);
      v40[12]  = v41[12];
      *((_DWORD *)v40 + 5)  = *((_DWORD *)v41 + 5);
      int v47 = *(_DWORD *)(v41 + 13);
      *(_DWORD *)((char *)v40 + 29)  = *(_DWORD *)((char *)v41 + 29);
      *(_DWORD *)(v40 + 13)  = v47;
      uint64_t v48 = *((void *)v41 + 6);
      *((void *)v40 + 5)  = *((void *)v41 + 5);
      *((void *)v40 + 6)  = v48;
      *((_DWORD *)v40 + 14)  = *((_DWORD *)v41 + 14);
      *(_DWORD *)((char *)v40 + 59)  = *(_DWORD *)((char *)v41 + 59);
      *((unsigned char *)v40 + 63)  = *((unsigned char *)v41 + 63);
      *((_DWORD *)v40 + 16)  = *((_DWORD *)v41 + 16);
      *((unsigned char *)v40 + 68)  = *((unsigned char *)v41 + 68);
      int v49 = *((_DWORD *)v41 + 18);
      *((unsigned char *)v40 + 76)  = *((unsigned char *)v41 + 76);
      *((_DWORD *)v40 + 18)  = v49;
      *(_OWORD *)((char *)v40 + 77)  = *(_OWORD *)((char *)v41 + 77);
      *(_WORD *)((char *)v40 + 93)  = *(_WORD *)((char *)v41 + 93);
      uint64_t v50 = v45[34];
      __dst  = (char *)v40 + v50;
      unint64_t v51 = (char *)v41 + v50;
      uint64_t v52 = type metadata accessor for DispatchTimeInterval();
      uint64_t v53 = *(void *)(v52 - 8);
      uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
      swift_bridgeObjectRetain();
      if (v54(v51, 1, v52))
      {
        uint64_t v55 = sub_100010BCC(&qword_10047F2A8);
        memcpy(__dst, v51, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v51, v52);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v52);
      }
      uint64_t v56 = v45[35];
      uint64_t v57 = (char *)v40 + v56;
      uint64_t v58 = (char *)v41 + v56;
      *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
      v57[4]  = v58[4];
      uint64_t v59 = v45[36];
      uint64_t v60 = (char *)v40 + v59;
      uint64_t v61 = (char *)v41 + v59;
      v60[4]  = v61[4];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      (*(void (**)(_WORD *, void, uint64_t))(v100 + 56))(v40, 0, 1);
    }
    uint64_t v62 = a3[15];
    uint64_t v63 = a3[16];
    uint64_t v64 = (_OWORD *)((char *)a1 + v62);
    uint64_t v65 = (_OWORD *)((char *)a2 + v62);
    long long v66 = v65[1];
    *uint64_t v64 = *v65;
    v64[1]  = v66;
    *(_OWORD *)((char *)v64 + 25)  = *(_OWORD *)((char *)v65 + 25);
    uint64_t v67 = (char *)a1 + v63;
    unint64_t v68 = (char *)a2 + v63;
    *(_WORD *)uint64_t v67 = *(_WORD *)v68;
    v67[2]  = v68[2];
    uint64_t v69 = a3[17];
    uint64_t v70 = a3[18];
    uint64_t v71 = (char *)a1 + v69;
    uint64_t v72 = (char *)a2 + v69;
    long long v73 = *((_OWORD *)v72 + 1);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1)  = v73;
    *((void *)v71 + 4)  = *((void *)v72 + 4);
    unint64_t v74 = (char *)a1 + v70;
    unint64_t v75 = (char *)a2 + v70;
    *(_DWORD *)unint64_t v74 = *(_DWORD *)v75;
    *((_WORD *)v74 + 2)  = *((_WORD *)v75 + 2);
    *((void *)v74 + 1)  = *((void *)v75 + 1);
    uint64_t v76 = a3[19];
    uint64_t v77 = a3[20];
    BOOL v78 = (void *)((char *)a1 + v76);
    uint64_t v79 = (void *)((char *)a2 + v76);
    uint64_t v80 = v79[1];
    *BOOL v78 = *v79;
    v78[1]  = v80;
    *(void *)((char *)a1 + v77)  = *(void *)((char *)a2 + v77);
    uint64_t v81 = a3[21];
    uint64_t v82 = a3[22];
    uint64_t v83 = (char *)a1 + v81;
    uint64_t v84 = (char *)a2 + v81;
    *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
    v83[4]  = v84[4];
    uint64_t v85 = (char *)a1 + v82;
    uint64_t v86 = (char *)a2 + v82;
    *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
    v85[4]  = v86[4];
    uint64_t v87 = a3[23];
    uint64_t v88 = a3[24];
    uint64_t v89 = (char *)a1 + v87;
    unint64_t v90 = (char *)a2 + v87;
    *(void *)uint64_t v89 = *(void *)v90;
    v89[8]  = v90[8];
    uint64_t v91 = (char *)a1 + v88;
    uint64_t v92 = (char *)a2 + v88;
    *(void *)uint64_t v91 = *(void *)v92;
    v91[8]  = v92[8];
    uint64_t v93 = a3[25];
    uint64_t v94 = a3[26];
    uint64_t v95 = (char *)a1 + v93;
    long long v96 = (char *)a2 + v93;
    v95[8]  = v96[8];
    *(void *)uint64_t v95 = *(void *)v96;
    *((unsigned char *)a1 + v94)  = *((unsigned char *)a2 + v94);
    uint64_t v97 = a3[28];
    *((unsigned char *)a1 + a3[27])  = *((unsigned char *)a2 + a3[27]);
    *((unsigned char *)a1 + v97)  = *((unsigned char *)a2 + v97);
    *((unsigned char *)a1 + a3[29])  = *((unsigned char *)a2 + a3[29]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AWDLPeer(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[10];
  unint64_t v8 = *(void *)(v7 + 24);
  if (v8 >> 60 != 15) {
    sub_10000C970(*(void *)(v7 + 16), v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[14];
  uint64_t v10 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(v10 + 136);
    uint64_t v12 = type metadata accessor for DispatchTimeInterval();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(unsigned char *)(v19 + 48)  = *(unsigned char *)(v20 + 48);
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  unint64_t v24 = *(void *)(a2 + v18 + 24);
  if (v24 >> 60 == 15)
  {
    long long v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16)  = v25;
  }
  else
  {
    *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
    *(_DWORD *)(v22 + 2)  = *(_DWORD *)(v23 + 2);
    *(_DWORD *)(v22 + 8)  = *(_DWORD *)(v23 + 8);
    uint64_t v26 = *(void *)(v23 + 16);
    sub_100013D44(v26, v24);
    *(void *)(v22 + 16)  = v26;
    *(void *)(v22 + 24)  = v24;
  }
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_WORD *)uint64_t v29 = *(_WORD *)v30;
  *(unsigned char *)(v29 + 2)  = *(unsigned char *)(v30 + 2);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(_DWORD *)(v31 + 2)  = *(_DWORD *)(v32 + 2);
  *(void *)(v31 + 6)  = *(void *)(v32 + 6);
  *(void *)(v31 + 14)  = *(void *)(v32 + 14);
  *(_WORD *)(v31 + 26)  = *(_WORD *)(v32 + 26);
  *(_DWORD *)(v31 + 22)  = *(_DWORD *)(v32 + 22);
  *(_WORD *)(v31 + 28)  = *(_WORD *)(v32 + 28);
  *(_DWORD *)(v31 + 30)  = *(_DWORD *)(v32 + 30);
  *(void *)(v31 + 40)  = *(void *)(v32 + 40);
  uint64_t v33 = a3[13];
  uint64_t v34 = a3[14];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  uint64_t v37 = *(void *)(v36 + 16);
  *(void *)(v35 + 8)  = *(void *)(v36 + 8);
  *(void *)(v35 + 16)  = v37;
  uint64_t v38 = (_WORD *)(a1 + v34);
  uint64_t v39 = (_WORD *)(a2 + v34);
  uint64_t v40 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v41 + 48);
  uint64_t v43 = (int *)v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42(v39, 1, v43))
  {
    uint64_t v44 = sub_100010BCC((uint64_t *)&unk_1004882F0);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v98 = v41;
    *uint64_t v38 = *v39;
    *((unsigned char *)v38 + 2)  = *((unsigned char *)v39 + 2);
    *((_DWORD *)v38 + 1)  = *((_DWORD *)v39 + 1);
    v38[4]  = v39[4];
    *(_DWORD *)(v38 + 5)  = *(_DWORD *)(v39 + 5);
    *(_DWORD *)((char *)v38 + 13)  = *(_DWORD *)((char *)v39 + 13);
    v38[12]  = v39[12];
    *((_DWORD *)v38 + 5)  = *((_DWORD *)v39 + 5);
    int v45 = *(_DWORD *)(v39 + 13);
    *(_DWORD *)((char *)v38 + 29)  = *(_DWORD *)((char *)v39 + 29);
    *(_DWORD *)(v38 + 13)  = v45;
    uint64_t v46 = *((void *)v39 + 6);
    *((void *)v38 + 5)  = *((void *)v39 + 5);
    *((void *)v38 + 6)  = v46;
    *((_DWORD *)v38 + 14)  = *((_DWORD *)v39 + 14);
    *(_DWORD *)((char *)v38 + 59)  = *(_DWORD *)((char *)v39 + 59);
    *((unsigned char *)v38 + 63)  = *((unsigned char *)v39 + 63);
    *((_DWORD *)v38 + 16)  = *((_DWORD *)v39 + 16);
    *((unsigned char *)v38 + 68)  = *((unsigned char *)v39 + 68);
    int v47 = *((_DWORD *)v39 + 18);
    *((unsigned char *)v38 + 76)  = *((unsigned char *)v39 + 76);
    *((_DWORD *)v38 + 18)  = v47;
    *(_OWORD *)((char *)v38 + 77)  = *(_OWORD *)((char *)v39 + 77);
    *(_WORD *)((char *)v38 + 93)  = *(_WORD *)((char *)v39 + 93);
    uint64_t v48 = v43[34];
    uint64_t v97 = (char *)v38 + v48;
    int v49 = (char *)v39 + v48;
    uint64_t v50 = type metadata accessor for DispatchTimeInterval();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    if (v52(v49, 1, v50))
    {
      uint64_t v53 = sub_100010BCC(&qword_10047F2A8);
      memcpy(v97, v49, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v97, v49, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v97, 0, 1, v50);
    }
    uint64_t v54 = v43[35];
    uint64_t v55 = (char *)v38 + v54;
    uint64_t v56 = (char *)v39 + v54;
    *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
    v55[4]  = v56[4];
    uint64_t v57 = v43[36];
    uint64_t v58 = (char *)v38 + v57;
    uint64_t v59 = (char *)v39 + v57;
    v58[4]  = v59[4];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    (*(void (**)(_WORD *, void, uint64_t))(v98 + 56))(v38, 0, 1);
  }
  uint64_t v60 = a3[15];
  uint64_t v61 = a3[16];
  uint64_t v62 = (_OWORD *)(a1 + v60);
  uint64_t v63 = (_OWORD *)(a2 + v60);
  long long v64 = v63[1];
  *uint64_t v62 = *v63;
  v62[1]  = v64;
  *(_OWORD *)((char *)v62 + 25)  = *(_OWORD *)((char *)v63 + 25);
  uint64_t v65 = a1 + v61;
  uint64_t v66 = a2 + v61;
  *(_WORD *)uint64_t v65 = *(_WORD *)v66;
  *(unsigned char *)(v65 + 2)  = *(unsigned char *)(v66 + 2);
  uint64_t v67 = a3[17];
  uint64_t v68 = a3[18];
  uint64_t v69 = a1 + v67;
  uint64_t v70 = a2 + v67;
  long long v71 = *(_OWORD *)(v70 + 16);
  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
  *(_OWORD *)(v69 + 16)  = v71;
  *(void *)(v69 + 32)  = *(void *)(v70 + 32);
  uint64_t v72 = a1 + v68;
  uint64_t v73 = a2 + v68;
  *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
  *(_WORD *)(v72 + 4)  = *(_WORD *)(v73 + 4);
  *(void *)(v72 + 8)  = *(void *)(v73 + 8);
  uint64_t v74 = a3[19];
  uint64_t v75 = a3[20];
  uint64_t v76 = (void *)(a1 + v74);
  uint64_t v77 = (void *)(a2 + v74);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  v76[1]  = v78;
  *(void *)(a1 + v75)  = *(void *)(a2 + v75);
  uint64_t v79 = a3[21];
  uint64_t v80 = a3[22];
  uint64_t v81 = a1 + v79;
  uint64_t v82 = a2 + v79;
  *(_DWORD *)uint64_t v81 = *(_DWORD *)v82;
  *(unsigned char *)(v81 + 4)  = *(unsigned char *)(v82 + 4);
  uint64_t v83 = a1 + v80;
  uint64_t v84 = a2 + v80;
  *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
  *(unsigned char *)(v83 + 4)  = *(unsigned char *)(v84 + 4);
  uint64_t v85 = a3[23];
  uint64_t v86 = a3[24];
  uint64_t v87 = a1 + v85;
  uint64_t v88 = a2 + v85;
  *(void *)uint64_t v87 = *(void *)v88;
  *(unsigned char *)(v87 + 8)  = *(unsigned char *)(v88 + 8);
  uint64_t v89 = a1 + v86;
  uint64_t v90 = a2 + v86;
  *(void *)uint64_t v89 = *(void *)v90;
  *(unsigned char *)(v89 + 8)  = *(unsigned char *)(v90 + 8);
  uint64_t v91 = a3[25];
  uint64_t v92 = a3[26];
  uint64_t v93 = a1 + v91;
  uint64_t v94 = a2 + v91;
  *(unsigned char *)(v93 + 8)  = *(unsigned char *)(v94 + 8);
  *(void *)uint64_t v93 = *(void *)v94;
  *(unsigned char *)(a1 + v92)  = *(unsigned char *)(a2 + v92);
  uint64_t v95 = a3[28];
  *(unsigned char *)(a1 + a3[27])  = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + v95)  = *(unsigned char *)(a2 + v95);
  *(unsigned char *)(a1 + a3[29])  = *(unsigned char *)(a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1]  = v9[1];
  void v8[2] = v9[2];
  _OWORD v8[3] = v9[3];
  v8[4]  = v9[4];
  void v8[5] = v9[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  long long v17 = *(_OWORD *)((char *)v16 + 10);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  char v21 = *(unsigned char *)(v20 + 48);
  long long v23 = *(_OWORD *)(v20 + 16);
  long long v22 = *(_OWORD *)(v20 + 32);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v23;
  *(_OWORD *)(v19 + 32)  = v22;
  *(unsigned char *)(v19 + 48)  = v21;
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  unint64_t v27 = *(void *)(a1 + v24 + 24) >> 60;
  unint64_t v28 = *(void *)(a2 + v24 + 24) >> 60;
  if (v27 <= 0xE)
  {
    if (v28 <= 0xE)
    {
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(_WORD *)(v25 + 2)  = *(_WORD *)(v26 + 2);
      *(_WORD *)(v25 + 4)  = *(_WORD *)(v26 + 4);
      *(_DWORD *)(v25 + 8)  = *(_DWORD *)(v26 + 8);
      uint64_t v33 = *(void *)(v26 + 16);
      unint64_t v34 = *(void *)(v26 + 24);
      sub_100013D44(v33, v34);
      uint64_t v35 = *(void *)(v25 + 16);
      unint64_t v36 = *(void *)(v25 + 24);
      *(void *)(v25 + 16)  = v33;
      *(void *)(v25 + 24)  = v34;
      sub_10000C970(v35, v36);
    }
    else
    {
      sub_10014A894(v25);
      long long v30 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16)  = v30;
    }
  }
  else if (v28 <= 0xE)
  {
    *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
    *(_WORD *)(v25 + 2)  = *(_WORD *)(v26 + 2);
    *(_WORD *)(v25 + 4)  = *(_WORD *)(v26 + 4);
    *(_DWORD *)(v25 + 8)  = *(_DWORD *)(v26 + 8);
    uint64_t v31 = *(void *)(v26 + 16);
    unint64_t v32 = *(void *)(v26 + 24);
    sub_100013D44(v31, v32);
    *(void *)(v25 + 16)  = v31;
    *(void *)(v25 + 24)  = v32;
  }
  else
  {
    long long v29 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16)  = v29;
  }
  uint64_t v37 = a3[11];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = (__int16 *)(a2 + v37);
  __int16 v40 = *v39;
  *(unsigned char *)(v38 + 2)  = *((unsigned char *)v39 + 2);
  *(_WORD *)uint64_t v38 = v40;
  uint64_t v41 = a3[12];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  *(unsigned char *)uint64_t v42 = *(unsigned char *)v43;
  *(_WORD *)(v42 + 2)  = *(_WORD *)(v43 + 2);
  *(unsigned char *)(v42 + 4)  = *(unsigned char *)(v43 + 4);
  *(unsigned char *)(v42 + 5)  = *(unsigned char *)(v43 + 5);
  *(_WORD *)(v42 + 6)  = *(_WORD *)(v43 + 6);
  *(_WORD *)(v42 + 8)  = *(_WORD *)(v43 + 8);
  *(_WORD *)(v42 + 10)  = *(_WORD *)(v43 + 10);
  *(_WORD *)(v42 + 12)  = *(_WORD *)(v43 + 12);
  *(_WORD *)(v42 + 14)  = *(_WORD *)(v43 + 14);
  *(_WORD *)(v42 + 16)  = *(_WORD *)(v43 + 16);
  *(unsigned char *)(v42 + 18)  = *(unsigned char *)(v43 + 18);
  *(unsigned char *)(v42 + 19)  = *(unsigned char *)(v43 + 19);
  *(unsigned char *)(v42 + 20)  = *(unsigned char *)(v43 + 20);
  *(unsigned char *)(v42 + 21)  = *(unsigned char *)(v43 + 21);
  *(unsigned char *)(v42 + 22)  = *(unsigned char *)(v43 + 22);
  *(unsigned char *)(v42 + 23)  = *(unsigned char *)(v43 + 23);
  *(unsigned char *)(v42 + 24)  = *(unsigned char *)(v43 + 24);
  *(unsigned char *)(v42 + 25)  = *(unsigned char *)(v43 + 25);
  *(unsigned char *)(v42 + 26)  = *(unsigned char *)(v43 + 26);
  *(unsigned char *)(v42 + 27)  = *(unsigned char *)(v43 + 27);
  *(unsigned char *)(v42 + 28)  = *(unsigned char *)(v43 + 28);
  *(unsigned char *)(v42 + 29)  = *(unsigned char *)(v43 + 29);
  *(_WORD *)(v42 + 30)  = *(_WORD *)(v43 + 30);
  *(_WORD *)(v42 + 32)  = *(_WORD *)(v43 + 32);
  *(void *)(v42 + 40)  = *(void *)(v43 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  *(unsigned char *)uint64_t v45 = *(unsigned char *)v46;
  *(void *)(v45 + 8)  = *(void *)(v46 + 8);
  *(void *)(v45 + 16)  = *(void *)(v46 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[14];
  uint64_t v48 = a1 + v47;
  int v49 = (__int16 *)(a2 + v47);
  uint64_t v50 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v51 = (void *)*((void *)v50 - 1);
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, int *))v51[6];
  int v53 = v52(v48, 1, v50);
  int v54 = v52((uint64_t)v49, 1, v50);
  if (!v53)
  {
    if (v54)
    {
      sub_100148C94(v48, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_14;
    }
    __int16 v69 = *v49;
    *(unsigned char *)(v48 + 2)  = *((unsigned char *)v49 + 2);
    *(_WORD *)uint64_t v48 = v69;
    int v70 = *((_DWORD *)v49 + 1);
    *(_WORD *)(v48 + 8)  = v49[4];
    *(_DWORD *)(v48 + 4)  = v70;
    int v71 = *(_DWORD *)(v49 + 5);
    *(_DWORD *)(v48 + 13)  = *(_DWORD *)((char *)v49 + 13);
    *(_DWORD *)(v48 + 10)  = v71;
    int v72 = *((_DWORD *)v49 + 5);
    *(_WORD *)(v48 + 24)  = v49[12];
    *(_DWORD *)(v48 + 20)  = v72;
    int v73 = *(_DWORD *)(v49 + 13);
    *(_DWORD *)(v48 + 29)  = *(_DWORD *)((char *)v49 + 29);
    *(_DWORD *)(v48 + 26)  = v73;
    *(void *)(v48 + 40)  = *((void *)v49 + 5);
    *(void *)(v48 + 48)  = *((void *)v49 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v74 = *((_DWORD *)v49 + 14);
    *(_DWORD *)(v48 + 59)  = *(_DWORD *)((char *)v49 + 59);
    *(_DWORD *)(v48 + 56)  = v74;
    *(unsigned char *)(v48 + 63)  = *((unsigned char *)v49 + 63);
    *(unsigned char *)(v48 + 64)  = *((unsigned char *)v49 + 64);
    *(unsigned char *)(v48 + 65)  = *((unsigned char *)v49 + 65);
    LOWORD(v74)  = v49[33];
    *(unsigned char *)(v48 + 68)  = *((unsigned char *)v49 + 68);
    *(_WORD *)(v48 + 66)  = v74;
    int v75 = *((_DWORD *)v49 + 18);
    *(unsigned char *)(v48 + 76)  = *((unsigned char *)v49 + 76);
    *(_DWORD *)(v48 + 72)  = v75;
    *(unsigned char *)(v48 + 77)  = *((unsigned char *)v49 + 77);
    *(unsigned char *)(v48 + 78)  = *((unsigned char *)v49 + 78);
    *(unsigned char *)(v48 + 79)  = *((unsigned char *)v49 + 79);
    *(unsigned char *)(v48 + 80)  = *((unsigned char *)v49 + 80);
    *(unsigned char *)(v48 + 81)  = *((unsigned char *)v49 + 81);
    *(unsigned char *)(v48 + 82)  = *((unsigned char *)v49 + 82);
    *(unsigned char *)(v48 + 83)  = *((unsigned char *)v49 + 83);
    *(unsigned char *)(v48 + 84)  = *((unsigned char *)v49 + 84);
    *(unsigned char *)(v48 + 85)  = *((unsigned char *)v49 + 85);
    *(unsigned char *)(v48 + 86)  = *((unsigned char *)v49 + 86);
    *(unsigned char *)(v48 + 87)  = *((unsigned char *)v49 + 87);
    *(unsigned char *)(v48 + 88)  = *((unsigned char *)v49 + 88);
    *(unsigned char *)(v48 + 89)  = *((unsigned char *)v49 + 89);
    *(unsigned char *)(v48 + 90)  = *((unsigned char *)v49 + 90);
    *(unsigned char *)(v48 + 91)  = *((unsigned char *)v49 + 91);
    *(unsigned char *)(v48 + 92)  = *((unsigned char *)v49 + 92);
    *(unsigned char *)(v48 + 93)  = *((unsigned char *)v49 + 93);
    *(unsigned char *)(v48 + 94)  = *((unsigned char *)v49 + 94);
    uint64_t v76 = v50[34];
    uint64_t v77 = (void *)(v48 + v76);
    __srca  = (char *)v49 + v76;
    uint64_t v78 = type metadata accessor for DispatchTimeInterval();
    uint64_t v142 = *(void *)(v78 - 8);
    uint64_t v143 = v77;
    uint64_t v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v142 + 48);
    LODWORD(v77)  = v79(v77, 1, v78);
    int v80 = v79(__srca, 1, v78);
    if (v77)
    {
      if (!v80)
      {
        (*(void (**)(void *, char *, uint64_t))(v142 + 16))(v143, __srca, v78);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 56))(v143, 0, 1, v78);
        goto LABEL_25;
      }
      size_t v81 = *(void *)(*(void *)(sub_100010BCC(&qword_10047F2A8) - 8) + 64);
      uint64_t v82 = v143;
    }
    else
    {
      if (!v80)
      {
        (*(void (**)(void *, char *, uint64_t))(v142 + 24))(v143, __srca, v78);
        goto LABEL_25;
      }
      (*(void (**)(void *, uint64_t))(v142 + 8))(v143, v78);
      size_t v81 = *(void *)(*(void *)(sub_100010BCC(&qword_10047F2A8) - 8) + 64);
      uint64_t v82 = v143;
    }
    memcpy(v82, __srca, v81);
LABEL_25:
    uint64_t v91 = v50[35];
    uint64_t v92 = v48 + v91;
    uint64_t v93 = (int *)((char *)v49 + v91);
    int v94 = *v93;
    *(unsigned char *)(v92 + 4)  = *((unsigned char *)v93 + 4);
    *(_DWORD *)uint64_t v92 = v94;
    uint64_t v95 = v50[36];
    uint64_t v96 = v48 + v95;
    uint64_t v97 = (int *)((char *)v49 + v95);
    int v98 = *v97;
    *(unsigned char *)(v96 + 4)  = *((unsigned char *)v97 + 4);
    *(_DWORD *)uint64_t v96 = v98;
    goto LABEL_26;
  }
  if (v54)
  {
LABEL_14:
    uint64_t v68 = sub_100010BCC((uint64_t *)&unk_1004882F0);
    memcpy((void *)v48, v49, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_26;
  }
  __src  = (void (**)(uint64_t, void, uint64_t))v51;
  __int16 v55 = *v49;
  *(unsigned char *)(v48 + 2)  = *((unsigned char *)v49 + 2);
  *(_WORD *)uint64_t v48 = v55;
  int v56 = *((_DWORD *)v49 + 1);
  *(_WORD *)(v48 + 8)  = v49[4];
  *(_DWORD *)(v48 + 4)  = v56;
  int v57 = *(_DWORD *)(v49 + 5);
  *(_DWORD *)(v48 + 13)  = *(_DWORD *)((char *)v49 + 13);
  *(_DWORD *)(v48 + 10)  = v57;
  int v58 = *((_DWORD *)v49 + 5);
  *(_WORD *)(v48 + 24)  = v49[12];
  *(_DWORD *)(v48 + 20)  = v58;
  int v59 = *(_DWORD *)(v49 + 13);
  *(_DWORD *)(v48 + 29)  = *(_DWORD *)((char *)v49 + 29);
  *(_DWORD *)(v48 + 26)  = v59;
  *(void *)(v48 + 40)  = *((void *)v49 + 5);
  *(void *)(v48 + 48)  = *((void *)v49 + 6);
  int v60 = *((_DWORD *)v49 + 14);
  *(_DWORD *)(v48 + 59)  = *(_DWORD *)((char *)v49 + 59);
  *(_DWORD *)(v48 + 56)  = v60;
  *(unsigned char *)(v48 + 63)  = *((unsigned char *)v49 + 63);
  *(unsigned char *)(v48 + 64)  = *((unsigned char *)v49 + 64);
  *(unsigned char *)(v48 + 65)  = *((unsigned char *)v49 + 65);
  LOWORD(v60)  = v49[33];
  *(unsigned char *)(v48 + 68)  = *((unsigned char *)v49 + 68);
  *(_WORD *)(v48 + 66)  = v60;
  int v61 = *((_DWORD *)v49 + 18);
  *(unsigned char *)(v48 + 76)  = *((unsigned char *)v49 + 76);
  *(_DWORD *)(v48 + 72)  = v61;
  *(unsigned char *)(v48 + 77)  = *((unsigned char *)v49 + 77);
  *(unsigned char *)(v48 + 78)  = *((unsigned char *)v49 + 78);
  *(unsigned char *)(v48 + 79)  = *((unsigned char *)v49 + 79);
  *(unsigned char *)(v48 + 80)  = *((unsigned char *)v49 + 80);
  *(unsigned char *)(v48 + 81)  = *((unsigned char *)v49 + 81);
  *(unsigned char *)(v48 + 82)  = *((unsigned char *)v49 + 82);
  *(unsigned char *)(v48 + 83)  = *((unsigned char *)v49 + 83);
  *(unsigned char *)(v48 + 84)  = *((unsigned char *)v49 + 84);
  *(unsigned char *)(v48 + 85)  = *((unsigned char *)v49 + 85);
  *(unsigned char *)(v48 + 86)  = *((unsigned char *)v49 + 86);
  *(unsigned char *)(v48 + 87)  = *((unsigned char *)v49 + 87);
  *(unsigned char *)(v48 + 88)  = *((unsigned char *)v49 + 88);
  *(unsigned char *)(v48 + 89)  = *((unsigned char *)v49 + 89);
  *(unsigned char *)(v48 + 90)  = *((unsigned char *)v49 + 90);
  *(unsigned char *)(v48 + 91)  = *((unsigned char *)v49 + 91);
  *(unsigned char *)(v48 + 92)  = *((unsigned char *)v49 + 92);
  *(unsigned char *)(v48 + 93)  = *((unsigned char *)v49 + 93);
  *(unsigned char *)(v48 + 94)  = *((unsigned char *)v49 + 94);
  uint64_t v62 = v50[34];
  Class v140 = v50;
  char v141 = (void *)(v48 + v62);
  uint64_t v63 = (char *)v49 + v62;
  uint64_t v64 = type metadata accessor for DispatchTimeInterval();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  swift_bridgeObjectRetain();
  if (v66(v63, 1, v64))
  {
    uint64_t v67 = sub_100010BCC(&qword_10047F2A8);
    memcpy(v141, v63, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v65 + 16))(v141, v63, v64);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v141, 0, 1, v64);
  }
  uint64_t v83 = v140[35];
  uint64_t v84 = v48 + v83;
  uint64_t v85 = (int *)((char *)v49 + v83);
  int v86 = *v85;
  *(unsigned char *)(v84 + 4)  = *((unsigned char *)v85 + 4);
  *(_DWORD *)uint64_t v84 = v86;
  uint64_t v87 = v140[36];
  uint64_t v88 = v48 + v87;
  uint64_t v89 = (int *)((char *)v49 + v87);
  int v90 = *v89;
  *(unsigned char *)(v88 + 4)  = *((unsigned char *)v89 + 4);
  *(_DWORD *)uint64_t v88 = v90;
  __src[7](v48, 0, 1);
LABEL_26:
  uint64_t v99 = a3[15];
  uint64_t v100 = (_OWORD *)(a1 + v99);
  uint64_t v101 = (long long *)(a2 + v99);
  long long v102 = *v101;
  long long v103 = v101[1];
  *(_OWORD *)((char *)v100 + 25)  = *(long long *)((char *)v101 + 25);
  *uint64_t v100 = v102;
  v100[1]  = v103;
  uint64_t v104 = a3[16];
  uint64_t v105 = a1 + v104;
  uint64_t v106 = (__int16 *)(a2 + v104);
  __int16 v107 = *v106;
  *(unsigned char *)(v105 + 2)  = *((unsigned char *)v106 + 2);
  *(_WORD *)uint64_t v105 = v107;
  uint64_t v108 = a3[17];
  uint64_t v109 = a1 + v108;
  uint64_t v110 = (long long *)(a2 + v108);
  long long v111 = *v110;
  long long v112 = v110[1];
  *(void *)(v109 + 32)  = *((void *)v110 + 4);
  *(_OWORD *)uint64_t v109 = v111;
  *(_OWORD *)(v109 + 16)  = v112;
  uint64_t v113 = a3[18];
  uint64_t v114 = a1 + v113;
  uint64_t v115 = a2 + v113;
  *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
  *(unsigned char *)(v114 + 4)  = *(unsigned char *)(v115 + 4);
  *(unsigned char *)(v114 + 5)  = *(unsigned char *)(v115 + 5);
  *(void *)(v114 + 8)  = *(void *)(v115 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = a3[19];
  uint64_t v117 = a1 + v116;
  uint64_t v118 = a2 + v116;
  *(void *)(a1 + v116)  = *(void *)(a2 + v116);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v117 + 8)  = *(void *)(v118 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[20])  = *(void *)(a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v119 = a3[21];
  uint64_t v120 = a1 + v119;
  unint64_t v121 = (int *)(a2 + v119);
  int v122 = *v121;
  *(unsigned char *)(v120 + 4)  = *((unsigned char *)v121 + 4);
  *(_DWORD *)uint64_t v120 = v122;
  uint64_t v123 = a3[22];
  uint64_t v124 = a1 + v123;
  uint64_t v125 = (int *)(a2 + v123);
  int v126 = *v125;
  *(unsigned char *)(v124 + 4)  = *((unsigned char *)v125 + 4);
  *(_DWORD *)uint64_t v124 = v126;
  uint64_t v127 = a3[23];
  uint64_t v128 = a1 + v127;
  unint64_t v129 = (uint64_t *)(a2 + v127);
  uint64_t v130 = *v129;
  *(unsigned char *)(v128 + 8)  = *((unsigned char *)v129 + 8);
  *(void *)uint64_t v128 = v130;
  uint64_t v131 = a3[24];
  uint64_t v132 = a1 + v131;
  uint64_t v133 = (uint64_t *)(a2 + v131);
  uint64_t v134 = *v133;
  *(unsigned char *)(v132 + 8)  = *((unsigned char *)v133 + 8);
  *(void *)uint64_t v132 = v134;
  uint64_t v135 = a3[25];
  uint64_t v136 = a1 + v135;
  unint64_t v137 = (uint64_t *)(a2 + v135);
  uint64_t v138 = *v137;
  *(unsigned char *)(v136 + 8)  = *((unsigned char *)v137 + 8);
  *(void *)uint64_t v136 = v138;
  *(unsigned char *)(a1 + a3[26])  = *(unsigned char *)(a2 + a3[26]);
  *(unsigned char *)(a1 + a3[27])  = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + a3[28])  = *(unsigned char *)(a2 + a3[28]);
  *(unsigned char *)(a1 + a3[29])  = *(unsigned char *)(a2 + a3[29]);
  return a1;
}

uint64_t sub_10014A894(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(unsigned char *)(v19 + 48)  = *(unsigned char *)(v20 + 48);
  long long v22 = (_OWORD *)(a1 + v18);
  long long v23 = (_OWORD *)(a2 + v18);
  long long v24 = v23[1];
  *long long v22 = *v23;
  v22[1]  = v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_WORD *)uint64_t v27 = *(_WORD *)v28;
  *(unsigned char *)(v27 + 2)  = *(unsigned char *)(v28 + 2);
  long long v29 = (_OWORD *)(a1 + v26);
  long long v30 = (long long *)(a2 + v26);
  long long v31 = *v30;
  long long v32 = v30[2];
  v29[1]  = v30[1];
  v29[2]  = v32;
  *long long v29 = v31;
  uint64_t v33 = a3[13];
  uint64_t v34 = a3[14];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(void *)(v35 + 16)  = *(void *)(v36 + 16);
  uint64_t v37 = (_WORD *)(a1 + v34);
  uint64_t v38 = (_WORD *)(a2 + v34);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  uint64_t v39 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v40 = *((void *)v39 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = sub_100010BCC((uint64_t *)&unk_1004882F0);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    *uint64_t v37 = *v38;
    *((unsigned char *)v37 + 2)  = *((unsigned char *)v38 + 2);
    *((_DWORD *)v37 + 1)  = *((_DWORD *)v38 + 1);
    v37[4]  = v38[4];
    *(_DWORD *)(v37 + 5)  = *(_DWORD *)(v38 + 5);
    *(_DWORD *)((char *)v37 + 13)  = *(_DWORD *)((char *)v38 + 13);
    v37[12]  = v38[12];
    *((_DWORD *)v37 + 5)  = *((_DWORD *)v38 + 5);
    int v42 = *(_DWORD *)(v38 + 13);
    *(_DWORD *)((char *)v37 + 29)  = *(_DWORD *)((char *)v38 + 29);
    *(_DWORD *)(v37 + 13)  = v42;
    *(_OWORD *)(v37 + 20)  = *(_OWORD *)(v38 + 20);
    *((_DWORD *)v37 + 14)  = *((_DWORD *)v38 + 14);
    *(_DWORD *)((char *)v37 + 59)  = *(_DWORD *)((char *)v38 + 59);
    *((unsigned char *)v37 + 63)  = *((unsigned char *)v38 + 63);
    *((_DWORD *)v37 + 16)  = *((_DWORD *)v38 + 16);
    *((unsigned char *)v37 + 68)  = *((unsigned char *)v38 + 68);
    *((_DWORD *)v37 + 18)  = *((_DWORD *)v38 + 18);
    *((unsigned char *)v37 + 76)  = *((unsigned char *)v38 + 76);
    *(_OWORD *)((char *)v37 + 77)  = *(_OWORD *)((char *)v38 + 77);
    *(_WORD *)((char *)v37 + 93)  = *(_WORD *)((char *)v38 + 93);
    uint64_t v43 = v39[34];
    __dst  = (char *)v37 + v43;
    uint64_t v44 = (char *)v38 + v43;
    uint64_t v45 = type metadata accessor for DispatchTimeInterval();
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = sub_100010BCC(&qword_10047F2A8);
      memcpy(__dst, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dst, v44, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
    }
    uint64_t v48 = v39[35];
    int v49 = (char *)v37 + v48;
    uint64_t v50 = (char *)v38 + v48;
    *(_DWORD *)int v49 = *(_DWORD *)v50;
    v49[4]  = v50[4];
    uint64_t v51 = v39[36];
    uint64_t v52 = (char *)v37 + v51;
    int v53 = (char *)v38 + v51;
    v52[4]  = v53[4];
    *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
    (*(void (**)(_WORD *, void, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v54 = a3[15];
  uint64_t v55 = a3[16];
  int v56 = (_OWORD *)(a1 + v54);
  int v57 = (_OWORD *)(a2 + v54);
  long long v58 = v57[1];
  *int v56 = *v57;
  v56[1]  = v58;
  *(_OWORD *)((char *)v56 + 25)  = *(_OWORD *)((char *)v57 + 25);
  uint64_t v59 = a1 + v55;
  uint64_t v60 = a2 + v55;
  *(_WORD *)uint64_t v59 = *(_WORD *)v60;
  *(unsigned char *)(v59 + 2)  = *(unsigned char *)(v60 + 2);
  uint64_t v61 = a3[17];
  uint64_t v62 = a3[18];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = a2 + v61;
  long long v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16)  = v65;
  *(void *)(v63 + 32)  = *(void *)(v64 + 32);
  *(_OWORD *)(a1 + v62)  = *(_OWORD *)(a2 + v62);
  uint64_t v66 = a3[20];
  *(_OWORD *)(a1 + a3[19])  = *(_OWORD *)(a2 + a3[19]);
  *(void *)(a1 + v66)  = *(void *)(a2 + v66);
  uint64_t v67 = a3[21];
  uint64_t v68 = a3[22];
  uint64_t v69 = a1 + v67;
  uint64_t v70 = a2 + v67;
  *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
  *(unsigned char *)(v69 + 4)  = *(unsigned char *)(v70 + 4);
  uint64_t v71 = a1 + v68;
  uint64_t v72 = a2 + v68;
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  *(unsigned char *)(v71 + 4)  = *(unsigned char *)(v72 + 4);
  uint64_t v73 = a3[23];
  uint64_t v74 = a3[24];
  uint64_t v75 = a1 + v73;
  uint64_t v76 = a2 + v73;
  *(void *)uint64_t v75 = *(void *)v76;
  *(unsigned char *)(v75 + 8)  = *(unsigned char *)(v76 + 8);
  uint64_t v77 = a1 + v74;
  uint64_t v78 = a2 + v74;
  *(unsigned char *)(v77 + 8)  = *(unsigned char *)(v78 + 8);
  *(void *)uint64_t v77 = *(void *)v78;
  uint64_t v79 = a3[25];
  uint64_t v80 = a3[26];
  uint64_t v81 = a1 + v79;
  uint64_t v82 = a2 + v79;
  *(unsigned char *)(v81 + 8)  = *(unsigned char *)(v82 + 8);
  *(void *)uint64_t v81 = *(void *)v82;
  *(unsigned char *)(a1 + v80)  = *(unsigned char *)(a2 + v80);
  uint64_t v83 = a3[28];
  *(unsigned char *)(a1 + a3[27])  = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + v83)  = *(unsigned char *)(a2 + v83);
  *(unsigned char *)(a1 + a3[29])  = *(unsigned char *)(a2 + a3[29]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7])  = *(void *)(a2 + a3[7]);
  uint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  *uint64_t v15 = *v16;
  *(_OWORD *)((char *)v15 + 10)  = *(_OWORD *)((char *)v16 + 10);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(unsigned char *)(v19 + 48)  = *(unsigned char *)(v20 + 48);
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  unint64_t v24 = *(void *)(a1 + v18 + 24);
  if (v24 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v25 = *(void *)(v23 + 24);
  if (v25 >> 60 == 15)
  {
    sub_10014A894(v22);
LABEL_4:
    long long v26 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16)  = v26;
    goto LABEL_6;
  }
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(_DWORD *)(v22 + 2)  = *(_DWORD *)(v23 + 2);
  *(_DWORD *)(v22 + 8)  = *(_DWORD *)(v23 + 8);
  uint64_t v27 = *(void *)(v22 + 16);
  *(void *)(v22 + 16)  = *(void *)(v23 + 16);
  *(void *)(v22 + 24)  = v25;
  sub_10000C970(v27, v24);
LABEL_6:
  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_WORD *)uint64_t v30 = *(_WORD *)v31;
  *(unsigned char *)(v30 + 2)  = *(unsigned char *)(v31 + 2);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(unsigned char *)uint64_t v32 = *(unsigned char *)v33;
  *(_DWORD *)(v32 + 2)  = *(_DWORD *)(v33 + 2);
  *(void *)(v32 + 6)  = *(void *)(v33 + 6);
  *(_DWORD *)(v32 + 14)  = *(_DWORD *)(v33 + 14);
  *(void *)(v32 + 18)  = *(void *)(v33 + 18);
  *(_DWORD *)(v32 + 26)  = *(_DWORD *)(v33 + 26);
  *(_WORD *)(v32 + 30)  = *(_WORD *)(v33 + 30);
  *(_WORD *)(v32 + 32)  = *(_WORD *)(v33 + 32);
  *(void *)(v32 + 40)  = *(void *)(v33 + 40);
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[13];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  uint64_t v37 = *(void *)(v36 + 16);
  *(void *)(v35 + 8)  = v38;
  *(void *)(v35 + 16)  = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[14];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  int v42 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v43 = *((void *)v42 - 1);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      sub_100148C94(v40, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_12;
    }
    *(_WORD *)uint64_t v40 = *(_WORD *)v41;
    *(unsigned char *)(v40 + 2)  = *(unsigned char *)(v41 + 2);
    *(_DWORD *)(v40 + 4)  = *(_DWORD *)(v41 + 4);
    *(_WORD *)(v40 + 8)  = *(_WORD *)(v41 + 8);
    *(_DWORD *)(v40 + 10)  = *(_DWORD *)(v41 + 10);
    *(_DWORD *)(v40 + 13)  = *(_DWORD *)(v41 + 13);
    *(_WORD *)(v40 + 24)  = *(_WORD *)(v41 + 24);
    *(_DWORD *)(v40 + 20)  = *(_DWORD *)(v41 + 20);
    int v54 = *(_DWORD *)(v41 + 26);
    *(_DWORD *)(v40 + 29)  = *(_DWORD *)(v41 + 29);
    *(_DWORD *)(v40 + 26)  = v54;
    uint64_t v55 = *(void *)(v41 + 48);
    *(void *)(v40 + 40)  = *(void *)(v41 + 40);
    *(void *)(v40 + 48)  = v55;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v40 + 56)  = *(_DWORD *)(v41 + 56);
    *(_DWORD *)(v40 + 59)  = *(_DWORD *)(v41 + 59);
    *(unsigned char *)(v40 + 63)  = *(unsigned char *)(v41 + 63);
    *(unsigned char *)(v40 + 64)  = *(unsigned char *)(v41 + 64);
    *(unsigned char *)(v40 + 65)  = *(unsigned char *)(v41 + 65);
    *(_WORD *)(v40 + 66)  = *(_WORD *)(v41 + 66);
    *(unsigned char *)(v40 + 68)  = *(unsigned char *)(v41 + 68);
    *(unsigned char *)(v40 + 76)  = *(unsigned char *)(v41 + 76);
    *(_DWORD *)(v40 + 72)  = *(_DWORD *)(v41 + 72);
    *(unsigned char *)(v40 + 77)  = *(unsigned char *)(v41 + 77);
    *(unsigned char *)(v40 + 78)  = *(unsigned char *)(v41 + 78);
    *(unsigned char *)(v40 + 79)  = *(unsigned char *)(v41 + 79);
    *(unsigned char *)(v40 + 80)  = *(unsigned char *)(v41 + 80);
    *(unsigned char *)(v40 + 81)  = *(unsigned char *)(v41 + 81);
    *(unsigned char *)(v40 + 82)  = *(unsigned char *)(v41 + 82);
    *(unsigned char *)(v40 + 83)  = *(unsigned char *)(v41 + 83);
    *(unsigned char *)(v40 + 84)  = *(unsigned char *)(v41 + 84);
    *(unsigned char *)(v40 + 85)  = *(unsigned char *)(v41 + 85);
    *(unsigned char *)(v40 + 86)  = *(unsigned char *)(v41 + 86);
    *(unsigned char *)(v40 + 87)  = *(unsigned char *)(v41 + 87);
    *(unsigned char *)(v40 + 88)  = *(unsigned char *)(v41 + 88);
    *(unsigned char *)(v40 + 89)  = *(unsigned char *)(v41 + 89);
    *(unsigned char *)(v40 + 90)  = *(unsigned char *)(v41 + 90);
    *(unsigned char *)(v40 + 91)  = *(unsigned char *)(v41 + 91);
    *(unsigned char *)(v40 + 92)  = *(unsigned char *)(v41 + 92);
    *(unsigned char *)(v40 + 93)  = *(unsigned char *)(v41 + 93);
    *(unsigned char *)(v40 + 94)  = *(unsigned char *)(v41 + 94);
    uint64_t v56 = v42[34];
    int v57 = (void *)(v40 + v56);
    __dsta  = (void *)(v41 + v56);
    uint64_t v58 = type metadata accessor for DispatchTimeInterval();
    uint64_t v110 = *(void *)(v58 - 8);
    long long v111 = v57;
    uint64_t v59 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v110 + 48);
    LODWORD(v57)  = v59(v57, 1, v58);
    int v60 = v59(__dsta, 1, v58);
    if (v57)
    {
      if (!v60)
      {
        (*(void (**)(void *, void *, uint64_t))(v110 + 32))(v111, __dsta, v58);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v58);
        goto LABEL_23;
      }
      size_t v61 = *(void *)(*(void *)(sub_100010BCC(&qword_10047F2A8) - 8) + 64);
      uint64_t v62 = v111;
    }
    else
    {
      if (!v60)
      {
        (*(void (**)(void *, void *, uint64_t))(v110 + 40))(v111, __dsta, v58);
        goto LABEL_23;
      }
      (*(void (**)(void *, uint64_t))(v110 + 8))(v111, v58);
      size_t v61 = *(void *)(*(void *)(sub_100010BCC(&qword_10047F2A8) - 8) + 64);
      uint64_t v62 = v111;
    }
    memcpy(v62, __dsta, v61);
LABEL_23:
    uint64_t v69 = v42[35];
    uint64_t v70 = v40 + v69;
    uint64_t v71 = v41 + v69;
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
    *(unsigned char *)(v70 + 4)  = *(unsigned char *)(v71 + 4);
    uint64_t v72 = v42[36];
    uint64_t v73 = v40 + v72;
    uint64_t v74 = v41 + v72;
    *(unsigned char *)(v73 + 4)  = *(unsigned char *)(v74 + 4);
    *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
    goto LABEL_24;
  }
  if (v46)
  {
LABEL_12:
    uint64_t v53 = sub_100010BCC((uint64_t *)&unk_1004882F0);
    memcpy((void *)v40, (const void *)v41, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  *(_WORD *)uint64_t v40 = *(_WORD *)v41;
  *(unsigned char *)(v40 + 2)  = *(unsigned char *)(v41 + 2);
  *(_DWORD *)(v40 + 4)  = *(_DWORD *)(v41 + 4);
  *(_WORD *)(v40 + 8)  = *(_WORD *)(v41 + 8);
  *(_DWORD *)(v40 + 10)  = *(_DWORD *)(v41 + 10);
  *(_DWORD *)(v40 + 13)  = *(_DWORD *)(v41 + 13);
  *(_WORD *)(v40 + 24)  = *(_WORD *)(v41 + 24);
  *(_DWORD *)(v40 + 20)  = *(_DWORD *)(v41 + 20);
  int v47 = *(_DWORD *)(v41 + 26);
  *(_DWORD *)(v40 + 29)  = *(_DWORD *)(v41 + 29);
  *(_DWORD *)(v40 + 26)  = v47;
  *(_OWORD *)(v40 + 40)  = *(_OWORD *)(v41 + 40);
  *(_DWORD *)(v40 + 56)  = *(_DWORD *)(v41 + 56);
  *(_DWORD *)(v40 + 59)  = *(_DWORD *)(v41 + 59);
  *(unsigned char *)(v40 + 63)  = *(unsigned char *)(v41 + 63);
  *(_DWORD *)(v40 + 64)  = *(_DWORD *)(v41 + 64);
  *(unsigned char *)(v40 + 68)  = *(unsigned char *)(v41 + 68);
  *(_DWORD *)(v40 + 72)  = *(_DWORD *)(v41 + 72);
  *(unsigned char *)(v40 + 76)  = *(unsigned char *)(v41 + 76);
  *(_OWORD *)(v40 + 77)  = *(_OWORD *)(v41 + 77);
  *(_WORD *)(v40 + 93)  = *(_WORD *)(v41 + 93);
  uint64_t v48 = v42[34];
  __dst  = (void *)(v40 + v48);
  int v49 = (const void *)(v41 + v48);
  uint64_t v50 = type metadata accessor for DispatchTimeInterval();
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    uint64_t v52 = sub_100010BCC(&qword_10047F2A8);
    memcpy(__dst, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v51 + 32))(__dst, v49, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
  }
  uint64_t v63 = v42[35];
  uint64_t v64 = v40 + v63;
  uint64_t v65 = v41 + v63;
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
  *(unsigned char *)(v64 + 4)  = *(unsigned char *)(v65 + 4);
  uint64_t v66 = v42[36];
  uint64_t v67 = v40 + v66;
  uint64_t v68 = v41 + v66;
  *(unsigned char *)(v67 + 4)  = *(unsigned char *)(v68 + 4);
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
LABEL_24:
  uint64_t v75 = a3[15];
  uint64_t v76 = a3[16];
  uint64_t v77 = (_OWORD *)(a1 + v75);
  uint64_t v78 = (_OWORD *)(a2 + v75);
  long long v79 = v78[1];
  *uint64_t v77 = *v78;
  v77[1]  = v79;
  *(_OWORD *)((char *)v77 + 25)  = *(_OWORD *)((char *)v78 + 25);
  uint64_t v80 = a1 + v76;
  uint64_t v81 = a2 + v76;
  *(_WORD *)uint64_t v80 = *(_WORD *)v81;
  *(unsigned char *)(v80 + 2)  = *(unsigned char *)(v81 + 2);
  uint64_t v82 = a3[17];
  uint64_t v83 = a3[18];
  uint64_t v84 = a1 + v82;
  uint64_t v85 = a2 + v82;
  long long v86 = *(_OWORD *)(v85 + 16);
  *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
  *(_OWORD *)(v84 + 16)  = v86;
  *(void *)(v84 + 32)  = *(void *)(v85 + 32);
  uint64_t v87 = a1 + v83;
  uint64_t v88 = a2 + v83;
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  *(unsigned char *)(v87 + 4)  = *(unsigned char *)(v88 + 4);
  *(unsigned char *)(v87 + 5)  = *(unsigned char *)(v88 + 5);
  *(void *)(v87 + 8)  = *(void *)(v88 + 8);
  swift_bridgeObjectRelease();
  uint64_t v89 = a3[19];
  uint64_t v90 = a1 + v89;
  uint64_t v91 = a2 + v89;
  *(void *)(a1 + v89)  = *(void *)(a2 + v89);
  swift_bridgeObjectRelease();
  *(void *)(v90 + 8)  = *(void *)(v91 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[20])  = *(void *)(a2 + a3[20]);
  swift_bridgeObjectRelease();
  uint64_t v92 = a3[21];
  uint64_t v93 = a3[22];
  uint64_t v94 = a1 + v92;
  uint64_t v95 = a2 + v92;
  *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
  *(unsigned char *)(v94 + 4)  = *(unsigned char *)(v95 + 4);
  uint64_t v96 = a1 + v93;
  uint64_t v97 = a2 + v93;
  *(_DWORD *)uint64_t v96 = *(_DWORD *)v97;
  *(unsigned char *)(v96 + 4)  = *(unsigned char *)(v97 + 4);
  uint64_t v98 = a3[23];
  uint64_t v99 = a3[24];
  uint64_t v100 = a1 + v98;
  uint64_t v101 = a2 + v98;
  *(void *)uint64_t v100 = *(void *)v101;
  *(unsigned char *)(v100 + 8)  = *(unsigned char *)(v101 + 8);
  uint64_t v102 = a1 + v99;
  uint64_t v103 = a2 + v99;
  *(unsigned char *)(v102 + 8)  = *(unsigned char *)(v103 + 8);
  *(void *)uint64_t v102 = *(void *)v103;
  uint64_t v104 = a3[25];
  uint64_t v105 = a3[26];
  uint64_t v106 = a1 + v104;
  uint64_t v107 = a2 + v104;
  *(void *)uint64_t v106 = *(void *)v107;
  *(unsigned char *)(v106 + 8)  = *(unsigned char *)(v107 + 8);
  *(unsigned char *)(a1 + v105)  = *(unsigned char *)(a2 + v105);
  uint64_t v108 = a3[28];
  *(unsigned char *)(a1 + a3[27])  = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + v108)  = *(unsigned char *)(a2 + v108);
  *(unsigned char *)(a1 + a3[29])  = *(unsigned char *)(a2 + a3[29]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014B73C);
}

uint64_t sub_10014B73C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for DispatchTime();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004882F0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[14];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[19]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16)  = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014B8B4);
}

uint64_t sub_10014B8B4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for DispatchTime();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t result = sub_100010BCC((uint64_t *)&unk_1004882F0);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[19])  = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[14];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10014BA14()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      sub_10014BBD8();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10014BBD8()
{
  if (!qword_1004803D0)
  {
    type metadata accessor for AWDLActionFrame.DataPathState(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004803D0);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AWDLPeer.Reachability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014BCFCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLPeer.Reachability()
{
  return &type metadata for AWDLPeer.Reachability;
}

unsigned char *initializeBufferWithCopyOfBuffer for AWDLPeer.AdvertisedService(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)unsigned int v4 = *a2;
    unsigned int v4 = (unsigned char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1  = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1)  = a2[1];
    *((void *)v4 + 2)  = v7;
    uint64_t v8 = a2[4];
    *((void *)v4 + 3)  = a2[3];
    *((void *)v4 + 4)  = v8;
    v4[40]  = *((unsigned char *)a2 + 40);
    v4[41]  = *((unsigned char *)a2 + 41);
    uint64_t v9 = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *((void *)v4 + 6)  = a2[6];
      *((void *)v4 + 7)  = v9;
      uint64_t v10 = a2[9];
      *((void *)v4 + 8)  = a2[8];
      *((void *)v4 + 9)  = v10;
      v4[80]  = *((unsigned char *)a2 + 80);
      v4[81]  = *((unsigned char *)a2 + 81);
      uint64_t v11 = a2[11];
      unint64_t v12 = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013D44(v11, v12);
      *((void *)v4 + 11)  = v11;
      *((void *)v4 + 12)  = v12;
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 4);
      *((_OWORD *)v4 + 3)  = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 4)  = v14;
      *((_OWORD *)v4 + 5)  = *((_OWORD *)a2 + 5);
      *((void *)v4 + 12)  = a2[12];
    }
    uint64_t v15 = *(int *)(a3 + 28);
    unint64_t v16 = &v4[v15];
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15);
    uint64_t v19 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = v18;
    *((void *)v16 + 1)  = v19;
    uint64_t v20 = *(void *)(v17 + 24);
    *((void *)v16 + 2)  = *(void *)(v17 + 16);
    *((void *)v16 + 3)  = v20;
    v16[32]  = *(unsigned char *)(v17 + 32);
    v16[33]  = *(unsigned char *)(v17 + 33);
    long long v21 = (int *)type metadata accessor for DNSRecords.SRV();
    uint64_t v22 = v21[5];
    uint64_t v31 = &v16[v22];
    uint64_t v23 = v17 + v22;
    uint64_t v24 = type metadata accessor for NWEndpoint.Port();
    unint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v31, v23, v24);
    uint64_t v26 = v21[6];
    uint64_t v27 = &v16[v26];
    uint64_t v28 = (void *)(v17 + v26);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1]  = v29;
    *(_WORD *)&v16[v21[7]]  = *(_WORD *)(v17 + v21[7]);
    *(_WORD *)&v16[v21[8]]  = *(_WORD *)(v17 + v21[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AWDLPeer.AdvertisedService(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[7])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C970(a1[11], a1[12]);
  }
  unsigned int v4 = (char *)a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = &v4[*(int *)(type metadata accessor for DNSRecords.SRV() + 20)];
  uint64_t v6 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v7;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41)  = *(unsigned char *)(a2 + 41);
  uint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 48)  = *(void *)(a2 + 48);
    *(void *)(a1 + 56)  = v8;
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(void *)(a1 + 72)  = v9;
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
    uint64_t v10 = *(void *)(a2 + 88);
    unint64_t v11 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v10, v11);
    *(void *)(a1 + 88)  = v10;
    *(void *)(a1 + 96)  = v11;
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v12;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13);
  uint64_t v17 = *(void *)(v15 + 8);
  *(void *)uint64_t v14 = v16;
  *(void *)(v14 + 8)  = v17;
  uint64_t v18 = *(void *)(v15 + 24);
  *(void *)(v14 + 16)  = *(void *)(v15 + 16);
  *(void *)(v14 + 24)  = v18;
  *(unsigned char *)(v14 + 32)  = *(unsigned char *)(v15 + 32);
  *(unsigned char *)(v14 + 33)  = *(unsigned char *)(v15 + 33);
  uint64_t v19 = (int *)type metadata accessor for DNSRecords.SRV();
  uint64_t v20 = v19[5];
  uint64_t v29 = v14 + v20;
  uint64_t v21 = v15 + v20;
  uint64_t v22 = type metadata accessor for NWEndpoint.Port();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v29, v21, v22);
  uint64_t v24 = v19[6];
  unint64_t v25 = (void *)(v14 + v24);
  uint64_t v26 = (void *)(v15 + v24);
  uint64_t v27 = v26[1];
  *unint64_t v25 = *v26;
  v25[1]  = v27;
  *(_WORD *)(v14 + v19[7])  = *(_WORD *)(v15 + v19[7]);
  *(_WORD *)(v14 + v19[8])  = *(_WORD *)(v15 + v19[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41)  = *(unsigned char *)(a2 + 41);
  uint64_t v6 = (_OWORD *)(a1 + 48);
  uint64_t v7 = (long long *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v8)
    {
      *(void *)(a1 + 48)  = *(void *)(a2 + 48);
      *(void *)(a1 + 56)  = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64)  = *(void *)(a2 + 64);
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
      *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
      uint64_t v9 = *(void *)(a2 + 88);
      unint64_t v10 = *(void *)(a2 + 96);
      sub_100013D44(v9, v10);
      uint64_t v11 = *(void *)(a1 + 88);
      unint64_t v12 = *(void *)(a1 + 96);
      *(void *)(a1 + 88)  = v9;
      *(void *)(a1 + 96)  = v10;
      sub_10000C970(v11, v12);
    }
    else
    {
      sub_10014C47C(a1 + 48);
      long long v16 = *(_OWORD *)(a2 + 64);
      long long v15 = *(_OWORD *)(a2 + 80);
      long long v17 = *v7;
      *(void *)(a1 + 96)  = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 64)  = v16;
      *(_OWORD *)(a1 + 80)  = v15;
      *uint64_t v6 = v17;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 48)  = *(void *)(a2 + 48);
    *(void *)(a1 + 56)  = *(void *)(a2 + 56);
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
    uint64_t v13 = *(void *)(a2 + 88);
    unint64_t v14 = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v13, v14);
    *(void *)(a1 + 88)  = v13;
    *(void *)(a1 + 96)  = v14;
  }
  else
  {
    long long v18 = *v7;
    long long v19 = *(_OWORD *)(a2 + 64);
    long long v20 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 64)  = v19;
    *(_OWORD *)(a1 + 80)  = v20;
    *uint64_t v6 = v18;
  }
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8)  = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 16)  = *(void *)(v23 + 16);
  *(void *)(v22 + 24)  = *(void *)(v23 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 32)  = *(unsigned char *)(v23 + 32);
  *(unsigned char *)(v22 + 33)  = *(unsigned char *)(v23 + 33);
  uint64_t v24 = (int *)type metadata accessor for DNSRecords.SRV();
  uint64_t v25 = v24[5];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = v24[6];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1]  = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(v22 + v24[7])  = *(_WORD *)(v23 + v24[7]);
  *(_WORD *)(v22 + v24[8])  = *(_WORD *)(v23 + v24[8]);
  return a1;
}

uint64_t sub_10014C47C(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_WORD *)(v6 + 32)  = *(_WORD *)(a2 + v5 + 32);
  long long v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16)  = v8;
  uint64_t v9 = (int *)type metadata accessor for DNSRecords.SRV();
  uint64_t v10 = v9[5];
  uint64_t v11 = v6 + v10;
  uint64_t v12 = v7 + v10;
  uint64_t v13 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(_OWORD *)(v6 + v9[6])  = *(_OWORD *)(v7 + v9[6]);
  *(_WORD *)(v6 + v9[7])  = *(_WORD *)(v7 + v9[7]);
  *(_WORD *)(v6 + v9[8])  = *(_WORD *)(v7 + v9[8]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41)  = *(unsigned char *)(a2 + 41);
  if (!*(void *)(a1 + 56)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  if (!v8)
  {
    sub_10014C47C(a1 + 48);
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v12;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    goto LABEL_6;
  }
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
  uint64_t v10 = *(void *)(a1 + 88);
  unint64_t v11 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  sub_10000C970(v10, v11);
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8)  = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v15 + 24);
  *(void *)(v14 + 16)  = *(void *)(v15 + 16);
  *(void *)(v14 + 24)  = v17;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 32)  = *(unsigned char *)(v15 + 32);
  *(unsigned char *)(v14 + 33)  = *(unsigned char *)(v15 + 33);
  long long v18 = (int *)type metadata accessor for DNSRecords.SRV();
  uint64_t v19 = v18[5];
  uint64_t v20 = v14 + v19;
  uint64_t v21 = v15 + v19;
  uint64_t v22 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = v18[6];
  uint64_t v24 = (void *)(v14 + v23);
  uint64_t v25 = (uint64_t *)(v15 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1]  = v26;
  swift_bridgeObjectRelease();
  *(_WORD *)(v14 + v18[7])  = *(_WORD *)(v15 + v18[7]);
  *(_WORD *)(v14 + v18[8])  = *(_WORD *)(v15 + v18[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014C794);
}

uint64_t sub_10014C794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DNSRecords.SRV();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014C858);
}

uint64_t sub_10014C858(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DNSRecords.SRV();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10014C900()
{
  uint64_t result = type metadata accessor for DNSRecords.SRV();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10014C9B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014CA18()
{
  unint64_t v1 = (int *)(type metadata accessor for DNSRecords.SRV() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for NWEndpoint.Port();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10014CB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for DNSRecords.SRV() - 8);
  uint64_t v6 = (uint64_t *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_100148548(a1, v6, a2);
}

uint64_t sub_10014CBA4()
{
  return _swift_deallocObject(v0, 32, 7);
}

double sub_10014CBB4@<D0>(uint64_t a1@<X8>)
{
  return sub_1001484B0(*(void (**)(long long *__return_ptr, uint64_t))(v1 + 16), a1);
}

uint64_t sub_10014CBBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10014CC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100148548(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_10014CC0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014CC1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 50, 7);
}

double sub_10014CC5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001483D0(a1, (long long *)(v2 + 16), a2);
}

uint64_t sub_10014CC64()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014CC74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15) {
    return sub_10000C970(a3, a4);
  }
  return result;
}

void *NANIntervalDuration.min.unsafeMutableAddressor()
{
  return &static NANIntervalDuration.min;
}

uint64_t NANIntervalDuration.timeUnits.getter(unsigned __int8 a1)
{
  if (a1 >= 0x3Cu) {
    return 0;
  }
  if (a1 != 59) {
    return 1 << (a1 + 4);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t NANIntervalDuration.deprecatedAvailabilityMapSize.getter(unsigned __int8 a1)
{
  if (a1 > 0x3Bu) {
    __break(1u);
  }
  if (a1 != 59) {
    return 0x200uLL >> (a1 + 4);
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10014CDA8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10014CE08()
{
  return RawRepresentable<>.encode(to:)();
}

void NANIntervalDuration.description.getter(unsigned __int8 a1)
{
  unint64_t v1 = NANIntervalDuration.timeUnits.getter(a1);

  NANTimeUnit.description.getter(v1);
}

void sub_10014CE80()
{
  unint64_t v1 = NANIntervalDuration.timeUnits.getter(*v0);

  NANTimeUnit.description.getter(v1);
}

unint64_t sub_10014CEB0()
{
  unint64_t result = qword_100480510;
  if (!qword_100480510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480510);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NANIntervalDuration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014CFD0);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANIntervalDuration()
{
  return &type metadata for NANIntervalDuration;
}

unint64_t sub_10014D008()
{
  unint64_t result = qword_100480518;
  if (!qword_100480518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480518);
  }
  return result;
}

uint64_t NANSubscribe.Configuration.serviceInfo.getter()
{
  if (qword_10047C278 != -1) {
    swift_once();
  }
  Swift::String v1 = String.lowercased()();
  Swift::String v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
  }
  NANGenericServiceProtocol.blob.getter(*(void *)(v0 + 24));
  if (v5 >> 60 != 15) {
    return 3;
  }
LABEL_11:
  int v6 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 68));
  uint64_t v7 = 2;
  if (v6) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 2;
  }
  swift_bridgeObjectRetain();
  NANGenericServiceProtocol.packetData(for:)(v8);
  swift_bridgeObjectRelease();
  return v7;
}

void *NANSubscribe.SubscribeType.defaultValue.unsafeMutableAddressor()
{
  return &static NANSubscribe.SubscribeType.defaultValue;
}

uint64_t NANSubscribe.SubscribeType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x657669746361;
  }
  else {
    return 0x65766973736170;
  }
}

CoreP2P::NANSubscribe::SubscribeType_optional __swiftcall NANSubscribe.SubscribeType.init(rawValue:)(Swift::String rawValue)
{
  object  = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E478, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value  = CoreP2P_NANSubscribe_SubscribeType_active;
  }
  else {
    v4.value  = CoreP2P_NANSubscribe_SubscribeType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_10014D254(char *a1, char *a2)
{
  return sub_100042738(*a1, *a2);
}

Swift::Int sub_10014D260()
{
  return Hasher._finalize()();
}

uint64_t sub_10014D2E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014D34C()
{
  return Hasher._finalize()();
}

uint64_t sub_10014D3C8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E478, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2  = v5;
  return result;
}

void sub_10014D428(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65766973736170;
  if (*v1) {
    uint64_t v2 = 0x657669746361;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_10014D464()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10014D4C4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10014D514()
{
  if (*v0) {
    return 0x657669746361;
  }
  else {
    return 0x65766973736170;
  }
}

uint64_t NANSubscribe.Configuration.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txFWDelay.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NANSubscribe.Configuration.type.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32)  = result & 1;
  return result;
}

uint64_t NANSubscribe.Configuration.rangingMandatory.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33)  = result;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.peerAddress.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.queryPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NANSubscribe.Configuration.queryPeriod.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NANSubscribe.Configuration.queryPeriod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 40));
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 40))  = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.awakeDWInterval.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterRx.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANSubscribe.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterRx.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterTx.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANSubscribe.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterTx.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 52));
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 52))  = v2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterCondition.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.bloomFilter.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 56);
  uint64_t v2 = *(void *)v1;
  sub_10014E854(*(void *)v1, *(void *)(v1 + 8), *(_WORD *)(v1 + 16));
  return v2;
}

uint64_t NANSubscribe.Configuration.bloomFilter.setter(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 56);
  uint64_t result = sub_1000CA4D0(*(void *)v7, *(void *)(v7 + 8), *(_WORD *)(v7 + 16));
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8)  = a2;
  *(_WORD *)(v7 + 16)  = a3;
  return result;
}

uint64_t (*NANSubscribe.Configuration.bloomFilter.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 60));
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 60))  = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.enableFastDiscovery.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 64);

  return sub_10014E868(v3, a1);
}

uint64_t NANSubscribe.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 64);

  return sub_10014E8CC(a1, v3);
}

uint64_t (*NANSubscribe.Configuration.oweKeys.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.authenticationType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 68));
}

BOOL NANSubscribe.Configuration.requiresAuthentication.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 68)) & 1) == 0;
}

unint64_t NANSubscribe.Configuration.multicastAddress.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 72));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANSubscribe.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  uint64_t v4 = v1 + *(int *)(result + 72);
  *(_WORD *)(v4 + 4)  = WORD2(a1);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 6)  = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 76));
}

uint64_t NANSubscribe.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 76))  = a1 & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastServiceType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANSubscribe.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (Swift::UInt64 *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(unsigned char *)v1);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, v8);
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 33));
  uint64_t v9 = (int *)type metadata accessor for NANSubscribe.Configuration();
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + v9[9], v4);
  int v10 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v5 + 88))(v7, v4);
  if (v10 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v11 = *v7;
    uint64_t v12 = 1000000000;
LABEL_7:
    Swift::UInt64 v13 = v11 * v12;
    BOOL v14 = (unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63;
    BOOL v15 = v11 <= 0;
    unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    if (v15) {
      unint64_t v16 = 0x8000000000000000;
    }
    if (v14) {
      Swift::UInt64 v17 = v16;
    }
    else {
      Swift::UInt64 v17 = v13;
    }
    goto LABEL_12;
  }
  if (v10 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v11 = *v7;
    uint64_t v12 = 1000000;
    goto LABEL_7;
  }
  if (v10 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    int64_t v11 = *v7;
    uint64_t v12 = 1000;
    goto LABEL_7;
  }
  if (v10 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    Swift::UInt64 v17 = *v7;
  }
  else
  {
    if (v10 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 8))(v7, v4);
    }
    Swift::UInt64 v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  Hasher._combine(_:)(v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v18 = (unsigned __int8 *)(v2 + v9[11]);
  uint64_t v19 = *((void *)v18 + 1);
  uint64_t v20 = *v18;
  swift_bridgeObjectRetain();
  NANMatchingFilter.hash(into:)(a1, v20, v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = (unsigned __int8 *)(v2 + v9[12]);
  uint64_t v22 = *((void *)v21 + 1);
  uint64_t v23 = *v21;
  swift_bridgeObjectRetain();
  NANMatchingFilter.hash(into:)(a1, v23, v22);
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = v2 + v9[14];
  __int16 v25 = *(_WORD *)(v24 + 16);
  if ((v25 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v27 = *(void *)v24;
    unint64_t v26 = *(void *)(v24 + 8);
    Hasher._combine(_:)(1u);
    sub_100013D44(v27, v26);
    Data.hash(into:)();
    Hasher._combine(_:)(v25);
    Hasher._combine(_:)(HIBYTE(v25) & 1);
    sub_1000CA4D0(v27, v26, v25);
  }
  Hasher._combine(_:)(*(unsigned char *)(v2 + v9[15]));
  uint64_t v28 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v30 = v29;
  Data.hash(into:)();
  sub_10000C970(v28, v30);
  if (*(unsigned char *)(v2 + v9[17]) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
  uint64_t v31 = (unsigned int *)(v2 + v9[18]);
  if (*((unsigned char *)v31 + 6))
  {
    LOBYTE(v32)  = 0;
  }
  else
  {
    unsigned int v33 = *((unsigned __int16 *)v31 + 2);
    int v34 = *v31;
    unint64_t v35 = *v31 | ((unint64_t)*((unsigned __int16 *)v31 + 2) << 32);
    unint64_t v36 = v35 >> 8;
    unint64_t v37 = v35 >> 16;
    unint64_t v38 = v35 >> 24;
    unsigned int v32 = v33 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
    Hasher._combine(_:)(v36);
    Hasher._combine(_:)(v37);
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(v33);
  }
  Hasher._combine(_:)(v32);
  if (*(unsigned char *)(v2 + v9[19]) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
}

Swift::Int NANSubscribe.Configuration.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANSubscribe.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10014E46C()
{
  Hasher.init(_seed:)();
  NANSubscribe.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t NANSubscribe.Configuration.init(instanceID:serviceName:serviceSpecificInfo:queryPeriod:enableFastDiscovery:authenticationType:multicastAddress:type:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, __int16 a11, char a12, char a13, char a14, unsigned __int8 a15)
{
  int v43 = a7;
  int v44 = a8;
  uint64_t v41 = a3;
  uint64_t v42 = a6;
  uint64_t v40 = a2;
  int v39 = a1;
  int v45 = a15;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v19 = &v38[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v21 = &v38[-v20];
  uint64_t v22 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  __int16 v25 = &v38[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  P256.KeyAgreement.PrivateKey.init()();
  unint64_t v46 = sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
  if (a5 >> 60 == 15)
  {
    uint64_t v26 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v21, 1, 1, v26);
  }
  else
  {
    *uint64_t v21 = a4;
    v21[1]  = a5;
    uint64_t v27 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v21, 0, 1, v27);
  }
  sub_10013EFA4((uint64_t)v21, (uint64_t)v19);
  sub_100027C1C((uint64_t)v19, 6);
  sub_10014EEE4((uint64_t)v21);
  unint64_t v28 = v46;
  unint64_t v29 = (int *)type metadata accessor for NANSubscribe.Configuration();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v23 + 32))(a9 + v29[16], v25, v22);
  *(unsigned char *)a9  = v39;
  uint64_t v30 = v41;
  *(void *)(a9 + 8)  = v40;
  *(void *)(a9 + 16)  = v30;
  *(void *)(a9 + 24)  = v28;
  *(unsigned char *)(a9 + 32)  = a14 & 1;
  *(unsigned char *)(a9 + 33)  = 0;
  uint64_t v31 = a9 + v29[9];
  uint64_t v32 = type metadata accessor for DispatchTimeInterval();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v31, v42, v32);
  *(unsigned char *)(a9 + v29[10])  = 1;
  uint64_t v34 = a9 + v29[11];
  *(unsigned char *)uint64_t v34 = 1;
  *(void *)(v34 + 8)  = _swiftEmptyArrayStorage;
  uint64_t v35 = a9 + v29[12];
  *(unsigned char *)uint64_t v35 = 0;
  *(void *)(v35 + 8)  = _swiftEmptyArrayStorage;
  *(unsigned char *)(a9 + v29[13])  = 0;
  uint64_t v36 = a9 + v29[14];
  *(void *)uint64_t v36 = 0;
  *(void *)(v36 + 8)  = 0;
  *(_WORD *)(v36 + 16)  = 512;
  *(unsigned char *)(a9 + v29[15])  = v43 & 1;
  *(unsigned char *)(a9 + v29[17])  = v44 & 1;
  uint64_t v37 = a9 + v29[18];
  *(_WORD *)(v37 + 4)  = a11;
  *(_DWORD *)uint64_t v37 = a10;
  *(unsigned char *)(v37 + 6)  = a12 & 1;
  *(unsigned char *)(a9 + v29[19])  = v45 & 1;
  return result;
}

uint64_t type metadata accessor for NANSubscribe.Configuration()
{
  uint64_t result = qword_1004805D8;
  if (!qword_1004805D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10014E854(uint64_t a1, unint64_t a2, __int16 a3)
{
  if ((a3 & 0xFF00) != 0x200) {
    return sub_100013D44(a1, a2);
  }
  return a1;
}

uint64_t sub_10014E868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s7CoreP2P12NANSubscribeO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  Swift::String v4 = String.lowercased()();
  Swift::String v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if ((sub_100081B6C(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = a1[32] ? 0x657669746361 : 0x65766973736170;
  unint64_t v10 = a1[32] ? 0xE600000000000000 : 0xE700000000000000;
  uint64_t v11 = a2[32] ? 0x657669746361 : 0x65766973736170;
  unint64_t v12 = a2[32] ? 0xE600000000000000 : 0xE700000000000000;
  if (v9 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v13 & 1) == 0) {
      return result;
    }
  }
  if (a1[33] != a2[33]) {
    return 0;
  }
  BOOL v14 = (int *)type metadata accessor for NANSubscribe.Configuration();
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((sub_100041D58(a1[v14[10]], a2[v14[10]]) & 1) == 0) {
    return 0;
  }
  uint64_t v15 = v14[11];
  unint64_t v16 = &a1[v15];
  uint64_t v17 = *(void *)&a1[v15 + 8];
  uint64_t v18 = &a2[v15];
  uint64_t v19 = *((void *)v18 + 1);
  if ((sub_100041E14(*v16, *v18) & 1) == 0) {
    return 0;
  }
  if ((sub_1000965CC(v17, v19) & 1) == 0) {
    return 0;
  }
  uint64_t v20 = v14[12];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = *(void *)&a1[v20 + 8];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = *((void *)v23 + 1);
  if ((sub_100041E14(*v21, *v23) & 1) == 0 || (sub_1000965CC(v22, v24) & 1) == 0) {
    return 0;
  }
  uint64_t v25 = v14[13];
  int v26 = a1[v25];
  int v27 = a2[v25];
  if (v26) {
    uint64_t v28 = 0x757145746F4E7874;
  }
  else {
    uint64_t v28 = 0x526C617571457874;
  }
  if (v26) {
    unint64_t v29 = 0xEC00000078526C61;
  }
  else {
    unint64_t v29 = 0xE900000000000078;
  }
  if (v27) {
    uint64_t v30 = 0x757145746F4E7874;
  }
  else {
    uint64_t v30 = 0x526C617571457874;
  }
  if (v27) {
    unint64_t v31 = 0xEC00000078526C61;
  }
  else {
    unint64_t v31 = 0xE900000000000078;
  }
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v32 & 1) == 0) {
      return result;
    }
  }
  uint64_t v33 = v14[14];
  uint64_t v35 = *(void *)&a1[v33];
  unint64_t v34 = *(void *)&a1[v33 + 8];
  __int16 v36 = *(_WORD *)&a1[v33 + 16];
  uint64_t v37 = &a2[v33];
  uint64_t v39 = *(void *)v37;
  unint64_t v38 = *((void *)v37 + 1);
  __int16 v40 = *((_WORD *)v37 + 8);
  int v41 = v40 & 0xFF00;
  if ((v36 & 0xFF00) == 0x200)
  {
    if (v41 == 512) {
      goto LABEL_51;
    }
    goto LABEL_57;
  }
  if (v41 == 512)
  {
LABEL_57:
    sub_10014E854(v35, v34, v36);
    sub_10014E854(v39, v38, v40);
    sub_1000CA4D0(v35, v34, v36);
    uint64_t v52 = v39;
    unint64_t v53 = v38;
    __int16 v54 = v40;
LABEL_58:
    sub_1000CA4D0(v52, v53, v54);
    return 0;
  }
  sub_10014E854(v35, v34, v36);
  sub_10014E854(v39, v38, v40);
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v34, v39, v38) & 1) == 0)
  {
    sub_1000CA4D0(v39, v38, v40);
    uint64_t v52 = v35;
    unint64_t v53 = v34;
    __int16 v54 = v36;
    goto LABEL_58;
  }
  sub_1000CA4D0(v39, v38, v40);
  sub_1000CA4D0(v35, v34, v36);
  uint64_t result = 0;
  if (v36 == v40
    && ((((v36 & 0x100) == 0) ^ ((unsigned __int16)(v40 & 0x100) >> 8)) & 1) != 0)
  {
LABEL_51:
    if (a1[v14[15]] != a2[v14[15]]) {
      return 0;
    }
    uint64_t v42 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    unint64_t v44 = v43;
    uint64_t v45 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    unint64_t v47 = v46;
    char v48 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v42, v44, v45, v46);
    sub_10000C970(v45, v47);
    sub_10000C970(v42, v44);
    if ((v48 & 1) == 0) {
      return 0;
    }
    uint64_t v49 = v14[17];
    unsigned __int8 v50 = a1[v49];
    int v51 = a2[v49];
    if (v50)
    {
      if (!v51) {
        return 0;
      }
    }
    else if (v51)
    {
      return 0;
    }
    uint64_t v55 = v14[18];
    uint64_t v56 = &a1[v55];
    unsigned __int8 v57 = a1[v55 + 6];
    uint64_t v58 = &a2[v55];
    if (v57)
    {
      if (v58[6]) {
        goto LABEL_76;
      }
    }
    else if ((v58[6] & 1) == 0)
    {
      unint64_t v59 = *(unsigned int *)v56 | ((unint64_t)*((unsigned __int16 *)v56 + 2) << 32);
      unint64_t v60 = *(unsigned int *)v58 | ((unint64_t)*((unsigned __int16 *)v58 + 2) << 32);
      v61.i64[0]  = 0xFFFFFFFFFFFFLL;
      v61.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v62 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v59), v61);
      int16x8_t v63 = (int16x8_t)vshlq_u64(v62, (uint64x2_t)xmmword_1003B2EB0);
      uint64x2_t v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v60), v61);
      int64x2_t v65 = (int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_1003B2EB0);
      int16x8_t v66 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_1003B2EA0);
      v72[0]  = v59;
      *(int32x2_t *)v62.i8  = vmovn_s64((int64x2_t)vshlq_u64(v62, (uint64x2_t)xmmword_1003B2EA0));
      *(int32x2_t *)v63.i8  = vmovn_s64((int64x2_t)v63);
      v63.i16[1]  = v63.i16[2];
      v63.i16[2]  = v62.i16[0];
      v63.i16[3]  = v62.i16[2];
      *(_DWORD *)&v72[1]  = vmovn_s16(v63).u32[0];
      v72[5]  = BYTE5(v59);
      v71[0]  = v60;
      *(int32x2_t *)v62.i8  = vmovn_s64((int64x2_t)v66);
      *(int32x2_t *)v66.i8  = vmovn_s64(v65);
      v66.i16[1]  = v66.i16[2];
      v66.i16[2]  = v62.i16[0];
      v66.i16[3]  = v62.i16[2];
      *(_DWORD *)&v71[1]  = vmovn_s16(v66).u32[0];
      v71[5]  = BYTE5(v60);
      if (*(_DWORD *)v72 == *(_DWORD *)v71 && *(unsigned __int16 *)&v72[4] == *(unsigned __int16 *)&v71[4])
      {
LABEL_76:
        uint64_t v68 = v14[19];
        unsigned __int8 v69 = a1[v68];
        unsigned __int8 v70 = a2[v68];
        if (v69)
        {
          if (v70) {
            return 1;
          }
        }
        else if ((v70 & 1) == 0)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10014EEE4(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047CF68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10014EF48()
{
  unint64_t result = qword_100480520;
  if (!qword_100480520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480520);
  }
  return result;
}

uint64_t sub_10014EF9C(uint64_t a1)
{
  uint64_t result = sub_10014F088(&qword_100486EB0);
  *(void *)(a1 + 8)  = result;
  return result;
}

void *sub_10014EFE0()
{
  return &protocol witness table for UInt8;
}

uint64_t sub_10014EFEC(uint64_t a1)
{
  *(void *)(a1 + 8)  = sub_10014F088(&qword_100480568);
  uint64_t result = sub_10014F088(&qword_100480570);
  *(void *)(a1 + 16)  = result;
  return result;
}

uint64_t sub_10014F054()
{
  return sub_10014F088(&qword_100480578);
}

uint64_t sub_10014F088(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NANSubscribe.Configuration();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe()
{
  return &type metadata for NANSubscribe;
}

unsigned char *storeEnumTagSinglePayload for NANSubscribe.SubscribeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014F1A8);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe.SubscribeType()
{
  return &type metadata for NANSubscribe.SubscribeType;
}

void *initializeBufferWithCopyOfBuffer for NANSubscribe.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1  = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8)  = a2[1];
    *(void *)(a1 + 16)  = v7;
    uint64_t v8 = a2[3];
    *(unsigned char *)(a1 + 32)  = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33)  = *((unsigned char *)a2 + 33);
    uint64_t v9 = a3[9];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(void *)(a1 + 24)  = v8;
    uint64_t v12 = type metadata accessor for DispatchTimeInterval();
    char v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[11];
    *((unsigned char *)v4 + a3[10])  = *((unsigned char *)a2 + a3[10]);
    uint64_t v15 = (char *)v4 + v14;
    unint64_t v16 = (char *)a2 + v14;
    *uint64_t v15 = *v16;
    *((void *)v15 + 1)  = *((void *)v16 + 1);
    uint64_t v17 = a3[12];
    uint64_t v18 = a3[13];
    uint64_t v19 = (char *)v4 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *uint64_t v19 = *v20;
    *((void *)v19 + 1)  = *((void *)v20 + 1);
    *((unsigned char *)v4 + v18)  = *((unsigned char *)a2 + v18);
    uint64_t v21 = a3[14];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    LODWORD(v8)  = *((unsigned __int8 *)a2 + v21 + 17) << 8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 == 512)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v25 = *v23;
      unint64_t v26 = v23[1];
      sub_100013D44(*v23, v26);
      *(void *)uint64_t v22 = v25;
      *((void *)v22 + 1)  = v26;
    }
    *((_WORD *)v22 + 8)  = *((_WORD *)v23 + 8);
    uint64_t v27 = a3[16];
    *((unsigned char *)v4 + a3[15])  = *((unsigned char *)a2 + a3[15]);
    uint64_t v28 = (char *)v4 + v27;
    uint64_t v29 = (uint64_t)a2 + v27;
    uint64_t v30 = type metadata accessor for P256.KeyAgreement.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    uint64_t v31 = a3[18];
    *((unsigned char *)v4 + a3[17])  = *((unsigned char *)a2 + a3[17]);
    char v32 = (_DWORD *)((char *)v4 + v31);
    uint64_t v33 = (_DWORD *)((char *)a2 + v31);
    *char v32 = *v33;
    *(_DWORD *)((char *)v32 + 3)  = *(_DWORD *)((char *)v33 + 3);
    *((unsigned char *)v4 + a3[19])  = *((unsigned char *)a2 + a3[19]);
  }
  return v4;
}

uint64_t destroy for NANSubscribe.Configuration(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[14];
  if (*(unsigned __int8 *)(v6 + 17) << 8 != 512) {
    sub_10000C970(*(void *)v6, *(void *)(v6 + 8));
  }
  uint64_t v7 = a1 + a2[16];
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(a1 + 24)  = v7;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10])  = *(unsigned char *)(a2 + a3[10]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(void *)(v14 + 8)  = *(void *)(v15 + 8);
  uint64_t v16 = a3[12];
  uint64_t v17 = a3[13];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8)  = *(void *)(v19 + 8);
  *(unsigned char *)(a1 + v17)  = *(unsigned char *)(a2 + v17);
  uint64_t v20 = a3[14];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)(a2 + v20);
  LODWORD(v7)  = *(unsigned __int8 *)(a2 + v20 + 17) << 8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 == 512)
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_100013D44(*v22, v24);
    *(void *)uint64_t v21 = v23;
    *(void *)(v21 + 8)  = v24;
  }
  *(_WORD *)(v21 + 16)  = *((_WORD *)v22 + 8);
  uint64_t v25 = a3[16];
  *(unsigned char *)(a1 + a3[15])  = *(unsigned char *)(a2 + a3[15]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  uint64_t v29 = a3[18];
  *(unsigned char *)(a1 + a3[17])  = *(unsigned char *)(a2 + a3[17]);
  uint64_t v30 = (_DWORD *)(a1 + v29);
  uint64_t v31 = (_DWORD *)(a2 + v29);
  *uint64_t v30 = *v31;
  *(_DWORD *)((char *)v30 + 3)  = *(_DWORD *)((char *)v31 + 3);
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[10])  = *(unsigned char *)(a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)uint64_t v11 = *(unsigned char *)v12;
  *(void *)(v11 + 8)  = *(void *)(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[12];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(void *)(v14 + 8)  = *(void *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[13])  = *(unsigned char *)(a2 + a3[13]);
  uint64_t v16 = a3[14];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  int v19 = *(unsigned __int8 *)(a1 + v16 + 17) << 8;
  int v20 = *(unsigned __int8 *)(a2 + v16 + 17) << 8;
  if (v19 != 512)
  {
    if (v20 == 512)
    {
      sub_10014F984(v17);
      __int16 v22 = *((_WORD *)v18 + 8);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(_WORD *)(v17 + 16)  = v22;
      goto LABEL_9;
    }
    uint64_t v25 = *v18;
    unint64_t v26 = v18[1];
    sub_100013D44(*v18, v26);
    uint64_t v27 = *(void *)v17;
    unint64_t v28 = *(void *)(v17 + 8);
    *(void *)uint64_t v17 = v25;
    *(void *)(v17 + 8)  = v26;
    sub_10000C970(v27, v28);
LABEL_8:
    *(unsigned char *)(v17 + 16)  = *((unsigned char *)v18 + 16);
    *(unsigned char *)(v17 + 17)  = *((unsigned char *)v18 + 17);
    goto LABEL_9;
  }
  if (v20 != 512)
  {
    uint64_t v23 = *v18;
    unint64_t v24 = v18[1];
    sub_100013D44(*v18, v24);
    *(void *)uint64_t v17 = v23;
    *(void *)(v17 + 8)  = v24;
    goto LABEL_8;
  }
  long long v21 = *(_OWORD *)v18;
  *(_WORD *)(v17 + 16)  = *((_WORD *)v18 + 8);
  *(_OWORD *)uint64_t v17 = v21;
LABEL_9:
  *(unsigned char *)(a1 + a3[15])  = *(unsigned char *)(a2 + a3[15]);
  uint64_t v29 = a3[16];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  *(unsigned char *)(a1 + a3[17])  = *(unsigned char *)(a2 + a3[17]);
  uint64_t v33 = a3[18];
  unint64_t v34 = (_DWORD *)(a1 + v33);
  uint64_t v35 = (_DWORD *)(a2 + v33);
  int v36 = *(_DWORD *)((char *)v35 + 3);
  *unint64_t v34 = *v35;
  *(_DWORD *)((char *)v34 + 3)  = v36;
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10014F984(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10])  = *(unsigned char *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v10)  = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[13];
  *(_OWORD *)(a1 + a3[12])  = *(_OWORD *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v11)  = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[14];
  uint64_t v13 = a3[15];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = (long long *)(a2 + v12);
  long long v16 = *v15;
  *(_WORD *)(v14 + 16)  = *((_WORD *)v15 + 8);
  LOBYTE(v15)  = *(unsigned char *)(a2 + v13);
  *(_OWORD *)uint64_t v14 = v16;
  *(unsigned char *)(a1 + v13)  = (_BYTE)v15;
  uint64_t v17 = a3[16];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  uint64_t v21 = a3[18];
  *(unsigned char *)(a1 + a3[17])  = *(unsigned char *)(a2 + a3[17]);
  __int16 v22 = (_DWORD *)(a1 + v21);
  uint64_t v23 = (_DWORD *)(a2 + v21);
  *__int16 v22 = *v23;
  *(_DWORD *)((char *)v22 + 3)  = *(_DWORD *)((char *)v23 + 3);
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[11];
  *(unsigned char *)(a1 + a3[10])  = *(unsigned char *)(a2 + a3[10]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
  *(void *)(v12 + 8)  = *(void *)(v13 + 8);
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[12];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8)  = *(void *)(v16 + 8);
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[14];
  *(unsigned char *)(a1 + a3[13])  = *(unsigned char *)(a2 + a3[13]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  if (*(unsigned __int8 *)(a1 + v17 + 17) << 8 != 512)
  {
    if (*(unsigned __int8 *)(v19 + 17) << 8 != 512)
    {
      uint64_t v20 = *(void *)v18;
      unint64_t v21 = *(void *)(v18 + 8);
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      sub_10000C970(v20, v21);
      *(unsigned char *)(v18 + 16)  = *(unsigned char *)(v19 + 16);
      *(unsigned char *)(v18 + 17)  = *(unsigned char *)(v19 + 17);
      goto LABEL_6;
    }
    sub_10014F984(a1 + v17);
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_WORD *)(v18 + 16)  = *(_WORD *)(v19 + 16);
LABEL_6:
  uint64_t v22 = a3[16];
  *(unsigned char *)(a1 + a3[15])  = *(unsigned char *)(a2 + a3[15]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  uint64_t v26 = a3[18];
  *(unsigned char *)(a1 + a3[17])  = *(unsigned char *)(a2 + a3[17]);
  uint64_t v27 = (_DWORD *)(a1 + v26);
  unint64_t v28 = (_DWORD *)(a2 + v26);
  *uint64_t v27 = *v28;
  *(_DWORD *)((char *)v27 + 3)  = *(_DWORD *)((char *)v28 + 3);
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014FD58);
}

uint64_t sub_10014FD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OWEKeys();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 64);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014FE98);
}

uint64_t sub_10014FE98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OWEKeys();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 64);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10014FFC4()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001500F4()
{
  unint64_t result = qword_100480648;
  if (!qword_100480648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480648);
  }
  return result;
}

uint64_t static P2PTimer.async(after:on:execute:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v21 = a2;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v21 - v11;
  __chkstk_darwin();
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16)  = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, a1, v7);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2]  = a3;
  v16[3]  = a4;
  v16[4]  = v15;
  uint64_t v17 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v17(v12, enum case for DispatchTimeInterval.never(_:), v7);
  *(void *)uint64_t v10 = 100;
  v17(v10, enum case for DispatchTimeInterval.milliseconds(_:), v7);
  type metadata accessor for P2PTimer();
  swift_allocObject();
  id v18 = v21;
  swift_retain();
  swift_retain();
  uint64_t v19 = sub_100150F08((uint64_t)v14, v18, (uint64_t)v12, (uint64_t)v10, (uint64_t)sub_10006D4AC, (uint64_t)v16);

  swift_release();
  swift_beginAccess();
  *(void *)(v15 + 16)  = v19;
  swift_release();
  return swift_release();
}

uint64_t sub_1001503A0()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001503DC()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1001504A8()
{
  uint64_t result = type metadata accessor for DispatchTime();
  qword_100488560  = result;
  *(void *)algn_100488568  = &off_10045DC88;
  return result;
}

uint64_t P2PTimer.deadlineAfter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10015050C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter, a1);
}

id P2PTimer.targetQueue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue);
}

uint64_t P2PTimer.repeatingInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10015050C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, a1);
}

uint64_t P2PTimer.leeway.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10015050C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, a1);
}

uint64_t sub_10015050C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t P2PTimer.handler.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  swift_retain();
  return v1;
}

uint64_t P2PTimer.__allocating_init(deadlineAfter:on:repeating:leeway:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  uint64_t v12 = sub_100150F08(a1, a2, a3, a4, a5, a6);

  swift_release();
  return v12;
}

uint64_t P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = sub_100150F08(a1, a2, a3, a4, a5, a6);

  swift_release();
  return v7;
}

uint64_t P2PTimer.deinit()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);

  v4(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v3);
  v4(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v3);
  swift_release();
  return v1;
}

uint64_t P2PTimer.__deallocating_deinit()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);

  v4(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v3);
  v4(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v3);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1001508A8(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 16)  = 0;
  return swift_release();
}

uint64_t sub_10015091C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t type metadata accessor for P2PTimer()
{
  uint64_t result = qword_100480688;
  if (!qword_100480688) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t P2PTimer.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v22[0]  = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1]  = v2;
  uint64_t v13 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.never(_:), v9);
  swift_retain();
  char v14 = static DispatchTimeInterval.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_100010BCC(qword_10047DD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16)  = xmmword_1003B2450;
  uint64_t v16 = (uint64_t *)(v15 + 48);
  if (v14)
  {
    *(void *)(v15 + 32)  = 0x656E696C64616564;
    *(void *)(v15 + 40)  = 0xE800000000000000;
    uint64_t v17 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
    *(void *)(v15 + 72)  = v9;
    id v18 = sub_1000382F0(v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v18, v17, v9);
  }
  else
  {
    *(void *)(v15 + 32)  = 0x6E69746165706572;
    *(void *)(v15 + 40)  = 0xE900000000000067;
    *(void *)(v15 + 72)  = v9;
    uint64_t v19 = sub_1000382F0(v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v19, v13, v9);
  }
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  type metadata accessor for P2PTimer();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100150CC4@<X0>(uint64_t a1@<X8>)
{
  return P2PTimer.customMirror.getter(a1);
}

uint64_t _s8Dispatch0A4TimeV7CoreP2PE8register5timeryAD0D6PTimerC_tFZ_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8);
  aBlock[4]  = v10;
  aBlock[5]  = v11;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_10045DCA0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_1001503DC();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_100150F08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v44 = a4;
  uint64_t v45 = a3;
  unint64_t v43 = a2;
  uint64_t v46 = a1;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100151414();
  unint64_t v47 = _swiftEmptyArrayStorage;
  sub_100151454(&qword_1004807C0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100010BCC(&qword_1004807C8);
  sub_10015149C((unint64_t *)&unk_1004807D0, &qword_1004807C8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v17 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v18 = v6;
  *(void *)(v6 + 16)  = v17;
  swift_getObjectType();
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  uint64_t v19 = v46;
  + infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v39 + 8);
  id v21 = v10;
  uint64_t v22 = v40;
  v20(v21, v40);
  uint64_t v23 = v45;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  v20(v12, v22);
  uint64_t v24 = v6 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  uint64_t v25 = type metadata accessor for DispatchTimeInterval();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v27(v24, v19, v25);
  unint64_t v28 = v43;
  *(void *)(v18 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue)  = v43;
  v27(v18 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v23, v25);
  uint64_t v29 = v44;
  v27(v18 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v44, v25);
  uint64_t v30 = (void *)(v18 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  uint64_t v31 = v42;
  *uint64_t v30 = v41;
  v30[1]  = v31;
  uint64_t v32 = qword_100488560;
  uint64_t v33 = *(void *)algn_100488568;
  unint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)algn_100488568 + 16);
  id v35 = v28;
  swift_retain();
  v34(v18, v32, v33);
  swift_getObjectType();
  OS_dispatch_source.activate()();
  int v36 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v36(v29, v25);
  v36(v45, v25);
  v36(v46, v25);
  return v18;
}

uint64_t sub_100151350()
{
  return type metadata accessor for P2PTimer();
}

uint64_t sub_100151358()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100151414()
{
  unint64_t result = qword_100486F80[0];
  if (!qword_100486F80[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_100486F80);
  }
  return result;
}

uint64_t sub_100151454(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015149C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__int16 *CountryCode.unknown.unsafeMutableAddressor()
{
  if (qword_10047BFF8 != -1) {
    swift_once();
  }
  return &static CountryCode.unknown;
}

uint64_t CountryCode.code.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_1003B4420;
  *(unsigned char *)(v3 + 32)  = v1;
  *(unsigned char *)(v3 + 33)  = v2;
  static String.Encoding.utf8.getter();
  sub_100010BCC(&qword_10047E7D0);
  sub_10000F9CC((unint64_t *)&qword_10047E7D8, &qword_10047E7D0);
  uint64_t v4 = String.init<A>(bytes:encoding:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100151658(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t CountryCode.data.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_1003B4420;
  *(unsigned char *)(v3 + 32)  = v1;
  *(unsigned char *)(v3 + 33)  = v2;
  uint64_t v4 = sub_1001265EC(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t CountryCode.description.getter(__int16 a1)
{
  int v1 = a1;
  int v2 = HIBYTE(a1);
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  if (qword_10047C008 != -1) {
    swift_once();
  }
  if (static CountryCode.austria == v1 && HIBYTE(static CountryCode.austria) == v2)
  {
    unint64_t v5 = 0x697274737541;
    return v5 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_10047C010 != -1) {
    swift_once();
  }
  if (static CountryCode.belgium == v1 && HIBYTE(static CountryCode.belgium) == v2) {
    return 0x6D7569676C6542;
  }
  if (qword_10047C018 != -1) {
    swift_once();
  }
  if (static CountryCode.czechRepublic == v1 && HIBYTE(static CountryCode.czechRepublic) == v2) {
    return 0x6552206863657A43;
  }
  if (qword_10047C020 != -1) {
    swift_once();
  }
  if (static CountryCode.cyprus == v1 && HIBYTE(static CountryCode.cyprus) == v2) {
    return 0x737572707943;
  }
  if (qword_10047C028 != -1) {
    swift_once();
  }
  if (static CountryCode.denmark == v1 && HIBYTE(static CountryCode.denmark) == v2) {
    return 0x6B72616D6E6544;
  }
  if (qword_10047C030 != -1) {
    swift_once();
  }
  if (static CountryCode.estonia == v1 && HIBYTE(static CountryCode.estonia) == v2)
  {
    uint64_t v6 = 1869902661;
LABEL_34:
    unint64_t v5 = v6 & 0xFFFF0000FFFFFFFFLL | 0x696E00000000;
    return v5 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_10047C038 != -1) {
    swift_once();
  }
  if (static CountryCode.finland == v1 && HIBYTE(static CountryCode.finland) == v2)
  {
    unsigned int v7 = 1819175238;
    return v7 | 0x646E6100000000;
  }
  if (qword_10047C040 != -1) {
    swift_once();
  }
  if (static CountryCode.france == v1 && HIBYTE(static CountryCode.france) == v2) {
    return 0x65636E617246;
  }
  if (qword_10047C048 != -1) {
    swift_once();
  }
  if (static CountryCode.germany == v1 && HIBYTE(static CountryCode.germany) == v2) {
    return 0x796E616D726547;
  }
  if (qword_10047C050 != -1) {
    swift_once();
  }
  if (static CountryCode.greece == v1 && HIBYTE(static CountryCode.greece) == v2) {
    return 0x656365657247;
  }
  if (qword_10047C058 != -1) {
    swift_once();
  }
  if (static CountryCode.hungary == v1 && HIBYTE(static CountryCode.hungary) == v2) {
    return 0x797261676E7548;
  }
  if (qword_10047C060 != -1) {
    swift_once();
  }
  if (static CountryCode.italy == v1 && HIBYTE(static CountryCode.italy) == v2) {
    return 0x796C617449;
  }
  if (qword_10047C068 != -1) {
    swift_once();
  }
  if (static CountryCode.ireland == v1 && HIBYTE(static CountryCode.ireland) == v2) {
    return 0x646E616C657249;
  }
  if (qword_10047C070 != -1) {
    swift_once();
  }
  if (static CountryCode.latvia == v1 && HIBYTE(static CountryCode.latvia) == v2) {
    return 0x61697674614CLL;
  }
  if (qword_10047C078 != -1) {
    swift_once();
  }
  if (static CountryCode.lithuania == v1 && HIBYTE(static CountryCode.lithuania) == v2) {
    return 0x696E61756874694CLL;
  }
  if (qword_10047C080 != -1) {
    swift_once();
  }
  if (static CountryCode.luxembourg == v1 && HIBYTE(static CountryCode.luxembourg) == v2) {
    return 0x756F626D6578754CLL;
  }
  if (qword_10047C088 != -1) {
    swift_once();
  }
  if (static CountryCode.malta == v1 && HIBYTE(static CountryCode.malta) == v2) {
    return 0x61746C614DLL;
  }
  if (qword_10047C090 != -1) {
    swift_once();
  }
  if (static CountryCode.netherlands == v1 && HIBYTE(static CountryCode.netherlands) == v2) {
    return 0x616C72656874654ELL;
  }
  if (qword_10047C098 != -1) {
    swift_once();
  }
  if (static CountryCode.poland == v1 && HIBYTE(static CountryCode.poland) == v2) {
    return 0x646E616C6F50;
  }
  if (qword_10047C0A0 != -1) {
    swift_once();
  }
  if (static CountryCode.portugal == v1 && HIBYTE(static CountryCode.portugal) == v2) {
    return 0x6C61677574726F50;
  }
  if (qword_10047C0A8 != -1) {
    swift_once();
  }
  if (static CountryCode.slovakRepublic == v1 && HIBYTE(static CountryCode.slovakRepublic) == v2) {
    return 0x52206B61766F6C53;
  }
  if (qword_10047C0B0 != -1) {
    swift_once();
  }
  if (static CountryCode.slovenia == v1 && HIBYTE(static CountryCode.slovenia) == v2) {
    return 0x61696E65766F6C53;
  }
  if (qword_10047C0B8 != -1) {
    swift_once();
  }
  if (static CountryCode.spain == v1 && HIBYTE(static CountryCode.spain) == v2) {
    return 0x6E69617053;
  }
  if (qword_10047C0C0 != -1) {
    swift_once();
  }
  if (static CountryCode.sweden == v1 && HIBYTE(static CountryCode.sweden) == v2) {
    return 0x6E6564657753;
  }
  if (qword_10047C0C8 != -1) {
    swift_once();
  }
  if (static CountryCode.uk == v1 && HIBYTE(static CountryCode.uk) == v2) {
    return 19285;
  }
  if (qword_10047C0D0 != -1) {
    swift_once();
  }
  if (static CountryCode.iceland == v1 && HIBYTE(static CountryCode.iceland) == v2)
  {
    unsigned int v7 = 1818583881;
    return v7 | 0x646E6100000000;
  }
  if (qword_10047C0D8 != -1) {
    swift_once();
  }
  if (static CountryCode.liechthenstein == v1 && HIBYTE(static CountryCode.liechthenstein) == v2) {
    return 0x656874686365694CLL;
  }
  if (qword_10047C0E0 != -1) {
    swift_once();
  }
  if (static CountryCode.norway == v1 && HIBYTE(static CountryCode.norway) == v2) {
    return 0x796177726F4ELL;
  }
  if (qword_10047C0E8 != -1) {
    swift_once();
  }
  if (static CountryCode.switzerland == v1 && HIBYTE(static CountryCode.switzerland) == v2) {
    return 0x6C72657A74697753;
  }
  if (qword_10047C0F0 != -1) {
    swift_once();
  }
  if (static CountryCode.bulgaria == v1 && HIBYTE(static CountryCode.bulgaria) == v2) {
    return 0x61697261676C7542;
  }
  if (qword_10047C0F8 != -1) {
    swift_once();
  }
  if (static CountryCode.turkey == v1 && HIBYTE(static CountryCode.turkey) == v2) {
    return 0x79656B727554;
  }
  if (qword_10047C100 != -1) {
    swift_once();
  }
  if (static CountryCode.romania == v1 && HIBYTE(static CountryCode.romania) == v2)
  {
    uint64_t v6 = 1634561874;
    goto LABEL_34;
  }
  if (qword_10047C108 != -1) {
    swift_once();
  }
  if (static CountryCode.russia == v1 && HIBYTE(static CountryCode.russia) == v2) {
    return 0x616973737552;
  }
  if (qword_10047C110 != -1) {
    swift_once();
  }
  if (static CountryCode.croatia == v1 && HIBYTE(static CountryCode.croatia) == v2)
  {
    unint64_t v5 = 0x6974616F7243;
    return v5 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_10047C118 != -1) {
    swift_once();
  }
  if (static CountryCode.serbia == v1 && HIBYTE(static CountryCode.serbia) == v2) {
    return 0x616962726553;
  }
  if (qword_10047C120 != -1) {
    swift_once();
  }
  if (static CountryCode.southAfrica == v1 && HIBYTE(static CountryCode.southAfrica) == v2) {
    return 0x6641206874756F53;
  }
  if (qword_10047C128 != -1) {
    swift_once();
  }
  if (static CountryCode.usa == v1 && byte_1004885E5 == v2) {
    return 0xD000000000000018;
  }
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B4420;
  *(unsigned char *)(v8 + 32)  = v1;
  *(unsigned char *)(v8 + 33)  = v2;
  static String.Encoding.utf8.getter();
  sub_100010BCC(&qword_10047E7D0);
  sub_10000F9CC((unint64_t *)&qword_10047E7D8, &qword_10047E7D0);
  uint64_t v11 = String.init<A>(bytes:encoding:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10) {
    return v11;
  }
  else {
    return 0;
  }
}

__int16 *CountryCode.austria.unsafeMutableAddressor()
{
  if (qword_10047C008 != -1) {
    swift_once();
  }
  return &static CountryCode.austria;
}

__int16 *CountryCode.belgium.unsafeMutableAddressor()
{
  if (qword_10047C010 != -1) {
    swift_once();
  }
  return &static CountryCode.belgium;
}

__int16 *CountryCode.czechRepublic.unsafeMutableAddressor()
{
  if (qword_10047C018 != -1) {
    swift_once();
  }
  return &static CountryCode.czechRepublic;
}

__int16 *CountryCode.cyprus.unsafeMutableAddressor()
{
  if (qword_10047C020 != -1) {
    swift_once();
  }
  return &static CountryCode.cyprus;
}

__int16 *CountryCode.denmark.unsafeMutableAddressor()
{
  if (qword_10047C028 != -1) {
    swift_once();
  }
  return &static CountryCode.denmark;
}

__int16 *CountryCode.estonia.unsafeMutableAddressor()
{
  if (qword_10047C030 != -1) {
    swift_once();
  }
  return &static CountryCode.estonia;
}

__int16 *CountryCode.finland.unsafeMutableAddressor()
{
  if (qword_10047C038 != -1) {
    swift_once();
  }
  return &static CountryCode.finland;
}

__int16 *CountryCode.france.unsafeMutableAddressor()
{
  if (qword_10047C040 != -1) {
    swift_once();
  }
  return &static CountryCode.france;
}

__int16 *CountryCode.germany.unsafeMutableAddressor()
{
  if (qword_10047C048 != -1) {
    swift_once();
  }
  return &static CountryCode.germany;
}

__int16 *CountryCode.greece.unsafeMutableAddressor()
{
  if (qword_10047C050 != -1) {
    swift_once();
  }
  return &static CountryCode.greece;
}

__int16 *CountryCode.hungary.unsafeMutableAddressor()
{
  if (qword_10047C058 != -1) {
    swift_once();
  }
  return &static CountryCode.hungary;
}

__int16 *CountryCode.italy.unsafeMutableAddressor()
{
  if (qword_10047C060 != -1) {
    swift_once();
  }
  return &static CountryCode.italy;
}

__int16 *CountryCode.ireland.unsafeMutableAddressor()
{
  if (qword_10047C068 != -1) {
    swift_once();
  }
  return &static CountryCode.ireland;
}

__int16 *CountryCode.latvia.unsafeMutableAddressor()
{
  if (qword_10047C070 != -1) {
    swift_once();
  }
  return &static CountryCode.latvia;
}

__int16 *CountryCode.lithuania.unsafeMutableAddressor()
{
  if (qword_10047C078 != -1) {
    swift_once();
  }
  return &static CountryCode.lithuania;
}

__int16 *CountryCode.luxembourg.unsafeMutableAddressor()
{
  if (qword_10047C080 != -1) {
    swift_once();
  }
  return &static CountryCode.luxembourg;
}

__int16 *CountryCode.malta.unsafeMutableAddressor()
{
  if (qword_10047C088 != -1) {
    swift_once();
  }
  return &static CountryCode.malta;
}

__int16 *CountryCode.netherlands.unsafeMutableAddressor()
{
  if (qword_10047C090 != -1) {
    swift_once();
  }
  return &static CountryCode.netherlands;
}

__int16 *CountryCode.poland.unsafeMutableAddressor()
{
  if (qword_10047C098 != -1) {
    swift_once();
  }
  return &static CountryCode.poland;
}

__int16 *CountryCode.portugal.unsafeMutableAddressor()
{
  if (qword_10047C0A0 != -1) {
    swift_once();
  }
  return &static CountryCode.portugal;
}

__int16 *CountryCode.slovakRepublic.unsafeMutableAddressor()
{
  if (qword_10047C0A8 != -1) {
    swift_once();
  }
  return &static CountryCode.slovakRepublic;
}

__int16 *CountryCode.slovenia.unsafeMutableAddressor()
{
  if (qword_10047C0B0 != -1) {
    swift_once();
  }
  return &static CountryCode.slovenia;
}

__int16 *CountryCode.spain.unsafeMutableAddressor()
{
  if (qword_10047C0B8 != -1) {
    swift_once();
  }
  return &static CountryCode.spain;
}

__int16 *CountryCode.sweden.unsafeMutableAddressor()
{
  if (qword_10047C0C0 != -1) {
    swift_once();
  }
  return &static CountryCode.sweden;
}

__int16 *CountryCode.uk.unsafeMutableAddressor()
{
  if (qword_10047C0C8 != -1) {
    swift_once();
  }
  return &static CountryCode.uk;
}

__int16 *CountryCode.iceland.unsafeMutableAddressor()
{
  if (qword_10047C0D0 != -1) {
    swift_once();
  }
  return &static CountryCode.iceland;
}

__int16 *CountryCode.liechthenstein.unsafeMutableAddressor()
{
  if (qword_10047C0D8 != -1) {
    swift_once();
  }
  return &static CountryCode.liechthenstein;
}

__int16 *CountryCode.norway.unsafeMutableAddressor()
{
  if (qword_10047C0E0 != -1) {
    swift_once();
  }
  return &static CountryCode.norway;
}

__int16 *CountryCode.switzerland.unsafeMutableAddressor()
{
  if (qword_10047C0E8 != -1) {
    swift_once();
  }
  return &static CountryCode.switzerland;
}

__int16 *CountryCode.bulgaria.unsafeMutableAddressor()
{
  if (qword_10047C0F0 != -1) {
    swift_once();
  }
  return &static CountryCode.bulgaria;
}

__int16 *CountryCode.turkey.unsafeMutableAddressor()
{
  if (qword_10047C0F8 != -1) {
    swift_once();
  }
  return &static CountryCode.turkey;
}

__int16 *CountryCode.romania.unsafeMutableAddressor()
{
  if (qword_10047C100 != -1) {
    swift_once();
  }
  return &static CountryCode.romania;
}

__int16 *CountryCode.russia.unsafeMutableAddressor()
{
  if (qword_10047C108 != -1) {
    swift_once();
  }
  return &static CountryCode.russia;
}

__int16 *CountryCode.croatia.unsafeMutableAddressor()
{
  if (qword_10047C110 != -1) {
    swift_once();
  }
  return &static CountryCode.croatia;
}

__int16 *CountryCode.serbia.unsafeMutableAddressor()
{
  if (qword_10047C118 != -1) {
    swift_once();
  }
  return &static CountryCode.serbia;
}

__int16 *CountryCode.southAfrica.unsafeMutableAddressor()
{
  if (qword_10047C120 != -1) {
    swift_once();
  }
  return &static CountryCode.southAfrica;
}

char *CountryCode.usa.unsafeMutableAddressor()
{
  if (qword_10047C128 != -1) {
    swift_once();
  }
  return &static CountryCode.usa;
}

uint64_t CountryCode.customMirror.getter(__int16 a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  unsigned int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v11 = a1;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10015343C()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(23128, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknown)  = v1;
          HIBYTE(static CountryCode.unknown)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CoreP2P::CountryCode __swiftcall CountryCode.init(stringLiteral:)(Swift::String stringLiteral)
{
  object  = stringLiteral._object;
  uint64_t countAndFlagsBits = stringLiteral._countAndFlagsBits;
  uint64_t v3 = String.count.getter();
  if (v3 != 2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return (CoreP2P::CountryCode)v3;
  }
  swift_bridgeObjectRetain();
  sub_10011AD60(countAndFlagsBits, (unint64_t)object);
  uint64_t v5 = v4;
  LOWORD(v3)  = swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_8;
  }
  __int16 v6 = Character.asciiValue.getter();
  LOWORD(v3)  = swift_bridgeObjectRelease();
  if ((v6 & 0x100) != 0) {
    goto LABEL_8;
  }
  sub_100151658(countAndFlagsBits, (unint64_t)object);
  uint64_t v8 = v7;
  LOWORD(v3)  = swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_8;
  }
  __int16 v9 = Character.asciiValue.getter();
  LOWORD(v3)  = swift_bridgeObjectRelease();
  if ((v9 & 0x100) != 0) {
    goto LABEL_8;
  }
  LOWORD(v3)  = v6 | (unsigned __int16)(v9 << 8);
  return (CoreP2P::CountryCode)v3;
}

uint64_t static CountryCode.unknown.getter()
{
  return sub_1001553C8(&qword_10047BFF8, (unsigned __int8 *)&static CountryCode.unknown, (unsigned __int8 *)&static CountryCode.unknown + 1);
}

uint64_t sub_1001535CC()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(13144, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknownETSI)  = v1;
          HIBYTE(static CountryCode.unknownETSI)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__int16 *CountryCode.unknownETSI.unsafeMutableAddressor()
{
  if (qword_10047C000 != -1) {
    swift_once();
  }
  return &static CountryCode.unknownETSI;
}

uint64_t static CountryCode.unknownETSI.getter()
{
  return sub_1001553C8(&qword_10047C000, (unsigned __int8 *)&static CountryCode.unknownETSI, (unsigned __int8 *)&static CountryCode.unknownETSI + 1);
}

uint64_t sub_1001536E0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21569, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.austria)  = v1;
          HIBYTE(static CountryCode.austria)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.austria.getter()
{
  return sub_1001553C8(&qword_10047C008, (unsigned __int8 *)&static CountryCode.austria, (unsigned __int8 *)&static CountryCode.austria + 1);
}

uint64_t sub_1001537A8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(17730, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.belgium)  = v1;
          HIBYTE(static CountryCode.belgium)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.belgium.getter()
{
  return sub_1001553C8(&qword_10047C010, (unsigned __int8 *)&static CountryCode.belgium, (unsigned __int8 *)&static CountryCode.belgium + 1);
}

uint64_t sub_100153870()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(23107, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.czechRepublic)  = v1;
          HIBYTE(static CountryCode.czechRepublic)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.czechRepublic.getter()
{
  return sub_1001553C8(&qword_10047C018, (unsigned __int8 *)&static CountryCode.czechRepublic, (unsigned __int8 *)&static CountryCode.czechRepublic + 1);
}

uint64_t sub_100153938()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(22851, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.cyprus)  = v1;
          HIBYTE(static CountryCode.cyprus)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.cyprus.getter()
{
  return sub_1001553C8(&qword_10047C020, (unsigned __int8 *)&static CountryCode.cyprus, (unsigned __int8 *)&static CountryCode.cyprus + 1);
}

uint64_t sub_100153A00()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(19268, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.denmark)  = v1;
          HIBYTE(static CountryCode.denmark)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.denmark.getter()
{
  return sub_1001553C8(&qword_10047C028, (unsigned __int8 *)&static CountryCode.denmark, (unsigned __int8 *)&static CountryCode.denmark + 1);
}

uint64_t sub_100153AC8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(17733, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.estonia)  = v1;
          HIBYTE(static CountryCode.estonia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.estonia.getter()
{
  return sub_1001553C8(&qword_10047C030, (unsigned __int8 *)&static CountryCode.estonia, (unsigned __int8 *)&static CountryCode.estonia + 1);
}

uint64_t sub_100153B90()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(18758, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.finland)  = v1;
          HIBYTE(static CountryCode.finland)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.finland.getter()
{
  return sub_1001553C8(&qword_10047C038, (unsigned __int8 *)&static CountryCode.finland, (unsigned __int8 *)&static CountryCode.finland + 1);
}

uint64_t sub_100153C58()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21062, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.france)  = v1;
          HIBYTE(static CountryCode.france)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.france.getter()
{
  return sub_1001553C8(&qword_10047C040, (unsigned __int8 *)&static CountryCode.france, (unsigned __int8 *)&static CountryCode.france + 1);
}

uint64_t sub_100153D20()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(17732, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.germany)  = v1;
          HIBYTE(static CountryCode.germany)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.germany.getter()
{
  return sub_1001553C8(&qword_10047C048, (unsigned __int8 *)&static CountryCode.germany, (unsigned __int8 *)&static CountryCode.germany + 1);
}

uint64_t sub_100153DE8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21063, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.greece)  = v1;
          HIBYTE(static CountryCode.greece)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.greece.getter()
{
  return sub_1001553C8(&qword_10047C050, (unsigned __int8 *)&static CountryCode.greece, (unsigned __int8 *)&static CountryCode.greece + 1);
}

uint64_t sub_100153EB0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21832, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.hungary)  = v1;
          HIBYTE(static CountryCode.hungary)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.hungary.getter()
{
  return sub_1001553C8(&qword_10047C058, (unsigned __int8 *)&static CountryCode.hungary, (unsigned __int8 *)&static CountryCode.hungary + 1);
}

uint64_t sub_100153F78()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21577, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.italy)  = v1;
          HIBYTE(static CountryCode.italy)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.italy.getter()
{
  return sub_1001553C8(&qword_10047C060, (unsigned __int8 *)&static CountryCode.italy, (unsigned __int8 *)&static CountryCode.italy + 1);
}

uint64_t sub_100154040()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(17737, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.ireland)  = v1;
          HIBYTE(static CountryCode.ireland)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.ireland.getter()
{
  return sub_1001553C8(&qword_10047C068, (unsigned __int8 *)&static CountryCode.ireland, (unsigned __int8 *)&static CountryCode.ireland + 1);
}

uint64_t sub_100154108()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(22092, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.latvia)  = v1;
          HIBYTE(static CountryCode.latvia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.latvia.getter()
{
  return sub_1001553C8(&qword_10047C070, (unsigned __int8 *)&static CountryCode.latvia, (unsigned __int8 *)&static CountryCode.latvia + 1);
}

uint64_t sub_1001541D0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21580, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.lithuania)  = v1;
          HIBYTE(static CountryCode.lithuania)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.lithuania.getter()
{
  return sub_1001553C8(&qword_10047C078, (unsigned __int8 *)&static CountryCode.lithuania, (unsigned __int8 *)&static CountryCode.lithuania + 1);
}

uint64_t sub_100154298()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21836, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.luxembourg)  = v1;
          HIBYTE(static CountryCode.luxembourg)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.luxembourg.getter()
{
  return sub_1001553C8(&qword_10047C080, (unsigned __int8 *)&static CountryCode.luxembourg, (unsigned __int8 *)&static CountryCode.luxembourg + 1);
}

uint64_t sub_100154360()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21581, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.malta)  = v1;
          HIBYTE(static CountryCode.malta)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.malta.getter()
{
  return sub_1001553C8(&qword_10047C088, (unsigned __int8 *)&static CountryCode.malta, (unsigned __int8 *)&static CountryCode.malta + 1);
}

uint64_t sub_100154428()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(19534, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.netherlands)  = v1;
          HIBYTE(static CountryCode.netherlands)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.netherlands.getter()
{
  return sub_1001553C8(&qword_10047C090, (unsigned __int8 *)&static CountryCode.netherlands, (unsigned __int8 *)&static CountryCode.netherlands + 1);
}

uint64_t sub_1001544F0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(19536, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.poland)  = v1;
          HIBYTE(static CountryCode.poland)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.poland.getter()
{
  return sub_1001553C8(&qword_10047C098, (unsigned __int8 *)&static CountryCode.poland, (unsigned __int8 *)&static CountryCode.poland + 1);
}

uint64_t sub_1001545B8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21584, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.portugal)  = v1;
          HIBYTE(static CountryCode.portugal)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.portugal.getter()
{
  return sub_1001553C8(&qword_10047C0A0, (unsigned __int8 *)&static CountryCode.portugal, (unsigned __int8 *)&static CountryCode.portugal + 1);
}

uint64_t sub_100154680()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(19283, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovakRepublic)  = v1;
          HIBYTE(static CountryCode.slovakRepublic)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.slovakRepublic.getter()
{
  return sub_1001553C8(&qword_10047C0A8, (unsigned __int8 *)&static CountryCode.slovakRepublic, (unsigned __int8 *)&static CountryCode.slovakRepublic + 1);
}

uint64_t sub_100154748()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(18771, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovenia)  = v1;
          HIBYTE(static CountryCode.slovenia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.slovenia.getter()
{
  return sub_1001553C8(&qword_10047C0B0, (unsigned __int8 *)&static CountryCode.slovenia, (unsigned __int8 *)&static CountryCode.slovenia + 1);
}

uint64_t sub_100154810()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21317, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.spain)  = v1;
          HIBYTE(static CountryCode.spain)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.spain.getter()
{
  return sub_1001553C8(&qword_10047C0B8, (unsigned __int8 *)&static CountryCode.spain, (unsigned __int8 *)&static CountryCode.spain + 1);
}

uint64_t sub_1001548D8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(17747, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.sweden)  = v1;
          HIBYTE(static CountryCode.sweden)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.sweden.getter()
{
  return sub_1001553C8(&qword_10047C0C0, (unsigned __int8 *)&static CountryCode.sweden, (unsigned __int8 *)&static CountryCode.sweden + 1);
}

uint64_t sub_1001549A0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(16967, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.uk)  = v1;
          HIBYTE(static CountryCode.uk)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.uk.getter()
{
  return sub_1001553C8(&qword_10047C0C8, (unsigned __int8 *)&static CountryCode.uk, (unsigned __int8 *)&static CountryCode.uk + 1);
}

uint64_t sub_100154A68()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21321, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.iceland)  = v1;
          HIBYTE(static CountryCode.iceland)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.iceland.getter()
{
  return sub_1001553C8(&qword_10047C0D0, (unsigned __int8 *)&static CountryCode.iceland, (unsigned __int8 *)&static CountryCode.iceland + 1);
}

uint64_t sub_100154B30()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(18764, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.liechthenstein)  = v1;
          HIBYTE(static CountryCode.liechthenstein)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.liechthenstein.getter()
{
  return sub_1001553C8(&qword_10047C0D8, (unsigned __int8 *)&static CountryCode.liechthenstein, (unsigned __int8 *)&static CountryCode.liechthenstein + 1);
}

uint64_t sub_100154BF8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(20302, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.norway)  = v1;
          HIBYTE(static CountryCode.norway)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.norway.getter()
{
  return sub_1001553C8(&qword_10047C0E0, (unsigned __int8 *)&static CountryCode.norway, (unsigned __int8 *)&static CountryCode.norway + 1);
}

uint64_t sub_100154CC0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(18499, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.switzerland)  = v1;
          HIBYTE(static CountryCode.switzerland)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.switzerland.getter()
{
  return sub_1001553C8(&qword_10047C0E8, (unsigned __int8 *)&static CountryCode.switzerland, (unsigned __int8 *)&static CountryCode.switzerland + 1);
}

uint64_t sub_100154D88()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(18242, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.bulgaria)  = v1;
          HIBYTE(static CountryCode.bulgaria)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.bulgaria.getter()
{
  return sub_1001553C8(&qword_10047C0F0, (unsigned __int8 *)&static CountryCode.bulgaria, (unsigned __int8 *)&static CountryCode.bulgaria + 1);
}

uint64_t sub_100154E50()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21076, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.turkey)  = v1;
          HIBYTE(static CountryCode.turkey)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.turkey.getter()
{
  return sub_1001553C8(&qword_10047C0F8, (unsigned __int8 *)&static CountryCode.turkey, (unsigned __int8 *)&static CountryCode.turkey + 1);
}

uint64_t sub_100154F18()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(20306, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.romania)  = v1;
          HIBYTE(static CountryCode.romania)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.romania.getter()
{
  return sub_1001553C8(&qword_10047C100, (unsigned __int8 *)&static CountryCode.romania, (unsigned __int8 *)&static CountryCode.romania + 1);
}

uint64_t sub_100154FE0()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21842, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.russia)  = v1;
          HIBYTE(static CountryCode.russia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.russia.getter()
{
  return sub_1001553C8(&qword_10047C108, (unsigned __int8 *)&static CountryCode.russia, (unsigned __int8 *)&static CountryCode.russia + 1);
}

uint64_t sub_1001550A8()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21064, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.croatia)  = v1;
          HIBYTE(static CountryCode.croatia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.croatia.getter()
{
  return sub_1001553C8(&qword_10047C110, (unsigned __int8 *)&static CountryCode.croatia, (unsigned __int8 *)&static CountryCode.croatia + 1);
}

uint64_t sub_100155170()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21330, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.serbia)  = v1;
          HIBYTE(static CountryCode.serbia)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.serbia.getter()
{
  return sub_1001553C8(&qword_10047C118, (unsigned __int8 *)&static CountryCode.serbia, (unsigned __int8 *)&static CountryCode.serbia + 1);
}

uint64_t sub_100155238()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(16730, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.southAfrica)  = v1;
          HIBYTE(static CountryCode.southAfrica)  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.southAfrica.getter()
{
  return sub_1001553C8(&qword_10047C120, (unsigned __int8 *)&static CountryCode.southAfrica, (unsigned __int8 *)&static CountryCode.southAfrica + 1);
}

uint64_t sub_100155300()
{
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    String.subscript.getter();
    __int16 v1 = Character.asciiValue.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v1 & 0x100) == 0)
    {
      uint64_t result = sub_100151658(21333, 0xE200000000000000);
      if (v2)
      {
        __int16 v3 = Character.asciiValue.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v3 & 0x100) == 0)
        {
          static CountryCode.usa  = v1;
          byte_1004885E5  = v3;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static CountryCode.usa.getter()
{
  return sub_1001553C8(&qword_10047C128, (unsigned __int8 *)&static CountryCode.usa, (unsigned __int8 *)&byte_1004885E5);
}

uint64_t sub_1001553C8(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2 | (*a3 << 8);
}

uint64_t CountryCode.isETSI.getter(__int16 a1)
{
  if (qword_10047C130 != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)off_1004807E0 + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (unsigned __int8 *)off_1004807E0 + 33;
  do
  {
    uint64_t v5 = v3;
    BOOL v6 = *(v4 - 1) == a1 && *v4 == HIBYTE(a1);
    uint64_t result = v6;
    if (v6) {
      break;
    }
    --v3;
    v4 += 2;
  }
  while (v5);
  return result;
}

uint64_t sub_1001554B0()
{
  sub_100010BCC(&qword_100480830);
  uint64_t result = swift_allocObject();
  uint64_t v1 = result;
  *(_OWORD *)(result + 16)  = xmmword_1003C1580;
  if (qword_10047C000 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 32)  = static CountryCode.unknownETSI;
  if (qword_10047C008 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 34)  = static CountryCode.austria;
  if (qword_10047C010 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 36)  = static CountryCode.belgium;
  if (qword_10047C018 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 38)  = static CountryCode.czechRepublic;
  if (qword_10047C020 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 40)  = static CountryCode.cyprus;
  if (qword_10047C028 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 42)  = static CountryCode.denmark;
  if (qword_10047C030 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 44)  = static CountryCode.estonia;
  if (qword_10047C038 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 46)  = static CountryCode.finland;
  if (qword_10047C040 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 48)  = static CountryCode.france;
  if (qword_10047C048 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 50)  = static CountryCode.germany;
  if (qword_10047C050 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 52)  = static CountryCode.greece;
  if (qword_10047C058 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 54)  = static CountryCode.hungary;
  if (qword_10047C060 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 56)  = static CountryCode.italy;
  if (qword_10047C068 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 58)  = static CountryCode.ireland;
  if (qword_10047C070 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 60)  = static CountryCode.latvia;
  if (qword_10047C078 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 62)  = static CountryCode.lithuania;
  if (qword_10047C080 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 64)  = static CountryCode.luxembourg;
  if (qword_10047C088 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 66)  = static CountryCode.malta;
  if (qword_10047C090 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 68)  = static CountryCode.netherlands;
  if (qword_10047C098 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 70)  = static CountryCode.poland;
  if (qword_10047C0A0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 72)  = static CountryCode.portugal;
  if (qword_10047C0A8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 74)  = static CountryCode.slovakRepublic;
  if (qword_10047C0B0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 76)  = static CountryCode.slovenia;
  if (qword_10047C0B8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 78)  = static CountryCode.spain;
  if (qword_10047C0C0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 80)  = static CountryCode.sweden;
  if (qword_10047C0C8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 82)  = static CountryCode.uk;
  if (qword_10047C0D0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 84)  = static CountryCode.iceland;
  if (qword_10047C0D8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 86)  = static CountryCode.liechthenstein;
  if (qword_10047C0E0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 88)  = static CountryCode.norway;
  if (qword_10047C0E8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 90)  = static CountryCode.switzerland;
  if (qword_10047C0F0 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 92)  = static CountryCode.bulgaria;
  if (qword_10047C0F8 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 94)  = static CountryCode.turkey;
  if (qword_10047C100 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 96)  = static CountryCode.romania;
  if (qword_10047C108 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 98)  = static CountryCode.russia;
  if (qword_10047C110 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 100)  = static CountryCode.croatia;
  if (qword_10047C118 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 102)  = static CountryCode.serbia;
  if (qword_10047C120 != -1) {
    uint64_t result = swift_once();
  }
  *(_WORD *)(v1 + 104)  = static CountryCode.southAfrica;
  off_1004807E0  = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_100155E3C()
{
  if (*v0) {
    return 0x7942646E6F636573;
  }
  else {
    return 0x7479427473726966;
  }
}

uint64_t sub_100155E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001569B8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100155EA8(uint64_t a1)
{
  unint64_t v2 = sub_10015639C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100155EE4(uint64_t a1)
{
  unint64_t v2 = sub_10015639C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CountryCode.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004807E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  BOOL v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10015639C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CountryCode.init(from:)(void *a1)
{
  return sub_1001563F0(a1);
}

uint64_t sub_100156098@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1001563F0(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001560C4(void *a1)
{
  return CountryCode.encode(to:)(a1);
}

uint64_t sub_1001560E0()
{
  return CountryCode.description.getter(*v0);
}

uint64_t sub_1001560E8()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  BOOL v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v10 = *v0;
  __int16 v9 = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001562C4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t result = String.count.getter();
  if (result == 2)
  {
    swift_bridgeObjectRetain();
    sub_10011AD60(v4, v3);
    uint64_t v7 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    if (v7)
    {
      __int16 v8 = Character.asciiValue.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v8 & 0x100) == 0)
      {
        sub_100151658(v4, v3);
        uint64_t v10 = v9;
        uint64_t result = swift_bridgeObjectRelease();
        if (v10)
        {
          __int16 v11 = Character.asciiValue.getter();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v11 & 0x100) == 0)
          {
            *a2  = v8;
            a2[1]  = v11;
            return result;
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10015639C()
{
  unint64_t result = qword_1004807F0;
  if (!qword_1004807F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004807F0);
  }
  return result;
}

uint64_t sub_1001563F0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100480828);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10015639C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[15]  = 0;
    unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[14]  = 1;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v9 << 8);
  }
  return v7;
}

unint64_t sub_100156598()
{
  unint64_t result = qword_1004807F8;
  if (!qword_1004807F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004807F8);
  }
  return result;
}

unint64_t sub_1001565F0()
{
  unint64_t result = qword_100480800;
  if (!qword_100480800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480800);
  }
  return result;
}

void *sub_100156644()
{
  return &protocol witness table for String;
}

unint64_t sub_100156654()
{
  unint64_t result = qword_100480808;
  if (!qword_100480808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480808);
  }
  return result;
}

void *sub_1001566A8()
{
  return &protocol witness table for String;
}

void *sub_1001566B4()
{
  return &protocol witness table for String;
}

uint64_t storeEnumTagSinglePayload for CountryCode(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100156774);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CountryCode()
{
  return &type metadata for CountryCode;
}

unsigned char *storeEnumTagSinglePayload for CountryCode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100156878);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CountryCode.CodingKeys()
{
  return &type metadata for CountryCode.CodingKeys;
}

unint64_t sub_1001568B4()
{
  unint64_t result = qword_100480810;
  if (!qword_100480810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480810);
  }
  return result;
}

unint64_t sub_10015690C()
{
  unint64_t result = qword_100480818;
  if (!qword_100480818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480818);
  }
  return result;
}

unint64_t sub_100156964()
{
  unint64_t result = qword_100480820;
  if (!qword_100480820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100480820);
  }
  return result;
}

uint64_t sub_1001569B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7479427473726966 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7942646E6F636573 && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100156AC4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v25 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v5 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v9 = (char *)&v23 - v8;
  uint64_t v10 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i  = v16 | (v15 << 6); ; i  = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_10016A42C(*(void *)(a1 + 56) + *(void *)(v5 + 72) * i, (uint64_t)v9, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100175E94((uint64_t)v9, (uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (a2(v7))
    {
      swift_release();
      uint64_t v21 = v24;
      sub_100175E94((uint64_t)v7, v24, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v22 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1, v25);
    }
    uint64_t result = sub_10016A550((uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v18 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v18);
    ++v15;
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 1;
    if (v18 + 1 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 2;
    if (v18 + 2 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v15 = v18 + 3;
    if (v18 + 3 >= v26) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v15);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v20 = v18 + 4;
    if (v20 >= v26)
    {
LABEL_25:
      swift_release();
      uint64_t v22 = 1;
      uint64_t v21 = v24;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1, v25);
    }
    unint64_t v19 = *(void *)(v10 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v15 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_28;
        }
        if (v15 >= v26) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v10 + 8 * v15);
        ++v20;
        if (v19) {
          goto LABEL_20;
        }
      }
    }
    int64_t v15 = v20;
LABEL_20:
    unint64_t v13 = (v19 - 1) & v19;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AppleKeychain.__allocating_init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  Logger.init(subsystem:category:)();
  *(_DWORD *)(v8 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
  int v9 = (void *)(v8 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *int v9 = &_swiftEmptySetSingleton;
  v9[1]  = 0;
  *(void *)(v8 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = (void *)(v8 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *uint64_t v10 = a1;
  v10[1]  = a2;
  uint64_t v11 = (void *)(v8 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *uint64_t v11 = a3;
  v11[1]  = a4;
  return v8;
}

uint64_t sub_100156EAC()
{
  uint64_t v1 = 0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v2 + 56;
  do
  {
    if (v2)
    {
      if (*(void *)(v2 + 16))
      {
        uint64_t v5 = static Hasher._hash(seed:_:)();
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v7 = v5 & ~v6;
        if ((*(void *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
        {
          uint64_t v8 = *(void *)(v2 + 48);
          if (*(void *)(v8 + 8 * v7) == v1) {
            continue;
          }
          uint64_t v9 = ~v6;
          while (1)
          {
            unint64_t v7 = (v7 + 1) & v9;
            if (((*(void *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
              break;
            }
            if (*(void *)(v8 + 8 * v7) == v1) {
              goto LABEL_2;
            }
          }
        }
      }
    }
    uint64_t v10 = *v0;
    if (!*(void *)(*v0 + 16)) {
      goto LABEL_18;
    }
    uint64_t v11 = static Hasher._hash(seed:_:)();
    uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v13 = v11 & ~v12;
    if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v14 = *(void *)(v10 + 48);
    if (*(void *)(v14 + 8 * v13) != v1)
    {
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v13) == v1) {
          goto LABEL_2;
        }
      }
LABEL_18:
      sub_1000FA2C8(&v17, v1);
      return v1;
    }
LABEL_2:
    ;
  }
  while (!__CFADD__(v1++, 1));
  return 0;
}

uint64_t sub_100157010()
{
  uint64_t v1 = 0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v2 + 56;
  if (v2) {
    goto LABEL_2;
  }
LABEL_9:
  while (1)
  {
    uint64_t v9 = *v0;
    if (!*(void *)(*v0 + 16)) {
      break;
    }
    uint64_t v10 = static Hasher._hash(seed:bytes:count:)();
    uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      break;
    }
    uint64_t v13 = *(void *)(v9 + 48);
    if (v1 != *(unsigned __int8 *)(v13 + v12))
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          goto LABEL_18;
        }
        if (v1 == *(unsigned __int8 *)(v13 + v12)) {
          goto LABEL_15;
        }
      }
    }
    do
    {
LABEL_15:
      if (v1 == 255)
      {
        LOBYTE(v1)  = 0;
        int v15 = 1;
        return v1 | (v15 << 8);
      }
      ++v1;
      if (!v2) {
        goto LABEL_9;
      }
LABEL_2:
      if (!*(void *)(v2 + 16)) {
        goto LABEL_9;
      }
      uint64_t v4 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v6 = v4 & ~v5;
      if (((*(void *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(v2 + 48);
    }
    while (v1 == *(unsigned __int8 *)(v7 + v6));
    uint64_t v8 = ~v5;
    while (1)
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        break;
      }
      if (v1 == *(unsigned __int8 *)(v7 + v6)) {
        goto LABEL_15;
      }
    }
  }
LABEL_18:
  sub_1000FA9B8(&v17, v1);
  int v15 = 0;
  return v1 | (v15 << 8);
}

uint64_t sub_100157184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v37 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LongTermPairingKeys(0);
  __chkstk_darwin();
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = __chkstk_darwin();
  int64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v6 + *(int *)(v16 + 20);
  int64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32);
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t v24 = v23;
  uint64_t v40 = a5;
  LOBYTE(a5)  = v20(v19, v21, a3, v22, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v22);
  sub_10016A42C(v6, v24, type metadata accessor for LongTermPairingKeys);
  if (a5)
  {
    uint64_t v25 = v24 + *(int *)(v14 + 20);
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v13, v25, v26);
    uint64_t v27 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    uint64_t v28 = v25 + v27;
    uint64_t v29 = &v13[v27];
    uint64_t v30 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, v28, v30);
    type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
    uint64_t v31 = v37;
    P256.Signing.PrivateKey.publicKey.getter();
    uint64_t v32 = &v13[*(int *)(v31 + 24)];
    *(void *)uint64_t v32 = 0;
    *((void *)v32 + 1)  = 0;
    uint64_t v33 = &v13[*(int *)(v31 + 28)];
    uint64_t v34 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
    char v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 40))(v13, v38, v39, 1, v22);
    sub_10016A550((uint64_t)v13, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }
  else
  {
    char v35 = 0;
  }
  sub_10016A550(v24, type metadata accessor for LongTermPairingKeys);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v22);
  return v35 & 1;
}

uint64_t sub_1001574FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v83 = a4;
  uint64_t v89 = a6;
  uint64_t v98 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v96 = *(void **)(v98 - 8);
  __chkstk_darwin();
  uint64_t v92 = (uint64_t)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  uint64_t v86 = (uint64_t)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v85 = (char *)v77 - v12;
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t v87 = *(void **)(v93 - 8);
  __chkstk_darwin();
  uint64_t v88 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480930);
  __chkstk_darwin();
  uint64_t v19 = (char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v21 = (char *)v77 - v20;
  uint64_t v81 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v94 = *(void *)(v81 - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(a5 + 24);
  uint64_t v99 = a2;
  uint64_t v100 = a3;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v82 = a1;
  uint64_t v27 = v83;
  uint64_t v28 = a5;
  uint64_t v29 = (uint64_t)v21;
  uint64_t v30 = v24(v21, v25, v26);
  sub_1000136F4(v29, (uint64_t)v19, &qword_100480930);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v82, v27);
    sub_1000380B4(v29, &qword_100480930);
    sub_1000380B4((uint64_t)v19, &qword_100480930);
    uint64_t v31 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v23, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v89, 1, 1, v81);
  }
  uint64_t v80 = v29;
  sub_100175E94((uint64_t)v19, (uint64_t)v17, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v33 = v81;
  sub_10016A42C((uint64_t)v17, (uint64_t)&v23[*(int *)(v81 + 20)], type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v102[3]  = v27;
  v102[4]  = v28;
  uint64_t v34 = sub_1000382F0(v102);
  uint64_t v35 = *(void *)(v27 - 8);
  uint64_t v36 = v82;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v35 + 16))(v34, v82, v27);
  type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_allocObject();
  uint64_t v37 = sub_10015D558(v99, (uint64_t)v100, (uint64_t)v102);
  *(void *)&v23[*(int *)(v33 + 24)]  = v37;
  uint64_t v38 = *(void *)(v30 + 16);
  uint64_t v39 = v27;
  uint64_t v40 = v36;
  uint64_t v41 = v33;
  uint64_t v42 = v94;
  uint64_t v43 = v30;
  uint64_t v44 = v89;
  if (!v38)
  {
LABEL_26:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v40, v39);
    sub_10016A550((uint64_t)v17, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_1000380B4(v80, &qword_100480930);
    swift_bridgeObjectRelease();
    sub_10016A42C((uint64_t)v23, v44, type metadata accessor for LongTermPairingKeys);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
    return sub_10016A550((uint64_t)v23, type metadata accessor for LongTermPairingKeys);
  }
  v77[0]  = v35;
  uint64_t v78 = v17;
  long long v79 = v23;
  uint64_t v45 = v96;
  uint64_t v46 = v43 + ((*((unsigned __int8 *)v45 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v45 + 80));
  uint64_t v99 = v96[9];
  uint64_t v100 = (uint64_t *)(v37 + 16);
  uint64_t v95 = (void (*)(uint64_t, uint64_t, uint64_t))v87[2];
  uint64_t v96 = v87 + 2;
  uint64_t v97 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 7);
  uint64_t v90 = (void (**)(uint64_t, uint64_t))(v87 + 1);
  uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 6);
  v77[1]  = v43;
  swift_bridgeObjectRetain();
  uint64_t v47 = (uint64_t)v85;
  uint64_t v48 = v93;
  uint64_t v49 = (uint64_t)v88;
  uint64_t v84 = v37;
  while (1)
  {
    v95(v49, v46, v48);
    sub_10016A42C(v46, v47, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v53 = v98;
    __int16 v54 = *v97;
    (*v97)(v47, 0, 1, v98);
    swift_beginAccess();
    if ((*v91)(v47, 1, v53) == 1)
    {
      swift_retain();
      sub_1000380B4(v47, &qword_1004808F8);
      swift_bridgeObjectRetain();
      unint64_t v55 = sub_1000316CC(v49);
      char v57 = v56;
      swift_bridgeObjectRelease();
      if (v57)
      {
        uint64_t v58 = v100;
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v60 = (void *)*v58;
        uint64_t v101 = (void *)*v58;
        *uint64_t v58 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100171B04();
          unint64_t v60 = v101;
        }
        int v51 = (void (*)(uint64_t, uint64_t))v87[1];
        uint64_t v48 = v93;
        v51(v60[6] + v87[9] * v55, v93);
        uint64_t v61 = (uint64_t)v101;
        uint64_t v62 = v86;
        sub_100175E94(v101[7] + v55 * v99, v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_10016F8E0(v55, v61);
        *uint64_t v58 = v61;
        uint64_t v50 = v62;
        swift_bridgeObjectRelease();
        v54(v62, 0, 1, v98);
        uint64_t v47 = (uint64_t)v85;
        uint64_t v37 = v84;
      }
      else
      {
        uint64_t v50 = v86;
        v54(v86, 1, 1, v98);
        int v51 = *v90;
        uint64_t v48 = v93;
      }
      uint64_t v52 = v88;
      v51((uint64_t)v88, v48);
      uint64_t v49 = (uint64_t)v52;
      sub_1000380B4(v50, &qword_1004808F8);
      uint64_t v44 = v89;
      goto LABEL_7;
    }
    sub_100175E94(v47, v92, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    swift_retain();
    int v63 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v101 = *(void **)(v37 + 16);
    uint64x2_t v64 = v101;
    *(void *)(v37 + 16)  = 0x8000000000000000;
    unint64_t v66 = sub_1000316CC(v49);
    uint64_t v67 = v64[2];
    BOOL v68 = (v65 & 1) == 0;
    uint64_t v69 = v67 + v68;
    if (__OFADD__(v67, v68)) {
      break;
    }
    char v70 = v65;
    if (v64[3] >= v69)
    {
      if (v63)
      {
        uint64_t v73 = v101;
        if ((v65 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_100171B04();
        uint64_t v73 = v101;
        if ((v70 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      sub_10016CB54(v69, v63);
      unint64_t v71 = sub_1000316CC(v49);
      if ((v70 & 1) != (v72 & 1)) {
        goto LABEL_29;
      }
      unint64_t v66 = v71;
      uint64_t v73 = v101;
      if ((v70 & 1) == 0)
      {
LABEL_22:
        v73[(v66 >> 6) + 8] |= 1 << v66;
        uint64_t v48 = v93;
        v95(v73[6] + v87[9] * v66, v49, v93);
        sub_100175E94(v92, v73[7] + v66 * v99, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v74 = v73[2];
        BOOL v75 = __OFADD__(v74, 1);
        uint64_t v76 = v74 + 1;
        if (v75) {
          goto LABEL_28;
        }
        v73[2]  = v76;
        uint64_t v73 = v101;
        goto LABEL_24;
      }
    }
    sub_10017AA1C(v92, v73[7] + v66 * v99);
    uint64_t v48 = v93;
LABEL_24:
    *uint64_t v100 = (uint64_t)v73;
    swift_bridgeObjectRelease();
    (*v90)(v49, v48);
LABEL_7:
    uint64_t v42 = v94;
    swift_endAccess();
    swift_release();
    v46 += v99;
    if (!--v38)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = v83;
      uint64_t v40 = v82;
      uint64_t v41 = v81;
      uint64_t v23 = v79;
      uint64_t v17 = v78;
      uint64_t v35 = v77[0];
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t LongTermPairingKeys.init(myIdentity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Logger.init(subsystem:category:)();
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0);
  sub_10016A42C(a1, a2 + *(int *)(v4 + 20), type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  type metadata accessor for LongTermPairingKeys.PairedDevices();
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0;
  swift_allocObject();
  uint64_t v5 = sub_10015D558(0, 0, (uint64_t)v7);
  uint64_t result = sub_10016A550(a1, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  *(void *)(a2 + *(int *)(v4 + 24))  = v5;
  return result;
}

uint64_t LongTermPairingKeys.PrivateIdentity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SymmetricKeySize();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  if (qword_10047C140 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1000151B8(v2, (uint64_t)qword_100480848);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.init(size:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  return P256.Signing.PrivateKey.init(compactRepresentable:)();
}

uint64_t LongTermPairingKeys.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys(0);
  __chkstk_darwin();
  sub_10016A42C(v1, (uint64_t)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LongTermPairingKeys);
  sub_100010BCC(qword_10047DD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16)  = xmmword_1003B2450;
  strcpy((char *)(v10 + 32), "pairedDevices");
  *(_WORD *)(v10 + 46)  = -4864;
  uint64_t v11 = *(void *)(v1 + *(int *)(v8 + 24));
  *(void *)(v10 + 72)  = type metadata accessor for LongTermPairingKeys.PairedDevices();
  *(void *)(v10 + 48)  = v11;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10015853C()
{
  uint64_t result = sub_10011A478(0xD000000000000020, 0x80000001003DC780);
  qword_100480838  = result;
  unk_100480840  = v1;
  return result;
}

uint64_t sub_100158578()
{
  uint64_t v0 = type metadata accessor for SymmetricKeySize();
  sub_10001D880(v0, qword_100480848);
  sub_1000151B8(v0, (uint64_t)qword_100480848);
  return static SymmetricKeySize.bits256.getter();
}

uint64_t sub_1001585C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v36 = type metadata accessor for SymmetricKey();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  uint64_t v11 = v41;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v11) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v33 = v7;
  uint64_t v41 = v4;
  uint64_t v13 = v36;
  uint64_t v12 = v37;
  uint64_t v14 = v40;
  sub_100039448((uint64_t)v39, v40);
  uint64_t v15 = UnkeyedDecodingContainer.decodeData(with:)(16, v14);
  unint64_t v17 = v16;
  sub_100257E34(v15, v16, &v38);
  sub_10000C970(v15, v17);
  uint64_t v19 = v33;
  UUID.init(uuid:)();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  uint64_t v32 = v10;
  v20(v10, v19, v5);
  if (qword_10047C140 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for SymmetricKeySize();
  sub_1000151B8(v21, (uint64_t)qword_100480848);
  uint64_t v22 = SymmetricKeySize.bitCount.getter() / 8;
  uint64_t v23 = v40;
  sub_100039448((uint64_t)v39, v40);
  uint64_t v24 = UnkeyedDecodingContainer.decodeData(with:)(v22, v23);
  uint64_t v25 = v12;
  uint64_t v26 = v34;
  uint64_t v27 = v41;
  v38.n128_u64[0]  = v24;
  v38.n128_u64[1]  = v28;
  SymmetricKey.init<A>(data:)();
  uint64_t v29 = *(int *)(v8 + 20);
  uint64_t v30 = (uint64_t)v32;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v32[v29], v27, v13);
  sub_100010754((uint64_t)v39);
  sub_10016A42C(v30, v25, type metadata accessor for LongTermPairingKeys.Identity);
  sub_100010754((uint64_t)a1);
  return sub_10016A550(v30, type metadata accessor for LongTermPairingKeys.Identity);
}

uint64_t sub_1001589BC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v23 = UUID.uuid.getter();
  LOWORD(v24)  = v8;
  BYTE2(v24)  = v9;
  BYTE3(v24)  = v10;
  BYTE4(v24)  = v11;
  BYTE5(v24)  = v12;
  BYTE6(v24)  = v13;
  HIBYTE(v24)  = v14;
  uint64_t v15 = sub_10011A3BC((uint64_t)&v23, (uint64_t)v25);
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v18 = v23;
  unint64_t v19 = v24;
  uint64_t v23 = v15;
  unint64_t v24 = v17;
  sub_100013D44(v15, v17);
  sub_100013D44(v18, v19);
  sub_100125FAC(v18, v19);
  sub_10000C970(v18, v19);
  sub_10000C970(v18, v19);
  sub_10000C970(v15, v17);
  uint64_t v20 = v23;
  unint64_t v21 = v24;
  sub_100039448((uint64_t)v25, v26);
  sub_1000742DC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  sub_10000C970(v20, v21);
  return sub_100010754((uint64_t)v25);
}

uint64_t sub_100158C8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001585C4(a1, a2);
}

uint64_t sub_100158CA4(void *a1)
{
  return sub_1001589BC(a1);
}

uint64_t LongTermPairingKeys.PrivateIdentity.publicIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
  uint64_t v4 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = a1 + v4;
  uint64_t v7 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, v5, v7);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  P256.Signing.PrivateKey.publicKey.getter();
  char v9 = (void *)(a1 + *(int *)(v8 + 24));
  *char v9 = 0;
  v9[1]  = 0;
  uint64_t v10 = a1 + *(int *)(v8 + 28);
  uint64_t v11 = type metadata accessor for Date();
  char v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t LongTermPairingKeys.PrivateIdentity.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v1 = sub_10015980C((void (*)(void))type metadata accessor for LongTermPairingKeys.PrivateIdentity, (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  unint64_t v3 = v2;
  sub_100039448((uint64_t)v5, v6);
  sub_1000742DC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  sub_10000C970(v1, v3);
  return sub_100010754((uint64_t)v5);
}

uint64_t sub_100158EE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + *(int *)(v11 + 20), v7);
  if (qword_10047C138 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100480838;
  unint64_t v13 = qword_100480840;
  uint64_t v14 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v14)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v14 = (int)v14;
LABEL_8:
      if (v14 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100159294);
      }
LABEL_9:
      uint64_t v29 = v7;
      uint64_t v30 = v14;
      sub_100013D44(qword_100480838, qword_100480840);
      uint64_t v18 = a3;
      uint64_t v19 = sub_10011A3BC((uint64_t)&v30, (uint64_t)&v31);
      unint64_t v21 = v20;
      uint64_t v30 = v12;
      unint64_t v31 = v13;
      sub_100013D44(v12, v13);
      sub_100125FAC(v19, v21);
      sub_10000C970(v19, v21);
      sub_10000C970(v12, v13);
      uint64_t v22 = v30;
      unint64_t v23 = v31;
      uint64_t v32 = v30;
      unint64_t v33 = v31;
      sub_100013D44(v30, v31);
      sub_100013D44(a1, a2);
      sub_100125FAC(a1, a2);
      sub_10000C970(a1, a2);
      sub_10000C970(v22, v23);
      uint64_t v24 = v32;
      unint64_t v25 = v33;
      uint64_t v30 = v32;
      unint64_t v31 = v33;
      sub_100074B70();
      P256.Signing.PrivateKey.signature<A>(for:)();
      sub_10000C970(v24, v25);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
      uint64_t v26 = type metadata accessor for P256.Signing.ECDSASignature();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v18, 0, 1, v26);
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_9;
  }
}

uint64_t sub_1001592A4()
{
  if (*v0) {
    return 0x4B676E696E676973;
  }
  else {
    return 0x797469746E656469;
  }
}

uint64_t sub_1001592E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10017561C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10015930C(uint64_t a1)
{
  unint64_t v2 = sub_10016A4B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100159348(uint64_t a1)
{
  unint64_t v2 = sub_10016A4B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermPairingKeys.PrivateIdentity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100010BCC(&qword_1004808B0);
  uint64_t v23 = *(void *)(v27 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10016A4B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  unint64_t v20 = a1;
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  char v29 = 0;
  sub_10016A508(&qword_1004808C0, (void (*)(uint64_t))type metadata accessor for LongTermPairingKeys.Identity);
  uint64_t v15 = (uint64_t)v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_100175E94(v15, v12, type metadata accessor for LongTermPairingKeys.Identity);
  char v28 = 1;
  sub_10016A508(&qword_1004808C8, (void (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey);
  uint64_t v16 = v5;
  uint64_t v17 = v14;
  uint64_t v18 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v12 + *(int *)(v9 + 20), v16, v17);
  sub_10016A42C(v12, v22, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  sub_100010754((uint64_t)v20);
  return sub_10016A550(v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
}

uint64_t sub_100159774@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PrivateIdentity.init(from:)(a1, a2);
}

uint64_t LongTermPairingKeys.PublicIdentity.rawRepresentation.getter()
{
  return sub_10015980C((void (*)(void))type metadata accessor for LongTermPairingKeys.PublicIdentity, (uint64_t (*)(void))&P256.Signing.PublicKey.rawRepresentation.getter);
}

uint64_t sub_10015980C(void (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  uint64_t v29 = UUID.uuid.getter();
  LOWORD(v30)  = v10;
  BYTE2(v30)  = v11;
  BYTE3(v30)  = v12;
  BYTE4(v30)  = v13;
  BYTE5(v30)  = v14;
  BYTE6(v30)  = v15;
  HIBYTE(v30)  = v16;
  uint64_t v17 = sub_10011A3BC((uint64_t)&v29, (uint64_t)&v31);
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v20 = v29;
  unint64_t v21 = v30;
  uint64_t v29 = v17;
  unint64_t v30 = v19;
  sub_100013D44(v17, v19);
  sub_100013D44(v20, v21);
  sub_100125FAC(v20, v21);
  sub_10000C970(v20, v21);
  sub_10000C970(v20, v21);
  sub_10000C970(v17, v19);
  uint64_t v22 = v29;
  unint64_t v23 = v30;
  a1(0);
  uint64_t v24 = a2();
  unint64_t v26 = v25;
  uint64_t v29 = v22;
  unint64_t v30 = v23;
  sub_100013D44(v22, v23);
  sub_100125FAC(v24, v26);
  sub_10000C970(v24, v26);
  sub_10000C970(v22, v23);
  return v29;
}

uint64_t LongTermPairingKeys.PublicIdentity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v22 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v8 = __chkstk_darwin();
  __int16 v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = &v10[*(int *)(v8 + 24)];
  *(void *)char v11 = 0;
  *((void *)v11 + 1)  = 0;
  uint64_t v12 = (uint64_t)&v10[*(int *)(v8 + 28)];
  uint64_t v13 = type metadata accessor for Date();
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  uint64_t v28 = v12;
  v14(v12, 1, 1, v13);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    swift_bridgeObjectRelease();
    return sub_1000380B4(v28, &qword_1004808D0);
  }
  else
  {
    unint64_t v19 = a1;
    sub_100039448((uint64_t)v25, v26);
    sub_10016A508(&qword_1004808C0, (void (*)(uint64_t))type metadata accessor for LongTermPairingKeys.Identity);
    uint64_t v15 = (uint64_t)v24;
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100175E94(v15, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.Identity);
    uint64_t v24 = v27;
    sub_100039448((uint64_t)v25, v26);
    sub_10016A508(&qword_1004808D8, (void (*)(uint64_t))&type metadata accessor for P256.Signing.PublicKey);
    uint64_t v16 = v22;
    UnkeyedDecodingContainer.inferredDecode<A>()();
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v10[*(int *)(v7 + 20)], v5, v16);
    sub_100010754((uint64_t)v25);
    sub_10016A42C((uint64_t)v10, v21, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100010754((uint64_t)v19);
    return sub_10016A550((uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }
}

uint64_t LongTermPairingKeys.PublicIdentity.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v1 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  unint64_t v3 = v2;
  sub_100039448((uint64_t)v5, v6);
  sub_1000742DC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  sub_10000C970(v1, v3);
  return sub_100010754((uint64_t)v5);
}

uint64_t LongTermPairingKeys.PublicIdentity.description.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) + 24));
  if (v1[1])
  {
    uint64_t v9 = *v1;
    swift_bridgeObjectRetain();
    v2._uint64_t countAndFlagsBits = 2108704;
    v2._object  = (void *)0xE300000000000000;
    String.append(_:)(v2);
    uint64_t v3 = v9;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object  = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t LongTermPairingKeys.PublicIdentity.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  Swift::String v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  __chkstk_darwin();
  sub_10016A42C(v1, (uint64_t)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v11[1]  = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10015A244(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + *(int *)(v10 + 20), v6);
  if (qword_10047C138 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100480838;
  unint64_t v12 = qword_100480840;
  uint64_t v13 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v13)  = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v13 = (int)v13;
LABEL_8:
      if (v13 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10015A554);
      }
LABEL_9:
      uint64_t v30 = v13;
      sub_100013D44(qword_100480838, qword_100480840);
      uint64_t v17 = sub_10011A3BC((uint64_t)&v30, (uint64_t)&v31);
      uint64_t v27 = v6;
      uint64_t v28 = v11;
      uint64_t v18 = v17;
      unint64_t v20 = v19;
      unint64_t v29 = v12;
      sub_100013D44(v11, v12);
      sub_100125FAC(v18, v20);
      sub_10000C970(v18, v20);
      sub_10000C970(v11, v12);
      uint64_t v21 = v28;
      unint64_t v22 = v29;
      uint64_t v30 = v28;
      unint64_t v31 = v29;
      sub_100013D44(v28, v29);
      sub_100013D44(a2, a3);
      sub_100125FAC(a2, a3);
      sub_10000C970(a2, a3);
      sub_10000C970(v21, v22);
      uint64_t v23 = v30;
      unint64_t v24 = v31;
      uint64_t v28 = v30;
      unint64_t v29 = v31;
      sub_100074B70();
      char v25 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
      sub_10000C970(v23, v24);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
      return v25 & 1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v13 = BYTE6(a3);
      goto LABEL_9;
  }
}

uint64_t sub_10015A564@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PublicIdentity.init(from:)(a1, a2);
}

uint64_t sub_10015A580()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  sub_10016A42C(v0, (uint64_t)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v10[1]  = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10015A7B4()
{
  sub_100010BCC(&qword_1004810D0);
  __chkstk_darwin();
  uint64_t v1 = (char *)v13 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = NANGenericServiceProtocol.packetData(for:)(1);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if (v7 >> 60 != 15)
  {
    void v13[2] = v6;
    v13[3]  = v7;
    type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
    uint64_t v10 = type metadata accessor for AES.GCM.Nonce();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v1, 1, 1, v10);
    sub_100074B70();
    static AES.GCM.seal<A>(_:using:nonce:)();
    sub_1000380B4((uint64_t)v1, &qword_1004810D0);
    uint64_t v11 = AES.GCM.SealedBox.combined.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000C95C(v8, v9);
    return v11;
  }
  return v8;
}

uint64_t sub_10015A9D8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10015AB48);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27)
      {
        sub_100013D44(a1, a2);
        sub_10011AAAC(a1, a2);
        AES.GCM.SealedBox.init(combined:)();
        return sub_10000C970(a1, a2);
      }
      else
      {
LABEL_7:
        uint64_t v8 = type metadata accessor for CryptoKitError();
        sub_10016A508(&qword_1004810C0, (void (*)(uint64_t))&type metadata accessor for CryptoKitError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for CryptoKitError.incorrectParameterSize(_:), v8);
        swift_willThrow();
        return sub_10000C970(a1, a2);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10015AB58(unint64_t a1, uint64_t (*a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v120 = a4;
  uint64_t v134 = a3;
  unint64_t v137 = a2;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v122 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)&v110 - v6;
  uint64_t v126 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v121 = (uint64_t)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v119 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004810D0);
  __chkstk_darwin();
  uint64_t v128 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin();
  uint64_t v127 = (uint64_t (*)(uint64_t))((char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v131 = sub_100010BCC(&qword_10047DF48);
  unint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin();
  unint64_t v129 = (unint64_t)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v133 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v136 = *(void *)(v14 - 8);
  __chkstk_darwin();
  BOOL v16 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004810C8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v20 = (char *)&v110 - v19;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  unint64_t v24 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
  unint64_t v135 = a1;
  v25(v24, a1, v21);
  uint64_t v140 = UUID.uuid.getter();
  LOWORD(v141)  = v26;
  BYTE2(v141)  = v27;
  BYTE3(v141)  = v28;
  BYTE4(v141)  = v29;
  BYTE5(v141)  = v30;
  BYTE6(v141)  = v31;
  HIBYTE(v141)  = v32;
  uint64_t v33 = sub_10011A3BC((uint64_t)&v140, (uint64_t)v142);
  unint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  unint64_t v36 = v35;
  sub_100013D44(v33, v35);
  uint64_t v37 = sub_10008DA38(v33, v35);
  unint64_t v39 = v38;
  uint64_t v114 = v18;
  uint64_t v116 = v20;
  uint64_t v113 = v13;
  uint64_t v115 = v14;
  uint64_t v117 = v33;
  unint64_t v118 = v36;
  sub_100013D44(v37, v38);
  unint64_t v40 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v41 = type metadata accessor for BinaryEncoder();
  uint64_t v42 = swift_allocObject();
  long long v112 = xmmword_1003B2440;
  *(_OWORD *)(v42 + 16)  = xmmword_1003B2440;
  *(void *)(v42 + 32)  = v40;
  uint64_t v143 = v41;
  uint64_t v43 = sub_10016A508((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  uint64_t v144 = v43;
  uint64_t v140 = v42;
  sub_100013D44(v37, v39);
  swift_retain();
  sub_10016A960(&v140, v37, v39);
  sub_100010754((uint64_t)&v140);
  sub_10000C970(v37, v39);
  sub_10000C970(v37, v39);
  uint64_t v110 = v43;
  swift_beginAccess();
  unint64_t v44 = *(void *)(v42 + 24);
  uint64_t v111 = *(void *)(v42 + 16);
  sub_100013D44(v111, v44);
  swift_release();
  sub_10000C970(v37, v39);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v45 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v47 = v46;
  (*(void (**)(char *, uint64_t))(v136 + 8))(v16, v115);
  uint64_t v48 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v50 = v49;
  uint64_t v140 = v45;
  unint64_t v141 = v47;
  sub_100013D44(v45, v47);
  sub_100125FAC(v48, v50);
  sub_10000C970(v48, v50);
  sub_10000C970(v45, v47);
  uint64_t v51 = v140;
  unint64_t v52 = v141;
  uint64_t v53 = (uint64_t)v116;
  sub_100158EE4(v140, v141, (uint64_t)v116);
  sub_10000C970(v51, v52);
  uint64_t v54 = (uint64_t)v114;
  sub_1000136F4(v53, (uint64_t)v114, &qword_1004810C8);
  uint64_t v55 = v132;
  unint64_t v56 = v133;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v132 + 48))(v54, 1, v133) == 1)
  {
    sub_1000380B4(v53, &qword_1004810C8);
    uint64_t v57 = v111;
    unint64_t v58 = v44;
  }
  else
  {
    unint64_t v60 = v113;
    (*(void (**)(char *, uint64_t, unint64_t))(v55 + 32))(v113, v54, v56);
    uint64_t v61 = P256.Signing.ECDSASignature.rawRepresentation.getter();
    uint64_t v63 = sub_10008DA38(v61, v62);
    unint64_t v65 = v64;
    unint64_t v135 = v44;
    (*(void (**)(char *, unint64_t))(v55 + 8))(v60, v56);
    sub_1000380B4((uint64_t)v116, &qword_1004810C8);
    sub_100013D44(v63, v65);
    unint64_t v66 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16)  = v112;
    *(void *)(v67 + 32)  = v66;
    uint64_t v143 = v41;
    uint64_t v144 = v110;
    uint64_t v140 = v67;
    sub_100013D44(v63, v65);
    swift_retain();
    sub_10016A960(&v140, v63, v65);
    sub_100010754((uint64_t)&v140);
    sub_10000C970(v63, v65);
    sub_10000C970(v63, v65);
    uint64_t v68 = v117;
    uint64_t v134 = v41;
    swift_beginAccess();
    uint64_t v70 = *(void *)(v67 + 16);
    unint64_t v69 = *(void *)(v67 + 24);
    sub_100013D44(v70, v69);
    swift_release();
    sub_10000C970(v63, v65);
    uint64_t v140 = v68;
    unint64_t v141 = v118;
    type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
    type metadata accessor for SHA256();
    sub_10016A508(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
    unint64_t v71 = sub_100074B70();
    unint64_t v72 = v129;
    static HMAC.authenticationCode<A>(for:using:)();
    uint64_t v73 = v131;
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    uint64_t v74 = v140;
    unint64_t v75 = v141;
    (*(void (**)(unint64_t, uint64_t))(v130 + 8))(v72, v73);
    uint64_t v76 = sub_10008DA38(v74, v75);
    unint64_t v78 = v77;
    uint64_t v131 = v71;
    uint64_t v132 = v70;
    unint64_t v133 = v69;
    sub_100013D44(v76, v77);
    unint64_t v79 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v80 = v134;
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16)  = v112;
    *(void *)(v81 + 32)  = v79;
    uint64_t v143 = v80;
    uint64_t v144 = v110;
    uint64_t v140 = v81;
    sub_100013D44(v76, v78);
    swift_retain();
    sub_10016A960(&v140, v76, v78);
    sub_100010754((uint64_t)&v140);
    sub_10000C970(v76, v78);
    sub_10000C970(v76, v78);
    swift_beginAccess();
    uint64_t v83 = *(void *)(v81 + 16);
    unint64_t v82 = *(void *)(v81 + 24);
    sub_100013D44(v83, v82);
    swift_release();
    sub_10000C970(v76, v78);
    *(void *)&long long v138 = v111;
    *((void *)&v138 + 1)  = v135;
    sub_100013D44(v111, v135);
    uint64_t v84 = v132;
    unint64_t v85 = v133;
    sub_100013D44(v132, v133);
    sub_100125FAC(v84, v85);
    sub_10000C970(v84, v85);
    long long v86 = v138;
    long long v139 = v138;
    sub_100013D44(v83, v82);
    sub_100013D44(v86, *((unint64_t *)&v86 + 1));
    sub_100125FAC(v83, v82);
    sub_10000C970(v83, v82);
    sub_10000C970(v86, *((unint64_t *)&v86 + 1));
    long long v138 = v139;
    uint64_t v87 = type metadata accessor for AES.GCM.Nonce();
    uint64_t v88 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v128, 1, 1, v87);
    uint64_t v89 = v127;
    static AES.GCM.seal<A>(_:using:nonce:)();
    uint64_t v134 = v83;
    sub_1000380B4(v88, &qword_1004810D0);
    sub_10000C970(v138, *((unint64_t *)&v138 + 1));
    uint64_t v131 = AES.GCM.SealedBox.combined.getter();
    unint64_t v91 = v90;
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v124 + 8))(v89, v125);
    unint64_t v130 = v91;
    if (v91 >> 60 != 15)
    {
      unint64_t v92 = sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
      *(void *)&long long v139 = v92;
      uint64_t v93 = (uint64_t)v119;
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v136 + 56))(v93, 0, 1, v115);
      uint64_t v94 = v121;
      sub_10007FCA4(v92, v121);
      uint64_t v95 = v126;
      sub_100087760(v93, v94 + *(int *)(v126 + 24));
      unint64_t v137 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes;
      unint64_t v129 = v82;
      uint64_t v96 = v123;
      sub_10016A42C(v94, v123, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      uint64_t v97 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      uint64_t v98 = *(void *)(v97 - 8);
      uint64_t v128 = *(char **)(v98 + 56);
      uint64_t v136 = v98 + 56;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v128)(v96, 0, 1, v97);
      uint64_t v99 = v122;
      sub_1000136F4(v96, v122, &qword_10047CF68);
      sub_100027C1C(v99, 7);
      uint64_t v127 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes;
      sub_10016A550(v94, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_1000380B4(v96, &qword_10047CF68);
      sub_1000380B4(v93, (uint64_t *)&unk_1004852B0);
      uint64_t v100 = v139;
      uint64_t v101 = v131;
      unint64_t v102 = v130;
      sub_100013D44(v131, v130);
      sub_100013D44(v101, v102);
      sub_10007FCA4(v100, v94);
      uint64_t v103 = v94 + *(int *)(v95 + 32);
      sub_10000C95C(*(void *)v103, *(void *)(v103 + 8));
      *(void *)uint64_t v103 = v101;
      *(void *)(v103 + 8)  = v102;
      sub_10016A42C(v94, v96, v137);
      swift_storeEnumTagMultiPayload();
      uint64_t v104 = v128;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v128)(v96, 0, 1, v97);
      sub_1000136F4(v96, v99, &qword_10047CF68);
      sub_100027C1C(v99, 7);
      sub_10016A550(v94, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_1000380B4(v96, &qword_10047CF68);
      sub_10000C95C(v101, v102);
      uint64_t v105 = sub_10015A7B4();
      unint64_t v107 = v106;
      uint64_t v108 = v139;
      sub_100038004(v105, v106);
      sub_10007FCA4(v108, v94);
      uint64_t v109 = v94 + *(int *)(v126 + 36);
      sub_10000C95C(*(void *)v109, *(void *)(v109 + 8));
      *(void *)uint64_t v109 = v105;
      *(void *)(v109 + 8)  = v107;
      sub_10016A42C(v94, v96, v137);
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v104)(v96, 0, 1, v97);
      sub_1000136F4(v96, v99, &qword_10047CF68);
      sub_100027C1C(v99, 7);
      sub_10016A550(v94, v127);
      sub_1000380B4(v96, &qword_10047CF68);
      sub_10000C95C(v105, v107);
      sub_10000C970(v117, v118);
      sub_10000C95C(v101, v102);
      sub_10000C970(v134, v129);
      sub_10000C970(v132, v133);
      sub_10000C970(v111, v135);
      return v139;
    }
    sub_10000C970(v134, v82);
    sub_10000C970(v132, v133);
    uint64_t v57 = v111;
    unint64_t v58 = v135;
  }
  sub_10000C970(v57, v58);
  sub_10000C970(v117, v118);
  return 0;
}

uint64_t sub_10015BE10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v107 = a3;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  unint64_t v102 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v101 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004810C8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v103 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v105 = *(void *)(v18 - 8);
  uint64_t v106 = v18;
  __chkstk_darwin();
  uint64_t v108 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  sub_100013D44(a1, a2);
  sub_10015A9D8(a1, a2);
  uint64_t v98 = v13;
  uint64_t v99 = v10;
  uint64_t v97 = v6;
  uint64_t v100 = v11;
  uint64_t v21 = static AES.GCM.open(_:using:)();
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  unint64_t v24 = v23 >> 62;
  sub_100013D44(v21, v23);
  uint64_t v25 = v21;
  unint64_t v26 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = type metadata accessor for BinaryDecoder();
  char v28 = (void *)swift_allocObject();
  unint64_t v29 = v23;
  char v30 = v28;
  void v28[5] = _swiftEmptyDictionarySingleton;
  uint64_t v96 = v25;
  v28[2]  = v25;
  v28[3]  = v29;
  unint64_t v95 = v29;
  uint64_t v31 = 0;
  char v32 = v8;
  switch(v24)
  {
    case 1uLL:
      uint64_t v31 = (int)v96;
      break;
    case 2uLL:
      uint64_t v31 = *(void *)(v96 + 16);
      break;
    default:
      break;
  }
  v28[4]  = v31;
  swift_beginAccess();
  v30[5]  = v26;
  swift_bridgeObjectRelease();
  unint64_t v33 = v30[3];
  uint64_t v34 = v30[2];
  unint64_t v104 = v34 >> 32;
  int64_t v35 = BYTE6(v33);
  unint64_t v36 = _swiftEmptyArrayStorage;
  unint64_t v37 = v33 >> 62;
  while (2)
  {
    int64_t v38 = v30[4];
    int64_t v39 = v35;
    switch(v37)
    {
      case 1uLL:
        int64_t v39 = v104;
        goto LABEL_8;
      case 2uLL:
        int64_t v39 = *(void *)(v34 + 24);
        goto LABEL_8;
      case 3uLL:
        if (v38 < 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      default:
LABEL_8:
        if (v38 < v39)
        {
LABEL_11:
          uint64_t v110 = v27;
          uint64_t v111 = sub_10016A508((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          v109.n128_u64[0]  = (unint64_t)v30;
          swift_retain();
          uint64_t v40 = sub_10016A5B0(&v109);
          uint64_t v42 = v41;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v36 = sub_1000C6C40(0, v36[2] + 1, 1, v36);
          }
          unint64_t v44 = v36[2];
          unint64_t v43 = v36[3];
          unint64_t v45 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            unint64_t v94 = v44 + 1;
            unint64_t v47 = v36;
            unint64_t v48 = v44;
            unint64_t v49 = sub_1000C6C40((void *)(v43 > 1), v44 + 1, 1, v47);
            unint64_t v45 = v94;
            unint64_t v44 = v48;
            unint64_t v36 = v49;
          }
          v36[2]  = v45;
          unint64_t v46 = &v36[2 * v44];
          v46[4]  = v40;
          v46[5]  = v42;
          continue;
        }
LABEL_16:
        swift_release();
        if (!v36[2])
        {
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v36 = sub_1001DFDAC(v36);
        }
        uint64_t v50 = v103;
        uint64_t v51 = (uint64_t)v99;
        unint64_t v52 = v32;
        uint64_t v53 = v36[2];
        if (!v53)
        {
          __break(1u);
          JUMPOUT(0x10015CA2CLL);
        }
        uint64_t v54 = v36 + 4;
        uint64_t v55 = &v36[2 * v53 + 2];
        unint64_t v56 = v36;
        uint64_t v58 = *v55;
        unint64_t v57 = v55[1];
        unint64_t v59 = v56;
        v56[2]  = v53 - 1;
        if (v53 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v51, 1, 1, v100);
          uint64_t v72 = v51;
LABEL_23:
          sub_10000C970(v58, v57);
          swift_bridgeObjectRelease();
          unint64_t v64 = &qword_1004810C8;
LABEL_24:
          sub_1000380B4(v72, v64);
          goto LABEL_26;
        }
        unint64_t v104 = v57;
        uint64_t v60 = v53 - 2;
        uint64_t v61 = &v54[2 * v60];
        uint64_t v62 = *v61;
        unint64_t v63 = v61[1];
        v56[2]  = v60;
        sub_100232514(v62, v63, v51);
        sub_10000C970(v62, v63);
        uint64_t v71 = v51;
        uint64_t v72 = v51;
        uint64_t v73 = v100;
        int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v71, 1, v100);
        unint64_t v57 = v104;
        if (v74 == 1) {
          goto LABEL_23;
        }
        unint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
        uint64_t v76 = v98;
        v75(v98, v72, v73);
        uint64_t v77 = v59[2];
        if (!v77)
        {
          uint64_t v72 = (uint64_t)v102;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v102, 1, 1, v97);
LABEL_34:
          sub_10000C970(v58, v104);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v76, v73);
          swift_bridgeObjectRelease();
          unint64_t v64 = &qword_1004862B0;
          goto LABEL_24;
        }
        uint64_t v78 = v77 - 1;
        unint64_t v79 = &v54[2 * v78];
        uint64_t v80 = *v79;
        unint64_t v81 = v79[1];
        v59[2]  = v78;
        sub_100257E34(v80, v81, &v109);
        sub_10000C970(v80, v81);
        uint64_t v72 = (uint64_t)v102;
        UUID.init(uuid:)();
        uint64_t v82 = v101;
        uint64_t v83 = v97;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v72, 0, 1, v97);
        int v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v72, 1, v83);
        uint64_t v76 = v98;
        if (v84 == 1) {
          goto LABEL_34;
        }
        unint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
        v85(v52, v72, v83);
        uint64_t v86 = v59[2];
        swift_bridgeObjectRelease();
        if (v86)
        {
          sub_10000C970(v58, v104);
          (*(void (**)(char *, uint64_t))(v82 + 8))(v52, v83);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v98, v100);
LABEL_26:
          unint64_t v65 = v107;
          unint64_t v66 = v108;
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v67, v68))
          {
            unint64_t v69 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v69 = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to process authentication message because parsing failed", v69, 2u);
            swift_slowDealloc();

            sub_10000C970(v96, v95);
          }
          else
          {
            sub_10000C970(v96, v95);
          }
          (*(void (**)(char *, uint64_t))(v105 + 8))(v66, v106);
          uint64_t v70 = sub_100010BCC(&qword_100480920);
          return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v65, 1, 1, v70);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v105 + 8))(v108, v106);
          sub_10000C970(v96, v95);
          uint64_t v87 = sub_100010BCC(&qword_100480920);
          uint64_t v88 = (void (*)(uint64_t, char *, uint64_t))v75;
          uint64_t v89 = v107;
          uint64_t v90 = v83;
          unint64_t v91 = &v107[*(int *)(v87 + 48)];
          unint64_t v92 = (uint64_t *)&v107[*(int *)(v87 + 64)];
          v85(v107, (uint64_t)v52, v90);
          v88((uint64_t)v91, v98, v100);
          unint64_t v93 = v104;
          *unint64_t v92 = v58;
          v92[1]  = v93;
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v89, 0, 1, v87);
        }
    }
  }
}

uint64_t sub_10015CA4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v36 = a1;
  v32[0]  = a2;
  v32[1]  = a5;
  uint64_t v34 = a3;
  unint64_t v35 = a4;
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v14 = v13;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v15 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v39 = v12;
  unint64_t v40 = v14;
  sub_100013D44(v12, v14);
  sub_100013D44(v15, v17);
  sub_100125FAC(v15, v17);
  sub_10000C970(v15, v17);
  sub_10000C970(v15, v17);
  sub_10000C970(v12, v14);
  uint64_t v18 = v39;
  unint64_t v19 = v40;
  LODWORD(v17)  = sub_10015A244(v32[0], v39, v40);
  sub_10000C970(v18, v19);
  uint64_t v20 = v33;
  uint64_t v39 = v34;
  unint64_t v40 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v36, v33);
  uint64_t v37 = UUID.uuid.getter();
  LOWORD(v38)  = v21;
  BYTE2(v38)  = v22;
  BYTE3(v38)  = v23;
  BYTE4(v38)  = v24;
  BYTE5(v38)  = v25;
  BYTE6(v38)  = v26;
  HIBYTE(v38)  = v27;
  uint64_t v28 = sub_10011A3BC((uint64_t)&v37, (uint64_t)&v39);
  unint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  uint64_t v37 = v28;
  unint64_t v38 = v30;
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  type metadata accessor for SHA256();
  sub_10016A508(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
  sub_100074B70();
  LODWORD(v20)  = static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)();
  sub_10000C970(v28, v30);
  return v17 & v20 & 1;
}

uint64_t sub_10015CDF8()
{
  uint64_t v0 = type metadata accessor for SymmetricKeySize();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SymmetricKeySize.bits256.getter();
  uint64_t v4 = SymmetricKeySize.bitCount.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_100480860  = v4 / 8;
  return result;
}

uint64_t sub_10015CED8()
{
  uint64_t result = sub_10011A478(0xD000000000000016, 0x80000001003DC7B0);
  qword_100480868  = result;
  unk_100480870  = v1;
  return result;
}

uint64_t sub_10015CF14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v49 = a6;
  uint64_t v11 = type metadata accessor for SymmetricKey();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v16 = (char *)&v44 - v15;
  uint64_t v52 = a1;
  unint64_t v53 = a2;
  sub_100013D44(a1, a2);
  SymmetricKey.init<A>(data:)();
  uint64_t v52 = a3;
  unint64_t v53 = a4;
  if (qword_10047C150 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100480868;
  unint64_t v18 = qword_100480870;
  uint64_t v50 = qword_100480868;
  unint64_t v51 = qword_100480870;
  sub_100013D44(qword_100480868, qword_100480870);
  if (qword_10047C148 != -1) {
    swift_once();
  }
  if ((unsigned __int128)(qword_100480860 * (__int128)6) >> 64 != (6 * qword_100480860) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    JUMPOUT(0x10015D538);
  }
  uint64_t v48 = a5;
  type metadata accessor for SHA256();
  sub_10016A508(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
  sub_100074B70();
  static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)();
  sub_10000C970(v17, v18);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v21 = v52;
  unint64_t v20 = v53;
  v19(v16, v11);
  uint64_t v22 = 0;
  switch(v20 >> 62)
  {
    case 1uLL:
      LODWORD(v22)  = HIDWORD(v21) - v21;
      if (__OFSUB__(HIDWORD(v21), v21)) {
        goto LABEL_26;
      }
      uint64_t v22 = (int)v22;
LABEL_11:
      uint64_t v26 = qword_100480860;
      if ((unsigned __int128)(qword_100480860 * (__int128)6) >> 64 != (6 * qword_100480860) >> 63) {
        goto LABEL_24;
      }
      if (v22 != 6 * qword_100480860)
      {
        uint64_t v29 = sub_100010BCC(&qword_100480908);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v49, 1, 1, v29);
        return sub_10000C970(v21, v20);
      }
      int64_t v27 = 0;
      int64_t v28 = 0;
      switch(v20 >> 62)
      {
        case 1uLL:
          int64_t v28 = (int)v21;
          int64_t v27 = v21 >> 32;
          break;
        case 2uLL:
          int64_t v28 = *(void *)(v21 + 16);
          int64_t v27 = *(void *)(v21 + 24);
          break;
        case 3uLL:
          break;
        default:
          int64_t v28 = 0;
          int64_t v27 = BYTE6(v20);
          break;
      }
      if (!qword_100480860) {
        goto LABEL_25;
      }
      sub_100013D44(v21, v20);
      unint64_t v30 = (char *)sub_10017571C(v28, v27, v26, v21, v20);
      sub_10000C970(v21, v20);
      uint64_t v31 = v30;
      if (*((void *)v30 + 2) == 6)
      {
        char v32 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
        unint64_t v33 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        unint64_t v47 = v30;
        uint64_t v34 = &v30[v33];
        uint64_t v35 = v49;
        v32(v49, &v31[v33], v11);
        uint64_t v36 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
        uint64_t v37 = *(void *)(v12 + 72);
        v32(v35 + v36[5], &v34[v37], v11);
        uint64_t v38 = v35 + v36[6];
        uint64_t v45 = 2 * v37;
        v32(v38, &v34[2 * v37], v11);
        uint64_t v39 = v35 + v36[7];
        uint64_t v40 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
        uint64_t v46 = sub_100010BCC(&qword_100480908);
        uint64_t v41 = v35 + *(int *)(v46 + 48);
        v32(v41, &v34[v45 + v37], v11);
        v32(v41 + v36[5], &v34[4 * v37], v11);
        v32(v41 + v36[6], &v34[5 * v37], v11);
        sub_10000C970(v21, v20);
        swift_bridgeObjectRelease();
        sub_1000136F4(v48, v41 + v36[7], &qword_1004808F8);
        return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v46 - 8) + 56))(v49, 0, 1);
      }
      uint64_t v43 = sub_100010BCC(&qword_100480908);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v49, 1, 1, v43);
      swift_bridgeObjectRelease();
      return sub_10000C970(v21, v20);
    case 2uLL:
      uint64_t v24 = *(void *)(v21 + 16);
      uint64_t v23 = *(void *)(v21 + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_11;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v22 = BYTE6(v20);
      goto LABEL_11;
  }
}

uint64_t sub_10015D558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 80)  = 0;
  *(unsigned char *)(v3 + 88)  = 1;
  *(void *)(v3 + 96)  = 0;
  *(void *)(v3 + 104)  = 0;
  *(void *)(v3 + 16)  = &_swiftEmptyDictionarySingleton;
  *(void *)(v3 + 24)  = a1;
  *(void *)(v3 + 32)  = a2;
  uint64_t v6 = (void *)(v3 + 40);
  sub_1000136F4(a3, (uint64_t)v6, &qword_100481058);
  if (*(void *)(v4 + 32))
  {
    uint64_t v7 = *(void *)(v4 + 64);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 72);
      sub_1000369C4(v6, *(void *)(v4 + 64));
      uint64_t v9 = swift_allocObject();
      swift_weakInit();
      uint64_t v10 = *(uint64_t (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v8 + 8);
      swift_retain();
      uint64_t v11 = v10(sub_10017AADC, v9, v7, v8);
      swift_release();
      sub_1000380B4(a3, &qword_100481058);
      swift_release();
    }
    else
    {
      sub_1000380B4(a3, &qword_100481058);
      uint64_t v11 = 0;
    }
    *(void *)(v4 + 80)  = v11;
    *(unsigned char *)(v4 + 88)  = v7 == 0;
  }
  else
  {
    sub_1000380B4(a3, &qword_100481058);
  }
  return v4;
}

uint64_t sub_10015D6B4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10015D7FC();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10015D718()
{
  uint64_t v1 = v0;
  if ((*(unsigned char *)(v0 + 88) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 80);
    sub_1000136F4(v1 + 40, (uint64_t)v6, &qword_100481058);
    uint64_t v3 = v7;
    if (v7)
    {
      uint64_t v4 = v8;
      sub_1000369C4(v6, v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v4);
      sub_100010754((uint64_t)v6);
    }
    else
    {
      sub_1000380B4((uint64_t)v6, &qword_100481058);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000380B4(v1 + 40, &qword_100481058);
  sub_100011E30(*(void *)(v1 + 96));
  return swift_deallocClassInstance();
}

uint64_t sub_10015D7FC()
{
  uint64_t v1 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100481048);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010BCC(&qword_100481050);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v53 - v12;
  uint64_t v14 = *(void *)(v0 + 32);
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_7:
    sub_1000380B4((uint64_t)v8, &qword_100481048);
    return 0;
  }
  uint64_t v62 = v1;
  uint64_t v63 = v11;
  uint64_t v60 = v3;
  uint64_t v61 = v4;
  uint64_t v15 = *(void **)(v0 + 24);
  sub_1000136F4(v0 + 40, (uint64_t)v65, &qword_100481058);
  uint64_t v16 = v66;
  unint64_t v57 = v13;
  uint64_t v58 = v0;
  if (v66)
  {
    unint64_t v56 = v15;
    uint64_t v17 = v67;
    sub_1000369C4(v65, v66);
    uint64_t v18 = *(int *)(v9 + 48);
    uint64_t v54 = *(uint64_t (**)(char *, void *, uint64_t, uint64_t, uint64_t))(v17 + 24);
    uint64_t v55 = v18;
    swift_bridgeObjectRetain();
    uint64_t v19 = v54(v8, v56, v14, v16, v17);
    uint64_t v13 = v57;
    uint64_t v0 = v58;
    *(void *)&v8[v55]  = v19;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    sub_100010754((uint64_t)v65);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000380B4((uint64_t)v65, &qword_100481058);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  uint64_t v21 = v61;
  if (v20 == 1) {
    goto LABEL_7;
  }
  uint64_t v22 = *(int *)(v9 + 48);
  sub_10006EC68((uint64_t)v8, (uint64_t)v13, &qword_100480930);
  uint64_t v23 = *(void *)&v8[v22];
  *(void *)&v13[v22]  = v23;
  uint64_t v24 = *(int *)(v9 + 48);
  uint64_t v25 = v63;
  sub_1000136F4((uint64_t)v13, v63, &qword_100480930);
  *(void *)(v25 + v24)  = v23;
  swift_retain();
  uint64_t v26 = swift_bridgeObjectRetain();
  int64_t v27 = sub_1001751C4(v26, v0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000380B4(v25, &qword_100480930);
  uint64_t v28 = v27[2];
  if (!v28)
  {
LABEL_25:
    sub_1000380B4((uint64_t)v13, &qword_100481050);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v29 = v62;
  uint64_t v30 = (uint64_t)v27 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
  uint64_t v31 = (void *)(v0 + 16);
  swift_beginAccess();
  uint64_t v32 = *(void *)(v29 + 72);
  uint64_t v62 = *(void *)(v59 + 16);
  uint64_t v63 = v59 + 16;
  unint64_t v33 = (void (**)(char *, uint64_t))(v59 + 8);
  unint64_t v56 = v27;
  swift_bridgeObjectRetain();
  uint64_t v34 = (uint64_t)v60;
  do
  {
    ((void (*)(char *, uint64_t, uint64_t))v62)(v6, v30, v21);
    sub_10016A42C(v30, v34, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = (void *)*v31;
    uint64_t v36 = v64;
    *uint64_t v31 = 0x8000000000000000;
    unint64_t v38 = sub_1000316CC((uint64_t)v6);
    uint64_t v39 = v36[2];
    BOOL v40 = (v37 & 1) == 0;
    uint64_t v41 = v39 + v40;
    if (__OFADD__(v39, v40))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v42 = v37;
    if (v36[3] >= v41)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100171B04();
      }
    }
    else
    {
      sub_10016CB54(v41, isUniquelyReferenced_nonNull_native);
      unint64_t v43 = sub_1000316CC((uint64_t)v6);
      if ((v42 & 1) != (v44 & 1)) {
        goto LABEL_30;
      }
      unint64_t v38 = v43;
    }
    uint64_t v21 = v61;
    uint64_t v45 = v64;
    if (v42)
    {
      uint64_t v34 = (uint64_t)v60;
      sub_10017AA1C((uint64_t)v60, v64[7] + v38 * v32);
    }
    else
    {
      v64[(v38 >> 6) + 8] |= 1 << v38;
      ((void (*)(unint64_t, char *, uint64_t))v62)(v45[6] + *(void *)(v59 + 72) * v38, v6, v21);
      uint64_t v34 = (uint64_t)v60;
      sub_100175E94((uint64_t)v60, v45[7] + v38 * v32, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v46 = v45[2];
      BOOL v47 = __OFADD__(v46, 1);
      uint64_t v48 = v46 + 1;
      if (v47) {
        goto LABEL_29;
      }
      v45[2]  = v48;
      uint64_t v45 = v64;
    }
    *uint64_t v31 = v45;
    swift_bridgeObjectRelease();
    (*v33)(v6, v21);
    v30 += v32;
    --v28;
  }
  while (v28);
  swift_endAccess();
  uint64_t v49 = v56;
  swift_bridgeObjectRelease();
  uint64_t v13 = v57;
  if (!v49[2]) {
    goto LABEL_25;
  }
  uint64_t v50 = *(void (**)(uint64_t))(v58 + 96);
  if (v50)
  {
    uint64_t v51 = swift_retain();
    v50(v51);
    sub_100011E30((uint64_t)v50);
  }
  sub_1000380B4((uint64_t)v13, &qword_100481050);
  return (uint64_t)v49;
}

uint64_t sub_10015DE7C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v23 - v9;
  swift_beginAccess();
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_100156AC4(v11, a1, (uint64_t)v8);
  uint64_t v12 = v3;
  swift_bridgeObjectRelease();
  int64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v27(v8, 1, v3) == 1)
  {
    uint64_t v26 = v4;
    uint64_t v13 = sub_10015D7FC();
    if (v13)
    {
      uint64_t v24 = v3;
      uint64_t v25 = v13;
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = v25 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
        uint64_t v16 = *(void *)(v26 + 72);
        while (1)
        {
          sub_10016A42C(v15, (uint64_t)v6, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          if (a1(v6)) {
            break;
          }
          sub_10016A550((uint64_t)v6, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v15 += v16;
          if (!--v14) {
            goto LABEL_7;
          }
        }
        sub_100175E94((uint64_t)v6, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
        uint64_t v18 = v10;
        uint64_t v19 = 0;
      }
      else
      {
LABEL_7:
        uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
        uint64_t v18 = v10;
        uint64_t v19 = 1;
      }
      uint64_t v12 = v24;
      v17(v18, v19, 1, v24);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v17(v10, 1, 1, v3);
    }
    uint64_t v20 = v28;
    sub_1000380B4((uint64_t)v8, &qword_1004808F8);
  }
  else
  {
    sub_100175E94((uint64_t)v8, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v17(v10, 0, 1, v3);
    uint64_t v20 = v28;
  }
  if (v27(v10, 1, v12) == 1)
  {
    sub_1000380B4((uint64_t)v10, &qword_1004808F8);
    uint64_t v21 = 1;
  }
  else
  {
    sub_100175E94((uint64_t)v10, v20, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v21 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v20, v21, 1, v12);
}

uint64_t sub_10015E21C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v10[5] = v1;
  swift_beginAccess();
  v10[1]  = *(void *)(v1 + 16);
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_100481038);
  sub_10000F9CC(&qword_100481040, &qword_100481038);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10015E41C()
{
  swift_beginAccess();
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._uint64_t countAndFlagsBits = 0x7365636976656420;
  v0._object  = (void *)0xE800000000000000;
  String.append(_:)(v0);
  return v2;
}

uint64_t sub_10015E4A0()
{
  return sub_10015E21C();
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24)) + 96);
  sub_100037FF4(v1);
  return v1;
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24));
  uint64_t v6 = *(void *)(v5 + 96);
  *(void *)(v5 + 96)  = a1;
  *(void *)(v5 + 104)  = a2;

  return sub_100011E30(v6);
}

uint64_t (*LongTermPairingKeys.updatedPairedDevicesHandler.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24));
  a1[2]  = v3;
  uint64_t v4 = *(void *)(v3 + 96);
  uint64_t v5 = *(void *)(v3 + 104);
  *a1  = v4;
  a1[1]  = v5;
  sub_100037FF4(v4);
  return sub_10015E5B8;
}

uint64_t sub_10015E5B8(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 96);
  *(void *)(v2 + 96)  = *a1;
  *(void *)(v2 + 104)  = v3;
  if (a2)
  {
    sub_100037FF4(v4);
    sub_100011E30(v5);
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v5;
  }

  return sub_100011E30(v6);
}

uint64_t sub_10015E62C()
{
  uint64_t result = sub_10011A478(0xD000000000000017, 0x80000001003DC7D0);
  qword_100480878  = result;
  unk_100480880  = v1;
  return result;
}

uint64_t LongTermPairingKeys.authenticationToken(using:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 20);
  uint64_t v9 = v8 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v10 = sub_100175AF0(v9, (uint64_t)v7, a2 & 0xFFFFFFFFFFFFLL);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t LongTermPairingKeys.authenticationRequest(forPeer:with:using:on:myServiceSpecificInfo:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t a1)@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v150 = a5;
  unint64_t v154 = a4;
  uint64_t v159 = a3;
  unint64_t v165 = a1;
  uint64_t v169 = a6;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v170 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  Class v158 = (char *)&v131 - v10;
  __chkstk_darwin();
  char v149 = (char *)&v131 - v11;
  __chkstk_darwin();
  uint64_t v145 = (char *)&v131 - v12;
  sub_100010BCC(&qword_1004808E0);
  __chkstk_darwin();
  uint64_t v155 = (uint64_t)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100010BCC(&qword_1004808E8);
  __chkstk_darwin();
  uint64_t v146 = (uint64_t)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  uint64_t v151 = (uint64_t)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v148 = (uint64_t)&v131 - v16;
  sub_100010BCC(&qword_1004808F0);
  __chkstk_darwin();
  *(void *)&long long v157 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SharedSecret();
  uint64_t v160 = *(void *)(v18 - 8);
  uint64_t v161 = v18;
  __chkstk_darwin();
  uint64_t v156 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  uint64_t v153 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v131 - v21;
  uint64_t v23 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v163 = *(void *)(v23 - 8);
  uint64_t v164 = v23;
  __chkstk_darwin();
  uint64_t v162 = (uint64_t)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v131 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin();
  long long v152 = (char *)&v131 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v166 = (char *)&v131 - v30;
  uint64_t v31 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  unint64_t v33 = (char *)&v131 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a2;
  sub_10007FCA4(a2, (uint64_t)v33);
  uint64_t v35 = (uint64_t *)&v33[*(int *)(v31 + 28)];
  unint64_t v36 = v35[1];
  uint64_t v167 = *v35;
  sub_100038004(v167, v36);
  sub_10016A550((uint64_t)v33, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  unint64_t v168 = v36;
  unint64_t v37 = v36 >> 60;
  uint64_t v39 = v170;
  uint64_t v38 = v171;
  if (v37 > 0xE)
  {
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v9, v38, v7);
    BOOL v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      char v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Authentication request generation failed because no authentication token found", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
    goto LABEL_7;
  }
  uint64_t v144 = v7;
  sub_10007FCA4(v34, (uint64_t)v33);
  sub_1000136F4((uint64_t)&v33[*(int *)(v31 + 24)], (uint64_t)v26, (uint64_t *)&unk_1004852B0);
  sub_10016A550((uint64_t)v33, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    sub_10000C95C(v167, v168);
    sub_1000380B4((uint64_t)v26, (uint64_t *)&unk_1004852B0);
    uint64_t v7 = v144;
    uint64_t v39 = v170;
    uint64_t v38 = v171;
    goto LABEL_4;
  }
  uint64_t v45 = v28;
  uint64_t v46 = v27;
  unint64_t v47 = v165;
  unint64_t v143 = v165 >> 40;
  unint64_t v48 = HIDWORD(v165);
  unint64_t v49 = v165 >> 24;
  unint64_t v50 = v165 >> 16;
  unint64_t v51 = v165 >> 8;
  uint64_t v52 = v166;
  uint64_t v53 = v26;
  uint64_t v54 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v166, v53, v46);
  uint64_t v55 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v142 = &v131;
  uint64_t v137 = v55;
  __chkstk_darwin();
  *(&v131 - 4)  = (uint64_t)v52;
  char v56 = v143;
  *((unsigned char *)&v131 - 24)  = v47;
  unint64_t v138 = v51;
  *((unsigned char *)&v131 - 23)  = BYTE1(v47);
  unint64_t v139 = v50;
  *((unsigned char *)&v131 - 22)  = BYTE2(v47);
  unint64_t v140 = v49;
  *((unsigned char *)&v131 - 21)  = BYTE3(v47);
  unint64_t v141 = v48;
  *((unsigned char *)&v131 - 20)  = BYTE4(v47);
  *((unsigned char *)&v131 - 19)  = v56;
  unint64_t v57 = v168;
  *(&v131 - 2)  = v167;
  *(&v131 - 1)  = v57;
  sub_10015DE7C((uint64_t (*)(char *))sub_100175E7C, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v22, 1, v164) == 1)
  {
    sub_1000380B4((uint64_t)v22, &qword_1004808F8);
    uint64_t v58 = v170;
    uint64_t v59 = v158;
    uint64_t v60 = v144;
    (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v158, v171, v144);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    unint64_t v64 = v166;
    if (v63)
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Authentication request generation failed because no paired device matches the authentication token", v65, 2u);
      unint64_t v64 = v166;
      swift_slowDealloc();
    }
    sub_10000C95C(v167, v168);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v64, v54);
  }
  else
  {
    uint64_t v66 = v54;
    uint64_t v67 = v45;
    uint64_t v68 = (uint64_t)v22;
    uint64_t v69 = v162;
    sub_100175E94(v68, v162, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    uint64_t v70 = v157;
    uint64_t v71 = (uint64_t)v166;
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    uint64_t v73 = v160;
    uint64_t v72 = v161;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v160 + 56))(v70, 0, 1, v161);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v70, 1, v72) == 1)
    {
      sub_10016A550(v69, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      sub_10000C95C(v167, v168);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v71, v66);
      sub_1000380B4(v70, &qword_1004808F0);
    }
    else
    {
      char v74 = v154;
      Class v158 = (char *)(v154 >> 40);
      uint64_t v142 = (uint64_t *)HIDWORD(v154);
      unint64_t v136 = v154 >> 24;
      unint64_t v135 = v154 >> 16;
      unint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      unint64_t v134 = v154 >> 8;
      v75(v156, v70, v72);
      uint64_t v76 = v152;
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v77 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      uint64_t v78 = v66;
      unint64_t v80 = v79;
      unint64_t v81 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      uint64_t v133 = v78;
      long long v152 = (char *)(v67 + 8);
      uint64_t v132 = v81;
      v81((uint64_t)v76, v78);
      uint64_t v82 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v84 = v83;
      uint64_t v172 = v77;
      unint64_t v173 = v80;
      sub_100013D44(v77, v80);
      sub_100125FAC(v82, v84);
      sub_10000C970(v82, v84);
      sub_10000C970(v77, v80);
      uint64_t v85 = v172;
      unint64_t v86 = v173;
      SharedSecret.withUnsafeBytes<A>(_:)();
      uint64_t v87 = v174;
      unint64_t v88 = v175;
      uint64_t v174 = v85;
      unint64_t v175 = v86;
      sub_100013D44(v85, v86);
      sub_100013D44(v87, v88);
      sub_100125FAC(v87, v88);
      sub_10000C970(v87, v88);
      sub_10000C970(v87, v88);
      sub_10000C970(v85, v86);
      uint64_t v89 = v174;
      unint64_t v90 = v175;
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v91 = swift_allocObject();
      long long v157 = xmmword_1003B2F40;
      *(_OWORD *)(v91 + 16)  = xmmword_1003B2F40;
      *(unsigned char *)(v91 + 32)  = v74;
      *(unsigned char *)(v91 + 33)  = v134;
      *(unsigned char *)(v91 + 34)  = v135;
      *(unsigned char *)(v91 + 35)  = v136;
      *(unsigned char *)(v91 + 36)  = (_BYTE)v142;
      *(unsigned char *)(v91 + 37)  = (_BYTE)v158;
      uint64_t v92 = sub_1001265EC(v91);
      unint64_t v94 = v93;
      swift_bridgeObjectRelease();
      uint64_t v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16)  = v157;
      *(unsigned char *)(v95 + 32)  = v165;
      *(unsigned char *)(v95 + 33)  = v138;
      *(unsigned char *)(v95 + 34)  = v139;
      *(unsigned char *)(v95 + 35)  = v140;
      *(unsigned char *)(v95 + 36)  = v141;
      *(unsigned char *)(v95 + 37)  = v143;
      uint64_t v96 = sub_1001265EC(v95);
      unint64_t v98 = v97;
      swift_bridgeObjectRelease();
      uint64_t v172 = v92;
      unint64_t v173 = v94;
      sub_100013D44(v92, v94);
      sub_100125FAC(v96, v98);
      uint64_t v99 = v96;
      uint64_t v100 = v162;
      sub_10000C970(v99, v98);
      sub_10000C970(v92, v94);
      uint64_t v101 = v172;
      unint64_t v102 = v173;
      uint64_t v103 = v153;
      sub_10016A42C(v100, v153, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v163 + 56))(v103, 0, 1, v164);
      uint64_t v104 = v155;
      sub_10015CF14(v89, v90, v101, v102, v103, v155);
      sub_10000C970(v101, v102);
      sub_10000C970(v89, v90);
      sub_1000380B4(v103, &qword_1004808F8);
      uint64_t v105 = sub_100010BCC(&qword_100480908);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 48))(v104, 1, v105) == 1)
      {
        sub_1000380B4(v104, &qword_1004808E0);
        uint64_t v106 = v170;
        unint64_t v107 = v149;
        uint64_t v108 = v144;
        (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v149, v171, v144);
        __n128 v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v111 = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Authentication request generation failed because authentication key derivation failed", v111, 2u);
          swift_slowDealloc();
        }
        sub_10000C95C(v167, v168);

        (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
      }
      else
      {
        uint64_t v112 = v104 + *(int *)(v105 + 48);
        uint64_t v113 = v147;
        uint64_t v114 = v146;
        uint64_t v115 = v146 + *(int *)(v147 + 48);
        sub_100175E94(v104, v146, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_100175E94(v112, v115, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        uint64_t v116 = v114 + *(int *)(v113 + 48);
        uint64_t v117 = v148;
        sub_100175E94(v114, v148, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        uint64_t v118 = v151;
        sub_100175E94(v116, v151, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        uint64_t v119 = v171;
        uint64_t v120 = sub_10015AB58(v171 + *(int *)(v137 + 20), v159, v71, v150);
        if (v120)
        {
          uint64_t v121 = v120;
          sub_10000C95C(v167, v168);
          sub_10016A550(v117, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
          sub_10016A550(v100, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v132(v71, v133);
          uint64_t v122 = sub_100010BCC(&qword_100480900);
          uint64_t v123 = *(int *)(v122 + 48);
          uint64_t v124 = v169;
          sub_100175E94(v118, v169, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          *(void *)(v124 + v123)  = v121;
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v124, 0, 1, v122);
        }
        uint64_t v125 = v170;
        uint64_t v126 = v145;
        uint64_t v127 = v144;
        (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v145, v119, v144);
        uint64_t v128 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v128, v129))
        {
          unint64_t v130 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v130 = 0;
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "Authentication request generation failed because encrypting the request failed", v130, 2u);
          swift_slowDealloc();
        }
        sub_10000C95C(v167, v168);

        (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
        sub_10016A550(v118, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_10016A550(v117, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
      }
      (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
      sub_10016A550(v100, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v132((uint64_t)v166, v133);
    }
  }
LABEL_7:
  uint64_t v43 = sub_100010BCC(&qword_100480900);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v169, 1, 1, v43);
}

unint64_t sub_10015F968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for LongTermPairingKeys.Identity(0);
  uint64_t v11 = sub_100175AF0(a1 + *(int *)(v10 + 20), a2, a3 & 0xFFFFFFFFFFFFLL);
  unint64_t v13 = v12;
  LOBYTE(a5)  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v12, a4, a5);
  sub_10000C970(v11, v13);
  return a5 & 1;
}

uint64_t LongTermPairingKeys.authenticationResponse(forPeer:with:using:on:myServiceSpecificInfo:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1), unint64_t a4, uint64_t a5)
{
  uint64_t v205 = a5;
  v225  = a1;
  v226  = a4;
  v237  = a3;
  uint64_t v6 = type metadata accessor for Logger();
  v238  = *(void *)(v6 - 8);
  v239  = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v234  = (unint64_t)&v182 - v9;
  __chkstk_darwin();
  v232  = (char *)&v182 - v10;
  __chkstk_darwin();
  v222  = (char *)&v182 - v11;
  __chkstk_darwin();
  v212  = (char *)&v182 - v12;
  __chkstk_darwin();
  uint64_t v207 = (char *)&v182 - v13;
  __chkstk_darwin();
  uint64_t v206 = (char *)&v182 - v14;
  __chkstk_darwin();
  id v204 = (char *)&v182 - v15;
  uint64_t v202 = type metadata accessor for AES.GCM.SealedBox();
  v201  = *(void *)(v202 - 8);
  __chkstk_darwin();
  char v203 = (char *)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v229  = *(void *)(v17 - 8);
  v230  = v17;
  __chkstk_darwin();
  uint64_t v208 = (uint64_t)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480910);
  __chkstk_darwin();
  v221  = (char *)&v182 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211  = sub_100010BCC(&qword_100480918);
  __chkstk_darwin();
  v209  = (char *)&v182 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216  = type metadata accessor for P256.Signing.ECDSASignature();
  v215  = *(void *)(v216 - 8);
  __chkstk_darwin();
  v214  = (char *)&v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218  = type metadata accessor for UUID();
  v217  = *(void *)(v218 - 8);
  __chkstk_darwin();
  v213  = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  v210  = (uint64_t)&v182 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v223  = (char *)&v182 - v24;
  sub_100010BCC(&qword_1004808E0);
  __chkstk_darwin();
  v224  = (char *)&v182 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220  = sub_100010BCC(&qword_1004808E8);
  __chkstk_darwin();
  v219  = (uint64_t)&v182 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  v227  = (uint64_t)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v228  = (uint64_t)&v182 - v28;
  sub_100010BCC(&qword_1004808F0);
  __chkstk_darwin();
  v233  = (char *)&v182 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SharedSecret();
  uint64_t v31 = *(void *)(v30 - 8);
  v235  = v30;
  v236  = v31;
  __chkstk_darwin();
  v231  = (char *)&v182 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v182 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  unint64_t v37 = (char *)&v182 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin();
  os_log_type_t v41 = (char *)&v182 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v43 = (char *)&v182 - v42;
  sub_10007FCA4(a2, (uint64_t)v35);
  sub_1000136F4((uint64_t)&v35[*(int *)(v33 + 24)], (uint64_t)v37, (uint64_t *)&unk_1004852B0);
  sub_10016A550((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1)
  {
    sub_1000380B4((uint64_t)v37, (uint64_t *)&unk_1004852B0);
    uint64_t v45 = v238;
    uint64_t v44 = v239;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v8, v240, v239);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Authentication response generation failed because no public key found", v48, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v44);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v37, v38);
  sub_10007FCA4(a2, (uint64_t)v35);
  unint64_t v49 = (uint64_t *)&v35[*(int *)(v33 + 32)];
  uint64_t v51 = *v49;
  unint64_t v50 = v49[1];
  sub_100038004(*v49, v50);
  sub_10016A550((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v50 >> 60 == 15)
  {
    uint64_t v52 = v38;
    uint64_t v53 = v238;
    uint64_t v54 = v239;
    unint64_t v55 = v234;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v238 + 16))(v234, v240, v239);
    char v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Authentication response generation failed because no encrypted signature found", v58, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unint64_t, uint64_t))(v53 + 8))(v55, v54);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v52);
    return 0;
  }
  v198  = v38;
  uint64_t v199 = v51;
  v234  = v50;
  uint64_t v59 = (uint64_t)v233;
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
  uint64_t v196 = v35;
  uint64_t v195 = v33;
  uint64_t v197 = a2;
  uint64_t v61 = v235;
  uint64_t v60 = v236;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v236 + 56))(v59, 0, 1, v235);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v59, 1, v61) == 1)
  {
    os_log_type_t v62 = v43;
    uint64_t v63 = v198;
    sub_1000380B4(v59, &qword_1004808F0);
    uint64_t v65 = v238;
    uint64_t v64 = v239;
    uint64_t v66 = v232;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v232, v240, v239);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Authentication response generation failed because shared secret derivation failed", v69, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v62, v63);
    return 0;
  }
  char v72 = v226;
  unint64_t v194 = v226 >> 40;
  unint64_t v193 = HIDWORD(v226);
  unint64_t v192 = v226 >> 24;
  unint64_t v191 = v226 >> 16;
  unint64_t v190 = v226 >> 8;
  char v73 = v225;
  unint64_t v189 = v225 >> 40;
  unint64_t v188 = HIDWORD(v225);
  unint64_t v187 = v225 >> 24;
  unint64_t v186 = v225 >> 16;
  char v74 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
  unint64_t v185 = v225 >> 8;
  v74(v231, v59, v61);
  v233  = v43;
  uint64_t v75 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v77 = v76;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v78 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  uint64_t v79 = v39;
  unint64_t v81 = v80;
  uint64_t v82 = *(void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v83 = v198;
  v232  = (char *)(v79 + 8);
  v183  = v82;
  v82(v41, v198);
  v241  = v75;
  v242  = v77;
  sub_100013D44(v75, v77);
  sub_100013D44(v78, v81);
  sub_100125FAC(v78, v81);
  sub_10000C970(v78, v81);
  sub_10000C970(v78, v81);
  sub_10000C970(v75, v77);
  uint64_t v84 = v241;
  unint64_t v85 = v242;
  SharedSecret.withUnsafeBytes<A>(_:)();
  v182  = 0;
  uint64_t v86 = v243;
  unint64_t v87 = v244;
  v243  = v84;
  v244  = v85;
  sub_100013D44(v84, v85);
  sub_100013D44(v86, v87);
  sub_100125FAC(v86, v87);
  sub_10000C970(v86, v87);
  sub_10000C970(v86, v87);
  sub_10000C970(v84, v85);
  uint64_t v88 = v243;
  unint64_t v89 = v244;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v90 = swift_allocObject();
  long long v184 = xmmword_1003B2F40;
  *(_OWORD *)(v90 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v90 + 32)  = v73;
  *(unsigned char *)(v90 + 33)  = v185;
  *(unsigned char *)(v90 + 34)  = v186;
  *(unsigned char *)(v90 + 35)  = v187;
  *(unsigned char *)(v90 + 36)  = v188;
  *(unsigned char *)(v90 + 37)  = v189;
  uint64_t v91 = sub_1001265EC(v90);
  unint64_t v93 = v92;
  swift_bridgeObjectRelease();
  uint64_t v94 = swift_allocObject();
  *(_OWORD *)(v94 + 16)  = v184;
  *(unsigned char *)(v94 + 32)  = v72;
  *(unsigned char *)(v94 + 33)  = v190;
  *(unsigned char *)(v94 + 34)  = v191;
  *(unsigned char *)(v94 + 35)  = v192;
  *(unsigned char *)(v94 + 36)  = v193;
  *(unsigned char *)(v94 + 37)  = v194;
  uint64_t v95 = sub_1001265EC(v94);
  unint64_t v97 = v96;
  swift_bridgeObjectRelease();
  v241  = v91;
  v242  = v93;
  sub_100013D44(v91, v93);
  sub_100125FAC(v95, v97);
  sub_10000C970(v95, v97);
  sub_10000C970(v91, v93);
  uint64_t v98 = v241;
  unint64_t v99 = v242;
  uint64_t v100 = (uint64_t)v223;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v223, 1, 1, v230);
  uint64_t v101 = (uint64_t)v224;
  sub_10015CF14(v88, v89, v98, v99, v100, (uint64_t)v224);
  sub_10000C970(v98, v99);
  sub_10000C970(v88, v89);
  sub_1000380B4(v100, &qword_1004808F8);
  uint64_t v102 = sub_100010BCC(&qword_100480908);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 48))(v101, 1, v102) == 1)
  {
    uint64_t v103 = v83;
    sub_1000380B4(v101, &qword_1004808E0);
    uint64_t v104 = v238;
    uint64_t v105 = v239;
    uint64_t v106 = v222;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v222, v240, v239);
    unint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v107, v108))
    {
      __n128 v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__n128 v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Authentication response generation failed because authentication key derivation failed", v109, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v105);
LABEL_23:
    (*(void (**)(char *, uint64_t))(v236 + 8))(v231, v235);
    v183(v233, v103);
    return 0;
  }
  uint64_t v110 = v101 + *(int *)(v102 + 48);
  uint64_t v111 = v220;
  uint64_t v112 = v219;
  uint64_t v113 = v219 + *(int *)(v220 + 48);
  sub_100175E94(v101, v219, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100175E94(v110, v113, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  uint64_t v114 = v112 + *(int *)(v111 + 48);
  sub_100175E94(v112, v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100175E94(v114, v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  uint64_t v115 = v221;
  sub_10015BE10(v199, v234, v221);
  uint64_t v116 = sub_100010BCC(&qword_100480920);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v116 - 8) + 48))(v115, 1, v116) == 1)
  {
    uint64_t v103 = v83;
    sub_1000380B4((uint64_t)v115, &qword_100480910);
    uint64_t v117 = v238;
    uint64_t v118 = v239;
    uint64_t v119 = v212;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v212, v240, v239);
    uint64_t v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v122 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "Authentication response generation failed because authentication request parsing failed", v122, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v118);
    sub_10016A550(v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_10016A550(v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    goto LABEL_23;
  }
  v224  = &v115[*(int *)(v116 + 48)];
  uint64_t v123 = (unint64_t *)&v115[*(int *)(v116 + 64)];
  unint64_t v124 = *v123;
  v225  = v123[1];
  v226  = v124;
  uint64_t v125 = v211;
  uint64_t v126 = v209;
  uint64_t v127 = &v209[*(int *)(v211 + 48)];
  uint64_t v128 = (unint64_t *)&v209[*(int *)(v211 + 64)];
  os_log_type_t v129 = *(void (**)(char *, char *, uint64_t))(v217 + 32);
  uint64_t v130 = v218;
  v129(v209, v115, v218);
  uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v215 + 32);
  uint64_t v132 = v216;
  v131(v127, v224, v216);
  unint64_t v133 = v225;
  *uint64_t v128 = v226;
  v128[1]  = v133;
  unint64_t v134 = &v126[*(int *)(v125 + 48)];
  unint64_t v135 = (unint64_t *)&v126[*(int *)(v125 + 64)];
  unint64_t v136 = *v135;
  v225  = v135[1];
  v226  = v136;
  uint64_t v137 = (uint64_t)v213;
  v129(v213, v126, v130);
  uint64_t v138 = (uint64_t)v214;
  v131(v214, v134, v132);
  uint64_t v139 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v140 = v240;
  __chkstk_darwin();
  *(&v182 - 2)  = v137;
  uint64_t v141 = v210;
  sub_10015DE7C((uint64_t (*)(char *))sub_100175EFC, v210);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v229 + 48))(v141, 1, v230) == 1)
  {
    unint64_t v143 = v225;
    uint64_t v142 = v226;
    uint64_t v144 = v198;
    sub_1000380B4(v141, &qword_1004808F8);
    uint64_t v145 = v238;
    uint64_t v146 = v239;
    uint64_t v147 = v207;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v207, v140, v239);
    uint64_t v148 = Logger.logObject.getter();
    os_log_type_t v149 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v148, v149))
    {
      uint64_t v150 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v150 = 0;
      _os_log_impl((void *)&_mh_execute_header, v148, v149, "Authentication response generation failed because no paired device matches the authentication request", v150, 2u);
      swift_slowDealloc();
    }
    sub_10000C970(v142, v143);
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v147, v146);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v214, v216);
    sub_10016A550(v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_10016A550(v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v236 + 8))(v231, v235);
    v183(v233, v144);
    (*(void (**)(char *, uint64_t))(v217 + 8))(v213, v218);
    return 0;
  }
  uint64_t v151 = v208;
  sub_100175E94(v141, v208, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  unint64_t v152 = v225;
  uint64_t v153 = v237;
  uint64_t v154 = (uint64_t)v233;
  if ((sub_10015CA4C(v137, v138, v226, v225, v151) & 1) == 0)
  {
    uint64_t v162 = v198;
    uint64_t v163 = v238;
    uint64_t v164 = v239;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v206, v240, v239);
    unint64_t v165 = Logger.logObject.getter();
    os_log_type_t v166 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v165, v166))
    {
      uint64_t v167 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v167 = 0;
      _os_log_impl((void *)&_mh_execute_header, v165, v166, "Authentication response generation failed because authentication request verification failed", v167, 2u);
      swift_slowDealloc();
    }
    sub_10000C970(v226, v152);
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v163 + 8))(v206, v164);
    sub_10016A550(v151, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v138, v216);
    sub_10016A550(v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_10016A550(v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v236 + 8))(v231, v235);
    v183(v233, v162);
    goto LABEL_38;
  }
  uint64_t v155 = v240;
  uint64_t v156 = sub_10015AB58(v240 + *(int *)(v139 + 20), v153, v154, v205);
  if (!v156)
  {
    unint64_t v168 = v152;
    uint64_t v169 = v238;
    uint64_t v170 = v239;
    uint64_t v171 = v204;
    (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v204, v155, v239);
    uint64_t v172 = Logger.logObject.getter();
    os_log_type_t v173 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v172, v173))
    {
      uint64_t v174 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v172, v173, "Authentication response generation failed because encrypting the response failed", v174, 2u);
      swift_slowDealloc();
    }
    sub_10000C970(v226, v168);
    sub_10000C95C(v199, v234);

    (*(void (**)(char *, uint64_t))(v169 + 8))(v171, v170);
    sub_10016A550(v151, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v214, v216);
    sub_10016A550(v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_10016A550(v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v236 + 8))(v231, v235);
    v183(v233, v198);
LABEL_38:
    (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v137, v218);
    return 0;
  }
  uint64_t v70 = v156;
  long long v157 = (char *)v154;
  uint64_t v158 = (uint64_t)v196;
  sub_10007FCA4(v197, (uint64_t)v196);
  uint64_t v159 = (uint64_t *)(v158 + *(int *)(v195 + 36));
  uint64_t v160 = *v159;
  unint64_t v161 = v159[1];
  sub_100038004(*v159, v161);
  sub_10016A550(v158, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v161 >> 60 != 15)
  {
    unint64_t v175 = v152;
    sub_100013D44(v160, v161);
    uint64_t v176 = v203;
    uint64_t v177 = v182;
    sub_10015A9D8(v160, v161);
    if (v177)
    {
      swift_errorRelease();
    }
    else
    {
      long long v178 = v176;
      uint64_t v179 = static AES.GCM.open(_:using:)();
      unint64_t v181 = v180;
      (*(void (**)(char *, uint64_t))(v201 + 8))(v178, v202);
      _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v179, v181);
      long long v157 = v233;
      uint64_t v137 = (uint64_t)v213;
    }
    unint64_t v152 = v175;
    sub_10000C95C(v160, v161);
  }
  sub_10000C970(v226, v152);
  sub_10000C95C(v199, v234);
  sub_10016A550(v151, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  (*(void (**)(char *, uint64_t))(v215 + 8))(v214, v216);
  sub_10016A550(v227, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_10016A550(v228, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v231, v235);
  v183(v157, v198);
  (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v137, v218);
  return v70;
}

uint64_t LongTermPairingKeys.verifyAuthenticationResponse(forPeer:with:publisherKeys:using:extraServiceSpecificInfo:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, void *a5)
{
  uint64_t v125 = a4;
  uint64_t v141 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v143 = *(void *)(v7 - 8);
  uint64_t v144 = v7;
  __chkstk_darwin();
  uint64_t v140 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v139 = (unint64_t)&v114 - v9;
  __chkstk_darwin();
  uint64_t v127 = (char *)&v114 - v10;
  __chkstk_darwin();
  uint64_t v126 = (char *)&v114 - v11;
  __chkstk_darwin();
  unint64_t v124 = (char *)&v114 - v12;
  uint64_t v122 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin();
  uint64_t v123 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480910);
  __chkstk_darwin();
  unint64_t v136 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100010BCC(&qword_100480918);
  __chkstk_darwin();
  uint64_t v128 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v133 = *(void *)(v135 - 8);
  __chkstk_darwin();
  uint64_t v130 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for UUID();
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v138 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v137 = *(void *)(v142 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  uint64_t v30 = a5;
  *a5  = 0;
  uint64_t v31 = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  sub_1000136F4((uint64_t)&a3[*(int *)(v31 + 28)], (uint64_t)v25, &qword_1004808F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_1000380B4((uint64_t)v25, &qword_1004808F8);
    uint64_t v33 = v143;
    uint64_t v32 = v144;
    uint64_t v34 = v140;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v140, v145, v144);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Authentication response verification failed because no paired device inforamtion was found", v37, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    return 0;
  }
  uint64_t v38 = v138;
  uint64_t v118 = v31;
  unint64_t v39 = v139;
  uint64_t v140 = a3;
  uint64_t v119 = v30;
  uint64_t v120 = v20;
  uint64_t v40 = v142;
  sub_100175E94((uint64_t)v25, (uint64_t)v29, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  uint64_t v41 = v141;
  sub_10007FCA4(v141, (uint64_t)v23);
  uint64_t v42 = (uint64_t *)&v23[*(int *)(v21 + 32)];
  uint64_t v44 = *v42;
  unint64_t v43 = v42[1];
  sub_100038004(*v42, v43);
  sub_10016A550((uint64_t)v23, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v45 = v145;
  if (v43 >> 60 == 15) {
    goto LABEL_8;
  }
  sub_10007FCA4(v41, (uint64_t)v23);
  uint64_t v116 = v21;
  sub_1000136F4((uint64_t)&v23[*(int *)(v21 + 24)], v38, (uint64_t *)&unk_1004852B0);
  uint64_t v117 = v23;
  sub_10016A550((uint64_t)v23, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v46 = v137;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v38, 1, v40) == 1)
  {
    sub_10000C95C(v44, v43);
    sub_1000380B4(v38, (uint64_t *)&unk_1004852B0);
LABEL_8:
    uint64_t v48 = v143;
    uint64_t v47 = v144;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v143 + 16))(v39, v45, v144);
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Authentication response verification failed because no encrypted signature or public key found", v51, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unint64_t, uint64_t))(v48 + 8))(v39, v47);
LABEL_11:
    uint64_t v52 = (uint64_t)v29;
LABEL_12:
    sub_10016A550(v52, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    return 0;
  }
  uint64_t v54 = v40;
  unint64_t v55 = v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v120, v38, v54);
  char v56 = v136;
  uint64_t v138 = v44;
  unint64_t v139 = v43;
  sub_10015BE10(v44, v43, v136);
  uint64_t v57 = sub_100010BCC(&qword_100480920);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57) == 1)
  {
    sub_1000380B4((uint64_t)v56, &qword_100480910);
    uint64_t v59 = v143;
    uint64_t v58 = v144;
    uint64_t v60 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v127, v45, v144);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Authentication response verification failed because authentication response parsing failed", v63, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v138, v139);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v58);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v55, v142);
    goto LABEL_11;
  }
  uint64_t v114 = &v56[*(int *)(v57 + 48)];
  uint64_t v64 = &v56[*(int *)(v57 + 64)];
  uint64_t v65 = *(void *)v64;
  uint64_t v115 = *((void *)v64 + 1);
  uint64_t v67 = v128;
  uint64_t v66 = v129;
  os_log_type_t v68 = &v128[*(int *)(v129 + 48)];
  uint64_t v69 = v56;
  uint64_t v70 = &v128[*(int *)(v129 + 64)];
  uint64_t v127 = v29;
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
  uint64_t v72 = v134;
  v71(v128, v69, v134);
  char v73 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
  char v74 = v68;
  uint64_t v75 = v135;
  v73(v74, v114, v135);
  uint64_t v76 = v115;
  *(void *)uint64_t v70 = v65;
  *((void *)v70 + 1)  = v76;
  unint64_t v77 = &v67[*(int *)(v66 + 48)];
  uint64_t v78 = (uint64_t *)&v67[*(int *)(v66 + 64)];
  uint64_t v79 = *v78;
  unint64_t v136 = (char *)v78[1];
  uint64_t v80 = (uint64_t)v131;
  v71(v131, v67, v72);
  uint64_t v81 = (uint64_t)v127;
  uint64_t v82 = (uint64_t)v130;
  v73(v130, v77, v75);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v90 = v79;
    uint64_t v91 = v136;
    uint64_t v93 = v143;
    uint64_t v92 = v144;
    uint64_t v94 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v126, v145, v144);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      unint64_t v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Authentication response verification failed because identifiers did not match", v97, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v138, v139);
    uint64_t v98 = v90;
    unint64_t v99 = (unint64_t)v91;
    goto LABEL_29;
  }
  uint64_t v83 = v136;
  uint64_t v84 = v79;
  if ((sub_10015CA4C(v80, v82, v79, (unint64_t)v136, v81) & 1) == 0)
  {
    uint64_t v93 = v143;
    uint64_t v92 = v144;
    uint64_t v94 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v124, v145, v144);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v100, "Authentication response verification failed", v101, 2u);
      swift_slowDealloc();
    }
    sub_10000C95C(v138, v139);
    uint64_t v98 = v84;
    unint64_t v99 = (unint64_t)v83;
LABEL_29:
    sub_10000C970(v98, v99);

    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v92);
    (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v82, v135);
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v80, v134);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v120, v142);
    uint64_t v52 = (uint64_t)v127;
    goto LABEL_12;
  }
  unint64_t v85 = v119;
  swift_bridgeObjectRelease();
  uint64_t v86 = (uint64_t)v117;
  sub_10007FCA4(v141, (uint64_t)v117);
  unint64_t v87 = (uint64_t *)(v86 + *(int *)(v116 + 36));
  uint64_t v89 = *v87;
  unint64_t v88 = v87[1];
  sub_100038004(*v87, v88);
  sub_10016A550(v86, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v88 >> 60 == 15)
  {
    sub_10000C95C(v138, v139);
    sub_10000C970(v84, (unint64_t)v83);
    uint64_t v103 = 0;
    uint64_t v104 = v137;
    uint64_t v106 = v134;
    uint64_t v105 = v135;
    uint64_t v108 = v132;
    uint64_t v107 = v133;
  }
  else
  {
    uint64_t v145 = v84;
    sub_100013D44(v89, v88);
    uint64_t v102 = v123;
    sub_10015A9D8(v89, v88);
    uint64_t v109 = static AES.GCM.open(_:using:)();
    uint64_t v110 = v102;
    uint64_t v108 = v132;
    unint64_t v112 = v111;
    uint64_t v113 = v109;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v110, v122);
    uint64_t v103 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v113, v112);
    sub_10000C95C(v138, v139);
    sub_10000C970(v145, (unint64_t)v83);
    sub_10000C95C(v89, v88);
    uint64_t v81 = (uint64_t)v127;
    uint64_t v104 = v137;
    uint64_t v106 = v134;
    uint64_t v105 = v135;
    uint64_t v107 = v133;
    uint64_t v80 = (uint64_t)v131;
  }
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v82, v105);
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v80, v106);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v120, v142);
  sub_10016A550(v81, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  *unint64_t v85 = v103;
  return 1;
}

uint64_t sub_100162574(uint64_t a1, uint64_t a2)
{
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100174A80(a1, (uint64_t)sub_100174DE8, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t sub_100162600(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)&long long v32 = a5;
  *((void *)&v32 + 1)  = a6;
  sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  uint64_t v16 = inited;
  *(_OWORD *)(inited + 16)  = xmmword_1003C1880;
  *(void *)(inited + 32)  = kSecAttrAccessGroup;
  *(void *)(inited + 40)  = a3;
  *(void *)(inited + 48)  = a4;
  *(void *)(inited + 64)  = &type metadata for String;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(unsigned char *)(inited + 80)  = a11 & 1;
  *(void *)(inited + 104)  = &type metadata for Bool;
  *(void *)(inited + 112)  = kSecAttrIsInvisible;
  *(unsigned char *)(inited + 120)  = 1;
  *(void *)(inited + 144)  = &type metadata for Bool;
  *(void *)(inited + 152)  = kSecAttrLabel;
  if (a11)
  {
    if (a11 == 1)
    {
      unint64_t v17 = 0xE600000000000000;
      uint64_t v18 = 0x63696C627570;
    }
    else
    {
      unint64_t v17 = 0xEC0000006C61636FLL;
      uint64_t v18 = 0x6C5F63696C627570;
    }
  }
  else
  {
    unint64_t v17 = 0xE700000000000000;
    uint64_t v18 = 0x65746176697270;
  }
  *(void *)(inited + 160)  = v18;
  *(void *)(inited + 168)  = v17;
  *(void *)(inited + 184)  = &type metadata for String;
  *(void *)(inited + 192)  = kSecAttrAccount;
  *(void *)(inited + 200)  = a9;
  *(void *)(inited + 208)  = a10;
  *(void *)(inited + 224)  = &type metadata for String;
  *(void *)(inited + 232)  = kSecAttrService;
  *(void *)(inited + 240)  = a7;
  *(void *)(inited + 248)  = a8;
  *(void *)(inited + 264)  = &type metadata for String;
  *(void *)(inited + 272)  = kSecValueData;
  *(void *)(inited + 304)  = &type metadata for Data;
  *(void *)(inited + 280)  = a1;
  *(void *)(inited + 288)  = a2;
  CFStringRef v19 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  CFStringRef v20 = (id)kSecAttrSynchronizable;
  CFStringRef v21 = (id)kSecAttrIsInvisible;
  CFStringRef v22 = (id)kSecAttrLabel;
  CFStringRef v23 = (id)kSecAttrAccount;
  swift_bridgeObjectRetain();
  CFStringRef v24 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  CFStringRef v25 = (id)kSecValueData;
  sub_100013D44(a1, a2);
  unint64_t result = sub_10001FD04(v16);
  unint64_t v27 = result;
  if (!a11)
  {
    type metadata accessor for CFString(0);
    unint64_t v37 = v29;
    *(void *)&long long v36 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_10003803C(&v36, v35);
    uint64_t v28 = (id)kSecAttrAccessible;
    CFStringRef v30 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    goto LABEL_10;
  }
  if (kSecAttrSyncViewHint)
  {
    unint64_t v37 = &type metadata for String;
    long long v36 = v32;
    sub_10003803C(&v36, v35);
    uint64_t v28 = (id)kSecAttrSyncViewHint;
    swift_bridgeObjectRetain();
LABEL_10:
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    sub_100034A54(v35, v28, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    return v27;
  }
  __break(1u);
  return result;
}

uint64_t AppleKeychain.init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Logger.init(subsystem:category:)();
  *(_DWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
  uint64_t v9 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *uint64_t v9 = &_swiftEmptySetSingleton;
  v9[1]  = 0;
  *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *uint64_t v10 = a1;
  v10[1]  = a2;
  uint64_t v11 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *uint64_t v11 = a3;
  v11[1]  = a4;
  return v4;
}

void sub_1001629AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors;
  swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  uint64_t v4 = (int *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  if (v3)
  {
    swift_beginAccess();
    if (!notify_is_valid_token(*v4))
    {
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v19[0]  = 0xD00000000000001FLL;
      v19[1]  = 0x80000001003DC750;
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
      uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v5;
      v7._object  = v6;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      int v8 = sub_10004ED04((uint64_t)sub_10017AA80, v1, 0xD00000000000001FLL, 0x80000001003DC750);
      swift_bridgeObjectRelease();
      if (v8)
      {
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          v19[0]  = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136315138;
          unint64_t v12 = sub_1002564D8(v8);
          sub_100010680(v12, v13, v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v14 = "Failed to start monitoring keychain updates with error: %s";
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v9, v10, v14, v11, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          goto LABEL_11;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
    swift_beginAccess();
    if (notify_is_valid_token(*v4))
    {
      uint32_t v15 = notify_cancel(*v4);
      *uint64_t v4 = -1;
      if (v15)
      {
        int v16 = v15;
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          v19[0]  = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136315138;
          unint64_t v17 = sub_1002564D8(v16);
          sub_100010680(v17, v18, v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v14 = "Failed to cancel monitoring keychain updates with error: %s";
          goto LABEL_10;
        }
LABEL_11:
      }
    }
  }
}

void sub_100162CC8(const char *a1@<X0>, uint64_t a2@<X1>, uint32_t *a3@<X8>)
{
  if (qword_10047C168 != -1) {
    swift_once();
  }
  uint64_t v6 = static OS_dispatch_queue.nan;
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  v11[4]  = sub_10017AAD4;
  v11[5]  = v7;
  v11[0]  = _NSConcreteStackBlock;
  v11[1]  = 1107296256;
  void v11[2] = sub_100163154;
  v11[3]  = &unk_10045DF60;
  int v8 = _Block_copy(v11);
  swift_release();
  uint64_t v9 = (int *)(a2 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  swift_beginAccess();
  uint32_t v10 = notify_register_dispatch(a1, v9, v6, v8);
  swift_endAccess();
  _Block_release(v8);
  *a3  = v10;
}

uint64_t sub_100162E28()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong  = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, Strong + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger, v0);
    swift_release();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received keychain updated notification", v7, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v9 = (uint64_t *)(result + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
  swift_beginAccess();
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v11 = v10 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v10 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_10;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v19 >= v15) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_30;
      }
      unint64_t v20 = *(void *)(v11 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v15) {
          goto LABEL_30;
        }
        unint64_t v20 = *(void *)(v11 + 8 * v16);
        if (!v20)
        {
          int64_t v16 = v19 + 3;
          if (v19 + 3 >= v15) {
            goto LABEL_30;
          }
          unint64_t v20 = *(void *)(v11 + 8 * v16);
          if (!v20)
          {
            int64_t v16 = v19 + 4;
            if (v19 + 4 >= v15) {
              goto LABEL_30;
            }
            unint64_t v20 = *(void *)(v11 + 8 * v16);
            if (!v20) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_10:
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v10 + 56) + 16 * v18))();
  }
  int64_t v21 = v19 + 5;
  if (v21 >= v15)
  {
LABEL_30:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v20 = *(void *)(v11 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v15) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_29;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100163154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t AppleKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = sub_100156EAC();
  char v8 = v7;
  uint64_t result = swift_endAccess();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16)  = a1;
    *(void *)(v10 + 24)  = a2;
    uint64_t v11 = (uint64_t *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v11;
    *uint64_t v11 = 0x8000000000000000;
    sub_100034D6C((uint64_t)sub_100175F3C, v10, v6, isUniquelyReferenced_nonNull_native);
    *uint64_t v11 = v13;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_1001629AC();
    return v6;
  }
  return result;
}

Swift::Void __swiftcall AppleKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  swift_beginAccess();
  uint64_t v2 = sub_100033F34(a1);
  swift_endAccess();
  sub_1001629AC();
  if (v2) {
    sub_100011E30(v2);
  }
  swift_beginAccess();
  sub_100173E14(a1);
  swift_endAccess();
}

void *AppleKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  v451  = a3;
  v437  = a1;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  v431  = (char *)&v371 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480928);
  __chkstk_darwin();
  v452  = (char *)&v371 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v454  = (char *)&v371 - v7;
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v408  = *(void *)(v8 - 8);
  v409  = v8;
  __chkstk_darwin();
  v406  = (char *)&v371 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v407  = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  v405  = *(void *)(v407 - 8);
  __chkstk_darwin();
  v401  = (char *)&v371 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v402  = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v400  = *(void *)(v402 - 8);
  __chkstk_darwin();
  v398  = (char *)&v371 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Duration.UnitsFormatStyle();
  v403  = *(void *)(v12 - 8);
  v404  = v12;
  __chkstk_darwin();
  v399  = (char *)&v371 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v450  = type metadata accessor for UUID();
  v453  = *(void *)(v450 - 8);
  __chkstk_darwin();
  v441  = (char *)&v371 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v435  = (char *)&v371 - v15;
  __chkstk_darwin();
  v459  = (char *)&v371 - v16;
  __chkstk_darwin();
  v448  = (unint64_t **)((char *)&v371 - v17);
  __chkstk_darwin();
  v424  = (char *)&v371 - v18;
  sub_100010BCC(&qword_1004808D0);
  __chkstk_darwin();
  v428  = (char *)&v371 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  *(void *)&v417  = (char *)&v371 - v20;
  __chkstk_darwin();
  v414  = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v371 - v21);
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  v430  = (uint64_t)&v371 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v423  = (char *)&v371 - v23;
  __chkstk_darwin();
  v425  = (void (**)(unint64_t, uint64_t))((char *)&v371 - v24);
  __chkstk_darwin();
  v444  = (unint64_t *)((char *)&v371 - v25);
  v456  = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v449  = *(void *)(v456 - 8);
  __chkstk_darwin();
  v457  = (unint64_t *)((char *)&v371 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v420  = (unint64_t *)((char *)&v371 - v27);
  __chkstk_darwin();
  v421  = (void (*)(unint64_t, char *, uint64_t))((char *)&v371 - v28);
  __chkstk_darwin();
  v419  = (os_log_t)((char *)&v371 - v29);
  v443  = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v442  = *(void *)(v443 - 8);
  __chkstk_darwin();
  v446  = (void (**)(char *, char *, uint64_t))((char *)&v371 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v411  = (uint64_t)&v371 - v31;
  __chkstk_darwin();
  v418  = (char *)&v371 - v32;
  sub_100010BCC(&qword_100480930);
  __chkstk_darwin();
  v422  = (uint64_t)&v371 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v429  = (void (*)(char *, uint64_t))((char *)&v371 - v34);
  __chkstk_darwin();
  v412  = (uint64_t)&v371 - v35;
  __chkstk_darwin();
  v434  = (os_log_t)((char *)&v371 - v36);
  __chkstk_darwin();
  v440  = (unint64_t)&v371 - v37;
  v438  = type metadata accessor for Date();
  v427  = *(void *)(v438 - 8);
  __chkstk_darwin();
  v447  = (unint64_t)&v371 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v415  = (char *)&v371 - v39;
  __chkstk_darwin();
  v410  = (char *)&v371 - v40;
  __chkstk_darwin();
  v416  = (char *)&v371 - v41;
  __chkstk_darwin();
  v413  = (char *)&v371 - v42;
  __chkstk_darwin();
  v445  = (uint64_t)&v371 - v43;
  v433  = sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2F40;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0);
  uint64_t v46 = v45;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v45;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v45;
  *(void *)(inited + 112)  = kSecAttrService;
  v439  = a2;
  *(void *)(inited + 120)  = a2;
  *(void *)(inited + 128)  = a3;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 152)  = kSecMatchLimit;
  v455  = (__CFString *)kSecMatchLimitAll;
  *(void *)(inited + 160)  = kSecMatchLimitAll;
  p_isa  = &kSecReturnData->isa;
  *(void *)(inited + 184)  = v45;
  *(void *)(inited + 192)  = kSecReturnData;
  *(unsigned char *)(inited + 200)  = 1;
  *(void *)(inited + 224)  = &type metadata for Bool;
  *(void *)(inited + 232)  = kSecReturnAttributes;
  *(void *)(inited + 264)  = &type metadata for Bool;
  *(unsigned char *)(inited + 240)  = 1;
  v432  = (id)kSecClass;
  CFStringRef v47 = (id)kSecClassGenericPassword;
  CFStringRef v48 = (id)kSecAttrSynchronizable;
  CFStringRef v49 = (id)kSecAttrSynchronizableAny;
  CFStringRef v50 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  CFStringRef v51 = (id)kSecMatchLimit;
  uint64_t v52 = v455;
  uint64_t v53 = p_isa;
  CFStringRef v54 = (id)kSecReturnAttributes;
  sub_10001FD04(inited);
  uint64_t v55 = sub_10016A508(&qword_10047C840, type metadata accessor for CFString);
  v56.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v465  = 0;
  if (SecItemCopyMatching(v56.super.isa, &v465))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v442 + 56))(v437, 1, 1, v443);
    swift_unknownObjectRelease();

    return _swiftEmptyArrayStorage;
  }
  v393  = v48;
  v394  = v50;
  v426  = v47;
  uint64_t v57 = v443;
  uint64_t v58 = v442;
  if (!v465
    || (*(void *)&v461  = v465,
        swift_unknownObjectRetain(),
        sub_100010BCC(&qword_100480940),
        (swift_dynamicCast() & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v437, 1, 1, v57);

    swift_unknownObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  v395  = v55;
  v396  = v46;
  isa  = v56.super.isa;
  uint64_t countAndFlagsBits = v464._countAndFlagsBits;
  Date.init()();
  unint64_t v60 = v440;
  v389  = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v390  = v58 + 56;
  v389(v440, 1, 1, v57);
  v460  = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v61 = *(void *)(countAndFlagsBits + 16);
  if (!v61)
  {
    swift_bridgeObjectRelease();
    v392  = 0;
    uint64_t v63 = v438;
    uint64_t v164 = v450;
    uint64_t v64 = (uint64_t)v454;
    uint64_t v65 = (uint64_t)v446;
    uint64_t v66 = (uint64_t)v448;
    goto LABEL_105;
  }
  v385  = 0;
  LODWORD(v382)  = 0;
  unint64_t v60 = 0;
  v392  = 0;
  v376  = v436 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  v386  = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v449 + 56);
  v384  = (unsigned int (**)(void (*)(void, void), uint64_t, uint64_t))(v449 + 48);
  v455  = (__CFString *)kSecAttrLabel;
  v388  = (__CFString *)kSecValueData;
  v375  = (void (**)(char *, uint64_t, uint64_t))(v427 + 32);
  v380  = (void (**)(char *, os_log_t, uint64_t))(v453 + 16);
  v381  = (void (**)(uint64_t, void, uint64_t, uint64_t))(v427 + 56);
  v377  = (__CFString *)kSecAttrModificationDate;
  v378  = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v427 + 48);
  v379  = (void (**)(uint64_t, uint64_t))(v453 + 8);
  v383  = (uint64_t (**)(os_log_t, uint64_t, uint64_t))(v58 + 48);
  v374  = (char *)&v461 + 8;
  p_isa  = (void *)(v61 - 1);
  v397  = &type metadata for Any[8];
  *((void *)&v62 + 1)  = 2;
  v391  = xmmword_1003B2450;
  *(void *)&long long v62 = 136315138;
  v373  = v62;
  uint64_t v63 = v438;
  uint64_t v64 = (uint64_t)v454;
  uint64_t v65 = (uint64_t)v446;
  uint64_t v66 = (uint64_t)v448;
  while (1)
  {
    while (1)
    {
      if (v60 >= *(void *)(countAndFlagsBits + 16))
      {
        __break(1u);
        goto LABEL_207;
      }
      uint64_t v67 = *(void *)(countAndFlagsBits + 8 * v60 + 32);
      if (!*(void *)(v67 + 16))
      {
        v461  = 0u;
        v462  = 0u;
        swift_bridgeObjectRetain();
LABEL_20:
        sub_1000380B4((uint64_t)&v461, &qword_10047D0D0);
LABEL_21:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      swift_bridgeObjectRetain();
      os_log_type_t v68 = v455;
      unint64_t v69 = sub_100031584((uint64_t)v68);
      if (v70)
      {
        sub_1000107A4(*(void *)(v67 + 56) + 32 * v69, (uint64_t)&v461);
      }
      else
      {
        v461  = 0u;
        v462  = 0u;
      }

      if (!*((void *)&v462 + 1)) {
        goto LABEL_20;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      Swift::Int v71 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FEF0, v464);
      swift_bridgeObjectRelease();
      if (!v71) {
        break;
      }
      if (v71 == 1)
      {
        if (*(void *)(v67 + 16))
        {
          uint64_t v72 = v388;
          unint64_t v73 = sub_100031584((uint64_t)v72);
          uint64_t v74 = v456;
          if (v75)
          {
            sub_1000107A4(*(void *)(v67 + 56) + 32 * v73, (uint64_t)&v461);
          }
          else
          {
            v461  = 0u;
            v462  = 0u;
          }

          if (*((void *)&v462 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v80 = v464._countAndFlagsBits;
              object  = v464._object;
              v371  = (unint64_t)v464._object >> 62;
              sub_100013D44(v464._countAndFlagsBits, (unint64_t)v464._object);
              v372  = (uint8_t *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
              uint64_t v82 = type metadata accessor for BinaryDecoder();
              uint64_t v83 = (void *)swift_allocObject();
              v83[5]  = &_swiftEmptyDictionarySingleton;
              v83[2]  = v80;
              v83[3]  = object;
              uint64_t v84 = 0;
              switch(v371)
              {
                case 1uLL:
                  uint64_t v84 = (int)v80;
                  break;
                case 2uLL:
                  uint64_t v84 = *(void *)(v80 + 16);
                  break;
                default:
                  break;
              }
              v83[4]  = v84;
              swift_beginAccess();
              v83[5]  = v372;
              swift_bridgeObjectRelease();
              *((void *)&v462 + 1)  = v82;
              v463  = sub_10016A508((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
              *(void *)&v461  = v83;
              uint64_t v122 = v392;
              LongTermPairingKeys.PublicIdentity.init(from:)(&v461, (uint64_t)v444);
              uint64_t v123 = v80;
              if (v122)
              {
                swift_errorRelease();
                v392  = 0;
                uint64_t v124 = 1;
              }
              else
              {
                v392  = 0;
                uint64_t v124 = 0;
              }
              uint64_t v63 = v438;
              uint64_t v125 = (void (*)(void, void))v444;
              uint64_t v126 = v456;
              (*v386)(v444, v124, 1, v456);
              sub_10000C970(v123, (unint64_t)object);
              if ((*v384)(v125, 1, v126) != 1)
              {
                sub_100175E94((uint64_t)v125, (uint64_t)v419, type metadata accessor for LongTermPairingKeys.PublicIdentity);
                if (*(void *)(v67 + 16))
                {
                  uint64_t v127 = v377;
                  unint64_t v128 = sub_100031584((uint64_t)v127);
                  uint64_t v65 = (uint64_t)v446;
                  uint64_t v129 = v413;
                  if (v130)
                  {
                    sub_1000107A4(*(void *)(v67 + 56) + 32 * v128, (uint64_t)&v461);
                  }
                  else
                  {
                    v461  = 0u;
                    v462  = 0u;
                  }
                }
                else
                {
                  v461  = 0u;
                  v462  = 0u;
                  uint64_t v65 = (uint64_t)v446;
                  uint64_t v129 = v413;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v462 + 1))
                {
                  uint64_t v150 = (uint64_t)v414;
                  int v151 = swift_dynamicCast();
                  unint64_t v152 = *v381;
                  (*v381)(v150, v151 ^ 1u, 1, v63);
                  if ((*v378)(v150, 1, v63) != 1)
                  {
                    uint64_t v153 = *v375;
                    (*v375)(v129, v150, v63);
                    uint64_t v154 = (char *)v419 + *(int *)(v456 + 28);
                    sub_1000380B4((uint64_t)v154, &qword_1004808D0);
                    v153(v154, (uint64_t)v129, v63);
                    v152((uint64_t)v154, 0, 1, v63);
LABEL_89:
                    uint64_t v155 = (uint64_t)v424;
                    os_log_t v156 = v419;
                    uint64_t v157 = v450;
                    (*v380)(v424, v419, v450);
                    uint64_t v158 = (uint64_t)v421;
                    sub_10016A42C((uint64_t)v156, (uint64_t)v421, type metadata accessor for LongTermPairingKeys.PublicIdentity);
                    uint64_t v159 = v460;
                    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)&v461  = v159;
                    sub_100034B98(v158, v155, isUniquelyReferenced_nonNull_native);
                    v460  = (char *)v461;
                    swift_bridgeObjectRelease();
                    (*v379)(v155, v157);
                    sub_10016A550((uint64_t)v156, type metadata accessor for LongTermPairingKeys.PublicIdentity);
                    uint64_t v64 = (uint64_t)v454;
                    goto LABEL_56;
                  }
                }
                else
                {
                  sub_1000380B4((uint64_t)&v461, &qword_10047D0D0);
                  uint64_t v150 = (uint64_t)v414;
                  (*v381)((uint64_t)v414, 1, 1, v63);
                }
                sub_1000380B4(v150, &qword_1004808D0);
                goto LABEL_89;
              }
              unint64_t v85 = v125;
              goto LABEL_40;
            }
LABEL_39:
            unint64_t v85 = (void (*)(void, void))v444;
            (*v386)(v444, 1, 1, v74);
LABEL_40:
            sub_1000380B4((uint64_t)v85, &qword_1004808F8);
            uint64_t v86 = swift_initStackObject();
            *(_OWORD *)(v86 + 16)  = v391;
            *(void *)(v86 + 64)  = v396;
            unint64_t v87 = (__CFString *)v432;
            unint64_t v88 = (__CFString *)v426;
            *(void *)(v86 + 32)  = v432;
            *(void *)(v86 + 40)  = v88;
            swift_bridgeObjectRetain();
            uint64_t v89 = v87;
            uint64_t v90 = v88;
            unint64_t v91 = sub_10001FD04(v86);
            char v92 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v461  = v67;
            uint64_t v93 = v91;
            uint64_t v94 = v392;
            sub_100174A80(v93, (uint64_t)sub_100174DE8, 0, v92, (uint64_t)&v461);
            swift_bridgeObjectRelease();
            v392  = v94;
            if (v94) {
              goto LABEL_211;
            }
            v95.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            OSStatus v96 = SecItemDelete(v95.super.isa);
            if (!v96) {
              goto LABEL_55;
            }
            CFStringRef v97 = SecCopyErrorMessageString(v96, 0);
            if (v97)
            {
              uint64_t v98 = (__CFString *)v97;
              uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v101 = v100;
            }
            else
            {
              unint64_t v101 = 0xE700000000000000;
              uint64_t v99 = 0x6E776F6E6B6E75;
            }
            uint64_t v65 = (uint64_t)v446;
            uint64_t v66 = (uint64_t)v448;
            goto LABEL_61;
          }
        }
        else
        {
          v461  = 0u;
          v462  = 0u;
          uint64_t v74 = v456;
        }
        sub_1000380B4((uint64_t)&v461, &qword_10047D0D0);
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      if (v71 != 2) {
        goto LABEL_56;
      }
      v385  = 1;
      BOOL v79 = p_isa == (void *)v60++;
      uint64_t v66 = (uint64_t)v448;
      if (v79) {
        goto LABEL_210;
      }
    }
    if (!*(void *)(v67 + 16))
    {
      v461  = 0u;
      v462  = 0u;
LABEL_49:
      sub_1000380B4((uint64_t)&v461, &qword_10047D0D0);
LABEL_50:
      os_log_t v108 = v434;
      v389((unint64_t)v434, 1, 1, v443);
LABEL_51:
      sub_1000380B4((uint64_t)v108, &qword_100480930);
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16)  = v391;
      *(void *)(v109 + 64)  = v396;
      uint64_t v110 = (__CFString *)v432;
      unint64_t v111 = (__CFString *)v426;
      *(void *)(v109 + 32)  = v432;
      *(void *)(v109 + 40)  = v111;
      swift_bridgeObjectRetain();
      unint64_t v112 = v110;
      uint64_t v113 = v111;
      unint64_t v114 = sub_10001FD04(v109);
      char v115 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v461  = v67;
      uint64_t v116 = v114;
      uint64_t v117 = v392;
      sub_100174A80(v116, (uint64_t)sub_100174DE8, 0, v115, (uint64_t)&v461);
      swift_bridgeObjectRelease();
      v392  = v117;
      if (v117)
      {
LABEL_211:
        swift_bridgeObjectRelease();
        __break(1u);
        JUMPOUT(0x100166D0CLL);
      }
      v95.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OSStatus v118 = SecItemDelete(v95.super.isa);
      if (!v118)
      {
LABEL_55:
        swift_bridgeObjectRelease();

        uint64_t v63 = v438;
        uint64_t v65 = (uint64_t)v446;
LABEL_56:
        uint64_t v66 = (uint64_t)v448;
        goto LABEL_22;
      }
      CFStringRef v119 = SecCopyErrorMessageString(v118, 0);
      uint64_t v66 = (uint64_t)v448;
      if (v119)
      {
        uint64_t v120 = (__CFString *)v119;
        uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v101 = v121;
      }
      else
      {
        unint64_t v101 = 0xE700000000000000;
        uint64_t v99 = 0x6E776F6E6B6E75;
      }
      uint64_t v65 = (uint64_t)v446;
LABEL_61:
      sub_100168184(v99, v101, v436, v439, v451, "Failed to remove badly formed identity for %s with error: %s");
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v63 = v438;
      uint64_t v64 = (uint64_t)v454;
      goto LABEL_22;
    }
    uint64_t v76 = v388;
    unint64_t v77 = sub_100031584((uint64_t)v76);
    if (v78)
    {
      sub_1000107A4(*(void *)(v67 + 56) + 32 * v77, (uint64_t)&v461);
    }
    else
    {
      v461  = 0u;
      v462  = 0u;
    }

    if (!*((void *)&v462 + 1)) {
      goto LABEL_49;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v102 = v464._countAndFlagsBits;
    uint64_t v103 = (uint8_t *)v464._object;
    v371  = (unint64_t)v464._object >> 62;
    sub_100013D44(v464._countAndFlagsBits, (unint64_t)v464._object);
    unint64_t v104 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v105 = type metadata accessor for BinaryDecoder();
    uint64_t v106 = (void *)swift_allocObject();
    v106[5]  = &_swiftEmptyDictionarySingleton;
    v106[2]  = v102;
    v106[3]  = v103;
    v372  = v103;
    uint64_t v107 = 0;
    switch(v371)
    {
      case 1uLL:
        uint64_t v107 = (int)v102;
        break;
      case 2uLL:
        uint64_t v107 = *(void *)(v102 + 16);
        break;
      default:
        break;
    }
    v106[4]  = v107;
    swift_beginAccess();
    v106[5]  = v104;
    swift_bridgeObjectRelease();
    *((void *)&v462 + 1)  = v105;
    v463  = sub_10016A508((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
    *(void *)&v461  = v106;
    uint64_t v131 = v392;
    LongTermPairingKeys.PrivateIdentity.init(from:)(&v461, (uint64_t)v434);
    uint64_t v132 = v102;
    if (v131)
    {
      swift_errorRelease();
      v392  = 0;
      uint64_t v133 = 1;
    }
    else
    {
      v392  = 0;
      uint64_t v133 = 0;
    }
    uint64_t v63 = v438;
    os_log_t v108 = v434;
    uint64_t v134 = v443;
    v389((unint64_t)v434, v133, 1, v443);
    sub_10000C970(v132, (unint64_t)v372);
    uint64_t v135 = *v383;
    if ((*v383)(v108, 1, v134) == 1) {
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    sub_100175E94((uint64_t)v108, (uint64_t)v418, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    uint64_t v136 = v412;
    sub_1000136F4(v440, v412, &qword_100480930);
    int v137 = v135((os_log_t)v136, 1, v134);
    uint64_t v138 = v439;
    if (v137 != 1) {
      break;
    }
    sub_1000380B4(v136, &qword_100480930);
    uint64_t v65 = (uint64_t)v446;
    uint64_t v66 = (uint64_t)v448;
    uint64_t v139 = v138;
    uint64_t v140 = (uint64_t)v418;
    if (v382) {
      goto LABEL_92;
    }
    uint64_t v141 = v440;
    sub_1000380B4(v440, &qword_100480930);
    sub_100175E94(v140, v141, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    v389(v141, 0, 1, v443);
    LODWORD(v382)  = 0;
LABEL_22:
    if (p_isa == (void *)v60) {
      goto LABEL_97;
    }
LABEL_23:
    ++v60;
  }
  uint64_t v142 = v411;
  sub_100175E94(v136, v411, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v143 = v451;
  AppleKeychain.remove(identity:for:)(v142, v138, v451);
  swift_bridgeObjectRetain_n();
  uint64_t v144 = Logger.logObject.getter();
  os_log_type_t v145 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v144, v145))
  {
    uint64_t v146 = (uint8_t *)swift_slowAlloc();
    v382  = swift_slowAlloc();
    v464._uint64_t countAndFlagsBits = v382;
    v372  = v146;
    *(_DWORD *)uint64_t v146 = v373;
    *(void *)&v461  = 39;
    *((void *)&v461 + 1)  = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v147._uint64_t countAndFlagsBits = v138;
    v147._object  = v143;
    String.append(_:)(v147);
    v148._uint64_t countAndFlagsBits = 39;
    v148._object  = (void *)0xE100000000000000;
    String.append(_:)(v148);
    swift_bridgeObjectRelease();
    *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
    uint64_t v63 = v438;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v144, v145, "Found multiple private identities for %s. Will remove all private identities found", v372, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v149 = v411;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v149 = v142;
  }
  sub_10016A550(v149, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v64 = (uint64_t)v454;
  uint64_t v65 = (uint64_t)v446;
  uint64_t v66 = (uint64_t)v448;
  uint64_t v161 = v440;
  sub_1000380B4(v440, &qword_100480930);
  v389(v161, 1, 1, v443);
  uint64_t v139 = v439;
  uint64_t v140 = (uint64_t)v418;
LABEL_92:
  AppleKeychain.remove(identity:for:)(v140, v139, v451);
  sub_10016A550(v140, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  if (p_isa != (void *)v60)
  {
    LODWORD(v382)  = 1;
    goto LABEL_23;
  }
LABEL_97:
  swift_bridgeObjectRelease();
  unint64_t v60 = v440;
  uint64_t v164 = v450;
  if (v385) {
    goto LABEL_98;
  }
LABEL_105:
  while (2)
  {
    uint64_t v184 = (uint64_t)v429;
    sub_1000136F4(v60, (uint64_t)v429, &qword_100480930);
    unint64_t v185 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v442 + 48);
    v442 += 48;
    int v186 = v185(v184, 1, v443);
    v414  = v185;
    if (v186 != 1)
    {
      sub_100175E94(v184, v65, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
      unint64_t v187 = *(__CFString **)(v453 + 16);
      p_isa  = (void *)(v453 + 16);
      v455  = v187;
      ((void (*)(uint64_t, uint64_t, uint64_t))v187)(v66, v65, v164);
      unint64_t v188 = v460;
      if (*((void *)v460 + 2) && (unint64_t v189 = sub_1000316CC(v66), (v190 & 1) != 0))
      {
        sub_10016A42C(*((void *)v188 + 7) + *(void *)(v449 + 72) * v189, (uint64_t)v425, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v191 = 0;
      }
      else
      {
        uint64_t v191 = 1;
      }
      uint64_t v192 = v449;
      unint64_t v193 = v425;
      uint64_t v194 = v456;
      (*(void (**)(void (**)(unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v449 + 56))(v425, v191, 1, v456);
      uint64_t v195 = *(unint64_t **)(v453 + 8);
      v448  = (unint64_t **)(v453 + 8);
      v444  = v195;
      ((void (*)(uint64_t, uint64_t))v195)(v66, v164);
      if ((*(unsigned int (**)(void (**)(unint64_t, uint64_t), uint64_t, uint64_t))(v192 + 48))(v193, 1, v194) == 1)
      {
        sub_1000380B4((uint64_t)v193, &qword_1004808F8);
        uint64_t v196 = v451;
        swift_bridgeObjectRetain_n();
        uint64_t v197 = Logger.logObject.getter();
        v198  = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v197, v198))
        {
          uint64_t v199 = (uint8_t *)swift_slowAlloc();
          uint64_t v200 = swift_slowAlloc();
          *(_DWORD *)uint64_t v199 = 136315138;
          v464._uint64_t countAndFlagsBits = v200;
          *(void *)&v461  = 39;
          *((void *)&v461 + 1)  = 0xE100000000000000;
          swift_bridgeObjectRetain();
          v201._uint64_t countAndFlagsBits = v439;
          v201._object  = v196;
          String.append(_:)(v201);
          v202._uint64_t countAndFlagsBits = 39;
          v202._object  = (void *)0xE100000000000000;
          String.append(_:)(v202);
          swift_bridgeObjectRelease();
          *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
          uint64_t v63 = v438;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v197, v198, "Detected public identity is missing from the keychain for %s attempting to re-insert", v199, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v164 = v450;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v210  = (uint64_t)v421;
        uint64_t v65 = (uint64_t)v446;
        ((void (*)(void, void, uint64_t))v455)(v421, v446, v164);
        v211  = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
        v212  = v65 + v211;
        v213  = v210 + v211;
        v214  = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v214 - 8) + 16))(v213, v212, v214);
        v215  = v443;
        v216  = v456;
        P256.Signing.PrivateKey.publicKey.getter();
        v217  = (void *)(v210 + *(int *)(v216 + 24));
        *v217  = 0;
        v217[1]  = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v427 + 56))(v210 + *(int *)(v216 + 28), 1, 1, v63);
        v218  = v439;
        LOBYTE(v212)  = AppleKeychain.save(identity:for:publicly:)(v210, v439, (uint64_t)v196, 1);
        sub_10016A550(v210, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        if (v212)
        {
          unint64_t v60 = v440;
        }
        else
        {
          AppleKeychain.remove(identity:for:)(v65, v218, v196);
          unint64_t v60 = v440;
          sub_1000380B4(v440, &qword_100480930);
          v389(v60, 1, 1, v215);
        }
        v242  = (uint64_t)v424;
        uint64_t v64 = (uint64_t)v454;
LABEL_124:
        v209  = (uint64_t)v423;
LABEL_127:
        ((void (*)(uint64_t, uint64_t, uint64_t))v455)(v242, v65, v164);
        sub_100033D68(v242, v209);
        ((void (*)(uint64_t, uint64_t))v444)(v242, v164);
        sub_1000380B4(v209, &qword_1004808F8);
        sub_10016A550(v65, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
        goto LABEL_128;
      }
      uint64_t v203 = (uint64_t)v193;
      id v204 = v420;
      sub_100175E94(v203, (uint64_t)v420, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v205 = (uint64_t)v204 + *(int *)(v194 + 28);
      uint64_t v206 = v417;
      sub_1000136F4(v205, v417, &qword_1004808D0);
      uint64_t v207 = v427;
      int v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v427 + 48))(v206, 1, v63);
      v209  = (uint64_t)v423;
      if (v208 == 1)
      {
        sub_10016A550((uint64_t)v204, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_1000380B4(v206, &qword_1004808D0);
      }
      else
      {
        v219  = v416;
        (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v416, v206, v63);
        v220  = v445;
        Date.timeIntervalSince(_:)();
        if (v221 > 5356800.0)
        {
          v222  = (void (**)(unint64_t, uint64_t))(v436 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger);
          v223  = *(void (**)(char *, uint64_t, uint64_t))(v207 + 16);
          v224  = v410;
          v223(v410, v220, v63);
          v223(v415, (uint64_t)v219, v63);
          v225  = v451;
          swift_bridgeObjectRetain_n();
          v425  = v222;
          v226  = Logger.logObject.getter();
          v227  = static os_log_type_t.default.getter();
          LODWORD(v434)  = v227;
          if (os_log_type_enabled(v226, v227))
          {
            v228  = swift_slowAlloc();
            v421  = (void (*)(unint64_t, char *, uint64_t))swift_slowAlloc();
            v464._uint64_t countAndFlagsBits = (uint64_t)v421;
            *(_DWORD *)v228  = 136315394;
            *(void *)&v461  = 39;
            *((void *)&v461 + 1)  = 0xE100000000000000;
            swift_bridgeObjectRetain();
            v419  = v226;
            v229._uint64_t countAndFlagsBits = v439;
            v229._object  = v225;
            String.append(_:)(v229);
            v230._uint64_t countAndFlagsBits = 39;
            v230._object  = (void *)0xE100000000000000;
            String.append(_:)(v230);
            swift_bridgeObjectRelease();
            *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v228 + 12)  = 2080;
            v429  = (void (*)(char *, uint64_t))(v228 + 14);
            Date.timeIntervalSince(_:)();
            v418  = (char *)static Duration.seconds(_:)();
            *(void *)&v417  = v231;
            sub_100010BCC(&qword_100480950);
            type metadata accessor for Duration.UnitsFormatStyle.Unit();
            v232  = swift_allocObject();
            *(_OWORD *)(v232 + 16)  = xmmword_1003B4420;
            static Duration.UnitsFormatStyle.Unit.days.getter();
            static Duration.UnitsFormatStyle.Unit.hours.getter();
            sub_1000174B4(v232);
            swift_setDeallocating();
            v233  = v436;
            swift_arrayDestroy();
            swift_deallocClassInstance();
            v234  = v398;
            static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
            v235  = v401;
            static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
            v236  = v406;
            static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter();
            v237  = v399;
            static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v408 + 8))(v236, v409);
            (*(void (**)(char *, uint64_t))(v405 + 8))(v235, v407);
            (*(void (**)(char *, uint64_t))(v400 + 8))(v234, v402);
            sub_10016A508(&qword_100480958, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle);
            v238  = v404;
            Duration.formatted<A>(_:)();
            (*(void (**)(char *, uint64_t))(v403 + 8))(v237, v238);
            *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v239  = *(void (**)(char *, uint64_t))(v207 + 8);
            v240  = v438;
            v239(v410, v438);
            v429  = v239;
            v239(v415, v240);
            v241  = v419;
            _os_log_impl((void *)&_mh_execute_header, v419, (os_log_type_t)v434, "Last modified public identity for %s  %s ago in the keychain updating last modified timestamp", (uint8_t *)v228, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();

            v338  = *(void (**)(char *, uint64_t))(v207 + 8);
            v338(v224, v63);
            v429  = v338;
            v338(v415, v63);
            v233  = v436;
          }
          v339  = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
          v341  = v340;
          v342  = *(void *)(v233 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
          v434  = *(os_log_t *)(v233 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
          v343  = v233 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView;
          v344  = *(void *)(v233 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
          v345  = *(void *)(v343 + 8);
          v346  = UUID.uuidString.getter();
          v347  = v344;
          v348  = v451;
          v350  = sub_100162600(v339, v341, (uint64_t)v434, v342, v347, v345, v439, (uint64_t)v451, v346, v349, 1);
          sub_10000C970(v339, v341);
          swift_bridgeObjectRelease();
          v351  = swift_initStackObject();
          *(_OWORD *)(v351 + 16)  = xmmword_1003B2450;
          *(void *)(v351 + 64)  = v396;
          v352  = (__CFString *)v432;
          v353  = (__CFString *)v426;
          *(void *)(v351 + 32)  = v432;
          *(void *)(v351 + 40)  = v353;
          swift_bridgeObjectRetain();
          v354  = v352;
          v355  = v353;
          v356  = sub_10001FD04(v351);
          v357  = v392;
          sub_100162574(v356, v350);
          v392  = v357;
          v358  = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v359  = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v360  = SecItemUpdate(v358, v359);

          if (v360)
          {
            swift_bridgeObjectRetain_n();
            v361  = Logger.logObject.getter();
            v362  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v361, (os_log_type_t)v362))
            {
              LODWORD(v425)  = v362;
              v434  = v361;
              uint64_t countAndFlagsBits = swift_slowAlloc();
              v421  = (void (*)(unint64_t, char *, uint64_t))swift_slowAlloc();
              v464._uint64_t countAndFlagsBits = (uint64_t)v421;
              *(_DWORD *)uint64_t countAndFlagsBits = 136315394;
              *(void *)&v461  = 39;
              *((void *)&v461 + 1)  = 0xE100000000000000;
              swift_bridgeObjectRetain();
              v363._uint64_t countAndFlagsBits = v439;
              v363._object  = v348;
              String.append(_:)(v363);
              v364._uint64_t countAndFlagsBits = 39;
              v364._object  = (void *)0xE100000000000000;
              String.append(_:)(v364);
              swift_bridgeObjectRelease();
              *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(countAndFlagsBits + 12)  = 2080;
              v365  = SecCopyErrorMessageString(v360, 0);
              if (v365)
              {
                v366  = (__CFString *)v365;
                v367  = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v369  = v368;

                uint64_t v64 = (uint64_t)v454;
                uint64_t v65 = (uint64_t)v446;
              }
              else
              {
LABEL_207:
                v369  = 0xE700000000000000;
                uint64_t v64 = (uint64_t)v454;
                uint64_t v65 = (uint64_t)v446;
                v367  = 0x6E776F6E6B6E75;
              }
              *(void *)&v461  = sub_100010680(v367, v369, &v464._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v370  = v434;
              _os_log_impl((void *)&_mh_execute_header, v434, (os_log_type_t)v425, "Failed to update the last modified timestamp of the public identity to the keychain for %s with error: %s", (uint8_t *)countAndFlagsBits, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v63 = v438;
              v429(v416, v438);
              sub_10016A550((uint64_t)v420, type metadata accessor for LongTermPairingKeys.PublicIdentity);
              uint64_t v164 = v450;
              v242  = (uint64_t)v424;
              goto LABEL_124;
            }
            swift_bridgeObjectRelease_n();
          }
          uint64_t v63 = v438;
          v429(v416, v438);
          sub_10016A550((uint64_t)v420, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          uint64_t v164 = v450;
          uint64_t v64 = (uint64_t)v454;
          v209  = (uint64_t)v423;
          v242  = (uint64_t)v424;
          uint64_t v65 = (uint64_t)v446;
          goto LABEL_127;
        }
        (*(void (**)(char *, uint64_t))(v207 + 8))(v219, v63);
        sub_10016A550((uint64_t)v204, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }
      uint64_t v164 = v450;
      v242  = (uint64_t)v424;
      goto LABEL_127;
    }
    sub_1000380B4(v184, &qword_100480930);
LABEL_128:
    if (*((void *)v460 + 2) < 0x65uLL) {
      goto LABEL_189;
    }
    *(void *)&v461  = _swiftEmptyArrayStorage;
    v243  = *((void *)v460 + 8);
    v415  = v460 + 64;
    v244  = 1 << v460[32];
    v245  = -1;
    if (v244 < 64) {
      v245  = ~(-1 << v244);
    }
    p_isa  = (void *)(v245 & v243);
    v420  = (void *)(v436 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    v246  = (unint64_t)(v244 + 63) >> 6;
    v446  = (void (**)(char *, char *, uint64_t))(v453 + 16);
    v448  = (unint64_t **)(v453 + 32);
    v434  = (os_log_t)(v427 + 48);
    v424  = (char *)(v427 + 32);
    v444  = (unint64_t *)(v453 + 8);
    v425  = (void (**)(unint64_t, uint64_t))(v427 + 8);
    v419  = (os_log_t)kSecAttrAccount;
    v418  = (char *)kSecAttrAccessGroup;
    v411  = v246 - 1;
    v247  = swift_bridgeObjectRetain();
    v248  = 0;
    v423  = (char *)v246;
    v429  = (void (*)(char *, uint64_t))v247;
    v412  = v247 + 104;
    v413  = (char *)(v246 - 5);
    v249  = (uint64_t *)&unk_100480948;
    v417  = xmmword_1003B7340;
    v416  = &type metadata for Any[8];
    v250  = (uint64_t)v428;
    v251  = (unint64_t)p_isa;
    if (p_isa)
    {
LABEL_132:
      p_isa  = (void *)((v251 - 1) & v251);
      v252  = __clz(__rbit64(v251)) | (v248 << 6);
LABEL_133:
      v253  = (uint64_t)v429;
      v254  = (uint64_t)v452;
      (*(void (**)(char *, unint64_t, uint64_t))(v453 + 16))(v452, *((void *)v429 + 6) + *(void *)(v453 + 72) * v252, v164);
      v255  = *(void *)(v253 + 56) + *(void *)(v449 + 72) * v252;
      v256  = sub_100010BCC(v249);
      sub_10016A42C(v255, v254 + *(int *)(v256 + 48), type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v256 - 8) + 56))(v254, 0, 1, v256);
      uint64_t v64 = (uint64_t)v454;
      goto LABEL_140;
    }
LABEL_134:
    v257  = v248 + 1;
    if (__OFADD__(v248, 1))
    {
      __break(1u);
LABEL_210:
      swift_bridgeObjectRelease();
      uint64_t v164 = v450;
LABEL_98:
      uint64_t v165 = swift_allocObject();
      *(_OWORD *)(v165 + 16)  = xmmword_1003B7330;
      uint64_t v166 = *(void *)(v436 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
      uint64_t v167 = *(void *)(v436 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
      *(void *)(v165 + 32)  = kSecAttrAccessGroup;
      *(void *)(v165 + 40)  = v166;
      *(void *)(v165 + 48)  = v167;
      unint64_t v168 = v455;
      *(void *)(v165 + 64)  = &type metadata for String;
      *(void *)(v165 + 72)  = v168;
      strcpy((char *)(v165 + 80), "public_local");
      *(unsigned char *)(v165 + 93)  = 0;
      *(_WORD *)(v165 + 94)  = -5120;
      uint64_t v169 = (__CFString *)v394;
      *(void *)(v165 + 104)  = &type metadata for String;
      *(void *)(v165 + 112)  = v169;
      *(void *)(v165 + 120)  = v439;
      *(void *)(v165 + 128)  = v451;
      uint64_t v170 = (__CFString *)v432;
      *(void *)(v165 + 144)  = &type metadata for String;
      *(void *)(v165 + 152)  = v170;
      *(void *)(v165 + 184)  = v396;
      uint64_t v171 = (__CFString *)v426;
      *(void *)(v165 + 160)  = v426;
      swift_bridgeObjectRetain();
      CFStringRef v172 = (id)kSecAttrAccessGroup;
      swift_bridgeObjectRetain();
      os_log_type_t v173 = v168;
      uint64_t v174 = v169;
      unint64_t v175 = v170;
      uint64_t v176 = v171;
      sub_10001FD04(v165);
      v177.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OSStatus v178 = SecItemDelete(v177.super.isa);
      if (v178)
      {
        CFStringRef v179 = SecCopyErrorMessageString(v178, 0);
        if (v179)
        {
          unint64_t v180 = (__CFString *)v179;
          uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v183  = v182;
        }
        else
        {
          v183  = 0xE700000000000000;
          uint64_t v181 = 0x6E776F6E6B6E75;
        }
        uint64_t v164 = v450;
        uint64_t v65 = (uint64_t)v446;
        uint64_t v64 = (uint64_t)v454;
        uint64_t v66 = (uint64_t)v448;
        unint64_t v60 = v440;
        sub_100166D2C(v181, v183);

        swift_bridgeObjectRelease();
        uint64_t v63 = v438;
      }
      else
      {

        uint64_t v65 = (uint64_t)v446;
        uint64_t v64 = (uint64_t)v454;
        uint64_t v66 = (uint64_t)v448;
        unint64_t v60 = v440;
      }
      continue;
    }
    break;
  }
  if (v257 >= (uint64_t)v423)
  {
    v254  = (uint64_t)v452;
  }
  else
  {
    v258  = *(void *)&v415[8 * v257];
    v254  = (uint64_t)v452;
    if (v258) {
      goto LABEL_137;
    }
    if (v248 + 2 >= (uint64_t)v423)
    {
      ++v248;
    }
    else
    {
      v258  = *(void *)&v415[8 * v248 + 16];
      if (v258)
      {
        v257  = v248 + 2;
LABEL_137:
        p_isa  = (void *)((v258 - 1) & v258);
        v252  = __clz(__rbit64(v258)) + (v257 << 6);
        v248  = v257;
        goto LABEL_133;
      }
      if (v248 + 3 >= (uint64_t)v423)
      {
        v248 += 2;
      }
      else
      {
        v258  = *(void *)&v415[8 * v248 + 24];
        if (v258)
        {
          v257  = v248 + 3;
          goto LABEL_137;
        }
        v257  = v248 + 4;
        if (v248 + 4 >= (uint64_t)v423)
        {
          v248 += 3;
        }
        else
        {
          v258  = *(void *)&v415[8 * v257];
          if (v258) {
            goto LABEL_137;
          }
          while (v413 != (char *)v248)
          {
            v258  = *(void *)(v412 + 8 * v248++);
            if (v258)
            {
              v257  = v248 + 4;
              goto LABEL_137;
            }
          }
          v248  = v411;
        }
      }
    }
  }
  v259  = sub_100010BCC(v249);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v259 - 8) + 56))(v254, 1, 1, v259);
  p_isa  = 0;
LABEL_140:
  sub_10006EC68(v254, v64, &qword_100480928);
  v260  = sub_100010BCC(v249);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v260 - 8) + 48))(v64, 1, v260) != 1)
  {
    v455  = (__CFString *)v248;
    v261  = v249;
    v262  = v64 + *(int *)(v260 + 48);
    v263  = v164;
    v264  = *v448;
    v265  = v459;
    ((void (*)(char *, uint64_t, uint64_t))*v448)(v459, v64, v263);
    v266  = v262;
    v267  = (unsigned int (**)(void, void, void))v457;
    sub_100175E94(v266, (uint64_t)v457, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_1000136F4((uint64_t)v267 + *(int *)(v456 + 28), v250, &qword_1004808D0);
    if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v434->isa)(v250, 1, v63) == 1)
    {
      sub_10016A550((uint64_t)v267, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      ((void (*)(char *, uint64_t))*v444)(v265, v263);
      sub_1000380B4(v250, &qword_1004808D0);
      uint64_t v164 = v263;
    }
    else
    {
      v268  = v447;
      (*(void (**)(unint64_t, uint64_t, uint64_t))v424)(v447, v250, v63);
      Date.timeIntervalSince(_:)();
      if (v269 > 16070400.0)
      {
        v421  = (void (*)(unint64_t, char *, uint64_t))v264;
        v270  = swift_allocObject();
        *(_OWORD *)(v270 + 16)  = v417;
        v271  = (__CFString *)v432;
        v272  = (__CFString *)v426;
        *(void *)(v270 + 32)  = v432;
        *(void *)(v270 + 40)  = v272;
        v274  = (__CFString *)v393;
        v273  = (__CFString *)v394;
        *(void *)(v270 + 64)  = v396;
        *(void *)(v270 + 72)  = v274;
        *(unsigned char *)(v270 + 80)  = 1;
        *(void *)(v270 + 104)  = &type metadata for Bool;
        *(void *)(v270 + 112)  = v273;
        *(void *)(v270 + 120)  = v439;
        *(void *)(v270 + 128)  = v451;
        v275  = v419;
        *(void *)(v270 + 144)  = &type metadata for String;
        *(void *)(v270 + 152)  = v275;
        swift_bridgeObjectRetain();
        v276  = v271;
        v277  = v272;
        v278  = v274;
        v279  = v273;
        v280  = v275;
        v281  = (unsigned int (**)(void, void, void))v457;
        *(void *)(v270 + 160)  = UUID.uuidString.getter();
        *(void *)(v270 + 168)  = v282;
        v283  = v418;
        *(void *)(v270 + 184)  = &type metadata for String;
        *(void *)(v270 + 192)  = v283;
        v284  = *v420;
        v285  = v420[1];
        *(void *)(v270 + 224)  = &type metadata for String;
        *(void *)(v270 + 200)  = v284;
        *(void *)(v270 + 208)  = v285;
        v286  = v283;
        swift_bridgeObjectRetain();
        sub_10001FD04(v270);
        v287.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v288  = SecItemDelete(v287.super.isa);
        if (v288)
        {
          v289  = SecCopyErrorMessageString(v288, 0);
          if (v289)
          {
            v290  = (__CFString *)v289;
            v291  = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v293  = v292;
          }
          else
          {
            v293  = 0xE700000000000000;
            v291  = 0x6E776F6E6B6E75;
          }
          v294  = v435;
          v250  = (uint64_t)v428;
          v249  = v261;
          v295  = v421;
          sub_100166EC4(v291, v293, v436, v445, v447, v439, v451);

          swift_bridgeObjectRelease();
          uint64_t v64 = (uint64_t)v454;
          v248  = (uint64_t)v455;
        }
        else
        {

          v294  = v435;
          uint64_t v64 = (uint64_t)v454;
          v250  = (uint64_t)v428;
          v249  = v261;
          v248  = (uint64_t)v455;
          v295  = v421;
        }
        (*v446)(v294, v459, v450);
        v296  = v461;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v296  = sub_1000C61EC(0, *(void *)(v296 + 16) + 1, 1, v296);
        }
        v298  = *(void *)(v296 + 16);
        v297  = *(void *)(v296 + 24);
        if (v298 >= v297 >> 1) {
          v296  = sub_1000C61EC(v297 > 1, v298 + 1, 1, v296);
        }
        *(void *)(v296 + 16)  = v298 + 1;
        v299  = v453;
        v300  = v296
             + ((*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80))
             + *(void *)(v453 + 72) * v298;
        v301  = v450;
        v295(v300, v435, v450);
        uint64_t v164 = v301;
        *(void *)&v461  = v296;
        sub_10016A550((uint64_t)v281, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        (*(void (**)(char *, uint64_t))(v299 + 8))(v459, v301);
        uint64_t v63 = v438;
        (*v425)(v447, v438);
        v251  = (unint64_t)p_isa;
        if (p_isa) {
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      sub_10016A550((uint64_t)v457, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      uint64_t v164 = v450;
      ((void (*)(char *, uint64_t))*v444)(v459, v450);
      (*v425)(v268, v63);
    }
    v249  = v261;
    v248  = (uint64_t)v455;
    v251  = (unint64_t)p_isa;
    if (p_isa) {
      goto LABEL_132;
    }
    goto LABEL_134;
  }
  swift_release();
  v302  = v461;
  swift_bridgeObjectRetain();
  v303  = Logger.logObject.getter();
  v304  = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v303, v304))
  {
    v305  = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v305  = 134217984;
    v464._uint64_t countAndFlagsBits = *(void *)(v302 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v303, v304, "Removed %ld stale identities that were not modified recently", v305, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v306  = v449;

  swift_beginAccess();
  v307  = *(void *)(v461 + 16);
  unint64_t v60 = v440;
  v454  = (char *)v461;
  if (v307)
  {
    v308  = v461 + ((*(unsigned __int8 *)(v453 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v453 + 80));
    v309  = *(void *)(v453 + 72);
    v459  = *(char **)(v453 + 16);
    v310  = v453 + 56;
    v457  = (unint64_t *)(v453 + 48);
    v455  = (__CFString *)(v306 + 56);
    swift_bridgeObjectRetain();
    p_isa  = (void *)v310;
    v453  = v310 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v311  = v431;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v459)(v311, v308, v164);
      v315  = (void (*)(char *, uint64_t, uint64_t, uint64_t))*p_isa;
      ((void (*)(char *, void, uint64_t, uint64_t))*p_isa)(v311, 0, 1, v164);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))*v457)(v311, 1, v164) == 1) {
        break;
      }
      v316  = (uint64_t)v441;
      ((void (*)(char *, char *, uint64_t))*v448)(v441, v311, v164);
      v317  = (uint64_t)v460;
      swift_bridgeObjectRetain();
      v318  = sub_1000316CC(v316);
      v320  = v319;
      swift_bridgeObjectRelease();
      if (v320)
      {
        v321  = swift_isUniquelyReferenced_nonNull_native();
        v464._uint64_t countAndFlagsBits = v317;
        v460  = (char *)0x8000000000000000;
        if (!v321)
        {
          sub_100171B04();
          v317  = v464._countAndFlagsBits;
        }
        v314  = (void (**)(char *, uint64_t))v444;
        uint64_t v164 = v450;
        ((void (*)(unint64_t, uint64_t))*v444)(*(void *)(v317 + 48) + v318 * v309, v450);
        v322  = v464._countAndFlagsBits;
        v313  = v430;
        sub_100175E94(*(void *)(v464._countAndFlagsBits + 56) + *(void *)(v449 + 72) * v318, v430, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_10016F8E0(v318, v322);
        v460  = (char *)v322;
        swift_bridgeObjectRelease();
        v312  = 0;
      }
      else
      {
        v312  = 1;
        uint64_t v164 = v450;
        v313  = v430;
        v314  = (void (**)(char *, uint64_t))v444;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v455->isa)(v313, v312, 1, v456);
      sub_1000380B4(v313, &qword_1004808F8);
      (*v314)(v441, v164);
      v308 += v309;
      --v307;
      v311  = v431;
      unint64_t v60 = v440;
      if (!v307) {
        goto LABEL_187;
      }
    }
  }
  else
  {
    v315  = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v453 + 56);
    swift_bridgeObjectRetain();
    v311  = v431;
LABEL_187:
    v315(v311, 1, 1, v164);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_189:
  v323  = v451;
  swift_bridgeObjectRetain_n();
  v324  = Logger.logObject.getter();
  v325  = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v324, v325))
  {
    v326  = swift_slowAlloc();
    v464._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)v326  = 134218498;
    swift_beginAccess();
    *(void *)&v461  = *((void *)v460 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v326 + 12)  = 2080;
    swift_beginAccess();
    v327  = v422;
    sub_1000136F4(v440, v422, &qword_100480930);
    v328  = v414(v327, 1, v443);
    sub_1000380B4(v327, &qword_100480930);
    if (v328 == 1) {
      v329  = 0x74756F68746977;
    }
    else {
      v329  = 1752459639;
    }
    if (v328 == 1) {
      v330  = 0xE700000000000000;
    }
    else {
      v330  = 0xE400000000000000;
    }
    *(void *)&v461  = sub_100010680(v329, v330, &v464._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v326 + 22)  = 2080;
    *(void *)&v461  = 39;
    *((void *)&v461 + 1)  = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v331._uint64_t countAndFlagsBits = v439;
    v331._object  = v323;
    String.append(_:)(v331);
    v332._uint64_t countAndFlagsBits = 39;
    v332._object  = (void *)0xE100000000000000;
    String.append(_:)(v332);
    swift_bridgeObjectRelease();
    *(void *)&v461  = sub_100010680(v461, *((unint64_t *)&v461 + 1), &v464._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v324, v325, "Found %ld paired identities %s private identity in the keychain for %s", (uint8_t *)v326, 0x20u);
    swift_arrayDestroy();
    unint64_t v60 = v440;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v333  = v437;
  v334  = v427;
  v335  = v445;
  v336  = isa;
  swift_beginAccess();
  sub_1000136F4(v60, v333, &qword_100480930);
  swift_beginAccess();
  v337  = swift_bridgeObjectRetain();
  uint64_t v162 = sub_10009CDE0(v337);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v334 + 8))(v335, v438);
  swift_bridgeObjectRelease();
  sub_1000380B4(v60, &qword_100480930);
  swift_unknownObjectRelease();
  return v162;
}

void sub_100166D2C(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain_n();
  oslog  = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    sub_100010680(a1, a2, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to remove public identites of paired devices stored locally with error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

void sub_100166EC4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v56 = a6;
  uint64_t v57 = a1;
  unint64_t v59 = a5;
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  __chkstk_darwin();
  uint64_t v52 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin();
  CFStringRef v47 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin();
  uint64_t v44 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v49 = *(void *)(v14 - 8);
  uint64_t v50 = v14;
  __chkstk_darwin();
  uint64_t v45 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v21 = (char *)v40 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v22((char *)v40 - v20, a4, v16);
  v22(v19, v59, v16);
  uint64_t v58 = a7;
  swift_bridgeObjectRetain_n();
  unint64_t v59 = a2;
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  int v43 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    v62[0]  = v42;
    *(_DWORD *)uint64_t v25 = 136315650;
    v40[2]  = v25 + 4;
    os_log_t v41 = v23;
    Date.timeIntervalSince(_:)();
    v40[1]  = static Duration.seconds(_:)();
    v40[0]  = v26;
    sub_100010BCC(&qword_100480950);
    type metadata accessor for Duration.UnitsFormatStyle.Unit();
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16)  = xmmword_1003B4420;
    static Duration.UnitsFormatStyle.Unit.days.getter();
    static Duration.UnitsFormatStyle.Unit.hours.getter();
    sub_1000174B4(v27);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v28 = v44;
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    uint64_t v29 = v47;
    static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
    uint64_t v30 = v52;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter();
    uint64_t v31 = v45;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v55);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v53);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v48);
    sub_10016A508(&qword_100480958, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle);
    uint64_t v32 = v50;
    Duration.formatted<A>(_:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v32);
    uint64_t v60 = sub_100010680(v60, v61, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
    v33(v21, v16);
    v33(v19, v16);
    *(_WORD *)(v25 + 12)  = 2080;
    uint64_t v60 = 39;
    unint64_t v61 = 0xE100000000000000;
    uint64_t v34 = v58;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v56;
    v35._object  = v34;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 39;
    v36._object  = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_100010680(v60, v61, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22)  = 2080;
    unint64_t v37 = v59;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100010680(v57, v37, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v38 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v43, "Failed to delete a stale device identity last modified %s ago from the keychain for %s with error: %s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v39 = *(void (**)(char *, uint64_t))(v17 + 8);
    v39(v21, v16);
    v39(v19, v16);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

BOOL AppleKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10015980C((void (*)(void))type metadata accessor for LongTermPairingKeys.PrivateIdentity, (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  unint64_t v8 = v7;
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  uint64_t v13 = UUID.uuidString.getter();
  uint64_t v43 = a2;
  unint64_t v15 = sub_100162600(v6, v8, v9, v10, v11, v12, a2, a3, v13, v14, 0);
  sub_10000C970(v6, v8);
  swift_bridgeObjectRelease();
  sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2450;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0);
  uint64_t v18 = v17;
  *(void *)(inited + 64)  = v17;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  uint64_t v19 = (id)kSecClass;
  uint64_t v20 = (id)kSecClassGenericPassword;
  unint64_t v21 = sub_10001FD04(inited);
  sub_100162574(v21, v15);
  sub_10016A508(&qword_10047C840, type metadata accessor for CFString);
  isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v23 = SecItemAdd(isa, 0);

  if (v23 == -25299)
  {
    uint64_t v24 = swift_initStackObject();
    *(_OWORD *)(v24 + 16)  = xmmword_1003B2450;
    *(void *)(v24 + 64)  = v18;
    *(void *)(v24 + 32)  = v19;
    *(void *)(v24 + 40)  = v20;
    swift_bridgeObjectRetain();
    uint64_t v25 = v19;
    uint64_t v26 = v20;
    unint64_t v27 = sub_10001FD04(v24);
    sub_100162574(v27, v15);
    CFDictionaryRef v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDictionaryRef v29 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v23 = SecItemUpdate(v28, v29);

    uint64_t v30 = (void *)a3;
    if (!v23) {
      return v23 == 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)a3;
    if (!v23) {
      return v23 == 0;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315394;
    v44[0]  = v34;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v43;
    v35._object  = v30;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 39;
    v36._object  = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    sub_100010680(39, 0xE100000000000000, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12)  = 2080;
    CFStringRef v37 = SecCopyErrorMessageString(v23, 0);
    if (v37)
    {
      os_log_t v38 = (__CFString *)v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;
    }
    else
    {
      unint64_t v41 = 0xE700000000000000;
      uint64_t v39 = 0x6E776F6E6B6E75;
    }
    sub_100010680(v39, v41, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to add the generated private identity to the keychain for %s with error: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return v23 == 0;
}

BOOL AppleKeychain.save(identity:for:publicly:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  char v47 = v7;
  uint64_t v8 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  uint64_t v15 = UUID.uuidString.getter();
  char v45 = v47;
  uint64_t v46 = a2;
  uint64_t v48 = (void *)a3;
  unint64_t v17 = sub_100162600(v8, v10, v11, v12, v13, v14, a2, a3, v15, v16, v45);
  sub_10000C970(v8, v10);
  swift_bridgeObjectRelease();
  sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2450;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0);
  uint64_t v20 = v19;
  *(void *)(inited + 64)  = v19;
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  unint64_t v21 = (id)kSecClass;
  uint64_t v22 = (id)kSecClassGenericPassword;
  unint64_t v23 = sub_10001FD04(inited);
  sub_100162574(v23, v17);
  sub_10016A508(&qword_10047C840, type metadata accessor for CFString);
  isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v25 = SecItemAdd(isa, 0);

  if (v25 == -25299)
  {
    uint64_t v26 = swift_initStackObject();
    *(_OWORD *)(v26 + 16)  = xmmword_1003B2450;
    *(void *)(v26 + 64)  = v20;
    *(void *)(v26 + 32)  = v21;
    *(void *)(v26 + 40)  = v22;
    swift_bridgeObjectRetain();
    unint64_t v27 = v21;
    CFDictionaryRef v28 = v22;
    unint64_t v29 = sub_10001FD04(v26);
    sub_100162574(v29, v17);
    CFDictionaryRef v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDictionaryRef v31 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v25 = SecItemUpdate(v30, v31);

    os_log_type_t v32 = v48;
    if (!v25) {
      return v25 == 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v32 = v48;
    if (!v25) {
      return v25 == 0;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    v49[0]  = v36;
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = v46;
    v37._object  = v32;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = 39;
    v38._object  = (void *)0xE100000000000000;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    sub_100010680(39, 0xE100000000000000, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12)  = 2080;
    CFStringRef v39 = SecCopyErrorMessageString(v25, 0);
    if (v39)
    {
      unint64_t v40 = (__CFString *)v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;
    }
    else
    {
      unint64_t v43 = 0xE700000000000000;
      uint64_t v41 = 0x6E776F6E6B6E75;
    }
    sub_100010680(v41, v43, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to add the generated public identity to the keychain for %s with error: %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return v25 == 0;
}

Swift::Void __swiftcall AppleKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  object  = a1.string._object;
  uint64_t countAndFlagsBits = a1.string._countAndFlagsBits;
  sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2760;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v5;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v5;
  *(void *)(inited + 112)  = kSecAttrService;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 120)  = countAndFlagsBits;
  *(void *)(inited + 128)  = object;
  CFStringRef v6 = (id)kSecClass;
  CFStringRef v7 = (id)kSecClassGenericPassword;
  CFStringRef v8 = (id)kSecAttrSynchronizable;
  CFStringRef v9 = (id)kSecAttrSynchronizableAny;
  CFStringRef v10 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  sub_10001FD04(inited);
  sub_10016A508(&qword_10047C840, type metadata accessor for CFString);
  v11.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v12 = SecItemDelete(v11.super.isa);
  if (v12)
  {
    CFStringRef v13 = SecCopyErrorMessageString(v12, 0);
    if (v13)
    {
      uint64_t v14 = (__CFString *)v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE700000000000000;
      uint64_t v15 = 0x6E776F6E6B6E75;
    }
    sub_100168184(v15, v17, v1, countAndFlagsBits, object, "Failed to delete all device identities from the keychain for %s with error: %s");

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

void sub_100168184(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, const char *a6)
{
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  oslog  = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v17 = v13;
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = a4;
    v14._object  = a5;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 39;
    v15._object  = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_100010680(39, 0xE100000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12)  = 2080;
    swift_bridgeObjectRetain();
    sub_100010680(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, a6, (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void AppleKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100010BCC(&qword_100480938);
  inited  = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B7330;
  *(void *)(inited + 32)  = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40)  = kSecClassGenericPassword;
  *(void *)(inited + 64)  = v6;
  *(void *)(inited + 72)  = kSecAttrSynchronizable;
  *(void *)(inited + 80)  = kSecAttrSynchronizableAny;
  *(void *)(inited + 104)  = v6;
  *(void *)(inited + 112)  = kSecAttrService;
  *(void *)(inited + 120)  = a2;
  *(void *)(inited + 128)  = a3;
  *(void *)(inited + 144)  = &type metadata for String;
  *(void *)(inited + 152)  = kSecAttrAccount;
  CFStringRef v7 = (id)kSecClass;
  CFStringRef v8 = (id)kSecClassGenericPassword;
  CFStringRef v9 = (id)kSecAttrSynchronizable;
  CFStringRef v10 = (id)kSecAttrSynchronizableAny;
  CFStringRef v11 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  CFStringRef v12 = (id)kSecAttrAccount;
  uint64_t v13 = UUID.uuidString.getter();
  *(void *)(inited + 184)  = &type metadata for String;
  *(void *)(inited + 160)  = v13;
  *(void *)(inited + 168)  = v14;
  sub_10001FD04(inited);
  sub_10016A508(&qword_10047C840, type metadata accessor for CFString);
  v15.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v16 = SecItemDelete(v15.super.isa);
  if (v16)
  {
    CFStringRef v17 = SecCopyErrorMessageString(v16, 0);
    if (v17)
    {
      uint64_t v18 = (__CFString *)v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v21 = 0xE700000000000000;
      uint64_t v19 = 0x6E776F6E6B6E75;
    }
    sub_1001685CC(v19, v21, v22, a1, a2, a3);

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

void sub_1001685CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  CFStringRef v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016A42C(a4, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v22 = a5;
    uint64_t v26 = v16;
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v23 = a1;
    type metadata accessor for UUID();
    sub_10016A508((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v24 = sub_100010680(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10016A550((uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    *(_WORD *)(v15 + 12)  = 2080;
    uint64_t v24 = 39;
    unint64_t v25 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v22;
    v19._object  = a6;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = 39;
    v20._object  = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100010680(v24, v25, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22)  = 2080;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100010680(v23, a2, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to delete the device identity %s from the keychain for %s with error: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10016A550((uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t AppleKeychain.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AppleKeychain.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100168ABC(uint64_t a1, uint64_t a2)
{
  return AppleKeychain.monitor(using:)(a1, a2);
}

uint64_t sub_100168AE0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = sub_100033F34(a1);
  swift_endAccess();
  sub_1001629AC();
  if (v2) {
    sub_100011E30(v2);
  }
  swift_beginAccess();
  sub_100173E14(a1);
  return swift_endAccess();
}

void *sub_100168B9C(uint64_t a1, uint64_t a2, void *a3)
{
  return AppleKeychain.findIdentities(for:)(a1, a2, a3);
}

BOOL sub_100168BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleKeychain.save(identity:for:)(a1, a2, a3);
}

BOOL sub_100168BE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return AppleKeychain.save(identity:for:publicly:)(a1, a2, a3, a4);
}

void sub_100168C10(uint64_t a1, uint64_t a2)
{
}

void sub_100168C34(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_100168C58()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v8 = v11 + 4;
            if (v11 + 4 >= v6) {
              goto LABEL_25;
            }
            unint64_t v12 = *(void *)(v2 + 8 * v8);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_5:
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 56) + 16 * v10))();
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t (*sub_100168DE8(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24)  = v1;
  swift_beginAccess();
  return sub_100168E40;
}

uint64_t sub_100168E40(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_100168C58();
  }
  return result;
}

void *InMemoryKeychain.__allocating_init()()
{
  uint64_t result = (void *)swift_allocObject();
  result[2]  = &_swiftEmptyDictionarySingleton;
  result[3]  = &_swiftEmptySetSingleton;
  result[4]  = 0;
  result[5]  = &_swiftEmptyDictionarySingleton;
  return result;
}

void *InMemoryKeychain.init()()
{
  uint64_t result = v0;
  v0[2]  = &_swiftEmptyDictionarySingleton;
  v0[3]  = &_swiftEmptySetSingleton;
  v0[4]  = 0;
  v0[5]  = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t InMemoryKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = sub_100156EAC();
  char v8 = v7;
  uint64_t result = swift_endAccess();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16)  = a1;
    *(void *)(v10 + 24)  = a2;
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *(void *)(v3 + 40);
    *(void *)(v3 + 40)  = 0x8000000000000000;
    sub_100034D6C((uint64_t)sub_10017AAF0, v10, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 40)  = v12;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v6;
  }
  return result;
}

Swift::Void __swiftcall InMemoryKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 40);
  swift_beginAccess();
  unint64_t v4 = sub_100031764(a1);
  if (v5)
  {
    unint64_t v6 = v4;
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t v9 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100171E44();
      uint64_t v8 = v9;
    }
    sub_10016FC28(v6, v8);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t InMemoryKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100010BCC(&qword_100480960);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin();
  int64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(int *)(v11 + 48);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v3 + 16);
  if (*(void *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_100031638(a2, a3);
    if (v17)
    {
      sub_1000136F4(*(void *)(v15 + 56) + *(void *)(v10 + 72) * v16, (uint64_t)v8, (uint64_t *)&unk_10047CF20);
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      uint64_t v21 = *(int *)(v9 + 48);
      sub_10006EC68((uint64_t)v8, (uint64_t)v13, &qword_100480930);
      uint64_t v20 = *(void *)&v8[v21];
      *(void *)&v13[v14]  = v20;
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  uint64_t v19 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  *(void *)&v13[v14]  = _swiftEmptyArrayStorage;
  sub_1000380B4((uint64_t)v8, &qword_100480960);
  uint64_t v20 = *(void *)&v13[v14];
LABEL_9:
  sub_10006EC68((uint64_t)v13, a1, &qword_100480930);
  return v20;
}

uint64_t InMemoryKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v32 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t v34 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480930);
  __chkstk_darwin();
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016A42C(a1, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  uint64_t v13 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v30[1]  = v14 + 56;
  CFDictionaryRef v31 = v15;
  v15(v12, 0, 1, v13);
  unint64_t v16 = (void *)(v5 + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = *(void *)(v5 + 16);
  uint64_t v18 = v35;
  *(void *)(v5 + 16)  = 0x8000000000000000;
  uint64_t v33 = a2;
  unint64_t v20 = sub_100031638(a2, a3);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v4 = v19;
  if (*(void *)(v18 + 24) >= v23)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_10:
    sub_10017187C();
    uint64_t v18 = v35;
    goto LABEL_6;
  }
  sub_10016C770(v23, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = v35;
  unint64_t v24 = sub_100031638(v33, a3);
  if ((v4 & 1) != (v25 & 1))
  {
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v24;
LABEL_6:
  *unint64_t v16 = v18;
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)*v16;
  if ((v4 & 1) == 0)
  {
    uint64_t v27 = *(int *)(v32 + 48);
    v31(v10, 1, 1, v13);
    *(void *)&v10[v27]  = _swiftEmptyArrayStorage;
    sub_10017292C(v20, v33, a3, (uint64_t)v10, v26);
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = v26[7] + *(void *)(v34 + 72) * v20;
  swift_bridgeObjectRetain();
  sub_100175F64((uint64_t)v12, v28);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100168C58();
  return 1;
}

Swift::Void __swiftcall InMemoryKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  object  = a1.string._object;
  uint64_t countAndFlagsBits = a1.string._countAndFlagsBits;
  sub_100010BCC(&qword_100480960);
  __chkstk_darwin();
  char v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_100033FE0(countAndFlagsBits, (uint64_t)object, (uint64_t)v4);
  sub_1000380B4((uint64_t)v4, &qword_100480960);
  swift_endAccess();
  sub_100168C58();
}

uint64_t InMemoryKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = a3;
  uint64_t v67 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v59 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100010BCC((uint64_t *)&unk_100486400);
  __chkstk_darwin();
  uint64_t v68 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100480960);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v63 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v16 = (char *)&v58 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v58 - v17;
  swift_beginAccess();
  uint64_t v62 = v3;
  uint64_t v19 = *(void *)(v3 + 16);
  if (*(void *)(v19 + 16))
  {
    uint64_t v20 = v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_100031638(v67, v20);
    if (v22)
    {
      unint64_t v23 = v21;
      unint64_t v61 = v11;
      uint64_t v24 = a1;
      uint64_t v25 = v6;
      uint64_t v26 = *(void *)(v19 + 56);
      uint64_t v27 = sub_100010BCC((uint64_t *)&unk_10047CF20);
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v58 = v18;
      uint64_t v29 = v28;
      uint64_t v30 = v26 + *(void *)(v28 + 72) * v23;
      uint64_t v6 = v25;
      a1  = v24;
      uint64_t v11 = v61;
      sub_1000136F4(v30, (uint64_t)v13, (uint64_t *)&unk_10047CF20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v13, 0, 1, v27);
      uint64_t v18 = v58;
    }
    else
    {
      uint64_t v32 = sub_100010BCC((uint64_t *)&unk_10047CF20);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = sub_100010BCC((uint64_t *)&unk_10047CF20);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v13, 1, 1, v31);
  }
  uint64_t v33 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(char **)(v34 + 48);
  uint64_t v60 = v34 + 48;
  unint64_t v61 = v35;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v35)(v13, 1, v33)
    || (*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v13, 1, v65))
  {
    sub_1000380B4((uint64_t)v13, &qword_100480960);
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v36(v18, 1, 1, v5);
    uint64_t v37 = v6;
    Swift::String v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  }
  else
  {
    sub_10016A42C((uint64_t)v13, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_1000380B4((uint64_t)v13, &qword_100480960);
    Swift::String v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v57 = (uint64_t)v11;
    uint64_t v37 = v6;
    v38(v18, v57, v5);
    sub_10016A550(v57, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v36(v18, 0, 1, v5);
  }
  v38(v16, a1, v5);
  v36(v16, 0, 1, v5);
  uint64_t v39 = v68;
  uint64_t v40 = v68 + *(int *)(v66 + 48);
  sub_1000136F4((uint64_t)v18, v68, &qword_1004862B0);
  uint64_t v41 = v39;
  sub_1000136F4((uint64_t)v16, v40, &qword_1004862B0);
  uint64_t v42 = v37;
  unint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v43(v39, 1, v5) != 1)
  {
    uint64_t v44 = v63;
    sub_1000136F4(v39, v63, &qword_1004862B0);
    if (v43(v40, 1, v5) != 1)
    {
      uint64_t v58 = v18;
      uint64_t v46 = v44;
      uint64_t v47 = v42;
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
      uint64_t v49 = v59;
      v48(v59, v40, v5);
      sub_10016A508(&qword_10047CF30, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
      v51(v49, v5);
      sub_1000380B4((uint64_t)v16, &qword_1004862B0);
      sub_1000380B4((uint64_t)v58, &qword_1004862B0);
      v51((char *)v46, v5);
      uint64_t result = sub_1000380B4(v39, &qword_1004862B0);
      if ((v50 & 1) == 0) {
        return result;
      }
      goto LABEL_17;
    }
    sub_1000380B4((uint64_t)v16, &qword_1004862B0);
    sub_1000380B4((uint64_t)v18, &qword_1004862B0);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v5);
    return sub_1000380B4(v41, (uint64_t *)&unk_100486400);
  }
  sub_1000380B4((uint64_t)v16, &qword_1004862B0);
  uint64_t v41 = v68;
  sub_1000380B4((uint64_t)v18, &qword_1004862B0);
  if (v43(v40, 1, v5) != 1) {
    return sub_1000380B4(v41, (uint64_t *)&unk_100486400);
  }
  sub_1000380B4(v41, &qword_1004862B0);
LABEL_17:
  uint64_t v52 = v69;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_100168DE8((uint64_t)v71);
  uint64_t v54 = sub_10016A08C(v70, v67, v52);
  uint64_t v56 = v55;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v61)(v55, 1, v33))
  {
    sub_1000380B4(v56, &qword_100480930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v56, 1, 1, v65);
  }
  ((void (*)(void *, void))v54)(v70, 0);
  swift_bridgeObjectRelease();
  return v53((uint64_t)v71, 0);
}

void (*sub_100169F8C(void *a1, uint64_t a2))(void *a1)
{
  char v4 = malloc(0x50uLL);
  *a1  = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v4 + 56)  = *(_OWORD *)a2;
  v4[2]  = v5;
  *((_WORD *)v4 + 24)  = *(_WORD *)(a2 + 32);
  sub_100036198((uint64_t)v4 + 56);
  sub_100036198((uint64_t)(v4 + 2));
  *((void *)v4 + 9)  = sub_100172CDC(v4, a2);
  return sub_10016A020;
}

void sub_10016A020(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *a1 + 32;
  uint64_t v3 = *a1 + 56;
  (*(void (**)(void, void))(*a1 + 72))(*a1, 0);
  sub_1000361C4(v3);
  sub_1000361C4(v2);

  free(v1);
}

void (*sub_10016A08C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1  = v6;
  v6[4]  = a3;
  swift_bridgeObjectRetain();
  v6[5]  = sub_100172E20(v6, a2, a3);
  return sub_10016A10C;
}

void sub_10016A10C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t InMemoryKeychain.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InMemoryKeychain.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10016A1F8(uint64_t a1, uint64_t a2)
{
  return InMemoryKeychain.monitor(using:)(a1, a2);
}

void sub_10016A21C(Swift::UInt64 a1)
{
}

uint64_t sub_10016A240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.findIdentities(for:)(a1, a2, a3);
}

uint64_t sub_10016A264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t sub_10016A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0(a1, a2, a3) & 1;
}

uint64_t sub_10016A2B4(uint64_t a1, uint64_t a2)
{
  sub_100010BCC(&qword_100480960);
  __chkstk_darwin();
  long long v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_100033FE0(a1, a2, (uint64_t)v5);
  sub_1000380B4((uint64_t)v5, &qword_100480960);
  swift_endAccess();
  return sub_100168C58();
}

uint64_t sub_10016A384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.remove(identity:for:)(a1, a2, a3);
}

uint64_t type metadata accessor for LongTermPairingKeys(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004809C0);
}

uint64_t type metadata accessor for LongTermPairingKeys.PrivateIdentity(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100480A58);
}

uint64_t type metadata accessor for LongTermPairingKeys.PairedDevices()
{
  return self;
}

uint64_t type metadata accessor for LongTermPairingKeys.Identity(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100480FE8);
}

uint64_t sub_10016A42C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for LongTermPairingKeys.PublicIdentity(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_100480AE8);
}

unint64_t sub_10016A4B4()
{
  unint64_t result = qword_1004808B8;
  if (!qword_1004808B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004808B8);
  }
  return result;
}

uint64_t sub_10016A508(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016A550(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10016A5B0(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v25, v26);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v8 = (unsigned __int16)v23;
    sub_1000369C4(a1, a1[3]);
    uint64_t v9 = dispatch thunk of Decoder.userInfo.getter();
    if (qword_10047BFA8 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1000151B8(v3, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
    if (*(void *)(v9 + 16) && (unint64_t v11 = sub_1000313F0((uint64_t)v6), (v12 & 1) != 0))
    {
      sub_1000107A4(*(void *)(v9 + 56) + 32 * v11, (uint64_t)&v23);
    }
    else
    {
      long long v23 = 0u;
      long long v24 = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (*((void *)&v24 + 1))
    {
      if (swift_dynamicCast() & 1) != 0 && (v27)
      {
        uint64_t v13 = v26;
        sub_100039448((uint64_t)v25, v26);
        uint64_t v14 = UnkeyedDecodingContainer.decodeData(with:)((v8 + 3) & 0x1FFFC, v13);
        unint64_t v16 = v15;
        uint64_t v17 = v14;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        switch(v15 >> 62)
        {
          case 1uLL:
            uint64_t v19 = (int)v17;
            v8 += (int)v17;
            uint64_t v18 = v17 >> 32;
            goto LABEL_21;
          case 2uLL:
            uint64_t v19 = *(void *)(v17 + 16);
            BOOL v22 = __OFADD__(v19, v8);
            v8 += v19;
            if (v22) {
              goto LABEL_25;
            }
            uint64_t v18 = *(void *)(v17 + 24);
LABEL_21:
            if (v18 < v19 || v8 < v19)
            {
              __break(1u);
LABEL_25:
              __break(1u);
              JUMPOUT(0x10016A950);
            }
            uint64_t v7 = Data._Representation.subscript.getter();
            sub_10000C970(v17, v16);
            break;
          case 3uLL:
            goto LABEL_21;
          default:
            uint64_t v19 = 0;
            uint64_t v18 = BYTE6(v15);
            goto LABEL_21;
        }
        goto LABEL_17;
      }
    }
    else
    {
      sub_1000380B4((uint64_t)&v23, &qword_10047D0D0);
    }
    uint64_t v20 = v26;
    sub_100039448((uint64_t)v25, v26);
    uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(v8, v20);
LABEL_17:
    sub_100010754((uint64_t)v25);
    sub_100010754((uint64_t)a1);
    return v7;
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_10016A960(void *a1, uint64_t a2, unint64_t a3)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v6)  = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_12;
      }
      unint64_t v6 = (int)v6;
LABEL_5:
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
      if (v6 >> 16)
      {
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x10016AABCLL);
      }
LABEL_7:
      sub_100039448((uint64_t)v11, v12);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (!v3)
      {
        sub_100039448((uint64_t)v11, v12);
        sub_1000742DC();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      }
      return sub_100010754((uint64_t)v11);
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      unint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_5;
      }
      goto LABEL_13;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_10016AACC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_1004883F0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16)  = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      long long v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10003803C(v24, v35);
      }
      else
      {
        sub_1000107A4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1]  = v22;
      uint64_t result = (uint64_t)sub_10003803C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_10016ADCC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810F0);
  char v28 = a2;
  unint64_t v29 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v27 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v5 + 64);
    uint64_t v25 = v2;
    int64_t v26 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v12 >= v26) {
          goto LABEL_22;
        }
        unint64_t v13 = v27[v12];
        ++v9;
        if (!v13)
        {
          int64_t v9 = v12 + 1;
          if (v12 + 1 >= v26) {
            goto LABEL_22;
          }
          unint64_t v13 = v27[v9];
          if (!v13)
          {
            int64_t v14 = v12 + 2;
            if (v14 >= v26)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (v28)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v27 = -1 << v24;
                }
                *(void *)(v5 + 16)  = 0;
              }
              break;
            }
            unint64_t v13 = v27[v14];
            if (!v13)
            {
              while (1)
              {
                int64_t v9 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_29;
                }
                if (v9 >= v26) {
                  goto LABEL_22;
                }
                unint64_t v13 = v27[v9];
                ++v14;
                if (v13) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v9 = v14;
          }
        }
LABEL_19:
        unint64_t v8 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
      }
      uint64_t v15 = *(void *)(v5 + 48) + 40 * v11;
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      char v20 = *(unsigned char *)(v15 + 32);
      char v21 = *(unsigned char *)(v15 + 33);
      uint64_t v22 = *(void **)(*(void *)(v5 + 56) + 8 * v11);
      if ((v28 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v23 = v22;
      }
      v30[0]  = v17;
      v30[1]  = v16;
      v30[2]  = v18;
      v30[3]  = v19;
      char v31 = v20;
      char v32 = v21;
      sub_1001703DC((uint64_t)v30, (uint64_t)v22, v29);
    }
  }
  swift_release();
  void *v3 = v29;
}

void sub_10016B008(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100481068);
  char v33 = a2;
  uint64_t v34 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    char v32 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v5 + 64);
    BOOL v30 = v2;
    int64_t v31 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    for (i  = 0; ; i  = v35)
    {
      if (v8)
      {
        unint64_t v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v35 = i;
        unint64_t v11 = v10 | (i << 6);
      }
      else
      {
        int64_t v12 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v12 >= v31) {
          goto LABEL_22;
        }
        unint64_t v13 = v32[v12];
        int64_t v14 = i + 1;
        if (!v13)
        {
          int64_t v14 = i + 2;
          if (i + 2 >= v31) {
            goto LABEL_22;
          }
          unint64_t v13 = v32[v14];
          if (!v13)
          {
            uint64_t v15 = i + 3;
            if (i + 3 >= v31)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v30;
              if (v33)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v32 = -1 << v29;
                }
                *(void *)(v5 + 16)  = 0;
              }
              break;
            }
            unint64_t v13 = v32[v15];
            if (!v13)
            {
              while (1)
              {
                int64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_29;
                }
                if (v14 >= v31) {
                  goto LABEL_22;
                }
                unint64_t v13 = v32[v14];
                ++v15;
                if (v13) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v14 = i + 3;
          }
        }
LABEL_19:
        unint64_t v8 = (v13 - 1) & v13;
        int64_t v35 = v14;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      }
      uint64_t v16 = *(void *)(v5 + 56);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(v5 + 48) + 40 * v11;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t v22 = *(void *)(v18 + 16);
      uint64_t v21 = *(void *)(v18 + 24);
      char v23 = *(unsigned char *)(v18 + 32);
      char v24 = *(unsigned char *)(v18 + 33);
      uint64_t v25 = v16 + 16 * v11;
      int64_t v26 = *(void **)v25;
      char v27 = *(unsigned char *)(v25 + 8);
      if ((v33 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v28 = v26;
      }
      v36[0]  = v19;
      v36[1]  = v20;
      v36[2]  = v22;
      v36[3]  = v21;
      char v37 = v23;
      char v38 = v24;
      sub_100170548((uint64_t)v36, (uint64_t)v26, v27, v34);
      uint64_t v5 = v17;
    }
  }
  swift_release();
  void *v3 = v34;
}

uint64_t sub_10016B264(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100010BCC(&qword_10047CF78);
  int v37 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v10 = 0;
    uint64_t v11 = *(void *)(v7 + 64);
    int64_t v35 = (void *)(v7 + 64);
    uint64_t v12 = 1 << *(unsigned char *)(v7 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v11;
    char v33 = v2;
    int64_t v34 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v14)
      {
        unint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v18 = v17 | (v10 << 6);
      }
      else
      {
        int64_t v19 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v35;
        if (v19 >= v34) {
          goto LABEL_34;
        }
        unint64_t v20 = v35[v19];
        ++v10;
        if (!v20)
        {
          int64_t v10 = v19 + 1;
          if (v19 + 1 >= v34) {
            goto LABEL_34;
          }
          unint64_t v20 = v35[v10];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_41;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v7 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v35 = -1 << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v7 + 16)  = 0;
              break;
            }
            unint64_t v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v10 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_43;
                }
                if (v10 >= v34) {
                  goto LABEL_34;
                }
                unint64_t v20 = v35[v10];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v10 = v21;
          }
        }
LABEL_21:
        unint64_t v14 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
      }
      char v22 = *(unsigned char *)(*(void *)(v7 + 48) + v18);
      uint64_t v23 = *(void *)(v36 + 72);
      uint64_t v24 = *(void *)(v7 + 56) + v23 * v18;
      if (v37) {
        sub_100175E94(v24, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      else {
        sub_10016A42C(v24, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0xDD06050403020100 >> (8 * v22));
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v9 + 48) + v16)  = v22;
      uint64_t result = sub_100175E94((uint64_t)v6, *(void *)(v9 + 56) + v23 * v16, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v9;
  return result;
}

uint64_t sub_10016B618(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100010BCC((uint64_t *)&unk_10047CF00);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    char v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    unint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16)  = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_10003803C((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_1000107A4(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_10003803C(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

uint64_t sub_10016BA14(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810E8);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v12 << 6);
    goto LABEL_31;
  }
  int64_t v21 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_42;
  }
  if (v21 >= v38)
  {
    swift_release();
    uint64_t v3 = v37;
    unint64_t v22 = (void *)(v5 + 64);
    if (v40)
    {
LABEL_37:
      uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
      if (v35 >= 64) {
        bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v22 = -1 << v35;
      }
      *(void *)(v5 + 16)  = 0;
    }
  }
  else
  {
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v39 + 8 * v21);
    ++v12;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v12 = v21 + 1;
    if (v21 + 1 >= v38) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v39 + 8 * v12);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_31:
      char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
      uint64_t v30 = *(void *)(v5 + 56) + 24 * v20;
      unint64_t v31 = *(void **)v30;
      uint64_t v32 = *(void *)(v30 + 8);
      uint64_t v33 = *(void *)(v30 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        id v34 = v31;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      while (++v16 != v26 || (v25 & 1) == 0)
      {
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
        if (v28 != -1)
        {
          unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
LABEL_8:
          *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(unsigned char *)(*(void *)(v7 + 48) + v17)  = v29;
          unint64_t v18 = (void *)(*(void *)(v7 + 56) + 24 * v17);
          *unint64_t v18 = v31;
          v18[1]  = v32;
          v18[2]  = v33;
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x10016BDE0);
    }
    int64_t v24 = v21 + 2;
    if (v24 < v38)
    {
      unint64_t v23 = *(void *)(v39 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v12 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_43;
          }
          if (v12 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = *(void *)(v39 + 8 * v12);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v12 = v24;
      goto LABEL_30;
    }
LABEL_34:
    swift_release();
    uint64_t v3 = v37;
    if (v40) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016BDF4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810E0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1]  = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17)  = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016C10C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_10047CF40);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    unint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      sub_10003803C(v23, v35);
    }
    else
    {
      sub_1000107A4((uint64_t)v23, (uint64_t)v35);
      id v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFString(0);
    sub_10016A508(&qword_10047CF38, type metadata accessor for CFString);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15)  = v22;
    uint64_t result = (uint64_t)sub_10003803C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016C448(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_10047CF80);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    id v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1]  = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1]  = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  id v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v24 = -1 << v38;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016C770(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = *(void *)(sub_100010BCC((uint64_t *)&unk_10047CF20) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100010BCC(&qword_1004810B0);
  int v42 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  int64_t v40 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    unint64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v16;
    if (!v23)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v16];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v16 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v16];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v24;
      }
    }
LABEL_21:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    unint64_t v25 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = *(void *)(v41 + 72);
    uint64_t v29 = *(void *)(v7 + 56) + v28 * v20;
    if (v42)
    {
      sub_10006EC68(v29, (uint64_t)v6, (uint64_t *)&unk_10047CF20);
    }
    else
    {
      sub_1000136F4(v29, (uint64_t)v6, (uint64_t *)&unk_10047CF20);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.lowercased()();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v9 + 48) + 16 * v17);
    *uint64_t v18 = v26;
    v18[1]  = v27;
    uint64_t result = sub_10006EC68((uint64_t)v6, *(void *)(v9 + 56) + v28 * v17, (uint64_t *)&unk_10047CF20);
    ++*(void *)(v9 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v22 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v7 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v37;
  }
  *(void *)(v7 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v9;
  return result;
}

uint64_t sub_10016CB54(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  char v50 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100010BCC(&qword_100481060);
  int v49 = a2;
  uint64_t v10 = v9;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int v45 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v7 + 32);
  uint64_t v52 = v6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v47 = v10;
  unint64_t v20 = v50;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v44) {
      break;
    }
    unint64_t v25 = v45;
    unint64_t v26 = v45[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v26 = v45[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v45[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v44) {
              goto LABEL_34;
            }
            unint64_t v26 = v45[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
    unint64_t v20 = v50;
LABEL_22:
    uint64_t v28 = v7;
    uint64_t v29 = *(void *)(v7 + 72);
    unint64_t v30 = *(void *)(v10 + 48) + v29 * v23;
    if (v49)
    {
      (*v51)(v20, v30, v52);
      uint64_t v31 = *(void *)(v10 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      sub_100175E94(v31 + v32 * v23, v53, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    }
    else
    {
      (*v46)(v20, v30, v52);
      uint64_t v33 = *(void *)(v10 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      sub_10016A42C(v33 + v32 * v23, v53, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    }
    sub_10016A508(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v20 = v50;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      unint64_t v20 = v50;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*v51)((char *)(*(void *)(v12 + 48) + v29 * v21), (unint64_t)v20, v52);
    uint64_t result = sub_100175E94(v53, *(void *)(v12 + 56) + v32 * v21, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v47;
    uint64_t v7 = v28;
  }
  swift_release();
  uint64_t v3 = v43;
  unint64_t v25 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v25, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v41;
  }
  *(void *)(v10 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v12;
  return result;
}

uint64_t sub_10016D06C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810B8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18)  = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18)  = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016D320(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = *(void *)(sub_100010BCC(&qword_100480500) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100010BCC(&qword_1004810D8);
  int v34 = a2;
  unint64_t v35 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v9 = *(void *)(v7 + 64);
    long long v32 = (void *)(v7 + 64);
    uint64_t v10 = -1;
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    unint64_t v11 = v10 & v9;
    uint64_t v30 = v3;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        unint64_t v17 = v32;
        if (v16 >= v31) {
          goto LABEL_23;
        }
        unint64_t v18 = v32[v16];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_23;
          }
          unint64_t v18 = v32[v13];
          if (!v18)
          {
            int64_t v19 = v16 + 2;
            if (v19 >= v31)
            {
LABEL_23:
              swift_release();
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_30;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v7 + 32);
              if (v28 >= 64) {
                bzero(v17, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v17 = -1 << v28;
              }
              uint64_t v3 = v30;
              *(void *)(v7 + 16)  = 0;
              break;
            }
            unint64_t v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_32;
                }
                if (v13 >= v31) {
                  goto LABEL_23;
                }
                unint64_t v18 = v32[v13];
                ++v19;
                if (v18) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v13 = v19;
          }
        }
LABEL_20:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      uint64_t v20 = *(void *)(v7 + 48) + 40 * v15;
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = *(void *)(v20 + 8);
      uint64_t v23 = *(void *)(v20 + 16);
      uint64_t v24 = *(void *)(v20 + 24);
      char v25 = *(unsigned char *)(v20 + 32);
      char v26 = *(unsigned char *)(v20 + 33);
      uint64_t v27 = *(void *)(v7 + 56) + *(void *)(v33 + 72) * v15;
      if (v34)
      {
        sub_10006EC68(v27, (uint64_t)v6, &qword_100480500);
      }
      else
      {
        sub_1000136F4(v27, (uint64_t)v6, &qword_100480500);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v36[0]  = v21;
      v36[1]  = v22;
      v36[2]  = v23;
      v36[3]  = v24;
      char v37 = v25;
      char v38 = v26;
      uint64_t result = sub_1001706C8((uint64_t)v36, (uint64_t)v6, v35);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  void *v3 = v35;
  return result;
}

uint64_t sub_10016D608(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100481078);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1]  = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17)  = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016D918(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810A8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v33 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    char v22 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
    unint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2) {
      sub_10003803C(v23, v34);
    }
    else {
      sub_1000107A4((uint64_t)v23, (uint64_t)v34);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(unsigned char *)(*(void *)(v7 + 48) + v15)  = v22;
    uint64_t result = (uint64_t)sub_10003803C(v34, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v19, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v31;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016DC5C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_1004810A0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v33 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v13 << 6);
    goto LABEL_31;
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_43;
  }
  if (v21 >= v11)
  {
    swift_release();
    uint64_t v3 = v33;
    char v22 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_38:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v22, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *char v22 = -1 << v31;
      }
      *(void *)(v5 + 16)  = 0;
    }
  }
  else
  {
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v13;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v13 = v21 + 1;
    if (v21 + 1 >= v11) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v13);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
      char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
      uint64_t v30 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v20);
      if (a2) {
        sub_10003803C(v30, v35);
      }
      else {
        sub_1000107A4((uint64_t)v30, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v14 = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v26 || (v25 & 1) == 0)
      {
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
        if (v28 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
LABEL_8:
          *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(unsigned char *)(*(void *)(v7 + 48) + v18)  = v29;
          sub_10003803C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v18));
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x10016E024);
    }
    int64_t v24 = v21 + 2;
    if (v24 < v11)
    {
      unint64_t v23 = *(void *)(v34 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v13 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_44;
          }
          if (v13 >= v11) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v13);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v13 = v24;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = v33;
    if (a2) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016E040(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100481098);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v33 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    char v22 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
    unint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2) {
      sub_10003803C(v23, v34);
    }
    else {
      sub_1000107A4((uint64_t)v23, (uint64_t)v34);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(unsigned char *)(*(void *)(v7 + 48) + v15)  = v22;
    uint64_t result = (uint64_t)sub_10003803C(v34, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v19, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v31;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016E390(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100481090);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v33 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    char v22 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
    unint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2) {
      sub_10003803C(v23, v34);
    }
    else {
      sub_1000107A4((uint64_t)v23, (uint64_t)v34);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(unsigned char *)(*(void *)(v7 + 48) + v15)  = v22;
    uint64_t result = (uint64_t)sub_10003803C(v34, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v19, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v31;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10016E6B8(uint64_t a1, char a2)
{
  return sub_10016E718(a1, a2, &qword_100481088, (void (*)(uint64_t))sub_100184BC8);
}

uint64_t sub_10016E6D8(uint64_t a1, char a2)
{
  return sub_10016E718(a1, a2, &qword_100481080, (void (*)(uint64_t))sub_100185E3C);
}

uint64_t sub_10016E6F8(uint64_t a1, char a2)
{
  return sub_10016E718(a1, a2, &qword_100481070, (void (*)(uint64_t))sub_1001C9034);
}

uint64_t sub_10016E718(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  sub_100010BCC(a3);
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v34 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v8 + 64);
    int64_t v33 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v16 << 6);
      }
      else
      {
        int64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v33) {
          goto LABEL_34;
        }
        unint64_t v21 = v34[v20];
        ++v16;
        if (!v21)
        {
          int64_t v16 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v21 = v34[v16];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v6 = v4;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v8 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v8 + 16)  = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v16 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v21 = v34[v16];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v22;
          }
        }
LABEL_21:
        unint64_t v13 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      uint64_t v23 = *(unsigned __int8 *)(*(void *)(v8 + 48) + v19);
      uint64_t v24 = (_OWORD *)(*(void *)(v8 + 56) + 32 * v19);
      if (a2) {
        sub_10003803C(v24, v35);
      }
      else {
        sub_1000107A4((uint64_t)v24, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      a4(v23);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v17 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v10 + 48) + v17)  = v23;
      uint64_t result = (uint64_t)sub_10003803C(v35, (_OWORD *)(*(void *)(v10 + 56) + 32 * v17));
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v6 = v10;
  return result;
}

unint64_t sub_10016EA24(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1]  = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016EBFC(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v26 = v4;
      uint64_t v27 = v2;
      unint64_t v28 = (result + 1) & v7;
      do
      {
        uint64_t v8 = 40 * v6;
        Swift::UInt8 v9 = *(unsigned char *)(*(void *)(v2 + 48) + 40 * v6 + 33);
        Hasher.init(_seed:)();
        String.lowercased()();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.lowercased()();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(v9);
        swift_bridgeObjectRelease();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v28)
        {
          if (v11 < v28)
          {
            uint64_t v4 = v26;
            uint64_t v2 = v27;
          }
          else
          {
            uint64_t v4 = v26;
            uint64_t v2 = v27;
            if (v3 >= v11) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v26;
          uint64_t v2 = v27;
          if (v11 >= v28 || v3 >= v11)
          {
LABEL_12:
            uint64_t v12 = *(void *)(v2 + 48);
            unint64_t v13 = v12 + 40 * v3;
            uint64_t v14 = (long long *)(v12 + v8);
            if (40 * v3 < v8 || v13 >= (unint64_t)v14 + 40 || v3 != v6)
            {
              long long v15 = *v14;
              long long v16 = v14[1];
              *(void *)(v13 + 32)  = *((void *)v14 + 4);
              *(_OWORD *)unint64_t v13 = v15;
              *(_OWORD *)(v13 + 16)  = v16;
            }
            uint64_t v17 = *(void *)(v2 + 56);
            unint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
            {
              *unint64_t v18 = *v19;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(v2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16)  = v25;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

unint64_t sub_10016EED8(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v26 = v4;
      uint64_t v27 = v2;
      unint64_t v28 = (result + 1) & v7;
      do
      {
        uint64_t v8 = 40 * v6;
        Swift::UInt8 v9 = *(unsigned char *)(*(void *)(v2 + 48) + 40 * v6 + 33);
        Hasher.init(_seed:)();
        String.lowercased()();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.lowercased()();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(v9);
        swift_bridgeObjectRelease();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v28)
        {
          if (v11 < v28)
          {
            uint64_t v4 = v26;
            uint64_t v2 = v27;
          }
          else
          {
            uint64_t v4 = v26;
            uint64_t v2 = v27;
            if (v3 >= v11) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v26;
          uint64_t v2 = v27;
          if (v11 >= v28 || v3 >= v11)
          {
LABEL_12:
            uint64_t v12 = *(void *)(v2 + 48);
            unint64_t v13 = v12 + 40 * v3;
            uint64_t v14 = (long long *)(v12 + v8);
            if (40 * v3 < v8 || v13 >= (unint64_t)v14 + 40 || v3 != v6)
            {
              long long v15 = *v14;
              long long v16 = v14[1];
              *(void *)(v13 + 32)  = *((void *)v14 + 4);
              *(_OWORD *)unint64_t v13 = v15;
              *(_OWORD *)(v13 + 16)  = v16;
            }
            uint64_t v17 = *(void *)(v2 + 56);
            unint64_t v18 = (_OWORD *)(v17 + 16 * v3);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v18 >= v19 + 1))
            {
              *unint64_t v18 = *v19;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(v2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16)  = v25;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

unint64_t sub_10016F1BC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      unint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v37 = v13;
      long long v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v35(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            uint64_t v26 = (_OWORD *)(v25 + 32 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 32 * v10);
            uint64_t v12 = v38;
            if (a1 != v10 || (a1  = v10, v26 >= v27 + 2))
            {
              long long v28 = v27[1];
              *uint64_t v26 = *v27;
              v26[1]  = v28;
              a1  = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016F474(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          uint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = v14 + 24 * v3;
          long long v16 = (long long *)(v14 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= (unint64_t)v16 + 24))
          {
            long long v9 = *v16;
            *(void *)(v15 + 16)  = *((void *)v16 + 2);
            *(_OWORD *)unint64_t v15 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *int64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
    JUMPOUT(0x10016F6F4);
  }
  *(void *)(a2 + 16)  = v22;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_10016F708(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          long long v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *int64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016F8E0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10016A508(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1  = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1  = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1  = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016FC28(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016FDC0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        char v9 = *(unsigned char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(0xDD06050403020100 >> (8 * v9));
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (unsigned char *)(v11 + v3);
        uint64_t v13 = (unsigned char *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016FFC8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        String.lowercased()();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_10047CF20) - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100170204(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v10 = *(unsigned char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        sub_1001C9034(v10);
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (unsigned char *)(v12 + v3);
          uint64_t v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1]  = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16)  = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

__n128 sub_1001703DC(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_WORD *)unint64_t v11 = *(_WORD *)(a1 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v11[1]);
  sub_1000361C4((uint64_t)&v10);
  Hasher._finalize()();
  unint64_t v6 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  uint64_t v7 = a3[6] + 40 * v6;
  __n128 result = *(__n128 *)a1;
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 16)  = v9;
  *(_WORD *)(v7 + 32)  = *(_WORD *)(a1 + 32);
  *(void *)(a3[7] + 8 * v6)  = a2;
  ++a3[2];
  return result;
}

__n128 sub_100170548(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v13 = *(_OWORD *)(a1 + 16);
  *(_WORD *)uint64_t v14 = *(_WORD *)(a1 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v14[1]);
  sub_1000361C4((uint64_t)&v13);
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a4[6] + 40 * v8;
  __n128 result = *(__n128 *)a1;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16)  = v11;
  *(_WORD *)(v9 + 32)  = *(_WORD *)(a1 + 32);
  uint64_t v12 = a4[7] + 16 * v8;
  *(void *)uint64_t v12 = a2;
  *(unsigned char *)(v12 + 8)  = a3;
  ++a4[2];
  return result;
}

uint64_t sub_1001706C8(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_WORD *)long long v13 = *(_WORD *)(a1 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v13[1]);
  sub_1000361C4((uint64_t)&v12);
  Hasher._finalize()();
  unint64_t v6 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  uint64_t v7 = a3[6] + 40 * v6;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 16)  = v8;
  *(_WORD *)(v7 + 32)  = *(_WORD *)(a1 + 32);
  uint64_t v9 = a3[7];
  uint64_t v10 = sub_100010BCC(&qword_100480500);
  uint64_t result = sub_10006EC68(a2, v9 + *(void *)(*(void *)(v10 - 8) + 72) * v6, &qword_100480500);
  ++a3[2];
  return result;
}

void *sub_100170868()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_1004883F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000107A4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1]  = v18;
    sub_10003803C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100170A50()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_1004810F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    char v22 = *(unsigned char *)(v17 + 32);
    uint64_t v23 = 8 * v15;
    int64_t v24 = *(void **)(*(void *)(v2 + 56) + v23);
    LOBYTE(v17)  = *(unsigned char *)(v17 + 33);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v25 = v19;
    *(void *)(v25 + 8)  = v18;
    *(void *)(v25 + 16)  = v20;
    *(void *)(v25 + 24)  = v21;
    *(unsigned char *)(v25 + 32)  = v22;
    *(unsigned char *)(v25 + 33)  = v17;
    *(void *)(*(void *)(v4 + 56) + v23)  = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v24;
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100170C30()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100481068);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    char v22 = *(unsigned char *)(v17 + 32);
    LOBYTE(v17)  = *(unsigned char *)(v17 + 33);
    uint64_t v23 = 16 * v15;
    uint64_t v24 = *(void *)(v2 + 56) + v23;
    uint64_t v25 = *(void **)v24;
    LOBYTE(v24)  = *(unsigned char *)(v24 + 8);
    uint64_t v26 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v26 = v19;
    *(void *)(v26 + 8)  = v18;
    *(void *)(v26 + 16)  = v20;
    *(void *)(v26 + 24)  = v21;
    *(unsigned char *)(v26 + 32)  = v22;
    *(unsigned char *)(v26 + 33)  = v17;
    uint64_t v27 = *(void *)(v4 + 56) + v23;
    *(void *)uint64_t v27 = v25;
    *(unsigned char *)(v27 + 8)  = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v25;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100170E20()
{
  uint64_t v1 = v0;
  uint64_t v23 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CF78);
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v6;
    return result;
  }
  char v22 = v1;
  id result = (void *)(v5 + 64);
  uint64_t v8 = v4 + 64;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v8 + 8 * v9) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16)  = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v8 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    char v17 = *(unsigned char *)(*(void *)(v4 + 48) + v16);
    unint64_t v18 = *(void *)(v23 + 72) * v16;
    sub_10016A42C(*(void *)(v4 + 56) + v18, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    *(unsigned char *)(*(void *)(v6 + 48) + v16)  = v17;
    id result = (void *)sub_100175E94((uint64_t)v3, *(void *)(v6 + 56) + v18, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v8 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100171098()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_10047CF00);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  char v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16)  = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_1000107A4(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_10003803C(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100171340()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_1004810E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    uint64_t v18 = *(void **)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15)  = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    unint64_t v20 = (void *)(*(void *)(v4 + 56) + 24 * v15);
    *unint64_t v20 = v18;
    v20[1]  = v17;
    v20[2]  = v19;
    swift_bridgeObjectRetain();
    id result = v18;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001714FC()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_1004810E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1]  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001716B4()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047CF40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1000107A4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16)  = v17;
    sub_10003803C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10017187C()
{
  uint64_t v1 = v0;
  uint64_t v27 = *(void *)(sub_100010BCC((uint64_t *)&unk_10047CF20) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004810B0);
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v6;
    return result;
  }
  int64_t v24 = v1;
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  uint64_t v25 = v4 + 64;
  int64_t v9 = 0;
  *(void *)(v6 + 16)  = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    unint64_t v19 = *(void *)(v27 + 72) * v14;
    sub_1000136F4(*(void *)(v4 + 56) + v19, (uint64_t)v3, (uint64_t *)&unk_10047CF20);
    unint64_t v20 = (void *)(*(void *)(v6 + 48) + v15);
    *unint64_t v20 = v17;
    v20[1]  = v18;
    sub_10006EC68((uint64_t)v3, *(void *)(v6 + 56) + v19, (uint64_t *)&unk_10047CF20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100171B04()
{
  uint64_t v28 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100481060);
  int64_t v23 = v0;
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16)  = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  uint64_t v24 = v7 + 64;
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v26 = v4 + 32;
  uint64_t v27 = v4 + 16;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v4 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v18, v3);
    unint64_t v19 = *(void *)(v28 + 72) * v17;
    sub_10016A42C(*(void *)(v7 + 56) + v19, (uint64_t)v2, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v18, v6, v3);
    id result = (void *)sub_100175E94((uint64_t)v2, *(void *)(v9 + 56) + v19, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v25) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100171E44()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_1004810B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16)  = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18)  = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100171FF0()
{
  uint64_t v37 = *(void *)(sub_100010BCC(&qword_100480500) - 8);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004810D8);
  BOOL v33 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v39 = v3;
  if (!v4)
  {
    uint64_t result = swift_release();
    uint64_t v31 = v39;
    int64_t v30 = v33;
LABEL_25:
    *int64_t v30 = v31;
    return result;
  }
  uint64_t v5 = v3;
  uint64_t v6 = (void *)(v3 + 64);
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v7)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v7);
    uint64_t v5 = v39;
  }
  int64_t v8 = 0;
  *(void *)(v5 + 16)  = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v38 = v2;
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  uint64_t v34 = v2 + 64;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = (uint64_t)v36;
  while (1)
  {
    if (v11)
    {
      uint64_t v40 = (v11 - 1) & v11;
      int64_t v41 = v8;
      unint64_t v13 = __clz(__rbit64(v11)) | (v8 << 6);
      uint64_t result = v38;
      goto LABEL_9;
    }
    int64_t v26 = v8 + 1;
    uint64_t result = v38;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v35) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    int64_t v28 = v8 + 1;
    if (!v27)
    {
      int64_t v28 = v8 + 2;
      if (v8 + 2 >= v35) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v34 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    uint64_t v40 = (v27 - 1) & v27;
    int64_t v41 = v28;
    unint64_t v13 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    uint64_t v15 = 40 * v13;
    uint64_t v16 = *(void *)(result + 48) + 40 * v13;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = *(void *)(v16 + 24);
    char v21 = *(unsigned char *)(v16 + 32);
    char v22 = *(unsigned char *)(v16 + 33);
    unint64_t v23 = *(void *)(v37 + 72) * v13;
    sub_1000136F4(*(void *)(result + 56) + v23, v12, &qword_100480500);
    uint64_t v24 = v39;
    uint64_t v25 = *(void *)(v39 + 48) + v15;
    *(void *)uint64_t v25 = v18;
    *(void *)(v25 + 8)  = v17;
    *(void *)(v25 + 16)  = v19;
    *(void *)(v25 + 24)  = v20;
    *(unsigned char *)(v25 + 32)  = v21;
    *(unsigned char *)(v25 + 33)  = v22;
    sub_10006EC68(v12, *(void *)(v24 + 56) + v23, &qword_100480500);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = v40;
    int64_t v8 = v41;
  }
  uint64_t v29 = v8 + 3;
  if (v8 + 3 >= v35)
  {
LABEL_23:
    uint64_t result = swift_release();
    int64_t v30 = v33;
    uint64_t v31 = v39;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v34 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v8 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v35) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v34 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_1001722CC()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100481078);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = *v17;
    v21[1]  = v18;
    *(void *)(*(void *)(v4 + 56) + v19)  = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100172480()
{
  return sub_1001724B0(&qword_1004810A8);
}

void *sub_10017248C()
{
  return sub_1001724B0(&qword_1004810A0);
}

void *sub_100172498()
{
  return sub_1001724B0(&qword_100481098);
}

void *sub_1001724A4()
{
  return sub_1001724B0(&qword_100481090);
}

void *sub_1001724B0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100010BCC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16)  = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    char v17 = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    sub_1000107A4(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v21);
    *(unsigned char *)(*(void *)(v5 + 48) + v16)  = v17;
    id result = sub_10003803C(v21, (_OWORD *)(*(void *)(v5 + 56) + 32 * v16));
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100172668()
{
  return sub_1001724B0(&qword_100481088);
}

void *sub_100172674()
{
  return sub_1001724B0(&qword_100481080);
}

void *sub_100172680()
{
  return sub_1001724B0(&qword_100481070);
}

_OWORD *sub_10017268C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1]  = a3;
  id result = sub_10003803C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2]  = v10;
  }
  return result;
}

unint64_t sub_1001726F8(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 40 * result;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16)  = v5;
  *(_WORD *)(v4 + 32)  = *(_WORD *)(a2 + 32);
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

unint64_t sub_100172750(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 40 * result;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16)  = v6;
  *(_WORD *)(v5 + 32)  = *(_WORD *)(a2 + 32);
  uint64_t v7 = a5[7] + 16 * result;
  *(void *)uint64_t v7 = a3;
  *(unsigned char *)(v7 + 8)  = a4;
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2]  = v10;
  }
  return result;
}

_OWORD *sub_1001727B0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  id result = sub_10003803C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

unint64_t sub_100172870(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a6[6] + result)  = a2;
  long long v6 = (void *)(a6[7] + 24 * result);
  *long long v6 = a3;
  v6[1]  = a4;
  void v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2]  = v9;
  }
  return result;
}

_OWORD *sub_1001728C4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1)  = a2;
  id result = sub_10003803C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

uint64_t sub_10017292C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1]  = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t result = sub_10006EC68(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_10047CF20);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2]  = v14;
  }
  return result;
}

uint64_t sub_1001729D8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t result = sub_100175E94(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2]  = v15;
  }
  return result;
}

unint64_t sub_100172AC8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result)  = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1]  = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2]  = v8;
  }
  return result;
}

uint64_t sub_100172B10(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1)  = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  uint64_t result = sub_100175E94(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2]  = v12;
  }
  return result;
}

_OWORD *sub_100172BC0(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1)  = a2 & 1;
  uint64_t result = sub_10003803C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

_OWORD *sub_100172C2C(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1)  = a2;
  uint64_t result = sub_10003803C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2]  = v8;
  }
  return result;
}

unint64_t sub_100172C94(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1]  = a3;
  *(void *)(a5[7] + 8 * result)  = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2]  = v8;
  }
  return result;
}

void (*sub_100172CDC(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x78uLL);
  *a1  = v4;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v4 + 88)  = *(_OWORD *)a2;
  v4[4]  = v6;
  *((_WORD *)v4 + 40)  = *(_WORD *)(a2 + 32);
  sub_100036198((uint64_t)v4 + 88);
  sub_100036198((uint64_t)(v4 + 4));
  *((void *)v4 + 13)  = sub_100173364(v4);
  *((void *)v4 + 14)  = sub_100172F40((void *)v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100172DA0;
}

void sub_100172DA0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 104);
  (*(void (**)(void))(*(void *)a1 + 112))();
  sub_1000361C4((uint64_t)v1 + 88);
  sub_1000361C4((uint64_t)v1 + 64);
  v2(v1, 0);

  free(v1);
}

void (*sub_100172E20(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  long long v6 = malloc(0x58uLL);
  *a1  = v6;
  v6[8]  = a3;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9]  = sub_1001733A0(v6);
  v6[10]  = sub_1001730D0(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100172ECC;
}

void sub_100172ECC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_100172F40(void *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1  = v8;
  void v8[2] = a2;
  _OWORD v8[3] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_1000312E0(a2);
  *((unsigned char *)v8 + 9)  = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4]  = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*v4 + 56) + 16 * v11;
        uint64_t v18 = *(void *)v17;
        char v19 = *(unsigned char *)(v17 + 8);
LABEL_12:
        *uint64_t v8 = v18;
        *((unsigned char *)v8 + 8)  = v19;
        return sub_100173080;
      }
LABEL_11:
      uint64_t v18 = 0;
      char v19 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100170C30();
      goto LABEL_7;
    }
    sub_10016B008(v14, a3 & 1);
    unint64_t v20 = sub_1000312E0(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v11 = v20;
      v8[4]  = v20;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100173080(uint64_t *a1)
{
  uint64_t v1 = (id *)*a1;
  sub_1001733D0(*a1, *(unsigned char *)(*a1 + 9), *(uint64_t **)(*a1 + 24), *(void *)(*a1 + 32), *(void *)(*a1 + 16));

  free(v1);
}

void (*sub_1001730D0(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1  = v10;
  v10[1]  = a3;
  void v10[2] = v4;
  *char v10 = a2;
  uint64_t v11 = sub_100010BCC(&qword_100480960);
  uint64_t v12 = malloc(*(void *)(*(void *)(v11 - 8) + 64));
  v10[3]  = v12;
  uint64_t v13 = *v4;
  unint64_t v15 = sub_100031638(a2, a3);
  *((unsigned char *)v10 + 40)  = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4]  = v15;
      if (v19)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*v5 + 56);
        uint64_t v22 = sub_100010BCC((uint64_t *)&unk_10047CF20);
        uint64_t v23 = *(void *)(v22 - 8);
        sub_10006EC68(v21 + *(void *)(v23 + 72) * v15, (uint64_t)v12, (uint64_t *)&unk_10047CF20);
        uint64_t v24 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1, v22);
        return sub_100173300;
      }
LABEL_11:
      uint64_t v22 = sub_100010BCC((uint64_t *)&unk_10047CF20);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = 1;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a4 & 1) == 0)
    {
      sub_10017187C();
      goto LABEL_7;
    }
    sub_10016C770(v18, a4 & 1);
    unint64_t v25 = sub_100031638(a2, a3);
    if ((v19 & 1) == (v26 & 1))
    {
      unint64_t v15 = v25;
      v10[4]  = v25;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100173300(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[3];
  sub_1001734B0((uint64_t)v2, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_1000380B4((uint64_t)v2, &qword_100480960);
  free(v2);

  free(v1);
}

uint64_t (*sub_100173364(void *a1))(uint64_t result)
{
  *a1  = *v1;
  a1[1]  = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100173394;
}

uint64_t sub_100173394(uint64_t result)
{
  **(void **)(result + 8)  = *(void *)result;
  return result;
}

uint64_t (*sub_1001733A0(void *a1))(uint64_t result)
{
  *a1  = *v1;
  a1[1]  = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_10017AAE4;
}

id sub_1001733D0(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  BOOL v7 = *(void **)a1;
  if (*(void *)a1)
  {
    char v8 = *(unsigned char *)(a1 + 8) & 1;
    if (a2)
    {
      uint64_t v9 = *(void *)(*a3 + 56) + 16 * a4;
      *(void *)uint64_t v9 = v7;
      *(unsigned char *)(v9 + 8)  = v8;
      goto LABEL_8;
    }
    char v10 = (void *)*a3;
    long long v11 = *(_OWORD *)(a5 + 16);
    long long v16 = *(_OWORD *)a5;
    long long v14 = v11;
    __int16 v15 = *(_WORD *)(a5 + 32);
    uint64_t v13 = v7;
    sub_100172750(a4, a5, (uint64_t)v7, v8, v10);
    sub_100036198((uint64_t)&v16);
    sub_100036198((uint64_t)&v14);
  }
  else
  {
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v13 = 0;
    swift_arrayDestroy();
    sub_10016EED8(a4, *a3);
  }
  BOOL v7 = v13;
LABEL_8:

  return v7;
}

unint64_t sub_1001734B0(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  sub_100010BCC(&qword_100480960);
  __chkstk_darwin();
  long long v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  __int16 v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v17 = (char *)&v20 - v16;
  sub_1000136F4(a1, (uint64_t)v11, &qword_100480960);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    unint64_t result = sub_1000380B4((uint64_t)v11, &qword_100480960);
    if (a2)
    {
      swift_arrayDestroy();
      return sub_10016FFC8(a4, *a3);
    }
  }
  else
  {
    sub_10006EC68((uint64_t)v11, (uint64_t)v17, (uint64_t *)&unk_10047CF20);
    char v19 = (void *)*a3;
    if (a2)
    {
      return sub_10006EC68((uint64_t)v17, v19[7] + *(void *)(v13 + 72) * a4, (uint64_t *)&unk_10047CF20);
    }
    else
    {
      sub_10006EC68((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_10047CF20);
      sub_10017292C(a4, v20, v21, (uint64_t)v15, v19);
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

void *sub_1001736D8()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047FB08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15)  = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100173870()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047FB70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16)  = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100173A1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486B40);
  uint64_t v5 = *v0;
  uint64_t v6 = static _SetStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_25:
    id result = (void *)swift_release();
    *uint64_t v1 = v7;
    return result;
  }
  id result = (void *)(v6 + 56);
  uint64_t v9 = v5 + 56;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 56), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16)  = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v15) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v15) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v11);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v2 + 72) * v17;
    sub_10016A42C(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for AWDLPeer.AdvertisedService);
    id result = (void *)sub_100175E94((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v15) {
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100173C80()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_10047C900);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16)  = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15)  = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100173E14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001736D8();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1001743D4(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100173F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v4 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  AWDLPeer.AdvertisedService.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v41 = v8 + 56;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    uint64_t v29 = v36;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v4);
  }
  BOOL v33 = v2;
  uint64_t v34 = v5;
  uint64_t v35 = v4;
  uint64_t v38 = ~v10;
  uint64_t v39 = *(void *)(v5 + 72);
  uint64_t v40 = v8;
  while (1)
  {
    uint64_t v12 = *(void *)(v8 + 48);
    unint64_t v37 = v39 * v11;
    sub_10016A42C(v12 + v39 * v11, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    uint64_t v13 = *((void *)v7 + 1);
    uint64_t v14 = *((void *)v7 + 2);
    uint64_t v15 = *((void *)v7 + 3);
    uint64_t v16 = *((void *)v7 + 4);
    int v17 = v7[40];
    int v43 = v7[41];
    int v44 = v17;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v21 = *(void *)(a1 + 32);
    int v22 = *(unsigned __int8 *)(a1 + 40);
    int v42 = *(unsigned __int8 *)(a1 + 41);
    uint64_t v47 = v13;
    uint64_t v48 = v14;
    uint64_t v45 = v18;
    uint64_t v46 = v19;
    sub_10001D82C();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
      goto LABEL_3;
    }
    uint64_t v47 = v15;
    uint64_t v48 = v16;
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
      goto LABEL_3;
    }
    uint64_t v23 = v44 ? 7365749 : 7365492;
    uint64_t v24 = v22 ? 7365749 : 7365492;
    if (v23 == v24) {
      break;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    if (v25) {
      goto LABEL_16;
    }
LABEL_3:
    sub_10016A550((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
LABEL_4:
    unint64_t v11 = (v11 + 1) & v38;
    uint64_t v8 = v40;
    if (((*(void *)(v41 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = 1;
      uint64_t v4 = v35;
      uint64_t v29 = v36;
      uint64_t v5 = v34;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v4);
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_16:
  sub_10016A550((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
  if (v43 != v42) {
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v26 = v33;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v26;
  uint64_t v47 = *v26;
  *char v26 = 0x8000000000000000;
  uint64_t v5 = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100173A1C();
    uint64_t v28 = v47;
  }
  uint64_t v29 = v36;
  sub_100175E94(*(void *)(v28 + 48) + v37, v36, type metadata accessor for AWDLPeer.AdvertisedService);
  sub_10017455C(v11);
  *char v26 = v47;
  swift_bridgeObjectRelease();
  uint64_t v30 = 0;
  uint64_t v4 = v35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v4);
}

uint64_t sub_1001742AC(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  int v5 = 1;
  uint64_t v6 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = *(void *)(v4 + 48);
    if (*(unsigned __int8 *)(v9 + v8) == a1)
    {
LABEL_6:
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v2;
      uint64_t v15 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100173C80();
        uint64_t v12 = v15;
      }
      int v13 = *(unsigned __int8 *)(*(void *)(v12 + 48) + v8);
      sub_1001748F4(v8);
      *uint64_t v2 = v15;
      swift_bridgeObjectRelease();
      int v5 = 0;
    }
    else
    {
      uint64_t v10 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v9 + v8) == a1) {
          goto LABEL_6;
        }
      }
      int v13 = 0;
      int v5 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  return v13 | (v5 << 8);
}

unint64_t sub_1001743D4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    id result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16)  = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10017455C(int64_t a1)
{
  uint64_t v28 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t result = __chkstk_darwin();
  unint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v27 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v3 + 72);
      uint64_t v30 = v7;
      uint64_t v31 = v8;
      uint64_t v32 = v11;
      uint64_t v29 = v14;
      do
      {
        uint64_t v15 = *(void *)(v7 + 48);
        int64_t v33 = v14 * v10;
        int64_t v34 = a1;
        sub_10016A42C(v15 + v14 * v10, (uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        Hasher.init(_seed:)();
        Swift::UInt8 v16 = v6[41];
        String.lowercased()();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.lowercased()();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(v16);
        a1  = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        Swift::Int v17 = Hasher._finalize()();
        uint64_t v18 = v32;
        Swift::Int v19 = v17;
        sub_10016A550((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        unint64_t v20 = v19 & v18;
        if (a1 >= (uint64_t)v13)
        {
          if (v20 < v13)
          {
            uint64_t v7 = v30;
            uint64_t v8 = v31;
            uint64_t v14 = v29;
            goto LABEL_6;
          }
          uint64_t v7 = v30;
          uint64_t v8 = v31;
          uint64_t v14 = v29;
          if (a1 < (uint64_t)v20) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v7 = v30;
          uint64_t v8 = v31;
          uint64_t v14 = v29;
          if (v20 < v13 && a1 < (uint64_t)v20) {
            goto LABEL_6;
          }
        }
        int64_t v21 = v14 * a1;
        if (v14 * a1 < v33 || *(void *)(v7 + 48) + v14 * a1 >= (unint64_t)(*(void *)(v7 + 48) + v33 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1  = v10;
          if (v21 == v33) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1  = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v18;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v27;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v22 = *v1;
  uint64_t v23 = *(void *)(*v1 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v22 + 16)  = v25;
    ++*(_DWORD *)(v22 + 36);
  }
  return result;
}

unint64_t sub_1001748F4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (unsigned char *)(v10 + v6);
        uint64_t v12 = static Hasher._hash(seed:bytes:count:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (unsigned char *)(v10 + v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16)  = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100174A80(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v47 = a1;
  uint64_t v48 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v49 = v8;
  uint64_t v50 = 0;
  uint64_t v51 = v11 & v9;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001CBCA0((uint64_t)&v45);
  uint64_t v12 = v45;
  if (!v45) {
    goto LABEL_26;
  }
  sub_10003803C(v46, v44);
  unint64_t v13 = *(void **)a5;
  unint64_t v15 = sub_100031584((uint64_t)v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_1001716B4();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15)  = v12;
    sub_10003803C(v44, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v23[2]  = v26;
LABEL_16:
    sub_1001CBCA0((uint64_t)&v45);
    for (i  = v45; v45; i  = v45)
    {
      sub_10003803C(v46, v44);
      uint64_t v30 = *(void **)a5;
      unint64_t v31 = sub_100031584((uint64_t)i);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        goto LABEL_27;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_10016C10C(v35, 1);
        unint64_t v31 = sub_100031584((uint64_t)i);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_29;
        }
      }
      if (v36)
      {
        uint64_t v28 = 32 * v31;
        sub_1000107A4(*(void *)(*(void *)a5 + 56) + 32 * v31, (uint64_t)v42);
        sub_1000107A4((uint64_t)v42, (uint64_t)v43);
        sub_100010754((uint64_t)v42);
        sub_100010754((uint64_t)v44);

        uint64_t v29 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v28);
        sub_100010754((uint64_t)v29);
        sub_10003803C(v43, v29);
      }
      else
      {
        uint64_t v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31)  = i;
        sub_10003803C(v44, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_28;
        }
        long long v38[2] = v40;
      }
      sub_1001CBCA0((uint64_t)&v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10006D44C();
    return swift_release();
  }
  sub_10016C10C(v18, a4 & 1);
  unint64_t v20 = sub_100031584((uint64_t)v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_1000107A4(*(void *)(*(void *)a5 + 56) + 32 * v15, (uint64_t)v42);
    sub_1000107A4((uint64_t)v42, (uint64_t)v43);
    sub_100010754((uint64_t)v42);
    sub_100010754((uint64_t)v44);

    uint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    sub_100010754((uint64_t)v22);
    sub_10003803C(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  type metadata accessor for CFString(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_100174DE8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_1000107A4((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2  = v4;

  return v4;
}

uint64_t _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016A42C(a1, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  unint64_t v13 = (unint64_t *)(v4 + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v36 = *(void *)(v4 + 16);
  unint64_t v15 = v36;
  *(void *)(v4 + 16)  = 0x8000000000000000;
  uint64_t v33 = a2;
  unint64_t v17 = sub_100031638(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    unint64_t v15 = sub_1000C61B8(0, *(void *)(v15 + 16) + 1, 1, v15);
    *(void *)(v17 + v8)  = v15;
    goto LABEL_10;
  }
  char v21 = v16;
  if (*(void *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10017187C();
      unint64_t v15 = v36;
    }
  }
  else
  {
    sub_10016C770(v20, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = v36;
    unint64_t v22 = sub_100031638(v33, a3);
    if ((v21 & 1) != (v23 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v17 = v22;
  }
  uint64_t v24 = v34;
  *unint64_t v13 = v15;
  swift_bridgeObjectRelease();
  BOOL v25 = (void *)*v13;
  if ((v21 & 1) == 0)
  {
    uint64_t v26 = *(int *)(v8 + 48);
    uint64_t v27 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
    *(void *)&v10[v26]  = _swiftEmptyArrayStorage;
    sub_10017292C(v17, v33, a3, (uint64_t)v10, v25);
    swift_bridgeObjectRetain();
  }
  unint64_t v17 = v25[7] + *(void *)(v24 + 72) * v17;
  uint64_t v8 = *(int *)(v8 + 48);
  unint64_t v15 = *(void *)(v17 + v8);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v17 + v8)  = v15;
  if ((v28 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  unint64_t v30 = *(void *)(v15 + 16);
  unint64_t v29 = *(void *)(v15 + 24);
  if (v30 >= v29 >> 1)
  {
    unint64_t v15 = sub_1000C61B8(v29 > 1, v30 + 1, 1, v15);
    *(void *)(v17 + v8)  = v15;
  }
  *(void *)(v15 + 16)  = v30 + 1;
  sub_100175E94((uint64_t)v12, v15+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v30, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_100168C58();
  return 1;
}

void *sub_1001751C4(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  sub_100010BCC(&qword_1004808F8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v36 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v9 = *(void *)(v34 - 8);
  __chkstk_darwin();
  uint64_t v39 = (uint64_t)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v31 - v11;
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v14 = a1;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v38 = (uint64_t *)(v40 + 16);
  swift_beginAccess();
  if (v15)
  {
    unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v40 = *(void *)(v9 + 72);
    v31[1]  = v2;
    unint64_t v32 = v16;
    uint64_t v17 = v14 + v16;
    uint64_t v18 = v36;
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    ++v36;
    char v37 = (void (**)(char *, char *, uint64_t))(v18 + 2);
    BOOL v19 = (uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v33 = v6;
    uint64_t v20 = v34;
    do
    {
      sub_10016A42C(v17, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*v37)(v8, v12, v6);
      uint64_t v22 = *v38;
      if (*(void *)(*v38 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v23 = sub_1000316CC((uint64_t)v8);
        if (v24)
        {
          sub_10016A42C(*(void *)(v22 + 56) + v23 * v40, (uint64_t)v5, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          (*v35)(v5, 0, 1, v20);
        }
        else
        {
          (*v35)(v5, 1, 1, v20);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        (*v35)(v5, 1, 1, v20);
      }
      (*v36)(v8, v6);
      int v25 = (*v19)(v5, 1, v20);
      sub_1000380B4((uint64_t)v5, &qword_1004808F8);
      if (v25 == 1)
      {
        sub_100175E94((uint64_t)v12, v39, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v26 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100083740(0, v26[2] + 1, 1);
          uint64_t v26 = v41;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_100083740(v27 > 1, v28 + 1, 1);
          uint64_t v26 = v41;
        }
        v26[2]  = v28 + 1;
        unint64_t v29 = (char *)v26 + v32;
        uint64_t v21 = v40;
        sub_100175E94(v39, (uint64_t)&v29[v28 * v40], type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v6 = v33;
        uint64_t v20 = v34;
      }
      else
      {
        sub_10016A550((uint64_t)v12, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        uint64_t v21 = v40;
      }
      v17 += v21;
      --v15;
    }
    while (v15);
    return v41;
  }
  return v13;
}

uint64_t sub_10017561C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797469746E656469 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B676E696E676973 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_10017571C(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v29 = type metadata accessor for SymmetricKey();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin();
  unint64_t v10 = (unint64_t)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v28[0]  = (char *)v28 - v11;
  int64_t v12 = 0;
  int64_t v13 = a1;
  while (1)
  {
    BOOL v14 = v13 <= a2;
    if (a3 > 0) {
      BOOL v14 = v13 >= a2;
    }
    if (v14) {
      break;
    }
    BOOL v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15) {
      int64_t v13 = (v13 >> 63) ^ 0x8000000000000000;
    }
    BOOL v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100083704(0, v12, 0);
  unint64_t v16 = v34;
  if (v12)
  {
    if (qword_10047C148 != -1) {
      goto LABEL_51;
    }
    while (1)
    {
      v28[2]  = v8 + 32;
      while (v12)
      {
        BOOL v17 = a1 <= a2;
        if (a3 > 0) {
          BOOL v17 = a1 >= a2;
        }
        if (v17) {
          goto LABEL_46;
        }
        if (__OFADD__(a1, a3)) {
          int64_t v18 = ((a1 + a3) >> 63) ^ 0x8000000000000000;
        }
        else {
          int64_t v18 = a1 + a3;
        }
        if (__OFADD__(a1, qword_100480860)) {
          goto LABEL_47;
        }
        if (a1 + qword_100480860 < a1) {
          goto LABEL_48;
        }
        uint64_t v32 = Data._Representation.subscript.getter();
        uint64_t v33 = v19;
        SymmetricKey.init<A>(data:)();
        uint64_t v34 = v16;
        unint64_t v21 = v16[2];
        unint64_t v20 = v16[3];
        if (v21 >= v20 >> 1)
        {
          sub_100083704(v20 > 1, v21 + 1, 1);
          unint64_t v16 = v34;
        }
        v16[2]  = v21 + 1;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v21, v10, v29);
        a1  = v18;
        if (!--v12) {
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      swift_once();
    }
  }
  int64_t v18 = a1;
LABEL_27:
  BOOL v22 = v18 <= a2;
  if (a3 > 0) {
    BOOL v22 = v18 >= a2;
  }
  if (!v22)
  {
    a1  = v8 + 32;
    int64_t v12 = v28[0];
    while (1)
    {
      if (__OFADD__(v18, a3)) {
        int64_t v24 = ((v18 + a3) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v24 = v18 + a3;
      }
      if (qword_10047C148 != -1) {
        swift_once();
      }
      if (__OFADD__(v18, qword_100480860)) {
        goto LABEL_49;
      }
      if (v18 + qword_100480860 < v18) {
        goto LABEL_50;
      }
      uint64_t v32 = Data._Representation.subscript.getter();
      uint64_t v33 = v25;
      SymmetricKey.init<A>(data:)();
      uint64_t v34 = v16;
      unint64_t v10 = v16[2];
      unint64_t v26 = v16[3];
      if (v10 >= v26 >> 1)
      {
        sub_100083704(v26 > 1, v10 + 1, 1);
        unint64_t v16 = v34;
      }
      v16[2]  = v10 + 1;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v10, v12, v29);
      BOOL v27 = v24 <= a2;
      if (a3 > 0) {
        BOOL v27 = v24 >= a2;
      }
      int64_t v18 = v24;
      if (v27) {
        return v16;
      }
    }
  }
  return v16;
}

uint64_t sub_100175AF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = a3;
  unint64_t v4 = a3 >> 8;
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = a3 >> 24;
  unint64_t v28 = HIDWORD(a3);
  unint64_t v29 = a3 >> 40;
  uint64_t v5 = type metadata accessor for SymmetricKey();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v25 - v8;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v30 = 0;
  long long v9 = v36;
  uint64_t v10 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v12 = v11;
  long long v36 = v9;
  sub_100013D44(v9, *((unint64_t *)&v9 + 1));
  sub_100125FAC(v10, v12);
  sub_10000C970(v10, v12);
  sub_10000C970(v9, *((unint64_t *)&v9 + 1));
  long long v35 = v36;
  uint64_t v31 = v7;
  SymmetricKey.init<A>(data:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v13 + 32)  = v3;
  *(unsigned char *)(v13 + 33)  = v4;
  *(unsigned char *)(v13 + 34)  = v26;
  *(unsigned char *)(v13 + 35)  = v27;
  *(unsigned char *)(v13 + 36)  = v28;
  *(unsigned char *)(v13 + 37)  = v29;
  uint64_t v14 = sub_1001265EC(v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)&long long v36 = v14;
  *((void *)&v36 + 1)  = v16;
  if (qword_10047C158 != -1) {
    swift_once();
  }
  long long v17 = xmmword_100480878;
  long long v35 = xmmword_100480878;
  sub_100013D44(xmmword_100480878, *((unint64_t *)&xmmword_100480878 + 1));
  static SHA256Digest.byteCount.getter();
  type metadata accessor for SHA256();
  sub_10016A508(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
  sub_100074B70();
  uint64_t v19 = v31;
  int64_t v18 = v32;
  static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)();
  sub_10000C970(v17, *((unint64_t *)&v17 + 1));
  sub_10000C970(v14, v16);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v33 + 8);
  unint64_t v21 = v19;
  uint64_t v22 = v34;
  v20(v21, v34);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v23 = v36;
  v20(v18, v22);
  return v23;
}

uint64_t type metadata accessor for LongTermPairingKeys.AuthenticationKeys(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_100480B88);
}

unint64_t sub_100175E7C(uint64_t a1)
{
  return sub_10015F968(a1, *(void *)(v1 + 16), *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100175E94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100175EFC()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_100175F04()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100175F3C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100175F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100480930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    uint64_t v15 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
    long long v17 = &v9[v16];
    int64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PrivateKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24))  = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for LongTermPairingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  uint64_t v10 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return swift_release();
}

uint64_t initializeWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + 24))  = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + 24))  = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + 24))  = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)(a1 + *(int *)(a3 + 24))  = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001768DC);
}

uint64_t sub_1001768DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14)  = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100176A04);
}

uint64_t sub_100176A04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24))  = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100176B14()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PrivateIdentity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for P256.Signing.PrivateKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100177294);
}

uint64_t sub_100177294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017A5B4(a1, a2, a3, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001772D4);
}

uint64_t sub_1001772D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10017A6F8(a1, a2, a3, a4, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t sub_100177300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017A840(a1, a2, a3, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PublicIdentity(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[5];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1]  = v20;
    unint64_t v21 = (char *)a1 + v17;
    uint64_t v22 = (char *)a2 + v17;
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      uint64_t v26 = sub_100010BCC(&qword_1004808D0);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1]  = v19;
  uint64_t v20 = (void *)(a1 + v16);
  unint64_t v21 = (const void *)(a2 + v16);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    uint64_t v25 = sub_100010BCC(&qword_1004808D0);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1]  = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v13)  = v23(v19, 1, v21);
  int v24 = v23(v20, 1, v21);
  if (!v13)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    uint64_t v25 = sub_100010BCC(&qword_1004808D0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  *(_OWORD *)(a1 + a3[6])  = *(_OWORD *)(a2 + a3[6]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100010BCC(&qword_1004808D0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[5];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1]  = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v13)  = v25(v21, 1, v23);
  int v26 = v25(v22, 1, v23);
  if (!v13)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_100010BCC(&qword_1004808D0);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100178014);
}

uint64_t sub_100178014(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LongTermPairingKeys.Identity(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14)  = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = sub_100010BCC(&qword_1004808D0);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[7];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001781BC);
}

uint64_t sub_1001781BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for LongTermPairingKeys.Identity(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6] + 8)  = a2;
  }
  else
  {
    uint64_t v15 = sub_100010BCC(&qword_1004808D0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100178344()
{
  type metadata accessor for LongTermPairingKeys.Identity(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for P256.Signing.PublicKey();
    if (v1 <= 0x3F)
    {
      sub_100179E88(319, (unint64_t *)&unk_100480AF8, (void (*)(uint64_t))&type metadata accessor for Date);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.AuthenticationKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100010BCC(&qword_1004808F8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v10, v11, v16);
      uint64_t v17 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v8((uint64_t *)&v10[*(int *)(v17 + 20)], (uint64_t *)&v11[*(int *)(v17 + 20)], v7);
      uint64_t v18 = v12[5];
      uint64_t v19 = &v10[v18];
      uint64_t v20 = &v11[v18];
      uint64_t v21 = type metadata accessor for P256.Signing.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      uint64_t v22 = v12[6];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1)  = v25;
      uint64_t v26 = v12[7];
      __dst  = &v10[v26];
      uint64_t v27 = &v11[v26];
      uint64_t v28 = type metadata accessor for Date();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      swift_bridgeObjectRetain();
      if (v30(v27, 1, v28))
      {
        uint64_t v31 = sub_100010BCC(&qword_1004808D0);
        memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
    uint64_t v10 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v5(v6 + *(int *)(v10 + 20), v4);
    uint64_t v11 = v6 + *(int *)(v7 + 20);
    uint64_t v12 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = v6 + *(int *)(v7 + 28);
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v14 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14);
    if (!result)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      return v15(v13, v14);
    }
  }
  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100010BCC(&qword_1004808F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v9, v10, v14);
    uint64_t v15 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    uint64_t v16 = v11[5];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = v11[6];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1)  = v23;
    uint64_t v24 = v11[7];
    __dst  = &v9[v24];
    uint64_t v25 = &v10[v24];
    uint64_t v26 = type metadata accessor for Date();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain();
    if (v28(v25, 1, v26))
    {
      uint64_t v29 = sub_100010BCC(&qword_1004808D0);
      memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v53 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v9, v10, v35);
      uint64_t v36 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v7(v9 + *(int *)(v36 + 20), (uint64_t)&v10[*(int *)(v36 + 20)], v6);
      uint64_t v37 = v11[5];
      uint64_t v38 = v9 + v37;
      uint64_t v39 = &v10[v37];
      uint64_t v40 = type metadata accessor for P256.Signing.PublicKey();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v40 - 8) + 24))(v38, v39, v40);
      uint64_t v41 = v11[6];
      int v42 = (void *)(v9 + v41);
      int v43 = &v10[v41];
      *int v42 = *(void *)v43;
      v42[1]  = *((void *)v43 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v44 = v11[7];
      uint64_t v45 = (void *)(v9 + v44);
      uint64_t v46 = &v10[v44];
      uint64_t v47 = type metadata accessor for Date();
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
      LODWORD(v38)  = v49(v45, 1, v47);
      int v50 = v49(v46, 1, v47);
      if (v38)
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
          return v53;
        }
      }
      else
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
          return v53;
        }
        (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
      }
      size_t v32 = *(void *)(*(void *)(sub_100010BCC(&qword_1004808D0) - 8) + 64);
      uint64_t v33 = v45;
      uint64_t v34 = v46;
      goto LABEL_8;
    }
    sub_10016A550(v9, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    size_t v32 = *(void *)(*(void *)(sub_100010BCC(&qword_1004808F8) - 8) + 64);
    uint64_t v33 = (void *)v9;
    uint64_t v34 = v10;
LABEL_8:
    memcpy(v33, v34, v32);
    return v53;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys.Identity(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v9 + *(int *)(v17 + 20), &v10[*(int *)(v17 + 20)], v6);
  uint64_t v18 = v11[5];
  uint64_t v19 = v9 + v18;
  uint64_t v20 = &v10[v18];
  uint64_t v21 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = v11[6];
  uint64_t v23 = (void *)(v9 + v22);
  uint64_t v24 = &v10[v22];
  *uint64_t v23 = *(void *)v24;
  v23[1]  = *((void *)v24 + 1);
  uint64_t v25 = v11[7];
  uint64_t v26 = (void *)(v9 + v25);
  uint64_t v27 = &v10[v25];
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_100010BCC(&qword_1004808D0);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v53;
}

uint64_t initializeWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100010BCC(&qword_1004808F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    uint64_t v15 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    uint64_t v16 = v11[5];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    *(_OWORD *)&v9[v11[6]]  = *(_OWORD *)&v10[v11[6]];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_100010BCC(&qword_1004808D0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v51 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v9, v10, v31);
      uint64_t v32 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v7(v9 + *(int *)(v32 + 20), (uint64_t)&v10[*(int *)(v32 + 20)], v6);
      uint64_t v33 = v11[5];
      uint64_t v34 = v9 + v33;
      uint64_t v35 = &v10[v33];
      uint64_t v36 = type metadata accessor for P256.Signing.PublicKey();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
      uint64_t v37 = v11[6];
      uint64_t v38 = (void *)(v9 + v37);
      uint64_t v39 = &v10[v37];
      uint64_t v41 = *(void *)v39;
      uint64_t v40 = *((void *)v39 + 1);
      *uint64_t v38 = v41;
      v38[1]  = v40;
      swift_bridgeObjectRelease();
      uint64_t v42 = v11[7];
      int v43 = (void *)(v9 + v42);
      uint64_t v44 = &v10[v42];
      uint64_t v45 = type metadata accessor for Date();
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v47 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v46 + 48);
      LODWORD(v34)  = v47(v43, 1, v45);
      int v48 = v47(v44, 1, v45);
      if (v34)
      {
        if (!v48)
        {
          (*(void (**)(void *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
          return v51;
        }
      }
      else
      {
        if (!v48)
        {
          (*(void (**)(void *, char *, uint64_t))(v46 + 40))(v43, v44, v45);
          return v51;
        }
        (*(void (**)(void *, uint64_t))(v46 + 8))(v43, v45);
      }
      size_t v28 = *(void *)(*(void *)(sub_100010BCC(&qword_1004808D0) - 8) + 64);
      uint64_t v29 = v43;
      uint64_t v30 = v44;
      goto LABEL_8;
    }
    sub_10016A550(v9, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_100010BCC(&qword_1004808F8) - 8) + 64);
    uint64_t v29 = (void *)v9;
    uint64_t v30 = v10;
LABEL_8:
    memcpy(v29, v30, v28);
    return v51;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys.Identity(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v9 + *(int *)(v17 + 20), &v10[*(int *)(v17 + 20)], v6);
  uint64_t v18 = v11[5];
  uint64_t v19 = v9 + v18;
  uint64_t v20 = &v10[v18];
  uint64_t v21 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  *(_OWORD *)(v9 + v11[6])  = *(_OWORD *)&v10[v11[6]];
  uint64_t v22 = v11[7];
  uint64_t v23 = (void *)(v9 + v22);
  uint64_t v24 = &v10[v22];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100010BCC(&qword_1004808D0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v51;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100179B88);
}

uint64_t sub_100179B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_100010BCC(&qword_1004808F8);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 28);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100179C98);
}

uint64_t sub_100179C98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100010BCC(&qword_1004808F8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
}

void sub_100179DA0()
{
  type metadata accessor for SymmetricKey();
  if (v0 <= 0x3F)
  {
    sub_100179E88(319, (unint64_t *)&unk_100480B98, (void (*)(uint64_t))type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100179E88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100179EDC()
{
  return type metadata accessor for AppleKeychain(0);
}

uint64_t type metadata accessor for AppleKeychain(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100480D28);
}

uint64_t sub_100179F04()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for InMemoryKeychain()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017A0ACLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.PrivateIdentity.CodingKeys()
{
  return &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys;
}

uint64_t *sub_10017A0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10017A1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10017A294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10017A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10017A404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10017A4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10017A574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017A588);
}

uint64_t sub_10017A588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017A5B4(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10017A5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a4(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a2)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v11(a1, a2, v9);
  }
  else
  {
    uint64_t v13 = a5(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a3 + 20);
    return v14(v16, a2, v15);
  }
}

uint64_t sub_10017A6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017A6CC);
}

uint64_t sub_10017A6CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10017A6F8(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10017A6F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = a5(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    return v13(a1, a2, a2, v11);
  }
  else
  {
    uint64_t v15 = a6(0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + *(int *)(a4 + 20);
    return v16(v18, a2, a2, v17);
  }
}

uint64_t sub_10017A814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017A840(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10017A840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_10017A918()
{
  unint64_t result = qword_100481020;
  if (!qword_100481020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481020);
  }
  return result;
}

unint64_t sub_10017A970()
{
  unint64_t result = qword_100481028;
  if (!qword_100481028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481028);
  }
  return result;
}

unint64_t sub_10017A9C8()
{
  unint64_t result = qword_100481030;
  if (!qword_100481030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481030);
  }
  return result;
}

uint64_t sub_10017AA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10017AA80(const char *a1@<X0>, uint32_t *a2@<X8>)
{
  sub_100162CC8(a1, v2, a2);
}

uint64_t sub_10017AA9C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AAD4()
{
  return sub_100162E28();
}

uint64_t sub_10017AADC()
{
  return sub_10015D6B4();
}

uint64_t sub_10017AAF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001D880(v0, qword_1004810F8);
  sub_1000151B8(v0, (uint64_t)qword_1004810F8);
  return Logger.init(subsystem:category:)();
}

char *static Sandbox.check()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  int v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v4 = sub_1003ABCA4();
  if (v4) {
    return (char *)v4;
  }
  if (qword_10047C160 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1000151B8(v0, (uint64_t)qword_1004810F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v6, v7))
  {
LABEL_7:

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (char *)v4;
  }
  unint64_t v8 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  *(_DWORD *)unint64_t v8 = 136315138;
  int v9 = errno.getter();
  unint64_t result = strerror(v9);
  if (result)
  {
    uint64_t v11 = String.init(cString:)();
    uint64_t v13 = sub_100010680(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sandbox check failed with error: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Sandbox()
{
  return &type metadata for Sandbox;
}

uint64_t sub_10017ADB0(unsigned __int8 a1, char a2)
{
  int v4 = a1;
  sub_100010BCC(&qword_10047EEE0);
  if (v4 == 2) {
    return 0;
  }
  if (a2 == 2) {
    return 1;
  }
  if (a1 == 3) {
    return 0;
  }
  if (a2 == 3) {
    return 1;
  }
  if ((a1 - 2) >= 5u && (a1 & 1) == 0) {
    return 0;
  }
  if ((a2 - 2) >= 5u && (a2 & 1) == 0) {
    return 1;
  }
  if (a1 - 2) >= 5u && (a1) {
    return 0;
  }
  if (a2 - 2) >= 5u && (a2) {
    return 1;
  }
  if (a1 == 4) {
    return 0;
  }
  if (a2 == 4) {
    return 1;
  }
  if (a1 == 5) {
    return 0;
  }
  if (a2 == 5) {
    return 1;
  }
  if (a1 == 6) {
    return 0;
  }
  if (a2 == 6) {
    return 1;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

BOOL sub_10017AEC0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a2];
  }
  if ((a1 & 0x100000000) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a1];
  }
  return a2 < a1;
}

uint64_t AWDLElectionMetric.rawValue.getter(uint64_t result)
{
  if ((result & 0x100000000) != 0) {
    return *(unsigned int *)&asc_1003C1DC8[4 * (int)result];
  }
  return result;
}

uint64_t static AWDLElectionMetric.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_10017B140(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_10017B488);
}

void *AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.unsafeMutableAddressor()
{
  return &static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode;
}

uint64_t static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.getter()
{
  return 0x100000004;
}

uint64_t AWDLElectionMetric.init(from:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_1000369C4(v6, v6[3]);
  int v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  unint64_t v4 = sub_10017B598(v3);
  sub_100010754((uint64_t)v6);
  sub_100010754((uint64_t)a1);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t AWDLElectionMetric.init(rawValue:)(int a1)
{
  unint64_t v1 = sub_10017B598(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t AWDLElectionMetric.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_100010754((uint64_t)v2);
}

void AWDLElectionMetric.hash(into:)(int a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a2];
  }
  Hasher._combine(_:)(a2);
}

uint64_t static AWDLElectionMetric.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_10017B140(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_10017B56C);
}

uint64_t sub_10017B140(unint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return a3(a1 | ((HIDWORD(a1) & 1) << 32), a2 | ((HIDWORD(a2) & 1) << 32));
}

Swift::Int AWDLElectionMetric.hashValue.getter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a1];
  }
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_10017B1C4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017B450(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10017B56C);
}

uint64_t sub_10017B1DC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017B450(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_1001AD92C);
}

uint64_t sub_10017B1F4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017B450(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_1000DE1DC);
}

uint64_t sub_10017B20C(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017B450(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10017AEC0);
}

uint64_t sub_10017B224@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_1000369C4(v8, v8[3]);
  int v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  unint64_t v6 = sub_10017B598(v5);
  sub_100010754((uint64_t)v8);
  uint64_t result = sub_100010754((uint64_t)a1);
  *(_DWORD *)a2  = v6;
  *(unsigned char *)(a2 + 4)  = BYTE4(v6) & 1;
  return result;
}

uint64_t sub_10017B2F8(void *a1)
{
  return AWDLElectionMetric.encode(to:)(a1);
}

Swift::Int sub_10017B32C()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1) {
    Swift::UInt32 v1 = *(_DWORD *)&asc_1003C1DC8[4 * v1];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10017B390()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  if (*(unsigned char *)(v0 + 4) == 1) {
    Swift::UInt32 v1 = *(_DWORD *)&asc_1003C1DC8[4 * v1];
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10017B3D8()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2 == 1) {
    Swift::UInt32 v1 = *(_DWORD *)&asc_1003C1DC8[4 * v1];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10017B438(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017B450(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10017B488);
}

uint64_t sub_10017B450(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

BOOL sub_10017B488(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
  {
    switch((int)a1)
    {
      case 1:
        if ((a2 & 0x100000000) == 0 || a2 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if ((a2 & 0x100000000) == 0 || a2 != 2) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if ((a2 & 0x100000000) == 0 || a2 != 3) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if ((a2 & 0x100000000) == 0 || a2 != 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if ((a2 & 0x100000000) == 0 || a2 != 5) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 6:
        if ((a2 & 0x100000000) == 0 || a2 <= 5) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if ((a2 & 0x100000000) == 0 || a2) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (a2 & 0x100000000) == 0 && a1 == a2;
  }
  return result;
}

BOOL sub_10017B56C(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0) {
    LODWORD(a1)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a1];
  }
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2)  = *(_DWORD *)&asc_1003C1DC8[4 * (int)a2];
  }
  return a1 < a2;
}

unint64_t sub_10017B598(int a1)
{
  BOOL v1 = 0;
  if (a1 > 504)
  {
    if (a1 == 655) {
      int v2 = 6;
    }
    else {
      int v2 = a1;
    }
    BOOL v1 = a1 == 655;
    if (a1 == 650) {
      int v3 = 5;
    }
    else {
      int v3 = v2;
    }
    if (a1 == 650) {
      BOOL v1 = 1;
    }
    BOOL v4 = a1 == 505;
    if (a1 == 505) {
      a1  = 4;
    }
    else {
      a1  = v3;
    }
    if (v4) {
      BOOL v1 = 1;
    }
  }
  else
  {
    switch(a1)
    {
      case '=':
        a1  = 0;
        BOOL v1 = 1;
        break;
      case '@':
        a1  = 1;
        BOOL v1 = 1;
        break;
      case 'P':
        BOOL v1 = 1;
        a1  = 2;
        break;
        BOOL v1 = 1;
        a1  = 3;
        break;
      default:
        return a1 | ((unint64_t)v1 << 32);
    }
  }
  return a1 | ((unint64_t)v1 << 32);
}

unint64_t sub_10017B6EC()
{
  unint64_t result = qword_100481110;
  if (!qword_100481110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481110);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLElectionMetric(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4)  = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4)  = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5)  = v3;
  return result;
}

uint64_t sub_10017B7A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10017B7BC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 4)  = 1;
  }
  else
  {
    *(unsigned char *)(result + 4)  = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLElectionMetric()
{
  return &type metadata for AWDLElectionMetric;
}

uint64_t sub_10017B7EC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  int v5 = (char *)v30 + 8;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v11 < v25)
    {
      unint64_t v12 = *(void *)(v24 + 8 * v11);
      ++v7;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 2;
      if (v11 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 3;
      if (v11 + 3 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12)
      {
LABEL_22:
        unint64_t v4 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v7 << 6); ; i  = v9 | (v7 << 6))
        {
          char v14 = *(unsigned char *)(*(void *)(v1 + 48) + i);
          sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v30[0])  = v14;
          v28[0]  = v30[0];
          v28[1]  = v30[1];
          uint64_t v29 = v31;
          v26[0]  = v14;
          sub_1000107A4((uint64_t)v28 + 8, (uint64_t)v27);
          sub_10003715C();
          if (swift_dynamicCast())
          {
            uint64_t v15 = v5;
            uint64_t v16 = v1;
            uint64_t v17 = v32;
            if (LOBYTE(v28[0])) {
              uint64_t v18 = 0x64657463656A6572;
            }
            else {
              uint64_t v18 = 0x6553657669746361;
            }
            if (LOBYTE(v28[0])) {
              unint64_t v19 = 0xEF65636976726553;
            }
            else {
              unint64_t v19 = 0xED00006563697672;
            }
            sub_1000380B4((uint64_t)v28, &qword_100481400);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v8[2] + 1, 1, v8);
              unint64_t v8 = (void *)result;
            }
            unint64_t v21 = v8[2];
            unint64_t v20 = v8[3];
            uint64_t v22 = v8;
            if (v21 >= v20 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v20 > 1), v21 + 1, 1, v8);
              uint64_t v22 = (void *)result;
            }
            v22[2]  = v21 + 1;
            unint64_t v8 = v22;
            uint64_t v23 = &v22[3 * v21];
            v23[4]  = v18;
            v23[5]  = v19;
            v23[6]  = v17;
            uint64_t v1 = v16;
            int v5 = v15;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            v26[0]  = v28[0];
            sub_1000107A4((uint64_t)v28 + 8, (uint64_t)v27);
            sub_1000380B4((uint64_t)v26, &qword_100481400);
            uint64_t result = sub_1000380B4((uint64_t)v28, &qword_100481400);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v25)
      {
        unint64_t v12 = *(void *)(v24 + 8 * v13);
        if (v12)
        {
          int64_t v7 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v7 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_38;
          }
          if (v7 >= v25) {
            break;
          }
          unint64_t v12 = *(void *)(v24 + 8 * v7);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10017BB48(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v21 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  int64_t v5 = 0;
  unint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v20 = swift_bridgeObjectRetain();
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v9 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v9 < v22)
  {
    unint64_t v10 = *(void *)(v21 + 8 * v9);
    ++v5;
    if (v10) {
      goto LABEL_22;
    }
    int64_t v5 = v9 + 1;
    if (v9 + 1 >= v22) {
      goto LABEL_37;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v5);
    if (v10) {
      goto LABEL_22;
    }
    int64_t v5 = v9 + 2;
    if (v9 + 2 >= v22) {
      goto LABEL_37;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v5);
    if (v10) {
      goto LABEL_22;
    }
    int64_t v5 = v9 + 3;
    if (v9 + 3 >= v22) {
      goto LABEL_37;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v5);
    if (v10)
    {
LABEL_22:
      unint64_t v4 = (v10 - 1) & v10;
      for (i  = __clz(__rbit64(v10)) + (v5 << 6); ; i  = v7 | (v5 << 6))
      {
        char v12 = *(unsigned char *)(*(void *)(v1 + 48) + i);
        sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v27 + 8);
        LOBYTE(v27[0])  = v12;
        v25[0]  = v27[0];
        v25[1]  = v27[1];
        uint64_t v26 = v28;
        v23[0]  = v12;
        sub_1000107A4((uint64_t)v25 + 8, (uint64_t)v24);
        sub_10003715C();
        if (swift_dynamicCast())
        {
          uint64_t v13 = v29;
          unint64_t v14 = 0xE700000000000000;
          unint64_t v15 = 0x65636976726573;
          switch(LOBYTE(v25[0]))
          {
            case 1:
              unint64_t v15 = 0x6172666E49796DLL;
              break;
            case 2:
              unint64_t v14 = 0xE900000000000061;
              unint64_t v15 = 0x72666E4972656570;
              break;
            case 3:
              unint64_t v14 = 0xE500000000000000;
              unint64_t v15 = 0x424453796DLL;
              break;
            case 4:
              unint64_t v15 = 0x42445372656570;
              break;
            case 5:
              unint64_t v14 = 0x80000001003D8A40;
              unint64_t v15 = 0xD000000000000011;
              break;
            case 6:
              unint64_t v14 = 0xE800000000000000;
              unint64_t v15 = 0x44495353656D6173;
              break;
            default:
              break;
          }
          sub_1000380B4((uint64_t)v25, &qword_1004813F8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v6 = sub_1000C6D50(0, v6[2] + 1, 1, v6);
          }
          unint64_t v17 = v6[2];
          unint64_t v16 = v6[3];
          if (v17 >= v16 >> 1) {
            unint64_t v6 = sub_1000C6D50((void *)(v16 > 1), v17 + 1, 1, v6);
          }
          void v6[2] = v17 + 1;
          uint64_t v18 = &v6[3 * v17];
          v18[4]  = v15;
          v18[5]  = v14;
          v18[6]  = v13;
          uint64_t v1 = v20;
          if (!v4) {
            goto LABEL_7;
          }
        }
        else
        {
          v23[0]  = v25[0];
          sub_1000107A4((uint64_t)v25 + 8, (uint64_t)v24);
          sub_1000380B4((uint64_t)v23, &qword_1004813F8);
          sub_1000380B4((uint64_t)v25, &qword_1004813F8);
          if (!v4) {
            goto LABEL_7;
          }
        }
LABEL_6:
        unint64_t v7 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
      }
    }
    int64_t v11 = v9 + 4;
    if (v11 < v22)
    {
      unint64_t v10 = *(void *)(v21 + 8 * v11);
      if (v10)
      {
        int64_t v5 = v11;
        goto LABEL_22;
      }
      while (1)
      {
        int64_t v5 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          break;
        }
        if (v5 >= v22) {
          goto LABEL_37;
        }
        unint64_t v10 = *(void *)(v21 + 8 * v5);
        ++v11;
        if (v10) {
          goto LABEL_22;
        }
      }
LABEL_39:
      __break(1u);
      JUMPOUT(0x10017BF08);
    }
  }
LABEL_37:
  swift_release();
  return v6;
}

uint64_t sub_10017BF24(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v21 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v20 = result;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v10 < v22)
    {
      unint64_t v11 = *(void *)(v21 + 8 * v10);
      ++v6;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_35;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 2;
      if (v10 + 2 >= v22) {
        goto LABEL_35;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v6 = v10 + 3;
      if (v10 + 3 >= v22) {
        goto LABEL_35;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (v11)
      {
LABEL_22:
        unint64_t v4 = (v11 - 1) & v11;
        for (i  = __clz(__rbit64(v11)) + (v6 << 6); ; i  = v8 | (v6 << 6))
        {
          char v13 = *(unsigned char *)(*(void *)(v1 + 48) + i);
          sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v27 + 8);
          LOBYTE(v27[0])  = v13;
          v25[0]  = v27[0];
          v25[1]  = v27[1];
          uint64_t v26 = v28;
          v23[0]  = v13;
          sub_1000107A4((uint64_t)v25 + 8, (uint64_t)v24);
          sub_10003715C();
          if (swift_dynamicCast())
          {
            if (LOBYTE(v25[0]))
            {
              if (LOBYTE(v25[0]) == 1)
              {
                unint64_t v14 = 0xEB00000000726F74;
                uint64_t v15 = 0x616974696E497369;
              }
              else
              {
                unint64_t v14 = 0xE800000000000000;
                uint64_t v15 = 0x6E6F697461727564;
              }
            }
            else
            {
              unint64_t v14 = 0xE700000000000000;
              uint64_t v15 = 0x65636976726573;
            }
            uint64_t v16 = v29;
            sub_1000380B4((uint64_t)v25, &qword_1004813F0);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v7[2] + 1, 1, v7);
              unint64_t v7 = (void *)result;
            }
            unint64_t v18 = v7[2];
            unint64_t v17 = v7[3];
            if (v18 >= v17 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v17 > 1), v18 + 1, 1, v7);
              unint64_t v7 = (void *)result;
            }
            _OWORD v7[2] = v18 + 1;
            unint64_t v19 = &v7[3 * v18];
            v19[4]  = v15;
            v19[5]  = v14;
            v19[6]  = v16;
            uint64_t v1 = v20;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            v23[0]  = v25[0];
            sub_1000107A4((uint64_t)v25 + 8, (uint64_t)v24);
            sub_1000380B4((uint64_t)v23, &qword_1004813F0);
            uint64_t result = sub_1000380B4((uint64_t)v25, &qword_1004813F0);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v8 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v22)
      {
        unint64_t v11 = *(void *)(v21 + 8 * v12);
        if (v11)
        {
          int64_t v6 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v6 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_37;
          }
          if (v6 >= v22) {
            break;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v6);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_35:
    swift_release();
    return (uint64_t)v7;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10017C278(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v24 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  int64_t v5 = (char *)v30 + 8;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v11 < v25)
    {
      unint64_t v12 = *(void *)(v24 + 8 * v11);
      ++v7;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 2;
      if (v11 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 3;
      if (v11 + 3 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v24 + 8 * v7);
      if (v12)
      {
LABEL_22:
        unint64_t v4 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v7 << 6); ; i  = v9 | (v7 << 6))
        {
          char v14 = *(unsigned char *)(*(void *)(v1 + 48) + i);
          sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v30[0])  = v14;
          v28[0]  = v30[0];
          v28[1]  = v30[1];
          uint64_t v29 = v31;
          v26[0]  = v14;
          sub_1000107A4((uint64_t)v28 + 8, (uint64_t)v27);
          sub_10003715C();
          if (swift_dynamicCast())
          {
            uint64_t v15 = v5;
            uint64_t v16 = v1;
            uint64_t v17 = v32;
            if (LOBYTE(v28[0])) {
              uint64_t v18 = 0x6E6F73616572;
            }
            else {
              uint64_t v18 = 0x65636976726573;
            }
            if (LOBYTE(v28[0])) {
              unint64_t v19 = 0xE600000000000000;
            }
            else {
              unint64_t v19 = 0xE700000000000000;
            }
            sub_1000380B4((uint64_t)v28, &qword_1004813E8);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v8[2] + 1, 1, v8);
              unint64_t v8 = (void *)result;
            }
            unint64_t v21 = v8[2];
            unint64_t v20 = v8[3];
            int64_t v22 = v8;
            if (v21 >= v20 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v20 > 1), v21 + 1, 1, v8);
              int64_t v22 = (void *)result;
            }
            v22[2]  = v21 + 1;
            unint64_t v8 = v22;
            uint64_t v23 = &v22[3 * v21];
            v23[4]  = v18;
            v23[5]  = v19;
            v23[6]  = v17;
            uint64_t v1 = v16;
            int64_t v5 = v15;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            v26[0]  = v28[0];
            sub_1000107A4((uint64_t)v28 + 8, (uint64_t)v27);
            sub_1000380B4((uint64_t)v26, &qword_1004813E8);
            uint64_t result = sub_1000380B4((uint64_t)v28, &qword_1004813E8);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v25)
      {
        unint64_t v12 = *(void *)(v24 + 8 * v13);
        if (v12)
        {
          int64_t v7 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v7 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_38;
          }
          if (v7 >= v25) {
            break;
          }
          unint64_t v12 = *(void *)(v24 + 8 * v7);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10017C5B8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v21 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v20 = result;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v22)
    {
      unint64_t v10 = *(void *)(v21 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v22) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v22) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v22) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v6);
      if (v10)
      {
LABEL_22:
        unint64_t v4 = (v10 - 1) & v10;
        for (i  = __clz(__rbit64(v10)) + (v6 << 6); ; i  = v7 | (v6 << 6))
        {
          unint64_t v12 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
          uint64_t v14 = *v12;
          uint64_t v13 = v12[1];
          sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v29);
          *(void *)&long long v28 = v14;
          *((void *)&v28 + 1)  = v13;
          long long v26 = v28;
          v27[0]  = v29[0];
          v27[1]  = v29[1];
          long long v24 = v28;
          sub_1000107A4((uint64_t)v27, (uint64_t)v25);
          sub_10003715C();
          swift_bridgeObjectRetain();
          if (swift_dynamicCast())
          {
            uint64_t v15 = v30;
            long long v16 = v26;
            long long v24 = v26;
            sub_1000107A4((uint64_t)v27, (uint64_t)v25);
            swift_bridgeObjectRetain();
            sub_100010754((uint64_t)v25);
            sub_1000380B4((uint64_t)&v26, &qword_1004813D8);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v23[2] + 1, 1, v23);
              uint64_t v23 = (void *)result;
            }
            unint64_t v18 = v23[2];
            unint64_t v17 = v23[3];
            if (v18 >= v17 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v17 > 1), v18 + 1, 1, v23);
              uint64_t v23 = (void *)result;
            }
            v23[2]  = v18 + 1;
            unint64_t v19 = &v23[3 * v18];
            *((_OWORD *)v19 + 2)  = v16;
            v19[6]  = v15;
            uint64_t v1 = v20;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            long long v24 = v26;
            sub_1000107A4((uint64_t)v27, (uint64_t)v25);
            swift_bridgeObjectRetain();
            sub_1000380B4((uint64_t)&v24, &qword_1004813D8);
            uint64_t result = sub_1000380B4((uint64_t)&v26, &qword_1004813D8);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v11 = v9 + 4;
      if (v11 < v22)
      {
        unint64_t v10 = *(void *)(v21 + 8 * v11);
        if (v10)
        {
          int64_t v6 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v6 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_32;
          }
          if (v6 >= v22) {
            break;
          }
          unint64_t v10 = *(void *)(v21 + 8 * v6);
          ++v11;
          if (v10) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v23;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10017C8FC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v28 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = &v32;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v27 = a3;
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v13 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v13 < v29)
    {
      unint64_t v14 = *(void *)(v28 + 8 * v13);
      ++v10;
      if (v14) {
        goto LABEL_22;
      }
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v29) {
        goto LABEL_30;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v10);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v10 = v13 + 2;
      if (v13 + 2 >= v29) {
        goto LABEL_30;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v10);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v10 = v13 + 3;
      if (v13 + 3 >= v29) {
        goto LABEL_30;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v10);
      if (v14)
      {
LABEL_22:
        unint64_t v7 = (v14 - 1) & v14;
        for (i  = __clz(__rbit64(v14)) + (v10 << 6); ; i  = v11 | (v10 << 6))
        {
          char v16 = *(unsigned char *)(*(void *)(v4 + 48) + i);
          sub_1000107A4(*(void *)(v4 + 56) + 32 * i, (uint64_t)v35 + 8);
          LOBYTE(v35[0])  = v16;
          v33[0]  = v35[0];
          v33[1]  = v35[1];
          uint64_t v34 = v36;
          v31[0]  = v16;
          sub_1000107A4((uint64_t)v33 + 8, (uint64_t)v8);
          sub_10003715C();
          if (swift_dynamicCast())
          {
            unint64_t v17 = v8;
            uint64_t v18 = v4;
            uint64_t v19 = v37;
            uint64_t v20 = a2(LOBYTE(v33[0]));
            uint64_t v22 = v21;
            sub_1000380B4((uint64_t)v33, a3);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v30[2] + 1, 1, v30);
              uint64_t v30 = (void *)result;
            }
            unint64_t v24 = v30[2];
            unint64_t v23 = v30[3];
            if (v24 >= v23 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v23 > 1), v24 + 1, 1, v30);
              uint64_t v30 = (void *)result;
            }
            v30[2]  = v24 + 1;
            int64_t v25 = &v30[3 * v24];
            v25[4]  = v20;
            v25[5]  = v22;
            v25[6]  = v19;
            a3  = v27;
            uint64_t v4 = v18;
            unint64_t v8 = v17;
            if (!v7) {
              goto LABEL_7;
            }
          }
          else
          {
            v31[0]  = v33[0];
            sub_1000107A4((uint64_t)v33 + 8, (uint64_t)v8);
            sub_1000380B4((uint64_t)v31, a3);
            uint64_t result = sub_1000380B4((uint64_t)v33, a3);
            if (!v7) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v11 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      int64_t v15 = v13 + 4;
      if (v15 < v29)
      {
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (v14)
        {
          int64_t v10 = v15;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v10 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_32;
          }
          if (v10 >= v29) {
            break;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v10);
          ++v15;
          if (v14) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v30;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10017CC2C@<X0>(char a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, int a11, __int16 a12, long long a13, long long a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int16 a27,char a28,char a29,char a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  *(unsigned char *)a9  = a1;
  *(_WORD *)(a9 + 1)  = a2;
  *(void *)(a9 + 8)  = a3;
  *(void *)(a9 + 16)  = a4;
  *(void *)(a9 + 24)  = a5;
  *(_DWORD *)(a9 + 32)  = a6;
  *(_WORD *)(a9 + 36)  = WORD2(a6);
  *(_DWORD *)(a9 + 40)  = a7;
  *(_WORD *)(a9 + 44)  = WORD2(a7);
  *(_DWORD *)(a9 + 48)  = a8;
  *(_WORD *)(a9 + 52)  = WORD2(a8);
  *(_DWORD *)(a9 + 56)  = a11;
  *(_WORD *)(a9 + 60)  = a12;
  *(void *)(a9 + 96)  = a15;
  *(void *)(a9 + 104)  = a16;
  *(unsigned char *)(a9 + 112)  = a17;
  *(_OWORD *)(a9 + 64)  = a13;
  *(_OWORD *)(a9 + 80)  = a14;
  int v43 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v44 = a9 + v43[20];
  uint64_t v45 = type metadata accessor for DispatchTimeInterval();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(v44, a18, v45);
  *(void *)(a9 + v43[21])  = a19;
  *(void *)(a9 + v43[22])  = a20;
  *(void *)(a9 + v43[23])  = a21;
  *(void *)(a9 + v43[24])  = a22;
  *(void *)(a9 + v43[25])  = a23;
  *(void *)(a9 + v43[26])  = a24;
  *(void *)(a9 + v43[27])  = a25;
  *(void *)(a9 + v43[28])  = a26;
  *(_WORD *)(a9 + v43[29])  = a27;
  *(unsigned char *)(a9 + v43[30])  = a28;
  *(unsigned char *)(a9 + v43[31])  = a29;
  *(unsigned char *)(a9 + v43[32])  = a30;
  *(unsigned char *)(a9 + v43[33])  = a31;
  *(unsigned char *)(a9 + v43[34])  = a32;
  *(unsigned char *)(a9 + v43[35])  = a33;
  uint64_t v47 = (void *)(a9 + v43[36]);
  *uint64_t v47 = a34;
  v47[1]  = a35;
  *(unsigned char *)(a9 + v43[37])  = a36;
  *(void *)(a9 + v43[38])  = a37;
  *(void *)(a9 + v43[39])  = a38;
  *(void *)(a9 + v43[40])  = a39;
  *(void *)(a9 + v43[41])  = a40;
  *(void *)(a9 + v43[42])  = a41;
  *(double *)(a9 + v43[43])  = a10;
  return result;
}

BOOL static AWDLStatistics.LowLatencyStatistics.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(a1, a2)) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  uint64_t v5 = &a1[*(int *)(v4 + 20)];
  long long v6 = *((_OWORD *)v5 + 11);
  v33[10]  = *((_OWORD *)v5 + 10);
  v33[11]  = v6;
  v33[12]  = *((_OWORD *)v5 + 12);
  uint64_t v34 = *((void *)v5 + 26);
  long long v7 = *((_OWORD *)v5 + 7);
  v33[6]  = *((_OWORD *)v5 + 6);
  v33[7]  = v7;
  long long v8 = *((_OWORD *)v5 + 9);
  v33[8]  = *((_OWORD *)v5 + 8);
  v33[9]  = v8;
  long long v9 = *((_OWORD *)v5 + 3);
  v33[2]  = *((_OWORD *)v5 + 2);
  v33[3]  = v9;
  long long v10 = *((_OWORD *)v5 + 5);
  v33[4]  = *((_OWORD *)v5 + 4);
  v33[5]  = v10;
  long long v11 = *((_OWORD *)v5 + 1);
  v33[0]  = *(_OWORD *)v5;
  v33[1]  = v11;
  long long v13 = *(_OWORD *)(v5 + 264);
  long long v12 = *(_OWORD *)(v5 + 280);
  void v31[2] = *(_OWORD *)(v5 + 248);
  v31[3]  = v13;
  long long v14 = *(_OWORD *)(v5 + 232);
  long long v15 = *(_OWORD *)(v5 + 344);
  v31[7]  = *(_OWORD *)(v5 + 328);
  v31[8]  = v15;
  long long v16 = *(_OWORD *)(v5 + 312);
  v31[5]  = *(_OWORD *)(v5 + 296);
  v31[6]  = v16;
  v31[4]  = v12;
  v31[0]  = *(_OWORD *)(v5 + 216);
  v31[1]  = v14;
  unint64_t v17 = &a2[*(int *)(v4 + 20)];
  long long v18 = *((_OWORD *)v17 + 11);
  v35[10]  = *((_OWORD *)v17 + 10);
  v35[11]  = v18;
  v35[12]  = *((_OWORD *)v17 + 12);
  uint64_t v36 = *((void *)v17 + 26);
  long long v19 = *((_OWORD *)v17 + 7);
  v35[6]  = *((_OWORD *)v17 + 6);
  v35[7]  = v19;
  long long v20 = *((_OWORD *)v17 + 9);
  v35[8]  = *((_OWORD *)v17 + 8);
  v35[9]  = v20;
  long long v21 = *((_OWORD *)v17 + 3);
  v35[2]  = *((_OWORD *)v17 + 2);
  v35[3]  = v21;
  long long v22 = *((_OWORD *)v17 + 5);
  v35[4]  = *((_OWORD *)v17 + 4);
  v35[5]  = v22;
  long long v23 = *((_OWORD *)v17 + 1);
  v35[0]  = *(_OWORD *)v17;
  v35[1]  = v23;
  long long v24 = *(_OWORD *)(v17 + 296);
  long long v25 = *(_OWORD *)(v17 + 328);
  long long v26 = *(_OWORD *)(v17 + 344);
  v32[6]  = *(_OWORD *)(v17 + 312);
  v32[7]  = v25;
  v32[8]  = v26;
  long long v27 = *(_OWORD *)(v17 + 264);
  long long v28 = *(_OWORD *)(v17 + 280);
  uint64_t v32[2] = *(_OWORD *)(v17 + 248);
  v32[3]  = v27;
  long long v29 = *(_OWORD *)(v17 + 232);
  v32[4]  = v28;
  v32[5]  = v24;
  v32[0]  = *(_OWORD *)(v17 + 216);
  v32[1]  = v29;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v33, v35))return 0; {
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v31, (uint64_t *)v32);
  }
}

uint64_t sub_10017D03C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t *))
{
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  uint64_t v10 = v12;
  swift_bridgeObjectRelease();
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return v10;
}

void AWDLStatistics.Failure.service.setter(void *a1)
{
  *uint64_t v1 = a1;
}

void AWDLStatistics.ServiceRejection.rejectedService.setter(uint64_t a1)
{
  *(void *)(v1 + 8)  = a1;
}

uint64_t AWDLStatistics.ServiceRejection.eventPayload.getter()
{
  uint64_t v10 = &type metadata for String;
  *(void *)&long long v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v9 + 1)  = v0;
  sub_10003803C(&v9, v8);
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_100034FF0(v8, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = &type metadata for String;
  *(void *)&long long v9 = v3;
  *((void *)&v9 + 1)  = v4;
  sub_10003803C(&v9, v8);
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034FF0(v8, 1, v5);
  swift_bridgeObjectRelease();
  if (*(void *)(sub_10017B7EC((uint64_t)_swiftEmptyDictionarySingleton) + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  *(void *)&long long v9 = v1;
  long long v6 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v6, 1, &v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 22)  = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIBYTE(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 23)  = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.peerSDB.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return HIBYTE(a4);
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 25)  = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.sameSSID.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.eventPayload.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  int v7 = a4;
  long long v23 = &type metadata for String;
  *(void *)&long long v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v22 + 1)  = v8;
  sub_10003803C(&v22, v21);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_10003512C(v21, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  long long v23 = &type metadata for UInt32;
  if ((a2 & 0xFF00000000) == 0x300000000) {
    int v10 = 0;
  }
  else {
    int v10 = a2;
  }
  LODWORD(v22)  = v10;
  sub_10003803C(&v22, v21);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003512C(v21, 1, v11);
  swift_bridgeObjectRelease();
  long long v23 = &type metadata for UInt32;
  if ((a3 & 0xFF00000000) == 0x300000000) {
    int v12 = 0;
  }
  else {
    int v12 = a3;
  }
  LODWORD(v22)  = v12;
  sub_10003803C(&v22, v21);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003512C(v21, 2, v13);
  swift_bridgeObjectRelease();
  long long v23 = &type metadata for Bool;
  LOBYTE(v22)  = BYTE6(a3) & 1;
  sub_10003803C(&v22, v21);
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003512C(v21, 3, v14);
  swift_bridgeObjectRelease();
  long long v23 = &type metadata for Bool;
  LOBYTE(v22)  = HIBYTE(a3) & 1;
  sub_10003803C(&v22, v21);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003512C(v21, 4, v15);
  swift_bridgeObjectRelease();
  if (v7 != 2)
  {
    long long v23 = &type metadata for Bool;
    LOBYTE(v22)  = v7 & 1;
    sub_10003803C(&v22, v21);
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_10003512C(v21, 5, v16);
    swift_bridgeObjectRelease();
  }
  if ((a4 & 0xFF00) != 0x200)
  {
    long long v23 = &type metadata for Bool;
    LOBYTE(v22)  = HIBYTE(a4) & 1;
    sub_10003803C(&v22, v21);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_10003512C(v21, 6, v17);
    swift_bridgeObjectRelease();
  }
  if (sub_10017BB48((uint64_t)_swiftEmptyDictionarySingleton)[2])
  {
    sub_100010BCC(&qword_100481078);
    long long v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    long long v18 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v22 = v18;
  long long v19 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v19, 1, &v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

id AWDLStatistics.TrafficRegistrationStop.service.getter()
{
  return *v0;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.isInitiator.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AWDLStatistics.Failure.reason.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8)  = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AWDLStatistics.TrafficRegistrationStop.duration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.init(service:isInitiator:duration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4  = a1;
  *(unsigned char *)(a4 + 8)  = a2;
  uint64_t v5 = a4 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.eventPayload.getter()
{
  int v12 = &type metadata for String;
  *(void *)&long long v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v11 + 1)  = v1;
  sub_10003803C(&v11, v10);
  uint64_t v2 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_100035268(v10, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(v0 + 8);
  int v12 = &type metadata for Bool;
  LOBYTE(v11)  = v4;
  sub_10003803C(&v11, v10);
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035268(v10, 1, v5);
  swift_bridgeObjectRelease();
  type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0);
  uint64_t v6 = DispatchTimeInterval.rawSeconds.getter();
  int v12 = &type metadata for Int;
  *(void *)&long long v11 = v6;
  sub_10003803C(&v11, v10);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035268(v10, 2, v7);
  swift_bridgeObjectRelease();
  if (*(void *)(sub_10017BF24((uint64_t)_swiftEmptyDictionarySingleton) + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  *(void *)&long long v11 = v2;
  uint64_t v8 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v8, 1, &v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

CoreP2P::AWDLStatistics::Failure::Reason_optional __swiftcall AWDLStatistics.Failure.Reason.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue  = &off_10044F0C0;
  return (CoreP2P::AWDLStatistics::Failure::Reason_optional)sub_10018C604(rawValue, v1);
}

uint64_t AWDLStatistics.Failure.Reason.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x526E496B63757473;
  }
  if (a1 == 1) {
    return 0x536E496B63757473;
  }
  return 0xD000000000000014;
}

uint64_t sub_10017DA48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100042010(*a1, *a2);
}

unint64_t sub_10017DA54@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue  = &off_10044F0C0;
  unint64_t result = sub_10018C604(*a1, v3);
  *a2  = result;
  return result;
}

void sub_10017DA8C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC0000006F727465;
  unint64_t v4 = 0xEB000000006E6163;
  unint64_t v5 = 0x536E496B63757473;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000014;
    unint64_t v4 = 0x80000001003D8A80;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x526E496B63757473;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

Swift::Int sub_10017DB00()
{
  return Hasher._finalize()();
}

uint64_t sub_10017DBB8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10017DC5C()
{
  return Hasher._finalize()();
}

uint64_t AWDLStatistics.Failure.eventPayload.getter(uint64_t a1, char a2)
{
  char v13 = &type metadata for String;
  *(void *)&long long v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v12 + 1)  = v3;
  sub_10003803C(&v12, v11);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_1000353A4(v11, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v5 = 0xEB000000006E6163;
      unint64_t v6 = 0x536E496B63757473;
    }
    else
    {
      unint64_t v5 = 0x80000001003D8A80;
      unint64_t v6 = 0xD000000000000014;
    }
  }
  else
  {
    unint64_t v5 = 0xEC0000006F727465;
    unint64_t v6 = 0x526E496B63757473;
  }
  char v13 = &type metadata for String;
  *(void *)&long long v12 = v6;
  *((void *)&v12 + 1)  = v5;
  sub_10003803C(&v12, v11);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000353A4(v11, 1, v7);
  swift_bridgeObjectRelease();
  if (*(void *)(sub_10017C278((uint64_t)_swiftEmptyDictionarySingleton) + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v12 = v8;
  long long v9 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v9, 1, &v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t AWDLStatistics.Failure.hash(into:)(uint64_t a1, void *a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a2;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int AWDLStatistics.Failure.hashValue.getter(void *a1)
{
  Hasher.init(_seed:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = a1;
  String.hash(into:)();

  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_10017E0B8()
{
  return AWDLStatistics.Failure.hashValue.getter(*v0);
}

uint64_t sub_10017E0C4(uint64_t a1)
{
  return AWDLStatistics.Failure.hash(into:)(a1, *v1);
}

Swift::Int sub_10017E0D0()
{
  Swift::OpaquePointer v1 = *v0;
  Hasher.init(_seed:)();
  AWDLStatistics.Failure.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_10017E11C(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.getter()
{
  return *(unsigned __int16 *)(v0 + 1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.setter(uint64_t result)
{
  *(_WORD *)(v1 + 1)  = result;
  return result;
}

uint64_t InfraStatistics.beOutputBytes.getter()
{
  return *(void *)(v0 + 8);
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32)  = result;
  *(_WORD *)(v1 + 36)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int16 *)(v0 + 44) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40)  = result;
  *(_WORD *)(v1 + 44)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int16 *)(v0 + 52) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48)  = result;
  *(_WORD *)(v1 + 52)  = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.getter()
{
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int16 *)(v0 + 60) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  *(_WORD *)(v1 + 60)  = WORD2(result);
  return result;
}

uint64_t InfraStatistics.ctlOutputPackets.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t InfraStatistics.ctlOutputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 64)  = result;
  return result;
}

uint64_t InfraStatistics.inputPackets.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t InfraStatistics.inputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 72)  = result;
  return result;
}

uint64_t InfraStatistics.inputBytes.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t InfraStatistics.inputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 80)  = result;
  return result;
}

uint64_t InfraStatistics.linkRate.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t InfraStatistics.linkRate.setter(uint64_t result)
{
  *(void *)(v1 + 88)  = result;
  return result;
}

uint64_t InfraStatistics.effectiveLinkRate.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t InfraStatistics.effectiveLinkRate.setter(uint64_t result)
{
  *(void *)(v1 + 96)  = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveLinkRate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t InfraStatistics.effectiveDataRate.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t InfraStatistics.effectiveDataRate.setter(uint64_t result)
{
  *(void *)(v1 + 104)  = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveDataRate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 112)  = result;
  return result;
}

uint64_t (*IEEE80211Frame.Management.Authentication.PASNResponse.vendorSpecific.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 84));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 84))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 88));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 88))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 92));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 92))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 96));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 96))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 100));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 100))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 104));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 104))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 108));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 108))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 112));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 112))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.getter()
{
  return *(unsigned __int16 *)(v0
                             + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                      + 116));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_WORD *)(v1 + *(int *)(result + 116))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 120));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 120))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 124));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 124))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 128));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 128))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 132));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 132))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 136));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 136))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 140));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 140))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 144));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 144));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1]  = a2;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 148));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.setter(char a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 148))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 152));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 152))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 156));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 156))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 160));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 160))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 164));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 164))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 168));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(void *)(v1 + *(int *)(result + 168))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.reducedAWDLBandwidth.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

double AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.getter()
{
  return *(double *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 172));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.setter(double a1)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(double *)(v1 + *(int *)(result + 172))  = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.reducedBandwidthPercentSession.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (Swift::UInt64 *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(unsigned char *)v0);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Hasher._combine(_:)(*(void *)(v0 + 24));
  unint64_t v6 = *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32);
  if ((v6 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v7 = 0;
LABEL_3:
    Hasher._combine(_:)(v7);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
    switch(v6 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v7 = BYTE5(v6) & 1;
        goto LABEL_3;
    }
  }
  unint64_t v8 = *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int16 *)(v0 + 44) << 32);
  if ((v8 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v9 = 0;
LABEL_6:
    Hasher._combine(_:)(v9);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(0x801004u >> ((v8 >> 29) & 0xF8));
    switch(v8 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v9 = BYTE5(v8) & 1;
        goto LABEL_6;
    }
  }
  unint64_t v10 = *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int16 *)(v0 + 52) << 32);
  if ((v10 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v11 = 0;
LABEL_9:
    Hasher._combine(_:)(v11);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    Hasher._combine(_:)(0x801004u >> ((v10 >> 29) & 0xF8));
    switch(v10 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v11 = BYTE5(v10) & 1;
        goto LABEL_9;
    }
  }
  unint64_t v12 = *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int16 *)(v0 + 60) << 32);
  if ((v12 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v13 = 0;
LABEL_12:
    Hasher._combine(_:)(v13);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(0x801004u >> ((v12 >> 29) & 0xF8));
    switch(v12 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v13 = BYTE5(v12) & 1;
        goto LABEL_12;
    }
  }
  Hasher._combine(_:)(*(void *)(v0 + 64));
  Hasher._combine(_:)(*(void *)(v0 + 72));
  Hasher._combine(_:)(*(void *)(v0 + 80));
  Hasher._combine(_:)(*(void *)(v0 + 88));
  Hasher._combine(_:)(*(void *)(v0 + 96));
  Hasher._combine(_:)(*(void *)(v0 + 104));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 112));
  char v14 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + v14[20], v1);
  int v15 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v15 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v16 = *v4;
    uint64_t v17 = 1000000000;
LABEL_27:
    Swift::UInt64 v18 = v16 * v17;
    BOOL v19 = (unsigned __int128)(v16 * (__int128)v17) >> 64 != (v16 * v17) >> 63;
    BOOL v20 = v16 <= 0;
    unint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    if (v20) {
      unint64_t v21 = 0x8000000000000000;
    }
    if (v19) {
      Swift::UInt64 v22 = v21;
    }
    else {
      Swift::UInt64 v22 = v18;
    }
    goto LABEL_32;
  }
  if (v15 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v16 = *v4;
    uint64_t v17 = 1000000;
    goto LABEL_27;
  }
  if (v15 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v16 = *v4;
    uint64_t v17 = 1000;
    goto LABEL_27;
  }
  if (v15 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    Swift::UInt64 v22 = *v4;
  }
  else
  {
    if (v15 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    }
    Swift::UInt64 v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_32:
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(*(void *)(v0 + v14[21]));
  Hasher._combine(_:)(*(void *)(v0 + v14[22]));
  Hasher._combine(_:)(*(void *)(v0 + v14[23]));
  Hasher._combine(_:)(*(void *)(v0 + v14[24]));
  Hasher._combine(_:)(*(void *)(v0 + v14[25]));
  Hasher._combine(_:)(*(void *)(v0 + v14[26]));
  Hasher._combine(_:)(*(void *)(v0 + v14[27]));
  Hasher._combine(_:)(*(void *)(v0 + v14[28]));
  Hasher._combine(_:)(*(_WORD *)(v0 + v14[29]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[30]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[31]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[32]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[33]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[34]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[35]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + v14[37]));
  Hasher._combine(_:)(*(void *)(v0 + v14[38]));
  Hasher._combine(_:)(*(void *)(v0 + v14[39]));
  Hasher._combine(_:)(*(void *)(v0 + v14[40]));
  Hasher._combine(_:)(*(void *)(v0 + v14[41]));
  Hasher._combine(_:)(*(void *)(v0 + v14[42]));
  if ((*(void *)(v0 + v14[43]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v23 = *(void *)(v0 + v14[43]);
  }
  else {
    Swift::UInt64 v23 = 0;
  }
  Hasher._combine(_:)(v23);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10017F994()
{
  return Hasher._finalize()();
}

uint64_t InfraStatistics.beOutputPackets.getter()
{
  return *(void *)v0;
}

uint64_t InfraStatistics.voOutputBytes.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t InfraStatistics.voOutputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 40)  = result;
  return result;
}

uint64_t InfraStatistics.viOutputPackets.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t InfraStatistics.viOutputPackets.setter(uint64_t result)
{
  *(void *)(v1 + 48)  = result;
  return result;
}

uint64_t InfraStatistics.viOutputBytes.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t InfraStatistics.viOutputBytes.setter(uint64_t result)
{
  *(void *)(v1 + 56)  = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.setter(uint64_t result)
{
  *(void *)(v1 + 112)  = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.setter(uint64_t result)
{
  *(void *)(v1 + 120)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 128)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.setter(uint64_t result)
{
  *(void *)(v1 + 136)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.getter()
{
  return *(void *)(v0 + 144);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 144)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.getter()
{
  return *(void *)(v0 + 152);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.setter(uint64_t result)
{
  *(void *)(v1 + 152)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.setter(uint64_t result)
{
  *(void *)(v1 + 160)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.getter()
{
  return *(void *)(v0 + 168);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.setter(uint64_t result)
{
  *(void *)(v1 + 168)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.setter(uint64_t result)
{
  *(void *)(v1 + 176)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.getter()
{
  return *(void *)(v0 + 184);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.setter(uint64_t result)
{
  *(void *)(v1 + 184)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.setter(uint64_t result)
{
  *(void *)(v1 + 192)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.getter()
{
  return *(void *)(v0 + 200);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.setter(uint64_t result)
{
  *(void *)(v1 + 200)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.setter(uint64_t result)
{
  *(void *)(v1 + 208)  = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  Hasher._combine(_:)(v0[2]);
  Hasher._combine(_:)(v0[3]);
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v0[7]);
  Hasher._combine(_:)(v0[8]);
  Hasher._combine(_:)(v0[9]);
  Hasher._combine(_:)(v0[10]);
  Hasher._combine(_:)(v0[11]);
  Hasher._combine(_:)(v0[12]);
  Hasher._combine(_:)(v0[13]);
  Hasher._combine(_:)(v0[14]);
  Hasher._combine(_:)(v0[15]);
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v0[17]);
  Hasher._combine(_:)(v0[18]);
  Hasher._combine(_:)(v0[19]);
  Hasher._combine(_:)(v0[20]);
  Hasher._combine(_:)(v0[21]);
  Hasher._combine(_:)(v0[22]);
  Hasher._combine(_:)(v0[23]);
  Hasher._combine(_:)(v0[24]);
  Hasher._combine(_:)(v0[25]);
  Hasher._combine(_:)(v0[26]);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10017FD9C()
{
  return Hasher._finalize()();
}

BOOL sub_10017FDD8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  v15[10]  = *(_OWORD *)(a1 + 160);
  v15[11]  = v2;
  v15[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v16 = *(void *)(a1 + 208);
  long long v3 = *(_OWORD *)(a1 + 112);
  v15[6]  = *(_OWORD *)(a1 + 96);
  v15[7]  = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  v15[8]  = *(_OWORD *)(a1 + 128);
  v15[9]  = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v15[2]  = *(_OWORD *)(a1 + 32);
  void v15[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v15[4]  = *(_OWORD *)(a1 + 64);
  v15[5]  = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v15[0]  = *(_OWORD *)a1;
  v15[1]  = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  v17[10]  = *(_OWORD *)(a2 + 160);
  v17[11]  = v8;
  v17[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v18 = *(void *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 112);
  v17[6]  = *(_OWORD *)(a2 + 96);
  v17[7]  = v9;
  long long v10 = *(_OWORD *)(a2 + 144);
  v17[8]  = *(_OWORD *)(a2 + 128);
  v17[9]  = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  v17[2]  = *(_OWORD *)(a2 + 32);
  v17[3]  = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  v17[4]  = *(_OWORD *)(a2 + 64);
  v17[5]  = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  v17[0]  = *(_OWORD *)a2;
  v17[1]  = v13;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v15, v17);
}

uint64_t IEEE80211InformationElement.RSNCapability.authenticationKeyManagementSuites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48)  = a1;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128)  = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 136)  = a1;
  return result;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hash(into:)(uint64_t a1)
{
  sub_10009EBD8(a1, *v1);
  sub_10009EBD8(a1, v1[1]);
  sub_10009EBD8(a1, v1[2]);
  sub_10009EBD8(a1, v1[3]);
  sub_10009EBD8(a1, v1[4]);
  sub_10009EBD8(a1, v1[5]);
  sub_10009EBD8(a1, v1[6]);
  sub_10009EBD8(a1, v1[7]);
  sub_10009EBD8(a1, v1[8]);
  sub_10009EBD8(a1, v1[9]);
  sub_10009EBD8(a1, v1[10]);
  sub_10009EBD8(a1, v1[11]);
  sub_10009EBD8(a1, v1[12]);
  sub_10009EBD8(a1, v1[13]);
  sub_10009EBD8(a1, v1[14]);
  sub_10009EBD8(a1, v1[15]);
  sub_10009EBD8(a1, v1[16]);
  uint64_t v3 = v1[17];

  sub_10009EBD8(a1, v3);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hashValue.getter()
{
  Hasher.init(_seed:)();
  sub_10009EBD8((uint64_t)v2, *v0);
  sub_10009EBD8((uint64_t)v2, v0[1]);
  sub_10009EBD8((uint64_t)v2, v0[2]);
  sub_10009EBD8((uint64_t)v2, v0[3]);
  sub_10009EBD8((uint64_t)v2, v0[4]);
  sub_10009EBD8((uint64_t)v2, v0[5]);
  sub_10009EBD8((uint64_t)v2, v0[6]);
  sub_10009EBD8((uint64_t)v2, v0[7]);
  sub_10009EBD8((uint64_t)v2, v0[8]);
  sub_10009EBD8((uint64_t)v2, v0[9]);
  sub_10009EBD8((uint64_t)v2, v0[10]);
  sub_10009EBD8((uint64_t)v2, v0[11]);
  sub_10009EBD8((uint64_t)v2, v0[12]);
  sub_10009EBD8((uint64_t)v2, v0[13]);
  sub_10009EBD8((uint64_t)v2, v0[14]);
  sub_10009EBD8((uint64_t)v2, v0[15]);
  sub_10009EBD8((uint64_t)v2, v0[16]);
  sub_10009EBD8((uint64_t)v2, v0[17]);
  return Hasher._finalize()();
}

Swift::Int sub_100180380()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[12];
  uint64_t v18 = v0[13];
  uint64_t v19 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[17];
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  Hasher.init(_seed:)();
  sub_10009EBD8((uint64_t)v22, v1);
  sub_10009EBD8((uint64_t)v22, v2);
  sub_10009EBD8((uint64_t)v22, v3);
  sub_10009EBD8((uint64_t)v22, v4);
  sub_10009EBD8((uint64_t)v22, v5);
  sub_10009EBD8((uint64_t)v22, v6);
  sub_10009EBD8((uint64_t)v22, v7);
  sub_10009EBD8((uint64_t)v22, v8);
  sub_10009EBD8((uint64_t)v22, v9);
  sub_10009EBD8((uint64_t)v22, v14);
  sub_10009EBD8((uint64_t)v22, v15);
  sub_10009EBD8((uint64_t)v22, v16);
  sub_10009EBD8((uint64_t)v22, v17);
  sub_10009EBD8((uint64_t)v22, v18);
  sub_10009EBD8((uint64_t)v22, v19);
  sub_10009EBD8((uint64_t)v22, v20);
  sub_10009EBD8((uint64_t)v22, v21);
  sub_10009EBD8((uint64_t)v22, v12);
  return Hasher._finalize()();
}

void sub_1001804F0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = v1[8];
  uint64_t v15 = v1[9];
  uint64_t v16 = v1[10];
  uint64_t v17 = v1[11];
  uint64_t v18 = v1[12];
  uint64_t v19 = v1[13];
  uint64_t v20 = v1[14];
  uint64_t v12 = v1[15];
  uint64_t v13 = v1[16];
  uint64_t v14 = v1[17];
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  sub_10009EBD8(a1, v3);
  sub_10009EBD8(a1, v4);
  sub_10009EBD8(a1, v5);
  sub_10009EBD8(a1, v6);
  sub_10009EBD8(a1, v7);
  sub_10009EBD8(a1, v8);
  sub_10009EBD8(a1, v9);
  sub_10009EBD8(a1, v10);
  sub_10009EBD8(a1, v11);
  sub_10009EBD8(a1, v15);
  sub_10009EBD8(a1, v16);
  sub_10009EBD8(a1, v17);
  sub_10009EBD8(a1, v18);
  sub_10009EBD8(a1, v19);
  sub_10009EBD8(a1, v20);
  sub_10009EBD8(a1, v21);
  sub_10009EBD8(a1, v22);

  sub_10009EBD8(a1, v14);
}

Swift::Int sub_100180654()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[12];
  uint64_t v18 = v0[13];
  uint64_t v19 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[17];
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  Hasher.init(_seed:)();
  sub_10009EBD8((uint64_t)v22, v1);
  sub_10009EBD8((uint64_t)v22, v2);
  sub_10009EBD8((uint64_t)v22, v3);
  sub_10009EBD8((uint64_t)v22, v4);
  sub_10009EBD8((uint64_t)v22, v5);
  sub_10009EBD8((uint64_t)v22, v6);
  sub_10009EBD8((uint64_t)v22, v7);
  sub_10009EBD8((uint64_t)v22, v8);
  sub_10009EBD8((uint64_t)v22, v9);
  sub_10009EBD8((uint64_t)v22, v14);
  sub_10009EBD8((uint64_t)v22, v15);
  sub_10009EBD8((uint64_t)v22, v16);
  sub_10009EBD8((uint64_t)v22, v17);
  sub_10009EBD8((uint64_t)v22, v18);
  sub_10009EBD8((uint64_t)v22, v19);
  sub_10009EBD8((uint64_t)v22, v20);
  sub_10009EBD8((uint64_t)v22, v21);
  sub_10009EBD8((uint64_t)v22, v12);
  return Hasher._finalize()();
}

BOOL sub_1001807C0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v11[6]  = a1[6];
  v11[7]  = v2;
  v11[8]  = a1[8];
  long long v3 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3]  = v3;
  long long v4 = a1[5];
  v11[4]  = a1[4];
  v11[5]  = v4;
  long long v5 = a1[1];
  v11[0]  = *a1;
  v11[1]  = v5;
  long long v6 = a2[7];
  v12[6]  = a2[6];
  v12[7]  = v6;
  v12[8]  = a2[8];
  long long v7 = a2[3];
  void v12[2] = a2[2];
  void v12[3] = v7;
  long long v8 = a2[5];
  void v12[4] = a2[4];
  v12[5]  = v8;
  long long v9 = a2[1];
  v12[0]  = *a2;
  v12[1]  = v9;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v11, (uint64_t *)v12);
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176)  = v2;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(v1 + 192);
  *(void *)(a1 + 208)  = *(void *)(v1 + 208);
  long long v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112)  = v3;
  long long v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144)  = v4;
  long long v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48)  = v5;
  long long v6 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  __n128 result = *(__n128 *)v1;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16)  = v8;
  return result;
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v1 + 160)  = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v1 + 176)  = v2;
  *(_OWORD *)(v1 + 192)  = *(_OWORD *)(a1 + 192);
  *(void *)(v1 + 208)  = *(void *)(a1 + 208);
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 96)  = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 112)  = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 128)  = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 144)  = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32)  = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48)  = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64)  = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80)  = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16)  = v8;
  return result;
}

void *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.getter@<X0>(void *a1@<X8>)
{
  return sub_10018C66C((void *)(v1 + 216), a1);
}

_OWORD *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.setter(_OWORD *a1)
{
  return sub_10018C6A4(a1, (_OWORD *)(v1 + 216));
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.histograms.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.hash(into:)(uint64_t a1)
{
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v9 = v1[33];
  uint64_t v10 = v1[34];
  uint64_t v11 = v1[35];
  uint64_t v15 = v1[36];
  uint64_t v16 = v1[37];
  uint64_t v17 = v1[38];
  uint64_t v18 = v1[39];
  uint64_t v19 = v1[40];
  uint64_t v20 = v1[41];
  uint64_t v12 = v1[42];
  uint64_t v13 = v1[43];
  uint64_t v14 = v1[44];
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  sub_10009EBD8(a1, v3);
  sub_10009EBD8(a1, v4);
  sub_10009EBD8(a1, v5);
  sub_10009EBD8(a1, v6);
  sub_10009EBD8(a1, v7);
  sub_10009EBD8(a1, v8);
  sub_10009EBD8(a1, v9);
  sub_10009EBD8(a1, v10);
  sub_10009EBD8(a1, v11);
  sub_10009EBD8(a1, v15);
  sub_10009EBD8(a1, v16);
  sub_10009EBD8(a1, v17);
  sub_10009EBD8(a1, v18);
  sub_10009EBD8(a1, v19);
  sub_10009EBD8(a1, v20);
  sub_10009EBD8(a1, v21);
  sub_10009EBD8(a1, v22);

  sub_10009EBD8(a1, v14);
}

BOOL static AWDLStatistics.LowLatencyStatistics.Traffic.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 176);
  v35[10]  = *(_OWORD *)(a1 + 160);
  v35[11]  = v4;
  v35[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v36 = *(void *)(a1 + 208);
  long long v5 = *(_OWORD *)(a1 + 112);
  v35[6]  = *(_OWORD *)(a1 + 96);
  v35[7]  = v5;
  long long v6 = *(_OWORD *)(a1 + 144);
  v35[8]  = *(_OWORD *)(a1 + 128);
  v35[9]  = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  v35[2]  = *(_OWORD *)(a1 + 32);
  v35[3]  = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  v35[4]  = *(_OWORD *)(a1 + 64);
  v35[5]  = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  v35[0]  = *(_OWORD *)a1;
  v35[1]  = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  v33[10]  = *(_OWORD *)(a2 + 160);
  v33[11]  = v10;
  v33[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v34 = *(void *)(a2 + 208);
  long long v11 = *(_OWORD *)(a2 + 112);
  v33[6]  = *(_OWORD *)(a2 + 96);
  v33[7]  = v11;
  long long v12 = *(_OWORD *)(a2 + 144);
  v33[8]  = *(_OWORD *)(a2 + 128);
  v33[9]  = v12;
  long long v13 = *(_OWORD *)(a2 + 48);
  v33[2]  = *(_OWORD *)(a2 + 32);
  v33[3]  = v13;
  long long v14 = *(_OWORD *)(a2 + 80);
  v33[4]  = *(_OWORD *)(a2 + 64);
  v33[5]  = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  v33[0]  = *(_OWORD *)a2;
  v33[1]  = v15;
  if (_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v35, v33))
  {
    long long v16 = *(_OWORD *)(a1 + 232);
    long long v17 = *(_OWORD *)(a1 + 248);
    v32[0]  = *(_OWORD *)(a1 + 216);
    v32[1]  = v16;
    long long v18 = *(_OWORD *)(a1 + 296);
    long long v19 = *(_OWORD *)(a1 + 328);
    long long v20 = *(_OWORD *)(a1 + 344);
    v32[6]  = *(_OWORD *)(a1 + 312);
    v32[7]  = v19;
    v32[8]  = v20;
    long long v21 = *(_OWORD *)(a1 + 264);
    long long v22 = *(_OWORD *)(a1 + 280);
    uint64_t v32[2] = v17;
    v32[3]  = v21;
    v32[4]  = v22;
    v32[5]  = v18;
    long long v23 = *(_OWORD *)(a2 + 296);
    long long v24 = *(_OWORD *)(a2 + 328);
    long long v25 = *(_OWORD *)(a2 + 344);
    v31[6]  = *(_OWORD *)(a2 + 312);
    v31[7]  = v24;
    v31[8]  = v25;
    long long v26 = *(_OWORD *)(a2 + 264);
    long long v27 = *(_OWORD *)(a2 + 280);
    void v31[2] = *(_OWORD *)(a2 + 248);
    v31[3]  = v26;
    long long v28 = *(_OWORD *)(a2 + 232);
    v31[4]  = v27;
    v31[5]  = v23;
    v31[0]  = *(_OWORD *)(a2 + 216);
    v31[1]  = v28;
    return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v32, (uint64_t *)v31);
  }
  else
  {
    return 0;
  }
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.hashValue.getter()
{
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[36];
  uint64_t v14 = v0[37];
  uint64_t v15 = v0[38];
  uint64_t v16 = v0[39];
  uint64_t v17 = v0[40];
  uint64_t v18 = v0[41];
  uint64_t v19 = v0[42];
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[44];
  uint64_t v20 = v11;
  sub_10009EBD8((uint64_t)v21, v1);
  sub_10009EBD8((uint64_t)v21, v2);
  sub_10009EBD8((uint64_t)v21, v3);
  sub_10009EBD8((uint64_t)v21, v4);
  sub_10009EBD8((uint64_t)v21, v5);
  sub_10009EBD8((uint64_t)v21, v6);
  sub_10009EBD8((uint64_t)v21, v7);
  sub_10009EBD8((uint64_t)v21, v8);
  sub_10009EBD8((uint64_t)v21, v9);
  sub_10009EBD8((uint64_t)v21, v10);
  sub_10009EBD8((uint64_t)v21, v14);
  sub_10009EBD8((uint64_t)v21, v15);
  sub_10009EBD8((uint64_t)v21, v16);
  sub_10009EBD8((uint64_t)v21, v17);
  sub_10009EBD8((uint64_t)v21, v18);
  sub_10009EBD8((uint64_t)v21, v19);
  sub_10009EBD8((uint64_t)v21, v20);
  sub_10009EBD8((uint64_t)v21, v12);
  return Hasher._finalize()();
}

Swift::Int sub_100180D1C()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v8 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[37];
  uint64_t v13 = v0[38];
  uint64_t v14 = v0[39];
  uint64_t v15 = v0[40];
  uint64_t v16 = v0[41];
  uint64_t v17 = v0[42];
  uint64_t v18 = v0[43];
  uint64_t v19 = v0[44];
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8((uint64_t)v20, v1);
  sub_10009EBD8((uint64_t)v20, v2);
  sub_10009EBD8((uint64_t)v20, v3);
  sub_10009EBD8((uint64_t)v20, v4);
  sub_10009EBD8((uint64_t)v20, v5);
  sub_10009EBD8((uint64_t)v20, v6);
  sub_10009EBD8((uint64_t)v20, v8);
  sub_10009EBD8((uint64_t)v20, v7);
  sub_10009EBD8((uint64_t)v20, v9);
  sub_10009EBD8((uint64_t)v20, v11);
  sub_10009EBD8((uint64_t)v20, v12);
  sub_10009EBD8((uint64_t)v20, v13);
  sub_10009EBD8((uint64_t)v20, v14);
  sub_10009EBD8((uint64_t)v20, v15);
  sub_10009EBD8((uint64_t)v20, v16);
  sub_10009EBD8((uint64_t)v20, v17);
  sub_10009EBD8((uint64_t)v20, v18);
  sub_10009EBD8((uint64_t)v20, v19);
  return Hasher._finalize()();
}

void sub_100180E9C(uint64_t a1)
{
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v10 = v1[33];
  uint64_t v9 = v1[34];
  uint64_t v11 = v1[35];
  uint64_t v12 = v1[36];
  uint64_t v13 = v1[37];
  uint64_t v14 = v1[38];
  uint64_t v15 = v1[39];
  uint64_t v16 = v1[40];
  uint64_t v17 = v1[41];
  uint64_t v18 = v1[42];
  uint64_t v19 = v1[43];
  uint64_t v20 = v1[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8(a1, v3);
  sub_10009EBD8(a1, v4);
  sub_10009EBD8(a1, v5);
  sub_10009EBD8(a1, v6);
  sub_10009EBD8(a1, v7);
  sub_10009EBD8(a1, v8);
  sub_10009EBD8(a1, v10);
  sub_10009EBD8(a1, v9);
  sub_10009EBD8(a1, v11);
  sub_10009EBD8(a1, v12);
  sub_10009EBD8(a1, v13);
  sub_10009EBD8(a1, v14);
  sub_10009EBD8(a1, v15);
  sub_10009EBD8(a1, v16);
  sub_10009EBD8(a1, v17);
  sub_10009EBD8(a1, v18);
  sub_10009EBD8(a1, v19);

  sub_10009EBD8(a1, v20);
}

Swift::Int sub_100181018()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v8 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[37];
  uint64_t v13 = v0[38];
  uint64_t v14 = v0[39];
  uint64_t v15 = v0[40];
  uint64_t v16 = v0[41];
  uint64_t v17 = v0[42];
  uint64_t v18 = v0[43];
  uint64_t v19 = v0[44];
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8((uint64_t)v20, v1);
  sub_10009EBD8((uint64_t)v20, v2);
  sub_10009EBD8((uint64_t)v20, v3);
  sub_10009EBD8((uint64_t)v20, v4);
  sub_10009EBD8((uint64_t)v20, v5);
  sub_10009EBD8((uint64_t)v20, v6);
  sub_10009EBD8((uint64_t)v20, v8);
  sub_10009EBD8((uint64_t)v20, v7);
  sub_10009EBD8((uint64_t)v20, v9);
  sub_10009EBD8((uint64_t)v20, v11);
  sub_10009EBD8((uint64_t)v20, v12);
  sub_10009EBD8((uint64_t)v20, v13);
  sub_10009EBD8((uint64_t)v20, v14);
  sub_10009EBD8((uint64_t)v20, v15);
  sub_10009EBD8((uint64_t)v20, v16);
  sub_10009EBD8((uint64_t)v20, v17);
  sub_10009EBD8((uint64_t)v20, v18);
  sub_10009EBD8((uint64_t)v20, v19);
  return Hasher._finalize()();
}

BOOL sub_100181194(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  v30[10]  = *(_OWORD *)(a1 + 160);
  v30[11]  = v2;
  v30[12]  = *(_OWORD *)(a1 + 192);
  uint64_t v31 = *(void *)(a1 + 208);
  long long v3 = *(_OWORD *)(a1 + 112);
  v30[6]  = *(_OWORD *)(a1 + 96);
  v30[7]  = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  v30[8]  = *(_OWORD *)(a1 + 128);
  v30[9]  = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v30[2]  = *(_OWORD *)(a1 + 32);
  v30[3]  = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v30[4]  = *(_OWORD *)(a1 + 64);
  v30[5]  = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v30[0]  = *(_OWORD *)a1;
  v30[1]  = v7;
  long long v8 = *(_OWORD *)(a1 + 296);
  long long v9 = *(_OWORD *)(a1 + 328);
  long long v10 = *(_OWORD *)(a1 + 344);
  v28[6]  = *(_OWORD *)(a1 + 312);
  v28[7]  = v9;
  v28[8]  = v10;
  long long v11 = *(_OWORD *)(a1 + 232);
  long long v12 = *(_OWORD *)(a1 + 264);
  long long v13 = *(_OWORD *)(a1 + 280);
  v28[2]  = *(_OWORD *)(a1 + 248);
  v28[3]  = v12;
  v28[4]  = v13;
  void v28[5] = v8;
  v28[0]  = *(_OWORD *)(a1 + 216);
  v28[1]  = v11;
  long long v14 = *(_OWORD *)(a2 + 176);
  v32[10]  = *(_OWORD *)(a2 + 160);
  v32[11]  = v14;
  v32[12]  = *(_OWORD *)(a2 + 192);
  uint64_t v33 = *(void *)(a2 + 208);
  long long v15 = *(_OWORD *)(a2 + 112);
  v32[6]  = *(_OWORD *)(a2 + 96);
  v32[7]  = v15;
  long long v16 = *(_OWORD *)(a2 + 144);
  v32[8]  = *(_OWORD *)(a2 + 128);
  v32[9]  = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  uint64_t v32[2] = *(_OWORD *)(a2 + 32);
  v32[3]  = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  v32[4]  = *(_OWORD *)(a2 + 64);
  v32[5]  = v18;
  long long v19 = *(_OWORD *)(a2 + 16);
  v32[0]  = *(_OWORD *)a2;
  v32[1]  = v19;
  long long v20 = *(_OWORD *)(a2 + 296);
  long long v21 = *(_OWORD *)(a2 + 328);
  long long v22 = *(_OWORD *)(a2 + 344);
  v29[6]  = *(_OWORD *)(a2 + 312);
  v29[7]  = v21;
  v29[8]  = v22;
  long long v23 = *(_OWORD *)(a2 + 264);
  long long v24 = *(_OWORD *)(a2 + 280);
  v29[2]  = *(_OWORD *)(a2 + 248);
  v29[3]  = v23;
  long long v25 = *(_OWORD *)(a2 + 232);
  v29[4]  = v24;
  v29[5]  = v20;
  v29[0]  = *(_OWORD *)(a2 + 216);
  v29[1]  = v25;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v30, v32)&& _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v28, (uint64_t *)v29);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10018C6DC(v1, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.setter(uint64_t a1)
{
  return sub_10018C740(a1, v1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);

  return sub_10018C7A4(v3, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);

  return sub_10018C7DC(a1, v3);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.traffic.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_1001813A4(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v31 = *(void *)(result + 16);
  if (!v31) {
    return result;
  }
  uint64_t v4 = a2;
  uint64_t v5 = result;
  if (a2 > 0x10u) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = qword_1003C2760[(char)a2];
  }
  uint64_t v30 = v6;
  uint64_t v7 = *(void *)(result + 32);
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = v4;
    *(void *)&long long v34 = sub_100185C04(v4);
    *((void *)&v34 + 1)  = v10;
    v11._uint64_t countAndFlagsBits = 1852400223;
    v11._object  = (void *)0xE400000000000000;
    String.append(_:)(v11);
    *(void *)&v33[0]  = v8;
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    long long v13 = v34;
    uint64_t v35 = &type metadata for Double;
    *(void *)&long long v34 = v7;
    sub_10003803C(&v34, v33);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    long long v15 = (void *)*a3;
    uint64_t v32 = (void *)*a3;
    *a3  = 0x8000000000000000;
    unint64_t v17 = sub_10000DDE0(v13, *((uint64_t *)&v13 + 1));
    uint64_t v18 = v15[2];
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    char v21 = v16;
    if (v15[3] >= v20)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        long long v24 = v32;
        if (v16) {
          goto LABEL_13;
        }
      }
      else
      {
        sub_100170868();
        long long v24 = v32;
        if (v21) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      sub_10016AACC(v20, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = sub_10000DDE0(v13, *((uint64_t *)&v13 + 1));
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_23;
      }
      unint64_t v17 = v22;
      long long v24 = v32;
      if (v21)
      {
LABEL_13:
        long long v25 = (_OWORD *)(v24[7] + 32 * v17);
        sub_100010754((uint64_t)v25);
        sub_10003803C(v33, v25);
        goto LABEL_17;
      }
    }
    v24[(v17 >> 6) + 8] |= 1 << v17;
    *(_OWORD *)(v24[6] + 16 * v17)  = v13;
    sub_10003803C(v33, (_OWORD *)(v24[7] + 32 * v17));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_22;
    }
    v24[2]  = v28;
    swift_bridgeObjectRetain();
LABEL_17:
    *a3  = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8 + 1 != v31)
    {
      uint64_t v4 = v9;
      uint64_t v7 = *(void *)(v5 + 8 * v8 + 40);
      uint64_t v29 = v8 + 2;
      ++v8;
      if (v29 != v30) {
        continue;
      }
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.eventPayload.getter()
{
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  unint64_t v175 = _swiftEmptyDictionarySingleton;
  char v2 = *v0;
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v2;
  sub_10003803C(&v173, v172);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  __int16 v4 = *(_WORD *)(v0 + 1);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16)  = xmmword_1003B4420;
  *(_WORD *)(v5 + 32)  = v4;
  *(void *)&long long v173 = v5;
  static String.Encoding.utf8.getter();
  sub_100010BCC(&qword_10047E7D0);
  sub_10018C814();
  uint64_t v6 = String.init<A>(bytes:encoding:)();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = 0xE000000000000000;
  uint64_t v174 = &type metadata for String;
  if (v8) {
    unint64_t v10 = v8;
  }
  *(void *)&long long v173 = v9;
  *((void *)&v173 + 1)  = v10;
  sub_10003803C(&v173, v172);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 1, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v0 + 1);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v12;
  sub_10003803C(&v173, v172);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 2, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v0 + 2);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v14;
  sub_10003803C(&v173, v172);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 3, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v0 + 3);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v16;
  sub_10003803C(&v173, v172);
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 4, v17);
  swift_bridgeObjectRelease();
  unint64_t v18 = *((unsigned int *)v0 + 8) | ((unint64_t)*((unsigned __int16 *)v0 + 18) << 32);
  uint64_t v174 = &type metadata for UInt32;
  if ((v18 & 0xFF00000000) == 0x300000000) {
    LODWORD(v18)  = 0;
  }
  LODWORD(v173)  = v18;
  sub_10003803C(&v173, v172);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 5, v19);
  swift_bridgeObjectRelease();
  unint64_t v20 = *((unsigned int *)v0 + 10) | ((unint64_t)*((unsigned __int16 *)v0 + 22) << 32);
  uint64_t v174 = &type metadata for UInt32;
  if ((v20 & 0xFF00000000) == 0x300000000) {
    LODWORD(v20)  = 0;
  }
  LODWORD(v173)  = v20;
  sub_10003803C(&v173, v172);
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 6, v21);
  swift_bridgeObjectRelease();
  unint64_t v22 = *((unsigned int *)v0 + 12) | ((unint64_t)*((unsigned __int16 *)v0 + 26) << 32);
  uint64_t v174 = &type metadata for UInt32;
  if ((v22 & 0xFF00000000) == 0x300000000) {
    LODWORD(v22)  = 0;
  }
  LODWORD(v173)  = v22;
  sub_10003803C(&v173, v172);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 7, v23);
  swift_bridgeObjectRelease();
  unint64_t v24 = *((unsigned int *)v0 + 14) | ((unint64_t)*((unsigned __int16 *)v0 + 30) << 32);
  uint64_t v174 = &type metadata for UInt32;
  if ((v24 & 0xFF00000000) == 0x300000000) {
    LODWORD(v24)  = 0;
  }
  LODWORD(v173)  = v24;
  sub_10003803C(&v173, v172);
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 8, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = *((void *)v0 + 8);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v26;
  sub_10003803C(&v173, v172);
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 9, v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)v0 + 9);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v28;
  sub_10003803C(&v173, v172);
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 10, v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)v0 + 10);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v30;
  sub_10003803C(&v173, v172);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 11, v31);
  swift_bridgeObjectRelease();
  uint64_t v32 = *((void *)v0 + 11);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v32;
  sub_10003803C(&v173, v172);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 12, v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = *((void *)v0 + 12);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v34;
  sub_10003803C(&v173, v172);
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 13, v35);
  swift_bridgeObjectRelease();
  uint64_t v36 = *((void *)v0 + 13);
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v36;
  sub_10003803C(&v173, v172);
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 14, v37);
  swift_bridgeObjectRelease();
  char v38 = v0[112];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v38;
  sub_10003803C(&v173, v172);
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 15, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v41 = DispatchTimeInterval.rawSeconds.getter();
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v41;
  sub_10003803C(&v173, v172);
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 16, v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)&v0[v40[21]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v43;
  sub_10003803C(&v173, v172);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 17, v44);
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)&v0[v40[22]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v45;
  sub_10003803C(&v173, v172);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 18, v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)&v0[v40[23]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v47;
  sub_10003803C(&v173, v172);
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 19, v48);
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)&v0[v40[24]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v49;
  sub_10003803C(&v173, v172);
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 20, v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)&v0[v40[25]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v51;
  sub_10003803C(&v173, v172);
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 21, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void *)&v0[v40[26]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v53;
  sub_10003803C(&v173, v172);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 22, v54);
  swift_bridgeObjectRelease();
  uint64_t v55 = *(void *)&v0[v40[27]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v55;
  sub_10003803C(&v173, v172);
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 23, v56);
  swift_bridgeObjectRelease();
  uint64_t v57 = *(void *)&v0[v40[28]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v57;
  sub_10003803C(&v173, v172);
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 24, v58);
  swift_bridgeObjectRelease();
  __int16 v59 = *(_WORD *)&v0[v40[29]];
  uint64_t v174 = &type metadata for UInt16;
  LOWORD(v173)  = v59;
  sub_10003803C(&v173, v172);
  char v60 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 25, v60);
  swift_bridgeObjectRelease();
  char v61 = v0[v40[30]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v61;
  sub_10003803C(&v173, v172);
  char v62 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 26, v62);
  swift_bridgeObjectRelease();
  char v63 = v0[v40[31]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v63;
  sub_10003803C(&v173, v172);
  char v64 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 27, v64);
  swift_bridgeObjectRelease();
  char v65 = v0[v40[32]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v65;
  sub_10003803C(&v173, v172);
  char v66 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 28, v66);
  swift_bridgeObjectRelease();
  char v67 = v0[v40[33]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v67;
  sub_10003803C(&v173, v172);
  char v68 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 29, v68);
  swift_bridgeObjectRelease();
  char v69 = v0[v40[34]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v69;
  sub_10003803C(&v173, v172);
  char v70 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 30, v70);
  swift_bridgeObjectRelease();
  char v71 = v0[v40[35]];
  uint64_t v174 = &type metadata for UInt8;
  LOBYTE(v173)  = v71;
  sub_10003803C(&v173, v172);
  char v72 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 31, v72);
  swift_bridgeObjectRelease();
  unint64_t v73 = (uint64_t *)&v0[v40[36]];
  uint64_t v74 = *v73;
  uint64_t v75 = v73[1];
  uint64_t v174 = &type metadata for String;
  *(void *)&long long v173 = v74;
  *((void *)&v173 + 1)  = v75;
  sub_10003803C(&v173, v172);
  swift_bridgeObjectRetain();
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 32, v76);
  swift_bridgeObjectRelease();
  char v77 = v0[v40[37]];
  uint64_t v174 = &type metadata for Bool;
  LOBYTE(v173)  = v77;
  sub_10003803C(&v173, v172);
  char v78 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 33, v78);
  swift_bridgeObjectRelease();
  uint64_t v79 = *(void *)&v0[v40[38]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v79;
  sub_10003803C(&v173, v172);
  char v80 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 34, v80);
  swift_bridgeObjectRelease();
  uint64_t v81 = *(void *)&v0[v40[39]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v81;
  sub_10003803C(&v173, v172);
  char v82 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 35, v82);
  swift_bridgeObjectRelease();
  uint64_t v83 = *(void *)&v0[v40[40]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v83;
  sub_10003803C(&v173, v172);
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 36, v84);
  swift_bridgeObjectRelease();
  uint64_t v85 = *(void *)&v0[v40[41]];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v85;
  sub_10003803C(&v173, v172);
  char v86 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 37, v86);
  swift_bridgeObjectRelease();
  uint64_t v87 = *(void *)&v0[v40[42]];
  uint64_t v174 = &type metadata for UInt64;
  *(void *)&long long v173 = v87;
  sub_10003803C(&v173, v172);
  char v88 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 38, v88);
  swift_bridgeObjectRelease();
  uint64_t v89 = *(void *)&v0[v40[43]];
  uint64_t v174 = &type metadata for Double;
  *(void *)&long long v173 = v89;
  sub_10003803C(&v173, v172);
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 39, v90);
  swift_bridgeObjectRelease();
  unint64_t v91 = (uint64_t *)&v0[*(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20)];
  uint64_t v92 = *v91;
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v92;
  sub_10003803C(&v173, v172);
  char v93 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 40, v93);
  swift_bridgeObjectRelease();
  uint64_t v94 = v91[1];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v94;
  sub_10003803C(&v173, v172);
  char v95 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 41, v95);
  swift_bridgeObjectRelease();
  uint64_t v96 = v91[2];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v96;
  sub_10003803C(&v173, v172);
  char v97 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 42, v97);
  swift_bridgeObjectRelease();
  uint64_t v98 = v91[3];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v98;
  sub_10003803C(&v173, v172);
  char v99 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 43, v99);
  swift_bridgeObjectRelease();
  uint64_t v100 = v91[4];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v100;
  sub_10003803C(&v173, v172);
  char v101 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 44, v101);
  swift_bridgeObjectRelease();
  uint64_t v102 = v91[5];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v102;
  sub_10003803C(&v173, v172);
  char v103 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 45, v103);
  swift_bridgeObjectRelease();
  uint64_t v104 = v91[6];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v104;
  sub_10003803C(&v173, v172);
  char v105 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 46, v105);
  swift_bridgeObjectRelease();
  uint64_t v106 = v91[7];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v106;
  sub_10003803C(&v173, v172);
  char v107 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 47, v107);
  swift_bridgeObjectRelease();
  uint64_t v108 = v91[8];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v108;
  sub_10003803C(&v173, v172);
  char v109 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 48, v109);
  swift_bridgeObjectRelease();
  uint64_t v110 = v91[9];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v110;
  sub_10003803C(&v173, v172);
  char v111 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 49, v111);
  swift_bridgeObjectRelease();
  uint64_t v112 = v91[10];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v112;
  sub_10003803C(&v173, v172);
  char v113 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 50, v113);
  swift_bridgeObjectRelease();
  uint64_t v114 = v91[11];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v114;
  sub_10003803C(&v173, v172);
  char v115 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 51, v115);
  swift_bridgeObjectRelease();
  uint64_t v116 = v91[12];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v116;
  sub_10003803C(&v173, v172);
  char v117 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 52, v117);
  swift_bridgeObjectRelease();
  uint64_t v118 = v91[13];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v118;
  sub_10003803C(&v173, v172);
  char v119 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 53, v119);
  swift_bridgeObjectRelease();
  uint64_t v120 = v91[14];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v120;
  sub_10003803C(&v173, v172);
  char v121 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 54, v121);
  swift_bridgeObjectRelease();
  uint64_t v122 = v91[15];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v122;
  sub_10003803C(&v173, v172);
  char v123 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 55, v123);
  swift_bridgeObjectRelease();
  uint64_t v124 = v91[16];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v124;
  sub_10003803C(&v173, v172);
  char v125 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 56, v125);
  swift_bridgeObjectRelease();
  uint64_t v126 = v91[17];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v126;
  sub_10003803C(&v173, v172);
  char v127 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 57, v127);
  swift_bridgeObjectRelease();
  uint64_t v128 = v91[18];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v128;
  sub_10003803C(&v173, v172);
  char v129 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 58, v129);
  swift_bridgeObjectRelease();
  uint64_t v130 = v91[19];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v130;
  sub_10003803C(&v173, v172);
  char v131 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 59, v131);
  swift_bridgeObjectRelease();
  uint64_t v132 = v91[20];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v132;
  sub_10003803C(&v173, v172);
  char v133 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 60, v133);
  swift_bridgeObjectRelease();
  uint64_t v134 = v91[21];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v134;
  sub_10003803C(&v173, v172);
  char v135 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 61, v135);
  swift_bridgeObjectRelease();
  uint64_t v136 = v91[22];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v136;
  sub_10003803C(&v173, v172);
  char v137 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 62, v137);
  swift_bridgeObjectRelease();
  uint64_t v138 = v91[23];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v138;
  sub_10003803C(&v173, v172);
  char v139 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 63, v139);
  swift_bridgeObjectRelease();
  uint64_t v140 = v91[24];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v140;
  sub_10003803C(&v173, v172);
  char v141 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 64, v141);
  swift_bridgeObjectRelease();
  uint64_t v142 = v91[25];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v142;
  sub_10003803C(&v173, v172);
  char v143 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 65, v143);
  swift_bridgeObjectRelease();
  uint64_t v144 = v91[26];
  uint64_t v174 = &type metadata for Int;
  *(void *)&long long v173 = v144;
  sub_10003803C(&v173, v172);
  char v145 = swift_isUniquelyReferenced_nonNull_native();
  sub_1000354E0(v172, 66, v145);
  swift_bridgeObjectRelease();
  uint64_t v146 = swift_bridgeObjectRetain();
  sub_1001813A4(v146, 0, &v175);
  swift_bridgeObjectRelease();
  uint64_t v147 = swift_bridgeObjectRetain();
  sub_1001813A4(v147, 1, &v175);
  swift_bridgeObjectRelease();
  uint64_t v148 = swift_bridgeObjectRetain();
  sub_1001813A4(v148, 2, &v175);
  swift_bridgeObjectRelease();
  uint64_t v149 = swift_bridgeObjectRetain();
  sub_1001813A4(v149, 3, &v175);
  swift_bridgeObjectRelease();
  uint64_t v150 = swift_bridgeObjectRetain();
  sub_1001813A4(v150, 4, &v175);
  swift_bridgeObjectRelease();
  uint64_t v151 = swift_bridgeObjectRetain();
  sub_1001813A4(v151, 5, &v175);
  swift_bridgeObjectRelease();
  uint64_t v152 = swift_bridgeObjectRetain();
  sub_1001813A4(v152, 6, &v175);
  swift_bridgeObjectRelease();
  uint64_t v153 = swift_bridgeObjectRetain();
  sub_1001813A4(v153, 7, &v175);
  swift_bridgeObjectRelease();
  uint64_t v154 = swift_bridgeObjectRetain();
  sub_1001813A4(v154, 8, &v175);
  swift_bridgeObjectRelease();
  uint64_t v155 = swift_bridgeObjectRetain();
  sub_1001813A4(v155, 9, &v175);
  swift_bridgeObjectRelease();
  uint64_t v156 = swift_bridgeObjectRetain();
  sub_1001813A4(v156, 10, &v175);
  swift_bridgeObjectRelease();
  uint64_t v157 = swift_bridgeObjectRetain();
  sub_1001813A4(v157, 11, &v175);
  swift_bridgeObjectRelease();
  uint64_t v158 = swift_bridgeObjectRetain();
  sub_1001813A4(v158, 12, &v175);
  swift_bridgeObjectRelease();
  uint64_t v159 = swift_bridgeObjectRetain();
  sub_1001813A4(v159, 13, &v175);
  swift_bridgeObjectRelease();
  uint64_t v160 = swift_bridgeObjectRetain();
  sub_1001813A4(v160, 14, &v175);
  swift_bridgeObjectRelease();
  uint64_t v161 = swift_bridgeObjectRetain();
  sub_1001813A4(v161, 15, &v175);
  swift_bridgeObjectRelease();
  uint64_t v162 = swift_bridgeObjectRetain();
  sub_1001813A4(v162, 16, &v175);
  swift_bridgeObjectRelease();
  uint64_t v163 = swift_bridgeObjectRetain();
  sub_1001813A4(v163, 17, &v175);
  swift_bridgeObjectRelease();
  uint64_t v164 = swift_bridgeObjectRetain();
  if (*(void *)(sub_10017C8FC(v164, (uint64_t (*)(void))sub_100184BC8, &qword_1004813E0) + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  *(void *)&long long v173 = v1;
  uint64_t v165 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v165, 1, &v173);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v166 = v173;
  uint64_t v167 = swift_bridgeObjectRetain();
  if (*(void *)(sub_10017C5B8(v167) + 16))
  {
    sub_100010BCC(&qword_100481078);
    unint64_t v168 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v168 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v173 = v168;
  uint64_t v169 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v169, 1, &v173);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v170 = sub_10017D03C(v173, v166, (uint64_t)sub_1001CC200, (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_10018B214);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v170;
}

void AWDLStatistics.LowLatencyStatistics.hash(into:)(uint64_t a1)
{
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)();
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
  uint64_t v4 = v3[27];
  uint64_t v5 = v3[28];
  uint64_t v6 = v3[29];
  uint64_t v7 = v3[30];
  uint64_t v8 = v3[31];
  uint64_t v9 = v3[32];
  uint64_t v10 = v3[33];
  uint64_t v11 = v3[34];
  uint64_t v12 = v3[35];
  uint64_t v13 = v3[36];
  uint64_t v14 = v3[37];
  uint64_t v15 = v3[38];
  uint64_t v16 = v3[39];
  uint64_t v17 = v3[40];
  uint64_t v18 = v3[41];
  uint64_t v19 = v3[42];
  uint64_t v20 = v3[43];
  uint64_t v21 = v3[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8(a1, v4);
  sub_10009EBD8(a1, v5);
  sub_10009EBD8(a1, v6);
  sub_10009EBD8(a1, v7);
  sub_10009EBD8(a1, v8);
  sub_10009EBD8(a1, v9);
  sub_10009EBD8(a1, v10);
  sub_10009EBD8(a1, v11);
  sub_10009EBD8(a1, v12);
  sub_10009EBD8(a1, v13);
  sub_10009EBD8(a1, v14);
  sub_10009EBD8(a1, v15);
  sub_10009EBD8(a1, v16);
  sub_10009EBD8(a1, v17);
  sub_10009EBD8(a1, v18);
  sub_10009EBD8(a1, v19);
  sub_10009EBD8(a1, v20);

  sub_10009EBD8(a1, v21);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.hashValue.getter()
{
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)();
  uint64_t v1 = (long long *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
  long long v2 = v1[11];
  long long v38 = v1[10];
  long long v39 = v2;
  long long v40 = v1[12];
  uint64_t v3 = *((void *)v1 + 27);
  uint64_t v41 = *((void *)v1 + 26);
  long long v4 = v1[7];
  long long v34 = v1[6];
  long long v35 = v4;
  long long v5 = v1[9];
  long long v36 = v1[8];
  long long v37 = v5;
  long long v6 = v1[3];
  long long v30 = v1[2];
  long long v31 = v6;
  long long v7 = v1[5];
  long long v32 = v1[4];
  long long v33 = v7;
  long long v8 = v1[1];
  long long v28 = *v1;
  long long v29 = v8;
  uint64_t v9 = *((void *)v1 + 28);
  uint64_t v10 = *((void *)v1 + 29);
  uint64_t v11 = *((void *)v1 + 30);
  uint64_t v12 = *((void *)v1 + 31);
  uint64_t v13 = *((void *)v1 + 32);
  uint64_t v14 = *((void *)v1 + 33);
  uint64_t v15 = *((void *)v1 + 34);
  uint64_t v16 = *((void *)v1 + 35);
  uint64_t v18 = *((void *)v1 + 36);
  uint64_t v19 = *((void *)v1 + 37);
  uint64_t v20 = *((void *)v1 + 38);
  uint64_t v21 = *((void *)v1 + 39);
  uint64_t v22 = *((void *)v1 + 40);
  uint64_t v23 = *((void *)v1 + 41);
  uint64_t v24 = *((void *)v1 + 42);
  uint64_t v25 = *((void *)v1 + 43);
  uint64_t v26 = *((void *)v1 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8((uint64_t)v27, v3);
  sub_10009EBD8((uint64_t)v27, v9);
  sub_10009EBD8((uint64_t)v27, v10);
  sub_10009EBD8((uint64_t)v27, v11);
  sub_10009EBD8((uint64_t)v27, v12);
  sub_10009EBD8((uint64_t)v27, v13);
  sub_10009EBD8((uint64_t)v27, v14);
  sub_10009EBD8((uint64_t)v27, v15);
  sub_10009EBD8((uint64_t)v27, v16);
  sub_10009EBD8((uint64_t)v27, v18);
  sub_10009EBD8((uint64_t)v27, v19);
  sub_10009EBD8((uint64_t)v27, v20);
  sub_10009EBD8((uint64_t)v27, v21);
  sub_10009EBD8((uint64_t)v27, v22);
  sub_10009EBD8((uint64_t)v27, v23);
  sub_10009EBD8((uint64_t)v27, v24);
  sub_10009EBD8((uint64_t)v27, v25);
  sub_10009EBD8((uint64_t)v27, v26);
  return Hasher._finalize()();
}

Swift::Int sub_100183184(uint64_t a1)
{
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)();
  uint64_t v3 = (long long *)(v1 + *(int *)(a1 + 20));
  long long v4 = v3[11];
  long long v40 = v3[10];
  long long v41 = v4;
  long long v42 = v3[12];
  uint64_t v5 = *((void *)v3 + 27);
  uint64_t v43 = *((void *)v3 + 26);
  long long v6 = v3[7];
  long long v36 = v3[6];
  long long v37 = v6;
  long long v7 = v3[9];
  long long v38 = v3[8];
  long long v39 = v7;
  long long v8 = v3[3];
  long long v32 = v3[2];
  long long v33 = v8;
  long long v9 = v3[5];
  long long v34 = v3[4];
  long long v35 = v9;
  long long v10 = v3[1];
  long long v30 = *v3;
  long long v31 = v10;
  uint64_t v11 = *((void *)v3 + 28);
  uint64_t v12 = *((void *)v3 + 29);
  uint64_t v13 = *((void *)v3 + 30);
  uint64_t v14 = *((void *)v3 + 31);
  uint64_t v15 = *((void *)v3 + 32);
  uint64_t v16 = *((void *)v3 + 33);
  uint64_t v17 = *((void *)v3 + 34);
  uint64_t v18 = *((void *)v3 + 35);
  uint64_t v20 = *((void *)v3 + 36);
  uint64_t v21 = *((void *)v3 + 37);
  uint64_t v22 = *((void *)v3 + 38);
  uint64_t v23 = *((void *)v3 + 39);
  uint64_t v24 = *((void *)v3 + 40);
  uint64_t v25 = *((void *)v3 + 41);
  uint64_t v26 = *((void *)v3 + 42);
  uint64_t v27 = *((void *)v3 + 43);
  uint64_t v28 = *((void *)v3 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8((uint64_t)v29, v5);
  sub_10009EBD8((uint64_t)v29, v11);
  sub_10009EBD8((uint64_t)v29, v12);
  sub_10009EBD8((uint64_t)v29, v13);
  sub_10009EBD8((uint64_t)v29, v14);
  sub_10009EBD8((uint64_t)v29, v15);
  sub_10009EBD8((uint64_t)v29, v16);
  sub_10009EBD8((uint64_t)v29, v17);
  sub_10009EBD8((uint64_t)v29, v18);
  sub_10009EBD8((uint64_t)v29, v20);
  sub_10009EBD8((uint64_t)v29, v21);
  sub_10009EBD8((uint64_t)v29, v22);
  sub_10009EBD8((uint64_t)v29, v23);
  sub_10009EBD8((uint64_t)v29, v24);
  sub_10009EBD8((uint64_t)v29, v25);
  sub_10009EBD8((uint64_t)v29, v26);
  sub_10009EBD8((uint64_t)v29, v27);
  sub_10009EBD8((uint64_t)v29, v28);
  return Hasher._finalize()();
}

void sub_10018335C(uint64_t a1, uint64_t a2)
{
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)();
  uint64_t v5 = (void *)(v2 + *(int *)(a2 + 20));
  uint64_t v6 = v5[27];
  uint64_t v7 = v5[28];
  uint64_t v8 = v5[29];
  uint64_t v9 = v5[30];
  uint64_t v10 = v5[31];
  uint64_t v11 = v5[32];
  uint64_t v12 = v5[33];
  uint64_t v13 = v5[34];
  uint64_t v14 = v5[35];
  uint64_t v15 = v5[36];
  uint64_t v16 = v5[37];
  uint64_t v17 = v5[38];
  uint64_t v18 = v5[39];
  uint64_t v19 = v5[40];
  uint64_t v20 = v5[41];
  uint64_t v21 = v5[42];
  uint64_t v22 = v5[43];
  uint64_t v23 = v5[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8(a1, v6);
  sub_10009EBD8(a1, v7);
  sub_10009EBD8(a1, v8);
  sub_10009EBD8(a1, v9);
  sub_10009EBD8(a1, v10);
  sub_10009EBD8(a1, v11);
  sub_10009EBD8(a1, v12);
  sub_10009EBD8(a1, v13);
  sub_10009EBD8(a1, v14);
  sub_10009EBD8(a1, v15);
  sub_10009EBD8(a1, v16);
  sub_10009EBD8(a1, v17);
  sub_10009EBD8(a1, v18);
  sub_10009EBD8(a1, v19);
  sub_10009EBD8(a1, v20);
  sub_10009EBD8(a1, v21);
  sub_10009EBD8(a1, v22);

  sub_10009EBD8(a1, v23);
}

Swift::Int sub_100183528(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)();
  long long v4 = (long long *)(v2 + *(int *)(a2 + 20));
  long long v5 = v4[11];
  long long v41 = v4[10];
  long long v42 = v5;
  long long v43 = v4[12];
  uint64_t v6 = *((void *)v4 + 27);
  uint64_t v44 = *((void *)v4 + 26);
  long long v7 = v4[7];
  long long v37 = v4[6];
  long long v38 = v7;
  long long v8 = v4[9];
  long long v39 = v4[8];
  long long v40 = v8;
  long long v9 = v4[3];
  long long v33 = v4[2];
  long long v34 = v9;
  long long v10 = v4[5];
  long long v35 = v4[4];
  long long v36 = v10;
  long long v11 = v4[1];
  long long v31 = *v4;
  long long v32 = v11;
  uint64_t v12 = *((void *)v4 + 28);
  uint64_t v13 = *((void *)v4 + 29);
  uint64_t v14 = *((void *)v4 + 30);
  uint64_t v15 = *((void *)v4 + 31);
  uint64_t v16 = *((void *)v4 + 32);
  uint64_t v17 = *((void *)v4 + 33);
  uint64_t v18 = *((void *)v4 + 34);
  uint64_t v19 = *((void *)v4 + 35);
  uint64_t v21 = *((void *)v4 + 36);
  uint64_t v22 = *((void *)v4 + 37);
  uint64_t v23 = *((void *)v4 + 38);
  uint64_t v24 = *((void *)v4 + 39);
  uint64_t v25 = *((void *)v4 + 40);
  uint64_t v26 = *((void *)v4 + 41);
  uint64_t v27 = *((void *)v4 + 42);
  uint64_t v28 = *((void *)v4 + 43);
  uint64_t v29 = *((void *)v4 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10009EBD8((uint64_t)v30, v6);
  sub_10009EBD8((uint64_t)v30, v12);
  sub_10009EBD8((uint64_t)v30, v13);
  sub_10009EBD8((uint64_t)v30, v14);
  sub_10009EBD8((uint64_t)v30, v15);
  sub_10009EBD8((uint64_t)v30, v16);
  sub_10009EBD8((uint64_t)v30, v17);
  sub_10009EBD8((uint64_t)v30, v18);
  sub_10009EBD8((uint64_t)v30, v19);
  sub_10009EBD8((uint64_t)v30, v21);
  sub_10009EBD8((uint64_t)v30, v22);
  sub_10009EBD8((uint64_t)v30, v23);
  sub_10009EBD8((uint64_t)v30, v24);
  sub_10009EBD8((uint64_t)v30, v25);
  sub_10009EBD8((uint64_t)v30, v26);
  sub_10009EBD8((uint64_t)v30, v27);
  sub_10009EBD8((uint64_t)v30, v28);
  sub_10009EBD8((uint64_t)v30, v29);
  return Hasher._finalize()();
}

BOOL sub_1001836FC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(a1, a2)) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  long long v7 = *(_OWORD *)&a1[v6 + 176];
  v35[10]  = *(_OWORD *)&a1[v6 + 160];
  v35[11]  = v7;
  v35[12]  = *(_OWORD *)&a1[v6 + 192];
  uint64_t v36 = *(void *)&a1[v6 + 208];
  long long v8 = *(_OWORD *)&a1[v6 + 112];
  v35[6]  = *(_OWORD *)&a1[v6 + 96];
  v35[7]  = v8;
  long long v9 = *(_OWORD *)&a1[v6 + 144];
  v35[8]  = *(_OWORD *)&a1[v6 + 128];
  v35[9]  = v9;
  long long v10 = *(_OWORD *)&a1[v6 + 48];
  v35[2]  = *(_OWORD *)&a1[v6 + 32];
  v35[3]  = v10;
  long long v11 = *(_OWORD *)&a1[v6 + 80];
  v35[4]  = *(_OWORD *)&a1[v6 + 64];
  v35[5]  = v11;
  long long v12 = *(_OWORD *)&a1[v6 + 16];
  v35[0]  = *(_OWORD *)&a1[v6];
  v35[1]  = v12;
  long long v13 = *(_OWORD *)&a1[v6 + 296];
  long long v14 = *(_OWORD *)&a1[v6 + 328];
  long long v15 = *(_OWORD *)&a1[v6 + 344];
  v33[6]  = *(_OWORD *)&a1[v6 + 312];
  v33[7]  = v14;
  v33[8]  = v15;
  long long v16 = *(_OWORD *)&a1[v6 + 232];
  long long v17 = *(_OWORD *)&a1[v6 + 264];
  long long v18 = *(_OWORD *)&a1[v6 + 280];
  v33[2]  = *(_OWORD *)&a1[v6 + 248];
  v33[3]  = v17;
  v33[4]  = v18;
  v33[5]  = v13;
  v33[0]  = *(_OWORD *)&a1[v6 + 216];
  v33[1]  = v16;
  uint64_t v19 = &a2[v6];
  long long v20 = *((_OWORD *)v19 + 11);
  v37[10]  = *((_OWORD *)v19 + 10);
  v37[11]  = v20;
  v37[12]  = *((_OWORD *)v19 + 12);
  uint64_t v38 = *((void *)v19 + 26);
  long long v21 = *((_OWORD *)v19 + 7);
  v37[6]  = *((_OWORD *)v19 + 6);
  v37[7]  = v21;
  long long v22 = *((_OWORD *)v19 + 9);
  v37[8]  = *((_OWORD *)v19 + 8);
  v37[9]  = v22;
  long long v23 = *((_OWORD *)v19 + 3);
  v37[2]  = *((_OWORD *)v19 + 2);
  v37[3]  = v23;
  long long v24 = *((_OWORD *)v19 + 5);
  v37[4]  = *((_OWORD *)v19 + 4);
  v37[5]  = v24;
  long long v25 = *((_OWORD *)v19 + 1);
  v37[0]  = *(_OWORD *)v19;
  v37[1]  = v25;
  long long v26 = *(_OWORD *)(v19 + 296);
  long long v27 = *(_OWORD *)(v19 + 328);
  long long v28 = *(_OWORD *)(v19 + 344);
  v34[6]  = *(_OWORD *)(v19 + 312);
  v34[7]  = v27;
  v34[8]  = v28;
  long long v29 = *(_OWORD *)(v19 + 264);
  long long v30 = *(_OWORD *)(v19 + 280);
  v34[2]  = *(_OWORD *)(v19 + 248);
  v34[3]  = v29;
  long long v31 = *(_OWORD *)(v19 + 232);
  v34[4]  = v30;
  v34[5]  = v26;
  v34[0]  = *(_OWORD *)(v19 + 216);
  v34[1]  = v31;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v35, v37))return 0; {
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v33, (uint64_t *)v34);
  }
}

void AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v9 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    long long v10 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      Swift::UInt32 v11 = *v10++;
      Hasher._combine(_:)(v11);
      --v9;
    }
    while (v9);
  }
  Swift::UInt v12 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    long long v13 = (Swift::UInt32 *)(a3 + 32);
    do
    {
      Swift::UInt32 v14 = *v13++;
      Hasher._combine(_:)(v14);
      --v12;
    }
    while (v12);
  }
  Swift::UInt v15 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v15);
  if (v15)
  {
    long long v16 = (Swift::UInt32 *)(a4 + 32);
    do
    {
      Swift::UInt32 v17 = *v16++;
      Hasher._combine(_:)(v17);
      --v15;
    }
    while (v15);
  }
  Swift::UInt v18 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    uint64_t v19 = (Swift::UInt32 *)(a5 + 32);
    do
    {
      Swift::UInt32 v20 = *v19++;
      Hasher._combine(_:)(v20);
      --v18;
    }
    while (v18);
  }
}

BOOL static AWDLStatistics.AirPlayStatistics.Histograms.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!sub_1000956B0(a1, a5) || !sub_1000956B0(a2, a6) || !sub_1000956B0(a3, a7)) {
    return 0;
  }

  return sub_1000956B0(a4, a8);
}

Swift::Int AWDLStatistics.AirPlayStatistics.Histograms.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_100183A2C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

void sub_100183A8C(uint64_t a1)
{
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_100183A98()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

BOOL sub_100183AF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  if (!sub_1000956B0(*a1, *a2) || !sub_1000956B0(v2, v5) || !sub_1000956B0(v4, v7)) {
    return 0;
  }

  return sub_1000956B0(v3, v6);
}

uint64_t AWDLStatistics.AirPlayStatistics.clientModeDuration.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.getter()
{
  return *(unsigned __int16 *)(v0 + 34);
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 34)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.routablePeerCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.getter()
{
  return *(unsigned __int16 *)(v0 + 36);
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 36)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.getter()
{
  return *(unsigned __int16 *)(v0 + 38);
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 38)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.getter()
{
  return *(unsigned __int16 *)(v0 + 40);
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.setter(uint64_t result)
{
  *(_WORD *)(v1 + 40)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.getter()
{
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 42)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.awdlVersion.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.getter()
{
  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 43)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.getter()
{
  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 44)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.getter()
{
  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 52)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerInfraChannel.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.getter()
{
  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 60)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.senderPlatform.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.getter()
{
  return *(unsigned __int8 *)(v0 + 61);
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 61)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.startingRSSI.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.getter()
{
  return *(unsigned __int8 *)(v0 + 62);
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 62)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.inRetroMode.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.getter()
{
  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 66)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.getter()
{
  return *(unsigned __int8 *)(v0 + 67);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 67)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerIsSDB.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.getter()
{
  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 68)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.getter()
{
  return *(unsigned __int8 *)(v0 + 69);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 69)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.getter()
{
  return *(unsigned __int8 *)(v0 + 70);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 70)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.getter()
{
  return *(unsigned __int8 *)(v0 + 71);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 71)  = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 72)  = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  v4[10]  = a1;
  v4[11]  = a2;
  v4[12]  = a3;
  v4[13]  = a4;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.eventPayload.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = _swiftEmptyDictionarySingleton;
  char v78 = _swiftEmptyDictionarySingleton;
  uint64_t v3 = *v0;
  char v77 = &type metadata for UInt64;
  *(void *)&long long v76 = v3;
  sub_10003803C(&v76, v75);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0[1];
  char v77 = &type metadata for UInt64;
  *(void *)&long long v76 = v5;
  sub_10003803C(&v76, v75);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 1, v6);
  swift_bridgeObjectRelease();
  int v7 = *((_DWORD *)v0 + 4);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v7;
  sub_10003803C(&v76, v75);
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 2, v8);
  swift_bridgeObjectRelease();
  int v9 = *((_DWORD *)v0 + 5);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v9;
  sub_10003803C(&v76, v75);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 3, v10);
  swift_bridgeObjectRelease();
  int v11 = *((_DWORD *)v0 + 6);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v11;
  sub_10003803C(&v76, v75);
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 4, v12);
  swift_bridgeObjectRelease();
  int v13 = *((_DWORD *)v0 + 7);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v13;
  sub_10003803C(&v76, v75);
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 5, v14);
  swift_bridgeObjectRelease();
  __int16 v15 = *((_WORD *)v0 + 16);
  char v77 = &type metadata for UInt16;
  LOWORD(v76)  = v15;
  sub_10003803C(&v76, v75);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 6, v16);
  swift_bridgeObjectRelease();
  __int16 v17 = *((_WORD *)v0 + 17);
  char v77 = &type metadata for UInt16;
  LOWORD(v76)  = v17;
  sub_10003803C(&v76, v75);
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 7, v18);
  swift_bridgeObjectRelease();
  __int16 v19 = *((_WORD *)v0 + 18);
  char v77 = &type metadata for UInt16;
  LOWORD(v76)  = v19;
  sub_10003803C(&v76, v75);
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 8, v20);
  swift_bridgeObjectRelease();
  __int16 v21 = *((_WORD *)v0 + 19);
  char v77 = &type metadata for UInt16;
  LOWORD(v76)  = v21;
  sub_10003803C(&v76, v75);
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 9, v22);
  swift_bridgeObjectRelease();
  __int16 v23 = *((_WORD *)v0 + 20);
  char v77 = &type metadata for UInt16;
  LOWORD(v76)  = v23;
  sub_10003803C(&v76, v75);
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 10, v24);
  swift_bridgeObjectRelease();
  char v25 = *((unsigned char *)v0 + 42);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v25;
  sub_10003803C(&v76, v75);
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 11, v26);
  swift_bridgeObjectRelease();
  char v27 = *((unsigned char *)v0 + 43);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v27;
  sub_10003803C(&v76, v75);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 12, v28);
  swift_bridgeObjectRelease();
  char v29 = *((unsigned char *)v0 + 44);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v29;
  sub_10003803C(&v76, v75);
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 13, v30);
  swift_bridgeObjectRelease();
  int v31 = *((_DWORD *)v0 + 12);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v31;
  sub_10003803C(&v76, v75);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 14, v32);
  swift_bridgeObjectRelease();
  char v33 = *((unsigned char *)v0 + 52);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v33;
  sub_10003803C(&v76, v75);
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 15, v34);
  swift_bridgeObjectRelease();
  int v35 = *((_DWORD *)v0 + 14);
  char v77 = &type metadata for UInt32;
  LODWORD(v76)  = v35;
  sub_10003803C(&v76, v75);
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 16, v36);
  swift_bridgeObjectRelease();
  char v37 = *((unsigned char *)v0 + 60);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v37;
  sub_10003803C(&v76, v75);
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 17, v38);
  swift_bridgeObjectRelease();
  char v39 = *((unsigned char *)v0 + 61);
  char v77 = &type metadata for Int8;
  LOBYTE(v76)  = v39;
  sub_10003803C(&v76, v75);
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 18, v40);
  swift_bridgeObjectRelease();
  char v41 = *((unsigned char *)v0 + 62);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v41;
  sub_10003803C(&v76, v75);
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 19, v42);
  swift_bridgeObjectRelease();
  char v43 = *((unsigned char *)v0 + 63);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v43;
  sub_10003803C(&v76, v75);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 20, v44);
  swift_bridgeObjectRelease();
  char v45 = *((unsigned char *)v0 + 64);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v45;
  sub_10003803C(&v76, v75);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 21, v46);
  swift_bridgeObjectRelease();
  char v47 = *((unsigned char *)v0 + 65);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v47;
  sub_10003803C(&v76, v75);
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 22, v48);
  swift_bridgeObjectRelease();
  char v49 = *((unsigned char *)v0 + 66);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v49;
  sub_10003803C(&v76, v75);
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 23, v50);
  swift_bridgeObjectRelease();
  char v51 = *((unsigned char *)v0 + 67);
  char v77 = &type metadata for Bool;
  LOBYTE(v76)  = v51;
  sub_10003803C(&v76, v75);
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 24, v52);
  swift_bridgeObjectRelease();
  char v53 = *((unsigned char *)v0 + 68);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v53;
  sub_10003803C(&v76, v75);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 25, v54);
  swift_bridgeObjectRelease();
  char v55 = *((unsigned char *)v0 + 69);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v55;
  sub_10003803C(&v76, v75);
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 26, v56);
  swift_bridgeObjectRelease();
  char v57 = *((unsigned char *)v0 + 70);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v57;
  sub_10003803C(&v76, v75);
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 27, v58);
  swift_bridgeObjectRelease();
  char v59 = *((unsigned char *)v0 + 71);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v59;
  sub_10003803C(&v76, v75);
  char v60 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 28, v60);
  swift_bridgeObjectRelease();
  char v61 = *((unsigned char *)v0 + 72);
  char v77 = &type metadata for UInt8;
  LOBYTE(v76)  = v61;
  sub_10003803C(&v76, v75);
  char v62 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003564C(v75, 29, v62);
  swift_bridgeObjectRelease();
  uint64_t v63 = v0[10];
  uint64_t v64 = v0[11];
  uint64_t v66 = v1[12];
  uint64_t v65 = v1[13];
  sub_10018C870(v63, 0, &v78);
  sub_10018C870(v65, 3u, &v78);
  sub_10018C870(v66, 2u, &v78);
  sub_10018C870(v64, 1u, &v78);
  uint64_t v67 = swift_bridgeObjectRetain();
  if (*(void *)(sub_10017C8FC(v67, (uint64_t (*)(void))sub_100185E3C, &qword_1004813D0) + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  *(void *)&long long v76 = v2;
  char v68 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v68, 1, &v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v69 = v76;
  uint64_t v70 = swift_bridgeObjectRetain();
  if (*(void *)(sub_10017C5B8(v70) + 16))
  {
    sub_100010BCC(&qword_100481078);
    char v71 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    char v71 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v76 = v71;
  char v72 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v72, 1, &v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = sub_10017D03C(v76, v69, (uint64_t)sub_1001CC200, (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_10018B214);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v73;
}

void AWDLStatistics.AirPlayStatistics.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(void *)v2);
  Hasher._combine(_:)(*(void *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 16));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(_WORD *)(v2 + 32));
  Hasher._combine(_:)(*(_WORD *)(v2 + 34));
  Hasher._combine(_:)(*(_WORD *)(v2 + 36));
  Hasher._combine(_:)(*(_WORD *)(v2 + 38));
  Hasher._combine(_:)(*(_WORD *)(v2 + 40));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 42));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 43));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 52));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 56));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 60));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 61));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 62) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 63) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 64) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 65) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 66) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 67) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 68));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 69));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 70));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 71));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 72));
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v6 = *(void *)(v2 + 96);
  uint64_t v7 = *(void *)(v2 + 104);

  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(a1, v4, v5, v6, v7);
}

Swift::Int AWDLStatistics.AirPlayStatistics.hashValue.getter()
{
  Hasher.init(_seed:)();
  AWDLStatistics.AirPlayStatistics.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t sub_100184AE4(char a1)
{
  unint64_t result = 0x65636976726573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6172666E49796DLL;
      break;
    case 2:
      unint64_t result = 0x72666E4972656570;
      break;
    case 3:
      unint64_t result = 0x424453796DLL;
      break;
    case 4:
      unint64_t result = 0x42445372656570;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x44495353656D6173;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100184BC8(char a1)
{
  uint64_t result = 0x4244537369;
  switch(a1)
  {
    case 1:
      return 0x437972746E756F63;
    case 2:
    case 3:
      return 0x6973735272656570;
    case 4:
      return 0x6163437874;
    case 5:
      return 0xD000000000000018;
    case 6:
      return 0xD000000000000019;
    case 7:
      return 0xD000000000000018;
    case 8:
      return 0xD000000000000019;
    case 9:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 24:
      return 0xD000000000000017;
    case 13:
      return 0xD00000000000001ELL;
    case 14:
      return 0xD00000000000001DLL;
    case 15:
      return 0xD000000000000013;
    case 16:
      return 0x446E6F6973736573;
    case 17:
      return 0xD000000000000015;
    case 18:
      unsigned int v3 = 1668184435;
      return v3 | 0x6F72724500000000;
    case 19:
      return 0xD00000000000001CLL;
    case 22:
      return 0xD000000000000015;
    case 23:
      return 0xD000000000000013;
    case 25:
      return 0xD000000000000014;
    case 26:
      return 0xD000000000000014;
    case 27:
      return 0xD000000000000014;
    case 28:
      return 0xD000000000000010;
    case 29:
      return 0xD000000000000013;
    case 30:
      return 0xD000000000000016;
    case 31:
      return 0xD000000000000019;
    case 32:
      return 0x4449677472;
    case 33:
      return 0x44495353656D6173;
    case 34:
      return 0xD000000000000015;
    case 35:
      return 0xD000000000000015;
    case 36:
      return 0xD000000000000019;
    case 37:
      return 0xD000000000000015;
    case 38:
      return 0xD000000000000014;
    case 39:
      return 0xD00000000000001ELL;
    case 40:
      return 0x7365636375537874;
    case 41:
      return 0x6572697078457874;
    case 42:
      return 0x666675426F4E7874;
    case 43:
      return 0x434B43416F4E7874;
    case 44:
      uint64_t v4 = 0x6C6961467874;
      goto LABEL_62;
    case 45:
      return 0xD000000000000012;
    case 46:
      unsigned int v3 = 1330215028;
      return v3 | 0x6F72724500000000;
    case 47:
      return 0x65657246424D7874;
    case 48:
      return 0xD000000000000014;
    case 49:
      return 0xD000000000000013;
    case 50:
      return 0xD000000000000014;
    case 51:
      return 0x6570706F72447874;
    case 52:
      return 0xD000000000000019;
    case 53:
      return 0xD000000000000011;
    case 54:
      return 0xD00000000000001BLL;
    case 55:
      return 0x43726F7272457874;
    case 56:
      uint64_t v5 = 0x47356E4F7872;
      return (v5 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000) + 2;
    case 57:
      uint64_t v5 = 0x47326E4F7872;
      return (v5 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000) + 2;
    case 58:
      return 0xD000000000000013;
    case 59:
      return 0x6E756F43414E7874;
    case 60:
      return 0x756F43746B507872;
    case 61:
      uint64_t v4 = 0x47356E4F7872;
      goto LABEL_62;
    case 62:
      uint64_t v4 = 0x47326E4F7872;
LABEL_62:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
      break;
    case 63:
      uint64_t result = 0x7565757165527874;
      break;
    case 64:
      uint64_t result = 0xD000000000000012;
      break;
    case 65:
      uint64_t result = 0xD000000000000010;
      break;
    case 66:
      uint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100185344()
{
  Hasher.init(_seed:)();
  AWDLStatistics.AirPlayStatistics.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_100185380(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v13[4]  = a1[4];
  v13[5]  = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0]  = *a1;
  v13[1]  = v4;
  long long v5 = a1[3];
  Swift::UInt8 v13[2] = a1[2];
  v13[3]  = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  v13[6]  = v3;
  v14[0]  = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5]  = a2[5];
  v14[6]  = v10;
  long long v11 = a2[4];
  void v14[3] = v9;
  v14[4]  = v11;
  v14[1]  = v7;
  v14[2]  = v8;
  return _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v14);
}

uint64_t sub_1001853E8(char *a1, char *a2)
{
  return sub_100042558(*a1, *a2);
}

Swift::Int sub_1001853F4()
{
  return Hasher._finalize()();
}

uint64_t sub_100185490()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100185518()
{
  return Hasher._finalize()();
}

uint64_t sub_1001855B0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_10044E598;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001855BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6553657669746361;
  if (*v1) {
    uint64_t v2 = 0x64657463656A6572;
  }
  unint64_t v3 = 0xED00006563697672;
  if (*v1) {
    unint64_t v3 = 0xEF65636976726553;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_100185614(unsigned __int8 *a1, char *a2)
{
  return sub_1000421E8(*a1, *a2);
}

Swift::Int sub_100185620()
{
  return sub_1001E163C();
}

uint64_t sub_10018562C()
{
  return sub_10013F504();
}

Swift::Int sub_100185634()
{
  return sub_1001E163C();
}

unint64_t sub_10018563C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10018C5B8(*a1);
  *a2  = result;
  return result;
}

unint64_t sub_10018566C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100184AE4(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

uint64_t sub_100185698(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10004242C(*a1, *a2);
}

Swift::Int sub_1001856A4()
{
  return Hasher._finalize()();
}

uint64_t sub_100185750()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001857E8()
{
  return Hasher._finalize()();
}

unint64_t sub_100185890@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue  = &off_10044EF40;
  unint64_t result = sub_10018C604(*a1, v3);
  *a2  = result;
  return result;
}

void sub_1001858C8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xEB00000000726F74;
  uint64_t v5 = 0x616974696E497369;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F697461727564;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x65636976726573;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

uint64_t sub_100185930(char *a1, char *a2)
{
  return sub_100042144(*a1, *a2);
}

Swift::Int sub_10018593C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001859BC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100185A28()
{
  return Hasher._finalize()();
}

uint64_t sub_100185AA4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_10044F070;
  return sub_100185AB0(v2, a1, a2);
}

uint64_t sub_100185AB0@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3  = v6;
  return result;
}

void sub_100185B0C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65636976726573;
  if (*v1) {
    uint64_t v2 = 0x6E6F73616572;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_100185B48(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001861F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100184BC8);
}

Swift::Int sub_100185B60(uint64_t a1, uint64_t a2)
{
  return sub_1001862A0(a1, a2, (void (*)(uint64_t))sub_100184BC8);
}

uint64_t sub_100185B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186324(a1, a2, a3, (void (*)(void))sub_100184BC8);
}

Swift::Int sub_100185B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186394(a1, a2, a3, (void (*)(uint64_t))sub_100184BC8);
}

uint64_t sub_100185BA8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10018C564();
  *a1  = result;
  return result;
}

uint64_t sub_100185BD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100184BC8(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

uint64_t sub_100185C04(char a1)
{
  uint64_t result = 0x446C61746F547874;
  switch(a1)
  {
    case 1:
    case 7:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      uint64_t result = 0x6C65444350497874;
      break;
    case 3:
      uint64_t result = 0x616C654457467874;
      break;
    case 4:
      unsigned int v3 = 1464367220;
      goto LABEL_18;
    case 5:
      uint64_t result = 0x6152617461447874;
      break;
    case 6:
      uint64_t result = 0x6569727465527874;
      break;
    case 8:
      uint64_t result = 0xD000000000000015;
      break;
    case 9:
      uint64_t result = 0x74656B6361507874;
      break;
    case 10:
      uint64_t result = 0xD000000000000013;
      break;
    case 11:
      uint64_t result = 0x6163437874;
      break;
    case 12:
      uint64_t result = 0x4365756575716572;
      break;
    case 13:
      uint64_t result = 0x446C61746F547872;
      break;
    case 14:
      uint64_t result = 0x6C65444350497872;
      break;
    case 15:
      unsigned int v3 = 1464236146;
LABEL_18:
      uint64_t result = v3 | 0x616C654400000000;
      break;
    case 16:
      uint64_t result = 0x6152617461447872;
      break;
    case 17:
      uint64_t result = 0x495353527872;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100185E3C(char a1)
{
  uint64_t result = 0x73657479427874;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x73657479427872;
      break;
    case 2:
      uint64_t result = 0x7275446C61746F74;
      break;
    case 3:
      uint64_t result = 0xD000000000000012;
      break;
    case 4:
      uint64_t result = 0xD000000000000012;
      break;
    case 5:
      uint64_t result = 0xD000000000000011;
      break;
    case 6:
      uint64_t result = 0x6565506C61746F74;
      break;
    case 7:
      uint64_t result = 0xD000000000000011;
      break;
    case 8:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      uint64_t result = 0xD000000000000018;
      break;
    case 10:
      uint64_t result = 0x6C62616E45667370;
      break;
    case 11:
      uint64_t result = 0x737265566C647761;
      break;
    case 12:
      uint64_t result = 0xD000000000000016;
      break;
    case 13:
      uint64_t result = 0xD000000000000010;
      break;
    case 14:
    case 16:
    case 26:
    case 27:
    case 29:
      uint64_t result = 0xD000000000000015;
      break;
    case 15:
      uint64_t result = 0xD000000000000010;
      break;
    case 17:
      uint64_t result = 0x6C507265646E6573;
      break;
    case 18:
      uint64_t result = 0x676E697472617473;
      break;
    case 19:
      uint64_t result = 0x4D6F727465526E69;
      break;
    case 20:
      uint64_t result = 0x7366446F54617363;
      break;
    case 21:
      uint64_t result = 0xD000000000000011;
      break;
    case 22:
      uint64_t result = 0x79786F7250736664;
      break;
    case 23:
      unsigned int v3 = 1718379891;
      goto LABEL_24;
    case 24:
      unsigned int v3 = 1919247728;
LABEL_24:
      uint64_t result = v3 | 0x4453734900000000;
      break;
    case 25:
      uint64_t result = 0xD000000000000013;
      break;
    case 28:
      uint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001861D8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001861F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100185E3C);
}

uint64_t sub_1001861F0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_100186288(uint64_t a1, uint64_t a2)
{
  return sub_1001862A0(a1, a2, (void (*)(uint64_t))sub_100185E3C);
}

Swift::Int sub_1001862A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10018630C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186324(a1, a2, a3, (void (*)(void))sub_100185E3C);
}

uint64_t sub_100186324(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10018637C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186394(a1, a2, a3, (void (*)(uint64_t))sub_100185E3C);
}

Swift::Int sub_100186394(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001863FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10018C510();
  *a1  = result;
  return result;
}

uint64_t sub_10018642C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100185E3C(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

void *eventPayload(for:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v3 = (char *)&type metadata for UInt32;
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v2;
  sub_10003803C(__dst, &v216);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = _swiftEmptyDictionarySingleton;
  sub_100034178(&v216, 0xD000000000000010, 0x80000001003DC810, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = v214;
  swift_bridgeObjectRelease();
  int v6 = *(_DWORD *)(a1 + 8);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v6;
  sub_10003803C(__dst, &v216);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v5;
  sub_100034178(&v216, 0xD000000000000012, 0x80000001003DC830, v7);
  uint64_t v8 = v214;
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(a1 + 12);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v9;
  sub_10003803C(__dst, &v216);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v8;
  sub_100034178(&v216, 0xD000000000000012, 0x80000001003DC850, v10);
  uint64_t v11 = v214;
  swift_bridgeObjectRelease();
  int v12 = *(_DWORD *)(a1 + 16);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v12;
  sub_10003803C(__dst, &v216);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v11;
  sub_100034178(&v216, 0xD00000000000001ALL, 0x80000001003DC870, v13);
  uint64_t v14 = v214;
  swift_bridgeObjectRelease();
  int v15 = *(_DWORD *)(a1 + 20);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v15;
  sub_10003803C(__dst, &v216);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v14;
  sub_100034178(&v216, 0xD00000000000001DLL, 0x80000001003DC890, v16);
  uint64_t v17 = v214;
  swift_bridgeObjectRelease();
  char v18 = *(unsigned char *)(a1 + 24);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v18;
  sub_10003803C(__dst, &v216);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v17;
  sub_100034178(&v216, 0xD00000000000001DLL, 0x80000001003DC8B0, v19);
  uint64_t v20 = v214;
  swift_bridgeObjectRelease();
  char v21 = *(unsigned char *)(a1 + 25);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v21;
  sub_10003803C(__dst, &v216);
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v20;
  sub_100034178(&v216, 0xD000000000000014, 0x80000001003DC8D0, v22);
  uint64_t v23 = v214;
  swift_bridgeObjectRelease();
  char v24 = *(unsigned char *)(a1 + 26);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v24;
  sub_10003803C(__dst, &v216);
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v23;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DC8F0, v25);
  uint64_t v26 = v214;
  swift_bridgeObjectRelease();
  char v27 = *(unsigned char *)(a1 + 27);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v27;
  sub_10003803C(__dst, &v216);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v26;
  sub_100034178(&v216, 0xD000000000000020, 0x80000001003DC910, v28);
  uint64_t v29 = v214;
  swift_bridgeObjectRelease();
  char v30 = *(unsigned char *)(a1 + 28);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v30;
  sub_10003803C(__dst, &v216);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v29;
  sub_100034178(&v216, 0xD000000000000020, 0x80000001003DC940, v31);
  uint64_t v32 = v214;
  swift_bridgeObjectRelease();
  char v33 = *(unsigned char *)(a1 + 29);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v33;
  sub_10003803C(__dst, &v216);
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v32;
  sub_100034178(&v216, 0xD00000000000001FLL, 0x80000001003DC970, v34);
  uint64_t v35 = v214;
  swift_bridgeObjectRelease();
  char v36 = *(unsigned char *)(a1 + 30);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v36;
  sub_10003803C(__dst, &v216);
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v35;
  sub_100034178(&v216, 0xD000000000000023, 0x80000001003DC990, v37);
  uint64_t v38 = v214;
  swift_bridgeObjectRelease();
  char v39 = *(unsigned char *)(a1 + 31);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v39;
  sub_10003803C(__dst, &v216);
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v38;
  sub_100034178(&v216, 0xD000000000000026, 0x80000001003DC9C0, v40);
  uint64_t v41 = v214;
  swift_bridgeObjectRelease();
  char v42 = *(unsigned char *)(a1 + 32);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v42;
  sub_10003803C(__dst, &v216);
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v41;
  sub_100034178(&v216, 0xD000000000000026, 0x80000001003DC9F0, v43);
  uint64_t v44 = v214;
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(a1 + 40);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v45;
  sub_10003803C(__dst, &v216);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v44;
  sub_100034178(&v216, 0xD00000000000001FLL, 0x80000001003DCA20, v46);
  uint64_t v47 = v214;
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(a1 + 88);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v48;
  sub_10003803C(__dst, &v216);
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v47;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DCA40, v49);
  uint64_t v50 = v214;
  swift_bridgeObjectRelease();
  *((void *)&v217[0] + 1)  = sub_100010BCC(&qword_100481118);
  uint64_t v51 = *((void *)&v217[0] + 1);
  v209  = *((void *)&v217[0] + 1);
  long long v52 = *(_OWORD *)(a1 + 208);
  __dst[6]  = *(_OWORD *)(a1 + 192);
  __dst[7]  = v52;
  __dst[8]  = *(_OWORD *)(a1 + 224);
  long long v53 = *(_OWORD *)(a1 + 144);
  __dst[2]  = *(_OWORD *)(a1 + 128);
  __dst[3]  = v53;
  long long v54 = *(_OWORD *)(a1 + 176);
  __dst[4]  = *(_OWORD *)(a1 + 160);
  __dst[5]  = v54;
  long long v55 = *(_OWORD *)(a1 + 112);
  __dst[0]  = *(_OWORD *)(a1 + 96);
  __dst[1]  = v55;
  *(void *)&v216  = sub_10018CB84((uint64_t)__dst, (uint64_t)&__dst[9]);
  sub_10003803C(&v216, __dst);
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v50;
  sub_100034178(__dst, 0xD000000000000013, 0x80000001003DCA60, v56);
  uint64_t v57 = v214;
  swift_bridgeObjectRelease();
  long long v58 = *(_OWORD *)(a1 + 288);
  __dst[2]  = *(_OWORD *)(a1 + 272);
  __dst[3]  = v58;
  *(void *)&__dst[4]  = *(void *)(a1 + 304);
  long long v59 = *(_OWORD *)(a1 + 256);
  __dst[0]  = *(_OWORD *)(a1 + 240);
  __dst[1]  = v59;
  *((void *)&v217[0] + 1)  = v51;
  *(void *)&v216  = sub_10018CB84((uint64_t)__dst, (uint64_t)&__dst[4] + 8);
  sub_10003803C(&v216, __dst);
  char v60 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v57;
  sub_100034178(__dst, 0xD000000000000015, 0x80000001003DCA80, v60);
  uint64_t v61 = v214;
  swift_bridgeObjectRelease();
  uint64_t v62 = *(void *)(a1 + 48);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v62;
  sub_10003803C(__dst, &v216);
  char v63 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v61;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DCAA0, v63);
  uint64_t v64 = v214;
  swift_bridgeObjectRelease();
  uint64_t v65 = *(void *)(a1 + 56);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt64;
  *(void *)&__dst[0]  = v65;
  sub_10003803C(__dst, &v216);
  char v66 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v64;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DCAC0, v66);
  uint64_t v67 = v214;
  swift_bridgeObjectRelease();
  int v68 = *(_DWORD *)(a1 + 64);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v68;
  sub_10003803C(__dst, &v216);
  char v69 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v67;
  sub_100034178(&v216, 0xD000000000000018, 0x80000001003DCAE0, v69);
  uint64_t v70 = v214;
  swift_bridgeObjectRelease();
  __int16 v71 = *(_WORD *)(a1 + 68);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v71;
  sub_10003803C(__dst, &v216);
  char v72 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v70;
  sub_100034178(&v216, 0xD00000000000001ELL, 0x80000001003DCB00, v72);
  uint64_t v73 = v214;
  swift_bridgeObjectRelease();
  int v74 = *(_DWORD *)(a1 + 72);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v74;
  sub_10003803C(__dst, &v216);
  char v75 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v73;
  sub_100034178(&v216, 0xD000000000000018, 0x80000001003DCB20, v75);
  uint64_t v76 = v214;
  swift_bridgeObjectRelease();
  int v77 = *(_DWORD *)(a1 + 76);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v77;
  sub_10003803C(__dst, &v216);
  char v78 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v76;
  sub_100034178(&v216, 0xD000000000000018, 0x80000001003DCB40, v78);
  uint64_t v79 = v214;
  swift_bridgeObjectRelease();
  int v80 = *(_DWORD *)(a1 + 80);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v80;
  sub_10003803C(__dst, &v216);
  char v81 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v79;
  sub_100034178(&v216, 0xD000000000000015, 0x80000001003DCB60, v81);
  uint64_t v82 = v214;
  swift_bridgeObjectRelease();
  int v83 = *(_DWORD *)(a1 + 336);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v83;
  sub_10003803C(__dst, &v216);
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v82;
  sub_100034178(&v216, 0xD000000000000020, 0x80000001003DCB80, v84);
  uint64_t v85 = v214;
  swift_bridgeObjectRelease();
  int v86 = *(_DWORD *)(a1 + 340);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v86;
  sub_10003803C(__dst, &v216);
  char v87 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v85;
  sub_100034178(&v216, 0xD00000000000001DLL, 0x80000001003DCBB0, v87);
  uint64_t v88 = v214;
  swift_bridgeObjectRelease();
  int v89 = *(_DWORD *)(a1 + 344);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v89;
  sub_10003803C(__dst, &v216);
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v88;
  sub_100034178(&v216, 0xD000000000000018, 0x80000001003DCBD0, v90);
  uint64_t v91 = v214;
  swift_bridgeObjectRelease();
  int v92 = *(_DWORD *)(a1 + 348);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v92;
  sub_10003803C(__dst, &v216);
  char v93 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v91;
  v212  = 22;
  sub_100034178(&v216, 0xD000000000000016, 0x80000001003DCBF0, v93);
  uint64_t v94 = v214;
  swift_bridgeObjectRelease();
  int v95 = *(_DWORD *)(a1 + 352);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v95;
  sub_10003803C(__dst, &v216);
  char v96 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v94;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DCC10, v96);
  uint64_t v97 = v214;
  swift_bridgeObjectRelease();
  int v98 = *(_DWORD *)(a1 + 356);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v98;
  sub_10003803C(__dst, &v216);
  char v99 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v97;
  sub_100034178(&v216, 0xD00000000000001ALL, 0x80000001003DCC30, v99);
  uint64_t v100 = v214;
  swift_bridgeObjectRelease();
  __int16 v101 = *(_WORD *)(a1 + 3562);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v101;
  sub_10003803C(__dst, &v216);
  char v102 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v100;
  sub_100034178(&v216, 0xD000000000000019, 0x80000001003DCC50, v102);
  uint64_t v103 = v214;
  swift_bridgeObjectRelease();
  __int16 v104 = *(_WORD *)(a1 + 3564);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v104;
  sub_10003803C(__dst, &v216);
  char v105 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v103;
  sub_100034178(&v216, 0xD000000000000019, 0x80000001003DCC70, v105);
  uint64_t v106 = v214;
  swift_bridgeObjectRelease();
  __int16 v107 = *(_WORD *)(a1 + 3566);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v107;
  sub_10003803C(__dst, &v216);
  char v108 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v106;
  sub_100034178(&v216, 0xD00000000000001ALL, 0x80000001003DCC90, v108);
  uint64_t v109 = v214;
  swift_bridgeObjectRelease();
  __int16 v110 = *(_WORD *)(a1 + 3568);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v110;
  sub_10003803C(__dst, &v216);
  char v111 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v109;
  sub_100034178(&v216, 0xD00000000000001BLL, 0x80000001003DCCB0, v111);
  uint64_t v112 = v214;
  swift_bridgeObjectRelease();
  __int16 v113 = *(_WORD *)(a1 + 3570);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt16;
  LOWORD(__dst[0])  = v113;
  sub_10003803C(__dst, &v216);
  char v114 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v214  = v112;
  sub_100034178(&v216, 0xD000000000000019, 0x80000001003DCC70, v114);
  uint64_t v208 = v214;
  swift_bridgeObjectRelease();
  v210  = a1;
  memcpy(__dst, (const void *)(a1 + 360), sizeof(__dst));
  v215  = v209;
  sub_10008377C(0, 54, 0);
  v211  = sub_100010BCC((uint64_t *)&unk_1004883F0);
  uint64_t v115 = 0;
  unint64_t v116 = (unint64_t)v217;
  unint64_t v117 = 0x80000001003DCCF0;
  do
  {
    int v118 = *(_DWORD *)((char *)__dst + v115);
    uint64_t v119 = *(void *)((char *)__dst + v115 + 8);
    sub_100010BCC(qword_10047DD00);
    unint64_t v120 = swift_allocObject();
    *(_OWORD *)(v120 + 16)  = xmmword_1003B4420;
    *(void *)(v120 + 32)  = 0xD000000000000016;
    *(void *)(v120 + 40)  = 0x80000001003DCCD0;
    *(void *)(v120 + 72)  = &type metadata for UInt32;
    *(_DWORD *)(v120 + 48)  = v118;
    *(void *)(v120 + 80)  = 0xD000000000000019;
    uint64_t v121 = v120 + 80;
    *(void *)(v120 + 120)  = &type metadata for UInt64;
    *(void *)(v120 + 88)  = 0x80000001003DCCF0;
    *(void *)(v120 + 96)  = v119;
    uint64_t v122 = (void *)static _DictionaryStorage.allocate(capacity:)();
    sub_10018CF7C(v120 + 32, (uint64_t)&v216);
    uint64_t v123 = *((void *)&v216 + 1);
    uint64_t v124 = v216;
    swift_retain();
    unint64_t v125 = sub_10000DDE0(v124, v123);
    if (v127)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      sub_10008379C(v126 > 1, v116, 1);
      uint64_t v149 = v214;
      goto LABEL_20;
    }
    unsigned int v3 = (char *)(v122 + 8);
    *(void *)((char *)v122 + ((v125 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v125;
    uint64_t v128 = (uint64_t *)(v122[6] + 16 * v125);
    *uint64_t v128 = v124;
    v128[1]  = v123;
    sub_10003803C(v217, (_OWORD *)(v122[7] + 32 * v125));
    uint64_t v129 = v122[2];
    BOOL v130 = __OFADD__(v129, 1);
    uint64_t v131 = v129 + 1;
    if (v130) {
      goto LABEL_36;
    }
    v122[2]  = v131;
    sub_10018CF7C(v121, (uint64_t)&v216);
    uint64_t v124 = *((void *)&v216 + 1);
    uint64_t v123 = v216;
    unint64_t v132 = sub_10000DDE0(v216, *((uint64_t *)&v216 + 1));
    if (v133) {
      goto LABEL_37;
    }
    *(void *)&v3[(v132 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v132;
    uint64_t v134 = (uint64_t *)(v122[6] + 16 * v132);
    *uint64_t v134 = v123;
    v134[1]  = v124;
    sub_10003803C(v217, (_OWORD *)(v122[7] + 32 * v132));
    uint64_t v135 = v122[2];
    BOOL v130 = __OFADD__(v135, 1);
    uint64_t v136 = v135 + 1;
    if (v130) {
      goto LABEL_38;
    }
    v122[2]  = v136;
    swift_release();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_10008377C(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v138 = _swiftEmptyArrayStorage[2];
    unint64_t v137 = _swiftEmptyArrayStorage[3];
    if (v138 >= v137 >> 1) {
      sub_10008377C(v137 > 1, v138 + 1, 1);
    }
    v115 += 16;
    _swiftEmptyArrayStorage[2]  = v138 + 1;
    _swiftEmptyArrayStorage[v138 + 4]  = v122;
  }
  while (v115 != 864);
  *(void *)&v214  = _swiftEmptyArrayStorage;
  sub_10003803C(&v214, __dst);
  char v139 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v216  = v208;
  sub_100034178(__dst, 0xD000000000000011, 0x80000001003DCD10, v139);
  uint64_t v140 = (void *)v216;
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v210 + 2792), 0x300uLL);
  uint64_t v141 = 0;
  v215  = v209;
  uint64_t v142 = _swiftEmptyArrayStorage;
  do
  {
    long long v143 = __dst[v141 + 1];
    v216  = __dst[v141];
    v217[0]  = v143;
    v217[1]  = __dst[v141 + 2];
    unint64_t v144 = sub_100187E58();
    if (v144)
    {
      unint64_t v145 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v142 = sub_1000C6E78(0, v142[2] + 1, 1, v142);
      }
      unint64_t v147 = v142[2];
      unint64_t v146 = v142[3];
      if (v147 >= v146 >> 1) {
        uint64_t v142 = sub_1000C6E78((void *)(v146 > 1), v147 + 1, 1, v142);
      }
      v142[2]  = v147 + 1;
      v142[v147 + 4]  = v145;
    }
    v141 += 3;
  }
  while (v141 != 48);
  *(void *)&v214  = v142;
  sub_10003803C(&v214, __dst);
  char v148 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(__dst, 0xD000000000000013, 0x80000001003DCD30, v148);
  uint64_t v122 = v140;
  swift_bridgeObjectRelease();
  LOWORD(v121)  = *(_WORD *)(v210 + 3628);
  LOWORD(v123)  = *(_WORD *)(v210 + 3630);
  LOWORD(v124)  = *(_WORD *)(v210 + 3632);
  LOWORD(v3)  = *(_WORD *)(v210 + 3634);
  LOWORD(v117)  = *(_WORD *)(v210 + 3636);
  LOWORD(v115)  = *(_WORD *)(v210 + 3638);
  v211  = *(_WORD *)(v210 + 3640);
  v212  = *(_WORD *)(v210 + 3642);
  *((void *)&__dst[1] + 1)  = sub_100010BCC(&qword_100481120);
  *(void *)&v214  = _swiftEmptyArrayStorage;
  sub_10008379C(0, 8, 0);
  uint64_t v149 = v214;
  unint64_t v120 = *(void *)(v214 + 16);
  unint64_t v126 = *(void *)(v214 + 24);
  unint64_t v116 = v120 + 1;
  if (v120 >= v126 >> 1) {
    goto LABEL_39;
  }
LABEL_20:
  *(void *)(v149 + 16)  = v116;
  *(_WORD *)(v149 + 2 * v120 + 32)  = v121;
  *(void *)&v214  = v149;
  unint64_t v150 = *(void *)(v149 + 24);
  unint64_t v151 = v120 + 2;
  if (v116 >= v150 >> 1)
  {
    sub_10008379C(v150 > 1, v120 + 2, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v151;
  *(_WORD *)(v149 + 2 * v116 + 32)  = v123;
  *(void *)&v214  = v149;
  unint64_t v152 = *(void *)(v149 + 24);
  unint64_t v153 = v120 + 3;
  if (v151 >= v152 >> 1)
  {
    sub_10008379C(v152 > 1, v120 + 3, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v153;
  *(_WORD *)(v149 + 2 * v151 + 32)  = v124;
  *(void *)&v214  = v149;
  unint64_t v154 = *(void *)(v149 + 24);
  unint64_t v155 = v120 + 4;
  if (v153 >= v154 >> 1)
  {
    sub_10008379C(v154 > 1, v120 + 4, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v155;
  *(_WORD *)(v149 + 2 * v153 + 32)  = (_WORD)v3;
  *(void *)&v214  = v149;
  unint64_t v156 = *(void *)(v149 + 24);
  unint64_t v157 = v120 + 5;
  if (v155 >= v156 >> 1)
  {
    sub_10008379C(v156 > 1, v120 + 5, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v157;
  *(_WORD *)(v149 + 2 * v155 + 32)  = v117;
  *(void *)&v214  = v149;
  unint64_t v158 = *(void *)(v149 + 24);
  unint64_t v159 = v120 + 6;
  if (v157 >= v158 >> 1)
  {
    sub_10008379C(v158 > 1, v120 + 6, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v159;
  *(_WORD *)(v149 + 2 * v157 + 32)  = v115;
  *(void *)&v214  = v149;
  unint64_t v160 = *(void *)(v149 + 24);
  unint64_t v161 = v120 + 7;
  if (v159 >= v160 >> 1)
  {
    sub_10008379C(v160 > 1, v120 + 7, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v161;
  *(_WORD *)(v149 + 2 * v159 + 32)  = v211;
  *(void *)&v214  = v149;
  unint64_t v162 = *(void *)(v149 + 24);
  if (v161 >= v162 >> 1)
  {
    sub_10008379C(v162 > 1, v120 + 8, 1);
    uint64_t v149 = v214;
  }
  *(void *)(v149 + 16)  = v120 + 8;
  *(_WORD *)(v149 + 2 * v161 + 32)  = v212;
  *(void *)&__dst[0]  = v149;
  sub_10003803C(__dst, &v214);
  char v163 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000030, 0x80000001003DCD50, v163);
  swift_bridgeObjectRelease();
  char v164 = *(unsigned char *)(v210 + 3624);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v164;
  sub_10003803C(__dst, &v214);
  char v165 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000020, 0x80000001003DCD90, v165);
  swift_bridgeObjectRelease();
  char v166 = *(unsigned char *)(v210 + 3625);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v166;
  sub_10003803C(__dst, &v214);
  char v167 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000028, 0x80000001003DCDC0, v167);
  swift_bridgeObjectRelease();
  char v168 = *(unsigned char *)(v210 + 3626);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt8;
  LOBYTE(__dst[0])  = v168;
  sub_10003803C(__dst, &v214);
  char v169 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD00000000000002ALL, 0x80000001003DCDF0, v169);
  swift_bridgeObjectRelease();
  int v170 = *(_DWORD *)(v210 + 3572);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v170;
  sub_10003803C(__dst, &v214);
  char v171 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD00000000000002FLL, 0x80000001003DCE20, v171);
  swift_bridgeObjectRelease();
  int v172 = *(_DWORD *)(v210 + 3648);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v172;
  sub_10003803C(__dst, &v214);
  char v173 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD00000000000002FLL, 0x80000001003DCE50, v173);
  swift_bridgeObjectRelease();
  int v174 = *(_DWORD *)(v210 + 3652);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v174;
  sub_10003803C(__dst, &v214);
  char v175 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000026, 0x80000001003DCE80, v175);
  swift_bridgeObjectRelease();
  int v176 = *(_DWORD *)(v210 + 3656);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v176;
  sub_10003803C(__dst, &v214);
  char v177 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000026, 0x80000001003DCEB0, v177);
  swift_bridgeObjectRelease();
  int v178 = *(_DWORD *)(v210 + 3660);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v178;
  sub_10003803C(__dst, &v214);
  char v179 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000024, 0x80000001003DCEE0, v179);
  swift_bridgeObjectRelease();
  int v180 = *(_DWORD *)(v210 + 3664);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v180;
  sub_10003803C(__dst, &v214);
  char v181 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000023, 0x80000001003DCF10, v181);
  swift_bridgeObjectRelease();
  v182  = *(_DWORD *)(v210 + 3668);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v182;
  sub_10003803C(__dst, &v214);
  v183  = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000024, 0x80000001003DCF40, v183);
  swift_bridgeObjectRelease();
  int v184 = *(_DWORD *)(v210 + 3676);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v184;
  sub_10003803C(__dst, &v214);
  char v185 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000019, 0x80000001003DCF70, v185);
  swift_bridgeObjectRelease();
  int v186 = *(_DWORD *)(v210 + 3680);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v186;
  sub_10003803C(__dst, &v214);
  char v187 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000024, 0x80000001003DCF90, v187);
  swift_bridgeObjectRelease();
  int v188 = *(_DWORD *)(v210 + 3684);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v188;
  sub_10003803C(__dst, &v214);
  char v189 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000022, 0x80000001003DCFC0, v189);
  swift_bridgeObjectRelease();
  int v190 = *(_DWORD *)(v210 + 3688);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v190;
  sub_10003803C(__dst, &v214);
  char v191 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000020, 0x80000001003DCFF0, v191);
  swift_bridgeObjectRelease();
  int v192 = *(_DWORD *)(v210 + 3692);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v192;
  sub_10003803C(__dst, &v214);
  char v193 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD00000000000001ALL, 0x80000001003DD020, v193);
  swift_bridgeObjectRelease();
  int v194 = *(_DWORD *)(v210 + 3696);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v194;
  sub_10003803C(__dst, &v214);
  char v195 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000020, 0x80000001003DD040, v195);
  swift_bridgeObjectRelease();
  int v196 = *(_DWORD *)(v210 + 3700);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v196;
  sub_10003803C(__dst, &v214);
  char v197 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000020, 0x80000001003DD070, v197);
  swift_bridgeObjectRelease();
  v198  = *(_DWORD *)(v210 + 3704);
  *((void *)&__dst[1] + 1)  = &type metadata for UInt32;
  LODWORD(__dst[0])  = v198;
  sub_10003803C(__dst, &v214);
  char v199 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0xD000000000000023, 0x80000001003DD0A0, v199);
  swift_bridgeObjectRelease();
  __int16 v200 = *(_WORD *)(v210 + 3708);
  v201  = *(unsigned char *)(v210 + 3710);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v202 = swift_allocObject();
  *(_OWORD *)(v202 + 16)  = xmmword_1003B2760;
  *(_WORD *)(v202 + 32)  = v200;
  *(unsigned char *)(v202 + 34)  = v201;
  uint64_t v203 = sub_1001265EC(v202);
  uint64_t v205 = v204;
  swift_bridgeObjectRelease();
  *((void *)&__dst[1] + 1)  = &type metadata for Data;
  *(void *)&__dst[0]  = v203;
  *((void *)&__dst[0] + 1)  = v205;
  sub_10003803C(__dst, &v214);
  char v206 = swift_isUniquelyReferenced_nonNull_native();
  sub_100034178(&v214, 0x4154535F4C445741, 0xEE0049554F5F5354, v206);
  swift_bridgeObjectRelease();
  return v122;
}

unint64_t sub_100187E58()
{
  uint64_t v1 = v0;
  long long v2 = *(_OWORD *)(v0 + 32);
  v40[0]  = *(_OWORD *)(v0 + 16);
  v40[1]  = v2;
  uint64_t v3 = sub_10011A3BC((uint64_t)v40, (uint64_t)&v41);
  unint64_t v5 = v4;
  uint64_t v6 = sub_100140948(0, v3, v4);
  if (v7)
  {
LABEL_12:
    sub_10000C970(v3, v5);
    return 0;
  }
  else
  {
    uint64_t v8 = v6;
    switch(v5 >> 62)
    {
      case 1uLL:
        if (v6 == (int)v3) {
          goto LABEL_12;
        }
        goto LABEL_13;
      case 2uLL:
        if (v6 == *(void *)(v3 + 16)) {
          goto LABEL_12;
        }
        if (v5 >> 62 == 2)
        {
          uint64_t v9 = *(void *)(v3 + 16);
          uint64_t v10 = *(void *)(v3 + 24);
        }
        else
        {
LABEL_13:
          uint64_t v9 = (int)v3;
          uint64_t v10 = v3 >> 32;
        }
        break;
      case 3uLL:
        if (!v6) {
          goto LABEL_12;
        }
        uint64_t v10 = 0;
        uint64_t v9 = 0;
        break;
      default:
        if (!v6) {
          goto LABEL_12;
        }
        uint64_t v9 = 0;
        uint64_t v10 = BYTE6(v5);
        break;
    }
    if (v10 < v9 || v8 < v9) {
      __break(1u);
    }
    uint64_t v12 = Data._Representation.subscript.getter();
    unint64_t v14 = v13;
    uint64_t v15 = sub_1001265EC((uint64_t)&off_100450400);
    unint64_t v17 = v16;
    uint64_t v42 = v12;
    unint64_t v43 = v14;
    sub_100013D44(v12, v14);
    sub_100125FAC(v15, v17);
    sub_10000C970(v15, v17);
    sub_10000C970(v12, v14);
    uint64_t v18 = v42;
    unint64_t v19 = v43;
    __int16 v37 = 3072;
    uint64_t v20 = sub_10011A3BC((uint64_t)&v37, (uint64_t)&v38);
    unint64_t v22 = v21;
    *(void *)&long long v38 = v18;
    *((void *)&v38 + 1)  = v19;
    sub_100013D44(v18, v19);
    sub_100125FAC(v20, v22);
    sub_10000C970(v20, v22);
    sub_10000C970(v18, v19);
    long long v23 = v38;
    uint64_t v24 = sub_1001265EC((uint64_t)&off_100450428);
    unint64_t v26 = v25;
    v40[0]  = v23;
    sub_100013D44(v23, *((unint64_t *)&v23 + 1));
    sub_100125FAC(v24, v26);
    sub_10000C970(v24, v26);
    sub_10000C970(v23, *((unint64_t *)&v23 + 1));
    long long v27 = v40[0];
    static DNSRecords.createRecord(with:value:)(*(unint64_t *)&v40[0], *((unint64_t *)&v40[0] + 1), 0, 0xF000000000000000, (uint64_t *)v40);
    sub_100010BCC(&qword_10047CC08);
    if (swift_dynamicCast())
    {
      int v28 = v39;
      v40[0]  = v38;
      swift_bridgeObjectRetain();
      v29._uint64_t countAndFlagsBits = 24366;
      v29._object  = (void *)0xE200000000000000;
      String.append(_:)(v29);
      if (v28) {
        uint64_t v30 = 7365749;
      }
      else {
        uint64_t v30 = 7365492;
      }
      unint64_t v31 = 0xE300000000000000;
      String.append(_:)(*(Swift::String *)&v30);
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 46;
      v32._object  = (void *)0xE100000000000000;
      String.append(_:)(v32);
      v33._uint64_t countAndFlagsBits = 0x6C61636F6CLL;
      v33._object  = (void *)0xE500000000000000;
      String.append(_:)(v33);
      uint64_t v34 = sub_10011A478(*(unint64_t *)&v40[0], *((unint64_t *)&v40[0] + 1));
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100013D44(v3, v5);
      uint64_t v34 = v3;
    }
    sub_100010BCC(qword_10047DD00);
    inited  = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_1003B7330;
    *(void *)(inited + 32)  = 0xD00000000000001BLL;
    *(void *)(inited + 40)  = 0x80000001003DE110;
    *(void *)(inited + 48)  = *(void *)(v1 + 8);
    *(void *)(inited + 72)  = &type metadata for UInt64;
    *(void *)(inited + 80)  = 0xD000000000000015;
    *(void *)(inited + 88)  = 0x80000001003DE130;
    *(_DWORD *)(inited + 96)  = *(_DWORD *)(v1 + 4);
    *(void *)(inited + 120)  = &type metadata for UInt32;
    *(void *)(inited + 128)  = 0xD000000000000017;
    *(void *)(inited + 136)  = 0x80000001003DE150;
    *(unsigned char *)(inited + 144)  = *(unsigned char *)(v1 + 1);
    *(void *)(inited + 168)  = &type metadata for UInt8;
    *(void *)(inited + 176)  = 0xD000000000000016;
    *(void *)(inited + 216)  = &type metadata for Data;
    *(void *)(inited + 184)  = 0x80000001003DE170;
    *(void *)(inited + 192)  = v34;
    *(void *)(inited + 200)  = v23;
    unint64_t v11 = sub_10001FE34(inited);
    sub_10000C970(v27, *((unint64_t *)&v27 + 1));
    sub_10000C970(v3, v5);
  }
  return v11;
}

uint64_t apple80211_p2p_airplay_ext_stats.eventPayload()()
{
  sub_100010BCC(qword_10047DD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16)  = xmmword_1003C1DF0;
  *(void *)(v1 + 32)  = 0xD00000000000001DLL;
  *(void *)(v1 + 40)  = 0x80000001003DC890;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 2);
  int v5 = v0[6];
  int v4 = v0[7];
  int v7 = v0[8];
  int v6 = v0[9];
  __int16 v8 = *((_WORD *)v0 + 20);
  __int16 v9 = *((_WORD *)v0 + 21);
  __int16 v10 = *((_WORD *)v0 + 22);
  __int16 v11 = *((_WORD *)v0 + 23);
  __int16 v12 = *((_WORD *)v0 + 24);
  char v13 = *((unsigned char *)v0 + 50);
  char v14 = *((unsigned char *)v0 + 51);
  char v15 = *((unsigned char *)v0 + 60);
  char v16 = *((unsigned char *)v0 + 68);
  char v17 = *((unsigned char *)v0 + 69);
  char v18 = *((unsigned char *)v0 + 71);
  char v19 = *((unsigned char *)v0 + 72);
  char v20 = *((unsigned char *)v0 + 73);
  char v21 = *((unsigned char *)v0 + 74);
  char v22 = *((unsigned char *)v0 + 75);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)(v0 + 19);
  *(_OWORD *)&v34[16]  = *(_OWORD *)(v0 + 23);
  *(void *)&v34[32]  = *(void *)(v0 + 27);
  long long v32 = *(_OWORD *)(v0 + 29);
  long long v33 = *(_OWORD *)(v0 + 33);
  long long v30 = *(_OWORD *)(v0 + 37);
  long long v31 = *(_OWORD *)(v0 + 41);
  long long v28 = *(_OWORD *)(v0 + 45);
  long long v29 = *(_OWORD *)(v0 + 49);
  *(unsigned char *)(v1 + 48)  = *((unsigned char *)v0 + 52);
  *(void *)(v1 + 72)  = &type metadata for UInt8;
  *(void *)(v1 + 80)  = 0xD00000000000001DLL;
  *(void *)(v1 + 88)  = 0x80000001003DC8B0;
  *(unsigned char *)(v1 + 96)  = v15;
  *(void *)(v1 + 120)  = &type metadata for UInt8;
  *(void *)(v1 + 128)  = 0xD000000000000012;
  *(void *)(v1 + 136)  = 0x80000001003DC830;
  *(void *)(v1 + 144)  = v3;
  *(void *)(v1 + 168)  = &type metadata for UInt64;
  *(void *)(v1 + 176)  = 0xD000000000000012;
  *(void *)(v1 + 184)  = 0x80000001003DC850;
  *(void *)(v1 + 192)  = v2;
  *(void *)(v1 + 216)  = &type metadata for UInt64;
  *(void *)(v1 + 224)  = 0xD000000000000029;
  *(void *)(v1 + 232)  = 0x80000001003DD0D0;
  *(_DWORD *)(v1 + 240)  = v5;
  *(void *)(v1 + 264)  = &type metadata for UInt32;
  *(void *)(v1 + 272)  = 0xD000000000000033;
  *(void *)(v1 + 280)  = 0x80000001003DD100;
  *(unsigned char *)(v1 + 288)  = v16;
  *(void *)(v1 + 312)  = &type metadata for UInt8;
  *(void *)(v1 + 320)  = 0xD000000000000014;
  *(void *)(v1 + 328)  = 0x80000001003DD140;
  *(unsigned char *)(v1 + 336)  = v13;
  *(void *)(v1 + 360)  = &type metadata for UInt8;
  *(void *)(v1 + 368)  = 0xD00000000000002FLL;
  *(void *)(v1 + 376)  = 0x80000001003DD160;
  *(_DWORD *)(v1 + 384)  = v4;
  *(void *)(v1 + 408)  = &type metadata for UInt32;
  *(void *)(v1 + 416)  = 0xD00000000000002FLL;
  *(void *)(v1 + 424)  = 0x80000001003DD190;
  *(_DWORD *)(v1 + 432)  = v7;
  *(void *)(v1 + 456)  = &type metadata for UInt32;
  *(void *)(v1 + 464)  = 0xD00000000000002ELL;
  *(void *)(v1 + 472)  = 0x80000001003DD1C0;
  *(_DWORD *)(v1 + 480)  = v6;
  *(void *)(v1 + 504)  = &type metadata for UInt32;
  *(void *)(v1 + 512)  = 0xD00000000000002DLL;
  *(void *)(v1 + 520)  = 0x80000001003DD1F0;
  *(void *)(v1 + 552)  = &type metadata for Int8;
  *(unsigned char *)(v1 + 528)  = v17;
  *(void *)(v1 + 560)  = 0xD00000000000002BLL;
  *(void *)(v1 + 568)  = 0x80000001003DD220;
  *(void *)(v1 + 600)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 576)  = v8;
  *(void *)(v1 + 608)  = 0xD000000000000033;
  *(void *)(v1 + 616)  = 0x80000001003DD250;
  *(void *)(v1 + 648)  = &type metadata for UInt8;
  *(unsigned char *)(v1 + 624)  = v14;
  *(void *)(v1 + 656)  = 0xD000000000000034;
  *(void *)(v1 + 664)  = 0x80000001003DD290;
  *(void *)(v1 + 696)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 672)  = v10;
  *(void *)(v1 + 704)  = 0xD000000000000037;
  *(void *)(v1 + 712)  = 0x80000001003DD2D0;
  *(void *)(v1 + 744)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 720)  = v11;
  *(void *)(v1 + 752)  = 0xD00000000000002CLL;
  *(void *)(v1 + 760)  = 0x80000001003DD310;
  *(void *)(v1 + 792)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 768)  = v12;
  *(void *)(v1 + 800)  = 0xD00000000000002ELL;
  *(void *)(v1 + 808)  = 0x80000001003DD340;
  *(void *)(v1 + 840)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 816)  = v9;
  *(void *)(v1 + 848)  = 0xD000000000000025;
  *(void *)(v1 + 856)  = 0x80000001003DD370;
  *(void *)(v1 + 888)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 864)  = v18;
  *(void *)(v1 + 896)  = 0xD00000000000002FLL;
  *(void *)(v1 + 904)  = 0x80000001003DD3A0;
  *(void *)(v1 + 936)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 912)  = v19;
  *(void *)(v1 + 944)  = 0xD000000000000029;
  *(void *)(v1 + 952)  = 0x80000001003DD3D0;
  *(void *)(v1 + 984)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 960)  = v20;
  *(void *)(v1 + 992)  = 0xD000000000000029;
  *(void *)(v1 + 1000)  = 0x80000001003DD400;
  *(void *)(v1 + 1032)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1008)  = v21;
  *(void *)(v1 + 1040)  = 0xD000000000000029;
  *(void *)(v1 + 1048)  = 0x80000001003DD430;
  *(void *)(v1 + 1080)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1056)  = v22;
  *(void *)(v1 + 1088)  = 0xD000000000000022;
  *(void *)(v1 + 1096)  = 0x80000001003DD460;
  int v23 = *v0;
  *(void *)(v1 + 1128)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1104)  = v23;
  *(void *)(v1 + 1136)  = 0xD000000000000024;
  *(void *)(v1 + 1144)  = 0x80000001003DD490;
  *(_OWORD *)__dst  = *(_OWORD *)&v34[8];
  *(_OWORD *)&__dst[16]  = *(_OWORD *)&v34[24];
  uint64_t v24 = sub_100010BCC(&qword_100481118);
  *(void *)(v1 + 1176)  = v24;
  *(void *)(v1 + 1152)  = sub_10018CFE4(__dst, (uint64_t)&__dst[32]);
  *(void *)(v1 + 1184)  = 0xD00000000000002DLL;
  *(void *)(v1 + 1192)  = 0x80000001003DD4C0;
  *(_OWORD *)__dst  = v32;
  *(_OWORD *)&__dst[16]  = v33;
  *(void *)(v1 + 1224)  = v24;
  *(void *)(v1 + 1200)  = sub_10018CFE4(__dst, (uint64_t)&__dst[32]);
  *(void *)(v1 + 1232)  = 0xD000000000000031;
  *(void *)(v1 + 1240)  = 0x80000001003DD4F0;
  *(_OWORD *)__dst  = v30;
  *(_OWORD *)&__dst[16]  = v31;
  *(void *)(v1 + 1272)  = v24;
  *(void *)(v1 + 1248)  = sub_10018CFE4(__dst, (uint64_t)&__dst[32]);
  *(void *)(v1 + 1280)  = 0xD000000000000031;
  *(void *)(v1 + 1288)  = 0x80000001003DD530;
  *(_OWORD *)__dst  = v28;
  *(_OWORD *)&__dst[16]  = v29;
  *(void *)(v1 + 1320)  = v24;
  *(void *)(v1 + 1296)  = sub_10018CFE4(__dst, (uint64_t)&__dst[32]);
  unint64_t v25 = sub_10001FE34(v1);
  memcpy(__dst, v0 + 54, sizeof(__dst));
  unint64_t v26 = sub_10018884C();
  return sub_10017D03C(v26, v25, (uint64_t)sub_10018B784, (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_10018B520);
}

unint64_t sub_10018884C()
{
  sub_100010BCC(qword_10047DD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16)  = xmmword_1003C1E00;
  *(void *)(v1 + 32)  = 0xD000000000000017;
  *(void *)(v1 + 40)  = 0x80000001003DDB00;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 136);
  uint64_t v20 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v207 = *(void *)(v0 + 192);
  v209  = *(void *)(v0 + 200);
  v211  = *(void *)(v0 + 208);
  *(void *)(v1 + 48)  = *(void *)v0;
  *(void *)(v1 + 72)  = &type metadata for UInt64;
  *(void *)(v1 + 80)  = 0xD000000000000017;
  *(void *)(v1 + 88)  = 0x80000001003DDB20;
  *(void *)(v1 + 96)  = v2;
  *(void *)(v1 + 120)  = &type metadata for UInt64;
  *(void *)(v1 + 128)  = 0xD000000000000016;
  *(void *)(v1 + 136)  = 0x80000001003DDB40;
  *(void *)(v1 + 144)  = v4;
  *(void *)(v1 + 168)  = &type metadata for UInt64;
  *(void *)(v1 + 176)  = 0xD000000000000015;
  *(void *)(v1 + 184)  = 0x80000001003DDB60;
  *(void *)(v1 + 192)  = v3;
  *(void *)(v1 + 216)  = &type metadata for UInt64;
  *(void *)(v1 + 224)  = 0xD000000000000014;
  *(void *)(v1 + 232)  = 0x80000001003DDB80;
  *(void *)(v1 + 240)  = v5;
  *(void *)(v1 + 264)  = &type metadata for UInt64;
  *(void *)(v1 + 272)  = 0xD00000000000001BLL;
  *(void *)(v1 + 280)  = 0x80000001003DDBA0;
  *(void *)(v1 + 288)  = v6;
  *(void *)(v1 + 312)  = &type metadata for UInt64;
  *(void *)(v1 + 320)  = 0xD000000000000017;
  *(void *)(v1 + 328)  = 0x80000001003DDBC0;
  *(void *)(v1 + 336)  = v8;
  *(void *)(v1 + 360)  = &type metadata for UInt64;
  *(void *)(v1 + 368)  = 0xD000000000000016;
  *(void *)(v1 + 376)  = 0x80000001003DDBE0;
  *(void *)(v1 + 384)  = v7;
  *(void *)(v1 + 408)  = &type metadata for UInt64;
  *(void *)(v1 + 416)  = 0xD00000000000001BLL;
  *(void *)(v1 + 424)  = 0x80000001003DDC00;
  *(void *)(v1 + 432)  = v9;
  *(void *)(v1 + 456)  = &type metadata for UInt64;
  *(void *)(v1 + 464)  = 0xD00000000000001CLL;
  *(void *)(v1 + 472)  = 0x80000001003DDC20;
  *(void *)(v1 + 480)  = v10;
  *(void *)(v1 + 504)  = &type metadata for UInt64;
  *(void *)(v1 + 512)  = 0xD000000000000017;
  *(void *)(v1 + 520)  = 0x80000001003DDC40;
  *(void *)(v1 + 552)  = &type metadata for UInt64;
  *(void *)(v1 + 528)  = v12;
  *(void *)(v1 + 560)  = 0xD000000000000013;
  *(void *)(v1 + 568)  = 0x80000001003DDC60;
  *(void *)(v1 + 600)  = &type metadata for UInt64;
  *(void *)(v1 + 576)  = v11;
  *(void *)(v1 + 608)  = 0xD000000000000019;
  *(void *)(v1 + 616)  = 0x80000001003DDC80;
  *(void *)(v1 + 648)  = &type metadata for UInt64;
  *(void *)(v1 + 624)  = v14;
  *(void *)(v1 + 656)  = 0xD00000000000001ALL;
  *(void *)(v1 + 664)  = 0x80000001003DDCA0;
  *(void *)(v1 + 696)  = &type metadata for UInt64;
  *(void *)(v1 + 672)  = v13;
  *(void *)(v1 + 704)  = 0xD000000000000024;
  *(void *)(v1 + 712)  = 0x80000001003DDCC0;
  *(void *)(v1 + 744)  = &type metadata for UInt64;
  *(void *)(v1 + 720)  = v16;
  *(void *)(v1 + 752)  = 0xD000000000000015;
  *(void *)(v1 + 760)  = 0x80000001003DDCF0;
  *(void *)(v1 + 792)  = &type metadata for UInt64;
  *(void *)(v1 + 768)  = v15;
  *(void *)(v1 + 800)  = 0xD000000000000017;
  *(void *)(v1 + 808)  = 0x80000001003DDD10;
  *(void *)(v1 + 840)  = &type metadata for UInt64;
  *(void *)(v1 + 816)  = v18;
  *(void *)(v1 + 848)  = 0xD000000000000017;
  *(void *)(v1 + 856)  = 0x80000001003DDD30;
  *(void *)(v1 + 888)  = &type metadata for UInt64;
  *(void *)(v1 + 864)  = v17;
  *(void *)(v1 + 896)  = 0xD000000000000020;
  *(void *)(v1 + 904)  = 0x80000001003DDD50;
  *(void *)(v1 + 936)  = &type metadata for UInt64;
  *(void *)(v1 + 912)  = v20;
  *(void *)(v1 + 944)  = 0xD000000000000014;
  *(void *)(v1 + 952)  = 0x80000001003DDD80;
  *(void *)(v1 + 984)  = &type metadata for UInt64;
  *(void *)(v1 + 960)  = v19;
  *(void *)(v1 + 992)  = 0xD000000000000018;
  *(void *)(v1 + 1000)  = 0x80000001003DDDA0;
  *(void *)(v1 + 1032)  = &type metadata for UInt64;
  *(void *)(v1 + 1008)  = v22;
  *(void *)(v1 + 1040)  = 0xD000000000000017;
  *(void *)(v1 + 1048)  = 0x80000001003DDDC0;
  *(void *)(v1 + 1080)  = &type metadata for UInt64;
  *(void *)(v1 + 1056)  = v21;
  *(void *)(v1 + 1088)  = 0xD000000000000017;
  *(void *)(v1 + 1096)  = 0x80000001003DDDE0;
  *(void *)(v1 + 1128)  = &type metadata for UInt64;
  *(void *)(v1 + 1104)  = v24;
  *(void *)(v1 + 1136)  = 0xD000000000000019;
  *(void *)(v1 + 1144)  = 0x80000001003DDE00;
  *(void *)(v1 + 1176)  = &type metadata for UInt64;
  *(void *)(v1 + 1152)  = v23;
  *(void *)(v1 + 1184)  = 0xD00000000000001ELL;
  *(void *)(v1 + 1192)  = 0x80000001003DDE20;
  *(void *)(v1 + 1224)  = &type metadata for UInt64;
  *(void *)(v1 + 1200)  = v207;
  *(void *)(v1 + 1232)  = 0xD00000000000001CLL;
  *(void *)(v1 + 1240)  = 0x80000001003DDE40;
  *(void *)(v1 + 1272)  = &type metadata for UInt64;
  *(void *)(v1 + 1248)  = v209;
  *(void *)(v1 + 1280)  = 0xD00000000000001CLL;
  *(void *)(v1 + 1288)  = 0x80000001003DDE60;
  *(void *)(v1 + 1320)  = &type metadata for UInt64;
  *(void *)(v1 + 1296)  = v211;
  *(void *)(v1 + 1328)  = 0xD000000000000017;
  *(void *)(v1 + 1336)  = 0x80000001003DDE80;
  memcpy(__dst, (const void *)(v0 + 216), sizeof(__dst));
  uint64_t v25 = *(void *)(v0 + 1672);
  uint64_t v26 = *(void *)(v0 + 1696);
  v198  = *(void *)(v0 + 1720);
  uint64_t v199 = *(void *)(v0 + 1744);
  uint64_t v195 = *(void *)(v0 + 1768);
  uint64_t v27 = *(void *)(v0 + 1792);
  v340  = *(_OWORD *)(v0 + 1960);
  v341  = *(_OWORD *)(v0 + 1976);
  v342  = *(_OWORD *)(v0 + 1992);
  v343  = *(void *)(v0 + 2008);
  v336  = *(_OWORD *)(v0 + 1896);
  v337  = *(_OWORD *)(v0 + 1912);
  v338  = *(_OWORD *)(v0 + 1928);
  v339  = *(_OWORD *)(v0 + 1944);
  v332  = *(_OWORD *)(v0 + 1832);
  v333  = *(_OWORD *)(v0 + 1848);
  v334  = *(_OWORD *)(v0 + 1864);
  v335  = *(_OWORD *)(v0 + 1880);
  v330  = *(_OWORD *)(v0 + 1800);
  v331  = *(_OWORD *)(v0 + 1816);
  v326  = *(_OWORD *)(v0 + 2176);
  v327  = *(_OWORD *)(v0 + 2192);
  v328  = *(_OWORD *)(v0 + 2208);
  v329  = *(void *)(v0 + 2224);
  v322  = *(_OWORD *)(v0 + 2112);
  v323  = *(_OWORD *)(v0 + 2128);
  v324  = *(_OWORD *)(v0 + 2144);
  v325  = *(_OWORD *)(v0 + 2160);
  v318  = *(_OWORD *)(v0 + 2048);
  v319  = *(_OWORD *)(v0 + 2064);
  v320  = *(_OWORD *)(v0 + 2080);
  v321  = *(_OWORD *)(v0 + 2096);
  v316  = *(_OWORD *)(v0 + 2016);
  v317  = *(_OWORD *)(v0 + 2032);
  uint64_t v200 = *(void *)(v0 + 2248);
  v201  = *(void *)(v0 + 2272);
  uint64_t v202 = *(void *)(v0 + 2296);
  uint64_t v203 = *(void *)(v0 + 2320);
  uint64_t v204 = *(void *)(v0 + 2344);
  uint64_t v205 = *(void *)(v0 + 2368);
  uint64_t v206 = *(void *)(v0 + 2392);
  uint64_t v208 = *(void *)(v0 + 2416);
  uint64_t v196 = *(void *)(v0 + 2440);
  v312  = *(_OWORD *)(v0 + 2624);
  v313  = *(_OWORD *)(v0 + 2640);
  v314  = *(_OWORD *)(v0 + 2656);
  v315  = *(_OWORD *)(v0 + 2672);
  v308  = *(_OWORD *)(v0 + 2560);
  v309  = *(_OWORD *)(v0 + 2576);
  v310  = *(_OWORD *)(v0 + 2592);
  v311  = *(_OWORD *)(v0 + 2608);
  v304  = *(_OWORD *)(v0 + 2496);
  v305  = *(_OWORD *)(v0 + 2512);
  v306  = *(_OWORD *)(v0 + 2528);
  v307  = *(_OWORD *)(v0 + 2544);
  v301  = *(_OWORD *)(v0 + 2448);
  v302  = *(_OWORD *)(v0 + 2464);
  v303  = *(_OWORD *)(v0 + 2480);
  v210  = *(void *)(v0 + 2704);
  v212  = *(void *)(v0 + 2728);
  uint64_t v197 = *(void *)(v0 + 2752);
  v297  = *(_OWORD *)(v0 + 2936);
  v298  = *(_OWORD *)(v0 + 2952);
  v299  = *(_OWORD *)(v0 + 2968);
  v300  = *(_OWORD *)(v0 + 2984);
  v293  = *(_OWORD *)(v0 + 2872);
  v294  = *(_OWORD *)(v0 + 2888);
  v295  = *(_OWORD *)(v0 + 2904);
  v296  = *(_OWORD *)(v0 + 2920);
  long long v28 = *(_OWORD *)(v0 + 2824);
  v289  = *(_OWORD *)(v0 + 2808);
  v290  = v28;
  v291  = *(_OWORD *)(v0 + 2840);
  v292  = *(_OWORD *)(v0 + 2856);
  long long v29 = *(_OWORD *)(v0 + 2776);
  v286  = *(_OWORD *)(v0 + 2760);
  v287  = v29;
  v288  = *(_OWORD *)(v0 + 2792);
  long long v30 = *(_OWORD *)(v0 + 3192);
  v282  = *(_OWORD *)(v0 + 3176);
  v283  = v30;
  long long v31 = *(_OWORD *)(v0 + 3224);
  v284  = *(_OWORD *)(v0 + 3208);
  v285  = v31;
  long long v32 = *(_OWORD *)(v0 + 3128);
  v278  = *(_OWORD *)(v0 + 3112);
  v279  = v32;
  long long v33 = *(_OWORD *)(v0 + 3160);
  v280  = *(_OWORD *)(v0 + 3144);
  v281  = v33;
  long long v34 = *(_OWORD *)(v0 + 3064);
  v274  = *(_OWORD *)(v0 + 3048);
  v275  = v34;
  long long v35 = *(_OWORD *)(v0 + 3096);
  v276  = *(_OWORD *)(v0 + 3080);
  v277  = v35;
  long long v36 = *(_OWORD *)(v0 + 3000);
  long long v37 = *(_OWORD *)(v0 + 3032);
  v272  = *(_OWORD *)(v0 + 3016);
  v273  = v37;
  long long v38 = *(_OWORD *)(v0 + 3416);
  long long v39 = *(_OWORD *)(v0 + 3448);
  v268  = *(_OWORD *)(v0 + 3432);
  v269  = v39;
  v270  = *(_OWORD *)(v0 + 3464);
  v271  = v36;
  long long v40 = *(_OWORD *)(v0 + 3352);
  long long v41 = *(_OWORD *)(v0 + 3384);
  v264  = *(_OWORD *)(v0 + 3368);
  v265  = v41;
  v266  = *(_OWORD *)(v0 + 3400);
  v267  = v38;
  long long v42 = *(_OWORD *)(v0 + 3288);
  long long v43 = *(_OWORD *)(v0 + 3320);
  v260  = *(_OWORD *)(v0 + 3304);
  v261  = v43;
  v262  = *(_OWORD *)(v0 + 3336);
  v263  = v40;
  long long v44 = *(_OWORD *)(v0 + 3256);
  v256  = *(_OWORD *)(v0 + 3240);
  v257  = v44;
  v258  = *(_OWORD *)(v0 + 3272);
  v259  = v42;
  long long v45 = *(_OWORD *)(v0 + 3672);
  v252  = *(_OWORD *)(v0 + 3656);
  v253  = v45;
  long long v46 = *(_OWORD *)(v0 + 3704);
  v254  = *(_OWORD *)(v0 + 3688);
  v255  = v46;
  long long v47 = *(_OWORD *)(v0 + 3608);
  v248  = *(_OWORD *)(v0 + 3592);
  v249  = v47;
  long long v48 = *(_OWORD *)(v0 + 3640);
  v250  = *(_OWORD *)(v0 + 3624);
  v251  = v48;
  long long v49 = *(_OWORD *)(v0 + 3544);
  v244  = *(_OWORD *)(v0 + 3528);
  v245  = v49;
  long long v50 = *(_OWORD *)(v0 + 3576);
  v246  = *(_OWORD *)(v0 + 3560);
  v247  = v50;
  long long v51 = *(_OWORD *)(v0 + 3480);
  long long v52 = *(_OWORD *)(v0 + 3512);
  v242  = *(_OWORD *)(v0 + 3496);
  v243  = v52;
  uint64_t v53 = *(void *)(v0 + 3736);
  uint64_t v54 = *(void *)(v0 + 3760);
  uint64_t v55 = *(void *)(v0 + 3784);
  long long v56 = *(_OWORD *)(v0 + 392);
  long long v57 = *(_OWORD *)(v0 + 424);
  long long v58 = *(_OWORD *)(v0 + 440);
  v238  = *(_OWORD *)(v0 + 408);
  v239  = v57;
  v240  = v58;
  v241  = v51;
  long long v59 = *(_OWORD *)(v0 + 328);
  long long v60 = *(_OWORD *)(v0 + 360);
  long long v61 = *(_OWORD *)(v0 + 376);
  v234  = *(_OWORD *)(v0 + 344);
  v235  = v60;
  v236  = v61;
  v237  = v56;
  long long v62 = *(_OWORD *)(v0 + 264);
  long long v63 = *(_OWORD *)(v0 + 296);
  long long v64 = *(_OWORD *)(v0 + 312);
  v230  = *(_OWORD *)(v0 + 280);
  v231  = v63;
  uint64_t v65 = *(void *)(v0 + 3808);
  v232  = v64;
  v233  = v59;
  long long v66 = *(_OWORD *)(v0 + 232);
  v226  = *(_OWORD *)(v0 + 216);
  v227  = v66;
  v228  = *(_OWORD *)(v0 + 248);
  v229  = v62;
  uint64_t v67 = sub_100010BCC(&qword_1004813C0);
  *(void *)(v1 + 1368)  = v67;
  sub_100083624(0, 10, 0);
  int v68 = _swiftEmptyArrayStorage;
  unint64_t v69 = _swiftEmptyArrayStorage[2];
  for (i  = 16; i != 256; i += 24)
  {
    uint64_t v71 = *(void *)((char *)&v226 + i);
    v213  = v68;
    unint64_t v72 = v68[3];
    if (v69 >= v72 >> 1)
    {
      sub_100083624(v72 > 1, v69 + 1, 1);
      int v68 = v213;
    }
    v68[2]  = v69 + 1;
    v68[v69++ + 4]  = v71;
  }
  *(void *)(v1 + 1344)  = v68;
  *(void *)(v1 + 1376)  = 0xD00000000000001CLL;
  *(void *)(v1 + 1384)  = 0x80000001003DDEA0;
  v238  = __dst[27];
  v239  = __dst[28];
  v240  = __dst[29];
  v234  = __dst[23];
  v235  = __dst[24];
  v236  = __dst[25];
  v237  = __dst[26];
  v230  = __dst[19];
  v231  = __dst[20];
  v232  = __dst[21];
  v233  = __dst[22];
  v226  = __dst[15];
  v227  = __dst[16];
  v228  = __dst[17];
  v229  = __dst[18];
  *(void *)(v1 + 1416)  = v67;
  sub_100083624(0, 10, 0);
  uint64_t v73 = _swiftEmptyArrayStorage;
  unint64_t v74 = _swiftEmptyArrayStorage[2];
  for (j  = 16; j != 256; j += 24)
  {
    uint64_t v76 = *(void *)((char *)&v226 + j);
    v214  = v73;
    unint64_t v77 = v73[3];
    if (v74 >= v77 >> 1)
    {
      sub_100083624(v77 > 1, v74 + 1, 1);
      uint64_t v73 = v214;
    }
    v73[2]  = v74 + 1;
    v73[v74++ + 4]  = v76;
  }
  *(void *)(v1 + 1392)  = v73;
  *(void *)(v1 + 1424)  = 0xD000000000000016;
  *(void *)(v1 + 1432)  = 0x80000001003DDEC0;
  v238  = __dst[42];
  v239  = __dst[43];
  v240  = __dst[44];
  v234  = __dst[38];
  v235  = __dst[39];
  v236  = __dst[40];
  v237  = __dst[41];
  v230  = __dst[34];
  v231  = __dst[35];
  v232  = __dst[36];
  v233  = __dst[37];
  v226  = __dst[30];
  v227  = __dst[31];
  v228  = __dst[32];
  v229  = __dst[33];
  *(void *)(v1 + 1464)  = v67;
  sub_100083624(0, 10, 0);
  char v78 = _swiftEmptyArrayStorage;
  unint64_t v79 = _swiftEmptyArrayStorage[2];
  for (k  = 16; k != 256; k += 24)
  {
    uint64_t v81 = *(void *)((char *)&v226 + k);
    v215  = v78;
    unint64_t v82 = v78[3];
    if (v79 >= v82 >> 1)
    {
      sub_100083624(v82 > 1, v79 + 1, 1);
      char v78 = v215;
    }
    v78[2]  = v79 + 1;
    v78[v79++ + 4]  = v81;
  }
  *(void *)(v1 + 1440)  = v78;
  *(void *)(v1 + 1472)  = 0xD000000000000014;
  *(void *)(v1 + 1480)  = 0x80000001003DDEE0;
  v238  = __dst[57];
  v239  = __dst[58];
  v240  = __dst[59];
  v234  = __dst[53];
  v235  = __dst[54];
  v236  = __dst[55];
  v237  = __dst[56];
  v230  = __dst[49];
  v231  = __dst[50];
  v232  = __dst[51];
  v233  = __dst[52];
  v226  = __dst[45];
  v227  = __dst[46];
  v228  = __dst[47];
  v229  = __dst[48];
  *(void *)(v1 + 1512)  = v67;
  sub_100083624(0, 10, 0);
  int v83 = _swiftEmptyArrayStorage;
  unint64_t v84 = _swiftEmptyArrayStorage[2];
  for (m  = 16; m != 256; m += 24)
  {
    uint64_t v86 = *(void *)((char *)&v226 + m);
    v216  = v83;
    unint64_t v87 = v83[3];
    if (v84 >= v87 >> 1)
    {
      sub_100083624(v87 > 1, v84 + 1, 1);
      int v83 = v216;
    }
    v83[2]  = v84 + 1;
    v83[v84++ + 4]  = v86;
  }
  *(void *)(v1 + 1488)  = v83;
  *(void *)(v1 + 1520)  = 0xD000000000000014;
  *(void *)(v1 + 1528)  = 0x80000001003DDF00;
  v238  = __dst[72];
  v239  = __dst[73];
  v240  = __dst[74];
  v234  = __dst[68];
  v235  = __dst[69];
  v236  = __dst[70];
  v237  = __dst[71];
  v230  = __dst[64];
  v231  = __dst[65];
  v232  = __dst[66];
  v233  = __dst[67];
  v226  = __dst[60];
  v227  = __dst[61];
  v228  = __dst[62];
  v229  = __dst[63];
  *(void *)(v1 + 1560)  = v67;
  sub_100083624(0, 10, 0);
  uint64_t v88 = _swiftEmptyArrayStorage;
  unint64_t v89 = _swiftEmptyArrayStorage[2];
  for (n  = 16; n != 256; n += 24)
  {
    uint64_t v91 = *(void *)((char *)&v226 + n);
    v217  = v88;
    unint64_t v92 = v88[3];
    if (v89 >= v92 >> 1)
    {
      sub_100083624(v92 > 1, v89 + 1, 1);
      uint64_t v88 = v217;
    }
    v88[2]  = v89 + 1;
    v88[v89++ + 4]  = v91;
  }
  *(void *)(v1 + 1536)  = v88;
  *(void *)(v1 + 1568)  = 0xD000000000000015;
  *(void *)(v1 + 1576)  = 0x80000001003DDF20;
  v238  = __dst[87];
  v239  = __dst[88];
  v240  = __dst[89];
  v234  = __dst[83];
  v235  = __dst[84];
  v236  = __dst[85];
  v237  = __dst[86];
  v230  = __dst[79];
  v231  = __dst[80];
  v232  = __dst[81];
  v233  = __dst[82];
  v226  = __dst[75];
  v227  = __dst[76];
  v228  = __dst[77];
  v229  = __dst[78];
  *(void *)(v1 + 1608)  = v67;
  sub_100083624(0, 10, 0);
  char v93 = _swiftEmptyArrayStorage;
  unint64_t v94 = _swiftEmptyArrayStorage[2];
  for (ii  = 16; ii != 256; ii += 24)
  {
    uint64_t v96 = *(void *)((char *)&v226 + ii);
    v218  = v93;
    unint64_t v97 = v93[3];
    if (v94 >= v97 >> 1)
    {
      sub_100083624(v97 > 1, v94 + 1, 1);
      char v93 = v218;
    }
    v93[2]  = v94 + 1;
    v93[v94++ + 4]  = v96;
  }
  *(void *)(v1 + 1584)  = v93;
  *(void *)(v1 + 1616)  = 0xD000000000000013;
  *(void *)(v1 + 1624)  = 0x80000001003DDF40;
  *(void *)(v1 + 1656)  = v67;
  *(void *)&v226  = _swiftEmptyArrayStorage;
  sub_100083624(0, 6, 0);
  uint64_t v98 = v226;
  unint64_t v100 = *(void *)(v226 + 16);
  unint64_t v99 = *(void *)(v226 + 24);
  unint64_t v101 = v99 >> 1;
  unint64_t v102 = v100 + 1;
  if (v99 >> 1 <= v100)
  {
    sub_100083624(v99 > 1, v100 + 1, 1);
    uint64_t v98 = v226;
    unint64_t v99 = *(void *)(v226 + 24);
    unint64_t v101 = v99 >> 1;
  }
  *(void *)(v98 + 16)  = v102;
  *(void *)(v98 + 8 * v100 + 32)  = v25;
  *(void *)&v226  = v98;
  int64_t v103 = v100 + 2;
  if (v101 <= v102)
  {
    sub_100083624(v99 > 1, v103, 1);
    uint64_t v98 = v226;
  }
  *(void *)(v98 + 16)  = v103;
  *(void *)(v98 + 8 * v102 + 32)  = v26;
  *(void *)&v226  = v98;
  unint64_t v105 = *(void *)(v98 + 16);
  unint64_t v104 = *(void *)(v98 + 24);
  unint64_t v106 = v104 >> 1;
  unint64_t v107 = v105 + 1;
  if (v104 >> 1 <= v105)
  {
    sub_100083624(v104 > 1, v105 + 1, 1);
    uint64_t v98 = v226;
    unint64_t v104 = *(void *)(v226 + 24);
    unint64_t v106 = v104 >> 1;
  }
  *(void *)(v98 + 16)  = v107;
  *(void *)(v98 + 8 * v105 + 32)  = v198;
  *(void *)&v226  = v98;
  int64_t v108 = v105 + 2;
  if (v106 <= v107)
  {
    sub_100083624(v104 > 1, v108, 1);
    uint64_t v98 = v226;
  }
  *(void *)(v98 + 16)  = v108;
  *(void *)(v98 + 8 * v107 + 32)  = v199;
  *(void *)&v226  = v98;
  unint64_t v110 = *(void *)(v98 + 16);
  unint64_t v109 = *(void *)(v98 + 24);
  unint64_t v111 = v109 >> 1;
  unint64_t v112 = v110 + 1;
  if (v109 >> 1 <= v110)
  {
    sub_100083624(v109 > 1, v110 + 1, 1);
    uint64_t v98 = v226;
    unint64_t v109 = *(void *)(v226 + 24);
    unint64_t v111 = v109 >> 1;
  }
  *(void *)(v98 + 16)  = v112;
  *(void *)(v98 + 8 * v110 + 32)  = v195;
  *(void *)&v226  = v98;
  int64_t v113 = v110 + 2;
  if (v111 <= v112)
  {
    sub_100083624(v109 > 1, v113, 1);
    uint64_t v98 = v226;
  }
  *(void *)(v98 + 16)  = v113;
  *(void *)(v98 + 8 * v112 + 32)  = v27;
  *(void *)(v1 + 1632)  = v98;
  *(void *)(v1 + 1664)  = 0xD00000000000001DLL;
  *(void *)(v1 + 1672)  = 0x80000001003DDF60;
  v236  = v340;
  v237  = v341;
  v238  = v342;
  *(void *)&v239  = v343;
  v232  = v336;
  v233  = v337;
  v234  = v338;
  v235  = v339;
  v228  = v332;
  v229  = v333;
  v230  = v334;
  v231  = v335;
  v226  = v330;
  v227  = v331;
  *(void *)(v1 + 1704)  = v67;
  sub_100083624(0, 9, 0);
  char v114 = _swiftEmptyArrayStorage;
  unint64_t v115 = _swiftEmptyArrayStorage[2];
  for (jj  = 16; jj != 232; jj += 24)
  {
    uint64_t v117 = *(void *)((char *)&v226 + jj);
    v219  = v114;
    unint64_t v118 = v114[3];
    if (v115 >= v118 >> 1)
    {
      sub_100083624(v118 > 1, v115 + 1, 1);
      char v114 = v219;
    }
    v114[2]  = v115 + 1;
    v114[v115++ + 4]  = v117;
  }
  *(void *)(v1 + 1680)  = v114;
  *(void *)(v1 + 1712)  = 0xD000000000000021;
  *(void *)(v1 + 1720)  = 0x80000001003DDF80;
  v236  = v326;
  v237  = v327;
  v238  = v328;
  *(void *)&v239  = v329;
  v232  = v322;
  v233  = v323;
  v234  = v324;
  v235  = v325;
  v228  = v318;
  v229  = v319;
  v230  = v320;
  v231  = v321;
  v226  = v316;
  v227  = v317;
  *(void *)(v1 + 1752)  = v67;
  sub_100083624(0, 9, 0);
  uint64_t v119 = _swiftEmptyArrayStorage;
  unint64_t v120 = _swiftEmptyArrayStorage[2];
  for (kk  = 16; kk != 232; kk += 24)
  {
    uint64_t v122 = *(void *)((char *)&v226 + kk);
    v220  = v119;
    unint64_t v123 = v119[3];
    if (v120 >= v123 >> 1)
    {
      sub_100083624(v123 > 1, v120 + 1, 1);
      uint64_t v119 = v220;
    }
    v119[2]  = v120 + 1;
    v119[v120++ + 4]  = v122;
  }
  *(void *)(v1 + 1728)  = v119;
  *(void *)(v1 + 1760)  = 0xD000000000000019;
  *(void *)(v1 + 1768)  = 0x80000001003DDFB0;
  *(void *)(v1 + 1800)  = v67;
  *(void *)&v226  = _swiftEmptyArrayStorage;
  sub_100083624(0, 4, 0);
  uint64_t v124 = v226;
  unint64_t v126 = *(void *)(v226 + 16);
  unint64_t v125 = *(void *)(v226 + 24);
  unint64_t v127 = v125 >> 1;
  unint64_t v128 = v126 + 1;
  if (v125 >> 1 <= v126)
  {
    sub_100083624(v125 > 1, v126 + 1, 1);
    uint64_t v124 = v226;
    unint64_t v125 = *(void *)(v226 + 24);
    unint64_t v127 = v125 >> 1;
  }
  *(void *)(v124 + 16)  = v128;
  *(void *)(v124 + 8 * v126 + 32)  = v200;
  *(void *)&v226  = v124;
  int64_t v129 = v126 + 2;
  if (v127 <= v128)
  {
    sub_100083624(v125 > 1, v129, 1);
    uint64_t v124 = v226;
  }
  *(void *)(v124 + 16)  = v129;
  *(void *)(v124 + 8 * v128 + 32)  = v201;
  *(void *)&v226  = v124;
  unint64_t v131 = *(void *)(v124 + 16);
  unint64_t v130 = *(void *)(v124 + 24);
  unint64_t v132 = v130 >> 1;
  unint64_t v133 = v131 + 1;
  if (v130 >> 1 <= v131)
  {
    sub_100083624(v130 > 1, v131 + 1, 1);
    uint64_t v124 = v226;
    unint64_t v130 = *(void *)(v226 + 24);
    unint64_t v132 = v130 >> 1;
  }
  *(void *)(v124 + 16)  = v133;
  *(void *)(v124 + 8 * v131 + 32)  = v202;
  *(void *)&v226  = v124;
  int64_t v134 = v131 + 2;
  if (v132 <= v133)
  {
    sub_100083624(v130 > 1, v134, 1);
    uint64_t v124 = v226;
  }
  *(void *)(v124 + 16)  = v134;
  *(void *)(v124 + 8 * v133 + 32)  = v203;
  *(void *)(v1 + 1776)  = v124;
  *(void *)(v1 + 1808)  = 0xD00000000000001ELL;
  *(void *)(v1 + 1816)  = 0x80000001003DDFD0;
  *(void *)(v1 + 1848)  = v67;
  *(void *)&v226  = _swiftEmptyArrayStorage;
  sub_100083624(0, 5, 0);
  uint64_t v135 = v226;
  unint64_t v137 = *(void *)(v226 + 16);
  unint64_t v136 = *(void *)(v226 + 24);
  unint64_t v138 = v136 >> 1;
  unint64_t v139 = v137 + 1;
  if (v136 >> 1 <= v137)
  {
    sub_100083624(v136 > 1, v137 + 1, 1);
    uint64_t v135 = v226;
    unint64_t v136 = *(void *)(v226 + 24);
    unint64_t v138 = v136 >> 1;
  }
  *(void *)(v135 + 16)  = v139;
  *(void *)(v135 + 8 * v137 + 32)  = v204;
  *(void *)&v226  = v135;
  int64_t v140 = v137 + 2;
  if (v138 <= v139)
  {
    sub_100083624(v136 > 1, v140, 1);
    uint64_t v135 = v226;
  }
  *(void *)(v135 + 16)  = v140;
  *(void *)(v135 + 8 * v139 + 32)  = v205;
  *(void *)&v226  = v135;
  unint64_t v142 = *(void *)(v135 + 16);
  unint64_t v141 = *(void *)(v135 + 24);
  unint64_t v143 = v141 >> 1;
  unint64_t v144 = v142 + 1;
  if (v141 >> 1 <= v142)
  {
    sub_100083624(v141 > 1, v142 + 1, 1);
    uint64_t v135 = v226;
    unint64_t v141 = *(void *)(v226 + 24);
    unint64_t v143 = v141 >> 1;
  }
  *(void *)(v135 + 16)  = v144;
  *(void *)(v135 + 8 * v142 + 32)  = v206;
  *(void *)&v226  = v135;
  int64_t v145 = v142 + 2;
  if (v143 <= v144)
  {
    sub_100083624(v141 > 1, v145, 1);
    uint64_t v135 = v226;
  }
  *(void *)(v135 + 16)  = v145;
  *(void *)(v135 + 8 * v144 + 32)  = v208;
  *(void *)&v226  = v135;
  unint64_t v147 = *(void *)(v135 + 16);
  unint64_t v146 = *(void *)(v135 + 24);
  if (v147 >= v146 >> 1)
  {
    sub_100083624(v146 > 1, v147 + 1, 1);
    uint64_t v135 = v226;
  }
  *(void *)(v135 + 16)  = v147 + 1;
  *(void *)(v135 + 8 * v147 + 32)  = v196;
  *(void *)(v1 + 1824)  = v135;
  *(void *)(v1 + 1856)  = 0x53544154535F4C4CLL;
  *(void *)(v1 + 1864)  = 0xEF4143435F58545FLL;
  v238  = v313;
  v239  = v314;
  v240  = v315;
  v234  = v309;
  v235  = v310;
  v236  = v311;
  v237  = v312;
  v230  = v305;
  v231  = v306;
  v232  = v307;
  v233  = v308;
  v226  = v301;
  v227  = v302;
  v228  = v303;
  v229  = v304;
  *(void *)(v1 + 1896)  = v67;
  sub_100083624(0, 10, 0);
  char v148 = _swiftEmptyArrayStorage;
  unint64_t v149 = _swiftEmptyArrayStorage[2];
  for (mm  = 16; mm != 256; mm += 24)
  {
    uint64_t v151 = *(void *)((char *)&v226 + mm);
    v221  = v148;
    unint64_t v152 = v148[3];
    if (v149 >= v152 >> 1)
    {
      sub_100083624(v152 > 1, v149 + 1, 1);
      char v148 = v221;
    }
    v148[2]  = v149 + 1;
    v148[v149++ + 4]  = v151;
  }
  *(void *)(v1 + 1872)  = v148;
  *(void *)(v1 + 1904)  = 0xD000000000000016;
  *(void *)(v1 + 1912)  = 0x80000001003DDFF0;
  *(void *)(v1 + 1944)  = v67;
  *(void *)&v226  = _swiftEmptyArrayStorage;
  sub_100083624(0, 3, 0);
  uint64_t v153 = v226;
  unint64_t v155 = *(void *)(v226 + 16);
  unint64_t v154 = *(void *)(v226 + 24);
  unint64_t v156 = v154 >> 1;
  unint64_t v157 = v155 + 1;
  if (v154 >> 1 <= v155)
  {
    sub_100083624(v154 > 1, v155 + 1, 1);
    uint64_t v153 = v226;
    unint64_t v154 = *(void *)(v226 + 24);
    unint64_t v156 = v154 >> 1;
  }
  *(void *)(v153 + 16)  = v157;
  *(void *)(v153 + 8 * v155 + 32)  = v210;
  *(void *)&v226  = v153;
  int64_t v158 = v155 + 2;
  if (v156 <= v157)
  {
    sub_100083624(v154 > 1, v158, 1);
    uint64_t v153 = v226;
  }
  *(void *)(v153 + 16)  = v158;
  *(void *)(v153 + 8 * v157 + 32)  = v212;
  *(void *)&v226  = v153;
  unint64_t v160 = *(void *)(v153 + 16);
  unint64_t v159 = *(void *)(v153 + 24);
  if (v160 >= v159 >> 1)
  {
    sub_100083624(v159 > 1, v160 + 1, 1);
    uint64_t v153 = v226;
  }
  *(void *)(v153 + 16)  = v160 + 1;
  *(void *)(v153 + 8 * v160 + 32)  = v197;
  *(void *)(v1 + 1920)  = v153;
  *(void *)(v1 + 1952)  = 0xD000000000000017;
  *(void *)(v1 + 1960)  = 0x80000001003DE010;
  v238  = v298;
  v239  = v299;
  v240  = v300;
  v234  = v294;
  v235  = v295;
  v236  = v296;
  v237  = v297;
  v230  = v290;
  v231  = v291;
  v232  = v292;
  v233  = v293;
  v226  = v286;
  v227  = v287;
  v228  = v288;
  v229  = v289;
  *(void *)(v1 + 1992)  = v67;
  sub_100083624(0, 10, 0);
  unint64_t v161 = _swiftEmptyArrayStorage;
  unint64_t v162 = _swiftEmptyArrayStorage[2];
  for (nn  = 16; nn != 256; nn += 24)
  {
    uint64_t v164 = *(void *)((char *)&v226 + nn);
    v222  = v161;
    unint64_t v165 = v161[3];
    if (v162 >= v165 >> 1)
    {
      sub_100083624(v165 > 1, v162 + 1, 1);
      unint64_t v161 = v222;
    }
    v161[2]  = v162 + 1;
    v161[v162++ + 4]  = v164;
  }
  *(void *)(v1 + 1968)  = v161;
  *(void *)(v1 + 2000)  = 0xD000000000000015;
  *(void *)(v1 + 2008)  = 0x80000001003DE030;
  v238  = v283;
  v239  = v284;
  v240  = v285;
  v234  = v279;
  v235  = v280;
  v236  = v281;
  v237  = v282;
  v230  = v275;
  v231  = v276;
  v232  = v277;
  v233  = v278;
  v226  = v271;
  v227  = v272;
  v228  = v273;
  v229  = v274;
  *(void *)(v1 + 2040)  = v67;
  sub_100083624(0, 10, 0);
  char v166 = _swiftEmptyArrayStorage;
  unint64_t v167 = _swiftEmptyArrayStorage[2];
  for (i1  = 16; i1 != 256; i1 += 24)
  {
    uint64_t v169 = *(void *)((char *)&v226 + i1);
    v223  = v166;
    unint64_t v170 = v166[3];
    if (v167 >= v170 >> 1)
    {
      sub_100083624(v170 > 1, v167 + 1, 1);
      char v166 = v223;
    }
    v166[2]  = v167 + 1;
    v166[v167++ + 4]  = v169;
  }
  *(void *)(v1 + 2016)  = v166;
  *(void *)(v1 + 2048)  = 0xD000000000000014;
  *(void *)(v1 + 2056)  = 0x80000001003DE050;
  v238  = v268;
  v239  = v269;
  v240  = v270;
  v234  = v264;
  v235  = v265;
  v236  = v266;
  v237  = v267;
  v230  = v260;
  v231  = v261;
  v232  = v262;
  v233  = v263;
  v226  = v256;
  v227  = v257;
  v228  = v258;
  v229  = v259;
  *(void *)(v1 + 2088)  = v67;
  sub_100083624(0, 10, 0);
  char v171 = _swiftEmptyArrayStorage;
  unint64_t v172 = _swiftEmptyArrayStorage[2];
  for (i2  = 16; i2 != 256; i2 += 24)
  {
    uint64_t v174 = *(void *)((char *)&v226 + i2);
    v224  = v171;
    unint64_t v175 = v171[3];
    if (v172 >= v175 >> 1)
    {
      sub_100083624(v175 > 1, v172 + 1, 1);
      char v171 = v224;
    }
    v171[2]  = v172 + 1;
    v171[v172++ + 4]  = v174;
  }
  *(void *)(v1 + 2064)  = v171;
  *(void *)(v1 + 2096)  = 0xD000000000000015;
  *(void *)(v1 + 2104)  = 0x80000001003DE070;
  v238  = v253;
  v239  = v254;
  v240  = v255;
  v234  = v249;
  v235  = v250;
  v236  = v251;
  v237  = v252;
  v230  = v245;
  v231  = v246;
  v232  = v247;
  v233  = v248;
  v226  = v241;
  v227  = v242;
  v228  = v243;
  v229  = v244;
  *(void *)(v1 + 2136)  = v67;
  sub_100083624(0, 10, 0);
  int v176 = _swiftEmptyArrayStorage;
  unint64_t v177 = _swiftEmptyArrayStorage[2];
  for (i3  = 16; i3 != 256; i3 += 24)
  {
    uint64_t v179 = *(void *)((char *)&v226 + i3);
    v225  = v176;
    unint64_t v180 = v176[3];
    if (v177 >= v180 >> 1)
    {
      sub_100083624(v180 > 1, v177 + 1, 1);
      int v176 = v225;
    }
    v176[2]  = v177 + 1;
    v176[v177++ + 4]  = v179;
  }
  *(void *)(v1 + 2112)  = v176;
  *(void *)(v1 + 2144)  = 0xD000000000000010;
  *(void *)(v1 + 2152)  = 0x80000001003DE090;
  *(void *)(v1 + 2184)  = v67;
  *(void *)&v226  = _swiftEmptyArrayStorage;
  sub_100083624(0, 4, 0);
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  sub_10018AE28();
  uint64_t v181 = v226;
  v183  = *(void *)(v226 + 16);
  v182  = *(void *)(v226 + 24);
  if (v183 >= v182 >> 1)
  {
    sub_100083624(v182 > 1, v183 + 1, 1);
    uint64_t v181 = v226;
  }
  *(void *)(v181 + 16)  = v183 + 1;
  *(void *)(v181 + 8 * v183 + 32)  = v53;
  sub_10018AE28();
  uint64_t v184 = v226;
  unint64_t v186 = *(void *)(v226 + 16);
  unint64_t v185 = *(void *)(v226 + 24);
  if (v186 >= v185 >> 1)
  {
    sub_100083624(v185 > 1, v186 + 1, 1);
    uint64_t v184 = v226;
  }
  *(void *)(v184 + 16)  = v186 + 1;
  *(void *)(v184 + 8 * v186 + 32)  = v54;
  sub_10018AE28();
  uint64_t v187 = v226;
  unint64_t v189 = *(void *)(v226 + 16);
  unint64_t v188 = *(void *)(v226 + 24);
  if (v189 >= v188 >> 1)
  {
    sub_100083624(v188 > 1, v189 + 1, 1);
    uint64_t v187 = v226;
  }
  *(void *)(v187 + 16)  = v189 + 1;
  *(void *)(v187 + 8 * v189 + 32)  = v55;
  sub_10018AE28();
  uint64_t v190 = v226;
  unint64_t v192 = *(void *)(v226 + 16);
  unint64_t v191 = *(void *)(v226 + 24);
  if (v192 >= v191 >> 1)
  {
    sub_100083624(v191 > 1, v192 + 1, 1);
    uint64_t v190 = v226;
  }
  *(void *)(v190 + 16)  = v192 + 1;
  *(void *)(v190 + 8 * v192 + 32)  = v65;
  *(void *)(v1 + 2160)  = v190;
  uint64_t v193 = NANBitmap.Channel.operatingClass.getter(v1);

  return sub_10001FE34(v193);
}

uint64_t apple80211_awdl_low_latency_statistics.eventPayload()()
{
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  sub_100010BCC(qword_10047DD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16)  = xmmword_1003C1E10;
  strcpy((char *)(v1 + 32), "LL_STATS_ISSDB");
  *(unsigned char *)(v1 + 47)  = -18;
  __int16 v2 = *(_WORD *)(v0 + 16);
  int v4 = *(_DWORD *)(v0 + 20);
  int v3 = *(_DWORD *)(v0 + 24);
  int v5 = *(_DWORD *)(v0 + 28);
  int v19 = *(_DWORD *)(v0 + 36);
  int v20 = *(_DWORD *)(v0 + 60);
  int v21 = *(_DWORD *)(v0 + 48);
  int v22 = *(_DWORD *)(v0 + 72);
  int v23 = *(_DWORD *)(v0 + 80);
  int v24 = *(_DWORD *)(v0 + 84);
  int v25 = *(_DWORD *)(v0 + 88);
  int v26 = *(_DWORD *)(v0 + 92);
  int v27 = *(_DWORD *)(v0 + 96);
  int v28 = *(_DWORD *)(v0 + 100);
  char v29 = *(unsigned char *)(v0 + 104);
  uint64_t v30 = *(void *)(v0 + 112);
  int v31 = *(_DWORD *)(v0 + 120);
  int v32 = *(_DWORD *)(v0 + 124);
  int v33 = *(_DWORD *)(v0 + 128);
  int v34 = *(_DWORD *)(v0 + 132);
  int v35 = *(_DWORD *)(v0 + 136);
  int v36 = *(_DWORD *)(v0 + 140);
  int v37 = *(_DWORD *)(v0 + 144);
  int v40 = *(_DWORD *)(v0 + 148);
  __int16 v42 = *(_WORD *)(v0 + 152);
  char v6 = *(unsigned char *)(v0 + 154);
  *(unsigned char *)(v1 + 48)  = *(_DWORD *)(v0 + 8);
  *(void *)(v1 + 72)  = &type metadata for Bool;
  *(void *)(v1 + 80)  = 0xD000000000000015;
  *(void *)(v1 + 88)  = 0x80000001003DD570;
  char v38 = *(unsigned char *)(v0 + 155);
  char v39 = v6;
  uint64_t v7 = *(void *)(v0 + 192);
  char v41 = *(unsigned char *)(v0 + 157);
  char v43 = *(unsigned char *)(v0 + 158);
  char v45 = *(unsigned char *)(v0 + 159);
  uint64_t v46 = *(unsigned int *)(v0 + 162);
  char v47 = *(unsigned char *)(v0 + 166);
  int v48 = *(_DWORD *)(v0 + 168);
  int v49 = *(_DWORD *)(v0 + 172);
  int v50 = *(_DWORD *)(v0 + 176);
  int v51 = *(_DWORD *)(v0 + 180);
  uint64_t v52 = *(void *)(v0 + 184);
  uint64_t v44 = *(unsigned __int16 *)(v0 + 160);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B4420;
  *(_WORD *)(v8 + 32)  = v2;
  v53[0]  = v8;
  static String.Encoding.utf8.getter();
  sub_100010BCC(&qword_10047E7D0);
  sub_10018C814();
  uint64_t v9 = String.init<A>(bytes:encoding:)();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 144)  = v4;
  *(_DWORD *)(v1 + 192)  = v3;
  *(_DWORD *)(v1 + 240)  = v5;
  unint64_t v12 = 0xE000000000000000;
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(v1 + 96)  = v13;
  *(void *)(v1 + 104)  = v12;
  *(void *)(v1 + 128)  = 0xD000000000000014;
  *(void *)(v1 + 136)  = 0x80000001003DD590;
  *(void *)(v1 + 184)  = 0x80000001003DD5B0;
  *(void *)(v1 + 216)  = &type metadata for Int32;
  *(void *)(v1 + 168)  = &type metadata for Int32;
  *(void *)(v1 + 176)  = 0xD000000000000013;
  *(void *)(v1 + 224)  = 0xD000000000000013;
  *(void *)(v1 + 232)  = 0x80000001003DD5D0;
  *(void *)(v1 + 280)  = 0x80000001003DD5F0;
  *(void *)(v1 + 120)  = &type metadata for String;
  *(_DWORD *)(v1 + 288)  = v19;
  *(void *)(v1 + 264)  = &type metadata for UInt32;
  *(void *)(v1 + 272)  = 0xD00000000000001DLL;
  *(void *)(v1 + 312)  = &type metadata for UInt32;
  *(void *)(v1 + 320)  = 0xD00000000000001DLL;
  *(void *)(v1 + 328)  = 0x80000001003DD610;
  *(_DWORD *)(v1 + 336)  = v20;
  *(void *)(v1 + 360)  = &type metadata for UInt32;
  *(void *)(v1 + 368)  = 0xD00000000000001ELL;
  *(void *)(v1 + 376)  = 0x80000001003DD630;
  *(_DWORD *)(v1 + 384)  = v21;
  *(void *)(v1 + 408)  = &type metadata for UInt32;
  *(void *)(v1 + 416)  = 0xD00000000000001ELL;
  *(void *)(v1 + 424)  = 0x80000001003DD650;
  *(_DWORD *)(v1 + 432)  = v22;
  *(void *)(v1 + 456)  = &type metadata for UInt32;
  *(void *)(v1 + 464)  = 0xD000000000000022;
  *(void *)(v1 + 472)  = 0x80000001003DD670;
  *(_DWORD *)(v1 + 480)  = v23;
  *(void *)(v1 + 504)  = &type metadata for UInt32;
  *(void *)(v1 + 512)  = 0xD000000000000022;
  *(void *)(v1 + 520)  = 0x80000001003DD6A0;
  *(void *)(v1 + 552)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 528)  = v24;
  *(void *)(v1 + 560)  = 0xD000000000000022;
  *(void *)(v1 + 568)  = 0x80000001003DD6D0;
  *(void *)(v1 + 600)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 576)  = v25;
  *(void *)(v1 + 608)  = 0xD000000000000022;
  *(void *)(v1 + 616)  = 0x80000001003DD700;
  *(void *)(v1 + 648)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 624)  = v26;
  *(void *)(v1 + 656)  = 0xD000000000000028;
  *(void *)(v1 + 664)  = 0x80000001003DD730;
  *(void *)(v1 + 696)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 672)  = v27;
  *(void *)(v1 + 704)  = 0xD000000000000029;
  *(void *)(v1 + 712)  = 0x80000001003DD760;
  *(void *)(v1 + 744)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 720)  = v28;
  *(void *)(v1 + 752)  = 0xD00000000000001CLL;
  *(void *)(v1 + 760)  = 0x80000001003DD790;
  *(void *)(v1 + 792)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 768)  = v29;
  *(void *)(v1 + 800)  = 0xD000000000000019;
  *(void *)(v1 + 808)  = 0x80000001003DD7B0;
  *(void *)(v1 + 840)  = &type metadata for UInt64;
  *(void *)(v1 + 816)  = v30;
  *(void *)(v1 + 848)  = 0xD000000000000019;
  *(void *)(v1 + 856)  = 0x80000001003DD7D0;
  *(void *)(v1 + 888)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 864)  = v31;
  *(void *)(v1 + 896)  = 0xD00000000000001ALL;
  *(void *)(v1 + 904)  = 0x80000001003DD7F0;
  *(void *)(v1 + 936)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 912)  = v32;
  *(void *)(v1 + 944)  = 0xD000000000000023;
  *(void *)(v1 + 952)  = 0x80000001003DD810;
  *(void *)(v1 + 984)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 960)  = v33;
  *(void *)(v1 + 992)  = 0xD00000000000001BLL;
  *(void *)(v1 + 1000)  = 0x80000001003DD840;
  *(void *)(v1 + 1032)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1008)  = v34;
  *(void *)(v1 + 1040)  = 0xD00000000000001BLL;
  *(void *)(v1 + 1048)  = 0x80000001003DD860;
  *(void *)(v1 + 1080)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1056)  = v35;
  *(void *)(v1 + 1088)  = 0xD000000000000021;
  *(void *)(v1 + 1096)  = 0x80000001003DD880;
  *(void *)(v1 + 1128)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1104)  = v36;
  *(void *)(v1 + 1136)  = 0xD00000000000001FLL;
  *(void *)(v1 + 1144)  = 0x80000001003DD8B0;
  *(void *)(v1 + 1176)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1152)  = v37;
  *(void *)(v1 + 1184)  = 0xD000000000000023;
  *(void *)(v1 + 1192)  = 0x80000001003DD8D0;
  *(void *)(v1 + 1224)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1200)  = v40;
  *(void *)(v1 + 1232)  = 0xD00000000000001FLL;
  *(void *)(v1 + 1240)  = 0x80000001003DD900;
  *(void *)(v1 + 1272)  = &type metadata for UInt16;
  *(_WORD *)(v1 + 1248)  = v42;
  *(void *)(v1 + 1280)  = 0xD00000000000001DLL;
  *(void *)(v1 + 1288)  = 0x80000001003DD920;
  *(void *)(v1 + 1320)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1296)  = v39;
  *(void *)(v1 + 1328)  = 0xD00000000000001DLL;
  *(void *)(v1 + 1336)  = 0x80000001003DD940;
  *(void *)(v1 + 1368)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1344)  = v38;
  *(void *)(v1 + 1376)  = 0xD000000000000018;
  *(void *)(v1 + 1384)  = 0x80000001003DD960;
  *(void *)(v1 + 1416)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1392)  = v41;
  *(void *)(v1 + 1424)  = 0xD000000000000017;
  *(void *)(v1 + 1432)  = 0x80000001003DD980;
  *(void *)(v1 + 1464)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1440)  = v43;
  *(void *)(v1 + 1472)  = 0xD000000000000021;
  *(void *)(v1 + 1480)  = 0x80000001003DD9A0;
  *(void *)(v1 + 1512)  = &type metadata for UInt8;
  *(unsigned char *)(v1 + 1488)  = v45;
  *(void *)(v1 + 1520)  = 0x53544154535F4C4CLL;
  *(void *)(v1 + 1528)  = 0xEF44495F4754525FLL;
  uint64_t v14 = WiFiAddress.description.getter(v44 | (v46 << 16));
  *(void *)(v1 + 1560)  = &type metadata for String;
  *(void *)(v1 + 1536)  = v14;
  *(void *)(v1 + 1544)  = v15;
  *(void *)(v1 + 1568)  = 0xD000000000000012;
  *(void *)(v1 + 1576)  = 0x80000001003DD9D0;
  *(void *)(v1 + 1608)  = &type metadata for Bool;
  *(unsigned char *)(v1 + 1584)  = v47;
  *(void *)(v1 + 1616)  = 0xD000000000000021;
  *(void *)(v1 + 1624)  = 0x80000001003DD9F0;
  *(void *)(v1 + 1656)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1632)  = v48;
  *(void *)(v1 + 1664)  = 0xD000000000000021;
  *(void *)(v1 + 1672)  = 0x80000001003DDA20;
  *(void *)(v1 + 1704)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1680)  = v49;
  *(void *)(v1 + 1712)  = 0xD000000000000025;
  *(void *)(v1 + 1720)  = 0x80000001003DDA50;
  *(void *)(v1 + 1752)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1728)  = v50;
  *(void *)(v1 + 1760)  = 0xD000000000000021;
  *(void *)(v1 + 1768)  = 0x80000001003DDA80;
  *(void *)(v1 + 1800)  = &type metadata for UInt32;
  *(_DWORD *)(v1 + 1776)  = v51;
  *(void *)(v1 + 1808)  = 0xD000000000000018;
  *(void *)(v1 + 1816)  = 0x80000001003DDAB0;
  *(void *)(v1 + 1848)  = &type metadata for UInt64;
  *(void *)(v1 + 1824)  = v52;
  *(void *)(v1 + 1856)  = 0xD000000000000023;
  *(void *)(v1 + 1864)  = 0x80000001003DDAD0;
  *(void *)(v1 + 1896)  = &type metadata for Double;
  *(void *)(v1 + 1872)  = v7;
  unint64_t v16 = sub_10001FE34(v1);
  memcpy(v53, (const void *)(v0 + 200), sizeof(v53));
  unint64_t v17 = sub_10018884C();
  return sub_10017D03C(v17, v16, (uint64_t)sub_10018B784, (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))sub_10018B520);
}

uint64_t sub_10018AE28()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if ((result & 1) == 0)
  {
    int64_t v3 = *(void *)(v1 + 16) + 1;
    return sub_100083624(0, v3, 1);
  }
  return result;
}

uint64_t sub_10018AE84(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v44 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v12 = sub_10000DDE0(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1001722CC();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    int v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    int v21 = (uint64_t *)(v20[6] + 16 * v12);
    *int v21 = v7;
    v21[1]  = v6;
    *(void *)(v20[7] + 8 * v12)  = v10;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2]  = v24;
    uint64_t v25 = v44 - 1;
    if (v44 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (i  = (void **)(a1 + 9); ; i += 3)
    {
      uint64_t v28 = (uint64_t)*(i - 2);
      uint64_t v27 = (uint64_t)*(i - 1);
      char v29 = *i;
      uint64_t v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      id v10 = v29;
      unint64_t v31 = sub_10000DDE0(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_10016D608(v35, 1);
        unint64_t v31 = sub_10000DDE0(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      char v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      char v39 = (uint64_t *)(v38[6] + 16 * v31);
      *char v39 = v28;
      v39[1]  = v27;
      *(void *)(v38[7] + 8 * v31)  = v10;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      long long v38[2] = v41;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10016D608(v15, a2 & 1);
  uint64_t v17 = sub_10000DDE0(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object  = (void *)0x80000001003DE290;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._object  = (void *)0xE100000000000000;
  String.append(_:)(v43);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10018B214(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001CBE80();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v54 = v9;
  unint64_t v12 = (void *)*a5;
  unint64_t v14 = sub_10000DDE0(v7, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      int v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1001722CC();
      int v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    uint64_t v25 = (uint64_t *)(v21[6] + 16 * v14);
    *uint64_t v25 = v10;
    v25[1]  = v11;
    *(void *)(v21[7] + 8 * v14)  = v54;
    uint64_t v26 = v21[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2]  = v28;
LABEL_13:
    sub_1001CBE80();
    if (v30)
    {
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      BOOL v34 = v31;
      do
      {
        uint64_t v41 = (void *)*a5;
        unint64_t v42 = sub_10000DDE0(v32, v33);
        uint64_t v44 = v41[2];
        BOOL v45 = (v43 & 1) == 0;
        BOOL v27 = __OFADD__(v44, v45);
        uint64_t v46 = v44 + v45;
        if (v27) {
          goto LABEL_24;
        }
        char v47 = v43;
        if (v41[3] < v46)
        {
          sub_10016D608(v46, 1);
          unint64_t v42 = sub_10000DDE0(v32, v33);
          if ((v47 & 1) != (v48 & 1)) {
            goto LABEL_26;
          }
        }
        int v49 = (void *)*a5;
        if (v47)
        {
          uint64_t v35 = 8 * v42;
          id v36 = *(id *)(v49[7] + 8 * v42);
          swift_bridgeObjectRelease();

          uint64_t v37 = v49[7];
          *(void *)(v37 + v35)  = v36;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          int v50 = (uint64_t *)(v49[6] + 16 * v42);
          *int v50 = v32;
          v50[1]  = v33;
          *(void *)(v49[7] + 8 * v42)  = v34;
          uint64_t v51 = v49[2];
          BOOL v27 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v27) {
            goto LABEL_25;
          }
          v49[2]  = v52;
        }
        sub_1001CBE80();
        uint64_t v32 = v38;
        uint64_t v33 = v39;
        BOOL v34 = v40;
      }
      while (v39);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10006D44C();
    return swift_release();
  }
  sub_10016D608(v17, a4 & 1);
  uint64_t v19 = sub_10000DDE0(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    int v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = 8 * v14;
    id v23 = *(id *)(v21[7] + 8 * v14);
    swift_bridgeObjectRelease();

    uint64_t v24 = v21[7];
    *(void *)(v24 + v22)  = v23;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10018B520(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001CC014(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10006D44C();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_10003803C(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_10000DDE0(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_100170868();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_10016AACC(v21, a4 & 1);
      uint64_t v23 = sub_10000DDE0(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_1000107A4(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_1000107A4((uint64_t)v31, (uint64_t)v32);
        sub_100010754((uint64_t)v31);
        sub_100010754((uint64_t)v33);
        swift_bridgeObjectRelease();
        unint64_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        sub_100010754((uint64_t)v14);
        sub_10003803C(v32, v14);
        goto LABEL_7;
      }
    }
    uint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    *uint64_t v26 = v15;
    v26[1]  = v12;
    sub_10003803C(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    v25[2]  = v29;
LABEL_7:
    sub_1001CC014(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4  = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10018B784@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_1000107A4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2  = v4;
  a2[1]  = v3;

  return swift_bridgeObjectRetain();
}

BOOL _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a2 + 32)
    && *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34)
    && *(unsigned __int16 *)(a1 + 36) == *(unsigned __int16 *)(a2 + 36)
    && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38)
    && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42)
    && *(unsigned __int8 *)(a1 + 43) == *(unsigned __int8 *)(a2 + 43)
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
    && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60)
    && *(unsigned __int8 *)(a1 + 61) == *(unsigned __int8 *)(a2 + 61)
    && ((*(unsigned __int8 *)(a1 + 62) ^ *(unsigned __int8 *)(a2 + 62)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 63) ^ *(unsigned __int8 *)(a2 + 63)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 64) ^ *(unsigned __int8 *)(a2 + 64)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 65) ^ *(unsigned __int8 *)(a2 + 65)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 66) ^ *(unsigned __int8 *)(a2 + 66)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 67) ^ *(unsigned __int8 *)(a2 + 67)) & 1) == 0
    && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68)
    && *(unsigned __int8 *)(a1 + 69) == *(unsigned __int8 *)(a2 + 69)
    && *(unsigned __int8 *)(a1 + 70) == *(unsigned __int8 *)(a2 + 70)
    && *(unsigned __int8 *)(a1 + 71) == *(unsigned __int8 *)(a2 + 71)
    && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
    uint64_t v5 = *(void *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 96);
    uint64_t v6 = *(void *)(a2 + 104);
    if (sub_1000956B0(*(void *)(a1 + 80), *(void *)(a2 + 80))
      && sub_1000956B0(v2, v5)
      && sub_1000956B0(v4, v7)
      && sub_1000956B0(v3, v6))
    {
      return 1;
    }
  }
  return result;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v2 = a1[1] == a2[1] && a1[2] == a2[2];
  if (!v2
    || *((void *)a1 + 1) != *((void *)a2 + 1)
    || *((void *)a1 + 2) != *((void *)a2 + 2)
    || *((void *)a1 + 3) != *((void *)a2 + 3))
  {
    return 0;
  }
  unint64_t v3 = *((unsigned int *)a1 + 8) | ((unint64_t)*((unsigned __int16 *)a1 + 18) << 32);
  unint64_t v4 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  uint64_t v5 = v4 & 0xFF00000000;
  if ((v3 & 0xFF00000000) != 0x300000000)
  {
    if (v5 != 0x300000000
      && *((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8)
      && ((0x801004u >> ((v3 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v24 = v4 >> 40;
      switch(v3 >> 40)
      {
        case 2uLL:
          if (v24 != 2) {
            return 0;
          }
          goto LABEL_12;
        case 3uLL:
          if (v24 != 3) {
            return 0;
          }
          goto LABEL_12;
        case 4uLL:
          if (v24 != 4) {
            return 0;
          }
          goto LABEL_12;
        case 5uLL:
          if (v24 != 5) {
            return 0;
          }
          goto LABEL_12;
        case 6uLL:
          if (v24 != 6) {
            return 0;
          }
          goto LABEL_12;
        default:
          if ((v24 - 2) < 5 || ((v3 & 0x10000000000) == 0) == ((v4 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_12;
      }
    }
    return 0;
  }
  if (v5 != 0x300000000) {
    return 0;
  }
LABEL_12:
  unint64_t v6 = *((unsigned int *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 22) << 32);
  unint64_t v7 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int16 *)a2 + 22) << 32);
  uint64_t v8 = v7 & 0xFF00000000;
  if ((v6 & 0xFF00000000) != 0x300000000)
  {
    if (v8 != 0x300000000
      && *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10)
      && ((0x801004u >> ((v6 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v7 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v25 = v7 >> 40;
      switch(v6 >> 40)
      {
        case 2uLL:
          if (v25 != 2) {
            return 0;
          }
          goto LABEL_14;
        case 3uLL:
          if (v25 != 3) {
            return 0;
          }
          goto LABEL_14;
        case 4uLL:
          if (v25 != 4) {
            return 0;
          }
          goto LABEL_14;
        case 5uLL:
          if (v25 != 5) {
            return 0;
          }
          goto LABEL_14;
        case 6uLL:
          if (v25 != 6) {
            return 0;
          }
          goto LABEL_14;
        default:
          if ((v25 - 2) < 5 || ((v6 & 0x10000000000) == 0) == ((v7 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_14;
      }
    }
    return 0;
  }
  if (v8 != 0x300000000) {
    return 0;
  }
LABEL_14:
  unint64_t v9 = *((unsigned int *)a1 + 12) | ((unint64_t)*((unsigned __int16 *)a1 + 26) << 32);
  unint64_t v10 = *((unsigned int *)a2 + 12) | ((unint64_t)*((unsigned __int16 *)a2 + 26) << 32);
  uint64_t v11 = v10 & 0xFF00000000;
  if ((v9 & 0xFF00000000) != 0x300000000)
  {
    if (v11 != 0x300000000
      && *((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12)
      && ((0x801004u >> ((v9 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v10 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v26 = v10 >> 40;
      switch(v9 >> 40)
      {
        case 2uLL:
          if (v26 != 2) {
            return 0;
          }
          goto LABEL_16;
        case 3uLL:
          if (v26 != 3) {
            return 0;
          }
          goto LABEL_16;
        case 4uLL:
          if (v26 != 4) {
            return 0;
          }
          goto LABEL_16;
        case 5uLL:
          if (v26 != 5) {
            return 0;
          }
          goto LABEL_16;
        case 6uLL:
          if (v26 != 6) {
            return 0;
          }
          goto LABEL_16;
        default:
          if ((v26 - 2) < 5 || ((v9 & 0x10000000000) == 0) == ((v10 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_16;
      }
    }
    return 0;
  }
  if (v11 != 0x300000000) {
    return 0;
  }
LABEL_16:
  unint64_t v12 = *((unsigned int *)a1 + 14) | ((unint64_t)*((unsigned __int16 *)a1 + 30) << 32);
  unint64_t v13 = *((unsigned int *)a2 + 14) | ((unint64_t)*((unsigned __int16 *)a2 + 30) << 32);
  uint64_t v14 = v13 & 0xFF00000000;
  if ((v12 & 0xFF00000000) != 0x300000000)
  {
    if (v14 != 0x300000000
      && *((_DWORD *)a1 + 14) == *((_DWORD *)a2 + 14)
      && ((0x801004u >> ((v12 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v13 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v27 = v13 >> 40;
      switch(v12 >> 40)
      {
        case 2uLL:
          if (v27 != 2) {
            return 0;
          }
          goto LABEL_18;
        case 3uLL:
          if (v27 != 3) {
            return 0;
          }
          goto LABEL_18;
        case 4uLL:
          if (v27 != 4) {
            return 0;
          }
          goto LABEL_18;
        case 5uLL:
          if (v27 != 5) {
            return 0;
          }
          goto LABEL_18;
        case 6uLL:
          if (v27 != 6) {
            return 0;
          }
          goto LABEL_18;
        default:
          if ((v27 - 2) < 5 || ((v12 & 0x10000000000) == 0) == ((v13 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_18;
      }
    }
    return 0;
  }
  if (v14 != 0x300000000) {
    return 0;
  }
LABEL_18:
  if (*((void *)a1 + 8) != *((void *)a2 + 8)) {
    return 0;
  }
  if (*((void *)a1 + 9) != *((void *)a2 + 9)) {
    return 0;
  }
  if (*((void *)a1 + 10) != *((void *)a2 + 10)) {
    return 0;
  }
  if (*((void *)a1 + 11) != *((void *)a2 + 11)) {
    return 0;
  }
  if (*((void *)a1 + 12) != *((void *)a2 + 12)) {
    return 0;
  }
  if (*((void *)a1 + 13) != *((void *)a2 + 13)) {
    return 0;
  }
  if (a1[112] != a2[112]) {
    return 0;
  }
  char v17 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0
    || *(void *)&a1[v17[21]] != *(void *)&a2[v17[21]]
    || *(void *)&a1[v17[22]] != *(void *)&a2[v17[22]]
    || *(void *)&a1[v17[23]] != *(void *)&a2[v17[23]]
    || *(void *)&a1[v17[24]] != *(void *)&a2[v17[24]]
    || *(void *)&a1[v17[25]] != *(void *)&a2[v17[25]]
    || *(void *)&a1[v17[26]] != *(void *)&a2[v17[26]]
    || *(void *)&a1[v17[27]] != *(void *)&a2[v17[27]]
    || *(void *)&a1[v17[28]] != *(void *)&a2[v17[28]]
    || *(unsigned __int16 *)&a1[v17[29]] != *(unsigned __int16 *)&a2[v17[29]]
    || a1[v17[30]] != a2[v17[30]]
    || a1[v17[31]] != a2[v17[31]]
    || a1[v17[32]] != a2[v17[32]]
    || a1[v17[33]] != a2[v17[33]]
    || a1[v17[34]] != a2[v17[34]]
    || a1[v17[35]] != a2[v17[35]])
  {
    return 0;
  }
  uint64_t v18 = v17[36];
  uint64_t v19 = *(void *)&a1[v18];
  uint64_t v20 = *(void *)&a1[v18 + 8];
  uint64_t v21 = &a2[v18];
  if (v19 == *(void *)v21 && v20 == *((void *)v21 + 1)
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v22 & 1) != 0))
  {
    if (a1[v17[37]] == a2[v17[37]]
      && *(void *)&a1[v17[38]] == *(void *)&a2[v17[38]]
      && *(void *)&a1[v17[39]] == *(void *)&a2[v17[39]]
      && *(void *)&a1[v17[40]] == *(void *)&a2[v17[40]]
      && *(void *)&a1[v17[41]] == *(void *)&a2[v17[41]]
      && *(void *)&a1[v17[42]] == *(void *)&a2[v17[42]])
    {
      return *(double *)&a1[v17[43]] == *(double *)&a2[v17[43]];
    }
    return 0;
  }
  return result;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0xD8uLL) == 0;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0(uint64_t *a1, uint64_t *a2)
{
  if (!sub_100099730(*a1, *a2)
    || !sub_100099730(a1[1], a2[1])
    || !sub_100099730(a1[2], a2[2])
    || !sub_100099730(a1[3], a2[3])
    || !sub_100099730(a1[4], a2[4])
    || !sub_100099730(a1[5], a2[5])
    || !sub_100099730(a1[6], a2[6])
    || !sub_100099730(a1[7], a2[7])
    || !sub_100099730(a1[8], a2[8])
    || !sub_100099730(a1[9], a2[9])
    || !sub_100099730(a1[10], a2[10])
    || !sub_100099730(a1[11], a2[11])
    || !sub_100099730(a1[12], a2[12])
    || !sub_100099730(a1[13], a2[13])
    || !sub_100099730(a1[14], a2[14])
    || !sub_100099730(a1[15], a2[15])
    || !sub_100099730(a1[16], a2[16]))
  {
    return 0;
  }
  uint64_t v4 = a1[17];
  uint64_t v5 = a2[17];

  return sub_100099730(v4, v5);
}

uint64_t _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v11 = 0;
    if ((v10 & 1) == 0) {
      return v11 & 1;
    }
  }
  unint64_t v12 = 0xEC0000006F727465;
  unint64_t v13 = 0x526E496B63757473;
  if (!a2)
  {
    unint64_t v14 = 0x526E496B63757473;
    unint64_t v15 = 0xEC0000006F727465;
    int v16 = a4;
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (a2 == 1) {
    unint64_t v14 = 0x536E496B63757473;
  }
  else {
    unint64_t v14 = 0xD000000000000014;
  }
  if (a2 == 1) {
    unint64_t v15 = 0xEB000000006E6163;
  }
  else {
    unint64_t v15 = 0x80000001003D8A80;
  }
  int v16 = a4;
  if (a4)
  {
LABEL_13:
    if (v16 == 1) {
      unint64_t v13 = 0x536E496B63757473;
    }
    else {
      unint64_t v13 = 0xD000000000000014;
    }
    if (v16 == 1) {
      unint64_t v12 = 0xEB000000006E6163;
    }
    else {
      unint64_t v12 = 0x80000001003D8A80;
    }
  }
LABEL_19:
  if (v14 == v13 && v15 == v12) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t type metadata accessor for AWDLStatistics.TrafficRegistrationStop(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004811C8);
}

uint64_t sub_10018C510()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1E) {
    return 30;
  }
  else {
    return v0;
  }
}

uint64_t sub_10018C564()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x43) {
    return 67;
  }
  else {
    return v0;
  }
}

unint64_t sub_10018C5B8(Swift::String string)
{
  object  = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044EFA8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_10018C604(Swift::String string, Swift::OpaquePointer cases)
{
  object  = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object  = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004812F0);
}

void *sub_10018C66C(void *a1, void *a2)
{
  return a2;
}

_OWORD *sub_10018C6A4(_OWORD *a1, _OWORD *a2)
{
  return a2;
}

uint64_t sub_10018C6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018C740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018C7A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10018C7DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10018C814()
{
  unint64_t result = qword_10047E7D8;
  if (!qword_10047E7D8)
  {
    sub_100014434(&qword_10047E7D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E7D8);
  }
  return result;
}

uint64_t sub_10018C870(uint64_t result, unsigned __int8 a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result;
    int v7 = *(_DWORD *)(result + 32);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v33 = a2;
    while (1)
    {
      *(void *)&long long v36 = 0;
      *((void *)&v36 + 1)  = 0xE000000000000000;
      unint64_t v9 = 0xE800000000000000;
      unint64_t v10 = 0x4953535272656570;
      switch(v33)
      {
        case 1:
          unint64_t v10 = 0xD000000000000016;
          unint64_t v9 = 0x80000001003DE1D0;
          break;
        case 2:
          char v11 = "avgCCAForPeerInfraChannel";
          goto LABEL_7;
        case 3:
          char v11 = "AWDL_STATS_SERVICE_KEY";
LABEL_7:
          unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
          unint64_t v10 = 0xD000000000000019;
          break;
        default:
          break;
      }
      unint64_t v12 = v9;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 95;
      v13._object  = (void *)0xE100000000000000;
      String.append(_:)(v13);
      *(void *)&v35[0]  = v8;
      v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 0x746E756F635FLL;
      v15._object  = (void *)0xE600000000000000;
      String.append(_:)(v15);
      long long v16 = v36;
      uint64_t v37 = &type metadata for UInt32;
      LODWORD(v36)  = v7;
      sub_10003803C(&v36, v35);
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = (void *)*a3;
      long long v34 = (void *)*a3;
      *a3  = 0x8000000000000000;
      unint64_t v20 = sub_10000DDE0(v16, *((uint64_t *)&v16 + 1));
      uint64_t v21 = v18[2];
      BOOL v22 = (v19 & 1) == 0;
      uint64_t v23 = v21 + v22;
      if (__OFADD__(v21, v22))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x10018CB74);
      }
      char v24 = v19;
      if (v18[3] >= v23)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v27 = v34;
          if ((v19 & 1) == 0) {
            goto LABEL_17;
          }
        }
        else
        {
          sub_100170868();
          unint64_t v27 = v34;
          if ((v24 & 1) == 0) {
            goto LABEL_17;
          }
        }
      }
      else
      {
        sub_10016AACC(v23, isUniquelyReferenced_nonNull_native);
        uint64_t v25 = sub_10000DDE0(v16, *((uint64_t *)&v16 + 1));
        if ((v24 & 1) != (v26 & 1)) {
          goto LABEL_25;
        }
        unint64_t v20 = v25;
        unint64_t v27 = v34;
        if ((v24 & 1) == 0)
        {
LABEL_17:
          v27[(v20 >> 6) + 8] |= 1 << v20;
          *(_OWORD *)(v27[6] + 16 * v20)  = v16;
          sub_10003803C(v35, (_OWORD *)(v27[7] + 32 * v20));
          uint64_t v29 = v27[2];
          BOOL v30 = __OFADD__(v29, 1);
          uint64_t v31 = v29 + 1;
          if (v30) {
            goto LABEL_24;
          }
          v27[2]  = v31;
          swift_bridgeObjectRetain();
          goto LABEL_19;
        }
      }
      BOOL v28 = (_OWORD *)(v27[7] + 32 * v20);
      sub_100010754((uint64_t)v28);
      sub_10003803C(v35, v28);
LABEL_19:
      *a3  = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = v8 + 1;
      if (v8 + 1 != v3)
      {
        int v7 = *(_DWORD *)(v6 + 4 * v8++ + 36);
        if (v32 != 4) {
          continue;
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t sub_10018CB84(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = _swiftEmptyArrayStorage;
  if ((unint64_t)(a2 - a1 + 23) < 0x2F) {
    return (unint64_t)v4;
  }
  uint64_t v5 = v3 / 24;
  char v47 = _swiftEmptyArrayStorage;
  unint64_t result = sub_10008377C(0, (v3 / 24) & ~((v3 / 24) >> 63), 0);
  if (v3 >= -23)
  {
    sub_100010BCC((uint64_t *)&unk_1004883F0);
    for (i  = (double *)(a1 + 16); ; i += 3)
    {
      double v8 = *(i - 2);
      double v9 = *(i - 1);
      double v10 = *i;
      sub_100010BCC(qword_10047DD00);
      inited  = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_1003B2760;
      *(void *)(inited + 32)  = 0xD00000000000001ELL;
      uint64_t v12 = inited + 32;
      *(void *)(inited + 40)  = 0x80000001003DE0B0;
      if (v8 <= -0.1) {
        double v13 = v8;
      }
      else {
        double v13 = -0.1;
      }
      if (v8 > 0.1) {
        double v14 = v8;
      }
      else {
        double v14 = 0.1;
      }
      if (v8 >= 0.0) {
        double v13 = v14;
      }
      *(void *)(inited + 72)  = &type metadata for Double;
      *(double *)(inited + 48)  = v13;
      *(void *)(inited + 80)  = 0xD00000000000001CLL;
      uint64_t v15 = inited + 80;
      *(void *)(inited + 88)  = 0x80000001003DE0D0;
      if (v9 <= -0.1) {
        double v16 = v9;
      }
      else {
        double v16 = -0.1;
      }
      if (v9 > 0.1) {
        double v17 = v9;
      }
      else {
        double v17 = 0.1;
      }
      if (v9 >= 0.0) {
        double v16 = v17;
      }
      *(void *)(inited + 120)  = &type metadata for Double;
      *(double *)(inited + 96)  = v16;
      *(void *)(inited + 128)  = 0xD00000000000001ELL;
      uint64_t v18 = inited + 128;
      *(void *)(inited + 136)  = 0x80000001003DE0F0;
      if (v10 <= -0.1) {
        double v19 = v10;
      }
      else {
        double v19 = -0.1;
      }
      if (v10 > 0.1) {
        double v20 = v10;
      }
      else {
        double v20 = 0.1;
      }
      if (v10 >= 0.0) {
        double v19 = v20;
      }
      *(void *)(inited + 168)  = &type metadata for Double;
      *(double *)(inited + 144)  = v19;
      uint64_t v21 = (void *)static _DictionaryStorage.allocate(capacity:)();
      swift_retain();
      sub_10018CF7C(v12, (uint64_t)&v44);
      uint64_t v22 = v44;
      uint64_t v23 = v45;
      unint64_t result = sub_10000DDE0(v44, v45);
      if (v24) {
        break;
      }
      uint64_t v25 = v21 + 8;
      *(void *)((char *)v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v26 = (uint64_t *)(v21[6] + 16 * result);
      *char v26 = v22;
      v26[1]  = v23;
      unint64_t result = (unint64_t)sub_10003803C(v46, (_OWORD *)(v21[7] + 32 * result));
      uint64_t v27 = v21[2];
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_44;
      }
      v21[2]  = v29;
      sub_10018CF7C(v15, (uint64_t)&v44);
      uint64_t v30 = v44;
      uint64_t v31 = v45;
      unint64_t result = sub_10000DDE0(v44, v45);
      if (v32) {
        break;
      }
      *(void *)((char *)v25 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v33 = (uint64_t *)(v21[6] + 16 * result);
      *uint64_t v33 = v30;
      v33[1]  = v31;
      unint64_t result = (unint64_t)sub_10003803C(v46, (_OWORD *)(v21[7] + 32 * result));
      uint64_t v34 = v21[2];
      BOOL v28 = __OFADD__(v34, 1);
      uint64_t v35 = v34 + 1;
      if (v28) {
        goto LABEL_44;
      }
      v21[2]  = v35;
      sub_10018CF7C(v18, (uint64_t)&v44);
      uint64_t v36 = v44;
      uint64_t v37 = v45;
      unint64_t result = sub_10000DDE0(v44, v45);
      if (v38) {
        break;
      }
      *(void *)((char *)v25 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v39 = (uint64_t *)(v21[6] + 16 * result);
      *uint64_t v39 = v36;
      v39[1]  = v37;
      unint64_t result = (unint64_t)sub_10003803C(v46, (_OWORD *)(v21[7] + 32 * result));
      uint64_t v40 = v21[2];
      BOOL v28 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v28) {
        goto LABEL_44;
      }
      v21[2]  = v41;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v4 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10008377C(0, v4[2] + 1, 1);
        uint64_t v4 = v47;
      }
      unint64_t v43 = v4[2];
      unint64_t v42 = v4[3];
      if (v43 >= v42 >> 1)
      {
        sub_10008377C(v42 > 1, v43 + 1, 1);
        uint64_t v4 = v47;
      }
      v4[2]  = v43 + 1;
      v4[v43 + 4]  = v21;
      if (!--v5) {
        return (unint64_t)v4;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018CF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047CF60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10018CFE4(char *a1, uint64_t a2)
{
  if (!a1) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  Swift::String v2 = a1;
  uint64_t v3 = a2 - (void)a1;
  if (a2 - (uint64_t)a1 >= 0) {
    uint64_t v4 = a2 - (void)a1;
  }
  else {
    uint64_t v4 = a2 - (void)a1 + 7;
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if ((unint64_t)(a2 - (void)a1 + 7) < 0xF) {
    return (unint64_t)v5;
  }
  uint64_t v6 = v4 >> 3;
  uint64_t v44 = _swiftEmptyArrayStorage;
  unint64_t result = sub_10008377C(0, (v4 >> 3) & ~(v4 >> 63), 0);
  if (v3 >= -7)
  {
    sub_100010BCC((uint64_t *)&unk_1004883F0);
    double v8 = &v43;
    while (1)
    {
      uint64_t v40 = v6;
      double v9 = v8;
      char v10 = *v2;
      char v11 = v2[1];
      int v12 = *((_DWORD *)v2 + 1);
      sub_100010BCC(qword_10047DD00);
      inited  = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_1003B2760;
      *(void *)(inited + 32)  = 0xD00000000000001ELL;
      uint64_t v14 = inited + 32;
      *(void *)(inited + 40)  = 0x80000001003DE0B0;
      *(void *)(inited + 72)  = &type metadata for Int8;
      *(unsigned char *)(inited + 48)  = v10;
      *(void *)(inited + 80)  = 0xD00000000000001CLL;
      uint64_t v15 = inited + 80;
      *(void *)(inited + 88)  = 0x80000001003DE0D0;
      *(void *)(inited + 120)  = &type metadata for Int8;
      *(unsigned char *)(inited + 96)  = v11;
      *(void *)(inited + 128)  = 0xD00000000000001ELL;
      uint64_t v16 = inited + 128;
      *(void *)(inited + 136)  = 0x80000001003DE0F0;
      *(void *)(inited + 168)  = &type metadata for UInt32;
      *(_DWORD *)(inited + 144)  = v12;
      double v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
      sub_10018CF7C(v14, (uint64_t)&v41);
      uint64_t v19 = v41;
      uint64_t v18 = v42;
      swift_retain();
      unint64_t result = sub_10000DDE0(v19, v18);
      if (v20) {
        break;
      }
      uint64_t v21 = v17 + 8;
      *(void *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v22 = (uint64_t *)(v17[6] + 16 * result);
      *uint64_t v22 = v19;
      v22[1]  = v18;
      double v8 = v9;
      unint64_t result = (unint64_t)sub_10003803C(v9, (_OWORD *)(v17[7] + 32 * result));
      uint64_t v23 = v17[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_23;
      }
      v17[2]  = v25;
      sub_10018CF7C(v15, (uint64_t)&v41);
      uint64_t v26 = v41;
      uint64_t v27 = v42;
      unint64_t result = sub_10000DDE0(v41, v42);
      if (v28) {
        goto LABEL_24;
      }
      *(void *)((char *)v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v29 = (uint64_t *)(v17[6] + 16 * result);
      *uint64_t v29 = v26;
      v29[1]  = v27;
      unint64_t result = (unint64_t)sub_10003803C(v9, (_OWORD *)(v17[7] + 32 * result));
      uint64_t v30 = v17[2];
      BOOL v24 = __OFADD__(v30, 1);
      uint64_t v31 = v30 + 1;
      if (v24) {
        goto LABEL_25;
      }
      v17[2]  = v31;
      sub_10018CF7C(v16, (uint64_t)&v41);
      uint64_t v32 = v41;
      uint64_t v33 = v42;
      unint64_t result = sub_10000DDE0(v41, v42);
      if (v34) {
        goto LABEL_26;
      }
      *(void *)((char *)v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v35 = (uint64_t *)(v17[6] + 16 * result);
      *uint64_t v35 = v32;
      v35[1]  = v33;
      unint64_t result = (unint64_t)sub_10003803C(v9, (_OWORD *)(v17[7] + 32 * result));
      uint64_t v36 = v17[2];
      BOOL v24 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v24) {
        goto LABEL_27;
      }
      v17[2]  = v37;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v5 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10008377C(0, v5[2] + 1, 1);
        uint64_t v5 = v44;
      }
      unint64_t v39 = v5[2];
      unint64_t v38 = v5[3];
      if (v39 >= v38 >> 1)
      {
        sub_10008377C(v38 > 1, v39 + 1, 1);
        uint64_t v5 = v44;
      }
      v2 += 8;
      _OWORD v5[2] = v39 + 1;
      v5[v39 + 4]  = v17;
      uint64_t v6 = v40 - 1;
      if (v40 == 1) {
        return (unint64_t)v5;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10018D38C()
{
  unint64_t result = qword_100481128;
  if (!qword_100481128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481128);
  }
  return result;
}

unint64_t sub_10018D3E4()
{
  unint64_t result = qword_100481130;
  if (!qword_100481130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481130);
  }
  return result;
}

uint64_t sub_10018D438()
{
  return sub_10018D5D0(&qword_100481138, (void (*)(uint64_t))type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration);
}

unint64_t sub_10018D484()
{
  unint64_t result = qword_100481140;
  if (!qword_100481140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481140);
  }
  return result;
}

unint64_t sub_10018D4DC()
{
  unint64_t result = qword_100481148;
  if (!qword_100481148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481148);
  }
  return result;
}

unint64_t sub_10018D534()
{
  unint64_t result = qword_100481150;
  if (!qword_100481150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481150);
  }
  return result;
}

uint64_t sub_10018D588()
{
  return sub_10018D5D0(&qword_100481158, (void (*)(uint64_t))type metadata accessor for AWDLStatistics.LowLatencyStatistics);
}

uint64_t sub_10018D5D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10018D61C()
{
  unint64_t result = qword_100481160;
  if (!qword_100481160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481160);
  }
  return result;
}

unint64_t sub_10018D674()
{
  unint64_t result = qword_100481168;
  if (!qword_100481168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481168);
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics()
{
  return &type metadata for AWDLStatistics;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.ServiceRejection(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1  = *(void *)a2;
  a1[1]  = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for AWDLStatistics.ServiceRejection(uint64_t a1)
{
  Swift::String v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for AWDLStatistics.ServiceRejection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  int v7 = *(void **)(a2 + 8);
  double v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for AWDLStatistics.ServiceRejection(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection()
{
  return &type metadata for AWDLStatistics.ServiceRejection;
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 22)  = *(_DWORD *)(a2 + 22);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v6 = v4;

  int v7 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8)  = v7;
  int v8 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16)  = v8;
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23)  = *(unsigned char *)(a2 + 23);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10)  = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1  = *(void *)a2;

  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23)  = *(unsigned char *)(a2 + 23);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_WORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart;
}

char *initializeBufferWithCopyOfBuffer for AWDLStatistics.TrafficRegistrationStop(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  id v4 = *a2;
  *(void *)a1  = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    id v5 = a1;
    a1[8]  = *((unsigned char *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 24);
    int v7 = &a1[v6];
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for DispatchTimeInterval();
    char v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    char v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AWDLStatistics.TrafficRegistrationStop(id *a1, uint64_t a2)
{
  id v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)a2;
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1  = *(void *)a2;
  id v8 = v6;

  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1  = *(void *)a2;

  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018DDAC);
}

uint64_t sub_10018DDAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018DE70);
}

void *sub_10018DE70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    char *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10018DF18()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure()
{
  return &type metadata for AWDLStatistics.Failure;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Reason()
{
  return &type metadata for AWDLStatistics.Failure.Reason;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1  = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    *(_DWORD *)(a1 + 32)  = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36)  = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40)  = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44)  = *((_WORD *)a2 + 22);
    int v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52)  = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48)  = v7;
    *(_DWORD *)(a1 + 56)  = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60)  = *((_WORD *)a2 + 30);
    long long v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64)  = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80)  = v8;
    *(_OWORD *)(a1 + 96)  = *((_OWORD *)a2 + 6);
    *(unsigned char *)(a1 + 112)  = *((unsigned char *)a2 + 112);
    uint64_t v9 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
    uint64_t v10 = v9[20];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    *(void *)((char *)v4 + v9[21])  = *(uint64_t *)((char *)a2 + v9[21]);
    *(void *)((char *)v4 + v9[22])  = *(uint64_t *)((char *)a2 + v9[22]);
    *(void *)((char *)v4 + v9[23])  = *(uint64_t *)((char *)a2 + v9[23]);
    *(void *)((char *)v4 + v9[24])  = *(uint64_t *)((char *)a2 + v9[24]);
    *(void *)((char *)v4 + v9[25])  = *(uint64_t *)((char *)a2 + v9[25]);
    *(void *)((char *)v4 + v9[26])  = *(uint64_t *)((char *)a2 + v9[26]);
    *(void *)((char *)v4 + v9[27])  = *(uint64_t *)((char *)a2 + v9[27]);
    *(void *)((char *)v4 + v9[28])  = *(uint64_t *)((char *)a2 + v9[28]);
    *(_WORD *)((char *)v4 + v9[29])  = *(_WORD *)((char *)a2 + v9[29]);
    *((unsigned char *)v4 + v9[30])  = *((unsigned char *)a2 + v9[30]);
    *((unsigned char *)v4 + v9[31])  = *((unsigned char *)a2 + v9[31]);
    *((unsigned char *)v4 + v9[32])  = *((unsigned char *)a2 + v9[32]);
    *((unsigned char *)v4 + v9[33])  = *((unsigned char *)a2 + v9[33]);
    *((unsigned char *)v4 + v9[34])  = *((unsigned char *)a2 + v9[34]);
    *((unsigned char *)v4 + v9[35])  = *((unsigned char *)a2 + v9[35]);
    uint64_t v14 = v9[36];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1]  = v17;
    *((unsigned char *)v4 + v9[37])  = *((unsigned char *)a2 + v9[37]);
    *(void *)((char *)v4 + v9[38])  = *(uint64_t *)((char *)a2 + v9[38]);
    *(void *)((char *)v4 + v9[39])  = *(uint64_t *)((char *)a2 + v9[39]);
    *(void *)((char *)v4 + v9[40])  = *(uint64_t *)((char *)a2 + v9[40]);
    *(void *)((char *)v4 + v9[41])  = *(uint64_t *)((char *)a2 + v9[41]);
    *(void *)((char *)v4 + v9[42])  = *(uint64_t *)((char *)a2 + v9[42]);
    *(void *)((char *)v4 + v9[43])  = *(uint64_t *)((char *)a2 + v9[43]);
    uint64_t v18 = *(int *)(a3 + 20);
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    long long v21 = *(_OWORD *)(v20 + 176);
    *((_OWORD *)v19 + 10)  = *(_OWORD *)(v20 + 160);
    *((_OWORD *)v19 + 11)  = v21;
    *((_OWORD *)v19 + 12)  = *(_OWORD *)(v20 + 192);
    long long v22 = *(_OWORD *)(v20 + 112);
    *((_OWORD *)v19 + 6)  = *(_OWORD *)(v20 + 96);
    *((_OWORD *)v19 + 7)  = v22;
    long long v23 = *(_OWORD *)(v20 + 144);
    *((_OWORD *)v19 + 8)  = *(_OWORD *)(v20 + 128);
    *((_OWORD *)v19 + 9)  = v23;
    long long v24 = *(_OWORD *)(v20 + 48);
    *((_OWORD *)v19 + 2)  = *(_OWORD *)(v20 + 32);
    *((_OWORD *)v19 + 3)  = v24;
    long long v25 = *(_OWORD *)(v20 + 80);
    *((_OWORD *)v19 + 4)  = *(_OWORD *)(v20 + 64);
    *((_OWORD *)v19 + 5)  = v25;
    long long v26 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1)  = v26;
    uint64_t v27 = *(void *)(v20 + 216);
    *((void *)v19 + 26)  = *(void *)(v20 + 208);
    *((void *)v19 + 27)  = v27;
    uint64_t v28 = *(void *)(v20 + 232);
    *((void *)v19 + 28)  = *(void *)(v20 + 224);
    *((void *)v19 + 29)  = v28;
    uint64_t v29 = *(void *)(v20 + 248);
    *((void *)v19 + 30)  = *(void *)(v20 + 240);
    *((void *)v19 + 31)  = v29;
    uint64_t v30 = *(void *)(v20 + 264);
    *((void *)v19 + 32)  = *(void *)(v20 + 256);
    *((void *)v19 + 33)  = v30;
    uint64_t v31 = *(void *)(v20 + 280);
    *((void *)v19 + 34)  = *(void *)(v20 + 272);
    *((void *)v19 + 35)  = v31;
    uint64_t v34 = *(void *)(v20 + 296);
    *((void *)v19 + 36)  = *(void *)(v20 + 288);
    *((void *)v19 + 37)  = v34;
    uint64_t v35 = *(void *)(v20 + 312);
    *((void *)v19 + 38)  = *(void *)(v20 + 304);
    *((void *)v19 + 39)  = v35;
    uint64_t v36 = *(void *)(v20 + 328);
    *((void *)v19 + 40)  = *(void *)(v20 + 320);
    *((void *)v19 + 41)  = v36;
    uint64_t v37 = *(void *)(v20 + 344);
    *((void *)v19 + 42)  = *(void *)(v20 + 336);
    *((void *)v19 + 43)  = v37;
    *((void *)v19 + 44)  = *(void *)(v20 + 352);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  long long v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(unsigned char *)(a1 + v8[30])  = *(unsigned char *)(a2 + v8[30]);
  *(unsigned char *)(a1 + v8[31])  = *(unsigned char *)(a2 + v8[31]);
  *(unsigned char *)(a1 + v8[32])  = *(unsigned char *)(a2 + v8[32]);
  *(unsigned char *)(a1 + v8[33])  = *(unsigned char *)(a2 + v8[33]);
  *(unsigned char *)(a1 + v8[34])  = *(unsigned char *)(a2 + v8[34]);
  *(unsigned char *)(a1 + v8[35])  = *(unsigned char *)(a2 + v8[35]);
  uint64_t v13 = v8[36];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1]  = v16;
  *(unsigned char *)(a1 + v8[37])  = *(unsigned char *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 176);
  *(_OWORD *)(v18 + 160)  = *(_OWORD *)(v19 + 160);
  *(_OWORD *)(v18 + 176)  = v20;
  *(_OWORD *)(v18 + 192)  = *(_OWORD *)(v19 + 192);
  long long v21 = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 96)  = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 112)  = v21;
  long long v22 = *(_OWORD *)(v19 + 144);
  *(_OWORD *)(v18 + 128)  = *(_OWORD *)(v19 + 128);
  *(_OWORD *)(v18 + 144)  = v22;
  long long v23 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32)  = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48)  = v23;
  long long v24 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64)  = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80)  = v24;
  long long v25 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16)  = v25;
  uint64_t v26 = *(void *)(v19 + 216);
  *(void *)(v18 + 208)  = *(void *)(v19 + 208);
  *(void *)(v18 + 216)  = v26;
  uint64_t v27 = *(void *)(v19 + 232);
  *(void *)(v18 + 224)  = *(void *)(v19 + 224);
  *(void *)(v18 + 232)  = v27;
  uint64_t v28 = *(void *)(v19 + 248);
  *(void *)(v18 + 240)  = *(void *)(v19 + 240);
  *(void *)(v18 + 248)  = v28;
  uint64_t v29 = *(void *)(v19 + 264);
  *(void *)(v18 + 256)  = *(void *)(v19 + 256);
  *(void *)(v18 + 264)  = v29;
  uint64_t v30 = *(void *)(v19 + 280);
  *(void *)(v18 + 272)  = *(void *)(v19 + 272);
  *(void *)(v18 + 280)  = v30;
  uint64_t v32 = *(void *)(v19 + 296);
  *(void *)(v18 + 288)  = *(void *)(v19 + 288);
  *(void *)(v18 + 296)  = v32;
  uint64_t v33 = *(void *)(v19 + 312);
  *(void *)(v18 + 304)  = *(void *)(v19 + 304);
  *(void *)(v18 + 312)  = v33;
  uint64_t v34 = *(void *)(v19 + 328);
  *(void *)(v18 + 320)  = *(void *)(v19 + 320);
  *(void *)(v18 + 328)  = v34;
  uint64_t v35 = *(void *)(v19 + 344);
  *(void *)(v18 + 336)  = *(void *)(v19 + 336);
  *(void *)(v18 + 344)  = v35;
  *(void *)(v18 + 352)  = *(void *)(v19 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32)  = v6;
  int v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40)  = v7;
  int v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v8;
  int v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  uint64_t v10 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v11 = v10[20];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + v10[21])  = *(void *)(a2 + v10[21]);
  *(void *)(a1 + v10[22])  = *(void *)(a2 + v10[22]);
  *(void *)(a1 + v10[23])  = *(void *)(a2 + v10[23]);
  *(void *)(a1 + v10[24])  = *(void *)(a2 + v10[24]);
  *(void *)(a1 + v10[25])  = *(void *)(a2 + v10[25]);
  *(void *)(a1 + v10[26])  = *(void *)(a2 + v10[26]);
  *(void *)(a1 + v10[27])  = *(void *)(a2 + v10[27]);
  *(void *)(a1 + v10[28])  = *(void *)(a2 + v10[28]);
  *(_WORD *)(a1 + v10[29])  = *(_WORD *)(a2 + v10[29]);
  *(unsigned char *)(a1 + v10[30])  = *(unsigned char *)(a2 + v10[30]);
  *(unsigned char *)(a1 + v10[31])  = *(unsigned char *)(a2 + v10[31]);
  *(unsigned char *)(a1 + v10[32])  = *(unsigned char *)(a2 + v10[32]);
  *(unsigned char *)(a1 + v10[33])  = *(unsigned char *)(a2 + v10[33]);
  *(unsigned char *)(a1 + v10[34])  = *(unsigned char *)(a2 + v10[34]);
  *(unsigned char *)(a1 + v10[35])  = *(unsigned char *)(a2 + v10[35]);
  uint64_t v15 = v10[36];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1]  = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v10[37])  = *(unsigned char *)(a2 + v10[37]);
  *(void *)(a1 + v10[38])  = *(void *)(a2 + v10[38]);
  *(void *)(a1 + v10[39])  = *(void *)(a2 + v10[39]);
  *(void *)(a1 + v10[40])  = *(void *)(a2 + v10[40]);
  *(void *)(a1 + v10[41])  = *(void *)(a2 + v10[41]);
  *(void *)(a1 + v10[42])  = *(void *)(a2 + v10[42]);
  *(void *)(a1 + v10[43])  = *(void *)(a2 + v10[43]);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void *)(a1 + v18);
  long long v20 = (void *)(a2 + v18);
  *uint64_t v19 = *(void *)(a2 + v18);
  v19[1]  = *(void *)(a2 + v18 + 8);
  v19[2]  = *(void *)(a2 + v18 + 16);
  v19[3]  = *(void *)(a2 + v18 + 24);
  v19[4]  = *(void *)(a2 + v18 + 32);
  v19[5]  = *(void *)(a2 + v18 + 40);
  v19[6]  = *(void *)(a2 + v18 + 48);
  v19[7]  = *(void *)(a2 + v18 + 56);
  v19[8]  = *(void *)(a2 + v18 + 64);
  v19[9]  = *(void *)(a2 + v18 + 72);
  v19[10]  = *(void *)(a2 + v18 + 80);
  v19[11]  = *(void *)(a2 + v18 + 88);
  v19[12]  = *(void *)(a2 + v18 + 96);
  v19[13]  = *(void *)(a2 + v18 + 104);
  v19[14]  = *(void *)(a2 + v18 + 112);
  v19[15]  = *(void *)(a2 + v18 + 120);
  v19[16]  = *(void *)(a2 + v18 + 128);
  v19[17]  = *(void *)(a2 + v18 + 136);
  v19[18]  = *(void *)(a2 + v18 + 144);
  v19[19]  = *(void *)(a2 + v18 + 152);
  v19[20]  = *(void *)(a2 + v18 + 160);
  v19[21]  = *(void *)(a2 + v18 + 168);
  v19[22]  = *(void *)(a2 + v18 + 176);
  v19[23]  = *(void *)(a2 + v18 + 184);
  v19[24]  = *(void *)(a2 + v18 + 192);
  v19[25]  = *(void *)(a2 + v18 + 200);
  v19[26]  = *(void *)(a2 + v18 + 208);
  v19[27]  = *(void *)(a2 + v18 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[28]  = v20[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[29]  = v20[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[30]  = v20[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[31]  = v20[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[32]  = v20[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[33]  = v20[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[34]  = v20[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[35]  = v20[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[36]  = v20[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[37]  = v20[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[38]  = v20[38];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[39]  = v20[39];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[40]  = v20[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[41]  = v20[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[42]  = v20[42];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[43]  = v20[43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[44]  = v20[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  int v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(unsigned char *)(a1 + v8[30])  = *(unsigned char *)(a2 + v8[30]);
  *(unsigned char *)(a1 + v8[31])  = *(unsigned char *)(a2 + v8[31]);
  *(unsigned char *)(a1 + v8[32])  = *(unsigned char *)(a2 + v8[32]);
  *(unsigned char *)(a1 + v8[33])  = *(unsigned char *)(a2 + v8[33]);
  *(unsigned char *)(a1 + v8[34])  = *(unsigned char *)(a2 + v8[34]);
  *(unsigned char *)(a1 + v8[35])  = *(unsigned char *)(a2 + v8[35]);
  *(_OWORD *)(a1 + v8[36])  = *(_OWORD *)(a2 + v8[36]);
  *(unsigned char *)(a1 + v8[37])  = *(unsigned char *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x168uLL);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  int v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v9 = v8[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(void *)(a1 + v8[21])  = *(void *)(a2 + v8[21]);
  *(void *)(a1 + v8[22])  = *(void *)(a2 + v8[22]);
  *(void *)(a1 + v8[23])  = *(void *)(a2 + v8[23]);
  *(void *)(a1 + v8[24])  = *(void *)(a2 + v8[24]);
  *(void *)(a1 + v8[25])  = *(void *)(a2 + v8[25]);
  *(void *)(a1 + v8[26])  = *(void *)(a2 + v8[26]);
  *(void *)(a1 + v8[27])  = *(void *)(a2 + v8[27]);
  *(void *)(a1 + v8[28])  = *(void *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29])  = *(_WORD *)(a2 + v8[29]);
  *(unsigned char *)(a1 + v8[30])  = *(unsigned char *)(a2 + v8[30]);
  *(unsigned char *)(a1 + v8[31])  = *(unsigned char *)(a2 + v8[31]);
  *(unsigned char *)(a1 + v8[32])  = *(unsigned char *)(a2 + v8[32]);
  *(unsigned char *)(a1 + v8[33])  = *(unsigned char *)(a2 + v8[33]);
  *(unsigned char *)(a1 + v8[34])  = *(unsigned char *)(a2 + v8[34]);
  *(unsigned char *)(a1 + v8[35])  = *(unsigned char *)(a2 + v8[35]);
  uint64_t v13 = v8[36];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1]  = v16;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v8[37])  = *(unsigned char *)(a2 + v8[37]);
  *(void *)(a1 + v8[38])  = *(void *)(a2 + v8[38]);
  *(void *)(a1 + v8[39])  = *(void *)(a2 + v8[39]);
  *(void *)(a1 + v8[40])  = *(void *)(a2 + v8[40]);
  *(void *)(a1 + v8[41])  = *(void *)(a2 + v8[41]);
  *(void *)(a1 + v8[42])  = *(void *)(a2 + v8[42]);
  *(void *)(a1 + v8[43])  = *(void *)(a2 + v8[43]);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16)  = v21;
  long long v22 = *(_OWORD *)(v20 + 48);
  *(_OWORD *)(v19 + 32)  = *(_OWORD *)(v20 + 32);
  *(_OWORD *)(v19 + 48)  = v22;
  long long v23 = *(_OWORD *)(v20 + 80);
  *(_OWORD *)(v19 + 64)  = *(_OWORD *)(v20 + 64);
  *(_OWORD *)(v19 + 80)  = v23;
  long long v24 = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v19 + 96)  = *(_OWORD *)(v20 + 96);
  *(_OWORD *)(v19 + 112)  = v24;
  long long v25 = *(_OWORD *)(v20 + 144);
  *(_OWORD *)(v19 + 128)  = *(_OWORD *)(v20 + 128);
  *(_OWORD *)(v19 + 144)  = v25;
  long long v26 = *(_OWORD *)(v20 + 176);
  *(_OWORD *)(v19 + 160)  = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v19 + 176)  = v26;
  *(_OWORD *)(v19 + 192)  = *(_OWORD *)(v20 + 192);
  uint64_t v27 = *(void *)(v20 + 216);
  *(void *)(v19 + 208)  = *(void *)(v20 + 208);
  *(void *)(v19 + 216)  = v27;
  swift_bridgeObjectRelease();
  *(void *)(v19 + 224)  = *(void *)(v20 + 224);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 232)  = *(void *)(v20 + 232);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 240)  = *(void *)(v20 + 240);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 248)  = *(void *)(v20 + 248);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 256)  = *(void *)(v20 + 256);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 264)  = *(void *)(v20 + 264);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 272)  = *(void *)(v20 + 272);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 280)  = *(void *)(v20 + 280);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 288)  = *(void *)(v20 + 288);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 296)  = *(void *)(v20 + 296);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 304)  = *(void *)(v20 + 304);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 312)  = *(void *)(v20 + 312);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 320)  = *(void *)(v20 + 320);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 328)  = *(void *)(v20 + 328);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 336)  = *(void *)(v20 + 336);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 344)  = *(void *)(v20 + 344);
  swift_bridgeObjectRelease();
  *(void *)(v19 + 352)  = *(void *)(v20 + 352);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018F31C);
}

uint64_t sub_10018F31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 216);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10)  = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018F3F4);
}

uint64_t sub_10018F3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 216)  = (a2 - 1);
  }
  return result;
}

uint64_t sub_10018F4B4()
{
  uint64_t result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1  = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    *(_DWORD *)(a1 + 32)  = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36)  = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40)  = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44)  = *((_WORD *)a2 + 22);
    int v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52)  = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48)  = v7;
    *(_DWORD *)(a1 + 56)  = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60)  = *((_WORD *)a2 + 30);
    long long v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64)  = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80)  = v8;
    long long v9 = *((_OWORD *)a2 + 6);
    *(unsigned char *)(a1 + 112)  = *((unsigned char *)a2 + 112);
    uint64_t v10 = a3[20];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(_OWORD *)(a1 + 96)  = v9;
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = a3[22];
    *(void *)((char *)v4 + a3[21])  = *(uint64_t *)((char *)a2 + a3[21]);
    *(void *)((char *)v4 + v14)  = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[24];
    *(void *)((char *)v4 + a3[23])  = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)((char *)v4 + v15)  = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[26];
    *(void *)((char *)v4 + a3[25])  = *(uint64_t *)((char *)a2 + a3[25]);
    *(void *)((char *)v4 + v16)  = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[28];
    *(void *)((char *)v4 + a3[27])  = *(uint64_t *)((char *)a2 + a3[27]);
    *(void *)((char *)v4 + v17)  = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[30];
    *(_WORD *)((char *)v4 + a3[29])  = *(_WORD *)((char *)a2 + a3[29]);
    *((unsigned char *)v4 + v18)  = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[32];
    *((unsigned char *)v4 + a3[31])  = *((unsigned char *)a2 + a3[31]);
    *((unsigned char *)v4 + v19)  = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[34];
    *((unsigned char *)v4 + a3[33])  = *((unsigned char *)a2 + a3[33]);
    *((unsigned char *)v4 + v20)  = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[36];
    *((unsigned char *)v4 + a3[35])  = *((unsigned char *)a2 + a3[35]);
    long long v22 = (void *)((char *)v4 + v21);
    long long v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *long long v22 = *v23;
    v22[1]  = v24;
    uint64_t v25 = a3[38];
    *((unsigned char *)v4 + a3[37])  = *((unsigned char *)a2 + a3[37]);
    *(void *)((char *)v4 + v25)  = *(uint64_t *)((char *)a2 + v25);
    uint64_t v26 = a3[40];
    *(void *)((char *)v4 + a3[39])  = *(uint64_t *)((char *)a2 + a3[39]);
    *(void *)((char *)v4 + v26)  = *(uint64_t *)((char *)a2 + v26);
    uint64_t v27 = a3[42];
    *(void *)((char *)v4 + a3[41])  = *(uint64_t *)((char *)a2 + a3[41]);
    *(void *)((char *)v4 + v27)  = *(uint64_t *)((char *)a2 + v27);
    *(void *)((char *)v4 + a3[43])  = *(uint64_t *)((char *)a2 + a3[43]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 80);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v17)  = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(unsigned char *)(a1 + a3[31])  = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v18)  = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(unsigned char *)(a1 + a3[33])  = *(unsigned char *)(a2 + a3[33]);
  *(unsigned char *)(a1 + v19)  = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(unsigned char *)(a1 + a3[35])  = *(unsigned char *)(a2 + a3[35]);
  uint64_t v21 = (void *)(a1 + v20);
  long long v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1]  = v23;
  uint64_t v24 = a3[38];
  *(unsigned char *)(a1 + a3[37])  = *(unsigned char *)(a2 + a3[37]);
  *(void *)(a1 + v24)  = *(void *)(a2 + v24);
  uint64_t v25 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v25)  = *(void *)(a2 + v25);
  uint64_t v26 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v26)  = *(void *)(a2 + v26);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32)  = v6;
  int v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40)  = v7;
  int v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v8;
  int v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  uint64_t v10 = a3[20];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + a3[22])  = *(void *)(a2 + a3[22]);
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + a3[24])  = *(void *)(a2 + a3[24]);
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + a3[26])  = *(void *)(a2 + a3[26]);
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + a3[28])  = *(void *)(a2 + a3[28]);
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(unsigned char *)(a1 + a3[30])  = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + a3[31])  = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + a3[32])  = *(unsigned char *)(a2 + a3[32]);
  *(unsigned char *)(a1 + a3[33])  = *(unsigned char *)(a2 + a3[33]);
  *(unsigned char *)(a1 + a3[34])  = *(unsigned char *)(a2 + a3[34]);
  *(unsigned char *)(a1 + a3[35])  = *(unsigned char *)(a2 + a3[35]);
  uint64_t v14 = a3[36];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1]  = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[37])  = *(unsigned char *)(a2 + a3[37]);
  *(void *)(a1 + a3[38])  = *(void *)(a2 + a3[38]);
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + a3[40])  = *(void *)(a2 + a3[40]);
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + a3[42])  = *(void *)(a2 + a3[42]);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v17)  = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(unsigned char *)(a1 + a3[31])  = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v18)  = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(unsigned char *)(a1 + a3[33])  = *(unsigned char *)(a2 + a3[33]);
  *(unsigned char *)(a1 + v19)  = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(unsigned char *)(a1 + a3[35])  = *(unsigned char *)(a2 + a3[35]);
  *(_OWORD *)(a1 + v20)  = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[38];
  *(unsigned char *)(a1 + a3[37])  = *(unsigned char *)(a2 + a3[37]);
  *(void *)(a1 + v21)  = *(void *)(a2 + v21);
  uint64_t v22 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v22)  = *(void *)(a2 + v22);
  uint64_t v23 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v23)  = *(void *)(a2 + v23);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52)  = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48)  = v6;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112)  = *(unsigned char *)(a2 + 112);
  uint64_t v9 = a3[20];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 96)  = v8;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[22];
  *(void *)(a1 + a3[21])  = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v13)  = *(void *)(a2 + v13);
  uint64_t v14 = a3[24];
  *(void *)(a1 + a3[23])  = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v14)  = *(void *)(a2 + v14);
  uint64_t v15 = a3[26];
  *(void *)(a1 + a3[25])  = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v15)  = *(void *)(a2 + v15);
  uint64_t v16 = a3[28];
  *(void *)(a1 + a3[27])  = *(void *)(a2 + a3[27]);
  *(void *)(a1 + v16)  = *(void *)(a2 + v16);
  uint64_t v17 = a3[30];
  *(_WORD *)(a1 + a3[29])  = *(_WORD *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v17)  = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[32];
  *(unsigned char *)(a1 + a3[31])  = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v18)  = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[34];
  *(unsigned char *)(a1 + a3[33])  = *(unsigned char *)(a2 + a3[33]);
  *(unsigned char *)(a1 + v19)  = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[36];
  *(unsigned char *)(a1 + a3[35])  = *(unsigned char *)(a2 + a3[35]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1]  = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[38];
  *(unsigned char *)(a1 + a3[37])  = *(unsigned char *)(a2 + a3[37]);
  *(void *)(a1 + v25)  = *(void *)(a2 + v25);
  uint64_t v26 = a3[40];
  *(void *)(a1 + a3[39])  = *(void *)(a2 + a3[39]);
  *(void *)(a1 + v26)  = *(void *)(a2 + v26);
  uint64_t v27 = a3[42];
  *(void *)(a1 + a3[41])  = *(void *)(a2 + a3[41]);
  *(void *)(a1 + v27)  = *(void *)(a2 + v27);
  *(void *)(a1 + a3[43])  = *(void *)(a2 + a3[43]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019004C);
}

uint64_t sub_10019004C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 80);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 144) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12)  = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100190128);
}

uint64_t sub_100190128(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 80);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 144) + 8)  = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001901EC()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v3;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v4;
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v8;
  uint64_t v9 = *(void *)(a2 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v9;
  uint64_t v10 = *(void *)(a2 + 232);
  *(void *)(a1 + 224)  = *(void *)(a2 + 224);
  *(void *)(a1 + 232)  = v10;
  uint64_t v11 = *(void *)(a2 + 248);
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  *(void *)(a1 + 248)  = v11;
  uint64_t v12 = *(void *)(a2 + 264);
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  *(void *)(a1 + 264)  = v12;
  uint64_t v13 = *(void *)(a2 + 280);
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  *(void *)(a1 + 280)  = v13;
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  *(void *)(a1 + 296)  = v14;
  uint64_t v15 = *(void *)(a2 + 312);
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  *(void *)(a1 + 312)  = v15;
  uint64_t v16 = *(void *)(a2 + 328);
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  *(void *)(a1 + 328)  = v16;
  uint64_t v17 = *(void *)(a2 + 344);
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  *(void *)(a1 + 344)  = v17;
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  a1[4]  = a2[4];
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  a1[7]  = a2[7];
  a1[8]  = a2[8];
  a1[9]  = a2[9];
  a1[10]  = a2[10];
  a1[11]  = a2[11];
  a1[12]  = a2[12];
  a1[13]  = a2[13];
  a1[14]  = a2[14];
  a1[15]  = a2[15];
  a1[16]  = a2[16];
  a1[17]  = a2[17];
  a1[18]  = a2[18];
  a1[19]  = a2[19];
  a1[20]  = a2[20];
  a1[21]  = a2[21];
  a1[22]  = a2[22];
  a1[23]  = a2[23];
  a1[24]  = a2[24];
  a1[25]  = a2[25];
  a1[26]  = a2[26];
  a1[27]  = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[28]  = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[29]  = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[30]  = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[31]  = a2[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[32]  = a2[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[33]  = a2[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[34]  = a2[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[35]  = a2[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[36]  = a2[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[37]  = a2[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[38]  = a2[38];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[39]  = a2[39];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[40]  = a2[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[41]  = a2[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[42]  = a2[42];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[43]  = a2[43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[44]  = a2[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112)  = v7;
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128)  = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144)  = v8;
  long long v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160)  = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176)  = v9;
  *(_OWORD *)(a1 + 192)  = *(_OWORD *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 216);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224)  = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 344)  = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 360)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 216);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 360)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 216)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 360)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Counts()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Counts;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  uint64_t v4 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v4;
  uint64_t v5 = a2[5];
  a1[4]  = a2[4];
  a1[5]  = v5;
  uint64_t v6 = a2[7];
  a1[6]  = a2[6];
  a1[7]  = v6;
  uint64_t v7 = a2[9];
  a1[8]  = a2[8];
  a1[9]  = v7;
  uint64_t v9 = a2[11];
  a1[10]  = a2[10];
  a1[11]  = v9;
  uint64_t v10 = a2[13];
  a1[12]  = a2[12];
  a1[13]  = v10;
  uint64_t v11 = a2[15];
  a1[14]  = a2[14];
  a1[15]  = v11;
  uint64_t v12 = a2[17];
  a1[16]  = a2[16];
  a1[17]  = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(void *a1, void *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5]  = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6]  = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7]  = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8]  = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9]  = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10]  = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11]  = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12]  = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13]  = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14]  = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15]  = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16]  = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17]  = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 16)  = v2;
  *(_OWORD *)(a1 + 32)  = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128)  = v7;
  *(__n128 *)(a1 + 80)  = result;
  *(_OWORD *)(a1 + 96)  = v6;
  return result;
}

_OWORD *assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[3]  = a2[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[5]  = a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[6]  = a2[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[7]  = a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[8]  = a2[8];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136)  = 0;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms;
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v3;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
  *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52)  = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 60)  = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = v4;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  *(_WORD *)(a1 + 34)  = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 36)  = *(_WORD *)(a2 + 36);
  *(_WORD *)(a1 + 38)  = *(_WORD *)(a2 + 38);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43)  = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44)  = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52)  = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60)  = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 61)  = *(unsigned char *)(a2 + 61);
  *(unsigned char *)(a1 + 62)  = *(unsigned char *)(a2 + 62);
  *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
  *(unsigned char *)(a1 + 64)  = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65)  = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66)  = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67)  = *(unsigned char *)(a2 + 67);
  *(unsigned char *)(a1 + 68)  = *(unsigned char *)(a2 + 68);
  *(unsigned char *)(a1 + 69)  = *(unsigned char *)(a2 + 69);
  *(unsigned char *)(a1 + 70)  = *(unsigned char *)(a2 + 70);
  *(unsigned char *)(a1 + 71)  = *(unsigned char *)(a2 + 71);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)a1  = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80)  = a2[5];
  *(_OWORD *)(a1 + 96)  = v6;
  *(__n128 *)(a1 + 48)  = result;
  *(_OWORD *)(a1 + 64)  = v5;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
  *(_WORD *)(a1 + 43)  = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52)  = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60)  = *(_WORD *)(a2 + 60);
  *(unsigned char *)(a1 + 62)  = *(unsigned char *)(a2 + 62);
  *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
  *(unsigned char *)(a1 + 64)  = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65)  = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66)  = *(unsigned char *)(a2 + 66);
  *(unsigned char *)(a1 + 67)  = *(unsigned char *)(a2 + 67);
  *(_DWORD *)(a1 + 68)  = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104)  = 0;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Histograms()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Histograms;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection.Key()
{
  return &type metadata for AWDLStatistics.ServiceRejection.Key;
}

unsigned char *storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    char *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100191568);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart.Key;
}

unsigned char *_s7CoreP2P14AWDLStatisticsO7FailureV6ReasonOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019166CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStop.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStop.Key;
}

unsigned char *_s7CoreP2P14AWDLStatisticsO16ServiceRejectionV3KeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100191770);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Key()
{
  return &type metadata for AWDLStatistics.Failure.Key;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xBE) {
    goto LABEL_17;
  }
  if (a2 + 66 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 66) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 66;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x43;
  int v8 = v6 - 67;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 66 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 66) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xBE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBD)
  {
    unsigned int v6 = ((a2 - 190) >> 8) + 1;
    char *result = a2 + 66;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100191904);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 66;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Key()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Key;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    char *result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100191A98);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Key()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Key;
}

unint64_t sub_100191AD4()
{
  unint64_t result = qword_100481408;
  if (!qword_100481408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481408);
  }
  return result;
}

unint64_t sub_100191B2C()
{
  unint64_t result = qword_100481410;
  if (!qword_100481410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481410);
  }
  return result;
}

unint64_t sub_100191B84()
{
  unint64_t result = qword_100481418;
  if (!qword_100481418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481418);
  }
  return result;
}

unint64_t sub_100191BDC()
{
  unint64_t result = qword_100481420;
  if (!qword_100481420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481420);
  }
  return result;
}

unint64_t sub_100191C34()
{
  unint64_t result = qword_100481428;
  if (!qword_100481428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481428);
  }
  return result;
}

unint64_t sub_100191C8C()
{
  unint64_t result = qword_100481430;
  if (!qword_100481430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481430);
  }
  return result;
}

uint64_t NANTimeUnit.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *(void *)(*(void *)(a3 + 24) + 16);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v29 = (char *)&v26 - v5;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin();
  int v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v26 - v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v26 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(char **)(v6 + 16);
  ((void (*)(char *, char *, uint64_t))v14)((char *)&v26 - v12, a1, a2);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v27 = v14;
    uint64_t v28 = v13;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v14 = v27;
    uint64_t v13 = v28;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v15 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a2);
    if ((v15 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
LABEL_14:
    uint64_t v23 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24(v13, a2);
    v24(a1, a2);
    return v23;
  }
  uint64_t v26 = v8;
  uint64_t v27 = a1;
  ((void (*)(char *, char *, uint64_t))v14)(v32, v13, a2);
  uint64_t v33 = -1;
  char v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v17 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v16 & 1) == 0)
  {
    if (v17 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
      goto LABEL_13;
    }
LABEL_10:
    sub_100192254();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v22 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v11, a2);
    if (v22) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (v17 > 64) {
    goto LABEL_10;
  }
  uint64_t v28 = v13;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LODWORD(v31)  = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v11, a2);
  unint64_t v19 = v33;
  uint64_t v20 = v26;
  ((void (*)(char *, char *, uint64_t))v14)(v26, v32, a2);
  if ((v31 & 1) == 0)
  {
    v18(v20, a2);
    uint64_t v13 = v28;
    goto LABEL_13;
  }
  unint64_t v21 = dispatch thunk of BinaryInteger._lowWord.getter();
  v18(v20, a2);
  uint64_t v13 = v28;
  if (v19 >= v21)
  {
LABEL_13:
    v18(v32, a2);
    a1  = v27;
    goto LABEL_14;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100192254()
{
  unint64_t result = qword_100481438;
  if (!qword_100481438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481438);
  }
  return result;
}

unint64_t static NANTimeUnit.* infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (is_mul_ok(result, a2)) {
    result *= a2;
  }
  else {
    __break(1u);
  }
  return result;
}

unint64_t static NANTimeUnit./ infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2) {
    result /= a2;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static NANTimeUnit.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __CFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

void *NANTimeUnit.zero.unsafeMutableAddressor()
{
  return &static NANTimeUnit.zero;
}

unint64_t static NANTimeUnit.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 >= a2;
  unint64_t result = a1 - a2;
  if (!v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001922FC(unsigned __int8 a1)
{
  if (!a1) {
    return 0;
  }
  if (((a1 + 6) >> 8))
  {
    __break(1u);
  }
  else
  {
    if ((a1 + 6) >= 0x40u) {
      return 0;
    }
    if ((a1 + 6) != 63) {
      return 1 << (a1 + 6);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL static NANTimeUnit.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

CoreP2P::NANTimeSynchronizationFunction __swiftcall NANTimeSynchronizationFunction.init(lowTSF:highTSF:)(Swift::UInt32 lowTSF, Swift::UInt32 highTSF)
{
  return (CoreP2P::NANTimeSynchronizationFunction)(lowTSF | (*(void *)&highTSF << 32));
}

BOOL static RSSI.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t NANTimeUnit.microseconds.getter(unint64_t result)
{
  if (result >> 54) {
    __break(1u);
  }
  else {
    result <<= 10;
  }
  return result;
}

unint64_t NANTimeUnit.duration.getter@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if (result >> 54)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((result << 10) & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  *a2  = result << 10;
  uint64_t v3 = enum case for DispatchTimeInterval.microseconds(_:);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104);

  return v5(a2, v3, v4);
}

void NANTimeUnit.description.getter(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (void *)((char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10[1]  = a1;
  _OWORD v10[2] = dispatch thunk of CustomStringConvertible.description.getter();
  v10[3]  = v6;
  v7._uint64_t countAndFlagsBits = 0x282073555420;
  v7._object  = (void *)0xE600000000000000;
  String.append(_:)(v7);
  if (a1 >> 54)
  {
    __break(1u);
  }
  else if (((a1 << 10) & 0x8000000000000000) == 0)
  {
    *uint64_t v5 = a1 << 10;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchTimeInterval.microseconds(_:), v2);
    v8._uint64_t countAndFlagsBits = DispatchTimeInterval.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    v9._uint64_t countAndFlagsBits = 41;
    v9._object  = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return;
  }
  __break(1u);
}

uint64_t NANTimeUnit.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  Swift::String v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1]  = a1;
  v10[0]  = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void *NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor()
{
  return &static NANTimeUnit.discoveryWindowInterval;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.getter()
{
  return 512;
}

void *NANTimeUnit.defaultDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.defaultDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.defaultDiscoveryBeaconPeriod.getter()
{
  return 100;
}

void *NANTimeUnit.initialDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.initialDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.initialDiscoveryBeaconPeriod.getter()
{
  return 60;
}

void NANTimeUnit.hash(into:)(int a1, Swift::UInt64 a2)
{
}

void sub_1001927EC()
{
  Hasher._combine(_:)(*v0);
}

void sub_10019281C()
{
  NANTimeUnit.description.getter(*v0);
}

uint64_t sub_100192824()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1]  = *v0;
  v9[0]  = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL sub_1001929D8(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1001929EC(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100192A00(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100192A14(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod;
}

uint64_t static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.getter()
{
  return 7;
}

CoreP2P::NANTimeUnit::SchedulePeriod_optional __swiftcall NANTimeUnit.SchedulePeriod.init(duration:)(CoreP2P::NANTimeUnit duration)
{
  if ((uint64_t)duration.rawValue > 1023)
  {
    if ((uint64_t)duration.rawValue > 4095)
    {
      if (duration.rawValue == 4096) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)6;
      }
      if (duration.rawValue == 0x2000) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)7;
      }
    }
    else
    {
      if (duration.rawValue == 1024) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)4;
      }
      if (duration.rawValue == 2048) {
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)5;
      }
    }
    return 0;
  }
  if (duration.rawValue == 128) {
    return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)1;
  }
  if (duration.rawValue != 256)
  {
    if (duration.rawValue == 512) {
      return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)3;
    }
    return 0;
  }
  return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)2;
}

uint64_t sub_100192AC8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow.getter(unint64_t a1)
{
  BOOL v1 = a1 >= (a1 & 0x7FFFF);
  unint64_t result = a1 - (a1 & 0x7FFFF);
  if (!v1) {
    __break(1u);
  }
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow0.getter(unint64_t a1)
{
  BOOL v1 = a1 >= (a1 & 0x7FFFFF);
  unint64_t result = a1 - (a1 & 0x7FFFFF);
  if (!v1) {
    __break(1u);
  }
  return result;
}

uint64_t NANTimeSynchronizationFunction.discoveryWindowCount.getter(unint64_t a1)
{
  return (a1 >> 19) & 0xF;
}

uint64_t NANTimeSynchronizationFunction.description.getter(uint64_t a1)
{
  sub_100010BCC((uint64_t *)&unk_10047CF90);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16)  = xmmword_1003B2450;
  *(void *)(v2 + 56)  = &type metadata for UInt64;
  *(void *)(v2 + 64)  = &protocol witness table for UInt64;
  *(void *)(v2 + 32)  = a1;

  return String.init(format:_:)();
}

uint64_t sub_100192BA0()
{
  return 0x65756C6176;
}

uint64_t sub_100192BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_100192C44(uint64_t a1)
{
  unint64_t v2 = sub_10019332C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192C80(uint64_t a1)
{
  unint64_t v2 = sub_10019332C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANTimeSynchronizationFunction.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100481440);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019332C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int _s7CoreP2P30NANTimeSynchronizationFunctionV9hashValueSivg_0(Swift::UInt64 a1)
{
  return Hasher._finalize()();
}

uint64_t NANTimeSynchronizationFunction.init(from:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100481450);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000369C4(a1, a1[3]);
  sub_10019332C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

Swift::Int sub_100192F80()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100192FC8()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10019300C()
{
  uint64_t v1 = *v0;
  sub_100010BCC((uint64_t *)&unk_10047CF90);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16)  = xmmword_1003B2450;
  *(void *)(v2 + 56)  = &type metadata for UInt64;
  *(void *)(v2 + 64)  = &protocol witness table for UInt64;
  *(void *)(v2 + 32)  = v1;

  return String.init(format:_:)();
}

uint64_t sub_100193088@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_100481450);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019332C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v9;
  return result;
}

uint64_t sub_1001931E4(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100481440);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019332C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8;
  }
  else {
    return result;
  }
}

unint64_t sub_10019332C()
{
  unint64_t result = qword_100481448;
  if (!qword_100481448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481448);
  }
  return result;
}

unint64_t sub_100193384()
{
  unint64_t result = qword_100481458;
  if (!qword_100481458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481458);
  }
  return result;
}

void *sub_1001933D8()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_1001933E8()
{
  unint64_t result = qword_100481460;
  if (!qword_100481460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481460);
  }
  return result;
}

unint64_t sub_100193440()
{
  unint64_t result = qword_100481468;
  if (!qword_100481468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481468);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit()
{
  return &type metadata for NANTimeUnit;
}

unsigned char *storeEnumTagSinglePayload for NANTimeUnit.SchedulePeriod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    char *result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100193570);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit.SchedulePeriod()
{
  return &type metadata for NANTimeUnit.SchedulePeriod;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction()
{
  return &type metadata for NANTimeSynchronizationFunction;
}

unsigned char *storeEnumTagSinglePayload for NANTimeSynchronizationFunction.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100193654);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction.CodingKeys()
{
  return &type metadata for NANTimeSynchronizationFunction.CodingKeys;
}

unint64_t sub_100193690()
{
  unint64_t result = qword_100481470;
  if (!qword_100481470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481470);
  }
  return result;
}

unint64_t sub_1001936E8()
{
  unint64_t result = qword_100481478;
  if (!qword_100481478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481478);
  }
  return result;
}

unint64_t sub_100193740()
{
  unint64_t result = qword_100481480;
  if (!qword_100481480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481480);
  }
  return result;
}

uint64_t static IEEE80211Frame.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16)))return 0; {
  sub_10019E7C0((long long *)(a1 + 24), (uint64_t)v7);
  }
  sub_10019E7C0((long long *)(a2 + 24), (uint64_t)v6);
  sub_10019E7C0(v7, (uint64_t)v10);
  switch(sub_10013BD8C((uint64_t)v10))
  {
    case 1u:
      sub_10019E7C0(v6, (uint64_t)v13);
      uint64_t result = sub_10013BD8C((uint64_t)v13);
      if (result != 1) {
        return 0;
      }
      return result;
    case 2u:
      sub_10019E7C0(v6, (uint64_t)v13);
      if (sub_10013BD8C((uint64_t)v13) != 2) {
        return 0;
      }
      goto LABEL_9;
    case 3u:
      sub_10019E7C0(v6, (uint64_t)v13);
      if (sub_10013BD8C((uint64_t)v13) != 3) {
        return 0;
      }
      goto LABEL_9;
    default:
      sub_10019E7C0(v10, (uint64_t)v11);
      sub_10019E7C0(v11, (uint64_t)v8);
      sub_10019E7C0(v6, (uint64_t)v12);
      if (sub_10013BD8C((uint64_t)v12)) {
        return 0;
      }
      sub_10019E7C0(v12, (uint64_t)v13);
      sub_10019E7C0(v13, (uint64_t)v9);
      sub_10019C990(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      sub_10019C990(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      BOOL v4 = _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(v8, v9);
      sub_10019C990(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      sub_10019C990(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      if (!v4) {
        return 0;
      }
LABEL_9:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t IEEE80211Frame.FrameType.ManagementType.rawValue.getter(char a1)
{
  return byte_1003C460A[a1];
}

BOOL sub_10019398C(char *a1, char *a2)
{
  return byte_1003C460A[*a1] == byte_1003C460A[*a2];
}

uint64_t sub_1001939B0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001939DC(unsigned char *a1@<X8>)
{
  *a1  = byte_1003C460A[*v1];
}

Swift::Int sub_1001939F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C460A[v1]);
  return Hasher._finalize()();
}

void sub_100193A44()
{
  Hasher._combine(_:)(byte_1003C460A[*v0]);
}

Swift::Int sub_100193A7C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C460A[v1]);
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Header.FrameControl.version.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10008CC20(0, 2, a1, a2);
}

unint64_t IEEE80211Frame.Header.FrameControl.frameType.getter(__int16 a1)
{
  unint64_t result = sub_10008CA90(2uLL, 2, a1);
  if (result > 3u)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v2 = xmmword_1003B00B0;
    *(unsigned char *)(v2 + 16)  = 2;
    swift_willThrow();
    unint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t IEEE80211Frame.Header.FrameControl.managementSubtype.getter(__int16 a1)
{
  int v2 = sub_10008CA90(2uLL, 2, a1);
  if ((v2 - 1) < 3) {
    return 14;
  }
  if (v2)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_1003B00B0;
    *(unsigned char *)(v5 + 16)  = 2;
    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    unsigned __int8 v4 = sub_10008CA90(4uLL, 4, a1);
    uint64_t result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(v4);
    if (result == 14) {
      return 14;
    }
  }
  return result;
}

void *IEEE80211Frame.Header.FrameControl.toDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.toDS;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.getter()
{
  return 256;
}

void *IEEE80211Frame.Header.FrameControl.fromDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.fromDS;
}

void *IEEE80211Frame.Header.FrameControl.moreFragments.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreFragments;
}

void *IEEE80211Frame.Header.FrameControl.retry.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.retry;
}

uint64_t static IEEE80211Frame.Header.FrameControl.retry.getter()
{
  return 2048;
}

void *IEEE80211Frame.Header.FrameControl.powerManagement.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.powerManagement;
}

uint64_t static IEEE80211Frame.Header.FrameControl.powerManagement.getter()
{
  return 4096;
}

void *IEEE80211Frame.Header.FrameControl.moreData.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreData;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.getter()
{
  return 0x2000;
}

void *IEEE80211Frame.Header.FrameControl.protectedFrame.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.protectedFrame;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.getter()
{
  return 0x4000;
}

void *IEEE80211Frame.Header.FrameControl.htc.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.htc;
}

uint64_t static IEEE80211Frame.Header.FrameControl.htc.getter()
{
  return 0x8000;
}

uint64_t sub_100193D58()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100193DB8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t IEEE80211Frame.Header.receiverAddress.getter(unint64_t a1, unsigned __int16 a2)
{
  return HIDWORD(a1) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)a2 << 32);
}

uint64_t IEEE80211Frame.Header.receiverAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4)  = result;
  *(unsigned char *)(v1 + 6)  = BYTE2(result);
  *(unsigned char *)(v1 + 7)  = BYTE3(result);
  *(unsigned char *)(v1 + 8)  = BYTE4(result);
  *(unsigned char *)(v1 + 9)  = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.transmitterAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 10)  = result;
  *(unsigned char *)(v1 + 12)  = BYTE2(result);
  *(unsigned char *)(v1 + 13)  = BYTE3(result);
  *(unsigned char *)(v1 + 14)  = BYTE4(result);
  *(unsigned char *)(v1 + 15)  = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.destinationAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 16)  = result;
  *(unsigned char *)(v1 + 18)  = BYTE2(result);
  *(unsigned char *)(v1 + 19)  = BYTE3(result);
  *(unsigned char *)(v1 + 20)  = BYTE4(result);
  *(unsigned char *)(v1 + 21)  = BYTE5(result);
  return result;
}

unint64_t IEEE80211Frame.Header.sequenceControl.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3);
}

uint64_t IEEE80211Frame.Header.sequenceControl.setter(uint64_t result)
{
  *(_WORD *)(v1 + 22)  = result;
  return result;
}

void IEEE80211Frame.Header.hash(into:)(int a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v4 = a4;
  Swift::UInt8 v5 = a3;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = a3 >> 8;
  unint64_t v12 = a3 >> 16;
  *(void *)uint64_t v13 = a3 >> 24;
  *(void *)uint64_t v14 = HIDWORD(a3);
  *(void *)char v15 = a3 >> 40;
  *(void *)char v16 = HIWORD(a3);
  *(void *)uint64_t v17 = HIBYTE(a3);
  *(void *)uint64_t v18 = a4 >> 8;
  *(void *)unint64_t v19 = a4 >> 16;
  *(void *)uint64_t v20 = a4 >> 24;
  *(void *)unint64_t v21 = HIDWORD(a4);
  *(void *)char v22 = a4 >> 40;
  *(void *)uint64_t v23 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
}

unint64_t sub_100194010(char a1)
{
  unint64_t result = 0x6E6F43656D617266;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      unint64_t result = 0x7265766965636572;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x65636E6575716573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001940F4()
{
  return sub_100194010(*v0);
}

uint64_t sub_1001940FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A410C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100194124(uint64_t a1)
{
  unint64_t v2 = sub_10019CAD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100194160(uint64_t a1)
{
  unint64_t v2 = sub_10019CAD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Header.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v8 = sub_100010BCC(&qword_100481488);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019CAD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int16 v17 = a2;
  char v21 = 0;
  sub_10019CB24();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v12 = a3;
    uint64_t v13 = v16;
    LOBYTE(v17)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v17)  = BYTE4(a2);
    HIBYTE(v17)  = BYTE5(a2);
    char v18 = BYTE6(a2);
    char v19 = HIBYTE(a2);
    __int16 v20 = v12;
    char v21 = 2;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17)  = BYTE2(v12);
    HIBYTE(v17)  = BYTE3(v12);
    char v18 = BYTE4(v12);
    char v19 = BYTE5(v12);
    LOBYTE(v20)  = BYTE6(v12);
    HIBYTE(v20)  = HIBYTE(v12);
    char v21 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int16 v17 = v13;
    char v18 = BYTE2(v13);
    char v19 = BYTE3(v13);
    LOBYTE(v20)  = BYTE4(v13);
    HIBYTE(v20)  = BYTE5(v13);
    char v21 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17)  = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211Frame.Header.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  Swift::UInt8 v4 = a2;
  Swift::UInt16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  unint64_t v11 = a2 >> 8;
  *(void *)uint64_t v13 = a2 >> 16;
  *(void *)uint64_t v14 = a2 >> 24;
  *(void *)uint64_t v15 = HIDWORD(a2);
  *(void *)uint64_t v16 = a2 >> 40;
  *(void *)__int16 v17 = HIWORD(a2);
  *(void *)char v18 = HIBYTE(a2);
  *(void *)char v19 = a3 >> 8;
  *(void *)__int16 v20 = a3 >> 16;
  *(void *)char v21 = a3 >> 24;
  *(void *)char v22 = HIDWORD(a3);
  *(void *)uint64_t v23 = a3 >> 40;
  *(void *)uint64_t v24 = HIWORD(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  return Hasher._finalize()();
}

unint64_t IEEE80211Frame.Header.init(from:)(void *a1)
{
  unint64_t result = sub_10019DB64(a1);
  if (v1) {
    return v3;
  }
  return result;
}

unint64_t sub_100194664@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_10019DB64(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
  }
  return result;
}

uint64_t sub_100194728(void *a1)
{
  return IEEE80211Frame.Header.encode(to:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_100194748()
{
  return IEEE80211Frame.Header.hashValue.getter(*v0, v0[1], v0[2]);
}

void sub_100194754(int a1)
{
  IEEE80211Frame.Header.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_100194760()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  IEEE80211Frame.Header.hash(into:)((int)&v5, v2, v1, v3);
  return Hasher._finalize()();
}

BOOL sub_1001947B8(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

void IEEE80211Frame.Contents.hash(into:)(uint64_t a1)
{
  sub_10019E7C0(v1, (uint64_t)v5);
  sub_10019E7C0(v5, (uint64_t)v8);
  sub_10019E7C0(v1, (uint64_t)v6);
  switch(sub_10013BD8C((uint64_t)v6))
  {
    case 1u:
      Swift::UInt v3 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v3 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v3 = 3;
LABEL_6:
      Hasher._combine(_:)(v3);
      break;
    default:
      sub_10019E7C0(v6, (uint64_t)v7);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v8, (uint64_t)v4);
      sub_10019E80C((uint64_t)v4, sub_10006E740);
      IEEE80211Frame.Management.hash(into:)(a1);
      sub_10019DEDC((uint64_t)v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
  }
}

BOOL static IEEE80211Frame.Contents.__derived_enum_equals(_:_:)(long long *a1, long long *a2)
{
  sub_10019E7C0(a1, (uint64_t)v8);
  switch(sub_10013BD8C((uint64_t)v8))
  {
    case 1u:
      sub_10019E7C0(a2, (uint64_t)v9);
      if (sub_10013BD8C((uint64_t)v9) != 1) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 2u:
      sub_10019E7C0(a2, (uint64_t)v9);
      if (sub_10013BD8C((uint64_t)v9) != 2) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 3u:
      sub_10019E7C0(a2, (uint64_t)v9);
      if (sub_10013BD8C((uint64_t)v9) != 3) {
        goto LABEL_9;
      }
LABEL_5:
      BOOL v4 = 1;
      break;
    default:
      sub_10019E7C0(v8, (uint64_t)v9);
      sub_10019E7C0(a2, (uint64_t)v6);
      if (sub_10013BD8C((uint64_t)v6))
      {
LABEL_9:
        BOOL v4 = 0;
      }
      else
      {
        sub_10019E7C0(v6, (uint64_t)v7);
        sub_10019DEDC((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
        sub_10019DEDC((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
        BOOL v4 = _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(v9, v7);
        sub_10019DEDC((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
        sub_10019DEDC((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      }
      break;
  }
  return v4;
}

Swift::Int IEEE80211Frame.Contents.hashValue.getter()
{
  sub_10019E7C0(v0, (uint64_t)v5);
  sub_10019E7C0(v5, (uint64_t)v8);
  Hasher.init(_seed:)();
  sub_10019E7C0(v0, (uint64_t)v6);
  switch(sub_10013BD8C((uint64_t)v6))
  {
    case 1u:
      Swift::UInt v1 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v1 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v1 = 3;
LABEL_6:
      Hasher._combine(_:)(v1);
      break;
    default:
      sub_10019E7C0(v6, (uint64_t)v7);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v8, (uint64_t)v3);
      sub_10019E80C((uint64_t)v3, sub_10006E740);
      IEEE80211Frame.Management.hash(into:)((uint64_t)v4);
      sub_10019DEDC((uint64_t)v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_100194BAC()
{
  sub_10019E7C0(v0, (uint64_t)v6);
  Hasher.init(_seed:)();
  sub_10019E7C0(v6, (uint64_t)v7);
  switch(sub_10013BD8C((uint64_t)v7))
  {
    case 1u:
      Swift::UInt v1 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v1 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v1 = 3;
LABEL_6:
      Hasher._combine(_:)(v1);
      break;
    default:
      sub_10019E7C0(v7, (uint64_t)v5);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v6, (uint64_t)v3);
      sub_10019E80C((uint64_t)v3, sub_10006E740);
      IEEE80211Frame.Management.hash(into:)((uint64_t)v4);
      sub_10019DEDC((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
  }
  return Hasher._finalize()();
}

void sub_100194CC8(uint64_t a1)
{
  sub_10019E7C0(v1, (uint64_t)v6);
  sub_10019E7C0(v6, (uint64_t)v7);
  switch(sub_10013BD8C((uint64_t)v7))
  {
    case 1u:
      Swift::UInt v3 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v3 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v3 = 3;
LABEL_6:
      Hasher._combine(_:)(v3);
      break;
    default:
      sub_10019E7C0(v7, (uint64_t)v5);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v6, (uint64_t)v4);
      sub_10019E80C((uint64_t)v4, sub_10006E740);
      IEEE80211Frame.Management.hash(into:)(a1);
      sub_10019DEDC((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
  }
}

Swift::Int sub_100194DD4()
{
  sub_10019E7C0(v0, (uint64_t)v6);
  Hasher.init(_seed:)();
  sub_10019E7C0(v6, (uint64_t)v7);
  switch(sub_10013BD8C((uint64_t)v7))
  {
    case 1u:
      Swift::UInt v1 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v1 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v1 = 3;
LABEL_6:
      Hasher._combine(_:)(v1);
      break;
    default:
      sub_10019E7C0(v7, (uint64_t)v5);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v6, (uint64_t)v3);
      sub_10019E80C((uint64_t)v3, sub_10006E740);
      IEEE80211Frame.Management.hash(into:)((uint64_t)v4);
      sub_10019DEDC((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
  }
  return Hasher._finalize()();
}

BOOL sub_100194EFC(long long *a1, long long *a2)
{
  sub_10019E7C0(a1, (uint64_t)v8);
  sub_10019E7C0(a2, (uint64_t)v9);
  sub_10019E7C0(v8, (uint64_t)v10);
  switch(sub_10013BD8C((uint64_t)v10))
  {
    case 1u:
      sub_10019E7C0(v9, (uint64_t)v7);
      BOOL v3 = sub_10013BD8C((uint64_t)v7) == 1;
      break;
    case 2u:
      sub_10019E7C0(v9, (uint64_t)v7);
      BOOL v3 = sub_10013BD8C((uint64_t)v7) == 2;
      break;
    case 3u:
      sub_10019E7C0(v9, (uint64_t)v7);
      BOOL v3 = sub_10013BD8C((uint64_t)v7) == 3;
      break;
    default:
      sub_10019E7C0(v10, (uint64_t)v6);
      sub_10019E7C0(v9, (uint64_t)v5);
      if (sub_10013BD8C((uint64_t)v5))
      {
        BOOL v3 = 0;
      }
      else
      {
        sub_10019E7C0(v5, (uint64_t)v7);
        sub_10019DEDC((uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
        sub_10019DEDC((uint64_t)v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
        BOOL v3 = static IEEE80211Frame.Management.__derived_enum_equals(_:_:)(v6, v7);
        sub_10019DEDC((uint64_t)v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
        sub_10019DEDC((uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      }
      break;
  }
  return v3;
}

uint64_t IEEE80211Frame.header.getter()
{
  return *(void *)v0;
}

uint64_t IEEE80211Frame.header.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  void *v3 = result;
  v3[1]  = a2;
  void v3[2] = a3;
  return result;
}

uint64_t IEEE80211Frame.contents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10019DF50((uint64_t *)(v1 + 24), a1);
}

uint64_t IEEE80211Frame.contents.setter(uint64_t a1)
{
  return sub_10019DF88(a1, v1 + 24);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.txHighLGIRate.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

void IEEE80211Frame.Management.Beacon.hash(into:)(uint64_t a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5 = a3;
  unsigned int v7 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  Swift::UInt v8 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = a4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A66D8(v9, (uint64_t)v10);
      sub_1000A6734((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      IEEE80211InformationElement.hash(into:)(a1);
      sub_1000A6734((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      v9 += 56;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t static IEEE80211Frame.Management.Beacon.__derived_struct_equals(_:_:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a1 == a4 && (unsigned __int16)a2 == (unsigned __int16)a5 && HIWORD(a2) == HIWORD(a5)) {
    return sub_10009A1CC(a3, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_10019526C()
{
  uint64_t result = 0x6D617473656D6974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E496E6F63616562;
      break;
    case 2:
      uint64_t result = 0x696C696261706163;
      break;
    case 3:
      uint64_t result = 0x73746E656D656C65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100195314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A43E0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_10019533C(uint64_t a1)
{
  unint64_t v2 = sub_10019DFC0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100195378(uint64_t a1)
{
  unint64_t v2 = sub_10019DFC0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Beacon.encode(to:)(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v13 = a3;
  uint64_t v7 = sub_100010BCC(&qword_1004814A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019DFC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[1]  = a4;
    char v14 = 3;
    sub_100010BCC(&qword_1004814B0);
    sub_1001A546C(&qword_1004814B8, (void (*)(void))sub_10019E014);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int IEEE80211Frame.Management.Beacon.hashValue.getter(Swift::UInt64 a1, unsigned int a2, uint64_t a3)
{
  Swift::UInt16 v4 = a2;
  unsigned int v6 = HIWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Swift::UInt v7 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A66D8(v8, (uint64_t)v11);
      sub_1000A6734((uint64_t)v11, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      IEEE80211InformationElement.hash(into:)((uint64_t)&v10);
      sub_1000A6734((uint64_t)v11, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      v8 += 56;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Beacon.init(from:)(void *a1)
{
  uint64_t result = sub_10019D910(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Int sub_1001956F0()
{
  return IEEE80211Frame.Management.Beacon.hashValue.getter(*(void *)v0, *(_DWORD *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_100195700(uint64_t a1)
{
  IEEE80211Frame.Management.Beacon.hash(into:)(a1, *(void *)v1, *(_DWORD *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_100195710()
{
  Swift::UInt64 v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Swift::UInt v5 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A66D8(v6, (uint64_t)v9);
      sub_1000A6734((uint64_t)v9, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      IEEE80211InformationElement.hash(into:)((uint64_t)&v8);
      sub_1000A6734((uint64_t)v9, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      v6 += 56;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_10019580C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10019D910(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_100195848(void *a1)
{
  return IEEE80211Frame.Management.Beacon.encode(to:)(a1, *(void *)v1, *(_DWORD *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10019586C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
  {
    return sub_10009A1CC(*(void *)(a1 + 16), *(void *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

BOOL IEEE80211Frame.Management.Authentication.FiniteCyclicGroup.init(rawValue:)(__int16 a1)
{
  return a1 != 19;
}

uint64_t static NANInformationElement.ouiType.getter()
{
  return 19;
}

unsigned __int16 *sub_1001958C0@<X0>(unsigned __int16 *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 19;
  return result;
}

void sub_1001958D4(_WORD *a1@<X8>)
{
  *a1  = 19;
}

Swift::Int sub_1001958E0()
{
  return Hasher._finalize()();
}

void sub_100195924()
{
}

Swift::Int sub_10019594C()
{
  return Hasher._finalize()();
}

uint64_t sub_10019598C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001959EC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100195A3C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100195A9C()
{
  return RawRepresentable<>.encode(to:)();
}

CoreP2P::IEEE80211Frame::Management::Authentication::SimulatenousAuthenticationOfEquals::MessageType_optional __swiftcall IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType.init(rawValue:)(Swift::UInt16 rawValue)
{
  if (rawValue == 2) {
    v1.value  = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_confirm;
  }
  else {
    v1.value  = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t NANInternetSharingStatistics.Provider.SharingMode.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

unsigned __int16 *sub_100195B14@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 1) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_100195B34(__int16 *a1@<X8>)
{
  if (*v1) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 1;
  }
  *a1  = v2;
}

Swift::Int sub_100195B4C()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt16 v2 = 2;
  }
  else {
    Swift::UInt16 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100195B9C()
{
  if (*v0) {
    Swift::UInt16 v1 = 2;
  }
  else {
    Swift::UInt16 v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100195BD4()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt16 v2 = 2;
  }
  else {
    Swift::UInt16 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100195C20()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100195C80()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a3;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16)  = a1;
  *(void *)(v2 + 24)  = a2;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  Hasher._combine(_:)(0x13u);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

uint64_t static IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, a5, a6) & 1) == 0) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8);
}

unint64_t sub_100195E5C()
{
  unint64_t v1 = 0x72616C616373;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000012;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_100195EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A45E4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100195EDC(uint64_t a1)
{
  unint64_t v2 = sub_10019E068();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100195F18(uint64_t a1)
{
  unint64_t v2 = sub_10019E068();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a5;
  uint64_t v16 = a3;
  uint64_t v9 = sub_100010BCC(&qword_1004814C8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019E068();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17)  = 0;
  sub_10019E0BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v13 = v15;
    uint64_t v17 = a2;
    uint64_t v18 = v16;
    char v19 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = a4;
    uint64_t v18 = v13;
    char v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.init(from:)(void *a1)
{
  uint64_t result = sub_10019CC0C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Int sub_100196208()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x13u);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001962B4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher._combine(_:)(0x13u);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();

  return sub_10000C970(v3, v4);
}

Swift::Int sub_100196354()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x13u);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001963FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10019CC0C(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
    a2[3]  = v7;
  }
  return result;
}

uint64_t sub_10019642C(void *a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10019644C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3, v4, v5);
}

uint64_t sub_1001964C4()
{
  if (*v0) {
    return 0x6D7269666E6F63;
  }
  else {
    return 0x666E6F43646E6573;
  }
}

uint64_t sub_100196508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A472C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100196530(uint64_t a1)
{
  unint64_t v2 = sub_10019E110();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019656C(uint64_t a1)
{
  unint64_t v2 = sub_10019E110();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100010BCC(&qword_1004814E0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019E110();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.init(from:)(void *a1)
{
  return sub_10019CE90(a1);
}

uint64_t sub_100196754@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10019CE90(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_100196784(void *a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    sub_100013D44(a3, a4);
    Data.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10019E164(a2, a3, a4, a5, (void (*)(void))sub_100013D44);
    sub_100013D44(a2, a3);
    Data.hash(into:)();
    sub_10000C970(a2, a3);
    sub_100013D44(a4, a5);
    Data.hash(into:)();
    sub_10000C970(a4, a5);
  }
  return sub_10019E164(a2, a3, a4, a5, (void (*)(void))sub_10000C970);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    sub_100013D44(a2, a3);
    Data.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_100013D44);
    sub_100013D44(a1, a2);
    Data.hash(into:)();
    sub_10000C970(a1, a2);
    sub_100013D44(a3, a4);
    Data.hash(into:)();
    sub_10000C970(a3, a4);
  }
  sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_10000C970);
  return Hasher._finalize()();
}

Swift::Int sub_100196A14()
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100196A20(uint64_t a1)
{
  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_100196A2C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  if ((v4 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    sub_100013D44(v2, v3);
    Data.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10019E164(v1, v2, v3, v4, (void (*)(void))sub_100013D44);
    sub_100013D44(v1, v2);
    Data.hash(into:)();
    sub_10000C970(v1, v2);
    sub_100013D44(v3, v4);
    Data.hash(into:)();
    sub_10000C970(v3, v4);
  }
  sub_10019E164(v1, v2, v3, v4, (void (*)(void))sub_10000C970);
  return Hasher._finalize()();
}

BOOL sub_100196B68(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10019E1F0(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.setter(uint64_t a1)
{
  return sub_10019E24C(a1, v1 + 8);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10019E2A8(v1 + 64, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.setter(uint64_t a1)
{
  return sub_10019E304(a1, v1 + 64);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10019E360(v1 + 112, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.setter(uint64_t a1)
{
  return sub_10019E3C8(a1, v1 + 112);
}

void IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(uint64_t a1)
{
  Hasher._combine(_:)(word_1003C4618[*v1]);
  long long v3 = *(_OWORD *)(v1 + 24);
  long long v24 = *(_OWORD *)(v1 + 8);
  v25[0]  = v3;
  *(_OWORD *)((char *)v25 + 9)  = *(_OWORD *)(v1 + 33);
  sub_10019E430((uint64_t)&v24);
  IEEE80211InformationElement.RSNCapability.hash(into:)();
  sub_10019E47C((uint64_t)&v24);
  uint64_t v4 = *((void *)v1 + 7);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(v4 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
  long long v8 = *((_OWORD *)v1 + 5);
  long long v20 = *((_OWORD *)v1 + 4);
  long long v21 = v8;
  long long v22 = *((_OWORD *)v1 + 6);
  unint64_t v9 = v8;
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10019E4C4(&v20, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
  }
  else
  {
    long long v10 = v20;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    sub_10019E4C4(&v20, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
    sub_10006E968(v10, *((uint64_t *)&v10 + 1), v9);
    Data.hash(into:)();
    sub_10006E0D8(v10, *((uint64_t *)&v10 + 1), v9);
  }
  sub_10006EC68((uint64_t)&v21 + 8, (uint64_t)&v23, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v23, (uint64_t)&v33, &qword_1004814F8);
  if (v33 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  unint64_t v11 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v12 = v22;
    Hasher._combine(_:)(1u);
    sub_100013D44(v12, v11);
    Data.hash(into:)();
    sub_10000C95C(v12, v11);
  }
  sub_10019E4C4(&v20, (void (*)(void, void, void))sub_10006E0D8, (void (*)(uint64_t, uint64_t))sub_10000C95C);
  int v13 = v1[160];
  if (v13 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v15 = *((void *)v1 + 18);
    unint64_t v14 = *((void *)v1 + 19);
    unint64_t v17 = *((void *)v1 + 16);
    uint64_t v16 = *((void *)v1 + 17);
    unint64_t v19 = *((void *)v1 + 15);
    uint64_t v26 = *((void *)v1 + 14);
    uint64_t v18 = v26;
    unint64_t v27 = v19;
    unint64_t v28 = v17;
    uint64_t v29 = v16;
    uint64_t v30 = v15;
    unint64_t v31 = v14;
    char v32 = v13;
    Hasher._combine(_:)(1u);
    sub_10006E998(v18, v19, v17, v16, v15, v14, v13);
    IEEE80211InformationElement.hash(into:)(a1);
    sub_10006E0F4(v18, v19, v17, v16, v15, v14, v13);
  }
}

unint64_t sub_100196ED4(char a1)
{
  unint64_t result = 0x6F43737574617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x62617061436E7372;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 4:
      unint64_t result = 0x7053726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100196FAC()
{
  return sub_100196ED4(*v0);
}

uint64_t sub_100196FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A4838(a1, a2);
  *a3  = result;
  return result;
}

void sub_100196FDC(unsigned char *a1@<X8>)
{
  *a1  = 5;
}

uint64_t sub_100196FE8(uint64_t a1)
{
  unint64_t v2 = sub_10019E51C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100197024(uint64_t a1)
{
  unint64_t v2 = sub_10019E51C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(void *a1)
{
  return sub_100197308(a1, &qword_100481500, (void (*)(void))sub_10019E51C);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNResponse.hashValue.getter()
{
  return sub_100197598((void (*)(unsigned char *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double IEEE80211Frame.Management.Authentication.PASNRequest.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10019761C(a1, &qword_1004817A8, (void (*)(void))sub_10019E51C, a2).n128_u64[0];
  return result;
}

Swift::Int sub_1001970F0(uint64_t a1, uint64_t a2)
{
  return sub_100197694(a1, a2, (void (*)(unsigned char *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

Swift::Int sub_10019710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001976DC(a1, a2, a3, (void (*)(unsigned char *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double sub_100197124@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10019775C(a1, &qword_1004817A8, (void (*)(void))sub_10019E51C, a2).n128_u64[0];
  return result;
}

uint64_t sub_100197160(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(a1);
}

BOOL sub_1001971BC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  v13[8]  = *(_OWORD *)(a1 + 128);
  v13[9]  = v2;
  char v14 = *(unsigned char *)(a1 + 160);
  long long v3 = *(_OWORD *)(a1 + 80);
  v13[4]  = *(_OWORD *)(a1 + 64);
  v13[5]  = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  v13[6]  = *(_OWORD *)(a1 + 96);
  v13[7]  = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v13[0]  = *(_OWORD *)a1;
  v13[1]  = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  Swift::UInt8 v13[2] = *(_OWORD *)(a1 + 32);
  v13[3]  = v6;
  long long v7 = *(_OWORD *)(a2 + 144);
  v15[8]  = *(_OWORD *)(a2 + 128);
  v15[9]  = v7;
  char v16 = *(unsigned char *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 80);
  v15[4]  = *(_OWORD *)(a2 + 64);
  v15[5]  = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  v15[6]  = *(_OWORD *)(a2 + 96);
  v15[7]  = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  v15[0]  = *(_OWORD *)a2;
  v15[1]  = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  v15[2]  = *(_OWORD *)(a2 + 32);
  void v15[3] = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0((char *)v13, (char *)v15);
}

uint64_t sub_100197254(uint64_t a1)
{
  unint64_t v2 = sub_10019E6C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100197290(uint64_t a1)
{
  unint64_t v2 = sub_10019E6C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(void *a1)
{
  return sub_100197308(a1, &qword_100481530, (void (*)(void))sub_10019E6C0);
}

uint64_t sub_100197308(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v7 = sub_100010BCC(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  long long v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16)  = *(unsigned char *)v5;
  char v19 = 0;
  sub_10019E570();
  uint64_t v11 = v15[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    long long v12 = *(_OWORD *)(v5 + 24);
    long long v16 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)unint64_t v17 = v12;
    *(_OWORD *)&v17[9]  = *(_OWORD *)(v5 + 33);
    char v19 = 1;
    sub_10019E5C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v5 + 56);
    char v19 = 2;
    sub_10019E618();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v5 + 80);
    long long v16 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)unint64_t v17 = v13;
    *(_OWORD *)&v17[16]  = *(_OWORD *)(v5 + 96);
    char v19 = 3;
    sub_10019E66C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10006EC68(v5 + 112, (uint64_t)v18, &qword_1004814F0);
    sub_10006EC68((uint64_t)v18, (uint64_t)&v16, &qword_1004814F0);
    char v19 = 4;
    sub_10019E014();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int sub_100197598(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

double IEEE80211Frame.Management.Authentication.PASNResponse.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10019761C(a1, &qword_100481788, (void (*)(void))sub_10019E6C0, a2).n128_u64[0];
  return result;
}

__n128 sub_10019761C@<Q0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  sub_10019D250(a1, a2, a3, (uint64_t)v11);
  if (!v4)
  {
    long long v7 = v11[9];
    *(_OWORD *)(a4 + 128)  = v11[8];
    *(_OWORD *)(a4 + 144)  = v7;
    *(unsigned char *)(a4 + 160)  = v12;
    long long v8 = v11[5];
    *(_OWORD *)(a4 + 64)  = v11[4];
    *(_OWORD *)(a4 + 80)  = v8;
    long long v9 = v11[7];
    *(_OWORD *)(a4 + 96)  = v11[6];
    *(_OWORD *)(a4 + 112)  = v9;
    long long v10 = v11[1];
    *(_OWORD *)a4  = v11[0];
    *(_OWORD *)(a4 + 16)  = v10;
    __n128 result = (__n128)v11[3];
    *(_OWORD *)(a4 + 32)  = v11[2];
    *(__n128 *)(a4 + 48)  = result;
  }
  return result;
}

Swift::Int sub_100197694(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1001976DC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

double sub_100197720@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_10019775C(a1, &qword_100481788, (void (*)(void))sub_10019E6C0, a2).n128_u64[0];
  return result;
}

__n128 sub_10019775C@<Q0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  sub_10019D250(a1, a2, a3, (uint64_t)v11);
  if (!v4)
  {
    long long v7 = v11[9];
    *(_OWORD *)(a4 + 128)  = v11[8];
    *(_OWORD *)(a4 + 144)  = v7;
    *(unsigned char *)(a4 + 160)  = v12;
    long long v8 = v11[5];
    *(_OWORD *)(a4 + 64)  = v11[4];
    *(_OWORD *)(a4 + 80)  = v8;
    long long v9 = v11[7];
    *(_OWORD *)(a4 + 96)  = v11[6];
    *(_OWORD *)(a4 + 112)  = v9;
    long long v10 = v11[1];
    *(_OWORD *)a4  = v11[0];
    *(_OWORD *)(a4 + 16)  = v10;
    __n128 result = (__n128)v11[3];
    *(_OWORD *)(a4 + 32)  = v11[2];
    *(__n128 *)(a4 + 48)  = result;
  }
  return result;
}

uint64_t sub_1001977E0(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(a1);
}

BOOL sub_10019783C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  v13[8]  = *(_OWORD *)(a1 + 128);
  v13[9]  = v2;
  char v14 = *(unsigned char *)(a1 + 160);
  long long v3 = *(_OWORD *)(a1 + 80);
  v13[4]  = *(_OWORD *)(a1 + 64);
  v13[5]  = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  v13[6]  = *(_OWORD *)(a1 + 96);
  v13[7]  = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v13[0]  = *(_OWORD *)a1;
  v13[1]  = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  Swift::UInt8 v13[2] = *(_OWORD *)(a1 + 32);
  v13[3]  = v6;
  long long v7 = *(_OWORD *)(a2 + 144);
  v15[8]  = *(_OWORD *)(a2 + 128);
  v15[9]  = v7;
  char v16 = *(unsigned char *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 80);
  v15[4]  = *(_OWORD *)(a2 + 64);
  v15[5]  = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  v15[6]  = *(_OWORD *)(a2 + 96);
  v15[7]  = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  v15[0]  = *(_OWORD *)a2;
  v15[1]  = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  v15[2]  = *(_OWORD *)(a2 + 32);
  void v15[3] = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0((char *)v13, (char *)v15);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10019E2A8(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.setter(uint64_t a1)
{
  return sub_10019E304(a1, v1 + 8);
}

void *IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)()
{
  Hasher._combine(_:)(word_1003C4618[*v0]);
  long long v4 = *(_OWORD *)(v0 + 8);
  long long v5 = *(_OWORD *)(v0 + 24);
  long long v6 = *(_OWORD *)(v0 + 40);
  if ((unint64_t)v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10019E714(v0, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    sub_10019E714(v0, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
    sub_10006E968(v4, *((uint64_t *)&v4 + 1), v5);
    Data.hash(into:)();
    sub_10006E0D8(v4, *((uint64_t *)&v4 + 1), v5);
  }
  sub_10006EC68((uint64_t)&v5 + 8, (uint64_t)&v7, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v7, (uint64_t)&v8, &qword_1004814F8);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  unint64_t v1 = *((void *)&v6 + 1);
  if (*((void *)&v6 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = v6;
    Hasher._combine(_:)(1u);
    sub_100013D44(v2, v1);
    Data.hash(into:)();
    sub_10000C95C(v2, v1);
  }
  return sub_10019E714(v0, (void (*)(void, void, void))sub_10006E0D8, (void (*)(uint64_t, uint64_t))sub_10000C95C);
}

BOOL static IEEE80211Frame.Management.Authentication.PASNConfirm.__derived_struct_equals(_:_:)(char *a1, char *a2)
{
  if (word_1003C4618[*a1] != word_1003C4618[*a2]) {
    return 0;
  }
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 8);
  long long v15 = v2;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  *((void *)&v11 + 1)  = *((void *)a2 + 4);
  long long v12 = *(_OWORD *)(a2 + 40);
  unint64_t v4 = v3;
  if ((unint64_t)v15 >> 60 == 15)
  {
    if ((unint64_t)v3 >> 60 == 15) {
      goto LABEL_4;
    }
LABEL_8:
    sub_10006E968(v14, *((uint64_t *)&v14 + 1), v15);
    sub_10006E968(v10, *((uint64_t *)&v10 + 1), v4);
    sub_10006E0D8(v14, *((uint64_t *)&v14 + 1), v15);
    sub_10006E0D8(v10, *((uint64_t *)&v10 + 1), v4);
    return 0;
  }
  if ((unint64_t)v3 >> 60 == 15) {
    goto LABEL_8;
  }
  if ((unsigned __int16)v14 != (unsigned __int16)v10) {
    return 0;
  }
  sub_10006E968(v14, *((uint64_t *)&v14 + 1), v15);
  sub_10006E968(v10, *((uint64_t *)&v10 + 1), v4);
  char v5 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v10 + 1), v4);
  sub_10006E0D8(v10, *((uint64_t *)&v10 + 1), v4);
  sub_10006E0D8(v14, *((uint64_t *)&v14 + 1), v15);
  if ((v5 & 1) == 0) {
    return 0;
  }
LABEL_4:
  sub_10006EC68((uint64_t)&v15 + 8, (uint64_t)&v17, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v11 + 8, (uint64_t)&v13, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v17, (uint64_t)&v18, &qword_1004814F8);
  if (v18)
  {
    sub_10006EC68((uint64_t)&v13, (uint64_t)&v19, &qword_1004814F8);
    if (v19 != 1) {
      return 0;
    }
  }
  else
  {
    sub_10006EC68((uint64_t)&v13, (uint64_t)&v19, &qword_1004814F8);
    if (v19) {
      return 0;
    }
  }
  long long v6 = v16;
  long long v7 = v12;
  if (*((void *)&v16 + 1) >> 60 == 15)
  {
    if (*((void *)&v12 + 1) >> 60 == 15) {
      return 1;
    }
    goto LABEL_17;
  }
  if (*((void *)&v12 + 1) >> 60 == 15)
  {
LABEL_17:
    sub_100038004(v16, *((unint64_t *)&v16 + 1));
    sub_100038004(v7, *((unint64_t *)&v7 + 1));
    sub_10000C95C(v6, *((unint64_t *)&v6 + 1));
    sub_10000C95C(v7, *((unint64_t *)&v7 + 1));
    return 0;
  }
  sub_100038004(v16, *((unint64_t *)&v16 + 1));
  sub_100038004(v7, *((unint64_t *)&v7 + 1));
  char v8 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, *((unint64_t *)&v6 + 1), v7, *((unint64_t *)&v7 + 1));
  sub_10000C95C(v7, *((unint64_t *)&v7 + 1));
  sub_10000C95C(v6, *((unint64_t *)&v6 + 1));
  return (v8 & 1) != 0;
}

uint64_t sub_100197D88()
{
  if (*v0) {
    return 0xD00000000000002BLL;
  }
  else {
    return 0x6F43737574617473;
  }
}

uint64_t sub_100197DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A4AA0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100197DF4(uint64_t a1)
{
  unint64_t v2 = sub_10019E76C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100197E30(uint64_t a1)
{
  unint64_t v2 = sub_10019E76C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_100481540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  char v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019E76C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11[0])  = *(unsigned char *)v3;
  char v12 = 0;
  sub_10019E570();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 24);
    v11[0]  = *(_OWORD *)(v3 + 8);
    v11[1]  = v9;
    _OWORD v11[2] = *(_OWORD *)(v3 + 40);
    char v12 = 1;
    sub_10019E66C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003C4618[*v0]);
  long long v4 = *(_OWORD *)(v0 + 8);
  long long v5 = *(_OWORD *)(v0 + 24);
  long long v6 = *(_OWORD *)(v0 + 40);
  if ((unint64_t)v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10019E714(v0, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    sub_10019E714(v0, (void (*)(void, void, void))sub_10006E968, (void (*)(uint64_t, uint64_t))sub_100038004);
    sub_10006E968(v4, *((uint64_t *)&v4 + 1), v5);
    Data.hash(into:)();
    sub_10006E0D8(v4, *((uint64_t *)&v4 + 1), v5);
  }
  sub_10006EC68((uint64_t)&v5 + 8, (uint64_t)&v7, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v7, (uint64_t)&v8, &qword_1004814F8);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  unint64_t v1 = *((void *)&v6 + 1);
  if (*((void *)&v6 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = v6;
    Hasher._combine(_:)(1u);
    sub_100013D44(v2, v1);
    Data.hash(into:)();
    sub_10000C95C(v2, v1);
  }
  sub_10019E714(v0, (void (*)(void, void, void))sub_10006E0D8, (void (*)(uint64_t, uint64_t))sub_10000C95C);
  return Hasher._finalize()();
}

double IEEE80211Frame.Management.Authentication.PASNConfirm.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10019D050(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32)  = v7;
    *(void *)(a2 + 48)  = v8;
  }
  return result;
}

Swift::Int sub_100198280()
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter();
}

void *sub_1001982C4()
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)();
}

Swift::Int sub_100198308()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 2);
  unint64_t v4 = *((void *)v0 + 3);
  int v5 = v0[32];
  uint64_t v6 = *((void *)v0 + 5);
  unint64_t v7 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003C4618[v1]);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10006E968(v2, v3, v4);
    sub_100038004(v6, v7);
    if (!v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(0x13u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_10006E968(v2, v3, v4);
    sub_100038004(v6, v7);
    sub_10006E968(v2, v3, v4);
    Data.hash(into:)();
    sub_10006E0D8(v2, v3, v4);
    if (!v5) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_100013D44(v6, v7);
    Data.hash(into:)();
    sub_10000C95C(v6, v7);
  }
  sub_10006E0D8(v2, v3, v4);
  sub_10000C95C(v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1001984A8(void *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(a1);
}

BOOL sub_1001984C0(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  v10[0]  = *(_OWORD *)(a1 + 8);
  v10[1]  = v3;
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  void v10[2] = *(_OWORD *)(a1 + 40);
  v11[0]  = v5;
  long long v7 = *(_OWORD *)(a2 + 40);
  v11[1]  = v6;
  _OWORD v11[2] = v7;
  return word_1003C4618[v2] == word_1003C4618[v4]
      && _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v10, (uint64_t *)v11);
}

void IEEE80211Frame.Management.Authentication.hash(into:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  sub_10019E7C0(v1, (uint64_t)v22);
  sub_10019E7C0(v22, (uint64_t)v39);
  sub_10019E7C0(v1, (uint64_t)v23);
  switch(sub_10019E800((uint64_t)v23))
  {
    case 1u:
      uint64_t v6 = sub_10019E880((uint64_t)v23);
      long long v31 = *(_OWORD *)(v6 + 112);
      long long v32 = *(_OWORD *)(v6 + 128);
      long long v33 = *(_OWORD *)(v6 + 144);
      char v34 = *(unsigned char *)(v6 + 160);
      long long v27 = *(_OWORD *)(v6 + 48);
      long long v28 = *(_OWORD *)(v6 + 64);
      long long v29 = *(_OWORD *)(v6 + 80);
      long long v30 = *(_OWORD *)(v6 + 96);
      long long v24 = *(_OWORD *)v6;
      long long v25 = *(_OWORD *)(v6 + 16);
      long long v26 = *(_OWORD *)(v6 + 32);
      Hasher._combine(_:)(1uLL);
      sub_10019E7C0(v39, (uint64_t)v21);
      uint64_t v7 = sub_10019E880((uint64_t)v21);
      sub_10019E890(v7);
      IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(a1);
      goto LABEL_14;
    case 2u:
      uint64_t v8 = (char *)sub_10019E880((uint64_t)v23);
      uint64_t v9 = *v8;
      *(_OWORD *)long long v21 = *(_OWORD *)(v8 + 1);
      *(_OWORD *)&v21[16]  = *(_OWORD *)(v8 + 17);
      *(_OWORD *)&v21[32]  = *(_OWORD *)(v8 + 33);
      *(void *)&v21[47]  = *((void *)v8 + 6);
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(word_1003C4618[v9]);
      long long v35 = *(_OWORD *)&v21[7];
      long long v36 = *(_OWORD *)&v21[23];
      long long v37 = *(_OWORD *)&v21[39];
      if (*(void *)&v21[23] >> 60 == 15)
      {
        Hasher._combine(_:)(0);
        sub_10019E7C0(v39, (uint64_t)&v24);
        long long v10 = (void *)sub_10019E880((uint64_t)&v24);
        uint64_t v11 = v10[5];
        unint64_t v12 = v10[6];
        sub_10006E968(v10[1], v10[2], v10[3]);
        sub_100038004(v11, v12);
      }
      else
      {
        uint64_t v17 = *((void *)&v35 + 1);
        uint64_t v18 = v35;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v18);
        sub_10019E80C((uint64_t)v1, sub_10006E808);
        sub_10006E968(v18, v17, *(unint64_t *)&v21[23]);
        Data.hash(into:)();
        sub_10006E0D8(v18, v17, *(unint64_t *)&v21[23]);
      }
      sub_10006EC68((uint64_t)&v36 + 8, (uint64_t)&v38, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v38, (uint64_t)&v24, &qword_1004814F8);
      if (v24 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(0x13u);
      }
      unint64_t v19 = *((void *)&v37 + 1);
      if (*((void *)&v37 + 1) >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v20 = v37;
        Hasher._combine(_:)(1u);
        sub_100013D44(v20, v19);
        Data.hash(into:)();
        sub_10000C95C(v20, v19);
      }
      goto LABEL_14;
    case 3u:
      uint64_t v13 = sub_10019E880((uint64_t)v23);
      uint64_t v14 = *(char *)(v13 + 4);
      Swift::UInt8 v15 = *(unsigned char *)v13;
      Swift::UInt16 v16 = *(_WORD *)(v13 + 2);
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v15);
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(word_1003C4618[v14]);
      return;
    default:
      uint64_t v4 = sub_10019E880((uint64_t)v23);
      long long v31 = *(_OWORD *)(v4 + 112);
      long long v32 = *(_OWORD *)(v4 + 128);
      long long v33 = *(_OWORD *)(v4 + 144);
      char v34 = *(unsigned char *)(v4 + 160);
      long long v27 = *(_OWORD *)(v4 + 48);
      long long v28 = *(_OWORD *)(v4 + 64);
      long long v29 = *(_OWORD *)(v4 + 80);
      long long v30 = *(_OWORD *)(v4 + 96);
      long long v24 = *(_OWORD *)v4;
      long long v25 = *(_OWORD *)(v4 + 16);
      long long v26 = *(_OWORD *)(v4 + 32);
      Hasher._combine(_:)(0);
      sub_10019E7C0(v39, (uint64_t)v21);
      uint64_t v5 = sub_10019E880((uint64_t)v21);
      sub_10019E890(v5);
      IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(a1);
LABEL_14:
      sub_10019E80C(v2, sub_10006DF78);
      return;
  }
}

Swift::Int IEEE80211Frame.Management.Authentication.hashValue.getter()
{
  return sub_10019A270((void (*)(unsigned char *))IEEE80211Frame.Management.Authentication.hash(into:));
}

Swift::Int sub_10019894C(uint64_t a1, uint64_t a2)
{
  return sub_10019A2E4(a1, a2, (void (*)(uint64_t, unsigned char *))sub_10019E7C0, (void (*)(uint64_t *))IEEE80211Frame.Management.Authentication.hash(into:));
}

void sub_100198978(uint64_t a1)
{
  sub_10019E7C0(v1, (uint64_t)v3);
  IEEE80211Frame.Management.Authentication.hash(into:)(a1);
}

Swift::Int sub_1001989B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019A3B4(a1, a2, a3, (void (*)(uint64_t, unsigned char *))sub_10019E7C0, (void (*)(uint64_t *))IEEE80211Frame.Management.Authentication.hash(into:));
}

uint64_t IEEE80211Frame.Management.Authentication.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10019EF24(a1, (uint64_t)v5);
  if (!v2) {
    return sub_10019E7C0(v5, a2);
  }
  return result;
}

uint64_t sub_100198A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10019A448(a1, a2, a3, a4, (void (*)(uint64_t, unsigned char *))sub_10019E7C0, (uint64_t (*)(unsigned char *, unsigned char *))_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0);
}

unint64_t IEEE80211Frame.Management.ActionFrame.Category.rawValue.getter(char a1)
{
  return 0x7F7E0907060504uLL >> (8 * a1);
}

BOOL sub_100198A7C(unsigned char *a1, unsigned char *a2)
{
  return ((0x7F7E0907060504uLL >> (8 * *a1)) & 0x7F) == ((0x7F7E0907060504uLL >> (8 * *a2)) & 0x7F);
}

uint64_t sub_100198AB8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_100198AE4(unsigned char *a1@<X8>)
{
  *a1  = 0x7F7E0907060504uLL >> (8 * *v1);
}

Swift::Int sub_100198B08()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_100198B64()
{
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * *v0));
}

Swift::Int sub_100198BA8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_100198C00()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100198C60()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL IEEE80211Frame.Management.ActionFrame.PublicActionField.init(rawValue:)(char a1)
{
  return a1 != 9;
}

uint64_t IEEE80211Frame.Management.ActionFrame.PublicActionField.rawValue.getter()
{
  return 9;
}

unsigned char *sub_100198CC8@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 9;
  return result;
}

Swift::Int sub_100198CDC()
{
  return Hasher._finalize()();
}

void sub_100198D20()
{
}

Swift::Int sub_100198D48()
{
  return Hasher._finalize()();
}

uint64_t sub_100198D88()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100198DE8()
{
  return RawRepresentable<>.encode(to:)();
}

void IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 30)
  {
    if (a2 >> 30 != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a2);
    if ((a2 & 0x100) != 0) {
      Swift::UInt8 v8 = 3;
    }
    else {
      Swift::UInt8 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(BYTE2(a2));
    Hasher._combine(_:)(HIDWORD(a2));
    Hasher._combine(_:)(a3);
    Swift::UInt v9 = *(void *)(a4 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      uint64_t v10 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
      uint64_t v11 = a4 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      uint64_t v12 = *(void *)(v10 + 72);
      swift_bridgeObjectRetain();
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)(a1);
        v11 += v12;
        --v9;
      }
      while (v9);
      goto LABEL_17;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if (a2 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_1003C4691[(char)a2]);
    }
    Swift::UInt v13 = *(void *)(a3 + 16);
    Hasher._combine(_:)(v13);
    if (v13)
    {
      uint64_t v14 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
      uint64_t v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      swift_bridgeObjectRetain();
      do
      {
        NANAttribute.hash(into:)(a1);
        v15 += v16;
        --v13;
      }
      while (v13);
LABEL_17:
      sub_10006DE90(a2);
    }
  }
}

Swift::Int IEEE80211Frame.Management.ActionFrame.Contents.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001990D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100199134(uint64_t a1)
{
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_100199140()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100199198(uint64_t a1, uint64_t *a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *a2, a2[1], a2[2]);
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006DE90(v3[1]);
  v3[1]  = a1;
  void v3[2] = a2;
  void v3[3] = a3;
  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.nanActionFrame.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC0000000) != 0) {
    return 0;
  }
  uint64_t v2 = a2;
  sub_10006EAC4(a2);
  return v2;
}

uint64_t IEEE80211Frame.Management.ActionFrame.nanActionFrame.setter(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    unsigned __int8 v4 = result;
    uint64_t v5 = v2[1];
    if ((v5 & 0xC0000000) != 0)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t result = sub_10006DE90(v5);
      v2[1]  = v4;
      v2[2]  = a2;
      v2[3]  = 0;
    }
  }
  return result;
}

unsigned __int8 *(*IEEE80211Frame.Management.ActionFrame.nanActionFrame.modify(void *a1))(unsigned __int8 *result, char a2)
{
  a1[2]  = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 0xC0000000) != 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v4 = v3;
    sub_10006EAC4(v3);
  }
  *a1  = v4;
  a1[1]  = v5;
  return sub_10019937C;
}

unsigned __int8 *sub_10019937C(unsigned __int8 *result, char a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (a2)
  {
    if (v2)
    {
      uint64_t v3 = (void *)*((void *)result + 2);
      uint64_t v4 = v3[1];
      if ((v4 & 0xC0000000) == 0)
      {
        uint64_t v5 = *result;
        swift_bridgeObjectRetain();
        sub_10006DE90(v4);
        v3[1]  = v5;
        void v3[2] = v2;
        void v3[3] = 0;
      }
    }
  }
  else
  {
    if (!v2) {
      return result;
    }
    uint64_t v6 = (uint64_t *)*((void *)result + 2);
    if ((v6[1] & 0xC0000000) == 0)
    {
      uint64_t v7 = *result;
      uint64_t result = (unsigned __int8 *)sub_10006DE90(v6[1]);
      v6[1]  = v7;
      _OWORD v6[2] = v2;
      v6[3]  = 0;
      return result;
    }
  }

  return (unsigned __int8 *)swift_bridgeObjectRelease();
}

unint64_t IEEE80211Frame.Management.ActionFrame.awdlActionFrame.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC0000000) != 0x40000000) {
    return 0;
  }
  unint64_t v2 = a2 & 0xFFFFFFFF00FF01FFLL;
  sub_10006EAC4(a2);
  return v2;
}

uint64_t IEEE80211Frame.Management.ActionFrame.awdlActionFrame.setter(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    if ((v3[1] & 0xC0000000) == 0x40000000)
    {
      uint64_t result = sub_10006DE90(v3[1]);
      v3[1]  = v5 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
      void v3[2] = a2;
      void v3[3] = a3;
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t (*IEEE80211Frame.Management.ActionFrame.awdlActionFrame.modify(unint64_t *a1))(uint64_t result, char a2)
{
  a1[3]  = (unint64_t)v1;
  uint64_t v3 = v1[1];
  if ((v3 & 0xC0000000) == 0x40000000)
  {
    uint64_t v4 = v1[2];
    unint64_t v5 = v1[3];
    unint64_t v6 = v3 & 0xFFFFFFFF00FF01FFLL;
    unint64_t v7 = v4;
    sub_10006EAC4(v3);
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v5 = 0;
  }
  *a1  = v6;
  a1[1]  = v7;
  a1[2]  = v5;
  return sub_1001995D8;
}

uint64_t sub_1001995D8(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2)
  {
    if (v2)
    {
      uint64_t v3 = *(void **)(result + 24);
      uint64_t v4 = v3[1];
      if ((v4 & 0xC0000000) == 0x40000000)
      {
        uint64_t v5 = *(unsigned int *)(result + 8);
        uint64_t v6 = *(void *)result;
        swift_bridgeObjectRetain();
        sub_10006DE90(v4);
        v3[1]  = v6 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
        void v3[2] = v5;
        void v3[3] = v2;
      }
    }
  }
  else
  {
    if (!v2) {
      return result;
    }
    unint64_t v7 = *(uint64_t **)(result + 24);
    if ((v7[1] & 0xC0000000) == 0x40000000)
    {
      uint64_t v8 = *(unsigned int *)(result + 8);
      uint64_t v9 = *(void *)result;
      uint64_t result = sub_10006DE90(v7[1]);
      v7[1]  = v9 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
      _OWORD v7[2] = v8;
      v7[3]  = v2;
      return result;
    }
  }

  return swift_bridgeObjectRelease();
}

void IEEE80211Frame.Management.ActionFrame.hash(into:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * a2));
  if (a3 >> 30)
  {
    if (a3 >> 30 != 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_17;
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a3);
    if ((a3 & 0x100) != 0) {
      Swift::UInt8 v9 = 3;
    }
    else {
      Swift::UInt8 v9 = 0;
    }
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(BYTE2(a3));
    Hasher._combine(_:)(HIDWORD(a3));
    Hasher._combine(_:)(a4);
    Swift::UInt v10 = *(void *)(a5 + 16);
    Hasher._combine(_:)(v10);
    if (v10)
    {
      uint64_t v11 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
      uint64_t v12 = a5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      sub_10006EAC4(a3);
      uint64_t v13 = *(void *)(v11 + 72);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)(a1);
        v12 += v13;
        --v10;
      }
      while (v10);
      goto LABEL_17;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if (a3 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_1003C4691[(char)a3]);
    }
    Swift::UInt v14 = *(void *)(a4 + 16);
    Hasher._combine(_:)(v14);
    if (v14)
    {
      uint64_t v15 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
      uint64_t v16 = a4 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      sub_10006EAC4(a3);
      uint64_t v17 = *(void *)(v15 + 72);
      do
      {
        NANAttribute.hash(into:)(a1);
        v16 += v17;
        --v14;
      }
      while (v14);
LABEL_17:
      sub_10006DE90(a3);
    }
  }
}

Swift::Int IEEE80211Frame.Management.ActionFrame.hashValue.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001999BC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v6, v4, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100199A20(uint64_t a1)
{
  IEEE80211Frame.Management.ActionFrame.hash(into:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_100199A30()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v6, v4, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100199A90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10019F2B0(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
    *(void *)(a2 + 24)  = v7;
  }
  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.init(from:)(void *a1)
{
  return sub_10019F2B0(a1);
}

uint64_t sub_100199AEC(void *a1)
{
  return IEEE80211Frame.Management.ActionFrame.encode(to:)(a1, *v1, *((void *)v1 + 1));
}

uint64_t IEEE80211Frame.Management.ActionFrame.encode(to:)(void *a1, uint64_t a2, unsigned int a3)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v7, v8);
  sub_10019F594();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    if (a3 >> 30)
    {
      if (a3 >> 30 != 1)
      {
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v6 = xmmword_1003B00B0;
        *(unsigned char *)(v6 + 16)  = 2;
        swift_willThrow();
        return sub_100010754((uint64_t)v7);
      }
      sub_100039448((uint64_t)v7, v8);
      sub_10019F5E8();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_100039448((uint64_t)v7, v8);
      sub_10019F63C();
    }
    else
    {
      sub_100039448((uint64_t)v7, v8);
      sub_10019F690();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_100039448((uint64_t)v7, v8);
      sub_10019F5E8();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_100039448((uint64_t)v7, v8);
      sub_10019F6E4();
    }
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v7);
}

uint64_t sub_100199D8C(void *a1, void *a2)
{
  return static IEEE80211Frame.Management.ActionFrame.__derived_struct_equals(_:_:)(*(unsigned __int8 *)a1, a1[1], a1[2], a1[3], *(unsigned __int8 *)a2, a2[1], a2[2], a2[3]);
}

void IEEE80211Frame.Management.hash(into:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  sub_10019E7C0(v1, (uint64_t)v33);
  sub_10019E7C0(v33, (uint64_t)v42);
  sub_10019E7C0(v1, (uint64_t)v34);
  switch(sub_10019F738((uint64_t)v34))
  {
    case 1u:
      uint64_t v11 = (long long *)sub_10019F744((uint64_t)v34);
      sub_10019E7C0(v11, (uint64_t)v35);
      Hasher._combine(_:)(1uLL);
      sub_10019E7C0(v42, (uint64_t)v32);
      uint64_t v12 = sub_10019F744((uint64_t)v32);
      sub_10019E80C(v12, sub_10006E808);
      IEEE80211Frame.Management.Authentication.hash(into:)(a1);
      goto LABEL_24;
    case 2u:
      uint64_t v13 = (_OWORD *)sub_10019F744((uint64_t)v34);
      long long v14 = v13[1];
      v32[0]  = *v13;
      v32[1]  = v14;
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * LOBYTE(v32[0])));
      sub_1001342C8((__n128 *)((char *)v32 + 8), &v36);
      sub_1001342C8(&v36, &v37);
      unint64_t v15 = v37.n128_u64[0];
      if (v37.n128_u32[0] >> 30)
      {
        if (v37.n128_u32[0] >> 30 != 1)
        {
          Hasher._combine(_:)(0);
LABEL_24:
          sub_10019E80C(v2, sub_10006DEB0);
          return;
        }
        v37.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
        Swift::UInt32 v16 = v37.n128_u32[2];
        uint64_t v17 = v38;
        Hasher._combine(_:)(2uLL);
        Hasher._combine(_:)(8u);
        Hasher._combine(_:)(v15);
        if ((v15 & 0x100) != 0) {
          Swift::UInt8 v18 = 3;
        }
        else {
          Swift::UInt8 v18 = 0;
        }
        Hasher._combine(_:)(v18);
        Hasher._combine(_:)(BYTE2(v15));
        Hasher._combine(_:)(HIDWORD(v15));
        Hasher._combine(_:)(v16);
        Swift::UInt v19 = *(void *)(v17 + 16);
        Hasher._combine(_:)(v19);
        if (v19)
        {
          uint64_t v20 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
          uint64_t v21 = v17 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
          sub_10019E7C0(v42, (uint64_t)v35);
          uint64_t v22 = sub_10019F744((uint64_t)v35);
          sub_10006EAC4(*(void *)(v22 + 8));
          uint64_t v23 = *(void *)(v20 + 72);
          do
          {
            AWDLActionFrame.AWDLAttribute.hash(into:)(a1);
            v21 += v23;
            --v19;
          }
          while (v19);
          goto LABEL_24;
        }
      }
      else
      {
        v37.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
        __n128 v39 = v37;
        Hasher._combine(_:)(1uLL);
        sub_100134384(&v39, &v40);
        sub_100134384(&v40, &v41);
        uint64_t v25 = v41;
        if (v41 == 14)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(byte_1003C4691[v25]);
        }
        unint64_t v26 = v39.n128_u64[1];
        Swift::UInt v27 = *(void *)(v39.n128_u64[1] + 16);
        Hasher._combine(_:)(v27);
        if (v27)
        {
          uint64_t v28 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
          unint64_t v29 = v26 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
          sub_10019E7C0(v42, (uint64_t)v35);
          uint64_t v30 = sub_10019F744((uint64_t)v35);
          sub_10006EAC4(*(void *)(v30 + 8));
          uint64_t v31 = *(void *)(v28 + 72);
          do
          {
            NANAttribute.hash(into:)(a1);
            v29 += v31;
            --v27;
          }
          while (v27);
          goto LABEL_24;
        }
      }
      return;
    case 3u:
      uint64_t v24 = *(char *)sub_10019F744((uint64_t)v34);
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(byte_1003C460A[v24]);
      return;
    default:
      uint64_t v4 = sub_10019F744((uint64_t)v34);
      Swift::UInt64 v5 = *(void *)v4;
      uint64_t v6 = *(void *)(v4 + 16);
      Swift::UInt16 v7 = *(_WORD *)(v4 + 8);
      Swift::UInt16 v8 = *(_WORD *)(v4 + 10);
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Swift::UInt v9 = *(void *)(v6 + 16);
      Hasher._combine(_:)(v9);
      if (!v9) {
        return;
      }
      uint64_t v10 = v6 + 32;
      sub_10019E7C0(v42, (uint64_t)v35);
      sub_10019F744((uint64_t)v35);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000A66D8(v10, (uint64_t)v32);
        sub_1000A6734((uint64_t)v32, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
        IEEE80211InformationElement.hash(into:)(a1);
        sub_1000A6734((uint64_t)v32, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        v10 += 56;
        --v9;
      }
      while (v9);
      goto LABEL_24;
  }
}

Swift::Int IEEE80211Frame.Management.hashValue.getter()
{
  return sub_10019A270((void (*)(unsigned char *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10019A270(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10019A2B8(uint64_t a1, uint64_t a2)
{
  return sub_10019A2E4(a1, a2, (void (*)(uint64_t, unsigned char *))sub_10013BDA0, (void (*)(uint64_t *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10019A2E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *), void (*a4)(uint64_t *))
{
  a3(v4, v8);
  Hasher.init(_seed:)();
  a4(&v7);
  return Hasher._finalize()();
}

void sub_10019A348(uint64_t a1)
{
  sub_10019E7C0(v1, (uint64_t)v3);
  IEEE80211Frame.Management.hash(into:)(a1);
}

Swift::Int sub_10019A388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019A3B4(a1, a2, a3, (void (*)(uint64_t, unsigned char *))sub_10013BDA0, (void (*)(uint64_t *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10019A3B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unsigned char *), void (*a5)(uint64_t *))
{
  a4(v5, v9);
  Hasher.init(_seed:)();
  a5(&v8);
  return Hasher._finalize()();
}

uint64_t sub_10019A41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10019A448(a1, a2, a3, a4, (void (*)(uint64_t, unsigned char *))sub_10013BDA0, (uint64_t (*)(unsigned char *, unsigned char *))_s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0);
}

uint64_t sub_10019A448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unsigned char *), uint64_t (*a6)(unsigned char *, unsigned char *))
{
  a5(a1, v10);
  a5(a2, v11);
  return a6(v10, v11) & 1;
}

double IEEE80211Frame.init(header:contents:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, long long *a4@<X3>, _OWORD *a5@<X8>)
{
  char v5 = a3;
  char v6 = a2;
  __int16 v7 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v11 = a1 >> 40;
  unint64_t v12 = HIWORD(a1);
  unint64_t v13 = HIBYTE(a1);
  unint64_t v14 = a2 >> 8;
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = a2 >> 40;
  unint64_t v25 = HIWORD(a2);
  unint64_t v26 = HIBYTE(a2);
  unint64_t v27 = a3 >> 8;
  unint64_t v28 = a3 >> 16;
  unint64_t v29 = a3 >> 24;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v31 = a3 >> 40;
  unint64_t v32 = HIWORD(a3);
  sub_10019E7C0(a4, (uint64_t)v33);
  sub_10019E7C0(v33, (uint64_t)&v34);
  LOWORD(v35)  = v7;
  WORD1(v35)  = v9;
  BYTE4(v35)  = v10;
  BYTE5(v35)  = v11;
  BYTE6(v35)  = v12;
  BYTE7(v35)  = v13;
  BYTE8(v35)  = v6;
  BYTE9(v35)  = v14;
  BYTE10(v35)  = v21;
  BYTE11(v35)  = v22;
  BYTE12(v35)  = v23;
  BYTE13(v35)  = v24;
  BYTE14(v35)  = v25;
  HIBYTE(v35)  = v26;
  LOBYTE(v36)  = v5;
  BYTE1(v36)  = v27;
  BYTE2(v36)  = v28;
  BYTE3(v36)  = v29;
  BYTE4(v36)  = v30;
  BYTE5(v36)  = v31;
  WORD3(v36)  = v32;
  sub_10019E7C0(&v34, (uint64_t)&v36 + 8);
  long long v15 = v44;
  a5[8]  = v43;
  a5[9]  = v15;
  a5[10]  = v45[0];
  *(_OWORD *)((char *)a5 + 169)  = *(_OWORD *)((char *)v45 + 9);
  long long v16 = v40;
  a5[4]  = v39;
  a5[5]  = v16;
  long long v17 = v42;
  a5[6]  = v41;
  a5[7]  = v17;
  long long v18 = v36;
  *a5  = v35;
  a5[1]  = v18;
  double result = *(double *)&v37;
  long long v20 = v38;
  a5[2]  = v37;
  a5[3]  = v20;
  return result;
}

double IEEE80211Frame.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10019E96C(a1, v10);
  if (!v2)
  {
    long long v5 = v18;
    a2[8]  = v17;
    a2[9]  = v5;
    a2[10]  = v19[0];
    *(_OWORD *)((char *)a2 + 169)  = *(_OWORD *)((char *)v19 + 9);
    long long v6 = v14;
    a2[4]  = v13;
    a2[5]  = v6;
    long long v7 = v16;
    a2[6]  = v15;
    a2[7]  = v7;
    long long v8 = v10[1];
    *a2  = v10[0];
    a2[1]  = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    a2[2]  = v11;
    a2[3]  = v9;
  }
  return result;
}

uint64_t IEEE80211Frame.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  long long v9 = *v1;
  *(void *)&long long v10 = *((void *)v1 + 2);
  sub_100039448((uint64_t)v11, v12);
  sub_10019F754();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    sub_10019E7C0((long long *)((char *)v1 + 24), (uint64_t)v13);
    sub_10019E7C0(v13, (uint64_t)v14);
    if (sub_10013BD8C((uint64_t)v14))
    {
LABEL_3:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v3 = xmmword_1003B00B0;
      *(unsigned char *)(v3 + 16)  = 2;
      swift_willThrow();
    }
    else
    {
      sub_10019E7C0(v14, (uint64_t)v15);
      sub_10019E7C0(v15, (uint64_t)v16);
      switch(sub_10019F738((uint64_t)v16))
      {
        case 1u:
          long long v5 = (long long *)sub_10019F744((uint64_t)v16);
          sub_10019E7C0(v5, (uint64_t)v21);
          sub_10019E7C0(v21, (uint64_t)&v9);
          sub_100039448((uint64_t)v11, v12);
          sub_10019F7A8();
          break;
        case 2u:
          long long v6 = (long long *)sub_10019F744((uint64_t)v16);
          long long v7 = v6[1];
          long long v19 = *v6;
          long long v20 = v7;
          long long v9 = v19;
          long long v10 = v7;
          sub_100039448((uint64_t)v11, v12);
          sub_10019F7FC();
          break;
        case 3u:
          sub_10019F744((uint64_t)v16);
          goto LABEL_3;
        default:
          uint64_t v4 = sub_10019F744((uint64_t)v16);
          uint64_t v18 = *(void *)(v4 + 16);
          long long v17 = *(_OWORD *)v4;
          long long v9 = v17;
          *(void *)&long long v10 = v18;
          sub_100039448((uint64_t)v11, v12);
          sub_10019F850();
          break;
      }
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
  }
  return sub_100010754((uint64_t)v11);
}

uint64_t IEEE80211Frame.hash(into:)(uint64_t a1)
{
  IEEE80211Frame.Header.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
  sub_10019E7C0((long long *)(v1 + 24), (uint64_t)v5);
  sub_10019E7C0(v5, (uint64_t)v7);
  switch(sub_10013BD8C((uint64_t)v7))
  {
    case 1u:
      Swift::UInt v3 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v3 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v3 = 3;
LABEL_6:
      Hasher._combine(_:)(v3);
      break;
    default:
      sub_10019E7C0(v7, (uint64_t)v8);
      sub_10019E7C0(v8, (uint64_t)v6);
      Hasher._combine(_:)(0);
      sub_10019C990(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      IEEE80211Frame.Management.hash(into:)(a1);
      break;
  }
  return sub_10019C990(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
}

Swift::Int IEEE80211Frame.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 14);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 15);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 19);
  Swift::UInt8 v20 = *(unsigned char *)(v0 + 20);
  Swift::UInt8 v21 = *(unsigned char *)(v0 + 21);
  Swift::UInt16 v22 = *(_WORD *)(v0 + 22);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  sub_10019E7C0((long long *)(v0 + 24), (uint64_t)v24);
  sub_10019E7C0(v24, (uint64_t)v26);
  switch(sub_10013BD8C((uint64_t)v26))
  {
    case 1u:
      Swift::UInt v9 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v9 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v9 = 3;
LABEL_6:
      Hasher._combine(_:)(v9);
      break;
    default:
      sub_10019E7C0(v26, (uint64_t)v27);
      sub_10019E7C0(v27, (uint64_t)v25);
      Hasher._combine(_:)(0);
      sub_10019C990(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      IEEE80211Frame.Management.hash(into:)((uint64_t)v23);
      break;
  }
  sub_10019C990(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
  return Hasher._finalize()();
}

uint64_t sub_10019AD10(void *a1)
{
  return IEEE80211Frame.encode(to:)(a1);
}

Swift::Int sub_10019AD74()
{
  return IEEE80211Frame.hashValue.getter();
}

uint64_t sub_10019ADD8(uint64_t a1)
{
  long long v3 = v1[9];
  v12[7]  = v1[8];
  v12[8]  = v3;
  v13[0]  = v1[10];
  *(_OWORD *)((char *)v13 + 9)  = *(long long *)((char *)v1 + 169);
  long long v4 = v1[5];
  void v12[3] = v1[4];
  void v12[4] = v4;
  long long v5 = v1[7];
  v12[5]  = v1[6];
  v12[6]  = v5;
  long long v6 = v1[1];
  long long v11 = *v1;
  v12[0]  = v6;
  long long v7 = v1[3];
  v12[1]  = v1[2];
  void v12[2] = v7;
  IEEE80211Frame.Header.hash(into:)(a1, v11, *((unint64_t *)&v11 + 1), *(unint64_t *)&v12[0]);
  sub_10019E7C0((_OWORD *)((char *)v12 + 8), (uint64_t)v14);
  switch(sub_10013BD8C((uint64_t)v14))
  {
    case 1u:
      Swift::UInt v8 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v8 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v8 = 3;
LABEL_6:
      Hasher._combine(_:)(v8);
      break;
    default:
      sub_10019E7C0(v14, (uint64_t)v10);
      Hasher._combine(_:)(0);
      sub_10019C990((uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      IEEE80211Frame.Management.hash(into:)(a1);
      break;
  }
  return sub_10019C990((uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
}

Swift::Int sub_10019AF14()
{
  long long v1 = v0[9];
  v11[7]  = v0[8];
  v11[8]  = v1;
  v12[0]  = v0[10];
  *(_OWORD *)((char *)v12 + 9)  = *(long long *)((char *)v0 + 169);
  long long v2 = v0[5];
  v11[3]  = v0[4];
  v11[4]  = v2;
  long long v3 = v0[7];
  v11[5]  = v0[6];
  v11[6]  = v3;
  long long v4 = v0[1];
  long long v10 = *v0;
  v11[0]  = v4;
  long long v5 = v0[3];
  v11[1]  = v0[2];
  _OWORD v11[2] = v5;
  Hasher.init(_seed:)();
  IEEE80211Frame.Header.hash(into:)((int)v8, v10, *((unint64_t *)&v10 + 1), *(unint64_t *)&v11[0]);
  sub_10019E7C0((_OWORD *)((char *)v11 + 8), (uint64_t)v13);
  switch(sub_10013BD8C((uint64_t)v13))
  {
    case 1u:
      Swift::UInt v6 = 1;
      goto LABEL_6;
    case 2u:
      Swift::UInt v6 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v6 = 3;
LABEL_6:
      Hasher._combine(_:)(v6);
      break;
    default:
      sub_10019E7C0(v13, (uint64_t)v9);
      Hasher._combine(_:)(0);
      sub_10019C990((uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      IEEE80211Frame.Management.hash(into:)((uint64_t)v8);
      break;
  }
  sub_10019C990((uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
  return Hasher._finalize()();
}

uint64_t sub_10019B064(long long *a1, long long *a2)
{
  long long v2 = a1[9];
  v19[7]  = a1[8];
  v19[8]  = v2;
  v20[0]  = a1[10];
  *(_OWORD *)((char *)v20 + 9)  = *(long long *)((char *)a1 + 169);
  long long v3 = a1[5];
  v19[3]  = a1[4];
  v19[4]  = v3;
  long long v4 = a1[7];
  v19[5]  = a1[6];
  v19[6]  = v4;
  long long v5 = a1[1];
  long long v18 = *a1;
  v19[0]  = v5;
  long long v6 = a1[3];
  v19[1]  = a1[2];
  v19[2]  = v6;
  long long v7 = a2[9];
  v22[7]  = a2[8];
  v22[8]  = v7;
  v23[0]  = a2[10];
  *(_OWORD *)((char *)v23 + 9)  = *(long long *)((char *)a2 + 169);
  long long v8 = a2[5];
  v22[3]  = a2[4];
  v22[4]  = v8;
  long long v9 = a2[7];
  v22[5]  = a2[6];
  v22[6]  = v9;
  long long v10 = a2[1];
  long long v21 = *a2;
  v22[0]  = v10;
  long long v11 = a2[3];
  v22[1]  = a2[2];
  v22[2]  = v11;
  if (!_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(v18, *((uint64_t *)&v18 + 1), *(unint64_t *)&v19[0], v21, *((uint64_t *)&v21 + 1), *(unint64_t *)&v22[0]))return 0; {
  sub_10019E7C0((_OWORD *)((char *)v19 + 8), (uint64_t)v15);
  }
  switch(sub_10013BD8C((uint64_t)v15))
  {
    case 1u:
      sub_10019E7C0((_OWORD *)((char *)v22 + 8), (uint64_t)v17);
      if (sub_10013BD8C((uint64_t)v17) != 1) {
        return 0;
      }
      break;
    case 2u:
      sub_10019E7C0((_OWORD *)((char *)v22 + 8), (uint64_t)v17);
      if (sub_10013BD8C((uint64_t)v17) != 2) {
        return 0;
      }
      break;
    case 3u:
      sub_10019E7C0((_OWORD *)((char *)v22 + 8), (uint64_t)v17);
      if (sub_10013BD8C((uint64_t)v17) != 3) {
        return 0;
      }
      break;
    default:
      sub_10019E7C0(v15, (uint64_t)v16);
      sub_10019E7C0((_OWORD *)((char *)v22 + 8), (uint64_t)v14);
      if (sub_10013BD8C((uint64_t)v14)) {
        return 0;
      }
      sub_10019E7C0(v14, (uint64_t)v17);
      sub_10019C990((uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      sub_10019C990((uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
      BOOL v12 = static IEEE80211Frame.Management.__derived_enum_equals(_:_:)(v16, v17);
      sub_10019C990((uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      sub_10019C990((uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      if (!v12) {
        return 0;
      }
      break;
  }
  return 1;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    if ((a8 & 0x2000000000000000) == 0 || (unsigned __int16)a1 != (unsigned __int16)a5) {
      return 0;
    }
    sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_100013D44);
    sub_10019E164(a5, a6, a7, a8, (void (*)(void))sub_100013D44);
    uint64_t v16 = a2;
    unint64_t v17 = a3;
    uint64_t v18 = a6;
    unint64_t v19 = a7;
  }
  else
  {
    if ((a8 & 0x2000000000000000) != 0) {
      return 0;
    }
    sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_100013D44);
    sub_10019E164(a5, a6, a7, a8, (void (*)(void))sub_100013D44);
    if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, a5, a6) & 1) == 0)
    {
      sub_10019E164(a5, a6, a7, a8, (void (*)(void))sub_10000C970);
      sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_10000C970);
      return 0;
    }
    uint64_t v16 = a3;
    unint64_t v17 = a4;
    uint64_t v18 = a7;
    unint64_t v19 = a8;
  }
  char v20 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v16, v17, v18, v19);
  sub_10019E164(a5, a6, a7, a8, (void (*)(void))sub_10000C970);
  sub_10019E164(a1, a2, a3, a4, (void (*)(void))sub_10000C970);
  return (v20 & 1) != 0;
}

BOOL _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  LOBYTE(v16)  = BYTE4(a1);
  BYTE1(v16)  = BYTE5(a1);
  BYTE2(v16)  = BYTE6(a1);
  HIBYTE(v16)  = HIBYTE(a1);
  LOBYTE(v11)  = BYTE4(a4);
  BYTE1(v11)  = BYTE5(a4);
  BYTE2(v11)  = BYTE6(a4);
  HIBYTE(v11)  = HIBYTE(a4);
  if (v16 != v11 || (unsigned __int16)a2 != (unsigned __int16)a5) {
    return 0;
  }
  LOBYTE(v17)  = BYTE2(a2);
  BYTE1(v17)  = BYTE3(a2);
  BYTE2(v17)  = BYTE4(a2);
  HIBYTE(v17)  = BYTE5(a2);
  LOBYTE(v19)  = BYTE6(a2);
  HIBYTE(v19)  = HIBYTE(a2);
  LOBYTE(v12)  = BYTE2(a5);
  BYTE1(v12)  = BYTE3(a5);
  BYTE2(v12)  = BYTE4(a5);
  HIBYTE(v12)  = BYTE5(a5);
  LOBYTE(v14)  = BYTE6(a5);
  HIBYTE(v14)  = HIBYTE(a5);
  if (v17 != v12 || v19 != v14) {
    return 0;
  }
  LOWORD(v18)  = a3;
  BYTE2(v18)  = BYTE2(a3);
  HIBYTE(v18)  = BYTE3(a3);
  LOBYTE(v20)  = BYTE4(a3);
  HIBYTE(v20)  = BYTE5(a3);
  LOWORD(v13)  = a6;
  BYTE2(v13)  = BYTE2(a6);
  HIBYTE(v13)  = BYTE3(a6);
  LOBYTE(v15)  = BYTE4(a6);
  HIBYTE(v15)  = BYTE5(a6);
  return v18 == v13 && v20 == v15 && HIWORD(a3) == HIWORD(a6);
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(long long *a1, long long *a2)
{
  sub_10019E7C0(a1, (uint64_t)v27);
  switch(sub_10019F738((uint64_t)v27))
  {
    case 1u:
      int v11 = (long long *)sub_10019F744((uint64_t)v27);
      sub_10019E7C0(v11, (uint64_t)v28);
      sub_10019E7C0(a2, (uint64_t)v25);
      if (sub_10019F738((uint64_t)v25) != 1) {
        goto LABEL_39;
      }
      int v12 = (long long *)sub_10019F744((uint64_t)v25);
      sub_10019E7C0(v12, (uint64_t)v26);
      sub_10019E80C((uint64_t)a1, sub_10006E740);
      sub_10019E80C((uint64_t)a2, sub_10006E740);
      BOOL v13 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0(v28, v26);
      sub_10019E80C((uint64_t)a2, sub_10006DEB0);
      sub_10019E80C((uint64_t)a1, sub_10006DEB0);
      return v13;
    case 2u:
      __int16 v14 = (long long *)sub_10019F744((uint64_t)v27);
      long long v15 = v14[1];
      v26[0]  = *v14;
      v26[1]  = v15;
      sub_10019E7C0(a2, (uint64_t)v28);
      if (sub_10019F738((uint64_t)v28) != 2) {
        goto LABEL_39;
      }
      int v16 = (_OWORD *)sub_10019F744((uint64_t)v28);
      long long v17 = v16[1];
      v25[0]  = *v16;
      v25[1]  = v17;
      if (((0x7F7E0907060504uLL >> (8 * LOBYTE(v26[0]))) & 0x7F) != ((0x7F7E0907060504uLL >> (8 * LOBYTE(v25[0]))) & 0x7F)) {
        goto LABEL_39;
      }
      sub_1001342C8((__n128 *)((char *)v26 + 8), &v29);
      sub_1001342C8((__n128 *)((char *)v25 + 8), &v30);
      sub_1001342C8(&v29, &v33);
      unint64_t v18 = v33.n128_u64[0];
      if (v33.n128_u32[0] >> 30)
      {
        if (v33.n128_u32[0] >> 30 == 1)
        {
          v33.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
          unsigned __int32 v19 = v33.n128_u32[2];
          uint64_t v20 = v34;
          sub_1001342C8(&v30, (__n128 *)v32);
          unint64_t v21 = *(void *)v32;
          if ((*(_DWORD *)v32 & 0xC0000000) == 0x40000000)
          {
            *(void *)v32 &= 0xFFFFFFFF3FFFFFFFLL;
            if (v18 == v21
              && ((v18 & 0x100) == 0) != ((v21 >> 8) & 1)
              && BYTE2(v18) == BYTE2(v21)
              && HIDWORD(v18) == HIDWORD(v21)
              && v19 == *(_DWORD *)&v32[8]
              && (sub_10009A2D4(v20, *(uint64_t *)&v32[16]) & 1) != 0)
            {
              goto LABEL_38;
            }
          }
        }
        else
        {
          sub_1001342C8(&v30, (__n128 *)v32);
          if ((*(_DWORD *)v32 & 0xC0000000) == 0x80000000
            && *(void *)v32 == 0x80000000
            && *(_OWORD *)&v32[8] == 0)
          {
            goto LABEL_38;
          }
        }
        goto LABEL_39;
      }
      v33.n128_u64[0] &= 0xFFFFFFFF3FFFFFFFLL;
      __n128 v35 = v33;
      sub_1001342C8(&v30, (__n128 *)v32);
      if ((*(_DWORD *)v32 & 0xC0000000) != 0) {
        goto LABEL_39;
      }
      *(void *)v32 &= 0xFFFFFFFF3FFFFFFFLL;
      long long v31 = *(_OWORD *)v32;
      sub_100134384(&v35, &v36);
      sub_100134384(&v31, &v37);
      sub_100134384(&v36, &v39);
      uint64_t v23 = v39;
      if (v39 == 14)
      {
        sub_100134384(&v37, &v38);
        if (v38 != 14) {
          goto LABEL_39;
        }
      }
      else
      {
        sub_100134384(&v37, &v38);
        if (v38 == 14 || byte_1003C4691[v23] != byte_1003C4691[v38]) {
          goto LABEL_39;
        }
      }
      if ((_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v35.n128_i64[1], *((uint64_t *)&v31 + 1)) & 1) == 0)goto LABEL_39; {
      goto LABEL_38;
      }
    case 3u:
      uint64_t v22 = *(char *)sub_10019F744((uint64_t)v27);
      sub_10019E7C0(a2, (uint64_t)v28);
      if (sub_10019F738((uint64_t)v28) != 3) {
        goto LABEL_39;
      }
      BOOL v13 = byte_1003C460A[v22] == byte_1003C460A[*(char *)sub_10019F744((uint64_t)v28)];
      break;
    default:
      uint64_t v4 = sub_10019F744((uint64_t)v27);
      uint64_t v5 = *(void *)v4;
      int v6 = *(unsigned __int16 *)(v4 + 8);
      int v7 = *(unsigned __int16 *)(v4 + 10);
      uint64_t v8 = *(void *)(v4 + 16);
      sub_10019E7C0(a2, (uint64_t)v28);
      if (!sub_10019F738((uint64_t)v28)
        && (uint64_t v9 = sub_10019F744((uint64_t)v28), v5 == *(void *)v9)
        && (v6 == *(unsigned __int16 *)(v9 + 8) ? (BOOL v10 = v7 == *(unsigned __int16 *)(v9 + 10)) : (BOOL v10 = 0),
            v10 && (sub_10009A1CC(v8, *(void *)(v9 + 16)) & 1) != 0))
      {
LABEL_38:
        BOOL v13 = 1;
      }
      else
      {
LABEL_39:
        BOOL v13 = 0;
      }
      break;
  }
  return v13;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0(long long *a1, long long *a2)
{
  sub_10019E7C0(a1, (uint64_t)v45);
  switch(sub_10019E800((uint64_t)v45))
  {
    case 1u:
      uint64_t v12 = sub_10019E880((uint64_t)v45);
      long long v53 = *(_OWORD *)(v12 + 112);
      long long v54 = *(_OWORD *)(v12 + 128);
      long long v55 = *(_OWORD *)(v12 + 144);
      char v56 = *(unsigned char *)(v12 + 160);
      long long v49 = *(_OWORD *)(v12 + 48);
      long long v50 = *(_OWORD *)(v12 + 64);
      long long v51 = *(_OWORD *)(v12 + 80);
      long long v52 = *(_OWORD *)(v12 + 96);
      long long v46 = *(_OWORD *)v12;
      long long v47 = *(_OWORD *)(v12 + 16);
      long long v48 = *(_OWORD *)(v12 + 32);
      sub_10019E7C0(a2, (uint64_t)v36);
      if (sub_10019E800((uint64_t)v36) != 1) {
        return 0;
      }
      uint64_t v13 = sub_10019E880((uint64_t)v36);
      long long v14 = *(_OWORD *)(v13 + 144);
      long long v42 = *(_OWORD *)(v13 + 128);
      long long v43 = v14;
      char v44 = *(unsigned char *)(v13 + 160);
      long long v15 = *(_OWORD *)(v13 + 80);
      long long v38 = *(_OWORD *)(v13 + 64);
      long long v39 = v15;
      long long v16 = *(_OWORD *)(v13 + 112);
      long long v40 = *(_OWORD *)(v13 + 96);
      long long v41 = v16;
      long long v17 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)char v37 = *(_OWORD *)v13;
      *(_OWORD *)&v37[16]  = v17;
      long long v18 = *(_OWORD *)(v13 + 48);
      *(_OWORD *)&v37[32]  = *(_OWORD *)(v13 + 32);
      *(_OWORD *)&v37[48]  = v18;
      sub_10019E80C((uint64_t)a1, sub_10006E808);
      sub_10019E80C((uint64_t)a2, sub_10006E808);
      BOOL v11 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0((char *)&v46, v37);
      goto LABEL_6;
    case 2u:
      uint64_t v20 = (char *)sub_10019E880((uint64_t)v45);
      uint64_t v21 = *v20;
      long long v22 = *(_OWORD *)(v20 + 17);
      *(_OWORD *)char v37 = *(_OWORD *)(v20 + 1);
      *(_OWORD *)&v37[16]  = v22;
      *(_OWORD *)&v37[32]  = *(_OWORD *)(v20 + 33);
      *(void *)&v37[47]  = *((void *)v20 + 6);
      sub_10019E7C0(a2, (uint64_t)&v46);
      if (sub_10019E800((uint64_t)&v46) != 2) {
        return 0;
      }
      uint64_t v23 = (char *)sub_10019E880((uint64_t)&v46);
      uint64_t v24 = *v23;
      *(_OWORD *)char v36 = *(_OWORD *)(v23 + 1);
      *(_OWORD *)&v36[16]  = *(_OWORD *)(v23 + 17);
      *(_OWORD *)&v36[32]  = *(_OWORD *)(v23 + 33);
      *(void *)&v36[47]  = *((void *)v23 + 6);
      if (word_1003C4618[v21] != word_1003C4618[v24]) {
        return 0;
      }
      long long v57 = *(_OWORD *)&v37[7];
      long long v58 = *(_OWORD *)&v37[23];
      long long v59 = *(_OWORD *)&v37[39];
      long long v61 = *(_OWORD *)&v36[7];
      long long v62 = *(_OWORD *)&v36[23];
      long long v63 = *(_OWORD *)&v36[39];
      if (*(void *)&v37[23] >> 60 == 15)
      {
        if (*(void *)&v36[23] >> 60 == 15)
        {
          sub_10019E80C((uint64_t)a1, sub_10006E808);
          sub_10019E80C((uint64_t)a2, sub_10006E808);
          goto LABEL_12;
        }
        goto LABEL_23;
      }
      if (*(void *)&v36[23] >> 60 == 15)
      {
LABEL_23:
        sub_10006E968(v57, *((uint64_t *)&v57 + 1), v58);
        sub_10006E968(*(uint64_t *)&v36[7], *(uint64_t *)&v36[15], *(unint64_t *)&v36[23]);
        sub_10006E0D8(*(uint64_t *)&v37[7], *(uint64_t *)&v37[15], *(unint64_t *)&v37[23]);
        sub_10006E0D8(*(uint64_t *)&v36[7], *(uint64_t *)&v36[15], *(unint64_t *)&v36[23]);
        return 0;
      }
      if (*(unsigned __int16 *)&v37[7] != *(unsigned __int16 *)&v36[7]) {
        return 0;
      }
      sub_10019E80C((uint64_t)a1, sub_10006E808);
      sub_10019E80C((uint64_t)a2, sub_10006E808);
      sub_10006E968(*(uint64_t *)&v37[7], *(uint64_t *)&v37[15], *(unint64_t *)&v37[23]);
      sub_10006E968(*(uint64_t *)&v36[7], *(uint64_t *)&v36[15], *(unint64_t *)&v36[23]);
      char v31 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(uint64_t *)&v37[15], *(unint64_t *)&v37[23], *(uint64_t *)&v36[15], *(unint64_t *)&v36[23]);
      sub_10006E0D8(*(uint64_t *)&v36[7], *(uint64_t *)&v36[15], *(unint64_t *)&v36[23]);
      sub_10006E0D8(*(uint64_t *)&v37[7], *(uint64_t *)&v37[15], *(unint64_t *)&v37[23]);
      if ((v31 & 1) == 0) {
        goto LABEL_33;
      }
LABEL_12:
      sub_10006EC68((uint64_t)&v58 + 8, (uint64_t)&v60, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v62 + 8, (uint64_t)&v64, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v60, (uint64_t)&v66, &qword_1004814F8);
      if (v66)
      {
        sub_10006EC68((uint64_t)&v64, (uint64_t)&v65, &qword_1004814F8);
        if ((v65 & 1) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        sub_10006EC68((uint64_t)&v64, (uint64_t)&v65, &qword_1004814F8);
        if (v65)
        {
LABEL_33:
          sub_10019E80C((uint64_t)a2, sub_10006DF78);
          sub_10019E80C((uint64_t)a1, sub_10006DF78);
          return 0;
        }
      }
      long long v32 = v59;
      long long v33 = v63;
      if (*((void *)&v59 + 1) >> 60 == 15)
      {
        if (*((void *)&v63 + 1) >> 60 == 15)
        {
          sub_10019E80C((uint64_t)a2, sub_10006DF78);
          sub_10019E80C((uint64_t)a1, sub_10006DF78);
          return 1;
        }
        goto LABEL_32;
      }
      if (*((void *)&v63 + 1) >> 60 == 15)
      {
LABEL_32:
        sub_100038004(v59, *((unint64_t *)&v59 + 1));
        sub_100038004(v33, *((unint64_t *)&v33 + 1));
        sub_10000C95C(v32, *((unint64_t *)&v32 + 1));
        sub_10000C95C(v33, *((unint64_t *)&v33 + 1));
        goto LABEL_33;
      }
      sub_100038004(v59, *((unint64_t *)&v59 + 1));
      sub_100038004(v33, *((unint64_t *)&v33 + 1));
      char v35 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v32, *((unint64_t *)&v32 + 1), v33, *((unint64_t *)&v33 + 1));
      sub_10000C95C(v33, *((unint64_t *)&v33 + 1));
      sub_10000C95C(v32, *((unint64_t *)&v32 + 1));
      sub_10019E80C((uint64_t)a2, sub_10006DF78);
      sub_10019E80C((uint64_t)a1, sub_10006DF78);
      return (v35 & 1) != 0;
    case 3u:
      unint64_t v25 = (unsigned __int8 *)sub_10019E880((uint64_t)v45);
      int v26 = *v25;
      int v27 = *((unsigned __int16 *)v25 + 1);
      uint64_t v28 = (char)v25[4];
      sub_10019E7C0(a2, (uint64_t)&v46);
      if (sub_10019E800((uint64_t)&v46) != 3) {
        return 0;
      }
      __n128 v29 = (unsigned __int8 *)sub_10019E880((uint64_t)&v46);
      if (v26 != *v29 || v27 != *((unsigned __int16 *)v29 + 1)) {
        return 0;
      }
      return word_1003C4618[v28] == word_1003C4618[(char)v29[4]];
    default:
      uint64_t v4 = sub_10019E880((uint64_t)v45);
      long long v53 = *(_OWORD *)(v4 + 112);
      long long v54 = *(_OWORD *)(v4 + 128);
      long long v55 = *(_OWORD *)(v4 + 144);
      char v56 = *(unsigned char *)(v4 + 160);
      long long v49 = *(_OWORD *)(v4 + 48);
      long long v50 = *(_OWORD *)(v4 + 64);
      long long v51 = *(_OWORD *)(v4 + 80);
      long long v52 = *(_OWORD *)(v4 + 96);
      long long v46 = *(_OWORD *)v4;
      long long v47 = *(_OWORD *)(v4 + 16);
      long long v48 = *(_OWORD *)(v4 + 32);
      sub_10019E7C0(a2, (uint64_t)v36);
      if (sub_10019E800((uint64_t)v36)) {
        return 0;
      }
      uint64_t v5 = sub_10019E880((uint64_t)v36);
      long long v6 = *(_OWORD *)(v5 + 144);
      long long v42 = *(_OWORD *)(v5 + 128);
      long long v43 = v6;
      char v44 = *(unsigned char *)(v5 + 160);
      long long v7 = *(_OWORD *)(v5 + 80);
      long long v38 = *(_OWORD *)(v5 + 64);
      long long v39 = v7;
      long long v8 = *(_OWORD *)(v5 + 112);
      long long v40 = *(_OWORD *)(v5 + 96);
      long long v41 = v8;
      long long v9 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)char v37 = *(_OWORD *)v5;
      *(_OWORD *)&v37[16]  = v9;
      long long v10 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)&v37[32]  = *(_OWORD *)(v5 + 32);
      *(_OWORD *)&v37[48]  = v10;
      sub_10019E80C((uint64_t)a1, sub_10006E808);
      sub_10019E80C((uint64_t)a2, sub_10006E808);
      BOOL v11 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0((char *)&v46, v37);
LABEL_6:
      BOOL v19 = v11;
      sub_10019E80C((uint64_t)a2, sub_10006DF78);
      sub_10019E80C((uint64_t)a1, sub_10006DF78);
      return v19;
  }
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0(char *a1, char *a2)
{
  if (word_1003C4618[*a1] != word_1003C4618[*a2]) {
    return 0;
  }
  if (*((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4)) {
    return 0;
  }
  if (byte_1003C4684[a1[10]] != byte_1003C4684[a2[10]]) {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 3);
  int v5 = *((unsigned __int16 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v54 = a1[48];
  uint64_t v7 = *((void *)a2 + 3);
  int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t v9 = *((void *)a2 + 5);
  uint64_t v10 = a2[48];
  if (!sub_1000997E0(*((void *)a1 + 2), *((void *)a2 + 2))) {
    return 0;
  }
  char v11 = sub_1000956AC(v4, v7);
  BOOL result = 0;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_1003C4684[v54] == byte_1003C4684[v10]
      && (sub_1000956AC(*((void *)a1 + 7), *((void *)a2 + 7)) & 1) != 0)
    {
      long long v13 = *((_OWORD *)a1 + 5);
      v58[0]  = *((_OWORD *)a1 + 4);
      v58[1]  = v13;
      v58[2]  = *((_OWORD *)a1 + 6);
      long long v14 = *((_OWORD *)a2 + 5);
      v57[0]  = *((_OWORD *)a2 + 4);
      v57[1]  = v14;
      v57[2]  = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v58, (uint64_t *)v57))
      {
        uint64_t v16 = *((void *)a1 + 14);
        unint64_t v15 = *((void *)a1 + 15);
        unint64_t v18 = *((void *)a1 + 16);
        uint64_t v17 = *((void *)a1 + 17);
        uint64_t v20 = *((void *)a1 + 18);
        unint64_t v19 = *((void *)a1 + 19);
        int v21 = a1[160];
        uint64_t v23 = *((void *)a2 + 14);
        unint64_t v22 = *((void *)a2 + 15);
        unint64_t v25 = *((void *)a2 + 16);
        uint64_t v24 = *((void *)a2 + 17);
        uint64_t v27 = *((void *)a2 + 18);
        unint64_t v26 = *((void *)a2 + 19);
        int v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255) {
            return 1;
          }
        }
        else if (v28 != 255)
        {
          v59[0]  = v16;
          v59[1]  = v15;
          v59[2]  = v18;
          v59[3]  = v17;
          v59[4]  = v20;
          v59[5]  = v19;
          char v60 = v21;
          v61[0]  = v23;
          v61[1]  = v22;
          unint64_t v29 = v22;
          v61[2]  = v25;
          v61[3]  = v24;
          v61[4]  = v27;
          v61[5]  = v26;
          char v62 = v28;
          uint64_t v30 = v16;
          uint64_t v52 = v16;
          unint64_t v55 = v15;
          unint64_t v31 = v15;
          unint64_t v32 = v18;
          unint64_t v48 = v18;
          uint64_t v49 = v17;
          unint64_t v33 = v25;
          uint64_t v34 = v17;
          uint64_t v35 = v24;
          uint64_t v36 = v27;
          unint64_t v37 = v26;
          sub_10006E984(v30, v31, v32, v34, v20, v19, v21);
          sub_10006E984(v23, v29, v33, v35, v36, v37, v28);
          char v47 = static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v59, (uint64_t)v61);
          sub_10006E0F4(v23, v29, v33, v35, v36, v37, v28);
          sub_10006E0F4(v52, v55, v48, v49, v20, v19, v21);
          return (v47 & 1) != 0;
        }
        uint64_t v38 = v16;
        uint64_t v53 = v16;
        unint64_t v56 = v15;
        unint64_t v39 = v15;
        unint64_t v40 = v25;
        uint64_t v41 = v24;
        uint64_t v42 = v20;
        uint64_t v51 = v20;
        uint64_t v43 = v27;
        unint64_t v44 = v19;
        unint64_t v50 = v19;
        unint64_t v45 = v22;
        unint64_t v46 = v26;
        sub_10006E984(v38, v39, v18, v17, v42, v44, v21);
        sub_10006E984(v23, v45, v40, v41, v43, v46, v28);
        sub_10006E0F4(v53, v56, v18, v17, v51, v50, v21);
        sub_10006E0F4(v23, v45, v40, v41, v43, v46, v28);
      }
    }
    return 0;
  }
  return result;
}