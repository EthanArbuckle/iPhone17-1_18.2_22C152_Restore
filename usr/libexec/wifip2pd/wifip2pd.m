uint64_t initializeWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  return a1;
}

void destroy for DriverEvent(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v7 = *(void *)(a1 + 32);
      char v8 = *(unsigned char *)(a1 + 41);
      unsigned __int8 v9 = *(unsigned char *)(a1 + 40);
      sub_1000135D4(v3, v4, v5, v6, v7, v9, v8);
      break;
    case 1:
      type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10006DE90(*(void *)(a1 + 8));
          uint64_t v10 = a1 + *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
          uint64_t v11 = type metadata accessor for AWDLActionFrame.Header(0);
          uint64_t v12 = v10 + *(int *)(v11 + 32);
          uint64_t v13 = type metadata accessor for DispatchTimeInterval();
          v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
          v14(v12, v13);
          v14(v10 + *(int *)(v11 + 36), v13);
          goto LABEL_13;
        case 2u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        case 3u:
          uint64_t v15 = a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
          uint64_t v16 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
          swift_bridgeObjectRelease();
          type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_13:
          swift_bridgeObjectRelease();
          break;
        case 6u:
          uint64_t v17 = *(void *)a1;
          uint64_t v18 = *(void *)(a1 + 8);
          uint64_t v19 = *(void *)(a1 + 16);
          uint64_t v20 = *(void *)(a1 + 24);
          char v21 = *(unsigned char *)(a1 + 32);
          sub_10006B9A0(v17, v18, v19, v20, v21);
          break;
        case 8u:
          v22 = *(void **)a1;

          break;
        case 9u:
          uint64_t v23 = type metadata accessor for DispatchTimeInterval();
          v34 = *(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
          ((void (*)(void *__return_ptr, uint64_t, uint64_t))v34)((void *)(v23 - 8), a1, v23);
          uint64_t v24 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);
          v34(v24, v23);
          break;
        default:
          return;
      }
      break;
    case 0:
      __int16 v33 = *(_WORD *)(a1 + 360);
      long long v31 = *(_OWORD *)(a1 + 320);
      long long v32 = *(_OWORD *)(a1 + 336);
      long long v29 = *(_OWORD *)(a1 + 288);
      long long v30 = *(_OWORD *)(a1 + 304);
      long long v27 = *(_OWORD *)(a1 + 256);
      long long v28 = *(_OWORD *)(a1 + 272);
      long long v25 = *(_OWORD *)(a1 + 224);
      long long v26 = *(_OWORD *)(a1 + 240);
      sub_10006DC3C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
        *(void *)(a1 + 152),
        *(void *)(a1 + 160),
        *(void *)(a1 + 168),
        *(void *)(a1 + 176),
        *(void *)(a1 + 184),
        *(void *)(a1 + 192),
        *(void *)(a1 + 200),
        *(void *)(a1 + 208),
        *(void *)(a1 + 216),
        v25,
        *((uint64_t *)&v25 + 1),
        v26,
        *((uint64_t *)&v26 + 1),
        v27,
        *((uint64_t *)&v27 + 1),
        v28,
        *((uint64_t *)&v28 + 1),
        v29,
        *((uint64_t *)&v29 + 1),
        v30,
        *((uint64_t *)&v30 + 1),
        v31,
        *((uint64_t *)&v31 + 1),
        v32,
        *((uint64_t *)&v32 + 1),
        *(void *)(a1 + 352),
        v33,
        SHIBYTE(v33));
      break;
  }
}

void sub_1000032E8(uint64_t a1)
{
  uint64_t v3 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v62[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v62[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unsigned __int8 v9 = (char *)&v62[-1] - v8;
  sub_100004130(a1, (uint64_t)&v62[-1] - v8);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100013578((uint64_t)v9);
      goto LABEL_4;
    case 2u:
      uint64_t v17 = *(void *)v9;
      unint64_t v18 = *((void *)v9 + 1);
      uint64_t v20 = *((void *)v9 + 2);
      uint64_t v19 = *((void *)v9 + 3);
      uint64_t v21 = *((void *)v9 + 4);
      int v22 = v9[40];
      switch(v9[41])
      {
        case 1:
          uint64_t v33 = *(void *)v9;
          swift_bridgeObjectRetain();
          sub_1003388D8();
          sub_1000135D4(v33, v18, v20, v19, v21, v22, 1);
          sub_1000135D4(v33, v18, v20, v19, v21, v22, 1);
          break;
        case 2:
          sub_100339320(v17);
          break;
        case 3:
          sub_10033998C(v17 & 0xFFFFFFFFFFFFLL);
          break;
        case 4:
          uint64_t v34 = *(void *)v9;
          uint64_t v35 = swift_bridgeObjectRetain();
          sub_10033A340(v35, v18, v20);
          sub_1000135D4(v34, v18, v20, v19, v21, v22, 4);
          sub_1000135D4(v34, v18, v20, v19, v21, v22, 4);
          break;
        case 5:
          uint64_t v36 = *(void *)v9;
          sub_100004C48(v17, *((void *)v9 + 1), *((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4), v9[40], 5);
          sub_10033F644();
          sub_1000135D4(v36, v18, v20, v19, v21, v22, 5);
          sub_1000135D4(v36, v18, v20, v19, v21, v22, 5);
          break;
        case 6:
          sub_10033A99C(v17);
          break;
        case 7:
          sub_10033F724();
          break;
        case 8:
          return;
        case 9:
          uint64_t v37 = *(void *)v9;
          swift_getAssociatedTypeWitness();
          uint64_t v38 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
          v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24);
          uint64_t v40 = swift_checkMetadataState();
          v39(v37 & 0xFFFFFFFFFFFFLL, v40, v38);
          break;
        case 10:
          if (v20 | v18 | v17 | v19 | v21) {
            BOOL v41 = 0;
          }
          else {
            BOOL v41 = v22 == 0;
          }
          if (v41)
          {
            swift_getAssociatedTypeWitness();
            uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            v53 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
            uint64_t v54 = swift_checkMetadataState();
            char v55 = v53(v54, AssociatedConformanceWitness);
            sub_10033660C(v55 & 1);
          }
          else
          {
            if (v9[40]) {
              BOOL v42 = 0;
            }
            else {
              BOOL v42 = v17 == 1;
            }
            if (v42 && (v20 | v18 | v19 | v21) == 0)
            {
              swift_getAssociatedTypeWitness();
              uint64_t v56 = swift_getAssociatedConformanceWitness();
              v57 = *(uint64_t (**)(uint64_t, uint64_t))(v56 + 80);
              uint64_t v58 = swift_checkMetadataState();
              unsigned int v59 = v57(v58, v56);
              if ((v59 & 0x10000) != 0)
              {
                v60 = CountryCode.unknown.unsafeMutableAddressor();
                LOBYTE(v59) = *(unsigned char *)v60;
                LOWORD(v60) = *((unsigned __int8 *)v60 + 1);
              }
              else
              {
                LODWORD(v60) = v59 >> 8;
              }
              sub_100337358(v59 | (unsigned __int16)((_WORD)v60 << 8));
            }
            else
            {
              swift_getAssociatedTypeWitness();
              uint64_t v44 = swift_getAssociatedConformanceWitness();
              v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 72);
              uint64_t v46 = swift_checkMetadataState();
              uint64_t v47 = v45(v46, v44);
              sub_1003367D4(v47, v49, v50, v48 & 0xFFFFFFFFFFFFLL);
              (*(void (**)(uint64_t))(*(void *)(v44 + 8) + 32))(v46);
              uint64_t v51 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 592));
              if (v51 != 3) {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v51, v46, v44);
              }
            }
          }
          break;
        default:
          sub_1003368C0(v17 & 1);
          break;
      }
      break;
    case 3u:
    case 4u:
      return;
    case 5u:
      swift_getAssociatedTypeWitness();
      uint64_t v23 = swift_getAssociatedConformanceWitness();
      uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 64);
      uint64_t v25 = swift_checkMetadataState();
      unint64_t v26 = v24(v25, v23);
      WiFiInterface.$macAddress.getter((uint64_t)v5);
      if ((v26 & 0x1000000000000) != 0)
      {
        uint64_t v31 = *(int *)(v3 + 40);
        LOBYTE(v26) = v5[v31];
        v27.i32[0] = *(_DWORD *)&v5[v31 + 1];
        int16x8_t v29 = (int16x8_t)vmovl_u8(v27);
        LOBYTE(v30) = v5[v31 + 5];
      }
      else
      {
        uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v26);
        int16x8_t v29 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_1003B2EA0));
        *(int16x4_t *)v29.i8 = vmovn_s32((int32x4_t)v29);
        unint64_t v30 = v26 >> 40;
        uint64_t v31 = *(int *)(v3 + 40);
      }
      long long v32 = &v5[v31];
      *long long v32 = v26;
      *(_DWORD *)(v32 + 1) = vmovn_s16(v29).u32[0];
      v32[5] = v30;
      WiFiInterface.$macAddress.setter((uint64_t)v5);
      break;
    default:
      sub_10006E544((uint64_t)v9, (uint64_t)v62);
      sub_1003080B8((uint64_t)v62);
LABEL_4:
      sub_100004130(a1, (uint64_t)v7);
      swift_retain();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        v62[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315394;
        uint64_t v13 = WiFiInterface.description.getter();
        uint64_t v61 = sub_100010680(v13, v14, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2080;
        uint64_t v15 = DriverEvent.description.getter();
        uint64_t v61 = sub_100010680(v15, v16, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100013578((uint64_t)v7);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s received an unexpected %s", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();

        sub_100013578((uint64_t)v7);
      }
      break;
  }
}

uint64_t sub_100003BB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin(v7 - 8);
  unsigned __int8 v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004130(a1, (uint64_t)v9);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v16[1] = a4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = DriverEvent.shortDescription.getter();
    v16[2] = sub_100010680(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013578((uint64_t)v9);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received event %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return a3(a1);
  }
  else
  {

    sub_100013578((uint64_t)v9);
    return a3(a1);
  }
}

uint64_t sub_100003D88(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_100013D9C(v4, v8);
      swift_release();
      return v3;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

void sub_100003E70(uint64_t a1)
{
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (void *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  unsigned __int8 v9 = (void *)*v8;
  *uint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1000032E8(a1);
      swift_release();
    }
    else
    {
      sub_100004130(a1, (uint64_t)v3);
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v14 = DriverEvent.shortDescription.getter();
        v16[1] = sub_100010680(v14, v15, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100013578((uint64_t)v3);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to dispatch event %s because the InfrastructureWiFiInterface was deallocated before the event was received from the driver", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100013578((uint64_t)v3);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100004130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DriverEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      char v13 = *(unsigned char *)(a2 + 41);
      unsigned __int8 v14 = *(unsigned char *)(a2 + 40);
      sub_100004C48(v8, v9, v10, v11, v12, v14, v13);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v12;
      *(unsigned char *)(a1 + 40) = v14;
      *(unsigned char *)(a1 + 41) = v13;
      goto LABEL_16;
    case 1:
      uint64_t v15 = type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(unsigned char *)a1 = *(unsigned char *)a2;
          uint64_t v16 = *(void *)(a2 + 8);
          uint64_t v17 = *(void *)(a2 + 16);
          uint64_t v18 = *(void *)(a2 + 24);
          sub_10006EAC4(v16);
          *(void *)(a1 + 8) = v16;
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v18;
          uint64_t v19 = *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
          uint64_t v20 = a1 + v19;
          uint64_t v21 = a2 + v19;
          *(_DWORD *)uint64_t v20 = *(_DWORD *)(a2 + v19);
          *(_WORD *)(v20 + 4) = *(_WORD *)(a2 + v19 + 4);
          *(_DWORD *)(v20 + 6) = *(_DWORD *)(a2 + v19 + 6);
          *(_WORD *)(v20 + 10) = *(_WORD *)(a2 + v19 + 10);
          *(_DWORD *)(v20 + 12) = *(_DWORD *)(a2 + v19 + 12);
          *(_WORD *)(v20 + 16) = *(_WORD *)(a2 + v19 + 16);
          *(_DWORD *)(v20 + 20) = *(_DWORD *)(a2 + v19 + 20);
          int v22 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          uint64_t v23 = v22[8];
          uint64_t v24 = v20 + v23;
          uint64_t v25 = v21 + v23;
          uint64_t v26 = type metadata accessor for DispatchTimeInterval();
          uint8x8_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
          v27(v24, v25, v26);
          v27(v20 + v22[9], v21 + v22[9], v26);
          *(_DWORD *)(v20 + v22[10]) = *(_DWORD *)(v21 + v22[10]);
          *(_DWORD *)(v20 + v22[11]) = *(_DWORD *)(v21 + v22[11]);
          *(void *)(v20 + v22[12]) = *(void *)(v21 + v22[12]);
          *(_DWORD *)(v20 + v22[13]) = *(_DWORD *)(v21 + v22[13]);
          *(void *)(v20 + v22[14]) = *(void *)(v21 + v22[14]);
          *(_DWORD *)(v20 + v22[15]) = *(_DWORD *)(v21 + v22[15]);
          *(void *)(v20 + v22[16]) = *(void *)(v21 + v22[16]);
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 2u:
          long long v28 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v28;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
          *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
          *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
          *(void *)(a1 + 60) = *(void *)(a2 + 60);
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
          uint64_t v29 = *(void *)(a2 + 88);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *(void *)(a1 + 88) = v29;
          uint64_t v31 = *(void *)(a2 + 96);
          uint64_t v30 = *(void *)(a2 + 104);
          *(void *)(a1 + 96) = v31;
          *(void *)(a1 + 104) = v30;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 3u:
          *(unsigned char *)a1 = *(unsigned char *)a2;
          *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
          int v32 = *(_DWORD *)(a2 + 48);
          *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
          *(_DWORD *)(a1 + 48) = v32;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
          *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
          long long v33 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v33;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
          uint64_t v34 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          uint64_t v35 = v34[20];
          uint64_t v36 = a1 + v35;
          uint64_t v37 = a2 + v35;
          uint64_t v38 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
          *(void *)(a1 + v34[21]) = *(void *)(a2 + v34[21]);
          *(void *)(a1 + v34[22]) = *(void *)(a2 + v34[22]);
          *(void *)(a1 + v34[23]) = *(void *)(a2 + v34[23]);
          *(void *)(a1 + v34[24]) = *(void *)(a2 + v34[24]);
          *(void *)(a1 + v34[25]) = *(void *)(a2 + v34[25]);
          *(void *)(a1 + v34[26]) = *(void *)(a2 + v34[26]);
          *(void *)(a1 + v34[27]) = *(void *)(a2 + v34[27]);
          *(void *)(a1 + v34[28]) = *(void *)(a2 + v34[28]);
          *(_WORD *)(a1 + v34[29]) = *(_WORD *)(a2 + v34[29]);
          *(unsigned char *)(a1 + v34[30]) = *(unsigned char *)(a2 + v34[30]);
          *(unsigned char *)(a1 + v34[31]) = *(unsigned char *)(a2 + v34[31]);
          *(unsigned char *)(a1 + v34[32]) = *(unsigned char *)(a2 + v34[32]);
          *(unsigned char *)(a1 + v34[33]) = *(unsigned char *)(a2 + v34[33]);
          *(unsigned char *)(a1 + v34[34]) = *(unsigned char *)(a2 + v34[34]);
          *(unsigned char *)(a1 + v34[35]) = *(unsigned char *)(a2 + v34[35]);
          uint64_t v39 = v34[36];
          uint64_t v40 = (void *)(a1 + v39);
          BOOL v41 = (void *)(a2 + v39);
          uint64_t v117 = v41[1];
          *uint64_t v40 = *v41;
          v40[1] = v117;
          *(unsigned char *)(a1 + v34[37]) = *(unsigned char *)(a2 + v34[37]);
          *(void *)(a1 + v34[38]) = *(void *)(a2 + v34[38]);
          *(void *)(a1 + v34[39]) = *(void *)(a2 + v34[39]);
          *(void *)(a1 + v34[40]) = *(void *)(a2 + v34[40]);
          *(void *)(a1 + v34[41]) = *(void *)(a2 + v34[41]);
          *(void *)(a1 + v34[42]) = *(void *)(a2 + v34[42]);
          *(void *)(a1 + v34[43]) = *(void *)(a2 + v34[43]);
          uint64_t v42 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
          uint64_t v43 = a1 + v42;
          uint64_t v44 = a2 + v42;
          long long v45 = *(_OWORD *)(v44 + 176);
          *(_OWORD *)(v43 + 160) = *(_OWORD *)(v44 + 160);
          *(_OWORD *)(v43 + 176) = v45;
          *(_OWORD *)(v43 + 192) = *(_OWORD *)(v44 + 192);
          long long v46 = *(_OWORD *)(v44 + 112);
          *(_OWORD *)(v43 + 96) = *(_OWORD *)(v44 + 96);
          *(_OWORD *)(v43 + 112) = v46;
          long long v47 = *(_OWORD *)(v44 + 144);
          *(_OWORD *)(v43 + 128) = *(_OWORD *)(v44 + 128);
          *(_OWORD *)(v43 + 144) = v47;
          long long v48 = *(_OWORD *)(v44 + 48);
          *(_OWORD *)(v43 + 32) = *(_OWORD *)(v44 + 32);
          *(_OWORD *)(v43 + 48) = v48;
          long long v49 = *(_OWORD *)(v44 + 80);
          *(_OWORD *)(v43 + 64) = *(_OWORD *)(v44 + 64);
          *(_OWORD *)(v43 + 80) = v49;
          long long v50 = *(_OWORD *)(v44 + 16);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *(_OWORD *)(v43 + 16) = v50;
          uint64_t v51 = *(void *)(v44 + 216);
          *(void *)(v43 + 208) = *(void *)(v44 + 208);
          *(void *)(v43 + 216) = v51;
          uint64_t v52 = *(void *)(v44 + 232);
          *(void *)(v43 + 224) = *(void *)(v44 + 224);
          *(void *)(v43 + 232) = v52;
          uint64_t v53 = *(void *)(v44 + 248);
          *(void *)(v43 + 240) = *(void *)(v44 + 240);
          *(void *)(v43 + 248) = v53;
          uint64_t v54 = *(void *)(v44 + 264);
          *(void *)(v43 + 256) = *(void *)(v44 + 256);
          *(void *)(v43 + 264) = v54;
          uint64_t v102 = *(void *)(v44 + 280);
          *(void *)(v43 + 272) = *(void *)(v44 + 272);
          *(void *)(v43 + 280) = v102;
          uint64_t v105 = *(void *)(v44 + 296);
          *(void *)(v43 + 288) = *(void *)(v44 + 288);
          *(void *)(v43 + 296) = v105;
          uint64_t v108 = *(void *)(v44 + 312);
          *(void *)(v43 + 304) = *(void *)(v44 + 304);
          *(void *)(v43 + 312) = v108;
          uint64_t v111 = *(void *)(v44 + 328);
          *(void *)(v43 + 320) = *(void *)(v44 + 320);
          *(void *)(v43 + 328) = v111;
          uint64_t v114 = *(void *)(v44 + 344);
          *(void *)(v43 + 336) = *(void *)(v44 + 336);
          *(void *)(v43 + 344) = v114;
          *(void *)(v43 + 352) = *(void *)(v44 + 352);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_15;
        case 6u:
          uint64_t v55 = *(void *)a2;
          uint64_t v56 = *(void *)(a2 + 8);
          uint64_t v57 = *(void *)(a2 + 16);
          uint64_t v58 = *(void *)(a2 + 24);
          char v59 = *(unsigned char *)(a2 + 32);
          sub_10006B960(v55, v56, v57, v58, v59);
          *(void *)a1 = v55;
          *(void *)(a1 + 8) = v56;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = v58;
          *(unsigned char *)(a1 + 32) = v59;
          goto LABEL_15;
        case 8u:
          v60 = *(void **)a2;
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
          id v61 = v60;
          goto LABEL_15;
        case 9u:
          uint64_t v62 = type metadata accessor for DispatchTimeInterval();
          v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
          v63(a1, a2, v62);
          uint64_t v64 = type metadata accessor for AWDLIdleActivity(0);
          v63(a1 + *(int *)(v64 + 20), a2 + *(int *)(v64 + 20), v62);
LABEL_15:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
          break;
      }
      goto LABEL_16;
    case 0:
      uint64_t v95 = *(void *)(a2 + 8);
      uint64_t v96 = *(void *)a2;
      uint64_t v93 = *(void *)(a2 + 24);
      uint64_t v94 = *(void *)(a2 + 16);
      uint64_t v92 = *(void *)(a2 + 32);
      uint64_t v91 = *(void *)(a2 + 40);
      uint64_t v90 = *(void *)(a2 + 48);
      unint64_t v97 = *(void *)(a2 + 56);
      uint64_t v115 = *(void *)(a2 + 80);
      uint64_t v116 = *(void *)(a2 + 72);
      uint64_t v112 = *(void *)(a2 + 96);
      uint64_t v113 = *(void *)(a2 + 88);
      uint64_t v109 = *(void *)(a2 + 112);
      uint64_t v110 = *(void *)(a2 + 104);
      uint64_t v106 = *(void *)(a2 + 128);
      uint64_t v107 = *(void *)(a2 + 120);
      uint64_t v103 = *(void *)(a2 + 144);
      uint64_t v104 = *(void *)(a2 + 136);
      uint64_t v66 = *(void *)(a2 + 152);
      uint64_t v67 = *(void *)(a2 + 160);
      uint64_t v68 = *(void *)(a2 + 168);
      uint64_t v69 = *(void *)(a2 + 176);
      uint64_t v70 = *(void *)(a2 + 184);
      uint64_t v71 = *(void *)(a2 + 192);
      uint64_t v72 = *(void *)(a2 + 200);
      uint64_t v73 = *(void *)(a2 + 208);
      uint64_t v74 = *(void *)(a2 + 216);
      uint64_t v75 = *(void *)(a2 + 224);
      uint64_t v76 = *(void *)(a2 + 232);
      uint64_t v77 = *(void *)(a2 + 240);
      uint64_t v78 = *(void *)(a2 + 248);
      uint64_t v79 = *(void *)(a2 + 256);
      uint64_t v80 = *(void *)(a2 + 264);
      uint64_t v81 = *(void *)(a2 + 272);
      uint64_t v82 = *(void *)(a2 + 280);
      uint64_t v83 = *(void *)(a2 + 288);
      uint64_t v84 = *(void *)(a2 + 296);
      uint64_t v85 = *(void *)(a2 + 304);
      uint64_t v86 = *(void *)(a2 + 312);
      uint64_t v87 = *(void *)(a2 + 320);
      uint64_t v88 = *(void *)(a2 + 328);
      uint64_t v89 = *(void *)(a2 + 336);
      uint64_t v98 = *(void *)(a2 + 344);
      uint64_t v99 = *(void *)(a2 + 352);
      char v100 = *(unsigned char *)(a2 + 360);
      char v101 = *(unsigned char *)(a2 + 361);
      uint64_t v7 = *(void *)(a2 + 64);
      sub_100134598(v96, v95, v94, v93, v92, v91, v90, v97, v7, v116, v115, v113, v112, v110, v109, v107, v106, v104, v103,
        v66,
        v67,
        v68,
        v69,
        v70,
        v71,
        v72,
        v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88,
        v89,
        v98,
        v99,
        v100,
        v101);
      *(void *)a1 = v96;
      *(void *)(a1 + 8) = v95;
      *(void *)(a1 + 16) = v94;
      *(void *)(a1 + 24) = v93;
      *(void *)(a1 + 32) = v92;
      *(void *)(a1 + 40) = v91;
      *(void *)(a1 + 48) = v90;
      *(void *)(a1 + 56) = v97;
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v116;
      *(void *)(a1 + 80) = v115;
      *(void *)(a1 + 88) = v113;
      *(void *)(a1 + 96) = v112;
      *(void *)(a1 + 104) = v110;
      *(void *)(a1 + 112) = v109;
      *(void *)(a1 + 120) = v107;
      *(void *)(a1 + 128) = v106;
      *(void *)(a1 + 136) = v104;
      *(void *)(a1 + 144) = v103;
      *(void *)(a1 + 152) = v66;
      *(void *)(a1 + 160) = v67;
      *(void *)(a1 + 168) = v68;
      *(void *)(a1 + 176) = v69;
      *(void *)(a1 + 184) = v70;
      *(void *)(a1 + 192) = v71;
      *(void *)(a1 + 200) = v72;
      *(void *)(a1 + 208) = v73;
      *(void *)(a1 + 216) = v74;
      *(void *)(a1 + 224) = v75;
      *(void *)(a1 + 232) = v76;
      *(void *)(a1 + 240) = v77;
      *(void *)(a1 + 248) = v78;
      *(void *)(a1 + 256) = v79;
      *(void *)(a1 + 264) = v80;
      *(void *)(a1 + 272) = v81;
      *(void *)(a1 + 280) = v82;
      *(void *)(a1 + 288) = v83;
      *(void *)(a1 + 296) = v84;
      *(void *)(a1 + 304) = v85;
      *(void *)(a1 + 312) = v86;
      *(void *)(a1 + 320) = v87;
      *(void *)(a1 + 328) = v88;
      *(void *)(a1 + 336) = v89;
      *(void *)(a1 + 344) = v98;
      *(void *)(a1 + 352) = v99;
      *(unsigned char *)(a1 + 360) = v100;
      *(unsigned char *)(a1 + 361) = v101;
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t type metadata accessor for DriverEvent(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004800A0);
}

uint64_t sub_100004C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  if (a7 == 5) {
    return sub_1000DDF34(a2, a3, a4, a5, a6);
  }
  if (a7 == 4 || a7 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_100004C8C()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v491 = v2;
  uint64_t v492 = v1;
  unint64_t v3 = v0;
  uint64_t v4 = 0;
  type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  uint64_t v6 = (uint64_t)&v442 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v442 - v7;
  sub_100010BCC(&qword_10047DC58);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v442 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unsigned __int8 v14 = (char *)&v442 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger();
  __chkstk_darwin();
  unint64_t v490 = (unint64_t)&v442 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v489 = v3;
  switch(v3)
  {
    case 1uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v19 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
      unint64_t v22 = v21 + v20;
      *(_OWORD *)unint64_t v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 25) = 0u;
      goto LABEL_9;
    case 2uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v23 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
      unint64_t v22 = v21 + v24;
      uint64_t v25 = 2;
      goto LABEL_8;
    case 3uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v26 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
      unint64_t v22 = v21 + v27;
      uint64_t v25 = 3;
      goto LABEL_8;
    case 9uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_10006794C(v29, v28, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DC70);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DC70);
      if (sub_10006E3AC((uint64_t)v770) == 1) {
        goto LABEL_188;
      }
      memcpy(v894, v770, 0x1CCuLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v30 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v31 = v28;
      unint64_t v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1003B2450;
      unint64_t v34 = v33 + v32;
      *(void *)unint64_t v34 = sub_1000C1458() & 0xFFFFFFFFFFFFLL;
      *(void *)(v34 + 8) = v35;
      *(void *)(v34 + 16) = v37;
      *(void *)(v34 + 24) = v36;
      *(void *)(v34 + 32) = 0;
      __int16 v38 = 1024;
      goto LABEL_83;
    case 0xBuLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v39 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
      unint64_t v22 = v21 + v40;
      uint64_t v25 = 1;
LABEL_8:
      *(void *)unint64_t v22 = v25;
      *(_OWORD *)(v22 + 24) = 0u;
      *(_OWORD *)(v22 + 8) = 0u;
      *(unsigned char *)(v22 + 40) = 0;
LABEL_9:
      *(unsigned char *)(v22 + 41) = 10;
      goto LABEL_10;
    case 0x2EuLL:
    case 0x41uLL:
    case 0xC3uLL:
    case 0xEBuLL:
      sub_100010BCC(&qword_10047DC60);
      type metadata accessor for DriverEvent(0);
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_1003B2450;
      type metadata accessor for DriverEvent.AWDL(0);
      goto LABEL_163;
    case 0x2FuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_1000674EC(v29, v28, (uint64_t)v770);
      if (v770[4].i8[4]) {
        goto LABEL_188;
      }
      if (v770[0].i32[2] != 1) {
        goto LABEL_191;
      }
      __int8 v41 = v770[0].i8[0];
      unint64_t v490 = (unint64_t)v770[0].i64[0] >> 40;
      __int8 v42 = v770[0].i8[4];
      unint64_t v43 = (unint64_t)v770[0].i64[0] >> 24;
      unint64_t v44 = (unint64_t)v770[0].i64[0] >> 16;
      unint64_t v45 = (unint64_t)v770[0].i64[0] >> 8;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v46 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v47 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1003B2450;
      long long v49 = (__int8 *)(v48 + v47);
      *long long v49 = v41;
      v49[1] = v45;
      v49[2] = v44;
      v49[3] = v43;
      v49[4] = v42;
      v49[5] = v490;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_71;
    case 0x30uLL:
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      long long v50 = (_OWORD *)(v491 >> 62);
      v487 = v16;
      v488.i64[0] = v15;
      switch(v491 >> 62)
      {
        case 1uLL:
          uint64_t v52 = (int)v492 + 72;
          if (v52 < v492 >> 32) {
            goto LABEL_199;
          }
          goto LABEL_180;
        case 2uLL:
          uint64_t v373 = *(void *)(v492 + 16);
          uint64_t v52 = v373 + 72;
          if (__OFADD__(v373, 72))
          {
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
          }
          if (v52 >= *(void *)(v492 + 24))
          {
LABEL_180:
            sub_100013D44(v492, v491);
            goto LABEL_188;
          }
          if (v50 == 2)
          {
            unint64_t v51 = v491;
            uint64_t v374 = *(void *)(v492 + 16);
          }
          else
          {
LABEL_199:
            unint64_t v51 = v491;
            uint64_t v374 = (int)v492;
          }
          if (v52 < v374)
          {
            __break(1u);
            goto LABEL_232;
          }
LABEL_201:
          sub_100013D44(v492, v51);
          unint64_t v393 = v51;
          uint64_t v394 = Data._Representation.subscript.getter();
          unint64_t v396 = v395;
          sub_100257F94(v394, v395, (uint64_t)&v766);
          uint64_t result = (void *)sub_10000C970(v394, v396);
          v770[2] = v768[0];
          v770[3] = v768[1];
          v770[4].i64[0] = v769;
          v770[0] = (int64x2_t)v766;
          v770[1] = v767;
          if (v50)
          {
            unint64_t v28 = v393;
            if (v50 == 1)
            {
              BOOL v405 = __OFADD__(v52, (int)v29);
              v52 += (int)v29;
              if (!v405)
              {
                uint64_t v406 = v29 >> 32;
                goto LABEL_219;
              }
              __break(1u);
LABEL_237:
              __break(1u);
              return result;
            }
            uint64_t v411 = *(void *)(v29 + 16);
            BOOL v405 = __OFADD__(v411, v52);
            v52 += v411;
            if (v405) {
              goto LABEL_237;
            }
            uint64_t v406 = *(void *)(v29 + 24);
          }
          else
          {
            unint64_t v28 = v393;
            uint64_t v406 = BYTE6(v393);
          }
LABEL_219:
          if (v52 >= v406) {
            goto LABEL_188;
          }
          uint64_t v412 = sub_1000C06EC(v52, v29, v28);
          unint64_t v414 = v413;
          unint64_t v415 = v413 >> 62;
          sub_100013D44(v412, v413);
          unint64_t v416 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v417 = type metadata accessor for BinaryDecoder();
          v418 = (void *)swift_allocObject();
          v418[5] = &_swiftEmptyDictionarySingleton;
          v418[2] = v412;
          v418[3] = v414;
          uint64_t v419 = 0;
          switch(v415)
          {
            case 1uLL:
              uint64_t v419 = (int)v412;
              break;
            case 2uLL:
              uint64_t v419 = *(void *)(v412 + 16);
              break;
            default:
              break;
          }
          v418[4] = v419;
          swift_beginAccess();
          v418[5] = v416;
          swift_bridgeObjectRelease();
          v767.i64[1] = v417;
          v768[0].i64[0] = sub_1000687F0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          v766.i64[0] = (uint64_t)v418;
          char v420 = sub_10019F2B0(&v766);
          uint64_t v422 = v421;
          uint64_t v424 = v423;
          uint64_t v426 = v425;
          sub_10000C970(v412, v414);
          sub_100010BCC(&qword_10047DC60);
          uint64_t v427 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v428 = (*(unsigned __int8 *)(v427 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v427 + 80);
          uint64_t v429 = swift_allocObject();
          *(_OWORD *)(v429 + 16) = xmmword_1003B2450;
          unint64_t v430 = v429 + v428;
          uint64_t v431 = v429 + v428 + *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
          *(unsigned char *)unint64_t v430 = v420;
          *(void *)(v430 + 8) = v422;
          *(void *)(v430 + 16) = v424;
          *(void *)(v430 + 24) = v426;
          sub_1000C1128(v431);
          type metadata accessor for DriverEvent.AWDL(0);
          swift_storeEnumTagMultiPayload();
LABEL_229:
          swift_storeEnumTagMultiPayload();
          sub_10000C970(v492, v491);
          return (void *)v429;
        case 3uLL:
          goto LABEL_180;
        default:
          if ((v491 & 0xFF000000000000) < 0x48000000000001) {
            goto LABEL_180;
          }
          unint64_t v51 = v491;
          uint64_t v52 = 72;
          goto LABEL_201;
      }
    case 0x31uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v53 = sub_100067878(v29, v28, (uint64_t (*)(void))sub_1002579EC);
      if ((v53 & 0x100000000) != 0) {
        goto LABEL_188;
      }
      int v54 = v53;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v55 = v28;
      uint64_t v56 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v57 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v58 + v57) = v54 == 1;
      goto LABEL_152;
    case 0x37uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067780(v29, v28, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DC78);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DC78);
      if (sub_10006E3C8((uint64_t)v770) == 1 || !v770[0].i32[2]) {
        goto LABEL_188;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v59 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v60 = v28;
      unint64_t v61 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v62 + v61) = 4;
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v29, v60);
      return (void *)v62;
    case 0x3BuLL:
      sub_100010BCC(&qword_10047DC60);
      type metadata accessor for DriverEvent(0);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return (void *)v21;
    case 0x42uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067A3C(v29, v28, (uint64_t)v770);
      if (v770[1].i8[8]) {
        goto LABEL_188;
      }
      uint64_t v63 = v770[1].i64[0];
      uint64_t v64 = v770[0].i64[1];
      uint64_t v65 = v770[0].i64[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v66 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      uint64_t v67 = v29;
      unint64_t v68 = v28;
      unint64_t v69 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v70 = v58 + v69;
      sub_1000C15B8(v65, v64, v63, (uint64_t)v770);
      __int8 v71 = v770[2].i8[8];
      *(void *)unint64_t v70 = v770[0].u16[0];
      *(int64x2_t *)(v70 + 8) = *(int64x2_t *)((char *)v770 + 8);
      *(int64x2_t *)(v70 + 24) = *(int64x2_t *)((char *)&v770[1] + 8);
      *(unsigned char *)(v70 + 40) = v71;
      *(unsigned char *)(v70 + 41) = 5;
      goto LABEL_91;
    case 0x43uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v72 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v73 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v74 + v73) = 1;
      goto LABEL_27;
    case 0x44uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v75 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v76 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      uint64_t v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v74 + v76) = 0;
LABEL_27:
      type metadata accessor for DriverEvent.AWDL(0);
LABEL_163:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return (void *)v74;
    case 0x4AuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067B08(v29, v28, (uint64_t)v770);
      if (v770[6].i8[8]) {
        goto LABEL_188;
      }
      __int16 v77 = v770[0].i16[2];
      __int16 v78 = v770[0].i16[0];
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v80 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v81 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v82 = v58 + v81;
      LOBYTE(v78) = sub_1000C96AC(v78);
      *(void *)unint64_t v82 = v78 | ((unint64_t)sub_1000C96D4(v77) << 8);
      *(_OWORD *)(v82 + 8) = 0u;
      *(_OWORD *)(v82 + 24) = 0u;
      __int16 v83 = 1792;
      goto LABEL_34;
    case 0x4EuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v84 = sub_100067BE0(v29, v28, (uint64_t (*)(void))sub_10025846C);
      if (v85) {
        goto LABEL_188;
      }
      __int16 v86 = v84;
      unint64_t v87 = HIDWORD(v84);
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v88 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v89 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v82 = v58 + v89;
      LOBYTE(v86) = sub_1000C96AC(v86);
      *(void *)unint64_t v82 = v86 | ((unint64_t)sub_1000C96D4(v87) << 8);
      *(_OWORD *)(v82 + 8) = 0u;
      *(_OWORD *)(v82 + 24) = 0u;
      __int16 v83 = 1536;
      goto LABEL_34;
    case 0x52uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v90 = sub_100067E64(v29, v28, (uint64_t (*)(void))sub_100258268);
      if ((v91 & 0x100000000) != 0) {
        goto LABEL_188;
      }
      unsigned int v92 = v91;
      unint64_t v93 = HIDWORD(v90);
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v94 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v95 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v82 = v58 + v95;
      *(void *)unint64_t v82 = sub_1000C7CBC(v93, v92) & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v82 + 8) = 0u;
      *(_OWORD *)(v82 + 24) = 0u;
      __int16 v83 = 2048;
LABEL_34:
      *(_WORD *)(v82 + 40) = v83;
      goto LABEL_209;
    case 0x5FuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      uint64_t v96 = sub_100066988(v29, v28);
      if ((v97 & 0x100000000) != 0) {
        goto LABEL_188;
      }
      unint64_t v98 = v96;
      unsigned __int8 v99 = v97;
      unint64_t v79 = v28;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v100 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v101 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      uint64_t v102 = swift_allocObject();
      *(_OWORD *)(v102 + 16) = xmmword_1003B2450;
      uint64_t v103 = v102 + v101;
      if (v98 == 3)
      {
        uint64_t v58 = v102;
        __int8 v104 = HIDWORD(v98) == 1;
      }
      else
      {
        uint64_t v58 = v102;
        if (v98 == 2)
        {
          __int8 v104 = 4;
        }
        else if (v98 == 1)
        {
          __int8 v104 = 3;
        }
        else
        {
          __int8 v104 = 0;
        }
      }
      v770[0].i8[0] = v104;
      v770[0].i64[1] = v99;
      sub_10006ED30((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v103);
      goto LABEL_209;
    case 0x61uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      switch(v491 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v492), v492)) {
            goto LABEL_234;
          }
          uint64_t v105 = HIDWORD(v492) - (int)v492;
LABEL_184:
          sub_100013D44(v492, v491);
LABEL_185:
          if (v105 != 6) {
            goto LABEL_188;
          }
          unint64_t v377 = sub_100013CF8(v29, v28);
          __int8 v397 = v377;
          unint64_t v398 = v377 >> 40;
          unint64_t v399 = HIDWORD(v377);
          unint64_t v400 = v377 >> 24;
          unint64_t v401 = v377 >> 16;
          unint64_t v402 = v377 >> 8;
          sub_100010BCC(&qword_10047DC60);
          uint64_t v403 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v404 = (*(unsigned __int8 *)(v403 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v403 + 80);
          uint64_t v58 = swift_allocObject();
          *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
          v770[0].i8[0] = v397;
          v770[0].i8[1] = v402;
          v770[0].i8[2] = v401;
          v770[0].i8[3] = v400;
          v770[0].i8[4] = v399;
          v770[0].i8[5] = v398;
          sub_10006ED3C((uint64_t)v770);
          sub_10006E544((uint64_t)v770, v58 + v404);
          break;
        case 2uLL:
          uint64_t v376 = *(void *)(v492 + 16);
          uint64_t v375 = *(void *)(v492 + 24);
          uint64_t v105 = v375 - v376;
          if (!__OFSUB__(v375, v376)) {
            goto LABEL_184;
          }
          goto LABEL_235;
        case 3uLL:
          goto LABEL_188;
        default:
          uint64_t v105 = BYTE6(v491);
          goto LABEL_185;
      }
      goto LABEL_62;
    case 0x62uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v106 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v107 = v106;
      sub_10006650C(v29, v106, (uint64_t)v770);
      swift_release();
      swift_release();
      sub_10006EC68((uint64_t)v770, (uint64_t)&v749, &qword_10047DCC8);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCC8);
      if (sub_10006E5F8((uint64_t)&v766) == 1) {
        goto LABEL_164;
      }
      uint64_t v6 = v766.i32[0];
      unsigned int v108 = v766.u32[2];
      uint64_t v4 = v767.u8[0];
      unsigned int v109 = v766.u32[3];
      uint64_t v29 = v767.u32[1];
      long long v50 = (_OWORD *)v768;
      unint64_t v489 = v767.u32[2];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v110 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v111 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
      uint64_t v112 = swift_allocObject();
      *(_OWORD *)(v112 + 16) = xmmword_1003B2450;
      unint64_t v490 = v112;
      unint64_t v51 = v112 + v111;
      sub_10006E61C((uint64_t)v768);
      unint64_t v113 = sub_1000C7CBC(v108, v109);
      if ((v113 & 0xFF00000000) == 0x300000000)
      {
        if (qword_10047C1F0 != -1) {
LABEL_232:
        }
          swift_once();
        LODWORD(v113) = static Channel.nanPrimary;
        LOBYTE(v114) = byte_100488664;
        LOBYTE(v115) = byte_100488665;
      }
      else
      {
        unint64_t v114 = HIDWORD(v113);
        unint64_t v115 = v113 >> 40;
      }
      unint64_t v387 = v491;
      int64x2_t v388 = *((int64x2_t *)v50 + 9);
      v770[8] = *((int64x2_t *)v50 + 8);
      v770[9] = v388;
      v770[10] = *((int64x2_t *)v50 + 10);
      *(int64x2_t *)((char *)&v770[10] + 9) = *(int64x2_t *)((char *)v50 + 169);
      int64x2_t v389 = *((int64x2_t *)v50 + 5);
      v770[4] = *((int64x2_t *)v50 + 4);
      v770[5] = v389;
      int64x2_t v390 = *((int64x2_t *)v50 + 7);
      v770[6] = *((int64x2_t *)v50 + 6);
      v770[7] = v390;
      int64x2_t v391 = *((int64x2_t *)v50 + 1);
      v770[0] = *(int64x2_t *)v50;
      v770[1] = v391;
      int64x2_t v392 = *((int64x2_t *)v50 + 3);
      v770[2] = *((int64x2_t *)v50 + 2);
      v770[3] = v392;
      v770[12].i64[0] = v6;
      v770[12].i32[2] = v113;
      v770[12].i8[12] = v114;
      v770[12].i8[13] = v115;
      v770[13].i64[0] = v4;
      v770[13].i64[1] = v489 | (v29 << 32);
      sub_10006EAE4((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v51);
      swift_storeEnumTagMultiPayload();
      sub_10006EAF0((uint64_t)&v749);
      uint64_t v369 = v492;
      unint64_t v370 = v387;
      goto LABEL_194;
    case 0x63uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066CF0(v29, v28, (uint64_t)&v766);
      if (v767.i8[4]) {
        goto LABEL_188;
      }
      unsigned int v116 = v767.i32[0];
      unint64_t v117 = v766.u64[1];
      uint64_t v67 = v29;
      unint64_t v68 = v28;
      unsigned __int16 v118 = v766.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v119 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v120 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      v770[0].i64[0] = sub_1000C0968(v118, v117, v116);
      v770[0].i8[8] = v121;
      sub_10006EC20((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v58 + v120);
      goto LABEL_91;
    case 0x64uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v122 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_10006604C(v29, v122, (void (*)(unint64_t *__return_ptr))sub_10025A2E0, (uint64_t)&v766);
      swift_release();
      swift_release();
      uint64_t v123 = v768[0].i64[0];
      if (!v768[0].i64[0]) {
        goto LABEL_187;
      }
      __int8 v124 = v766.i8[0];
      unint64_t v125 = (unint64_t)v766.i64[0] >> 8;
      unint64_t v126 = (unint64_t)v766.i64[0] >> 16;
      unint64_t v127 = (unint64_t)v766.i64[0] >> 24;
      unint64_t v486 = HIDWORD(v766.i64[0]);
      v487 = (void *)((unint64_t)v766.i64[0] >> 40);
      v488.i64[0] = HIWORD(v766.i64[0]);
      unint64_t v489 = HIBYTE(v766.i64[0]);
      unint64_t v490 = v766.i8[8];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v128 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v129 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v130 = v58 + v129;
      v770[0].i8[0] = v124;
      v770[0].i8[1] = v125;
      v770[0].i8[2] = v126;
      v770[0].i8[3] = v127;
      v770[0].i8[4] = v486;
      v770[0].i8[5] = (char)v487;
      v770[0].i8[6] = v488.i8[0];
      v770[0].i8[7] = v489;
      v770[0].i64[1] = v490;
      v770[1].i64[0] = v123;
      sub_10006ED24((uint64_t)v770);
      goto LABEL_61;
    case 0x66uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v122 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100064C68(v29, v122, (uint64_t)&v766);
      swift_release();
      swift_release();
      uint64_t v131 = v768[0].i64[0];
      if (!v768[0].i64[0]) {
        goto LABEL_187;
      }
      __int8 v132 = v766.i8[0];
      unint64_t v133 = (unint64_t)v766.i64[0] >> 8;
      unint64_t v134 = (unint64_t)v766.i64[0] >> 16;
      unint64_t v486 = (unint64_t)v766.i64[0] >> 24;
      v487 = (void *)HIDWORD(v766.i64[0]);
      v488.i64[0] = (unint64_t)v766.i64[0] >> 40;
      unint64_t v489 = HIWORD(v766.i64[0]);
      unint64_t v490 = v766.i8[8];
      unint64_t v135 = HIBYTE(v766.i64[0]);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v136 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v137 = (*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v130 = v58 + v137;
      v770[0].i8[0] = v132;
      v770[0].i8[1] = v135;
      v770[0].i8[2] = v133;
      v770[0].i8[3] = v134;
      v770[0].i8[4] = v486;
      v770[0].i8[5] = (char)v487;
      v770[0].i8[6] = v488.i8[0];
      v770[0].i8[7] = v489;
      v770[0].i64[1] = v490;
      v770[1].i64[0] = v131;
      sub_10006ED18((uint64_t)v770);
      goto LABEL_61;
    case 0x68uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      if ((sub_100067D9C(v29, v28, (uint64_t (*)(void))sub_1002582B4) & 0x10000) != 0) {
        goto LABEL_188;
      }
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v138 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v139 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v140 = v58 + v139;
      sub_1000C0938();
      v770[0].i8[0] = v141;
      v770[0].i64[1] = v142;
      sub_10006EC38((uint64_t)v770);
      goto LABEL_56;
    case 0x69uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      if ((sub_100067D9C(v29, v28, (uint64_t (*)(void))sub_1002582B4) & 0x10000) != 0) {
        goto LABEL_188;
      }
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v143 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v144 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v140 = v58 + v144;
      sub_1000C0938();
      v770[0].i8[0] = v145;
      v770[0].i64[1] = v146;
      sub_10006EC44((uint64_t)v770);
LABEL_56:
      sub_10006E544((uint64_t)v770, v140);
      goto LABEL_209;
    case 0x6AuLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v122 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_10006604C(v29, v122, (void (*)(unint64_t *__return_ptr))sub_10025A2E0, (uint64_t)&v766);
      swift_release();
      swift_release();
      uint64_t v147 = v768[0].i64[0];
      if (!v768[0].i64[0]) {
        goto LABEL_187;
      }
      __int8 v148 = v766.i8[0];
      unint64_t v149 = (unint64_t)v766.i64[0] >> 8;
      unint64_t v150 = (unint64_t)v766.i64[0] >> 16;
      unint64_t v151 = (unint64_t)v766.i64[0] >> 24;
      unint64_t v152 = HIDWORD(v766.i64[0]);
      v487 = (void *)((unint64_t)v766.i64[0] >> 40);
      v488.i64[0] = HIWORD(v766.i64[0]);
      unint64_t v489 = HIBYTE(v766.i64[0]);
      unint64_t v490 = v766.i8[8];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v153 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v154 = (*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v130 = v58 + v154;
      v770[0].i8[0] = v148;
      v770[0].i8[1] = v149;
      v770[0].i8[2] = v150;
      v770[0].i8[3] = v151;
      v770[0].i8[4] = v152;
      v770[0].i8[5] = (char)v487;
      v770[0].i8[6] = v488.i8[0];
      v770[0].i8[7] = v489;
      v770[0].i64[1] = v490;
      v770[1].i64[0] = v147;
      sub_10006EC2C((uint64_t)v770);
      goto LABEL_61;
    case 0x70uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v122 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100065120(v29, v122, (uint64_t)&v766);
      swift_release();
      swift_release();
      uint64_t v155 = v767.i64[1];
      if (!v767.i64[1])
      {
LABEL_187:
        unint64_t v28 = v122;
        goto LABEL_188;
      }
      __int8 v156 = v766.i8[8];
      __int8 v157 = v766.i8[0];
      unint64_t v158 = (unint64_t)v766.i64[0] >> 8;
      unint64_t v159 = (unint64_t)v766.i64[0] >> 24;
      unint64_t v160 = HIDWORD(v766.i64[0]);
      unint64_t v482 = (unint64_t)v766.i64[0] >> 40;
      unint64_t v483 = HIWORD(v766.i64[0]);
      unint64_t v484 = HIBYTE(v766.i64[0]);
      unint64_t v485 = (unint64_t)v766.i64[1] >> 8;
      unint64_t v486 = (unint64_t)v766.i64[1] >> 16;
      v487 = (void *)((unint64_t)v766.i64[1] >> 24);
      v488.i64[0] = HIDWORD(v766.i64[1]);
      unint64_t v489 = (unint64_t)v766.i64[1] >> 40;
      unint64_t v490 = HIWORD(v766.i64[1]);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v161 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v162 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v130 = v58 + v162;
      v770[0].i8[0] = v157;
      v770[0].i8[1] = v158;
      v770[0].i8[2] = v159;
      v770[0].i8[3] = v160;
      v770[0].i8[4] = v482;
      v770[0].i8[5] = v483;
      v770[0].i8[6] = v484;
      v770[0].i8[7] = v156;
      v770[0].i8[8] = v485;
      v770[0].i8[9] = v486;
      v770[0].i8[10] = (char)v487;
      v770[0].i8[11] = v488.i8[0];
      v770[0].i8[12] = v489;
      v770[0].i8[13] = v490;
      v770[1].i64[0] = v155;
      sub_10006ED0C((uint64_t)v770);
LABEL_61:
      sub_10006E544((uint64_t)v770, v130);
LABEL_62:
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v492;
LABEL_63:
      unint64_t v164 = v491;
      goto LABEL_210;
    case 0x71uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v165 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100065614(v29, v165, (uint64_t)&v766);
      swift_release();
      swift_release();
      uint64_t v166 = v767.i64[1];
      if (!v767.i64[1])
      {
        unint64_t v28 = v165;
        goto LABEL_188;
      }
      __int8 v167 = v767.i8[0];
      unint64_t v168 = (unint64_t)v767.i64[0] >> 8;
      unint64_t v169 = (unint64_t)v767.i64[0] >> 16;
      unint64_t v170 = (unint64_t)v767.i64[0] >> 24;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v171 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v172 = (*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64x2_t v173 = (uint64x2_t)vdupq_lane_s64(v766.i64[0], 0);
      v770[0].i8[0] = v766.i8[0];
      *(int8x8_t *)&v770[0].i8[1] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v173, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v173, (uint64x2_t)xmmword_1003B2EA0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v173, (uint64x2_t)xmmword_1003B2EE0), (int32x4_t)vshlq_u64(v766, (uint64x2_t)xmmword_1003B2ED0))));
      v770[0].i8[9] = v766.i8[15];
      v770[0].i8[10] = v167;
      v770[0].i8[11] = v168;
      v770[0].i8[12] = v169;
      v770[0].i8[13] = v170;
      *(__int32 *)((char *)&v770[0].i32[3] + 2) = v766.i32[2];
      v770[1].i16[1] = v766.i16[6];
      v770[1].i64[1] = v166;
      sub_10006ED00((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v58 + v172);
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v492;
      unint64_t v164 = v165;
LABEL_210:
      sub_10000C970(v163, v164);
      return (void *)v58;
    case 0x72uLL:
      v487 = v16;
      v488.i64[0] = v15;
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v107 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100065B68(v29, v107, (uint64_t)v770);
      swift_release();
      swift_release();
      uint64_t v174 = v770[1].i64[0];
      if (!v770[1].i64[0])
      {
LABEL_164:
        unint64_t v28 = v107;
        goto LABEL_188;
      }
      uint64_t v175 = type metadata accessor for DriverEvent(0);
      int8x16_t v488 = (int8x16_t)v770[0];
      uint64x2_t v176 = (uint64x2_t)vdupq_laneq_s64(v770[0], 1);
      unsigned __int32 v177 = v770[0].i32[0];
      __int8 v178 = v770[0].i8[1];
      unint64_t v179 = (unint64_t)v770[0].i64[0] >> 40;
      __int8 v180 = v770[0].i8[6];
      unint64_t v489 = v770[0].u8[7];
      unint64_t v490 = (unint64_t)v770[0].u64 + 2;
      uint64_t v181 = (uint64_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v176, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v176, (uint64x2_t)xmmword_1003B2EA0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vextq_s8(v488, v488, 8uLL), (uint64x2_t)xmmword_1003B2EC0), (int32x4_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v770[0].i64[0], 0), (uint64x2_t)xmmword_1003B2EA0))));
      sub_100010BCC(&qword_10047DC60);
      unint64_t v182 = (*(unsigned __int8 *)(*(void *)(v175 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v175 - 8) + 80);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1003B2450;
      uint64_t v183 = v48 + v182;
      v770[0].i8[0] = v177;
      *(unsigned char *)unint64_t v490 = v488.i8[8];
      if (((v177 >> 8) & 0xFE) != 0) {
        __int8 v184 = 2;
      }
      else {
        __int8 v184 = v178;
      }
      v770[0].i8[1] = v184;
      *(uint64_t *)((char *)v770[0].i64 + 3) = v181;
      v770[0].i8[11] = v179;
      v770[0].i8[12] = v180;
      v770[0].i8[13] = v489;
      v770[1].i64[0] = v174;
      sub_10006ECF4((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v183);
LABEL_71:
      swift_storeEnumTagMultiPayload();
      unint64_t v186 = v491;
      uint64_t v185 = v492;
LABEL_97:
      sub_10000C970(v185, v186);
      return (void *)v48;
    case 0x75uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v31 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066A64(v29, v31, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCD0);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DCD0);
      if (sub_10006ECCC((uint64_t)v770) == 1) {
        goto LABEL_99;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v187 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v188 = (*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1003B2450;
      uint64_t v189 = v33 + v188;
      v749.n128_u8[0] = v770[0].u8[1];
      *(unsigned __int32 *)((char *)v749.n128_u32 + 1) = *(unsigned __int32 *)((char *)v770[0].u32 + 3);
      *(unsigned __int16 *)((char *)&v749.n128_u16[2] + 1) = *(unsigned __int16 *)((char *)&v770[0].u16[3] + 1);
      v749.n128_u8[7] = v770[0].u8[0] == 1;
      v749.n128_u32[2] = *(unsigned __int32 *)((char *)&v770[0].u32[2] + 1);
      v749.n128_u16[6] = *(unsigned __int16 *)((char *)&v770[0].u16[6] + 1);
      sub_10006ECE8((uint64_t)&v749);
      v190 = &v749;
      goto LABEL_158;
    case 0x76uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066B54(v29, v28, (uint64_t)&v766);
      if (v767.i8[12]) {
        goto LABEL_188;
      }
      __int8 v191 = v766.i8[8];
      unint64_t v192 = v766.i64[0];
      unint64_t v193 = (unint64_t)v766.i64[1] >> 8;
      unint64_t v194 = (unint64_t)v766.i64[1] >> 16;
      unint64_t v195 = (unint64_t)v766.i64[1] >> 24;
      unint64_t v489 = HIDWORD(v766.i64[1]);
      unint64_t v490 = (unint64_t)v766.i64[1] >> 40;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v196 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v197 = (*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      uint64_t v198 = sub_1000C305C(HIDWORD(v192));
      v770[0].i8[0] = v192;
      v770[0].i8[1] = v191;
      v770[0].i8[2] = v193;
      v770[0].i8[3] = v194;
      v770[0].i8[4] = v195;
      v770[0].i8[5] = v489;
      v770[0].i16[3] = v490;
      v770[0].i64[1] = v198;
      sub_10006EC5C((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v58 + v197);
      goto LABEL_62;
    case 0x7AuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066F90(v29, v28, (uint64_t)v770);
      if (v770[4].i8[8]) {
        goto LABEL_188;
      }
      __int32 v199 = v770[4].i32[0];
      uint64_t v200 = v770[3].i64[1];
      uint64_t v201 = v770[3].i64[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v202 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v203 = (*(unsigned __int8 *)(v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80);
      uint64_t v204 = swift_allocObject();
      uint64_t v205 = HIWORD(v199);
      *(_OWORD *)(v204 + 16) = xmmword_1003B2450;
      uint64_t v206 = v204;
      uint64_t v207 = v204 + v203;
      uint64_t v208 = __ROR8__(v201, 32);
      uint64_t v209 = __ROR8__(v200, 32);
      unint64_t v210 = sub_1001C7008((unsigned __int16)v199);
      if ((v210 & 0xFF00000000) == 0x300000000)
      {
        if (qword_10047C1F0 != -1) {
          swift_once();
        }
        LODWORD(v210) = static Channel.nanPrimary;
        LOBYTE(v211) = byte_100488664;
        LOBYTE(v212) = byte_100488665;
      }
      else
      {
        unint64_t v211 = HIDWORD(v210);
        unint64_t v212 = v210 >> 40;
      }
      unint64_t v264 = v491;
      v770[0].i64[0] = v205;
      v770[0].i64[1] = v208;
      v770[1].i64[0] = v209;
      v770[1].i32[2] = v210;
      v770[1].i8[12] = v211;
      v770[1].i8[13] = v212;
      sub_10006E5B8((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v207);
      goto LABEL_197;
    case 0x7DuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067CAC(v29, v28, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DC68);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DC68);
      if (sub_10006E390((uint64_t)v770) == 1) {
        goto LABEL_188;
      }
      memcpy(v894, v770, 0x193uLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v213 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v31 = v28;
      unint64_t v214 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1003B2450;
      unint64_t v34 = v33 + v214;
      *(void *)unint64_t v34 = sub_1000C17E0();
      *(_OWORD *)(v34 + 8) = 0u;
      *(_OWORD *)(v34 + 24) = 0u;
      __int16 v38 = 256;
LABEL_83:
      *(_WORD *)(v34 + 40) = v38;
      goto LABEL_159;
    case 0x7EuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      uint64_t v215 = sub_100067D9C(v29, v28, (uint64_t (*)(void))sub_1002582B4);
      if ((v215 & 0x10000) != 0) {
        goto LABEL_188;
      }
      unsigned __int8 v216 = v215;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v55 = v28;
      uint64_t v217 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v218 = (*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v219 = v58 + v218;
      *(void *)unint64_t v219 = v216;
      *(_OWORD *)(v219 + 24) = 0u;
      *(_OWORD *)(v219 + 8) = 0u;
      *(unsigned char *)(v219 + 40) = 0;
      char v220 = 2;
      goto LABEL_151;
    case 0x7FuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      uint64_t v221 = sub_100067E64(v29, v28, (uint64_t (*)(void))sub_100258268);
      if ((v222 & 0x100000000) != 0) {
        goto LABEL_188;
      }
      unint64_t v223 = sub_1000C7CBC(HIDWORD(v221), v222);
      if ((v223 & 0xFF00000000) == 0x300000000) {
        goto LABEL_188;
      }
      unint64_t v224 = v223;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v55 = v28;
      uint64_t v225 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v226 = (*(unsigned __int8 *)(v225 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v225 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v219 = v58 + v226;
      *(void *)unint64_t v219 = v224 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v219 + 24) = 0u;
      *(_OWORD *)(v219 + 8) = 0u;
      *(unsigned char *)(v219 + 40) = 0;
      char v220 = 3;
      goto LABEL_151;
    case 0x81uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066C24(v29, v28, (__n128 *)&v766);
      if (v767.i8[4]) {
        goto LABEL_188;
      }
      uint64_t v227 = v766.i64[1];
      uint64_t v67 = v29;
      unint64_t v68 = v28;
      unsigned __int16 v228 = v766.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v229 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v230 = (*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      v770[0].i64[0] = sub_1000C08AC(v228, v227);
      v770[0].i16[4] = v231;
      v770[0].i8[10] = v232;
      v770[0].i8[11] = v233;
      v770[0].i8[12] = v234;
      v770[0].i8[13] = v235;
      v770[0].i8[14] = v236;
      v770[0].i8[15] = v237;
      sub_10006EC50((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v58 + v230);
LABEL_91:
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v67;
      unint64_t v164 = v68;
      goto LABEL_210;
    case 0x8EuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v238 = v491;
      uint64_t v239 = v492;
      sub_100013D44(v492, v491);
      sub_100067224(v239, v238, v894);
      sub_10006EC68((uint64_t)v894, (uint64_t)&v749, &qword_10047DCB0);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCB0);
      if (sub_10006E498((uint64_t)&v766) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      }
      else
      {
        sub_10006EC68((uint64_t)&v749, (uint64_t)v893, &qword_10047DCB0);
        memcpy(v770, v893, 0x650uLL);
        sub_1000C0D00((uint64_t)v770, (uint64_t)v10);
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_1000380B4((uint64_t)v10, &qword_10047DC58);
        unint64_t v28 = v491;
        uint64_t v29 = v492;
        goto LABEL_188;
      }
      sub_100013368((uint64_t)v10, (uint64_t)v14, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v371 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v372 = (*(unsigned __int8 *)(v371 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v371 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      sub_10006E4B4((uint64_t)v14, v58 + v372, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v492, v491);
      sub_100013308((uint64_t)v14, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      return (void *)v58;
    case 0x95uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067314(v29, v28, v894);
      sub_10006EC68((uint64_t)v894, (uint64_t)&v749, &qword_10047DCA0);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCA0);
      if (sub_10006E47C((uint64_t)&v766) == 1) {
        goto LABEL_188;
      }
      sub_10006EC68((uint64_t)&v749, (uint64_t)v893, &qword_10047DCA0);
      v770[10] = (int64x2_t)v893[10];
      v770[11] = (int64x2_t)v893[11];
      v770[12] = (int64x2_t)v893[12];
      v770[6] = (int64x2_t)v893[6];
      v770[7] = (int64x2_t)v893[7];
      v770[8] = (int64x2_t)v893[8];
      v770[9] = (int64x2_t)v893[9];
      v770[2] = (int64x2_t)v893[2];
      v770[3] = (int64x2_t)v893[3];
      v770[4] = (int64x2_t)v893[4];
      v770[5] = (int64x2_t)v893[5];
      v770[0] = (int64x2_t)v893[0];
      v770[1] = (int64x2_t)v893[1];
      sub_1000C8F78((uint64_t)v770, (uint64_t)v895);
      sub_10006EC68((uint64_t)v895, (uint64_t)&v896, &qword_10047DCA8);
      if (!(void)v900) {
        goto LABEL_188;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v240 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v241 = v28;
      unint64_t v242 = (*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1003B2450;
      v243 = (_OWORD *)(v48 + v242);
      long long v244 = *(_OWORD *)v897;
      _OWORD *v243 = v896;
      v243[1] = v244;
      long long v245 = v901;
      long long v246 = v899;
      v243[5] = v900;
      v243[6] = v245;
      long long v247 = v898;
      v243[2] = *(_OWORD *)&v897[16];
      v243[3] = v247;
      v243[4] = v246;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v185 = v29;
      unint64_t v186 = v241;
      goto LABEL_97;
    case 0x9DuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v31 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067134(v29, v31, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCB8);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DCB8);
      if (sub_10006E51C((uint64_t)v770) == 1)
      {
LABEL_99:
        unint64_t v28 = v31;
        goto LABEL_188;
      }
      v487 = v883;
      v459 = v865;
      v448 = v829;
      v449 = v847;
      v447 = v808;
      v444 = (long long *)v812;
      v445 = v790;
      v442 = v772;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v489 = type metadata accessor for DriverEvent(0);
      unint64_t v349 = (*(unsigned __int8 *)(*(void *)(v489 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v489 - 8) + 80);
      uint64_t v350 = swift_allocObject();
      unint64_t v490 = v350;
      *(_OWORD *)(v350 + 16) = xmmword_1003B2450;
      v488.i64[0] = v350 + v349;
      LODWORD(v478) = v770[0].i32[0];
      LODWORD(v477) = v770[0].u8[4];
      LODWORD(v476) = v770[0].u8[5];
      LODWORD(v475) = v770[0].u8[6];
      LODWORD(v474) = v770[1].u8[0];
      LODWORD(v473) = v770[1].u8[1];
      LODWORD(v472) = v770[1].u8[2];
      int v470 = v770[2].u8[5];
      LODWORD(v471) = v770[2].u8[4];
      __int32 v468 = v770[3].i32[0];
      int v469 = v770[2].u8[6];
      uint64_t v466 = v770[4].i64[0];
      uint64_t v467 = v770[3].i64[1];
      uint64_t v464 = v770[5].i64[0];
      uint64_t v465 = v770[4].i64[1];
      uint64_t v462 = v770[6].i64[0];
      uint64_t v463 = v770[5].i64[1];
      unint64_t v485 = v770[7].u64[0];
      unint64_t v486 = v770[6].u64[1];
      unint64_t v483 = v770[8].u64[0];
      unint64_t v484 = v770[7].u64[1];
      uint64_t v481 = v770[9].i64[0];
      unint64_t v482 = v770[8].u64[1];
      unint64_t v479 = v770[10].u64[0];
      unint64_t v480 = v770[9].u64[1];
      uint64_t v730 = v770[18].i64[0];
      uint64_t v732 = v770[19].i64[1];
      uint64_t v734 = v770[21].i64[0];
      uint64_t v736 = v770[22].i64[1];
      uint64_t v738 = v770[24].i64[0];
      uint64_t v740 = v770[25].i64[1];
      uint64_t v742 = v770[27].i64[0];
      uint64_t v744 = v770[28].i64[1];
      uint64_t v460 = v770[10].i64[1];
      uint64_t v461 = v770[11].i64[0];
      long long v731 = *(long long *)((char *)&v770[18] + 8);
      int64x2_t v733 = v770[20];
      long long v735 = *(long long *)((char *)&v770[21] + 8);
      int64x2_t v737 = v770[23];
      long long v739 = *(long long *)((char *)&v770[24] + 8);
      int64x2_t v741 = v770[26];
      long long v743 = *(long long *)((char *)&v770[27] + 8);
      int64x2_t v745 = v770[29];
      long long v747 = *(long long *)((char *)&v770[30] + 8);
      uint64_t v746 = v770[30].i64[0];
      uint64_t v748 = v770[31].i64[1];
      uint64_t v351 = v770[12].i64[0];
      int64x2_t v729 = v770[17];
      uint64_t v352 = v770[0].i64[1];
      unint64_t v353 = *(unint64_t *)((char *)v770[1].u64 + 4);
      uint64_t v354 = v770[2].i64[1];
      uint64_t v457 = v770[16].i64[1];
      uint64_t v458 = v770[11].i64[1];
      uint64_t v454 = v770[12].i64[1];
      uint64_t v455 = v770[16].i64[0];
      uint64_t v456 = v770[13].i64[1];
      __int32 v451 = v770[2].i32[0];
      __int32 v452 = v770[1].i32[3];
      v453 = sub_1000C44A4((uint64_t)&v729);
      int64x2_t v709 = v770[47];
      long long v711 = *(long long *)((char *)&v770[48] + 8);
      uint64_t v710 = v770[48].i64[0];
      uint64_t v712 = v770[49].i64[1];
      int64x2_t v713 = v770[50];
      long long v715 = *(long long *)((char *)&v770[51] + 8);
      uint64_t v714 = v770[51].i64[0];
      uint64_t v716 = v770[52].i64[1];
      int64x2_t v717 = v770[53];
      long long v719 = *(long long *)((char *)&v770[54] + 8);
      uint64_t v718 = v770[54].i64[0];
      uint64_t v720 = v770[55].i64[1];
      int64x2_t v721 = v770[56];
      long long v723 = *(long long *)((char *)&v770[57] + 8);
      uint64_t v722 = v770[57].i64[0];
      uint64_t v724 = v770[58].i64[1];
      int64x2_t v725 = v770[59];
      long long v727 = *(long long *)((char *)&v770[60] + 8);
      uint64_t v726 = v770[60].i64[0];
      uint64_t v728 = v770[61].i64[1];
      v450 = sub_1000C44A4((uint64_t)&v709);
      int64x2_t v689 = v770[62];
      long long v691 = *(long long *)((char *)&v770[63] + 8);
      uint64_t v690 = v770[63].i64[0];
      uint64_t v692 = v770[64].i64[1];
      int64x2_t v693 = v770[65];
      long long v695 = *(long long *)((char *)&v770[66] + 8);
      uint64_t v694 = v770[66].i64[0];
      uint64_t v696 = v770[67].i64[1];
      int64x2_t v697 = v770[68];
      long long v699 = *(long long *)((char *)&v770[69] + 8);
      uint64_t v698 = v770[69].i64[0];
      uint64_t v700 = v770[70].i64[1];
      int64x2_t v701 = v770[71];
      long long v703 = *(long long *)((char *)&v770[72] + 8);
      uint64_t v702 = v770[72].i64[0];
      uint64_t v704 = v770[73].i64[1];
      int64x2_t v705 = v770[74];
      long long v707 = *(long long *)((char *)&v770[75] + 8);
      uint64_t v706 = v770[75].i64[0];
      uint64_t v708 = v770[76].i64[1];
      v355 = sub_1000C44A4((uint64_t)&v689);
      int64x2_t v669 = v770[77];
      long long v671 = *(long long *)((char *)&v770[78] + 8);
      uint64_t v670 = v770[78].i64[0];
      uint64_t v672 = v770[79].i64[1];
      int64x2_t v673 = v770[80];
      long long v675 = *(long long *)((char *)&v770[81] + 8);
      uint64_t v674 = v770[81].i64[0];
      uint64_t v676 = v770[82].i64[1];
      int64x2_t v677 = v770[83];
      long long v679 = *(long long *)((char *)&v770[84] + 8);
      uint64_t v678 = v770[84].i64[0];
      uint64_t v680 = v770[85].i64[1];
      int64x2_t v681 = v770[86];
      long long v683 = *(long long *)((char *)&v770[87] + 8);
      uint64_t v682 = v770[87].i64[0];
      uint64_t v684 = v770[88].i64[1];
      int64x2_t v685 = v770[89];
      long long v687 = *(long long *)((char *)&v770[90] + 8);
      uint64_t v686 = v770[90].i64[0];
      uint64_t v688 = v770[91].i64[1];
      v356 = sub_1000C44A4((uint64_t)&v669);
      int64x2_t v649 = v770[92];
      long long v651 = *(long long *)((char *)&v770[93] + 8);
      uint64_t v650 = v770[93].i64[0];
      uint64_t v652 = v770[94].i64[1];
      int64x2_t v653 = v770[95];
      long long v655 = *(long long *)((char *)&v770[96] + 8);
      uint64_t v654 = v770[96].i64[0];
      uint64_t v656 = v770[97].i64[1];
      int64x2_t v657 = v770[98];
      long long v659 = *(long long *)((char *)&v770[99] + 8);
      uint64_t v658 = v770[99].i64[0];
      uint64_t v660 = v770[100].i64[1];
      int64x2_t v661 = v770[101];
      v357 = v442;
      long long v663 = *(_OWORD *)v442;
      uint64_t v662 = v771;
      uint64_t v664 = v772[2];
      long long v665 = v773;
      long long v667 = *((_OWORD *)v442 + 3);
      uint64_t v666 = v774;
      uint64_t v668 = v775;
      v446 = sub_1000C44A4((uint64_t)&v649);
      long long v629 = *v444;
      long long v631 = v813;
      uint64_t v630 = v812[2];
      uint64_t v632 = v814;
      long long v633 = v444[3];
      long long v635 = v816;
      uint64_t v634 = v815;
      uint64_t v636 = v817;
      long long v637 = v444[6];
      long long v639 = v819;
      uint64_t v638 = v818;
      uint64_t v640 = v820;
      long long v641 = v444[9];
      long long v643 = v822;
      uint64_t v642 = v821;
      uint64_t v644 = v823;
      long long v645 = v444[12];
      long long v647 = v825;
      uint64_t v646 = v824;
      uint64_t v648 = v826;
      v444 = (long long *)sub_1000C44A4((uint64_t)&v629);
      long long v617 = v776;
      long long v619 = v357[6];
      uint64_t v618 = v777;
      uint64_t v620 = v778;
      long long v621 = v779;
      long long v623 = v357[9];
      uint64_t v622 = v780;
      uint64_t v624 = v781;
      long long v625 = v782;
      long long v627 = v357[12];
      uint64_t v626 = v783;
      uint64_t v628 = v784;
      v443 = sub_1000C462C(&v617);
      long long v599 = v785;
      long long v601 = v357[15];
      uint64_t v600 = v786;
      uint64_t v602 = v787;
      long long v603 = v788;
      long long v605 = *v445;
      uint64_t v604 = v789;
      uint64_t v606 = v790[2];
      long long v607 = v791;
      long long v609 = v445[3];
      uint64_t v608 = v792;
      uint64_t v610 = v793;
      long long v611 = v794;
      v358 = v445;
      long long v613 = v445[6];
      uint64_t v612 = v795;
      uint64_t v614 = v796;
      long long v615 = v797;
      uint64_t v616 = v798;
      v442 = sub_1000C486C((uint64_t)&v599);
      long long v581 = v358[9];
      long long v583 = v800;
      uint64_t v582 = v799;
      uint64_t v584 = v801;
      long long v585 = v358[12];
      long long v587 = v803;
      uint64_t v586 = v802;
      uint64_t v588 = v804;
      long long v589 = v358[15];
      long long v591 = v806;
      uint64_t v590 = v805;
      uint64_t v592 = v807;
      long long v593 = *(_OWORD *)v447;
      long long v595 = v809;
      uint64_t v594 = v808[2];
      uint64_t v596 = v810;
      long long v597 = *((_OWORD *)v447 + 3);
      uint64_t v598 = v811;
      v447 = sub_1000C486C((uint64_t)&v581);
      long long v561 = v827;
      long long v563 = *v448;
      uint64_t v562 = v828;
      uint64_t v564 = v829[2];
      long long v565 = v830;
      long long v567 = v448[3];
      uint64_t v566 = v831;
      uint64_t v568 = v832;
      long long v569 = v833;
      long long v571 = v448[6];
      uint64_t v570 = v834;
      uint64_t v572 = v835;
      long long v573 = v836;
      long long v575 = v448[9];
      uint64_t v574 = v837;
      uint64_t v576 = v838;
      long long v577 = v839;
      v359 = v448;
      long long v579 = v448[12];
      uint64_t v578 = v840;
      uint64_t v580 = v841;
      v360 = sub_1000C44A4((uint64_t)&v561);
      long long v541 = v842;
      long long v543 = v359[15];
      uint64_t v542 = v843;
      uint64_t v544 = v844;
      long long v545 = v845;
      long long v547 = *v449;
      uint64_t v546 = v846;
      uint64_t v548 = v847[2];
      long long v549 = v848;
      long long v551 = v449[3];
      uint64_t v550 = v849;
      uint64_t v552 = v850;
      long long v553 = v851;
      long long v555 = v449[6];
      uint64_t v554 = v852;
      uint64_t v556 = v853;
      long long v557 = v854;
      v361 = v449;
      long long v559 = v449[9];
      uint64_t v558 = v855;
      uint64_t v560 = v856;
      v362 = sub_1000C44A4((uint64_t)&v541);
      long long v521 = v857;
      long long v523 = v361[12];
      uint64_t v522 = v858;
      uint64_t v524 = v859;
      long long v525 = v860;
      long long v527 = v361[15];
      uint64_t v526 = v861;
      uint64_t v528 = v862;
      long long v529 = v863;
      long long v531 = *v459;
      uint64_t v530 = v864;
      uint64_t v532 = v865[2];
      long long v533 = v866;
      long long v535 = v459[3];
      uint64_t v534 = v867;
      uint64_t v536 = v868;
      long long v537 = v869;
      v363 = v459;
      long long v539 = v459[6];
      uint64_t v538 = v870;
      uint64_t v540 = v871;
      v364 = sub_1000C44A4((uint64_t)&v521);
      long long v501 = v872;
      long long v503 = v363[9];
      uint64_t v502 = v873;
      uint64_t v504 = v874;
      long long v505 = v875;
      long long v507 = v363[12];
      uint64_t v506 = v876;
      uint64_t v508 = v877;
      long long v509 = v878;
      long long v511 = v363[15];
      uint64_t v510 = v879;
      uint64_t v512 = v880;
      long long v513 = v881;
      long long v515 = *(_OWORD *)v487;
      uint64_t v514 = v882;
      uint64_t v516 = v883[2];
      long long v517 = v884;
      v365 = v487;
      long long v519 = *((_OWORD *)v487 + 3);
      uint64_t v518 = v885;
      uint64_t v520 = v886;
      v366 = sub_1000C44A4((uint64_t)&v501);
      long long v493 = v887;
      uint64_t v494 = v888;
      long long v495 = *((_OWORD *)v365 + 6);
      uint64_t v496 = v889;
      long long v497 = v890;
      uint64_t v498 = v891;
      long long v499 = *((_OWORD *)v365 + 9);
      uint64_t v500 = v892;
      v367 = sub_1000C49E4(&v493);
      v894[0].n128_u32[0] = v478;
      v894[0].n128_u8[4] = v477;
      v894[0].n128_u8[5] = v476;
      v894[0].n128_u8[6] = v475;
      v894[1].n128_u8[0] = v474;
      v894[1].n128_u8[1] = v473;
      v894[1].n128_u16[1] = v472;
      v894[1].n128_u32[3] = v452;
      v894[2].n128_u32[0] = v451;
      v894[2].n128_u8[4] = v471;
      v894[2].n128_u8[5] = v470;
      v894[2].n128_u8[6] = v469;
      v894[3].n128_u32[0] = v468;
      v894[3].n128_u64[1] = v467;
      v894[4].n128_u64[0] = v466;
      v894[4].n128_u64[1] = v465;
      v894[5].n128_u64[0] = v464;
      v894[5].n128_u64[1] = v463;
      v894[6].n128_u64[0] = v462;
      *(unint64_t *)((char *)v894[1].n128_u64 + 4) = v353;
      v894[0].n128_u64[1] = v352;
      v894[2].n128_u64[1] = v354;
      v894[6].n128_u64[1] = v486;
      v894[7].n128_u64[0] = v485;
      v894[7].n128_u64[1] = v484;
      v894[8].n128_u64[0] = v483;
      v894[8].n128_u64[1] = v482;
      v894[9].n128_u64[0] = v481;
      v894[9].n128_u64[1] = v480;
      v894[10].n128_u64[0] = v479;
      v894[10].n128_u64[1] = v460;
      v894[11].n128_u64[0] = v461;
      v894[11].n128_u64[1] = v458;
      v894[12].n128_u64[0] = v351;
      v894[12].n128_u64[1] = v454;
      v894[13].n128_u64[0] = v455;
      v894[13].n128_u64[1] = v457;
      v894[14].n128_u64[0] = v456;
      v894[14].n128_u64[1] = (unint64_t)v453;
      v894[15].n128_u64[0] = (unint64_t)v450;
      v894[15].n128_u64[1] = (unint64_t)v355;
      v894[16].n128_u64[0] = (unint64_t)v356;
      v894[16].n128_u64[1] = (unint64_t)v446;
      v894[17].n128_u64[0] = (unint64_t)v444;
      v894[17].n128_u64[1] = (unint64_t)v443;
      v894[18].n128_u64[0] = (unint64_t)v442;
      v894[18].n128_u64[1] = (unint64_t)v447;
      v894[19].n128_u64[0] = (unint64_t)v360;
      v894[19].n128_u64[1] = (unint64_t)v362;
      v894[20].n128_u64[0] = (unint64_t)v364;
      v894[20].n128_u64[1] = (unint64_t)v366;
      v894[21] = (__n128)(unint64_t)v367;
      v894[22].n128_u64[0] = 0;
      v894[22].n128_u8[8] = 0;
      sub_10006E538((uint64_t)v894);
      v368 = v894;
      goto LABEL_171;
    case 0x9EuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v248 = sub_100066DBC(v29, v28);
      if ((v249 & 0x10000) != 0) {
        goto LABEL_188;
      }
      __int16 v250 = v248;
      __int16 v251 = v249;
      unint64_t v252 = v248 >> 16;
      uint64_t v253 = v29;
      unsigned int v254 = HIWORD(v248) | (v249 << 16);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v255 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v256 = (*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      v770[0].i16[0] = v250;
      *(uint64_t *)((char *)v770[0].i64 + 2) = __PAIR64__(v254, v252);
      v770[0].i32[0] = sub_1000C0998(v770[0].u64[0], v251);
      sub_10006E5EC((uint64_t)v770);
      sub_10006E544((uint64_t)v770, v58 + v256);
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v253;
      goto LABEL_63;
    case 0x9FuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100066EA0(v29, v28, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DCC0);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DCC0);
      if (sub_10006E5C4((uint64_t)v770) == 1) {
        goto LABEL_188;
      }
      memcpy(v894, v770, 0x3E1uLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v257 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v31 = v28;
      unint64_t v258 = (*(unsigned __int8 *)(v257 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v257 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1003B2450;
      sub_1000C09E0((uint64_t)&v896);
      *(void *)&v893[0] = v896;
      DWORD2(v893[0]) = DWORD2(v896);
      LOBYTE(v893[1]) = v897[0];
      *(_OWORD *)((char *)&v893[1] + 8) = *(_OWORD *)&v897[8];
      *((void *)&v893[2] + 1) = *(void *)&v897[24];
      sub_10006E5E0((uint64_t)v893);
      sub_10006E544((uint64_t)v893, v33 + v258);
      goto LABEL_159;
    case 0xACuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      uint64_t v259 = sub_10006740C(v29, v28);
      if (v261) {
        goto LABEL_188;
      }
      unint64_t v262 = v259;
      unsigned __int16 v263 = v260;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v264 = v28;
      uint64_t v265 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v266 = (*(unsigned __int8 *)(v265 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v265 + 80);
      uint64_t v206 = swift_allocObject();
      *(_OWORD *)(v206 + 16) = xmmword_1003B2450;
      unint64_t v267 = v206 + v266;
      unint64_t v268 = sub_1001C7008(v263);
      *(unsigned char *)unint64_t v267 = HIDWORD(v262) != 0;
      *(_DWORD *)(v267 + 4) = v268;
      *(_WORD *)(v267 + 8) = WORD2(v268);
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
LABEL_197:
      swift_storeEnumTagMultiPayload();
      uint64_t v347 = v29;
      unint64_t v348 = v264;
      goto LABEL_198;
    case 0xB3uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v269 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v270 = v269;
      sub_1000675C0(v29, v269, &v749);
      sub_10006EC68((uint64_t)&v749, (uint64_t)&v766, &qword_10047DC80);
      sub_10006EC68((uint64_t)&v766, (uint64_t)v770, &qword_10047DC80);
      if (sub_10006E3E4((uint64_t)v770) == 1 || (uint64_t v271 = v770[0].u32[1], v770[0].i32[1] >= 0x100u))
      {
        unint64_t v28 = v270;
      }
      else
      {
        long long v761 = *(long long *)((char *)&v770[12] + 8);
        long long v762 = *(long long *)((char *)&v770[13] + 8);
        long long v763 = *(long long *)((char *)&v770[14] + 8);
        long long v764 = *(long long *)((char *)&v770[15] + 8);
        long long v757 = *(long long *)((char *)&v770[8] + 8);
        long long v758 = *(long long *)((char *)&v770[9] + 8);
        long long v759 = *(long long *)((char *)&v770[10] + 8);
        long long v760 = *(long long *)((char *)&v770[11] + 8);
        long long v753 = *(long long *)((char *)&v770[4] + 8);
        long long v754 = *(long long *)((char *)&v770[5] + 8);
        long long v755 = *(long long *)((char *)&v770[6] + 8);
        long long v756 = *(long long *)((char *)&v770[7] + 8);
        __n128 v749 = *(__n128 *)((char *)v770 + 8);
        long long v750 = *(long long *)((char *)&v770[1] + 8);
        long long v751 = *(long long *)((char *)&v770[2] + 8);
        long long v752 = *(long long *)((char *)&v770[3] + 8);
        uint64_t v272 = sub_100010BCC(&qword_10047DC88);
        *((void *)&v893[1] + 1) = v272;
        *(void *)&v893[2] = sub_10006E400();
        v273 = (void *)swift_allocObject();
        *(void *)&v893[0] = v273;
        v273[2] = 0;
        v273[3] = v271;
        v273[4] = &v749;
        v273[5] = &v765;
        v274 = (long long *)sub_1000369C4(v893, v272);
        long long v275 = v274[1];
        long long v896 = *v274;
        *(_OWORD *)v897 = v275;
        Slice<>.withUnsafeBytes<A>(_:)();
        unint64_t v276 = v895[0];
        unint64_t v277 = v895[1];
        sub_100010754((uint64_t)v893);
        static DNSRecords.createRecord(with:value:)(v276, v277, 0, 0xF000000000000000, (uint64_t *)v894);
        sub_10000C970(v276, v277);
        sub_100010BCC(&qword_10047CC08);
        char v407 = swift_dynamicCast();
        if (v407)
        {
          uint64_t v408 = v749.n128_i64[1];
          uint64_t v409 = v749.n128_u64[0];
          char v410 = v750;
LABEL_228:
          sub_100010754((uint64_t)v894);
          sub_100010BCC(&qword_10047DC60);
          uint64_t v434 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v435 = (*(unsigned __int8 *)(v434 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v434 + 80);
          uint64_t v429 = swift_allocObject();
          *(_OWORD *)(v429 + 16) = xmmword_1003B2450;
          unint64_t v436 = v429 + v435;
          v749.n128_u64[0] = 0;
          v749.n128_u64[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          swift_bridgeObjectRelease();
          v749.n128_u64[0] = 0xD000000000000015;
          v749.n128_u64[1] = 0x80000001003DA620;
          v437._countAndFlagsBits = v409;
          DNSRecords.Identifier.description.getter(v409, v408, v410);
          String.append(_:)(v437);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v438._countAndFlagsBits = 0x2064656B61654C20;
          v438._object = (void *)0xE90000000000005BLL;
          String.append(_:)(v438);
          v894[0].n128_u32[0] = v770[0].i32[0];
          v439._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v439);
          swift_bridgeObjectRelease();
          v440._countAndFlagsBits = 93;
          v440._object = (void *)0xE100000000000000;
          String.append(_:)(v440);
          unint64_t v441 = v749.n128_u64[1];
          *(void *)unint64_t v436 = v749.n128_u64[0];
          *(void *)(v436 + 8) = v441;
          *(void *)(v436 + 16) = 0xD000000000000096;
          *(void *)(v436 + 24) = 0x80000001003DA640;
          *(unsigned char *)(v436 + 32) = 1;
          type metadata accessor for DriverEvent.AWDL(0);
          swift_storeEnumTagMultiPayload();
          goto LABEL_229;
        }
        if (swift_dynamicCast())
        {
          uint64_t v408 = *((void *)&v750 + 1);
          uint64_t v409 = v750;
          char v410 = v751;
          swift_bridgeObjectRelease();
          goto LABEL_228;
        }
        if (swift_dynamicCast())
        {
          sub_100013368((uint64_t)v8, v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
          uint64_t v409 = *(void *)(v6 + 16);
          uint64_t v408 = *(void *)(v6 + 24);
          char v410 = *(unsigned char *)(v6 + 32);
          swift_bridgeObjectRetain();
          sub_100013308(v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
          goto LABEL_228;
        }
        if (swift_dynamicCast())
        {
          uint64_t v408 = *((void *)&v750 + 1);
          uint64_t v409 = v750;
          char v410 = v751;
          uint64_t v432 = *((void *)&v751 + 1);
          unint64_t v433 = v752;
          swift_bridgeObjectRelease();
          sub_10000C970(v432, v433);
          goto LABEL_228;
        }
        sub_100010754((uint64_t)v894);
        unint64_t v28 = v491;
      }
LABEL_188:
      unint64_t v378 = v490;
      Logger.init(subsystem:category:)();
      sub_100013D44(v29, v28);
      sub_100013D44(v29, v28);
      v379 = Logger.logObject.getter();
      os_log_type_t v380 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v379, v380))
      {
        uint64_t v381 = swift_slowAlloc();
        v894[0].n128_u64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v381 = 134218242;
        *(void *)&v893[0] = v489;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v381 + 12) = 2080;
        sub_100013D44(v492, v28);
        unint64_t v382 = v28;
        uint64_t v383 = sub_100036314(0, 0xE000000000000000, v492, v28);
        unint64_t v385 = v384;
        sub_10000C970(v492, v382);
        uint64_t v386 = v383;
        unint64_t v28 = v382;
        *(void *)&v893[0] = sub_100010680(v386, v385, (uint64_t *)v894);
        uint64_t v29 = v492;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C970(v29, v382);
        sub_10000C970(v29, v382);
        _os_log_impl((void *)&_mh_execute_header, v379, v380, "Failed to parse event[%ld]: %s", (uint8_t *)v381, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(unint64_t, uint64_t))v487[1])(v490, v488.i64[0]);
      }
      else
      {
        sub_10000C970(v29, v28);
        sub_10000C970(v29, v28);

        ((void (*)(unint64_t, uint64_t))v487[1])(v378, v488.i64[0]);
      }
LABEL_191:
      sub_10000C970(v29, v28);
      return _swiftEmptyArrayStorage;
    case 0xB6uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unsigned int v278 = sub_100067D9C(v29, v28, (uint64_t (*)(void))sub_1002582B4);
      if ((v278 & 0x10000) != 0) {
        goto LABEL_188;
      }
      char v279 = v278;
      unsigned int v280 = v278 >> 8;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v281 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v282 = (*(unsigned __int8 *)(v281 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      v283 = (unsigned char *)(v58 + v282);
      unsigned char *v283 = v279;
      v283[1] = v280;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_209;
    case 0xC5uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_100067064(v29, v28, (uint64_t)v770);
      if (v770[1].i8[12]) {
        goto LABEL_188;
      }
      __int8 v284 = v770[0].i8[8];
      __int8 v285 = v770[0].i8[4];
      unint64_t v286 = (unint64_t)v770[0].i64[0] >> 40;
      __int8 v287 = v770[1].i8[8];
      __int8 v288 = v770[0].i8[6];
      __int8 v289 = v770[1].i8[0];
      __int8 v290 = v770[0].i8[7];
      unint64_t v471 = (unint64_t)v770[0].i64[1] >> 8;
      unint64_t v472 = (unint64_t)v770[0].i64[1] >> 16;
      unint64_t v473 = (unint64_t)v770[0].i64[1] >> 24;
      uint64_t v474 = v770[0].u32[3];
      unint64_t v475 = (unint64_t)v770[0].i64[1] >> 40;
      uint64_t v476 = v770[0].u16[7];
      uint64_t v477 = v770[0].u8[15];
      unint64_t v478 = (unint64_t)v770[1].i64[0] >> 8;
      unint64_t v479 = (unint64_t)v770[1].i64[0] >> 16;
      unint64_t v480 = (unint64_t)v770[1].i64[0] >> 24;
      uint64_t v481 = v770[1].u32[1];
      unint64_t v482 = (unint64_t)v770[1].i64[0] >> 40;
      unint64_t v483 = v770[1].u16[3];
      unint64_t v484 = v770[1].u8[7];
      LODWORD(v487) = (unsigned __int32)v770[1].i32[2] >> 8;
      LODWORD(v486) = HIWORD(v770[1].i32[2]);
      LODWORD(v485) = HIBYTE(v770[1].i32[2]);
      sub_100010BCC(&qword_10047DC60);
      unint64_t v489 = type metadata accessor for DriverEvent(0);
      unint64_t v291 = (*(unsigned __int8 *)(*(void *)(v489 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v489 - 8) + 80);
      uint64_t v292 = swift_allocObject();
      unint64_t v490 = v292;
      *(_OWORD *)(v292 + 16) = xmmword_1003B2450;
      v488.i64[0] = v292 + v291;
      v766.i8[0] = v285;
      v766.i8[1] = v286;
      v766.i8[2] = v288;
      v766.i8[3] = v290;
      v766.i8[4] = v284;
      v766.i8[5] = v471;
      v766.i8[6] = v472;
      v766.i8[7] = v473;
      v766.i8[8] = v474;
      v766.i8[9] = v475;
      v766.i8[10] = v476;
      v766.i8[11] = v477;
      v766.i8[12] = v289;
      v766.i8[13] = v478;
      v766.i8[14] = v479;
      v766.i8[15] = v480;
      v767.i8[0] = v481;
      v767.i8[1] = v482;
      v767.i8[2] = v483;
      v767.i8[3] = v484;
      v767.i8[4] = v287;
      v767.i8[5] = (char)v487;
      v767.i8[6] = v486;
      v767.i8[7] = v485;
      if (qword_10047C1C0 != -1) {
        swift_once();
      }
      uint64_t v293 = 0;
      v294 = _swiftEmptyArrayStorage;
      break;
    case 0xC8uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      sub_1000676B0(v29, v28, (uint64_t)v770);
      if (v770[2].i8[8]) {
        goto LABEL_188;
      }
      int64x2_t v767 = v770[1];
      v768[0].i64[0] = v770[2].i64[0];
      uint64x2_t v766 = (uint64x2_t)v770[0];
      NSString v322 = sub_1000C95E0((uint64_t)&v766);
      if (!v322) {
        goto LABEL_188;
      }
      NSString v324 = v322;
      char v325 = v323;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v79 = v28;
      uint64_t v326 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v327 = (*(unsigned __int8 *)(v326 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v326 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v328 = v58 + v327;
      *(void *)unint64_t v328 = v324;
      *(unsigned char *)(v328 + 8) = v325;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
LABEL_209:
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v29;
      unint64_t v164 = v79;
      goto LABEL_210;
    case 0xD7uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v329 = sub_1000134C0(v29, v28);
      if ((v329 & 0x1000000000000) != 0) {
        goto LABEL_188;
      }
      unint64_t v330 = v329;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v55 = v28;
      uint64_t v331 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v332 = (*(unsigned __int8 *)(v331 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v331 + 80);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
      unint64_t v219 = v58 + v332;
      *(void *)unint64_t v219 = v330 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v219 + 24) = 0u;
      *(_OWORD *)(v219 + 8) = 0u;
      *(unsigned char *)(v219 + 40) = 0;
      char v220 = 9;
LABEL_151:
      *(unsigned char *)(v219 + 41) = v220;
LABEL_152:
      swift_storeEnumTagMultiPayload();
      uint64_t v163 = v29;
      unint64_t v164 = v55;
      goto LABEL_210;
    case 0xE1uLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v333 = sub_100067878(v29, v28, (uint64_t (*)(void))sub_1002579EC);
      if ((v333 & 0x100000000) != 0) {
        goto LABEL_188;
      }
      unint64_t v31 = v28;
      if (v333 >= 4) {
        __int8 v334 = 1;
      }
      else {
        __int8 v334 = 0x2010001u >> (8 * v333);
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v335 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v336 = (*(unsigned __int8 *)(v335 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v335 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1003B2450;
      uint64_t v189 = v33 + v336;
      v770[0].i8[0] = v334;
      sub_10006E5A0((uint64_t)v770);
      v190 = (__n128 *)v770;
LABEL_158:
      sub_10006E544((uint64_t)v190, v189);
LABEL_159:
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v29, v31);
      return (void *)v33;
    case 0xEAuLL:
      v487 = v16;
      v488.i64[0] = v15;
      unint64_t v28 = v491;
      uint64_t v29 = v492;
      sub_100013D44(v492, v491);
      unint64_t v337 = sub_100067BE0(v29, v28, (uint64_t (*)(void))sub_10025846C);
      if (v338) {
        goto LABEL_188;
      }
      unsigned int v339 = v337;
      unint64_t v340 = HIDWORD(v337);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v341 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v342 = (*(unsigned __int8 *)(v341 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v341 + 80);
      uint64_t v206 = swift_allocObject();
      *(_OWORD *)(v206 + 16) = xmmword_1003B2450;
      v343 = (void *)(v206 + v342);
      void *v343 = v339;
      uint64_t v344 = enum case for DispatchTimeInterval.milliseconds(_:);
      uint64_t v345 = type metadata accessor for DispatchTimeInterval();
      v346 = *(void (**)(void))(*(void *)(v345 - 8) + 104);
      ((void (*)(void *, uint64_t, uint64_t))v346)(v343, v344, v345);
      *(void *)((char *)v343 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20)) = v340;
      v346();
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v347 = v29;
      unint64_t v348 = v491;
LABEL_198:
      sub_10000C970(v347, v348);
      return (void *)v206;
    default:
      return result;
  }
  while (1)
  {
    __int32 v296 = v766.i32[v293];
    v297 = off_100481FE0;
    if (*((void *)off_100481FE0 + 2))
    {
      uint64_t v298 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v299 = -1 << v297[32];
      unint64_t v300 = v298 & ~v299;
      if ((*(void *)&v297[((v300 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v300))
      {
        uint64_t v301 = *((void *)v297 + 6);
        if (*(_DWORD *)(v301 + 4 * v300) == v296)
        {
LABEL_123:
          __int8 v303 = 0;
          __int8 v304 = 3;
          goto LABEL_142;
        }
        uint64_t v302 = ~v299;
        while (1)
        {
          unint64_t v300 = (v300 + 1) & v302;
          if (((*(void *)&v297[((v300 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v300) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v301 + 4 * v300) == v296) {
            goto LABEL_123;
          }
        }
      }
    }
    if (qword_10047C1C8 != -1) {
      swift_once();
    }
    v305 = off_100481FE8;
    if (*((void *)off_100481FE8 + 2))
    {
      uint64_t v306 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v307 = -1 << v305[32];
      unint64_t v308 = v306 & ~v307;
      if ((*(void *)&v305[((v308 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v308))
      {
        uint64_t v309 = *((void *)v305 + 6);
        if (*(_DWORD *)(v309 + 4 * v308) == v296)
        {
LABEL_132:
          __int8 v303 = 1;
          __int8 v304 = 4;
          goto LABEL_142;
        }
        uint64_t v310 = ~v307;
        while (1)
        {
          unint64_t v308 = (v308 + 1) & v310;
          if (((*(void *)&v305[((v308 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v308) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v309 + 4 * v308) == v296) {
            goto LABEL_132;
          }
        }
      }
    }
    if (qword_10047C1D0 != -1) {
      swift_once();
    }
    v311 = off_100481FF0;
    if (!*((void *)off_100481FF0 + 2)) {
      goto LABEL_116;
    }
    uint64_t v312 = static Hasher._hash(seed:bytes:count:)();
    uint64_t v313 = -1 << v311[32];
    unint64_t v314 = v312 & ~v313;
    if (((*(void *)&v311[((v314 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v314) & 1) == 0) {
      goto LABEL_116;
    }
    uint64_t v315 = *((void *)v311 + 6);
    if (*(_DWORD *)(v315 + 4 * v314) != v296)
    {
      uint64_t v316 = ~v313;
      do
      {
        unint64_t v314 = (v314 + 1) & v316;
        if (((*(void *)&v311[((v314 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v314) & 1) == 0) {
          goto LABEL_116;
        }
      }
      while (*(_DWORD *)(v315 + 4 * v314) != v296);
    }
    __int8 v303 = 2;
    __int8 v304 = 5;
LABEL_142:
    v770[0].i32[0] = v296;
    v770[0].i8[4] = v303;
    v770[0].i8[5] = v304;
    sub_1001C4000();
    __int32 v317 = v770[0].i32[0];
    __int8 v318 = v770[0].i8[4];
    __int8 v319 = v770[0].i8[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v294 = sub_1000C5C4C(0, v294[2] + 1, 1, v294);
    }
    unint64_t v321 = v294[2];
    unint64_t v320 = v294[3];
    if (v321 >= v320 >> 1) {
      v294 = sub_1000C5C4C((void *)(v320 > 1), v321 + 1, 1, v294);
    }
    v294[2] = v321 + 1;
    v295 = &v294[v321];
    *((_DWORD *)v295 + 8) = v317;
    *((unsigned char *)v295 + 36) = v318;
    *((unsigned char *)v295 + 37) = v319;
LABEL_116:
    if (++v293 == 8)
    {
      v770[0].i64[0] = (uint64_t)v294;
      sub_10006E5AC((uint64_t)v770);
      v368 = (__n128 *)v770;
LABEL_171:
      sub_10006E544((uint64_t)v368, v488.i64[0]);
      swift_storeEnumTagMultiPayload();
      unint64_t v370 = v491;
      uint64_t v369 = v492;
LABEL_194:
      sub_10000C970(v369, v370);
      return (void *)v490;
    }
  }
}

uint64_t sub_10000A7D0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000A808(unsigned int a1, unsigned char *a2, unsigned int a3, uint64_t (*a4)(void, uint64_t, unint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Data.Deallocator();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3 || !a2) {
    return a4(a1, 0, 0xC000000000000000);
  }
  if (a6)
  {
    uint64_t v17 = a7 - (void)a6;
    uint64_t v18 = a3;
    if (v17 >= a3)
    {
      memcpy(a6, a2, a3);
      (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for Data.Deallocator.none(_:), v13);
      v27[1] = Data.Deallocator._deallocator.getter();
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v20 = sub_100003D88(v19, a3);
      unint64_t v22 = v21;
      swift_release();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      a4(a1, v20, v22);
      return sub_10000C970(v20, v22);
    }
  }
  else
  {
    uint64_t v18 = a3;
  }
  uint64_t v24 = sub_100260F60(a2, v18);
  unint64_t v26 = v25;
  a4(a1, v24, v25);

  return sub_10000C970(v24, v26);
}

uint64_t sub_10000AA60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100010BCC(&qword_10047D0B8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoutingSocket();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, (uint64_t)v8, &qword_10047D0B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return sub_1000380B4((uint64_t)v8, &qword_10047D0B8);
  }
  sub_100013368((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v57);
  uint64_t v41 = v57[0];
  unint64_t v40 = v57[1];
  uint64_t v39 = v57[2];
  __int16 v38 = (void *)v57[3];
  sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006D100);
  sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006D100);
  uint64_t v14 = Logger.logObject.getter();
  int v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    int v36 = v15;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v42 = v35;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v37 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v17 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    v60[0] = sub_100010680(v17, v18, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    sub_10006EC68((uint64_t)v57, (uint64_t)v60, &qword_10047DBA0);
    if (v61 == 1)
    {
      uint64_t v19 = v38;
      swift_bridgeObjectRetain();
      uint64_t v20 = IPv6Address.description.getter(v41, v40, v39, v19);
      unint64_t v22 = v21;
      sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
    }
    else
    {
      uint64_t v23 = (char *)swift_slowAlloc();
      LODWORD(v58[0]) = v41;
      inet_ntop(2, v58, v23, 0x10u);
      uint64_t v20 = String.init(cString:)();
      unint64_t v22 = v24;
      swift_slowDealloc();
    }
    v58[0] = sub_100010680(v20, v22, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
    sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v36, "Infra peer (%s) has IP address %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
    sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
  }
  sub_10006EC68((uint64_t)v57, (uint64_t)v58, &qword_10047DBA0);
  if (v59)
  {
    int v25 = 0;
    char v26 = 0;
    char v27 = 0;
    uint64_t v29 = v58[0];
    uint64_t v28 = v58[1];
    char v30 = 28;
    char v31 = 30;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v28 = 0;
    char v31 = 0;
    char v30 = 0;
    char v27 = 16;
    int v25 = v58[0];
    char v26 = 2;
  }
  LODWORD(v42) = 1;
  WORD2(v42) = a1;
  BYTE6(v42) = BYTE2(a1);
  HIBYTE(v42) = BYTE3(a1);
  char v43 = BYTE4(a1);
  char v44 = BYTE5(a1);
  char v45 = v27;
  char v46 = v26;
  __int16 v47 = 0;
  int v48 = v25;
  uint64_t v49 = 0;
  char v50 = v30;
  char v51 = v31;
  __int16 v52 = 0;
  int v53 = 0;
  uint64_t v54 = v29;
  uint64_t v55 = v28;
  int v56 = 0;
  uint64_t v33 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x1C3uLL, (uint64_t)&v42, (uint64_t)v57, 0, v33, v32);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100013308((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  return sub_10006D110((uint64_t)v57, (void (*)(void, void, void, void, void))sub_10006CA98);
}

Swift::Int sub_10000B290()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000B2D4(Swift::UInt a1)
{
  swift_beginAccess();
  sub_10000B9E8(a1);
  swift_endAccess();
  switch(a1)
  {
    case 0xFuLL:
      return;
    case 0x10uLL:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v2 = xmmword_1003B2F00;
      *(unsigned char *)(v2 + 16) = 1;
      swift_willThrow();
      return;
    case 0x11uLL:
      swift_unownedRetainStrong();
      sub_10033C15C(0);
      swift_release();
      uint64_t v3 = 17;
      goto LABEL_6;
    case 0x13uLL:
      swift_unownedRetainStrong();
      uint64_t v4 = sub_1003AA744((uint64_t)&off_100467058);
      sub_10033B738(0, (uint64_t)v4);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v3 = 19;
      goto LABEL_6;
    default:
      uint64_t v3 = a1;
LABEL_6:
      sub_10000D88C(v3, 0);
      return;
  }
}

uint64_t sub_10000B45C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_1004882D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    char v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0) {
      id v33 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10000B72C(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1003A24B0();
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v9 = *v3, 1 << *(unsigned char *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v9 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v10 = *(void *)(*(void *)(v9 + 48) + 8 * a2);
    *a1 = *(void *)(*(void *)(v9 + 56) + 8 * a2);
    sub_100012CB4(a2, v9);
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_10000B824(Swift::UInt a1)
{
  switch(a1)
  {
    case 0xFuLL:
      goto LABEL_8;
    case 0x10uLL:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v3 = xmmword_1003B2F00;
      *(unsigned char *)(v3 + 16) = 1;
      swift_willThrow();
      return;
    case 0x11uLL:
      sub_10000D88C(17, 1u);
      if (v1) {
        return;
      }
      swift_unownedRetainStrong();
      sub_10033C15C(1);
      swift_release();
LABEL_8:
      swift_beginAccess();
      sub_10000C11C(&v5, a1);
      swift_endAccess();
      return;
    case 0x13uLL:
      swift_unownedRetainStrong();
      uint64_t v4 = sub_1003AA744((uint64_t)&off_100467030);
      sub_10033B738(1, (uint64_t)v4);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    default:
      sub_10000D88C(a1, 1u);
      if (!v1) {
        goto LABEL_8;
      }
      return;
  }
}

uint64_t sub_10000B9E8(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 8 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100313A54();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_100012FB8(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10000BB10(void *a1, void (*a2)(char **), uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  unint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v5 + 8);
  uint64_t v13 = *(char **)v5;
  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v15 = *(void *)(v5 + 32);
  int v16 = *(unsigned __int8 *)(v5 + 40);
  switch(*(void *)(v5 + 24) >> 62)
  {
    case 1:
      int v63 = a4;
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(_OWORD *)(v5 + 24) = xmmword_1003D4F20;
      *(unsigned char *)(v5 + 40) = 0;
      uint64_t v8 = a1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v70 = v13;
      uint64_t v37 = v13;
      unint64_t v39 = sub_100011CE0(v8);
      uint64_t v40 = *((void *)v13 + 2);
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
        goto LABEL_29;
      }
      char v43 = v38;
      if (*((void *)v13 + 3) >= v42)
      {
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_21;
        }
        goto LABEL_31;
      }
      sub_10000B45C(v42, isUniquelyReferenced_nonNull_native);
      uint64_t v13 = v70;
      unint64_t v44 = sub_100011CE0(v8);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_33;
      }
      unint64_t v39 = v44;
LABEL_21:
      while (2)
      {
        swift_bridgeObjectRelease();
        if (v43)
        {
          swift_bridgeObjectRetain();
LABEL_25:
          uint64_t v54 = *((void *)v13 + 7);
          swift_bridgeObjectRelease();
          uint64_t v55 = *(void *)(v54 + 8 * v39);
          BOOL v56 = __OFADD__(v55, 1);
          uint64_t v57 = v55 + 1;
          if (!v56)
          {
            *(void *)(v54 + 8 * v39) = v57;

            *(void *)uint64_t v5 = v13;
            *(void *)(v5 + 8) = 0;
            *(void *)(v5 + 16) = 0;
            *(_OWORD *)(v5 + 24) = xmmword_1003D4F30;
            *(unsigned char *)(v5 + 40) = 0;
            unint64_t v70 = 0;
            v68(&v70);
            return 0;
          }
          __break(1u);
LABEL_31:
          sub_1003A24B0();
          uint64_t v13 = v70;
          continue;
        }
        break;
      }
      *(void *)&v13[8 * (v39 >> 6) + 64] |= 1 << v39;
      uint64_t v51 = 8 * v39;
      *(void *)(*((void *)v13 + 6) + v51) = v8;
      *(void *)(*((void *)v13 + 7) + v51) = 0;
      uint64_t v52 = *((void *)v13 + 2);
      swift_bridgeObjectRetain();
      if (!__OFADD__(v52, 1))
      {
        *((void *)v13 + 2) = v52 + 1;
        id v53 = (id)v8;
        goto LABEL_25;
      }
      __break(1u);
LABEL_33:
      type metadata accessor for XPCSession(0);
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    case 2:
      uint64_t v24 = *(void *)(v5 + 24);
      uint64_t v64 = *(void *)(v5 + 16);
      int v65 = v16;
      uint64_t v66 = v15;
      uint64_t v67 = v12;
      id v25 = a1;
      sub_1000131C8();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_100330164(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v27 = *((void *)v13 + 2);
      unint64_t v26 = *((void *)v13 + 3);
      if (v27 >= v26 >> 1) {
        uint64_t v13 = sub_100330164((char *)(v26 > 1), v27 + 1, 1, v13);
      }
      uint64_t result = 0;
      *((void *)v13 + 2) = v27 + 1;
      uint64_t v29 = &v13[32 * v27];
      uint64_t v30 = v68;
      *((void *)v29 + 4) = v25;
      *((void *)v29 + 5) = v30;
      *((void *)v29 + 6) = v69;
      v29[56] = a4 & 1;
      unint64_t v31 = v24 | 0x8000000000000000;
      goto LABEL_19;
    case 3:
      sub_100010BCC((uint64_t *)&unk_100484A80);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_1003B2450;
      uint64_t v34 = v68;
      uint64_t v33 = v69;
      *(void *)(v32 + 32) = a1;
      *(void *)(v32 + 40) = v34;
      *(void *)(v32 + 48) = v33;
      *(unsigned char *)(v32 + 56) = a4 & 1;
      *(void *)uint64_t v5 = v32;
      *(void *)(v5 + 8) = &_swiftEmptyArrayStorage;
      *(_OWORD *)(v5 + 16) = xmmword_1003D4F10;
      *(void *)(v5 + 32) = 0;
      *(unsigned char *)(v5 + 40) = -1;
      id v35 = a1;
      sub_1000131C8();
      return 1;
    default:
      uint64_t v62 = *(void *)(v5 + 24);
      uint64_t v64 = v14;
      int v65 = v16;
      uint64_t v66 = v15;
      uint64_t v67 = v12;
      int v63 = a4;
      Logger.init(subsystem:category:)();
      unint64_t v17 = a1;
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      int v20 = v19;
      if (os_log_type_enabled(v18, v19))
      {
        int v61 = v20;
        unint64_t v21 = (char *)v17;
        int64_t v22 = (uint8_t *)swift_slowAlloc();
        char v59 = (void *)swift_slowAlloc();
        unint64_t v60 = v22;
        *(_DWORD *)int64_t v22 = 138412290;
        v58[1] = v22 + 4;
        unint64_t v70 = v21;
        uint64_t v23 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v59 = v21;

        unint64_t v17 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v61, "%@ activationInProgress ", v60, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v18 = v17;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v37 = v17;
      LOBYTE(v8) = v63;
      sub_1000131C8();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_29:
      }
        uint64_t v13 = sub_100330164(0, *((void *)v13 + 2) + 1, 1, v13);
      unint64_t v47 = *((void *)v13 + 2);
      unint64_t v46 = *((void *)v13 + 3);
      if (v47 >= v46 >> 1) {
        uint64_t v13 = sub_100330164((char *)(v46 > 1), v47 + 1, 1, v13);
      }
      uint64_t result = 0;
      *((void *)v13 + 2) = v47 + 1;
      int v48 = &v13[32 * v47];
      uint64_t v49 = v68;
      *((void *)v48 + 4) = v37;
      *((void *)v48 + 5) = v49;
      *((void *)v48 + 6) = v69;
      v48[56] = v8 & 1;
      unint64_t v31 = v62;
LABEL_19:
      uint64_t v50 = v67;
      *(void *)uint64_t v5 = v13;
      *(void *)(v5 + 8) = v50;
      *(void *)(v5 + 16) = v64;
      *(void *)(v5 + 24) = v31;
      *(void *)(v5 + 32) = v66;
      *(unsigned char *)(v5 + 40) = v65;
      return result;
  }
}

uint64_t sub_10000C11C(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100012E68(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

void RoutingSocket.ipAddress(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100010BCC(&qword_10047E9C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003B2F40;
  *(_OWORD *)(inited + 32) = xmmword_1003C4F50;
  *(void *)(inited + 48) = 0x40000000002;
  size_t v41 = 0;
  int v5 = sysctl((int *)(inited + 32), 6u, 0, &v41, 0, 0);
  if (v5 < 0)
  {
    unsigned int v27 = v5;
    swift_bridgeObjectRelease();
    if (v27 == -1) {
      unsigned int v27 = errno.getter();
    }
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v28 = v27;
    *(void *)(v28 + 8) = 0;
    goto LABEL_38;
  }
  Swift::Int v6 = (unsigned __int16 *)malloc(v41);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v28 = xmmword_1003B2F60;
LABEL_38:
    *(unsigned char *)(v28 + 16) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t inited = (uint64_t)sub_1000C5F98(0, 6, 0, (char *)inited);
  }
  unsigned int v8 = sysctl((int *)(inited + 32), 6u, v7, &v41, 0, 0);
  swift_bridgeObjectRelease();
  if ((v8 & 0x80000000) != 0)
  {
    if (v8 == -1) {
      unsigned int v8 = errno.getter();
    }
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v29 = v8;
    *(void *)(v29 + 8) = 0;
    *(unsigned char *)(v29 + 16) = 0;
    goto LABEL_42;
  }
  int64_t v9 = v41;
  if (v41 < 0x5C || (size_t v10 = *v7, v41 < v10))
  {
LABEL_33:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v26 = 0;
    *(void *)(v26 + 8) = 0;
    *(unsigned char *)(v26 + 16) = 2;
LABEL_42:
    swift_willThrow();
    free(v7);
    return;
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v35 = 1;
  uint64_t v11 = 92;
  int64_t v12 = v10;
  do
  {
    if (v10 >= 0x6C)
    {
      unint64_t v13 = v10 - 92;
      uint64_t v14 = (char *)v7 + v11;
      uint64_t v15 = *((unsigned __int8 *)v7 + v11);
      if (v13 >= v15 + 20)
      {
        BOOL v16 = __OFADD__(v11, v15);
        uint64_t v17 = v11 + v15;
        if (v16) {
          goto LABEL_47;
        }
        int v18 = v14[1];
        os_log_type_t v19 = (char *)v7 + v17;
        uint64_t v20 = *((unsigned __int8 *)v7 + v17 + 5);
        size_t v21 = v19[6];
        uint64_t v39 = *((void *)v19 + 1);
        int v40 = *((_DWORD *)v19 + 4);
        int v36 = v18;
        if (v21)
        {
          if (v21 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v38 = v21;
            memcpy(__dst, (char *)&v39 + v20, v21);
            uint64_t v23 = sub_10000C6C4(*(uint64_t *)__dst, *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v38 << 48));
            if ((v23 & 0x1000000000000) != 0) {
              goto LABEL_28;
            }
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v22 = __DataStorage.init(bytes:length:)();
            uint64_t v23 = sub_10000C6C4(v21 << 32, v22 | 0x4000000000000000);
            if ((v23 & 0x1000000000000) != 0) {
              goto LABEL_28;
            }
          }
        }
        else
        {
          uint64_t v23 = sub_10000C6C4(0, 0xC000000000000000);
          if ((v23 & 0x1000000000000) != 0) {
            goto LABEL_28;
          }
        }
        *(_DWORD *)__dst = v23;
        __dst[4] = BYTE4(v23);
        __dst[5] = BYTE5(v23);
        LOWORD(v39) = a1;
        BYTE2(v39) = BYTE2(a1);
        BYTE3(v39) = BYTE3(a1);
        BYTE4(v39) = BYTE4(a1);
        BYTE5(v39) = BYTE5(a1);
        if (v23 == v39 && *(unsigned __int16 *)&__dst[4] == WORD2(v39))
        {
          if (v36 == 30)
          {
            __chkstk_darwin(&v33);
            *(_OWORD *)((char *)&v33 - 20) = *(_OWORD *)(v14 + 12);
            *((_OWORD *)&v33 - 2) = *(_OWORD *)v14;
            uint64_t v25 = *(&v33 - 2);
            uint64_t v33 = *(&v33 - 3);
            uint64_t v34 = v25;
            int v35 = 0;
          }
          else if (v36 == 2)
          {
            uint64_t v30 = 0;
            char v31 = 0;
            uint64_t v32 = *((unsigned int *)v14 + 1);
            goto LABEL_44;
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = v12 + 92;
    if (__OFADD__(v12, 92))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
    if (v9 < v11) {
      break;
    }
    size_t v10 = *(unsigned __int16 *)((char *)v7 + v12);
    BOOL v16 = __OFADD__(v12, v10);
    v12 += v10;
    if (v16) {
      goto LABEL_46;
    }
  }
  while (v9 >= v12);
  if (v35) {
    goto LABEL_33;
  }
  char v31 = 1;
  uint64_t v32 = v33;
  uint64_t v30 = v34;
LABEL_44:
  free(v7);
  *(void *)a2 = v32;
  *(void *)(a2 + 8) = v30;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = v31;
}

uint64_t sub_10000C6C4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
LABEL_5:
    unint64_t v5 = 0;
    unsigned __int8 v6 = 1;
    return v5 | ((unint64_t)v6 << 48);
  }
  unint64_t v3 = a2 >> 62;
  uint64_t v4 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_46;
      }
      uint64_t v7 = HIDWORD(result) - (int)result;
      goto LABEL_10;
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      uint64_t v7 = v8 - v9;
      if (__OFSUB__(v8, v9)) {
        goto LABEL_47;
      }
LABEL_10:
      sub_100013D44(result, a2);
      if (v7 != 6)
      {
LABEL_4:
        sub_10000C95C(v4, a2);
        sub_10000C95C(v4, a2);
        goto LABEL_5;
      }
LABEL_11:
      if (v3)
      {
        if (v3 == 1)
        {
          uint64_t v10 = (int)v4;
          unsigned __int8 v11 = Data.subscript.getter();
        }
        else
        {
          unsigned __int8 v11 = Data.subscript.getter();
          uint64_t v10 = *(void *)(v4 + 16);
        }
      }
      else
      {
        unsigned __int8 v11 = Data.subscript.getter();
        uint64_t v10 = 0;
      }
      uint64_t result = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      unsigned __int8 v12 = Data.subscript.getter();
      uint64_t v13 = v3;
      if (v3)
      {
        if (v3 == 1) {
          uint64_t v14 = (int)v4;
        }
        else {
          uint64_t v14 = *(void *)(v4 + 16);
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t result = v14 + 2;
      if (__OFADD__(v14, 2)) {
        goto LABEL_42;
      }
      unsigned __int8 v15 = Data.subscript.getter();
      if (v3)
      {
        if (v3 == 1) {
          uint64_t v16 = (int)v4;
        }
        else {
          uint64_t v16 = *(void *)(v4 + 16);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t result = v16 + 3;
      if (__OFADD__(v16, 3)) {
        goto LABEL_43;
      }
      unsigned __int8 v17 = Data.subscript.getter();
      if (v3)
      {
        if (v3 == 1) {
          uint64_t v18 = (int)v4;
        }
        else {
          uint64_t v18 = *(void *)(v4 + 16);
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t result = v18 + 4;
      if (__OFADD__(v18, 4)) {
        goto LABEL_44;
      }
      unsigned __int8 v19 = Data.subscript.getter();
      if (v3)
      {
        if (v3 == 1) {
          uint64_t v13 = (int)v4;
        }
        else {
          uint64_t v13 = *(void *)(v4 + 16);
        }
      }
      uint64_t result = v13 + 5;
      if (!__OFADD__(v13, 5))
      {
        unsigned __int8 v20 = Data.subscript.getter();
        sub_10000C95C(v4, a2);
        sub_10000C95C(v4, a2);
        unsigned __int8 v6 = 0;
        unint64_t v5 = v11 | (unint64_t)(unsigned __int16)(v12 << 8) | ((unint64_t)v15 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v17 << 24) | ((unint64_t)v19 << 32) | ((unint64_t)v20 << 40);
        return v5 | ((unint64_t)v6 << 48);
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    case 3uLL:
      goto LABEL_4;
    default:
      if (BYTE6(a2) != 6) {
        goto LABEL_4;
      }
      goto LABEL_11;
  }
}

uint64_t sub_10000C95C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000C970(a1, a2);
  }
  return a1;
}

uint64_t sub_10000C970(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10000C9C8(void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, const char *a7, uint64_t (*a8)(uint64_t, void, uint64_t, uint64_t))
{
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  id v15 = a1;
  sub_100010CAC(a3, a6, v14, a7, a8);

  return swift_release();
}

uint64_t sub_10000CA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  sub_100012724(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t sub_10000CAEC()
{
  swift_release();
  sub_10001270C(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocObject(v0, 89, 7);
}

void sub_10000CB30(void *a1, void (*a2)(id *), uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  int v45 = a4 & 1;
  unint64_t v6 = v4 + 1;
  uint64_t v7 = (char *)v4[1];
  uint64_t v8 = *v4;
  uint64_t v9 = v5[2];
  unint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  unsigned __int8 v12 = *((unsigned char *)v5 + 40);
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v48 = v8;
      uint64_t v20 = *(void *)(v8 + 16);
      sub_100012724(v8, (uint64_t)v7, v9, v10, v11, v12);
      swift_bridgeObjectRetain();
      if (!v20 || (unint64_t v21 = sub_100011CE0((uint64_t)a1), (v22 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        sub_100010164(v8, (uint64_t)v7, v9, v10, v11, v12);
        sub_10000F000();
        uint64_t v33 = swift_allocError();
        *(_OWORD *)uint64_t v37 = xmmword_1003B2F00;
        *(unsigned char *)(v37 + 16) = 1;
        int v35 = a2;
        uint64_t v36 = a3;
        goto LABEL_20;
      }
      int v41 = *(_DWORD *)(v8 + 36);
      uint64_t v23 = v21;
      sub_100010164(v8, (uint64_t)v7, v9, v10, v11, v12);
      *uint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      *(_OWORD *)(v5 + 3) = xmmword_1003D4F20;
      *((unsigned char *)v5 + 40) = 0;
      unint64_t v40 = v23;
      uint64_t v24 = sub_10001316C(&v47, v23, v41, 0, v8);
      sub_100010164(v8, (uint64_t)v7, v9, v10, v11, v12);

      uint64_t v25 = v47 - 1;
      if (__OFSUB__(v47, 1))
      {
        __break(1u);
      }
      else
      {
        if (v47 == 1)
        {

          uint64_t v28 = v48;
        }
        else
        {
          id v26 = a1;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v47 = v8;
          sub_10029506C(v25, v26, isUniquelyReferenced_nonNull_native);
          uint64_t v28 = v47;

          swift_bridgeObjectRelease();
        }
        if (*(void *)(v28 + 16))
        {
          *uint64_t v5 = v28;
          *unint64_t v6 = 0;
          v6[1] = 0;
          *(_OWORD *)(v5 + 3) = xmmword_1003D4F30;
          *((unsigned char *)v5 + 40) = 0;
          uint64_t v47 = 0;
          a2((id *)&v47);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_100010BCC((uint64_t *)&unk_100484A80);
          uint64_t v38 = swift_allocObject();
          *(_OWORD *)(v38 + 16) = xmmword_1003B2450;
          *(void *)(v38 + 32) = a1;
          *(void *)(v38 + 40) = a2;
          *(void *)(v38 + 48) = a3;
          *(unsigned char *)(v38 + 56) = v45 != 0;
          *uint64_t v5 = (uint64_t)&_swiftEmptyArrayStorage;
          v5[1] = v38;
          *((_OWORD *)v5 + 1) = xmmword_1003D4F40;
          v5[4] = 0;
          *((unsigned char *)v5 + 40) = -1;
          id v39 = a1;
          sub_1000131C8();
        }
      }
      break;
    case 2uLL:
      id v44 = a1;
      uint64_t v29 = a3;
      sub_1000131C8();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_100330164(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v31 = *((void *)v7 + 2);
      unint64_t v30 = *((void *)v7 + 3);
      if (v31 >= v30 >> 1) {
        uint64_t v7 = sub_100330164((char *)(v30 > 1), v31 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v31 + 1;
      uint64_t v32 = &v7[32 * v31];
      *((void *)v32 + 4) = v44;
      *((void *)v32 + 5) = a2;
      *((void *)v32 + 6) = v29;
      v32[56] = v45 != 0;
      unint64_t v19 = v10 | 0x8000000000000000;
      goto LABEL_17;
    case 3uLL:
      sub_10000F000();
      uint64_t v33 = swift_allocError();
      *(_OWORD *)uint64_t v34 = xmmword_1003B2F00;
      *(unsigned char *)(v34 + 16) = 1;
      int v35 = a2;
      uint64_t v36 = a3;
LABEL_20:
      sub_10027FDD0(v33, v35, v36, v45);
      swift_errorRelease();
      break;
    default:
      id v42 = a1;
      uint64_t v15 = a3;
      sub_1000131C8();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_100330164(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v17 = *((void *)v7 + 2);
      unint64_t v16 = *((void *)v7 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v7 = sub_100330164((char *)(v16 > 1), v17 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v17 + 1;
      uint64_t v18 = &v7[32 * v17];
      *((void *)v18 + 4) = v42;
      *((void *)v18 + 5) = a2;
      *((void *)v18 + 6) = v15;
      v18[56] = v45 != 0;
      unint64_t v19 = v10;
LABEL_17:
      *uint64_t v5 = v8;
      v5[1] = (uint64_t)v7;
      v5[2] = v9;
      v5[3] = v19;
      v5[4] = v11;
      *((unsigned char *)v5 + 40) = v12;
      break;
  }
}

uint64_t sub_10000CFDC(Swift::UInt a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = (void *)*v4;
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = v8[10];
  v9[2] = v10;
  uint64_t v11 = v8[11];
  v9[3] = v11;
  uint64_t v12 = v8[12];
  v9[4] = v12;
  uint64_t v13 = v8[13];
  v9[5] = v13;
  uint64_t v14 = v8[14];
  v9[6] = v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v28 = v15;
  unint64_t v16 = (void *)((char *)v5 + qword_1004845F8);
  swift_beginAccess();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v13;
  v17[6] = v14;
  v17[7] = sub_1000138A4;
  v17[8] = v9;
  swift_retain();
  char isUnique = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v32 = *v16;
  Swift::UInt v18 = v32;
  *unint64_t v16 = 0x8000000000000000;
  sub_100010614(a1);
  uint64_t v19 = *(void *)(v18 + 16);
  char v26 = v20;
  BOOL v21 = (v20 & 1) == 0;
  Swift::Int v22 = v19 + v21;
  if (__OFADD__(v19, v21))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v31[0] = v10;
  v31[1] = v11;
  v31[2] = v12;
  v31[3] = v13;
  v31[4] = v14;
  _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    sub_100010614(a1);
    if ((v26 & 1) != (v23 & 1)) {
      goto LABEL_8;
    }
  }
  *unint64_t v16 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v26 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v31);
    Swift::UInt v32 = a1;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  int v24 = sub_10000BB10(a2, (void (*)(char **))sub_1000129D4, v28, 0);
  swift_endAccess();
  swift_release();
  sub_10000FA10(a1, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_10000D330(Swift::UInt a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = (void *)*v4;
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = v8[10];
  v9[2] = v10;
  uint64_t v11 = v8[11];
  v9[3] = v11;
  uint64_t v12 = v8[12];
  v9[4] = v12;
  uint64_t v13 = v8[13];
  v9[5] = v13;
  uint64_t v14 = v8[14];
  v9[6] = v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v29 = v15;
  unint64_t v16 = (void *)((char *)v5 + qword_1004845F8);
  swift_beginAccess();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v13;
  v17[6] = v14;
  v17[7] = sub_1000138A8;
  v17[8] = v9;
  swift_retain();
  char isUnique = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v33 = *v16;
  Swift::UInt v18 = v33;
  *unint64_t v16 = 0x8000000000000000;
  sub_100010614(a1);
  uint64_t v19 = *(void *)(v18 + 16);
  char v27 = v20;
  BOOL v21 = (v20 & 1) == 0;
  Swift::Int v22 = v19 + v21;
  if (__OFADD__(v19, v21))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v32[0] = v10;
  v32[1] = v11;
  v32[2] = v12;
  v32[3] = v13;
  v32[4] = v14;
  _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    sub_100010614(a1);
    if ((v27 & 1) != (v23 & 1)) {
      goto LABEL_8;
    }
  }
  *unint64_t v16 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v27 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v32);
    Swift::UInt v33 = a1;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  sub_10000CB30(a2, (void (*)(id *))sub_100013168, v29, 0);
  int v25 = v24;
  swift_endAccess();
  swift_release();
  sub_10000FA10(a1, v25);
  swift_release();
  return swift_release();
}

uint64_t sub_10000D6EC()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName);
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8);
  }
  else
  {
    [*(id *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) processIdentifier];
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v2 = v3;
  }
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  type metadata accessor for UUID();
  sub_10000D834();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 93;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x6973736553435058;
}

unint64_t sub_10000D834()
{
  unint64_t result = qword_1004853F0;
  if (!qword_1004853F0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004853F0);
  }
  return result;
}

void sub_10000D88C(uint64_t a1, unsigned __int8 a2)
{
  if (a1 == 9)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Swift::String v4 = *(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
    uint64_t v5 = swift_checkMetadataState();
    v4(a2 & 1, v5, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v17 = a2 & (a1 == 17);
    id v7 = WiFiP2PSPITransactionType.serviceIdentifier.getter(a1);
    uint64_t v8 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
    uint64_t v16 = *v8;
    uint64_t v15 = v8[1];
    unint64_t v9 = (unint64_t)*(unsigned int *)(v8 + 2) << 16;
    uint64_t v10 = a1 - 1;
    uint64_t v11 = 1;
    switch(v10)
    {
      case 0:
        break;
      case 1:
        uint64_t v11 = 2;
        break;
      case 2:
        uint64_t v11 = 3;
        break;
      case 3:
        uint64_t v11 = 4;
        break;
      case 11:
        uint64_t v11 = 5;
        break;
      case 17:
        uint64_t v11 = 6;
        break;
      default:
        uint64_t v11 = 0;
        break;
    }
    swift_getAssociatedTypeWitness();
    uint64_t v12 = swift_getAssociatedConformanceWitness();
    uint64_t v13 = *(void (**)(id, unint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v12 + 72);
    uint64_t v14 = swift_checkMetadataState();
    v13(v7, v16 | (v15 << 8) | v9, v11, 0, 0, v17, 0x1000000000000, a2 & 1, v14, v12);
  }
}

id WiFiP2PSPITransactionType.serviceIdentifier.getter(uint64_t a1)
{
  if ((unint64_t)(a1 - 5) > 0xC) {
    return AWDLTrafficRegistrationServiceCentralizedAirTimeSchedulerPolicy;
  }
  else {
    return *(id *)*(&off_10045D490 + a1 - 5);
  }
}

uint64_t sub_10000DB18(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned __int16 a5, uint64_t a6, unint64_t a7, char a8)
{
  return sub_10000E050(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6, a7 & 0xFFFFFFFFFFFFLL | ((HIWORD(a7) & 1) << 48), a8);
}

void *WiFiAddress.zero.unsafeMutableAddressor()
{
  return &static WiFiAddress.zero;
}

void sub_10000DB58(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t (*a8)(void, void *))
{
  uint64_t v27 = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  v24[0] = 0;
  int v26 = 0;
  sub_10000DEF0((uint64_t)v24, a1, a2, a3, a4 & 1, a5, a6);
  if (a1 == 0xFFFFFFFF) {
    HIDWORD(v25) = a7;
  }
  uint64_t v14 = *(void *)(v8 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  swift_beginAccess();
  uint64_t v15 = *(void *)(v8 + 32);
  if (!*(void *)(v15 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10000DDE0(a5, a6);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_endAccess();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_1003B2F00;
    *(unsigned char *)(v23 + 16) = 1;
    swift_willThrow();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
    return;
  }
  uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(os_unfair_lock_s **)(v14 + 16);
  swift_retain();
  os_unfair_lock_unlock(v19);
  unsigned int v20 = a8(*(void *)(v18+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference), v24);
  if (v20)
  {
    uint64_t v21 = v20;
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v22 = v21;
    *(void *)(v22 + 8) = 0;
    *(unsigned char *)(v22 + 16) = 0;
    swift_willThrow();
  }
  swift_release_n();
}

uint64_t sub_10000DD4C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

uint64_t sub_10000DDE0(uint64_t a1, uint64_t a2)
{
  return sub_10000DD4C(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
}

unint64_t sub_10000DE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10000DEF0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v18 = a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v17, a6, a7);
  uint64_t result = swift_release();
  if ((a2 & 0x8000000000000000) == 0)
  {
    unint64_t v15 = HIDWORD(a2);
    if (!HIDWORD(a2))
    {
      uint64_t v16 = 0;
      *(_DWORD *)(a1 + 16) = a2;
      if ((a5 & 1) != 0 || !a3) {
        goto LABEL_7;
      }
      LODWORD(v15) = a4 - a3;
      if (a4 - a3 < (uint64_t)&_mh_execute_header)
      {
        uint64_t v16 = a3;
LABEL_7:
        *(_DWORD *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v16;
        return result;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000E050(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_WORD *)&v26[8] = 0;
  memset(&v26[12], 0, 156);
  *(void *)int v26 = 1;
  *(_DWORD *)&v26[168] = a8 & 1;
  *(_DWORD *)&v26[172] = sub_10000E504(a6);
  LOWORD(v27) = a4;
  *(_DWORD *)((char *)&v27 + 2) = a5;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v29 = v26;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v31 = 128;
  uint64_t v16 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v28, v13, v15);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v17 = 127;
  if (v16 < 127) {
    uint64_t v17 = v16;
  }
  if (v17 < 0) {
    __break(1u);
  }
  *(_DWORD *)&v26[12] = v17;
  *(_DWORD *)&v26[144] = a3;
  *(_WORD *)&v26[4] = a2;
  v26[6] = BYTE2(a2);
  v26[7] = BYTE3(a2);
  v26[8] = BYTE4(a2);
  v26[9] = BYTE5(a2);
  if ((a7 & 0x1000000000000) == 0)
  {
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1003B2F40;
    *(_WORD *)(v18 + 32) = a7;
    *(unsigned char *)(v18 + 34) = BYTE2(a7);
    *(unsigned char *)(v18 + 35) = BYTE3(a7);
    *(unsigned char *)(v18 + 36) = BYTE4(a7);
    *(unsigned char *)(v18 + 37) = BYTE5(a7);
    uint64_t v19 = sub_1001265EC(v18);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    *(void *)&v32[0] = v19;
    *((void *)&v32[0] + 1) = v21;
    sub_100074B70();
    DataProtocol.copyBytes(to:)();
    sub_10000C970(v19, v21);
  }
  v32[8] = *(_OWORD *)&v26[128];
  v32[9] = *(_OWORD *)&v26[144];
  v32[10] = *(_OWORD *)&v26[160];
  uint64_t v33 = v27;
  v32[4] = *(_OWORD *)&v26[64];
  v32[5] = *(_OWORD *)&v26[80];
  void v32[6] = *(_OWORD *)&v26[96];
  v32[7] = *(_OWORD *)&v26[112];
  v32[0] = *(_OWORD *)v26;
  v32[1] = *(_OWORD *)&v26[16];
  v32[2] = *(_OWORD *)&v26[32];
  v32[3] = *(_OWORD *)&v26[48];
  uint64_t v22 = *(void *)(v25 + 16);
  uint64_t v23 = *(void *)(v25 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0xA4uLL, (uint64_t)v32, (uint64_t)v34, 0, v22, v23);
  swift_bridgeObjectRelease();
  return swift_release();
}

void *sub_10000E350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  void v12[4];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v12[3];
    }
  }
  else
  {
    __chkstk_darwin(a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v11, v12);
      if (!v4) {
        return (void *)v11;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return (void *)sub_100068878(v8, v9, (uint64_t (*)(void))sub_10006D5A8);
    }
  }
  return result;
}

uint64_t sub_10000E464@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  return sub_10000E47C(a1, a2);
}

uint64_t sub_10000E47C@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  size_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  size_t v8 = strlcpy(v7, a1, v5);
  uint64_t result = v6(&v10, 0);
  *a2 = v8;
  return result;
}

uint64_t sub_10000E504(uint64_t a1)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v1 = 10;
      if ((a1 & 0x100000000) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v1 = 2;
      if ((a1 & 0x100000000) != 0) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    if ((a1 & 2) == 0)
    {
      uint64_t v1 = 0;
      if ((a1 & 0x100000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t v1 = 8;
    if ((a1 & 0x100000000) != 0) {
LABEL_4:
    }
      uint64_t v1 = v1 | 0x20;
  }
LABEL_5:
  if ((a1 & 0x80000000) == 0)
  {
    if ((a1 & 0x40000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v1 = v1 | 0x80;
    if ((a1 & 0x20000000) == 0) {
      return v1;
    }
    return v1 | 0x200;
  }
  uint64_t v1 = v1 | 0x40;
  if ((a1 & 0x40000000) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((a1 & 0x20000000) != 0) {
    return v1 | 0x200;
  }
  return v1;
}

void AppleDevice.setRequest(requestType:data:on:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_10000E5D0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10000E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, void, uint64_t))
{
  return sub_100010224(*(void *)(v4 + 56), *(void *)(v4 + 64), *(unsigned __int8 *)(v4 + 72), *(void *)(v4 + 80), *(unsigned char *)(v4 + 88), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), a1, a2, a3, a4);
}

uint64_t sub_10000E66C()
{
  return sub_10000E614((uint64_t)&unk_100467E38, (uint64_t)&unk_100467E60, (uint64_t)sub_1000138A4, (uint64_t (*)(void, uint64_t, void, uint64_t))sub_100011EC0);
}

uint64_t sub_10000E6A8()
{
  return sub_10000E6C0(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10000E6C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v68 = a6;
  uint64_t v69 = a7;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v70 = v12;
  uint64_t v71 = v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v58 = a2;
    int v63 = v15;
    uint64_t v64 = v16;
    uint64_t v62 = v17;
    int v61 = v19;
    uint64_t v60 = result;
    uint64_t v59 = a8;
    int v65 = a3;
    if (a2 == 16)
    {
      uint64_t v21 = sub_1000112DC(sub_1003159B4);
      if (a3 == 1)
      {
        if (v21)
        {
          sub_1003559BC(16);
          swift_release();
        }
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v22, v23)) {
          goto LABEL_30;
        }
        int v24 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)int v24 = 136315138;
        unint64_t v25 = WiFiP2PSPITransactionType.description.getter(16);
        __int16 v78 = (void *)sub_100010680(v25, v26, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = "Successfully activated transaction for NAN: %s";
      }
      else
      {
        if (v21)
        {
          sub_100355A54(16);
          swift_release();
        }
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v22, v23)) {
          goto LABEL_30;
        }
        int v24 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)int v24 = 136315138;
        unint64_t v47 = WiFiP2PSPITransactionType.description.getter(16);
        __int16 v78 = (void *)sub_100010680(v47, v48, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = "Successfully deactivated transaction for NAN: %s";
      }
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v27, v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_30:

      uint64_t v28 = 0;
      char v32 = 0;
      goto LABEL_31;
    }
    sub_10000F000();
    uint64_t v28 = swift_allocError();
    *(_OWORD *)uint64_t v29 = xmmword_1003B2F00;
    *(unsigned char *)(v29 + 16) = 1;
    swift_willThrow();
    __int16 v78 = (void *)v28;
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    if (swift_dynamicCast())
    {
      if (v74 != 1)
      {
        uint64_t v57 = a1;
        sub_100012AA4(aBlock, v73, (char)v74);
        goto LABEL_17;
      }
      if (aBlock == 2)
      {
        swift_errorRelease();
        sub_10000F000();
        uint64_t v28 = swift_allocError();
        *(_OWORD *)uint64_t v31 = xmmword_1003B2F00;
        char v32 = 1;
        *(unsigned char *)(v31 + 16) = 1;
        swift_errorRelease();
LABEL_31:
        uint64_t v44 = v68;
        uint64_t v43 = v69;
        uint64_t v39 = v58;
        uint64_t v46 = v66;
        uint64_t v45 = v67;
LABEL_32:
        uint64_t v49 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = v46;
        *(void *)(v50 + 24) = v45;
        *(void *)(v50 + 32) = v44;
        *(void *)(v50 + 40) = v43;
        *(void *)(v50 + 48) = v59;
        *(void *)(v50 + 56) = a1;
        *(void *)(v50 + 64) = v39;
        *(unsigned char *)(v50 + 72) = v65;
        *(void *)(v50 + 80) = v28;
        *(unsigned char *)(v50 + 88) = v32;
        unint64_t v76 = sub_10000E66C;
        uint64_t v77 = v50;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        unint64_t v73 = 1107296256;
        uint64_t v74 = sub_10000E5D0;
        uint64_t v75 = &unk_100467E00;
        uint64_t v51 = _Block_copy(&aBlock);
        id v52 = v49;
        swift_retain();
        sub_100012718(v28, v32);
        id v53 = v61;
        static DispatchQoS.unspecified.getter();
        __int16 v78 = _swiftEmptyArrayStorage;
        sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        uint64_t v54 = v63;
        uint64_t v55 = v70;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v51);
        swift_release();

        sub_10001270C(v28, v32);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v55);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v64);
        return swift_release();
      }
    }
    uint64_t v57 = a1;
LABEL_17:
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315650;
      if (a3 == 1) {
        uint64_t v37 = 0x6574617669746361;
      }
      else {
        uint64_t v37 = 0x6176697463616564;
      }
      if (a3 == 1) {
        unint64_t v38 = 0xE800000000000000;
      }
      else {
        unint64_t v38 = 0xEA00000000006574;
      }
      __int16 v78 = (void *)sub_100010680(v37, v38, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v39 = v58;
      unint64_t v40 = WiFiP2PSPITransactionType.description.getter(v58);
      __int16 v78 = (void *)sub_100010680(v40, v41, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 22) = 2112;
      swift_errorRetain();
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      __int16 v78 = (void *)v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v42;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to %s transaction %s because %@", (uint8_t *)v35, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a1 = v57;
      uint64_t v43 = v69;
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      a1 = v57;
      uint64_t v43 = v69;
      uint64_t v39 = v58;
    }
    uint64_t v45 = v67;
    uint64_t v44 = v68;
    uint64_t v46 = v66;
    char v32 = 1;
    goto LABEL_32;
  }
  return result;
}

unint64_t sub_10000F000()
{
  unint64_t result = qword_10047D100;
  if (!qword_10047D100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047D100);
  }
  return result;
}

uint64_t sub_10000F054()
{
  return sub_10000E614((uint64_t)&unk_100467D98, (uint64_t)&unk_100467DC0, (uint64_t)sub_1000138A4, (uint64_t (*)(void, uint64_t, void, uint64_t))sub_100011E40);
}

uint64_t sub_10000F090(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10000F0B0()
{
  return sub_10000F090((uint64_t (*)(void, void, void, void, void, void, void, void))sub_10000F0C8);
}

uint64_t sub_10000F0C8(uint64_t a1, int a2, Swift::UInt a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  Swift::UInt v54 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  id v53 = &v41[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v44 = a1;
    int v42 = a2;
    uint64_t v19 = sub_1000112DC((uint64_t (*)(void))sub_10001132C);
    uint64_t v47 = v12;
    uint64_t v48 = v11;
    uint64_t v45 = v15;
    uint64_t v46 = v14;
    uint64_t v43 = a8;
    if (a2 == 1)
    {
      if (v19)
      {
        sub_10000B824(v54);
        swift_release();
      }
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v20, v21)) {
        goto LABEL_12;
      }
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      unint64_t v23 = WiFiP2PSPITransactionType.description.getter(v54);
      uint64_t v55 = (void *)sub_100010680(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Successfully activated transaction for AWDL: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
    }
    else
    {
      if (v19)
      {
        sub_10000B2D4(v54);
        swift_release();
      }
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v20, v25)) {
        goto LABEL_12;
      }
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v26 = 136315138;
      unint64_t v27 = WiFiP2PSPITransactionType.description.getter(v54);
      uint64_t v55 = (void *)sub_100010680(v27, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v25, "Successfully deactivated transaction for AWDL: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
    }
    swift_slowDealloc();
LABEL_12:

    uint64_t v30 = v51;
    uint64_t v29 = v52;
    char v31 = v42;
    uint64_t v33 = v49;
    uint64_t v32 = v50;
    os_log_type_t v34 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v33;
    *(void *)(v35 + 24) = v32;
    *(void *)(v35 + 32) = v30;
    *(void *)(v35 + 40) = v29;
    uint64_t v36 = v44;
    *(void *)(v35 + 48) = v43;
    *(void *)(v35 + 56) = v36;
    *(void *)(v35 + 64) = v54;
    *(unsigned char *)(v35 + 72) = v31;
    *(void *)(v35 + 80) = 0;
    *(unsigned char *)(v35 + 88) = 0;
    aBlock[4] = (uint64_t)sub_10000F054;
    aBlock[5] = v35;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E5D0;
    aBlock[3] = (uint64_t)&unk_100467D60;
    uint64_t v37 = _Block_copy(aBlock);
    id v38 = v34;
    swift_retain();
    sub_100012718(0, 0);
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = _swiftEmptyArrayStorage;
    sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    uint64_t v39 = v53;
    uint64_t v40 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);
    swift_release();

    sub_10001270C(0, 0);
    (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v39, v40);
    (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v17, v46);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000F9CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10000FA10(Swift::UInt a1, int a2)
{
  int v5 = a2;
  uint64_t v6 = (void *)*v2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  uint64_t v10 = __chkstk_darwin();
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    uint64_t v48 = v10;
    uint64_t v54 = v11;
    uint64_t v14 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = swift_allocObject();
    uint64_t v53 = v6[10];
    *(void *)(v16 + 16) = v53;
    uint64_t v52 = v6[11];
    *(void *)(v16 + 24) = v52;
    uint64_t v51 = v6[12];
    *(void *)(v16 + 32) = v51;
    uint64_t v50 = v6[13];
    *(void *)(v16 + 40) = v50;
    uint64_t v49 = v6[14];
    *(void *)(v16 + 48) = v49;
    *(void *)(v16 + 56) = v15;
    uint64_t v46 = v2;
    Swift::UInt v41 = a1;
    *(void *)(v16 + 64) = a1;
    *(unsigned char *)(v16 + 72) = a2;
    uint64_t v63 = (uint64_t)sub_10000E6A8;
    uint64_t v64 = v16;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v47 = (uint64_t (**)(uint64_t))&v61;
    uint64_t v61 = (uint64_t)sub_10000E5D0;
    unint64_t v62 = (unint64_t)&unk_100467CC0;
    uint64_t v17 = _Block_copy(&aBlock);
    int v45 = a2;
    uint64_t v18 = v17;
    id v19 = v14;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v56 = _swiftEmptyArrayStorage;
    uint64_t v44 = sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v43 = sub_100010BCC((uint64_t *)&unk_10047D0F0);
    uint64_t v42 = sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);

    unint64_t v20 = *(void (**)(char *, uint64_t))(v55 + 8);
    v55 += 8;
    v20(v9, v7);
    os_log_type_t v21 = *(void (**)(char *, uint64_t))(v54 + 8);
    v54 += 8;
    uint64_t v22 = v48;
    v21(v13, v48);
    swift_release();
    swift_release();
    unint64_t v23 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v52;
    *(void *)(v25 + 16) = v53;
    *(void *)(v25 + 24) = v26;
    uint64_t v27 = v50;
    *(void *)(v25 + 32) = v51;
    *(void *)(v25 + 40) = v27;
    *(void *)(v25 + 48) = v49;
    *(void *)(v25 + 56) = v24;
    *(unsigned char *)(v25 + 64) = v45;
    *(void *)(v25 + 72) = v41;
    uint64_t v63 = (uint64_t)sub_10000F0B0;
    uint64_t v64 = v25;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v61 = (uint64_t)sub_10000E5D0;
    unint64_t v62 = (unint64_t)&unk_100467D10;
    unint64_t v28 = _Block_copy(&aBlock);
    id v29 = v23;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v56 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);

    v20(v9, v7);
    v21(v13, v22);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v30 = (char *)v2 + qword_1004845F8;
    swift_beginAccess();
    if (*(void *)(*(void *)v30 + 16))
    {
      sub_100010614(a1);
      if (v31)
      {
        type metadata accessor for WiFiP2PSPITransactionType(0);
        uint64_t v32 = v6[14];
        swift_bridgeObjectRetain();
        long long v33 = *((_OWORD *)v6 + 6);
        long long v56 = *((_OWORD *)v6 + 5);
        long long v57 = v33;
        uint64_t v58 = v32;
        _s16P2PActivityStateOMa();
        sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
        Dictionary.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v34 = aBlock;
        uint64_t v35 = v60;
        uint64_t v36 = v61;
        unint64_t v37 = v62;
        uint64_t v38 = v63;
        unsigned __int8 v39 = v64;
        if (v62 >> 62 == 3 && !(_BYTE)v64 && v62 == 0xC000000000000000 && !(v60 | aBlock | v61 | v63))
        {
          swift_beginAccess();
          type metadata accessor for Dictionary();
          Dictionary.remove(at:)();
          swift_endAccess();
          uint64_t v34 = aBlock;
          uint64_t v35 = v60;
          uint64_t v36 = v61;
          unint64_t v37 = v62;
          uint64_t v38 = v63;
          unsigned __int8 v39 = v64;
        }
        sub_100010164(v34, v35, v36, v37, v38, v39);
      }
    }
  }
}

uint64_t sub_10001011C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100010164(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8 = a4;
  unint64_t v10 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126F4(a3, v8);
    sub_1000126F4(a5, a6);
    return;
  }
  if (v10 != 1)
  {
    if (v10) {
      return;
    }
    goto LABEL_4;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100010224(uint64_t a1, Swift::UInt a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(void, uint64_t, void, uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v22 = result;
  char v37 = a5;
  uint64_t v38 = a4;
  unint64_t v23 = (void *)swift_allocObject();
  v23[2] = a6;
  v23[3] = a7;
  v23[4] = a8;
  v23[5] = a9;
  v23[6] = a10;
  uint64_t v24 = (Swift::UInt *)(v22 + qword_1004845F8);
  swift_beginAccess();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = a6;
  v25[3] = a7;
  v25[4] = a8;
  v25[5] = a9;
  v25[6] = a10;
  v25[7] = a13;
  v25[8] = v23;
  char isUnique = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v41 = *v24;
  Swift::UInt v26 = v41;
  *uint64_t v24 = 0x8000000000000000;
  Swift::UInt v39 = a2;
  sub_100010614(a2);
  uint64_t v28 = *(void *)(v26 + 16);
  BOOL v29 = (v27 & 1) == 0;
  Swift::Int v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v31 = v27;
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v40[0] = a6;
  v40[1] = a7;
  v40[2] = a8;
  v40[3] = a9;
  v40[4] = a10;
  uint64_t v32 = _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v30))
  {
    sub_100010614(v39);
    if ((v31 & 1) != (v33 & 1)) {
      goto LABEL_11;
    }
  }
  *uint64_t v24 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v31)
  {
    Swift::UInt v34 = v39;
  }
  else
  {
    sub_1000138C4((uint64_t)v40);
    Swift::UInt v34 = v39;
    Swift::UInt v41 = v39;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = a14(a3, v38, v37 & 1, v32);
  swift_endAccess();
  sub_10000FA10(v34, v35);
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t sub_100010504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

void sub_1000105A0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for WiFiP2PSPITransactionType(uint64_t a1)
{
}

uint64_t _s16P2PActivityStateOMa()
{
  return swift_getGenericMetadata();
}

unint64_t sub_100010614(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100010504(a1, v2);
}

uint64_t sub_100010680(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100010800(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000107A4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000107A4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100010754((uint64_t)v12);
  return v7;
}

uint64_t sub_100010754(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000107A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100010800(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000144A0((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100010958(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_100010958(uint64_t a1, unint64_t a2)
{
  Swift::Int v2 = sub_1000109F0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v2 = sub_100014578(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    Swift::Int v2 = sub_100014578((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1000109F0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100010B64(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100010B64(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_10047BEF8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100010BCC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t *OS_dispatch_queue.awdl.unsafeMutableAddressor()
{
  if (qword_10047C170 != -1) {
    swift_once();
  }
  return &static OS_dispatch_queue.awdl;
}

uint64_t *OS_dispatch_queue.nan.unsafeMutableAddressor()
{
  if (qword_10047C168 != -1) {
    swift_once();
  }
  return &static OS_dispatch_queue.nan;
}

uint64_t sub_100010CAC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(uint64_t, void, uint64_t, uint64_t))
{
  char v33 = a5;
  uint64_t v34 = a1;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = (void *)*v13;
  *uint64_t v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v16)
  {
    uint64_t v32 = a4;
    uint64_t v18 = v5;
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      unint64_t v23 = swift_slowAlloc();
      v30[1] = v23;
      *(_DWORD *)uint64_t v21 = 138412546;
      uint64_t v31 = a3;
      v30[0] = v19;
      uint64_t v24 = *(void **)&v18[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      uint64_t v35 = (uint64_t)v24;
      uint64_t v36 = v23;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v24;

      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v26 = v34;
      unint64_t v27 = WiFiP2PSPITransactionType.description.getter(v34);
      uint64_t v35 = sub_100010680(v27, v28, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a3 = v31;
      swift_bridgeObjectRelease();
      os_log_t v29 = v30[0];
      _os_log_impl((void *)&_mh_execute_header, v30[0], v20, v32, (uint8_t *)v21, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v26 = v34;
    }
    return v33(v26, *(void *)&v18[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session], a2, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *OS_dispatch_queue.p2p.unsafeMutableAddressor()
{
  if (qword_10047C178 != -1) {
    swift_once();
  }
  return &static OS_dispatch_queue.p2p;
}

unint64_t WiFiP2PSPITransactionType.description.getter(uint64_t a1)
{
  unint64_t result = 0x6B63696B65646953;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x726F462053544143;
      break;
    case 3:
      unint64_t result = 0x6361422053544143;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
    case 9:
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x2079616C50726143;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x7265666E6F435641;
      break;
    case 10:
      unint64_t result = 0x4620657669746341;
      break;
    case 11:
      unint64_t result = 0xD000000000000010;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 14:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    case 16:
      unint64_t result = 0xD000000000000027;
      break;
    case 17:
      unint64_t result = 0xD000000000000022;
      break;
    case 19:
      unint64_t result = 0x6C5020616964654DLL;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      unint64_t result = 0x286E776F6E6B6E55;
      break;
  }
  return result;
}

uint64_t sub_1000112DC(uint64_t (*a1)(void))
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = a1();
    swift_release();
    return v3;
  }
  return result;
}

char *sub_10001132C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  uint64_t v2 = *(void *)(v0 + v1);
  uint64_t v3 = (char *)v2;
  if (v2 == 1)
  {
    uint64_t v3 = sub_10031628C();
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    sub_10031C170(v4);
  }
  sub_1000127FC(v2);
  return v3;
}

uint64_t sub_1000113A4(uint64_t a1, unint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v78 = a3;
  unint64_t v6 = v5[1];
  unint64_t v73 = v5 + 1;
  uint64_t v74 = a5;
  uint64_t v7 = *v5;
  uint64_t v8 = v5[2];
  unint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  LODWORD(v5) = *((unsigned __int8 *)v5 + 40);
  if (v9 >> 62) {
    goto LABEL_49;
  }
  unint64_t v12 = a2;
  int v14 = ~(_BYTE)a2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v80 = v10;
  sub_100012724(v7, v6, v8, v9, v10, v5);
  unint64_t v79 = (uint64_t *)v8;
  if (v14)
  {
    sub_1000127E4(a1, v12);
    sub_1000126F4(v8, v9);
  }
  else
  {
    a1 = v8;
    unint64_t v12 = v9;
  }
  uint64_t v77 = a1;
  sub_1000127E4(a1, v12);
  uint64_t v15 = v80;
  unsigned __int8 v16 = v5;
  if ((_BYTE)a4 != 0xFF)
  {
    uint64_t v15 = v78;
    sub_1000127E4(v78, a4);
    sub_1000126F4(v80, v5);
    LODWORD(v5) = a4;
  }
  if ((_BYTE)v12 == 0xFF)
  {
    sub_1000127E4(v15, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_100010164(v7, v6, (uint64_t)v79, v9, v80, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v39 = v5;
    uint64_t v17 = v77;
LABEL_33:
    sub_1000126F4(v15, v39);
    uint64_t result = 0;
    uint64_t v41 = v76;
    *(void *)uint64_t v76 = v7;
    *(void *)(v41 + 8) = v6;
    *(void *)(v41 + 16) = v17;
    *(void *)(v41 + 24) = v12;
    *(void *)(v41 + 32) = v15;
    *(unsigned char *)(v41 + 40) = (_BYTE)v5;
    return result;
  }
  uint64_t v17 = v77;
  if ((_BYTE)v5 == 0xFF)
  {
    sub_100012718(v77, v12 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_1000126F4(v77, v12);
    sub_100010164(v7, v6, (uint64_t)v79, v9, v80, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126F4(v77, v12);
    unsigned __int8 v39 = -1;
    goto LABEL_33;
  }
  sub_100012718(v15, v5 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126F4(v15, v5);
  LODWORD(v9) = v12 & v5;
  uint64_t v18 = v77;
  if ((v12 & v5 & 1) == 0)
  {
    sub_1000126F4(v77, v12);
    uint64_t v18 = 0;
  }
  uint64_t v69 = v15;
  int v70 = (int)v5;
  unint64_t v71 = v12;
  unint64_t v72 = v6;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v78 = v18;
  uint64_t v75 = v7;
  id v19 = 0;
  if (!v10)
  {
    size_t v5 = (uint64_t *)&_swiftEmptyDictionarySingleton;
LABEL_35:
    swift_bridgeObjectRelease();
    unint64_t v42 = v72;
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void *)(v72 + 16);
      if (v43)
      {
        swift_bridgeObjectRetain();
        unint64_t v44 = v72 + 56;
        do
        {
          uint64_t v46 = *(void **)(v44 - 24);
          uint64_t v47 = *(void (**)(uint64_t **))(v44 - 16);
          unint64_t v82 = 0;
          id v45 = v46;
          sub_1000131C8();
          v47(&v82);

          sub_1000131D0();
          v44 += 32;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease();
        uint64_t v18 = v78;
      }
      sub_10001270C(v18, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = v76;
      sub_100010164(*(void *)v76, *(void *)(v76 + 8), *(void *)(v76 + 16), *(void *)(v76 + 24), *(void *)(v76 + 32), *(unsigned char *)(v76 + 40));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000126F4(v77, v71);
      sub_1000126F4(v69, v70);
      sub_100011E30((uint64_t)v19);
      uint64_t result = 0;
      *(void *)uint64_t v76 = 0;
      *(void *)(v65 + 8) = 0;
      *(void *)(v65 + 16) = 0;
      *(_OWORD *)(v65 + 24) = xmmword_1003D4F20;
      *(unsigned char *)(v65 + 40) = 0;
    }
    else
    {
      uint64_t v48 = v5[2];
      swift_bridgeObjectRelease();
      if (v48)
      {
        uint64_t v49 = v76;
        uint64_t v50 = (uint64_t)v5;
        uint64_t v52 = *(void *)v76;
        uint64_t v51 = *(void *)(v76 + 8);
        uint64_t v53 = *(void *)(v76 + 16);
        unint64_t v54 = *(void *)(v76 + 24);
        uint64_t v55 = *(void *)(v76 + 32);
        unsigned __int8 v56 = *(unsigned char *)(v76 + 40);
        uint64_t v57 = v50;
        uint64_t v80 = v50;
        swift_bridgeObjectRetain();
        sub_100010164(v52, v51, v53, v54, v55, v56);
        unint64_t v79 = &v68;
        *(void *)uint64_t v76 = v57;
        uint64_t v58 = v73;
        *unint64_t v73 = 0;
        v58[1] = 0;
        *(_OWORD *)(v49 + 24) = xmmword_1003D4F30;
        *(unsigned char *)(v49 + 40) = 0;
        uint64_t v88 = (void *)v42;
        char v81 = 0;
        __chkstk_darwin(v59);
        uint64_t v60 = (uint64_t *)v74[2];
        unint64_t v61 = v74[3];
        uint64_t v62 = v74[4];
        unint64_t v63 = v74[5];
        uint64_t v64 = v74[6];
        sub_100010BCC(&qword_100484A68);
        unint64_t v82 = v60;
        unint64_t v83 = v61;
        uint64_t v84 = v62;
        unint64_t v85 = v63;
        uint64_t v86 = v64;
        _s16P2PActivityStateO14ActionRequiredOMa();
        sub_10000F9CC((unint64_t *)&unk_100484A70, &qword_100484A68);
        Sequence.reduce<A>(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000126F4(v77, v71);
        sub_1000126F4(v69, v70);
        sub_100011E30((uint64_t)v19);
        return v82;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v66 = v76;
        sub_100010164(*(void *)v76, *(void *)(v76 + 8), *(void *)(v76 + 16), *(void *)(v76 + 24), *(void *)(v76 + 32), *(unsigned char *)(v76 + 40));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000126F4(v77, v71);
        sub_1000126F4(v69, v70);
        sub_100011E30((uint64_t)v19);
        *(void *)uint64_t v76 = &_swiftEmptyArrayStorage;
        *(void *)(v66 + 8) = v42;
        *(_OWORD *)(v66 + 16) = xmmword_1003D4F40;
        *(void *)(v66 + 32) = 0;
        *(unsigned char *)(v66 + 40) = -1;
        return 2;
      }
    }
    return result;
  }
  v7 += 56;
  size_t v5 = (uint64_t *)&_swiftEmptyDictionarySingleton;
  LODWORD(v79) = v9;
  while (1)
  {
    os_log_type_t v20 = *(void (**)(id *))(v7 - 16);
    uint64_t v21 = *(void *)(v7 - 8);
    char v22 = *(unsigned char *)v7;
    id v23 = *(id *)(v7 - 24);
    uint64_t v8 = (uint64_t)v23;
    if (v9)
    {
      sub_1000131C8();
      sub_100012718(v18, 1);
      sub_10027FDD0(v18, v20, v21, v22);
      sub_10001270C(v18, 1);

      sub_1000131D0();
      goto LABEL_14;
    }
    unint64_t v9 = (unint64_t)v23;
    uint64_t v80 = v21;
    sub_1000131C8();
    sub_100011E30((uint64_t)v19);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v82 = v5;
    unint64_t v6 = sub_100011CE0(v9);
    uint64_t v26 = v5[2];
    BOOL v27 = (v25 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    uint64_t v8 = v25;
    if (v5[3] >= v28)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1003A24B0();
        size_t v5 = v82;
      }
    }
    else
    {
      sub_10000B45C(v28, isUniquelyReferenced_nonNull_native);
      type metadata accessor for XPCSession(0);
      LOBYTE(v5) = (_BYTE)v82;
      os_log_t v29 = v82;
      unint64_t v30 = sub_100011CE0(v9);
      if ((v8 & 1) != (v31 & 1)) {
        goto LABEL_48;
      }
      unint64_t v6 = v30;
      size_t v5 = v29;
      uint64_t v18 = v78;
    }
    swift_bridgeObjectRelease();
    if (v8)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v5[(v6 >> 6) + 8] |= 1 << v6;
      uint64_t v32 = 8 * v6;
      *(void *)(v5[6] + v32) = v9;
      *(void *)(v5[7] + v32) = 0;
      uint64_t v33 = v5[2];
      uint64_t v8 = v33 + 1;
      uint64_t v34 = v5;
      LOBYTE(v5) = __OFADD__(v33, 1);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_47;
      }
      v34[2] = v8;
      id v35 = (id)v9;
      size_t v5 = v34;
    }
    uint64_t v8 = v5[7];
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(v8 + 8 * v6);
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_46;
    }
    *(void *)(v8 + 8 * v6) = v38;

    unint64_t v82 = 0;
    v20((id *)&v82);

    sub_1000131D0();
    id v19 = sub_1000826EC;
    LOBYTE(v9) = (_BYTE)v79;
LABEL_14:
    v7 += 32;
    if (!--v10) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_49:
  unint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(63);
  uint64_t v88 = v82;
  unint64_t v89 = v83;
  v67._object = (void *)0x80000001003DF6B0;
  v67._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v67);
  unint64_t v82 = (uint64_t *)v7;
  unint64_t v83 = v6;
  uint64_t v84 = v8;
  unint64_t v85 = v9;
  uint64_t v86 = v10;
  char v87 = (char)v5;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100011CE0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100011D24(a1, v4);
}

unint64_t sub_100011D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for XPCSession(0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100011E30(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100011E40(uint64_t result, uint64_t a2, char a3, void *a4)
{
  unint64_t v5 = *(void *)(v4 + 24);
  if (v5 >> 62 == 3)
  {
    BOOL v6 = !*(unsigned char *)(v4 + 40) && v5 == 0xC000000000000000;
    if (v6 && (*(void *)(v4 + 16) | *(void *)(v4 + 32) | *(void *)(v4 + 8) | *(void *)v4) == 0) {
      return 0;
    }
  }
  int v8 = result;
  if ((_BYTE)result)
  {
    unint64_t v10 = a3 & 1;
    if (v8 == 1) {
      return sub_1000113A4(a2, v10, 0, 255, a4);
    }
    else {
      return sub_100011F44(a2, v10, 0, 255, a4);
    }
  }
  return result;
}

uint64_t sub_100011EC0(uint64_t result, uint64_t a2, char a3, void *a4)
{
  unint64_t v6 = *(void *)(v4 + 24);
  if (v6 >> 62 == 3)
  {
    BOOL v7 = !*(unsigned char *)(v4 + 40) && v6 == 0xC000000000000000;
    if (v7 && (*(void *)(v4 + 16) | *(void *)(v4 + 32) | *(void *)(v4 + 8) | *(void *)v4) == 0) {
      return 0;
    }
  }
  if ((_BYTE)result)
  {
    int v9 = a3 & 1;
    if (result == 1) {
      return sub_1000113A4(0, 0xFFuLL, a2, v9, a4);
    }
    else {
      return sub_100011F44(0, 0xFFuLL, a2, v9, a4);
    }
  }
  return result;
}

uint64_t sub_100011F44(uint64_t a1, unint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v64 = a5;
  uint64_t v65 = a3;
  uint64_t v68 = a1;
  unint64_t v6 = v5[3];
  if (v6 >> 62 != 2)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  BOOL v7 = v5;
  unint64_t v9 = a2;
  uint64_t v10 = v5[1];
  unint64_t v63 = v5 + 1;
  uint64_t v11 = *v5;
  uint64_t v12 = v5[2];
  uint64_t v13 = v7[4];
  int v14 = ~(_BYTE)a2;
  int v15 = *((unsigned __int8 *)v7 + 40);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  *(void *)&long long v70 = v13;
  int v67 = v15;
  sub_100012724(v11, v10, v12, v6, v13, v15);
  *(void *)&long long v69 = v12;
  unint64_t v66 = v6;
  if (v14)
  {
    uint64_t v16 = v68;
    sub_1000127E4(v68, v9);
    sub_1000126F4(v12, v6);
  }
  else
  {
    uint64_t v16 = v12;
    unint64_t v9 = v6;
  }
  sub_1000127E4(v16, v9);
  uint64_t v17 = v70;
  int v71 = v67;
  if ((_BYTE)a4 != 0xFF)
  {
    uint64_t v17 = v65;
    sub_1000127E4(v65, a4);
    sub_1000126F4(v70, v67);
    int v71 = a4;
  }
  if ((_BYTE)v9 == 0xFF)
  {
    unsigned __int8 v18 = v71;
    sub_1000127E4(v17, v71);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v19 = v69;
LABEL_25:
    sub_100010164(v11, v10, v19, v66, v70, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126F4(v16, v9);
    sub_1000126F4(v17, v18);
    uint64_t result = 0;
    *BOOL v7 = v11;
    v7[1] = v10;
    v7[2] = v16;
    v7[3] = v9 | 0x8000000000000000;
    v7[4] = v17;
    *((unsigned char *)v7 + 40) = v18;
    return result;
  }
  unsigned __int8 v18 = v71;
  uint64_t v19 = v69;
  if ((_BYTE)v71 == 0xFF)
  {
    sub_100012718(v16, v9 & 1);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_1000126F4(v16, v9);
    goto LABEL_25;
  }
  sub_100012718(v17, v71 & 1);
  uint64_t v62 = v11;
  swift_bridgeObjectRelease();
  uint64_t v65 = v10;
  swift_bridgeObjectRelease();
  uint64_t v60 = v17;
  sub_1000126F4(v17, v71);
  char v20 = v9 & v71;
  uint64_t v21 = v16;
  if ((v9 & v71 & 1) == 0)
  {
    sub_1000126F4(v16, v9);
    uint64_t v21 = 0;
  }
  uint64_t v68 = v16;
  unint64_t v61 = v9;
  uint64_t v22 = *(void *)(v65 + 16);
  if (v22)
  {
    id v23 = (char *)(v65 + 56);
    uint64_t v24 = *(void *)(v65 + 16);
    do
    {
      uint64_t v26 = (void *)*((void *)v23 - 3);
      BOOL v27 = (void (*)(id *))*((void *)v23 - 2);
      uint64_t v28 = *((void *)v23 - 1);
      char v29 = *v23;
      if (v20)
      {
        id v25 = v26;
        sub_1000131C8();
        sub_100012718(v21, 1);
        sub_10027FDD0(v21, v27, v28, v29);
        sub_10001270C(v21, 1);
      }
      else
      {
        *(void *)&long long v74 = 0;
        id v30 = v26;
        sub_1000131C8();
        v27((id *)&v74);
      }
      sub_1000131D0();
      v23 += 32;
      --v24;
    }
    while (v24);
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = v62;
  sub_100010164(v62, v65, v69, v66, v70, v67);
  *BOOL v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_OWORD *)(v7 + 3) = xmmword_1003D4F20;
  *((unsigned char *)v7 + 40) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v20 & 1) == 0)
  {
    uint64_t v43 = swift_bridgeObjectRelease();
    *(void *)&long long v70 = &v59;
    uint64_t v73 = v31;
    char v72 = 0;
    __chkstk_darwin(v43);
    uint64_t v44 = v64[2];
    uint64_t v45 = v64[3];
    uint64_t v46 = v64[4];
    uint64_t v47 = v64[5];
    uint64_t v48 = v64[6];
    sub_100010BCC(&qword_100484A68);
    *(void *)&long long v74 = v44;
    *((void *)&v74 + 1) = v45;
    *(void *)&long long v75 = v46;
    *((void *)&v75 + 1) = v47;
    uint64_t v76 = v48;
    _s16P2PActivityStateO14ActionRequiredOMa();
    sub_10000F9CC((unint64_t *)&unk_100484A70, &qword_100484A68);
    Sequence.reduce<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126F4(v68, v61);
    sub_1000126F4(v60, v71);
    return v74;
  }
  if (v22)
  {
    uint64_t v32 = v62;
    swift_bridgeObjectRelease();
    *BOOL v7 = sub_100280DA0((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v33 = v63;
    *unint64_t v63 = 0;
    v33[1] = 0;
    *(_OWORD *)(v7 + 3) = xmmword_1003D4F30;
    *((unsigned char *)v7 + 40) = 0;
    uint64_t v34 = *(void *)(v32 + 16);
    if (v34)
    {
      long long v35 = *((_OWORD *)v64 + 1);
      long long v69 = *((_OWORD *)v64 + 2);
      long long v70 = v35;
      uint64_t v36 = v64[6];
      swift_bridgeObjectRetain();
      BOOL v37 = (unsigned __int8 *)(v32 + 56);
      do
      {
        int v38 = *v37;
        uint64_t v40 = (void (*)(char **))*((void *)v37 - 2);
        uint64_t v39 = *((void *)v37 - 1);
        uint64_t v41 = (void *)*((void *)v37 - 3);
        long long v74 = v70;
        long long v75 = v69;
        uint64_t v76 = v36;
        _s16P2PActivityStateOMa();
        sub_10000BB10(v41, v40, v39, v38);
        v37 += 32;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unint64_t v50 = v7[3];
    if (v50 >> 62 == 1)
    {
      uint64_t v51 = *v7;
      uint64_t v52 = v7[1];
      uint64_t v53 = v7[2];
      uint64_t v54 = v7[4];
      unsigned __int8 v55 = *((unsigned char *)v7 + 40);
      uint64_t v56 = *(void *)(*v7 + 16);
      sub_10001270C(v21, 1);
      if (!v56)
      {
        sub_100010164(v51, v52, v53, v50, v54, v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000126F4(v68, v61);
        sub_1000126F4(v60, v71);
        *BOOL v7 = (uint64_t)&_swiftEmptyArrayStorage;
        v7[1] = (uint64_t)&_swiftEmptyArrayStorage;
        *((_OWORD *)v7 + 1) = xmmword_1003D4F40;
        v7[4] = 0;
        *((unsigned char *)v7 + 40) = -1;
        return 2;
      }
    }
    else
    {
      sub_10001270C(v21, 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v57 = v68;
    unsigned __int8 v58 = v61;
  }
  else
  {
    uint64_t v49 = *(void *)(v62 + 16);
    swift_bridgeObjectRelease();
    sub_10001270C(v21, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v49)
    {
      sub_1000126F4(v68, v61);
      sub_1000126F4(v60, v71);
      *BOOL v7 = v62;
      v7[1] = (uint64_t)&_swiftEmptyArrayStorage;
      *((_OWORD *)v7 + 1) = xmmword_1003D4F10;
      v7[4] = 0;
      *((unsigned char *)v7 + 40) = -1;
      return 1;
    }
    swift_bridgeObjectRelease();
    uint64_t v57 = v68;
    unsigned __int8 v58 = v61;
  }
  sub_1000126F4(v57, v58);
  sub_1000126F4(v60, v71);
  return 0;
}

uint64_t sub_1000126F4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10001270C(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10001270C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100012718(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

void sub_100012724(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8 = a4;
  unint64_t v10 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000127E4(a3, v8);
    sub_1000127E4(a5, a6);
    return;
  }
  if (v10 != 1)
  {
    if (v10) {
      return;
    }
    goto LABEL_4;
  }

  swift_bridgeObjectRetain();
}

uint64_t sub_1000127E4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100012718(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1000127FC(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001280C()
{
  return swift_release();
}

uint64_t sub_100012814()
{
  return swift_release();
}

uint64_t sub_10001281C()
{
  return swift_release();
}

uint64_t sub_100012824()
{
  return swift_release();
}

uint64_t sub_10001282C()
{
  return swift_release();
}

uint64_t sub_100012834()
{
  return swift_release();
}

uint64_t sub_10001283C()
{
  return swift_release();
}

uint64_t sub_100012844()
{
  return swift_release();
}

uint64_t sub_10001284C()
{
  return swift_release();
}

uint64_t sub_100012854()
{
  return swift_release();
}

uint64_t sub_10001285C()
{
  return swift_release();
}

uint64_t sub_100012864()
{
  return swift_release();
}

uint64_t sub_10001286C()
{
  return swift_release();
}

uint64_t sub_100012874()
{
  return swift_release();
}

uint64_t sub_10001287C()
{
  return swift_release();
}

uint64_t sub_100012884()
{
  return swift_release();
}

uint64_t sub_10001288C()
{
  return swift_release();
}

uint64_t sub_100012894()
{
  return swift_release();
}

uint64_t sub_10001289C()
{
  return swift_release();
}

uint64_t sub_1000128A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000128B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000128C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000128D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000128E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000128F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012914(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012924(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012944(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012994(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000129A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000129B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000129C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000129D4(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100012A00(uint64_t a1)
{
  return sub_100012A1C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100012A08()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100012A1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t destroy for WiFiError(uint64_t a1)
{
  return sub_100012AA4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s7CoreP2P9WiFiErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100012A90(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_100012A90(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_1002566B0(a1, a2);
  }
  return a1;
}

uint64_t sub_100012AA4(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_10008B748(a1, a2);
  }
  return a1;
}

unsigned char *initializeBufferWithCopyOfBuffer for Bandwidth(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_100012AF0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

__n128 initializeWithTake for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100012C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

void sub_100012CB4(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unsigned __int8 v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            char v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *char v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

Swift::Int sub_100012E68(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1003A5D54();
  }
  else
  {
    if (v7 > v6)
    {
      __n128 result = (Swift::Int)sub_100313A54();
      goto LABEL_14;
    }
    sub_1003A7CA0();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  __n128 result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for WiFiP2PSPITransactionType(0);
      __n128 result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

unint64_t sub_100012FB8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          BOOL v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    __n128 result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void *sub_10001316C(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = 8 * a2;
    unint64_t v6 = *(void **)(*(void *)(a5 + 48) + 8 * a2);
    *__n128 result = *(void *)(*(void *)(a5 + 56) + v5);
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000131C8()
{
  return swift_retain();
}

uint64_t sub_1000131D0()
{
  return swift_release();
}

uint64_t sub_1000131D8(uint64_t result)
{
  uint64_t v2 = *v1;
  if (*(void *)(*(void *)(*v1 + 40) + 128))
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
    swift_retain();
    sub_10000AA60(v3, v2);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100481260);
}

uint64_t destroy for RoutingSocket(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t storeEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AD44C);
}

uint64_t getEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AD38C);
}

uint64_t sub_100013308(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100013368(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for RoutingSocket()
{
  uint64_t result = qword_100481B10;
  if (!qword_100481B10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001341C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(uint64_t (**)(uint64_t))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_100003BB8(a1, v5, v7, v8);
}

unint64_t sub_1000134C0(unint64_t result, unint64_t a2)
{
  unsigned __int8 v2 = 1;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), result))
      {
        uint64_t v4 = (int)v4;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_11;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
LABEL_11:
      __break(1u);
      break;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v4 = BYTE6(a2);
LABEL_6:
      if (v4 == 6)
      {
        uint64_t v8 = sub_100013CF8(result, a2);
        unsigned __int8 v2 = 0;
        uint64_t v3 = v8 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v3 = 0;
        unsigned __int8 v2 = 1;
      }
LABEL_9:
      uint64_t result = v3 | ((unint64_t)v2 << 48);
      break;
  }
  return result;
}

uint64_t sub_100013578(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DriverEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000135D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  if (a7 == 5) {
    return sub_10006CA80(a2, a3, a4, a5, a6);
  }
  if (a7 == 4 || a7 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100013618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100013620(a1, a2, a3, *(void (**)(char *))(v3 + 16));
}

uint64_t sub_100013620(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v5 = sub_100004C8C();
  uint64_t v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
    uint64_t v8 = (char *)v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      a4(v8);
      v8 += v9;
      --v6;
    }
    while (v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000136E8(unsigned int a1, unsigned char *a2, unsigned int a3)
{
  return sub_10000A808(a1, a2, a3, *(uint64_t (**)(void, uint64_t, unint64_t))(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_1000136F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100010BCC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DNSRecords.SRV()
{
  uint64_t result = qword_10047FE58;
  if (!qword_10047FE58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000137A4(uint64_t a1)
{
  type metadata accessor for Logger();

  sub_100003E70(a1);
}

uint64_t sub_10001382C(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10000C9C8(a1, a2, a3, a4, (uint64_t)&unk_100468A18, (uint64_t)sub_100013164, "%@ is starting transaction: %s", (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))sub_10000CFDC);
}

uint64_t sub_100013868(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10000C9C8(a1, a2, a3, a4, (uint64_t)&unk_1004689F0, (uint64_t)sub_100012A00, "%@ is ending transaction: %s", (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))sub_10000D330);
}

double sub_1000138A8@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  double result = -2.0;
  *(_OWORD *)(a1 + 24) = xmmword_1003D4F20;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1000138C4@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(v1 + 56))(v5);
  uint64_t v3 = _s16P2PActivityStateOMa();
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v3 - 8) + 32))(a1, v5, v3);
}

uint64_t _s16P2PActivityStateO14ActionRequiredOMa()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for XPCSession(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_100485328);
}

unsigned __int16 *sub_1000139A0(unsigned __int16 *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  uint64_t v7 = __dst;
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __dst = (unsigned __int16 *)__DataStorage._length.getter();
      if (!v7) {
        goto LABEL_22;
      }
      memcpy(v7, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return (unsigned __int16 *)(*v7 | ((unint64_t)*(unsigned int *)(v7 + 1) << 16));
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0] = a2;
      LOWORD(__src[1]) = a3;
      BYTE2(__src[1]) = BYTE2(a3);
      BYTE3(__src[1]) = BYTE3(a3);
      BYTE4(__src[1]) = BYTE4(a3);
      BYTE5(__src[1]) = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return (unsigned __int16 *)(*v7 | ((unint64_t)*(unsigned int *)(v7 + 1) << 16));
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __dst = (unsigned __int16 *)__DataStorage._length.getter();
        if (v7) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (v7)
      {
        memcpy(v7, (const void *)(v9 + v11), __n);
        sub_10000C970(a2, a3);
        return (unsigned __int16 *)(*v7 | ((unint64_t)*(unsigned int *)(v7 + 1) << 16));
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __dst = (unsigned __int16 *)__DataStorage._length.getter();
      if (v7) {
        goto LABEL_25;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      return __dst;
  }
}

uint64_t sub_100013BC4(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 6)
      {
        __chkstk_darwin();
        uint64_t v11 = sub_1000139A0(&v12, v9, v10, 6uLL);
        if (v2)
        {
          uint64_t result = swift_willThrow();
          __break(1u);
        }
        else
        {
          return (unint64_t)v11 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100013CF8(uint64_t a1, unint64_t a2)
{
  return sub_100013BC4(a1, a2);
}

uint64_t sub_100013D44(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100013D9C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_1000147B8();
  uint64_t v5 = v4;
  __chkstk_darwin();
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  sub_1000147B8();
  uint64_t v10 = v9;
  __chkstk_darwin();
  unsigned __int16 v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (static Sandbox.check()())
  {
    uint64_t v13 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = sub_100014060;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E5D0;
    aBlock[3] = &unk_10044C2F0;
    uint64_t v14 = _Block_copy(aBlock);
    id v15 = v13;
    static DispatchQoS.unspecified.getter();
    v17[1] = _swiftEmptyArrayStorage;
    sub_100014390();
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_1000143E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    dispatch_main();
  }
  exit(1);
}

uint64_t sub_100014060()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000147B8();
  uint64_t v2 = v1;
  __chkstk_darwin();
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    IONotificationPortRef v8 = (IONotificationPortRef)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    IONotificationPortRef v21 = v8;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = sub_100010680(v9, v10, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "WiFiP2P version: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for AppleDevice(0);
  swift_allocObject();
  IONotificationPortRef v21 = AppleDevice.init()();
  uint64_t v11 = (void (__cdecl *)(const void *))sub_100010BCC(&qword_10047BEF0);
  swift_allocObject();
  IONotificationPortRef v12 = (IONotificationPortRef)P2PMain.init(device:)((uint64_t)&v21);
  if (!v12)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "WiFiP2P initialization failed", v19, 2u);
      swift_slowDealloc();
    }

    exit(1);
  }
  IONotificationPortRef v13 = v12;
  IONotificationPortRef v21 = v12;
  AppleDevice.attachForDriverDiscovery<A>(_:)((uint64_t)&v21, v11, (CFStringRef (__cdecl *)(const void *))&protocol witness table for P2PMain<A>);
  uint64_t v14 = *(uint64_t (**)(void (*)(), IONotificationPortRef))(*(void *)v13 + 184);
  swift_retain();
  uint64_t v15 = v14(sub_10001447C, v13);
  (*(void (**)(uint64_t))(*(void *)v13 + 208))(v15);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v0);
}

unint64_t sub_100014390()
{
  unint64_t result = qword_1004807A0;
  if (!qword_1004807A0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004807A0);
  }
  return result;
}

unint64_t sub_1000143E0()
{
  unint64_t result = qword_1004807B0;
  if (!qword_1004807B0)
  {
    sub_100014434((uint64_t *)&unk_10047D0F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004807B0);
  }
  return result;
}

uint64_t sub_100014434(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_10001447C()
{
}

void *sub_1000144A0(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100014578(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047BEF8);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  IONotificationPortRef v12 = v10 + 32;
  IONotificationPortRef v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100014728(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100014650(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100014650(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100014728(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t NANDriverCapabilities.supportedBands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.rawValue.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*NANBitmap.Channel.operatingClass.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t IEEE80211InformationElement.RSNCapability.pairwiseCipherSuites.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.entries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NANBitmap.Time.bitmapData.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.mode.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NANInternetSharingStatistics.submitted.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*NANBeacon.Metadata.rate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.numberOfAntennas.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t NANDriverCapabilities.numberOfAntennas.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*NANDriverCapabilities.numberOfAntennas.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities() + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for NANDriverCapabilities()
{
  uint64_t result = qword_10047C398;
  if (!qword_10047C398) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities() + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NANDriverCapabilities.maximumChannelSwitchTime.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPublisherCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 36));
}

uint64_t NANDriverCapabilities.maximumPublisherCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPublisherCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 40));
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumSubscriberCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPeerEntries.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 44));
}

uint64_t NANDriverCapabilities.maximumPeerEntries.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPeerEntries.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 48));
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumDatapathSessionCount.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 52));
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumAvailabilityMaps.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 56));
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(void *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumInterfacesSupported.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities() + 60));
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.setter(char a1)
{
  uint64_t result = type metadata accessor for NANDriverCapabilities();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.init(supportedBands:supportedCipherSuites:mode:numberOfAntennas:maximumChannelSwitchTime:maximumPublisherCount:maximumSubscriberCount:maximumPeerEntries:maximumDatapathSessionCount:maximumAvailabilityMaps:maximumInterfacesSupported:unicastInsecureDatapathRestoreSupported:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 17) = a4;
  uint64_t v17 = (int *)type metadata accessor for NANDriverCapabilities();
  uint64_t v18 = a9 + v17[8];
  uint64_t v19 = type metadata accessor for DispatchTimeInterval();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a5, v19);
  *(void *)(a9 + v17[9]) = a6;
  *(void *)(a9 + v17[10]) = a7;
  *(void *)(a9 + v17[11]) = a8;
  *(void *)(a9 + v17[12]) = a10;
  *(void *)(a9 + v17[13]) = a11;
  *(void *)(a9 + v17[14]) = a12;
  *(unsigned char *)(a9 + v17[15]) = a13;
  return result;
}

uint64_t sub_100014FA4()
{
  uint64_t v0 = (int *)type metadata accessor for NANDriverCapabilities();
  sub_10001D880((uint64_t)v0, static NANDriverCapabilities.defaultCapabilities);
  uint64_t v1 = sub_1000151B8((uint64_t)v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
  sub_100010BCC(&qword_10047C930);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 24) = 4;
  *(unsigned char *)(inited + 32) = sub_1001E1C64(1, 0, 4);
  unsigned __int8 v3 = sub_1001E1C64(1, 4, 4);
  *(unsigned char *)(inited + 33) = v3;
  char v4 = *(unsigned char *)(inited + 32);
  if ((v3 & ~v4) != 0) {
    unsigned __int8 v5 = v3;
  }
  else {
    unsigned __int8 v5 = 0;
  }
  char v6 = v5 | v4;
  swift_setDeallocating();
  int64_t v7 = (void *)(v1 + v0[8]);
  *int64_t v7 = 1;
  uint64_t v8 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  *(void *)uint64_t v1 = &off_10044C3B8;
  *(void *)(v1 + 8) = &off_10044C3E0;
  *(unsigned char *)(v1 + 16) = 1;
  *(unsigned char *)(v1 + 17) = v6;
  *(void *)(v1 + v0[9]) = 4;
  *(void *)(v1 + v0[10]) = 4;
  *(void *)(v1 + v0[11]) = 8;
  *(void *)(v1 + v0[12]) = 8;
  *(void *)(v1 + v0[13]) = 1;
  *(void *)(v1 + v0[14]) = 1;
  *(unsigned char *)(v1 + v0[15]) = 1;
  return result;
}

uint64_t NANDriverCapabilities.defaultCapabilities.unsafeMutableAddressor()
{
  if (qword_10047BF00 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for NANDriverCapabilities();

  return sub_1000151B8(v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
}

uint64_t sub_1000151B8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t static NANDriverCapabilities.defaultCapabilities.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10047BF00 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for NANDriverCapabilities();
  uint64_t v3 = sub_1000151B8(v2, (uint64_t)static NANDriverCapabilities.defaultCapabilities);

  return sub_100015268(v3, a1);
}

uint64_t sub_100015268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANDriverCapabilities();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static NANBitmap.Band.tvWhiteSpaces.getter()
{
  return 1;
}

uint64_t static InfraStatistics.infraRealtimePacketThreshold.getter()
{
  return 5;
}

uint64_t NANWiFiDriver.generateStatisticsReport(for:)()
{
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v0 = xmmword_1003B0090;
  *(unsigned char *)(v0 + 16) = 1;
  return swift_willThrow();
}

uint64_t static UInt8.invalid.getter()
{
  return 0;
}

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v12 = *(void *)(a10 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v16 = (char *)v28 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin();
  uint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)(a11 + 8) + 8))(a10);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20(v16, v11, a10);
  IONotificationPortRef v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v36 = v30;
    char v29 = v23;
    *(_DWORD *)uint64_t v23 = 136315138;
    v28[1] = v23 + 4;
    v20(v14, (uint64_t)v16, a10);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v35 = sub_100010680(v24, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a10);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to create a requester internet sharing policy because %s doesn't support it", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a10);
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v32);
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v26 = xmmword_1003B0090;
  *(unsigned char *)(v26 + 16) = 1;
  v34();
  return swift_errorRelease();
}

uint64_t DeviceDriver<>.startRequestingInternet(on:linkTestInterval:linkTestFaultHandler:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v12 = *(void *)(a10 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v16 = (char *)v28 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin();
  uint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)(a11 + 8) + 8))(a10);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20(v16, v11, a10);
  IONotificationPortRef v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v36 = v30;
    char v29 = v23;
    *(_DWORD *)uint64_t v23 = 136315138;
    v28[1] = v23 + 4;
    v20(v14, (uint64_t)v16, a10);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v35 = sub_100010680(v24, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a10);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to create a provider internet sharing policy because %s doesn't support it", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a10);
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v32);
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v26 = xmmword_1003B0090;
  *(unsigned char *)(v26 + 16) = 1;
  v34();
  return swift_errorRelease();
}

{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v19)(uint64_t, uint64_t, char);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t (**v25)(uint64_t, uint64_t, char);
  uint64_t v26;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  void v32[3];
  uint64_t v33;

  uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v14(v30, a10, a11);
  uint64_t v15 = v30[0] + 72;
  swift_beginAccess();
  sub_1000136F4(v15, (uint64_t)v32, &qword_10047D0D0);
  swift_release();
  BOOL v16 = v33;
  sub_1000380B4((uint64_t)v32, &qword_10047D0D0);
  if (v16)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_1003B2F60;
    *(unsigned char *)(v17 + 16) = 0;
    a6();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject();
    *((void *)v19 + 2) = a6;
    *((void *)v19 + 3) = a7;
    *((void *)v19 + 4) = a8;
    *((void *)v19 + 5) = a9;
    uint64_t v20 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    IONotificationPortRef v21 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)();
    os_log_type_t v22 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject();
    *(void *)(v21 + v22) = sub_10005398C();
    uint64_t v23 = v21
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
    *(unsigned char *)(v23 + 16) = 2;
    uint64_t v24 = (void *)(v21
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *uint64_t v24 = a1;
    v24[1] = a2;
    unint64_t v25 = (uint64_t (**)(uint64_t, uint64_t, char))(v21
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *unint64_t v25 = sub_10006B8B8;
    v25[1] = v19;
    v32[0] = v29;
    v14(&v31, a10, a11);
    uint64_t v33 = v20;
    v32[0] = v21;
    uint64_t v26 = v31 + 72;
    swift_beginAccess();
    swift_retain();
    sub_10006D1A4((uint64_t)v32, v26, &qword_10047D0D0);
    swift_endAccess();
    swift_release();
    sub_10006AB10();
    return swift_release();
  }
}

uint64_t DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  __chkstk_darwin();
  int64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)(a2 + 8) + 8))(a1);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v9, v2, a1);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    os_log_t v25 = v14;
    uint64_t v17 = v7;
    uint64_t v18 = (uint8_t *)v16;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    uint64_t v27 = v10;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v23 = v18 + 4;
    uint64_t v24 = v18;
    v13(v17, (uint64_t)v9, a1);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v29 = sub_100010680(v19, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, a1);
    os_log_t v21 = v25;
    _os_log_impl((void *)&_mh_execute_header, v25, v15, "Unable to perform a link test because %s doesn't support it", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v27);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, a1);

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  }
}

uint64_t variable initialization expression of OffloadedServices.browses()
{
  sub_1000171BC();

  return Dictionary.init()();
}

void *variable initialization expression of InMemoryPreferenceStorage.storage()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of OffloadedServices.advertises()
{
  sub_100017210();

  return Dictionary.init()();
}

uint64_t variable initialization expression of OffloadedServices.resolvers()
{
  sub_100017210();

  return Dictionary.init()();
}

uint64_t variable initialization expression of LockedPreferencesStorage.lock()
{
  type metadata accessor for Lock();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

void *variable initialization expression of NANMatchingFilter.matchingFilterList()
{
  return &_swiftEmptyArrayStorage;
}

id variable initialization expression of AppleDevice.infra()
{
  id v0 = objc_allocWithZone((Class)CWFInterface);

  return [v0 initWithServiceType:1];
}

uint64_t variable initialization expression of AppleDevice.coreWiFiQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_100017264();
  static DispatchQoS.unspecified.getter();
  v5[1] = _swiftEmptyArrayStorage;
  sub_10001D67C((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_1000172A4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

double variable initialization expression of AppleDevice.currentInternetSharingSession@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of NANBitmap.Band.Iterator.currentIndex()
{
  return 0;
}

uint64_t variable initialization expression of AppleDevice.keychain()
{
  uint64_t result = kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v2;
    type metadata accessor for AppleKeychain(0);
    uint64_t v4 = swift_allocObject();
    Logger.init(subsystem:category:)();
    *(_DWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
    uint64_t v5 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    *uint64_t v5 = &_swiftEmptySetSingleton;
    v5[1] = 0;
    *(void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
    uint64_t v6 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *uint64_t v6 = 0xD000000000000012;
    v6[1] = 0x80000001003D7B30;
    int64_t v7 = (uint64_t *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    *int64_t v7 = v1;
    v7[1] = v3;
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t variable initialization expression of AppleDevice.preferencesStorage()
{
  if (qword_10047BF98 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static SCPreferencesRef.p2pPreferences;
  type metadata accessor for InMemoryPreferenceStorage();
  *(void *)(swift_allocObject() + 16) = &_swiftEmptyDictionarySingleton;
  type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject();
  id v2 = v0;
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = 0;
  return v1;
}

double variable initialization expression of AppleDevice.interfaceDiscoverer@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AppleDevice.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of IDPool.usedIDs()
{
  return Set.init()();
}

uint64_t variable initialization expression of LongTermPairingKeyStore.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of NANPMK.ID.data()
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  v1[0] = 0x1000000000;
  v1[1] = __DataStorage.init(length:)();
  sub_100017300((int *)v1, 0);
  return v1[0];
}

CoreP2P::NANServiceName __swiftcall NANServiceName.init()()
{
  uint64_t v0 = 0;
  uint64_t v1 = (void *)0xE000000000000000;
  result.string._object = v1;
  result.string._countAndFlagsBits = v0;
  return result;
}

uint64_t static IEEE80211Frame.Header.FrameControl.moreFragments.getter()
{
  return 1024;
}

uint64_t variable initialization expression of IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback()
{
  return 0;
}

uint64_t variable initialization expression of AWDLPeer.arpa()
{
  return 0;
}

uint64_t variable initialization expression of AWDLActionFrame.RealtimeGroup.infrastructureChannel()
{
  return 0x300000000;
}

uint64_t variable initialization expression of CachedPreferenceStorage.cachedStorage()
{
  type metadata accessor for InMemoryPreferenceStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t variable initialization expression of InfraAssociationJoinStatus.SubstateInformation.setSSIDStatus()
{
  return 8704;
}

double variable initialization expression of InfraAssociationReadyEvent.ipAddress@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = -1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.preferredChannels()
{
  return 0;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.unicastOptions()
{
  return 43;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.awdlOnSince@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C((uint64_t (*)(void))&type metadata accessor for DispatchTimeInterval, a1);
}

uint64_t variable initialization expression of AWDLPeer.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of AWDLPeer.lastUpdated()
{
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)algn_100488568 + 8))();
}

uint64_t variable initialization expression of AWDLPeer.deprecatedElectionParameter()
{
  return 0;
}

double variable initialization expression of AWDLPeer.electionParameter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.serviceParameter()
{
  return 0;
}

double variable initialization expression of AWDLPeer.synchronizationParameter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.dataPathStateParameter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C(type metadata accessor for AWDLActionFrame.DataPathState, a1);
}

double variable initialization expression of AWDLPeer.nanSynchronization@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

double variable initialization expression of AWDLPeer.realtimeGroup@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1003B00A0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

void *variable initialization expression of AWDLPeer.advertisedServiceIDPool()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of AWDLPeer.advertisedServices()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of AWDLPeer.average2_4RSSI()
{
  return 0;
}

double variable initialization expression of AWDLPeer.AdvertisedService.advertisementInfo@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t variable initialization expression of NANSubscribe.Configuration.bloomFilter()
{
  return 0;
}

uint64_t variable initialization expression of LongTermPairingKeys.PublicIdentity.lastModifiedDate@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of AppleKeychain.notificationToken()
{
  return 0xFFFFFFFFLL;
}

void *variable initialization expression of InMemoryKeychain.tokens()
{
  return &_swiftEmptySetSingleton;
}

uint64_t static NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces.getter()
{
  return 2;
}

double variable initialization expression of IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = -1;
  return result;
}

uint64_t static NANBitmap.Band.ghz2_4.getter()
{
  return 4;
}

uint64_t variable initialization expression of RoutingSocket.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t DNSRecord.valueData.getter()
{
  return 0;
}

double variable initialization expression of NANDatapath.Configuration.securityConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 1;
  return result;
}

double variable initialization expression of NANDatapath.Configuration.internetSharingConfiguration@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_1003B00B0;
  return result;
}

double variable initialization expression of NANPublish.Configuration.internetSharingConfiguration@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = -1;
  return result;
}

uint64_t variable initialization expression of NANPublish.Configuration.pairingBootstrappingMethod()
{
  return 0x10000;
}

uint64_t variable initialization expression of NANPublish.Configuration.multicastAddress()
{
  return 0x1000000000000;
}

uint64_t variable initialization expression of NANCoreAnalyticsMetrics.internetSharingStatistics()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.ServiceDescriptor.serviceFilterControl()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.Datapath.serviceInfo()
{
  return 4;
}

uint64_t variable initialization expression of NANAttribute.DeviceLink.peerID()
{
  return 256;
}

uint64_t variable initialization expression of NANAttribute.UnalignedSchedule.entry()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.RangingSetup.fineTimingMeasurementParameters()
{
  return 0x100000000;
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C((uint64_t (*)(void))&type metadata accessor for P256.KeyAgreement.PublicKey, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics@<X0>(uint64_t a1@<X8>)
{
  return sub_10001678C((uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, a1);
}

uint64_t sub_10001678C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse()
{
  return 0;
}

uint64_t variable initialization expression of WiFiInterface.NeighborDiscoveryTable.table()
{
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry();
  swift_getWitnessTable();

  return Dictionary.init()();
}

uint64_t variable initialization expression of ObservableWiFiProperty.tokenRegistrations()
{
  return sub_10026F1BC();
}

BOOL sub_1000168B8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000168CC()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100016918()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100016970()
{
  return sub_100016FB0();
}

uint64_t sub_100016988()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000169F4(uint64_t a1, uint64_t a2)
{
  return sub_100016B6C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100016A0C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100016A84(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100016B04@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *sub_100016B48@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100016B54(uint64_t a1, uint64_t a2)
{
  return sub_100016B6C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100016B6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100016BB0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100016C04()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Int sub_100016C78()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100016CC0()
{
  Hasher._combine(_:)(*v0);
}

void *sub_100016CEC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100016CFC(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100016D08()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100016D94@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100016DDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_DWORD *sub_100016E08@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_100016E18(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100016E24(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100016E38()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

void *sub_100016EA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100016EB8(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100016ECC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100016EE0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_100016EF4()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100016F40()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100016F98()
{
  return sub_100016FB0();
}

Swift::Int sub_100016FB0()
{
  return Hasher._finalize()();
}

uint64_t sub_100017014(uint64_t a1)
{
  uint64_t v2 = sub_10001D67C(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  uint64_t v3 = sub_10001D67C(&qword_10047C878, type metadata accessor for AWDLTrafficRegistrationService);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000170D0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10001710C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100017134(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100010680(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

unsigned char **sub_1000171AC(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_1000171BC()
{
  unint64_t result = qword_10047C310;
  if (!qword_10047C310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C310);
  }
  return result;
}

unint64_t sub_100017210()
{
  unint64_t result = qword_100485650;
  if (!qword_100485650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485650);
  }
  return result;
}

unint64_t sub_100017264()
{
  unint64_t result = qword_10047C320;
  if (!qword_10047C320)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10047C320);
  }
  return result;
}

unint64_t sub_1000172A4()
{
  unint64_t result = qword_100488070[0];
  if (!qword_100488070[0])
  {
    sub_100014434((uint64_t *)&unk_10047C330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100488070);
  }
  return result;
}

void sub_100017300(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }

  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_100017394(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010BCC((uint64_t *)&unk_10047C920);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      int v7 = *(_DWORD *)(a1 + 32 + 4 * v4);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      unint64_t v9 = result & v6;
      unint64_t v10 = (result & (unint64_t)v6) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v6);
      uint64_t v13 = *(void *)(v3 + 48);
      if ((v12 & v11) != 0)
      {
        while (*(_DWORD *)(v13 + 4 * v9) != v7)
        {
          unint64_t v9 = (v9 + 1) & v6;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        *(_DWORD *)(v13 + 4 * v9) = v7;
        uint64_t v14 = *(void *)(v3 + 16);
        BOOL v15 = __OFADD__(v14, 1);
        uint64_t v16 = v14 + 1;
        if (v15)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v16;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1000174B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)v32 - v7;
  uint64_t v8 = sub_100010BCC(&qword_10047C8E0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    sub_100010BCC(&qword_10047C8E8);
    uint64_t v12 = (unsigned char *)static _SetStorage.allocate(capacity:)();
    uint64_t v13 = 0;
    BOOL v15 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    unint64_t v38 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v16 = *(void *)(v14 + 56);
    unint64_t v42 = v15;
    uint64_t v43 = v16;
    uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    BOOL v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v17 = v12 + 56;
    uint64_t v18 = (void (**)(char *, uint64_t))(v14 - 8);
    v32[1] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v33 = v10;
    uint64_t v35 = v11;
    v15(v10, v38, v2);
    while (1)
    {
      uint64_t v34 = *v37;
      v34(v10, 0, 1, v2);
      if ((*v36)(v10, 1, v2) == 1) {
        break;
      }
      uint64_t v41 = v13;
      uint64_t v39 = *v40;
      v39(v44, v10, v2);
      sub_10001D67C(&qword_10047C8F0, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit);
      uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v20 = ~(-1 << v12[32]);
      unint64_t v21 = v19 & v20;
      unint64_t v22 = (v19 & (unint64_t)v20) >> 6;
      uint64_t v23 = *(void *)&v17[8 * v22];
      uint64_t v24 = 1 << (v19 & v20);
      if ((v24 & v23) != 0)
      {
        do
        {
          uint64_t v25 = v14;
          v42(v6, *((void *)v12 + 6) + v21 * v43, v2);
          sub_10001D67C(&qword_10047C8F8, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit);
          char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v27 = *v18;
          (*v18)(v6, v2);
          if (v26)
          {
            v27(v44, v2);
            uint64_t v14 = v25;
            unint64_t v10 = v33;
            goto LABEL_4;
          }
          unint64_t v21 = (v21 + 1) & v20;
          unint64_t v22 = v21 >> 6;
          uint64_t v23 = *(void *)&v17[8 * (v21 >> 6)];
          uint64_t v24 = 1 << v21;
          uint64_t v14 = v25;
        }
        while ((v23 & (1 << v21)) != 0);
        unint64_t v10 = v33;
      }
      *(void *)&v17[8 * v22] = v24 | v23;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v39)(*((void *)v12 + 6) + v21 * v43, v44, v2);
      uint64_t v29 = *((void *)v12 + 2);
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        return result;
      }
      *((void *)v12 + 2) = v31;
LABEL_4:
      uint64_t v13 = v41 + 1;
      if (v41 + 1 == v35)
      {
        v34(v10, 1, 1, v2);
        return (uint64_t)v12;
      }
      v42(v10, v38 + v43 * v13, v2);
    }
  }
  else
  {
    uint64_t v12 = &_swiftEmptySetSingleton;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1, 1, v2);
  }
  return (uint64_t)v12;
}

void *sub_1000178CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_100010BCC(&qword_10047C918);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  do
  {
    int v6 = *(unsigned __int8 *)(a1 + 32 + v4);
    Hasher.init(_seed:)();
    switch(v6)
    {
      case 2:
        Swift::UInt v7 = 0;
        goto LABEL_11;
      case 3:
        Swift::UInt v7 = 1;
        goto LABEL_11;
      case 4:
        Swift::UInt v7 = 3;
        goto LABEL_11;
      case 5:
        Swift::UInt v7 = 4;
        goto LABEL_11;
      case 6:
        Swift::UInt v7 = 5;
LABEL_11:
        Hasher._combine(_:)(v7);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Hasher._combine(_:)(v6 & 1);
        break;
    }
    Swift::Int v8 = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v10 = v8 & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    uint64_t v14 = *(void *)(v3 + 48);
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v15 = ~v9;
      while (2)
      {
        switch(*(unsigned char *)(v14 + v10))
        {
          case 2:
            if (v6 != 2) {
              goto LABEL_15;
            }
            break;
          case 3:
            if (v6 != 3) {
              goto LABEL_15;
            }
            break;
          case 4:
            if (v6 != 4) {
              goto LABEL_15;
            }
            break;
          case 5:
            if (v6 != 5) {
              goto LABEL_15;
            }
            break;
          case 6:
            if (v6 != 6) {
              goto LABEL_15;
            }
            break;
          default:
            if ((v6 - 2) < 5u || ((v6 ^ ((*(unsigned char *)(v14 + v10) & 1) == 0)) & 1) == 0)
            {
LABEL_15:
              unint64_t v10 = (v10 + 1) & v15;
              unint64_t v11 = v10 >> 6;
              uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
              uint64_t v13 = 1 << v10;
              if ((v12 & (1 << v10)) == 0) {
                goto LABEL_28;
              }
              continue;
            }
            break;
        }
        break;
      }
    }
    else
    {
LABEL_28:
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v6;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        JUMPOUT(0x100017B04);
      }
      *(void *)(v3 + 16) = v18;
    }
    ++v4;
  }
  while (v4 != v1);
  return (void *)v3;
}

Swift::Int sub_100017B2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010BCC((uint64_t *)&unk_100486B90);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v32 = v3 + 56;
    uint64_t v27 = v1;
    uint64_t v28 = a1 + 32;
    while (1)
    {
      uint64_t v5 = (uint64_t *)(v28 + 24 * v4);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      int v8 = *((unsigned __int8 *)v5 + 16);
      int v9 = *((unsigned __int8 *)v5 + 17);
      Hasher.init(_seed:)();
      String.lowercased()();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 ? 7365749 : 7365492;
      uint64_t v31 = v10;
      String.hash(into:)();
      swift_bridgeObjectRelease();
      int v30 = v9;
      Hasher._combine(_:)(v9);
      Swift::Int result = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      uint64_t v15 = *(void *)(v32 + 8 * (v13 >> 6));
      uint64_t v16 = 1 << v13;
      if (((1 << v13) & v15) != 0) {
        break;
      }
LABEL_21:
      *(void *)(v32 + 8 * v14) = v16 | v15;
      uint64_t v23 = *(void *)(v3 + 48) + 24 * v13;
      *(void *)uint64_t v23 = v7;
      *(void *)(v23 + 8) = v6;
      *(unsigned char *)(v23 + 16) = v8;
      *(unsigned char *)(v23 + 17) = v30;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v26;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
    char v29 = v8;
    uint64_t v17 = ~v12;
    sub_10001D82C();
    while (1)
    {
      uint64_t v18 = *(void *)(v3 + 48) + 24 * v13;
      int v19 = *(unsigned __int8 *)(v18 + 16);
      int v20 = *(unsigned __int8 *)(v18 + 17);
      swift_bridgeObjectRetain();
      if (StringProtocol.caseInsensitiveCompare<A>(_:)())
      {
        Swift::Int result = swift_bridgeObjectRelease();
      }
      else
      {
        if (v19) {
          uint64_t v21 = 7365749;
        }
        else {
          uint64_t v21 = 7365492;
        }
        if (v21 == v31)
        {
          swift_bridgeObjectRelease();
          Swift::Int result = swift_bridgeObjectRelease_n();
LABEL_18:
          if (v20 == v30)
          {
            swift_bridgeObjectRelease();
            uint64_t v1 = v27;
            goto LABEL_3;
          }
          goto LABEL_10;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        Swift::Int result = swift_bridgeObjectRelease_n();
        if (v22) {
          goto LABEL_18;
        }
      }
LABEL_10:
      unint64_t v13 = (v13 + 1) & v17;
      unint64_t v14 = v13 >> 6;
      uint64_t v15 = *(void *)(v32 + 8 * (v13 >> 6));
      uint64_t v16 = 1 << v13;
      if ((v15 & (1 << v13)) == 0)
      {
        uint64_t v1 = v27;
        LOBYTE(v8) = v29;
        goto LABEL_21;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100017DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010BCC((uint64_t *)&unk_10047C900);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    while (1)
    {
      int v6 = *(unsigned __int8 *)(a1 + 32 + v4);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v9 = result & ~v8;
      unint64_t v10 = v9 >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
      uint64_t v12 = 1 << v9;
      uint64_t v13 = *(void *)(v3 + 48);
      if (((1 << v9) & v11) != 0)
      {
        if (*(unsigned __int8 *)(v13 + v9) == v6) {
          goto LABEL_3;
        }
        uint64_t v14 = ~v8;
        while (1)
        {
          unint64_t v9 = (v9 + 1) & v14;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v13 + v9) == v6) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v10) = v12 | v11;
      *(unsigned char *)(v13 + v9) = v6;
      uint64_t v15 = *(void *)(v3 + 16);
      BOOL v16 = __OFADD__(v15, 1);
      uint64_t v17 = v15 + 1;
      if (v16)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v17;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDriverCapabilities(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v8 = a3[8];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for DispatchTimeInterval();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[10];
    *(void *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)(v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[12];
    *(void *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[14];
    *(void *)(v7 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(void *)(v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    *(unsigned char *)(v7 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  }
  return v7;
}

uint64_t destroy for NANDriverCapabilities(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithCopy for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000184F0);
}

uint64_t sub_1000184F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000185B4);
}

void *sub_1000185B4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10001865C()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.Cluster(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for in6_addr(uint64_t a1)
{
}

void type metadata accessor for in_addr(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for nw_path_status_t(uint64_t a1)
{
}

void type metadata accessor for AWDLTrafficRegistrationService(uint64_t a1)
{
}

void type metadata accessor for WiFiAwareDataSessionLinkStatus(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PInternetSharingPolicy(uint64_t a1)
{
}

void type metadata accessor for WiFiAwareTerminationReason(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
}

void type metadata accessor for apple80211_virtual_if_role(uint64_t a1)
{
}

void type metadata accessor for SCPreferences(uint64_t a1)
{
}

__n128 sub_100018814(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100018830(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 60)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018850(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 60) = v3;
  return result;
}

void type metadata accessor for wl_nan_conf_status(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for RadioResources.PreferredChannel(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_ev_terminated(uint64_t a1)
{
}

uint64_t sub_1000188C0(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for wl_nan_event_disc_result(uint64_t a1)
{
}

void type metadata accessor for wl_nan_event_replied(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_receive(uint64_t a1)
{
}

void type metadata accessor for wl_nan_cmd_xtlv_id(uint64_t a1)
{
}

void *sub_100018950(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_txs(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for wl_nan_ev_rx_bcn(uint64_t a1)
{
}

__n128 sub_1000189B8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000189CC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000189EC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 36) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_datapath_cmn(uint64_t a1)
{
}

__n128 sub_100018A30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t sub_100018A44(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018A64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18) = v3;
  return result;
}

void type metadata accessor for wl_nan_host_assist_req(uint64_t a1)
{
}

_DWORD *initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptorExtension.RangeLimit(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_txs(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedWLANInfrastructure(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_rx(uint64_t a1)
{
}

_DWORD *sub_100018B38(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_conf(uint64_t a1)
{
}

__n128 sub_100018BA0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100018BB4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018BD4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 30) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_resp(uint64_t a1)
{
}

void type metadata accessor for wl_nan_tlv(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedP2POperation(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedP2POperation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.FineTimingMeasurementRangeReport.Entry(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 14) = v3;
  return result;
}

void type metadata accessor for wl_nan_sd_transmit(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NANMasterRank(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANMasterRank(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANMasterRank(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_end(uint64_t a1)
{
}

__n128 sub_100018D10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100018D24(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018D44(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 34) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_req(uint64_t a1)
{
}

void type metadata accessor for wl_nan_awake_dws(uint64_t a1)
{
}

void type metadata accessor for wl_nan_election_metric_config(uint64_t a1)
{
}

void type metadata accessor for wl_nan_cfg_ctrl2(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_ppp_done(uint64_t a1)
{
}

void *sub_100018DEC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2720uLL);
}

uint64_t sub_100018DF4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10016)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018E18(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 9992) = 0u;
    *(void *)(result + 10008) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 8440) = 0u;
    *(_OWORD *)(result + 8424) = 0u;
    *(_OWORD *)(result + 8408) = 0u;
    *(_OWORD *)(result + 8392) = 0u;
    *(_OWORD *)(result + 8376) = 0u;
    *(_OWORD *)(result + 8360) = 0u;
    *(_OWORD *)(result + 8344) = 0u;
    *(_OWORD *)(result + 8328) = 0u;
    *(_OWORD *)(result + 8312) = 0u;
    *(_OWORD *)(result + 8296) = 0u;
    *(_OWORD *)(result + 8280) = 0u;
    *(_OWORD *)(result + 8264) = 0u;
    *(_OWORD *)(result + 8248) = 0u;
    *(_OWORD *)(result + 8232) = 0u;
    *(_OWORD *)(result + 8216) = 0u;
    *(_OWORD *)(result + 8200) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 8952) = 0u;
    *(_OWORD *)(result + 8936) = 0u;
    *(_OWORD *)(result + 8920) = 0u;
    *(_OWORD *)(result + 8904) = 0u;
    *(_OWORD *)(result + 8888) = 0u;
    *(_OWORD *)(result + 8872) = 0u;
    *(_OWORD *)(result + 8856) = 0u;
    *(_OWORD *)(result + 8712) = 0u;
    *(_OWORD *)(result + 8840) = 0u;
    *(_OWORD *)(result + 8824) = 0u;
    *(_OWORD *)(result + 8776) = 0u;
    *(_OWORD *)(result + 8760) = 0u;
    *(_OWORD *)(result + 8744) = 0u;
    *(_OWORD *)(result + 8728) = 0u;
    *(_OWORD *)(result + 8808) = 0u;
    *(_OWORD *)(result + 8792) = 0u;
    *(_OWORD *)(result + 9208) = 0u;
    *(_OWORD *)(result + 9192) = 0u;
    *(_OWORD *)(result + 9176) = 0u;
    *(_OWORD *)(result + 9160) = 0u;
    *(_OWORD *)(result + 9144) = 0u;
    *(_OWORD *)(result + 9128) = 0u;
    *(_OWORD *)(result + 9112) = 0u;
    *(_OWORD *)(result + 8968) = 0u;
    *(_OWORD *)(result + 9096) = 0u;
    *(_OWORD *)(result + 9080) = 0u;
    *(_OWORD *)(result + 9032) = 0u;
    *(_OWORD *)(result + 9016) = 0u;
    *(_OWORD *)(result + 9000) = 0u;
    *(_OWORD *)(result + 8984) = 0u;
    *(_OWORD *)(result + 9064) = 0u;
    *(_OWORD *)(result + 9048) = 0u;
    *(_OWORD *)(result + 9464) = 0u;
    *(_OWORD *)(result + 9448) = 0u;
    *(_OWORD *)(result + 9432) = 0u;
    *(_OWORD *)(result + 9416) = 0u;
    *(_OWORD *)(result + 9400) = 0u;
    *(_OWORD *)(result + 9384) = 0u;
    *(_OWORD *)(result + 9368) = 0u;
    *(_OWORD *)(result + 9224) = 0u;
    *(_OWORD *)(result + 9352) = 0u;
    *(_OWORD *)(result + 9336) = 0u;
    *(_OWORD *)(result + 9288) = 0u;
    *(_OWORD *)(result + 9272) = 0u;
    *(_OWORD *)(result + 9256) = 0u;
    *(_OWORD *)(result + 9240) = 0u;
    *(_OWORD *)(result + 9320) = 0u;
    *(_OWORD *)(result + 9304) = 0u;
    *(_OWORD *)(result + 9720) = 0u;
    *(_OWORD *)(result + 9704) = 0u;
    *(_OWORD *)(result + 9688) = 0u;
    *(_OWORD *)(result + 9672) = 0u;
    *(_OWORD *)(result + 9656) = 0u;
    *(_OWORD *)(result + 9640) = 0u;
    *(_OWORD *)(result + 9624) = 0u;
    *(_OWORD *)(result + 9480) = 0u;
    *(_OWORD *)(result + 9608) = 0u;
    *(_OWORD *)(result + 9592) = 0u;
    *(_OWORD *)(result + 9544) = 0u;
    *(_OWORD *)(result + 9528) = 0u;
    *(_OWORD *)(result + 9512) = 0u;
    *(_OWORD *)(result + 9496) = 0u;
    *(_OWORD *)(result + 9576) = 0u;
    *(_OWORD *)(result + 9560) = 0u;
    *(_OWORD *)(result + 9976) = 0u;
    *(_OWORD *)(result + 9960) = 0u;
    *(_OWORD *)(result + 9944) = 0u;
    *(_OWORD *)(result + 9928) = 0u;
    *(_OWORD *)(result + 9912) = 0u;
    *(_OWORD *)(result + 9896) = 0u;
    *(_OWORD *)(result + 9880) = 0u;
    *(_OWORD *)(result + 9736) = 0u;
    *(_OWORD *)(result + 9864) = 0u;
    *(_OWORD *)(result + 9816) = 0u;
    *(_OWORD *)(result + 9800) = 0u;
    *(_OWORD *)(result + 9784) = 0u;
    *(_OWORD *)(result + 9768) = 0u;
    *(_OWORD *)(result + 9752) = 0u;
    *(_OWORD *)(result + 9848) = 0u;
    *(_OWORD *)(result + 9832) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 8696) = 0u;
    *(_OWORD *)(result + 8680) = 0u;
    *(_OWORD *)(result + 8664) = 0u;
    *(_OWORD *)(result + 8648) = 0u;
    *(_OWORD *)(result + 8632) = 0u;
    *(_OWORD *)(result + 8616) = 0u;
    *(_OWORD *)(result + 8600) = 0u;
    *(_OWORD *)(result + 8584) = 0u;
    *(_OWORD *)(result + 8568) = 0u;
    *(_OWORD *)(result + 8552) = 0u;
    *(_OWORD *)(result + 8536) = 0u;
    *(_OWORD *)(result + 8520) = 0u;
    *(_OWORD *)(result + 8504) = 0u;
    *(_OWORD *)(result + 8488) = 0u;
    *(_OWORD *)(result + 8472) = 0u;
    *(_OWORD *)(result + 8456) = 0u;
    *(_OWORD *)(result + 8184) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10016) = v3;
  return result;
}

void type metadata accessor for apple80211_channels_info(uint64_t a1)
{
}

__n128 sub_100019918(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for apple80211_companion_skywalk_if_create(uint64_t a1)
{
}

__n128 sub_10001996C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_virt_if_delete_data(uint64_t a1)
{
}

__n128 sub_100019994(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000199A8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000199C8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_keep_alive_dp_identifer(uint64_t a1)
{
}

__n128 initializeWithTake for NANServiceInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for histogramBin_s(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ir_status(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ps_restriction(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_link_status(uint64_t a1)
{
}

__n128 sub_100019A9C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t sub_100019AC8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019AE8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 160) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_confirm(uint64_t a1)
{
}

void *sub_100019B64(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x880uLL);
}

uint64_t sub_100019B6C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 2176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019B8C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2168) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 2176) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_response(uint64_t a1)
{
}

void *sub_100019E0C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E5uLL);
}

uint64_t sub_100019E14(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 997)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019E34(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 984) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 996) = 0;
    *(_DWORD *)(result + 992) = 0;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 997) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_data(uint64_t a1)
{
}

void *sub_100019F80(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80CuLL);
}

uint64_t sub_100019F88(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 2060)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100019FA8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 2056) = 0;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 2060) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_follow_up_transmit_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_cancel_publish_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_cancel_subscribe_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_terminate(uint64_t a1)
{
}

void *sub_10001A244(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x868uLL);
}

uint64_t sub_10001A24C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 2152)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A26C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 2152) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request(uint64_t a1)
{
}

void *sub_10001A4E4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x15C8uLL);
}

uint64_t sub_10001A4EC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5576)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001A510(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5576) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_publish_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_matching_filter(uint64_t a1)
{
}

void *sub_10001AB44(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE14uLL);
}

uint64_t sub_10001AB4C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 3604)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001AB6C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3592) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 3600) = 0;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 3604) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_subscribe_data(uint64_t a1)
{
}

void *sub_10001AF68(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t sub_10001AF70(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 258)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001AF90(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 258) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_name(uint64_t a1)
{
}

__n128 initializeWithCopy for AWDLActionFrame.ElectionParameter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_role_cfg(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_host_election(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_secondary_master_channel(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_primary_master_channel(uint64_t a1)
{
}

_WORD *initializeBufferWithCopyOfBuffer for NANAttribute.MasterIndication(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for apple80211_nan_dw_awake_period(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_random_factor(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_master_pref(uint64_t a1)
{
}

uint64_t sub_10001B120(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_id(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_enable(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_capability(uint64_t a1)
{
}

void *sub_10001B170(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xFB0uLL);
}

uint64_t sub_10001B178(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 4016)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10001B1CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 4008) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4016) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4016) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics(uint64_t a1)
{
}

void *sub_10001B64C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE80uLL);
}

uint64_t sub_10001B654(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 3712)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001B674(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3704) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 3712) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_statistics(uint64_t a1)
{
}

__n128 sub_10001BA8C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for awdl_peer_advert_add(uint64_t a1)
{
}

void type metadata accessor for apple80211_peer_service_request(uint64_t a1)
{
}

__n128 sub_10001BAC8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10001BAFC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BB1C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 136) = v3;
  return result;
}

void type metadata accessor for apple80211_lte_restricted_channels(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_social_time_slots(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_oper_mode(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_UMI_data(uint64_t a1)
{
}

__n128 sub_10001BBB8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_10001BBF4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 184) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_peer_traffic_registration(uint64_t a1)
{
}

void *sub_10001BC60(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_10001BC68(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 400)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BC88(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 400) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_sync_channel_sequence(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_preferred_channels(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_strategy(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_sync_enabled(uint64_t a1)
{
}

void type metadata accessor for apple80211_virtual_if_state(uint64_t a1)
{
}

__n128 initializeWithTake for NANServiceName(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for apple80211_userspace_p2p_options_t(uint64_t a1)
{
}

void type metadata accessor for apple80211_country_code_data(uint64_t a1)
{
}

__n128 sub_10001BDB4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10001BDD8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BDF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for in6_aliasreq(uint64_t a1)
{
}

void *sub_10001BE58(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t sub_10001BE60(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 288)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001BE80(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 288) = v3;
  return result;
}

void type metadata accessor for in6_ifreq(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.P2POperation(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001BF18(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ifreq(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for WiFiAddress(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_changed_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_role_changed_event_data(uint64_t a1)
{
}

__n128 sub_10001BF94(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_discovery_result_received_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_publish_replied_private_event_data(uint64_t a1)
{
}

__n128 sub_10001BFD0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request_recvd_event_data(uint64_t a1)
{
}

__n128 sub_10001BFF8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001C00C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C02C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 22) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_resp_recvd_event_data(uint64_t a1)
{
}

__n128 sub_10001C070(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Cluster(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_confirm_recvd_event_data(uint64_t a1)
{
}

void *sub_10001C0B8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x820uLL);
}

uint64_t sub_10001C0C0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 2080)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C0E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2072) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 2080) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_established_event_data(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.P2POperation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_10001C37C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C39C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_end_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_host_assist_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_subscribe_terminated_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_publish_terminated_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_follow_up_received_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_follow_up_tx_complete_event_data(uint64_t a1)
{
}

__n128 sub_10001C444(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001C450(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for apple80211_nan_beacon_recvd_event_data(uint64_t a1)
{
}

uint64_t sub_10001C484(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_10001C498(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C4B8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status(uint64_t a1)
{
}

void *sub_10001C4F8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E1uLL);
}

uint64_t sub_10001C500(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 993)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C520(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 984) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(unsigned char *)(result + 992) = 0;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 993) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_rx_data(uint64_t a1)
{
}

__n128 sub_10001C668(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001C68C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001C6AC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dw_start_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_preferred_channels_changed_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_channel_band(uint64_t a1)
{
}

void *sub_10001C724(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF20uLL);
}

uint64_t sub_10001C72C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 3872)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10001C780(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 3864) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 3872) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 3872) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_statistics(uint64_t a1)
{
}

void *sub_10001CBDC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x650uLL);
}

uint64_t sub_10001CBE4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 1616)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10001CC38(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 1608) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1616) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1616) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics_reduced(uint64_t a1)
{
}

__n128 sub_10001CE3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_10001CE78(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 62);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10001CECC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 208) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 62) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for apple80211_p2p_airplay_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_p2p_thread_coex_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_hostap_state(uint64_t a1)
{
}

__n128 sub_10001CF80(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001CFA4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 68)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001CFC4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 68) = v3;
  return result;
}

void type metadata accessor for apple80211_peer_presence_indication(uint64_t a1)
{
}

void *sub_10001D018(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t sub_10001D020(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001D040(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 264) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_service_reg_soft_error_event(uint64_t a1)
{
}

void type metadata accessor for apple80211_idle_detect(uint64_t a1)
{
}

__n128 sub_10001D0D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure(uint64_t a1)
{
}

__n128 sub_10001D130(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_10001D16C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for apple80211_driver_availability(uint64_t a1)
{
}

void type metadata accessor for apple80211_chip_reset(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_infra_assoc_start_event_data(uint64_t a1)
{
}

void *sub_10001D1C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1CCuLL);
}

uint64_t sub_10001D1D0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 460)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001D1F0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 456) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 460) = v3;
  return result;
}

void type metadata accessor for apple80211_join_status(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for IEEE80211Frame.Header(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_assoc_ready(uint64_t a1)
{
}

__n128 sub_10001D2D0(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10001D2FC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001D31C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 104) = v3;
  return result;
}

void type metadata accessor for apple80211_message_auth(uint64_t a1)
{
}

void type metadata accessor for apple80211_message_assoc(uint64_t a1)
{
}

void *sub_10001D388(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x193uLL);
}

uint64_t sub_10001D390(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 403)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001D3B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 402) = 0;
    *(_WORD *)(result + 400) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 403) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_scan_start_event_data(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NANAttribute.MasterIndication(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t sub_10001D4D0(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10001D584);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for apple80211_infra_scan_complete_event_data(uint64_t a1)
{
}

void type metadata accessor for apple80211_channel(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for WiFiAddress(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WiFiAddress(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 6) = v3;
  return result;
}

void type metadata accessor for ether_addr(uint64_t a1)
{
}

uint64_t sub_10001D634()
{
  return sub_10001D67C(&qword_10047C840, type metadata accessor for CFString);
}

uint64_t sub_10001D67C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001D6C4()
{
  return sub_10001D67C(&qword_10047C848, type metadata accessor for WiFiAwareTerminationReason);
}

uint64_t sub_10001D70C()
{
  return sub_10001D67C(&qword_10047C850, type metadata accessor for AWDLTrafficRegistrationService);
}

uint64_t sub_10001D754()
{
  return sub_10001D67C(&qword_10047C858, type metadata accessor for AWDLTrafficRegistrationService);
}

uint64_t sub_10001D79C()
{
  return sub_10001D67C(&qword_10047C860, type metadata accessor for AWDLTrafficRegistrationService);
}

uint64_t sub_10001D7E4()
{
  return sub_10001D67C(&qword_10047C868, type metadata accessor for CFString);
}

unint64_t sub_10001D82C()
{
  unint64_t result = qword_10047C910;
  if (!qword_10047C910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C910);
  }
  return result;
}

uint64_t *sub_10001D880(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10001D8E4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001D904(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 44) = v3;
  return result;
}

void type metadata accessor for ifmediareq(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for apple80211req(uint64_t a1)
{
}

void type metadata accessor for SystemPowerChangeMessageType(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for NANDataHostAssistRequest(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sockaddr(uint64_t a1)
{
}

void type metadata accessor for SCNetworkSet(uint64_t a1)
{
}

void type metadata accessor for SCNetworkService(uint64_t a1)
{
}

__n128 sub_10001D9F4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001DA10(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001DA30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_peer_address_data(uint64_t a1)
{
}

void type metadata accessor for bcm_iov_batch_buf(uint64_t a1)
{
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
}

void type metadata accessor for wl_tsf(uint64_t a1)
{
}

void type metadata accessor for wl_nan_events(uint64_t a1)
{
}

void type metadata accessor for wl_nan_ndl_qos(uint64_t a1)
{
}

void type metadata accessor for wl_nan_dp_qos(uint64_t a1)
{
}

void type metadata accessor for apple80211_companion_skywalk_if_create_code(uint64_t a1)
{
}

_DWORD *initializeBufferWithCopyOfBuffer for NANPeerServiceIdentifier(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 7) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_identifier(uint64_t a1)
{
}

void type metadata accessor for histogramBin_s.__Unnamed_union___Anonymous_field2(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_ir_role(uint64_t a1)
{
}

void type metadata accessor for apple80211_disallow_nan_pwrsave_entities(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_link_status_type(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission_reason(uint64_t a1)
{
}

__n128 sub_10001DBE4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_10001DC18(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 146)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001DC38(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 146) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_action_frame_security_type(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_qos_requirements(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_sync_master(uint64_t a1)
{
}

void *sub_10001DCDC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xEE8uLL);
}

uint64_t sub_10001DCE4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 3816)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001DD04(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 3816) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_d2d_migration_statistics(uint64_t a1)
{
}

__n128 initializeWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_awdl_services(uint64_t a1)
{
}

void *sub_10001E170(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t sub_10001E178(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 392)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001E198(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 392) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_srv_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_state_statistics(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_info_ext(uint64_t a1)
{
}

void type metadata accessor for awdlStrategy(uint64_t a1)
{
}

void type metadata accessor for in6_addrlifetime(uint64_t a1)
{
}

void type metadata accessor for sockaddr_in6(uint64_t a1)
{
}

void *sub_10001E2A0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t sub_10001E2A8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 272)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001E2C8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 272) = v3;
  return result;
}

void type metadata accessor for in6_ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
}

void type metadata accessor for ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_state(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_role(uint64_t a1)
{
}

void *sub_10001E388(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x802uLL);
}

uint64_t sub_10001E390(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 2050)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001E3B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 2040) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 2048) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 2050) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_info(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_data_path_end_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_dp_host_assist_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status_reason_code(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_result(uint64_t a1)
{
}

void *sub_10001E660(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3C2uLL);
}

uint64_t sub_10001E668(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 962)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001E688(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 952) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_WORD *)(result + 960) = 0;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 962) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_payload(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_device_info(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NonNANOperatingChannelInformation(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for NonNANOperatingChannelInformation(uint64_t result, int a2, int a3)
{
  if ((a3 + 0x1FFFFFF) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(unsigned char *)(result + 3) = 0;
    }
  }
  return result;
}

void type metadata accessor for apple80211_nan_channel(uint64_t a1)
{
}

void *sub_10001E8C0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF00uLL);
}

uint64_t sub_10001E8C8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 3840)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001E8E8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3832) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 3840) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_traffic_statistics(uint64_t a1)
{
}

void *sub_10001ED20(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x588uLL);
}

uint64_t sub_10001ED28(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 1416)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001ED48(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 1416) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_reduced(uint64_t a1)
{
}

__n128 sub_10001EEFC(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t sub_10001EF30(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[192]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10001EF84(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_configs(uint64_t a1)
{
}

void type metadata accessor for airplayStats_histogramBin(uint64_t a1)
{
}

void type metadata accessor for apple80211_p2p_airplay_statistics.__Unnamed_union_u(uint64_t a1)
{
}

void type metadata accessor for peerPresence(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure_reason(uint64_t a1)
{
}

void type metadata accessor for apple80211_chip_reset_state(uint64_t a1)
{
}

void type metadata accessor for apple80211_join_substate_info(uint64_t a1)
{
}

uint64_t sub_10001F084()
{
  return sub_10001D67C(&qword_10047CAE8, type metadata accessor for SCNetworkService);
}

uint64_t sub_10001F0CC()
{
  return sub_10001D67C(&qword_10047CAF0, type metadata accessor for SCNetworkService);
}

uint64_t getEnumTagSinglePayload for NANAttribute.Cluster(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for sockaddr_in(uint64_t a1)
{
}

__n128 sub_10001F148(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability_params(uint64_t a1)
{
}

void type metadata accessor for apple80211_nan_data_qos_types(uint64_t a1)
{
}

void *sub_10001F194(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE10uLL);
}

uint64_t sub_10001F19C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 3600)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001F1BC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 3592) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 3600) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms(uint64_t a1)
{
}

void type metadata accessor for apple80211_awdl_srv_info(uint64_t a1)
{
}

void *sub_10001F5C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x4B0uLL);
}

uint64_t sub_10001F5D0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 1200)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001F5F0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 1192) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 1200) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms_reduced(uint64_t a1)
{
}

__n128 initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 216)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 216) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_counts(uint64_t a1)
{
}

__n128 sub_10001F844(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001F868(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 70)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001F888(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 70) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_availability_time_bmap(uint64_t a1)
{
}

uint64_t OffloadedServices.init()()
{
  sub_1000171BC();
  uint64_t v0 = Dictionary.init()();
  sub_100017210();
  Dictionary.init()();
  Dictionary.init()();
  return v0;
}

unint64_t BonjourOffload.peersToInvalidate()()
{
  return sub_10001FA40((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10001FA40(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    char v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_10047CFA0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  char v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  long long v5 = (unsigned __int8 *)(a1 + 32);
  swift_retain();
  while (1)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[2];
    uint64_t v9 = v5[3];
    uint64_t v10 = v5[4];
    uint64_t v11 = v5[5];
    uint64_t v21 = v4;
    uint64_t v22 = *((void *)v5 + 1);
    uint64_t v12 = *((void *)v5 + 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100031214(v6 | (v7 << 8) | (v8 << 16) | (v9 << 24) | (v10 << 32) | (v11 << 40));
    if (v14) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v15 = (unsigned char *)(v3[6] + 6 * result);
    *uint64_t v15 = v6;
    v15[1] = v7;
    v15[2] = v8;
    v15[3] = v9;
    v15[4] = v10;
    v15[5] = v11;
    BOOL v16 = (void *)(v3[7] + 16 * result);
    *BOOL v16 = v22;
    v16[1] = v12;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v5 += 24;
    v3[2] = v19;
    uint64_t v4 = v21 - 1;
    if (v21 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001FBB8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_10047CF80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10000DD4C(v5, v6, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001FD04(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC(&qword_10047CF40);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000136F4(v6, (uint64_t)&v13, &qword_10047CF48);
    uint64_t v7 = v13;
    unint64_t result = sub_100031584(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10003803C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001FE34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_1004883F0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000136F4(v6, (uint64_t)&v15, &qword_10047CF60);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10000DD4C(v15, v16, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10003803C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001FF94(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047CF10);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v31 = (unsigned __int8 *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC(&qword_10047CF18);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = (void *)v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v6;
  }
  int v30 = &v31[*(int *)(v2 + 48)];
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v27 = a1;
  uint64_t v9 = a1 + ((v8 + 32) & ~v8);
  uint64_t v28 = *(void *)(v3 + 72);
  uint64_t v29 = v5 + 64;
  swift_retain();
  while (1)
  {
    uint64_t v32 = v7;
    char v10 = v31;
    sub_1000136F4(v9, (uint64_t)v31, &qword_10047CF10);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = v10[2];
    uint64_t v14 = v10[3];
    uint64_t v15 = v10[4];
    uint64_t v16 = v10[5];
    uint64_t v17 = v10[6];
    unint64_t result = sub_100031130(v11 | (v12 << 8) | (v13 << 16) | (v14 << 24) | (v15 << 32) | (v16 << 40) | (v17 << 48));
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v29 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = (unsigned char *)(v6[6] - result + 8 * result);
    *uint64_t v21 = v11;
    v21[1] = v12;
    v21[2] = v13;
    v21[3] = v14;
    v21[4] = v15;
    v21[5] = v16;
    v21[6] = v17;
    uint64_t v22 = v6[7];
    uint64_t v23 = type metadata accessor for NANInternetSharingStatistics.Requester();
    unint64_t result = sub_100038110((uint64_t)v30, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v20, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t v24 = v6[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    v6[2] = v26;
    v9 += v28;
    uint64_t v7 = v32 - 1;
    if (v32 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000201F8(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047CEF8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_10047CF00);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000136F4(v12, (uint64_t)v5, &qword_10047CEF8);
    unint64_t result = sub_1000313F0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_10003803C(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000203F8(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = (void *)v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v15 = (char *)&v38 - v14;
  unint64_t v16 = *(void (**)(unint64_t, unint64_t))(a2 + 64);
  uint64_t v45 = v2;
  v16(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v41 = v7;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  uint64_t v18 = *(void (**)(unint64_t, unint64_t))(a2 + 40);
  v18(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_1000171BC();
  char v19 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  BOOL v20 = v15;
  if ((v19 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, AssociatedTypeWitness);
  }
  unint64_t v21 = a2;
  uint64_t v22 = v18;
  uint64_t v23 = v20;
  v22(a1, v21);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v25 + 16);
  swift_bridgeObjectRelease();
  BOOL v20 = v23;
  if (v26) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, AssociatedTypeWitness);
  }
  v22(a1, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  unint64_t v27 = sub_100017210();
  char v28 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  BOOL v20 = v23;
  if ((v28 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, AssociatedTypeWitness);
  }
  unint64_t v38 = v27;
  uint64_t v39 = v22;
  uint64_t v46 = v45;
  uint64_t v29 = v41;
  (*(void (**)(unint64_t))(*(void *)(v21 + 8) + 8))(a1);
  int v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  uint64_t v40 = v30;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v31, "Stopping all datapaths because client removed all other services", v32, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, void *))(v43 + 8))(v29, v44);
  v39(a1, v21);
  uint64_t v34 = v33;
  swift_getAssociatedTypeWitness();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = v34;
  type metadata accessor for Dictionary.Values();
  swift_getWitnessTable();
  uint64_t v35 = Array.init<A>(_:)();
  uint64_t v44 = &v38;
  uint64_t v46 = v35;
  __chkstk_darwin();
  *(&v38 - 4) = a1;
  *(&v38 - 3) = v21;
  *(&v38 - 2) = (unint64_t)v23;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  unint64_t v36 = v45;
  uint64_t v37 = (*(uint64_t (**)(unint64_t, unint64_t))(v21 + 72))(a1, v21);
  __chkstk_darwin();
  *(&v38 - 4) = a1;
  *(&v38 - 3) = v21;
  *(&v38 - 2) = v36;
  sub_100020B60((void (*)(int *))sub_100038248, (uint64_t)(&v38 - 6), v37);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v23, AssociatedTypeWitness);
}

uint64_t sub_100020AA0(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t sub_100020B60(void (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(a3 + 48) + 6 * i;
    __int16 v19 = *(_WORD *)(v18 + 4);
    BOOL v20 = (uint64_t *)(*(void *)(a3 + 56) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int v23 = *(_DWORD *)v18;
    __int16 v24 = v19;
    uint64_t v25 = v21;
    uint64_t v26 = v22;
    swift_bridgeObjectRetain();
    a1(&v23);
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100020D2C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *((void *)a1 + 1);
  unint64_t v6 = *((void *)a1 + 2);
  unint64_t v8 = *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16);
  swift_bridgeObjectRetain();
  unint64_t v9 = WiFiAddress.ipv6LinkLocalAddress.getter(v8);
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  if (v12)
  {
    unint64_t v13 = (void *)v12;
    uint64_t v14 = DNSRecords.BrowseHost.keyData.getter(27, v7, v6, 1);
    unint64_t v16 = v15;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v14, v16);
    v23[0] = v9;
    v23[1] = v11;
    uint64_t v18 = sub_10011A3BC((uint64_t)v23, (uint64_t)&v24);
    unint64_t v20 = v19;
    Class v21 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v18, v20);
    [v13 handleEventType:3 keyData:isa valueData:v21];
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall BonjourOffload.stopAllServices()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for Logger();
  unint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  __chkstk_darwin();
  uint64_t v54 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v50 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v50 - v13;
  unint64_t v15 = (void (*)(uint64_t, void *))v3[8];
  unint64_t v16 = v2;
  uint64_t v57 = v4;
  v15(v4, v3);
  int64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v60 = AssociatedTypeWitness;
  if (v17(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    uint64_t v52 = v12;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v60);
    uint64_t v18 = (void (*)(uint64_t, void *))v3[5];
    uint64_t v59 = v3 + 5;
    uint64_t v19 = v57;
    v18(v57, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v20 = swift_getAssociatedTypeWitness();
    v50[1] = sub_1000171BC();
    uint64_t v51 = (void *)v20;
    char v21 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    uint64_t v22 = v2;
    if ((v21 & 1) == 0) {
      goto LABEL_8;
    }
    v18(v19, v3);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_8;
    }
    v18(v19, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    sub_100017210();
    char v26 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_8;
    }
    v18(v19, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    char v27 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v60);
    }
    else
    {
LABEL_8:
      uint64_t v53 = v14;
      v61[0] = v16;
      char v28 = v54;
      (*(void (**)(uint64_t))(v3[1] + 8))(v19);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Clearing all services because client was invalidated", v31, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v28, v56);
      v18(v19, v3);
      uint64_t v33 = v32;
      uint64_t v34 = swift_getAssociatedTypeWitness();
      unint64_t v35 = sub_100017210();
      uint64_t v54 = v22;
      unint64_t v55 = v35;
      unint64_t v36 = v3;
      uint64_t v37 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61[0] = v33;
      type metadata accessor for Dictionary.Values();
      swift_getWitnessTable();
      uint64_t v56 = v34;
      v61[0] = Array.init<A>(_:)();
      __chkstk_darwin();
      v50[-4] = v19;
      v50[-3] = v36;
      unint64_t v38 = v53;
      v50[-2] = v53;
      type metadata accessor for Array();
      swift_getWitnessTable();
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v54;
      uint64_t v40 = ((uint64_t (*)(uint64_t, void *))v18)(v37, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50[0] = v50;
      v61[5] = v40;
      __chkstk_darwin();
      v50[-4] = v37;
      v50[-3] = v36;
      v50[-2] = v38;
      v50[-1] = v39;
      type metadata accessor for Dictionary();
      uint64_t v51 = &protocol conformance descriptor for [A : B];
      swift_getWitnessTable();
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      v18(v37, v36);
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61[4] = v42;
      __chkstk_darwin();
      v50[-4] = v37;
      v50[-3] = v36;
      v50[-2] = v38;
      v50[-1] = v39;
      swift_getAssociatedTypeWitness();
      type metadata accessor for Dictionary();
      swift_getWitnessTable();
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = (uint64_t (*)(void *, uint64_t, void *))v36[7];
      uint64_t v44 = (void (*)(void *, void))v43(v61, v37, v36);
      Dictionary.removeAll(keepingCapacity:)(0);
      v44(v61, 0);
      uint64_t v45 = (void (*)(void *, void))v43(v61, v37, v36);
      Dictionary.removeAll(keepingCapacity:)(0);
      v45(v61, 0);
      uint64_t v46 = (void (*)(void *, void))v43(v61, v37, v36);
      type metadata accessor for Dictionary();
      Dictionary.removeAll(keepingCapacity:)(0);
      v46(v61, 0);
      uint64_t v47 = (void (*)(void *, void))v43(v61, v37, v36);
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      *(void *)(v49 + 8) = _swiftEmptyDictionarySingleton;
      v47(v61, 0);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v60);
    }
  }
}

uint64_t sub_100021880(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v4 = swift_checkMetadataState();
  if (v3(a1, v4, AssociatedConformanceWitness))
  {
    type metadata accessor for BonjourResolver(0);
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      *(void *)(v5 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate) = 0;
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120))(a1, v4, AssociatedConformanceWitness);
}

uint64_t sub_1000219A8(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  swift_getAssociatedTypeWitness();
  unint64_t v29 = a5;
  unint64_t v27 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = __chkstk_darwin();
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = (uint64_t)a1 + *(int *)(v11 + 48);
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v26 = v14;
  if (v15(v14, v16, AssociatedConformanceWitness))
  {
    type metadata accessor for BonjourBrowser(0);
    uint64_t v17 = swift_dynamicCastClass();
    if (v17)
    {
      *(void *)(v17 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate) = 0;
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  uint64_t v18 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  char v21 = *((unsigned char *)a1 + 16);
  char v22 = *((unsigned char *)a1 + 17);
  *(void *)uint64_t v13 = v20;
  *((void *)v13 + 1) = v19;
  v13[16] = v21;
  v13[17] = v22;
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v18, v26, AssociatedTypeWitness);
  uint64_t v33 = &type metadata for DNSRecords.Identifier;
  uint64_t v34 = &protocol witness table for DNSRecords.Identifier;
  v30[0] = v20;
  v30[1] = v19;
  char v31 = v21;
  char v32 = v22;
  swift_bridgeObjectRetain();
  BonjourOffload.stopBrowsing(record:)((void (*)(void, void))v30, v27, v29);
  sub_100010754((uint64_t)v30);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, AssociatedTypeWitness);
}

uint64_t BonjourOffload.stopBrowsing(record:)(void (*a1)(void, void), unint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v137 = a1;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v114 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v116 = type metadata accessor for Optional();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin();
  unint64_t v113 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v117 = (char *)&v106 - v12;
  uint64_t v118 = v10;
  unint64_t v120 = *(void (**)(char *, uint64_t))(v10 - 8);
  __chkstk_darwin();
  uint64_t v119 = (char *)&v106 - v13;
  uint64_t v133 = AssociatedConformanceWitness;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v128 = type metadata accessor for Optional();
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin();
  unint64_t v122 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v129 = (char *)&v106 - v16;
  unint64_t v134 = v14;
  uint64_t v130 = *(void *)(v14 - 8);
  __chkstk_darwin();
  __int8 v121 = (char *)&v106 - v17;
  uint64_t v136 = type metadata accessor for Logger();
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin();
  unint64_t v125 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v123 = (char *)&v106 - v19;
  __chkstk_darwin();
  uint64_t v138 = (char *)&v106 - v20;
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v106 - v23;
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v27 = (char *)&v106 - v26;
  (*(void (**)(unint64_t, unint64_t))(a3 + 64))(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v24, AssociatedTypeWitness);
  unint64_t v149 = (void (*)(void, void))v4;
  uint64_t v29 = *(void *)(a3 + 8);
  unsigned int v109 = *(void (**)(unint64_t, uint64_t))(v29 + 8);
  v109(a2, v29);
  uint64_t v131 = v25;
  os_log_type_t v30 = v137;
  sub_100035FD4((uint64_t)v137, (uint64_t)&v149);
  swift_unknownObjectRetain_n();
  char v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  int v112 = v32;
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v139 = v4;
  unint64_t v126 = v27;
  unint64_t v132 = a2;
  unint64_t v124 = a3;
  uint64_t v111 = v29 + 8;
  uint64_t v110 = v29;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v107 = swift_slowAlloc();
    uint64_t v143 = (void (*)(void, void))v107;
    *(_DWORD *)uint64_t v34 = 136315650;
    sub_100035FD4((uint64_t)&v149, (uint64_t)&v156);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v35 = String.init<A>(describing:)();
    os_log_t v106 = v31;
    uint64_t v156 = sub_100010680(v35, v36, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)&v149);
    *(_WORD *)(v34 + 12) = 2048;
    uint64_t v108 = AssociatedTypeWitness;
    uint64_t v37 = *(void (**)(unint64_t, unint64_t))(a3 + 40);
    v37(a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000171BC();
    uint64_t v38 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v156 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v34 + 22) = 2048;
    v37(a2, a3);
    uint64_t AssociatedTypeWitness = v108;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    sub_100017210();
    uint64_t v39 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    uint64_t v40 = v131;
    swift_bridgeObjectRelease();
    uint64_t v156 = v39;
    uint64_t v41 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    os_log_t v42 = v106;
    _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v112, "Stopping browse for %s (browses: %ld, advertises: %ld)", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v43 = *(void (**)(char *, uint64_t))(v135 + 8);
    v43(v138, v136);
  }
  else
  {
    uint64_t v41 = v30;
    swift_unknownObjectRelease_n();
    sub_100010754((uint64_t)&v149);

    swift_unknownObjectRelease_n();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v135 + 8);
    v43(v138, v136);
    uint64_t v40 = v131;
  }
  sub_100035FD4((uint64_t)v41, (uint64_t)&v156);
  sub_100010BCC(&qword_10047CC08);
  if (swift_dynamicCast())
  {
    unint64_t v120 = v43;
    uint64_t v44 = v143;
    unint64_t v45 = v144;
    int v46 = v145;
    char v47 = BYTE1(v145);
    unint64_t v48 = v124;
    uint64_t v49 = *(void (**)(unint64_t, unint64_t))(v124 + 40);
    swift_bridgeObjectRetain();
    v49(v132, v48);
    unint64_t v137 = v44;
    unint64_t v149 = v44;
    unint64_t v150 = v45;
    LODWORD(v125) = v46;
    LOBYTE(v151) = v46;
    BYTE1(v151) = v47;
    sub_1000171BC();
    unint64_t v50 = v129;
    unint64_t v51 = v134;
    Dictionary.subscript.getter();
    uint64_t v138 = (char *)v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v52 = v130;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v130 + 48))(v50, 1, v51) == 1)
    {
      uint64_t v53 = v137;
      int v54 = (int)v125;
      (*(void (**)(char *, uint64_t))(v127 + 8))(v50, v128);
      unint64_t v149 = (void (*)(void, void))v139;
      unint64_t v55 = v123;
      v109(v132, v110);
      unint64_t v56 = (unint64_t)v138;
      swift_bridgeObjectRetain();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        v140[0] = swift_slowAlloc();
        uint64_t v108 = AssociatedTypeWitness;
        *(_DWORD *)uint64_t v59 = 136315138;
        unint64_t v149 = v53;
        unint64_t v150 = v56;
        swift_bridgeObjectRetain_n();
        v60._countAndFlagsBits = 24366;
        v60._object = (void *)0xE200000000000000;
        String.append(_:)(v60);
        if (v54) {
          uint64_t v61 = 7365749;
        }
        else {
          uint64_t v61 = 7365492;
        }
        unint64_t v62 = 0xE300000000000000;
        String.append(_:)(*(Swift::String *)&v61);
        swift_bridgeObjectRelease();
        v63._countAndFlagsBits = 46;
        v63._object = (void *)0xE100000000000000;
        String.append(_:)(v63);
        v64._countAndFlagsBits = 0x6C61636F6CLL;
        v64._object = (void *)0xE500000000000000;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        unint64_t v149 = (void (*)(void, void))sub_100010680((uint64_t)v149, v150, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Cannot find browse for %s when attempting to stop it", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v120(v55, v136);
        (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v108);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v120(v55, v136);
        (*(void (**)(char *, uint64_t))(v131 + 8))(v126, AssociatedTypeWitness);
      }
      return sub_100010754((uint64_t)&v156);
    }
    long long v75 = v121;
    (*(void (**)(char *, char *, unint64_t))(v52 + 32))(v121, v50, v51);
    (*(void (**)(char *, uint64_t))(v133 + 48))(v75, AssociatedTypeWitness);
    v140[0] = (uint64_t)v137;
    v140[1] = (uint64_t)v138;
    char v141 = (char)v125;
    char v142 = v47;
    unint64_t v76 = v124;
    unint64_t v77 = v132;
    unint64_t v137 = (void (*)(void, void))(*(uint64_t (**)(void (**)(void, void), unint64_t, unint64_t))(v124 + 56))(&v149, v132, v124);
    type metadata accessor for Dictionary();
    uint64_t v78 = v122;
    Dictionary.removeValue(forKey:)();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v78, v128);
    v137(&v149, 0);
    (*(void (**)(char *, unint64_t))(v52 + 8))(v75, v51);
    swift_bridgeObjectRelease();
    uint64_t v40 = v131;
    unint64_t v74 = v77;
    unint64_t v66 = v126;
  }
  else
  {
    int v65 = swift_dynamicCast();
    unint64_t v66 = v126;
    if (v65)
    {
      int v67 = v41;
      uint64_t v68 = AssociatedTypeWitness;
      uint64_t v70 = v150;
      unint64_t v69 = v151;
      uint64_t v71 = v153;
      char v72 = v155;
      switch((char)v149)
      {
        case 15:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t AssociatedTypeWitness = v68;
          unint64_t v74 = v132;
          goto LABEL_28;
        case 32:
          LODWORD(v136) = v154;
          unint64_t v86 = v124;
          char v87 = *(uint64_t (**)(unint64_t, unint64_t))(v124 + 40);
          uint64_t v88 = v152;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v138 = (char *)v87(v132, v86);
          unint64_t v137 = v89;
          uint64_t v143 = (void (*)(void, void))v70;
          unint64_t v144 = v69;
          uint64_t v135 = v88;
          uint64_t v145 = v88;
          uint64_t v146 = v71;
          char v90 = v136;
          char v147 = v136;
          char v148 = v72;
          unint64_t v91 = sub_100017210();
          unsigned int v92 = v117;
          uint64_t v93 = v118;
          unint64_t v134 = v91;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = v120;
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v120 + 6))(v92, 1, v93) == 1)
          {
            (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v68);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v115 + 8))(v92, v116);
            return sub_100010754((uint64_t)&v156);
          }
          unint64_t v95 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v94 + 4);
          uint64_t v96 = v119;
          v95(v119, (uint64_t)v92, v93);
          uint64_t v97 = (*(uint64_t (**)(char *, uint64_t))(v133 + 112))(v96, v68);
          uint64_t v98 = v131;
          if (!v97) {
            goto LABEL_39;
          }
          type metadata accessor for BonjourResolver(0);
          uint64_t v99 = swift_dynamicCastClass();
          if (v99)
          {
            uint64_t v100 = v99 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
            swift_beginAccess();
            uint64_t v101 = v100;
            uint64_t v102 = v114;
            sub_1000136F4(v101, v114, &qword_10047CC00);
            uint64_t v103 = type metadata accessor for DNSRecords.SRV();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 48))(v102, 1, v103) == 1)
            {
              sub_1000380B4(v102, &qword_10047CC00);
              (*(void (**)(char *, uint64_t))(v133 + 120))(v119, v68);
              uint64_t v143 = (void (*)(void, void))v70;
              unint64_t v144 = v69;
              uint64_t AssociatedTypeWitness = v68;
              uint64_t v145 = v135;
              uint64_t v146 = v71;
              char v147 = v90;
              char v148 = v72;
              unint64_t v76 = v124;
              unint64_t v74 = v132;
              uint64_t v104 = v93;
              uint64_t v138 = (char *)(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(v124 + 56))(v140, v132, v124);
              type metadata accessor for Dictionary();
              uint64_t v105 = v113;
              Dictionary.removeValue(forKey:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v115 + 8))(v105, v116);
              ((void (*)(uint64_t *, void))v138)(v140, 0);
              uint64_t v40 = v131;
              unint64_t v66 = v126;
              swift_unknownObjectRelease();
              (*((void (**)(char *, uint64_t))v120 + 1))(v119, v104);
              goto LABEL_29;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            sub_1000380B4(v102, &qword_10047CC00);
          }
          else
          {
            swift_unknownObjectRelease();
LABEL_39:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          (*((void (**)(char *, uint64_t))v120 + 1))(v119, v93);
          (*(void (**)(char *, uint64_t))(v98 + 8))(v126, v68);
          break;
        default:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t AssociatedTypeWitness = v68;
          uint64_t v41 = v67;
          goto LABEL_16;
      }
      return sub_100010754((uint64_t)&v156);
    }
LABEL_16:
    int v73 = swift_dynamicCast();
    unint64_t v74 = v132;
    if (v73)
    {
      switch((char)v149)
      {
        case 0:
        case 27:
        case 53:
          goto LABEL_20;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
          swift_bridgeObjectRelease();
          break;
        default:
          JUMPOUT(0);
      }
    }
    if (swift_dynamicCast())
    {
LABEL_20:
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v149 = (void (*)(void, void))v139;
      unint64_t v79 = v125;
      v109(v74, v110);
      sub_100035FD4((uint64_t)v41, (uint64_t)&v149);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        unint64_t v82 = (uint8_t *)swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        unint64_t v120 = v43;
        v140[0] = v83;
        *(_DWORD *)unint64_t v82 = 136315138;
        sub_100035FD4((uint64_t)&v149, (uint64_t)&v143);
        uint64_t v84 = String.init<A>(describing:)();
        uint64_t v143 = (void (*)(void, void))sub_100010680(v84, v85, v140);
        unint64_t v74 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100010754((uint64_t)&v149);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed to stop browsing for record %s", v82, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v120(v125, v136);
      }
      else
      {
        sub_100010754((uint64_t)&v149);

        v43(v79, v136);
      }
      unint64_t v66 = v126;
    }
LABEL_28:
    unint64_t v76 = v124;
  }
LABEL_29:
  sub_100010754((uint64_t)&v156);
  sub_1000203F8(v74, v76);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v66, AssociatedTypeWitness);
}

uint64_t sub_100023534(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v43 = a3;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DNSRecords.SRV();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v41 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  unint64_t v44 = a5;
  unint64_t v42 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v14 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v16 = swift_checkMetadataState();
  uint64_t result = v15(v14, v16, AssociatedConformanceWitness);
  if (result)
  {
    type metadata accessor for BonjourAdvertiser(0);
    uint64_t v18 = swift_dynamicCastClass();
    if (!v18) {
      return swift_unknownObjectRelease();
    }
    uint64_t v19 = v18;
    uint64_t v20 = v18 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo;
    swift_beginAccess();
    sub_1000136F4(v20, (uint64_t)v9, &qword_10047CC00);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1000380B4((uint64_t)v9, &qword_10047CC00);
    }
    else
    {
      uint64_t v21 = v41;
      sub_100038110((uint64_t)v9, v41, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      int v46 = (ValueMetadata *)v10;
      char v47 = &protocol witness table for DNSRecords.SRV;
      uint64_t v22 = sub_1000382F0(v45);
      sub_100036960(v21, (uint64_t)v22);
      BonjourOffload.stopAdvertising(record:)((uint64_t (*)(void, void, void))v45, v42, v44);
      sub_1000361F0(v21);
      sub_100010754((uint64_t)v45);
    }
    uint64_t v23 = (uint64_t *)(v19 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
    uint64_t v24 = *(void *)(v19 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8);
    if (v24)
    {
      uint64_t v26 = v23[5];
      unint64_t v25 = v23[6];
      uint64_t v28 = v23[3];
      unint64_t v27 = v23[4];
      uint64_t v29 = v23[2];
      uint64_t v30 = *v23;
      unint64_t v40 = v27 >> 8;
      uint64_t v41 = v30;
      int v46 = &type metadata for DNSRecords.TXT;
      char v47 = &protocol witness table for DNSRecords.TXT;
      uint64_t v31 = swift_allocObject();
      v45[0] = v31;
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = v24;
      *(void *)(v31 + 32) = v29;
      *(void *)(v31 + 40) = v28;
      *(unsigned char *)(v31 + 48) = v27 & 1;
      *(unsigned char *)(v31 + 49) = v40;
      *(void *)(v31 + 56) = v26;
      *(void *)(v31 + 64) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013D44(v26, v25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013D44(v26, v25);
      BonjourOffload.stopAdvertising(record:)((uint64_t (*)(void, void, void))v45, v42, v44);
      sub_100036090(v41, v24, v29, v28, v27, v26, v25);
      sub_100010754((uint64_t)v45);
    }
    uint64_t v32 = v19 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
    uint64_t v33 = *(void *)(v19 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8);
    if (v33)
    {
      __int16 v34 = *(_WORD *)(v32 + 32);
      uint64_t v36 = *(void *)(v32 + 16);
      uint64_t v35 = *(void *)(v32 + 24);
      uint64_t v37 = *(void *)v32;
      int v46 = &type metadata for DNSRecords.PTR;
      char v47 = &protocol witness table for DNSRecords.PTR;
      uint64_t v38 = swift_allocObject();
      v45[0] = v38;
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = v33;
      *(void *)(v38 + 32) = v36;
      *(void *)(v38 + 40) = v35;
      *(unsigned char *)(v38 + 48) = v34 & 1;
      *(unsigned char *)(v38 + 49) = HIBYTE(v34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BonjourOffload.stopAdvertising(record:)((uint64_t (*)(void, void, void))v45, v42, v44);
      swift_unknownObjectRelease();
      return sub_100010754((uint64_t)v45);
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t BonjourOffload.stopAdvertising(record:)(uint64_t (*a1)(void, void, void), unint64_t a2, unint64_t a3)
{
  unint64_t v211 = a1;
  uint64_t v210 = type metadata accessor for DNSRecords.SRV();
  uint64_t v198 = *(void *)(v210 - 8);
  __chkstk_darwin();
  uint64_t v208 = (long long *)((char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v204 = (uint64_t)&v182 - v6;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v191 = (uint64_t)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v192 = (char *)&v182 - v8;
  __chkstk_darwin();
  uint64_t v195 = (uint64_t)&v182 - v9;
  unint64_t v217 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v200 = *(void *)(v12 - 8);
  uint64_t v201 = v12;
  __chkstk_darwin();
  unint64_t v194 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v196 = (char *)&v182 - v14;
  __chkstk_darwin();
  unint64_t v202 = (unint64_t)&v182 - v15;
  uint64_t v212 = v11;
  uint64_t v209 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v193 = (char *)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v197 = (char *)&v182 - v17;
  __chkstk_darwin();
  __int32 v199 = (char *)&v182 - v18;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v205 = *(uint64_t (**)(long long *, unint64_t, unint64_t))(v19 - 8);
  uint64_t v206 = v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v182 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v213 = (uint64_t *)((char *)&v182 - v22);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v182 - v25;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v182 - v28;
  uint64_t v30 = *(void (**)(unint64_t))(v217 + 64);
  unint64_t v215 = a2;
  unint64_t v31 = a2;
  unint64_t v32 = v217;
  v30(v31);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v214 = AssociatedTypeWitness;
  if (v33(v26, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }
  unint64_t v188 = v21;
  uint64_t v190 = v27;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v26, v214);
  unint64_t v36 = v215;
  uint64_t v35 = v216;
  *(void *)&long long v227 = v216;
  uint64_t v37 = *(void *)(v32 + 8);
  uint64_t v38 = *(void (**)(unint64_t, uint64_t))(v37 + 8);
  v38(v215, v37);
  uint64_t v39 = v211;
  sub_100035FD4((uint64_t)v211, (uint64_t)&v227);
  swift_unknownObjectRetain_n();
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  int v189 = v41;
  BOOL v42 = os_log_type_enabled(v40, v41);
  unint64_t v203 = v29;
  uint64_t v186 = v37 + 8;
  uint64_t v187 = v37;
  uint64_t v185 = v38;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v184 = swift_slowAlloc();
    v226[0] = v184;
    *(_DWORD *)uint64_t v43 = 136315650;
    os_log_t v183 = v40;
    sub_100035FD4((uint64_t)&v227, (uint64_t)&v222);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v44 = String.init<A>(describing:)();
    *(void *)&long long v222 = sub_100010680(v44, v45, v226);
    unint64_t v46 = v217;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)&v227);
    *(_WORD *)(v43 + 12) = 2048;
    uint64_t v182 = v43 + 14;
    char v47 = *(void (**)(unint64_t, unint64_t))(v46 + 40);
    v47(v36, v46);
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    sub_1000171BC();
    uint64_t v49 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v222 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v43 + 22) = 2048;
    v48(v215, v46);
    swift_bridgeObjectRelease();
    unint64_t v50 = v203;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100017210();
    uint64_t v51 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v222 = v51;
    uint64_t v52 = v211;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    os_log_t v53 = v183;
    _os_log_impl((void *)&_mh_execute_header, v183, (os_log_type_t)v189, "Stopping advertise for %s (browses: %ld, advertises: %ld)", (uint8_t *)v43, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v52 = v39;
    unint64_t v50 = v29;
    swift_unknownObjectRelease_n();
    sub_100010754((uint64_t)&v227);

    swift_unknownObjectRelease_n();
  }
  int v54 = (void (*)(uint64_t *, uint64_t))*((void *)v205 + 1);
  v54(v213, v206);
  uint64_t v55 = (uint64_t)v208;
  uint64_t v56 = v204;
  sub_100035FD4((uint64_t)v52, (uint64_t)v226);
  sub_100010BCC(&qword_10047CC08);
  if (swift_dynamicCast())
  {
    long long v227 = v222;
    long long v228 = v223;
    LOWORD(v229) = v224;
    long long v219 = v222;
    long long v220 = v223;
    __int16 v221 = v224;
    unint64_t v57 = v217;
    os_log_type_t v58 = *(uint64_t **)(v217 + 56);
    unint64_t v59 = v215;
    Swift::String v60 = (void (*)(_OWORD *, void))((uint64_t (*)(_OWORD *, unint64_t, unint64_t))v58)(v218, v215, v217);
    sub_100017210();
    uint64_t v61 = v212;
    type metadata accessor for Dictionary();
    unint64_t v62 = v202;
    Dictionary.removeValue(forKey:)();
    v60(v218, 0);
    uint64_t v63 = v209;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v209 + 48))(v62, 1, v61) == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v200 + 8))(v62, v201);
      Swift::String v64 = (void (*)(long long *, void))((uint64_t (*)(long long *, unint64_t, unint64_t))v58)(&v219, v59, v57);

      v64(&v219, 0);
      v218[0] = v227;
      sub_1000361C4((uint64_t)v218);
      long long v219 = v228;
      LOWORD(v220) = v229;
      sub_1000361C4((uint64_t)&v219);
LABEL_44:
      uint64_t v139 = v214;
      uint64_t v140 = v203;
      goto LABEL_65;
    }
    uint64_t v213 = v58;
    uint64_t v88 = v199;
    (*(void (**)(char *, unint64_t, uint64_t))(v63 + 32))(v199, v62, v61);
    uint64_t v89 = AssociatedConformanceWitness;
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v88, v214, AssociatedConformanceWitness))
    {
      type metadata accessor for BonjourAdvertiser(0);
      uint64_t v90 = swift_dynamicCastClass();
      if (v90)
      {
        unint64_t v91 = (char *)v90;
        uint64_t v92 = v90 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
        uint64_t v93 = *(void *)(v90 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service);
        uint64_t v94 = *(void *)(v90
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                        + 8);
        *(_OWORD *)uint64_t v92 = 0u;
        *(_OWORD *)(v92 + 16) = 0u;
        *(_WORD *)(v92 + 32) = 0;
        swift_unknownObjectRetain();
        sub_100036154(v93, v94);
        uint64_t v95 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v96 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8];
        uint64_t v98 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 16];
        uint64_t v97 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 24];
        uint64_t v100 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                             + 32];
        uint64_t v99 = *(void *)&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 40];
        uint64_t v101 = v99;
        unint64_t v211 = *(uint64_t (**)(void, void, void))&v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                                                                    + 48];
        sub_1000362B4(v95, v96, v98, v97, v100, v99, (unint64_t)v211);
        swift_unknownObjectRelease();
        if (v96)
        {
          sub_100036090(v95, v96, v98, v97, v100, v101, (unint64_t)v211);
          unint64_t v57 = v217;
          unint64_t v102 = v215;
          uint64_t v103 = (uint64_t (*)(long long *, unint64_t, unint64_t))v213;
LABEL_47:
          unint64_t v162 = v91;
          uint64_t v163 = (void (*)(long long *, void))v103(&v219, v102, v57);
          sub_100027A38((uint64_t)v91, (uint64_t)&v227);
          v163(&v219, 0);
          uint64_t v89 = AssociatedConformanceWitness;
          uint64_t v88 = v199;
          goto LABEL_48;
        }
        unint64_t v159 = &v91[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess();
        uint64_t v160 = (uint64_t)v159;
        uint64_t v158 = v195;
        sub_1000136F4(v160, v195, &qword_10047CC00);
        int v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v158, 1, v210);
        unint64_t v57 = v217;
        uint64_t v89 = AssociatedConformanceWitness;
        uint64_t v88 = v199;
        if (v161 != 1)
        {
          sub_1000380B4(v158, &qword_10047CC00);
          uint64_t v103 = (uint64_t (*)(long long *, unint64_t, unint64_t))v213;
          unint64_t v102 = v215;
          goto LABEL_47;
        }
LABEL_40:
        sub_1000380B4(v158, &qword_10047CC00);
        long long v231 = v227;
        sub_1000361C4((uint64_t)&v231);
        long long v219 = v228;
        LOWORD(v220) = v229;
        sub_1000361C4((uint64_t)&v219);
LABEL_48:
        uint64_t v140 = v203;
        uint64_t v139 = v214;
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 80))(v88, v214, v89);

        (*(void (**)(char *, uint64_t))(v209 + 8))(v88, v212);
        unint64_t v59 = v215;
        goto LABEL_65;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v158 = v195;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 56))(v195, 1, 1, v210);
    unint64_t v91 = 0;
    goto LABEL_40;
  }
  if (swift_dynamicCast())
  {
    sub_100038110(v56, v55, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    uint64_t v65 = *(void *)(v55 + 8);
    uint64_t v66 = *(void *)(v55 + 16);
    uint64_t v67 = *(void *)(v55 + 24);
    char v68 = *(unsigned char *)(v55 + 32);
    char v69 = *(unsigned char *)(v55 + 33);
    *(void *)&long long v227 = *(void *)v55;
    *((void *)&v227 + 1) = v65;
    *(void *)&long long v228 = v66;
    *((void *)&v228 + 1) = v67;
    LOBYTE(v229) = v68;
    BYTE1(v229) = v69;
    unint64_t v70 = v217;
    uint64_t v71 = v217 + 56;
    char v72 = *(uint64_t (**)(void, void, void))(v217 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v73 = v55;
    unint64_t v74 = v215;
    uint64_t v213 = (uint64_t *)v71;
    unint64_t v211 = v72;
    long long v75 = (void (*)(long long *, void))v72(&v222, v215, v70);
    sub_100017210();
    uint64_t v76 = v212;
    type metadata accessor for Dictionary();
    unint64_t v77 = v196;
    Dictionary.removeValue(forKey:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75(&v222, 0);
    uint64_t v78 = v209;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v77, 1, v76) == 1)
    {
      (*(void (**)(char *, uint64_t))(v200 + 8))(v77, v201);
      long long v79 = *(_OWORD *)(v73 + 16);
      long long v227 = *(_OWORD *)v73;
      long long v228 = v79;
      LOWORD(v229) = *(_WORD *)(v73 + 32);
      v218[0] = v227;
      long long v219 = v79;
      LOWORD(v220) = v229;
      uint64_t v80 = *(void (**)(unint64_t, unint64_t))(v70 + 40);
      sub_100036198((uint64_t)v218);
      sub_100036198((uint64_t)&v219);
      v80(v74, v70);
      uint64_t v82 = v81;
      unint64_t v57 = v70;
      if (*(void *)(v81 + 16) && (unint64_t v83 = sub_1000312E0((uint64_t)&v227), (v84 & 1) != 0))
      {
        id v85 = *(id *)(*(void *)(v82 + 56) + 8 * v83);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)v218);
        sub_1000361C4((uint64_t)&v219);
        uint64_t v86 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v198 + 56))(v192, 1, 1, v210);
        uint64_t v87 = (uint64_t)v85 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo;
        swift_beginAccess();
        sub_10003624C(v86, v87);
        swift_endAccess();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)v218);
        sub_1000361C4((uint64_t)&v219);
      }
      sub_1000361F0((uint64_t)v208);
      uint64_t v139 = v214;
      unint64_t v59 = v215;
      uint64_t v140 = v203;
      goto LABEL_65;
    }
    unint64_t v126 = v74;
    uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
    uint64_t v128 = v197;
    v127(v197, v77, v76);
    uint64_t v129 = AssociatedConformanceWitness;
    unint64_t v130 = v70;
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v128, v214, AssociatedConformanceWitness))
    {
      type metadata accessor for BonjourAdvertiser(0);
      uint64_t v131 = (char *)swift_dynamicCastClass();
      if (v131)
      {
        uint64_t v132 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v198 + 56))(v192, 1, 1, v210);
        uint64_t v133 = (uint64_t)&v131[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess();
        swift_unknownObjectRetain();
        sub_10003624C(v132, v133);
        swift_endAccess();
        swift_unknownObjectRelease();
        if (*(void *)&v131[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                            + 8]
          || *(void *)&v131[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8])
        {
          long long v134 = v208[1];
          long long v227 = *v208;
          long long v228 = v134;
          LOWORD(v229) = *((_WORD *)v208 + 16);
          v218[0] = v227;
          long long v219 = v134;
          LOWORD(v220) = v229;
          swift_unknownObjectRetain();
          sub_100036198((uint64_t)v218);
          sub_100036198((uint64_t)&v219);
          unint64_t v107 = v126;
          uint64_t v135 = (void (*)(long long *, void))v211(&v222, v126, v70);
          uint64_t v137 = v136;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v231 = *(void *)(v137 + 8);
          *(void *)(v137 + 8) = 0x8000000000000000;
          sub_10003431C((uint64_t)v131, (uint64_t)&v227, isUniquelyReferenced_nonNull_native);
          *(void *)(v137 + 8) = v231;
          swift_bridgeObjectRelease();
          sub_1000361C4((uint64_t)v218);
          sub_1000361C4((uint64_t)&v219);
          v135(&v222, 0);
          unint64_t v57 = v70;
          uint64_t v139 = v214;
          uint64_t v129 = AssociatedConformanceWitness;
          uint64_t v140 = v203;
LABEL_54:
          unint64_t v172 = v197;
          (*(void (**)(char *, uint64_t, uint64_t))(v129 + 80))(v197, v139, v129);

          (*(void (**)(char *, uint64_t))(v209 + 8))(v172, v212);
          sub_1000361F0((uint64_t)v208);
LABEL_64:
          unint64_t v59 = v107;
          goto LABEL_65;
        }
        unint64_t v107 = v126;
        uint64_t v139 = v214;
        uint64_t v129 = AssociatedConformanceWitness;
LABEL_53:
        uint64_t v140 = v203;
        unint64_t v57 = v130;
        goto LABEL_54;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v131 = 0;
    }
    unint64_t v107 = v126;
    uint64_t v139 = v214;
    goto LABEL_53;
  }
  if (swift_dynamicCast())
  {
    uint64_t v104 = *((void *)&v228 + 1);
    uint64_t v213 = (uint64_t *)*((void *)&v229 + 1);
    unint64_t v211 = (uint64_t (*)(void, void, void))v230;
    long long v222 = v227;
    long long v223 = v228;
    LOWORD(v224) = v229;
    long long v219 = v227;
    long long v220 = v228;
    __int16 v221 = v229;
    unint64_t v57 = v217;
    uint64_t v105 = v217 + 56;
    os_log_t v106 = *(uint64_t (**)(long long *, unint64_t, unint64_t))(v217 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v107 = v215;
    uint64_t v205 = v106;
    uint64_t v206 = v105;
    uint64_t v108 = (void (*)(_OWORD *, void))v106(v218, v215, v57);
    sub_100017210();
    uint64_t v109 = v212;
    type metadata accessor for Dictionary();
    uint64_t v110 = v194;
    Dictionary.removeValue(forKey:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108(v218, 0);
    uint64_t v111 = v209;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v110, 1, v109) == 1)
    {
      (*(void (**)(char *, uint64_t))(v200 + 8))(v110, v201);
      int v112 = *(void (**)(unint64_t, unint64_t))(v57 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v112(v107, v57);
      uint64_t v114 = v113;
      if (*(void *)(v113 + 16) && (unint64_t v115 = sub_1000312E0((uint64_t)&v222), (v116 & 1) != 0))
      {
        unint64_t v117 = (char *)*(id *)(*(void *)(v114 + 56) + 8 * v115);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v118 = &v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v119 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        uint64_t v120 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8];
        uint64_t v121 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 16];
        uint64_t v122 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 24];
        uint64_t v123 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 32];
        uint64_t v124 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 40];
        unint64_t v125 = *(void *)&v117[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 48];
        *(_OWORD *)uint64_t v118 = 0u;
        *((_OWORD *)v118 + 1) = 0u;
        *((_OWORD *)v118 + 2) = 0u;
        *((void *)v118 + 6) = 0;
        sub_100036090(v119, v120, v121, v122, v123, v124, v125);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C970((uint64_t)v213, (unint64_t)v211);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        sub_10000C970((uint64_t)v213, (unint64_t)v211);
      }
      unint64_t v59 = v215;
      goto LABEL_44;
    }
    uint64_t v208 = (long long *)v104;
    char v141 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
    char v142 = v193;
    v141(v193, v110, v109);
    uint64_t v139 = v214;
    uint64_t v143 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v142, v214);
    uint64_t v144 = v198;
    if (v143)
    {
      type metadata accessor for BonjourAdvertiser(0);
      uint64_t v145 = swift_dynamicCastClass();
      if (v145)
      {
        uint64_t v146 = (char *)v145;
        uint64_t v147 = v145 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo;
        uint64_t v148 = *(void *)(v145 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
        uint64_t v149 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 8);
        uint64_t v150 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 16);
        uint64_t v151 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 24);
        uint64_t v152 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 32);
        uint64_t v204 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 40);
        unint64_t v202 = *(void *)(v145
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 48);
        *(_OWORD *)uint64_t v147 = 0u;
        *(_OWORD *)(v147 + 16) = 0u;
        *(_OWORD *)(v147 + 32) = 0u;
        *(void *)(v147 + 48) = 0;
        swift_unknownObjectRetain();
        sub_100036090(v148, v149, v150, v151, v152, v204, v202);
        uint64_t v153 = *(void *)&v146[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
        uint64_t v154 = *(void *)&v146[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 8];
        sub_100036110(v153, v154);
        swift_unknownObjectRelease();
        if (v154)
        {
          sub_100036154(v153, v154);
          char v155 = v193;
LABEL_62:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unsigned __int32 v177 = v146;
          unint64_t v178 = v215;
          unint64_t v179 = (void (*)(long long *, void))v205(&v219, v215, v217);
          sub_100027A38((uint64_t)v146, (uint64_t)&v222);
          v179(&v219, 0);
          unint64_t v107 = v178;
          uint64_t v139 = v214;
          uint64_t v109 = v212;
          goto LABEL_63;
        }
        uint64_t v174 = &v146[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess();
        uint64_t v175 = (uint64_t)v174;
        uint64_t v173 = v191;
        sub_1000136F4(v175, v191, &qword_10047CC00);
        int v176 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v173, 1, v210);
        uint64_t v139 = v214;
        unint64_t v107 = v215;
        uint64_t v109 = v212;
        char v155 = v193;
        if (v176 != 1)
        {
          sub_1000380B4(v173, &qword_10047CC00);
          goto LABEL_62;
        }
LABEL_59:
        sub_1000380B4(v173, &qword_10047CC00);
LABEL_63:
        __int8 v180 = v211;
        uint64_t v181 = v203;
        (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 80))(v155, v139);
        swift_bridgeObjectRelease();
        uint64_t v140 = v181;
        swift_bridgeObjectRelease();
        sub_10000C970((uint64_t)v213, (unint64_t)v180);

        (*(void (**)(char *, uint64_t))(v209 + 8))(v155, v109);
        unint64_t v57 = v217;
        goto LABEL_64;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v173 = v191;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v144 + 56))(v191, 1, 1, v210);
    uint64_t v146 = 0;
    char v155 = v193;
    goto LABEL_59;
  }
  uint64_t v140 = v50;
  if (!swift_dynamicCast())
  {
    int v156 = swift_dynamicCast();
    unint64_t v157 = v215;
    if (v156)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v139 = v214;
    }
    else
    {
      unint64_t v164 = v50;
      *(void *)&long long v227 = v35;
      unint64_t v165 = v188;
      v185(v215, v187);
      sub_100035FD4((uint64_t)v52, (uint64_t)&v227);
      uint64_t v166 = Logger.logObject.getter();
      os_log_type_t v167 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v166, v167))
      {
        unint64_t v168 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v219 = swift_slowAlloc();
        uint64_t v140 = v50;
        *(_DWORD *)unint64_t v168 = 136315138;
        sub_100035FD4((uint64_t)&v227, (uint64_t)&v222);
        uint64_t v169 = String.init<A>(describing:)();
        *(void *)&long long v222 = sub_100010680(v169, v170, (uint64_t *)&v219);
        unint64_t v171 = v217;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100010754((uint64_t)&v227);
        _os_log_impl((void *)&_mh_execute_header, v166, v167, "Failed to stop advertising for record %s", v168, 0xCu);
        swift_arrayDestroy();
        unint64_t v59 = v215;
        swift_slowDealloc();
        swift_slowDealloc();

        v54((uint64_t *)v188, v206);
        unint64_t v57 = v171;
        uint64_t v139 = v214;
        goto LABEL_65;
      }
      sub_100010754((uint64_t)&v227);

      v54((uint64_t *)v165, v206);
      uint64_t v139 = v214;
      uint64_t v140 = v164;
    }
    unint64_t v59 = v157;
    unint64_t v57 = v217;
    goto LABEL_65;
  }
  long long v227 = v222;
  long long v228 = v223;
  long long v229 = v224;
  long long v230 = v225;
  uint64_t v139 = v214;
  (*(void (**)(long long *, uint64_t))(AssociatedConformanceWitness + 96))(&v227, v214);
  sub_100036058((uint64_t)&v227);
  unint64_t v57 = v217;
  unint64_t v59 = v215;
LABEL_65:
  sub_100010754((uint64_t)v226);
  sub_1000203F8(v59, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v190 + 8))(v140, v139);
}

uint64_t BonjourOffload.record(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  v16[4] = *(void *)(v4 - 8);
  v16[5] = v4;
  __chkstk_darwin();
  v16[7] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 serviceKey];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  id v10 = [a1 serviceValue];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  v16[6] = a2;
  static DNSRecords.createRecord(with:value:)(v7, v9, v12, v14, a2);
  sub_10000C95C(v12, v14);

  return sub_10000C970(v7, v9);
}

uint64_t BonjourOffload.startBrowsing(record:)(void (*a1)(uint64_t *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v204 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v187 = *(void *)(v8 - 8);
  uint64_t v188 = v8;
  __chkstk_darwin();
  uint64_t v186 = (char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v183 = (char *)&v170 - v10;
  uint64_t v191 = v7;
  uint64_t v182 = *(void *)(v7 - 8);
  __chkstk_darwin();
  __int8 v180 = (char *)&v170 - v11;
  unint64_t v199 = AssociatedConformanceWitness;
  uint64_t v200 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v192 = *(void *)(v12 - 8);
  uint64_t v193 = v12;
  __chkstk_darwin();
  uint64_t v190 = (char *)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v189 = (uint64_t)&v170 - v14;
  __chkstk_darwin();
  uint64_t v198 = (char *)&v170 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v201 = v16;
  uint64_t v202 = v17;
  __chkstk_darwin();
  uint64_t v195 = (char *)&v170 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v184 = (char *)&v170 - v19;
  __chkstk_darwin();
  uint64_t v185 = (char *)&v170 - v20;
  __chkstk_darwin();
  uint64_t v181 = (char *)&v170 - v21;
  __chkstk_darwin();
  uint64_t v196 = (char *)&v170 - v22;
  __chkstk_darwin();
  unint64_t v203 = (uint64_t *)((char *)&v170 - v23);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v170 - v26;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v170 - v29;
  uint64_t v31 = a3;
  unint64_t v32 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v33 = v205;
  uint64_t v207 = a2;
  uint64_t v34 = a2;
  uint64_t v35 = v31;
  v32(v34, v31);
  unint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v206 = AssociatedTypeWitness;
  if (v36(v27, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v27, v206);
  *(void *)__int16 v221 = v33;
  uint64_t v38 = *(void *)(v35 + 8);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  uint64_t v176 = v38;
  unsigned __int32 v177 = v39;
  uint64_t v178 = v38 + 8;
  ((void (*)(uint64_t))v39)(v207);
  sub_100035FD4((uint64_t)v204, (uint64_t)v221);
  swift_unknownObjectRetain_n();
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v44 = v33;
  uint64_t v194 = v35;
  uint64_t v179 = v28;
  unint64_t v197 = v30;
  if (v43)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v174 = swift_slowAlloc();
    v220[0] = v174;
    *(_DWORD *)uint64_t v45 = 136315650;
    os_log_t v173 = v40;
    int v172 = v42;
    sub_100035FD4((uint64_t)v221, (uint64_t)&v218);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v46 = String.init<A>(describing:)();
    *(void *)&long long v218 = sub_100010680(v46, v47, v220);
    uint64_t v175 = (char *)&v218 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)v221);
    *(_WORD *)(v45 + 12) = 2048;
    uint64_t v171 = v45 + 14;
    unint64_t v48 = *(void (**)(uint64_t, uint64_t))(v35 + 40);
    uint64_t v49 = v207;
    v48(v207, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000171BC();
    uint64_t v50 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v218 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v45 + 22) = 2048;
    uint64_t v171 = v45 + 24;
    v48(v49, v35);
    uint64_t v51 = v201;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    sub_100017210();
    uint64_t v52 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v218 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    os_log_t v53 = v173;
    _os_log_impl((void *)&_mh_execute_header, v173, (os_log_type_t)v172, "Starting browse for %s (browses: %ld, advertises: %ld)", (uint8_t *)v45, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v54 = *(void (**)(uint64_t *, uint64_t))(v202 + 8);
    v54(v203, v51);
  }
  else
  {
    swift_unknownObjectRelease_n();
    sub_100010754((uint64_t)v221);

    swift_unknownObjectRelease_n();
    int v54 = *(void (**)(uint64_t *, uint64_t))(v202 + 8);
    uint64_t v51 = v201;
    v54(v203, v201);
  }
  uint64_t v55 = (uint64_t)v204;
  sub_100035FD4((uint64_t)v204, (uint64_t)v220);
  sub_100010BCC(&qword_10047CC08);
  if (!swift_dynamicCast())
  {
    int v70 = swift_dynamicCast();
    uint64_t v71 = v179;
    if (v70)
    {
      *(_OWORD *)__int16 v221 = v218;
      *(_OWORD *)&v221[16] = *(_OWORD *)v219;
      *(_OWORD *)&v221[26] = *(_OWORD *)&v219[10];
      switch((char)v218)
      {
        case 15:
          unint64_t v87 = *(void *)&v221[16];
          long long v211 = *(_OWORD *)&v221[24];
          LOWORD(v212) = *(_WORD *)&v221[40];
          unint64_t v203 = *(uint64_t **)&v221[8];
          uint64_t v204 = v54;
          long long v215 = *(_OWORD *)&v221[8];
          long long v216 = *(_OWORD *)&v221[24];
          __int16 v217 = *(_WORD *)&v221[40];
          sub_100036624((uint64_t)v221);
          swift_bridgeObjectRelease();
          uint64_t v88 = v194;
          uint64_t v89 = v207;
          (*(void (**)(uint64_t, uint64_t))(v194 + 40))(v207, v194);
          long long v209 = v211;
          __int16 v210 = v212;
          sub_1000171BC();
          uint64_t v90 = v189;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000361C4((uint64_t)&v211);
          __chkstk_darwin();
          *(&v170 - 4) = v89;
          *(&v170 - 3) = v88;
          unint64_t v91 = v197;
          unint64_t v169 = (unint64_t)v197;
          uint64_t v92 = type metadata accessor for BonjourBrowser(0);
          uint64_t v93 = v193;
          sub_100027E7C((void (*)(char *, char *))sub_100038384, (uint64_t)(&v170 - 6), (uint64_t)&type metadata for Never, v92, v94, (uint64_t)&v222);
          (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v90, v93);
          uint64_t v95 = (void *)v222;
          if ((void)v222)
          {
            sub_10002CBD0((uint64_t)&v215);
            swift_bridgeObjectRelease();
            sub_1000361C4((uint64_t)&v211);

            id v85 = *(void (**)(char *, uint64_t))(v71 + 8);
            uint64_t v86 = v91;
            goto LABEL_21;
          }
          *(void *)&long long v209 = v205;
          uint64_t v135 = v181;
          v177(v89, v176);
          sub_100036624((uint64_t)v221);
          sub_100036624((uint64_t)v221);
          sub_100036624((uint64_t)v221);
          uint64_t v136 = Logger.logObject.getter();
          os_log_type_t v137 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v136, v137))
          {
            long long v138 = v211;
            uint64_t v139 = swift_slowAlloc();
            uint64_t v207 = swift_slowAlloc();
            *(void *)&long long v222 = v207;
            *(_DWORD *)uint64_t v139 = 136315394;
            long long v209 = v138;
            sub_100036198((uint64_t)&v211);
            swift_bridgeObjectRetain();
            v140._countAndFlagsBits = 24366;
            v140._object = (void *)0xE200000000000000;
            String.append(_:)(v140);
            if ((_BYTE)v212) {
              uint64_t v141 = 7365749;
            }
            else {
              uint64_t v141 = 7365492;
            }
            unint64_t v142 = 0xE300000000000000;
            String.append(_:)(*(Swift::String *)&v141);
            swift_bridgeObjectRelease();
            v143._countAndFlagsBits = 46;
            v143._object = (void *)0xE100000000000000;
            String.append(_:)(v143);
            v144._countAndFlagsBits = 0x6C61636F6CLL;
            v144._object = (void *)0xE500000000000000;
            String.append(_:)(v144);
            sub_1000361C4((uint64_t)&v211);
            *(void *)&long long v209 = sub_100010680(v209, *((unint64_t *)&v209 + 1), (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
            *(_WORD *)(v139 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)&long long v209 = sub_100010680((uint64_t)v203, v87, (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
            _os_log_impl((void *)&_mh_execute_header, v136, v137, "Cannot find browse for %s when querying TXT record for %s", (uint8_t *)v139, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
          }

          uint64_t v82 = v135;
          break;
        case 32:
          unint64_t v203 = *(uint64_t **)&v221[16];
          uint64_t v204 = v54;
          long long v222 = *(_OWORD *)&v221[24];
          __int16 v223 = *(_WORD *)&v221[40];
          uint64_t v189 = *(void *)&v221[8];
          long long v215 = *(_OWORD *)&v221[8];
          long long v216 = *(_OWORD *)&v221[24];
          __int16 v217 = *(_WORD *)&v221[40];
          sub_100036624((uint64_t)v221);
          swift_bridgeObjectRelease();
          uint64_t v96 = v194;
          uint64_t v97 = *(char **)(v194 + 40);
          uint64_t v98 = v207;
          uint64_t v195 = (char *)(v194 + 40);
          uint64_t v198 = v97;
          ((void (*)(uint64_t, uint64_t))v97)(v207, v194);
          long long v211 = v222;
          LOWORD(v212) = v223;
          sub_1000171BC();
          uint64_t v99 = v190;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000361C4((uint64_t)&v222);
          __chkstk_darwin();
          *(&v170 - 4) = v98;
          *(&v170 - 3) = v96;
          unint64_t v169 = (unint64_t)v197;
          uint64_t v100 = type metadata accessor for BonjourBrowser(0);
          uint64_t v101 = v193;
          sub_100027E7C((void (*)(char *, char *))sub_10003665C, (uint64_t)(&v170 - 6), (uint64_t)&type metadata for Never, v100, v102, (uint64_t)&v214);
          uint64_t v103 = v99;
          unint64_t v104 = (unint64_t)v203;
          (*(void (**)(char *, uint64_t))(v192 + 8))(v103, v101);
          uint64_t v105 = v214;
          if (v214)
          {
            sub_100036624((uint64_t)v221);
            BOOL v106 = sub_10002D234((uint64_t)&v215);
            swift_bridgeObjectRelease();
            sub_1000361C4((uint64_t)&v222);

            if (v106)
            {
              ((void (*)(uint64_t, uint64_t))v198)(v98, v194);
              uint64_t v108 = v107;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v109 = *(void *)(v108 + 16);
              sub_100036624((uint64_t)v221);
              if (v109)
              {
                sub_1000312E0((uint64_t)&v215);
                if (v110)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000361C4((uint64_t)&v222);
                  sub_1000365EC((uint64_t)v221);
                  ((void (*)(uint64_t, uint64_t))v198)(v207, v194);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v169 = sub_100017210();
                  uint64_t v111 = v180;
                  uint64_t v112 = v191;
                  Dictionary.subscript.getter();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v113 = v206;
                  uint64_t v114 = (*(uint64_t (**)(char *, uint64_t))(v199 + 112))(v111, v206);
                  (*(void (**)(char *, uint64_t))(v182 + 8))(v111, v112);
                  if (v114)
                  {
                    type metadata accessor for BonjourResolver(0);
                    if (swift_dynamicCastClass())
                    {
                      sub_10002F4A4();

                      swift_unknownObjectRelease();
LABEL_59:
                      (*(void (**)(char *, uint64_t))(v71 + 8))(v197, v113);
                      return sub_100010754((uint64_t)v220);
                    }
                    swift_unknownObjectRelease();
                  }

                  goto LABEL_59;
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000361C4((uint64_t)&v222);
              *(void *)&long long v211 = v205;
              sub_100036624((uint64_t)v221);
              uint64_t v150 = (uint64_t)v196;
              uint64_t v151 = v207;
              v177(v207, v176);
              uint64_t v152 = (char *)sub_1000366A0((uint64_t)&v215, v150);
              uint64_t v202 = 0;
              uint64_t v153 = (void (*)(uint64_t *, uint64_t))v106;
              uint64_t v154 = v194;
              *(void *)&v152[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = (*(uint64_t (**)(uint64_t, uint64_t))(v194 + 32))(v151, v194);
              swift_unknownObjectRelease();
              uint64_t v155 = swift_allocObject();
              swift_unknownObjectWeakInit();
              uint64_t v156 = swift_allocObject();
              *(_OWORD *)(v156 + 66) = *(_OWORD *)&v221[26];
              long long v157 = *(_OWORD *)v221;
              *(_OWORD *)(v156 + 56) = *(_OWORD *)&v221[16];
              *(void *)(v156 + 16) = v151;
              *(void *)(v156 + 24) = v154;
              *(void *)(v156 + 32) = v155;
              *(_OWORD *)(v156 + 40) = v157;
              uint64_t v158 = (uint64_t (**)())&v152[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
              uint64_t v159 = *(void *)&v152[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
              *uint64_t v158 = sub_1000368B0;
              v158[1] = (uint64_t (*)())v156;
              sub_100036624((uint64_t)v221);
              sub_100011E30(v159);
              unint64_t v160 = v199;
              int v161 = *(void (**)(long long *, void *, char *, uint64_t, unint64_t))(v199 + 104);
              sub_100036624((uint64_t)v221);
              unint64_t v162 = v152;
              uint64_t v204 = v153;
              uint64_t v163 = v153;
              uint64_t v164 = v202;
              v161(&v215, v163, v162, v206, v160);
              if (v164)
              {
                swift_errorRelease();
                uint64_t v165 = 1;
              }
              else
              {
                uint64_t v165 = 0;
              }
              uint64_t v166 = v191;
              uint64_t v167 = v182;
              swift_bridgeObjectRelease();

              sub_1000361C4((uint64_t)&v222);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v183, v165, 1, v166);
              long long v211 = v215;
              long long v212 = v216;
              __int16 v213 = v217;
              unint64_t v168 = (void (*)(long long *, void))(*(uint64_t (**)(long long *, uint64_t, uint64_t))(v154 + 56))(&v209, v207, v154);
              sub_100017210();
              type metadata accessor for Dictionary();
              Dictionary.subscript.setter();
              v168(&v209, 0);

LABEL_20:
              id v85 = *(void (**)(char *, uint64_t))(v71 + 8);
              uint64_t v86 = v197;
LABEL_21:
              v85(v86, v206);
              return sub_100010754((uint64_t)v220);
            }
          }
          *(void *)&long long v211 = v205;
          unint64_t v125 = v185;
          v177(v98, v176);
          sub_100036624((uint64_t)v221);
          unint64_t v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v126, v127))
          {
            long long v128 = v222;
            uint64_t v129 = swift_slowAlloc();
            uint64_t v207 = swift_slowAlloc();
            *(void *)&long long v209 = v207;
            *(_DWORD *)uint64_t v129 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)&long long v211 = sub_100010680(v189, v104, (uint64_t *)&v209);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v129 + 12) = 2080;
            long long v211 = v128;
            sub_100036198((uint64_t)&v222);
            swift_bridgeObjectRetain();
            v130._countAndFlagsBits = 24366;
            v130._object = (void *)0xE200000000000000;
            String.append(_:)(v130);
            if ((_BYTE)v223) {
              uint64_t v131 = 7365749;
            }
            else {
              uint64_t v131 = 7365492;
            }
            unint64_t v132 = 0xE300000000000000;
            String.append(_:)(*(Swift::String *)&v131);
            swift_bridgeObjectRelease();
            v133._countAndFlagsBits = 46;
            v133._object = (void *)0xE100000000000000;
            String.append(_:)(v133);
            v134._countAndFlagsBits = 0x6C61636F6CLL;
            v134._object = (void *)0xE500000000000000;
            String.append(_:)(v134);
            sub_1000361C4((uint64_t)&v222);
            *(void *)&long long v211 = sub_100010680(v211, *((unint64_t *)&v211 + 1), (uint64_t *)&v209);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);
            _os_log_impl((void *)&_mh_execute_header, v126, v127, "Cannot resolve %s because peer not discovered with %s", (uint8_t *)v129, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v82 = v125;
          }
          else
          {
            sub_1000365EC((uint64_t)v221);
            sub_1000365EC((uint64_t)v221);

            uint64_t v82 = v125;
          }
          break;
        default:
          sub_1000365EC((uint64_t)v221);
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      if (swift_dynamicCast())
      {
        uint64_t v72 = v44;
        uint64_t v74 = *((void *)&v218 + 1);
        unint64_t v73 = *(void *)v219;
        switch((char)v218)
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
            swift_bridgeObjectRelease();
            uint64_t v44 = v72;
            goto LABEL_14;
          case 27:
            uint64_t v204 = v54;
            LODWORD(v200) = v219[8];
            uint64_t v115 = v194;
            uint64_t v116 = v207;
            (*(void (**)(uint64_t, uint64_t))(v194 + 40))(v207, v194);
            uint64_t v118 = v117;
            unint64_t v199 = sub_100017210();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v203 = &v170;
            *(void *)&long long v211 = v118;
            __chkstk_darwin();
            *(&v170 - 8) = v116;
            *(&v170 - 7) = v115;
            *(&v170 - 6) = (uint64_t)v197;
            *((unsigned char *)&v170 - 40) = 27;
            *(&v170 - 4) = v74;
            *(&v170 - 3) = v73;
            type metadata accessor for Dictionary.Values();
            swift_getWitnessTable();
            uint64_t v119 = v186;
            Sequence.first(where:)();
            swift_bridgeObjectRelease();
            __chkstk_darwin();
            *(&v170 - 4) = v116;
            *(&v170 - 3) = v115;
            uint64_t v120 = v197;
            unint64_t v169 = (unint64_t)v197;
            uint64_t v121 = type metadata accessor for BonjourResolver(0);
            uint64_t v122 = v188;
            sub_100027E7C((void (*)(char *, char *))sub_1000365C8, (uint64_t)(&v170 - 6), (uint64_t)&type metadata for Never, v121, v123, (uint64_t)&v215);
            (*(void (**)(char *, uint64_t))(v187 + 8))(v119, v122);
            uint64_t v124 = (void *)v215;
            if ((void)v215)
            {
              swift_bridgeObjectRelease();
              sub_10002F134();

              id v85 = *(void (**)(char *, uint64_t))(v71 + 8);
              uint64_t v86 = v120;
              goto LABEL_21;
            }
            *(void *)&long long v215 = v205;
            uint64_t v145 = v184;
            v177(v207, v176);
            swift_bridgeObjectRetain();
            uint64_t v146 = Logger.logObject.getter();
            os_log_type_t v147 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v146, v147))
            {
              uint64_t v148 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v215 = swift_slowAlloc();
              *(_DWORD *)uint64_t v148 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)&long long v211 = sub_100010680(v74, v73, (uint64_t *)&v215);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v146, v147, "Cannot find datapath for %s when querying AAAA record", v148, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v149 = v184;
            }
            else
            {

              swift_bridgeObjectRelease_n();
              uint64_t v149 = v145;
            }
            v204((uint64_t *)v149, v201);
            (*(void (**)(char *, uint64_t))(v71 + 8))(v197, v206);
            break;
          default:
            swift_bridgeObjectRelease();
            goto LABEL_20;
        }
        return sub_100010754((uint64_t)v220);
      }
LABEL_14:
      if (swift_dynamicCast())
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v197, v206);
        swift_bridgeObjectRelease();
        return sub_100010754((uint64_t)v220);
      }
      *(void *)&long long v218 = v44;
      long long v75 = v195;
      v177(v207, v176);
      sub_100035FD4(v55, (uint64_t)&v218);
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v76, v77))
      {
        sub_100010754((uint64_t)&v218);

        v54((uint64_t *)v75, v201);
        goto LABEL_20;
      }
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v204 = v54;
      *(void *)&long long v211 = v79;
      *(_DWORD *)uint64_t v78 = 136315138;
      sub_100035FD4((uint64_t)&v218, (uint64_t)&v215);
      uint64_t v80 = String.init<A>(describing:)();
      *(void *)&long long v215 = sub_100010680(v80, v81, (uint64_t *)&v211);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)&v218);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to start browsing for record %s", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v82 = v195;
    }
    v204((uint64_t *)v82, v201);
    goto LABEL_20;
  }
  uint64_t v56 = v218;
  uint64_t v204 = v54;
  int v57 = v219[0];
  int v58 = v219[1];
  *(void *)__int16 v221 = v44;
  uint64_t v59 = *((void *)&v218 + 1);
  uint64_t v195 = (char *)*((void *)&v218 + 1);
  swift_bridgeObjectRetain();
  Swift::String v60 = v196;
  v177(v207, v176);
  uint64_t v61 = (objc_class *)type metadata accessor for BonjourBrowser(0);
  unint64_t v62 = (char *)objc_allocWithZone(v61);
  *(void *)&v62[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = 0;
  *(void *)&v62[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers] = _swiftEmptyDictionarySingleton;
  uint64_t v63 = &v62[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
  *(void *)uint64_t v63 = v56;
  *((void *)v63 + 1) = v59;
  v63[16] = v57;
  v63[17] = v58;
  (*(void (**)(char *, char *, uint64_t))(v202 + 16))(&v62[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_logger], v60, v51);
  v208.receiver = v62;
  v208.super_class = v61;
  Swift::String v64 = (char *)[super init];
  v204((uint64_t *)v60, v51);
  *(void *)&v64[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = (*(uint64_t (**)(uint64_t))(v194 + 32))(v207);
  swift_unknownObjectRelease();
  unint64_t v65 = v199;
  uint64_t v66 = *(void (**)(uint64_t, char *, uint64_t, char *, uint64_t, unint64_t))(v199 + 32);
  LODWORD(v204) = v58;
  LODWORD(v203) = v57;
  uint64_t v67 = v57 | (v58 << 8);
  char v68 = v195;
  char v69 = v64;
  v66(v56, v68, v67, v69, v206, v65);
  uint64_t v83 = v179;

  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v200 - 8) + 56))(v198, 0, 1, v200);
  *(void *)&long long v215 = v56;
  *((void *)&v215 + 1) = v68;
  LOBYTE(v216) = (_BYTE)v203;
  BYTE1(v216) = (_BYTE)v204;
  char v84 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v194 + 56))(v221, v207);
  sub_1000171BC();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  v84(v221, 0);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v197, v206);
  return sub_100010754((uint64_t)v220);
}

uint64_t sub_100027960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10003803C((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100034178(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000380B4(a1, &qword_10047D0D0);
    sub_10003395C(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1000380B4((uint64_t)v9, &qword_10047D0D0);
  }
}

void sub_100027A38(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)a2;
  long long v9 = v4;
  __int16 v10 = *(_WORD *)(a2 + 32);
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10003431C(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)&v11);
    sub_1000361C4((uint64_t)&v9);
  }
  else
  {
    uint64_t v7 = (void *)sub_100033A88(a2);
    sub_1000361C4((uint64_t)&v11);
    sub_1000361C4((uint64_t)&v9);
  }
}

uint64_t sub_100027AFC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10003803C((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100034594(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1000380B4(a1, &qword_10047D0D0);
    sub_100033B60(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1000380B4((uint64_t)v9, &qword_10047D0D0);
  }
}

uint64_t sub_100027C1C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  long long v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_1000380B4(a1, &qword_10047CF68);
    unint64_t v12 = sub_1000310AC(a2);
    if (v13)
    {
      unint64_t v14 = v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *v3;
      uint64_t v20 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100170E20();
        uint64_t v16 = v20;
      }
      sub_100038110(*(void *)(v16 + 56) + *(void *)(v9 + 72) * v14, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10016FDC0(v14, v16);
      *uint64_t v3 = v16;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
  }
  else
  {
    sub_100038110(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100034E9C((uint64_t)v11, a2, v17);
    *uint64_t v3 = v20;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100027E7C@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  char v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t sub_100028128@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v6 = swift_checkMetadataState();
  uint64_t result = v5(a1, v6, AssociatedConformanceWitness);
  if (result)
  {
    type metadata accessor for BonjourBrowser(0);
    uint64_t result = swift_dynamicCastClass();
    if (result)
    {
      *a2 = result;
      return result;
    }
    uint64_t result = swift_unknownObjectRelease();
  }
  *a2 = 0;
  return result;
}

unsigned char *sub_100028228@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a4 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(a4 + 48) + 40 * a2;
  uint64_t v7 = *(void *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  char v10 = *(unsigned char *)(v5 + 32);
  LOBYTE(v5) = *(unsigned char *)(v5 + 33);
  uint64_t v11 = *(void *)(a4 + 56) + 16 * a2;
  id v12 = *(id *)v11;
  LOBYTE(v11) = *(unsigned char *)(v11 + 8);
  *(void *)uint64_t result = v12;
  result[8] = v11;
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v6;
  *(void *)(a5 + 16) = v8;
  *(void *)(a5 + 24) = v9;
  *(unsigned char *)(a5 + 32) = v10;
  *(unsigned char *)(a5 + 33) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return v12;
}

uint64_t sub_1000282F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = &v17[-v10];
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    long long v12 = *(_OWORD *)(a2 + 24);
    long long v21 = *(_OWORD *)(a2 + 8);
    long long v22 = v12;
    __int16 v23 = *(_WORD *)(a2 + 40);
    __int16 v26 = v23;
    long long v24 = *(_OWORD *)(a2 + 8);
    long long v25 = v12;
    long long v13 = *(_OWORD *)(a2 + 24);
    long long v18 = v24;
    long long v19 = v13;
    __int16 v20 = *(_WORD *)(a2 + 40);
    uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 56);
    sub_100036624(a2);
    uint64_t v15 = (void (*)(unsigned char *, void))v14(v17, a3, a4);
    sub_100017210();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    sub_1000361C4((uint64_t)&v24);
    sub_1000361C4((uint64_t)&v25);
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    v15(v17, 0);
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_10002857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v20 = a4;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v10 = swift_checkMetadataState();
  if (!v9(a1, v10, AssociatedConformanceWitness)) {
    goto LABEL_5;
  }
  type metadata accessor for BonjourResolver(0);
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v12 = v11 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess();
  sub_1000136F4(v12, (uint64_t)v7, &qword_10047CC00);
  swift_unknownObjectRelease();
  uint64_t v13 = type metadata accessor for DNSRecords.SRV();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v7, 1, v13) == 1)
  {
    sub_1000380B4((uint64_t)v7, &qword_10047CC00);
LABEL_5:
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v15 = &v7[*(int *)(v13 + 24)];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  swift_bridgeObjectRetain();
  sub_1000361F0((uint64_t)v7);
  if (v17 == v20 && v16 == v21)
  {
    swift_bridgeObjectRelease();
    char v14 = 1;
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v14 & 1;
}

uint64_t sub_1000287CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v6 = swift_checkMetadataState();
  uint64_t result = v5(a1, v6, AssociatedConformanceWitness);
  if (result)
  {
    type metadata accessor for BonjourResolver(0);
    uint64_t result = swift_dynamicCastClass();
    if (result)
    {
      *a2 = result;
      return result;
    }
    uint64_t result = swift_unknownObjectRelease();
  }
  *a2 = 0;
  return result;
}

uint64_t BonjourOffload.startAdvertising(record:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v290 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v279 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  __chkstk_darwin();
  uint64_t v272 = (char *)&v260 - v6;
  uint64_t v284 = v7;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v270 = *(void *)(v8 - 8);
  uint64_t v271 = v8;
  __chkstk_darwin();
  unint64_t v268 = (char *)&v260 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v273 = (char *)&v260 - v10;
  __chkstk_darwin();
  v274 = (char *)&v260 - v11;
  __chkstk_darwin();
  unint64_t v276 = (unint64_t)&v260 - v12;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v267 = (uint64_t)&v260 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v275 = (uint64_t)&v260 - v14;
  __chkstk_darwin();
  unsigned int v280 = (char *)&v260 - v15;
  uint64_t v293 = type metadata accessor for DNSRecords.SRV();
  v283 = *(void (***)(void, void, void, void))(v293 - 8);
  __chkstk_darwin();
  uint64_t v269 = (uint64_t)&v260 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __int8 v285 = (long long *)((char *)&v260 - v17);
  __chkstk_darwin();
  __int8 v288 = (uint64_t *)((char *)&v260 - v18);
  __chkstk_darwin();
  uint64_t v278 = (uint64_t)&v260 - v19;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v291 = *(void *)(v20 - 8);
  uint64_t v292 = v20;
  __chkstk_darwin();
  __int8 v289 = (uint64_t *)((char *)&v260 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  unint64_t v281 = (unint64_t)&v260 - v22;
  __chkstk_darwin();
  v294 = (void (*)(unint64_t, uint64_t))((char *)&v260 - v23);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v260 - v26;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v260 - v29;
  uint64_t v31 = a3;
  unint64_t v32 = *(void (**)(uint64_t))(a3 + 64);
  uint64_t v33 = v297;
  uint64_t v296 = a2;
  uint64_t v34 = a2;
  uint64_t v35 = v31;
  v32(v34);
  unint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v295 = AssociatedTypeWitness;
  if (v36(v27, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v27, v295);
  *(void *)&long long v318 = v33;
  uint64_t v38 = v35;
  uint64_t v39 = *(void *)(v35 + 8);
  unint64_t v40 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  uint64_t v264 = v39;
  uint64_t v265 = v40;
  uint64_t v266 = v39 + 8;
  ((void (*)(uint64_t))v40)(v296);
  uint64_t v41 = v290;
  sub_100035FD4(v290, (uint64_t)&v318);
  swift_unknownObjectRetain_n();
  int v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  int v44 = v43;
  BOOL v45 = os_log_type_enabled(v42, v43);
  unint64_t v282 = v30;
  uint64_t v286 = v35;
  uint64_t v277 = v28;
  if (v45)
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v263 = swift_slowAlloc();
    v311[0] = v263;
    *(_DWORD *)uint64_t v46 = 136315650;
    os_log_t v262 = v42;
    int v261 = v44;
    sub_100035FD4((uint64_t)&v318, (uint64_t)&v307);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v47 = String.init<A>(describing:)();
    *(void *)&long long v307 = sub_100010680(v47, v48, v311);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)&v318);
    *(_WORD *)(v46 + 12) = 2048;
    uint64_t v260 = v46 + 14;
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v35 + 40);
    v49(v296, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    sub_1000171BC();
    uint64_t v50 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v307 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v46 + 22) = 2048;
    v49(v296, v38);
    uint64_t v41 = v290;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100017210();
    uint64_t v51 = Dictionary.count.getter();
    swift_unknownObjectRelease();
    uint64_t v30 = v282;
    swift_bridgeObjectRelease();
    *(void *)&long long v307 = v51;
    uint64_t v28 = v277;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    os_log_t v52 = v262;
    _os_log_impl((void *)&_mh_execute_header, v262, (os_log_type_t)v261, "Starting advertise for %s (browses: %ld, advertises: %ld)", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
    sub_100010754((uint64_t)&v318);

    swift_unknownObjectRelease_n();
  }
  os_log_t v53 = *(void (**)(uint64_t *, uint64_t))(v291 + 8);
  v53((uint64_t *)v294, v292);
  int v54 = (uint64_t (*)(void, void, void))v288;
  uint64_t v55 = v289;
  sub_100035FD4(v41, (uint64_t)v311);
  sub_100010BCC(&qword_10047CC08);
  if (swift_dynamicCast())
  {
    long long v307 = v322;
    long long v308 = v323;
    LOWORD(v309) = v324;
    int v57 = (char *)*((void *)&v322 + 1);
    uint64_t v56 = v322;
    unint64_t v290 = *((void *)&v323 + 1);
    int v58 = (uint64_t *)v323;
    LODWORD(v288) = v324;
    LODWORD(v285) = HIBYTE(v324);
    long long v304 = v322;
    long long v300 = v323;
    __int16 v301 = v324;
    uint64_t v59 = v286;
    Swift::String v60 = *(uint64_t (**)(uint64_t, uint64_t))(v286 + 40);
    sub_100036198((uint64_t)&v304);
    sub_100036198((uint64_t)&v300);
    uint64_t v61 = v60(v296, v59);
    uint64_t v63 = v62;
    uint64_t v275 = (uint64_t)v64;
    uint64_t v65 = *(void *)(v62 + 16);
    v294 = (void (*)(unint64_t, uint64_t))v58;
    __int8 v289 = v66;
    if (v65 && (unint64_t v67 = sub_1000312E0((uint64_t)&v307), (v68 & 1) != 0))
    {
      char v69 = (char *)*(id *)(*(void *)(v63 + 56) + 8 * v67);
      int v70 = v283;
    }
    else
    {
      *(void *)&long long v318 = v297;
      v273 = (char *)v61;
      unint64_t v86 = v281;
      v265(v296, v264);
      unint64_t v87 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
      uint64_t v88 = (char *)objc_allocWithZone(v87);
      uint64_t v89 = &v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)uint64_t v89 = 0u;
      *((_OWORD *)v89 + 1) = 0u;
      *((_WORD *)v89 + 16) = 0;
      uint64_t v90 = &v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((void *)v90 + 6) = 0;
      *((_OWORD *)v90 + 1) = 0u;
      *((_OWORD *)v90 + 2) = 0u;
      *(_OWORD *)uint64_t v90 = 0u;
      v274 = v57;
      uint64_t v91 = v56;
      uint64_t v92 = (void (*)(unint64_t, uint64_t))v53;
      int v70 = v283;
      ((void (**)(char *, uint64_t, uint64_t, uint64_t))v283)[7](&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v293);
      uint64_t v93 = v292;
      (*(void (**)(char *, unint64_t, uint64_t))(v291 + 16))(&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v86, v292);
      v298.receiver = v88;
      v298.super_class = v87;
      char v69 = (char *)[super init];
      v92(v86, v93);
      uint64_t v56 = v91;
      int v57 = v274;
    }
    uint64_t v94 = (uint64_t)v280;
    __int16 v95 = (__int16)v288;
    __int16 v96 = (__int16)v285;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)&v304);
    sub_1000361C4((uint64_t)&v300);
    __int16 v97 = v95 | (v96 << 8);
    uint64_t v98 = &v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v99 = *(void *)&v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v100 = *(void *)&v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    *(void *)uint64_t v98 = v56;
    *((void *)v98 + 1) = v57;
    unint64_t v101 = v290;
    *((void *)v98 + 2) = v294;
    *((void *)v98 + 3) = v101;
    *((_WORD *)v98 + 16) = v97;
    sub_100036198((uint64_t)&v304);
    sub_100036198((uint64_t)&v300);
    sub_100036154(v99, v100);
    uint64_t v102 = (uint64_t)&v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess();
    sub_1000136F4(v102, v94, &qword_10047CC00);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v70[6])(v94, 1, v293) == 1)
    {
      sub_1000380B4(v94, &qword_10047CC00);
      uint64_t v103 = v296;
LABEL_32:
      uint64_t v173 = v286;
      uint64_t v174 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v286 + 56);
      uint64_t v175 = v69;
      uint64_t v176 = (void (*)(long long *, void))v174(&v318, v103, v173);
      uint64_t v178 = v177;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v315 = *(void *)(v178 + 8);
      *(void *)(v178 + 8) = 0x8000000000000000;
      sub_10003431C((uint64_t)v175, (uint64_t)&v307, isUniquelyReferenced_nonNull_native);
      *(void *)(v178 + 8) = v315;
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)&v304);
      sub_1000361C4((uint64_t)&v300);
      v176(&v318, 0);
LABEL_33:

LABEL_47:
      (*(void (**)(char *, uint64_t))(v277 + 8))(v282, v295);
      return sub_100010754((uint64_t)v311);
    }
    uint64_t v117 = v278;
    sub_100038110(v94, v278, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    uint64_t v118 = &v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    uint64_t v119 = *(uint64_t **)&v69[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8];
    uint64_t v103 = v296;
    if (!v119)
    {
      sub_1000361F0(v117);
      goto LABEL_32;
    }
    uint64_t v120 = *(uint64_t **)v118;
    uint64_t v121 = *((void *)v118 + 3);
    uint64_t v122 = *((void *)v118 + 4);
    uint64_t v123 = *((void *)v118 + 5);
    unint64_t v124 = *((void *)v118 + 6);
    uint64_t v293 = *((void *)v118 + 2);
    v294 = (void (*)(unint64_t, uint64_t))v120;
    *(void *)&long long v318 = v120;
    *((void *)&v318 + 1) = v119;
    *(void *)&long long v319 = v293;
    *((void *)&v319 + 1) = v121;
    __int8 v285 = (long long *)v122;
    LOWORD(v320) = v122 & 0xFF01;
    *((void *)&v320 + 1) = v123;
    *(void *)&long long v321 = v124;
    uint64_t v125 = v286;
    unint64_t v126 = *(uint64_t **)(v286 + 56);
    __int8 v288 = v119;
    swift_bridgeObjectRetain();
    uint64_t v292 = v121;
    swift_bridgeObjectRetain();
    unint64_t v290 = v124;
    uint64_t v291 = v123;
    sub_100013D44(v123, v124);
    __int8 v289 = v126;
    os_log_type_t v127 = (void (*)(long long *, void))((uint64_t (*)(long long *, uint64_t, uint64_t))v126)(&v315, v103, v125);

    v127(&v315, 0);
    uint64_t v128 = AssociatedConformanceWitness;
    uint64_t v129 = *(void (**)(long long *, long long *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                            + 56);
    Swift::String v130 = v69;
    v129(&v307, &v318, v117, v130, v295, v128);
    uint64_t v202 = v296;
    uint64_t v203 = (uint64_t)v285;

    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v284);
    long long v315 = v307;
    long long v316 = v308;
    __int16 v317 = v309;
    uint64_t v204 = (void (*)(long long *, void))((uint64_t (*)(long long *, uint64_t, uint64_t))v289)(&v312, v202, v286);
    sub_100017210();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v204(&v312, 0);
    sub_100036090((uint64_t)v294, (uint64_t)v288, v293, v292, v203, v291, v290);

    uint64_t v205 = v278;
LABEL_46:
    sub_1000361F0(v205);
    goto LABEL_47;
  }
  if (swift_dynamicCast())
  {
    uint64_t v71 = (uint64_t)v54;
    uint64_t v72 = (uint64_t)v285;
    sub_100038110(v71, (uint64_t)v285, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    long long v73 = *(_OWORD *)(v72 + 16);
    long long v307 = *(_OWORD *)v72;
    long long v308 = v73;
    LOWORD(v309) = *(_WORD *)(v72 + 32);
    v327[0] = v307;
    long long v304 = v73;
    __int16 v305 = v309;
    uint64_t v74 = v286;
    long long v75 = *(void (**)(uint64_t, uint64_t))(v286 + 40);
    sub_100036198((uint64_t)v327);
    sub_100036198((uint64_t)&v304);
    uint64_t v76 = v297;
    v75(v296, v74);
    uint64_t v78 = v77;
    __int8 v289 = v80;
    unint64_t v290 = v79;
    if (*(void *)(v77 + 16) && (unint64_t v81 = sub_1000312E0((uint64_t)&v307), (v82 & 1) != 0))
    {
      uint64_t v83 = (char *)*(id *)(*(void *)(v78 + 56) + 8 * v81);
      uint64_t v84 = v293;
      id v85 = v283;
    }
    else
    {
      *(void *)&long long v318 = v76;
      v294 = (void (*)(unint64_t, uint64_t))v53;
      unint64_t v131 = v281;
      v265(v296, v264);
      unint64_t v132 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
      Swift::String v133 = (char *)objc_allocWithZone(v132);
      Swift::String v134 = &v133[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)Swift::String v134 = 0u;
      *((_OWORD *)v134 + 1) = 0u;
      *((_WORD *)v134 + 16) = 0;
      uint64_t v135 = &v133[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((void *)v135 + 6) = 0;
      *((_OWORD *)v135 + 1) = 0u;
      *((_OWORD *)v135 + 2) = 0u;
      *(_OWORD *)uint64_t v135 = 0u;
      id v85 = v283;
      uint64_t v84 = v293;
      ((void (**)(char *, uint64_t, uint64_t, uint64_t))v283)[7](&v133[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v293);
      uint64_t v136 = v292;
      (*(void (**)(char *, unint64_t, uint64_t))(v291 + 16))(&v133[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v131, v292);
      v299.receiver = v133;
      v299.super_class = v132;
      uint64_t v83 = (char *)[super init];
      v294(v131, v136);
    }
    uint64_t v137 = v275;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)v327);
    sub_1000361C4((uint64_t)&v304);
    sub_100036960((uint64_t)v285, v137);
    v85[7](v137, 0, 1, v84);
    uint64_t v138 = (uint64_t)&v83[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess();
    sub_10003624C(v137, v138);
    swift_endAccess();
    uint64_t v139 = &v83[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v140 = *(void *)&v83[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    if (!v140) {
      goto LABEL_28;
    }
    uint64_t v141 = *(void *)v139;
    uint64_t v142 = *((void *)v139 + 2);
    uint64_t v143 = *((void *)v139 + 3);
    __int16 v144 = *((_WORD *)v139 + 16);
    *(void *)&long long v315 = *(void *)v139;
    *((void *)&v315 + 1) = v140;
    *(void *)&long long v316 = v142;
    *((void *)&v316 + 1) = v143;
    __int16 v317 = v144 & 0xFF01;
    uint64_t v145 = (uint64_t *)&v83[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    uint64_t v146 = *(uint64_t **)&v83[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8];
    if (v146)
    {
      uint64_t v147 = *v145;
      uint64_t v148 = v145[2];
      uint64_t v149 = v145[3];
      uint64_t v150 = v145[4];
      unint64_t v151 = v145[5];
      unint64_t v281 = v145[6];
      *(void *)&long long v318 = v147;
      *((void *)&v318 + 1) = v146;
      *(void *)&long long v319 = v148;
      *((void *)&v319 + 1) = v149;
      LOWORD(v320) = v150 & 0xFF01;
      *((void *)&v320 + 1) = v151;
      *(void *)&long long v321 = v281;
      uint64_t v152 = v286;
      long long v153 = v285[1];
      long long v322 = *v285;
      long long v323 = v153;
      __int16 v324 = *((_WORD *)v285 + 16);
      long long v325 = v322;
      long long v300 = v153;
      __int16 v301 = v324;
      v283 = (void (**)(void, void, void, void))v83;
      uint64_t v154 = *(uint64_t **)(v286 + 56);
      sub_100036110(v141, v140);
      uint64_t v292 = v148;
      uint64_t v293 = v147;
      __int8 v289 = v146;
      unint64_t v290 = v151;
      uint64_t v291 = v149;
      v294 = (void (*)(unint64_t, uint64_t))v150;
      uint64_t v155 = v151;
      unint64_t v156 = v281;
      sub_1000362B4(v147, (uint64_t)v146, v148, v149, v150, v155, v281);
      sub_100036198((uint64_t)&v325);
      sub_100036198((uint64_t)&v300);
      __int8 v288 = v154;
      long long v157 = (void (*)(long long *, void))((uint64_t (*)(long long *, uint64_t, uint64_t))v154)(&v312, v296, v152);
      uint64_t v158 = (void *)sub_100033A88((uint64_t)&v322);
      sub_1000361C4((uint64_t)&v325);
      sub_1000361C4((uint64_t)&v300);

      v157(&v312, 0);
      uint64_t v159 = AssociatedConformanceWitness;
      unint64_t v160 = *(void (**)(long long *, long long *, long long *, void (**)(void, void, void, void), uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
      int v161 = v283;
      v160(&v315, &v318, v285, v161, v295, v159);
      uint64_t v241 = v296;
      uint64_t v242 = v284;
      uint64_t v243 = v286;

      (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v274, 0, 1, v242);
      long long v312 = v315;
      long long v313 = v316;
      __int16 v314 = v317;
      long long v244 = (void (*)(_OWORD *, void))((uint64_t (*)(_OWORD *, uint64_t, uint64_t))v288)(v302, v241, v243);
      sub_100017210();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v244(v302, 0);
      sub_100036090(v293, (uint64_t)v289, v292, v291, (uint64_t)v294, v290, v156);

      uint64_t v205 = (uint64_t)v285;
    }
    else
    {
LABEL_28:
      uint64_t v163 = (uint64_t)v285;
      uint64_t v162 = v286;
      long long v164 = v285[1];
      long long v318 = *v285;
      long long v319 = v164;
      LOWORD(v320) = *((_WORD *)v285 + 16);
      v302[0] = v318;
      long long v312 = v164;
      LOWORD(v313) = v320;
      uint64_t v165 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v286 + 56);
      uint64_t v166 = v83;
      sub_100036198((uint64_t)v302);
      sub_100036198((uint64_t)&v312);
      uint64_t v167 = (void (*)(long long *, void))v165(&v322, v296, v162);
      uint64_t v169 = v168;
      char v170 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v300 = *(void *)(v169 + 8);
      *(void *)(v169 + 8) = 0x8000000000000000;
      sub_10003431C((uint64_t)v166, (uint64_t)&v318, v170);
      *(void *)(v169 + 8) = v300;
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)v302);
      sub_1000361C4((uint64_t)&v312);
      v167(&v322, 0);

      uint64_t v205 = v163;
    }
    goto LABEL_46;
  }
  if (swift_dynamicCast())
  {
    v294 = (void (*)(unint64_t, uint64_t))v53;
    long long v318 = v307;
    long long v319 = v308;
    long long v320 = v309;
    __int8 v289 = (uint64_t *)*((void *)&v309 + 1);
    unint64_t v290 = v310;
    *(void *)&long long v321 = v310;
    unsigned int v280 = (char *)*((void *)&v307 + 1);
    uint64_t v278 = v307;
    __int8 v288 = (uint64_t *)*((void *)&v308 + 1);
    __int8 v285 = (long long *)v308;
    unint64_t v276 = v309;
    uint64_t v275 = BYTE1(v309);
    long long v322 = v307;
    long long v323 = v308;
    __int16 v324 = v309;
    __int16 v317 = v309;
    long long v315 = v307;
    long long v316 = v308;
    v327[0] = v307;
    __int16 v326 = v309;
    long long v325 = v308;
    uint64_t v104 = v286;
    uint64_t v105 = *(char **)(v286 + 40);
    sub_100036198((uint64_t)v327);
    sub_100036198((uint64_t)&v325);
    v274 = v105;
    ((void (*)(uint64_t, uint64_t))v105)(v296, v104);
    long long v312 = v315;
    long long v313 = v316;
    __int16 v314 = v317;
    unint64_t v106 = sub_100017210();
    uint64_t v107 = v273;
    uint64_t v108 = v284;
    uint64_t v263 = v106;
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)v327);
    sub_1000361C4((uint64_t)&v325);
    uint64_t v109 = v279;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v279 + 48))(v107, 1, v108) != 1)
    {
      __int8 v180 = v272;
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v272, v107, v108);
      uint64_t v181 = v282;
      uint64_t v182 = v295;
      uint64_t v183 = v108;
      if ((*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v180, v295))
      {
        type metadata accessor for BonjourAdvertiser(0);
        uint64_t v184 = swift_dynamicCastClass();
        if (v184)
        {
          unint64_t v185 = v276 | (v275 << 8);
          uint64_t v186 = (void *)(v184
                          + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          uint64_t v187 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          uint64_t v188 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 8);
          uint64_t v189 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 16);
          uint64_t v190 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 24);
          uint64_t v191 = v182;
          uint64_t v192 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 32);
          uint64_t v193 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 40);
          unint64_t v194 = *(void *)(v184
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 48);
          uint64_t v195 = v280;
          *uint64_t v186 = v278;
          v186[1] = v195;
          uint64_t v196 = (uint64_t (*)(void, void, void))v288;
          v186[2] = v285;
          v186[3] = v196;
          v186[4] = v185;
          unint64_t v197 = v290;
          v186[5] = v289;
          v186[6] = v197;
          sub_1000368C0((uint64_t)&v318);
          uint64_t v198 = v187;
          uint64_t v199 = v188;
          uint64_t v109 = v279;
          uint64_t v200 = v189;
          __int8 v180 = v272;
          uint64_t v201 = v192;
          uint64_t v182 = v191;
          uint64_t v183 = v284;
          uint64_t v181 = v282;
          sub_100036090(v198, v199, v200, v190, v201, v193, v194);
        }
        swift_unknownObjectRelease();
      }
      (*(void (**)(char *, long long *, uint64_t))(AssociatedConformanceWitness + 64))(v180, &v318, v182);
      sub_100036910((uint64_t)&v318);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v180, v183);
      (*(void (**)(char *, uint64_t))(v277 + 8))(v181, v182);
      return sub_100010754((uint64_t)v311);
    }
    (*(void (**)(char *, uint64_t))(v270 + 8))(v107, v271);
    sub_100036198((uint64_t)v327);
    sub_100036198((uint64_t)&v325);
    uint64_t v110 = v296;
    ((void (*)(uint64_t, uint64_t))v274)(v296, v104);
    uint64_t v112 = v111;
    v274 = v113;
    if (*(void *)(v111 + 16) && (unint64_t v114 = sub_1000312E0((uint64_t)&v315), (v115 & 1) != 0))
    {
      uint64_t v116 = (char *)*(id *)(*(void *)(v112 + 56) + 8 * v114);
    }
    else
    {
      *(void *)&long long v312 = v297;
      unint64_t v206 = v281;
      v265(v110, v264);
      uint64_t v207 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
      objc_super v208 = (char *)objc_allocWithZone(v207);
      long long v209 = &v208[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)long long v209 = 0u;
      *((_OWORD *)v209 + 1) = 0u;
      *((_WORD *)v209 + 16) = 0;
      __int16 v210 = &v208[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((void *)v210 + 6) = 0;
      *((_OWORD *)v210 + 1) = 0u;
      *((_OWORD *)v210 + 2) = 0u;
      *(_OWORD *)__int16 v210 = 0u;
      ((void (**)(char *, uint64_t, uint64_t, uint64_t))v283)[7](&v208[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v293);
      uint64_t v211 = v292;
      (*(void (**)(char *, unint64_t, uint64_t))(v291 + 16))(&v208[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v206, v292);
      v306.receiver = v208;
      v306.super_class = v207;
      uint64_t v116 = (char *)[super init];
      v294(v206, v211);
    }
    uint64_t v213 = v275;
    unint64_t v212 = v276;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)v327);
    sub_1000361C4((uint64_t)&v325);
    unint64_t v214 = v212 | (v213 << 8);
    long long v215 = &v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    uint64_t v216 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    uint64_t v217 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8];
    uint64_t v218 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 16];
    uint64_t v219 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 24];
    uint64_t v220 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 32];
    uint64_t v221 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 40];
    unint64_t v222 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 48];
    __int16 v223 = v280;
    *(void *)long long v215 = v278;
    *((void *)v215 + 1) = v223;
    long long v224 = (uint64_t (*)(void, void, void))v288;
    *((void *)v215 + 2) = v285;
    *((void *)v215 + 3) = v224;
    *((void *)v215 + 4) = v214;
    unint64_t v225 = v290;
    *((void *)v215 + 5) = v289;
    *((void *)v215 + 6) = v225;
    sub_1000368C0((uint64_t)&v318);
    sub_100036090(v216, v217, v218, v219, v220, v221, v222);
    unint64_t v226 = &v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    uint64_t v227 = *(void *)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    uint64_t v228 = v296;
    if (v227)
    {
      long long v229 = *(uint64_t **)v226;
      uint64_t v230 = *((void *)v226 + 2);
      uint64_t v231 = *((void *)v226 + 3);
      __int16 v232 = *((_WORD *)v226 + 16);
      *(void *)&long long v312 = *(void *)v226;
      *((void *)&v312 + 1) = v227;
      *(void *)&long long v313 = v230;
      *((void *)&v313 + 1) = v231;
      __int16 v314 = v232 & 0xFF01;
      uint64_t v233 = (uint64_t)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
      swift_beginAccess();
      uint64_t v234 = v267;
      sub_1000136F4(v233, v267, &qword_10047CC00);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v283[6])(v234, 1, v293) != 1)
      {
        sub_100038110(v234, v269, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
        v294 = (void (*)(unint64_t, uint64_t))v229;
        uint64_t v250 = v286;
        __int16 v251 = *(uint64_t **)(v286 + 56);
        sub_100036198((uint64_t)v327);
        sub_100036198((uint64_t)&v325);
        sub_100036110((uint64_t)v294, v227);
        v294 = (void (*)(unint64_t, uint64_t))v251;
        unint64_t v252 = (void (*)(_OWORD *, void))((uint64_t (*)(_OWORD *, uint64_t, uint64_t))v251)(v302, v228, v250);
        uint64_t v253 = (void *)sub_100033A88((uint64_t)&v315);
        sub_1000361C4((uint64_t)v327);
        sub_1000361C4((uint64_t)&v325);

        v252(v302, 0);
        uint64_t v254 = AssociatedConformanceWitness;
        uint64_t v255 = *(void (**)(long long *, long long *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                                + 56);
        unint64_t v256 = v116;
        uint64_t v257 = v282;
        v255(&v312, &v318, v269, v256, v295, v254);
        uint64_t v258 = v279;

        (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v268, 0, 1, v284);
        v302[0] = v312;
        v302[1] = v313;
        __int16 v303 = v314;
        uint64_t v259 = (void (*)(long long *, void))((uint64_t (*)(long long *, uint64_t, uint64_t))v294)(&v300, v296, v286);
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        v259(&v300, 0);

        sub_100036910((uint64_t)&v318);
        sub_1000361F0(v269);
        (*(void (**)(char *, uint64_t))(v277 + 8))(v257, v295);
        return sub_100010754((uint64_t)v311);
      }
      sub_1000380B4(v234, &qword_10047CC00);
    }
    uint64_t v235 = v286;
    __int8 v236 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v286 + 56);
    sub_100036198((uint64_t)v327);
    sub_100036198((uint64_t)&v325);
    uint64_t v175 = v116;
    __int8 v237 = (void (*)(_OWORD *, void))v236(v302, v228, v235);
    uint64_t v239 = v238;
    char v240 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v300 = *(void *)(v239 + 8);
    *(void *)(v239 + 8) = 0x8000000000000000;
    sub_10003431C((uint64_t)v175, (uint64_t)&v315, v240);
    *(void *)(v239 + 8) = v300;
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)v327);
    sub_1000361C4((uint64_t)&v325);
    v237(v302, 0);
    sub_100036910((uint64_t)&v318);
    goto LABEL_33;
  }
  int v171 = swift_dynamicCast();
  uint64_t v172 = v295;
  if (v171)
  {
    long long v318 = v307;
    long long v319 = v308;
    long long v320 = v309;
    long long v321 = v310;
    (*(void (**)(long long *, uint64_t))(AssociatedConformanceWitness + 88))(&v318, v295);
    sub_100036058((uint64_t)&v318);
    goto LABEL_54;
  }
  if (!swift_dynamicCast())
  {
    *(void *)&long long v318 = v297;
    v265(v296, v264);
    sub_100035FD4(v41, (uint64_t)&v318);
    long long v245 = Logger.logObject.getter();
    os_log_type_t v246 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v245, v246))
    {
      v294 = (void (*)(unint64_t, uint64_t))v53;
      long long v247 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v322 = swift_slowAlloc();
      *(_DWORD *)long long v247 = 136315138;
      sub_100035FD4((uint64_t)&v318, (uint64_t)&v307);
      uint64_t v248 = String.init<A>(describing:)();
      *(void *)&long long v307 = sub_100010680(v248, v249, (uint64_t *)&v322);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)&v318);
      _os_log_impl((void *)&_mh_execute_header, v245, v246, "Failed to start advertising for record %s", v247, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v294((unint64_t)v289, v292);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v282, v295);
      return sub_100010754((uint64_t)v311);
    }

    sub_100010754((uint64_t)&v318);
    v53(v55, v292);
LABEL_54:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v172);
    return sub_100010754((uint64_t)v311);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v172);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100010754((uint64_t)v311);
}

uint64_t BonjourOffload.startResolving(record:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v110 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = swift_getAssociatedTypeWitness();
  uint64_t v100 = type metadata accessor for Optional();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin();
  __int16 v97 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v98 = (char *)&v86 - v9;
  uint64_t v96 = AssociatedConformanceWitness;
  uint64_t v103 = swift_getAssociatedTypeWitness();
  uint64_t v106 = type metadata accessor for Optional();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin();
  uint64_t v104 = (char *)&v86 - v10;
  uint64_t v112 = (void *)type metadata accessor for Logger();
  unint64_t v111 = *(v112 - 1);
  __chkstk_darwin();
  uint64_t v108 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v102 = (char *)&v86 - v12;
  __chkstk_darwin();
  __int16 v95 = (char *)&v86 - v13;
  __chkstk_darwin();
  uint64_t v109 = (char *)&v86 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v86 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v86 - v20;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  uint64_t v107 = v21;
  v23(v21, v18, AssociatedTypeWitness);
  *(void *)&long long v120 = v3;
  uint64_t v24 = *(void *)(a3 + 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  uint64_t v26 = v109;
  uint64_t v93 = a2;
  uint64_t v89 = v24;
  uint64_t v91 = v24 + 8;
  uint64_t v90 = v25;
  ((void (*)(uint64_t))v25)(a2);
  uint64_t v27 = v110;
  sub_100035FD4(v110, (uint64_t)&v120);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v94 = AssociatedTypeWitness;
  uint64_t v92 = v19;
  uint64_t v88 = a3;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v114 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    sub_100035FD4((uint64_t)&v120, (uint64_t)&v117);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)&long long v117 = sub_100010680(v32, v33, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)&v120);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting resolve for %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v88;
    swift_slowDealloc();
  }
  else
  {
    sub_100010754((uint64_t)&v120);
  }

  uint64_t v34 = *(char **)(v111 + 8);
  ((void (*)(char *, void *))v34)(v26, v112);
  sub_100035FD4(v27, (uint64_t)&v120);
  sub_100010BCC(&qword_10047CC08);
  if (swift_dynamicCast())
  {
    uint64_t v109 = v34;
    long long v117 = v114;
    long long v118 = v115;
    LOWORD(v119) = v116;
    long long v123 = v115;
    __int16 v124 = v116;
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
    uint64_t v108 = (char *)*((void *)&v115 + 1);
    uint64_t v87 = v115;
    swift_bridgeObjectRetain();
    uint64_t v110 = v3;
    uint64_t v36 = v93;
    v35(v93, a3);
    long long v120 = v123;
    LOWORD(v121) = v124;
    sub_1000171BC();
    uint64_t v37 = v104;
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000361C4((uint64_t)&v123);
    __chkstk_darwin();
    *(&v86 - 4) = v36;
    *(&v86 - 3) = a3;
    *(&v86 - 2) = (uint64_t)v107;
    uint64_t v38 = type metadata accessor for BonjourBrowser(0);
    uint64_t v39 = v106;
    sub_100027E7C((void (*)(char *, char *))sub_100038384, (uint64_t)(&v86 - 6), (uint64_t)&type metadata for Never, v38, v40, (uint64_t)&v113);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v37, v39);
    uint64_t v41 = v113;
    if (v113 && (BOOL v42 = sub_10002D234((uint64_t)&v117), v41, v42))
    {
      uint64_t v112 = (void *)v42;
      long long v125 = v117;
      sub_100036198((uint64_t)&v123);
      sub_100036198((uint64_t)&v125);
      uint64_t v43 = v110;
      uint64_t v44 = v88;
      v35(v36, v88);
      long long v120 = v117;
      long long v121 = v118;
      __int16 v122 = v119;
      unint64_t v45 = sub_100017210();
      uint64_t v46 = v98;
      uint64_t v47 = v101;
      unint64_t v111 = v45;
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)&v125);
      sub_1000361C4((uint64_t)&v123);
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
      {
        (*(void (**)(char *, uint64_t))(v99 + 8))(v46, v100);
        *(void *)&long long v120 = v43;
        sub_100036198((uint64_t)&v123);
        sub_100036198((uint64_t)&v125);
        uint64_t v49 = (uint64_t)v95;
        v90(v36, v89);
        uint64_t v50 = (char *)sub_1000366A0((uint64_t)&v117, v49);
        *(void *)&v50[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v36, v44);
        swift_unknownObjectRelease();
        uint64_t v51 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v52 = swift_allocObject();
        long long v53 = v117;
        *(_OWORD *)(v52 + 56) = v118;
        *(void *)(v52 + 16) = v36;
        *(void *)(v52 + 24) = v44;
        *(void *)(v52 + 32) = v51;
        *(_WORD *)(v52 + 72) = v119;
        *(_OWORD *)(v52 + 40) = v53;
        int v54 = (uint64_t (**)())&v50[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        uint64_t v55 = *(void *)&v50[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        *int v54 = sub_100036A50;
        v54[1] = (uint64_t (*)())v52;
        sub_100036198((uint64_t)&v123);
        sub_100036198((uint64_t)&v125);
        sub_100011E30(v55);
        uint64_t v56 = v96;
        int v57 = *(void (**)(long long *, void *, char *, uint64_t, uint64_t))(v96 + 104);
        int v58 = v50;
        uint64_t v59 = v97;
        id v60 = v112;
        v57(&v117, v112, v58, v94, v56);

        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v59, 0, 1, v101);
        long long v120 = v117;
        long long v121 = v118;
        __int16 v122 = v119;
        id v85 = (void (*)(long long *, void))(*(uint64_t (**)(long long *, uint64_t))(v88 + 56))(&v114, v36);
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        v85(&v114, 0);
      }
      else
      {

        sub_1000361C4((uint64_t)&v125);
        sub_1000361C4((uint64_t)&v123);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v46, v100);
      }
    }
    else
    {
      *(void *)&long long v120 = v110;
      uint64_t v74 = v102;
      v90(v36, v89);
      long long v75 = v117;
      sub_100036198((uint64_t)&v123);
      swift_bridgeObjectRetain();
      sub_100036198((uint64_t)&v123);
      swift_bridgeObjectRetain();
      sub_100036198((uint64_t)&v123);
      swift_bridgeObjectRetain();
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc();
        *(void *)&long long v114 = swift_slowAlloc();
        *(_DWORD *)uint64_t v78 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)&long long v120 = sub_100010680(v75, *((unint64_t *)&v75 + 1), (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        sub_1000361C4((uint64_t)&v123);
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        *(_WORD *)(v78 + 12) = 2080;
        *(void *)&long long v120 = v87;
        *((void *)&v120 + 1) = v108;
        sub_100036198((uint64_t)&v123);
        swift_bridgeObjectRetain();
        v79._countAndFlagsBits = 24366;
        v79._object = (void *)0xE200000000000000;
        String.append(_:)(v79);
        if ((_BYTE)v124) {
          uint64_t v80 = 7365749;
        }
        else {
          uint64_t v80 = 7365492;
        }
        unint64_t v81 = 0xE300000000000000;
        String.append(_:)(*(Swift::String *)&v80);
        swift_bridgeObjectRelease();
        v82._countAndFlagsBits = 46;
        v82._object = (void *)0xE100000000000000;
        String.append(_:)(v82);
        v83._countAndFlagsBits = 0x6C61636F6CLL;
        v83._object = (void *)0xE500000000000000;
        String.append(_:)(v83);
        sub_1000361C4((uint64_t)&v123);
        *(void *)&long long v120 = sub_100010680(v120, *((unint64_t *)&v120 + 1), (uint64_t *)&v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Cannot resolve %s because peer not discovered with %s", (uint8_t *)v78, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v84 = v102;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)&v123);

        uint64_t v84 = v74;
      }
      ((void (*)(char *, void *))v109)(v84, v112);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v107, v94);
  }
  else
  {
    *(void *)&long long v120 = v3;
    uint64_t v61 = v108;
    v90(v93, v89);
    sub_100035FD4(v27, (uint64_t)&v120);
    sub_100035FD4(v27, (uint64_t)&v117);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      *(void *)&long long v123 = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315394;
      sub_100035FD4((uint64_t)&v120, (uint64_t)&v114);
      uint64_t v65 = String.init<A>(describing:)();
      *(void *)&long long v114 = sub_100010680(v65, v66, (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)&v120);
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v67 = *((void *)&v118 + 1);
      uint64_t v68 = v119;
      sub_1000369C4(&v117, *((uint64_t *)&v118 + 1));
      LOBYTE(v67) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 24))(v67, v68);
      *(void *)&long long v114 = 39;
      *((void *)&v114 + 1) = 0xE100000000000000;
      v69._countAndFlagsBits = sub_10012479C(v67);
      String.append(_:)(v69);
      swift_bridgeObjectRelease();
      v70._countAndFlagsBits = 91;
      v70._object = (void *)0xE100000000000000;
      String.append(_:)(v70);
      LOWORD(v125) = word_1003B26D2[(char)v67];
      v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      v72._countAndFlagsBits = 10077;
      v72._object = (void *)0xE200000000000000;
      String.append(_:)(v72);
      *(void *)&long long v114 = sub_100010680(v114, *((unint64_t *)&v114 + 1), (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)&v117);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cannot start resolve for record: %s [%s]", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      long long v73 = v108;
    }
    else
    {
      sub_100010754((uint64_t)&v120);
      sub_100010754((uint64_t)&v117);

      long long v73 = v61;
    }
    ((void (*)(char *, void *))v34)(v73, v112);
    return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v107, v94);
  }
}

uint64_t sub_10002BA9C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = &v15[-v10];
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    long long v12 = a2[1];
    long long v16 = *a2;
    long long v17 = v12;
    __int16 v18 = *((_WORD *)a2 + 16);
    uint64_t v13 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 56))(v15, a3, a4);
    sub_100017210();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    v13(v15, 0);
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t BonjourOffload.stopResolving(record:)(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v93 = a1;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v83 = (uint64_t)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin();
  Swift::String v82 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v90 = (char *)&v77 - v9;
  uint64_t v92 = v7;
  uint64_t v91 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v89 = (char *)&v77 - v10;
  uint64_t v95 = type metadata accessor for Logger();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin();
  long long v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v96 = (char *)&v77 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  long long v17 = (char *)&v77 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v77 - v19;
  uint64_t v21 = (void (*)(unint64_t, char *))*((void *)a3 + 8);
  unint64_t v97 = a2;
  v21(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  uint64_t v80 = v12;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, AssociatedTypeWitness);
  uint64_t v23 = v98;
  uint64_t v106 = v98;
  uint64_t v24 = a3;
  uint64_t v25 = *(void (**)(unint64_t, unint64_t))(*((void *)a3 + 1) + 8);
  unint64_t v79 = *((void *)a3 + 1);
  uint64_t v78 = v25;
  ((void (*)(unint64_t))v25)(v97);
  uint64_t v26 = v93;
  sub_100035FD4(v93, (uint64_t)&v106);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = v23;
  uint64_t v85 = AssociatedTypeWitness;
  uint64_t v81 = v18;
  uint64_t v84 = v20;
  if (v29)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    sub_100035FD4((uint64_t)&v106, (uint64_t)v103);
    sub_100010BCC(&qword_10047CC08);
    uint64_t v32 = String.init<A>(describing:)();
    v103[0] = sub_100010680(v32, v33, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)&v106);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Stopping resolve for %s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v30 = v98;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100010754((uint64_t)&v106);
  }

  uint64_t v34 = *(void (**)(char *, uint64_t))(v94 + 8);
  uint64_t v35 = v95;
  v34(v96, v95);
  sub_100035FD4(v26, (uint64_t)&v106);
  sub_100010BCC(&qword_10047CC08);
  if (!swift_dynamicCast())
  {
    uint64_t v106 = v30;
    uint64_t v49 = v80;
    v78(v97, v79);
    sub_100035FD4(v26, (uint64_t)&v106);
    sub_100035FD4(v26, (uint64_t)v103);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315394;
      sub_100035FD4((uint64_t)&v106, (uint64_t)&v100);
      uint64_t v53 = String.init<A>(describing:)();
      uint64_t v100 = sub_100010680(v53, v54, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)&v106);
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v55 = v104;
      uint64_t v56 = v105;
      sub_1000369C4(v103, v104);
      LOBYTE(v55) = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
      uint64_t v100 = 39;
      unint64_t v101 = 0xE100000000000000;
      v57._countAndFlagsBits = sub_10012479C(v55);
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = 91;
      v58._object = (void *)0xE100000000000000;
      String.append(_:)(v58);
      __int16 v99 = word_1003B26D2[(char)v55];
      v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 10077;
      v60._object = (void *)0xE200000000000000;
      String.append(_:)(v60);
      uint64_t v100 = sub_100010680(v100, v101, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100010754((uint64_t)v103);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Cannot stop resolve for record: %s [%s]", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v61 = v80;
      uint64_t v62 = v95;
    }
    else
    {

      sub_100010754((uint64_t)v103);
      sub_100010754((uint64_t)&v106);
      uint64_t v61 = v49;
      uint64_t v62 = v35;
    }
    v34(v61, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v84, v85);
  }
  uint64_t v37 = v103[0];
  uint64_t v36 = v103[1];
  uint64_t v38 = v104;
  uint64_t v94 = v103[2];
  int v39 = v105;
  int v40 = BYTE1(v105);
  uint64_t v41 = (uint64_t (*)(unint64_t, char *))*((void *)v24 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v41(v97, v24);
  uint64_t v95 = v43;
  uint64_t v96 = (char *)v42;
  uint64_t v80 = v24;
  uint64_t v93 = v37;
  uint64_t v106 = v37;
  uint64_t v107 = v36;
  uint64_t v44 = v94;
  uint64_t v108 = v94;
  uint64_t v109 = v38;
  char v110 = v39;
  char v111 = v40;
  unint64_t v45 = sub_100017210();
  uint64_t v46 = v90;
  uint64_t v47 = v92;
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = v91;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v46, 1, v47) == 1)
  {
    (*(void (**)(char *, uint64_t))(v81 + 8))(v84, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v46, v88);
  }
  unint64_t v79 = v45;
  LODWORD(v95) = v40;
  LODWORD(v96) = v39;
  uint64_t v63 = v44;
  uint64_t v64 = v93;
  unint64_t v65 = (unint64_t)v80;
  unint64_t v66 = v89;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v89, v46, v47);
  if (!(*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 112))(v66, v85)) {
    goto LABEL_18;
  }
  type metadata accessor for BonjourResolver(0);
  uint64_t v67 = swift_dynamicCastClass();
  if (!v67)
  {
    swift_unknownObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_20:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v66, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v84, v85);
  }
  uint64_t v68 = v67 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess();
  uint64_t v69 = v68;
  unint64_t v66 = v89;
  uint64_t v70 = v83;
  sub_1000136F4(v69, v83, &qword_10047CC00);
  uint64_t v71 = type metadata accessor for DNSRecords.SRV();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48))(v70, 1, v71) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000380B4(v70, &qword_10047CC00);
    goto LABEL_20;
  }
  sub_1000380B4(v70, &qword_10047CC00);
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 120))(v66, v85);
  uint64_t v106 = v64;
  uint64_t v107 = v36;
  uint64_t v108 = v63;
  uint64_t v109 = v38;
  char v110 = (char)v96;
  char v111 = v95;
  unint64_t v72 = v65;
  long long v73 = *(uint64_t (**)(void *, unint64_t, unint64_t))(v65 + 56);
  unint64_t v74 = v97;
  long long v75 = (void (*)(void *, void))v73(v103, v97, v72);
  type metadata accessor for Dictionary();
  uint64_t v76 = v82;
  Dictionary.removeValue(forKey:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v76, v88);
  v75(v103, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000203F8(v74, v72);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v89, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v84, v85);
}

Swift::Int sub_10002CA14()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  NSObject.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002CA74()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  NSObject.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10002CAB8()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  NSObject.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10002CB14(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  sub_10003715C();
  return static NSObject.== infix(_:_:)() & ~(v2 ^ v3) & 1;
}

uint64_t (*sub_10002CB70())()
{
  return j__swift_endAccess;
}

void sub_10002CBD0(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 8);
  __int16 v7 = *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8);
  if (!sub_10012625C(v5, v4, v7, *(void *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service), *(void *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8), *(unsigned __int8 *)(v1+ OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 16) | (*(unsigned __int8 *)(v1+ OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 17) << 8)))
  {
    __break(1u);
    return;
  }
  unint64_t v8 = *(void *)a1;
  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1000312E0(a1);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v29 = 136315138;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v30 = DNSRecords.PTR.description.getter();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49[0] = sub_100010680(v30, v32, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to query the TXT record for %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    return;
  }
  uint64_t v13 = *(void *)(v10 + 56) + 16 * v11;
  char v14 = *(unsigned char *)(v13 + 8);
  id v48 = *(id *)v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    id v15 = [v48 serviceSpecificInfo];
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = [v15 txtRecordData];

      if (v17)
      {
        unint64_t v45 = v8;
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v46 = v18;
        unint64_t v47 = v20;
        sub_100013D44(v18, v20);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          os_log_type_t type = v22;
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          v50[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315138;
          buf = v23;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v24 = DNSRecords.PTR.description.getter();
          unint64_t v26 = v25;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v49[0] = sub_100010680(v24, v26, v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, type, "Providing TXT record for %s", buf, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        unint64_t v33 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
        if (v33)
        {
          *(_OWORD *)uint64_t v50 = xmmword_1003B2440;
          swift_unknownObjectRetain();
          sub_100126DE4(v45, v6);
          uint64_t v34 = sub_10011E7CC(15, v5, v4, v7);
          unint64_t v36 = v35;
          sub_100125FAC(v34, v35);
          sub_10000C970(v34, v36);
          long long v37 = *(_OWORD *)v50;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000C970(v37, *((unint64_t *)&v37 + 1));
          sub_100013D44(v46, v47);
          Class v39 = Data._bridgeToObjectiveC()().super.isa;
          sub_10000C970(v46, v47);
          [v33 handleEventType:0 keyData:isa valueData:v39];
          sub_10000C970(v46, v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          sub_10000C970(v46, v47);
        }
        else
        {
          sub_10000C970(v46, v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000C970(v46, v47);
        }
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v40 = sub_10002CB70();
  uint64_t v42 = sub_100169F8C(v49, a1);
  if (*(void *)v41) {
    *(unsigned char *)(v41 + 8) = 1;
  }
  ((void (*)(void *, void))v42)(v49, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t *, void))v40)(v50, 0);
}

BOOL sub_10002D234(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
  unint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8];
  int v6 = v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16];
  BOOL result = sub_10012625C(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8), v5, v4, v6 | (v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 17] << 8));
  if (result)
  {
    uint64_t v9 = *(void *)a1;
    unint64_t v8 = *(void *)(a1 + 8);
    uint64_t v10 = &v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers];
    swift_beginAccess();
    uint64_t v11 = *(void *)v10;
    if (*(void *)(v11 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_1000312E0(a1);
      if (v13)
      {
        id v14 = *(id *)(*(void *)(v11 + 56) + 16 * v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (BOOL)v14;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v15 = v2;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v9, v8, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain_n();
      v19._countAndFlagsBits = 24366;
      v19._object = (void *)0xE200000000000000;
      String.append(_:)(v19);
      if (v6) {
        uint64_t v20 = 7365749;
      }
      else {
        uint64_t v20 = 7365492;
      }
      unint64_t v21 = 0xE300000000000000;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 46;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = 0x6C61636F6CLL;
      v23._object = (void *)0xE500000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      sub_100010680(v5, v4, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to query the discovery result for %s from %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    return 0;
  }
  __break(1u);
  return result;
}

void sub_10002D590(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_10008347C(0, v1, 0);
    uint64_t v4 = sub_100035BC0(v2);
    uint64_t v5 = 0;
    uint64_t v6 = v2 + 64;
    uint64_t v21 = v2 + 80;
    int64_t v22 = v1;
    int v23 = v3;
    uint64_t v24 = v2 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v2 + 32))
    {
      unint64_t v9 = (unint64_t)v4 >> 6;
      if ((*(void *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_23;
      }
      if (*(_DWORD *)(v2 + 36) != v3) {
        goto LABEL_24;
      }
      id v10 = *(id *)(*(void *)(v2 + 56) + 16 * v4);
      unsigned __int8 v25 = [v10 publishID];
      id v11 = [v10 publisherAddress];

      uint64_t v12 = v2;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10008347C(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      id v15 = &_swiftEmptyArrayStorage[2 * v14];
      *((unsigned char *)v15 + 32) = v25;
      v15[5] = v11;
      int64_t v7 = 1 << *(unsigned char *)(v12 + 32);
      if (v4 >= v7) {
        goto LABEL_25;
      }
      uint64_t v6 = v24;
      uint64_t v16 = *(void *)(v24 + 8 * v9);
      if ((v16 & (1 << v4)) == 0) {
        goto LABEL_26;
      }
      uint64_t v2 = v12;
      int v3 = v23;
      if (*(_DWORD *)(v12 + 36) != v23) {
        goto LABEL_27;
      }
      unint64_t v17 = v16 & (-2 << (v4 & 0x3F));
      if (v17)
      {
        int64_t v7 = __clz(__rbit64(v17)) | v4 & 0xFFFFFFFFFFFFFFC0;
        int64_t v8 = v22;
      }
      else
      {
        unint64_t v18 = v9 + 1;
        unint64_t v19 = (unint64_t)(v7 + 63) >> 6;
        int64_t v8 = v22;
        if (v9 + 1 < v19)
        {
          unint64_t v20 = *(void *)(v24 + 8 * v18);
          if (v20)
          {
LABEL_20:
            int64_t v7 = __clz(__rbit64(v20)) + (v18 << 6);
          }
          else
          {
            while (v19 - 2 != v9)
            {
              unint64_t v20 = *(void *)(v21 + 8 * v9++);
              if (v20)
              {
                unint64_t v18 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      uint64_t v4 = v7;
      if (v5 == v8) {
        return;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

void sub_10002D820(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 serviceSpecificInfo];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 instanceName];

    if (v6)
    {
      unint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      unint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      unint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      __int16 v12 = *(unsigned __int8 *)(v2
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service
                               + 16);
      __int16 v13 = *(unsigned __int8 *)(v2
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service
                               + 17);
      v41[0] = v7;
      v41[1] = v9;
      v41[2] = v11;
      v41[3] = v10;
      __int16 v36 = v13;
      __int16 v37 = v12;
      char v42 = v12;
      char v43 = v13;
      unint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess();
      id v15 = a1;
      swift_bridgeObjectRetain_n();
      id v16 = v15;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v38 = v16;
      uint64_t v39 = *v14;
      *unint64_t v14 = 0x8000000000000000;
      sub_100034450((uint64_t)v16, 0, (uint64_t)v41, isUniquelyReferenced_nonNull_native);
      *unint64_t v14 = v39;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v35 = v11;
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        v40[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 136315138;
        uint64_t v34 = v20 + 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v21 = DNSRecords.PTR.description.getter();
        unint64_t v23 = v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100010680(v21, v23, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Providing PTR record for %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v11 = v35;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      uint64_t v24 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
      if (v24)
      {
        swift_unknownObjectRetain();
        uint64_t v25 = sub_10011E7CC(11, v11, v10, v37 | (unsigned __int16)(v36 << 8));
        unint64_t v27 = v26;
        v28.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C970(v25, v27);
        uint64_t v29 = sub_100126E00(v7, v9);
        if (v30 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          uint64_t v32 = v29;
          unint64_t v33 = v30;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000C95C(v32, v33);
        }
        [v24 handleEventType:0 keyData:v28.super.isa valueData:isa];

        swift_unknownObjectRelease();
      }
      sub_10002CBD0((uint64_t)v41);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10002DC58(unsigned __int8 a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess();
  id v7 = a2;
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1000371E0(v8, a1);
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  unsigned __int8 v14 = v13;
  int v15 = ~v13;
  swift_bridgeObjectRelease();

  if (v15)
  {
    unsigned __int8 v66 = v14;
    sub_100028228(&v71, v10, v12, *v6, (uint64_t)v72);
    unint64_t v16 = v72[1];
    unint64_t v17 = v72[3];
    unint64_t v62 = v72[2];
    unint64_t v63 = v72[0];
    __int16 v60 = v74;
    __int16 v61 = v73;

    sub_100028228(&v68, v10, v12, *v6, (uint64_t)&v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v67 = (id)v68;
    int v18 = v69;
    swift_beginAccess();
    sub_100035A84((uint64_t)&v70, v10, v12, (uint64_t)&v71);
    os_log_type_t v19 = v70;
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v18 == 1)
    {
      id v20 = [v67 serviceSpecificInfo];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = [v20 txtRecordData];

        if (v22)
        {
          uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;

          uint64_t v59 = v3;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          unint64_t v57 = v25;
          sub_100013D44(v23, v25);
          unint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.info.getter();
          uint64_t v58 = v23;
          if (os_log_type_enabled(v26, v27))
          {
            NSData v28 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v71 = swift_slowAlloc();
            *(_DWORD *)NSData v28 = 136315138;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v29 = DNSRecords.PTR.description.getter();
            unint64_t v30 = v10;
            unint64_t v32 = v31;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v68 = sub_100010680(v29, v32, (uint64_t *)&v71);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            unint64_t v10 = v30;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removing TXT for %s", v28, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }

          uint64_t v3 = v59;
          unint64_t v33 = *(void **)(v59 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
          if (v33)
          {
            long long v71 = xmmword_1003B2440;
            swift_unknownObjectRetain();
            sub_100126DE4(v63, v16);
            uint64_t v34 = sub_10011E7CC(15, v62, v17, v61 | (unsigned __int16)(v60 << 8));
            unint64_t v36 = v35;
            sub_100125FAC(v34, v35);
            sub_10000C970(v34, v36);
            unint64_t v38 = *((void *)&v71 + 1);
            uint64_t v37 = v71;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            unint64_t v40 = v38;
            uint64_t v3 = v59;
            sub_10000C970(v37, v40);
            sub_100013D44(v58, v57);
            Class v41 = Data._bridgeToObjectiveC()().super.isa;
            sub_10000C970(v58, v57);
            [v33 handleEventType:1 keyData:isa valueData:v41];
            sub_10000C970(v58, v57);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            sub_10000C970(v58, v57);
          }
          else
          {
            sub_10000C970(v58, v57);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000C970(v58, v57);
          }
        }
      }
    }
    uint64_t v64 = v12;
    uint64_t v65 = v10;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v71 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v45 = DNSRecords.PTR.description.getter();
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = sub_100010680(v45, v47, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Removing PTR for %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    id v48 = *(void **)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
    if (v48)
    {
      swift_unknownObjectRetain();
      uint64_t v49 = sub_10011E7CC(11, v62, v17, v61 | (unsigned __int16)(v60 << 8));
      unint64_t v51 = v50;
      v52.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C970(v49, v51);
      uint64_t v53 = sub_100126E00(v63, v16);
      unint64_t v55 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v55 >> 60 == 15)
      {
        Class v56 = 0;
      }
      else
      {
        Class v56 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C95C(v53, v55);
      }
      [v48 handleEventType:1 keyData:v52.super.isa valueData:v56];
      sub_100038018(v65, v64, v66);

      swift_unknownObjectRelease();
    }
    else
    {
      sub_100038018(v65, v64, v66);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10002E448()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
  if (v1)
  {
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v3 = Data._bridgeToObjectiveC()().super.isa;
    [v1 handleEventType:0 keyData:isa valueData:v3];

    swift_unknownObjectRelease();
  }
}

void sub_10002E4EC(void *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = v2;
    id v6 = [a1 instanceName];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      unint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      unint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      __int16 v13 = *(unsigned __int8 *)(v3
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service
                               + 16);
      __int16 v14 = *(unsigned __int8 *)(v3
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service
                               + 17);
      v87[0] = v8;
      v87[1] = v10;
      v87[2] = v12;
      v87[3] = v11;
      char v88 = v13;
      __int16 v83 = v14;
      char v89 = v14;
      int v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess();
      uint64_t v16 = *v15;
      if (!*(void *)(*v15 + 16))
      {
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v17 = sub_1000312E0((uint64_t)v87);
      if ((v18 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return;
      }
      __int16 v71 = v13;
      unint64_t v72 = v8;
      unint64_t v73 = v12;
      unsigned __int8 v74 = v15;
      uint64_t v75 = v3;
      unint64_t v77 = a2 >> 40;
      unint64_t v80 = HIWORD(a2);
      unint64_t v19 = HIDWORD(a2);
      unint64_t v20 = a2 >> 24;
      unint64_t v21 = a2 >> 16;
      unint64_t v22 = a2 >> 8;
      uint64_t v23 = *(void *)(v16 + 56) + 16 * v17;
      *(_DWORD *)os_log_type_t type = *(unsigned __int8 *)(v23 + 8);
      id v24 = *(id *)v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v25 = v24;
      id v26 = [v25 publisherAddress];
      unint64_t v27 = v10;
      unint64_t v28 = WiFiMACAddress.wifiAddress.getter();

      LODWORD(v90) = v28;
      BYTE4(v90) = BYTE4(v28);
      BYTE5(v90) = BYTE5(v28);
      LOBYTE(v84) = v22;
      BYTE1(v84) = v21;
      BYTE2(v84) = v20;
      HIBYTE(v84) = v19;
      LOBYTE(v86) = v77;
      HIBYTE(v86) = v80;
      if (v28 != v84 || WORD2(v90) != v86)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_17:
LABEL_18:

        return;
      }
      unsigned int v30 = [v25 publishID];

      unsigned int v31 = [v25 publishID];
      if (v30 != v31)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      id v32 = [v25 serviceSpecificInfo];

      if (v32 && (id v33 = [v32 txtRecordData], v32, v33))
      {
        uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v81 = v34;
      }
      else
      {
        uint64_t v78 = 0;
        unint64_t v81 = 0xF000000000000000;
      }
      id v35 = [a1 txtRecordData];
      if (v35)
      {
        unint64_t v36 = v35;
        uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        if (v81 >> 60 == 15)
        {
          uint64_t v40 = v37;
          if (v39 >> 60 == 15) {
            goto LABEL_37;
          }
          goto LABEL_29;
        }
        if (v39 >> 60 == 15)
        {
          uint64_t v40 = v37;
          goto LABEL_29;
        }
        sub_100038004(v78, v81);
        char loga = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v78, v81, v37, v39);
        sub_10000C95C(v37, v39);
        sub_10000C95C(v78, v81);
        sub_10000C95C(v78, v81);
        if ((loga & 1) == 0) {
          goto LABEL_30;
        }
      }
      else if (v81 >> 60 != 15)
      {
        uint64_t v40 = 0;
        unint64_t v39 = 0xF000000000000000;
LABEL_29:
        sub_10000C95C(v78, v81);
        sub_10000C95C(v40, v39);
LABEL_30:
        if (*(_DWORD *)type)
        {
          id v41 = [v25 serviceSpecificInfo];

          if (v41)
          {
            id v42 = [v41 txtRecordData];

            if (v42)
            {
              uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v45 = v44;

              uint64_t v46 = v75;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              unint64_t v79 = v45;
              uint64_t v82 = v43;
              sub_100013D44(v43, v45);
              unint64_t v47 = Logger.logObject.getter();
              os_log_type_t v48 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v47, v48))
              {
                log = v47;
                uint64_t v49 = (uint8_t *)swift_slowAlloc();
                *(void *)&long long v90 = swift_slowAlloc();
                *(_DWORD *)uint64_t v49 = 136315138;
                id v67 = v49 + 4;
                buf = v49;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v50 = DNSRecords.PTR.description.getter();
                unint64_t v52 = v51;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_100010680(v50, v52, (uint64_t *)&v90);
                uint64_t v46 = v75;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, log, v48, "Removing TXT for %s", buf, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
              unint64_t v54 = *(void **)(v46
                             + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
              if (v54)
              {
                long long v90 = xmmword_1003B2440;
                swift_unknownObjectRetain();
                sub_100126DE4(v72, v27);
                uint64_t v55 = sub_10011E7CC(15, v73, v11, v71 | (unsigned __int16)(v83 << 8));
                unint64_t v57 = v56;
                sub_100125FAC(v55, v56);
                sub_10000C970(v55, v57);
                long long v58 = v90;
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_10000C970(v58, *((unint64_t *)&v58 + 1));
                sub_100013D44(v82, v79);
                Class v60 = Data._bridgeToObjectiveC()().super.isa;
                sub_10000C970(v82, v79);
                [v54 handleEventType:1 keyData:isa valueData:v60];
                sub_10000C970(v82, v79);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                sub_10000C970(v82, v79);
              }
              else
              {
                sub_10000C970(v82, v79);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10000C970(v82, v79);
              }
              char v53 = 0;
            }
            else
            {
              char v53 = 1;
            }
          }
          else
          {
            char v53 = 1;
          }
        }
        else
        {

          char v53 = 0;
        }
        id v61 = [v25 serviceSpecificInfo:v67];

        if (v61)
        {
          Class v62 = (Class)[a1 txtRecordData];
          if (v62)
          {
            uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v65 = v64;

            Class v62 = Data._bridgeToObjectiveC()().super.isa;
            sub_10000C970(v63, v65);
          }
          [v61 setTxtRecordData:v62];
        }
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v85 = *v74;
        *unsigned __int8 v74 = 0x8000000000000000;
        sub_100034450((uint64_t)v25, v53, (uint64_t)v87, isUniquelyReferenced_nonNull_native);
        *unsigned __int8 v74 = v85;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        sub_10002CBD0((uint64_t)v87);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
LABEL_37:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
}

id sub_10002EE20()
{
  return sub_10002F03C(type metadata accessor for BonjourBrowser);
}

void sub_10002EEDC()
{
}

void sub_10002EF00(void *a1, uint64_t a2)
{
}

id sub_10002F024()
{
  return sub_10002F03C(type metadata accessor for BonjourAdvertiser);
}

id sub_10002F03C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return [super dealloc];
}

void sub_10002F134()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  if (v2)
  {
    uint64_t v4 = *v1;
    uint64_t v3 = v1[1];
    uint64_t v5 = v1[4];
    uint64_t v6 = v1[5];
    uint64_t v27 = v1[3];
    unint64_t v28 = v0;
    unint64_t v25 = v3;
    uint64_t v26 = v4;
    uint64_t v7 = v3;
    unint64_t v8 = v2;
    sub_100037FB0(v4, v7, v2);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 136315138;
      v29[0] = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = DNSRecords.PTR.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100010680(v12, v14, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Providing AAAA record for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    int v15 = *(void **)&v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v15)
    {
      swift_unknownObjectRetain();
      uint64_t v16 = DNSRecords.BrowseHost.keyData.getter(v26, v25, v8, v27);
      unint64_t v18 = v17;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C970(v16, v18);
      v29[0] = v5;
      v29[1] = v6;
      uint64_t v20 = sub_10011A3BC((uint64_t)v29, (uint64_t)&v30);
      unint64_t v22 = v21;
      sub_10003719C(v26, v25, v8);
      Class v23 = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C970(v20, v22);
      [v15 handleEventType:0 keyData:isa valueData:v23];

      swift_unknownObjectRelease();
    }
    else
    {
      sub_10003719C(v26, v25, v8);
    }
    v28[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 1;
  }
}

uint64_t sub_10002F4A4()
{
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DNSRecords.SRV();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess();
  sub_1000136F4(v7, (uint64_t)v2, &qword_10047CC00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_1000380B4((uint64_t)v2, &qword_10047CC00);
  }
  sub_100038110((uint64_t)v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  unint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
  if (v9)
  {
    unint64_t v10 = *(void *)v6;
    unint64_t v11 = *((void *)v6 + 1);
    unint64_t v12 = *((void *)v6 + 2);
    unint64_t v13 = *((void *)v6 + 3);
    __int16 v14 = v6[32];
    __int16 v15 = v6[33];
    long long v26 = xmmword_1003B2440;
    swift_unknownObjectRetain();
    sub_100126DE4(v10, v11);
    uint64_t v16 = sub_10011E7CC(32, v12, v13, v14 | (unsigned __int16)(v15 << 8));
    unint64_t v18 = v17;
    sub_100125FAC(v16, v17);
    sub_10000C970(v16, v18);
    long long v19 = v26;
    v20.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v19, *((unint64_t *)&v19 + 1));
    uint64_t v21 = DNSRecords.SRV.valueData.getter();
    if (v22 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      uint64_t v24 = v21;
      unint64_t v25 = v22;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C95C(v24, v25);
    }
    [v9 handleEventType:0 keyData:v20.super.isa valueData:isa];
    swift_unknownObjectRelease();
  }
  return sub_1000361F0((uint64_t)v6);
}

id sub_10002F7D4(uint64_t a1, void *a2)
{
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v92 = &v79[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DNSRecords.SRV();
  uint64_t v91 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v79[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  unint64_t v10 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for NWEndpoint.Port();
  uint64_t v93 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v13 = &v79[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id result = (id)__chkstk_darwin();
  uint64_t v16 = &v79[-v15];
  if (a2)
  {
    id result = [a2 hostname];
    if (result)
    {
      unint64_t v17 = result;
      uint64_t v87 = a1;
      long long v90 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      [a2 servicePort];
      NWEndpoint.Port.init(rawValue:)();
      uint64_t v21 = v93;
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v93 + 48))(v10, 1, v11) == 1)
      {
        swift_bridgeObjectRelease();
        return (id)sub_1000380B4((uint64_t)v10, &qword_10047CEF0);
      }
      else
      {
        uint64_t v88 = v18;
        unsigned __int16 v86 = (int *)v6;
        unint64_t v22 = v90;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v90, v10, v11);
        int v84 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 16);
        uint64_t v85 = v21 + 16;
        v84(v13, v22, v11);
        id v23 = v2;
        swift_bridgeObjectRetain_n();
        uint64_t v24 = v23;
        unint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.info.getter();
        int v27 = v26;
        BOOL v28 = os_log_type_enabled(v25, v26);
        uint64_t v29 = &qword_10047C000;
        unint64_t v89 = v20;
        if (v28)
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          v95[0] = v82;
          *(_DWORD *)uint64_t v30 = 136315650;
          __int16 v83 = (void (*)(unsigned char *, uint64_t))(v30 + 4);
          uint64_t v31 = *(void *)&v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 8];
          uint64_t v32 = *(void *)&v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 16];
          uint64_t v33 = *(void *)&v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 24];
          char v34 = v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
          char v35 = v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
          uint64_t v96 = *(void *)&v24[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
          uint64_t v97 = v31;
          uint64_t v98 = v32;
          uint64_t v99 = v33;
          char v100 = v34;
          char v101 = v35;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          os_log_t v81 = v25;
          uint64_t v36 = DNSRecords.PTR.description.getter();
          int v80 = v27;
          unint64_t v38 = v37;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = sub_100010680(v36, v38, v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v94 = sub_100010680(v88, v20, v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v30 + 22) = 512;
          LOWORD(v36) = NWEndpoint.Port.rawValue.getter();
          __int16 v83 = *(void (**)(unsigned char *, uint64_t))(v93 + 8);
          v83(v13, v11);
          LOWORD(v94) = v36;
          uint64_t v29 = &qword_10047C000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_t v39 = v81;
          _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v80, "Providing SRV record for %s %s:%hu", (uint8_t *)v30, 0x1Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          __int16 v83 = *(void (**)(unsigned char *, uint64_t))(v21 + 8);
          v83(v13, v11);
          swift_bridgeObjectRelease_n();
        }
        uint64_t v40 = (int *)v24;
        id v41 = v86;
        id v42 = (char *)v40 + v29[454];
        unint64_t v43 = *(void *)v42;
        unint64_t v44 = *((void *)v42 + 1);
        unint64_t v46 = *((void *)v42 + 2);
        unint64_t v45 = *((void *)v42 + 3);
        __int16 v47 = v42[32];
        uint64_t v48 = v42[33];
        v84(&v8[v86[5]], v90, v11);
        __int16 v49 = v48;
        *(void *)unint64_t v8 = v43;
        *((void *)v8 + 1) = v44;
        *((void *)v8 + 2) = v46;
        *((void *)v8 + 3) = v45;
        v8[32] = v47;
        v8[33] = v48;
        uint64_t v50 = &v8[v41[6]];
        unint64_t v51 = v89;
        *uint64_t v50 = v88;
        v50[1] = v51;
        *(_WORD *)&v8[v41[7]] = 0;
        *(_WORD *)&v8[v41[8]] = 0;
        uint64_t v85 = v48;
        unsigned __int16 v86 = v40;
        unint64_t v52 = *(void **)((char *)v40
                       + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
        if (v52)
        {
          *(_OWORD *)uint64_t v95 = xmmword_1003B2440;
          __int16 v53 = v49;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100126DE4(v43, v44);
          uint64_t v54 = sub_10011E7CC(32, v46, v45, v47 | (unsigned __int16)(v53 << 8));
          unint64_t v56 = v55;
          sub_100125FAC(v54, v55);
          sub_10000C970(v54, v56);
          long long v57 = *(_OWORD *)v95;
          v58.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000C970(v57, *((unint64_t *)&v57 + 1));
          uint64_t v59 = DNSRecords.SRV.valueData.getter();
          if (v60 >> 60 == 15)
          {
            Class isa = 0;
          }
          else
          {
            uint64_t v66 = v59;
            unint64_t v67 = v60;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_10000C95C(v66, v67);
          }
          unint64_t v65 = (uint64_t (*)(unsigned char *, uint64_t))v83;
          [v52 handleEventType:0 keyData:v58.super.isa valueData:isa];

          swift_unknownObjectRelease();
          uint64_t v64 = v91;
          uint64_t v63 = (uint64_t)v92;
          unint64_t v62 = v89;
        }
        else
        {
          unint64_t v62 = v89;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v63 = (uint64_t)v92;
          uint64_t v64 = v91;
          unint64_t v65 = (uint64_t (*)(unsigned char *, uint64_t))v83;
        }
        sub_100036960((uint64_t)v8, v63);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v64 + 56))(v63, 0, 1, v41);
        uint64_t v68 = v86;
        uint64_t v69 = (uint64_t)v86 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
        swift_beginAccess();
        sub_10003624C(v63, v69);
        swift_endAccess();
        unint64_t v70 = WiFiMACAddress.wifiAddress.getter();
        unint64_t v71 = WiFiAddress.ipv6LinkLocalAddress.getter(v70 & 0xFFFFFFFFFFFFLL);
        unint64_t v72 = (void *)((char *)v68 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa);
        uint64_t v73 = *(void *)((char *)v68
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa);
        uint64_t v74 = *(void *)((char *)v68
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 8);
        uint64_t v75 = *(void *)((char *)v68
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 16);
        *unint64_t v72 = 27;
        v72[1] = v88;
        v72[2] = v62;
        v72[3] = v85;
        void v72[4] = v71;
        v72[5] = v76;
        v72[6] = v77;
        v72[7] = v78;
        sub_10003719C(v73, v74, v75);
        sub_10002F134();
        sub_1000361F0((uint64_t)v8);
        return (id)v65(v90, v11);
      }
    }
  }
  return result;
}

id sub_10003005C(uint64_t a1)
{
  uint64_t v2 = v1;
  long long v125 = (void *)a1;
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  __int16 v116 = &v110[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v122 = type metadata accessor for NWEndpoint.Port();
  uint64_t v124 = *(void *)(v122 - 8);
  __chkstk_darwin();
  long long v123 = &v110[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  long long v115 = &v110[-v5];
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  uint64_t v7 = &v110[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v110[-v8];
  unint64_t v10 = (int *)type metadata accessor for DNSRecords.SRV();
  uint64_t v11 = *((void *)v10 - 1);
  __chkstk_darwin();
  uint64_t v119 = &v110[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  __int16 v14 = &v110[-v13];
  __chkstk_darwin();
  uint64_t v16 = &v110[-v15];
  __chkstk_darwin();
  uint64_t v18 = &v110[-v17];
  uint64_t v19 = (uint64_t)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess();
  uint64_t v121 = v19;
  sub_1000136F4(v19, (uint64_t)v9, &qword_10047CC00);
  int v20 = (*(uint64_t (**)(unsigned char *, uint64_t, int *))(v11 + 48))(v9, 1, v10);
  long long v114 = v2;
  if (v20 == 1)
  {
    id result = (id)sub_1000380B4((uint64_t)v9, &qword_10047CC00);
    unint64_t v22 = v123;
    uint64_t v23 = v124;
    uint64_t v24 = v125;
    if (!v125) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v117 = v11;
  long long v120 = v10;
  long long v118 = v7;
  sub_100038110((uint64_t)v9, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  sub_100036960((uint64_t)v18, (uint64_t)v16);
  sub_100036960((uint64_t)v18, (uint64_t)v14);
  unint64_t v25 = v2;
  os_log_type_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    *(void *)&long long v128 = v113;
    *(_DWORD *)uint64_t v29 = 136315650;
    uint64_t v30 = *(void *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
    uint64_t v31 = *(void *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
    uint64_t v32 = *(void *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
    char v33 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
    char v34 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
    uint64_t v131 = *(void *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
    uint64_t v132 = v30;
    uint64_t v133 = v31;
    uint64_t v134 = v32;
    char v135 = v33;
    char v136 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_t v112 = v26;
    uint64_t v35 = DNSRecords.PTR.description.getter();
    int v111 = v28;
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v127 = sub_100010680(v35, v37, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    unint64_t v38 = (uint64_t *)&v16[v120[6]];
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    swift_bridgeObjectRetain();
    uint64_t v41 = v39;
    uint64_t v23 = v124;
    *(void *)&long long v127 = sub_100010680(v41, v40, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000361F0((uint64_t)v16);
    *(_WORD *)(v29 + 22) = 512;
    LOWORD(v35) = NWEndpoint.Port.rawValue.getter();
    sub_1000361F0((uint64_t)v14);
    LOWORD(v127) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v42 = v112;
    _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v111, "Removing SRV record for %s %s:%hu", (uint8_t *)v29, 0x1Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v22 = v123;
  }
  else
  {
    sub_1000361F0((uint64_t)v14);

    sub_1000361F0((uint64_t)v16);
    unint64_t v22 = v123;
    uint64_t v23 = v124;
  }
  uint64_t v24 = v125;
  unint64_t v43 = *(void **)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
  if (v43)
  {
    uint64_t v44 = v23;
    unint64_t v45 = *(void *)v18;
    unint64_t v46 = *((void *)v18 + 1);
    unint64_t v47 = *((void *)v18 + 2);
    unint64_t v48 = *((void *)v18 + 3);
    __int16 v49 = v18[32];
    __int16 v50 = v18[33];
    long long v128 = xmmword_1003B2440;
    swift_unknownObjectRetain();
    sub_100126DE4(v45, v46);
    uint64_t v51 = sub_10011E7CC(32, v47, v48, v49 | (unsigned __int16)(v50 << 8));
    unint64_t v53 = v52;
    sub_100125FAC(v51, v52);
    sub_10000C970(v51, v53);
    long long v54 = v128;
    v55.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v54, *((unint64_t *)&v54 + 1));
    uint64_t v56 = DNSRecords.SRV.valueData.getter();
    if (v57 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      uint64_t v59 = v56;
      unint64_t v60 = v57;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C95C(v59, v60);
    }
    [v43 handleEventType:1 keyData:v55.super.isa valueData:isa];

    swift_unknownObjectRelease();
    uint64_t v23 = v44;
    uint64_t v24 = v125;
  }
  uint64_t v11 = v117;
  uint64_t v7 = v118;
  unint64_t v10 = v120;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, int *))(v117 + 56))(v118, 1, 1, v120);
  uint64_t v61 = v121;
  swift_beginAccess();
  sub_10003624C((uint64_t)v7, v61);
  swift_endAccess();
  id result = (id)sub_1000361F0((uint64_t)v18);
  if (v24)
  {
LABEL_13:
    id result = [v24 hostname];
    if (result)
    {
      unint64_t v62 = result;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;

      [v24 servicePort];
      uint64_t v66 = (uint64_t)v116;
      NWEndpoint.Port.init(rawValue:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v66, 1, v122) == 1)
      {
        swift_bridgeObjectRelease();
        return (id)sub_1000380B4(v66, &qword_10047CEF0);
      }
      else
      {
        uint64_t v117 = v11;
        long long v118 = v7;
        unint64_t v67 = v115;
        uint64_t v68 = v122;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v23 + 32))(v115, v66, v122);
        uint64_t v69 = v114;
        __int16 v130 = *(_WORD *)&v114[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 32];
        long long v70 = *(_OWORD *)&v114[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 16];
        long long v128 = *(_OWORD *)&v114[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
        long long v129 = v70;
        long long v139 = v128;
        long long v137 = v70;
        __int16 v138 = v130;
        unint64_t v71 = v119;
        unint64_t v72 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v23 + 16);
        v72(&v119[v10[5]], v67, v68);
        *((_WORD *)v71 + 16) = v130;
        long long v73 = v129;
        *(_OWORD *)unint64_t v71 = v128;
        *((_OWORD *)v71 + 1) = v73;
        uint64_t v74 = (uint64_t *)&v71[v10[6]];
        long long v125 = (void *)v63;
        *uint64_t v74 = v63;
        v74[1] = v65;
        *(_WORD *)&v71[v10[7]] = 0;
        *(_WORD *)&v71[v10[8]] = 0;
        uint64_t v75 = v22;
        v72(v22, v67, v68);
        id v76 = v69;
        swift_bridgeObjectRetain_n();
        uint64_t v77 = (char *)v76;
        sub_100036198((uint64_t)&v139);
        sub_100036198((uint64_t)&v137);
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.info.getter();
        int v80 = v79;
        BOOL v81 = os_log_type_enabled(v78, v79);
        long long v120 = v10;
        if (v81)
        {
          uint64_t v82 = swift_slowAlloc();
          long long v123 = (unsigned char *)swift_slowAlloc();
          *(void *)&long long v127 = v123;
          *(_DWORD *)uint64_t v82 = 136315650;
          sub_100036198((uint64_t)&v139);
          sub_100036198((uint64_t)&v137);
          LODWORD(v116) = v80;
          uint64_t v83 = DNSRecords.PTR.description.getter();
          unint64_t v85 = v84;
          sub_1000361C4((uint64_t)&v139);
          sub_1000361C4((uint64_t)&v137);
          uint64_t v126 = sub_100010680(v83, v85, (uint64_t *)&v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v86 = v122;
          uint64_t v87 = v124;
          swift_bridgeObjectRelease();
          *(_WORD *)(v82 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_100010680((uint64_t)v125, v65, (uint64_t *)&v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v82 + 22) = 512;
          LOWORD(v83) = NWEndpoint.Port.rawValue.getter();
          uint64_t v88 = *(void (**)(unsigned char *, uint64_t))(v87 + 8);
          v88(v75, v86);
          LOWORD(v126) = v83;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v116, "Providing SRV record for %s %s:%hu", (uint8_t *)v82, 0x1Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v88 = *(void (**)(unsigned char *, uint64_t))(v124 + 8);
          v88(v22, v122);
          swift_bridgeObjectRelease_n();
        }
        uint64_t v89 = (uint64_t)v118;
        uint64_t v90 = v117;
        uint64_t v91 = *(void **)&v77[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        if (v91)
        {
          unint64_t v92 = *(void *)v119;
          unint64_t v93 = *((void *)v119 + 1);
          unint64_t v94 = *((void *)v119 + 2);
          unint64_t v95 = *((void *)v119 + 3);
          __int16 v96 = v119[32];
          __int16 v97 = v119[33];
          long long v127 = xmmword_1003B2440;
          swift_unknownObjectRetain();
          sub_100126DE4(v92, v93);
          uint64_t v98 = sub_10011E7CC(32, v94, v95, v96 | (unsigned __int16)(v97 << 8));
          unint64_t v100 = v99;
          sub_100125FAC(v98, v99);
          sub_10000C970(v98, v100);
          long long v101 = v127;
          v102.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000C970(v101, *((unint64_t *)&v101 + 1));
          uint64_t v103 = DNSRecords.SRV.valueData.getter();
          if (v104 >> 60 == 15)
          {
            Class v105 = 0;
          }
          else
          {
            uint64_t v106 = v103;
            unint64_t v107 = v104;
            Class v105 = Data._bridgeToObjectiveC()().super.isa;
            sub_10000C95C(v106, v107);
          }
          [v91 handleEventType:0 keyData:v102.super.isa valueData:v105];

          swift_unknownObjectRelease();
          uint64_t v89 = (uint64_t)v118;
          uint64_t v90 = v117;
        }
        uint64_t v108 = v119;
        sub_100036960((uint64_t)v119, v89);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v90 + 56))(v89, 0, 1, v120);
        uint64_t v109 = v121;
        swift_beginAccess();
        sub_10003624C(v89, v109);
        swift_endAccess();
        sub_1000361F0((uint64_t)v108);
        return (id)((uint64_t (*)(unsigned char *, uint64_t))v88)(v115, v122);
      }
    }
  }
  return result;
}

id sub_100030EC0()
{
  return sub_10002F03C(type metadata accessor for BonjourResolver);
}

uint64_t sub_100030FC4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void sub_100030FF4(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

unint64_t sub_1000310AC(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * a1));
  Swift::Int v2 = Hasher._finalize()();

  return sub_100031B8C(a1, v2);
}

unint64_t sub_100031130(unint64_t a1)
{
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE6(a1));
  Swift::Int v7 = Hasher._finalize()();

  return sub_100031C60(a1 & 0xFFFFFFFFFFFFFFLL, v7);
}

unint64_t sub_100031214(unint64_t a1)
{
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(BYTE5(a1));
  Swift::Int v6 = Hasher._finalize()();

  return sub_100031D78(a1 & 0xFFFFFFFFFFFFLL, v6);
}

unint64_t sub_1000312E0(uint64_t a1)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_WORD *)unint64_t v5 = *(_WORD *)(a1 + 32);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v5[1]);
  sub_1000361C4((uint64_t)&v4);
  Swift::Int v2 = Hasher._finalize()();
  return sub_100031E7C(a1, v2);
}

unint64_t sub_1000313F0(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10003207C(a1, v2);
}

unint64_t sub_100031454(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100032214(a1, v2);
}

unint64_t sub_100031584(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_1000381E0(&qword_10047CF38, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100032484(a1, v2);
}

unint64_t sub_100031638(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000325E0(a1, a2, v4);
}

unint64_t sub_1000316CC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000381E0(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100032774(a1, v2);
}

unint64_t sub_100031764(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100010504(a1, v2);
}

unint64_t sub_1000317A8(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100032934(a1 & 1, v2);
}

unint64_t sub_100031868(unsigned __int8 a1)
{
  Swift::Int v2 = sub_1001E163C();

  return sub_100032A94(a1, v2);
}

unint64_t sub_1000318AC(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100032D50(a1, v2);
}

unint64_t sub_10003197C(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100032F04(a1 & 1, v2);
}

unint64_t sub_100031A20(char a1)
{
  Hasher.init(_seed:)();
  sub_100185E3C(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100033044(a1, v2);
}

unint64_t sub_100031AA8(uint64_t a1)
{
  return sub_100031AC4(a1, (void (*)(uint64_t))sub_1001C9034, (uint64_t (*)(uint64_t))sub_1001C9034);
}

unint64_t sub_100031AC4(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v6 = Hasher._finalize()();
  return sub_1000337C8(a1, v6, a3);
}

uint64_t sub_100031B60(uint64_t a1, uint64_t a2)
{
  return sub_10000DD4C(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
}

unint64_t sub_100031B8C(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    int v7 = (0xDD06050403020100 >> (8 * a1));
    uint64_t v8 = *(void *)(v2 + 48);
    if ((0xDD06050403020100 >> (8 * *(unsigned char *)(v8 + result))) != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if ((0xDD06050403020100 >> (8 * *(unsigned char *)(v8 + result))) == v7) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100031C60(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    int v6 = a1;
    uint64_t v7 = ~v4;
    unint64_t v8 = HIWORD(a1);
    unint64_t v9 = a1 >> 40;
    uint64_t v10 = *(void *)(v2 + 48);
    unint64_t v11 = HIDWORD(a1);
    unint64_t v12 = a1 >> 24;
    unint64_t v13 = a1 >> 16;
    unint64_t v14 = a1 >> 8;
    do
    {
      if (*(unsigned __int8 *)(v10 - result + 8 * result) == v6)
      {
        uint64_t v15 = v10 - result + 8 * result;
        LOBYTE(v17) = v14;
        BYTE1(v17) = v13;
        BYTE2(v17) = v12;
        HIBYTE(v17) = v11;
        LOBYTE(v18) = v9;
        HIBYTE(v18) = v8;
        if (*(_DWORD *)(v15 + 1) == v17 && *(unsigned __int16 *)(v15 + 5) == v18) {
          break;
        }
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_100031D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      LOWORD(v7) = a1;
      BYTE2(v7) = BYTE2(a1);
      HIBYTE(v7) = BYTE3(a1);
      LOBYTE(v8) = BYTE4(a1);
      HIBYTE(v8) = BYTE5(a1);
      if (!(*(_DWORD *)(*(void *)(v2 + 48) + 6 * result) ^ v7 | *(unsigned __int16 *)(*(void *)(v2 + 48)
                                                                                       + 6 * result
                                                                                       + 4) ^ v8))
        break;
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_100031E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = a1;
    uint64_t v16 = ~v3;
    int v15 = *(unsigned __int8 *)(a1 + 33);
    sub_10001D82C();
    do
    {
      uint64_t v6 = *(void *)(v18 + 48) + 40 * v4;
      int v7 = *(unsigned __int8 *)(v6 + 32);
      int v8 = *(unsigned __int8 *)(v6 + 33);
      uint64_t v9 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (StringProtocol.caseInsensitiveCompare<A>(_:)()
        || (char v10 = *(unsigned char *)(v5 + 32), StringProtocol.caseInsensitiveCompare<A>(_:)()))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v7) {
          uint64_t v11 = 7365749;
        }
        else {
          uint64_t v11 = 7365492;
        }
        if (v10) {
          uint64_t v12 = 7365749;
        }
        else {
          uint64_t v12 = 7365492;
        }
        if (v11 == v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if ((v13 & 1) == 0) {
            goto LABEL_4;
          }
        }
        if (v8 == v15) {
          return v4;
        }
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v16;
      uint64_t v5 = v9;
    }
    while (((*(void *)(v17 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10003207C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin();
  int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    int v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100032214(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEE00657275746375;
      uint64_t v8 = 0x7274736172666E69;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 1818523489;
          break;
        case 2:
          uint64_t v8 = 0x67616E614D6E616ELL;
          unint64_t v7 = 0xED0000746E656D65;
          break;
        case 3:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x617461446E616ELL;
          break;
        case 4:
          uint64_t v8 = 0x6E6574614C776F6CLL;
          unint64_t v7 = 0xEA00000000007963;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x7274736172666E69;
      unint64_t v10 = 0xEE00657275746375;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xE400000000000000;
          if (v8 == 1818523489) {
            goto LABEL_15;
          }
          goto LABEL_16;
        case 2:
          unint64_t v10 = 0xED0000746E656D65;
          if (v8 != 0x67616E614D6E616ELL) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 3:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v9 = 0x617461446E616ELL;
          goto LABEL_14;
        case 4:
          unint64_t v10 = 0xEA00000000007963;
          if (v8 != 0x6E6574614C776F6CLL) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
LABEL_14:
          if (v8 != v9) {
            goto LABEL_16;
          }
LABEL_15:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100032484(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1000381E0(&qword_10047CF38, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000325E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    Swift::String v7 = String.lowercased()();
    Swift::String v8 = String.lowercased()();
    if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v6;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = ~v5;
      unint64_t v6 = (v6 + 1) & v11;
      if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
      {
        while (1)
        {
          Swift::String v12 = String.lowercased()();
          Swift::String v13 = String.lowercased()();
          if (v12._countAndFlagsBits == v13._countAndFlagsBits && v12._object == v13._object) {
            break;
          }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v11;
            if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
              continue;
            }
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

unint64_t sub_100032774(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  Swift::String v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    Swift::String v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1000381E0(&qword_10047CF30, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100032934(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x64657463656A6572;
    }
    else {
      uint64_t v6 = 0x6553657669746361;
    }
    if (a1) {
      unint64_t v7 = 0xEF65636976726553;
    }
    else {
      unint64_t v7 = 0xED00006563697672;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x64657463656A6572 : 0x6553657669746361;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xEF65636976726553 : 0xED00006563697672;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_100032A94(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE700000000000000;
      unint64_t v8 = 0x65636976726573;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x6172666E49796DLL;
          break;
        case 2:
          unint64_t v8 = 0x72666E4972656570;
          unint64_t v7 = 0xE900000000000061;
          break;
        case 3:
          unint64_t v7 = 0xE500000000000000;
          unint64_t v8 = 0x424453796DLL;
          break;
        case 4:
          unint64_t v8 = 0x42445372656570;
          break;
        case 5:
          unint64_t v7 = 0x80000001003D8A40;
          unint64_t v8 = 0xD000000000000011;
          break;
        case 6:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x44495353656D6173;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE700000000000000;
      unint64_t v10 = 0x65636976726573;
      switch(v6)
      {
        case 1:
          if (v8 == 0x6172666E49796DLL) {
            goto LABEL_21;
          }
          goto LABEL_22;
        case 2:
          unint64_t v9 = 0xE900000000000061;
          if (v8 != 0x72666E4972656570) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 3:
          unint64_t v9 = 0xE500000000000000;
          if (v8 != 0x424453796DLL) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 4:
          if (v8 != 0x42445372656570) {
            goto LABEL_22;
          }
          goto LABEL_21;
        case 5:
          unint64_t v9 = 0x80000001003D8A40;
          unint64_t v10 = 0xD000000000000011;
          goto LABEL_20;
        case 6:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x44495353656D6173) {
            goto LABEL_22;
          }
          goto LABEL_21;
        default:
LABEL_20:
          if (v8 != v10) {
            goto LABEL_22;
          }
LABEL_21:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_22:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100032D50(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x616974696E497369;
          unint64_t v8 = 0xEB00000000726F74;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0xE800000000000000;
          uint64_t v7 = 0x6E6F697461727564;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE700000000000000;
            if (v7 != 0x65636976726573) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v8 = 0xE700000000000000;
        uint64_t v7 = 0x65636976726573;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x616974696E497369;
      }
      else {
        uint64_t v10 = 0x6E6F697461727564;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xEB00000000726F74;
      }
      else {
        unint64_t v11 = 0xE800000000000000;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_100032F04(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6E6F73616572;
    }
    else {
      uint64_t v6 = 0x65636976726573;
    }
    if (a1) {
      unint64_t v7 = 0xE600000000000000;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
    while (1)
    {
      uint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6E6F73616572 : 0x65636976726573;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xE600000000000000 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_100033044(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      uint64_t v7 = 0x73657479427874;
      unint64_t v8 = 0xE700000000000000;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v7 = 0x73657479427872;
          break;
        case 2:
          uint64_t v7 = 0x7275446C61746F74;
          unint64_t v8 = 0xED00006E6F697461;
          break;
        case 3:
          uint64_t v7 = 0xD000000000000012;
          unint64_t v9 = "serverModeDuration";
          goto LABEL_33;
        case 4:
          uint64_t v7 = 0xD000000000000012;
          unint64_t v9 = "clientModeDuration";
          goto LABEL_33;
        case 5:
          uint64_t v7 = 0xD000000000000011;
          unint64_t v9 = "splitModeDuration";
          goto LABEL_33;
        case 6:
          uint64_t v7 = 0x6565506C61746F74;
          unint64_t v8 = 0xEE00746E756F4372;
          break;
        case 7:
          uint64_t v7 = 0xD000000000000011;
          unint64_t v9 = "routablePeerCount";
          goto LABEL_33;
        case 8:
          uint64_t v7 = 0xD00000000000001DLL;
          unint64_t v9 = "sequenceNumberNotUpdatedCount";
          goto LABEL_33;
        case 9:
          uint64_t v7 = 0xD000000000000018;
          unint64_t v9 = "missingAWStartEventCount";
          goto LABEL_33;
        case 0xA:
          uint64_t v7 = 0x6C62616E45667370;
          unint64_t v8 = 0xEF746E756F436465;
          break;
        case 0xB:
          uint64_t v7 = 0x737265566C647761;
          unint64_t v8 = 0xEB000000006E6F69;
          break;
        case 0xC:
          uint64_t v7 = 0xD000000000000016;
          unint64_t v9 = "infraDisconnectedCount";
          goto LABEL_33;
        case 0xD:
          uint64_t v7 = 0xD000000000000010;
          unint64_t v9 = "selfInfraChannel";
          goto LABEL_33;
        case 0xE:
          uint64_t v10 = "selfInfraChannelFlags";
          goto LABEL_35;
        case 0xF:
          uint64_t v7 = 0xD000000000000010;
          unint64_t v9 = "peerInfraChannel";
          goto LABEL_33;
        case 0x10:
          uint64_t v10 = "peerInfraChannelFlags";
          goto LABEL_35;
        case 0x11:
          uint64_t v7 = 0x6C507265646E6573;
          unint64_t v8 = 0xEE006D726F667461;
          break;
        case 0x12:
          uint64_t v7 = 0x676E697472617473;
          unint64_t v8 = 0xEC00000049535352;
          break;
        case 0x13:
          uint64_t v7 = 0x4D6F727465526E69;
          unint64_t v8 = 0xEB0000000065646FLL;
          break;
        case 0x14:
          uint64_t v7 = 0x7366446F54617363;
          unint64_t v8 = 0xEF6C656E6E616843;
          break;
        case 0x15:
          uint64_t v7 = 0xD000000000000011;
          unint64_t v9 = "csaDuringDfspMode";
          goto LABEL_33;
        case 0x16:
          uint64_t v7 = 0x79786F7250736664;
          unint64_t v8 = 0xEC00000065646F4DLL;
          break;
        case 0x17:
          unsigned int v11 = 1718379891;
          goto LABEL_28;
        case 0x18:
          unsigned int v11 = 1919247728;
LABEL_28:
          uint64_t v7 = v11 | 0x4453734900000000;
          unint64_t v8 = 0xE900000000000042;
          break;
        case 0x19:
          uint64_t v7 = 0xD000000000000013;
          unint64_t v9 = "roamOutOfOtherCount";
          goto LABEL_33;
        case 0x1A:
          uint64_t v10 = "roamOutOfOtherSuccess";
          goto LABEL_35;
        case 0x1B:
          uint64_t v10 = "roamOutOfOtherFailure";
          goto LABEL_35;
        case 0x1C:
          uint64_t v7 = 0xD000000000000017;
          unint64_t v9 = "forceRoamHasChannelsCnt";
LABEL_33:
          unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
          break;
        case 0x1D:
          uint64_t v10 = "forceRoamHasNoChannel";
LABEL_35:
          unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
          uint64_t v7 = 0xD000000000000015;
          break;
        default:
          break;
      }
      unint64_t v12 = 0x73657479427874;
      unint64_t v13 = 0xE700000000000000;
      switch(a1)
      {
        case 1:
          if (v7 == 0x73657479427872) {
            goto LABEL_79;
          }
          goto LABEL_80;
        case 2:
          unint64_t v13 = 0xED00006E6F697461;
          if (v7 != 0x7275446C61746F74) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 3:
          unint64_t v12 = 0xD000000000000012;
          uint64_t v14 = "serverModeDuration";
          goto LABEL_77;
        case 4:
          unint64_t v12 = 0xD000000000000012;
          uint64_t v14 = "clientModeDuration";
          goto LABEL_77;
        case 5:
          unint64_t v12 = 0xD000000000000011;
          uint64_t v14 = "splitModeDuration";
          goto LABEL_77;
        case 6:
          uint64_t v15 = 0x6565506C61746F74;
          uint64_t v16 = 0x746E756F4372;
          goto LABEL_57;
        case 7:
          unint64_t v12 = 0xD000000000000011;
          uint64_t v14 = "routablePeerCount";
          goto LABEL_77;
        case 8:
          unint64_t v12 = 0xD00000000000001DLL;
          uint64_t v14 = "sequenceNumberNotUpdatedCount";
          goto LABEL_77;
        case 9:
          unint64_t v12 = 0xD000000000000018;
          uint64_t v14 = "missingAWStartEventCount";
          goto LABEL_77;
        case 10:
          unint64_t v13 = 0xEF746E756F436465;
          if (v7 != 0x6C62616E45667370) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 11:
          uint64_t v17 = 0x737265566C647761;
          uint64_t v18 = 7237481;
          goto LABEL_61;
        case 12:
          unint64_t v12 = 0xD000000000000016;
          uint64_t v14 = "infraDisconnectedCount";
          goto LABEL_77;
        case 13:
          unint64_t v12 = 0xD000000000000010;
          uint64_t v14 = "selfInfraChannel";
          goto LABEL_77;
        case 14:
          uint64_t v19 = "selfInfraChannelFlags";
          goto LABEL_84;
        case 15:
          unint64_t v12 = 0xD000000000000010;
          uint64_t v14 = "peerInfraChannel";
          goto LABEL_77;
        case 16:
          uint64_t v19 = "peerInfraChannelFlags";
          goto LABEL_84;
        case 17:
          uint64_t v15 = 0x6C507265646E6573;
          uint64_t v16 = 0x6D726F667461;
LABEL_57:
          unint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v7 != v15) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 18:
          uint64_t v20 = 0x676E697472617473;
          uint64_t v21 = 1230197586;
          goto LABEL_67;
        case 19:
          uint64_t v17 = 0x4D6F727465526E69;
          uint64_t v18 = 6644847;
LABEL_61:
          unint64_t v13 = v18 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          if (v7 != v17) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 20:
          unint64_t v13 = 0xEF6C656E6E616843;
          if (v7 != 0x7366446F54617363) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 21:
          unint64_t v12 = 0xD000000000000011;
          uint64_t v14 = "csaDuringDfspMode";
          goto LABEL_77;
        case 22:
          uint64_t v20 = 0x79786F7250736664;
          uint64_t v21 = 1701080909;
LABEL_67:
          unint64_t v13 = v21 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          if (v7 != v20) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 23:
          unsigned int v22 = 1718379891;
          goto LABEL_71;
        case 24:
          unsigned int v22 = 1919247728;
LABEL_71:
          unint64_t v13 = 0xE900000000000042;
          if (v7 != (v22 | 0x4453734900000000)) {
            goto LABEL_80;
          }
          goto LABEL_79;
        case 25:
          unint64_t v12 = 0xD000000000000013;
          uint64_t v14 = "roamOutOfOtherCount";
          goto LABEL_77;
        case 26:
          uint64_t v19 = "roamOutOfOtherSuccess";
          goto LABEL_84;
        case 27:
          uint64_t v19 = "roamOutOfOtherFailure";
          goto LABEL_84;
        case 28:
          unint64_t v12 = 0xD000000000000017;
          uint64_t v14 = "forceRoamHasChannelsCnt";
LABEL_77:
          unint64_t v13 = (unint64_t)(v14 - 32) | 0x8000000000000000;
          goto LABEL_78;
        case 29:
          uint64_t v19 = "forceRoamHasNoChannel";
LABEL_84:
          unint64_t v13 = (unint64_t)(v19 - 32) | 0x8000000000000000;
          if (v7 != 0xD000000000000015) {
            goto LABEL_80;
          }
          goto LABEL_79;
        default:
LABEL_78:
          if (v7 != v12) {
            goto LABEL_80;
          }
LABEL_79:
          if (v8 == v13)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_80:
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1000337C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = a3(*(unsigned __int8 *)(*(void *)(v3 + 48) + v6));
    uint64_t v11 = v10;
    if (v9 == a3(a1) && v11 == v12)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v6;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v5;
      unint64_t v6 = (v6 + 1) & v15;
      if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
      {
        while (1)
        {
          uint64_t v16 = a3(*(unsigned __int8 *)(*(void *)(v3 + 48) + v6));
          uint64_t v18 = v17;
          if (v16 == a3(a1) && v18 == v19) {
            break;
          }
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v21 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v15;
            if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
              continue;
            }
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

double sub_10003395C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10000DD4C(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100170868();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10003803C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10016EA24(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100033A88(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000312E0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100170A50();
    uint64_t v7 = v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10016EBFC(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

double sub_100033B60@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000313F0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100171098();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_10003803C((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_10016F1BC(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100033C8C(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100031454(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100171340();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 24 * v4);
  sub_10016F474(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100033D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000316CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100171B04();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100038110(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_10016F8E0(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100033F34(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_100031764(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100171E44();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_10016FC28(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100033FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100031638(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *char v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10017187C();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = sub_100010BCC((uint64_t *)&unk_10047CF20);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10003804C(v12 + *(void *)(v20 + 72) * v8, a3);
    sub_10016FFC8(v8, v11);
    *char v4 = v11;
    swift_bridgeObjectRelease();
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_100010BCC((uint64_t *)&unk_10047CF20);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

_OWORD *sub_100034178(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100170868();
      goto LABEL_7;
    }
    sub_10016AACC(v15, a4 & 1);
    uint64_t v21 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100010754((uint64_t)v19);
    return sub_10003803C(a1, v19);
  }
LABEL_13:
  sub_10017268C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_10003431C(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000312E0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100170A50();
    goto LABEL_7;
  }
  sub_10016ADCC(v13, a3 & 1);
  unint64_t v18 = sub_1000312E0(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  long long v20 = *(_OWORD *)(a2 + 16);
  long long v23 = *(_OWORD *)a2;
  long long v21 = v20;
  __int16 v22 = *(_WORD *)(a2 + 32);
  sub_1001726F8(v10, a2, a1, v16);
  sub_100036198((uint64_t)&v23);
  sub_100036198((uint64_t)&v21);
}

void sub_100034450(uint64_t a1, char a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000312E0(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;

      *(void *)uint64_t v19 = a1;
      *(unsigned char *)(v19 + 8) = a2 & 1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100170C30();
    goto LABEL_7;
  }
  sub_10016B008(v15, a4 & 1);
  unint64_t v20 = sub_1000312E0(a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  long long v22 = *(_OWORD *)(a3 + 16);
  long long v25 = *(_OWORD *)a3;
  long long v23 = v22;
  __int16 v24 = *(_WORD *)(a3 + 32);
  sub_100172750(v12, a3, a1, a2 & 1, v18);
  sub_100036198((uint64_t)&v25);
  sub_100036198((uint64_t)&v23);
}

_OWORD *sub_100034594(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1000313F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100171098();
      goto LABEL_7;
    }
    sub_10016B618(v17, a3 & 1);
    unint64_t v23 = sub_1000313F0(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001727B0(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v21 = (_OWORD *)(v20[7] + 32 * v14);
  sub_100010754((uint64_t)v21);

  return sub_10003803C(a1, v21);
}

unint64_t sub_10003476C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  unint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100031454(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 24 * v14;

      unint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      *(void *)(v21 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100171340();
    goto LABEL_7;
  }
  sub_10016BA14(v17, a5 & 1);
  unint64_t v23 = sub_100031454(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100172870(v14, a4, a1, a2, a3, v20);
}

uint64_t sub_1000348C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001714FC();
    goto LABEL_7;
  }
  sub_10016BDF4(v15, a4 & 1);
  uint64_t v21 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1001728C0(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100034A54(_OWORD *a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100031584((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1001716B4();
      goto LABEL_7;
    }
    sub_10016C10C(v12, a3 & 1);
    unint64_t v18 = sub_100031584((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFString(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_100010754((uint64_t)v16);
    return sub_10003803C(a1, v16);
  }
LABEL_13:
  sub_1001728C4(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_100034B98(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  BOOL v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1000316CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      return sub_100038178(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100171B04();
    goto LABEL_7;
  }
  sub_10016CB54(v17, a3 & 1);
  unint64_t v24 = sub_1000316CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001729D8(v14, (uint64_t)v11, a1, v20);
}

unint64_t sub_100034D6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100031764(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100171E44();
    goto LABEL_7;
  }
  sub_10016D06C(v15, a4 & 1);
  unint64_t v21 = sub_100031764(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100172AC8(v12, a3, a1, a2, v18);
}

uint64_t sub_100034E9C(uint64_t a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000310AC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      return sub_100038178(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100170E20();
    goto LABEL_7;
  }
  sub_10016B264(v13, a3 & 1);
  unint64_t v20 = sub_1000310AC(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100172B10(v10, a2, a1, v16);
}

_OWORD *sub_100034FF0(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000317A8(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100172480();
      goto LABEL_7;
    }
    sub_10016D918(v13, a3 & 1);
    unint64_t v19 = sub_1000317A8(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BB8(v10, v7, a1, v16);
}

_OWORD *sub_10003512C(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100031868(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10017248C();
      goto LABEL_7;
    }
    sub_10016DC5C(v13, a3 & 1);
    unint64_t v19 = sub_100031868(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BBC(v10, a2, a1, v16);
}

_OWORD *sub_100035268(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000318AC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100172498();
      goto LABEL_7;
    }
    sub_10016E040(v13, a3 & 1);
    unint64_t v19 = sub_1000318AC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BBC(v10, a2, a1, v16);
}

_OWORD *sub_1000353A4(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10003197C(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001724A4();
      goto LABEL_7;
    }
    sub_10016E390(v13, a3 & 1);
    unint64_t v19 = sub_10003197C(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BB8(v10, v7, a1, v16);
}

_OWORD *sub_1000354E0(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100031AC4(a2, (void (*)(uint64_t))sub_100184BC8, (uint64_t (*)(uint64_t))sub_100184BC8);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100172668();
      goto LABEL_7;
    }
    sub_10016E6B8(v13, a3 & 1);
    unint64_t v19 = sub_100031AC4(a2, (void (*)(uint64_t))sub_100184BC8, (uint64_t (*)(uint64_t))sub_100184BC8);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BBC(v10, a2, a1, v16);
}

_OWORD *sub_10003564C(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100031A20(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100172674();
      goto LABEL_7;
    }
    sub_10016E6D8(v13, a3 & 1);
    unint64_t v19 = sub_100031A20(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BBC(v10, a2, a1, v16);
}

_OWORD *sub_100035788(_OWORD *a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100031AC4(a2, (void (*)(uint64_t))sub_1001C9034, (uint64_t (*)(uint64_t))sub_1001C9034);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100172680();
      goto LABEL_7;
    }
    sub_10016E6F8(v13, a3 & 1);
    unint64_t v19 = sub_100031AC4(a2, (void (*)(uint64_t))sub_1001C9034, (uint64_t (*)(uint64_t))sub_1001C9034);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100010754((uint64_t)v17);
    return sub_10003803C(a1, v17);
  }
LABEL_13:

  return sub_100172BBC(v10, a2, a1, v16);
}

void sub_1000358F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001722CC();
    goto LABEL_7;
  }
  sub_10016D608(v15, a4 & 1);
  uint64_t v20 = sub_10000DD4C(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1001728C0(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t sub_100035A84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v5 = v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v20 = *v4;
    *char v4 = 0x8000000000000000;
    sub_100170C30();
    *char v4 = v20;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v11 = *v4, 1 << *(unsigned char *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v11 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v11 + 36) == a3)
  {
    *unint64_t v5 = 0x8000000000000000;
    uint64_t v12 = *(void *)(v11 + 48) + 40 * a2;
    long long v19 = *(_OWORD *)v12;
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v14 = *(void *)(v12 + 24);
    char v15 = *(unsigned char *)(v12 + 32);
    char v16 = *(unsigned char *)(v12 + 33);
    uint64_t v17 = *(void *)(v11 + 56) + 16 * a2;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    *(void *)a1 = v18;
    *(unsigned char *)(a1 + 8) = v17;
    sub_10016EED8(a2, v11);
    *unint64_t v5 = v11;
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a4 = v19;
    *(void *)(a4 + 16) = v13;
    *(void *)(a4 + 24) = v14;
    *(unsigned char *)(a4 + 32) = v15;
    *(unsigned char *)(a4 + 33) = v16;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100035BC0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_100035C48(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047CF70);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100010BCC(&qword_10047CF78);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000136F4(v9, (uint64_t)v5, &qword_10047CF70);
      char v11 = *v5;
      unint64_t result = sub_1000310AC(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v7[6] + result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      unint64_t result = sub_100038110(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100035E0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100010BCC((uint64_t *)&unk_10047CF50);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 48);
  unint64_t result = sub_10000DD4C(v4, v5, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (unsigned char *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v5;
    *(unsigned char *)(v3[7] + result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 24;
    uint64_t v4 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    char v6 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10000DD4C(v4, v15, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000DE0C);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100035F74(uint64_t a1)
{
  return sub_100021880(a1);
}

uint64_t sub_100035F94(uint64_t *a1)
{
  return sub_1000219A8(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100035FB4(uint64_t a1)
{
  return sub_100023534(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100035FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for BonjourResolver(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_10047CED0);
}

uint64_t sub_100036058(uint64_t a1)
{
  return a1;
}

void sub_100036090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C970(a6, a7);
  }
}

uint64_t type metadata accessor for BonjourAdvertiser(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_10047CE10);
}

uint64_t sub_100036110(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100036154(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100036198(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000361C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000361F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003624C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047CC00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000362B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(a6, a7);
  }
}

uint64_t sub_100036314(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Data.Iterator();
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a4 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100013D44(a3, a4);
      sub_100013D44(a3, a4);
      break;
    default:
      break;
  }
  swift_bridgeObjectRetain();
  Data.Iterator.init(_:at:)();
  sub_10000C970(a3, a4);
  sub_1000381E0((unint64_t *)&qword_10047DC30, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if ((v23 & 1) == 0)
  {
    long long v19 = xmmword_1003B2450;
    do
    {
      char v11 = v22;
      sub_100010BCC((uint64_t *)&unk_10047CF90);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = v19;
      *(void *)(v12 + 56) = &type metadata for UInt8;
      *(void *)(v12 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v12 + 32) = v11;
      uint64_t v13 = String.init(format:_:)();
      uint64_t v15 = v14;
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v20;
      a2 = v21;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v23 != 1);
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  return a1;
}

uint64_t sub_100036598(uint64_t a1)
{
  return sub_10002857C(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56)) & 1;
}

uint64_t sub_1000365C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000287CC(a1, a2);
}

uint64_t sub_1000365EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100036624(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003665C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100028128(a1, a2);
}

uint64_t type metadata accessor for BonjourBrowser(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_10047CD78);
}

id sub_1000366A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (objc_class *)type metadata accessor for BonjourResolver(0);
  uint64_t v5 = objc_allocWithZone(v4);
  char v6 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  uint64_t v7 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = 0;
  uint64_t v9 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a1;
  *((_OWORD *)v10 + 1) = v11;
  *((_WORD *)v10 + 16) = *(_WORD *)(a1 + 32);
  uint64_t v12 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_logger];
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  v17.receiver = v5;
  v17.super_class = v4;
  id v15 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  return v15;
}

uint64_t sub_100036830()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036868()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1000368B0()
{
  return sub_1000282F8(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

uint64_t sub_1000368C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013D44(v2, v3);
  return a1;
}

uint64_t sub_100036910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(v2, v3);
  return a1;
}

uint64_t sub_100036960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1000369C4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100036A08()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 74, 7);
}

uint64_t sub_100036A50()
{
  return sub_10002BA9C(*(void *)(v0 + 32), (long long *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100036A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics.Histograms()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AWDLStatistics.AirPlayStatistics.Histograms(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OffloadedServices()
{
  return sub_100038354();
}

uint64_t sub_100036C94()
{
  return type metadata accessor for BonjourBrowser(0);
}

uint64_t sub_100036C9C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100036D4C()
{
  return type metadata accessor for BonjourAdvertiser(0);
}

void sub_100036D54()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_100036E34();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100036E34()
{
  if (!qword_10047CE20)
  {
    type metadata accessor for DNSRecords.SRV();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047CE20);
    }
  }
}

uint64_t sub_100036E8C()
{
  return type metadata accessor for BonjourResolver(0);
}

void sub_100036E94()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_100036E34();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = v3;
  return a1;
}

void destroy for BonjourBrowser.DiscoveredPeer(id *a1)
{
}

uint64_t assignWithCopy for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BonjourBrowser.DiscoveredPeer()
{
  return &type metadata for BonjourBrowser.DiscoveredPeer;
}

unint64_t sub_100037108()
{
  unint64_t result = qword_10047CEE0;
  if (!qword_10047CEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CEE0);
  }
  return result;
}

unint64_t sub_10003715C()
{
  unint64_t result = qword_10047DC50;
  if (!qword_10047DC50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10047DC50);
  }
  return result;
}

uint64_t sub_10003719C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000371E0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = sub_100085FFC(a1);
  if (v6) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(v3 + 36) != v5) {
    goto LABEL_33;
  }
  uint64_t v7 = v4;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  if (v4 != v8)
  {
    uint64_t v9 = v3 + 64;
    int v25 = v5;
    int v26 = v5;
    uint64_t v23 = v3 + 88;
    int v10 = v5;
    unsigned __int8 v24 = a2;
    uint64_t v28 = v3;
    uint64_t v27 = v3 + 64;
    do
    {
      if (v7 < 0 || v7 >= v8)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }
      if (v5 != v10) {
        goto LABEL_29;
      }
      unint64_t v12 = (unint64_t)v7 >> 6;
      if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
        goto LABEL_29;
      }
      uint64_t v13 = *(void **)(*(void *)(v3 + 56) + 16 * v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v14 = v13;
      if ([v14 publishID] == a2)
      {
        sub_10003715C();
        id v15 = [v14 publisherAddress];
        char v16 = static NSObject.== infix(_:_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        a2 = v24;
        if (v16) {
          return;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v3 = v28;
      char v17 = *(unsigned char *)(v28 + 32);
      unint64_t v11 = 1 << v17;
      if (v7 >= 1 << v17) {
        goto LABEL_30;
      }
      uint64_t v9 = v27;
      uint64_t v18 = *(void *)(v27 + 8 * v12);
      if ((v18 & (1 << v7)) == 0) {
        goto LABEL_31;
      }
      int v5 = v26;
      if (*(_DWORD *)(v28 + 36) != v26) {
        goto LABEL_32;
      }
      unint64_t v19 = v18 & (-2 << (v7 & 0x3F));
      if (v19)
      {
        unint64_t v11 = __clz(__rbit64(v19)) | v7 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v20 = v12 + 1;
        unint64_t v21 = (v11 + 63) >> 6;
        if (v12 + 1 < v21)
        {
          unint64_t v22 = *(void *)(v27 + 8 * v20);
          if (!v22)
          {
            unint64_t v20 = v12 + 2;
            if (v12 + 2 >= v21) {
              goto LABEL_7;
            }
            unint64_t v22 = *(void *)(v27 + 8 * v20);
            if (!v22)
            {
              while (v21 - 3 != v12)
              {
                unint64_t v22 = *(void *)(v23 + 8 * v12++);
                if (v22)
                {
                  unint64_t v20 = v12 + 2;
                  goto LABEL_22;
                }
              }
              goto LABEL_7;
            }
          }
LABEL_22:
          unint64_t v11 = __clz(__rbit64(v22)) + (v20 << 6);
        }
      }
LABEL_7:
      uint64_t v8 = 1 << v17;
      uint64_t v7 = v11;
      int v10 = v25;
    }
    while (v11 != v8);
  }
}

uint64_t sub_100037480()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_10002D590(v0);
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (id *)(v2 + 40);
    do
    {
      unsigned __int8 v5 = *((unsigned char *)v4 - 8);
      id v6 = *v4;
      sub_10002DC58(v5, v6);

      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100037548()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047CC00);
  __chkstk_darwin();
  int v111 = (char *)v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v4 = (char *)v97 - v3;
  uint64_t v5 = type metadata accessor for DNSRecords.SRV();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v10 = (char *)v97 - v9;
  __chkstk_darwin();
  unint64_t v12 = (char *)v97 - v11;
  uint64_t v13 = (uint64_t)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess();
  sub_1000136F4(v13, (uint64_t)v4, &qword_10047CC00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_10047CC00);
  }
  else
  {
    uint64_t v108 = v6;
    sub_100038110((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    sub_100036960((uint64_t)v12, (uint64_t)v10);
    sub_100036960((uint64_t)v12, (uint64_t)v8);
    id v14 = v1;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    int v17 = v16;
    BOOL v18 = os_log_type_enabled(v15, v16);
    uint64_t v110 = v5;
    uint64_t v109 = v13;
    if (v18)
    {
      uint64_t v19 = swift_slowAlloc();
      LODWORD(v105) = v17;
      uint64_t v20 = v19;
      uint64_t v107 = swift_slowAlloc();
      *(void *)&long long v121 = v107;
      *(_DWORD *)uint64_t v20 = 136315650;
      uint64_t v103 = v20 + 4;
      uint64_t v21 = *(void *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
      uint64_t v22 = *(void *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
      uint64_t v23 = *(void *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
      char v24 = v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
      char v25 = v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
      uint64_t v113 = *(void *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
      uint64_t v114 = v21;
      uint64_t v115 = v22;
      uint64_t v116 = v23;
      char v117 = v24;
      char v118 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_t v104 = v15;
      uint64_t v26 = DNSRecords.PTR.description.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v119[0] = sub_100010680(v26, v28, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v29 = (uint64_t *)&v10[*(int *)(v110 + 24)];
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
      swift_bridgeObjectRetain();
      uint64_t v32 = v30;
      uint64_t v5 = v110;
      v119[0] = sub_100010680(v32, v31, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000361F0((uint64_t)v10);
      *(_WORD *)(v20 + 22) = 512;
      LOWORD(v26) = NWEndpoint.Port.rawValue.getter();
      sub_1000361F0((uint64_t)v8);
      LOWORD(v119[0]) = v26;
      uint64_t v13 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v33 = v104;
      _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v105, "Removing SRV for %s %s:%hu", (uint8_t *)v20, 0x1Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000361F0((uint64_t)v8);

      sub_1000361F0((uint64_t)v10);
    }
    char v34 = *(void **)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v34)
    {
      unint64_t v35 = *(void *)v12;
      unint64_t v36 = *((void *)v12 + 1);
      unint64_t v37 = *((void *)v12 + 2);
      unint64_t v38 = *((void *)v12 + 3);
      __int16 v39 = v12[32];
      __int16 v40 = v12[33];
      long long v121 = xmmword_1003B2440;
      swift_unknownObjectRetain();
      sub_100126DE4(v35, v36);
      uint64_t v41 = sub_10011E7CC(32, v37, v38, v39 | (unsigned __int16)(v40 << 8));
      unint64_t v43 = v42;
      sub_100125FAC(v41, v42);
      sub_10000C970(v41, v43);
      long long v44 = v121;
      v45.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C970(v44, *((unint64_t *)&v44 + 1));
      uint64_t v46 = DNSRecords.SRV.valueData.getter();
      if (v47 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        uint64_t v49 = v46;
        unint64_t v50 = v47;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C95C(v49, v50);
      }
      [v34 handleEventType:1 keyData:v45.super.isa valueData:isa];
      swift_unknownObjectRelease();

      uint64_t v5 = v110;
      uint64_t v13 = v109;
    }
    sub_1000361F0((uint64_t)v12);
    uint64_t v6 = v108;
  }
  if (v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] == 1)
  {
    uint64_t v51 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
    uint64_t v107 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
    if (v107)
    {
      uint64_t v108 = v6;
      uint64_t v53 = *v51;
      uint64_t v52 = v51[1];
      uint64_t v54 = v51[3];
      NSData v55 = v51[4];
      uint64_t v56 = v51[5];
      uint64_t v57 = v51[6];
      NSData v58 = v1;
      uint64_t v59 = v51[7];
      uint64_t v106 = v58;
      Class v98 = v58;
      uint64_t v100 = v53;
      unint64_t v99 = v52;
      uint64_t v105 = v54;
      os_log_t v104 = v55;
      uint64_t v102 = v56;
      uint64_t v103 = v57;
      uint64_t v101 = v59;
      sub_100037FB0(v53, v52, v107);
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.info.getter();
      BOOL v62 = os_log_type_enabled(v60, v61);
      uint64_t v110 = v5;
      uint64_t v109 = v13;
      if (v62)
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        v119[0] = v64;
        v97[1] = v63 + 4;
        Class v65 = v98;
        uint64_t v66 = *(void *)((char *)v98
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 8);
        uint64_t v67 = *(void *)((char *)v98
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 16);
        uint64_t v68 = *(void *)((char *)v98
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 24);
        char v69 = *((unsigned char *)v98 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 32);
        char v70 = *((unsigned char *)v98 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 33);
        *(void *)&long long v121 = *(void *)((char *)v98
                                     + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        *((void *)&v121 + 1) = v66;
        uint64_t v122 = v67;
        uint64_t v123 = v68;
        char v124 = v69;
        char v125 = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v71 = DNSRecords.PTR.description.getter();
        unint64_t v73 = v72;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = sub_100010680(v71, v73, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Removing AAAA for %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        Class v65 = v98;
      }
      uint64_t v74 = *(void **)((char *)v65
                     + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
      uint64_t v6 = v108;
      uint64_t v1 = v106;
      if (v74)
      {
        swift_unknownObjectRetain();
        uint64_t v75 = v100;
        unint64_t v76 = v99;
        uint64_t v77 = v107;
        uint64_t v78 = DNSRecords.BrowseHost.keyData.getter(v100, v99, v107, v105);
        unint64_t v80 = v79;
        Class v98 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C970(v78, v80);
        v119[0] = (uint64_t)v104;
        v119[1] = v102;
        uint64_t v81 = sub_10011A3BC((uint64_t)v119, (uint64_t)&v120);
        unint64_t v83 = v82;
        uint64_t v84 = v76;
        uint64_t v1 = v106;
        sub_10003719C(v75, v84, v77);
        Class v85 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C970(v81, v83);
        Class v86 = v98;
        [v74 handleEventType:1 keyData:v98 valueData:v85];

        swift_unknownObjectRelease();
      }
      else
      {
        sub_10003719C(v100, v99, v107);
      }
      uint64_t v5 = v110;
      uint64_t v13 = v109;
    }
  }
  uint64_t v87 = &v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v88 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  uint64_t v89 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 8];
  uint64_t v90 = *(void *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  *(_OWORD *)uint64_t v87 = 0u;
  *((_OWORD *)v87 + 1) = 0u;
  *((_OWORD *)v87 + 2) = 0u;
  *((_OWORD *)v87 + 3) = 0u;
  sub_10003719C(v88, v89, v90);
  uint64_t v91 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v111, 1, 1, v5);
  swift_beginAccess();
  sub_10003624C(v91, v13);
  swift_endAccess();
  unint64_t v92 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  unint64_t v93 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  if (v93)
  {
    uint64_t v94 = swift_retain();
    v93(v94);
    sub_100011E30((uint64_t)v93);
    uint64_t v95 = *v92;
  }
  else
  {
    uint64_t v95 = 0;
  }
  *unint64_t v92 = 0;
  v92[1] = 0;
  return sub_100011E30(v95);
}

uint64_t sub_100037FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100037FF4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100038004(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100013D44(a1, a2);
  }
  return a1;
}

uint64_t sub_100038018(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100038030(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_100038030(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_OWORD *sub_10003803C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003804C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_10047CF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000380B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100010BCC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100038110(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100038178(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000381E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100038228(uint64_t a1)
{
  return sub_100020AA0(a1);
}

uint64_t sub_100038248(unsigned __int16 *a1)
{
  return sub_100020D2C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_100038268()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 50, 7);
}

uint64_t sub_1000382A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t *sub_1000382F0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100038354()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100038384@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10003665C(a1, a2);
}

void *OUI.size.unsafeMutableAddressor()
{
  return &static OUI.size;
}

uint64_t static OUI.size.getter()
{
  return 3;
}

uint64_t OUI.init(data:)(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return (unsigned __int16)(a2 << 8) | (a3 << 16) | a1;
}

void *OUI.wifiAlliance.unsafeMutableAddressor()
{
  return &static OUI.wifiAlliance;
}

uint64_t static OUI.wifiAlliance.getter()
{
  return 10121040;
}

void *OUI.apple.unsafeMutableAddressor()
{
  return &static OUI.apple;
}

uint64_t static OUI.apple.getter()
{
  return 15865600;
}

void *OUI.ieee80211.unsafeMutableAddressor()
{
  return &static OUI.ieee80211;
}

uint64_t static OUI.ieee80211.getter()
{
  return 11276032;
}

uint64_t OUI.hash(into:)(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v3 = a2 >> 8;
  unsigned int v4 = HIWORD(a2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003B2760;
  *(unsigned char *)(v5 + 32) = v2;
  *(unsigned char *)(v5 + 33) = v3;
  *(unsigned char *)(v5 + 34) = v4;
  uint64_t v6 = sub_1001265EC(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  Data.hash(into:)();

  return sub_10000C970(v6, v8);
}

uint64_t static OUI.== infix(_:_:)(int a1, int a2)
{
  return sub_10003916C(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
}

uint64_t OUI.description.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  unsigned int v3 = HIWORD(a1);
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  uint64_t v34 = v5;
  __chkstk_darwin();
  unint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  long long v35 = xmmword_1003B2760;
  *(_OWORD *)(v8 + 16) = xmmword_1003B2760;
  *(unsigned char *)(v8 + 32) = v1;
  *(unsigned char *)(v8 + 33) = v2;
  char v9 = v3;
  *(unsigned char *)(v8 + 34) = v3;
  uint64_t v10 = sub_1001265EC(v8);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_1001265EC((uint64_t)&off_10044FCA0);
  unint64_t v15 = v14;
  char v16 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v10, v12, v13, v14);
  sub_10000C970(v13, v15);
  sub_10000C970(v10, v12);
  if (v16) {
    return 0x696C6C4169466957;
  }
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v35;
  *(unsigned char *)(v18 + 32) = v1;
  *(unsigned char *)(v18 + 33) = v2;
  *(unsigned char *)(v18 + 34) = v9;
  uint64_t v19 = sub_1001265EC(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  switch(v21 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100013D44(v19, v21);
      sub_100013D44(v19, v21);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  unint64_t v31 = v21;
  uint64_t v32 = v19;
  sub_10000C970(v19, v21);
  sub_100039280();
  uint64_t v22 = v33;
  dispatch thunk of IteratorProtocol.next()();
  if (v39)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v23 = 0xE000000000000000;
    long long v35 = xmmword_1003B2450;
    do
    {
      char v24 = v38;
      sub_100010BCC((uint64_t *)&unk_10047CF90);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = v35;
      *(void *)(v25 + 56) = &type metadata for UInt8;
      *(void *)(v25 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v25 + 32) = v24;
      uint64_t v26 = String.init(format:_:)();
      unint64_t v28 = v27;
      uint64_t v36 = v17;
      unint64_t v37 = v23;
      swift_bridgeObjectRetain();
      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v36;
      unint64_t v23 = v37;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v39 != 1);
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v22);
  sub_10000C970(v32, v31);
  return v17;
}

Swift::Int OUI.hashValue.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  unsigned int v3 = HIWORD(a1);
  Hasher.init(_seed:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003B2760;
  *(unsigned char *)(v4 + 32) = v1;
  *(unsigned char *)(v4 + 33) = v2;
  *(unsigned char *)(v4 + 34) = v3;
  uint64_t v5 = sub_1001265EC(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v5, v7);
  return Hasher._finalize()();
}

Swift::Int sub_1000388D4()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  Hasher.init(_seed:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003B2760;
  *(_WORD *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 34) = v2;
  uint64_t v4 = sub_1001265EC(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v4, v6);
  return Hasher._finalize()();
}

uint64_t sub_10003897C()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003B2760;
  *(_WORD *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 34) = v2;
  uint64_t v4 = sub_1001265EC(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  Data.hash(into:)();

  return sub_10000C970(v4, v6);
}

Swift::Int sub_100038A18()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  Hasher.init(_seed:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003B2760;
  *(_WORD *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 34) = v2;
  uint64_t v4 = sub_1001265EC(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v4, v6);
  return Hasher._finalize()();
}

uint64_t sub_100038ABC()
{
  return OUI.description.getter(*v0 | (*((unsigned __int8 *)v0 + 2) << 16));
}

uint64_t sub_100038ACC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003916C(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t OUI.init(from:)(void *a1)
{
  return sub_1000392D8(a1) & 0xFFFFFF;
}

uint64_t OUI.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

uint64_t sub_100038C04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000392D8(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_100038C40(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

uint64_t sub_100038D44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10009BE04((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100038E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10009BE04(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10003913CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100013D44(a3, a4);
                  sub_100013D44(a1, a2);
                  char v17 = sub_100038E1C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000C970(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100013D44(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100038E1C(v21, v22, v20, a3, a4);
                  sub_10000C970(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100013D44(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100013D44(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100038D44(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000C970(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10003916C(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIWORD(a1);
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1003B2760;
  *(unsigned char *)(v8 + 32) = v3;
  *(unsigned char *)(v8 + 33) = v4;
  *(unsigned char *)(v8 + 34) = v5;
  uint64_t v9 = sub_1001265EC(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1003B2760;
  *(unsigned char *)(v12 + 32) = v2;
  *(unsigned char *)(v12 + 33) = v6;
  *(unsigned char *)(v12 + 34) = v7;
  uint64_t v13 = sub_1001265EC(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  char v16 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v11, v13, v15);
  sub_10000C970(v13, v15);
  sub_10000C970(v9, v11);
  return v16 & 1;
}

unint64_t sub_100039280()
{
  unint64_t result = qword_10047DC30;
  if (!qword_10047DC30)
  {
    type metadata accessor for Data.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DC30);
  }
  return result;
}

uint64_t sub_1000392D8(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v7, v8);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v7, v8);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v7, v8);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100010754((uint64_t)v7);
  sub_100010754((uint64_t)a1);
  return v6 | (v5 << 8) | (v4 << 16);
}

uint64_t sub_100039448(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_10003949C()
{
  unint64_t result = qword_10047CFB0;
  if (!qword_10047CFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OUI()
{
  return &type metadata for OUI;
}

uint64_t sub_100039500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13[1] = a1;
  v13[3] = a3;
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin();
  unsigned __int8 v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)v13 - v7;
  __chkstk_darwin();
  unint64_t v10 = (char *)v13 - v9;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  unint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v8, a2);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  dispatch thunk of static BinaryInteger.~ prefix(_:)();
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  v11(v6, a2);
  v11(v8, a2);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a2);
}

uint64_t FixedWidthInteger.fourByteAligned.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin();
  unsigned __int8 v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  sub_100039500((uint64_t)v6, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
}

uint64_t static FixedWidthInteger.random.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v40 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  __chkstk_darwin();
  char v38 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v31 - v9;
  unint64_t v11 = *(void **)(a1 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = type metadata accessor for ClosedRange();
  uint64_t v39 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v37 = (char *)&v31 - v18;
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v32 = TupleTypeMetadata2;
    uint64_t v33 = v16;
    uint64_t v20 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v34 = a2;
    uint64_t v35 = v4;
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v11[4];
    v21(v10, v15, a1);
    v21(v20, v13, a1);
    uint64_t v22 = v38;
    unint64_t v23 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
    char v24 = (void (*)(char *, char *, uint64_t))v11[2];
    v24(v38, v10, a1);
    v24(v23, v20, a1);
    uint64_t v25 = v36;
    v21(v36, v22, a1);
    uint64_t v26 = (void (*)(char *, uint64_t))v11[1];
    v26(v23, a1);
    unint64_t v27 = &v22[*(int *)(v32 + 48)];
    v21(v22, v10, a1);
    v21(v27, v20, a1);
    uint64_t v28 = v33;
    v21(&v25[*(int *)(v33 + 36)], v27, a1);
    v26(v22, a1);
    uint64_t v29 = v39;
    uint64_t v30 = v37;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v37, v25, v28);
    static FixedWidthInteger.random(in:)();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v30, v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t FixedWidthInteger.init(bitOffsets:)(uint64_t a1)
{
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      Swift::UInt v4 = *(void *)(a1 + 8 * i + 32);
      FixedWidthInteger.set(bitOffset:)(v4);
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall FixedWidthInteger.set(bitOffset:)(Swift::UInt bitOffset)
{
  Swift::UInt v12 = bitOffset;
  uint64_t v2 = v1;
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - v6;
  Swift::UInt v8 = v12;
  uint64_t v9 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if (v9 < 1 || v9 <= v8)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    Swift::UInt v13 = v8;
    sub_100039FE4();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    unint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
    v10(v5, v2);
    dispatch thunk of static BinaryInteger.|= infix(_:_:)();
    v10(v7, v2);
  }
}

unint64_t sub_100039FE4()
{
  unint64_t result = qword_10047CFB8;
  if (!qword_10047CFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFB8);
  }
  return result;
}

Swift::Void __swiftcall FixedWidthInteger.clear(bitOffset:)(Swift::UInt bitOffset)
{
  uint64_t v3 = v1;
  Swift::UInt v15 = bitOffset;
  v14[1] = *(void *)(v2 + 8);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  Swift::UInt v8 = (char *)v14 - v7;
  __chkstk_darwin();
  unint64_t v10 = (char *)v14 - v9;
  Swift::UInt v11 = v15;
  uint64_t v12 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if (v12 < 1 || v12 <= v11)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    Swift::UInt v16 = v11;
    sub_100039FE4();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    Swift::UInt v13 = *(void (**)(char *, uint64_t))(v4 + 8);
    v13(v6, v3);
    dispatch thunk of static BinaryInteger.~ prefix(_:)();
    v13(v8, v3);
    dispatch thunk of static BinaryInteger.&= infix(_:_:)();
    v13(v10, v3);
  }
}

unint64_t FixedWidthInteger.bytesRequiredToRepresentBitOffset.getter(uint64_t a1, uint64_t a2)
{
  int64_t v55 = *(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v52 = (char *)&v49 - v4;
  uint64_t v5 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v56 = (char *)&v49 - v7;
  __chkstk_darwin();
  NSData v58 = (char *)&v49 - v8;
  __chkstk_darwin();
  unint64_t v10 = (char *)&v49 - v9;
  __chkstk_darwin();
  uint64_t v57 = (char *)&v49 - v11;
  __chkstk_darwin();
  Swift::UInt v13 = (char *)&v49 - v12;
  __chkstk_darwin();
  Swift::UInt v15 = (char *)&v49 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18((char *)&v49 - v16, v2, a1);
  char v19 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v18(v15, (uint64_t)v17, a1);
  if ((v19 & 1) == 0)
  {
    unint64_t v27 = v15;
    char v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v27, a1);
    goto LABEL_22;
  }
  uint64_t v20 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v51 = v5;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v21 = v5 + 8;
  unint64_t v23 = v15;
  char v24 = v22;
  v22(v23, a1);
  if (v20 <= 64) {
    goto LABEL_21;
  }
  v18(v13, (uint64_t)v17, a1);
  int64_t v60 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v25 = dispatch thunk of BinaryInteger._lowWord.getter();
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v13, a1);
      goto LABEL_16;
    }
    sub_10003AAFC();
    uint64_t v50 = v21;
    uint64_t v34 = v57;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v32 = v34;
    uint64_t v33 = a1;
    goto LABEL_11;
  }
  uint64_t v49 = v24;
  uint64_t v50 = v21;
  char v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v28 & 1) == 0)
  {
    if (v29 < 64)
    {
      uint64_t v25 = dispatch thunk of BinaryInteger._lowWord.getter();
      char v24 = v49;
      unint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v13, a1);
LABEL_16:
      uint64_t v5 = v51;
      if (v25 < v60) {
        goto LABEL_41;
      }
      goto LABEL_22;
    }
    char v24 = v49;
    v49(v13, a1);
LABEL_21:
    uint64_t v5 = v51;
    goto LABEL_22;
  }
  if (v29 > 64)
  {
    sub_10003AAFC();
    uint64_t v30 = v57;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v32 = v30;
    uint64_t v33 = a1;
    char v24 = v49;
LABEL_11:
    v24(v32, v33);
    unint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v13, a1);
    uint64_t v5 = v51;
    if (v31) {
      goto LABEL_41;
    }
    goto LABEL_22;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v35 = v57;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LODWORD(v55) = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v36 = v35;
  char v24 = v49;
  v49(v36, a1);
  uint64_t v37 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v54, v13, a1);
  if (v55)
  {
LABEL_40:
    unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v24)(v37, a1);
LABEL_41:
    __break(1u);
    return result;
  }
  int64_t v55 = v60;
  uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
  unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v24)(v37, a1);
  uint64_t v5 = v51;
  if (v38 < v55) {
    goto LABEL_41;
  }
LABEL_22:
  uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v18(v10, (uint64_t)v17, a1);
  if (v39 < 65)
  {
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v24(v10, a1);
    if (v45 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_34;
    }
  }
  else
  {
    v24(v10, a1);
  }
  uint64_t v40 = v58;
  v18(v58, (uint64_t)v17, a1);
  int64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v41)
  {
    if (v42 > 64)
    {
      sub_10003AAFC();
      unint64_t v43 = v57;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v37 = dispatch thunk of static Comparable.< infix(_:_:)();
      v24(v43, a1);
      long long v44 = v40;
      goto LABEL_33;
    }
LABEL_31:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v24(v40, a1);
    goto LABEL_34;
  }
  if (v42 <= 63) {
    goto LABEL_31;
  }
  uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v46 = v57;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v57, v40, a1);
  sub_10003AAFC();
  unint64_t v47 = v56;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v37 = dispatch thunk of static Comparable.< infix(_:_:)();
  v24(v47, a1);
  long long v44 = v46;
LABEL_33:
  v24(v44, a1);
  if (v37)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_34:
  uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
  v24(v17, a1);
  uint64_t v48 = v37 + 7;
  if (__OFADD__(v37, 7))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v48 < 0) {
    uint64_t v48 = v37 + 14;
  }
  return v48 & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_10003AAFC()
{
  unint64_t result = qword_10047CFC0;
  if (!qword_10047CFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFC0);
  }
  return result;
}

uint64_t FixedWidthInteger.retryText.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      uint64_t v23 = 1;
      sub_10003AAFC();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, a1);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, v1, a1);
    uint64_t v10 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, a1);
    goto LABEL_11;
  }
  uint64_t v22 = v4;
  char v11 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v12 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v11 & 1) == 0)
  {
    if (v12 < 64)
    {
      uint64_t v17 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v1, a1);
      uint64_t v10 = dispatch thunk of BinaryInteger._lowWord.getter();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v8, a1);
LABEL_11:
      char v16 = v10 == 1;
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v12 > 64)
  {
LABEL_12:
    uint64_t v23 = 1;
    sub_10003AAFC();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, a1);
    goto LABEL_15;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v13 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v14 = v22;
  Swift::UInt v15 = *(void (**)(char *, uint64_t))(v22 + 8);
  v15(v8, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v6, v2, a1);
  char v16 = (v13 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter() == 1;
  v15(v6, a1);
LABEL_15:
  if (v16) {
    uint64_t v18 = 0x7972746572;
  }
  else {
    uint64_t v18 = 0x73656972746572;
  }
  if (v16) {
    unint64_t v19 = 0xE500000000000000;
  }
  else {
    unint64_t v19 = 0xE700000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t UnsafeMutablePointer<A>.set<A>(bit:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v110 = a2;
  uint64_t v104 = *(void *)(*(void *)(*(void *)(a4 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v103 = (char *)&v99 - v6;
  uint64_t v7 = (char *)*((void *)a3 - 1);
  __chkstk_darwin();
  uint64_t v100 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v116 = (char *)&v99 - v9;
  __chkstk_darwin();
  int v111 = (char *)&v99 - v10;
  __chkstk_darwin();
  uint64_t v106 = (char *)&v99 - v11;
  __chkstk_darwin();
  uint64_t v101 = (char *)&v99 - v12;
  __chkstk_darwin();
  uint64_t v105 = (char *)&v99 - v13;
  __chkstk_darwin();
  uint64_t v112 = (char *)&v99 - v14;
  __chkstk_darwin();
  uint64_t v114 = (char *)&v99 - v15;
  __chkstk_darwin();
  uint64_t v109 = (uint64_t)&v99 - v16;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v99 - v17;
  __chkstk_darwin();
  uint64_t v108 = (char *)&v99 - v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v99 - v20;
  __chkstk_darwin();
  uint64_t v23 = (char *)&v99 - v22;
  __chkstk_darwin();
  unint64_t v25 = (char *)&v99 - v24;
  uint64_t v26 = (void (*)(char *, uint64_t, char *))*((void *)v7 + 2);
  uint64_t v113 = (char *)a1;
  v26((char *)&v99 - v24, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v115 = v26;
  v26(v23, (uint64_t)v25, a3);
  if ((a1 & 1) == 0)
  {
    uint64_t v21 = (char *)*((void *)v7 + 1);
    ((void (*)(char *, char *))v21)(v23, a3);
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v7;
    char v28 = (void (*)(char *, char *, char *))v115;
    goto LABEL_20;
  }
  uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v107 = v7;
  char v117 = (char *)*((void *)v7 + 1);
  ((void (*)(char *, char *))v117)(v23, a3);
  if (v27 <= 64)
  {
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    uint64_t v21 = v117;
    char v28 = (void (*)(char *, char *, char *))v115;
    goto LABEL_20;
  }
  char v28 = (void (*)(char *, char *, char *))v115;
  v115(v21, (uint64_t)v25, a3);
  int64_t v119 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v30 & 1) == 0)
    {
      if (v31 >= 64)
      {
        uint64_t v45 = v21;
        uint64_t v21 = v117;
        ((void (*)(char *, char *))v117)(v45, a3);
        uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    if (v31 <= 64) {
      goto LABEL_16;
    }
LABEL_10:
    sub_10003AAFC();
    uint64_t v32 = v108;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v33 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v34 = v32;
    uint64_t v35 = v117;
    ((void (*)(char *, char *))v117)(v34, a3);
    uint64_t v36 = v21;
    uint64_t v21 = v35;
    ((void (*)(char *, char *))v35)(v36, a3);
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    if (v33) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v38 = v21;
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v38, a3);
  uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
  if (v37 < v119)
  {
LABEL_15:
    do
    {
      __break(1u);
LABEL_16:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v39 = v108;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      LODWORD(v99) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v40 = v39;
      uint64_t v41 = (uint64_t)v117;
      ((void (*)(char *, char *))v117)(v40, a3);
      uint64_t v42 = v101;
      (*((void (**)(char *, char *, char *))v107 + 4))(v101, v21, a3);
      if (v99) {
        goto LABEL_73;
      }
      int64_t v99 = v119;
      uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, char *))v41)(v42, a3);
      BOOL v44 = v43 < v99;
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
      uint64_t v21 = (char *)v41;
    }
    while (v44);
  }
LABEL_20:
  uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v28(v18, v25, a3);
  char v117 = v21;
  if (v46 >= 65)
  {
    ((void (*)(char *, char *))v21)(v18, a3);
    goto LABEL_22;
  }
  uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v41 = (unint64_t)(v29 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  ((void (*)(char *, char *))v21)(v18, a3);
  if (v54 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_22:
    uint64_t v47 = v109;
    v28((char *)v109, v25, a3);
    int64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
    char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v48)
    {
      if (v49 > 64)
      {
        sub_10003AAFC();
        uint64_t v50 = v108;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v51 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v52 = v47;
        uint64_t v41 = (uint64_t)(v29 + 1);
        uint64_t v53 = v50;
        uint64_t v21 = v117;
        ((void (*)(char *, char *))v117)(v53, a3);
        ((void (*)(uint64_t, char *))v21)(v52, a3);
        if (v51) {
          goto LABEL_50;
        }
        goto LABEL_31;
      }
    }
    else if (v49 > 63)
    {
      uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v107 = (char *)v29;
      uint64_t v74 = v108;
      v29[4](v108, v47, a3);
      sub_10003AAFC();
      uint64_t v75 = v105;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v41 = (uint64_t)(v29 + 1);
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
      ((void (*)(char *, char *))v117)(v75, a3);
      uint64_t v77 = v74;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v77, a3);
      if ((v76 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_50;
    }
    uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v56 = v47;
    uint64_t v41 = (uint64_t)(v29 + 1);
    ((void (*)(uint64_t, char *))v21)(v56, a3);
    if (v119 >= v55)
    {
LABEL_31:
      uint64_t v41 = v41 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      goto LABEL_32;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_32:
  uint64_t v109 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, char *))v21)(v25, a3);
  unint64_t v25 = v114;
  v28(v114, v113, a3);
  char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
  NSData v58 = v112;
  v28(v112, v25, a3);
  if ((v57 & 1) == 0)
  {
    Class v65 = v58;
    goto LABEL_38;
  }
  uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *))v21)(v58, a3);
  if (v59 <= 64) {
    goto LABEL_39;
  }
  int64_t v60 = v106;
  v28(v106, v25, a3);
  int64_t v119 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      sub_10003AAFC();
      uint64_t v88 = v108;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v89 = v60;
      char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v91 = v88;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v91, a3);
      ((void (*)(char *, char *))v21)(v89, a3);
      if (v90) {
        goto LABEL_67;
      }
      goto LABEL_39;
    }
    uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter();
    BOOL v62 = v60;
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    goto LABEL_66;
  }
  char v82 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v82 & 1) == 0)
  {
    if (v83 < 64)
    {
      unint64_t v92 = v106;
      uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v64 = v92;
LABEL_66:
      ((void (*)(char *, char *))v21)(v64, a3);
      if (v63 < v119) {
        goto LABEL_67;
      }
      goto LABEL_39;
    }
    Class v65 = v106;
LABEL_38:
    ((void (*)(char *, char *))v21)(v65, a3);
    goto LABEL_39;
  }
  if (v83 <= 64) {
    goto LABEL_68;
  }
  sub_10003AAFC();
  uint64_t v84 = v108;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  Class v85 = v106;
  char v86 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v87 = v84;
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v87, a3);
  ((void (*)(char *, char *))v21)(v85, a3);
  if (v86)
  {
LABEL_67:
    do
    {
      __break(1u);
LABEL_68:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      unint64_t v93 = v108;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v94 = v106;
      char v95 = dispatch thunk of static Comparable.< infix(_:_:)();
      __int16 v96 = v93;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v96, a3);
      uint64_t v107 = (char *)v29;
      uint64_t v42 = v100;
      v29[4](v100, (uint64_t)v94, a3);
      if (v95) {
        goto LABEL_74;
      }
      int64_t v97 = v119;
      uint64_t v98 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, char *))v21)(v42, a3);
      BOOL v44 = v98 < v97;
      unint64_t v25 = v114;
      char v28 = (void (*)(char *, char *, char *))v115;
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    }
    while (v44);
  }
LABEL_39:
  uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v67 = v111;
  v28(v111, v25, a3);
  if (v66 < 65)
  {
    uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
    ((void (*)(char *, char *))v21)(v67, a3);
    if (v72 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_53;
    }
  }
  else
  {
    ((void (*)(char *, char *))v21)(v67, a3);
  }
  uint64_t v21 = (char *)v29;
  v28(v116, v25, a3);
  int64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
  char v68 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v68)
  {
    if (v69 > 64)
    {
      sub_10003AAFC();
      char v70 = v108;
      uint64_t v42 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v71 = v116;
      goto LABEL_52;
    }
LABEL_48:
    unint64_t v73 = v116;
    dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v21 = v117;
    ((void (*)(char *, char *))v117)(v73, a3);
    goto LABEL_53;
  }
  if (v69 <= 63) {
    goto LABEL_48;
  }
LABEL_51:
  uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v71 = v108;
  (*((void (**)(char *, char *, char *))v21 + 4))(v108, v116, a3);
  sub_10003AAFC();
  char v70 = v105;
  uint64_t v42 = a3;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
LABEL_52:
  char v78 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v70, a3);
  ((void (*)(char *, char *))v21)(v71, a3);
  if (v78)
  {
    __break(1u);
LABEL_73:
    ((void (*)(char *, char *))v41)(v42, a3);
    __break(1u);
LABEL_74:
    ((void (*)(char *, char *))v21)(v42, a3);
    __break(1u);
    goto LABEL_75;
  }
LABEL_53:
  uint64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(char *, char *))v21)(v25, a3);
  uint64_t v81 = v79 & 7;
  if (v79 <= 0) {
    uint64_t v81 = -(-v79 & 7);
  }
  if ((v81 & 0x8000000000000000) == 0)
  {
    *(unsigned char *)(v110 + v109 / 8) |= 1 << v81;
    return result;
  }
LABEL_75:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeMutablePointer<A>.clear<A>(bit:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v110 = a2;
  uint64_t v104 = *(void *)(*(void *)(*(void *)(a4 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v103 = (char *)&v99 - v6;
  uint64_t v7 = (char *)*((void *)a3 - 1);
  __chkstk_darwin();
  uint64_t v100 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v116 = (char *)&v99 - v9;
  __chkstk_darwin();
  int v111 = (char *)&v99 - v10;
  __chkstk_darwin();
  uint64_t v106 = (char *)&v99 - v11;
  __chkstk_darwin();
  uint64_t v101 = (char *)&v99 - v12;
  __chkstk_darwin();
  uint64_t v105 = (char *)&v99 - v13;
  __chkstk_darwin();
  uint64_t v112 = (char *)&v99 - v14;
  __chkstk_darwin();
  uint64_t v114 = (char *)&v99 - v15;
  __chkstk_darwin();
  uint64_t v109 = (uint64_t)&v99 - v16;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v99 - v17;
  __chkstk_darwin();
  uint64_t v108 = (char *)&v99 - v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v99 - v20;
  __chkstk_darwin();
  uint64_t v23 = (char *)&v99 - v22;
  __chkstk_darwin();
  unint64_t v25 = (char *)&v99 - v24;
  uint64_t v26 = (void (*)(char *, uint64_t, char *))*((void *)v7 + 2);
  uint64_t v113 = (char *)a1;
  v26((char *)&v99 - v24, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v115 = v26;
  v26(v23, (uint64_t)v25, a3);
  if ((a1 & 1) == 0)
  {
    uint64_t v21 = (char *)*((void *)v7 + 1);
    ((void (*)(char *, char *))v21)(v23, a3);
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v7;
    char v28 = (void (*)(char *, char *, char *))v115;
    goto LABEL_20;
  }
  uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v107 = v7;
  char v117 = (char *)*((void *)v7 + 1);
  ((void (*)(char *, char *))v117)(v23, a3);
  if (v27 <= 64)
  {
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    uint64_t v21 = v117;
    char v28 = (void (*)(char *, char *, char *))v115;
    goto LABEL_20;
  }
  char v28 = (void (*)(char *, char *, char *))v115;
  v115(v21, (uint64_t)v25, a3);
  int64_t v119 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v30 & 1) == 0)
    {
      if (v31 >= 64)
      {
        uint64_t v45 = v21;
        uint64_t v21 = v117;
        ((void (*)(char *, char *))v117)(v45, a3);
        uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    if (v31 <= 64) {
      goto LABEL_16;
    }
LABEL_10:
    sub_10003AAFC();
    uint64_t v32 = v108;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v33 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v34 = v32;
    uint64_t v35 = v117;
    ((void (*)(char *, char *))v117)(v34, a3);
    uint64_t v36 = v21;
    uint64_t v21 = v35;
    ((void (*)(char *, char *))v35)(v36, a3);
    uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    if (v33) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v38 = v21;
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v38, a3);
  uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
  if (v37 < v119)
  {
LABEL_15:
    do
    {
      __break(1u);
LABEL_16:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v39 = v108;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      LODWORD(v99) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v40 = v39;
      uint64_t v41 = (uint64_t)v117;
      ((void (*)(char *, char *))v117)(v40, a3);
      uint64_t v42 = v101;
      (*((void (**)(char *, char *, char *))v107 + 4))(v101, v21, a3);
      if (v99) {
        goto LABEL_73;
      }
      int64_t v99 = v119;
      uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, char *))v41)(v42, a3);
      BOOL v44 = v43 < v99;
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
      uint64_t v21 = (char *)v41;
    }
    while (v44);
  }
LABEL_20:
  uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v28(v18, v25, a3);
  char v117 = v21;
  if (v46 >= 65)
  {
    ((void (*)(char *, char *))v21)(v18, a3);
    goto LABEL_22;
  }
  uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v41 = (unint64_t)(v29 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  ((void (*)(char *, char *))v21)(v18, a3);
  if (v54 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_22:
    uint64_t v47 = v109;
    v28((char *)v109, v25, a3);
    int64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
    char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v48)
    {
      if (v49 > 64)
      {
        sub_10003AAFC();
        uint64_t v50 = v108;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v51 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v52 = v47;
        uint64_t v41 = (uint64_t)(v29 + 1);
        uint64_t v53 = v50;
        uint64_t v21 = v117;
        ((void (*)(char *, char *))v117)(v53, a3);
        ((void (*)(uint64_t, char *))v21)(v52, a3);
        if (v51) {
          goto LABEL_50;
        }
        goto LABEL_31;
      }
    }
    else if (v49 > 63)
    {
      uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v107 = (char *)v29;
      uint64_t v74 = v108;
      v29[4](v108, v47, a3);
      sub_10003AAFC();
      uint64_t v75 = v105;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v41 = (uint64_t)(v29 + 1);
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
      ((void (*)(char *, char *))v117)(v75, a3);
      uint64_t v77 = v74;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v77, a3);
      if ((v76 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_50;
    }
    uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v56 = v47;
    uint64_t v41 = (uint64_t)(v29 + 1);
    ((void (*)(uint64_t, char *))v21)(v56, a3);
    if (v119 >= v55)
    {
LABEL_31:
      uint64_t v41 = v41 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      goto LABEL_32;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_32:
  uint64_t v109 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, char *))v21)(v25, a3);
  unint64_t v25 = v114;
  v28(v114, v113, a3);
  char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
  NSData v58 = v112;
  v28(v112, v25, a3);
  if ((v57 & 1) == 0)
  {
    Class v65 = v58;
    goto LABEL_38;
  }
  uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *))v21)(v58, a3);
  if (v59 <= 64) {
    goto LABEL_39;
  }
  int64_t v60 = v106;
  v28(v106, v25, a3);
  int64_t v119 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      sub_10003AAFC();
      uint64_t v88 = v108;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v89 = v60;
      char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v91 = v88;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v91, a3);
      ((void (*)(char *, char *))v21)(v89, a3);
      if (v90) {
        goto LABEL_67;
      }
      goto LABEL_39;
    }
    uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter();
    BOOL v62 = v60;
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    goto LABEL_66;
  }
  char v82 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v82 & 1) == 0)
  {
    if (v83 < 64)
    {
      unint64_t v92 = v106;
      uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v64 = v92;
LABEL_66:
      ((void (*)(char *, char *))v21)(v64, a3);
      if (v63 < v119) {
        goto LABEL_67;
      }
      goto LABEL_39;
    }
    Class v65 = v106;
LABEL_38:
    ((void (*)(char *, char *))v21)(v65, a3);
    goto LABEL_39;
  }
  if (v83 <= 64) {
    goto LABEL_68;
  }
  sub_10003AAFC();
  uint64_t v84 = v108;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  Class v85 = v106;
  char v86 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v87 = v84;
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v87, a3);
  ((void (*)(char *, char *))v21)(v85, a3);
  if (v86)
  {
LABEL_67:
    do
    {
      __break(1u);
LABEL_68:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      unint64_t v93 = v108;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v94 = v106;
      char v95 = dispatch thunk of static Comparable.< infix(_:_:)();
      __int16 v96 = v93;
      uint64_t v21 = v117;
      ((void (*)(char *, char *))v117)(v96, a3);
      uint64_t v107 = (char *)v29;
      uint64_t v42 = v100;
      v29[4](v100, (uint64_t)v94, a3);
      if (v95) {
        goto LABEL_74;
      }
      int64_t v97 = v119;
      uint64_t v98 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, char *))v21)(v42, a3);
      BOOL v44 = v98 < v97;
      unint64_t v25 = v114;
      char v28 = (void (*)(char *, char *, char *))v115;
      uint64_t v29 = (void (**)(char *, uint64_t, char *))v107;
    }
    while (v44);
  }
LABEL_39:
  uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v67 = v111;
  v28(v111, v25, a3);
  if (v66 < 65)
  {
    uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
    ((void (*)(char *, char *))v21)(v67, a3);
    if (v72 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_53;
    }
  }
  else
  {
    ((void (*)(char *, char *))v21)(v67, a3);
  }
  uint64_t v21 = (char *)v29;
  v28(v116, v25, a3);
  int64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
  char v68 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v68)
  {
    if (v69 > 64)
    {
      sub_10003AAFC();
      char v70 = v108;
      uint64_t v42 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v71 = v116;
      goto LABEL_52;
    }
LABEL_48:
    unint64_t v73 = v116;
    dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v21 = v117;
    ((void (*)(char *, char *))v117)(v73, a3);
    goto LABEL_53;
  }
  if (v69 <= 63) {
    goto LABEL_48;
  }
LABEL_51:
  uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v71 = v108;
  (*((void (**)(char *, char *, char *))v21 + 4))(v108, v116, a3);
  sub_10003AAFC();
  char v70 = v105;
  uint64_t v42 = a3;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
LABEL_52:
  char v78 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v21 = v117;
  ((void (*)(char *, char *))v117)(v70, a3);
  ((void (*)(char *, char *))v21)(v71, a3);
  if (v78)
  {
    __break(1u);
LABEL_73:
    ((void (*)(char *, char *))v41)(v42, a3);
    __break(1u);
LABEL_74:
    ((void (*)(char *, char *))v21)(v42, a3);
    __break(1u);
    goto LABEL_75;
  }
LABEL_53:
  uint64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(char *, char *))v21)(v25, a3);
  uint64_t v81 = v79 & 7;
  if (v79 <= 0) {
    uint64_t v81 = -(-v79 & 7);
  }
  if ((v81 & 0x8000000000000000) == 0)
  {
    *(unsigned char *)(v110 + v109 / 8) &= (-1 << v81) - 1;
    return result;
  }
LABEL_75:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafePointer<A>.contains<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v109 = a2;
  uint64_t v101 = *(void *)(*(void *)(*(void *)(a4 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  int64_t v99 = (char *)&v96 - v6;
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin();
  int64_t v97 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v105 = (char *)&v96 - v9;
  __chkstk_darwin();
  uint64_t v115 = (char *)&v96 - v10;
  __chkstk_darwin();
  uint64_t v103 = (char *)&v96 - v11;
  __chkstk_darwin();
  uint64_t v98 = (char *)&v96 - v12;
  __chkstk_darwin();
  uint64_t v104 = (char *)&v96 - v13;
  __chkstk_darwin();
  uint64_t v110 = (char *)&v96 - v14;
  __chkstk_darwin();
  uint64_t v112 = (char *)&v96 - v15;
  __chkstk_darwin();
  uint64_t v106 = (char *)&v96 - v16;
  __chkstk_darwin();
  uint64_t v113 = (char *)&v96 - v17;
  __chkstk_darwin();
  uint64_t v107 = (char *)&v96 - v18;
  __chkstk_darwin();
  uint64_t v102 = (void (*)(char *, uint64_t))((char *)&v96 - v19);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v96 - v20;
  __chkstk_darwin();
  uint64_t v23 = (char *)&v96 - v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  int v111 = (char *)a1;
  v24((char *)&v96 - v22, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v25 = v23;
  uint64_t v116 = (void (*)(char *, char *, uint64_t))v24;
  uint64_t v114 = v7 + 16;
  v24(v21, (uint64_t)v23, a3);
  uint64_t v108 = v7;
  if ((a1 & 1) == 0)
  {
    char v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v21, a3);
    uint64_t v31 = v113;
    uint64_t v35 = v115;
    uint64_t v29 = v25;
    goto LABEL_21;
  }
  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v21, a3);
  if (v26 <= 64)
  {
    char v28 = v27;
    uint64_t v35 = v115;
    uint64_t v31 = v113;
    uint64_t v29 = v25;
    goto LABEL_21;
  }
  char v28 = v102;
  uint64_t v29 = v23;
  v116((char *)v102, v23, a3);
  int64_t v118 = 0x8000000000000000;
  char v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v31 = v113;
  if (v30)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
      char v33 = (char *)v28;
      char v28 = v27;
      v27(v33, a3);
      BOOL v34 = v32 < v118;
      goto LABEL_17;
    }
LABEL_10:
    sub_10003AAFC();
    uint64_t v38 = v107;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
    v27(v38, a3);
    uint64_t v40 = (char *)v28;
    char v28 = v27;
    v27(v40, a3);
    uint64_t v27 = (void (*)(char *, uint64_t))v108;
    uint64_t v35 = v115;
    if ((v39 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  char v36 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v36 & 1) == 0)
  {
    if (v37 >= 64)
    {
LABEL_20:
      uint64_t v50 = (char *)v28;
      char v28 = v27;
      v27(v50, a3);
      uint64_t v35 = v115;
      goto LABEL_21;
    }
    uint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v42 = (char *)v28;
    char v28 = v27;
    v27(v42, a3);
    uint64_t v27 = (void (*)(char *, uint64_t))v108;
    uint64_t v35 = v115;
    if (v41 >= v118) {
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v37 > 64) {
    goto LABEL_10;
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v43 = v28;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  BOOL v44 = v107;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v27(v44, a3);
  uint64_t v46 = v98;
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v108 + 32))(v98, v43, a3);
  if (v45)
  {
LABEL_73:
    v27(v46, a3);
    __break(1u);
LABEL_74:
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v27)(v45, a3);
    __break(1u);
    return result;
  }
  int64_t v47 = v118;
  uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v49 = v46;
  char v28 = v27;
  v27(v49, a3);
  BOOL v34 = v48 < v47;
LABEL_17:
  uint64_t v27 = (void (*)(char *, uint64_t))v108;
  uint64_t v35 = v115;
  if (v34) {
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v116(v31, v29, a3);
  if (v51 >= 65)
  {
    v28(v31, a3);
    goto LABEL_25;
  }
  uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v28(v31, a3);
  if (v52 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_25:
    uint64_t v53 = v106;
    v116(v106, v29, a3);
    int64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
    char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v54)
    {
      if (v55 > 64)
      {
        sub_10003AAFC();
        uint64_t v56 = v107;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        LODWORD(v114) = dispatch thunk of static Comparable.< infix(_:_:)();
        char v57 = v56;
        uint64_t v35 = v115;
        v28(v57, a3);
        NSData v58 = v53;
        goto LABEL_33;
      }
    }
    else if (v55 > 63)
    {
      uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v60 = v107;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v53, a3);
      sub_10003AAFC();
      uint64_t v61 = v104;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v114) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v35 = v115;
      v28(v61, a3);
      NSData v58 = v60;
LABEL_33:
      v28(v58, a3);
      if ((v114 & 1) == 0) {
        goto LABEL_34;
      }
      goto LABEL_30;
    }
    uint64_t v59 = dispatch thunk of BinaryInteger._lowWord.getter();
    v28(v53, a3);
    if (v118 >= v59) {
      goto LABEL_34;
    }
LABEL_30:
    __break(1u);
  }
LABEL_34:
  uint64_t v114 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v27 = v28;
  v28(v29, a3);
  BOOL v62 = v112;
  uint64_t v63 = v116;
  v116(v112, v111, a3);
  char v64 = dispatch thunk of static BinaryInteger.isSigned.getter();
  Class v65 = v110;
  v63(v110, v62, a3);
  if ((v64 & 1) == 0)
  {
    uint64_t v71 = v65;
    goto LABEL_41;
  }
  uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v27(v65, a3);
  if (v66 <= 64) {
    goto LABEL_42;
  }
  uint64_t v67 = v103;
  v116(v103, v62, a3);
  int64_t v118 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      sub_10003AAFC();
      char v68 = v107;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v69 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v70 = v68;
      uint64_t v35 = v115;
      v27(v70, a3);
      v27(v67, a3);
      if (v69) {
        goto LABEL_67;
      }
      goto LABEL_42;
    }
    goto LABEL_66;
  }
  char v85 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v86 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v85 & 1) == 0)
  {
    if (v86 < 64)
    {
LABEL_66:
      uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v67, a3);
      if (v90 < v118) {
        goto LABEL_67;
      }
      goto LABEL_42;
    }
    uint64_t v71 = v67;
LABEL_41:
    v27(v71, a3);
    goto LABEL_42;
  }
  if (v86 <= 64) {
    goto LABEL_68;
  }
  sub_10003AAFC();
  uint64_t v87 = v107;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v88 = v103;
  char v89 = dispatch thunk of static Comparable.< infix(_:_:)();
  v27(v87, a3);
  v27(v88, a3);
  uint64_t v35 = v115;
  if (v89)
  {
LABEL_67:
    do
    {
      __break(1u);
LABEL_68:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v91 = v107;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      unint64_t v92 = v103;
      char v93 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v91, a3);
      uint64_t v45 = (uint64_t)v97;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v97, v92, a3);
      if (v93) {
        goto LABEL_74;
      }
      int64_t v94 = v118;
      uint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27((char *)v45, a3);
      BOOL v34 = v95 < v94;
      uint64_t v35 = v115;
    }
    while (v34);
  }
LABEL_42:
  uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v116(v35, v62, a3);
  if (v72 < 65)
  {
    uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v27(v35, a3);
    if (v78 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_54;
    }
  }
  else
  {
    v27(v35, a3);
  }
  uint64_t v46 = v105;
  v116(v105, v62, a3);
  int64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
  char v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v73)
  {
    if (v74 > 64)
    {
      sub_10003AAFC();
      uint64_t v75 = v107;
      uint64_t v45 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v75, a3);
      uint64_t v77 = v46;
LABEL_53:
      v27(v77, a3);
      if ((v76 & 1) == 0) {
        goto LABEL_54;
      }
      __break(1u);
      goto LABEL_73;
    }
  }
  else if (v74 > 63)
  {
    uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v79 = v107;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v46, a3);
    sub_10003AAFC();
    uint64_t v46 = v104;
    uint64_t v45 = a3;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v76 = dispatch thunk of static Comparable.< infix(_:_:)();
    v27(v46, a3);
    uint64_t v77 = v79;
    goto LABEL_53;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v46, a3);
LABEL_54:
  uint64_t v80 = v114 / 8;
  uint64_t v81 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v62, a3);
  uint64_t v82 = v81 & 7;
  if (v81 <= 0) {
    uint64_t v82 = -(-v81 & 7);
  }
  if (v82 >= 0) {
    int v83 = 1 << v82;
  }
  else {
    int v83 = 0;
  }
  return (v83 & (*(unsigned __int8 *)(v109 + v80) ^ 0xFF)) == 0;
}

uint64_t NANServiceConfiguration.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v16 = a1;
  swift_getMetatypeMetadata();
  uint64_t v8 = String.init<A>(describing:)();
  unint64_t v10 = v9;
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t v12 = v16;
  uint64_t v13 = (void *)v17;
  uint64_t v16 = v8;
  unint64_t v17 = v10;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t NANDiscoveryServiceConfiguration.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 40))();
}

void NANService.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Swift::UInt8 v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  Hasher._combine(_:)(v10);
}

BOOL static NANService.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v16 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(a4 + 64);
  v18(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  LOBYTE(v17) = v13(AssociatedTypeWitness, AssociatedConformanceWitness);
  int v17 = v17;
  Swift::String v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v11, AssociatedTypeWitness);
  v18(v16, a4);
  LOBYTE(a4) = v13(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14(v9, AssociatedTypeWitness);
  return v17 == a4;
}

uint64_t NANBitmap.Channel.operatingClass.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t NANDataManagementFrameTransferCompleteEvent.initiatorDataAddress.getter(unint64_t a1)
{
  return (a1 >> 8) & 0xFFFFFFFFFFFFLL;
}

uint64_t NANPeerServiceIdentifier.peerAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 1) = result;
  *(unsigned char *)(v1 + 3) = BYTE2(result);
  *(unsigned char *)(v1 + 4) = BYTE3(result);
  *(unsigned char *)(v1 + 5) = BYTE4(result);
  *(unsigned char *)(v1 + 6) = BYTE5(result);
  return result;
}

uint64_t (*NonNANOperatingChannelInformation.channelNumber.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void __swiftcall NANPeerServiceIdentifier.init(instanceID:peerAddress:)(CoreP2P::NANPeerServiceIdentifier *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *peerAddress)
{
}

uint64_t NANPeerServiceIdentifier.description.getter(unint64_t a1)
{
  uint64_t v5 = WiFiAddress.description.getter((a1 >> 8) & 0xFFFFFFFFFFFFLL);
  v1._countAndFlagsBits  = 91;
  v1._object  = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits  = 93;
  v3._object  = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v5;
}

void NANPeerServiceIdentifier.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 8;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  unint64_t v7 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

BOOL static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    return 0;
  }
  LOBYTE(v6)  = BYTE1(a1);
  BYTE1(v6)  = BYTE2(a1);
  BYTE2(v6)  = BYTE3(a1);
  HIBYTE(v6)  = BYTE4(a1);
  LOBYTE(v7)  = BYTE5(a1);
  HIBYTE(v7)  = BYTE6(a1);
  LOBYTE(v4)  = BYTE1(a2);
  BYTE1(v4)  = BYTE2(a2);
  BYTE2(v4)  = BYTE3(a2);
  HIBYTE(v4)  = BYTE4(a2);
  LOBYTE(v5)  = BYTE5(a2);
  HIBYTE(v5)  = BYTE6(a2);
  return v6 == v4 && v7 == v5;
}

BOOL sub_10003E2F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10003E308()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003E350()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003E37C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10003E3C0()
{
  if (*v0) {
    return 0x7264644172656570;
  }
  else {
    return 0x65636E6174736E69;
  }
}

uint64_t sub_10003E408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003FCE8(a1, a2);
  *a3  = result;
  return result;
}

void sub_10003E430(unsigned char *a1@<X8>)
{
  *a1  = 2;
}

uint64_t sub_10003E43C(uint64_t a1)
{
  unint64_t v2 = sub_10003F228();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003E478(uint64_t a1)
{
  unint64_t v2 = sub_10003F228();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPeerServiceIdentifier.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100010BCC(&qword_10047CFC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10003F228();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[9]  = BYTE1(a2);
    v10[10]  = BYTE2(a2);
    v10[11]  = BYTE3(a2);
    v10[12]  = BYTE4(a2);
    v10[13]  = BYTE5(a2);
    v10[14]  = BYTE6(a2);
    v10[8]  = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANPeerServiceIdentifier.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  unint64_t v7 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t NANPeerServiceIdentifier.init(from:)(void *a1)
{
  return sub_10003F2D0(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_10003E730()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_10003E7F0()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_10003E87C()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Swift::UInt8 v4 = v0[3];
  Swift::UInt8 v5 = v0[4];
  Swift::UInt8 v6 = v0[5];
  Swift::UInt8 v7 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_10003E938()
{
  uint64_t v5 = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + 1) | ((unint64_t)*(unsigned int *)(v0 + 3) << 16));
  v1._countAndFlagsBits  = 91;
  v1._object  = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits  = 93;
  v3._object  = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v5;
}

uint64_t sub_10003E9C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10003F2D0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
  }
  return result;
}

uint64_t sub_10003EA24(void *a1)
{
  return NANPeerServiceIdentifier.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

BOOL sub_10003EA50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  return *(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1) && *(unsigned __int16 *)(a1 + 5) == *(unsigned __int16 *)(a2 + 5);
}

void InternetSharingActivity.Role.hash(into:)(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Swift::UInt8 v2 = a2;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
}

BOOL static InternetSharingActivity.Role.__derived_enum_equals(_:_:)(__int16 a1, __int16 a2)
{
  if ((a1 & 0x100) == 0)
  {
    if ((a2 & 0x100) == 0) {
      return a1 == a2;
    }
    return 0;
  }
  return (a2 & 0x100) != 0;
}

Swift::Int InternetSharingActivity.Role.hashValue.getter(__int16 a1)
{
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int sub_10003EBA8()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_10003EC14()
{
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Swift::UInt8 v1 = *v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_10003EC60()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_10003ECC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = a1[1];
  uint64_t result = a2[1];
  if ((v3 & 1) == 0) {
    return (*a1 == *a2) & ~result;
  }
  return result;
}

uint64_t InternetSharingActivity.role.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t DeprecatedNANAvailability.repeats.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t InternetSharingActivity.init(role:active:)(__int16 a1, char a2)
{
  if (a2) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFE00 | a1 & 0x100 | a1;
}

void InternetSharingActivity.hash(into:)(uint64_t a1, int a2)
{
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a2);
  }
  Hasher._combine(_:)(BYTE2(a2) & 1);
}

uint64_t static InternetSharingActivity.__derived_struct_equals(_:_:)(int a1, int a2)
{
  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0) {
      return 0;
    }
    return ((a1 & 0x10000) == 0) ^ ((a2 & 0x10000u) >> 16);
  }
  uint64_t result = 0;
  if ((a2 & 0x100) == 0 && a1 == a2) {
    return ((a1 & 0x10000) == 0) ^ ((a2 & 0x10000u) >> 16);
  }
  return result;
}

Swift::Int InternetSharingActivity.hashValue.getter(int a1)
{
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  Hasher._combine(_:)(BYTE2(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_10003EE28()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10003EEA8()
{
  Swift::UInt8 v1 = v0[2];
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Swift::UInt8 v2 = *v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10003EF08()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10003EF84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2 = a2[1];
  if (a1[1])
  {
    if (!a2[1]) {
      return 0;
    }
  }
  else
  {
    if (*a1 != *a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return a1[2] ^ a2[2] ^ 1u;
}

unint64_t MulticastServiceType.rawValue.getter()
{
  return 0xD000000000000012;
}

BOOL MulticastServiceType.init(rawValue:)(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FDE0, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

Swift::Int sub_10003F030()
{
  return Hasher._finalize()();
}

uint64_t sub_10003F088()
{
  return String.hash(into:)();
}

Swift::Int sub_10003F0A4()
{
  return Hasher._finalize()();
}

uint64_t sub_10003F0F8@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F610, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3 != 0;
  return result;
}

void sub_10003F14C(void *a1@<X8>)
{
  *a1  = 0xD000000000000012;
  a1[1]  = 0x80000001003D8DF0;
}

uint64_t sub_10003F16C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10003F1CC()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10003F21C(unsigned char *a1@<X8>)
{
  *a1  = *v1;
}

unint64_t sub_10003F228()
{
  unint64_t result = qword_10047CFD0;
  if (!qword_10047CFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFD0);
  }
  return result;
}

unint64_t sub_10003F27C()
{
  unint64_t result = qword_10047CFD8;
  if (!qword_10047CFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFD8);
  }
  return result;
}

uint64_t sub_10003F2D0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047D020);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  Swift::UInt8 v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10003F228();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v14 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[8]  = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v8 = v12[9];
  uint64_t v9 = v12[10];
  uint64_t v10 = v13;
  sub_100010754((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 8) | (v9 << 16) | (v10 << 24);
}

unint64_t sub_10003F4A0()
{
  unint64_t result = qword_10047CFE0;
  if (!qword_10047CFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFE0);
  }
  return result;
}

unint64_t sub_10003F4F8()
{
  unint64_t result = qword_10047CFE8;
  if (!qword_10047CFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFE8);
  }
  return result;
}

unint64_t sub_10003F550()
{
  unint64_t result = qword_10047CFF0;
  if (!qword_10047CFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFF0);
  }
  return result;
}

unint64_t sub_10003F5A8()
{
  unint64_t result = qword_10047CFF8;
  if (!qword_10047CFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047CFF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier()
{
  return &type metadata for NANPeerServiceIdentifier;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2)  = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3)  = v4;
      }
      else {
        *(unsigned char *)(result + 3)  = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3)  = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2)  = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3)  = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity()
{
  return &type metadata for InternetSharingActivity;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity.Role(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x10003F7C4);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity.Role(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2)  = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x10003F894);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003F8BC(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *sub_10003F8DC(unsigned char *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    result[1]  = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1]  = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity.Role()
{
  return &type metadata for InternetSharingActivity.Role;
}

uint64_t getEnumTagSinglePayload for MulticastServiceType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MulticastServiceType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003FA00);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MulticastServiceType()
{
  return &type metadata for MulticastServiceType;
}

uint64_t getEnumTagSinglePayload for Layer3Protocol(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NANPeerServiceIdentifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003FB94);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10003FBBC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10003FBC4(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier.CodingKeys()
{
  return &type metadata for NANPeerServiceIdentifier.CodingKeys;
}

unint64_t sub_10003FBE4()
{
  unint64_t result = qword_10047D000;
  if (!qword_10047D000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047D000);
  }
  return result;
}

unint64_t sub_10003FC3C()
{
  unint64_t result = qword_10047D008;
  if (!qword_10047D008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047D008);
  }
  return result;
}

unint64_t sub_10003FC94()
{
  unint64_t result = qword_10047D010;
  if (!qword_10047D010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047D010);
  }
  return result;
}

uint64_t sub_10003FCE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6174736E69 && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7264644172656570 && a2 == 0xEB00000000737365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_10003FE00()
{
  unint64_t result = qword_10047D018;
  if (!qword_10047D018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047D018);
  }
  return result;
}

unint64_t sub_10003FE54()
{
  unint64_t result = qword_10047D028[0];
  if (!qword_10047D028[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047D028);
  }
  return result;
}

uint64_t Either<>.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  char v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v14, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v15;
}

uint64_t sub_100040120(uint64_t a1)
{
  return Either<>.description.getter(a1);
}

uint64_t Either.customMirror.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin();
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v11, v1);
    uint64_t v17 = v1;
    uint64_t v13 = sub_1000382F0(v16);
    (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(v13, v5, v1);
    Mirror.init(reflecting:)();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v11, v6);
    uint64_t v17 = v6;
    uint64_t v15 = sub_1000382F0(v16);
    (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v15, v9, v6);
    Mirror.init(reflecting:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t static Either<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v46 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v38 - v8;
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin();
  char v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v38 = (char *)&v38 - v11;
  uint64_t v47 = v12;
  uint64_t v13 = type metadata accessor for Either();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v38 - v17;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  uint64_t v44 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v20 = __chkstk_darwin();
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = (char *)&v38 + *(int *)(v20 + 48) - v21;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v24((char *)&v38 - v21, v48, v13);
  v24(v23, v49, v13);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v24(v18, (uint64_t)v22, v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v32 = v45;
      char v33 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      BOOL v34 = v38;
      v33(v38, v18, a3);
      uint64_t v35 = v39;
      v33(v39, v23, a3);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v36 = *(void (**)(char *, uint64_t))(v32 + 8);
      v36(v35, a3);
      v36(v34, a3);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, a3);
    goto LABEL_7;
  }
  v24(v16, (uint64_t)v22, v13);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
LABEL_7:
    char v30 = 0;
    uint64_t v14 = v44;
    uint64_t v13 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  uint64_t v26 = v46;
  uint64_t v25 = v47;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  char v28 = v40;
  v27(v40, v16, v47);
  uint64_t v29 = v41;
  v27(v41, v23, v25);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31(v29, v25);
  v31(v28, v25);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
  return v30 & 1;
}

uint64_t sub_100040894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Either<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t Either<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[1]  = a4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v17, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v15, v5);
    dispatch thunk of Hashable.hash(into:)();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v15, v10);
    dispatch thunk of Hashable.hash(into:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

Swift::Int Either<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Either<>.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100040B70(uint64_t a1, uint64_t a2)
{
  return Either<>.hashValue.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16));
}

uint64_t sub_100040B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Either<>.hash(into:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

Swift::Int sub_100040B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 16);
  uint64_t v4 = *(void *)(a3 - 8);
  Hasher.init(_seed:)();
  Either<>.hash(into:)((uint64_t)v7, a2, v4, v5);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Either()
{
  return sub_100038354();
}

uint64_t sub_100040BF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100040C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100040C4C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_100040D18(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6)  = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6)  = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100040F00(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6)  = v12;
  return a1;
}

unsigned __int8 *sub_100041074(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9]  = v22;
  }
  return a1;
}

uint64_t sub_1000412B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6)  = v12;
  return a1;
}

unsigned __int8 *sub_100041428(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9]  = v22;
  }
  return a1;
}

uint64_t sub_100041668(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4)  = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4)  = *a1;
        break;
      case 3:
        LODWORD(v4)  = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4)  = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4)  = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_1000417AC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1  = v11;
          a1[2]  = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1  = v11;
        }
        else
        {
          *a1  = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1  = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6]  = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6]  = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x100041984);
      case 4:
        *(_DWORD *)&a1[v6]  = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6]  = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6]  = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6]  = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5]  = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1000419AC(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3)  = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_100041A74(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7]  = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1  = v10;
        a1[2]  = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1  = v10;
      }
      else
      {
        *a1  = v10;
      }
    }
    else
    {
      a1[v7]  = 2;
      bzero(a1, v7);
      *(_DWORD *)a1  = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5]  = a2;
  }
}

uint64_t sub_100041B9C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64656C62616E65;
  }
  else {
    uint64_t v3 = 0x64656C6261736964;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x64656C62616E65;
  }
  else {
    uint64_t v5 = 0x64656C6261736964;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100041C44(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6775626564;
    }
    else {
      uint64_t v3 = 0x61427963696C6F70;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xEB00000000646573;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6775626564;
      }
      else {
        uint64_t v6 = 0x61427963696C6F70;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xEB00000000646573;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 6710895;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 6710895)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100041D60(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x757145746F4E7874;
  }
  else {
    uint64_t v3 = 0x526C617571457874;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000078;
  }
  else {
    unint64_t v4 = 0xEC00000078526C61;
  }
  if (a2) {
    uint64_t v5 = 0x757145746F4E7874;
  }
  else {
    uint64_t v5 = 0x526C617571457874;
  }
  if (a2) {
    unint64_t v6 = 0xEC00000078526C61;
  }
  else {
    unint64_t v6 = 0xE900000000000078;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100041E18(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1869768058;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1869768058;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6647407;
      break;
    case 2:
      uint64_t v5 = 1920298854;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7468676965;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6E656574786973;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6647407) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v5 != 1920298854) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7468676965;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6E656574786973) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100041FA4(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 7365749;
  }
  else {
    uint64_t v2 = 7365492;
  }
  if (a2) {
    uint64_t v3 = 7365749;
  }
  else {
    uint64_t v3 = 7365492;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_100042010(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC0000006F727465;
  unint64_t v3 = 0x526E496B63757473;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x536E496B63757473;
    }
    else {
      unint64_t v5 = 0xD000000000000014;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB000000006E6163;
    }
    else {
      unint64_t v6 = 0x80000001003D8A80;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x526E496B63757473;
  unint64_t v6 = 0xEC0000006F727465;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x536E496B63757473;
    }
    else {
      unint64_t v3 = 0xD000000000000014;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEB000000006E6163;
    }
    else {
      unint64_t v2 = 0x80000001003D8A80;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100042144(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6E6F73616572;
  }
  else {
    uint64_t v3 = 0x65636976726573;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6E6F73616572;
  }
  else {
    uint64_t v5 = 0x65636976726573;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000421E8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x65636976726573;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x65636976726573;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6172666E49796DLL;
      break;
    case 2:
      unint64_t v5 = 0x72666E4972656570;
      unint64_t v3 = 0xE900000000000061;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x424453796DLL;
      break;
    case 4:
      unint64_t v5 = 0x42445372656570;
      break;
    case 5:
      unint64_t v3 = 0x80000001003D8A40;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 6:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x44495353656D6173;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x6172666E49796DLL) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE900000000000061;
      if (v5 != 0x72666E4972656570) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x424453796DLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      if (v5 != 0x42445372656570) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0x80000001003D8A40;
      unint64_t v2 = 0xD000000000000011;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x44495353656D6173) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10004242C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x616974696E497369;
    }
    else {
      uint64_t v3 = 0x6E6F697461727564;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEB00000000726F74;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x616974696E497369;
      }
      else {
        uint64_t v6 = 0x6E6F697461727564;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEB00000000726F74;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x65636976726573;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x65636976726573)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100042558(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64657463656A6572;
  }
  else {
    uint64_t v3 = 0x6553657669746361;
  }
  if (v2) {
    unint64_t v4 = 0xED00006563697672;
  }
  else {
    unint64_t v4 = 0xEF65636976726553;
  }
  if (a2) {
    uint64_t v5 = 0x64657463656A6572;
  }
  else {
    uint64_t v5 = 0x6553657669746361;
  }
  if (a2) {
    unint64_t v6 = 0xEF65636976726553;
  }
  else {
    unint64_t v6 = 0xED00006563697672;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100042618(char a1, char a2)
{
  if (qword_1003B3720[a1] == qword_1003B3720[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_100042680(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x636572726F636E69;
  }
  else {
    unint64_t v3 = 0xD000000000000011;
  }
  if (v2) {
    unint64_t v4 = 0x80000001003D8070;
  }
  else {
    unint64_t v4 = 0xED00006570795474;
  }
  if (a2) {
    unint64_t v5 = 0x636572726F636E69;
  }
  else {
    unint64_t v5 = 0xD000000000000011;
  }
  if (a2) {
    unint64_t v6 = 0xED00006570795474;
  }
  else {
    unint64_t v6 = 0x80000001003D8070;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100042738(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x657669746361;
  }
  else {
    uint64_t v3 = 0x65766973736170;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x657669746361;
  }
  else {
    uint64_t v5 = 0x65766973736170;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000427DC(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x80000001003D8D10;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001003D8D30;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v3 = 0x546873696C627570;
      unint64_t v4 = 0xEF74696D736E6172;
      break;
    case 3:
      unint64_t v3 = 0x526873696C627570;
      unint64_t v4 = 0xEE00657669656365;
      break;
    case 4:
      unint64_t v3 = 0x73655265676E6172;
      unint64_t v4 = 0xED000065736E6F70;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000011;
  unint64_t v6 = 0x80000001003D8D10;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000001003D8D30;
      if (v3 == 0xD000000000000010) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xEF74696D736E6172;
      if (v3 != 0x546873696C627570) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0x526873696C627570;
      unint64_t v6 = 0xEE00657669656365;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xED000065736E6F70;
      if (v3 != 0x73655265676E6172) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v3 != v5) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1000429F8(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001003D7B30;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xEE006C6477612E65;
    }
    else {
      unint64_t v4 = 0xED00006E616E2E65;
    }
    unint64_t v5 = 0x6C7070612E6D6F63;
    int v6 = a2;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  unint64_t v5 = 0xD000000000000012;
  unint64_t v4 = 0x80000001003D7B30;
  int v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1) {
      unint64_t v3 = 0xEE006C6477612E65;
    }
    else {
      unint64_t v3 = 0xED00006E616E2E65;
    }
    unint64_t v2 = 0x6C7070612E6D6F63;
  }
LABEL_10:
  if (v5 == v2 && v4 == v3) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100042B10(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1735617902;
  }
  else {
    uint64_t v3 = 7365742;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1735617902;
  }
  else {
    uint64_t v5 = 7365742;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100042BAC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x656D69746C616572;
    }
    else {
      uint64_t v3 = 0x6E6574614C776F6CLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xEA00000000007963;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x656D69746C616572;
      }
      else {
        uint64_t v6 = 0x6E6574614C776F6CLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xEA00000000007963;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x6576697470616461;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x6576697470616461)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100042CD0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE00657275746375;
  uint64_t v3 = 0x7274736172666E69;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7274736172666E69;
  unint64_t v6 = 0xEE00657275746375;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1818523489;
      break;
    case 2:
      uint64_t v5 = 0x67616E614D6E616ELL;
      unint64_t v6 = 0xED0000746E656D65;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x617461446E616ELL;
      break;
    case 4:
      uint64_t v5 = 0x6E6574614C776F6CLL;
      unint64_t v6 = 0xEA00000000007963;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1818523489) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xED0000746E656D65;
      if (v5 != 0x67616E614D6E616ELL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x617461446E616ELL;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xEA00000000007963;
      if (v5 != 0x6E6574614C776F6CLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100042EC4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7561575;
  }
  else {
    uint64_t v3 = 0x7055776F6C6C6F66;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7561575;
  }
  else {
    uint64_t v5 = 0x7055776F6C6C6F66;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100042F64(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v3 = 0x74736163696E75;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000074;
  }
  if (a2) {
    uint64_t v5 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v5 = 0x74736163696E75;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000074;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100043010(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v3 = 0x6E614D6F54656E6FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000079;
  }
  else {
    unint64_t v4 = 0xEA0000000000796ELL;
  }
  if (a2) {
    uint64_t v5 = 0x614D6F54796E616DLL;
  }
  else {
    uint64_t v5 = 0x6E614D6F54656E6FLL;
  }
  if (a2) {
    unint64_t v6 = 0xEA0000000000796ELL;
  }
  else {
    unint64_t v6 = 0xE900000000000079;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000430C0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65746963696C6F73;
  }
  else {
    uint64_t v3 = 1701736302;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000785464;
  }
  if (a2) {
    uint64_t v5 = 0x65746963696C6F73;
  }
  else {
    uint64_t v5 = 1701736302;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000785464;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100043168(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB00000000646574;
  unint64_t v3 = 0x6963696C6F736E75;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x65746963696C6F73;
    }
    else {
      unint64_t v5 = 0xD000000000000017;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000064;
    }
    else {
      unint64_t v6 = 0x80000001003D7E70;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x6963696C6F736E75;
  unint64_t v6 = 0xEB00000000646574;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x65746963696C6F73;
    }
    else {
      unint64_t v3 = 0xD000000000000017;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE900000000000064;
    }
    else {
      unint64_t v2 = 0x80000001003D7E70;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void *sub_100043294(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_100031454(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = *(void **)(*(void *)(a2 + 56) + 24 * v3);
  swift_bridgeObjectRetain();
  id v6 = v5;
  return v5;
}

uint64_t sub_100043308(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v26 = a5;
  int v25 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unsigned int v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = (void *)(v5
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
  *int v10 = 0;
  v10[1]  = 0;
  int v11 = (void *)(v5
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  *int v11 = 0;
  v11[1]  = 0;
  uint64_t v12 = v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8)  = 0;
  *(unsigned char *)(v12 + 16)  = 1;
  uint64_t v27 = 0;
  unsigned int v13 = Apple80211Open();
  if (v13 || (uint64_t v16 = v27) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v14 = v13;
    *(void *)(v14 + 8)  = 0;
    *(unsigned char *)(v14 + 16)  = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_100011E30(*(void *)(v5
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler));
    type metadata accessor for AppleDevice.InterfaceHandle(0);
    swift_deallocPartialClassInstance();
    return v5;
  }
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v13 = Apple80211BindToInterfaceWithService();

  if (v13)
  {
    Apple80211Close();
    goto LABEL_3;
  }
  *(_DWORD *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service)  = a4;
  unsigned __int8 v18 = v26;
  *(unsigned char *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role)  = v26;
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_logger, v9, v7);
  *(void *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference)  = v16;
  *(_DWORD *)(v5
            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex)  = v25;
  if (v18 - 2 >= 2)
  {
    if (v18 == 1)
    {
      if (qword_10047C170 != -1) {
        swift_once();
      }
      uint64_t v19 = &static OS_dispatch_queue.awdl;
    }
    else
    {
      if (qword_10047C178 != -1) {
        swift_once();
      }
      uint64_t v19 = &static OS_dispatch_queue.p2p;
    }
  }
  else
  {
    if (qword_10047C168 != -1) {
      swift_once();
    }
    uint64_t v19 = &static OS_dispatch_queue.nan;
  }
  int v20 = (void *)*v19;
  *(void *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue)  = v20;
  io_object_t v21 = *(_DWORD *)(v5
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service);
  id v22 = v20;
  IOObjectRetain(v21);
  return v5;
}

uint64_t sub_100043730()
{
  unint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v2)
  {
    uint64_t v6 = *(void *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                   + 8);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16)  = v2;
    *(void *)(v7 + 24)  = v6;
    sub_100037FF4(v2);
    uint64_t result = sub_100011E30((uint64_t)sub_10006CB44);
    __break(1u);
  }
  else
  {
    sub_100037FF4(0);
    sub_100011E30(0);
    IOObjectRelease(*(_DWORD *)(v0
                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service));
    Apple80211Close();
    if ((*(unsigned char *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                   + 16) & 1) == 0)
    {
      if (*(void *)(v0
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer))
        swift_slowDealloc();
    }
    uint64_t v3 = v0 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_logger;
    uint64_t v4 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    swift_bridgeObjectRelease();
    sub_100011E30(*v1);
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    return v0;
  }
  return result;
}

uint64_t sub_100043884()
{
  return sub_1000591D4(sub_100043730);
}

uint64_t sub_100043C78(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  int v11 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
  if (a1)
  {
    id v13 = *(id *)(v4 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    id v14 = a1;
  }
  else
  {
    id v13 = objc_retain(*(id *)(v4
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    id v14 = v13;
  }
  *(void *)(v4 + v12)  = v14;
  id v15 = a1;

  uint64_t v16 = *(void **)(v4 + v12);
  *int v11 = v16;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v17 = v16;
  uint64_t v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v44 = a2;
  uint64_t v19 = v4 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
  if ((*(unsigned char *)(v4
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                 + 16) & 1) == 0
    && *(void *)v19)
  {
    swift_slowDealloc();
  }
  uint64_t v18 = swift_slowAlloc();
  a2  = v18 + 2048;
  *(void *)uint64_t v19 = v18;
  *(void *)(v19 + 8)  = v18 + 2048;
  *(unsigned char *)(v19 + 16)  = 0;
  uint64_t v20 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role;
  switch(*(unsigned char *)(v4
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_23;
      }
      break;
    default:
      swift_bridgeObjectRelease();
      break;
  }
  int v11 = *(void **)(v4 + v12);
  int v22 = *(unsigned __int8 *)(v4 + v20);
  if ((v22 - 2) < 2)
  {
    uint64_t v23 = qword_10047C168;
    uint64_t v24 = v11;
    if (v23 == -1)
    {
LABEL_13:
      int v25 = &static OS_dispatch_queue.nan;
      goto LABEL_21;
    }
LABEL_47:
    swift_once();
    goto LABEL_13;
  }
  if (v22 == 1)
  {
    uint64_t v26 = qword_10047C170;
    uint64_t v27 = v11;
    if (v26 != -1) {
      swift_once();
    }
    int v25 = &static OS_dispatch_queue.awdl;
  }
  else
  {
    uint64_t v28 = qword_10047C178;
    uint64_t v29 = v11;
    if (v28 != -1) {
      swift_once();
    }
    int v25 = &static OS_dispatch_queue.p2p;
  }
LABEL_21:
  char v30 = (void *)*v25;
  sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  id v31 = v30;
  char v32 = static NSObject.== infix(_:_:)();

  if (v32)
  {
    char v33 = sub_1000443A0;
    int v34 = 1;
  }
  else
  {
LABEL_23:
    int v34 = 0;
    char v33 = sub_1000443C0;
  }
  uint64_t v35 = *(void *)(v4
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference);
  char v36 = *(void **)(v4 + v12);
  uint64_t v37 = (void *)swift_allocObject();
  v37[2]  = v44;
  v37[3]  = a3;
  v37[4]  = v18;
  v37[5]  = a2;
  id v38 = v36;
  swift_retain();
  unsigned int v39 = v33(v35, (uint64_t)v36, (uint64_t)sub_1000136E8, (uint64_t)v37);

  uint64_t result = swift_release();
  if (v39)
  {
    uint64_t v41 = v39;
LABEL_43:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v42 = v41;
    *(void *)(v42 + 8)  = 0;
    *(unsigned char *)(v42 + 16)  = 0;
    return swift_willThrow();
  }
  if (v34)
  {
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result) {
      goto LABEL_42;
    }
    LODWORD(result)  = Apple80211StartMonitoringEvent();
    if (result
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (LODWORD(result)  = Apple80211StartMonitoringEvent(), result)
      || (uint64_t result = Apple80211StartMonitoringEvent(), result))
    {
LABEL_42:
      uint64_t v41 = result;
      goto LABEL_43;
    }
  }
  return result;
}

uint64_t sub_1000443A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000443E0(a1, a2, a3, a4, (uint64_t)&unk_1004575B0, (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawEventMonitoringInit);
}

uint64_t sub_1000443C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000443E0(a1, a2, a3, a4, (uint64_t)&unk_1004575D8, (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawP2PEventMonitoringInit);
}

uint64_t sub_1000443E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    v12[4]  = a3;
    v12[5]  = a4;
    v12[0]  = _NSConcreteStackBlock;
    v12[1]  = 1107296256;
    v12[2]  = sub_100012C44;
    void v12[3] = a5;
    uint64_t v9 = _Block_copy(v12);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = a6(a1, a2, v9);
  _Block_release(v9);
  return v10;
}

uint64_t sub_1000444B4(void (*a1)(unsigned char *), uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    id v13 = *(void **)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *uint64_t v12 = v13;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
    sub_100037FF4((uint64_t)a1);
    id v14 = v13;
    LOBYTE(v13)  = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
    if ((v13 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x1000448ECLL);
    }
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16)  = a1;
    *(void *)(v15 + 24)  = a2;
    swift_retain();
    sub_100043C78(0, (uint64_t)sub_10006F480, v15);
    swift_release();
    uint64_t v16 = (void *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v17 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    *uint64_t v16 = a1;
    v16[1]  = a2;
    swift_retain();
    sub_100011E30(v17);
    *uint64_t v7 = 3;
    swift_storeEnumTagMultiPayload();
    a1(v7);
    sub_100011E30((uint64_t)a1);
    return sub_100013308((uint64_t)v7, type metadata accessor for DriverEvent);
  }
  return result;
}

Swift::Int sub_100044900()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100044A64()
{
  return sub_100044900();
}

void sub_100044AA8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100044C14()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100044D80(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2]  = *(_OWORD *)(a1 + 32);
  v7[3]  = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0]  = *(_OWORD *)a1;
  v7[1]  = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3]  = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0]  = *(_OWORD *)a2;
  v9[1]  = v5;
  return sub_100068958((uint64_t)v7, (uint64_t)v9) & 1;
}

id sub_100044DDC()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v3 = objc_allocWithZone((Class)WiFiSoftError);
    NSString v4 = String._bridgeToObjectiveC()();
    id v2 = [v3 initWithName:v4];

    long long v5 = *(void **)(v0 + 64);
    *(void *)(v0 + 64)  = v2;
    id v6 = v2;
    sub_100068670(v5);
  }
  sub_10006D454(v1);
  return v2;
}

unint64_t AppleDevice.machServiceName.getter()
{
  return 0xD000000000000012;
}

uint64_t AppleDevice.keychain.getter()
{
  return swift_retain();
}

uint64_t AppleDevice.preferencesStorage.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  id v2 = *(void **)(v0 + 208);
  swift_retain();
  swift_retain();
  id v3 = v2;
  return v1;
}

IONotificationPortRef AppleDevice.__allocating_init()()
{
  return AppleDevice.init()();
}

IONotificationPortRef AppleDevice.init()()
{
  kern_return_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void **aBlock;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;

  uint64_t v1 = (io_iterator_t *)v0;
  uint64_t v67 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v61 = *(void *)(v2 - 8);
  BOOL v62 = v2;
  __chkstk_darwin();
  int64_t v60 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  char v68 = *(void *)(v4 - 8);
  char v69 = v4;
  __chkstk_darwin();
  uint64_t v56 = v5;
  char v57 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047D0B8);
  __chkstk_darwin();
  uint64_t v66 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoutingSocket();
  char v64 = *(void *)(v7 - 8);
  Class v65 = v7;
  __chkstk_darwin();
  uint64_t v63 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(v71 - 1);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  uint64_t v59 = type metadata accessor for DispatchQoS();
  NSData v58 = *(void *)(v59 - 8);
  __chkstk_darwin();
  id v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v70 = type metadata accessor for Lock();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  *(void *)(v14 + 16)  = v15;
  *uint64_t v15 = 0;
  v0[3]  = v14;
  v0[4]  = (uint64_t)&_swiftEmptyDictionarySingleton;
  v0[5]  = (uint64_t)_swiftEmptyArrayStorage;
  v0[6]  = (uint64_t)[objc_allocWithZone((Class)CWFInterface) initWithServiceType:1];
  sub_10006F314(0, (unint64_t *)&qword_10047C320);
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_10000F9CC(qword_100488070, (uint64_t *)&unk_10047C330);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void *))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v71);
  uint64_t v16 = v13;
  v0[7]  = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[8]  = 1;
  *(_OWORD *)(v0 + 9)  = 0u;
  v0[19]  = 0;
  *(_OWORD *)(v0 + 11)  = 0u;
  *(_OWORD *)(v0 + 13)  = 0u;
  *(_OWORD *)(v0 + 15)  = 0u;
  v0[17]  = 0;
  v0[20]  = 0;
  v0[21]  = 0;
  v0[22]  = (uint64_t)&_swiftEmptyDictionarySingleton;
  IONotificationPortRef result = (IONotificationPortRef)kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    type metadata accessor for AppleKeychain(0);
    uint64_t v21 = swift_allocObject();
    Logger.init(subsystem:category:)();
    *(_DWORD *)(v21 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken)  = -1;
    int v22 = (void *)(v21 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    void *v22 = &_swiftEmptySetSingleton;
    v22[1]  = 0;
    *(void *)(v21 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors)  = &_swiftEmptyDictionarySingleton;
    uint64_t v23 = (void *)(v21 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *uint64_t v23 = 0xD000000000000012;
    v23[1]  = 0x80000001003D7B30;
    uint64_t v24 = (uint64_t *)(v21 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    *uint64_t v24 = v18;
    v24[1]  = v20;
    v0[23]  = v21;
    if (qword_10047BF98 != -1) {
      swift_once();
    }
    int v25 = (void *)static SCPreferencesRef.p2pPreferences;
    type metadata accessor for InMemoryPreferenceStorage();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16)  = &_swiftEmptyDictionarySingleton;
    uint64_t v27 = swift_allocObject();
    id v28 = v25;
    uint64_t v29 = (_DWORD *)swift_slowAlloc();
    *(void *)(v27 + 16)  = v29;
    *uint64_t v29 = 0;
    v0[24]  = v27;
    v0[25]  = v26;
    v0[26]  = (uint64_t)v28;
    uint64_t v30 = (uint64_t)v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
    *(void *)(v30 + 32)  = 0;
    *(_OWORD *)uint64_t v30 = 0u;
    *(_OWORD *)(v30 + 16)  = 0u;
    uint64_t v31 = (uint64_t)v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    Logger.init(subsystem:category:)();
    type metadata accessor for Socket();
    swift_allocObject();
    char v32 = Socket.init(domain:type:proto:)(2, 2, 0);
    if (!v32) {
      goto LABEL_7;
    }
    char v33 = v32;
    uint64_t v34 = v66;
    RoutingSocket.init()(v66);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v34, 1, v65) == 1)
    {
      swift_release();
      sub_1000380B4(v34, &qword_10047D0B8);
LABEL_7:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_100068670(*((id *)v1 + 8));
      sub_1000380B4((uint64_t)(v1 + 18), &qword_10047D0D0);

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
      swift_release();
      sub_1000380B4(v30, &qword_10047D0D8);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v31, v69);
      swift_deallocPartialClassInstance();
      return 0;
    }
    uint64_t v35 = v63;
    sub_100013368(v34, v63, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
    *((void *)v1 + 2)  = v33;
    sub_10006E4B4(v35, (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
    swift_retain();
    IONotificationPortRef result = IONotificationPortCreate(kIOMainPortDefault);
    if (result)
    {
      char v36 = result;
      *((void *)v1 + 18)  = result;
      if (qword_10047C178 != -1) {
        swift_once();
      }
      IONotificationPortSetDispatchQueue(v36, (dispatch_queue_t)static OS_dispatch_queue.p2p);
      sub_10001FBB8((uint64_t)&off_10044FEB0);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v38 = (IONotificationPort *)*((void *)v1 + 18);
      swift_beginAccess();
      CFDictionaryRef v39 = isa;
      LODWORD(isa)  = IOServiceAddMatchingNotification(v38, "IOServiceMatched", v39, (IOServiceMatchingCallback)sub_100047B58, v1, v1 + 38);
      swift_endAccess();
      if (!isa)
      {
        swift_beginAccess();
        CFDictionaryRef v40 = v39;
        uint64_t v41 = IOServiceAddMatchingNotification(v38, "IOServiceTerminate", v40, (IOServiceMatchingCallback)sub_10004866C, v1, v1 + 39);
        swift_endAccess();
        if (!v41)
        {
          uint64_t v42 = (void *)*((void *)v1 + 6);
          [v42 setTargetQueue:*((void *)v1 + 7)];
          uint64_t v43 = swift_allocObject();
          swift_weakInit();
          uint64_t v77 = sub_1000686B8;
          uint64_t v78 = v43;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v74 = 1107296256;
          uint64_t v75 = sub_100048E74;
          char v76 = &unk_1004565E8;
          uint64_t v44 = _Block_copy(&aBlock);
          uint64_t v45 = v42;
          swift_release();
          [v45 setEventHandler:v44];
          _Block_release(v44);

          uint64_t v46 = (void *)*((void *)v1 + 6);
          [v46 activate];
          char v70 = *((void *)v1 + 7);
          uint64_t v71 = v40;
          uint64_t v47 = v68;
          uint64_t v48 = v69;
          uint64_t v49 = v57;
          (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v57, (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger, v69);
          uint64_t v50 = (*(unsigned __int8 *)(v47 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
          uint64_t v51 = swift_allocObject();
          *(void *)(v51 + 16)  = v46;
          (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v51 + v50, v49, v48);
          uint64_t v77 = sub_10006878C;
          uint64_t v78 = v51;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v74 = 1107296256;
          uint64_t v75 = sub_10000E5D0;
          char v76 = &unk_100456638;
          uint64_t v52 = _Block_copy(&aBlock);
          uint64_t v53 = v46;
          static DispatchQoS.unspecified.getter();
          uint64_t v72 = _swiftEmptyArrayStorage;
          sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100010BCC((uint64_t *)&unk_10047D0F0);
          sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
          char v54 = v60;
          uint64_t v55 = v62;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v52);
          swift_release();

          (*(void (**)(char *, uint64_t))(v61 + 8))(v54, v55);
          (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v59);
          sub_100013308(v63, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
          swift_release();
          return (IONotificationPortRef)v1;
        }
      }
      sub_100013308(v35, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
      swift_release();

      swift_release();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100045C80(io_iterator_t a1)
{
  uint64_t v177 = *v1;
  uint64_t v174 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v174 - 8);
  __chkstk_darwin();
  uint64_t v173 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v172 - 8);
  __chkstk_darwin();
  int v171 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for Logger();
  uint64_t v176 = *(void *)(v170 - 8);
  uint64_t v7 = *(void *)(v176 + 64);
  __chkstk_darwin();
  uint64_t v175 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int8 v180 = v1;
  uint64_t v178 = v1[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v178 + 16));
  io_iterator_t v185 = a1;
  io_object_t v8 = IOIteratorNext(a1);
  if (!v8) {
    goto LABEL_137;
  }
  io_registry_entry_t v9 = v8;
  uint64_t v10 = (char *)v180 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
  uint64_t v11 = v180 + 5;
  uint64_t v12 = (uint64_t)v180 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  uint64_t v182 = (void **)(v180 + 4);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v155 = v12;
  swift_beginAccess();
  uint64_t v183 = 0;
  uint64_t v166 = &v196;
  CFAllocatorRef v186 = kCFAllocatorDefault;
  uint64_t v160 = v7 + 7;
  uint64_t v161 = v176 + 16;
  id v13 = v10;
  uint64_t v159 = v176 + 32;
  uint64_t v163 = (void (**)(char *, uint64_t))(v3 + 8);
  long long v164 = &v190;
  uint64_t v162 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v184 = (char *)&type metadata for Swift.AnyObject + 8;
  *(void *)&long long v14 = 136315138;
  long long v179 = v14;
  unint64_t v169 = 0x80000001003DA6E0;
  uint64_t v167 = (char *)&type metadata for Any + 8;
  unint64_t v168 = 0x80000001003DA700;
  *(void *)&long long v14 = 136315394;
  long long v157 = v14;
  *(void *)&long long v14 = 136315650;
  long long v158 = v14;
  uint64_t v165 = 0x6E6574614C776F6CLL;
  uint64_t v154 = "WiFi-Aware Discovery+Data";
  unint64_t v156 = 0x80000001003DA740;
  uint64_t v152 = "IO80211InterfaceRole";
  unint64_t v153 = 0x80000001003DA720;
  uint64_t v187 = v11;
  do
  {
    uint64_t v15 = (__CFString *)String._bridgeToObjectiveC()();
    CFProperty  = IORegistryEntryCreateCFProperty(v9, v15, v186, 0);

    if (!CFProperty || (*(void *)&v197[0]  = CFProperty, (swift_dynamicCast() & 1) == 0))
    {
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v31))
      {
LABEL_26:

        goto LABEL_27;
      }
      char v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "Matched a service but unable to query its interface name", v32, 2u);
LABEL_24:
      swift_slowDealloc();
      goto LABEL_26;
    }
    long long v17 = v189;
    uint64_t v18 = *v182;
    if ((*v182)[2])
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_10000DDE0(v17, *((uint64_t *)&v17 + 1));
      if (v20)
      {
        uint64_t v21 = v19;
        int v22 = *((_DWORD *)v18 + 9);
        swift_bridgeObjectRelease();
        if (v21 < 0) {
          goto LABEL_140;
        }
        uint64_t v23 = *v182;
        if (v21 >= 1 << *((unsigned char *)*v182 + 32)) {
          goto LABEL_140;
        }
        if (((v23[((unint64_t)v21 >> 6) + 8] >> v21) & 1) == 0) {
          goto LABEL_141;
        }
        if (v22 != *((_DWORD *)v23 + 9)) {
          goto LABEL_142;
        }
        uint64_t v24 = *(void *)(v23[7] + 8 * v21);
        uint64_t v25 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service;
        io_object_t v26 = *(_DWORD *)(v24
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service);
        *(_DWORD *)(v24
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service)  = v9;
        swift_retain();
        IOObjectRelease(v26);
        IOObjectRetain(*(_DWORD *)(v24 + v25));
        swift_release();
        swift_bridgeObjectRetain();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = v13;
          uint64_t v30 = swift_slowAlloc();
          *(void *)&long long v189 = swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = v179;
          swift_bridgeObjectRetain();
          *(void *)(v30 + 4)  = sub_100010680(v17, *((unint64_t *)&v17 + 1), (uint64_t *)&v189);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Already discovered %s", (uint8_t *)v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v13 = v29;
          goto LABEL_24;
        }
LABEL_25:
        swift_bridgeObjectRelease_n();
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    memset(v197, 0, 44);
    swift_getKeyPath();
    uint64_t v33 = __chkstk_darwin();
    __int16 v138 = v197;
    uint64_t v139 = v33;
    uint64_t v140 = 16;
    unint64_t v181 = v17;
    uint64_t v34 = v183;
    sub_10000E350((uint64_t)sub_10000E464, (uint64_t)(&v141 - 6), v17, *((uint64_t *)&v17 + 1));
    swift_release();
    sub_1003ABCD8(0);
    if (ioctl(_:_:_:)() || (v197[1] & 0xE0) != 0x80)
    {
      uint64_t v183 = v34;
      swift_bridgeObjectRetain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v27, v37)) {
        goto LABEL_25;
      }
      uint64_t v38 = swift_slowAlloc();
      *(void *)&long long v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = v179;
      swift_bridgeObjectRetain();
      *(void *)(v38 + 4)  = sub_100010680(v181, *((unint64_t *)&v17 + 1), (uint64_t *)&v189);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v37, "Ignoring %s because its not a WiFi interface", (uint8_t *)v38, 0xCu);
      goto LABEL_23;
    }
    sub_1000687F0(&qword_10047D138, (void (*)(uint64_t))type metadata accessor for AppleDevice);
    static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v189);
    uint64_t v183 = v34;
    if (BYTE4(v189))
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v35)) {
        goto LABEL_25;
      }
      uint64_t v36 = swift_slowAlloc();
      *(void *)&long long v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = v179;
      swift_bridgeObjectRetain();
      *(void *)(v36 + 4)  = sub_100010680(v181, *((unint64_t *)&v17 + 1), (uint64_t *)&v189);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v35, "Ignoring %s because no interface index found", (uint8_t *)v36, 0xCu);
LABEL_23:
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_24;
    }
    int v39 = v189;
    CFDictionaryRef v40 = (__CFString *)String._bridgeToObjectiveC()();
    CFTypeRef v41 = IORegistryEntryCreateCFProperty(v9, v40, v186, 0);

    if (v41 && (*(void *)&v194[0]  = v41, (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v42 = *((void *)&v17 + 1);
      uint64_t v43 = v13;
      int v44 = v9;
      uint64_t v45 = v195;
      uint64_t v46 = v196;
      if (!v196) {
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v42 = *((void *)&v17 + 1);
      uint64_t v43 = v13;
      uint64_t v47 = (__CFString *)String._bridgeToObjectiveC()();
      int v44 = v9;
      uint64_t v48 = IORegistryEntryCreateCFProperty(v9, v47, v186, 0);

      if (!v48) {
        goto LABEL_133;
      }
      uint64_t v195 = v48;
      int v49 = swift_dynamicCast();
      uint64_t v46 = v49 ? *((void *)&v189 + 1) : 0;
      uint64_t v45 = v49 ? (void *)v189 : 0;
      if (!v46) {
        goto LABEL_133;
      }
    }
    int v50 = v39;
    unint64_t v51 = 0xEE00657275746375;
    if (v45 == (void *)0x7274736172666E49 && v46 == 0xEE00657275746375)
    {
      unsigned int v150 = 0;
    }
    else if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      unsigned int v150 = 0;
    }
    else if (v45 == (void *)0x6B6E694C726941 && v46 == 0xE700000000000000 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      unsigned int v150 = 1;
    }
    else if (v45 == (void *)0xD000000000000014 && v46 == v156 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    }
           || v45 == (void *)0xD000000000000019 && v46 == v153
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unsigned int v150 = 2;
    }
    else
    {
      if ((v45 != (void *)0x6177412D69466957 || v46 != 0xEF61746144206572)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v45 == (void *)0x6E6574614C776F4CLL && v46 == 0xEA00000000007963
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned int v150 = 4;
LABEL_58:
          io_registry_entry_t v9 = v44;
          id v13 = v43;
          sub_100049574((uint64_t)v180, v150, v181, v42);
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
        if (v45 == (void *)0x504174666F53 && v46 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          io_registry_entry_t v9 = v44;
          id v13 = v43;
          uint64_t v11 = v187;
          goto LABEL_27;
        }
        char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v11 = v187;
        if (v134)
        {
          swift_bridgeObjectRelease();
          io_registry_entry_t v9 = v44;
          id v13 = v43;
          goto LABEL_27;
        }
LABEL_133:
        swift_bridgeObjectRetain();
        id v13 = v43;
        char v135 = Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v135, v136))
        {
          long long v137 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v189 = swift_slowAlloc();
          *(_DWORD *)long long v137 = v179;
          uint64_t v151 = (uint64_t)(v137 + 4);
          swift_bridgeObjectRetain();
          uint64_t v195 = (void *)sub_100010680(v181, v42, (uint64_t *)&v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "Unable to find role for interface: %s", v137, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        io_registry_entry_t v9 = v44;
        goto LABEL_27;
      }
      unsigned int v150 = 3;
    }
    swift_bridgeObjectRelease();
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v52) {
      goto LABEL_58;
    }
    uint64_t v151 = 0x7274736172666E49;
    type metadata accessor for AppleDevice.InterfaceHandle(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    int v53 = v50;
    io_registry_entry_t v9 = v44;
    uint64_t v54 = v183;
    uint64_t v55 = sub_100043308(v181, v42, v53, v44, v150);
    id v13 = v43;
    if (v54)
    {
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        unint64_t v58 = 0xEE00657275746375;
        uint64_t v148 = v13;
        io_registry_entry_t v144 = v9;
        uint64_t v59 = swift_slowAlloc();
        int64_t v60 = (void *)swift_slowAlloc();
        uint64_t v147 = swift_slowAlloc();
        *(void *)&long long v189 = v147;
        *(_DWORD *)uint64_t v59 = v158;
        swift_bridgeObjectRetain();
        uint64_t v195 = (void *)sub_100010680(v181, v42, (uint64_t *)&v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v149 = (void *)v42;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v59 + 12)  = 2080;
        switch(v150)
        {
          case 1u:
            unint64_t v58 = 0xE400000000000000;
            uint64_t v61 = 1279547201;
            goto LABEL_70;
          case 2u:
            unint64_t v58 = 0xE300000000000000;
            uint64_t v61 = 5128526;
            goto LABEL_70;
          case 3u:
            unint64_t v58 = 0xE800000000000000;
            uint64_t v61 = 0x61746144204E414ELL;
LABEL_70:
            uint64_t v151 = v61;
            break;
          default:
            break;
        }
        uint64_t v195 = (void *)sub_100010680(v151, v58, (uint64_t *)&v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 22)  = 2112;
        swift_errorRetain();
        uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v195 = (void *)v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v60 = v69;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to bind to %s[%s]: %@", (uint8_t *)v59, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();

        io_registry_entry_t v9 = v144;
        id v13 = v148;
        uint64_t v42 = (uint64_t)v149;
      }
      else
      {
        swift_errorRelease();
        swift_bridgeObjectRelease_n();

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_100049574((uint64_t)v180, v150, v181, v42);
      swift_bridgeObjectRelease();
      uint64_t v183 = 0;
      goto LABEL_27;
    }
    uint64_t v62 = v55;
    swift_bridgeObjectRetain_n();
    uint64_t v143 = v62;
    swift_retain();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = (void *)v42;
    io_registry_entry_t v144 = v9;
    uint64_t v148 = v13;
    uint64_t v183 = 0;
    if (v65)
    {
      uint64_t v67 = swift_slowAlloc();
      *(void *)&long long v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = v157;
      swift_bridgeObjectRetain();
      uint64_t v195 = (void *)sub_100010680(v181, v42, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v67 + 12)  = 2080;
      switch(v150)
      {
        case 1u:
          unint64_t v51 = 0xE400000000000000;
          uint64_t v68 = 1279547201;
          goto LABEL_75;
        case 2u:
          unint64_t v51 = 0xE300000000000000;
          uint64_t v68 = 5128526;
          goto LABEL_75;
        case 3u:
          unint64_t v51 = 0xE800000000000000;
          uint64_t v68 = 0x61746144204E414ELL;
LABEL_75:
          uint64_t v151 = v68;
          break;
        default:
          break;
      }
      uint64_t v195 = (void *)sub_100010680(v151, v51, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Found new interface %s with role %s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v192 = 0;
    uint64_t v190 = 0;
    long long v189 = 0uLL;
    LODWORD(v191)  = 0;
    uint64_t v70 = swift_slowAlloc();
    uint64_t v71 = v181;
    sub_10000DEF0((uint64_t)&v189, 0x61uLL, v70, v70 + 16, 0, v181, v42);
    uint64_t v72 = v143;
    if (!Apple80211RawGet())
    {
      uint64_t v73 = String.init(cString:)();
      uint64_t v74 = (uint64_t *)(v72
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
      *uint64_t v74 = v73;
      v74[1]  = v75;
      swift_bridgeObjectRelease();
    }
    swift_slowDealloc();
    char v76 = v182;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v195 = *v76;
    *char v76 = (void *)0x8000000000000000;
    sub_1000348C4(v72, v71, (uint64_t)v66, isUniquelyReferenced_nonNull_native);
    *char v76 = v195;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v78 = *(void *)(*v11 + 16);
    uint64_t v149 = v66;
    if (!v78)
    {
      swift_release();
      uint64_t v82 = _swiftEmptyArrayStorage;
      goto LABEL_98;
    }
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    LODWORD(v151)  = 1;
    uint64_t v81 = 32;
    uint64_t v82 = _swiftEmptyArrayStorage;
    uint64_t v142 = v78;
    do
    {
      if (v80 >= *(void *)(*v11 + 16)) {
        goto LABEL_143;
      }
      uint64_t v83 = *v11 + v81;
      long long v203 = *(_OWORD *)v83;
      long long v84 = *(_OWORD *)(v83 + 16);
      long long v85 = *(_OWORD *)(v83 + 32);
      long long v86 = *(_OWORD *)(v83 + 48);
      uint64_t v206 = *(void *)(v83 + 64);
      *(_OWORD *)&v204[16]  = v85;
      long long v205 = v86;
      *(_OWORD *)uint64_t v204 = v84;
      if (v203 == __PAIR128__((unint64_t)v66, v181) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_10006F050((uint64_t)&v203);
        LODWORD(v151)  = 0;
        unint64_t v79 = v80;
      }
      else
      {
        if (!*(void *)&v204[16]
          || *(_OWORD *)&v204[8] != __PAIR128__((unint64_t)v66, v181)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_82;
        }
        uint64_t v146 = *(void *)&v204[24];
        uint64_t v147 = v79;
        uint64_t v89 = v176;
        uint64_t v90 = v170;
        (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v175, v148, v170);
        unint64_t v91 = (*(unsigned __int8 *)(v89 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
        unint64_t v92 = (v160 + v91) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v93 = swift_allocObject();
        long long v94 = v205;
        *(_OWORD *)(v93 + 48)  = *(_OWORD *)&v204[16];
        *(_OWORD *)(v93 + 64)  = v94;
        *(void *)(v93 + 80)  = v206;
        long long v95 = *(_OWORD *)v204;
        *(_OWORD *)(v93 + 16)  = v203;
        *(_OWORD *)(v93 + 32)  = v95;
        uint64_t v96 = *(void (**)(unint64_t, char *, uint64_t))(v89 + 32);
        uint64_t v78 = v142;
        v96(v93 + v91, v175, v90);
        int64_t v97 = (unint64_t *)(v93 + v92);
        uint64_t v98 = (uint64_t)v180;
        uint64_t v99 = (uint64_t)v149;
        *int64_t v97 = v181;
        v97[1]  = v99;
        *(void *)(v93 + ((v92 + 23) & 0xFFFFFFFFFFFFFFF8))  = v98;
        uint64_t v192 = sub_10006F22C;
        uint64_t v193 = v93;
        *(void *)&long long v189 = _NSConcreteStackBlock;
        *((void *)&v189 + 1)  = 1107296256;
        uint64_t v190 = sub_10000E5D0;
        uint64_t v191 = &unk_1004576F0;
        uint64_t v145 = _Block_copy(&v189);
        sub_10006F050((uint64_t)&v203);
        swift_bridgeObjectRetain();
        sub_10006F050((uint64_t)&v203);
        swift_retain();
        uint64_t v100 = v171;
        static DispatchQoS.unspecified.getter();
        uint64_t v195 = _swiftEmptyArrayStorage;
        sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        uint64_t v102 = v173;
        uint64_t v101 = v174;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v103 = v145;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v103);
        uint64_t v104 = v102;
        unint64_t v79 = v147;
        uint64_t v105 = v101;
        uint64_t v66 = v149;
        (*v163)(v104, v105);
        uint64_t v106 = v100;
        uint64_t v11 = v187;
        (*v162)(v106, v172);
        swift_release();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v82 = sub_1000C5D5C(0, v82[2] + 1, 1, v82);
      }
      unint64_t v88 = v82[2];
      unint64_t v87 = v82[3];
      if (v88 >= v87 >> 1) {
        uint64_t v82 = sub_1000C5D5C((void *)(v87 > 1), v88 + 1, 1, v82);
      }
      v82[2]  = v88 + 1;
      v82[v88 + 4]  = v80;
      sub_10006F0B0((uint64_t)&v203);
LABEL_82:
      ++v80;
      v81 += 72;
    }
    while (v78 != v80);
    if ((v151 & 1) == 0)
    {
      if ((v79 & 0x8000000000000000) != 0) {
        goto LABEL_144;
      }
      if (v79 < *(void *)(*v11 + 16))
      {
        uint64_t v113 = *v11 + 72 * v79;
        long long v114 = *(_OWORD *)(v113 + 80);
        uint64_t v115 = *(void *)(v113 + 96);
        long long v116 = *(_OWORD *)(v113 + 48);
        long long v200 = *(_OWORD *)(v113 + 64);
        long long v117 = *(_OWORD *)(v113 + 32);
        uint64_t v202 = v115;
        long long v201 = v114;
        long long v198 = v117;
        long long v199 = v116;
        uint64_t v151 = *((void *)&v200 + 1);
        uint64_t v118 = swift_allocObject();
        long long v119 = v198;
        *(_OWORD *)(v118 + 40)  = v199;
        long long v120 = v201;
        *(_OWORD *)(v118 + 56)  = v200;
        *(_OWORD *)(v118 + 72)  = v120;
        *(void *)(v118 + 16)  = v143;
        *(void *)(v118 + 88)  = v202;
        *(_OWORD *)(v118 + 24)  = v119;
        uint64_t v192 = sub_10006F024;
        uint64_t v193 = v118;
        *(void *)&long long v189 = _NSConcreteStackBlock;
        *((void *)&v189 + 1)  = 1107296256;
        uint64_t v190 = sub_10000E5D0;
        uint64_t v191 = &unk_1004576A0;
        long long v121 = _Block_copy(&v189);
        sub_10006F050((uint64_t)&v198);
        sub_10006F050((uint64_t)&v198);
        uint64_t v122 = v171;
        static DispatchQoS.unspecified.getter();
        uint64_t v195 = _swiftEmptyArrayStorage;
        sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        char v124 = v173;
        uint64_t v123 = v174;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v121);
        sub_10006F0B0((uint64_t)&v198);
        (*v163)(v124, v123);
        (*v162)(v122, v172);
LABEL_106:
        swift_release();
        goto LABEL_110;
      }
LABEL_145:
      __break(1u);
    }
    swift_release();
LABEL_98:
    switch(v150)
    {
      case 1u:
        sub_10004C038(v181, (unint64_t)v66);
        break;
      case 2u:
        break;
      case 3u:
        sub_10004C248(v181, v66);
        break;
      default:
        sub_1000136F4(v155, (uint64_t)&v189, &qword_10047D0D8);
        if (v191)
        {
          sub_10006EF50(&v189, (uint64_t)&v195);
          if (qword_10047C178 != -1) {
            swift_once();
          }
          uint64_t v151 = static OS_dispatch_queue.p2p;
          sub_100035FD4((uint64_t)&v195, (uint64_t)v194);
          uint64_t v107 = swift_allocObject();
          sub_10006EF50(v194, v107 + 16);
          unint64_t v108 = v181;
          *(void *)(v107 + 56)  = v180;
          *(unsigned char *)(v107 + 64)  = 0;
          *(void *)(v107 + 72)  = v108;
          *(void *)(v107 + 80)  = v66;
          uint64_t v192 = sub_10006EFB0;
          uint64_t v193 = v107;
          *(void *)&long long v189 = _NSConcreteStackBlock;
          *((void *)&v189 + 1)  = 1107296256;
          uint64_t v190 = sub_10000E5D0;
          uint64_t v191 = &unk_100457650;
          uint64_t v109 = _Block_copy(&v189);
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v110 = v171;
          static DispatchQoS.unspecified.getter();
          uint64_t v188 = _swiftEmptyArrayStorage;
          sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100010BCC((uint64_t *)&unk_10047D0F0);
          sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
          uint64_t v112 = v173;
          uint64_t v111 = v174;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v109);
          (*v163)(v112, v111);
          (*v162)(v110, v172);
          sub_100010754((uint64_t)&v195);
          goto LABEL_106;
        }
        sub_1000380B4((uint64_t)&v189, &qword_10047D0D8);
        break;
    }
LABEL_110:
    uint64_t v125 = v82[2];
    if (!v125) {
      goto LABEL_119;
    }
    swift_bridgeObjectRetain();
    while (2)
    {
      if (v125 > v82[2])
      {
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      unint64_t v126 = v82[v125 + 3];
      swift_beginAccess();
      long long v127 = (void *)*v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v127 = sub_1001DFD5C(v127);
      }
      unint64_t v128 = v127[2];
      if (v126 >= v128) {
        goto LABEL_139;
      }
      unint64_t v129 = v128 - 1;
      uint64_t v130 = v128 - 1 - v126;
      if (v130 < 0)
      {
        LODWORD(v140)  = 0;
        uint64_t v139 = 1046;
        LOBYTE(v138)  = 2;
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100047B28);
      }
      --v125;
      uint64_t v131 = &v127[9 * v126];
      uint64_t v132 = v131[11];
      uint64_t v133 = (void *)v131[9];
      memmove(v131 + 4, v131 + 13, 72 * v130);
      v127[2]  = v129;
      uint64_t v11 = v187;
      *uint64_t v187 = v127;
      swift_endAccess();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100011E30(v132);
      if (v125) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease();
LABEL_119:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100049574((uint64_t)v180, v150, v181, (uint64_t)v149);
    swift_bridgeObjectRelease();
    io_registry_entry_t v9 = v144;
    id v13 = v148;
LABEL_27:
    IOObjectRelease(v9);
    io_registry_entry_t v9 = IOIteratorNext(v185);
  }
  while (v9);
LABEL_137:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v178 + 16));
}

uint64_t sub_100047B58(uint64_t a1, uint64_t a2)
{
  return sub_100048684(a1, a2, (void (*)(uint64_t))sub_100045C80);
}

void sub_100047B70(io_iterator_t a1)
{
  uint64_t v68 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v68 - 8);
  __chkstk_darwin();
  uint64_t v67 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v66 - 8);
  __chkstk_darwin();
  BOOL v65 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v1[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v60 + 16));
  io_object_t v7 = IOIteratorNext(a1);
  if (v7)
  {
    io_registry_entry_t v9 = v7;
    uint64_t v61 = 0;
    uint64_t v10 = v1 + 4;
    uint64_t v73 = v1 + 5;
    CFAllocatorRef v11 = kCFAllocatorDefault;
    os_log_type_t v64 = &v86;
    uint64_t v63 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v62 = (void (**)(char *, uint64_t))(v5 + 8);
    *(void *)&long long v8 = 136315138;
    long long v75 = v8;
    uint64_t v69 = (char *)&type metadata for Any + 8;
    io_iterator_t v82 = a1;
    uint64_t v72 = (char *)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    uint64_t v71 = v1 + 4;
    CFAllocatorRef v70 = kCFAllocatorDefault;
    uint64_t v81 = (char *)&type metadata for Swift.AnyObject + 8;
    while (1)
    {
      uint64_t v12 = (__CFString *)String._bridgeToObjectiveC()();
      CFProperty  = IORegistryEntryCreateCFProperty(v9, v12, v11, 0);

      if (!CFProperty || (uint64_t v90 = CFProperty, (swift_dynamicCast() & 1) == 0))
      {
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to query interface name from service that was removed", v21, 2u);
          swift_slowDealloc();
        }

        goto LABEL_4;
      }
      uint64_t v14 = (uint64_t)aBlock;
      unint64_t v15 = v85;
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = v75;
        swift_bridgeObjectRetain();
        *(void *)(v18 + 4)  = sub_100010680(v14, v15, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removed interface %s", (uint8_t *)v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_10000DDE0(v14, v15);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if (v24) {
        break;
      }
      swift_endAccess();
      swift_bridgeObjectRetain();
      os_log_type_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = v75;
        swift_bridgeObjectRetain();
        *(void *)(v37 + 4)  = sub_100010680(v14, v15, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "No handle found for %s", (uint8_t *)v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      a1  = v82;
LABEL_4:
      IOObjectRelease(v9);
      io_registry_entry_t v9 = IOIteratorNext(a1);
      if (!v9) {
        goto LABEL_36;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v10;
    uint64_t v90 = (void *)*v10;
    *uint64_t v10 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001714FC();
      uint64_t v26 = (uint64_t)v90;
    }
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void *)(*(void *)(v26 + 56) + 8 * v22);
    sub_10016F708(v22, v26);
    *uint64_t v10 = v26;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v27 = (__CFString *)String._bridgeToObjectiveC()();
    os_log_type_t v28 = IORegistryEntryCreateCFProperty(v9, v27, v11, 0);

    uint64_t v80 = v14;
    if (v28 && (uint64_t v90 = v28, (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v29 = (uint64_t)aBlock;
      unint64_t v30 = v85;
      sub_100013D44((uint64_t)aBlock, v85);
      unint64_t v31 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v32 = type metadata accessor for BinaryDecoder();
      uint64_t v33 = (void *)swift_allocObject();
      v33[5]  = &_swiftEmptyDictionarySingleton;
      v33[2]  = v29;
      v33[3]  = v30;
      uint64_t v34 = 0;
      switch(v30 >> 62)
      {
        case 1uLL:
          uint64_t v34 = (int)v29;
          break;
        case 2uLL:
          uint64_t v34 = *(void *)(v29 + 16);
          break;
        default:
          break;
      }
      v33[4]  = v34;
      swift_beginAccess();
      v33[5]  = v31;
      swift_bridgeObjectRelease();
      unint64_t v87 = (void *)v32;
      uint64_t v88 = sub_1000687F0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t aBlock = v33;
      uint64_t v38 = v61;
      uint64_t v39 = sub_1002616B0(&aBlock);
      if (!v38)
      {
        uint64_t v77 = v39;
        uint64_t v61 = 0;
        sub_10000C970(v29, v30);
        int v76 = 0;
        goto LABEL_28;
      }
      swift_errorRelease();
      sub_10000C970(v29, v30);
      uint64_t v77 = 0;
      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v77 = 0;
    }
    int v76 = 1;
LABEL_28:
    int v79 = *(unsigned __int8 *)(v83
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role);
    uint64_t v40 = *(void *)(v83
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                    + 8);
    uint64_t v78 = *(void *)(v83
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
    uint64_t v74 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
    CFTypeRef v41 = *(void **)(v83
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    uint64_t v42 = (void *)(v83
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v43 = *(void *)(v83
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v44 = *(void *)(v83
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                    + 8);
    uint64_t v45 = (void **)v73;
    swift_beginAccess();
    uint64_t v46 = *v45;
    swift_bridgeObjectRetain();
    id v47 = v41;
    sub_100037FF4(v43);
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v45 = v46;
    if ((v48 & 1) == 0)
    {
      uint64_t v46 = sub_1000C5E6C(0, v46[2] + 1, 1, v46);
      *uint64_t v73 = v46;
    }
    unint64_t v50 = v46[2];
    unint64_t v49 = v46[3];
    if (v50 >= v49 >> 1)
    {
      uint64_t v46 = sub_1000C5E6C((void *)(v49 > 1), v50 + 1, 1, v46);
      *uint64_t v73 = v46;
    }
    v46[2]  = v50 + 1;
    unint64_t v51 = &v46[9 * v50];
    v51[4]  = v80;
    v51[5]  = v15;
    *((unsigned char *)v51 + 48)  = v79;
    uint64_t v52 = v77;
    v51[7]  = v78;
    v51[8]  = v40;
    v51[9]  = v47;
    *((_WORD *)v51 + 42)  = WORD2(v52);
    *((_DWORD *)v51 + 20)  = v52;
    *((unsigned char *)v51 + 86)  = v76;
    v51[11]  = v43;
    v51[12]  = v44;
    swift_endAccess();
    if (*v42)
    {
      int v53 = *(void **)(v83 + v74);
      uint64_t v88 = (uint64_t)sub_10006E350;
      uint64_t v89 = v83;
      uint64_t aBlock = _NSConcreteStackBlock;
      unint64_t v85 = 1107296256;
      long long v86 = sub_10000E5D0;
      unint64_t v87 = &unk_100457560;
      uint64_t v54 = _Block_copy(&aBlock);
      id v55 = v53;
      swift_retain();
      uint64_t v56 = v65;
      static DispatchQoS.unspecified.getter();
      uint64_t v90 = _swiftEmptyArrayStorage;
      sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100010BCC((uint64_t *)&unk_10047D0F0);
      sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
      os_log_type_t v57 = v67;
      uint64_t v58 = v68;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v54);
      swift_release();

      (*v63)(v57, v58);
      (*v62)(v56, v66);
    }
    swift_release();
    a1  = v82;
    uint64_t v10 = v71;
    CFAllocatorRef v11 = v70;
    goto LABEL_4;
  }
LABEL_36:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v60 + 16));
}

uint64_t sub_10004866C(uint64_t a1, uint64_t a2)
{
  return sub_100048684(a1, a2, (void (*)(uint64_t))sub_100047B70);
}

uint64_t sub_100048684(uint64_t result, uint64_t a2, void (*a3)(uint64_t))
{
  if (result)
  {
    swift_retain();
    a3(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000486E0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  io_object_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  CFAllocatorRef v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047C178 != -1) {
    swift_once();
  }
  v16[0]  = static OS_dispatch_queue.p2p;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = a2;
  *(void *)(v12 + 24)  = a1;
  aBlock[4]  = sub_10006F30C;
  aBlock[5]  = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100457740;
  id v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = a1;
  static DispatchQoS.unspecified.getter();
  v16[1]  = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1000489E0(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100048A40(a2);
    return swift_release();
  }
  return result;
}

void sub_100048A40(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10047C178 != -1) {
    swift_once();
  }
  uint64_t v10 = static OS_dispatch_queue.p2p;
  *uint64_t v9 = static OS_dispatch_queue.p2p;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = (id)v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ([a1 type] == (id)12)
  {
    id v12 = [a1 info];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v14 + 16) && (uint64_t v17 = sub_10000DDE0(v15, v16), (v18 & 1) != 0))
      {
        sub_1000107A4(*(void *)(v14 + 56) + 32 * v17, (uint64_t)&v33);
      }
      else
      {
        long long v33 = 0u;
        long long v34 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v34 + 1))
      {
        sub_10006F314(0, (unint64_t *)&unk_10047DCF0);
        if ((swift_dynamicCast() & 1) == 0) {
          return;
        }
        id v19 = v32;
        id v20 = [v32 interfaceName];
        if (!v20) {
          goto LABEL_22;
        }
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        uint64_t v25 = *(void *)(v2 + 24);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 16));
        swift_beginAccess();
        uint64_t v26 = *(void *)(v2 + 32);
        if (*(void *)(v26 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v27 = sub_10000DDE0(v22, v24);
          if (v28)
          {
            uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRelease_n();
            unint64_t v30 = *(void (**)(char *))(v29
                                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
            sub_100037FF4((uint64_t)v30);
            swift_release();
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
            if (v30)
            {
              swift_retain();
              *(void *)uint64_t v5 = [v19 state] == 0;
              *(_OWORD *)(v5 + 8)  = 0u;
              *(_OWORD *)(v5 + 24)  = 0u;
              *((_WORD *)v5 + 20)  = 0;
              swift_storeEnumTagMultiPayload();
              v30(v5);

              sub_100011E30((uint64_t)v30);
              sub_100011E30((uint64_t)v30);
              sub_100013308((uint64_t)v5, type metadata accessor for DriverEvent);
              return;
            }
            goto LABEL_22;
          }
          swift_endAccess();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
        }
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
LABEL_22:

        return;
      }
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
    }
    sub_1000380B4((uint64_t)&v33, &qword_10047D0D0);
  }
}

void sub_100048E74(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_100048EDC(void *a1)
{
  id v10 = 0;
  unsigned int v1 = [a1 startMonitoringEventType:12 error:&v10];
  id v2 = v10;
  if (v1)
  {
    id v3 = v2;
  }
  else
  {
    id v4 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      swift_errorRetain();
      uint64_t v9 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v10 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to monitor for autjoin status changed event: %@", v7, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t AppleDevice.deinit()
{
  IONotificationPortDestroy(*(IONotificationPortRef *)(v0 + 144));
  swift_beginAccess();
  IOObjectRelease(*(_DWORD *)(v0 + 152));
  swift_beginAccess();
  IOObjectRelease(*(_DWORD *)(v0 + 156));
  unsigned int v1 = *(void **)(v0 + 48);
  [v1 stopMonitoringEventType:12];
  [v1 invalidate];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_100068670(*(id *)(v0 + 64));
  sub_1000380B4(v0 + 72, &qword_10047D0D0);

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  sub_100013308(v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  sub_1000380B4(v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, &qword_10047D0D8);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t AppleDevice.__deallocating_deinit()
{
  AppleDevice.deinit();

  return swift_deallocClassInstance();
}

void AppleDevice.send(request:data:)(unsigned int a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  id v4 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_lock(v4);
  sub_1003ABCD8(a1);
  unsigned int v5 = ioctl(_:_:_:)();
  if (v5 == -1)
  {
    unsigned int v5 = errno.getter();
    goto LABEL_5;
  }
  if (v5)
  {
LABEL_5:
    uint64_t v7 = v5;
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v8 = v7;
    *(void *)(v8 + 8)  = 0;
    *(unsigned char *)(v8 + 16)  = 0;
    swift_willThrow();
    os_log_type_t v6 = *(os_unfair_lock_s **)(v3 + 16);
    goto LABEL_6;
  }
  os_log_type_t v6 = v4;
LABEL_6:
  os_unfair_lock_unlock(v6);
}

uint64_t sub_1000493D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006EC68(a1 + 24, (uint64_t)v4, &qword_10047DC20);
  uint64_t result = sub_10006EC68((uint64_t)v4, (uint64_t)&v5, &qword_10047DC20);
  if (v5)
  {
    *(_DWORD *)a2  = *(unsigned __int16 *)(v5 + 2);
    *(unsigned char *)(a2 + 4)  = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static ApplePlatform.withInterface<A>(_:matchingFamily:_:)(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
  static ApplePlatform.enumerateInterfaceAddresses(_:)((uint64_t (*)(long long *))sub_100068838);
  if (v4)
  {
    uint64_t v3 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a2, v3);
  }
}

void sub_100049574(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a1 + 176);
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 176);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100031454(a2), (v11 & 1) != 0))
  {
    id v12 = *(void **)(*(void *)(v9 + 56) + 24 * v10);
    swift_endAccess();
    swift_bridgeObjectRetain();
    id v13 = v12;
    sub_100068BF4(v12);
    swift_beginAccess();
    id v14 = v13;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    sub_10003476C((uint64_t)v14, a3, a4, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v8 = v16;
    swift_bridgeObjectRelease();
    swift_endAccess();
    while (OS_dispatch_semaphore.signal()())
      ;
  }
  else
  {
    swift_endAccess();
  }
}

void sub_1000496BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 54))
  {
    unint64_t v10 = sub_1002623B8();
    unint64_t v11 = HIDWORD(v10);
    LOBYTE(v12)  = v10 & 0xFC | 2;
    unint64_t v35 = v10 >> 16;
    unint64_t v36 = v10 >> 8;
    unint64_t v34 = v10 >> 24;
    unint64_t v13 = v10 >> 40;
  }
  else
  {
    LODWORD(v11)  = *(unsigned __int16 *)(a1 + 52);
    uint64_t v12 = *(unsigned int *)(a1 + 48);
    unint64_t v14 = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(a1 + 52) << 32);
    LODWORD(v13)  = v11 >> 8;
    unint64_t v35 = v14 >> 16;
    unint64_t v36 = v14 >> 8;
    unint64_t v34 = v14 >> 24;
  }
  sub_10006F050(a1);
  sub_10006F050(a1);
  sub_10006F050(a1);
  swift_bridgeObjectRetain();
  sub_10006F050(a1);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unsigned __int8 v31 = v13;
    unsigned __int8 v32 = v12;
    uint64_t v33 = a2;
    uint64_t v17 = swift_slowAlloc();
    v37[0]  = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315906;
    uint64_t v19 = *(void *)a1;
    unint64_t v18 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    sub_100010680(v19, v18, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F0B0(a1);
    sub_10006F0B0(a1);
    *(_WORD *)(v17 + 12)  = 2080;
    unint64_t v20 = 0xEE00657275746375;
    uint64_t v21 = 0x7274736172666E49;
    switch(*(unsigned char *)(a1 + 16))
    {
      case 1:
        unint64_t v20 = 0xE400000000000000;
        uint64_t v21 = 1279547201;
        break;
      case 2:
        unint64_t v20 = 0xE300000000000000;
        uint64_t v21 = 5128526;
        break;
      case 3:
        unint64_t v20 = 0xE800000000000000;
        uint64_t v21 = 0x61746144204E414ELL;
        break;
      case 4:
        unint64_t v20 = 0xEB0000000079636ELL;
        uint64_t v21 = 0x6574614C20776F4CLL;
        break;
      default:
        break;
    }
    sub_100010680(v21, v20, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F0B0(a1);
    sub_10006F0B0(a1);
    *(_WORD *)(v17 + 22)  = 2080;
    uint64_t v22 = (CoreP2P::WiFiAddress *)(((unint64_t)v11 << 32) | ((unint64_t)v31 << 40) | ((unint64_t)v34 << 24) | ((unint64_t)v35 << 16) | ((unint64_t)v36 << 8) | v32);
    uint64_t v23 = WiFiAddress.description.getter((unint64_t)v22);
    sub_100010680(v23, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32)  = 2080;
    swift_bridgeObjectRetain();
    sub_100010680(a3, (unint64_t)a4, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Attempting recovery for %s[%s] with %s on %s", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2  = v33;
  }
  else
  {

    sub_10006F0B0(a1);
    sub_10006F0B0(a1);
    sub_10006F0B0(a1);
    sub_10006F0B0(a1);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = (CoreP2P::WiFiAddress *)(((unint64_t)v11 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v34 << 24) | ((unint64_t)v35 << 16) | ((unint64_t)v36 << 8) | v12);
  }
  v25._countAndFlagsBits  = a3;
  v25._object  = a4;
  Swift::String_optional v26 = AppleDevice.findOrCreateInterface(for:on:with:)((CoreP2P::WiFiInterfaceRole)*(unsigned char *)(a1 + 16), v25, v22);
  if (v26.value._object)
  {
    uint64_t v27 = *(void *)(a5 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 16));
    swift_beginAccess();
    if (*(void *)(*(void *)(a5 + 32) + 16))
    {
      swift_bridgeObjectRetain();
      sub_10000DDE0(v26.value._countAndFlagsBits, (uint64_t)v26.value._object);
      if (v28)
      {
        swift_endAccess();
        swift_retain();
        swift_bridgeObjectRelease_n();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 16));
        sub_1000444B4(*(void (**)(unsigned char *))(a1 + 56), *(void *)(a1 + 64));
        swift_release();
        return;
      }
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 16));
    unint64_t v30 = 0x80000001003DA760;
    uint64_t v29 = 0xD000000000000010;
  }
  else
  {
    uint64_t v29 = 0x6E6F697461657263;
    unint64_t v30 = 0xEF64656C69616620;
  }
  sub_100049BF4(v29, v30, a2, a1, a5);
}

void sub_100049BF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10006F050(a4);
  sub_10006F050(a4);
  sub_10006F050(a4);
  swift_bridgeObjectRetain();
  sub_10006F050(a4);
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v26 = a1;
    uint64_t v11 = swift_slowAlloc();
    v27[0]  = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v13 = *(void *)a4;
    unint64_t v12 = *(void *)(a4 + 8);
    swift_bridgeObjectRetain();
    sub_100010680(v13, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F0B0(a4);
    sub_10006F0B0(a4);
    *(_WORD *)(v11 + 12)  = 2080;
    unint64_t v14 = 0xEE00657275746375;
    uint64_t v15 = 0x7274736172666E49;
    switch(*(unsigned char *)(a4 + 16))
    {
      case 1:
        unint64_t v14 = 0xE400000000000000;
        uint64_t v15 = 1279547201;
        break;
      case 2:
        unint64_t v14 = 0xE300000000000000;
        uint64_t v15 = 5128526;
        break;
      case 3:
        unint64_t v14 = 0xE800000000000000;
        uint64_t v15 = 0x61746144204E414ELL;
        break;
      case 4:
        unint64_t v14 = 0xEB0000000079636ELL;
        uint64_t v15 = 0x6574614C20776F4CLL;
        break;
      default:
        break;
    }
    sub_100010680(v15, v14, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F0B0(a4);
    sub_10006F0B0(a4);
    *(_WORD *)(v11 + 22)  = 2080;
    swift_bridgeObjectRetain();
    sub_100010680(v26, a2, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to recover the interface for %s[%s] because %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006F0B0(a4);
    sub_10006F0B0(a4);
    sub_10006F0B0(a4);
    sub_10006F0B0(a4);
    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v16 = *(os_unfair_lock_s **)(*(void *)(a5 + 24) + 16);
  os_unfair_lock_lock(v16);
  uint64_t v17 = (void *)(a5 + 40);
  swift_beginAccess();
  unint64_t v18 = *(void **)(a5 + 40);
  sub_10006F050(a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + 40)  = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v18 = sub_1000C5E6C(0, v18[2] + 1, 1, v18);
    *uint64_t v17 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    unint64_t v18 = sub_1000C5E6C((void *)(v20 > 1), v21 + 1, 1, v18);
    *uint64_t v17 = v18;
  }
  v18[2]  = v21 + 1;
  uint64_t v22 = &v18[9 * v21];
  *((_OWORD *)v22 + 2)  = *(_OWORD *)a4;
  long long v23 = *(_OWORD *)(a4 + 16);
  long long v24 = *(_OWORD *)(a4 + 32);
  long long v25 = *(_OWORD *)(a4 + 48);
  v22[12]  = *(void *)(a4 + 64);
  *((_OWORD *)v22 + 4)  = v24;
  *((_OWORD *)v22 + 5)  = v25;
  *((_OWORD *)v22 + 3)  = v23;
  swift_endAccess();
  os_unfair_lock_unlock(v16);
}

Swift::String_optional __swiftcall AppleDevice.findOrCreateInterface(for:on:with:)(CoreP2P::WiFiInterfaceRole a1, Swift::String on, CoreP2P::WiFiAddress *with)
{
  unint64_t v156 = with;
  Swift::String v172 = on;
  uint64_t v5 = a1;
  unint64_t v159 = 0xEE00657275746375;
  unint64_t v160 = 0xEA00000000007963;
  uint64_t v167 = type metadata accessor for DispatchTimeInterval();
  uint64_t v157 = *(void *)(v167 - 8);
  __chkstk_darwin();
  uint64_t v165 = (uint64_t *)((char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v168 = type metadata accessor for DispatchTime();
  uint64_t v158 = *(void *)(v168 - 8);
  __chkstk_darwin();
  long long v164 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v166 = (char *)&v155 - v8;
  uint64_t v169 = *(void *)(v3 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v169 + 16));
  uint64_t v161 = (uint64_t *)(v3 + 32);
  swift_beginAccess();
  uint64_t v162 = v3;
  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v170 = v9 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & v10;
  int64_t v171 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v14 = 0;
  uint64_t v163 = v5;
  uint64_t v15 = v5;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_172:
      swift_beginAccess();
      io_registry_entry_t v144 = sub_100043294(4u, *v4);
      if (v144)
      {
        uint64_t v147 = v144;
        int64_t v31 = v145;
        uint64_t v22 = v146;
        swift_endAccess();
        swift_bridgeObjectRetain();
        sub_100068BF4(v147);
        if (v22) {
          goto LABEL_184;
        }
      }
      else
      {
        swift_endAccess();
        int64_t v31 = 0;
      }
      object  = v172._object;
      swift_bridgeObjectRetain_n();
      unsigned int v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v152 = (uint8_t *)swift_slowAlloc();
        v173[0]  = swift_slowAlloc();
        int64_t v171 = v31;
        *(_DWORD *)uint64_t v152 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v174 = sub_100010680(v172._countAndFlagsBits, (unint64_t)object, v173);
        int64_t v31 = v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "Failed to find the interface name returned when creating the low latency interface for %s", v152, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v22 = 0;
LABEL_184:
      swift_beginAccess();
      unint64_t v153 = (void *)sub_100033C8C(4u);
      swift_endAccess();
      sub_100068BF4(v153);
      while (OS_dispatch_semaphore.signal()())
        ;
LABEL_186:

      swift_release();
      goto LABEL_154;
    }
    if (v18 >= v171) {
      goto LABEL_48;
    }
    unint64_t v19 = *(void *)(v170 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v171) {
        goto LABEL_48;
      }
      unint64_t v19 = *(void *)(v170 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v171) {
          goto LABEL_48;
        }
        unint64_t v19 = *(void *)(v170 + 8 * v14);
        if (!v19)
        {
          int64_t v14 = v18 + 3;
          if (v18 + 3 >= v171) {
            goto LABEL_48;
          }
          unint64_t v19 = *(void *)(v170 + 8 * v14);
          if (!v19)
          {
            int64_t v14 = v18 + 4;
            if (v18 + 4 >= v171) {
              goto LABEL_48;
            }
            unint64_t v19 = *(void *)(v170 + 8 * v14);
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_25:
    unint64_t v21 = (int64_t *)(*(void *)(v9 + 48) + 16 * v17);
    int64_t v23 = *v21;
    uint64_t v22 = (void *)v21[1];
    uint64_t v24 = *(void *)(*(void *)(v9 + 56) + 8 * v17);
    uint64_t v4 = (uint64_t *)0xEE00657275746375;
    uint64_t v25 = 0x7274736172666E69;
    switch(*(unsigned char *)(v24
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role))
    {
      case 1:
        uint64_t v4 = (uint64_t *)0xE400000000000000;
        uint64_t v25 = 1818523489;
        break;
      case 2:
        uint64_t v25 = 0x67616E614D6E616ELL;
        uint64_t v4 = (uint64_t *)0xED0000746E656D65;
        break;
      case 3:
        uint64_t v4 = (uint64_t *)0xE700000000000000;
        uint64_t v25 = 0x617461446E616ELL;
        break;
      case 4:
        uint64_t v25 = 0x6E6574614C776F6CLL;
        uint64_t v4 = (uint64_t *)0xEA00000000007963;
        break;
      default:
        break;
    }
    uint64_t v26 = 0x7274736172666E69;
    unint64_t v27 = 0xEE00657275746375;
    switch(v15)
    {
      case 1:
        unint64_t v27 = 0xE400000000000000;
        if (v25 != 1818523489) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 2:
        unint64_t v27 = 0xED0000746E656D65;
        if (v25 != 0x67616E614D6E616ELL) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 3:
        unint64_t v27 = 0xE700000000000000;
        uint64_t v26 = 0x617461446E616ELL;
        goto LABEL_36;
      case 4:
        unint64_t v27 = 0xEA00000000007963;
        if (v25 != 0x6E6574614C776F6CLL) {
          goto LABEL_40;
        }
        goto LABEL_37;
      default:
LABEL_36:
        if (v25 != v26) {
          goto LABEL_40;
        }
LABEL_37:
        if (v4 == (uint64_t *)v27)
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRelease_n();
        }
        else
        {
LABEL_40:
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v28 & 1) == 0) {
            goto LABEL_4;
          }
        }
        uint64_t v29 = *(void **)(v24
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                       + 8);
        if (v29)
        {
          BOOL v30 = *(void *)(v24
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName) == v172._countAndFlagsBits
             && v29 == v172._object;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            int64_t v31 = v23;
            goto LABEL_154;
          }
        }
LABEL_4:
        swift_release();
        swift_bridgeObjectRelease();
        break;
    }
  }
  int64_t v20 = v18 + 5;
  if (v20 < v171)
  {
    unint64_t v19 = *(void *)(v170 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          break;
        }
        if (v14 >= v171) {
          goto LABEL_48;
        }
        unint64_t v19 = *(void *)(v170 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
      JUMPOUT(0x10004BE58);
    }
    int64_t v14 = v20;
    goto LABEL_24;
  }
LABEL_48:
  swift_release();
  swift_bridgeObjectRelease();
  char v32 = v163;
  int v33 = v163;
  uint64_t v34 = v162;
  if (v30)
  {
    uint64_t v35 = v162 + 176;
    swift_beginAccess();
    uint64_t v36 = *(void *)(v34 + 176);
    if (*(void *)(v36 + 16))
    {
      uint64_t v37 = (void (**)(void *, void, uint64_t))(v157 + 104);
      LODWORD(v171)  = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v38 = (void (**)(void *, uint64_t))(v157 + 8);
      uint64_t v39 = (void (**)(char *, uint64_t))(v158 + 8);
      uint64_t v40 = v164;
      CFTypeRef v41 = v166;
      do
      {
        unint64_t v42 = sub_100031454(4u);
        if ((v43 & 1) == 0) {
          break;
        }
        uint64_t v44 = *(void **)(*(void *)(v36 + 56) + 24 * v42);
        swift_endAccess();
        swift_bridgeObjectRetain();
        id v45 = v44;
        sub_100068BF4(v44);
        uint64_t v46 = v169;
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v169 + 16));
        static DispatchTime.now()();
        id v47 = v165;
        *uint64_t v165 = 30;
        uint64_t v48 = v167;
        (*v37)(v47, v171, v167);
        + infix(_:_:)();
        (*v38)(v47, v48);
        unint64_t v49 = *v39;
        uint64_t v50 = v168;
        (*v39)(v40, v168);
        OS_dispatch_semaphore.wait(timeout:)();
        v49(v41, v50);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v46 + 16));

        swift_beginAccess();
        uint64_t v36 = *(void *)v35;
      }
      while (*(void *)(*(void *)v35 + 16));
    }
    swift_endAccess();
    char v32 = v163;
    uint64_t v34 = v162;
  }
  dispatch_semaphore_t v51 = dispatch_semaphore_create(0);
  uint64_t v4 = (uint64_t *)(v34 + 176);
  swift_beginAccess();
  uint64_t v13 = v51;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v174 = *(void *)(v34 + 176);
  *(void *)(v34 + 176)  = 0x8000000000000000;
  sub_10003476C(v13, 0, 0, v32, isUniquelyReferenced_nonNull_native);
  *(void *)(v34 + 176)  = v174;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v53 = *(void *)(v34 + 32);
  if (*(void *)(v53 + 16))
  {
    uint64_t v54 = v172._object;
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_10000DDE0(v172._countAndFlagsBits, (uint64_t)v54);
    if (v56)
    {
      uint64_t v57 = *(void *)(*(void *)(v53 + 56) + 8 * v55);
      swift_retain();
    }
    else
    {
      uint64_t v57 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v57 = 0;
  }
  swift_endAccess();
  switch(v33)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = 0;
      if ((v58 & 1) == 0 || !v57) {
        goto LABEL_74;
      }
      goto LABEL_66;
    case 4:
      swift_bridgeObjectRelease();
      if (v57)
      {
LABEL_66:
        switch(*(unsigned char *)(v57
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role))
        {
          case 1:
            unint64_t v160 = 0xE400000000000000;
            goto LABEL_71;
          case 2:
            swift_bridgeObjectRelease();
            goto LABEL_72;
          case 3:
            unint64_t v160 = 0xE700000000000000;
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          default:
            unint64_t v160 = 0xEE00657275746375;
LABEL_71:
            char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v60 & 1) == 0) {
              goto LABEL_73;
            }
LABEL_72:
            uint64_t v59 = 1;
            break;
        }
      }
      else
      {
LABEL_73:
        uint64_t v59 = 0;
      }
LABEL_74:
      swift_retain();
      unint64_t v61 = sub_100068A18(v59, 0x7FFFFFFFFFFFFFFFLL, v34, v32);
      char v63 = v62;
      swift_release();
      if (v63)
      {
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v83, v84))
        {
          uint64_t v85 = swift_slowAlloc();
          v173[0]  = swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 136315394;
          char v86 = v32;
          unint64_t v87 = 0xE200000000000000;
          uint64_t v88 = 28261;
          switch(v86)
          {
            case 1:
              unint64_t v87 = 0xE400000000000000;
              uint64_t v88 = 1818523489;
              break;
            case 2:
              unint64_t v87 = 0xE300000000000000;
              uint64_t v88 = 7233902;
              break;
            case 3:
              uint64_t v88 = 29289;
              break;
            case 4:
              unint64_t v87 = 0xE300000000000000;
              uint64_t v88 = 7826540;
              break;
            default:
              break;
          }
          uint64_t v174 = sub_100010680(v88, v87, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 12)  = 2080;
          uint64_t v117 = 0x7274736172666E49;
          switch((char)v163)
          {
            case 1:
              unint64_t v159 = 0xE400000000000000;
              uint64_t v117 = 1279547201;
              break;
            case 2:
              unint64_t v159 = 0xE300000000000000;
              uint64_t v117 = 5128526;
              break;
            case 3:
              unint64_t v159 = 0xE800000000000000;
              uint64_t v117 = 0x61746144204E414ELL;
              break;
            case 4:
              uint64_t v117 = 0x6574614C20776F4CLL;
              unint64_t v159 = 0xEB0000000079636ELL;
              break;
            default:
              break;
          }
          uint64_t v174 = sub_100010680(v117, v159, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "Could not find a suitable unit number (with %s) to use for a new %s interface", (uint8_t *)v85, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

LABEL_153:
        swift_release();
        int64_t v31 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        os_log_type_t v64 = *(os_unfair_lock_s **)(v169 + 16);
        os_unfair_lock_unlock(v64);
        switch(v32)
        {
          case 1:
            uint64_t v89 = (unint64_t)v156 & 0xFFFFFFFFFFFFLL;
            char v90 = 1;
            uint64_t v91 = v57;
            countAndFlagsBits  = v172._countAndFlagsBits;
            uint64_t v93 = v172._object;
            int v94 = 6;
            unsigned int v95 = 32;
            goto LABEL_111;
          case 2:
            uint64_t v89 = (unint64_t)v156 & 0xFFFFFFFFFFFFLL;
            char v90 = 2;
            uint64_t v91 = v57;
            countAndFlagsBits  = v172._countAndFlagsBits;
            uint64_t v93 = v172._object;
            int v94 = 9;
            goto LABEL_110;
          case 3:
            uint64_t v89 = (unint64_t)v156 & 0xFFFFFFFFFFFFLL;
            char v90 = 3;
            uint64_t v91 = v57;
            countAndFlagsBits  = v172._countAndFlagsBits;
            uint64_t v93 = v172._object;
            int v94 = 10;
LABEL_110:
            unsigned int v95 = 72;
LABEL_111:
            sub_10004E540(v90, v91, countAndFlagsBits, (unint64_t)v93, v89, v94, v95, v61);
            uint64_t v96 = v164;
            static DispatchTime.now()();
            int64_t v97 = v165;
            *uint64_t v165 = 30;
            uint64_t v98 = v157;
            uint64_t v99 = v167;
            (*(void (**)(void *, void, uint64_t))(v157 + 104))(v97, enum case for DispatchTimeInterval.seconds(_:), v167);
            uint64_t v100 = v166;
            + infix(_:_:)();
            (*(void (**)(void *, uint64_t))(v98 + 8))(v97, v99);
            uint64_t v101 = *(void (**)(char *, uint64_t))(v158 + 8);
            uint64_t v102 = v96;
            uint64_t v103 = v168;
            v101(v102, v168);
            OS_dispatch_semaphore.wait(timeout:)();
            v101(v100, v103);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v169 + 16));
            if (static DispatchTimeoutResult.== infix(_:_:)())
            {
              uint64_t v104 = Logger.logObject.getter();
              os_log_type_t v105 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v104, v105))
              {
                uint64_t v106 = (uint8_t *)swift_slowAlloc();
                v173[0]  = swift_slowAlloc();
                *(_DWORD *)uint64_t v106 = 136315138;
                unint64_t v107 = 0xE300000000000000;
                uint64_t v108 = 5128526;
                if (v32 != 2)
                {
                  uint64_t v108 = 0x61746144204E414ELL;
                  unint64_t v107 = 0xE800000000000000;
                }
                if (v32 == 1) {
                  uint64_t v109 = 1279547201;
                }
                else {
                  uint64_t v109 = v108;
                }
                if (v32 == 1) {
                  unint64_t v110 = 0xE400000000000000;
                }
                else {
                  unint64_t v110 = v107;
                }
                uint64_t v174 = sub_100010680(v109, v110, v173);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v104, v105, "Timed out while waiting for interface %s", v106, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                char v32 = v163;
              }
              else
              {
              }
              swift_beginAccess();
              unint64_t v128 = (void *)sub_100033C8C(v32);
              swift_endAccess();
              sub_100068BF4(v128);
              while (OS_dispatch_semaphore.signal()())
                ;
            }
            else
            {
              swift_beginAccess();
              uint64_t v113 = sub_100043294(v32, *v4);
              int64_t v31 = v114;
              uint64_t v22 = v115;
              swift_endAccess();
              if (v113)
              {
                swift_bridgeObjectRetain();
                sub_100068BF4(v113);
                if (v22)
                {
                  swift_beginAccess();
                  long long v116 = (void *)sub_100033C8C(v32);
                  swift_endAccess();
                  sub_100068BF4(v116);
                  while (OS_dispatch_semaphore.signal()())
                    ;
                  goto LABEL_186;
                }
              }
              long long v119 = Logger.logObject.getter();
              os_log_type_t v120 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v119, v120))
              {
                long long v121 = (uint8_t *)swift_slowAlloc();
                v173[0]  = swift_slowAlloc();
                *(_DWORD *)long long v121 = 136315138;
                unint64_t v122 = 0xE300000000000000;
                uint64_t v123 = 5128526;
                if (v32 != 2)
                {
                  uint64_t v123 = 0x61746144204E414ELL;
                  unint64_t v122 = 0xE800000000000000;
                }
                if (v32 == 1) {
                  uint64_t v124 = 1279547201;
                }
                else {
                  uint64_t v124 = v123;
                }
                if (v32 == 1) {
                  unint64_t v125 = 0xE400000000000000;
                }
                else {
                  unint64_t v125 = v122;
                }
                uint64_t v174 = sub_100010680(v124, v125, v173);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v119, v120, "Failed to find the interface name returned when creating the %s interface", v121, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                char v32 = v163;
              }
              else
              {
              }
              swift_beginAccess();
              unint64_t v129 = (void *)sub_100033C8C(v32);
              swift_endAccess();
              sub_100068BF4(v129);
              while (OS_dispatch_semaphore.signal()())
                ;
            }
            goto LABEL_153;
          case 4:
            uint64_t v111 = sub_10004DCEC(v57, v172._countAndFlagsBits, (unint64_t)v172._object, v61);
            uint64_t v22 = v112;
            if (v112)
            {
              int64_t v31 = v111;
              os_unfair_lock_lock(v64);
              swift_beginAccess();
              uint64_t v118 = (void *)sub_100033C8C(4u);
              swift_endAccess();
              sub_100068BF4(v118);
              while (OS_dispatch_semaphore.signal()())
                ;
              goto LABEL_186;
            }
            uint64_t v130 = v164;
            static DispatchTime.now()();
            uint64_t v131 = v165;
            *uint64_t v165 = 30;
            uint64_t v132 = v157;
            uint64_t v133 = v167;
            (*(void (**)(void *, void, uint64_t))(v157 + 104))(v131, enum case for DispatchTimeInterval.seconds(_:), v167);
            char v134 = v166;
            + infix(_:_:)();
            (*(void (**)(void *, uint64_t))(v132 + 8))(v131, v133);
            char v135 = *(void (**)(char *, uint64_t))(v158 + 8);
            os_log_type_t v136 = v130;
            uint64_t v137 = v168;
            v135(v136, v168);
            OS_dispatch_semaphore.wait(timeout:)();
            v135(v134, v137);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v169 + 16));
            if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0) {
              goto LABEL_172;
            }
            __int16 v138 = v172._object;
            swift_bridgeObjectRetain_n();
            uint64_t v139 = Logger.logObject.getter();
            os_log_type_t v140 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v139, v140))
            {
              uint64_t v141 = (uint8_t *)swift_slowAlloc();
              v173[0]  = swift_slowAlloc();
              *(_DWORD *)uint64_t v141 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v174 = sub_100010680(v172._countAndFlagsBits, (unint64_t)v138, v173);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v139, v140, "Timed out while waiting for the low latency interface with parent %s", v141, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            swift_beginAccess();
            uint64_t v148 = (void *)sub_100033C8C(4u);
            swift_endAccess();
            sub_100068BF4(v148);
            while (OS_dispatch_semaphore.signal()())
              ;
            goto LABEL_153;
          default:
            uint64_t v170 = v34 + 176;
            int64_t v171 = v57;
            v172._object  = (void *)v13;
            uint64_t v65 = v162;
            uint64_t v66 = v162 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
            swift_beginAccess();
            sub_1000136F4(v66, (uint64_t)v173, &qword_10047D0D8);
            uint64_t v67 = v173[3];
            sub_1000380B4((uint64_t)v173, &qword_10047D0D8);
            if (!v67)
            {
              swift_beginAccess();
              sub_100045C80(*(unsigned int *)(v65 + 152));
              swift_beginAccess();
              sub_100045C80(*(unsigned int *)(v65 + 156));
            }
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v169 + 16));
            uint64_t v68 = *v161;
            uint64_t v69 = *v161 + 64;
            uint64_t v70 = 1 << *(unsigned char *)(*v161 + 32);
            uint64_t v71 = -1;
            if (v70 < 64) {
              uint64_t v71 = ~(-1 << v70);
            }
            unint64_t v72 = v71 & *(void *)(*v161 + 64);
            int64_t v73 = (unint64_t)(v70 + 63) >> 6;
            swift_bridgeObjectRetain_n();
            int64_t v74 = 0;
            if (v72)
            {
              while (2)
              {
                unint64_t v75 = __clz(__rbit64(v72));
                v72 &= v72 - 1;
                unint64_t v76 = v75 | (v74 << 6);
LABEL_100:
                uint64_t v80 = (int64_t *)(*(void *)(v68 + 48) + 16 * v76);
                int64_t v81 = *v80;
                uint64_t v22 = (void *)v80[1];
                switch(*(unsigned char *)(*(void *)(*(void *)(v68 + 56) + 8 * v76)
                                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                    char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRetain();
                    swift_retain();
                    swift_bridgeObjectRelease();
                    if (v82) {
                      goto LABEL_167;
                    }
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (!v72) {
                      break;
                    }
                    continue;
                  default:
                    swift_bridgeObjectRetain();
                    swift_retain();
                    swift_bridgeObjectRelease();
LABEL_167:
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    int64_t v31 = v81;
                    goto LABEL_168;
                }
                break;
              }
            }
            int64_t v77 = v74 + 1;
            if (__OFADD__(v74, 1)) {
              goto LABEL_188;
            }
            if (v77 >= v73) {
              goto LABEL_152;
            }
            unint64_t v78 = *(void *)(v69 + 8 * v77);
            ++v74;
            if (v78) {
              goto LABEL_99;
            }
            int64_t v74 = v77 + 1;
            if (v77 + 1 >= v73) {
              goto LABEL_152;
            }
            unint64_t v78 = *(void *)(v69 + 8 * v74);
            if (v78) {
              goto LABEL_99;
            }
            int64_t v74 = v77 + 2;
            if (v77 + 2 >= v73) {
              goto LABEL_152;
            }
            unint64_t v78 = *(void *)(v69 + 8 * v74);
            if (v78) {
              goto LABEL_99;
            }
            int64_t v74 = v77 + 3;
            if (v77 + 3 >= v73) {
              goto LABEL_152;
            }
            unint64_t v78 = *(void *)(v69 + 8 * v74);
            if (v78) {
              goto LABEL_99;
            }
            int64_t v74 = v77 + 4;
            if (v77 + 4 >= v73) {
              goto LABEL_152;
            }
            unint64_t v78 = *(void *)(v69 + 8 * v74);
            if (v78) {
              goto LABEL_99;
            }
            int64_t v79 = v77 + 5;
            if (v79 < v73)
            {
              unint64_t v78 = *(void *)(v69 + 8 * v79);
              if (!v78)
              {
                while (1)
                {
                  int64_t v74 = v79 + 1;
                  if (__OFADD__(v79, 1)) {
                    goto LABEL_189;
                  }
                  if (v74 >= v73) {
                    goto LABEL_152;
                  }
                  unint64_t v78 = *(void *)(v69 + 8 * v74);
                  ++v79;
                  if (v78) {
                    goto LABEL_99;
                  }
                }
              }
              int64_t v74 = v79;
LABEL_99:
              unint64_t v72 = (v78 - 1) & v78;
              unint64_t v76 = __clz(__rbit64(v78)) + (v74 << 6);
              goto LABEL_100;
            }
LABEL_152:
            swift_release();
            swift_bridgeObjectRelease();
            int64_t v31 = 0;
            uint64_t v22 = 0;
LABEL_168:
            swift_beginAccess();
            uint64_t v142 = (void *)sub_100033C8C(0);
            swift_endAccess();
            sub_100068BF4(v142);
            uint64_t v143 = v172._object;
            while (OS_dispatch_semaphore.signal()())
              ;

            swift_release();
            break;
        }
      }
      break;
    default:
      JUMPOUT(0);
  }
LABEL_154:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v169 + 16));
  uint64_t v126 = v31;
  long long v127 = v22;
  result.value._object  = v127;
  result.value._countAndFlagsBits  = v126;
  return result;
}

uint64_t sub_10004BF08(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000369C4(a1, v9);
  uint64_t v11 = type metadata accessor for AppleIO80211Driver();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = AppleIO80211Driver.init(device:role:name:)(a2, a3, a4, a5);
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, _UNKNOWN **, uint64_t, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v10 + 8);
  uint64_t v13 = sub_1000687F0((unint64_t *)&unk_10047DCE0, (void (*)(uint64_t))type metadata accessor for AppleIO80211Driver);
  v12(&v15, v11, &protocol witness table for AppleIO80211Driver, v13, &protocol witness table for AppleIO80211Driver, &protocol witness table for AppleIO80211Driver, v9, v10);
  return swift_release();
}

uint64_t sub_10004C038(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v12 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v4 = sub_100068C9C();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_release();
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v4, v6, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12)  = 2080;
      swift_bridgeObjectRetain();
      sub_100010680(a1, a2, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s when removing %s from legacy preferences", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return v12;
}

void sub_10004C248(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100068F3C(a1, a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    oslog  = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v4, v6, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12)  = 2080;
      swift_bridgeObjectRetain();
      sub_100010680(a1, (unint64_t)a2, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "%s when configuring DHCP networking for %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_10004C460(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  os_log_type_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  uint64_t v9 = *(void (**)(unsigned char *))(a1
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v9)
  {
    *os_log_type_t v7 = 2;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v9(v7);
    sub_100011E30((uint64_t)v9);
    sub_100013308((uint64_t)v7, type metadata accessor for DriverEvent);
  }
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
  *unint64_t v5 = v10;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v10)
  {
    Apple80211EventMonitoringHalt();
    uint64_t v13 = *v8;
    *uint64_t v8 = 0;
    v8[1]  = 0;
    return sub_100011E30(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AppleDevice.startMonitoringEvents(on:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v11 = *(void *)(v4 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  swift_beginAccess();
  uint64_t v12 = *(void *)(v4 + 32);
  if (!*(void *)(v12 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10000DDE0(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_endAccess();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v18 = xmmword_1003B2EF0;
    *(unsigned char *)(v18 + 16)  = 0;
    swift_willThrow();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
    return;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  unint64_t v16 = *(os_unfair_lock_s **)(v11 + 16);
  swift_retain();
  os_unfair_lock_unlock(v16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16)  = a3;
  *(void *)(v17 + 24)  = a4;
  swift_retain();
  sub_100043C78(0, (uint64_t)sub_100013618, v17);
  if (v6)
  {
    swift_release_n();
    swift_release();
  }
  else
  {
    swift_release();
    unint64_t v19 = (void *)(v15
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    uint64_t v20 = *(void *)(v15
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    *unint64_t v19 = a3;
    v19[1]  = a4;
    swift_retain();
    sub_100011E30(v20);
    swift_release_n();
  }
}

void AppleDevice.startMonitoringEvents(on:customQueue:eventHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(v5 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 32) + 16))
  {
    swift_bridgeObjectRetain();
    sub_10000DDE0(a1, a2);
    if (v12)
    {
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(os_unfair_lock_s **)(v11 + 16);
      swift_retain();
      os_unfair_lock_unlock(v13);
      sub_100043C78(a3, a4, a5);
      swift_release_n();
      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v14 = xmmword_1003B2EF0;
  *(unsigned char *)(v14 + 16)  = 0;
  swift_willThrow();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
}

Swift::Void __swiftcall AppleDevice.stopMonitoringEvents(on:)(Swift::String on)
{
  object  = on._object;
  countAndFlagsBits  = on._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  os_log_type_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess();
  uint64_t v13 = *(void *)(v1 + 32);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_10000DDE0(countAndFlagsBits, (uint64_t)object);
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_retain();
    }
    else
    {
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  if (v16)
  {
    uint64_t v17 = *(void **)(v16
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16)  = v16;
    aBlock[4]  = sub_100068C6C;
    aBlock[5]  = v18;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = sub_10000E5D0;
    aBlock[3]  = &unk_1004566B0;
    unint64_t v19 = _Block_copy(aBlock);
    id v22 = v17;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v23 = v8;
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v20 = v22;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    swift_release();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
    swift_release();
  }
}

uint64_t sub_10004CCC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    os_log_type_t v7 = *(void **)(a1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *uint64_t v6 = v7;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
    id v8 = v7;
    LOBYTE(v7)  = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
    if (v7)
    {
      Apple80211EventMonitoringHalt();
      uint64_t v9 = (void *)(a1
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      uint64_t v10 = *(void *)(a1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      *uint64_t v9 = 0;
      v9[1]  = 0;
      return sub_100011E30(v10);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void AppleDevice.getRequest(requestType:data:on:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

uint64_t AppleDevice.loadCapabilities(on:)(uint64_t a1, uint64_t a2)
{
  memset(v3, 0, sizeof(v3));
  AppleDevice.getRequest(requestType:data:on:)(0xCuLL, (uint64_t)&v3[4], (uint64_t)&v4, 0, a1, a2);
  return *(void *)v3;
}

void AppleDevice.attachForDriverDiscovery<A>(_:)(uint64_t a1, void (__cdecl *a2)(const void *), CFStringRef (__cdecl *a3)(const void *))
{
  uint64_t v4 = v3;
  context.release  = a2;
  context.copyDescription  = a3;
  os_log_type_t v7 = sub_1000382F0(&context.version);
  (*(void (**)(uint64_t *, uint64_t, void (__cdecl *)(const void *)))(*((void *)a2 - 1) + 16))(v7, a1, a2);
  uint64_t v8 = v4 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess();
  sub_10006D1A4((uint64_t)&context, v8, &qword_10047D0D8);
  swift_endAccess();
  uint64_t v9 = *(void **)(v4 + 208);
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v4 + 192) + 16);
  swift_retain();
  swift_retain();
  uint64_t v11 = v9;
  os_unfair_lock_lock(v10);
  context.version  = 0;
  context.info  = (void *)v4;
  context.retain  = (const void *(__cdecl *)(const void *))j__swift_unknownObjectRetain;
  context.release  = (void (__cdecl *)(const void *))j__swift_unknownObjectRelease;
  context.copyDescription  = (CFStringRef (__cdecl *)(const void *))sub_10004D40C;
  SCPreferencesSetCallback(v11, (SCPreferencesCallBack)sub_10004D494, &context);
  if (qword_10047C178 != -1) {
    swift_once();
  }
  SCPreferencesSetDispatchQueue(v11, (dispatch_queue_t)static OS_dispatch_queue.p2p);
  os_unfair_lock_unlock(v10);

  swift_release();
  swift_release();
  if (!*(_DWORD *)(v4 + 172))
  {
    swift_beginAccess();
    swift_beginAccess();
    io_connect_t v12 = IORegisterForSystemPower((void *)v4, (IONotificationPortRef *)(v4 + 160), (IOServiceInterestCallback)sub_10004D8C0, (io_object_t *)(v4 + 168));
    swift_endAccess();
    swift_endAccess();
    *(_DWORD *)(v4 + 172)  = v12;
    uint64_t v13 = *(IONotificationPort **)(v4 + 160);
    if (v13)
    {
      IONotificationPortSetDispatchQueue(v13, (dispatch_queue_t)static OS_dispatch_queue.p2p);
    }
    else
    {
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to monitor for system power notifications", v16, 2u);
        swift_slowDealloc();
      }
    }
  }
  swift_beginAccess();
  sub_100045C80(*(_DWORD *)(v4 + 152));
  swift_beginAccess();
  sub_100047B70(*(_DWORD *)(v4 + 156));
}

NSString sub_10004D40C()
{
  swift_retain();
  type metadata accessor for AppleDevice(0);
  _print_unlocked<A, B>(_:_:)();
  swift_release();
  NSString v0 = String._bridgeToObjectiveC()();

  swift_bridgeObjectRelease();
  return v0;
}

void sub_10004D494(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  sub_1000691C4(v4, a3);
}

uint64_t sub_10004D4E0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v25 = a8;
  int v24 = a7;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v13 - 8);
  __chkstk_darwin();
  os_log_type_t v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v26 - 8);
  __chkstk_darwin();
  uint64_t v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1(a3);
  if (qword_10047C178 != -1) {
    swift_once();
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16)  = a4;
  *(void *)(v19 + 24)  = a5;
  int v20 = v24;
  *(_DWORD *)(v19 + 32)  = a6;
  *(_DWORD *)(v19 + 36)  = v20;
  *(void *)(v19 + 40)  = v25;
  aBlock[4]  = sub_10006E340;
  aBlock[5]  = v19;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100457538;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v28 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v26);
  return swift_release();
}

uint64_t sub_10004D81C(uint64_t a1, uint64_t a2, int a3, io_connect_t a4, intptr_t a5)
{
  uint64_t v10 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *uint64_t v10 = v13;
    uint64_t result = swift_beginAccess();
    if (*(void *)(a2 + 16) == v13 && a3 == 2) {
      return IOAllowPowerChange(a4, a5);
    }
  }
  return result;
}

uint64_t sub_10004D8C0(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  return sub_10006928C(a1, a3, a4);
}

Swift::Void __swiftcall AppleDevice.detachDriverDiscovery()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0]  = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14[0] - 8);
  __chkstk_darwin();
  os_log_type_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_DWORD *)(v0 + 168))
  {
    swift_beginAccess();
    IODeregisterForSystemPower((io_object_t *)(v0 + 168));
    swift_endAccess();
  }
  io_object_t v8 = *(_DWORD *)(v0 + 172);
  if (v8) {
    IOObjectRelease(v8);
  }
  swift_beginAccess();
  uint64_t v9 = *(IONotificationPort **)(v0 + 160);
  if (v9) {
    IONotificationPortDestroy(v9);
  }
  *(void *)(v0 + 160)  = 0;
  *(void *)(v0 + 168)  = 0;
  uint64_t v10 = *(void **)(v0 + 208);
  uint64_t v11 = *(os_unfair_lock_s **)(*(void *)(v0 + 192) + 16);
  swift_retain();
  swift_retain();
  uint64_t v12 = v10;
  os_unfair_lock_lock(v11);
  SCPreferencesSetDispatchQueue(v12, 0);
  SCPreferencesSetCallback(v12, 0, 0);
  os_unfair_lock_unlock(v11);

  swift_release();
  swift_release();
  if (qword_10047C178 != -1) {
    swift_once();
  }
  aBlock[4]  = sub_100068C74;
  aBlock[5]  = v0;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_1004566D8;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[1]  = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v14[0]);
  swift_release();
}

uint64_t sub_10004DC80(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = a1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess();
  sub_10006D1A4((uint64_t)v3, v1, &qword_10047D0D8);
  return swift_endAccess();
}

uint64_t sub_10004DCEC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1)
  {
    v27[1]  = 0;
    uint64_t v28 = 0;
    if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x10004E518);
    }
    v27[0]  = a4 | 0x100000000;
    uint64_t v32 = 0;
    memset(v30, 0, sizeof(v30));
    int v31 = 0;
    swift_retain();
    sub_10000DEF0((uint64_t)v30, 0x125uLL, (uint64_t)v27, (uint64_t)v29, 0, a2, a3);
    unsigned int v7 = Apple80211RawSet();
    if (v7)
    {
      uint64_t v8 = v7;
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v9 = v8;
      *(void *)(v9 + 8)  = 0;
      *(unsigned char *)(v9 + 16)  = 0;
      swift_willThrow();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v13 = (void *)swift_slowAlloc();
        *(void *)uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315394;
        swift_bridgeObjectRetain();
        sub_100010680(a2, a3, (uint64_t *)v29);
        a2  = (uint64_t)v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v12 + 12)  = 2112;
        swift_errorRetain();
        uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v13 = v26;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to create low latency interface for %s because %@", (uint8_t *)v12, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_willThrow();
      swift_release();
    }
    else
    {
      HIBYTE(v28)  = 0;
      uint64_t v17 = String.init(cString:)();
      uint64_t v19 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0) {
        uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v19
        && (a2  = v17,
            sub_1000687F0(&qword_10047D138, (void (*)(uint64_t))type metadata accessor for AppleDevice),
            static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for Bool, (uint64_t)v29),
            v29[0] != 2)
        && (v29[0] & 1) != 0)
      {
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role;
        switch(*(unsigned char *)(a1
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role))
        {
          case 1:
            swift_bridgeObjectRelease();
            goto LABEL_22;
          default:
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v23 & 1) == 0) {
              goto LABEL_24;
            }
LABEL_22:
            *(_OWORD *)uint64_t v29 = xmmword_1003B2F10;
            if (if_nametoindex(v29))
            {
              swift_release();
              a2  = 813132908;
            }
            else
            {
LABEL_24:
              switch(*(unsigned char *)(a1 + v20))
              {
                case 2:
                  swift_bridgeObjectRelease();
                  goto LABEL_28;
                default:
                  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v24)
                  {
LABEL_28:
                    *(_OWORD *)uint64_t v29 = xmmword_1003B2F20;
                    unsigned int v25 = if_nametoindex(v29);
                    swift_release();
                    if (v25) {
                      a2  = 829910124;
                    }
                    else {
                      a2  = 0;
                    }
                  }
                  else
                  {
                    swift_release();
                    a2  = 0;
                  }
                  break;
              }
            }
            break;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v30[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      v27[0]  = sub_100010680(a2, a3, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to create low latency interface because parent %s was not found", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v21 = xmmword_1003B2F30;
    *(unsigned char *)(v21 + 16)  = 0;
    swift_willThrow();
  }
  return a2;
}

uint64_t sub_10004E540(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, unsigned int a7, unint64_t a8)
{
  if (a2)
  {
    memset(v41, 0, sizeof(v41));
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    long long v43 = 0uLL;
    int v45 = 0;
    swift_retain();
    sub_10000DEF0((uint64_t)&v43, 0xCuLL, (uint64_t)&v41[4], (uint64_t)&v42, 0, a3, a4);
    unsigned int v15 = Apple80211RawGet();
    if (v15)
    {
      uint64_t v16 = v15;
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v17 = v16;
      *(void *)(v17 + 8)  = 0;
      *(unsigned char *)(v17 + 16)  = 0;
      swift_willThrow();
    }
    else
    {
      long long v43 = *(_OWORD *)&v41[4];
      LOWORD(v44)  = *(_WORD *)&v41[20];
      BYTE2(v44)  = v41[22];
      if (sub_1000A6DD4(a7, (uint64_t)&v43))
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        if ((a8 & 0x8000000000000000) != 0 || HIDWORD(a8))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10004EBF4);
        }
        LODWORD(v35)  = a8;
        int v38 = a6;
        WORD2(v35)  = a5;
        BYTE6(v35)  = BYTE2(a5);
        HIBYTE(v35)  = BYTE3(a5);
        char v36 = BYTE4(a5);
        char v37 = BYTE5(a5);
        uint64_t v46 = 0;
        uint64_t v44 = 0;
        long long v43 = 0uLL;
        int v45 = 0;
        sub_10000DEF0((uint64_t)&v43, 0x5EuLL, (uint64_t)&v35, (uint64_t)v41, 0, a3, a4);
        unsigned int v23 = Apple80211RawSet();
        if (!v23) {
          return swift_release();
        }
        uint64_t v24 = v23;
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v25 = v24;
        *(void *)(v25 + 8)  = 0;
      }
      else
      {
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = 0x7274736172666E49;
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v43 = swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136315138;
          unint64_t v30 = 0xEE00657275746375;
          switch(a1)
          {
            case 1:
              unint64_t v30 = 0xE400000000000000;
              uint64_t v28 = 1279547201;
              break;
            case 2:
              unint64_t v30 = 0xE300000000000000;
              uint64_t v28 = 5128526;
              break;
            case 3:
              unint64_t v30 = 0xE800000000000000;
              uint64_t v28 = 0x61746144204E414ELL;
              break;
            case 4:
              uint64_t v28 = 0x6574614C20776F4CLL;
              unint64_t v30 = 0xEB0000000079636ELL;
              break;
            default:
              break;
          }
          uint64_t v35 = sub_100010680(v28, v30, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Cannot create %s interface because the device is missing the capability", v29, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v25 = xmmword_1003B2F30;
      }
      *(unsigned char *)(v25 + 16)  = 0;
      swift_willThrow();
    }
    return swift_release();
  }
  swift_bridgeObjectRetain_n();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = 0x7274736172666E49;
    uint64_t v21 = swift_slowAlloc();
    *(void *)&long long v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315394;
    unint64_t v22 = 0xEE00657275746375;
    switch(a1)
    {
      case 1:
        unint64_t v22 = 0xE400000000000000;
        uint64_t v20 = 1279547201;
        break;
      case 2:
        unint64_t v22 = 0xE300000000000000;
        uint64_t v20 = 5128526;
        break;
      case 3:
        unint64_t v22 = 0xE800000000000000;
        uint64_t v20 = 0x61746144204E414ELL;
        break;
      case 4:
        uint64_t v20 = 0x6574614C20776F4CLL;
        unint64_t v22 = 0xEB0000000079636ELL;
        break;
      default:
        break;
    }
    sub_100010680(v20, v22, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12)  = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_100010680(a3, a4, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Cannot create %s interface because the parent interface %s is missing", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v31 = xmmword_1003B2F30;
  *(unsigned char *)(v31 + 16)  = 0;
  return swift_willThrow();
}

BOOL sub_10004EC1C(uint64_t a1)
{
  sub_10006EC68(a1 + 24, (uint64_t)v6, &qword_10047DC20);
  sub_10006EC68((uint64_t)v6, (uint64_t)&v7, &qword_10047DC20);
  if (!v7) {
    __break(1u);
  }
  uint64_t v4 = *(void *)(v7 + 8);
  int v5 = *(_DWORD *)(v7 + 16);
  uint64_t v1 = sub_100260F60((unsigned char *)&v4 + *(unsigned __int8 *)(v7 + 5), *(unsigned __int8 *)(v7 + 6));
  return (sub_10000C6C4(v1, v2) & 0x1000000000000) == 0;
}

BOOL sub_10004ECD0@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_10004EC1C(a1);
  *a2  = result;
  return result;
}

void *sub_10004ED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  void v11[2];
  uint64_t v12;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    BOOL result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)HIDWORD(v12);
    }
  }
  else
  {
    __chkstk_darwin();
    if ((v6 & 0x2000000000000000) != 0)
    {
      v11[0]  = v5;
      v11[1]  = v6 & 0xFFFFFFFFFFFFFFLL;
      BOOL result = v7(&v12, v11);
      if (!v4) {
        return (void *)v12;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return sub_1000688B8(v8, v9, (void *(*)(uint64_t *__return_ptr))sub_100069DD4);
    }
  }
  return result;
}

uint64_t sub_10004EE18(uint64_t result, uint64_t a2, char *__dst)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | result & 0x1000000000000000)) {
    return _StringGuts._slowWithCString<A>(_:)();
  }
  if ((a2 & 0x2000000000000000) != 0) {
    goto LABEL_8;
  }
  if ((result & 0x1000000000000000) != 0)
  {
    uint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
    if (__dst) {
      return strlcpy(__dst, v6, 0x10uLL);
    }
    __break(1u);
LABEL_8:
    *(void *)__source  = v5;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (__dst)
    {
      uint64_t v6 = __source;
      return strlcpy(__dst, v6, 0x10uLL);
    }
    goto LABEL_14;
  }
  BOOL result = _StringObject.sharedUTF8.getter();
  uint64_t v6 = (char *)result;
  if (result) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10004EF00(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000)) {
    return _StringGuts._slowWithCString<A>(_:)();
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v7[0]  = a3;
    v7[1]  = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v7;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v5 = (void *)_StringObject.sharedUTF8.getter();
  }
  return a1(v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDevice.neighborDiscoveryTableClear(on:)(Swift::String on)
{
  object  = (uint64_t)on._object;
  countAndFlagsBits  = on._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
  sub_1000687F0(&qword_10047D138, (void (*)(uint64_t))type metadata accessor for AppleDevice);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v17);
  unint64_t v5 = v17 | ((unint64_t)v18 << 32);
  unsigned __int8 v6 = v19;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 32);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_10000DDE0(countAndFlagsBits, object);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      unsigned int v11 = *(_DWORD *)(v10
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  if ((object & 0x1000000000000000) != 0
    || !(object & 0x2000000000000000 | countAndFlagsBits & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    unsigned int v11 = v14;
  }
  else
  {
    __chkstk_darwin();
    if ((object & 0x2000000000000000) != 0)
    {
      *(void *)unsigned int v15 = countAndFlagsBits;
      uint64_t v16 = object & 0xFFFFFFFFFFFFFFLL;
      unsigned int v11 = if_nametoindex(v15);
    }
    else
    {
      if ((countAndFlagsBits & 0x1000000000000000) != 0)
      {
        uint64_t v12 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v13 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v12 = _StringObject.sharedUTF8.getter();
      }
      unsigned int v11 = sub_1000688B8(v12, v13, (void *(*)(uint64_t *__return_ptr))sub_100069DD4);
    }
  }
LABEL_12:
  swift_beginAccess();
  sub_1001AC228(v5 & 0xFFFFFFFFFFFFLL | ((unint64_t)v6 << 48), v11);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));
}

uint64_t sub_10004F2A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005A1D4(a1, a2);
}

uint64_t sub_10004F2EC@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = if_nametoindex(a1);
  *a2  = result;
  return result;
}

void AppleDevice.neighborDiscoveryTableUpdate(macAddress:ipv6Address:on:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

CFArrayRef sub_10004F344(const __SCPreferences *a1)
{
  CFArrayRef result = SCNetworkSetCopyAll(a1);
  if (result)
  {
    CFArrayRef v2 = result;
    type metadata accessor for SCNetworkSet(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    return 0;
  }
  return result;
}

uint64_t sub_10004F75C(const __SCPreferences *a1, uint64_t a2, void *a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = (void *)_SCNetworkInterfaceCreateWithBSDName();

  if (v7)
  {
    SCNetworkSetRef v8 = SCNetworkSetCopyCurrent(a1);
    if (v8)
    {
      SCNetworkSetRef v9 = v8;
      if (SCNetworkSetEstablishDefaultInterfaceConfiguration() || !SCError())
      {
        CFArrayRef v10 = SCNetworkServiceCopyAll(a1);
        if (v10)
        {
          CFArrayRef v11 = v10;
          type metadata accessor for SCNetworkService(0);
          static Array._conditionallyBridgeFromObjectiveC(_:result:)();
        }
      }

      return 0;
    }
    else
    {

      return 0;
    }
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000028;
    unint64_t v15 = 0x80000001003DA330;
    v12._countAndFlagsBits  = a2;
    v12._object  = a3;
    String.append(_:)(v12);
    return 0;
  }
}

void sub_100050364(unsigned int a1)
{
}

void sub_100050388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

void sub_1000503BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000503E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100050404(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100050428(uint64_t a1, uint64_t a2)
{
  return AppleDevice.loadCapabilities(on:)(a1, a2);
}

void sub_100050458(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

void sub_100050480(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
}

id sub_1000504A8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200);
  id v4 = *(id *)(*(void *)v1 + 208);
  *a1  = *(void *)(*(void *)v1 + 192);
  a1[1]  = v2;
  a1[2]  = v4;
  swift_retain();
  swift_retain();

  return v4;
}

uint64_t sub_100050504@<X0>(void *a1@<X8>)
{
  *a1  = *(void *)(*(void *)v1 + 184);
  return swift_retain();
}

uint64_t sub_100050514(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AppleDevice.findOrCreateInterface(for:on:with:)(a1, *(Swift::String *)&a2, (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL)).value._countAndFlagsBits;
}

uint64_t sub_10005053C()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  id v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  NSString v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1]  = *v0;
  v9[0]  = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  swift_retain();
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void static ApplePlatform.enumerateInterfaceAddresses(_:)(uint64_t (*a1)(long long *))
{
  SCNetworkSetRef v8 = 0;
  if (!getifaddrs(&v8))
  {
    uint64_t v3 = v8;
    if (v8)
    {
      id v4 = v8;
      do
      {
        ifa_flags  = v4->ifa_flags;
        long long v7 = *(_OWORD *)&v4->ifa_next;
        long long v9 = *(_OWORD *)&v4->ifa_next;
        unsigned int v10 = ifa_flags;
        long long v11 = *(_OWORD *)&v4->ifa_addr;
        long long v12 = *(_OWORD *)&v4->ifa_dstaddr;
        unsigned __int8 v6 = a1(&v9);
        if (v1) {
          break;
        }
        id v4 = (ifaddrs *)v7;
      }
      while ((v6 & ((void)v7 != 0)) == 1);
    }
    freeifaddrs(v3);
  }
}

uint64_t sub_100050800(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, void (*a6)(uint64_t), BOOL a7, uint64_t a8, uint64_t a9)
{
  BOOL v29 = a7;
  unint64_t v30 = a6;
  uint64_t v26 = a5;
  uint64_t v27 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unsigned __int16 v18 = (char *)&v26 - v17;
  sub_10006EC68(a1 + 8, (uint64_t)v32, &qword_10047DC38);
  sub_10006EC68((uint64_t)v32, (uint64_t)&v33, &qword_10047DC38);
  uint64_t result = v33;
  if (v33)
  {
    if (String.init(cString:)() == a2 && v20 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        return 1;
      }
    }
    sub_10006EC68(a1 + 24, (uint64_t)v31, &qword_10047DC20);
    uint64_t result = sub_10006EC68((uint64_t)v31, (uint64_t)&v34, &qword_10047DC20);
    if (v34)
    {
      if (*(unsigned __int8 *)(v34 + 1) == a4)
      {
        BOOL v23 = v29;
        v30(a1);
        if (!v9)
        {
          uint64_t v24 = v28;
          uint64_t v25 = v26;
          (*(void (**)(uint64_t, char *, uint64_t))(v28 + 40))(v26, v18, v14);
          (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, v25, v14);
          BOOL v23 = (*(unsigned int (**)(char *, uint64_t))(*(void *)(v27 - 8) + 48))(v16, 1) == 1;
          (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v14);
        }
        return v23;
      }
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)()
{
  uint64_t v2 = Array.init()();
  static ApplePlatform.enumerateInterfaceAddresses(_:)((uint64_t (*)(long long *))sub_10006A068);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_100050B4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v26 = a7;
  uint64_t v28 = a6;
  BOOL v29 = a5;
  int v30 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v13 - 8);
  uint64_t v25 = v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v27 = *(void *)(a9 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unsigned __int8 v19 = (char *)&v24 - v18;
  sub_10006EC68(a1 + 8, (uint64_t)v32, &qword_10047DC38);
  sub_10006EC68((uint64_t)v32, (uint64_t)&v33, &qword_10047DC38);
  uint64_t result = v33;
  if (v33)
  {
    if (String.init(cString:)() == a2 && v21 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        return 1;
      }
    }
    sub_10006EC68(a1 + 24, (uint64_t)v31, &qword_10047DC20);
    uint64_t result = sub_10006EC68((uint64_t)v31, (uint64_t)&v34, &qword_10047DC20);
    if (v34)
    {
      if (*(unsigned __int8 *)(v34 + 1) == v30)
      {
        v29(a1);
        if (!v9)
        {
          uint64_t v23 = v27;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v15, 1, a9) == 1)
          {
            (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v15, a9);
            (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v19, a9);
            type metadata accessor for Array();
            Array.append(_:)();
            (*(void (**)(char *, uint64_t))(v23 + 8))(v19, a9);
          }
        }
      }
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AppleDevice.NetworkPathMonitor.__allocating_init(evaluator:queue:updatedHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(a1, a2, a3, a4);
  return v8;
}

uint64_t AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16)  = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = a3;
  *(void *)(v8 + 24)  = a4;
  v12[4]  = sub_10006A0A8;
  v12[5]  = v8;
  v12[0]  = _NSConcreteStackBlock;
  v12[1]  = 1107296256;
  v12[2]  = sub_100051054;
  void v12[3] = &unk_100456728;
  uint64_t v9 = _Block_copy(v12);
  swift_unknownObjectRetain_n();
  id v10 = a2;
  swift_retain();
  swift_release();
  nw_path_evaluator_set_update_handler();
  _Block_release(v9);
  swift_unknownObjectRelease();

  swift_unknownObjectRetain();
  nw_path_evaluator_start();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return v4;
}

uint64_t sub_100050FFC(uint64_t result, void (*a2)(uint64_t))
{
  if (result)
  {
    uint64_t v3 = swift_unknownObjectRetain();
    a2(v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100051054(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t AppleDevice.NetworkPathMonitor.deinit()
{
  nw_path_evaluator_cancel();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t AppleDevice.NetworkPathMonitor.__deallocating_deinit()
{
  nw_path_evaluator_cancel();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t AppleDevice.NetworkPathMonitor.path.getter()
{
  uint64_t result = nw_path_evaluator_copy_path();
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t static AppleDevice.NetworkPathMonitor.statusDescription(from:)()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_100051220()
{
  if (!*(unsigned char *)(v0 + 16)) {
    return 0x6E696469766F7250;
  }
  if (*(unsigned char *)(v0 + 16) == 1) {
    return 0x676E696764697242;
  }
  if (*(_OWORD *)v0 == 0) {
    return 1701602377;
  }
  return 0x74616E696D726554;
}

uint64_t sub_1000512AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_10006C44C(a1, a2, a3);
  swift_retain();
  sub_10006C44C(a1, a2, a3);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  id v10 = &qword_10047D000;
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v33 = v9;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v12 = 0x676E696764697242;
        unint64_t v13 = 0xEF64656C69614620;
      }
      else
      {
        if (a1 | a2) {
          uint64_t v12 = 0x74616E696D726554;
        }
        else {
          uint64_t v12 = 1701602377;
        }
        if (a1 | a2) {
          unint64_t v13 = 0xEA00000000006465;
        }
        else {
          unint64_t v13 = 0xE400000000000000;
        }
      }
    }
    else
    {
      uint64_t v12 = 0x6E696469766F7250;
      unint64_t v13 = 0xE900000000000067;
    }
    sub_100010680(v12, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006C474(a1, a2, a3);
    sub_10006C474(a1, a2, a3);
    *(_WORD *)(v11 + 12)  = 2080;
    id v10 = &qword_10047D000;
    uint64_t v14 = (_OWORD *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
    if (*(unsigned char *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
    {
      if (*(unsigned char *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                    + 16) == 1)
      {
        uint64_t v15 = 0x676E696764697242;
        unint64_t v16 = 0xEF64656C69614620;
      }
      else
      {
        if (*v14 == 0) {
          uint64_t v15 = 1701602377;
        }
        else {
          uint64_t v15 = 0x74616E696D726554;
        }
        if (*v14 == 0) {
          unint64_t v16 = 0xE400000000000000;
        }
        else {
          unint64_t v16 = 0xEA00000000006465;
        }
      }
    }
    else
    {
      unint64_t v16 = 0xE900000000000067;
      uint64_t v15 = 0x6E696469766F7250;
    }
    sub_100010680(v15, v16, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v33, "Provider state changed: %s -> %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006C474(a1, a2, a3);
    sub_10006C474(a1, a2, a3);
    swift_release_n();
  }
  uint64_t v17 = v3 + v10[54];
  if (*(unsigned char *)(v17 + 16) == 1)
  {
    uint64_t v19 = *(void *)v17;
    unint64_t v18 = *(void *)(v17 + 8);
    swift_retain_n();
    sub_10006C44C(v19, v18, 1);
    swift_retain();
    sub_10006C44C(v19, v18, 1);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t type = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v23 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      unint64_t v24 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                      + 8);
      swift_bridgeObjectRetain();
      sub_100010680(v23, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12)  = 2080;
      uint64_t v26 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
      unint64_t v25 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                      + 8);
      swift_bridgeObjectRetain();
      sub_100010680(v26, v25, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22)  = 2080;
      swift_bridgeObjectRetain();
      sub_100010680(v19, v18, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10006C474(v19, v18, 1);
      sub_10006C474(v19, v18, 1);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, type, "Provider bridging failed from %s to %s because %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      sub_10006C474(v19, v18, 1);
      sub_10006C474(v19, v18, 1);
    }
  }
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  uint64_t v28 = *(void *)v17;
  uint64_t v29 = *(void *)(v17 + 8);
  uint64_t v30 = *(unsigned __int8 *)(v17 + 16);
  sub_10006C44C(*(void *)v17, v29, *(unsigned char *)(v17 + 16));
  v27(v28, v29, v30);
  return sub_10006C474(v28, v29, v30);
}

uint64_t sub_100051880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  int v29 = a5;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v30 = a9;
  uint64_t v31 = a6;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  Logger.init(subsystem:category:)();
  uint64_t v13 = v9
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8)  = 0;
  *(unsigned char *)(v13 + 16)  = 2;
  uint64_t v23 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue;
  sub_10006F314(0, (unint64_t *)&qword_10047C320);
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_10000F9CC(qword_100488070, (uint64_t *)&unk_10047C330);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  *(void *)(v9 + v23)  = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = (void *)(v9
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  uint64_t v15 = v26;
  *uint64_t v14 = v25;
  v14[1]  = v15;
  unint64_t v16 = (void *)(v9
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  uint64_t v17 = v28;
  *unint64_t v16 = v27;
  v16[1]  = v17;
  *(unsigned char *)(v9
           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode)  = v29;
  unint64_t v18 = (void *)(v9
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
  uint64_t v19 = v32;
  *unint64_t v18 = v31;
  v18[1]  = v19;
  uint64_t v20 = (void *)(v9
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  uint64_t v21 = v30;
  *uint64_t v20 = v33;
  v20[1]  = v21;
  return v9;
}

uint64_t sub_100051BE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (!*(unsigned char *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Internet sharing provider session will automatically terminate because it was released", v5, 2u);
      swift_slowDealloc();
    }

    sub_100051D5C();
  }
  uint64_t v6 = v1
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10006C474(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  objc_release(*(id *)(v1
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue));
  return v1;
}

void sub_100051D5C()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (!*(unsigned char *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    if ((_NETRBClientStopService() & 1) == 0)
    {
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v2, v3))
      {
        os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to stop netrb client service", v4, 2u);
        swift_slowDealloc();
      }
    }
    if (_NETRBClientDestroy())
    {
      uint64_t v5 = *(void *)v1;
      uint64_t v6 = *(void *)(v1 + 8);
      *(_OWORD *)uint64_t v1 = xmmword_1003B00B0;
      char v7 = *(unsigned char *)(v1 + 16);
      *(unsigned char *)(v1 + 16)  = 2;
      sub_10006C44C(v5, v6, v7);
      sub_10006C474(v5, v6, v7);
      sub_1000512AC(v5, v6, v7);
      sub_10006C474(v5, v6, v7);
    }
    else
    {
      oslog  = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Failed to destroy netrb client", v9, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_100051F60()
{
  return sub_1000591D4(sub_100051BE8);
}

void sub_100051F78()
{
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  os_log_type_t v4 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v105 - v5;
  type metadata accessor for DispatchTimeInterval();
  __chkstk_darwin();
  os_log_type_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v12 = v0
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (*(unsigned char *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                + 16) != 2
    || *(_OWORD *)v12 != 0)
  {
    return;
  }
  unint64_t v125 = v6;
  uint64_t v128 = v2;
  uint64_t v126 = v1;
  uint64_t v131 = v11;
  uint64_t v132 = (uint64_t *)((char *)&v105 - v10);
  uint64_t v130 = v9;
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16)  = 0;
  uint64_t v124 = (unsigned char *)(v13 + 16);
  dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  uint64_t v16[3] = v13;
  v16[4]  = v14;
  aBlock[4]  = (uint64_t)sub_10006D518;
  aBlock[5]  = (uint64_t)v16;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_10005373C;
  aBlock[3]  = (uint64_t)&unk_1004573D0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  unint64_t v18 = v14;
  swift_release();
  uint64_t v19 = _NETRBClientCreate();
  _Block_release(v17);
  if (!v19)
  {
    sub_1000537A8(0xD00000000000001DLL, 0x80000001003DA4C0);
LABEL_15:
    swift_release();

    return;
  }
  uint64_t v127 = v13;
  uint64_t v129 = v0;
  if (!_NETRBClientSetGlobalServiceState())
  {
    _NETRBClientDestroy();
    sub_1000537A8(0xD000000000000025, 0x80000001003DA4E0);
    goto LABEL_15;
  }
  uint64_t v122 = v19;
  long long v121 = v18;
  uint64_t v20 = v132;
  *uint64_t v132 = 2;
  uint64_t v21 = v130;
  (*(void (**)(void *, void, uint64_t))(v131 + 104))(v20, enum case for DispatchTimeInterval.seconds(_:), v130);
  empty  = xpc_dictionary_create_empty();
  uint64_t v23 = (const char *)netrbClientInterfaceName;
  uint64_t v24 = v129;
  if (!netrbClientInterfaceName)
  {
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v25 = empty;
  unint64_t v26 = *(void *)(v129
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                  + 8);
  uint64_t v114 = *(void *)(v129
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  unint64_t v115 = v26;
  uint64_t v27 = String.utf8CString.getter();
  xpc_object_t v123 = v25;
  xpc_dictionary_set_string(v25, v23, (const char *)(v27 + 32));
  swift_release();
  uint64_t v136 = 0;
  unint64_t v137 = 0;
  int v28 = *(unsigned __int8 *)(v24
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode);
  uint64_t v120 = v24
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  int v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  int v117 = v28;
  if (v28 != 1)
  {
    if (v31)
    {
      int v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Starting in internet sharing mode", v45, 2u);
      swift_slowDealloc();
    }

    uint64_t v46 = v131;
    if (netrbClientDeviceType)
    {
      xpc_dictionary_set_uint64(v123, netrbClientDeviceType, 6uLL);
      started  = _NETRBClientStartService();
      (*(void (**)(char *, void *, uint64_t))(v46 + 16))(v8, v20, v21);
      if (started)
      {
        static DispatchTime.now()();
        uint64_t v48 = v125;
        + infix(_:_:)();
        unint64_t v49 = *(void (**)(char *, uint64_t))(v128 + 8);
        uint64_t v50 = v126;
        v49(v4, v126);
        OS_dispatch_semaphore.wait(timeout:)();
        v49(v48, v50);
        char v51 = static DispatchTimeoutResult.== infix(_:_:)();
        uint64_t v52 = *(void (**)(char *, uint64_t))(v46 + 8);
        v52(v8, v21);
        if ((v51 & 1) == 0)
        {
          uint64_t v53 = v124;
          swift_beginAccess();
          if (*v53) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        uint64_t v52 = *(void (**)(char *, uint64_t))(v46 + 8);
        v52(v8, v21);
      }
      swift_bridgeObjectRelease();
      _NETRBClientDestroy();
      uint64_t v134 = 0;
      unint64_t v135 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v134 = 0xD000000000000026;
      unint64_t v135 = 0x80000001003DA510;
      uint64_t v62 = *(void *)(v129
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      char v63 = *(void **)(v129
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                     + 8);
      swift_bridgeObjectRetain();
      v64._countAndFlagsBits  = v62;
      v64._object  = v63;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      sub_1000537A8(v134, v135);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v52((char *)v132, v21);
      goto LABEL_85;
    }
LABEL_89:
    __break(1u);
    return;
  }
  if (v31)
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Starting in bridged mode", v32, 2u);
    swift_slowDealloc();
  }

  if (!netrbClientDeviceType)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  xpc_dictionary_set_uint64(v123, netrbClientDeviceType, 2uLL);
  uint64_t v33 = (char *)swift_slowAlloc();
  uint64_t v34 = *(void *)(v24
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                  + 8);
  uint64_t v118 = *(void *)(v24
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  unint64_t v113 = v34;
  sub_10004EE18(v118, v34, v33);
  long long v116 = v33;
  LODWORD(v119)  = _NETRBClientStartService();
  static DispatchTime.now()();
  uint64_t v35 = v125;
  + infix(_:_:)();
  uint64_t v37 = v128 + 8;
  char v36 = *(void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v38 = v126;
  v36(v4, v126);
  uint64_t v39 = v121;
  OS_dispatch_semaphore.wait(timeout:)();
  uint64_t v128 = v37;
  uint64_t v112 = v36;
  v36(v35, v38);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    swift_retain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v21 = v130;
    if (v42)
    {
      long long v43 = (uint8_t *)swift_slowAlloc();
      aBlock[0]  = swift_slowAlloc();
      *(_DWORD *)long long v43 = 136315138;
      unint64_t v44 = v113;
      swift_bridgeObjectRetain();
      uint64_t v134 = sub_100010680(v118, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Timed out while waiting to start the netrb service for %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_83;
  }
  uint64_t v21 = v130;
  if (v119)
  {
    uint64_t v54 = v124;
    swift_beginAccess();
    if (*v54)
    {
LABEL_61:
      swift_slowDealloc();
LABEL_62:
      uint64_t v83 = v129;
      uint64_t v85 = v136;
      unint64_t v84 = v137;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      char v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = v85;
        uint64_t v89 = swift_slowAlloc();
        uint64_t v128 = swift_slowAlloc();
        uint64_t v134 = v128;
        *(_DWORD *)uint64_t v89 = 136315394;
        unint64_t v90 = v115;
        swift_bridgeObjectRetain();
        uint64_t v133 = sub_100010680(v114, v90, &v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v89 + 12)  = 2080;
        if (v84)
        {
          unint64_t v91 = v84;
        }
        else
        {
          uint64_t v88 = *(void *)(v83
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
          unint64_t v91 = *(void *)(v83
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                          + 8);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
        uint64_t v133 = sub_100010680(v88, v91, &v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Configured infra relay bridge with internal interface %s external interface %s", (uint8_t *)v89, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v21 = v130;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      uint64_t v93 = *(void *)(v83
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
      uint64_t v92 = *(void *)(v83
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName
                      + 8);
      swift_beginAccess();
      unint64_t v94 = v137;
      if (v137)
      {
        uint64_t v95 = v136;
      }
      else
      {
        uint64_t v95 = *(void *)(v83
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
        unint64_t v94 = *(void *)(v83
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                        + 8);
        swift_bridgeObjectRetain();
      }
      uint64_t v96 = v117 ^ 1u;
      if (v93 == v95 && v92 == v94)
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = 0;
      }
      else
      {
        char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v97 = 256;
        if (v98) {
          uint64_t v97 = 0;
        }
      }
      uint64_t v99 = v97 | v96;
      uint64_t v100 = *(void *)v12;
      uint64_t v101 = *(void *)(v12 + 8);
      *(void *)uint64_t v12 = v122;
      *(void *)(v12 + 8)  = v99;
      char v102 = *(unsigned char *)(v12 + 16);
      *(unsigned char *)(v12 + 16)  = 0;
      sub_10006C44C(v100, v101, v102);
      sub_10006C474(v100, v101, v102);
      sub_1000512AC(v100, v101, v102);
      sub_10006C474(v100, v101, v102);

      swift_unknownObjectRelease();
      (*(void (**)(void *, uint64_t))(v131 + 8))(v132, v21);
      goto LABEL_85;
    }
  }
  uint64_t v55 = nwi_state_copy();
  char v56 = v132;
  uint64_t v111 = v55;
  if (!v55) {
    goto LABEL_84;
  }
  swift_retain_n();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = v57;
    char v60 = (uint8_t *)swift_slowAlloc();
    aBlock[0]  = swift_slowAlloc();
    *(_DWORD *)char v60 = 136315138;
    uint64_t v119 = (uint64_t)(v60 + 4);
    unint64_t v61 = v113;
    swift_bridgeObjectRetain();
    uint64_t v134 = sub_100010680(v118, v61, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v21 = v130;
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v58, "Failed to start the netrb service for %s", v60, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    unint64_t v61 = v113;
  }
  nwi_state_get_interface_names();
  uint64_t v119 = swift_slowAlloc();
  interface_names  = nwi_state_get_interface_names();
  if (!interface_names) {
    goto LABEL_82;
  }
  uint64_t v66 = interface_names;
  swift_beginAccess();
  uint64_t v67 = 0;
  char v68 = 0;
  uint64_t v69 = 8 * v66;
  uint64_t v70 = 8 * v66 - 8;
  *(void *)&long long v71 = 136315138;
  long long v109 = v71;
  uint64_t v108 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v68)
    {
      if (v70 == v67) {
        goto LABEL_60;
      }
LABEL_40:
      char v68 = 1;
      goto LABEL_37;
    }
    uint64_t v66 = *(void *)(v119 + v67);
    if (v66)
    {
      static String.Encoding.utf8.getter();
      uint64_t v72 = String.init(cString:encoding:)();
      if (v73) {
        break;
      }
    }
    if (v70 == v67) {
      goto LABEL_82;
    }
LABEL_36:
    char v68 = 0;
LABEL_37:
    v67 += 8;
    if (v69 == v67)
    {
      __break(1u);
      goto LABEL_80;
    }
  }
  unint64_t v74 = v73;
  BOOL v75 = v72 == v118 && v73 == v61;
  if (v75 || (uint64_t v110 = v72, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    if (v70 == v67) {
      goto LABEL_82;
    }
    goto LABEL_36;
  }
  strlcpy(v116, (const char *)v66, 0x10uLL);
  if (!_NETRBClientStartService())
  {
LABEL_55:
    swift_bridgeObjectRetain();
    unint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    uint64_t v66 = v79;
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      os_log_t v106 = v78;
      uint64_t v81 = v80;
      uint64_t v107 = swift_slowAlloc();
      uint64_t v134 = v107;
      *(_DWORD *)uint64_t v81 = v109;
      swift_bridgeObjectRetain();
      *(void *)(v81 + 4)  = sub_100010680(v110, v74, &v134);
      swift_bridgeObjectRelease_n();
      os_log_t v82 = v106;
      _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v66, "Failed to start the netrb service for %s", (uint8_t *)v81, 0xCu);
      uint64_t v66 = v107;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    unint64_t v61 = v113;
    if (v70 == v67) {
      goto LABEL_82;
    }
    goto LABEL_36;
  }
  static DispatchTime.now()();
  unint64_t v76 = v125;
  + infix(_:_:)();
  int64_t v77 = v112;
  v112(v4, v126);
  uint64_t v66 = OS_dispatch_semaphore.wait(timeout:)() & 1;
  v77(v76, v126);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v21 = v130;
    if (*v124)
    {
      swift_bridgeObjectRelease();
      uint64_t v136 = v110;
      unint64_t v137 = v74;
      unint64_t v61 = v113;
      if (v70 == v67)
      {
LABEL_60:
        swift_slowDealloc();
        nwi_state_release();
        goto LABEL_61;
      }
      goto LABEL_40;
    }
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v66, v103))
  {
    uint64_t v104 = (uint8_t *)swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    *(_DWORD *)uint64_t v104 = v109;
    swift_bridgeObjectRetain();
    uint64_t v133 = sub_100010680(v110, v74, &v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v66, v103, "Timed out while waiting to start the netrb service for %s", v104, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_81;
  }
LABEL_80:
  swift_bridgeObjectRelease_n();
LABEL_81:

  uint64_t v21 = v130;
LABEL_82:
  swift_slowDealloc();
  nwi_state_release();
LABEL_83:
  uint64_t v39 = v121;
  char v56 = v132;
LABEL_84:
  swift_bridgeObjectRelease();
  _NETRBClientDestroy();
  sub_1000537A8(0xD00000000000004ALL, 0x80000001003DA540);
  swift_slowDealloc();

  swift_unknownObjectRelease();
  (*(void (**)(void *, uint64_t))(v131 + 8))(v56, v21);
LABEL_85:
  swift_release();
}

uint64_t sub_100053388(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  xpc_type_t type = xpc_get_type(v7);
  uint64_t result = XPC_TYPE_DICTIONARY.getter();
  if (type != (xpc_type_t)result || a1 != 1001)
  {
    swift_unknownObjectRelease();
LABEL_10:
    swift_release();
    return 0;
  }
  if (netrbClientNotificationKey)
  {
    uint64_t v10 = (BOOL *)(a4 + 16);
    xpc_object_t v11 = xpc_dictionary_get_value(a2, netrbClientNotificationKey);
    if (!v11)
    {
      dispatch_semaphore_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to get value from NETRB client", v16, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      *uint64_t v10 = 0;
      OS_dispatch_semaphore.signal()();
      swift_release();
      goto LABEL_23;
    }
    uint64_t v12 = v11;
    xpc_type_t v13 = xpc_get_type(v11);
    if (v13 == (xpc_type_t)XPC_TYPE_UINT64.getter())
    {
      value  = xpc_uint64_get_value(v12);
      swift_beginAccess();
      *uint64_t v10 = value == 5002;
      if (value == 5002)
      {
        unint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v18, v19))
        {
LABEL_22:

          OS_dispatch_semaphore.signal()();
          swift_release();
          swift_unknownObjectRelease();
LABEL_23:
          swift_unknownObjectRelease();
          return 0;
        }
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully configured infra relay bridge service", v20, 2u);
LABEL_20:
        swift_slowDealloc();
        goto LABEL_22;
      }
    }
    else
    {
      swift_beginAccess();
      *uint64_t v10 = 0;
    }
    swift_unknownObjectRetain_n();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v21))
    {
      swift_unknownObjectRelease_n();
      goto LABEL_22;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    xpc_copy_description(v12);
    uint64_t v23 = String.init(cString:)();
    sub_100010680(v23, v24, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v21, "Failed to start infra relay bridge service with error %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1000537A8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_100010680(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tearing down infra relay bridge because: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_100051D5C();
  uint64_t v9 = v3
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  uint64_t v10 = *(void *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
  uint64_t v11 = *(void *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 8);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8)  = a2;
  char v12 = *(unsigned char *)(v9 + 16);
  *(unsigned char *)(v9 + 16)  = 1;
  swift_bridgeObjectRetain();
  sub_10006C44C(v10, v11, v12);
  sub_10006C474(v10, v11, v12);
  sub_1000512AC(v10, v11, v12);
  return sub_10006C474(v10, v11, v12);
}

uint64_t sub_10005398C()
{
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  v6[1]  = sub_10006F314(0, (unint64_t *)&qword_10047C320);
  if (qword_10047C168 != -1) {
    swift_once();
  }
  id v4 = (id)static OS_dispatch_queue.nan;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v8 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_10000F9CC(qword_100488070, (uint64_t *)&unk_10047C330);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  *(void *)(v0 + 16)  = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 24)  = 0;
  *(_DWORD *)(v0 + 32)  = 2;
  *(void *)(v0 + 40)  = NANBitmap.Channel.operatingClass.getter;
  *(void *)(v0 + 48)  = 0;
  Logger.init(subsystem:category:)();
  return v0;
}

uint64_t sub_100053C9C()
{
  if (*(void *)(v0 + 24)) {
    sub_100054DD4();
  }

  swift_release();
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession26NetworkConnectivityMonitor_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

void sub_100053D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 24);
  unint64_t v26 = Logger.logObject.getter();
  if (v6)
  {
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v7, "Already monitoring network path status", v8, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v9, "Start monitoring network path status", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = nw_parameters_create();
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_100010BCC(&qword_10047DB98);
    _StringGuts._slowWithCString<A>(_:)();
    os_log_type_t v15 = v27;
  }
  else
  {
    __chkstk_darwin();
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v14 = nw_interface_create_with_name();
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v12 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v14 = sub_100068878(v12, v13, (uint64_t (*)(void))sub_10006CAF4);
    }
    os_log_type_t v15 = v14;
  }
  nw_parameters_require_interface(v11, v15);
  swift_unknownObjectRelease();
  evaluator_for_endpoint  = nw_path_create_evaluator_for_endpoint();
  if (!evaluator_for_endpoint)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v17 = evaluator_for_endpoint;
  unint64_t v18 = *(void **)(v3 + 16);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2]  = v19;
  v20[3]  = a1;
  v20[4]  = a2;
  type metadata accessor for AppleDevice.NetworkPathMonitor();
  uint64_t v21 = swift_allocObject();
  id v22 = v18;
  swift_bridgeObjectRetain();
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v17, v22, (uint64_t)sub_10006CAE8, (uint64_t)v20);
  *(void *)(v3 + 24)  = v21;
  swift_release();
  if (!*(void *)(v3 + 24))
  {
    status  = nw_path_status_invalid;
    goto LABEL_22;
  }
  uint64_t v23 = nw_path_evaluator_copy_path();
  if (!v23)
  {
LABEL_28:
    __break(1u);
    return;
  }
  status  = nw_path_get_status(v23);
  swift_unknownObjectRelease();
LABEL_22:
  if (status != *(_DWORD *)(v3 + 32))
  {
    *(_DWORD *)(v3 + 32)  = status;
    uint64_t v25 = *(void (**)(BOOL))(v3 + 40);
    swift_retain();
    v25(status == nw_path_status_satisfied);
    swift_release();
  }
  swift_unknownObjectRelease();
}

uint64_t sub_1000540F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nw_interface_create_with_name();
  *a1  = result;
  return result;
}

void sub_100054128(NSObject *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_beginAccess();
  Strong  = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v8 = Strong;
  status  = nw_path_get_status(a1);
  v75[0]  = 0;
  swift_bridgeObjectRetain();
  if (getifaddrs(v75))
  {
    int v71 = 1;
    int v72 = 0;
    goto LABEL_20;
  }
  os_log_type_t v9 = v75[0];
  if (v75[0])
  {
    uint64_t v10 = v75[0];
    do
    {
      if (!v10->ifa_name) {
        goto LABEL_103;
      }
      ifa_addr  = v10->ifa_addr;
      uint64_t v10 = v10->ifa_next;
      if (String.init(cString:)() == a3 && v12 == a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0) {
          continue;
        }
      }
      if (!ifa_addr) {
        goto LABEL_104;
      }
      if (ifa_addr->sa_family == 2)
      {
        int v71 = 0;
        int v72 = *(_DWORD *)&ifa_addr->sa_data[2];
        goto LABEL_19;
      }
    }
    while (v10);
  }
  int v71 = 1;
  int v72 = 0;
LABEL_19:
  freeifaddrs(v9);
LABEL_20:
  swift_bridgeObjectRelease();
  v75[0]  = 0;
  swift_bridgeObjectRetain();
  if (getifaddrs(v75))
  {
    os_log_type_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_42;
  }
  unint64_t v16 = v75[0];
  if (v75[0])
  {
    os_log_type_t v15 = _swiftEmptyArrayStorage;
    uint64_t v17 = v75[0];
    while (1)
    {
      if (!v17->ifa_name)
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
      }
      uint64_t v19 = v17->ifa_addr;
      uint64_t v17 = v17->ifa_next;
      if (String.init(cString:)() == a3 && v20 == a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          goto LABEL_25;
        }
      }
      if (!v19) {
        goto LABEL_102;
      }
      if (v19->sa_family == 30)
      {
        uint64_t v25 = &v19->sa_data[6];
        uint64_t v24 = *(void *)&v19->sa_data[6];
        uint64_t v23 = *((void *)v25 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          os_log_type_t v15 = sub_1000C60A8(0, v15[2] + 1, 1, v15);
        }
        unint64_t v27 = v15[2];
        unint64_t v26 = v15[3];
        if (v27 >= v26 >> 1) {
          os_log_type_t v15 = sub_1000C60A8((void *)(v26 > 1), v27 + 1, 1, v15);
        }
        v15[2]  = v27 + 1;
        unint64_t v18 = &v15[4 * v27];
        v18[4]  = v24;
        v18[5]  = v23;
        v18[6]  = 0;
        v18[7]  = 0;
      }
LABEL_25:
      if (!v17) {
        goto LABEL_41;
      }
    }
  }
  os_log_type_t v15 = _swiftEmptyArrayStorage;
LABEL_41:
  freeifaddrs(v16);
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  int v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    v75[0]  = (ifaddrs *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315650;
    swift_beginAccess();
    uint64_t v70 = v8;
    unint64_t v31 = 0xE700000000000000;
    uint64_t v32 = 0x64696C61766E69;
    switch(status)
    {
      case nw_path_status_invalid:
        break;
      case nw_path_status_satisfied:
        uint64_t v32 = 0x6569667369746173;
        unint64_t v31 = 0xE900000000000064;
        break;
      case nw_path_status_unsatisfied:
        uint64_t v32 = 0x6673697461736E75;
        uint64_t v33 = 6579561;
        goto LABEL_49;
      case nw_path_status_satisfiable:
        uint64_t v32 = 0x6169667369746173;
        uint64_t v33 = 6646882;
LABEL_49:
        unint64_t v31 = v33 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      default:
        uint64_t v32 = 0x6E776F6E6B6E75;
        break;
    }
    uint64_t v74 = sub_100010680(v32, v31, (uint64_t *)v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12)  = 2080;
    if (v71) {
      int v34 = 0;
    }
    else {
      int v34 = v72;
    }
    uint64_t v35 = (char *)swift_slowAlloc();
    LODWORD(v74)  = v34;
    inet_ntop(2, &v74, v35, 0x10u);
    uint64_t v36 = String.init(cString:)();
    unint64_t v38 = v37;
    swift_slowDealloc();
    uint64_t v74 = sub_100010680(v36, v38, (uint64_t *)v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22)  = 2080;
    swift_bridgeObjectRetain();
    uint64_t v39 = Array.description.getter();
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v74 = sub_100010680(v39, v41, (uint64_t *)v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Path became %s with ipv4: %s, ipv6: %s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = v70;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  int v42 = status;
  if (status == nw_path_status_satisfied)
  {
    char v43 = v71;
    if ((unsigned __int16)v72 == 65193) {
      char v43 = 1;
    }
    if (v43)
    {
      uint64_t v44 = v15[2];
      if (!v44)
      {
LABEL_63:
        swift_bridgeObjectRelease();
        int v42 = 2;
        status  = nw_path_status_unsatisfied;
        goto LABEL_66;
      }
      uint64_t v45 = 4;
      while (1)
      {
        uint64_t v46 = v15[v45];
        if (v46 != 254 || (v46 & 0xC000) != 0x8000) {
          break;
        }
        v45 += 4;
        if (!--v44) {
          goto LABEL_63;
        }
      }
    }
    swift_bridgeObjectRelease();
    int v42 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_66:
  if (*(_DWORD *)(v8 + 32) == v42)
  {
    swift_retain_n();
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)unint64_t v49 = 136315138;
      unint64_t v50 = 0xE700000000000000;
      uint64_t v51 = 0x64696C61766E69;
      switch(*(_DWORD *)(v8 + 32))
      {
        case 0:
          break;
        case 1:
          uint64_t v51 = 0x6569667369746173;
          unint64_t v50 = 0xE900000000000064;
          break;
        case 2:
          uint64_t v51 = 0x6673697461736E75;
          uint64_t v57 = 6579561;
          goto LABEL_78;
        case 3:
          uint64_t v51 = 0x6169667369746173;
          uint64_t v57 = 6646882;
LABEL_78:
          unint64_t v50 = v57 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          uint64_t v51 = 0x6E776F6E6B6E75;
          break;
      }
      sub_100010680(v51, v50, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Ignoring path status update when %s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315650;
      swift_bridgeObjectRetain();
      sub_100010680(a3, a4, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v54 + 12)  = 2080;
      unint64_t v55 = 0xE700000000000000;
      uint64_t v56 = 0x64696C61766E69;
      switch(*(_DWORD *)(v8 + 32))
      {
        case 0:
          break;
        case 1:
          uint64_t v56 = 0x6569667369746173;
          unint64_t v55 = 0xE900000000000064;
          break;
        case 2:
          uint64_t v56 = 0x6673697461736E75;
          uint64_t v58 = 6579561;
          goto LABEL_84;
        case 3:
          uint64_t v56 = 0x6169667369746173;
          uint64_t v58 = 6646882;
LABEL_84:
          unint64_t v55 = v58 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          uint64_t v56 = 0x6E776F6E6B6E75;
          break;
      }
      sub_100010680(v56, v55, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 22)  = 2080;
      unint64_t v59 = 0xE700000000000000;
      uint64_t v60 = 0x64696C61766E69;
      switch(v42)
      {
        case 0:
          break;
        case 1:
          uint64_t v60 = 0x6569667369746173;
          unint64_t v59 = 0xE900000000000064;
          break;
        case 2:
          uint64_t v60 = 0x6673697461736E75;
          uint64_t v61 = 6579561;
          goto LABEL_90;
        case 3:
          uint64_t v60 = 0x6169667369746173;
          uint64_t v61 = 6646882;
LABEL_90:
          unint64_t v59 = v61 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          uint64_t v60 = 0x6E776F6E6B6E75;
          break;
      }
      sub_100010680(v60, v59, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Network path status on %s changed from %s to %s", (uint8_t *)v54, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    *(_DWORD *)(v8 + 32)  = status;
    uint64_t v62 = *(void (**)(BOOL))(v8 + 40);
    swift_retain();
    v62(status == nw_path_status_satisfied);
    swift_release();
    if (*(_DWORD *)(v8 + 32) == 1)
    {
      if (qword_10047BF08 != -1) {
        swift_once();
      }
      char v63 = (void *)qword_10047D0B0;
      NSString v64 = String._bridgeToObjectiveC()();
      [v63 setLinkEvent:1 isInvoluntary:1 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:0 forInterface:v64];

      uint64_t v65 = (void *)qword_10047D0B0;
      NSString v66 = String._bridgeToObjectiveC()();
      [v65 notifyInterfaceRankingState:1 forInterface:v66];
    }
    else
    {
      if (qword_10047BF08 != -1) {
        swift_once();
      }
      uint64_t v67 = (void *)qword_10047D0B0;
      NSString v68 = String._bridgeToObjectiveC()();
      [v67 notifyInterfaceRankingState:0 forInterface:v68];

      uint64_t v69 = (void *)qword_10047D0B0;
      NSString v66 = String._bridgeToObjectiveC()();
      [v69 setLinkEvent:0 isInvoluntary:1 linkChangeReason:0 linkChangeSubreason:0 withNetworkDetails:0 forInterface:v66];
    }

    swift_release();
  }
}

void sub_100054DD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  oslog  = Logger.logObject.getter();
  if (v2)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Stop monitoring network path status", v4, 2u);
      swift_slowDealloc();
    }

    *(_DWORD *)(v1 + 32)  = 2;
    *(void *)(v1 + 24)  = 0;
    swift_release();
  }
  else
  {
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Already stopped monitoring network path status", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100054F30(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      return 0x6961462050434844;
    }
    else if (a1 | a2)
    {
      return 0x74616E696D726554;
    }
    else
    {
      return 0x72756769666E6F43;
    }
  }
  else
  {
    uint64_t v4 = 0x6569667369746153;
    if ((a1 & 1) == 0) {
      uint64_t v4 = 0x6673697461736E55;
    }
    uint64_t v6 = v4;
    swift_bridgeObjectRetain();
    v5._object  = (void *)0xEA00000000007265;
    v5._countAndFlagsBits  = 0x7473657571655220;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return v6;
  }
}

uint64_t sub_100055044()
{
  return sub_100054F30(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

id sub_100055050()
{
  id result = [self sharedInstance];
  qword_10047D0B0  = (uint64_t)result;
  return result;
}

uint64_t sub_10005508C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_10006C44C(a1, a2, a3);
  swift_retain();
  sub_10006C44C(a1, a2, a3);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = &qword_10047D000;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v12 = 0xEB0000000064656CLL;
        uint64_t v13 = 0x6961462050434844;
      }
      else
      {
        if (a1 | a2) {
          uint64_t v13 = 0x74616E696D726554;
        }
        else {
          uint64_t v13 = 0x72756769666E6F43;
        }
        if (a1 | a2) {
          unint64_t v12 = 0xEA00000000006465;
        }
        else {
          unint64_t v12 = 0xEB00000000676E69;
        }
      }
    }
    else
    {
      uint64_t v14 = 0x6569667369746153;
      if (a1)
      {
        unint64_t v15 = 0xE900000000000064;
      }
      else
      {
        uint64_t v14 = 0x6673697461736E55;
        unint64_t v15 = 0xEB00000000646569;
      }
      uint64_t v41 = v14;
      unint64_t v42 = v15;
      swift_bridgeObjectRetain();
      v16._object  = (void *)0xEA00000000007265;
      v16._countAndFlagsBits  = 0x7473657571655220;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v13 = v41;
      unint64_t v12 = v15;
    }
    uint64_t v41 = sub_100010680(v13, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006C474(a1, a2, a3);
    sub_10006C474(a1, a2, a3);
    *(_WORD *)(v11 + 12)  = 2080;
    if (*(unsigned char *)(v4
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
    {
      if (*(unsigned char *)(v4
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                    + 16) == 1)
      {
        unint64_t v17 = 0xEB0000000064656CLL;
        uint64_t v18 = 0x6961462050434844;
      }
      else
      {
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0)
          uint64_t v18 = 0x72756769666E6F43;
        else {
          uint64_t v18 = 0x74616E696D726554;
        }
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0)
          unint64_t v17 = 0xEB00000000676E69;
        else {
          unint64_t v17 = 0xEA00000000006465;
        }
      }
    }
    else
    {
      uint64_t v19 = 0x6569667369746153;
      if ((*(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1) != 0)
      {
        unint64_t v20 = 0xE900000000000064;
      }
      else
      {
        uint64_t v19 = 0x6673697461736E55;
        unint64_t v20 = 0xEB00000000646569;
      }
      uint64_t v41 = v19;
      unint64_t v42 = v20;
      swift_bridgeObjectRetain();
      v21._object  = (void *)0xEA00000000007265;
      v21._countAndFlagsBits  = 0x7473657571655220;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      uint64_t v18 = v41;
      unint64_t v17 = v20;
    }
    uint64_t v41 = sub_100010680(v18, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requester state changed: %s -> %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = &qword_10047D000;
  }
  else
  {

    sub_10006C474(a1, a2, a3);
    sub_10006C474(a1, a2, a3);
    swift_release_n();
  }
  uint64_t v22 = v4 + v10[58];
  if (*(unsigned char *)(v22 + 16) == 1)
  {
    uint64_t v24 = *(void *)v22;
    unint64_t v23 = *(void *)(v22 + 8);
    swift_retain();
    sub_10006C44C(v24, v23, 1);
    swift_retain();
    sub_10006C44C(v24, v23, 1);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    unint64_t v27 = &qword_10047D000;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
      unint64_t v30 = *(void *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                      + 8);
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100010680(v29, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12)  = 2080;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100010680(v24, v23, &v41);
      unint64_t v27 = &qword_10047D000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10006C474(v24, v23, 1);
      sub_10006C474(v24, v23, 1);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requester DHCP failed on %s because %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      sub_10006C474(v24, v23, 1);
      sub_10006C474(v24, v23, 1);
    }
    unint64_t v31 = (uint64_t *)(v4 + v27[59]);
    uint64_t v32 = *v31;
    uint64_t v33 = (void *)v31[1];
    swift_bridgeObjectRetain();
    sub_10006A120(v32, v33);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    if (v35) {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
  uint64_t v37 = *(void *)v22;
  uint64_t v38 = *(void *)(v22 + 8);
  uint64_t v39 = *(unsigned __int8 *)(v22 + 16);
  sub_10006C44C(*(void *)v22, v38, *(unsigned char *)(v22 + 16));
  v36(v37, v38, v39);
  return sub_10006C474(v37, v38, v39);
}

uint64_t sub_100055720()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
  if (!*(unsigned char *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                 + 16))
  {
    sub_100054DD4();
    uint64_t v3 = *(void *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    uint64_t v4 = *(void **)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                  + 8);
    swift_bridgeObjectRetain();
    sub_10006A120(v3, v4);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    if (v6) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = *(void *)v2;
    uint64_t v8 = *(void *)(v2 + 8);
    *(_OWORD *)uint64_t v2 = xmmword_1003B00B0;
    char v9 = *(unsigned char *)(v2 + 16);
    *(unsigned char *)(v2 + 16)  = 2;
    sub_10006C44C(v7, v8, v9);
    sub_10006C474(v7, v8, v9);
    sub_10005508C(v7, v8, v9);
    sub_10006C474(v7, v8, v9);
  }
  uint64_t v10 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_logger;
  uint64_t v11 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10006C474(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  return v1;
}

uint64_t sub_1000558A0()
{
  return sub_1000591D4(sub_100055720);
}

uint64_t sub_1000558B8(const __SCPreferences *a1, uint64_t a2, void *a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = (void *)_SCNetworkInterfaceCreateWithBSDName();

  if (v7)
  {
    CFArrayRef v8 = SCNetworkServiceCopyAll(a1);
    if (v8)
    {
      CFArrayRef v9 = v8;
      type metadata accessor for SCNetworkService(0);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    return 0;
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits  = a2;
    v11._object  = a3;
    String.append(_:)(v11);
    return 0;
  }
}

uint64_t sub_10005608C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    uint64_t v2 = *(void *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
    if (*(unsigned char *)(result
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
      BOOL v3 = 0;
    else {
      BOOL v3 = (*(void *)(result
    }
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1) == 0;
    if (v3)
    {
      uint64_t v4 = *(void *)(v1 + 8);
      *(void *)uint64_t v1 = 0xD00000000000002DLL;
      *(void *)(v1 + 8)  = 0x80000001003DA440;
      *(unsigned char *)(v1 + 16)  = 1;
      sub_10006C474(v2, v4, 0);
      sub_10005508C(v2, v4, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100056154(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    if (!*(unsigned char *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                   + 16))
    {
      uint64_t v5 = *(void *)v4;
      if (*(void *)v4)
      {
        if ((a1 & 1) == 0)
        {
          sub_100054DD4();
          uint64_t v7 = *(void *)(v3
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
          CFArrayRef v8 = *(void **)(v3
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                        + 8);
          swift_bridgeObjectRetain();
          sub_10006A120(v7, v8);
          uint64_t v10 = v9;
          swift_bridgeObjectRelease();
          if (v10) {
            swift_bridgeObjectRelease();
          }
          uint64_t v11 = *(void *)v4;
          uint64_t v12 = *(void *)(v4 + 8);
          *(_OWORD *)uint64_t v4 = xmmword_1003B00B0;
          char v13 = *(unsigned char *)(v4 + 16);
          *(unsigned char *)(v4 + 16)  = 2;
          sub_10006C44C(v11, v12, v13);
          sub_10006C474(v11, v12, v13);
          sub_10005508C(v11, v12, v13);
          sub_10006C474(v11, v12, v13);
          uint64_t v14 = *(void *)v4;
          uint64_t v15 = *(void *)(v4 + 8);
          *(void *)uint64_t v4 = 0xD000000000000018;
          *(void *)(v4 + 8)  = 0x80000001003DA420;
          char v16 = *(unsigned char *)(v4 + 16);
          *(unsigned char *)(v4 + 16)  = 1;
          sub_10006C44C(v14, v15, v16);
          sub_10006C474(v14, v15, v16);
          sub_10005508C(v14, v15, v16);
          sub_10006C474(v14, v15, v16);
        }
      }
      else if (a1)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        *(_OWORD *)uint64_t v4 = xmmword_1003B00B0;
        *(unsigned char *)(v4 + 16)  = 0;
        sub_10006C474(v5, v6, 0);
        sub_10005508C(v5, v6, 0);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005633C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  Logger.init(subsystem:category:)();
  uint64_t v9 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(void *)(v4 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor)  = 0;
  RoutingSocket.init()(v4 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  uint64_t v10 = v4
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16)  = 0u;
  *(unsigned char *)(v10 + 32)  = -1;
  uint64_t v11 = v4
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v11 + 4)  = 0;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 6)  = 1;
  uint64_t v12 = v4
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  unint64_t v30 = nw_parameters_create();
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  if ((v14 & 0x1000000000000000) != 0 || !(v14 & 0x2000000000000000 | v15 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain();
    sub_100010BCC(&qword_10047DB98);
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = v31;
  }
  else
  {
    __chkstk_darwin();
    if ((v14 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = nw_interface_create_with_name();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v15 & 0x1000000000000000) != 0)
      {
        uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
        uint64_t v17 = v29;
      }
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_100068878(v16, v17, a2);
      swift_bridgeObjectRelease();
    }
  }
  nw_parameters_require_interface(v30, v18);
  swift_unknownObjectRelease();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    Swift::String v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Start monitoring network path for gateway address updates", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t result = nw_path_create_evaluator_for_endpoint();
  if (result)
  {
    uint64_t v23 = result;
    if (qword_10047C178 != -1) {
      swift_once();
    }
    uint64_t v24 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16)  = v25;
    *(void *)(v26 + 24)  = a1;
    type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v27 = swift_allocObject();
    swift_retain();
    id v28 = v24;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v23, v28, a4, v26);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(v7 + v9)  = v27;
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100056754(NSObject *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      aBlock[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = *(void *)(a3 + 16);
      unint64_t v10 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      sub_100010680(v11, v10, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Network path for interface %s was updated", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16)  = v6;
    *(void *)(v12 + 24)  = a3;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16)  = sub_10006D2A4;
    *(void *)(v13 + 24)  = v12;
    aBlock[4]  = (uint64_t)sub_10006F538;
    aBlock[5]  = v13;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_10005902C;
    aBlock[3]  = (uint64_t)&unk_1004570D8;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    nw_path_enumerate_gateways(a1, v14);
    swift_release();
    _Block_release(v14);
    LOBYTE(v14)  = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v14) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100056A28(NSObject *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      aBlock[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = *(void *)(a3 + 16);
      unint64_t v10 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      sub_100010680(v11, v10, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Network path for interface %s was updated", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16)  = v6;
    *(void *)(v12 + 24)  = a3;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16)  = sub_10006F47C;
    *(void *)(v13 + 24)  = v12;
    aBlock[4]  = (uint64_t)sub_10006D178;
    aBlock[5]  = v13;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_10005902C;
    aBlock[3]  = (uint64_t)&unk_100456DE0;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    nw_path_enumerate_gateways(a1, v14);
    swift_release();
    _Block_release(v14);
    LOBYTE(v14)  = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v14) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100056CFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v12 = (char *)&v30 - v11;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v35 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    nw_path_t v36 = a1;
    uint64_t v37 = a5;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v34 = a3;
    v15(v12, a3, a4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v32 = v19;
      uint64_t v33 = v15;
      *(_DWORD *)uint64_t v18 = 136315138;
      aBlock[0]  = v19;
      unint64_t v30 = v18 + 4;
      unint64_t v31 = v18;
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(v37 + 16) + 40))(a4);
      uint64_t v38 = sub_100010680(v20, v21, aBlock);
      uint64_t v15 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = v12;
      uint64_t v23 = v37;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v22, a4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Network path for interface %s was updated", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
      uint64_t v23 = v37;
    }
    uint64_t v24 = v35;
    v15(v35, v34, a4);
    unint64_t v25 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v26 = (char *)swift_allocObject();
    *((void *)v26 + 2)  = a4;
    *((void *)v26 + 3)  = v23;
    *((void *)v26 + 4)  = v14;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v26[v25], v24, a4);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16)  = sub_10006D6B4;
    *(void *)(v27 + 24)  = v26;
    aBlock[4]  = (uint64_t)sub_10006F538;
    aBlock[5]  = v27;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_10005902C;
    aBlock[3]  = (uint64_t)&unk_100457470;
    id v28 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    nw_path_enumerate_gateways(v36, v28);
    swift_release();
    _Block_release(v28);
    isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10005710C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v100 = a3;
  sub_100010BCC(&qword_10047D0B8);
  __chkstk_darwin();
  uint64_t v104 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for RoutingSocket();
  unint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin();
  uint64_t v105 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  unint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v86 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v86 - v12;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v99 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v86 - v15;
  uint64_t v17 = type metadata accessor for DispatchTime();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v106 = (char *)&v86 - v21;
  address  = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Currently support gateway IP address translation for IPv4 only", v27, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v97 = *(unsigned int *)&address->sa_data[2];
  v117[0]  = v97;
  memset(&v117[1], 0, 24);
  char v118 = 0;
  uint64_t v23 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess();
  uint64_t v96 = v23;
  sub_1000136F4(v23, (uint64_t)v16, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    id v28 = v106;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v106, v16, v17);
    uint64_t v29 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    int v30 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    uint64_t v24 = a2;
    if (v30 == 255)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v17);
      goto LABEL_16;
    }
    uint64_t v98 = v17;
    uint64_t v95 = a2;
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v33 = v29[2];
    uint64_t v34 = v29[3];
    LODWORD(v93)  = v30;
    uint64_t v90 = v31;
    uint64_t v89 = v32;
    uint64_t v88 = v33;
    uint64_t v87 = v34;
    sub_10006D100(v31, v32, v33, v34, v30 & 1);
    if (qword_10047BFF0 != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)algn_100488568 + 8))();
    DispatchTime.distance(to:)();
    uint64_t v94 = v18;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v92 = v18 + 8;
    unint64_t v91 = v35;
    v35(v20, v98);
    *(void *)uint64_t v11 = 300;
    unint64_t v36 = v101;
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 104);
    v37(v11, enum case for DispatchTimeInterval.seconds(_:), v7);
    uint64_t v38 = enum case for DispatchTimeInterval.never(_:);
    v37(v9, enum case for DispatchTimeInterval.never(_:), v7);
    char v39 = static DispatchTimeInterval.== infix(_:_:)();
    unint64_t v40 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40(v9, v7);
    if (v39)
    {
      v40(v11, v7);
      v40(v13, v7);
      uint64_t v24 = v95;
      uint64_t v17 = v98;
      uint64_t v18 = v94;
      unsigned __int8 v41 = v93;
LABEL_12:
      sub_10006CA80(v90, v89, v88, v87, v41);
      uint64_t v43 = (uint64_t)v104;
      uint64_t v42 = (uint64_t)v105;
LABEL_13:
      v91(v106, v17);
      goto LABEL_17;
    }
    v37(v9, v38, v7);
    char v66 = static DispatchTimeInterval.== infix(_:_:)();
    v40(v9, v7);
    if (v66)
    {
      v40(v11, v7);
      v40(v13, v7);
      uint64_t v24 = v95;
      uint64_t v17 = v98;
      uint64_t v18 = v94;
      int v67 = v97;
      unsigned __int8 v41 = v93;
      if (v93) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v68 = sub_1001ADA80();
      uint64_t v69 = sub_1001ADA80();
      v40(v11, v7);
      v40(v13, v7);
      BOOL v70 = v68 < v69;
      uint64_t v24 = v95;
      uint64_t v17 = v98;
      uint64_t v18 = v94;
      int v67 = v97;
      unsigned __int8 v41 = v93;
      if (!v70 || (v93 & 1) != 0) {
        goto LABEL_12;
      }
    }
    uint64_t v43 = (uint64_t)v104;
    uint64_t v42 = (uint64_t)v105;
    if (v67 == v90)
    {
      int v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v71, v72))
      {
        unint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Skip updating gateway IP address", v73, 2u);
        swift_slowDealloc();
      }

      v91(v106, v98);
      return 0;
    }
    goto LABEL_13;
  }
  sub_1000380B4((uint64_t)v16, &qword_10047DB90);
  uint64_t v24 = a2;
LABEL_16:
  uint64_t v43 = (uint64_t)v104;
  uint64_t v42 = (uint64_t)v105;
LABEL_17:
  sub_1000136F4(v24 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, v43, &qword_10047D0B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v43, 1, v103) == 1)
  {
    sub_1000380B4(v43, &qword_10047D0B8);
    return 0;
  }
  uint64_t v98 = v17;
  sub_100013368(v43, v42, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  unint64_t v44 = RoutingSocket.macAddress(for:)((uint64_t)v117);
  sub_100013308(v42, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  if ((v44 & 0x1000000000000) != 0) {
    return 0;
  }
  uint64_t v45 = (char *)(v24
               + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  unint64_t v46 = v44 >> 40;
  unint64_t v47 = HIDWORD(v44);
  int v48 = *(unsigned __int8 *)(v24
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  unint64_t v49 = v44 >> 24;
  if (v48 == 255) {
    goto LABEL_28;
  }
  if (v48) {
    goto LABEL_28;
  }
  if (v97 != *(_DWORD *)v45) {
    goto LABEL_28;
  }
  unint64_t v50 = (unsigned int *)(v24
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(unsigned char *)(v24
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_28;
  uint64_t v51 = *((unsigned __int16 *)v50 + 2);
  uint64_t v52 = *v50;
  LOWORD(v108)  = v44;
  BYTE2(v108)  = BYTE2(v44);
  BYTE3(v108)  = BYTE3(v44);
  BYTE4(v108)  = BYTE4(v44);
  BYTE5(v108)  = BYTE5(v44);
  LOBYTE(v107)  = v52;
  v53.i64[0]  = 0xFFFFFFFFFFFFLL;
  v53.i64[1]  = 0xFFFFFFFFFFFFLL;
  uint64x2_t v54 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v52 | (unint64_t)(v51 << 32)), v53);
  int16x8_t v55 = (int16x8_t)vshlq_u64(v54, (uint64x2_t)xmmword_1003B2EB0);
  *(int32x2_t *)v54.i8  = vmovn_s64((int64x2_t)vshlq_u64(v54, (uint64x2_t)xmmword_1003B2EA0));
  *(int32x2_t *)v55.i8  = vmovn_s64((int64x2_t)v55);
  v55.i16[1]  = v55.i16[2];
  v55.i16[2]  = v54.i16[0];
  v55.i16[3]  = v54.i16[2];
  *(_DWORD *)((char *)&v107 + 1)  = vmovn_s16(v55).u32[0];
  BYTE5(v107)  = BYTE1(v51);
  if (v108 != v107 || WORD2(v108) != WORD2(v107))
  {
LABEL_28:
    uint64_t v104 = (char *)(v44 >> 8);
    uint64_t v105 = (char *)(v44 >> 16);
    os_log_t v106 = (char *)(v24
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    uint64_t v103 = v24 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      unint64_t v93 = v44 >> 24;
      unint64_t v49 = v59;
      uint64_t v92 = swift_slowAlloc();
      uint64_t v108 = v92;
      *(_DWORD *)unint64_t v49 = 136315394;
      unint64_t v102 = HIDWORD(v44);
      uint64_t v60 = (char *)swift_slowAlloc();
      uint64_t v95 = v24;
      uint64_t v94 = v18;
      int v61 = v97;
      LODWORD(v107)  = v97;
      inet_ntop(2, &v107, v60, 0x10u);
      uint64_t v62 = String.init(cString:)();
      unint64_t v101 = v44 >> 40;
      unint64_t v46 = v63;
      swift_slowDealloc();
      uint64_t v107 = sub_100010680(v62, v46, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12)  = 2080;
      uint64_t v64 = WiFiAddress.description.getter(v44 & 0xFFFFFFFFFFFFLL);
      uint64_t v107 = sub_100010680(v64, v65, &v108);
      uint64_t v18 = v94;
      uint64_t v24 = v95;
      LOBYTE(v46)  = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      LOWORD(v47)  = v102;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Gateway (%s) has MAC address %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      LOBYTE(v49)  = v93;
      swift_slowDealloc();
    }
    else
    {

      int v61 = v97;
    }
    LODWORD(v108)  = 1;
    BYTE4(v108)  = v44;
    BYTE5(v108)  = (_BYTE)v104;
    BYTE6(v108)  = (_BYTE)v105;
    HIBYTE(v108)  = v49;
    char v109 = v47;
    char v110 = v46;
    int v111 = 528;
    int v112 = v61;
    long long v113 = 0u;
    long long v114 = 0u;
    int v115 = 0;
    uint64_t v74 = *(void *)(v100 + 16);
    uint64_t v75 = *(void *)(v100 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    AppleDevice.setRequest(requestType:data:on:)(0x1C2uLL, (uint64_t)&v108, (uint64_t)v116, 0, v74, v75);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v45 = v106;
  }
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  uint64_t v78 = (uint64_t)v99;
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  uint64_t v76 = 1;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v78, 0, 1, v98);
  uint64_t v79 = v96;
  swift_beginAccess();
  sub_10006D1A4(v78, v79, &qword_10047DB90);
  swift_endAccess();
  uint64_t v80 = *(void *)v45;
  uint64_t v81 = *((void *)v45 + 1);
  uint64_t v82 = *((void *)v45 + 2);
  uint64_t v83 = *((void *)v45 + 3);
  *(void *)uint64_t v45 = v97;
  *((void *)v45 + 1)  = 0;
  *((void *)v45 + 2)  = 0;
  *((void *)v45 + 3)  = 0;
  unsigned __int8 v84 = v45[32];
  v45[32]  = 0;
  sub_10006CA80(v80, v81, v82, v83, v84);
  uint64_t v85 = v24
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v85 + 4)  = v47;
  *(_DWORD *)uint64_t v85 = v44;
  *(unsigned char *)(v85 + 6)  = 0;
  return v76;
}

uint64_t sub_100058104(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v107 = a5;
  uint64_t v106 = a4;
  uint64_t v105 = a3;
  sub_100010BCC(&qword_10047D0B8);
  __chkstk_darwin();
  int v112 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RoutingSocket();
  uint64_t v110 = *(void *)(v8 - 8);
  uint64_t v111 = v8;
  __chkstk_darwin();
  long long v113 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v108 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v91 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v91 - v15;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v104 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v91 - v18;
  uint64_t v20 = type metadata accessor for DispatchTime();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v109 = (char *)&v91 - v24;
  address  = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      int v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Currently support gateway IP address translation for IPv4 only", v30, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v103 = *(unsigned int *)&address->sa_data[2];
  v116[0]  = v103;
  memset(&v116[1], 0, 24);
  char v117 = 0;
  uint64_t v26 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess();
  uint64_t v102 = v26;
  sub_1000136F4(v26, (uint64_t)v19, &qword_10047DB90);
  uint64_t v27 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v32 = v109;
    v31(v109, v19, v20);
    uint64_t v33 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    int v34 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    if (v34 == 255)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v20);
      goto LABEL_14;
    }
    uint64_t v101 = v20;
    uint64_t v100 = a2;
    uint64_t v35 = *v33;
    uint64_t v36 = v33[1];
    uint64_t v37 = v33[2];
    uint64_t v38 = v33[3];
    int v98 = v34;
    uint64_t v95 = v35;
    uint64_t v94 = v36;
    uint64_t v93 = v37;
    uint64_t v92 = v38;
    sub_10006D100(v35, v36, v37, v38, v34 & 1);
    if (qword_10047BFF0 != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)algn_100488568 + 8))();
    DispatchTime.distance(to:)();
    uint64_t v99 = v27;
    char v39 = *(void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v97 = v27 + 8;
    uint64_t v96 = v39;
    v39(v23, v101);
    *(void *)uint64_t v14 = 300;
    uint64_t v40 = v108;
    unsigned __int8 v41 = *(void (**)(void))(v108 + 104);
    ((void (*)(char *, void, uint64_t))v41)(v14, enum case for DispatchTimeInterval.seconds(_:), v10);
    uint64_t v42 = enum case for DispatchTimeInterval.never(_:);
    v41(v12);
    char v43 = static DispatchTimeInterval.== infix(_:_:)();
    unint64_t v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v44(v12, v10);
    if (v43)
    {
      v44(v14, v10);
      v44(v16, v10);
      uint64_t v45 = v100;
      uint64_t v20 = v101;
      uint64_t v27 = v99;
      unsigned __int8 v46 = v98;
LABEL_11:
      sub_10006CA80(v95, v94, v93, v92, v46);
      uint64_t v47 = (uint64_t)v112;
      uint64_t v48 = (uint64_t)v113;
LABEL_12:
      v96(v109, v20);
      goto LABEL_15;
    }
    ((void (*)(char *, uint64_t, uint64_t))v41)(v12, v42, v10);
    char v75 = static DispatchTimeInterval.== infix(_:_:)();
    v44(v12, v10);
    if (v75)
    {
      v44(v14, v10);
      v44(v16, v10);
      uint64_t v45 = v100;
      uint64_t v20 = v101;
      uint64_t v27 = v99;
      unsigned __int8 v46 = v98;
      if (v98) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v76 = sub_1001ADA80();
      uint64_t v77 = sub_1001ADA80();
      v44(v14, v10);
      v44(v16, v10);
      BOOL v78 = v76 < v77;
      uint64_t v45 = v100;
      uint64_t v20 = v101;
      uint64_t v27 = v99;
      unsigned __int8 v46 = v98;
      if (!v78 || (v98 & 1) != 0) {
        goto LABEL_11;
      }
    }
    uint64_t v47 = (uint64_t)v112;
    uint64_t v48 = (uint64_t)v113;
    if (v103 == v95)
    {
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Skip updating gateway IP address", v81, 2u);
        swift_slowDealloc();
      }

      v96(v109, v101);
      return 0;
    }
    goto LABEL_12;
  }
  sub_1000380B4((uint64_t)v19, &qword_10047DB90);
LABEL_14:
  uint64_t v45 = a2;
  uint64_t v47 = (uint64_t)v112;
  uint64_t v48 = (uint64_t)v113;
LABEL_15:
  sub_1000136F4(v45 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, v47, &qword_10047D0B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v47, 1, v111) == 1)
  {
    sub_1000380B4(v47, &qword_10047D0B8);
    return 0;
  }
  uint64_t v49 = v20;
  sub_100013368(v47, v48, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  uint64_t v52 = RoutingSocket.macAddress(for:)((uint64_t)v116);
  sub_100013308(v48, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  if ((v52 & 0x1000000000000) != 0) {
    return 0;
  }
  int8x16_t v53 = (char *)(v45
               + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  int v54 = *(unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  if (v54 == 255) {
    goto LABEL_30;
  }
  if (v54) {
    goto LABEL_30;
  }
  if (v103 != *(_DWORD *)v53) {
    goto LABEL_30;
  }
  int16x8_t v55 = (unsigned int *)(v45
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(unsigned char *)(v45
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_30;
  uint64_t v56 = *((unsigned __int16 *)v55 + 2);
  uint64_t v57 = *v55;
  LOWORD(v115[0])  = v52;
  BYTE2(v115[0])  = BYTE2(v52);
  BYTE3(v115[0])  = BYTE3(v52);
  BYTE4(v115[0])  = BYTE4(v52);
  BYTE5(v115[0])  = BYTE5(v52);
  LOBYTE(v114)  = v57;
  v58.i64[0]  = 0xFFFFFFFFFFFFLL;
  v58.i64[1]  = 0xFFFFFFFFFFFFLL;
  uint64x2_t v59 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v57 | (unint64_t)(v56 << 32)), v58);
  int16x8_t v60 = (int16x8_t)vshlq_u64(v59, (uint64x2_t)xmmword_1003B2EB0);
  *(int32x2_t *)v59.i8  = vmovn_s64((int64x2_t)vshlq_u64(v59, (uint64x2_t)xmmword_1003B2EA0));
  *(int32x2_t *)v60.i8  = vmovn_s64((int64x2_t)v60);
  v60.i16[1]  = v60.i16[2];
  v60.i16[2]  = v59.i16[0];
  v60.i16[3]  = v59.i16[2];
  *(_DWORD *)((char *)&v114 + 1)  = vmovn_s16(v60).u32[0];
  BYTE5(v114)  = BYTE1(v56);
  if (LODWORD(v115[0]) != v114 || WORD2(v115[0]) != WORD2(v114))
  {
LABEL_30:
    uint64_t v62 = (char *)(v45
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger);
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      int v112 = v62;
      uint64_t v66 = v65;
      uint64_t v111 = swift_slowAlloc();
      v115[0]  = v111;
      *(_DWORD *)uint64_t v66 = 136315394;
      int v67 = (char *)swift_slowAlloc();
      long long v113 = v53;
      LODWORD(v114)  = v103;
      inet_ntop(2, &v114, v67, 0x10u);
      uint64_t v68 = String.init(cString:)();
      uint64_t v100 = v45;
      uint64_t v99 = v27;
      uint64_t v69 = v68;
      unint64_t v71 = v70;
      swift_slowDealloc();
      uint64_t v114 = sub_100010680(v69, v71, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12)  = 2080;
      uint64_t v72 = v52 & 0xFFFFFFFFFFFFLL;
      uint64_t v73 = WiFiAddress.description.getter(v52 & 0xFFFFFFFFFFFFLL);
      uint64_t v114 = sub_100010680(v73, v74, v115);
      int8x16_t v53 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v27 = v99;
      uint64_t v45 = v100;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Gateway (%s) has MAC address %s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v72 = v52 & 0xFFFFFFFFFFFFLL;
    }
    (*(void (**)(uint64_t, void *, uint64_t))(v107 + 120))(v72, v116, v106);
  }
  uint64_t v82 = v45;
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  uint64_t v83 = (uint64_t)v104;
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  uint64_t v50 = 1;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v83, 0, 1, v49);
  uint64_t v84 = v102;
  swift_beginAccess();
  sub_10006D1A4(v83, v84, &qword_10047DB90);
  swift_endAccess();
  uint64_t v85 = *(void *)v53;
  uint64_t v86 = *((void *)v53 + 1);
  uint64_t v87 = *((void *)v53 + 2);
  uint64_t v88 = *((void *)v53 + 3);
  *(void *)int8x16_t v53 = v103;
  *((void *)v53 + 1)  = 0;
  *((void *)v53 + 2)  = 0;
  *((void *)v53 + 3)  = 0;
  unsigned __int8 v89 = v53[32];
  v53[32]  = 0;
  sub_10006CA80(v85, v86, v87, v88, v89);
  uint64_t v90 = v82
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v90 + 4)  = WORD2(v52);
  *(_DWORD *)uint64_t v90 = v52;
  *(unsigned char *)(v90 + 6)  = 0;
  return v50;
}

uint64_t sub_10005902C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v4 = v3(a2);
  swift_unknownObjectRelease();
  return v4 & 1;
}

uint64_t sub_10005907C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stop monitoring network path for gateway address updates", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v2, v6);
  swift_release();
  sub_1000380B4(v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, &qword_10047D0B8);
  sub_10006CA80(*(void *)(v1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress), *(void *)(v1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 8), *(void *)(v1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 16), *(void *)(v1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 24), *(unsigned char *)(v1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 32));
  sub_1000380B4(v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate, &qword_10047DB90);
  return v1;
}

uint64_t sub_1000591BC()
{
  return sub_1000591D4(sub_10005907C);
}

uint64_t sub_1000591D4(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t sub_10005922C()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Resetting gateway IP address", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  uint64_t v8 = v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess();
  sub_10006D1A4((uint64_t)v3, v8, &qword_10047DB90);
  swift_endAccess();
  uint64_t v9 = v1
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  uint64_t v10 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  uint64_t v11 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 8);
  uint64_t v12 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 16);
  uint64_t v13 = *(void *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 24);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16)  = 0u;
  unsigned __int8 v14 = *(unsigned char *)(v9 + 32);
  *(unsigned char *)(v9 + 32)  = -1;
  uint64_t result = sub_10006CA80(v10, v11, v12, v13, v14);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v16 + 4)  = 0;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 6)  = 1;
  return result;
}

uint64_t sub_1000593E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100010BCC(&qword_10047D0B8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RoutingSocket();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unsigned __int8 v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, (uint64_t)v10, &qword_10047D0B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_1000380B4((uint64_t)v10, &qword_10047D0B8);
  }
  sub_100013368((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  unint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v40);
  unint64_t v36 = v40[1];
  uint64_t v37 = v40[0];
  int v34 = (void *)v40[3];
  uint64_t v35 = v40[2];
  sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006D100);
  sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006D100);
  uint64_t v17 = Logger.logObject.getter();
  int v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    int v31 = v18;
    os_log_t v32 = v17;
    uint64_t v33 = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v39 = v30;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v20 = WiFiAddress.description.getter(v16);
    v41[0]  = sub_100010680(v20, v21, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12)  = 2080;
    sub_10006EC68((uint64_t)v40, (uint64_t)v41, &qword_10047DBA0);
    if (v42 == 1)
    {
      uint64_t v22 = v34;
      swift_bridgeObjectRetain();
      uint64_t v23 = IPv6Address.description.getter(v37, v36, v35, v22);
      unint64_t v25 = v24;
      sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
    }
    else
    {
      uint64_t v26 = (char *)swift_slowAlloc();
      LODWORD(v38)  = v37;
      inet_ntop(2, &v38, v26, 0x10u);
      uint64_t v23 = String.init(cString:)();
      unint64_t v25 = v27;
      swift_slowDealloc();
    }
    uint64_t v38 = sub_100010680(v23, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
    sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
    os_log_t v28 = v32;
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "Infra peer (%s) has IP address %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3  = v33;
  }
  else
  {

    sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
    sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
  }
  (*(void (**)(unint64_t, void *, uint64_t, uint64_t))(a4 + 128))(v16, v40, a3, a4);
  sub_100013308((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RoutingSocket);
  return sub_10006D110((uint64_t)v40, (void (*)(void, void, void, void, void))sub_10006CA98);
}

uint64_t static DeviceDriver<>.interfaceName(for:)(unsigned int a1)
{
  uint64_t v2 = (char *)swift_slowAlloc();
  if (if_indextoname(a1, v2)) {
    uint64_t v3 = String.init(cString:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t DeviceDriver<>.linkState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiInterfaceLinkState, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100059C08@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2  = (~*(_DWORD *)(result + 16) & 0x41) == 0;
  return result;
}

uint64_t sub_100059C20(__int16 a1, uint64_t a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v19 = &v23;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = 16;
  swift_bridgeObjectRetain();
  sub_10000E350(a2, (uint64_t)v18, v6, v5);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v22 = 0;
  swift_bridgeObjectRetain();
  if (getifaddrs(&v22))
  {
    swift_bridgeObjectRelease();
    __int16 v7 = 0;
    goto LABEL_22;
  }
  __int16 v17 = a1;
  uint64_t v8 = v22;
  if (!v22)
  {
    LOWORD(ifa_flags)  = 0;
    int v15 = 1;
    goto LABEL_19;
  }
  uint64_t v9 = v22;
  do
  {
    if (!v9->ifa_name)
    {
      __break(1u);
LABEL_24:
      __break(1u);
    }
    ifa_addr  = v9->ifa_addr;
    ifa_flags  = v9->ifa_flags;
    uint64_t v9 = v9->ifa_next;
    if (String.init(cString:)() == v6 && v12 == v5)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        continue;
      }
    }
    if (!ifa_addr) {
      goto LABEL_24;
    }
    if (ifa_addr->sa_family == 18)
    {
      int v15 = 0;
      goto LABEL_19;
    }
  }
  while (v9);
  LOWORD(ifa_flags)  = 0;
  int v15 = 1;
LABEL_19:
  freeifaddrs(v8);
  swift_bridgeObjectRelease();
  __int16 v7 = ifa_flags & 0xFFBE;
  if (v15) {
    __int16 v7 = 0;
  }
  a1  = v17;
LABEL_22:
  LOWORD(v24)  = v7 | ((__int16)(a1 << 15) >> 15) & 0x41;
  swift_retain();
  AppleDevice.send(request:data:)(1u);
  return swift_release();
}

uint64_t DeviceDriver<>.update(linkState:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t v21 = a3;
  int v22 = a1 << 31 >> 31;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v18 - v8;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v10 = v9(a2, a4);
  uint64_t v12 = v11;
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v27 = &v30;
  uint64_t v28 = KeyPath;
  uint64_t v29 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v26, v10, v12);
  swift_bridgeObjectRelease();
  swift_release();
  v9(a2, a4);
  uint64_t v14 = v20;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v24);
  swift_bridgeObjectRelease();
  __int16 v15 = v24 & 0xFFBE;
  if (v25) {
    __int16 v15 = 0;
  }
  LOWORD(v31)  = v15 | v22 & 0x41;
  unint64_t v16 = v19;
  (*(void (**)(uint64_t))(v21 + 56))(a2);
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(v14 + 16))(1, &v30, AssociatedTypeWitness, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_10005A0E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2  = *(_DWORD *)(result + 16);
  *(unsigned char *)(a2 + 4)  = 0;
  return result;
}

unint64_t DeviceDriver<>.macAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6 | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 48);
}

uint64_t sub_10005A1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006EC68(a1 + 24, (uint64_t)v10, &qword_10047DC20);
  sub_10006EC68((uint64_t)v10, (uint64_t)&v11, &qword_10047DC20);
  if (!v11) {
    __break(1u);
  }
  uint64_t v3 = *(unsigned __int8 *)(v11 + 5);
  uint64_t v4 = *(unsigned __int8 *)(v11 + 6);
  uint64_t v8 = *(void *)(v11 + 8);
  int v9 = *(_DWORD *)(v11 + 16);
  uint64_t v5 = sub_100260F60((unsigned char *)&v8 + v3, v4);
  uint64_t result = sub_10000C6C4(v5, v6);
  *(_DWORD *)a2  = result;
  *(_WORD *)(a2 + 4)  = WORD2(result);
  *(unsigned char *)(a2 + 6)  = BYTE6(result) & 1;
  return result;
}

uint64_t sub_10005A2A8(unint64_t a1, uint64_t a2)
{
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v19 = a1 >> 16;
  unint64_t v20 = a1 >> 24;
  unint64_t v21 = HIDWORD(a1);
  unint64_t v22 = a1 >> 40;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v25 = &v28;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = 16;
  swift_bridgeObjectRetain();
  sub_10000E350(a2, (uint64_t)v24, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  long long v23 = v29;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v8 + 32)  = v4;
  *(unsigned char *)(v8 + 33)  = v5;
  *(unsigned char *)(v8 + 34)  = v19;
  *(unsigned char *)(v8 + 35)  = v20;
  *(unsigned char *)(v8 + 36)  = v21;
  *(unsigned char *)(v8 + 37)  = v22;
  uint64_t v9 = sub_1001265EC(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  sub_10005A9A4(v9, v11, (unsigned char *)&v23 + 2, (uint64_t)v24);
  sub_10000C970(v9, v11);
  v30.val[0].i64[1]  = *((void *)&v23 + 1);
  BYTE1(v29)  = BYTE1(v23);
  v30.val[1]  = (int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1);
  HIWORD(v29)  = HIWORD(v23);
  LOBYTE(v29)  = 6;
  LODWORD(v12)  = *(_DWORD *)((char *)&v23 + 2);
  WORD2(v12)  = WORD3(v23);
  BYTE6(v12)  = v30.val[1].i8[0];
  HIBYTE(v12)  = BYTE9(v23);
  *(void *)((char *)&v29 + 2)  = v12;
  v30.val[3].i64[0]  = *((void *)&v23 + 1) >> 40;
  v30.val[2].i64[0]  = HIDWORD(*((void *)&v23 + 1));
  v30.val[1].i64[0]  = *((void *)&v23 + 1) >> 24;
  v30.val[0].i64[0]  = *((void *)&v23 + 1) >> 16;
  v30.val[0]  = vqtbl4q_s8(v30, (int8x16_t)xmmword_1003B2F50);
  *(_DWORD *)((char *)&v29 + 10)  = vmovn_s16((int16x8_t)v30.val[0]).u32[0];
  unint64_t v13 = *((void *)&v29 + 1);
  uint64_t v14 = HIWORD(*((void *)&v29 + 1));
  uint64_t v15 = HIBYTE(*((void *)&v29 + 1));
  uint64_t v16 = v29 >> 48;
  uint64_t v17 = v29 >> 40;
  BYTE1(v29)  = 18;
  v30.val[0].i16[0]  = WORD1(v29);
  v30.val[0].i8[2]  = BYTE4(v29);
  v30.val[0].i8[3]  = v17;
  v30.val[0].i8[4]  = v16;
  *(__int16 *)((char *)&v30.val[0].i16[2] + 1)  = *(_WORD *)((char *)&v29 + 7);
  v30.val[0].i8[7]  = BYTE9(v29);
  *(void *)((char *)&v29 + 2)  = v30.val[0].i64[0];
  v30.val[3].i64[0]  = v13 >> 40;
  v30.val[2].i64[0]  = HIDWORD(v13);
  v30.val[1].i64[0]  = v13 >> 24;
  v30.val[0].i64[0]  = v13 >> 16;
  *(_DWORD *)((char *)&v29 + 10)  = vmovn_s16((int16x8_t)vqtbl4q_s8(v30, (int8x16_t)xmmword_1003B2F50)).u32[0];
  BYTE14(v29)  = v14;
  HIBYTE(v29)  = v15;
  swift_retain();
  AppleDevice.send(request:data:)(2u);
  return swift_release();
}

uint64_t DeviceDriver<>.update(macAddress:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a3;
  uint64_t v30 = a5;
  char v8 = a1;
  unint64_t v22 = a1 >> 8;
  unint64_t v23 = a1 >> 16;
  unint64_t v24 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = a1 >> 40;
  uint64_t v28 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v22 - v10;
  long long v37 = 0u;
  int64x2_t v38 = 0u;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  uint64_t v14 = v13;
  uint64_t KeyPath = swift_getKeyPath();
  int v34 = &v37;
  uint64_t v35 = KeyPath;
  uint64_t v36 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v33, v12, v14);
  uint64_t v27 = v5;
  swift_bridgeObjectRelease();
  swift_release();
  int64x2_t v32 = v38;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v16 + 32)  = v8;
  *(unsigned char *)(v16 + 33)  = v22;
  *(unsigned char *)(v16 + 34)  = v23;
  *(unsigned char *)(v16 + 35)  = v24;
  *(unsigned char *)(v16 + 36)  = v25;
  *(unsigned char *)(v16 + 37)  = v26;
  uint64_t v17 = sub_1001265EC(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  sub_10005A9A4(v17, v19, &v32.i8[2], (uint64_t)v33);
  sub_10000C970(v17, v19);
  v39.val[0].i64[1]  = v32.i64[1];
  v39.val[1]  = (int8x16_t)vdupq_laneq_s64(v32, 1);
  v38.i16[7]  = v32.i16[7];
  v38.i16[0]  = 4614;
  LODWORD(v20)  = *(__int32 *)((char *)v32.i32 + 2);
  WORD2(v20)  = v32.i16[3];
  BYTE6(v20)  = v39.val[1].i8[0];
  HIBYTE(v20)  = v32.i8[9];
  *(uint64_t *)((char *)v38.i64 + 2)  = v20;
  v39.val[3].i64[0]  = (unint64_t)v32.i64[1] >> 40;
  v39.val[2].i64[0]  = HIDWORD(v32.i64[1]);
  v39.val[1].i64[0]  = (unint64_t)v32.i64[1] >> 24;
  v39.val[0].i64[0]  = (unint64_t)v32.i64[1] >> 16;
  v39.val[0]  = vqtbl4q_s8(v39, (int8x16_t)xmmword_1003B2F50);
  *(__int32 *)((char *)&v38.i32[2] + 2)  = vmovn_s16((int16x8_t)v39.val[0]).u32[0];
  v39.val[3].i64[0]  = (unint64_t)v38.i64[1] >> 40;
  v39.val[2].i64[0]  = HIDWORD(v38.i64[1]);
  v39.val[1].i64[0]  = (unint64_t)v38.i64[1] >> 24;
  v39.val[0].i64[0]  = (unint64_t)v38.i64[1] >> 16;
  *(__int32 *)((char *)&v38.i32[2] + 2)  = vmovn_s16((int16x8_t)vqtbl4q_s8(v39, (int8x16_t)xmmword_1003B2F50)).u32[0];
  v38.i16[7]  = v32.i16[7];
  (*(void (**)(uint64_t))(v29 + 56))(v28);
  (*(void (**)(uint64_t, long long *, uint64_t))(v30 + 16))(2, &v37, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, AssociatedTypeWitness);
}

void *sub_10005A9A4(uint64_t a1, unint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = sub_100010BCC(&qword_10047DC28);
  uint64_t result = (void *)__chkstk_darwin();
  unint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  if (a3)
  {
    uint64_t result = (void *)__chkstk_darwin();
    *(void *)&v20[-32]  = &v27;
    *(void *)&v20[-24]  = a3;
    *(void *)&v20[-16]  = a4;
    *(void *)&v20[-8]  = a3;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          goto LABEL_17;
        }
        sub_100013D44(a1, a2);
        char v12 = sub_10006CB6C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10006D708);
        uint64_t result = (void *)sub_10000C970(a1, a2);
        if (v12)
        {
LABEL_8:
          uint64_t v16 = v27;
          unint64_t v17 = v28;
          switch(v28 >> 62)
          {
            case 1uLL:
            case 2uLL:
              sub_100013D44(v27, v28);
              sub_100013D44(v16, v17);
              break;
            default:
              break;
          }
          Data.Iterator.init(_:at:)();
          sub_10000C970(v16, v17);
          type metadata accessor for Data.Iterator();
          sub_1000687F0((unint64_t *)&qword_10047DC30, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
          dispatch thunk of IteratorProtocol.next()();
          uint64_t v18 = 0;
          if ((__src & 0x100) == 0)
          {
            uint64_t v19 = 0;
            do
            {
              uint64_t v18 = v19 + 1;
              if (__OFADD__(v19, 1))
              {
                __break(1u);
LABEL_17:
                __break(1u);
              }
              a3[v19]  = __src;
              dispatch thunk of IteratorProtocol.next()();
              ++v19;
            }
            while (BYTE1(__src) != 1);
          }
          *(void *)&v11[*(int *)(v8 + 36)]  = v18;
          uint64_t result = (void *)sub_1000380B4((uint64_t)v11, &qword_10047DC28);
        }
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v14 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        char v15 = sub_10006CB6C(v13, v14, a2 & 0x3FFFFFFFFFFFFFFFLL, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10006D708);
        swift_release();
        uint64_t result = (void *)swift_release();
        if (v15) {
          goto LABEL_8;
        }
        return result;
      case 3uLL:
        return result;
      default:
        __src  = a1;
        __int16 v22 = a2;
        char v23 = BYTE2(a2);
        char v24 = BYTE3(a2);
        char v25 = BYTE4(a2);
        char v26 = BYTE5(a2);
        return memcpy(a3, &__src, BYTE6(a2));
    }
  }
  return result;
}

unint64_t DeviceDriver<>.ipv4Address.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for IPv4Address, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t sub_10005AE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006EC68(a1 + 24, (uint64_t)v4, &qword_10047DC20);
  uint64_t result = sub_10006EC68((uint64_t)v4, (uint64_t)&v5, &qword_10047DC20);
  if (v5)
  {
    *(_DWORD *)a2  = *(_DWORD *)(v5 + 4);
    *(unsigned char *)(a2 + 4)  = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005AEC0(uint64_t a1, uint64_t a2)
{
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  void v9[2] = &v10;
  v9[3]  = swift_getKeyPath();
  v9[4]  = 16;
  swift_bridgeObjectRetain();
  sub_10000E350(a2, (uint64_t)v9, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  if ((a1 & 0x100000000) != 0)
  {
    unsigned int v7 = 4;
  }
  else
  {
    LODWORD(v11)  = 528;
    WORD2(v11)  = a1;
    BYTE6(v11)  = BYTE2(a1);
    BYTE7(v11)  = BYTE3(a1);
    *((void *)&v11 + 1)  = 0;
    unsigned int v7 = 3;
  }
  swift_retain();
  AppleDevice.send(request:data:)(v7);
  return swift_release();
}

uint64_t DeviceDriver<>.update(ipv4Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  long long v11 = (char *)&v19 - v10;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  uint64_t v14 = v13;
  uint64_t KeyPath = swift_getKeyPath();
  char v23 = &v26;
  uint64_t v24 = KeyPath;
  uint64_t v25 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v22, v12, v14);
  swift_bridgeObjectRelease();
  swift_release();
  if ((a1 & 0x100000000) != 0)
  {
    uint64_t v16 = 4;
  }
  else
  {
    LODWORD(v27)  = 528;
    WORD2(v27)  = a1;
    BYTE6(v27)  = BYTE2(a1);
    BYTE7(v27)  = BYTE3(a1);
    *((void *)&v27 + 1)  = 0;
    uint64_t v16 = 3;
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  uint64_t v17 = AssociatedTypeWitness;
  (*(void (**)(uint64_t, long long *, uint64_t))(v20 + 16))(v16, &v26, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v17);
}

uint64_t DeviceDriver<>.ipv6Addresses.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  uint64_t v5 = static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10005B300@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10006EC68(a1 + 24, (uint64_t)v5, &qword_10047DC20);
  uint64_t result = sub_10006EC68((uint64_t)v5, (uint64_t)&v6, &qword_10047DC20);
  if (v6)
  {
    uint64_t v4 = *(void *)(v6 + 16);
    *a2  = *(void *)(v6 + 8);
    a2[1]  = v4;
    a2[2]  = 0;
    a2[3]  = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005B378(unint64_t a1, unsigned int a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v15 = a1 >> 24;
  unint64_t v16 = HIDWORD(a1);
  unint64_t v17 = a1 >> 40;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  *(void *)&v21[12]  = &v24;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v23 = 16;
  swift_bridgeObjectRetain();
  sub_10000E350(a3, (uint64_t)v20, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  WORD1(v19)  = WORD1(v25);
  BYTE5(v19)  = BYTE5(v25);
  *(void *)((char *)&v19 + 7)  = *(void *)((char *)&v25 + 7);
  HIBYTE(v19)  = HIBYTE(v25);
  LOWORD(v19)  = 4628;
  BYTE4(v19)  = 6;
  BYTE6(v19)  = 6;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v10 + 32)  = v5;
  *(unsigned char *)(v10 + 33)  = v6;
  *(unsigned char *)(v10 + 34)  = v7;
  *(unsigned char *)(v10 + 35)  = v15;
  *(unsigned char *)(v10 + 36)  = v16;
  *(unsigned char *)(v10 + 37)  = v17;
  uint64_t v11 = sub_1001265EC(v10);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  sub_10005A9A4(v11, v13, (unsigned char *)&v19 + 8, (uint64_t)v21);
  sub_10000C970(v11, v13);
  long long v25 = v19;
  swift_retain();
  AppleDevice.send(request:data:)(a2);
  return swift_release();
}

uint64_t sub_10005B5AC(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a6;
  unsigned int v34 = a2;
  char v10 = a1;
  unint64_t v26 = a1 >> 8;
  unint64_t v27 = a1 >> 16;
  unint64_t v28 = a1 >> 24;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = a1 >> 40;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  uint64_t v32 = v12;
  __chkstk_darwin();
  uint64_t v14 = (char *)&v25 - v13;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  uint64_t v17 = v16;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v37[12]  = &v40;
  uint64_t v38 = KeyPath;
  uint64_t v39 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v36, v15, v17);
  uint64_t v25 = v6;
  swift_bridgeObjectRelease();
  swift_release();
  WORD1(v35)  = WORD1(v41);
  BYTE5(v35)  = BYTE5(v41);
  *(void *)((char *)&v35 + 7)  = *(void *)((char *)&v41 + 7);
  HIBYTE(v35)  = HIBYTE(v41);
  LOWORD(v35)  = 4628;
  BYTE4(v35)  = 6;
  BYTE6(v35)  = 6;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v19 + 32)  = v10;
  *(unsigned char *)(v19 + 33)  = v26;
  *(unsigned char *)(v19 + 34)  = v27;
  *(unsigned char *)(v19 + 35)  = v28;
  *(unsigned char *)(v19 + 36)  = v29;
  *(unsigned char *)(v19 + 37)  = v30;
  uint64_t v20 = sub_1001265EC(v19);
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = v31;
  sub_10005A9A4(v20, v22, (unsigned char *)&v35 + 8, (uint64_t)v37);
  sub_10000C970(v20, v22);
  long long v41 = v35;
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  (*(void (**)(void, long long *, uint64_t))(v33 + 16))(v34, &v40, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v23);
}

uint64_t DeviceDriver<>.addMulticastAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10005B934(a1, a2, a3, a4, a5, 7u);
}

uint64_t DeviceDriver<>.removeMulticastAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10005B934(a1, a2, a3, a4, a5, 8u);
}

uint64_t sub_10005B934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return sub_10005B5AC(a1 & 0xFFFFFFFFFFFFLL, a6, a2, a3, a4, a5);
}

uint64_t DeviceDriver<>.postPeerPresence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10005B9C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u);
}

uint64_t DeviceDriver<>.postPeerAbsence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10005B9C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u);
}

uint64_t sub_10005B9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  unsigned int v24 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a6, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a9 + 24))(a1 & 0xFFFFFFFFFFFFLL, v22, v23, v25, v26, v18, v19, v24, AssociatedTypeWitness, a9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t DeviceDriver<>.clearAllPeerPresence()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  (*(void (**)(uint64_t))(a4 + 32))(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BCCC(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Socket();
  swift_initStackObject();
  if (!Socket.init(domain:type:proto:)(30, 2, 0))
  {
    uint64_t v13 = errno.getter();
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v14 = v13;
    *(void *)(v14 + 8)  = 0;
    *(unsigned char *)(v14 + 16)  = 0;
    return swift_willThrow();
  }
  uint64_t v23 = a3;
  unsigned int v24 = a1;
  memset(v33, 0, 288);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  swift_getKeyPath();
  uint64_t v19 = (long long *)v33;
  uint64_t v20 = __chkstk_darwin();
  uint64_t v21 = 16;
  swift_bridgeObjectRetain();
  uint64_t v22 = v8;
  sub_10000E350(a2, (uint64_t)v18, v8, v7);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1003ABCD8(6u);
  unsigned int v9 = ioctl(_:_:_:)();
  if (v9 == -1) {
    goto LABEL_9;
  }
  if (v9)
  {
LABEL_10:
    uint64_t v16 = v9;
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v17 = v16;
    *(void *)(v17 + 8)  = 0;
    *(unsigned char *)(v17 + 16)  = 0;
    swift_willThrow();
    return swift_release();
  }
  if (!v24[2]) {
    return swift_release();
  }
  uint64_t v10 = v24[4];
  uint64_t v11 = v24[5];
  long long v32 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  swift_getKeyPath();
  uint64_t v12 = __chkstk_darwin();
  uint64_t v19 = &v25;
  uint64_t v20 = v12;
  uint64_t v21 = 16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000E350(v23, (uint64_t)v18, v22, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  LOWORD(v26)  = 7708;
  *((void *)&v26 + 1)  = v10;
  *(void *)&long long v27 = v11;
  sub_1003ABCD8(5u);
  unsigned int v9 = ioctl(_:_:_:)();
  if (v9 == -1)
  {
LABEL_9:
    unsigned int v9 = errno.getter();
    goto LABEL_10;
  }
  if (v9) {
    goto LABEL_10;
  }
  return swift_release();
}

uint64_t DeviceDriver<>.update(ipv6Addresses:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Socket();
  swift_initStackObject();
  uint64_t v8 = Socket.init(domain:type:proto:)(30, 2, 0);
  if (!v8)
  {
    uint64_t v20 = errno.getter();
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v21 = v20;
    *(void *)(v21 + 8)  = 0;
    *(unsigned char *)(v21 + 16)  = 0;
    return swift_willThrow();
  }
  unsigned int v9 = v8;
  uint64_t v33 = a1;
  memset(v43, 0, 288);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v31 = a2;
  uint64_t v32 = v4;
  long long v30 = v10;
  uint64_t v11 = v10(a2, a4);
  uint64_t v13 = v12;
  swift_getKeyPath();
  unsigned int v34 = v9;
  long long v26 = (long long *)v43;
  uint64_t v27 = __chkstk_darwin();
  uint64_t v28 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v25, v11, v13);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1003ABCD8(6u);
  unsigned int v14 = ioctl(_:_:_:)();
  if (v14 == -1) {
    goto LABEL_9;
  }
  if (v14)
  {
LABEL_10:
    uint64_t v23 = v14;
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8)  = 0;
    *(unsigned char *)(v24 + 16)  = 0;
    swift_willThrow();
    return swift_release();
  }
  if (!v33[2]) {
    return swift_release();
  }
  uint64_t v15 = v33[5];
  uint64_t v29 = v33[4];
  long long v42 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  swift_bridgeObjectRetain();
  uint64_t v16 = v30(v31, a4);
  uint64_t v18 = v17;
  swift_getKeyPath();
  uint64_t v19 = __chkstk_darwin();
  long long v26 = &v35;
  uint64_t v27 = v19;
  uint64_t v28 = 16;
  sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v25, v16, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  LOWORD(v36)  = 7708;
  *((void *)&v36 + 1)  = v29;
  *(void *)&long long v37 = v15;
  sub_1003ABCD8(5u);
  unsigned int v14 = ioctl(_:_:_:)();
  if (v14 == -1)
  {
LABEL_9:
    unsigned int v14 = errno.getter();
    goto LABEL_10;
  }
  if (v14) {
    goto LABEL_10;
  }
  return swift_release();
}

BOOL sub_10005C32C()
{
  uint64_t v9 = 0;
  v10[0]  = 0;
  v10[1]  = 0;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(0x13uLL, (uint64_t)&v9, (uint64_t)&v11, 0, v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (HIDWORD(v9) >= 4) {
    uint64_t v4 = 4;
  }
  else {
    uint64_t v4 = HIDWORD(v9);
  }
  if (!v4) {
    return 0;
  }
  if (LODWORD(v10[0])) {
    return 1;
  }
  if (v4 == 1) {
    return 0;
  }
  uint64_t v5 = v4 - 2;
  uint64_t v6 = (int *)v10 + 1;
  do
  {
    int v7 = *v6++;
    BOOL result = v7 != 0;
    if (v7) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v5 == 0;
    }
    --v5;
  }
  while (!v8);
  return result;
}

BOOL DeviceDriver<>.powerOn.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  v13[0]  = 0;
  v13[1]  = 0;
  sub_10005CCDC((uint64_t)&v12, (uint64_t)&v14, v4, a1, a2, a3, a4, &v11, 19);
  if (HIDWORD(v12) >= 4) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = HIDWORD(v12);
  }
  if (!v6) {
    return 0;
  }
  if (LODWORD(v13[0])) {
    return 1;
  }
  if (v6 == 1) {
    return 0;
  }
  uint64_t v7 = v6 - 2;
  BOOL v8 = (int *)v13 + 1;
  do
  {
    int v9 = *v8++;
    BOOL result = v9 != 0;
    if (v9) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v7 == 0;
    }
    --v7;
  }
  while (!v10);
  return result;
}

uint64_t sub_10005C544()
{
  __int16 v11 = 0;
  int v10 = 0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(9uLL, (uint64_t)&v10, (uint64_t)&v12, 0, v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  __chkstk_darwin();
  uint64_t v4 = sub_10005C90C(&v5, (uint64_t)&v6, v0);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(4uLL, (uint64_t)&v7, (uint64_t)&v9, 0, v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  if ((sub_1000C7CBC(v8, HIDWORD(v8)) & 0xFF00000000) == 0x300000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t DeviceDriver<>.wifiNetwork.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  __int16 v18 = 0;
  int v17 = 0;
  sub_10005CCDC((uint64_t)&v17, (uint64_t)&v19, v4, a1, a2, a3, a4, &v14, v12[2]);
  __chkstk_darwin();
  sub_10005CA5C(v12, (uint64_t)&v13, a1, a2, a3, a4, &v14);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_10005CCDC((uint64_t)&v14, (uint64_t)&v16, v5, a1, a2, a3, a4, &v13, 4);
  if ((sub_1000C7CBC(v15, HIDWORD(v15)) & 0xFF00000000) == 0x300000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t sub_10005C90C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for String.Encoding();
  uint64_t result = __chkstk_darwin();
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v9 = a2 - (void)a1;
  bzero(a1, a2 - (void)a1);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(1uLL, (uint64_t)a1, a2, 0, v10, v11);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v4) {
    return result;
  }
  uint64_t v12 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v12 < 0 || v12 >= v9) {
    goto LABEL_10;
  }
  UnsafeMutableRawBufferPointer.subscript.setter();
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(cString:encoding:)();
  if (!v13) {
    return 0;
  }
  return result;
}

uint64_t sub_10005CA5C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v27 = a7;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  long long v26 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v16 = (char *)&v26 - v15;
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v17 = a2 - (void)a1;
  bzero(a1, a2 - (void)a1);
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v28 + 16) + 40))(a3);
  uint64_t v19 = v30;
  (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(v29 + 8) + 24))(1, a1, a2, 0, v18, v20, AssociatedTypeWitness);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = v17 - 1;
  if (__OFSUB__(v17, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (v21 < 0 || v21 >= v17) {
    goto LABEL_15;
  }
  UnsafeMutableRawBufferPointer.subscript.setter();
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(cString:encoding:)();
  if (v22) {
    uint64_t v23 = result;
  }
  else {
    uint64_t v23 = 0;
  }
  unint64_t v24 = 0xE000000000000000;
  if (v22) {
    unint64_t v24 = v22;
  }
  long long v25 = v27;
  *uint64_t v27 = v23;
  v25[1]  = v24;
  return result;
}

uint64_t sub_10005CCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  unint64_t v22 = a8;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v21 - v15;
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a6 + 16) + 40))(a4);
  uint64_t v18 = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 8) + 24))(a9, v23, v24, 0, v17, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18) {
    void *v22 = v18;
  }
  return result;
}

uint64_t DeviceDriver<>.disassociate(with:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005F258(a1, a2, a3, a4, (uint64_t)&unk_100456760, (uint64_t)sub_10006A0B0, (uint64_t)&unk_100456778);
}

uint64_t DeviceDriver<>.disableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005D408(a1, a2, a3, (uint64_t)sub_10006A0D4, (uint64_t)&unk_1004567A0);
}

void sub_10005CEEC(uint64_t a1)
{
  if (!*(void *)(a1 + 104))
  {
    id v2 = [self activityWithType:6 reason:0];
    uint64_t v3 = *(void **)(a1 + 48);
    id v14 = 0;
    unsigned int v4 = [v3 beginActivity:v2 error:&v14];
    id v5 = v14;
    if (v4)
    {
      uint64_t v6 = *(void **)(a1 + 104);
      *(void *)(a1 + 104)  = v2;
      id v7 = v5;
    }
    else
    {
      id v8 = v14;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 138412290;
        swift_errorRetain();
        uint64_t v13 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v14 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v12 = v13;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to disable auto join: %@", v11, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
}

uint64_t sub_10005D138(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin();
  os_log_type_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void **)(v11 + 56);
  aBlock[4]  = a1;
  aBlock[5]  = v11;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain_n();
  id v14 = v12;
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  swift_release();

  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  return swift_release();
}

uint64_t DeviceDriver<>.reenableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005D408(a1, a2, a3, (uint64_t)sub_10006A0DC, (uint64_t)&unk_1004567C8);
}

uint64_t sub_10005D408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void aBlock[6];
  uint64_t v25;

  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  unint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v10 - 8);
  uint64_t v21 = v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  v13(&v25, a1, a2);
  id v14 = *(id *)(v25 + 56);
  swift_release();
  v13(aBlock, a1, a2);
  aBlock[4]  = v18;
  aBlock[5]  = aBlock[0];
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = v19;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  swift_release();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
  return swift_release();
}

void sub_10005D700(uint64_t a1)
{
  if (*(void *)(a1 + 104))
  {
    [*(id *)(a1 + 48) endActivity:];
    uint64_t v2 = *(void **)(a1 + 104);
    *(void *)(a1 + 104)  = 0;
  }
}

uint64_t sub_10005D75C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  void v27[2] = a3;
  int v32 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2 + 16)) {
    return result;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v14 = result & ~v13;
  uint64_t v15 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_7:
    if (*(void *)(a2 + 16)) {
      goto LABEL_13;
    }
    return result;
  }
  uint64_t v16 = ~v13;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(a2 + 48) + v14))
    {
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      default:
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          unint64_t v14 = (v14 + 1) & v16;
          if (((*(void *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
            goto LABEL_7;
          }
          continue;
        }
LABEL_10:
        if (qword_10047BF08 != -1) {
          swift_once();
        }
        uint64_t result = (uint64_t)[(id)qword_10047D0B0 updateLinkRecoveryDisabled:v32 & 1];
        if (*(void *)(a2 + 16))
        {
LABEL_13:
          Hasher.init(_seed:)();
          String.hash(into:)();
          uint64_t result = Hasher._finalize()();
          uint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v19 = result & ~v18;
          if ((*(void *)(v15 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
          {
            uint64_t v20 = ~v18;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(a2 + 48) + v19))
              {
                case 1:
                case 2:
                case 3:
                case 4:
                  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t result = swift_bridgeObjectRelease();
                  if (v21) {
                    goto LABEL_20;
                  }
                  unint64_t v19 = (v19 + 1) & v20;
                  if ((*(void *)(v15 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19)) {
                    continue;
                  }
                  break;
                default:
                  swift_bridgeObjectRelease();
LABEL_20:
                  uint64_t v22 = *(void *)(v27[1] + 40);
                  uint64_t v23 = *(void **)(v22 + 56);
                  uint64_t v24 = swift_allocObject();
                  *(unsigned char *)(v24 + 16)  = v32 & 1;
                  *(void *)(v24 + 24)  = v22;
                  aBlock[4]  = v28;
                  aBlock[5]  = v24;
                  aBlock[0]  = _NSConcreteStackBlock;
                  aBlock[1]  = 1107296256;
                  aBlock[2]  = sub_10000E5D0;
                  aBlock[3]  = v29;
                  uint64_t v25 = _Block_copy(aBlock);
                  swift_retain_n();
                  id v26 = v23;
                  static DispatchQoS.unspecified.getter();
                  uint64_t v33 = _swiftEmptyArrayStorage;
                  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_100010BCC((uint64_t *)&unk_10047D0F0);
                  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  _Block_release(v25);
                  swift_release();

                  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
                  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
                  uint64_t result = swift_release();
                  break;
              }
              break;
            }
          }
        }
        return result;
    }
  }
}

uint64_t DeviceDriver<>.updateLinkRecoveryDisabled(_:interfaces:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  void aBlock[9];

  uint64_t v30 = a4;
  uint64_t v29 = a3;
  uint64_t v33 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  int v32 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2 + 16)) {
    return result;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v13 = result & ~v12;
  uint64_t v14 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_7:
    if (*(void *)(a2 + 16)) {
      goto LABEL_13;
    }
    return result;
  }
  uint64_t v15 = ~v12;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(a2 + 48) + v13))
    {
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      default:
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          unint64_t v13 = (v13 + 1) & v15;
          if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_7;
          }
          continue;
        }
LABEL_10:
        if (qword_10047BF08 != -1) {
          swift_once();
        }
        uint64_t result = (uint64_t)[(id)qword_10047D0B0 updateLinkRecoveryDisabled:v33 & 1];
        if (*(void *)(a2 + 16))
        {
LABEL_13:
          Hasher.init(_seed:)();
          String.hash(into:)();
          uint64_t result = Hasher._finalize()();
          uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v18 = result & ~v17;
          if ((*(void *)(v14 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
          {
            uint64_t v19 = ~v17;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(a2 + 48) + v18))
              {
                case 1:
                case 2:
                case 3:
                case 4:
                  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t result = swift_bridgeObjectRelease();
                  if (v20) {
                    goto LABEL_20;
                  }
                  unint64_t v18 = (v18 + 1) & v19;
                  if ((*(void *)(v14 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18)) {
                    continue;
                  }
                  break;
                default:
                  swift_bridgeObjectRelease();
LABEL_20:
                  uint64_t v21 = v30;
                  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 56);
                  uint64_t v23 = v29;
                  v22(&v35, v29, v30);
                  uint64_t v28 = *(id *)(v35 + 56);
                  swift_release();
                  v22(aBlock, v23, v21);
                  uint64_t v24 = aBlock[0];
                  uint64_t v25 = swift_allocObject();
                  *(unsigned char *)(v25 + 16)  = v33 & 1;
                  *(void *)(v25 + 24)  = v24;
                  aBlock[4]  = sub_10006A0E4;
                  aBlock[5]  = v25;
                  aBlock[0]  = _NSConcreteStackBlock;
                  aBlock[1]  = 1107296256;
                  aBlock[2]  = sub_10000E5D0;
                  aBlock[3]  = &unk_100456818;
                  id v26 = _Block_copy(aBlock);
                  swift_retain();
                  static DispatchQoS.unspecified.getter();
                  unsigned int v34 = _swiftEmptyArrayStorage;
                  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_100010BCC((uint64_t *)&unk_10047D0F0);
                  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  uint64_t v27 = v28;
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  _Block_release(v26);
                  swift_release();

                  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
                  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v8);
                  uint64_t result = swift_release();
                  break;
              }
              break;
            }
          }
        }
        return result;
    }
  }
}

void sub_10005E3E8(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 136);
  if (a1)
  {
    if (!v3)
    {
      id v4 = [self activityWithType:12 reason:0];
      uint64_t v5 = *(void **)(a2 + 48);
      id v17 = 0;
      unsigned int v6 = [v5 beginActivity:v4 error:&v17];
      id v7 = v17;
      if (v6)
      {
        uint64_t v8 = *(void **)(a2 + 136);
        *(void *)(a2 + 136)  = v4;
        id v9 = v7;
      }
      else
      {
        id v11 = v17;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 138412290;
          swift_errorRetain();
          char v16 = (void *)_swift_stdlib_bridgeErrorToNSError();
          id v17 = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v15 = v16;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to update link recovery disabled: %@", v14, 0xCu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }
  }
  else if (v3)
  {
    [*(id *)(a2 + 48) endActivity:];
    uint64_t v10 = *(void **)(a2 + 136);
    *(void *)(a2 + 136)  = 0;
  }
}

uint64_t sub_10005E69C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin();
  os_log_type_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v4 + 40);
  uint64_t v15 = *(void **)(v14 + 56);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16)  = a1;
  *(void *)(v16 + 24)  = v14;
  aBlock[4]  = a3;
  aBlock[5]  = v16;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = a4;
  id v17 = _Block_copy(aBlock);
  swift_retain_n();
  id v18 = v15;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  swift_release();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t DeviceDriver<>.update(isAirPlayingOverInfrastructure:)(int a1, uint64_t a2, uint64_t a3)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned char v17[4];
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void aBlock[6];
  uint64_t v24;

  id v18 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v20 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v11(&v24, a2, a3);
  uint64_t v19 = *(id *)(v24 + 56);
  swift_release();
  v11(aBlock, a2, a3);
  uint64_t v12 = aBlock[0];
  os_log_type_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16)  = v18;
  *(void *)(v13 + 24)  = v12;
  aBlock[4]  = sub_10006A0F0;
  aBlock[5]  = v13;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100456868;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v15 = v19;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  swift_release();

  (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v20);
  return swift_release();
}

void sub_10005EC98(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  if (a1)
  {
    if (!v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [self activityWithType:8 reason:v4];

      uint64_t v6 = *(void **)(a2 + 48);
      id v18 = 0;
      unsigned int v7 = [v6 beginActivity:v5 error:&v18];
      id v8 = v18;
      if (v7)
      {
        uint64_t v9 = *(void **)(a2 + 112);
        *(void *)(a2 + 112)  = v5;
        id v10 = v8;
      }
      else
      {
        id v12 = v18;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        os_log_type_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v16 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 138412290;
          swift_errorRetain();
          id v17 = (void *)_swift_stdlib_bridgeErrorToNSError();
          id v18 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v16 = v17;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to begin AirPlay over Infrastructure CWFActivity: %@", v15, 0xCu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }
  }
  else if (v3)
  {
    [*(id *)(a2 + 48) endActivity:];
    uint64_t v11 = *(void **)(a2 + 112);
    *(void *)(a2 + 112)  = 0;
  }
}

uint64_t sub_10005EF60(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin();
  os_log_type_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v4 + 40);
  uint64_t v15 = *(void **)(v14 + 56);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16)  = v14;
  *(unsigned char *)(v16 + 24)  = a1;
  aBlock[4]  = a3;
  aBlock[5]  = v16;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = a4;
  id v17 = _Block_copy(aBlock);
  swift_retain_n();
  id v18 = v15;
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  swift_release();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t DeviceDriver<>.updateSoftAPBand(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005F258(a1, a2, a3, a4, (uint64_t)&unk_1004568A0, (uint64_t)sub_10006A0FC, (uint64_t)&unk_1004568B8);
}

uint64_t sub_10005F258(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void v21[2];
  int v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void aBlock[6];
  uint64_t v30;

  uint64_t v25 = a7;
  uint64_t v23 = a6;
  v21[1]  = a5;
  uint64_t v22 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v15(&v30, a2, a3);
  uint64_t v24 = *(id *)(v30 + 56);
  swift_release();
  v15(aBlock, a2, a3);
  uint64_t v16 = aBlock[0];
  id v17 = swift_allocObject();
  *(void *)(v17 + 16)  = v16;
  *(unsigned char *)(v17 + 24)  = v22;
  aBlock[4]  = v23;
  aBlock[5]  = v17;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = v25;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v19 = v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  swift_release();

  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  return swift_release();
}

uint64_t sub_10005F57C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = *(void *)(v4 + 128);
  if (v5)
  {
    swift_retain();
    uint64_t v6 = v5;
  }
  else
  {
    type metadata accessor for AppleDevice.GatewayMonitor(0);
    swift_allocObject();
    swift_retain();
    uint64_t v10 = swift_retain();
    uint64_t v6 = sub_10005633C(v10, a1, a2, a3);
  }
  *(void *)(v4 + 128)  = v6;
  swift_retain();
  swift_release();

  return swift_release();
}

uint64_t DeviceDriver<>.startGatewayMonitor()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v8)(uint64_t *__return_ptr);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v4 = v3;
  uint64_t v8 = *(void (**)(uint64_t *__return_ptr))(a2 + 56);
  v8(&v14);
  uint64_t v9 = v14;
  uint64_t v12 = v3;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v13, a1, a2);
  uint64_t v10 = *(void *)(v13 + 128);
  swift_retain();
  swift_release();
  if (!v10)
  {
    type metadata accessor for AppleDevice.GatewayMonitor(0);
    uint64_t v12 = v4;
    swift_allocObject();
    uint64_t v10 = sub_10006B388((uint64_t)&v12, a1, a3);
  }
  *(void *)(v9 + 128)  = v10;
  swift_release();
  return swift_release();
}

uint64_t DeviceDriver<>.stopGatewayMonitor()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v3);
  *(void *)(v3 + 128)  = 0;
  swift_release();
  return swift_release();
}

uint64_t DeviceDriver<>.resolveIPForPeer(macAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v10, a2, a3);
  if (*(void *)(v10 + 128))
  {
    swift_retain();
    swift_release();
    uint64_t v9 = v4;
    sub_1000593E8(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)&v9, a2, a4);
  }
  return swift_release();
}

uint64_t DeviceDriver<>.resetGatewayIPAddress()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v3);
  if (*(void *)(v3 + 128))
  {
    swift_retain();
    swift_release();
    sub_10005922C();
  }
  return swift_release();
}

uint64_t sub_10005F8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 40);
  if (!*(void *)(v5 + 120))
  {
    swift_retain();
    uint64_t result = nw_path_create_default_evaluator();
    if (!result) {
      goto LABEL_14;
    }
    uint64_t v10 = result;
    if (qword_10047C178 != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16)  = a1;
    *(void *)(v12 + 24)  = a2;
    type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v13 = swift_allocObject();
    id v14 = v11;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v10, v14, a4, v12);
    *(void *)(v5 + 120)  = v13;
    swift_release();
    swift_release();
    if (!*(void *)(v5 + 120)) {
      return 0;
    }
  }
  swift_retain();
  uint64_t result = nw_path_evaluator_copy_path();
  if (result)
  {
    uint64_t v15 = result;
    swift_release();
    if (nw_path_get_status(v15) == nw_path_status_satisfied)
    {
      uint64_t v16 = nw_path_copy_interface();
      if (v16)
      {
        nw_interface_get_name(v16);
        uint64_t v17 = String.init(cString:)();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return v17;
      }
    }
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t DeviceDriver<>.monitorSystemDefaultPath(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v8(&v21, a3, a4);
  uint64_t v9 = *(void *)(v21 + 120);
  swift_release();
  if (!v9)
  {
    v8(&v21, a3, a4);
    uint64_t v10 = v21;
    uint64_t result = nw_path_create_default_evaluator();
    if (!result) {
      goto LABEL_15;
    }
    uint64_t v20 = result;
    uint64_t v12 = a2;
    if (qword_10047C178 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)static OS_dispatch_queue.p2p;
    id v14 = swift_allocObject();
    *(void *)(v14 + 16)  = a1;
    *(void *)(v14 + 24)  = v12;
    type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v13;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v20, v16, (uint64_t)sub_10006B858, v14);
    *(void *)(v10 + 120)  = v15;
    swift_release();
    swift_release();
  }
  v8(&v21, a3, a4);
  uint64_t v17 = *(void *)(v21 + 120);
  if (!v17)
  {
    swift_release();
    return v17;
  }
  swift_retain();
  swift_release();
  uint64_t result = nw_path_evaluator_copy_path();
  if (result)
  {
    id v18 = result;
    swift_release();
    if (nw_path_get_status(v18) == nw_path_status_satisfied && (uint64_t v19 = nw_path_copy_interface()) != 0)
    {
      nw_interface_get_name(v19);
      uint64_t v17 = String.init(cString:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
    return v17;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10005FC94(NSObject *a1, void (*a2)(void))
{
  if (nw_path_get_status(a1) != nw_path_status_satisfied) {
    return ((uint64_t (*)(void, void))a2)(0, 0);
  }
  uint64_t v3 = nw_path_copy_interface();
  if (!v3) {
    return ((uint64_t (*)(void, void))a2)(0, 0);
  }
  nw_interface_get_name(v3);
  uint64_t v4 = String.init(cString:)();
  a2(v4);
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t DeviceDriver<>.stopMonitoringSystemDefaultPath()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v3);
  *(void *)(v3 + 120)  = 0;
  swift_release();
  return swift_release();
}

uint64_t sub_10005FD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = v11[5];
  swift_beginAccess();
  sub_1000136F4(v17 + 72, (uint64_t)v44, &qword_10047D0D0);
  uint64_t v18 = v45;
  sub_1000380B4((uint64_t)v44, &qword_10047D0D0);
  if (v18)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_1003B2F60;
    *(unsigned char *)(v19 + 16)  = 0;
    a6();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v38 = a1;
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    uint64_t v21 = v11[2];
    uint64_t v22 = v11[3];
    uint64_t v23 = *(void *)(v17 + 24);
    uint64_t v24 = *(os_unfair_lock_s **)(v23 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v24);
    swift_beginAccess();
    uint64_t v25 = *(void *)(v17 + 32);
    if (*(void *)(v25 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_10000DDE0(v21, v22);
      uint64_t v27 = a7;
      uint64_t v28 = v17 + 72;
      uint64_t v29 = a6;
      if (v30)
      {
        uint64_t v31 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
        swift_endAccess();
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v32 = *(void *)(v31
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        uint64_t v33 = *(void *)(v31
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    else
    {
      swift_endAccess();
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v27 = a7;
      uint64_t v28 = v17 + 72;
      uint64_t v29 = a6;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 16));
    swift_release();
    swift_bridgeObjectRelease();
    if (v33) {
      uint64_t v34 = v32;
    }
    else {
      uint64_t v34 = 0;
    }
    if (!v33) {
      uint64_t v33 = 0xE000000000000000;
    }
    long long v35 = (void *)swift_allocObject();
    v35[2]  = v29;
    v35[3]  = v27;
    v35[4]  = a8;
    v35[5]  = a9;
    uint64_t v36 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100051880(v38, a2, v39, v40, a5 & 1, v34, v33, a11, (uint64_t)v35);
    uint64_t v45 = v36;
    v44[0]  = v37;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    sub_10006D1A4((uint64_t)v44, v28, &qword_10047D0D0);
    swift_endAccess();
    swift_release();
    sub_100051F78();
    return swift_release();
  }
}

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  void (*v41)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void v48[3];
  uint64_t v49;
  void v50[3];
  uint64_t v51;

  uint64_t v13 = v12;
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v16(v48, a10, a11);
  uint64_t v17 = v48[0] + 72;
  swift_beginAccess();
  sub_1000136F4(v17, (uint64_t)v50, &qword_10047D0D0);
  swift_release();
  uint64_t v18 = v51;
  sub_1000380B4((uint64_t)v50, &qword_10047D0D0);
  if (v18)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_1003B2F60;
    *(unsigned char *)(v19 + 16)  = 0;
    a6();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v39 = a6;
    uint64_t v40 = a7;
    v50[0]  = v13;
    long long v41 = v16;
    v16(v48, a10, a11);
    uint64_t v21 = v48[0];
    v50[0]  = v13;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(a12 + 16) + 40))(a10);
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v21 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 16));
    swift_beginAccess();
    uint64_t v26 = *(void *)(v21 + 32);
    if (*(void *)(v26 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_10000DDE0(v22, v24);
      uint64_t v28 = v39;
      if (v29)
      {
        char v30 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
        swift_endAccess();
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v31 = *(void *)(v30
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        uint64_t v32 = *(void *)(v30
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    else
    {
      swift_endAccess();
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v28 = v39;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
    swift_release();
    swift_bridgeObjectRelease();
    if (v32) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v32) {
      uint64_t v34 = v32;
    }
    else {
      uint64_t v34 = 0xE000000000000000;
    }
    long long v35 = (void *)swift_allocObject();
    v35[2]  = v28;
    v35[3]  = v40;
    v35[4]  = a8;
    v35[5]  = a9;
    uint64_t v36 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100051880(a1, a2, a3, a4, a5 & 1, v33, v34, (uint64_t)sub_10006B888, (uint64_t)v35);
    v50[0]  = v13;
    v41(&v49, a10, a11);
    uint64_t v51 = v36;
    v50[0]  = v37;
    uint64_t v38 = v49 + 72;
    swift_beginAccess();
    swift_retain();
    sub_10006D1A4((uint64_t)v50, v38, &qword_10047D0D0);
    swift_endAccess();
    swift_release();
    sub_100051F78();
    return swift_release();
  }
}

void sub_100060450(uint64_t a1, __int16 a2, char a3, void (*a4)(void), uint64_t a5, void (*a6)(void))
{
  if (a3)
  {
    if (a3 == 1)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_1003B2EF0;
      *(unsigned char *)(v7 + 16)  = 0;
      a4();
      swift_errorRelease();
    }
  }
  else
  {
    a6(a2 & 0x101);
  }
}

uint64_t sub_1000604FC(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40) + 72;
  swift_beginAccess();
  sub_1000136F4(v3, (uint64_t)v6, &qword_10047D0D0);
  if (!v7) {
    return sub_1000380B4((uint64_t)v6, &qword_10047D0D0);
  }
  type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (*(unsigned char *)(v5
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release();
    if ((a1 & 0x8000000000000000) == 0 && !HIDWORD(a1))
    {
      _NETRBClientSetHostCount();
      return swift_release();
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t DeviceDriver<>.updateInternetSharingRequesterCount(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v7, a2, a3);
  uint64_t v4 = v7 + 72;
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v8, &qword_10047D0D0);
  swift_release();
  if (!v9) {
    return sub_1000380B4((uint64_t)v8, &qword_10047D0D0);
  }
  type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (*(unsigned char *)(v6
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release();
    if ((a1 & 0x8000000000000000) == 0 && !HIDWORD(a1))
    {
      _NETRBClientSetHostCount();
      return swift_release();
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10006081C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess();
  sub_1000136F4(v1 + 72, (uint64_t)&v3, &qword_10047D0D0);
  if (*((void *)&v4 + 1))
  {
    type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    if (swift_dynamicCast())
    {
      sub_100051D5C();
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)&v3, &qword_10047D0D0);
  }
  long long v3 = 0u;
  long long v4 = 0u;
  swift_beginAccess();
  swift_retain();
  sub_10006D1A4((uint64_t)&v3, v1 + 72, &qword_10047D0D0);
  swift_endAccess();
  return swift_release();
}

uint64_t DeviceDriver<>.stopSharingInternet()(uint64_t a1, uint64_t a2)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void v9[3];
  uint64_t v10;
  long long v11;
  long long v12;

  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(void *__return_ptr))v5)(v9);
  uint64_t v6 = v9[0] + 72;
  swift_beginAccess();
  sub_1000136F4(v6, (uint64_t)&v11, &qword_10047D0D0);
  swift_release();
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    if (swift_dynamicCast())
    {
      sub_100051D5C();
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)&v11, &qword_10047D0D0);
  }
  *(void *)&uint64_t v11 = v2;
  v5(&v10, a1, a2);
  uint64_t v7 = v10 + 72;
  uint64_t v11 = 0u;
  uint64_t v12 = 0u;
  swift_beginAccess();
  sub_10006D1A4((uint64_t)&v11, v7, &qword_10047D0D0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100060D4C(uint64_t result, uint64_t a2, char a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    if (a3 == 1)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_1003B2EF0;
      *(unsigned char *)(v7 + 16)  = 0;
      a4();
      return swift_errorRelease();
    }
  }
  else if (result)
  {
    return a6();
  }
  return result;
}

uint64_t sub_100060DF4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_beginAccess();
  sub_1000136F4(v1 + 72, (uint64_t)&v12, &qword_10047D0D0);
  if (*((void *)&v13 + 1))
  {
    type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if (swift_dynamicCast())
    {
      uint64_t v2 = v11
         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(unsigned char *)(v11
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_100054DD4();
        uint64_t v3 = *(void *)(v11
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        long long v4 = *(void **)(v11
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                      + 8);
        swift_bridgeObjectRetain();
        sub_10006A120(v3, v4);
        uint64_t v6 = v5;
        swift_bridgeObjectRelease();
        if (v6) {
          swift_bridgeObjectRelease();
        }
        uint64_t v7 = *(void *)v2;
        uint64_t v8 = *(void *)(v2 + 8);
        *(_OWORD *)uint64_t v2 = xmmword_1003B00B0;
        char v9 = *(unsigned char *)(v2 + 16);
        *(unsigned char *)(v2 + 16)  = 2;
        sub_10006C44C(v7, v8, v9);
        sub_10006C474(v7, v8, v9);
        sub_10005508C(v7, v8, v9);
        sub_10006C474(v7, v8, v9);
      }
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)&v12, &qword_10047D0D0);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  swift_beginAccess();
  swift_retain();
  sub_10006D1A4((uint64_t)&v12, v1 + 72, &qword_10047D0D0);
  swift_endAccess();
  return swift_release();
}

uint64_t DeviceDriver<>.stopRequestingInternet()(uint64_t a1, uint64_t a2)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void v19[3];
  uint64_t v20;
  long long v21;
  long long v22;

  uint64_t v3 = v2;
  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(void *__return_ptr))v6)(v19);
  uint64_t v7 = v19[0] + 72;
  swift_beginAccess();
  sub_1000136F4(v7, (uint64_t)&v21, &qword_10047D0D0);
  swift_release();
  if (*((void *)&v22 + 1))
  {
    type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if (swift_dynamicCast())
    {
      uint64_t v8 = v20;
      char v9 = v20
         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(unsigned char *)(v20
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_100054DD4();
        uint64_t v10 = *(void *)(v8
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        uint64_t v11 = *(void **)(v8
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                       + 8);
        swift_bridgeObjectRetain();
        sub_10006A120(v10, v11);
        long long v13 = v12;
        swift_bridgeObjectRelease();
        if (v13) {
          swift_bridgeObjectRelease();
        }
        uint64_t v15 = *(void *)v9;
        id v14 = *(void *)(v9 + 8);
        *(_OWORD *)char v9 = xmmword_1003B00B0;
        uint64_t v16 = *(unsigned char *)(v9 + 16);
        *(unsigned char *)(v9 + 16)  = 2;
        sub_10006C44C(v15, v14, v16);
        sub_10006C474(v15, v14, v16);
        sub_10005508C(v15, v14, v16);
        sub_10006C474(v15, v14, v16);
      }
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)&v21, &qword_10047D0D0);
  }
  *(void *)&uint64_t v21 = v3;
  v6(&v20, a1, a2);
  uint64_t v17 = v20 + 72;
  uint64_t v21 = 0u;
  uint64_t v22 = 0u;
  swift_beginAccess();
  sub_10006D1A4((uint64_t)&v21, v17, &qword_10047D0D0);
  swift_endAccess();
  return swift_release();
}

void sub_1000611EC()
{
  uint64_t v1 = *(void *)(v0 + 40) + 72;
  swift_beginAccess();
  sub_1000136F4(v1, (uint64_t)v5, &qword_10047D0D0);
  if (v6)
  {
    type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if (swift_dynamicCast())
    {
      if (qword_10047BF08 != -1) {
        swift_once();
      }
      uint64_t v2 = (void *)qword_10047D0B0;
      id v3 = [objc_allocWithZone((Class)WiFiUsageLQMUserSample) init];
      NSString v4 = String._bridgeToObjectiveC()();
      [v2 updateLinkQuality:v3 forInterface:v4 supportsLinkRecommendations:0];
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)v5, &qword_10047D0D0);
  }
}

void DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v6);
  uint64_t v2 = v6 + 72;
  swift_beginAccess();
  sub_1000136F4(v2, (uint64_t)v7, &qword_10047D0D0);
  swift_release();
  if (v8)
  {
    type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if (swift_dynamicCast())
    {
      if (qword_10047BF08 != -1) {
        swift_once();
      }
      id v3 = (void *)qword_10047D0B0;
      id v4 = [objc_allocWithZone((Class)WiFiUsageLQMUserSample) init];
      NSString v5 = String._bridgeToObjectiveC()();
      [v3 updateLinkQuality:v4 forInterface:v5 supportsLinkRecommendations:0];
      swift_release();
    }
  }
  else
  {
    sub_1000380B4((uint64_t)v7, &qword_10047D0D0);
  }
}

uint64_t sub_100061494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v62 = a2;
  sub_10006B904(a1, (uint64_t)v77);
  sub_100010BCC(&qword_10047D1E8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for URL();
  uint64_t v65 = *(void *)(v68 - 8);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  int v61 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = *(void (**)(void))(v9 + 16);
  unint64_t v70 = (char *)&v54 - v12;
  int16x8_t v60 = v11;
  v11();
  swift_retain();
  id v13 = sub_100044DDC();
  swift_release();
  if (!v13)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v32 = xmmword_1003B2F30;
    *(unsigned char *)(v32 + 16)  = 0;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v70, v8);
  }
  sub_10006B904(a1, (uint64_t)&v78);
  int v67 = v79;
  uint64_t v59 = v78;
  if (v82)
  {
    uint64_t v57 = v8;
    id v14 = v81;
    uint64_t v54 = v80;
    unint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    uint64_t v15 = v79;
    uint64_t v16 = v78;
    swift_bridgeObjectRetain();
    uint64_t v56 = v14;
    swift_bridgeObjectRetain();
    uint64_t v17 = v13;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v71 = (void **)0xD000000000000017;
    unint64_t v72 = 0x80000001003D9A50;
    v18._countAndFlagsBits  = v16;
    v18._object  = v15;
    String.append(_:)(v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v20 = [v13 askToLaunchTapToRadarWithMessage:v19];

    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v40 = xmmword_1003B2F70;
      *(unsigned char *)(v40 + 16)  = 0;
      swift_willThrow();

      uint64_t v8 = v57;
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v70, v8);
    }
    id v58 = v17;
    sub_100010BCC(&qword_10047D1F0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_1003B2F80;
    uint64_t v55 = v9;
    *(void *)(inited + 32)  = 0x656C746954;
    *(void *)(inited + 40)  = 0xE500000000000000;
    unint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    unint64_t v71 = (void **)0xD000000000000014;
    unint64_t v72 = 0x80000001003D9A70;
    v22._countAndFlagsBits  = v59;
    v22._object  = v67;
    String.append(_:)(v22);
    unint64_t v23 = v72;
    *(void *)(inited + 48)  = v71;
    *(void *)(inited + 56)  = v23;
    *(void *)(inited + 64)  = 0x676169446F747541;
    *(void *)(inited + 72)  = 0xEF73636974736F6ELL;
    *(void *)(inited + 80)  = 0x656E6F6870;
    *(void *)(inited + 88)  = 0xE500000000000000;
    *(void *)(inited + 96)  = 0x7470697263736544;
    *(void *)(inited + 104)  = 0xEB000000006E6F69;
    uint64_t v24 = v56;
    *(void *)(inited + 112)  = v54;
    *(void *)(inited + 120)  = v24;
    *(void *)(inited + 128)  = 0x6E656E6F706D6F43;
    *(void *)(inited + 136)  = 0xEB00000000444974;
    *(void *)(inited + 144)  = 0x313433373535;
    *(void *)(inited + 152)  = 0xE600000000000000;
    strcpy((char *)(inited + 160), "ComponentName");
    *(_WORD *)(inited + 174)  = -4864;
    *(void *)(inited + 176)  = 0x5032502069466957;
    *(void *)(inited + 184)  = 0xE800000000000000;
    *(void *)(inited + 192)  = 0xD000000000000010;
    *(void *)(inited + 200)  = 0x80000001003D9A90;
    *(void *)(inited + 208)  = 5459817;
    *(void *)(inited + 216)  = 0xE300000000000000;
    strcpy((char *)(inited + 224), "Classification");
    *(unsigned char *)(inited + 239)  = -18;
    *(void *)(inited + 240)  = 0x2073756F69726553;
    *(void *)(inited + 248)  = 0xEB00000000677542;
    *(void *)(inited + 256)  = 0xD000000000000014;
    *(void *)(inited + 264)  = 0x80000001003D9AB0;
    *(void *)(inited + 272)  = 0xD000000000000023;
    *(void *)(inited + 280)  = 0x80000001003D9AD0;
    unint64_t v25 = sub_10001FBB8(inited);
    uint64_t v26 = v69;
    uint64_t v27 = sub_100062960(v25);
    swift_bridgeObjectRelease();
    sub_100062D70(0xD000000000000013, 0x80000001003D9B00, v27);
    uint64_t v69 = v26;
    swift_bridgeObjectRelease();
    String.index(before:)();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    uint64_t v9 = v55;
    swift_bridgeObjectRelease();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v65;
    uint64_t v29 = v68;
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48))(v6, 1, v68);
    uint64_t v8 = v57;
    if (v30 == 1)
    {
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v6, &qword_10047D1E8);
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v31 = xmmword_1003B2F90;
      *(unsigned char *)(v31 + 16)  = 0;
      swift_willThrow();

      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v70, v8);
    }
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v66, v6, v29);
    URL._bridgeToObjectiveC()(v41);
    uint64_t v56 = v42;
    char v43 = v61;
    ((void (*)(char *, char *, uint64_t))v60)(v61, v70, v8);
    uint64_t v44 = v28;
    unint64_t v45 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v46 = v9;
    uint64_t v47 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v47 + v45, v43, v8);
    uint64_t v48 = (void *)(v47 + ((v10 + v45 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v49 = v67;
    *uint64_t v48 = v59;
    v48[1]  = v49;
    uint64_t v75 = v63;
    uint64_t v76 = v47;
    unint64_t v71 = _NSConcreteStackBlock;
    unint64_t v72 = 1107296256;
    uint64_t v73 = sub_1000633A0;
    uint64_t v74 = v64;
    uint64_t v50 = _Block_copy(&v71);
    swift_release();
    id v51 = v58;
    uint64_t v52 = v56;
    id v53 = [v58 tapToRadarWithURL:v56 completionHandler:v50];
    _Block_release(v50);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v66, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v70, v8);
  }
  else
  {
    id v58 = v13;
    swift_bridgeObjectRetain_n();
    uint64_t v33 = v70;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = v34;
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void **)swift_slowAlloc();
      uint64_t v57 = v8;
      unint64_t v71 = v38;
      uint64_t v55 = v9;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v83 = sub_100010680(v59, (unint64_t)v67, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10006D110(a1, (void (*)(void, void, void, void, void))sub_10006B9A0);
      sub_10006D110(a1, (void (*)(void, void, void, void, void))sub_10006B9A0);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v35, "Would have displayed %s on HUD", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v70, v57);
    }
    else
    {

      sub_10006D110(a1, (void (*)(void, void, void, void, void))sub_10006B9A0);
      sub_10006D110(a1, (void (*)(void, void, void, void, void))sub_10006B9A0);

      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v33, v8);
    }
  }
}

uint64_t DeviceDriver<>.report(softError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  NSString v23;
  void *v24;
  unsigned int v25;
  uint64_t inited;
  Swift::String v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  NSURL *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, void *);
  void *v78;
  uint64_t (*v79)();
  uint64_t v80;
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;

  unint64_t v71 = (void *)a1;
  sub_10006B904(a1, (uint64_t)v81);
  unint64_t v70 = v82;
  sub_100010BCC(&qword_10047D1E8);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for URL();
  int v67 = *(void *)(v69 - 8);
  __chkstk_darwin();
  uint64_t v68 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v64 = v10;
  uint64_t v65 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v74 = a4;
  id v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v13(&v75, a2, a4);
  unint64_t v72 = v9;
  uint64_t v73 = v8;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  id v14 = v9 + 16;
  uint64_t v63 = v15;
  v15(v12, (char *)(v75 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger), v8);
  swift_release();
  v13(&v75, a2, v74);
  uint64_t v16 = sub_100044DDC();
  swift_release();
  if (!v16)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = xmmword_1003B2F30;
    *(unsigned char *)(v38 + 16)  = 0;
    swift_willThrow();
    uint64_t v36 = v72;
    os_log_type_t v35 = v73;
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v35);
  }
  int v61 = v14;
  uint64_t v17 = (uint64_t)v71;
  sub_10006B904((uint64_t)v71, (uint64_t)&v83);
  Swift::String v18 = v83;
  NSString v19 = (void *)v84;
  if (v87 == 1)
  {
    int16x8_t v60 = v12;
    uint64_t v21 = v85;
    unsigned __int8 v20 = v86;
    uint64_t v75 = 0;
    uint64_t v76 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v75 = 0xD000000000000017;
    uint64_t v76 = 0x80000001003D9A50;
    v22._countAndFlagsBits  = v18;
    v22._object  = v19;
    String.append(_:)(v22);
    unint64_t v23 = String._bridgeToObjectiveC()();
    uint64_t v74 = v18;
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    unint64_t v25 = [v16 askToLaunchTapToRadarWithMessage:v24];

    if (v25)
    {
      uint64_t v59 = v16;
      sub_100010BCC(&qword_10047D1F0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_1003B2F80;
      *(void *)(inited + 32)  = 0x656C746954;
      *(void *)(inited + 40)  = 0xE500000000000000;
      uint64_t v75 = 0;
      uint64_t v76 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      uint64_t v75 = 0xD000000000000014;
      uint64_t v76 = 0x80000001003D9A70;
      v27._countAndFlagsBits  = v74;
      uint64_t v62 = (unint64_t)v19;
      v27._object  = v19;
      String.append(_:)(v27);
      uint64_t v28 = v76;
      *(void *)(inited + 48)  = v75;
      *(void *)(inited + 56)  = v28;
      *(void *)(inited + 64)  = 0x676169446F747541;
      *(void *)(inited + 72)  = 0xEF73636974736F6ELL;
      *(void *)(inited + 80)  = 0x656E6F6870;
      *(void *)(inited + 88)  = 0xE500000000000000;
      *(void *)(inited + 96)  = 0x7470697263736544;
      *(void *)(inited + 104)  = 0xEB000000006E6F69;
      *(void *)(inited + 112)  = v21;
      *(void *)(inited + 120)  = v20;
      *(void *)(inited + 128)  = 0x6E656E6F706D6F43;
      *(void *)(inited + 136)  = 0xEB00000000444974;
      *(void *)(inited + 144)  = 0x313433373535;
      *(void *)(inited + 152)  = 0xE600000000000000;
      strcpy((char *)(inited + 160), "ComponentName");
      *(_WORD *)(inited + 174)  = -4864;
      *(void *)(inited + 176)  = 0x5032502069466957;
      *(void *)(inited + 184)  = 0xE800000000000000;
      *(void *)(inited + 192)  = 0xD000000000000010;
      *(void *)(inited + 200)  = 0x80000001003D9A90;
      *(void *)(inited + 208)  = 5459817;
      *(void *)(inited + 216)  = 0xE300000000000000;
      strcpy((char *)(inited + 224), "Classification");
      *(unsigned char *)(inited + 239)  = -18;
      *(void *)(inited + 240)  = 0x2073756F69726553;
      *(void *)(inited + 248)  = 0xEB00000000677542;
      *(void *)(inited + 256)  = 0xD000000000000014;
      *(void *)(inited + 264)  = 0x80000001003D9AB0;
      *(void *)(inited + 272)  = 0xD000000000000023;
      *(void *)(inited + 280)  = 0x80000001003D9AD0;
      uint64_t v29 = sub_10001FBB8(inited);
      int v30 = sub_100062960(v29);
      swift_bridgeObjectRelease();
      sub_100062D70(0xD000000000000013, 0x80000001003D9B00, v30);
      swift_bridgeObjectRelease();
      String.index(before:)();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = (uint64_t)v66;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = v67;
      uint64_t v33 = v69;
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v31, 1, v69);
      uint64_t v36 = v72;
      os_log_type_t v35 = v73;
      uint64_t v12 = v60;
      if (v34 != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v68, v31, v33);
        URL._bridgeToObjectiveC()(v46);
        unint64_t v71 = (void *)v47;
        uint64_t v48 = v65;
        v63(v65, v12, v35);
        uint64_t v49 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
        uint64_t v50 = (v64 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
        id v51 = v32;
        uint64_t v52 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v52 + v49, v48, v35);
        id v53 = (void *)(v52 + v50);
        uint64_t v54 = v62;
        *id v53 = v74;
        v53[1]  = v54;
        uint64_t v79 = sub_10006B9F4;
        uint64_t v80 = v52;
        uint64_t v75 = (uint64_t)_NSConcreteStackBlock;
        uint64_t v76 = 1107296256;
        uint64_t v77 = sub_1000633A0;
        uint64_t v78 = &unk_100456980;
        uint64_t v55 = _Block_copy(&v75);
        swift_release();
        uint64_t v56 = v59;
        uint64_t v57 = v71;
        id v58 = [v59 tapToRadarWithURL:v71 completionHandler:v55];
        _Block_release(v55);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v68, v69);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v60, v35);
      }
      swift_bridgeObjectRelease();
      sub_1000380B4(v31, &qword_10047D1E8);
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v37 = xmmword_1003B2F90;
      *(unsigned char *)(v37 + 16)  = 0;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v44 = xmmword_1003B2F70;
      *(unsigned char *)(v44 + 16)  = 0;
      swift_willThrow();

      uint64_t v36 = v72;
      os_log_type_t v35 = v73;
      uint64_t v12 = v60;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v35);
  }
  uint64_t v62 = v84;
  sub_10006D110(v17, (void (*)(void, void, void, void, void))sub_10006B960);
  swift_bridgeObjectRetain();
  uint64_t v39 = Logger.logObject.getter();
  uint64_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v59 = v16;
    long long v41 = swift_slowAlloc();
    uint64_t v74 = v18;
    long long v42 = (uint8_t *)v41;
    uint64_t v75 = swift_slowAlloc();
    *(_DWORD *)long long v42 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_100010680(v74, v62, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v43 = (uint64_t)v71;
    sub_10006D110((uint64_t)v71, (void (*)(void, void, void, void, void))sub_10006B9A0);
    sub_10006D110(v43, (void (*)(void, void, void, void, void))sub_10006B9A0);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Would have displayed %s on HUD", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D110(v17, (void (*)(void, void, void, void, void))sub_10006B9A0);
    sub_10006D110(v17, (void (*)(void, void, void, void, void))sub_10006B9A0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v12, v73);
}

uint64_t sub_100062960(uint64_t a1)
{
  uint64_t v44 = type metadata accessor for CharacterSet();
  __chkstk_darwin();
  id v4 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v41 = &_swiftEmptyDictionarySingleton;
  uint64_t v49 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v5;
  v40[1]  = -1 << *(unsigned char *)(a1 + 32);
  int64_t v42 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v45 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v46 = 0;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v46 << 6);
  while (1)
  {
    uint64_t v13 = 16 * v12;
    id v14 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v12);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = (uint64_t *)(*(void *)(v45 + 56) + v13);
    uint64_t v18 = v17[1];
    uint64_t v47 = *v17;
    uint64_t v48 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static CharacterSet.urlQueryAllowed.getter();
    sub_10001D82C();
    uint64_t v19 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
    uint64_t v21 = v20;
    (*v9)(v4, v44);
    if (v21)
    {
      unint64_t v26 = v41[2];
      if (v41[3] <= v26) {
        sub_10016C448(v26 + 1, 1);
      }
      long long v41 = v49;
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = (char *)(v41 + 8);
      uint64_t v28 = -1 << *((unsigned char *)v41 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~v41[(v29 >> 6) + 8]) == 0)
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v28) >> 6;
        while (++v30 != v33 || (v32 & 1) == 0)
        {
          BOOL v34 = v30 == v33;
          if (v30 == v33) {
            unint64_t v30 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)&v27[8 * v30];
          if (v35 != -1)
          {
            unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)&v27[8 * (v29 >> 6)])) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(void *)&v27[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
      uint64_t v36 = v41;
      uint64_t v37 = 16 * v31;
      uint64_t v38 = (void *)(v41[6] + v37);
      *uint64_t v38 = v16;
      v38[1]  = v15;
      uint64_t v39 = (uint64_t *)(v36[7] + v37);
      *uint64_t v39 = v19;
      v39[1]  = v21;
      ++v36[2];
      uint64_t result = swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_5;
      }
    }
LABEL_8:
    int64_t v22 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v22 >= v42) {
      goto LABEL_38;
    }
    unint64_t v23 = *(void *)(v43 + 8 * v22);
    int64_t v24 = v46 + 1;
    if (!v23)
    {
      int64_t v24 = v46 + 2;
      if (v46 + 2 >= v42) {
        goto LABEL_38;
      }
      unint64_t v23 = *(void *)(v43 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v46 + 3;
        if (v46 + 3 >= v42) {
          goto LABEL_38;
        }
        unint64_t v23 = *(void *)(v43 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v46 + 4;
          if (v46 + 4 >= v42) {
            goto LABEL_38;
          }
          unint64_t v23 = *(void *)(v43 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v23 - 1) & v23;
    unint64_t v12 = __clz(__rbit64(v23)) + (v24 << 6);
    int64_t v46 = v24;
  }
  int64_t v25 = v46 + 5;
  if (v46 + 5 >= v42)
  {
LABEL_38:
    sub_10006D44C();
    return (uint64_t)v41;
  }
  unint64_t v23 = *(void *)(v43 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v46 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v42) {
      goto LABEL_38;
    }
    unint64_t v23 = *(void *)(v43 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100062D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v27) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v26 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v24 = *(void *)(v26 + 8 * v9);
        if (!v24)
        {
          int64_t v9 = v23 + 3;
          if (v23 + 3 >= v27) {
            goto LABEL_23;
          }
          unint64_t v24 = *(void *)(v26 + 8 * v9);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v24 - 1) & v24;
    unint64_t v11 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = 16 * v11;
    uint64_t v13 = (uint64_t *)(*(void *)(a3 + 48) + v12);
    uint64_t v14 = *v13;
    uint64_t v15 = (void *)v13[1];
    uint64_t v16 = (uint64_t *)(*(void *)(a3 + 56) + v12);
    uint64_t v18 = *v16;
    uint64_t v17 = (void *)v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits  = v14;
    v19._object  = v15;
    String.append(_:)(v19);
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits  = 61;
    v20._object  = (void *)0xE100000000000000;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits  = v18;
    v21._object  = v17;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits  = 38;
    v22._object  = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v27)
  {
LABEL_23:
    swift_release();
    return a1;
  }
  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100062FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      unint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(a4, a5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12)  = 2112;
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v10 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to create tap to radar %s because %@", (uint8_t *)v9, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    oslog  = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_100010680(a4, a5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Created tap to radar: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1000633A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t AppleDevice.EventSource.init(driver:eventHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 56))(v22, a3, a4);
  swift_unknownObjectUnownedInit();
  swift_unknownObjectRelease();
  uint64_t v19 = a5;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  uint64_t v15 = v14;
  *(void *)(a7 + 8)  = v13;
  *(void *)(a7 + 16)  = v14;
  v22[5]  = swift_unknownObjectUnownedLoadStrong();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 40);
  swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  v16(v13, v15, a2);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  if (!v21) {
    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  v22[0]  = a3;
  v22[1]  = a4;
  void v22[2] = v19;
  v22[3]  = a6;
  uint64_t v17 = type metadata accessor for AppleDevice.EventSource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a7, v17);
}

Swift::Void __swiftcall AppleDevice.EventSource.stop()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 - 8);
  (*(void (**)(unsigned char *))(v3 + 16))(v9);
  swift_unknownObjectUnownedLoadStrong();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v9, v2);
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7(v4, v5, AssociatedTypeWitness, v6);
  swift_unknownObjectRelease();
}

uint64_t sub_100063790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  return AppleDevice.EventSource.init(driver:eventHandler:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t sub_1000637B8(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable();

  return Device.customMirror.getter(a1, WitnessTable);
}

uint64_t sub_10006381C(char a1)
{
  return sub_10005EF60(a1, (uint64_t)&unk_1004572A0, (uint64_t)sub_10006A0B0, (uint64_t)&unk_1004572B8);
}

uint64_t sub_100063864()
{
  return sub_10005D138((uint64_t)sub_10006A0D4, (uint64_t)&unk_100457268);
}

uint64_t sub_1000638A4()
{
  return sub_10005D138((uint64_t)sub_10006A0DC, (uint64_t)&unk_100457240);
}

uint64_t sub_1000638E4(int a1, uint64_t a2)
{
  return sub_10005D75C(a1, a2, (uint64_t)&unk_100457200, (uint64_t)sub_10006F368, (uint64_t)&unk_100457218);
}

BOOL sub_10006392C()
{
  return sub_10005C32C();
}

uint64_t sub_100063958(char a1)
{
  return sub_10005E69C(a1, (uint64_t)&unk_1004571B0, (uint64_t)sub_10006F364, (uint64_t)&unk_1004571C8);
}

uint64_t sub_1000639A0(char a1)
{
  return sub_10005EF60(a1, (uint64_t)&unk_100457160, (uint64_t)sub_10006A0FC, (uint64_t)&unk_100457178);
}

uint64_t sub_1000639E8(uint64_t a1)
{
  return sub_100061494(a1, (uint64_t)&unk_100457110, (uint64_t)sub_10006B9F4, (uint64_t)&unk_100457128);
}

uint64_t sub_100063A34(char a1)
{
  return sub_100059C20(a1 & 1, (uint64_t)sub_10000E464);
}

uint64_t sub_100063A74(uint64_t a1)
{
  return sub_10005A2A8(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)sub_10000E464);
}

uint64_t sub_100063AB4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100068318(a1, a2, a3, (uint64_t)sub_10000E464);
}

uint64_t sub_100063AE4(void *a1)
{
  return sub_10005BCCC(a1, (uint64_t)sub_10000E464, (uint64_t)sub_10000E464);
}

uint64_t sub_100063B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063B90(a1, a2, a3, 7u, (uint64_t)sub_10000E464);
}

uint64_t sub_100063B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063B90(a1, a2, a3, 8u, (uint64_t)sub_10000E464);
}

uint64_t sub_100063B90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return sub_10005B378(a1 & 0xFFFFFFFFFFFFLL, a4, a5);
}

uint64_t sub_100063BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100068408(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t sub_100063BDC()
{
  return sub_10006849C();
}

uint64_t sub_100063BF8()
{
  return sub_10005F57C((uint64_t (*)(void))sub_10006CAF4, (uint64_t)&unk_100457070, (uint64_t)sub_10006D294);
}

uint64_t sub_100063C4C()
{
  *(void *)(*(void *)(*(void *)v0 + 40) + 128)  = 0;
  return swift_release();
}

uint64_t sub_100063C64(uint64_t a1, uint64_t a2)
{
  return sub_10005F8B4(a1, a2, (uint64_t)&unk_100457048, (uint64_t)sub_10006F534);
}

uint64_t sub_100063CA4()
{
  *(void *)(*(void *)(*(void *)v0 + 40) + 120)  = 0;
  return swift_release();
}

uint64_t sub_100063CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10005FD8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_100457020, (uint64_t)sub_10006F360);
}

uint64_t sub_100063D08(unint64_t a1)
{
  return sub_1000604FC(a1);
}

uint64_t sub_100063D2C()
{
  return sub_10006081C();
}

uint64_t sub_100063D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10006CC20(a1, a2, a3, a6, a7, a8, a9);
}

uint64_t sub_100063D84()
{
  return sub_100060DF4();
}

void sub_100063DA8()
{
}

uint64_t sub_100063DCC(unint64_t a1, uint64_t a2)
{
  return sub_100063E18(a1, a2);
}

uint64_t sub_100063E18(unint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  v8[0]  = *(_OWORD *)a2;
  v8[1]  = v4;
  v8[2]  = *(_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100063EEC(unint64_t a1, uint64_t a2)
{
  return sub_1000649FC(a1, a2);
}

uint64_t sub_100063F38(unint64_t a1, int a2, uint64_t a3)
{
  return sub_100064AD4(a1, a2, a3);
}

uint64_t sub_100063F84(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_100064B98(a1, a2, a3, a4);
}

uint64_t sub_100063FD0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  __int16 v9 = a3;
  char v10 = BYTE2(a3);
  char v11 = BYTE3(a3);
  char v12 = BYTE4(a3);
  char v13 = BYTE5(a3);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v14, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000640C0(unint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v7, (uint64_t)&v8, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064180(unint64_t a1, uint64_t a2)
{
  int v7 = a2;
  char v8 = BYTE4(a2);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v7, (uint64_t)&v9, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064248(unint64_t a1, char a2)
{
  return sub_1000644B4(a1, a2);
}

uint64_t sub_100064294(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = a2;
  int v9 = a3;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000643A8(unint64_t a1, __int16 a2)
{
  return sub_1000643F4(a1, a2);
}

uint64_t sub_1000643F4(unint64_t a1, __int16 a2)
{
  __int16 v7 = a2;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v7, (uint64_t)&v8, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000644B4(unint64_t a1, char a2)
{
  char v7 = a2;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v7, (uint64_t)&v8, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064574(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v9 = a2;
  int v10 = HIDWORD(a2);
  uint64_t v11 = a3;
  int v12 = a4;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v13, 0, v6, v7);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10006469C(unint64_t a1, const void *a2)
{
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)__dst, (uint64_t)&v8, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064774(unint64_t a1, uint64_t a2, int a3)
{
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  char v13 = BYTE6(a2);
  int v14 = a3;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v15, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064868(unint64_t a1, uint64_t a2)
{
  v7[0]  = a2;
  int v8 = HIDWORD(a2);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v7, (uint64_t)&v9, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064930(unint64_t a1, uint64_t a2, char a3)
{
  v8[0]  = a2;
  int v9 = HIDWORD(a2);
  char v10 = a3;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v8, (uint64_t)&v11, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000649FC(unint64_t a1, uint64_t a2)
{
  int v7 = a2;
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  char v10 = BYTE6(a2);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v7, (uint64_t)&v11, 0, v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064AD4(unint64_t a1, int a2, uint64_t a3)
{
  int v8 = a2;
  uint64_t v9 = a3;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064B98(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v9[0]  = a2;
  v9[1]  = a3;
  int v10 = a4;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100064C68@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7) {
    goto LABEL_14;
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v9 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1 + 28;
      if (v10 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = v11 + 28;
      if (__OFADD__(v11, 28)) {
        goto LABEL_46;
      }
      if (v10 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v8 == 2) {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v12 = (int)a1;
      if (v10 < v12)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      sub_10025AC80(v13, v14, (uint64_t)&v48);
      sub_10000C970(v13, v15);
      char v16 = v48;
      unint64_t v17 = v48 >> 8;
      unint64_t v18 = v48 >> 16;
      uint64_t result = v48 >> 24;
      unint64_t v55 = v48;
      char v56 = v49;
      int v57 = v50;
      int v58 = v51;
      int v59 = v52;
      __int16 v60 = v53;
      if (v8)
      {
        if (v8 == 1)
        {
          BOOL v19 = __OFADD__(v9, (int)a1);
          v9 += (int)a1;
          if (v19)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          uint64_t v20 = a1 >> 32;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 16);
          BOOL v19 = __OFADD__(v21, v9);
          v9 += v21;
          if (v19) {
            goto LABEL_51;
          }
          uint64_t v20 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v20 = BYTE6(a2);
      }
      if (v9 >= v20) {
        goto LABEL_14;
      }
      int v46 = v52;
      int v47 = v50;
      char v44 = v49;
      __int16 v45 = v53;
      int v43 = v51;
      unint64_t v41 = HIBYTE(v48);
      unint64_t v42 = HIWORD(v48);
      unint64_t v39 = HIDWORD(v48);
      unint64_t v40 = v48 >> 40;
      unint64_t v38 = v48 >> 24;
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v22 = (int)a1;
          uint64_t v23 = a1 >> 32;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 16);
          uint64_t v23 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = BYTE6(a2);
      }
      if (v23 < v9 || v23 < v22)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v24 = Data._Representation.subscript.getter();
      unint64_t v26 = v25 >> 62;
      uint64_t v27 = v24;
      unint64_t v28 = v25;
      LOWORD(v29)  = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v24), v24)) {
            goto LABEL_52;
          }
          unint64_t v29 = HIDWORD(v24) - (int)v24;
LABEL_36:
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v29 >> 16) {
            goto LABEL_49;
          }
LABEL_38:
          swift_getAtKeyPath();
          if ((unsigned __int16)v48 == (unsigned __int16)v29)
          {
            sub_100013D44(v27, v28);
            unint64_t v32 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            unint64_t v33 = (void *)swift_allocObject();
            v33[5]  = &_swiftEmptyDictionarySingleton;
            v33[2]  = v27;
            v33[3]  = v28;
            uint64_t v34 = 0;
            switch((int)v26)
            {
              case 1:
                uint64_t v34 = (int)v27;
                break;
              case 2:
                uint64_t v34 = *(void *)(v27 + 16);
                break;
              default:
                break;
            }
            v33[4]  = v34;
            swift_beginAccess();
            v33[5]  = v32;
            swift_bridgeObjectRelease();
            uint64_t v35 = sub_100010BCC(&qword_10047DCD8);
            uint64_t v36 = swift_conformsToProtocol2();
            if (v36)
            {
              (*(void (**)(unint64_t *__return_ptr, void *, uint64_t, uint64_t))(v36 + 8))(&v48, v33, v35, v36);
              swift_dynamicCast();
              uint64_t v37 = v54;
              swift_release();
              uint64_t result = sub_10000C970(v27, v28);
              *(unsigned char *)a3  = v16;
              *(unsigned char *)(a3 + 1)  = v17;
              *(unsigned char *)(a3 + 2)  = v18;
              *(unsigned char *)(a3 + 3)  = v38;
              *(unsigned char *)(a3 + 4)  = v39;
              *(unsigned char *)(a3 + 5)  = v40;
              *(unsigned char *)(a3 + 6)  = v42;
              *(unsigned char *)(a3 + 7)  = v41;
              *(unsigned char *)(a3 + 8)  = v44;
              *(_DWORD *)(a3 + 12)  = v47;
              *(_DWORD *)(a3 + 16)  = v43;
              *(_DWORD *)(a3 + 20)  = v46;
              *(_WORD *)(a3 + 24)  = v45;
              *(void *)(a3 + 32)  = v37;
              return result;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x1000650F0);
          }
          uint64_t result = sub_10000C970(v27, v28);
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v24 + 16);
          uint64_t v30 = *(void *)(v24 + 24);
          unint64_t v29 = v30 - v31;
          if (!__OFSUB__(v30, v31)) {
            goto LABEL_36;
          }
          goto LABEL_53;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v29)  = BYTE6(v25);
          goto LABEL_38;
      }
LABEL_14:
      *(void *)(a3 + 32)  = 0;
      *(_OWORD *)a3  = 0u;
      *(_OWORD *)(a3 + 16)  = 0u;
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x1C000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

uint64_t sub_100065120@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7) {
    goto LABEL_14;
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v9 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1 + 18;
      if (v10 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = v11 + 18;
      if (__OFADD__(v11, 18)) {
        goto LABEL_46;
      }
      if (v10 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v8 == 2) {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v12 = (int)a1;
      if (v10 < v12)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      sub_10025AB00(v13, v14, (uint64_t)&v51);
      sub_10000C970(v13, v15);
      char v17 = v51;
      char v16 = v52;
      unint64_t v55 = v51;
      unint64_t v18 = HIDWORD(v51);
      uint64_t result = HIDWORD(v52);
      int v56 = v52;
      __int16 v57 = WORD2(v52);
      char v58 = BYTE6(v52);
      __int16 v59 = v53;
      if (v8)
      {
        if (v8 == 1)
        {
          BOOL v19 = __OFADD__(v9, (int)a1);
          v9 += (int)a1;
          if (v19)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          uint64_t v20 = a1 >> 32;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 16);
          BOOL v19 = __OFADD__(v21, v9);
          v9 += v21;
          if (v19) {
            goto LABEL_51;
          }
          uint64_t v20 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v20 = BYTE6(a2);
      }
      if (v9 >= v20) {
        goto LABEL_14;
      }
      __int16 v50 = v53;
      unint64_t v48 = v51 >> 16;
      unint64_t v49 = v51 >> 24;
      unint64_t v46 = v52 >> 40;
      unint64_t v47 = v51 >> 8;
      unint64_t v44 = v52 >> 8;
      unint64_t v45 = HIWORD(v52);
      unint64_t v42 = v52 >> 24;
      unint64_t v43 = v52 >> 16;
      unint64_t v40 = v51 >> 40;
      unint64_t v41 = HIDWORD(v52);
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v22 = (int)a1;
          uint64_t v23 = a1 >> 32;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 16);
          uint64_t v23 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = BYTE6(a2);
      }
      unint64_t v38 = HIBYTE(v51);
      unint64_t v39 = HIWORD(v51);
      if (v23 < v9 || v23 < v22)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v24 = Data._Representation.subscript.getter();
      unint64_t v26 = v25 >> 62;
      uint64_t v27 = v24;
      unint64_t v28 = v25;
      LOWORD(v29)  = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v24), v24)) {
            goto LABEL_52;
          }
          unint64_t v29 = HIDWORD(v24) - (int)v24;
LABEL_36:
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v29 >> 16) {
            goto LABEL_49;
          }
LABEL_38:
          swift_getAtKeyPath();
          if ((unsigned __int16)v51 == (unsigned __int16)v29)
          {
            sub_100013D44(v27, v28);
            unint64_t v32 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            unint64_t v33 = (void *)swift_allocObject();
            v33[5]  = &_swiftEmptyDictionarySingleton;
            v33[2]  = v27;
            v33[3]  = v28;
            uint64_t v34 = 0;
            switch((int)v26)
            {
              case 1:
                uint64_t v34 = (int)v27;
                break;
              case 2:
                uint64_t v34 = *(void *)(v27 + 16);
                break;
              default:
                break;
            }
            v33[4]  = v34;
            swift_beginAccess();
            v33[5]  = v32;
            swift_bridgeObjectRelease();
            uint64_t v35 = sub_100010BCC(&qword_10047DCD8);
            uint64_t v36 = swift_conformsToProtocol2();
            if (v36)
            {
              (*(void (**)(unint64_t *__return_ptr, void *, uint64_t, uint64_t))(v36 + 8))(&v51, v33, v35, v36);
              swift_dynamicCast();
              uint64_t v37 = v54;
              swift_release();
              uint64_t result = sub_10000C970(v27, v28);
              *(unsigned char *)a3  = v17;
              *(unsigned char *)(a3 + 1)  = v47;
              *(unsigned char *)(a3 + 2)  = v48;
              *(unsigned char *)(a3 + 3)  = v49;
              *(unsigned char *)(a3 + 4)  = v18;
              *(unsigned char *)(a3 + 5)  = v40;
              *(unsigned char *)(a3 + 6)  = v39;
              *(unsigned char *)(a3 + 7)  = v38;
              *(unsigned char *)(a3 + 8)  = v16;
              *(unsigned char *)(a3 + 9)  = v44;
              *(unsigned char *)(a3 + 10)  = v43;
              *(unsigned char *)(a3 + 11)  = v42;
              *(unsigned char *)(a3 + 12)  = v41;
              *(unsigned char *)(a3 + 13)  = v46;
              *(unsigned char *)(a3 + 14)  = v45;
              *(_WORD *)(a3 + 16)  = v50;
              *(void *)(a3 + 24)  = v37;
              return result;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x1000655E4);
          }
          uint64_t result = sub_10000C970(v27, v28);
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v24 + 16);
          uint64_t v30 = *(void *)(v24 + 24);
          unint64_t v29 = v30 - v31;
          if (!__OFSUB__(v30, v31)) {
            goto LABEL_36;
          }
          goto LABEL_53;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v29)  = BYTE6(v25);
          goto LABEL_38;
      }
LABEL_14:
      *(_OWORD *)a3  = 0u;
      *(_OWORD *)(a3 + 16)  = 0u;
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x12000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

unint64_t sub_100065614@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7) {
    goto LABEL_14;
  }
  unint64_t v8 = a2 >> 62;
  int64_t v9 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1 + 22;
      if (v10 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = v11 + 22;
      if (__OFADD__(v11, 22)) {
        goto LABEL_46;
      }
      if (v10 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v8 == 2) {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v12 = (int)a1;
      if (v10 < v12)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      sub_10025A990(v13, v14, &v59);
      sub_10000C970(v13, v15);
      unsigned __int8 v16 = v59.n128_u8[0];
      unsigned __int8 v17 = v59.n128_u8[8];
      char v18 = v60;
      __n128 v63 = v59;
      unint64_t result = v59.n128_u64[1] >> 24;
      unint64_t v19 = v60 | ((unint64_t)v61 << 32);
      unint64_t v20 = v19 >> 8;
      unint64_t v21 = v19 >> 16;
      unint64_t v22 = v19 >> 24;
      unsigned int v64 = v60;
      unsigned __int16 v65 = v61;
      if (v8)
      {
        if (v8 == 1)
        {
          BOOL v23 = __OFADD__(v9, (int)a1);
          v9 += (int)a1;
          if (v23)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          uint64_t v24 = a1 >> 32;
        }
        else
        {
          uint64_t v25 = *(void *)(a1 + 16);
          BOOL v23 = __OFADD__(v25, v9);
          v9 += v25;
          if (v23) {
            goto LABEL_51;
          }
          uint64_t v24 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v24 = BYTE6(a2);
      }
      if (v9 >= v24) {
        goto LABEL_14;
      }
      unint64_t v57 = HIDWORD(v59.n128_u64[0]);
      unsigned __int16 v58 = v61;
      unint64_t v55 = v59.n128_u64[0] >> 16;
      unint64_t v56 = v59.n128_u64[0] >> 24;
      unint64_t v53 = HIWORD(v59.n128_u64[1]);
      unint64_t v54 = v59.n128_u64[0] >> 8;
      unint64_t v51 = v59.n128_u64[1] >> 8;
      unint64_t v52 = HIBYTE(v59.n128_u64[1]);
      unint64_t v49 = v59.n128_u64[1] >> 24;
      unint64_t v50 = v59.n128_u64[1] >> 16;
      unint64_t v48 = HIDWORD(v59.n128_u64[1]);
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v26 = (int)a1;
          uint64_t v27 = a1 >> 32;
        }
        else
        {
          uint64_t v26 = *(void *)(a1 + 16);
          uint64_t v27 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = BYTE6(a2);
      }
      char v42 = v21;
      char v43 = v20;
      unint64_t v44 = HIBYTE(v59.n128_u64[0]);
      unint64_t v45 = HIWORD(v59.n128_u64[0]);
      unint64_t v46 = v59.n128_u64[0] >> 40;
      unint64_t v47 = v59.n128_u64[1] >> 40;
      if (v27 < v9 || v27 < v26)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v28 = Data._Representation.subscript.getter();
      unint64_t v30 = v29 >> 62;
      uint64_t v31 = v28;
      unint64_t v32 = v29;
      LOWORD(v33)  = 0;
      switch(v29 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v28), v28)) {
            goto LABEL_52;
          }
          unint64_t v33 = HIDWORD(v28) - (int)v28;
LABEL_36:
          if ((v33 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v33 >> 16) {
            goto LABEL_49;
          }
LABEL_38:
          swift_getAtKeyPath();
          if (v59.n128_u16[0] == (unsigned __int16)v33)
          {
            sub_100013D44(v31, v32);
            unint64_t v36 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            uint64_t v37 = (void *)swift_allocObject();
            v37[5]  = &_swiftEmptyDictionarySingleton;
            v37[2]  = v31;
            v37[3]  = v32;
            uint64_t v38 = 0;
            switch((int)v30)
            {
              case 1:
                uint64_t v38 = (int)v31;
                break;
              case 2:
                uint64_t v38 = *(void *)(v31 + 16);
                break;
              default:
                break;
            }
            v37[4]  = v38;
            swift_beginAccess();
            v37[5]  = v36;
            swift_bridgeObjectRelease();
            uint64_t v39 = sub_100010BCC(&qword_10047DCD8);
            uint64_t v40 = swift_conformsToProtocol2();
            if (v40)
            {
              (*(void (**)(__n128 *__return_ptr, void *, uint64_t, uint64_t))(v40 + 8))(&v59, v37, v39, v40);
              swift_dynamicCast();
              uint64_t v41 = v62;
              swift_release();
              unint64_t result = sub_10000C970(v31, v32);
              *(unsigned char *)a3  = v16;
              *(unsigned char *)(a3 + 1)  = v54;
              *(unsigned char *)(a3 + 2)  = v55;
              *(unsigned char *)(a3 + 3)  = v56;
              *(unsigned char *)(a3 + 4)  = v57;
              *(unsigned char *)(a3 + 5)  = v46;
              *(unsigned char *)(a3 + 6)  = v45;
              *(unsigned char *)(a3 + 7)  = v44;
              *(unsigned char *)(a3 + 8)  = v17;
              *(unsigned char *)(a3 + 9)  = v51;
              *(unsigned char *)(a3 + 10)  = v50;
              *(unsigned char *)(a3 + 11)  = v49;
              *(unsigned char *)(a3 + 12)  = v48;
              *(unsigned char *)(a3 + 13)  = v47;
              *(unsigned char *)(a3 + 14)  = v53;
              *(unsigned char *)(a3 + 15)  = v52;
              *(unsigned char *)(a3 + 16)  = v18;
              *(unsigned char *)(a3 + 17)  = v43;
              *(unsigned char *)(a3 + 18)  = v42;
              *(unsigned char *)(a3 + 19)  = v22;
              *(_WORD *)(a3 + 20)  = v58;
              *(void *)(a3 + 24)  = v41;
              return result;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x100065B38);
          }
          unint64_t result = sub_10000C970(v31, v32);
          break;
        case 2uLL:
          uint64_t v35 = *(void *)(v28 + 16);
          uint64_t v34 = *(void *)(v28 + 24);
          unint64_t v33 = v34 - v35;
          if (!__OFSUB__(v34, v35)) {
            goto LABEL_36;
          }
          goto LABEL_53;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v33)  = BYTE6(v29);
          goto LABEL_38;
      }
LABEL_14:
      *(_OWORD *)a3  = 0u;
      *(_OWORD *)(a3 + 16)  = 0u;
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x16000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

uint64_t sub_100065B68@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7) {
    goto LABEL_14;
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v9 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1 + 16;
      if (v10 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = v11 + 16;
      if (__OFADD__(v11, 16)) {
        goto LABEL_46;
      }
      if (v10 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v8 == 2) {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v12 = (int)a1;
      if (v10 < v12)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      sub_10025A828(v13, v14, (uint64_t)&v50);
      sub_10000C970(v13, v15);
      char v17 = v50;
      char v16 = v51;
      unint64_t v53 = v50;
      unint64_t v18 = v50 >> 24;
      uint64_t result = v50 >> 40;
      unint64_t v54 = v51;
      if (v8)
      {
        if (v8 == 1)
        {
          BOOL v19 = __OFADD__(v9, (int)a1);
          v9 += (int)a1;
          if (v19)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          uint64_t v20 = a1 >> 32;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 16);
          BOOL v19 = __OFADD__(v21, v9);
          v9 += v21;
          if (v19) {
            goto LABEL_51;
          }
          uint64_t v20 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v20 = BYTE6(a2);
      }
      if (v9 >= v20) {
        goto LABEL_14;
      }
      unint64_t v48 = v50 >> 8;
      unint64_t v49 = v50 >> 16;
      unint64_t v46 = v51 >> 40;
      unint64_t v47 = HIDWORD(v51);
      unint64_t v44 = v51 >> 8;
      unint64_t v45 = HIWORD(v51);
      unint64_t v42 = v51 >> 24;
      unint64_t v43 = v51 >> 16;
      unint64_t v40 = v50 >> 40;
      unint64_t v41 = HIDWORD(v50);
      unint64_t v39 = HIWORD(v50);
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v22 = (int)a1;
          uint64_t v23 = a1 >> 32;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 16);
          uint64_t v23 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = BYTE6(a2);
      }
      unint64_t v38 = HIBYTE(v50);
      if (v23 < v9 || v23 < v22)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v24 = Data._Representation.subscript.getter();
      unint64_t v26 = v25 >> 62;
      uint64_t v27 = v24;
      unint64_t v28 = v25;
      LOWORD(v29)  = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v24), v24)) {
            goto LABEL_52;
          }
          unint64_t v29 = HIDWORD(v24) - (int)v24;
LABEL_36:
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v29 >> 16) {
            goto LABEL_49;
          }
LABEL_38:
          swift_getAtKeyPath();
          if ((unsigned __int16)v50 == (unsigned __int16)v29)
          {
            sub_100013D44(v27, v28);
            unint64_t v32 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            unint64_t v33 = (void *)swift_allocObject();
            v33[5]  = &_swiftEmptyDictionarySingleton;
            v33[2]  = v27;
            v33[3]  = v28;
            uint64_t v34 = 0;
            switch((int)v26)
            {
              case 1:
                uint64_t v34 = (int)v27;
                break;
              case 2:
                uint64_t v34 = *(void *)(v27 + 16);
                break;
              default:
                break;
            }
            v33[4]  = v34;
            swift_beginAccess();
            v33[5]  = v32;
            swift_bridgeObjectRelease();
            uint64_t v35 = sub_100010BCC(&qword_10047DCD8);
            uint64_t v36 = swift_conformsToProtocol2();
            if (v36)
            {
              (*(void (**)(unint64_t *__return_ptr, void *, uint64_t, uint64_t))(v36 + 8))(&v50, v33, v35, v36);
              swift_dynamicCast();
              uint64_t v37 = v52;
              swift_release();
              uint64_t result = sub_10000C970(v27, v28);
              *(unsigned char *)a3  = v17;
              *(unsigned char *)(a3 + 1)  = v48;
              *(unsigned char *)(a3 + 2)  = v49;
              *(unsigned char *)(a3 + 3)  = v18;
              *(unsigned char *)(a3 + 4)  = v41;
              *(unsigned char *)(a3 + 5)  = v40;
              *(unsigned char *)(a3 + 6)  = v39;
              *(unsigned char *)(a3 + 7)  = v38;
              *(unsigned char *)(a3 + 8)  = v16;
              *(unsigned char *)(a3 + 9)  = v44;
              *(unsigned char *)(a3 + 10)  = v43;
              *(unsigned char *)(a3 + 11)  = v42;
              *(unsigned char *)(a3 + 12)  = v47;
              *(unsigned char *)(a3 + 13)  = v46;
              *(_WORD *)(a3 + 14)  = v45;
              *(void *)(a3 + 16)  = v37;
              return result;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x10006601CLL);
          }
          uint64_t result = sub_10000C970(v27, v28);
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v24 + 16);
          uint64_t v30 = *(void *)(v24 + 24);
          unint64_t v29 = v30 - v31;
          if (!__OFSUB__(v30, v31)) {
            goto LABEL_36;
          }
          goto LABEL_53;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v29)  = BYTE6(v25);
          goto LABEL_38;
      }
LABEL_14:
      *(void *)a3  = 0;
      *(void *)(a3 + 8)  = 0;
      *(void *)(a3 + 16)  = 0;
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x10000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

uint64_t sub_10006604C@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, void (*a3)(unint64_t *__return_ptr)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v9) {
    goto LABEL_14;
  }
  unint64_t v10 = a2 >> 62;
  uint64_t v11 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (int)a1 + 28;
      if (v12 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = v13 + 28;
      if (__OFADD__(v13, 28)) {
        goto LABEL_46;
      }
      if (v12 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v10 == 2) {
        uint64_t v14 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v14 = (int)a1;
      if (v12 < v14)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_13:
      uint64_t v15 = Data._Representation.subscript.getter();
      unint64_t v17 = v16;
      a3(&v50);
      sub_10000C970(v15, v17);
      char v18 = v50;
      unint64_t v19 = v50 >> 8;
      unint64_t v20 = v50 >> 16;
      uint64_t result = v50 >> 24;
      unint64_t v57 = v50;
      char v58 = v51;
      int v59 = v52;
      int v60 = v53;
      int v61 = v54;
      __int16 v62 = v55;
      if (v10)
      {
        if (v10 == 1)
        {
          BOOL v21 = __OFADD__(v11, (int)a1);
          v11 += (int)a1;
          if (v21)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          uint64_t v22 = a1 >> 32;
        }
        else
        {
          uint64_t v23 = *(void *)(a1 + 16);
          BOOL v21 = __OFADD__(v23, v11);
          v11 += v23;
          if (v21) {
            goto LABEL_51;
          }
          uint64_t v22 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v22 = BYTE6(a2);
      }
      if (v11 >= v22) {
        goto LABEL_14;
      }
      int v48 = v54;
      int v49 = v52;
      char v46 = v51;
      __int16 v47 = v55;
      int v45 = v53;
      unint64_t v43 = HIBYTE(v50);
      unint64_t v44 = HIWORD(v50);
      unint64_t v41 = HIDWORD(v50);
      unint64_t v42 = v50 >> 40;
      unint64_t v40 = v50 >> 24;
      if (v10)
      {
        if (v10 == 1)
        {
          uint64_t v24 = (int)a1;
          uint64_t v25 = a1 >> 32;
        }
        else
        {
          uint64_t v24 = *(void *)(a1 + 16);
          uint64_t v25 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = BYTE6(a2);
      }
      if (v25 < v11 || v25 < v24)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v26 = Data._Representation.subscript.getter();
      unint64_t v28 = v27 >> 62;
      uint64_t v29 = v26;
      unint64_t v30 = v27;
      LOWORD(v31)  = 0;
      switch(v27 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v26), v26)) {
            goto LABEL_52;
          }
          unint64_t v31 = HIDWORD(v26) - (int)v26;
LABEL_36:
          if ((v31 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v31 >> 16) {
            goto LABEL_49;
          }
LABEL_38:
          swift_getAtKeyPath();
          if ((unsigned __int16)v50 == (unsigned __int16)v31)
          {
            sub_100013D44(v29, v30);
            unint64_t v34 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            uint64_t v35 = (void *)swift_allocObject();
            v35[5]  = &_swiftEmptyDictionarySingleton;
            v35[2]  = v29;
            v35[3]  = v30;
            uint64_t v36 = 0;
            switch((int)v28)
            {
              case 1:
                uint64_t v36 = (int)v29;
                break;
              case 2:
                uint64_t v36 = *(void *)(v29 + 16);
                break;
              default:
                break;
            }
            v35[4]  = v36;
            swift_beginAccess();
            v35[5]  = v34;
            swift_bridgeObjectRelease();
            uint64_t v37 = sub_100010BCC(&qword_10047DCD8);
            uint64_t v38 = swift_conformsToProtocol2();
            if (v38)
            {
              (*(void (**)(unint64_t *__return_ptr, void *, uint64_t, uint64_t))(v38 + 8))(&v50, v35, v37, v38);
              swift_dynamicCast();
              uint64_t v39 = v56;
              swift_release();
              uint64_t result = sub_10000C970(v29, v30);
              *(unsigned char *)a4  = v18;
              *(unsigned char *)(a4 + 1)  = v19;
              *(unsigned char *)(a4 + 2)  = v20;
              *(unsigned char *)(a4 + 3)  = v40;
              *(unsigned char *)(a4 + 4)  = v41;
              *(unsigned char *)(a4 + 5)  = v42;
              *(unsigned char *)(a4 + 6)  = v44;
              *(unsigned char *)(a4 + 7)  = v43;
              *(unsigned char *)(a4 + 8)  = v46;
              *(_DWORD *)(a4 + 12)  = v49;
              *(_DWORD *)(a4 + 16)  = v45;
              *(_DWORD *)(a4 + 20)  = v48;
              *(_WORD *)(a4 + 24)  = v47;
              *(void *)(a4 + 32)  = v39;
              return result;
            }
LABEL_54:
            __break(1u);
            JUMPOUT(0x1000664DCLL);
          }
          uint64_t result = sub_10000C970(v29, v30);
          break;
        case 2uLL:
          uint64_t v33 = *(void *)(v26 + 16);
          uint64_t v32 = *(void *)(v26 + 24);
          unint64_t v31 = v32 - v33;
          if (!__OFSUB__(v32, v33)) {
            goto LABEL_36;
          }
          goto LABEL_53;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v31)  = BYTE6(v27);
          goto LABEL_38;
      }
LABEL_14:
      *(void *)(a4 + 32)  = 0;
      *(_OWORD *)a4  = 0u;
      *(_OWORD *)(a4 + 16)  = 0u;
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x1C000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

uint64_t sub_10006650C@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7)
  {
LABEL_14:
    sub_10006ED7C((uint64_t)v53);
    return sub_10006EC68((uint64_t)v53, a3, &qword_10047DCC8);
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v9 = v6;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1 + 32;
      if (v10 >= a1 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = v11 + 32;
      if (__OFADD__(v11, 32)) {
        goto LABEL_45;
      }
      if (v10 >= *(void *)(a1 + 24)) {
        goto LABEL_14;
      }
      if (v8 == 2) {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else {
LABEL_11:
      }
        uint64_t v12 = (int)a1;
      if (v10 < v12)
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_13:
      uint64_t v13 = Data._Representation.subscript.getter();
      unint64_t v15 = v14;
      sub_100259FF0(v13, v14, (uint64_t)&v54);
      sub_10000C970(v13, v15);
      int v17 = DWORD1(v54);
      int v18 = DWORD2(v55);
      long long v49 = v54;
      char v50 = v55;
      uint64_t v51 = *(void *)((char *)&v55 + 4);
      __int16 v52 = WORD6(v55);
      if (v8)
      {
        if (v8 == 1)
        {
          BOOL v19 = __OFADD__(v9, (int)a1);
          v9 += (int)a1;
          if (v19)
          {
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
          uint64_t v20 = a1 >> 32;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 16);
          BOOL v19 = __OFADD__(v21, v9);
          v9 += v21;
          if (v19)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            JUMPOUT(0x100066958);
          }
          uint64_t v20 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v20 = BYTE6(a2);
      }
      if (v9 >= v20) {
        goto LABEL_14;
      }
      int v46 = DWORD1(v55);
      int v47 = HIDWORD(v54);
      uint64_t v45 = HIDWORD(*((void *)&v55 + 1));
      int v43 = DWORD2(v54);
      int v44 = v54;
      char v42 = v55;
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v22 = (int)a1;
          uint64_t v23 = a1 >> 32;
        }
        else
        {
          uint64_t v22 = *(void *)(a1 + 16);
          uint64_t v23 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = BYTE6(a2);
      }
      if (v23 < v9 || v23 < v22)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v24 = Data._Representation.subscript.getter();
      unint64_t v26 = v25 >> 62;
      uint64_t v27 = v24;
      unint64_t v28 = v25;
      LOWORD(v29)  = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v24), v24)) {
            goto LABEL_51;
          }
          unint64_t v29 = HIDWORD(v24) - (int)v24;
LABEL_36:
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_47;
          }
          if (v29 >> 16) {
            goto LABEL_48;
          }
LABEL_38:
          swift_getAtKeyPath();
          if (v53[0] != (unsigned __int16)v29)
          {
            sub_10000C970(v27, v28);
            goto LABEL_14;
          }
          int v41 = v17;
          sub_100013D44(v27, v28);
          unint64_t v32 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v33 = type metadata accessor for BinaryDecoder();
          unint64_t v34 = (void *)swift_allocObject();
          v34[5]  = &_swiftEmptyDictionarySingleton;
          v34[2]  = v27;
          void v34[3] = v28;
          uint64_t v35 = 0;
          switch((int)v26)
          {
            case 1:
              uint64_t v35 = (int)v27;
              break;
            case 2:
              uint64_t v35 = *(void *)(v27 + 16);
              break;
            default:
              break;
          }
          v34[4]  = v35;
          swift_beginAccess();
          v34[5]  = v32;
          swift_bridgeObjectRelease();
          v48[3]  = v33;
          v48[4]  = sub_1000687F0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          v48[0]  = v34;
          sub_10019E96C(v48, &v54);
          sub_10000C970(v27, v28);
          *(_DWORD *)a3  = v44;
          *(_DWORD *)(a3 + 4)  = v41;
          *(_DWORD *)(a3 + 8)  = v43;
          *(_DWORD *)(a3 + 12)  = v47;
          *(unsigned char *)(a3 + 16)  = v42;
          *(_DWORD *)(a3 + 20)  = v46;
          *(_DWORD *)(a3 + 24)  = v18;
          *(_WORD *)(a3 + 28)  = v45;
          long long v36 = v63;
          *(_OWORD *)(a3 + 160)  = v62;
          *(_OWORD *)(a3 + 176)  = v36;
          *(_OWORD *)(a3 + 192)  = v64[0];
          *(_OWORD *)(a3 + 201)  = *(_OWORD *)((char *)v64 + 9);
          long long v37 = v59;
          *(_OWORD *)(a3 + 96)  = v58;
          *(_OWORD *)(a3 + 112)  = v37;
          long long v38 = v61;
          *(_OWORD *)(a3 + 128)  = v60;
          *(_OWORD *)(a3 + 144)  = v38;
          long long v39 = v55;
          *(_OWORD *)(a3 + 32)  = v54;
          *(_OWORD *)(a3 + 48)  = v39;
          long long v40 = v57;
          *(_OWORD *)(a3 + 64)  = v56;
          *(_OWORD *)(a3 + 80)  = v40;
          uint64_t result = NANBitmap.Channel.operatingClass.getter(a3);
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v24 + 16);
          uint64_t v30 = *(void *)(v24 + 24);
          unint64_t v29 = v30 - v31;
          if (!__OFSUB__(v30, v31)) {
            goto LABEL_36;
          }
          goto LABEL_52;
        case 3uLL:
          goto LABEL_38;
        default:
          LOWORD(v29)  = BYTE6(v25);
          goto LABEL_38;
      }
      return result;
    case 3uLL:
      goto LABEL_14;
    default:
      if ((a2 & 0xFF000000000000) >= 0x20000000000001) {
        goto LABEL_13;
      }
      goto LABEL_14;
  }
}

uint64_t sub_100066988(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100066A54);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 == 12) {
        return sub_10025AF80(a1, a2);
      }
      else {
        return 0;
      }
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v2;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100066A64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100066B44);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 2080)
      {
        sub_10025A60C(a1, a2, a3);
        return sub_10006ED74((uint64_t)a3);
      }
      else
      {
LABEL_7:
        sub_10006ED44(v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DCD0);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

void sub_100066B54(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100066C14);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 28)
      {
        sub_10025A494(a1, a2, a3);
        *(unsigned char *)(a3 + 28)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)a3  = 0;
        *(void *)(a3 + 8)  = 0;
        *(_DWORD *)(a3 + 24)  = 0;
        *(void *)(a3 + 16)  = 0;
        *(unsigned char *)(a3 + 28)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100066C24(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100066CE0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 20)
      {
        sub_10025A32C(a1, a2, a3);
        a3[1].n128_u8[4]  = 0;
      }
      else
      {
LABEL_8:
        a3->n128_u64[0]  = 0;
        a3->n128_u64[1]  = 0;
        a3[1].n128_u32[0]  = 0;
        a3[1].n128_u8[4]  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100066CF0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100066DACLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 20)
      {
        sub_10025A168(a1, a2, a3);
        *(unsigned char *)(a3 + 20)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)a3  = 0;
        *(void *)(a3 + 8)  = 0;
        *(_DWORD *)(a3 + 16)  = 0;
        *(unsigned char *)(a3 + 20)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_100066DBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100066E90);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 != 10) {
        return 0;
      }
      uint64_t v8 = sub_100259E88(a1, a2);
      return v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)HIWORD(v8) << 48);
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v2;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100066EA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100066F80);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 993)
      {
        sub_100259D1C(a1, a2, a3);
        return sub_10006EDDC((uint64_t)a3);
      }
      else
      {
LABEL_7:
        sub_10006EDAC(v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DCC0);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

void sub_100066F90(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100067054);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 72)
      {
        sub_100259B8C(a1, a2, a3);
        *(unsigned char *)(a3 + 72)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)(a3 + 64)  = 0;
        *(_OWORD *)(a3 + 32)  = 0u;
        *(_OWORD *)(a3 + 48)  = 0u;
        *(_OWORD *)a3  = 0u;
        *(_OWORD *)(a3 + 16)  = 0u;
        *(unsigned char *)(a3 + 72)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100067064(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100067124);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 28)
      {
        sub_100259A1C(a1, a2, a3);
        *(unsigned char *)(a3 + 28)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)a3  = 0;
        *(void *)(a3 + 8)  = 0;
        *(_DWORD *)(a3 + 24)  = 0;
        *(void *)(a3 + 16)  = 0;
        *(unsigned char *)(a3 + 28)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067134@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100067214);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 3872)
      {
        sub_100259800(a1, a2, a3);
        return NANBitmap.Channel.operatingClass.getter(a3);
      }
      else
      {
LABEL_7:
        sub_10006EDE4(v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DCB8);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_100067224@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100067304);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 1616)
      {
        sub_1002595E4(a1, a2, a3);
        return NANBitmap.Channel.operatingClass.getter(a3);
      }
      else
      {
LABEL_7:
        sub_10006EDF4(v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DCB0);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_100067314@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000673FCLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 208)
      {
        sub_10025943C(a1, a2, a3);
        return NANBitmap.Channel.operatingClass.getter(a3);
      }
      else
      {
LABEL_8:
        sub_10006EE08((uint64_t)v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DCA0);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10006740C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1000674DCLL);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 == 16) {
        return sub_1002591B8(a1, a2);
      }
      else {
        return 0;
      }
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v2;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1000674EC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1000675B0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 68)
      {
        sub_100259030(a1, a2, a3);
        *(unsigned char *)(a3 + 68)  = 0;
      }
      else
      {
LABEL_8:
        *(_DWORD *)(a3 + 64)  = 0;
        *(_OWORD *)(a3 + 32)  = 0u;
        *(_OWORD *)(a3 + 48)  = 0u;
        *(_OWORD *)a3  = 0u;
        *(_OWORD *)(a3 + 16)  = 0u;
        *(unsigned char *)(a3 + 68)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000675C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x1000676A0);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 264)
      {
        sub_100258EC4(a1, a2, a3);
        return sub_10006EE68((uint64_t)a3);
      }
      else
      {
LABEL_7:
        sub_10006EE34((uint64_t)v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DC80);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

void sub_1000676B0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100067770);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 40)
      {
        sub_100258C0C(a1, a2, a3);
        *(unsigned char *)(a3 + 40)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)(a3 + 32)  = 0;
        *(_OWORD *)a3  = 0u;
        *(_OWORD *)(a3 + 16)  = 0u;
        *(unsigned char *)(a3 + 40)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067780@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100067868);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 184)
      {
        sub_100258A7C(a1, a2, a3);
        return sub_10006EE9C((uint64_t)a3);
      }
      else
      {
LABEL_8:
        sub_10006EE70((uint64_t)v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DC78);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_100067878(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  unsigned __int8 v3 = 1;
  unsigned int v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x10006793CLL);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 4)
      {
        unsigned int v4 = a3();
        unsigned __int8 v3 = 0;
      }
      else
      {
        unsigned int v4 = 0;
        unsigned __int8 v3 = 1;
      }
      return v4 | ((unint64_t)v3 << 32);
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v4 | ((unint64_t)v3 << 32);
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10006794C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100067A2CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 460)
      {
        sub_1002587D0(a1, a2, a3);
        return sub_10006EEF4((uint64_t)a3);
      }
      else
      {
LABEL_7:
        sub_10006EEA4((uint64_t)v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DC70);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

void sub_100067A3C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100067AF8);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 24)
      {
        sub_100258660(a1, a2, a3);
        *(unsigned char *)(a3 + 24)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)a3  = 0;
        *(void *)(a3 + 8)  = 0;
        *(void *)(a3 + 16)  = 0;
        *(unsigned char *)(a3 + 24)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100067B08(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100067BD0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 104)
      {
        sub_1002584B8(a1, a2, a3);
        *(unsigned char *)(a3 + 104)  = 0;
      }
      else
      {
LABEL_8:
        *(void *)(a3 + 96)  = 0;
        *(_OWORD *)(a3 + 64)  = 0u;
        *(_OWORD *)(a3 + 80)  = 0u;
        *(_OWORD *)(a3 + 32)  = 0u;
        *(_OWORD *)(a3 + 48)  = 0u;
        *(_OWORD *)a3  = 0u;
        *(_OWORD *)(a3 + 16)  = 0u;
        *(unsigned char *)(a3 + 104)  = 1;
      }
      return;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067BE0(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100067C9CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 8) {
        return a3();
      }
      else {
        return 0;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067CAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100067D8CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 == 403)
      {
        sub_100258300(a1, a2, a3);
        return sub_10006EF48((uint64_t)a3);
      }
      else
      {
LABEL_7:
        sub_10006EEFC((uint64_t)v9);
        return sub_10006EC68((uint64_t)v9, (uint64_t)a3, &qword_10047DC68);
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_100067D9C(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  int v3 = 1;
  int v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100067E54);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 2)
      {
        unsigned __int16 v9 = a3();
        int v3 = 0;
        int v4 = v9;
      }
      else
      {
        int v4 = 0;
        int v3 = 1;
      }
      return v4 | (v3 << 16);
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v4 | (v3 << 16);
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067E64(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x100067F34);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 12) {
        return a3();
      }
      else {
        return 0;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100067F54(char a1)
{
  return sub_10005EF60(a1, (uint64_t)&unk_100456FA8, (uint64_t)sub_10006A0B0, (uint64_t)&unk_100456FC0);
}

uint64_t sub_100067F9C()
{
  return sub_10005D138((uint64_t)sub_10006A0D4, (uint64_t)&unk_100456F70);
}

uint64_t sub_100067FDC()
{
  return sub_10005D138((uint64_t)sub_10006A0DC, (uint64_t)&unk_100456F48);
}

uint64_t sub_10006801C(int a1, uint64_t a2)
{
  return sub_10005D75C(a1, a2, (uint64_t)&unk_100456F08, (uint64_t)sub_10006F368, (uint64_t)&unk_100456F20);
}

uint64_t sub_100068064()
{
  return sub_10005C544();
}

uint64_t sub_10006808C(char a1)
{
  return sub_10005E69C(a1, (uint64_t)&unk_100456EB8, (uint64_t)sub_10006F364, (uint64_t)&unk_100456ED0);
}

uint64_t sub_1000680D4(char a1)
{
  return sub_10005EF60(a1, (uint64_t)&unk_100456E68, (uint64_t)sub_10006A0FC, (uint64_t)&unk_100456E80);
}

uint64_t sub_10006811C(uint64_t a1)
{
  return sub_100061494(a1, (uint64_t)&unk_100456E18, (uint64_t)sub_10006B9F4, (uint64_t)&unk_100456E30);
}

uint64_t sub_100068164()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 24);
  unsigned __int8 v4 = 2;
  swift_bridgeObjectRetain();
  sub_10006A7B4(v1, v2, 0x12u, &v4, (void (*)(unsigned __int8 *__return_ptr, ifaddrs **))sub_100059C08);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_1000681E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 24);
  unsigned __int16 v5 = 0;
  unsigned int v4 = 0;
  unsigned __int8 v6 = 1;
  swift_bridgeObjectRetain();
  sub_10006A958(v1, v2, 0x12u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_10004F2A0);
  swift_bridgeObjectRelease();
  return v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 48);
}

unint64_t sub_100068284()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 24);
  unsigned int v4 = 0;
  unsigned __int8 v5 = 1;
  swift_bridgeObjectRetain();
  sub_10006A3B0(v1, v2, 2u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_10005AE48);
  swift_bridgeObjectRelease();
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_100068318(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005AEC0(a1 | ((HIDWORD(a1) & 1) << 32), a4);
}

void *sub_10006834C()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *(void *)(*v0 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  unsigned __int8 v5 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n();
  sub_10006A55C(v3, v2, 0x1Eu, (void (*)(void *__return_ptr, ifaddrs **))sub_10005B300, 0, &v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000683EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100068408(a1, a2, a3, a4, a5, a6, a7, 1u);
}

uint64_t sub_100068408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v12 = *(void *)(*(void *)v8 + 16);
  uint64_t v13 = *(void *)(*(void *)v8 + 24);
  uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100069DEC(v14, a2, a3, v12, v13, a8);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10006849C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void **)(*(void *)v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits  = v1;
  v3._object  = v2;
  AppleDevice.neighborDiscoveryTableClear(on:)(v3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100068500()
{
  return sub_10005F57C((uint64_t (*)(void))sub_10006CAF4, (uint64_t)&unk_100456D78, (uint64_t)sub_10006D158);
}

uint64_t sub_100068554()
{
  if (*(void *)(*(void *)(*(void *)v0 + 40) + 128))
  {
    swift_retain();
    sub_10005922C();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000685AC(uint64_t a1, uint64_t a2)
{
  return sub_10005F8B4(a1, a2, (uint64_t)&unk_100456D28, (uint64_t)sub_10006F534);
}

uint64_t sub_1000685EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10005FD8C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_100456D00, (uint64_t)sub_10006F360);
}

uint64_t sub_10006863C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10006CE8C(a1, a2, a3, a6, a7, a8, a9);
}

void sub_100068670(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_100068680()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000686B8(void *a1)
{
  return sub_1000486E0(a1, v1);
}

uint64_t sub_1000686C0()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10006878C()
{
  type metadata accessor for Logger();
  uint64_t v1 = *(void **)(v0 + 16);

  sub_100048EDC(v1);
}

uint64_t sub_1000687F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100068838(uint64_t a1)
{
  return sub_100050800(a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(void (**)(uint64_t))(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100068878(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

void *sub_1000688B8(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    uint64_t result = a3(&v5);
    if (!v3) {
      return (void *)v5;
    }
  }
  else
  {
    uint64_t result = ((void *(*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&v5 + 4), 0, 0);
    if (!v3) {
      return (void *)HIDWORD(v5);
    }
  }
  return result;
}

void *sub_100068914@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, _DWORD *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2  = v5;
  }
  return result;
}

uint64_t sub_100068958(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (sub_100042CD0(*(unsigned char *)(a1 + 16), *(unsigned char *)(a2 + 16)))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a2 + 32);
      uint64_t result = (v7 | v8) == 0;
      if (v7 && v8)
      {
        if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v7 == v8)
        {
          return 1;
        }
        else
        {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100068A18(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    if (a2 >= a1)
    {
      uint64_t v6 = a3 + 32;
      uint64_t v7 = a4;
      while (v4 < a2)
      {
        uint64_t v8 = v4 + 1;
        unint64_t v9 = 0xE200000000000000;
        uint64_t v10 = 28261;
        switch(v7)
        {
          case 1:
            unint64_t v9 = 0xE400000000000000;
            uint64_t v10 = 1818523489;
            break;
          case 2:
            unint64_t v9 = 0xE300000000000000;
            uint64_t v10 = 7233902;
            break;
          case 3:
            uint64_t v10 = 29289;
            break;
          case 4:
            unint64_t v9 = 0xE300000000000000;
            uint64_t v10 = 7826540;
            break;
          default:
            break;
        }
        unint64_t v11 = v9;
        String.append(_:)(*(Swift::String *)&v10);
        swift_bridgeObjectRelease();
        v12._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        if (!*(void *)(*(void *)v6 + 16) || (sub_10000DDE0(0, 0xE000000000000000), (v13 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_endAccess();
          return v4;
        }
        swift_retain();
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRelease();
        ++v4;
        if (a2 == v8) {
          return 0;
        }
      }
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x100068BE0);
  }
  return 0;
}

void *sub_100068BF4(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100068C34()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100068C6C()
{
  return sub_10004CCC0(*(void *)(v0 + 16));
}

uint64_t sub_100068C74()
{
  return sub_10004DC80(v0);
}

uint64_t type metadata accessor for AppleDevice(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047D2B8);
}

unint64_t sub_100068C9C()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v1 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v0, 0, 0);

  if (!v1)
  {
    unint64_t v19 = 0;
    _StringGuts.grow(_:)(70);
    v11._countAndFlagsBits  = 0xD000000000000044;
    v11._object  = (void *)0x80000001003DA230;
    String.append(_:)(v11);
    int v12 = SCError();
    SCErrorString(v12);
    v13._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v13);
LABEL_8:
    swift_bridgeObjectRelease();
    return v19;
  }
  if (!SCPreferencesLock(v1, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD00000000000002FLL;
    int v14 = SCError();
    SCErrorString(v14);
    v15._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v15);

    goto LABEL_8;
  }
  unsigned __int8 v2 = sub_10004F344(v1);
  if (!v4)
  {
    if (v2)
    {
      if (SCPreferencesCommitChanges(v1))
      {
        if (SCPreferencesApplyChanges(v1)) {
          goto LABEL_13;
        }
        uint64_t v18 = 0;
        _StringGuts.grow(_:)(51);
        unint64_t v6 = 0xD000000000000031;
        int v17 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        uint64_t v18 = 0;
        _StringGuts.grow(_:)(52);
        unint64_t v6 = 0xD000000000000032;
        int v17 = "Failed to commit SCPreferences changes with error ";
      }
      unint64_t v7 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v1);

    return 0;
  }
  uint64_t v5 = v3;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v18 = v5;
  unint64_t v6 = 0x7265206874697720;
  unint64_t v7 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v6);
  int v8 = SCError();
  SCErrorString(v8);
  v9._countAndFlagsBits  = String.init(cString:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v18;
  SCPreferencesUnlock(v1);

  return v10;
}

unint64_t sub_100068F3C(uint64_t a1, void *a2)
{
  uint64_t v4 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v5 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v4, 0, 0);

  if (!v5)
  {
    unint64_t v23 = 0;
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits  = 0xD000000000000044;
    v15._object  = (void *)0x80000001003DA230;
    String.append(_:)(v15);
    int v16 = SCError();
    SCErrorString(v16);
    v17._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v17);
LABEL_8:
    swift_bridgeObjectRelease();
    return v23;
  }
  if (!SCPreferencesLock(v5, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xD00000000000002FLL;
    int v18 = SCError();
    SCErrorString(v18);
    v19._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v19);

    goto LABEL_8;
  }
  char v6 = sub_10004F75C(v5, a1, a2);
  if (!v8)
  {
    if (v6)
    {
      if (SCPreferencesCommitChanges(v5))
      {
        if (SCPreferencesApplyChanges(v5)) {
          goto LABEL_13;
        }
        uint64_t v22 = 0;
        _StringGuts.grow(_:)(51);
        unint64_t v10 = 0xD000000000000031;
        uint64_t v21 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        uint64_t v22 = 0;
        _StringGuts.grow(_:)(52);
        unint64_t v10 = 0xD000000000000032;
        uint64_t v21 = "Failed to commit SCPreferences changes with error ";
      }
      unint64_t v11 = (unint64_t)(v21 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v5);

    return 0;
  }
  uint64_t v9 = v7;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v22 = v9;
  unint64_t v10 = 0x7265206874697720;
  unint64_t v11 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v10);
  int v12 = SCError();
  SCErrorString(v12);
  v13._countAndFlagsBits  = String.init(cString:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v22;
  SCPreferencesUnlock(v5);

  return v14;
}

uint64_t sub_1000691C4(const __SCPreferences *a1, void *a2)
{
  SCPreferencesLock(a1, 1u);
  SCPreferencesSynchronize(a1);
  if (a2)
  {
    uint64_t v4 = a2[25];
    SCPreferencesRef v5 = (void *)a2[26];
    char v6 = *(os_unfair_lock_s **)(a2[24] + 16);
    swift_retain();
    swift_retain();
    id v7 = v5;
    os_unfair_lock_lock(v6);
    swift_beginAccess();
    *(void *)(v4 + 16)  = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v6);

    swift_release();
    swift_release();
  }
  return SCPreferencesUnlock(a1);
}

uint64_t sub_10006928C(uint64_t a1, int a2, intptr_t a3)
{
  intptr_t v73 = a3;
  LODWORD(v3)  = a2;
  uint64_t v72 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v72 - 8);
  __chkstk_darwin();
  unint64_t v71 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v70 - 8);
  __chkstk_darwin();
  uint64_t v69 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
  uint64_t v8 = *(char **)(v68 + 64);
  __chkstk_darwin();
  uint64_t v67 = (uint64_t)&v55 - ((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t)&v55 - v9;
  __chkstk_darwin();
  uint64_t v74 = (char *)&v55 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin();
  int v16 = (uint64_t *)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    uint64_t v17 = qword_10047C178;
    uint64_t v55 = result;
    swift_retain();
    if (v17 != -1) {
LABEL_39:
    }
      swift_once();
    uint64_t v18 = static OS_dispatch_queue.p2p;
    *int v16 = static OS_dispatch_queue.p2p;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
    id v19 = (id)v18;
    LOBYTE(v18)  = _dispatchPreconditionTest(_:)();
    uint64_t v20 = *(void (**)(void *, uint64_t))(v13 + 8);
    v13 += 8;
    v20(v16, v12);
    if ((v18 & 1) == 0)
    {
      __break(1u);
      goto LABEL_41;
    }
    int v16 = (void *)sub_1003ABCF8(v3);
    char v21 = 0;
    io_connect_t v66 = *(_DWORD *)(v55 + 172);
    switch((int)v55)
    {
      case 1:
        IOAllowPowerChange(v66, v73);
        return swift_release();
      case 2:
        goto LABEL_8;
      case 3:
        char v21 = 1;
LABEL_8:
        uint64_t v22 = v74;
        *uint64_t v74 = v21;
        swift_storeEnumTagMultiPayload();
        sub_10006E4B4((uint64_t)v22, v10, type metadata accessor for DriverEvent);
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        uint64_t v12 = v24;
        BOOL v25 = os_log_type_enabled(v23, v24);
        int v61 = (int)v16;
        if (v25)
        {
          unint64_t v26 = (uint8_t *)swift_slowAlloc();
          int v16 = (void *)swift_slowAlloc();
          aBlock[0]  = (uint64_t)v16;
          uint64_t v80 = v6;
          *(_DWORD *)unint64_t v26 = 136315138;
          uint64_t v13 = v4;
          uint64_t v27 = DriverEvent.description.getter();
          v83[7]  = sub_100010680(v27, v28, aBlock);
          uint64_t v6 = v80;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100013308(v10, type metadata accessor for DriverEvent);
          _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v12, "%s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100013308(v10, type metadata accessor for DriverEvent);
        }
        uint64_t v29 = v55;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v55 + 24) + 16));
        uint64_t v30 = swift_allocObject();
        uint64_t v65 = v30;
        *(void *)(v30 + 16)  = 0;
        uint64_t v31 = (void *)(v30 + 16);
        uint64_t v64 = swift_allocObject();
        *(void *)(v64 + 16)  = 0;
        swift_beginAccess();
        uint64_t v32 = *(void *)(v29 + 32);
        uint64_t v33 = *(void *)(v32 + 64);
        uint64_t v56 = v32 + 64;
        uint64_t v10 = 1 << *(unsigned char *)(v32 + 32);
        uint64_t v34 = -1;
        if (v10 < 64) {
          uint64_t v34 = ~(-1 << v10);
        }
        uint64_t v3 = v34 & v33;
        uint64_t v75 = v32;
        swift_bridgeObjectRetain();
        long long v62 = v31;
        swift_beginAccess();
        int64_t v35 = 0;
        int64_t v63 = (unint64_t)(v10 + 63) >> 6;
        long long v60 = v8 + 7;
        long long v59 = v83;
        long long v58 = (void (**)(char *, uint64_t))(v4 + 8);
        long long v57 = (void (**)(char *, uint64_t))(v6 + 8);
        uint64_t v4 = v65;
        break;
      default:
        return swift_release();
    }
    while (1)
    {
      if (v3)
      {
        unint64_t v36 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        unint64_t v37 = v36 | (v35 << 6);
      }
      else
      {
        int64_t v38 = v35 + 1;
        if (__OFADD__(v35, 1)) {
          goto LABEL_38;
        }
        if (v38 >= v63)
        {
LABEL_35:
          swift_release();
          swift_release();
          swift_release();
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v55 + 24) + 16));
          swift_release();
          return sub_100013308((uint64_t)v74, type metadata accessor for DriverEvent);
        }
        unint64_t v39 = *(void *)(v56 + 8 * v38);
        ++v35;
        if (!v39)
        {
          int64_t v35 = v38 + 1;
          if (v38 + 1 >= v63) {
            goto LABEL_35;
          }
          unint64_t v39 = *(void *)(v56 + 8 * v35);
          if (!v39)
          {
            int64_t v35 = v38 + 2;
            if (v38 + 2 >= v63) {
              goto LABEL_35;
            }
            unint64_t v39 = *(void *)(v56 + 8 * v35);
            if (!v39)
            {
              int64_t v35 = v38 + 3;
              if (v38 + 3 >= v63) {
                goto LABEL_35;
              }
              unint64_t v39 = *(void *)(v56 + 8 * v35);
              if (!v39)
              {
                int64_t v40 = v38 + 4;
                if (v40 >= v63) {
                  goto LABEL_35;
                }
                unint64_t v39 = *(void *)(v56 + 8 * v40);
                if (!v39)
                {
                  while (1)
                  {
                    int64_t v35 = v40 + 1;
                    if (__OFADD__(v40, 1)) {
                      break;
                    }
                    if (v35 >= v63) {
                      goto LABEL_35;
                    }
                    unint64_t v39 = *(void *)(v56 + 8 * v35);
                    ++v40;
                    if (v39) {
                      goto LABEL_31;
                    }
                  }
LABEL_41:
                  __break(1u);
                  JUMPOUT(0x100069DC4);
                }
                int64_t v35 = v40;
              }
            }
          }
        }
LABEL_31:
        uint64_t v3 = (v39 - 1) & v39;
        unint64_t v37 = __clz(__rbit64(v39)) + (v35 << 6);
      }
      uint64_t v41 = *(void *)(*(void *)(v75 + 56) + 8 * v37);
      uint64_t v42 = *(void *)(v41
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      if (v42)
      {
        if (__OFADD__(*v62, 1))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v43 = *(void *)(v41
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                        + 8);
        *(void *)(v4 + 16)  = *v62 + 1;
        int v44 = *(void **)(v41
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
        uint64_t v76 = v41;
        id v77 = v44;
        uint64_t v45 = v67;
        uint64_t v80 = v35;
        sub_10006E4B4((uint64_t)v74, v67, type metadata accessor for DriverEvent);
        unint64_t v46 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
        unint64_t v47 = (unint64_t)&v60[v46] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v49 = (v48 + 11) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v50 = swift_allocObject();
        uint64_t v79 = v3;
        uint64_t v51 = v50;
        *(void *)(v50 + 16)  = v42;
        *(void *)(v50 + 24)  = v43;
        sub_100013368(v45, v50 + v46, type metadata accessor for DriverEvent);
        *(void *)(v51 + v47)  = v64;
        *(void *)(v51 + v48)  = v4;
        __int16 v52 = (_DWORD *)(v51 + v49);
        io_connect_t v53 = v66;
        *__int16 v52 = v61;
        v52[1]  = v53;
        *(void *)(v51 + ((v49 + 15) & 0xFFFFFFFFFFFFFFF8))  = v73;
        v83[2]  = sub_10006E234;
        v83[3]  = v51;
        aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
        aBlock[1]  = 1107296256;
        v83[0]  = sub_10000E5D0;
        v83[1]  = &unk_1004574E8;
        uint64_t v12 = (uint64_t)_Block_copy(aBlock);
        uint64_t v78 = v43;
        sub_100037FF4(v42);
        sub_100037FF4(v42);
        uint64_t v10 = v76;
        swift_retain();
        int v16 = v77;
        swift_retain();
        swift_retain();
        long long v54 = v69;
        static DispatchQoS.unspecified.getter();
        uint64_t v81 = _swiftEmptyArrayStorage;
        uint64_t v6 = sub_1000687F0((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        uint64_t v8 = v71;
        uint64_t v13 = v72;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v3 = v79;
        _Block_release((const void *)v12);
        swift_release();

        sub_100011E30(v42);
        (*v58)(v8, v13);
        (*v57)(v54, v70);
        swift_release();
        int64_t v35 = v80;
      }
    }
  }
  return result;
}

void *sub_100069DD4@<X0>(_DWORD *a1@<X8>)
{
  return sub_10006D79C(a1);
}

void sub_100069DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v13 = *(void *)(v6 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 16));
  swift_beginAccess();
  uint64_t v14 = *(void *)(v6 + 32);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10000DDE0(a4, a5);
    if (v16)
    {
      uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      unsigned int v18 = *(_DWORD *)(v17
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  if ((a5 & 0x1000000000000000) != 0 || !(a5 & 0x2000000000000000 | a4 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    unsigned int v18 = v23;
  }
  else
  {
    __chkstk_darwin();
    if ((a5 & 0x2000000000000000) != 0)
    {
      *(void *)char v21 = a4;
      uint64_t v22 = a5 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v18 = if_nametoindex(v21);
    }
    else
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        uint64_t v19 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v20 = a4 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v19 = _StringObject.sharedUTF8.getter();
      }
      unsigned int v18 = sub_1000688B8(v19, v20, (void *(*)(uint64_t *__return_ptr))sub_100069DD4);
    }
  }
LABEL_12:
  swift_beginAccess();
  sub_1001ACC60(a1 & 0xFFFFFFFFFFFFLL, a2, a3, v18, a6);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 16));
}

uint64_t sub_10006A068(uint64_t a1)
{
  return sub_100050B4C(a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_10006A0A8(uint64_t a1)
{
  return sub_100050FFC(a1, *(void (**)(uint64_t))(v1 + 16));
}

id sub_10006A0B0()
{
  return [*(id *)(*(void *)(v0 + 16) + 48) disassociateWithReason:qword_1003B3740[*(char *)(v0 + 24)]];
}

void sub_10006A0D4()
{
  sub_10005CEEC(v0);
}

void sub_10006A0DC()
{
  sub_10005D700(v0);
}

void sub_10006A0E4()
{
  sub_10005E3E8(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10006A0F0()
{
  sub_10005EC98(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for AppleDevice.GatewayMonitor(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_10047DA48);
}

unint64_t sub_10006A120(uint64_t a1, void *a2)
{
  uint64_t v4 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v5 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v4, 0, 0);

  if (!v5)
  {
    unint64_t v23 = 0;
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits  = 0xD000000000000044;
    v15._object  = (void *)0x80000001003DA230;
    String.append(_:)(v15);
    int v16 = SCError();
    SCErrorString(v16);
    v17._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v17);
LABEL_8:
    swift_bridgeObjectRelease();
    return v23;
  }
  if (!SCPreferencesLock(v5, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xD00000000000002FLL;
    int v18 = SCError();
    SCErrorString(v18);
    v19._countAndFlagsBits  = String.init(cString:)();
    String.append(_:)(v19);

    goto LABEL_8;
  }
  char v6 = sub_1000558B8(v5, a1, a2);
  if (!v8)
  {
    if (v6)
    {
      if (SCPreferencesCommitChanges(v5))
      {
        if (SCPreferencesApplyChanges(v5)) {
          goto LABEL_13;
        }
        uint64_t v22 = 0;
        _StringGuts.grow(_:)(51);
        unint64_t v10 = 0xD000000000000031;
        char v21 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        uint64_t v22 = 0;
        _StringGuts.grow(_:)(52);
        unint64_t v10 = 0xD000000000000032;
        char v21 = "Failed to commit SCPreferences changes with error ";
      }
      unint64_t v11 = (unint64_t)(v21 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v5);

    return 0;
  }
  uint64_t v9 = v7;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v22 = v9;
  unint64_t v10 = 0x7265206874697720;
  unint64_t v11 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v10);
  int v12 = SCError();
  SCErrorString(v12);
  v13._countAndFlagsBits  = String.init(cString:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v22;
  SCPreferencesUnlock(v5);

  return v14;
}

void sub_10006A3B0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  uint64_t v27 = 0;
  if (!getifaddrs(&v27))
  {
    os_log_type_t v24 = v27;
    if (v27)
    {
      uint64_t v25 = a4;
      ifa_flags  = v27->ifa_flags;
      ifa_next  = v27->ifa_next;
      ifa_name  = v27->ifa_name;
      unint64_t v28 = v27->ifa_next;
      uint64_t v29 = ifa_name;
      unsigned int v30 = ifa_flags;
      long long v14 = *(_OWORD *)&v27->ifa_addr;
      long long v31 = v14;
      long long v32 = *(_OWORD *)&v27->ifa_dstaddr;
      if (ifa_name)
      {
        uint64_t v15 = v14;
        while (String.init(cString:)() != a1 || v16 != a2)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v19 = ifa_next->ifa_flags;
          long long v20 = *(_OWORD *)&ifa_next->ifa_addr;
          long long v21 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          unint64_t v23 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          uint64_t v22 = v23->ifa_name;
          unint64_t v28 = ifa_next;
          uint64_t v29 = v22;
          unsigned int v30 = v19;
          long long v31 = v20;
          long long v32 = v21;
          uint64_t v15 = v20;
          if (!v22) {
            goto LABEL_15;
          }
        }
        swift_bridgeObjectRelease();
LABEL_9:
        if (!v15) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v15 + 1) == a3)
        {
          a5(&v26, &v28);
          if (v5) {
            goto LABEL_16;
          }
          int v18 = BYTE4(v26);
          *(_DWORD *)uint64_t v25 = v26;
          *(unsigned char *)(v25 + 4)  = v18;
          if (v18 != 1) {
            goto LABEL_16;
          }
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v24);
  }
}

void sub_10006A55C(uint64_t a1, uint64_t a2, unsigned __int8 a3, void (*a4)(void *__return_ptr, ifaddrs **), uint64_t a5, void **a6)
{
  void (*v37)(void *__return_ptr, ifaddrs **);
  int v38;
  void v39[3];
  uint64_t v40;
  ifaddrs *v41;
  ifaddrs *v42;
  char *v43;
  unsigned int v44;
  long long v45;
  long long v46;

  uint64_t v41 = 0;
  if (getifaddrs(&v41)) {
    return;
  }
  int v12 = v41;
  if (!v41)
  {
LABEL_22:
    long long v31 = v12;
    goto LABEL_23;
  }
  unint64_t v37 = a4;
  ifa_flags  = v41->ifa_flags;
  ifa_next  = v41->ifa_next;
  ifa_name  = v41->ifa_name;
  uint64_t v42 = v41->ifa_next;
  uint64_t v43 = ifa_name;
  int v44 = ifa_flags;
  long long v16 = *(_OWORD *)&v41->ifa_addr;
  uint64_t v45 = v16;
  long long v32 = v41;
  unint64_t v46 = *(_OWORD *)&v41->ifa_dstaddr;
  if (!ifa_name)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  int64_t v38 = a3;
  uint64_t v17 = v16;
  uint64_t v33 = a6;
  while (1)
  {
    if (String.init(cString:)() == a1 && v18 == a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        goto LABEL_18;
      }
    }
    if (!v17) {
      goto LABEL_27;
    }
    if (*(unsigned __int8 *)(v17 + 1) == v38) {
      break;
    }
LABEL_18:
    if (!ifa_next)
    {
      int v12 = v32;
      goto LABEL_22;
    }
    unsigned int v26 = ifa_next->ifa_flags;
    long long v27 = *(_OWORD *)&ifa_next->ifa_addr;
    long long v28 = *(_OWORD *)&ifa_next->ifa_dstaddr;
    unsigned int v30 = ifa_next;
    ifa_next  = ifa_next->ifa_next;
    uint64_t v29 = v30->ifa_name;
    uint64_t v42 = ifa_next;
    uint64_t v43 = v29;
    int v44 = v26;
    uint64_t v45 = v27;
    unint64_t v46 = v28;
    uint64_t v17 = v27;
    if (!v29) {
      goto LABEL_26;
    }
  }
  v37(v39, &v42);
  if (!v6)
  {
    uint64_t v20 = v40;
    if (v40 != 1)
    {
      uint64_t v35 = v39[0];
      uint64_t v36 = v39[2];
      uint64_t v34 = v39[1];
      long long v21 = *a6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a6  = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v21 = sub_1000C60A8(0, v21[2] + 1, 1, v21);
        *a6  = v21;
      }
      unint64_t v24 = v21[2];
      unint64_t v23 = v21[3];
      if (v24 >= v23 >> 1)
      {
        long long v21 = sub_1000C60A8((void *)(v23 > 1), v24 + 1, 1, v21);
        *uint64_t v33 = v21;
      }
      v21[2]  = v24 + 1;
      uint64_t v25 = &v21[4 * v24];
      a6  = (void **)v33;
      v25[4]  = v35;
      v25[5]  = v34;
      v25[6]  = v36;
      v25[7]  = v20;
    }
    goto LABEL_18;
  }
  long long v31 = v32;
LABEL_23:
  freeifaddrs(v31);
}

void sub_10006A7B4(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 *a4, void (*a5)(unsigned __int8 *__return_ptr, ifaddrs **))
{
  void (*v25)(unsigned __int8 *__return_ptr, ifaddrs **);
  unsigned __int8 v26;
  ifaddrs *v27;
  ifaddrs *v28;
  char *v29;
  unsigned int v30;
  long long v31;
  long long v32;

  long long v27 = 0;
  if (!getifaddrs(&v27))
  {
    unint64_t v24 = v27;
    if (v27)
    {
      uint64_t v25 = a5;
      ifa_flags  = v27->ifa_flags;
      ifa_next  = v27->ifa_next;
      ifa_name  = v27->ifa_name;
      long long v28 = v27->ifa_next;
      uint64_t v29 = ifa_name;
      unsigned int v30 = ifa_flags;
      long long v14 = *(_OWORD *)&v27->ifa_addr;
      long long v31 = v14;
      long long v32 = *(_OWORD *)&v27->ifa_dstaddr;
      if (ifa_name)
      {
        uint64_t v15 = v14;
        while (String.init(cString:)() != a1 || v16 != a2)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v19 = ifa_next->ifa_flags;
          long long v20 = *(_OWORD *)&ifa_next->ifa_addr;
          long long v21 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          unint64_t v23 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          uint64_t v22 = v23->ifa_name;
          long long v28 = ifa_next;
          uint64_t v29 = v22;
          unsigned int v30 = v19;
          long long v31 = v20;
          long long v32 = v21;
          uint64_t v15 = v20;
          if (!v22) {
            goto LABEL_15;
          }
        }
        swift_bridgeObjectRelease();
LABEL_9:
        if (!v15) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v15 + 1) == a3)
        {
          v25(&v26, &v28);
          if (v5) {
            goto LABEL_16;
          }
          int v18 = v26;
          *a4  = v26;
          if (v18 != 2) {
            goto LABEL_16;
          }
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v24);
  }
}

void sub_10006A958(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  void (*v26)(uint64_t *__return_ptr, ifaddrs **);
  uint64_t v27;
  ifaddrs *v28;
  ifaddrs *v29;
  char *v30;
  unsigned int v31;
  long long v32;
  long long v33;

  long long v28 = 0;
  if (!getifaddrs(&v28))
  {
    uint64_t v25 = v28;
    if (v28)
    {
      unsigned int v26 = a5;
      ifa_flags  = v28->ifa_flags;
      ifa_next  = v28->ifa_next;
      ifa_name  = v28->ifa_name;
      uint64_t v29 = v28->ifa_next;
      unsigned int v30 = ifa_name;
      long long v31 = ifa_flags;
      long long v14 = *(_OWORD *)&v28->ifa_addr;
      long long v32 = v14;
      uint64_t v33 = *(_OWORD *)&v28->ifa_dstaddr;
      if (ifa_name)
      {
        uint64_t v15 = v14;
        while (String.init(cString:)() != a1 || v16 != a2)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_9;
          }
LABEL_13:
          if (!ifa_next) {
            goto LABEL_16;
          }
          unsigned int v20 = ifa_next->ifa_flags;
          long long v21 = *(_OWORD *)&ifa_next->ifa_addr;
          long long v22 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          unint64_t v24 = ifa_next;
          ifa_next  = ifa_next->ifa_next;
          unint64_t v23 = v24->ifa_name;
          uint64_t v29 = ifa_next;
          unsigned int v30 = v23;
          long long v31 = v20;
          long long v32 = v21;
          uint64_t v33 = v22;
          uint64_t v15 = v21;
          if (!v23) {
            goto LABEL_15;
          }
        }
        swift_bridgeObjectRelease();
LABEL_9:
        if (!v15) {
          __break(1u);
        }
        if (*(unsigned __int8 *)(v15 + 1) == a3)
        {
          v26(&v27, &v29);
          if (v5) {
            goto LABEL_16;
          }
          int v18 = v27;
          int v19 = BYTE6(v27);
          *(_WORD *)(a4 + 4)  = WORD2(v27);
          *(_DWORD *)a4  = v18;
          *(unsigned char *)(a4 + 6)  = v19;
          if (v19 != 1) {
            goto LABEL_16;
          }
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v25);
  }
}

void sub_10006AB10()
{
  uint64_t v1 = v0;
  type metadata accessor for DispatchTimeInterval();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v2 = __chkstk_darwin();
  uint64_t v8 = (unint64_t *)(v0
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
  if (*(unsigned char *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                + 16) != 2
    || *(_OWORD *)v8 != 0)
  {
    swift_retain_n();
    *(void *)&long long v52 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v52, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      v53[0]  = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136315138;
      if (*((unsigned char *)v8 + 16))
      {
        if (*((unsigned char *)v8 + 16) == 1)
        {
          unint64_t v11 = 0xEB0000000064656CLL;
          uint64_t v12 = 0x6961462050434844;
        }
        else
        {
          if (*(_OWORD *)v8 == 0) {
            uint64_t v12 = 0x72756769666E6F43;
          }
          else {
            uint64_t v12 = 0x74616E696D726554;
          }
          if (*(_OWORD *)v8 == 0) {
            unint64_t v11 = 0xEB00000000676E69;
          }
          else {
            unint64_t v11 = 0xEA00000000006465;
          }
        }
      }
      else
      {
        uint64_t v26 = 0x6569667369746153;
        if (*v8)
        {
          unint64_t v27 = 0xE900000000000064;
        }
        else
        {
          uint64_t v26 = 0x6673697461736E55;
          unint64_t v27 = 0xEB00000000646569;
        }
        uint64_t v54 = v26;
        unint64_t v55 = v27;
        swift_bridgeObjectRetain();
        v28._object  = (void *)0xEA00000000007265;
        v28._countAndFlagsBits  = 0x7473657571655220;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        uint64_t v12 = v54;
        unint64_t v11 = v27;
      }
      uint64_t v54 = sub_100010680(v12, v11, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v52, v9, "Unable to start internet sharing requester because in %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    return;
  }
  unint64_t v46 = v6;
  uint64_t v47 = v3;
  uint64_t v45 = v7;
  unint64_t v48 = (void *)((char *)v43 - v4);
  uint64_t v49 = v5;
  uint64_t v50 = v2;
  uint64_t v56 = 0;
  uint64_t v14 = *(void *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
  Swift::String v13 = *(void **)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                 + 8);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10006A120(v14, v13);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v17)
  {
    *(void *)&long long v18 = 136315394;
    long long v52 = v18;
    id v51 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_10006C474(v15, v17, 1);
      uint64_t v19 = v56 + 1;
      if (__OFADD__(v56, 1)) {
        break;
      }
      ++v56;
      swift_retain_n();
      unsigned int v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = v14;
        uint64_t v23 = swift_slowAlloc();
        v53[0]  = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = v52;
        swift_bridgeObjectRetain();
        *(void *)(v23 + 4)  = sub_100010680(v22, (unint64_t)v13, v53);
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12)  = 2048;
        uint64_t v19 = v56;
        *(void *)(v23 + 14)  = v56;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to start DHCP on %s, retry %ld", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v14 = v22;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      swift_bridgeObjectRetain();
      unint64_t v15 = sub_10006A120(v14, v13);
      uint64_t v17 = v24;
      swift_bridgeObjectRelease();
      BOOL v25 = v17 != 0;
      if (!v17) {
        unint64_t v15 = 0;
      }
      if (v19 > 4 || !v17) {
        goto LABEL_33;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v15 = 0;
  BOOL v25 = 0;
LABEL_33:
  uint64_t v29 = *v8;
  uint64_t v30 = v8[1];
  *uint64_t v8 = v15;
  v8[1]  = v17;
  char v31 = *((unsigned char *)v8 + 16);
  *((unsigned char *)v8 + 16)  = v25;
  sub_10006C44C(v29, v30, v31);
  sub_10006C474(v29, v30, v31);
  sub_10005508C(v29, v30, v31);
  sub_10006C474(v29, v30, v31);
  if (!*((unsigned char *)v8 + 16))
  {
    *(void *)&long long v52 = v14;
    uint64_t v8 = v48;
    uint64_t v17 = v49;
    *unint64_t v48 = 15;
    uint64_t v14 = v50;
    int v44 = *(void (**)(unint64_t *, void, uint64_t))(v17 + 104);
    v44(v8, enum case for DispatchTimeInterval.seconds(_:), v50);
    if (qword_10047C168 == -1)
    {
LABEL_35:
      id v51 = (id)static OS_dispatch_queue.nan;
      uint64_t v32 = swift_allocObject();
      v43[1]  = v32;
      swift_weakInit();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16)  = 0;
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(v17 + 16))(v47, v8, v14);
      uint64_t v34 = (void *)swift_allocObject();
      v34[2]  = sub_10006D464;
      void v34[3] = v32;
      v34[4]  = v33;
      uint64_t v36 = (void (*)(uint64_t, void, uint64_t))v44;
      uint64_t v35 = v45;
      uint64_t v37 = v14;
      v44((unint64_t *)v45, enum case for DispatchTimeInterval.never(_:), v14);
      uint64_t v38 = (uint64_t)v46;
      *unint64_t v46 = 100;
      v36(v38, enum case for DispatchTimeInterval.milliseconds(_:), v37);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      swift_retain_n();
      id v39 = v51;
      swift_retain();
      uint64_t v40 = sub_100150F08(v47, v39, v35, v38, (uint64_t)sub_10006D4AC, (uint64_t)v34);

      swift_release();
      swift_beginAccess();
      *(void *)(v33 + 16)  = v40;
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(unint64_t *, uint64_t))(v49 + 8))(v48, v50);
      swift_release();
      uint64_t v41 = *(void *)(v1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor);
      uint64_t v42 = swift_allocObject();
      swift_weakInit();
      *(void *)(v41 + 40)  = sub_10006D4B8;
      *(void *)(v41 + 48)  = v42;
      swift_release();
      sub_100053D60(v52, (uint64_t)v13);
      return;
    }
LABEL_38:
    swift_once();
    goto LABEL_35;
  }
}

uint64_t sub_10006B388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v34 = v9;
  unint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v37 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(void *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor)  = 0;
  RoutingSocket.init()(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  uint64_t v11 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16)  = 0u;
  *(unsigned char *)(v11 + 32)  = -1;
  uint64_t v12 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v12 + 4)  = 0;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 6)  = 1;
  uint64_t v13 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  uint64_t v14 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  unint64_t v15 = nw_parameters_create();
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 16) + 40))(a2);
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v16 & 0x1000000000000000))
  {
    sub_100010BCC(&qword_10047DB98);
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __chkstk_darwin();
  *(&v34 - 2)  = (uint64_t)sub_1000540F8;
  *(&v34 - 1)  = 0;
  if ((v19 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0)
    {
      uint64_t v20 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v20 = _StringObject.sharedUTF8.getter();
    }
    nw_interface_t v40 = (nw_interface_t)sub_100068878(v20, v21, (uint64_t (*)(void))sub_10006CAF4);
    goto LABEL_7;
  }
  uint64_t v38 = v18;
  uint64_t v39 = v19 & 0xFFFFFFFFFFFFFFLL;
  nw_interface_t v40 = (nw_interface_t)nw_interface_create_with_name();
  swift_bridgeObjectRelease();
LABEL_9:
  nw_parameters_require_interface(v15, v40);
  swift_unknownObjectRelease();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Start monitoring network path for gateway address updates", v24, 2u);
    swift_slowDealloc();
  }

  uint64_t result = nw_path_create_evaluator_for_endpoint();
  if (result)
  {
    uint64_t v26 = result;
    if (qword_10047C178 != -1) {
      swift_once();
    }
    unint64_t v27 = (void *)static OS_dispatch_queue.p2p;
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v35, a2);
    unint64_t v29 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v30 = (char *)swift_allocObject();
    uint64_t v31 = v36;
    *((void *)v30 + 2)  = a2;
    *((void *)v30 + 3)  = v31;
    *((void *)v30 + 4)  = v28;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v30[v29], v10, a2);
    type metadata accessor for AppleDevice.NetworkPathMonitor();
    uint64_t v32 = swift_allocObject();
    id v33 = v27;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v26, v33, (uint64_t)sub_10006D564, (uint64_t)v30);
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(v4 + v37)  = v32;
    swift_release();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006B858(NSObject *a1)
{
  return sub_10005FC94(a1, *(void (**)(void))(v1 + 16));
}

uint64_t type metadata accessor for AppleDevice.NetworkPathMonitor()
{
  return self;
}

void sub_10006B888(uint64_t a1, __int16 a2, char a3)
{
  sub_100060450(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(void (**)(void))(v3 + 32));
}

uint64_t type metadata accessor for AppleDevice.InternetSharingProviderSession(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047D728);
}

uint64_t sub_10006B8B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060D4C(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(uint64_t (**)(void))(v3 + 32));
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047D810);
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047D8E8);
}

uint64_t sub_10006B904(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006B960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006B9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AppleDevice.EventSource()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10006BA10(uint64_t a1)
{
  uint64_t result = sub_1000687F0(&qword_10047D1F8, (void (*)(uint64_t))type metadata accessor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10006BA68(uint64_t a1)
{
  uint64_t result = sub_1000687F0(&qword_10047D200, (void (*)(uint64_t))type metadata accessor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

_UNKNOWN **sub_10006BAC0()
{
  return &protocol witness table for AppleKeychain;
}

_UNKNOWN **sub_10006BACC()
{
  return &protocol witness table for LockedPreferencesStorage<A>;
}

uint64_t sub_10006BAD8(uint64_t a1)
{
  uint64_t result = sub_1000687F0(&qword_10047D258, (void (*)(uint64_t))type metadata accessor for AppleDevice);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10006BB30(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_10006BB38(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10006BB74()
{
  return type metadata accessor for AppleDevice(0);
}

uint64_t sub_10006BB7C()
{
  uint64_t result = type metadata accessor for RoutingSocket();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10006BCE0()
{
  return type metadata accessor for AppleDevice.InterfaceHandle(0);
}

uint64_t type metadata accessor for AppleDevice.InterfaceHandle(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047D440);
}

uint64_t sub_10006BD08()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006BDE4()
{
  return type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
}

uint64_t sub_10006BDEC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006BEB8()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
}

uint64_t sub_10006BEC0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006BF80()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
}

uint64_t sub_10006BF88()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006C04C()
{
  return type metadata accessor for AppleDevice.GatewayMonitor(0);
}

void sub_10006C054()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_10006C1AC(319, &qword_10047DA58, (void (*)(uint64_t))type metadata accessor for RoutingSocket);
    if (v1 <= 0x3F)
    {
      sub_10006C1AC(319, (unint64_t *)&qword_10047DA60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_10006C1AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10006C200()
{
  swift_unknownObjectUnownedDestroy();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006C238(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectUnownedCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10006C270(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_unknownObjectUnownedCopyAssign() + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_10006C2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectUnownedTakeInit();
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8)  = result;
  return result;
}

uint64_t sub_10006C2E8(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectUnownedTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingRequesterSession.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10006C48C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10006F350);
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingRequesterSession.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_10006C508(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10006F350, (void (*)(uint64_t, uint64_t, uint64_t))sub_10006F354);
}

__n128 initializeWithTake for NANAvailabilityEntry.BandChannelEntries(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0]  = a2[1].n128_u8[0];
  *a1  = result;
  return result;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingRequesterSession.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C58C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10006F354);
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingRequesterSession.State()
{
  return &type metadata for AppleDevice.InternetSharingRequesterSession.State;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingProviderSession.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10006C48C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10006C44C);
}

uint64_t sub_10006C44C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AppleDevice.InternetSharingProviderSession.State(uint64_t a1)
{
  return sub_10006C474(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10006C474(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006C48C(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1  = v5;
  *(void *)(a1 + 8)  = v6;
  *(unsigned char *)(a1 + 16)  = v7;
  return a1;
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingProviderSession.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_10006C508(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_10006C44C, (void (*)(uint64_t, uint64_t, uint64_t))sub_10006C474);
}

uint64_t *sub_10006C508(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1  = v7;
  a1[1]  = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16)  = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingProviderSession.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C58C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10006C474);
}

uint64_t *sub_10006C58C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1  = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16)  = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16)  = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10006C664(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10006C67C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8)  = 0;
    LOBYTE(a2)  = 2;
  }
  *(unsigned char *)(result + 16)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingProviderSession.State()
{
  return &type metadata for AppleDevice.InternetSharingProviderSession.State;
}

void destroy for AppleDevice.RemovedInterfaceHandle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 56))
  {
    swift_release();
  }
}

uint64_t initializeWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 40)  = v6;
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  uint64_t v8 = (_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 56)  = v7;
    *(void *)(a1 + 64)  = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56)  = *v8;
  }
  return a1;
}

uint64_t assignWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40)  = v4;
  id v6 = v4;

  int v7 = *(_DWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(a1 + 48)  = v7;
  uint64_t v9 = *(void *)(a2 + 56);
  if (!v8)
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v9;
      *(void *)(a1 + 64)  = v11;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = v9;
  *(void *)(a1 + 64)  = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  *(__n128 *)(a1 + 16)  = result;
  return result;
}

uint64_t assignWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);

  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51)  = *(_DWORD *)(a2 + 51);
  if (!v7)
  {
    if (v6)
    {
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56)  = v6;
      *(void *)(a1 + 64)  = v9;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = v6;
  *(void *)(a1 + 64)  = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.RemovedInterfaceHandle()
{
  return &type metadata for AppleDevice.RemovedInterfaceHandle;
}

unint64_t sub_10006CA2C()
{
  unint64_t result = qword_10047DB88;
  if (!qword_10047DB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DB88);
  }
  return result;
}

uint64_t sub_10006CA80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_10006CA98(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_10006CA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006CAA8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10006CAE8(NSObject *a1)
{
  sub_100054128(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void *sub_10006CAF4@<X0>(void *a1@<X8>)
{
  return sub_10006D5A8(a1);
}

uint64_t sub_10006CB0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006CB44()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10006CB6C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v8)
  {
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = v8;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  a4(&v14, v13, v12);
  return 0;
}

uint64_t sub_10006CC20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(v7 + 40);
  swift_beginAccess();
  sub_1000136F4(v14 + 72, (uint64_t)v25, &qword_10047D0D0);
  uint64_t v15 = v26;
  sub_1000380B4((uint64_t)v25, &qword_10047D0D0);
  if (v15)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1003B2F60;
    *(unsigned char *)(v16 + 16)  = 0;
    a4();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject();
    *((void *)v18 + 2)  = a4;
    *((void *)v18 + 3)  = a5;
    *((void *)v18 + 4)  = a6;
    *((void *)v18 + 5)  = a7;
    uint64_t v19 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    uint64_t v20 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)();
    uint64_t v21 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject();
    *(void *)(v20 + v21)  = sub_10005398C();
    uint64_t v22 = v20
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v22 = 0;
    *(void *)(v22 + 8)  = 0;
    *(unsigned char *)(v22 + 16)  = 2;
    os_log_type_t v23 = (void *)(v20
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *os_log_type_t v23 = a1;
    v23[1]  = a2;
    uint64_t v24 = (uint64_t (**)(uint64_t, uint64_t, char))(v20
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *uint64_t v24 = sub_10006F35C;
    v24[1]  = v18;
    uint64_t v26 = v19;
    v25[0]  = v20;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    sub_10006D1A4((uint64_t)v25, v14 + 72, &qword_10047D0D0);
    swift_endAccess();
    swift_release();
    sub_10006AB10();
    return swift_release();
  }
}

uint64_t sub_10006CE8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(v7 + 40);
  swift_beginAccess();
  sub_1000136F4(v14 + 72, (uint64_t)v25, &qword_10047D0D0);
  uint64_t v15 = v26;
  sub_1000380B4((uint64_t)v25, &qword_10047D0D0);
  if (v15)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1003B2F60;
    *(unsigned char *)(v16 + 16)  = 0;
    a4();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject();
    *((void *)v18 + 2)  = a4;
    *((void *)v18 + 3)  = a5;
    *((void *)v18 + 4)  = a6;
    *((void *)v18 + 5)  = a7;
    uint64_t v19 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    uint64_t v20 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)();
    uint64_t v21 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject();
    *(void *)(v20 + v21)  = sub_10005398C();
    uint64_t v22 = v20
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(void *)uint64_t v22 = 0;
    *(void *)(v22 + 8)  = 0;
    *(unsigned char *)(v22 + 16)  = 2;
    os_log_type_t v23 = (void *)(v20
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *os_log_type_t v23 = a1;
    v23[1]  = a2;
    uint64_t v24 = (uint64_t (**)(uint64_t, uint64_t, char))(v20
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *uint64_t v24 = sub_10006F35C;
    v24[1]  = v18;
    uint64_t v26 = v19;
    v25[0]  = v20;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    sub_10006D1A4((uint64_t)v25, v14 + 72, &qword_10047D0D0);
    swift_endAccess();
    swift_release();
    sub_10006AB10();
    return swift_release();
  }
}

uint64_t sub_10006D100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10006D110(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10006D150()
{
  return sub_10006E2F4(32);
}

uint64_t sub_10006D158(NSObject *a1)
{
  return sub_100056A28(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10006D160()
{
  return sub_10006E2F4(32);
}

uint64_t sub_10006D168()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006D178()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10006D1A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100010BCC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006D20C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10006D24C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006D28C()
{
  return sub_10006E2F4(32);
}

uint64_t sub_10006D294(NSObject *a1)
{
  return sub_100056754(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10006D29C()
{
  return sub_10006E2F4(32);
}

uint64_t sub_10006D2A4(NSObject *a1)
{
  return sub_10005710C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_10006D2C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006D2D8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10006D380(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];

  sub_100062FF4(a1, a2, v7, v9, v10);
}

id sub_10006D430()
{
  return [*(id *)(*(void *)(v0 + 16) + 48) updateSoftAPBand:*(unsigned __int8 *)(v0 + 24) + 1];
}

uint64_t sub_10006D44C()
{
  return swift_release();
}

id sub_10006D454(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10006D464()
{
  return sub_10005608C();
}

uint64_t sub_10006D46C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006D4AC()
{
  return sub_1001508A8(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10006D4B8(char a1)
{
  return sub_100056154(a1);
}

uint64_t sub_10006D4C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006D4D0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006D518(int a1, void *a2)
{
  return sub_100053388(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

char *sub_10006D524(char *__source)
{
  uint64_t result = *(char **)(v1 + 16);
  if (result) {
    return (char *)strlcpy(result, __source, 0x10uLL);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006D564(NSObject *a1)
{
  return sub_100056CFC(a1, v1[4], (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80)), v1[2], v1[3]);
}

void *sub_10006D5A8@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1  = v5;
  }
  return result;
}

uint64_t sub_10006D5F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006D6B4(NSObject *a1)
{
  return sub_100058104(a1, v1[4], (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80)), v1[2], v1[3]);
}

uint64_t sub_10006D6F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10006D708(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
    {
      __src  = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v4 = __src;
      uint64_t v5 = *(void **)(v2 + 40);
      return memmove(v5, v4, __len);
    }
  }
  return __src;
}

void *sub_10006D79C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1  = v5;
  }
  return result;
}

uint64_t sub_10006D7E0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006D7F0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_1000135D4(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned char *)(v5 + 40), *(unsigned char *)(v5 + 41));
      break;
    case 1:
      type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10006DE90(*(void *)(v5 + 8));
          uint64_t v7 = v5 + *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
          uint64_t v8 = type metadata accessor for AWDLActionFrame.Header(0);
          uint64_t v9 = v7 + *(int *)(v8 + 32);
          uint64_t v10 = type metadata accessor for DispatchTimeInterval();
          uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
          v11(v9, v10);
          v11(v7 + *(int *)(v8 + 36), v10);
          swift_bridgeObjectRelease();
          break;
        case 2u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v12 = v5 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
          uint64_t v13 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
          swift_bridgeObjectRelease();
          type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 6u:
          sub_10006B9A0(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
          break;
        case 8u:

          break;
        case 9u:
          uint64_t v14 = type metadata accessor for DispatchTimeInterval();
          uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
          v15(v0 + v3, v14);
          uint64_t v16 = type metadata accessor for AWDLIdleActivity(0);
          v15(v5 + *(int *)(v16 + 20), v14);
          break;
        default:
          goto LABEL_6;
      }
      break;
    case 0:
      __int16 v26 = *(_WORD *)(v5 + 360);
      long long v24 = *(_OWORD *)(v5 + 320);
      long long v25 = *(_OWORD *)(v5 + 336);
      long long v22 = *(_OWORD *)(v5 + 288);
      long long v23 = *(_OWORD *)(v5 + 304);
      long long v20 = *(_OWORD *)(v5 + 256);
      long long v21 = *(_OWORD *)(v5 + 272);
      long long v18 = *(_OWORD *)(v5 + 224);
      long long v19 = *(_OWORD *)(v5 + 240);
      sub_10006DC3C(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(void *)(v5 + 144),
        *(void *)(v5 + 152),
        *(void *)(v5 + 160),
        *(void *)(v5 + 168),
        *(void *)(v5 + 176),
        *(void *)(v5 + 184),
        *(void *)(v5 + 192),
        *(void *)(v5 + 200),
        *(void *)(v5 + 208),
        *(void *)(v5 + 216),
        v18,
        *((uint64_t *)&v18 + 1),
        v19,
        *((uint64_t *)&v19 + 1),
        v20,
        *((uint64_t *)&v20 + 1),
        v21,
        *((uint64_t *)&v21 + 1),
        v22,
        *((uint64_t *)&v22 + 1),
        v23,
        *((uint64_t *)&v23 + 1),
        v24,
        *((uint64_t *)&v24 + 1),
        v25,
        *((uint64_t *)&v25 + 1),
        *(void *)(v5 + 352),
        v26,
        SHIBYTE(v26));
      break;
  }
LABEL_6:
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v2 | 7);
}

void sub_10006DC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,char a47)
{
  switch(a47)
  {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 13:
    case 20:
      goto LABEL_2;
    case 16:
      sub_10006DE90(a4);
      break;
    case 18:
      LOBYTE(v47)  = a24;
      sub_10006E6A4(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
        a23,
        v47,
        (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
      break;
    case 19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_10006DE90(uint64_t result)
{
  if (result >> 30 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10006DEB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t v22 = (a12 >> 60) & 3;
  switch(v22)
  {
    case 2:
      sub_10006DE90(a2);
      break;
    case 1:
      unint64_t v23 = a12 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10006DF78(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

void sub_10006DF78(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  if (a12 >> 62 == 2)
  {
    sub_10006E0D8(a2, a3, a4);
    sub_10000C95C(a6, a7);
  }
  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006E0D8(a9, a10, a11);
    sub_10000C95C(a13, a14);
    sub_10006E0F4(a15, a16, a17, a18, a19, a20, a21);
  }
}

uint64_t sub_10006E0D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10000C970(a2, a3);
  }
  return result;
}

uint64_t sub_10006E0F4(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1) {
    return sub_10006E108(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_10006E108(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 1:
    case 7:
LABEL_4:
      return swift_bridgeObjectRelease();
    case 2:
    case 8:
      uint64_t result = a2;
      a2  = a3;
      goto LABEL_8;
    case 3:
      sub_10000C970(a2, a3);
      uint64_t result = a4;
      a2  = a5;
      goto LABEL_8;
    case 5:
      sub_10006E0D8(result, a2, a3);
      return sub_10000C95C(a5, a6);
    case 6:
LABEL_8:
      uint64_t result = sub_10000C970(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006E234()
{
  uint64_t v1 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + v3);
  uint64_t v9 = *(void *)(v0 + v4);
  int v10 = *(_DWORD *)(v0 + v5);
  int v11 = *(_DWORD *)(v0 + v5 + 4);
  uint64_t v12 = *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10004D4E0(v6, v7, v0 + v2, v8, v9, v10, v11, v12);
}

uint64_t sub_10006E2EC()
{
  return sub_10006E2F4(48);
}

uint64_t sub_10006E2F4(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006E340()
{
  return sub_10004D81C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(_DWORD *)(v0 + 32), *(_DWORD *)(v0 + 36), *(void *)(v0 + 40));
}

uint64_t sub_10006E350()
{
  return sub_10004C460(v0);
}

uint64_t sub_10006E358()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006E390(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 403)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E3AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 460)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E3C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E3E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

unint64_t sub_10006E400()
{
  unint64_t result = qword_10047DC90;
  if (!qword_10047DC90)
  {
    sub_100014434(&qword_10047DC88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DC90);
  }
  return result;
}

uint64_t sub_10006E46C()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006E47C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 62);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E498(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E4B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006E51C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 4);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E538(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 19;
  return result;
}

uint64_t sub_10006E544(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006E5A0(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 21;
  return result;
}

uint64_t sub_10006E5AC(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 20;
  return result;
}

uint64_t sub_10006E5B8(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 17;
  return result;
}

uint64_t sub_10006E5C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 993)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E5E0(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 16;
  return result;
}

uint64_t sub_10006E5EC(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 15;
  return result;
}

uint64_t sub_10006E5F8(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 90);
  int v2 = -4 - v1;
  if ((int)(-4 - v1) < 0) {
    int v2 = -1;
  }
  if (v1 > 0x80000000) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006E61C(uint64_t a1)
{
  LOBYTE(v3)  = *(unsigned char *)(a1 + 184);
  sub_10006E6A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    v3,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
  return a1;
}

uint64_t sub_10006E6A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v23 = a5 >> 16 == 4294967293 || a5 >> 17 == 0x7FFFFFFF;
  if (!v23 || (a12 & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    return a22(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

void sub_10006E740(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t v22 = (a12 >> 60) & 3;
  switch(v22)
  {
    case 2:
      sub_10006EAC4(a2);
      break;
    case 1:
      unint64_t v23 = a12 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10006E808(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v23, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      break;
    case 0:
      swift_bridgeObjectRetain();
      break;
  }
}

void sub_10006E808(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  if (a12 >> 62 == 2)
  {
    sub_10006E968(a2, a3, a4);
    sub_100038004(a6, a7);
  }
  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10006E968(a9, a10, a11);
    sub_100038004(a13, a14);
    sub_10006E984(a15, a16, a17, a18, a19, a20, a21);
  }
}

uint64_t sub_10006E968(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_100013D44(a2, a3);
  }
  return result;
}

uint64_t sub_10006E984(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1) {
    return sub_10006E998(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_10006E998(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 1:
    case 7:
LABEL_4:
      return swift_bridgeObjectRetain();
    case 2:
    case 8:
      uint64_t result = a2;
      a2  = a3;
      goto LABEL_8;
    case 3:
      sub_100013D44(a2, a3);
      uint64_t result = a4;
      a2  = a5;
      goto LABEL_8;
    case 5:
      sub_10006E968(result, a2, a3);
      return sub_100038004(a5, a6);
    case 6:
LABEL_8:
      uint64_t result = sub_100013D44(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006EAC4(uint64_t result)
{
  if (result >> 30 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10006EAE4(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 18;
  return result;
}

uint64_t sub_10006EAF0(uint64_t a1)
{
  sub_10006EB6C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(unsigned char *)(a1 + 216));
  return a1;
}

uint64_t sub_10006EB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a12 >> 16 != 4294967292 || (a19 & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    LOBYTE(v29)  = a28;
    return sub_10006E6A4(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
             a27,
             v29,
             (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006DEB0);
  }
  return result;
}

uint64_t sub_10006EC20(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 14;
  return result;
}

uint64_t sub_10006EC2C(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 13;
  return result;
}

uint64_t sub_10006EC38(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 12;
  return result;
}

uint64_t sub_10006EC44(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 11;
  return result;
}

uint64_t sub_10006EC50(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 10;
  return result;
}

uint64_t sub_10006EC5C(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 9;
  return result;
}

uint64_t sub_10006EC68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100010BCC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006ECCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2080)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006ECE8(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 8;
  return result;
}

uint64_t sub_10006ECF4(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 7;
  return result;
}

uint64_t sub_10006ED00(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 6;
  return result;
}

uint64_t sub_10006ED0C(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 5;
  return result;
}

uint64_t sub_10006ED18(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 3;
  return result;
}

uint64_t sub_10006ED24(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 2;
  return result;
}

uint64_t sub_10006ED30(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 1;
  return result;
}

uint64_t sub_10006ED3C(uint64_t result)
{
  *(unsigned char *)(result + 361)  = 0;
  return result;
}

void sub_10006ED44(unsigned char *a1)
{
  a1[2080]  = 1;
}

uint64_t sub_10006ED74(uint64_t result)
{
  *(unsigned char *)(result + 2080)  = 0;
  return result;
}

double sub_10006ED7C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(void *)(a1 + 80)  = 0;
  *(void *)(a1 + 88)  = 0xFFFFFFFC0000;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 201)  = 0u;
  return result;
}

void sub_10006EDAC(unsigned char *a1)
{
  a1[993]  = 1;
}

uint64_t sub_10006EDDC(uint64_t result)
{
  *(unsigned char *)(result + 993)  = 0;
  return result;
}

void sub_10006EDE4(void *a1)
{
  *a1  = 0x200000000;
  bzero(a1 + 1, 0xF18uLL);
}

void sub_10006EDF4(_OWORD *a1)
{
  *a1  = xmmword_1003B2FA0;
  bzero(a1 + 1, 0x640uLL);
}

double sub_10006EE08(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0x2000000000000;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  return result;
}

double sub_10006EE34(uint64_t a1)
{
  *(void *)(a1 + 256)  = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(unsigned char *)(a1 + 264)  = 1;
  return result;
}

uint64_t sub_10006EE68(uint64_t result)
{
  *(unsigned char *)(result + 264)  = 0;
  return result;
}

double sub_10006EE70(uint64_t a1)
{
  *(void *)(a1 + 176)  = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(unsigned char *)(a1 + 184)  = 1;
  return result;
}

uint64_t sub_10006EE9C(uint64_t result)
{
  *(unsigned char *)(result + 184)  = 0;
  return result;
}

double sub_10006EEA4(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 416)  = 0u;
  *(_OWORD *)(a1 + 432)  = 0u;
  *(_OWORD *)(a1 + 384)  = 0u;
  *(_OWORD *)(a1 + 400)  = 0u;
  *(_OWORD *)(a1 + 352)  = 0u;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 320)  = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 288)  = 0u;
  *(_OWORD *)(a1 + 304)  = 0u;
  *(_OWORD *)(a1 + 256)  = 0u;
  *(_OWORD *)(a1 + 272)  = 0u;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 444)  = 0u;
  *(unsigned char *)(a1 + 460)  = 1;
  return result;
}

uint64_t sub_10006EEF4(uint64_t result)
{
  *(unsigned char *)(result + 460)  = 0;
  return result;
}

double sub_10006EEFC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 384)  = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 352)  = 0u;
  *(_OWORD *)(a1 + 304)  = 0u;
  *(_OWORD *)(a1 + 320)  = 0u;
  *(_OWORD *)(a1 + 272)  = 0u;
  *(_OWORD *)(a1 + 288)  = 0u;
  *(_OWORD *)(a1 + 240)  = 0u;
  *(_OWORD *)(a1 + 256)  = 0u;
  *(_OWORD *)(a1 + 208)  = 0u;
  *(_OWORD *)(a1 + 224)  = 0u;
  *(_OWORD *)(a1 + 176)  = 0u;
  *(_OWORD *)(a1 + 192)  = 0u;
  *(_OWORD *)(a1 + 144)  = 0u;
  *(_OWORD *)(a1 + 160)  = 0u;
  *(_OWORD *)(a1 + 112)  = 0u;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 80)  = 0u;
  *(_OWORD *)(a1 + 96)  = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 64)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(_OWORD *)(a1 + 32)  = 0u;
  *(_OWORD *)a1  = 0u;
  *(_DWORD *)(a1 + 399)  = 0;
  *(unsigned char *)(a1 + 403)  = 1;
  return result;
}

uint64_t sub_10006EF48(uint64_t result)
{
  *(unsigned char *)(result + 403)  = 0;
  return result;
}

uint64_t sub_10006EF50(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32)  = *((void *)a1 + 4);
  *(_OWORD *)a2  = v2;
  *(_OWORD *)(a2 + 16)  = v3;
  return a2;
}

uint64_t sub_10006EF68()
{
  sub_100010754(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10006EFB0()
{
  return sub_10004BF08((void *)(v0 + 16), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_10006EFC4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10006F024()
{
  return sub_1000444B4(*(void (**)(unsigned char *))(v0 + 80), *(void *)(v0 + 88));
}

uint64_t sub_10006F050(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  id v4 = v2;
  swift_bridgeObjectRetain();
  sub_100037FF4(v3);
  return a1;
}

uint64_t sub_10006F0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100011E30(v2);
  return a1;
}

uint64_t sub_10006F110()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 72)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 88) & ~v3;
  unint64_t v6 = (((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v3 | 7);
}

void sub_10006F22C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = *(void *)(v0 + v3);
  unint64_t v6 = *(void **)(v0 + v3 + 8);

  sub_1000496BC(v0 + 16, v0 + v2, v5, v6, v4);
}

uint64_t sub_10006F2CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006F30C()
{
  return sub_1000489E0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10006F314(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10006F380@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10004F2EC(a1, a2);
}

uint64_t IDPool.init()()
{
  return Set.init()();
}

uint64_t IDPool.init(ignoring:)()
{
  return Set.init()();
}

uint64_t IDPool.availableID()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v82 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v3 = *(void *)(v82 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v88 = type metadata accessor for ClosedRange<>.Index();
  uint64_t v90 = *(void *)(v88 - 8);
  __chkstk_darwin();
  uint64_t v83 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v97 = (char *)v68 - v6;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  __chkstk_darwin();
  uint64_t v79 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v85 = (char *)v68 - v9;
  uint64_t v74 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v81 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v80 = (char *)v68 - v11;
  __chkstk_darwin();
  uint64_t v93 = (char *)v68 - v12;
  __chkstk_darwin();
  uint64_t v14 = (char *)v68 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)v68 - v15;
  uint64_t v17 = type metadata accessor for ClosedRange();
  uint64_t v78 = *(char **)(v17 - 8);
  __chkstk_darwin();
  uint64_t v94 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v77 = (char *)v68 - v19;
  uint64_t v89 = v3;
  uint64_t v98 = v3;
  uint64_t v99 = AssociatedConformanceWitness;
  uint64_t v96 = AssociatedConformanceWitness;
  swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for IndexingIterator();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v86 = v20;
  uint64_t v87 = v21;
  __chkstk_darwin();
  intptr_t v73 = (char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v95 = (char *)v68 - v23;
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  long long v25 = v85;
  __int16 v26 = &v85[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v27 = v74;
  uint64_t v71 = v17;
  uint64_t v28 = TupleTypeMetadata2;
  uint64_t v84 = (void (*)(char *, char *, uint64_t))TupleTypeMetadata2;
  uint64_t v29 = (char *)(v74 + 32);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v69 = v16;
  v30(v85, v16, v2);
  uint64_t v70 = v14;
  v30(v26, v14, v2);
  uint64_t v31 = v79;
  uint64_t v32 = &v79[*(int *)(v28 + 48)];
  id v33 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v33(v79, v25, v2);
  v68[1]  = v27 + 16;
  v68[0]  = v33;
  v33(v32, v26, v2);
  v30(v94, v31, v2);
  uint64_t v34 = (char *)(v27 + 8);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v27 + 8);
  v35(v32, v2);
  uint64_t v36 = &v31[*((int *)v84 + 12)];
  v30(v31, v25, v2);
  v30(v36, v26, v2);
  uint64_t v37 = v71;
  uint64_t v38 = v94;
  uint64_t v39 = &v94[*(int *)(v71 + 36)];
  uint64_t v84 = v30;
  uint64_t v85 = v29;
  v30(v39, v36, v2);
  uint64_t v76 = v35;
  v35(v31, v2);
  nw_interface_t v40 = v78;
  uint64_t v41 = v77;
  (*((void (**)(char *, char *, uint64_t))v78 + 4))(v77, v38, v37);
  uint64_t v42 = v73;
  (*((void (**)(char *, char *, uint64_t))v40 + 2))(v73, v41, v37);
  uint64_t v43 = v97;
  ClosedRange<>.startIndex.getter();
  (*((void (**)(char *, uint64_t))v40 + 1))(v41, v37);
  uint64_t v44 = v86;
  uint64_t v45 = &v42[*(int *)(v86 + 36)];
  uint64_t v46 = v90 + 32;
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
  v75(v45, v43, v88);
  uint64_t v47 = v87;
  unint64_t v48 = v95;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v95, v42, v44);
  uint64_t v49 = &v48[*(int *)(v44 + 36)];
  uint64_t v94 = (char *)(v46 - 24);
  uint64_t v90 = v46;
  uint64_t v79 = (char *)(v46 - 16);
  id v77 = v34;
  uint64_t v78 = v34 + 40;
  uint64_t v92 = v2;
  while (1)
  {
    id v51 = v97;
    ClosedRange<>.endIndex.getter();
    char v52 = static ClosedRange<>.Index.== infix(_:_:)();
    io_connect_t v53 = *(void (**)(char *, uint64_t))v94;
    uint64_t v54 = v51;
    uint64_t v55 = v88;
    (*(void (**)(char *, uint64_t))v94)(v54, v88);
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v44);
      uint64_t v65 = 1;
      io_connect_t v66 = v72;
      uint64_t v63 = v2;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v66, v65, 1, v63);
    }
    uint64_t v56 = v97;
    long long v57 = v83;
    (*(void (**)(char *, char *, uint64_t))v79)(v83, v49, v55);
    uint64_t v58 = v2;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))v78)(v57, 1, v2);
    if (result == 1) {
      goto LABEL_15;
    }
    long long v59 = v80;
    long long v60 = v84;
    v84(v80, v57, v58);
    v60(v93, v59, v92);
    ClosedRange<>.index(after:)();
    v53(v49, v55);
    int v61 = v49;
    v75(v49, v56, v55);
    long long v62 = v81;
    uint64_t v63 = v92;
    v60(v81, v93, v92);
    if (!*(void *)(v91 + 8)) {
      break;
    }
    swift_bridgeObjectRetain();
    char v64 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = v86;
    if ((v64 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_5:
    v76(v62, v63);
    uint64_t v47 = v87;
    unint64_t v48 = v95;
    uint64_t v50 = v63;
    uint64_t v49 = v61;
    uint64_t v2 = v50;
  }
  uint64_t v44 = v86;
LABEL_4:
  if (Set.contains(_:)()) {
    goto LABEL_5;
  }
  ((void (*)(char *, char *, uint64_t))v68[0])(v70, v62, v63);
  type metadata accessor for Set();
  uint64_t v67 = v69;
  Set.insert(_:)();
  v76(v67, v63);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v95, v44);
  io_connect_t v66 = v72;
  v84(v72, v62, v63);
  uint64_t v65 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v66, v65, 1, v63);
}

uint64_t IDPool.giveBack(id:)()
{
  uint64_t v0 = type metadata accessor for Optional();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v5 - v2;
  type metadata accessor for Set();
  Set.remove(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t IDPool.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a1;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  __chkstk_darwin();
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = *(void **)(a3 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = *(void *)(a4 + 8);
  uint64_t v50 = *(void *)(v16 + 32);
  uint64_t v17 = type metadata accessor for ClosedRange();
  uint64_t v51 = *(void *)(v17 - 8);
  uint64_t v52 = v17;
  __chkstk_darwin();
  unint64_t v48 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v49 = (char *)&v45 - v19;
  uint64_t v54 = v16;
  if (a2) {
    uint64_t v20 = Set.count.getter();
  }
  else {
    uint64_t v20 = 0;
  }
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v46 = v20;
  uint64_t v47 = a4;
  uint64_t v22 = v8;
  uint64_t v23 = v13;
  uint64_t v24 = TupleTypeMetadata2;
  long long v25 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  __int16 v26 = (void (*)(char *, char *, uint64_t))v11[4];
  v26(v10, v15, a3);
  uint64_t v27 = v25;
  v26(v25, v23, a3);
  uint64_t v28 = &v22[*(int *)(v24 + 48)];
  uint64_t v29 = (void (*)(char *, char *, uint64_t))v11[2];
  v29(v22, v10, a3);
  v29(v28, v27, a3);
  uint64_t v30 = v48;
  v26(v48, v22, a3);
  uint64_t v31 = (void (*)(char *, uint64_t))v11[1];
  v31(v28, a3);
  uint64_t v32 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
  v26(v22, v10, a3);
  v26(v32, v27, a3);
  uint64_t v33 = v52;
  v26(&v30[*(int *)(v52 + 36)], v32, a3);
  v31(v22, a3);
  uint64_t v34 = v51;
  uint64_t v35 = v49;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v49, v30, v33);
  uint64_t v36 = v50;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v59 = v36;
  uint64_t v60 = AssociatedConformanceWitness;
  swift_getWitnessTable();
  uint64_t v38 = Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  uint64_t result = Set.count.getter();
  uint64_t v39 = v38 - result;
  if (__OFSUB__(v38, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v40 = v39 - v46;
  if (!__OFSUB__(v39, v46))
  {
    uint64_t v57 = 0;
    unint64_t v58 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    uint64_t v56 = v40;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v57 = v41;
    unint64_t v58 = v43;
    v44._countAndFlagsBits  = 0x62616C6961766120;
    v44._object  = (void *)0xEE0073444920656CLL;
    String.append(_:)(v44);
    return v57;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t IDPool.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[0]  = a3;
  uint64_t v5 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  sub_100010BCC(qword_10047DD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16)  = xmmword_1003B2450;
  *(void *)(v11 + 32)  = 1684370293;
  *(void *)(v11 + 40)  = 0xE400000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (Set.count.getter() <= 10)
  {
    uint64_t v14 = (void *)type metadata accessor for Set();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17[1]  = Set.count.getter();
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v12;
    v13._countAndFlagsBits  = 0x657375206E6920;
    v13._object  = (void *)0xE700000000000000;
    String.append(_:)(v13);
    a1  = v18;
    *(void *)(v11 + 56)  = v19;
    uint64_t v14 = &type metadata for String;
  }
  *(void *)(v11 + 72)  = v14;
  *(void *)(v11 + 48)  = a1;
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  type metadata accessor for IDPool();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Mirror.AncestorRepresentation.generated(_:), v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100070890(uint64_t a1)
{
  return IDPool.description.getter(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1000708A0@<X0>(uint64_t a1@<X8>)
{
  return IDPool.customMirror.getter(*v1, v1[1], a1);
}

uint64_t type metadata accessor for IDPool()
{
  return sub_100038354();
}

uint64_t sub_1000708CC()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100070908(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100070940(void *a1, void *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000709A0(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t LongTermPairingKeyStore.__allocating_init(keychain:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  LongTermPairingKeyStore.init(keychain:)(a1);
  return v2;
}

uint64_t *LongTermPairingKeyStore.init(keychain:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 104), a1);
  return v1;
}

uint64_t sub_100070B74(uint64_t a1, uint64_t a2, void *a3)
{
  char v6 = sub_100157184(v3 + *(void *)(*(void *)v3 + 104), a2, (uint64_t)a3, *(void *)(*(void *)v3 + 80), *(void *)(*(void *)v3 + 88));
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  if ((v6 & 1) == 0)
  {
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v18 = v14;
      swift_bridgeObjectRetain();
      v15._countAndFlagsBits  = a2;
      v15._object  = a3;
      String.append(_:)(v15);
      v16._countAndFlagsBits  = 39;
      v16._object  = (void *)0xE100000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      sub_100010680(39, 0xE100000000000000, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      Swift::String v13 = "Failed to install new pairing keys for %s";
      goto LABEL_6;
    }
LABEL_7:
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v7, v8)) {
    goto LABEL_7;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  uint64_t v10 = swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 136315138;
  uint64_t v18 = v10;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits  = a2;
  v11._object  = a3;
  String.append(_:)(v11);
  v12._countAndFlagsBits  = 39;
  v12._object  = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  sub_100010680(39, 0xE100000000000000, &v18);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Swift::String v13 = "Installed new pairing keys for %s";
LABEL_6:
  _os_log_impl((void *)&_mh_execute_header, v7, v8, v13, v9, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_8:

  return v6 & 1;
}

Swift::Void __swiftcall LongTermPairingKeyStore.installNewKeysToKeychainIfNecessary(for:)(CoreP2P::NANServiceName a1)
{
  object  = a1.string._object;
  countAndFlagsBits  = a1.string._countAndFlagsBits;
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(countAndFlagsBits, object, 1, (uint64_t)v4);
  sub_10007197C((uint64_t)v4);
}

uint64_t LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  int v47 = a3;
  uint64_t v48 = a4;
  os_log_type_t v8 = *(void **)v4;
  uint64_t v41 = type metadata accessor for SymmetricKeySize();
  uint64_t v38 = *(void *)(v41 - 8);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v40 - 8);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  Swift::String v44 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  unint64_t v42 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v43 = (uint64_t)&v35 - v15;
  uint64_t v16 = v8[10];
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v35 - v18;
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, &v5[v8[13]], v16);
  uint64_t v22 = v8[11];
  swift_bridgeObjectRetain();
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  sub_1001574FC((uint64_t)v19, a1, (uint64_t *)a2, v16, v22, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    uint64_t v23 = v48;
    sub_10007197C((uint64_t)v21);
    if ((v47 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v23, 1, 1, v12);
    }
    uint64_t v24 = v36;
    UUID.init()();
    if (qword_10047C140 != -1) {
      swift_once();
    }
    uint64_t v25 = v41;
    uint64_t v26 = sub_1000151B8(v41, (uint64_t)qword_100480848);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v26, v25);
    type metadata accessor for LongTermPairingKeys.Identity(0);
    uint64_t v27 = (uint64_t)v44;
    SymmetricKey.init(size:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v27, v24, v40);
    P256.Signing.PrivateKey.init(compactRepresentable:)();
    uint64_t v28 = (uint64_t)v42;
    Logger.init(subsystem:category:)();
    sub_1000719DC(v27, v28 + *(int *)(v12 + 20));
    type metadata accessor for LongTermPairingKeys.PairedDevices();
    memset(v49, 0, sizeof(v49));
    uint64_t v50 = 0;
    swift_allocObject();
    uint64_t v29 = sub_10015D558(0, 0, (uint64_t)v49);
    sub_100071AA4(v27, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    *(void *)(v28 + *(int *)(v12 + 24))  = v29;
    uint64_t v30 = v43;
    sub_100071A40(v28, v43);
    uint64_t v32 = v45;
    uint64_t v31 = v46;
    LOBYTE(v29)  = sub_100070B74(v30, v45, v46);
    sub_100071AA4(v30, type metadata accessor for LongTermPairingKeys);
    if (v29) {
      return LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(v32, v31, 0);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v23, 1, 1, v12);
    }
  }
  else
  {
    uint64_t v34 = v48;
    sub_100071A40((uint64_t)v21, v48);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v34, 0, 1, v12);
  }
}

uint64_t LongTermPairingKeyStore.customMirror.getter()
{
  type metadata accessor for Mirror.AncestorRepresentation();
  __chkstk_darwin();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0;
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v5 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for LongTermPairingKeyStore();
  sub_100010BCC(&qword_10047DC10);
  sub_100071B44((unint64_t *)&qword_100484470, &qword_10047DC10);
  sub_100110BD8((uint64_t)v2);
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t *LongTermPairingKeyStore.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + qword_100488418;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  return v0;
}

uint64_t LongTermPairingKeyStore.__deallocating_deinit()
{
  LongTermPairingKeyStore.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_100071794()
{
  return LongTermPairingKeyStore.customMirror.getter();
}

BOOL LongTermPairingKeys.AuthenticationType.init(apiAuthenticationType:)(uint64_t a1)
{
  return a1 != 1;
}

BOOL LongTermPairingKeys.AuthenticationType.init(rawValue:)(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FF58, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

_UNKNOWN **static LongTermPairingKeys.AuthenticationType.allCases.getter()
{
  return &off_10044FF90;
}

uint64_t LongTermPairingKeys.AuthenticationType.rawValue.getter()
{
  return 0x6E6961686379656BLL;
}

uint64_t sub_100071830@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F5D8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3 != 0;
  return result;
}

void sub_100071884(void *a1@<X8>)
{
  *a1  = 0x6E6961686379656BLL;
  a1[1]  = 0xE800000000000000;
}

void sub_1000718A0(void *a1@<X8>)
{
  *a1  = &off_10044FFB8;
}

Swift::Int sub_1000718B0()
{
  return Hasher._finalize()();
}

uint64_t sub_100071904()
{
  return String.hash(into:)();
}

Swift::Int sub_10007191C()
{
  return Hasher._finalize()();
}

uint64_t Optional<A>.attributeFilter.getter(char a1)
{
  if (a1) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_10007197C(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004852C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000719DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071AA4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for LongTermPairingKeyStore()
{
  return sub_100038354();
}

uint64_t sub_100071B1C()
{
  return sub_100071B44(&qword_10047DD88, &qword_10047DD90);
}

uint64_t sub_100071B44(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100071B98()
{
  unint64_t result = qword_10047DD98[0];
  if (!qword_10047DD98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047DD98);
  }
  return result;
}

uint64_t sub_100071BF0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

unsigned char *_s18AuthenticationTypeOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100071D5CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.AuthenticationType()
{
  return &type metadata for LongTermPairingKeys.AuthenticationType;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  unint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16)  = v1;
  *unint64_t v1 = 0;
  return v0;
}

Swift::Void __swiftcall Lock.lock()()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t Lock.init()()
{
  unint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16)  = v1;
  *unint64_t v1 = 0;
  return v0;
}

uint64_t Lock.deinit()
{
  swift_slowDealloc();
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  swift_slowDealloc();

  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall Lock.tryLock()()
{
  return os_unfair_lock_trylock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

BOOL sub_100071EC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100071ED8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

Swift::Int sub_100071F04()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100071F4C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100071F78()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100071FBC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007201C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t NANReasonCode.description.getter(char a1)
{
  unint64_t result = 0x6465767265736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6669636570736E75;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 5:
      unint64_t result = 0x6D65766F6D206F6ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0x7974697275636573;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100072248()
{
  return NANReasonCode.description.getter(*v0);
}

uint64_t _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 0xEu) {
    return 14;
  }
  else {
    return result;
  }
}

unint64_t sub_100072268()
{
  unint64_t result = qword_10047DEC0;
  if (!qword_10047DEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DEC0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NANReasonCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NANReasonCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100072418);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

unsigned char *sub_100072440(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANReasonCode()
{
  return &type metadata for NANReasonCode;
}

unint64_t sub_100072458()
{
  unint64_t result = qword_10047DEC8;
  if (!qword_10047DEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DEC8);
  }
  return result;
}

const char *NANPMK.length.unsafeMutableAddressor()
{
  return " ";
}

uint64_t static NANBitmap.Band.ghz_60.getter()
{
  return 32;
}

uint64_t NANPMK.init(pmk:)(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v2)  = HIDWORD(result) - result;
        if (__OFSUB__(HIDWORD(result), result))
        {
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x100072548);
        }
        uint64_t v2 = (int)v2;
LABEL_7:
        if (v2 == 32) {
          return result;
        }
LABEL_8:
        sub_10000C95C(result, a2);
        break;
      case 2uLL:
        uint64_t v4 = *(void *)(result + 16);
        uint64_t v3 = *(void *)(result + 24);
        BOOL v5 = __OFSUB__(v3, v4);
        uint64_t v2 = v3 - v4;
        if (!v5) {
          goto LABEL_7;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v2 = BYTE6(a2);
        goto LABEL_7;
    }
  }
  return 0;
}

uint64_t NANPMK.init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = v7;
    sub_100039448((uint64_t)v6, v7);
    uint64_t v3 = UnkeyedDecodingContainer.decodeData(with:)(32, v4);
    sub_100010754((uint64_t)v6);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

uint64_t static NANPMK.zero.getter()
{
  return 0x2000000000;
}

void sub_100072674()
{
}

uint64_t sub_1000726A0()
{
  return 1635017060;
}

void sub_1000726B4(unsigned char *a1@<X8>)
{
  *a1  = 1;
}

uint64_t sub_1000726C0(uint64_t a1)
{
  unint64_t v2 = sub_100074288();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000726FC(uint64_t a1)
{
  unint64_t v2 = sub_100074288();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100073F44(a1, a2, a3, &qword_10047DEE0, (void (*)(void))sub_100074288);
}

uint64_t sub_100072784@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v5 = v11;
  sub_100039448((uint64_t)v10, v11);
  uint64_t v6 = UnkeyedDecodingContainer.decodeData(with:)(32, v5);
  uint64_t v8 = v7;
  sub_100010754((uint64_t)v10);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v6;
  a2[1]  = v8;
  return result;
}

uint64_t sub_100072858(void *a1)
{
  return NANPMK.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100072874()
{
  uint64_t result = sub_10011A478(0x204B4D50204E414EuLL, 0xEC000000656D614ELL);
  qword_10047DED0  = result;
  *(void *)algn_10047DED8  = v1;
  return result;
}

uint64_t NANPMK.pmkid(for:initiatorAddress:responderAddress:serviceName:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7 = 1 << a1;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x55) != 0) {
    return sub_1000728EC(v8, v9, a4, a5, a6, a7);
  }
  else {
    return sub_100072F54(v8, v9, a4, a5, a6, a7);
  }
}

uint64_t sub_1000728EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v53 = a5;
  unint64_t v54 = a6;
  uint64_t v46 = a4;
  uint64_t v43 = a3;
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  __chkstk_darwin();
  uint64_t v55 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SHA256Digest();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  __chkstk_darwin();
  uint64_t v45 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for SHA256();
  uint64_t v44 = *(void *)(v50 - 8);
  __chkstk_darwin();
  unint64_t v42 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010BCC(&qword_10047DF48);
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v52 = v13;
  __chkstk_darwin();
  uint64_t v49 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047BF10 != -1) {
    swift_once();
  }
  unint64_t v41 = a2 >> 40;
  unint64_t v40 = HIDWORD(a2);
  unint64_t v39 = a2 >> 24;
  unint64_t v38 = a2 >> 16;
  unint64_t v37 = a2 >> 8;
  unint64_t v36 = a2;
  uint64_t v15 = qword_10047DED0;
  unint64_t v16 = *(void *)algn_10047DED8;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v17 = swift_allocObject();
  long long v35 = xmmword_1003B2F40;
  *(_OWORD *)(v17 + 16)  = xmmword_1003B2F40;
  *(_WORD *)(v17 + 32)  = a1;
  *(unsigned char *)(v17 + 34)  = BYTE2(a1);
  *(unsigned char *)(v17 + 35)  = BYTE3(a1);
  *(unsigned char *)(v17 + 36)  = BYTE4(a1);
  *(unsigned char *)(v17 + 37)  = BYTE5(a1);
  sub_100013D44(v15, v16);
  uint64_t v18 = sub_1001265EC(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  *(void *)&long long v61 = v15;
  *((void *)&v61 + 1)  = v16;
  sub_100013D44(v15, v16);
  sub_100125FAC(v18, v20);
  sub_10000C970(v18, v20);
  sub_10000C970(v15, v16);
  long long v21 = v61;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16)  = v35;
  *(unsigned char *)(v22 + 32)  = v36;
  *(unsigned char *)(v22 + 33)  = v37;
  *(unsigned char *)(v22 + 34)  = v38;
  *(unsigned char *)(v22 + 35)  = v39;
  *(unsigned char *)(v22 + 36)  = v40;
  *(unsigned char *)(v22 + 37)  = v41;
  uint64_t v23 = sub_1001265EC(v22);
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  long long v60 = v21;
  sub_100013D44(v21, *((unint64_t *)&v21 + 1));
  sub_100125FAC(v23, v25);
  sub_10000C970(v23, v25);
  sub_10000C970(v21, *((unint64_t *)&v21 + 1));
  long long v26 = v60;
  swift_bridgeObjectRetain();
  uint64_t v27 = v42;
  SHA256.init()();
  Swift::String v28 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v28._countAndFlagsBits, (uint64_t)v28._object);
  swift_bridgeObjectRelease();
  uint64_t v29 = v45;
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
  long long v30 = v61;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v27, v50);
  long long v61 = v26;
  sub_100013D44(v26, *((unint64_t *)&v26 + 1));
  sub_100125FAC(v30, *((unint64_t *)&v30 + 1));
  sub_10000C970(v30, *((unint64_t *)&v30 + 1));
  sub_10000C970(v26, *((unint64_t *)&v26 + 1));
  long long v60 = v61;
  uint64_t v58 = v53;
  unint64_t v59 = v54;
  sub_100013D44(v53, v54);
  uint64_t v31 = v55;
  SymmetricKey.init<A>(data:)();
  sub_100074BC4(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
  sub_100074B70();
  uint64_t v32 = v49;
  static HMAC.authenticationCode<A>(for:using:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v57);
  sub_10000C970(v60, *((unint64_t *)&v60 + 1));
  uint64_t v33 = v52;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
  return v61;
}

uint64_t sub_100072F54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v53 = a5;
  unint64_t v54 = a6;
  uint64_t v47 = a4;
  uint64_t v43 = a3;
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  __chkstk_darwin();
  uint64_t v55 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SHA256Digest();
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v49 = v10;
  __chkstk_darwin();
  uint64_t v45 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for SHA256();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin();
  unint64_t v42 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010BCC(&qword_10047DF60);
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v52 = v13;
  __chkstk_darwin();
  uint64_t v50 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047BF10 != -1) {
    swift_once();
  }
  unint64_t v41 = a2 >> 40;
  unint64_t v40 = HIDWORD(a2);
  unint64_t v39 = a2 >> 24;
  unint64_t v38 = a2 >> 16;
  unint64_t v37 = a2 >> 8;
  unint64_t v36 = a2;
  uint64_t v15 = qword_10047DED0;
  unint64_t v16 = *(void *)algn_10047DED8;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v17 = swift_allocObject();
  long long v35 = xmmword_1003B2F40;
  *(_OWORD *)(v17 + 16)  = xmmword_1003B2F40;
  *(_WORD *)(v17 + 32)  = a1;
  *(unsigned char *)(v17 + 34)  = BYTE2(a1);
  *(unsigned char *)(v17 + 35)  = BYTE3(a1);
  *(unsigned char *)(v17 + 36)  = BYTE4(a1);
  *(unsigned char *)(v17 + 37)  = BYTE5(a1);
  sub_100013D44(v15, v16);
  uint64_t v18 = sub_1001265EC(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  *(void *)&long long v61 = v15;
  *((void *)&v61 + 1)  = v16;
  sub_100013D44(v15, v16);
  sub_100125FAC(v18, v20);
  sub_10000C970(v18, v20);
  sub_10000C970(v15, v16);
  long long v21 = v61;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16)  = v35;
  *(unsigned char *)(v22 + 32)  = v36;
  *(unsigned char *)(v22 + 33)  = v37;
  *(unsigned char *)(v22 + 34)  = v38;
  *(unsigned char *)(v22 + 35)  = v39;
  *(unsigned char *)(v22 + 36)  = v40;
  *(unsigned char *)(v22 + 37)  = v41;
  uint64_t v23 = sub_1001265EC(v22);
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  long long v60 = v21;
  sub_100013D44(v21, *((unint64_t *)&v21 + 1));
  sub_100125FAC(v23, v25);
  sub_10000C970(v23, v25);
  sub_10000C970(v21, *((unint64_t *)&v21 + 1));
  long long v26 = v60;
  swift_bridgeObjectRetain();
  uint64_t v27 = v42;
  SHA256.init()();
  Swift::String v28 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v28._countAndFlagsBits, (uint64_t)v28._object);
  swift_bridgeObjectRelease();
  uint64_t v29 = v45;
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
  long long v30 = v61;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v27, v46);
  long long v61 = v26;
  sub_100013D44(v26, *((unint64_t *)&v26 + 1));
  sub_100125FAC(v30, *((unint64_t *)&v30 + 1));
  sub_10000C970(v30, *((unint64_t *)&v30 + 1));
  sub_10000C970(v26, *((unint64_t *)&v26 + 1));
  long long v60 = v61;
  uint64_t v58 = v53;
  unint64_t v59 = v54;
  sub_100013D44(v53, v54);
  uint64_t v31 = v55;
  SymmetricKey.init<A>(data:)();
  type metadata accessor for SHA384();
  sub_100074BC4(&qword_10047DF68, (void (*)(uint64_t))&type metadata accessor for SHA384);
  sub_100074B70();
  uint64_t v32 = v50;
  static HMAC.authenticationCode<A>(for:using:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v57);
  sub_10000C970(v60, *((unint64_t *)&v60 + 1));
  uint64_t v33 = v52;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
  return v61;
}

unsigned char *sub_1000735C4@<X0>(unsigned char *result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    uint64_t v3 = sub_100260F60(result, 16);
    uint64_t result = (unsigned char *)_s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(v3, v4);
    if (v5 >> 60 != 15)
    {
      *a2  = result;
      a2[1]  = v5;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *NANPMK.ID.length.unsafeMutableAddressor()
{
  return &static NANPMK.ID.length;
}

uint64_t NANPMK.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = 0x22203A4B4D50;
  unint64_t v26 = 0xE600000000000000;
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100013D44(a1, a2);
      sub_100013D44(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  sub_10000C970(a1, a2);
  sub_100074BC4((unint64_t *)&qword_10047DC30, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if (v24)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)0xE000000000000000;
    long long v20 = xmmword_1003B2450;
    do
    {
      char v9 = v23;
      sub_100010BCC((uint64_t *)&unk_10047CF90);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16)  = v20;
      *(void *)(v10 + 56)  = &type metadata for UInt8;
      *(void *)(v10 + 64)  = &protocol witness table for UInt8;
      *(unsigned char *)(v10 + 32)  = v9;
      uint64_t v11 = String.init(format:_:)();
      uint64_t v13 = v12;
      uint64_t v21 = v7;
      uint64_t v22 = v8;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits  = v11;
      v14._object  = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v21;
      uint64_t v8 = v22;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v24 != 1);
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  v15._countAndFlagsBits  = v7;
  v15._object  = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits  = 34;
  v16._object  = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v25;
}

uint64_t NANPMK.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  char v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2]  = a1;
  void v12[3] = a2;
  v12[1]  = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  sub_100013D44(a1, a2);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100073A9C()
{
  return NANPMK.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100073AA4()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  unint64_t v7 = v0[1];
  v11[2]  = v8;
  v11[3]  = v7;
  v11[1]  = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100013D44(v8, v7);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static NANBitmap.Band.ghz_4_9_to_5_0.getter()
{
  return 16;
}

uint64_t NANPMK.ID.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t NANPMK.ID.init(from:)(void *a1)
{
  return sub_100074330(a1);
}

uint64_t NANPMK.ID.description.getter(uint64_t a1, unint64_t a2)
{
  sub_100013D44(a1, a2);
  uint64_t v4 = sub_100036314(0, 0xE000000000000000, a1, a2);
  sub_10000C970(a1, a2);
  return v4;
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_100013D44(a2, a3);
  Data.hash(into:)();

  return sub_10000C970(a2, a3);
}

Swift::Int sub_100073D84()
{
  return Hasher._finalize()();
}

Swift::Int sub_100073DC8()
{
  return Hasher._finalize()();
}

uint64_t sub_100073E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_100073E90(uint64_t a1)
{
  unint64_t v2 = sub_1000745D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100073ECC(uint64_t a1)
{
  unint64_t v2 = sub_1000745D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.ID.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100073F44(a1, a2, a3, &qword_10047DEF8, (void (*)(void))sub_1000745D4);
}

uint64_t sub_100073F44(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v14 = a3;
  uint64_t v8 = sub_100010BCC(a4);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = v14;
  sub_1000742DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211InformationElement.MessageIntegrityCode.hashValue.getter(uint64_t a1, unint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100074108()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007416C()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_100013D44(v2, v1);
  Data.hash(into:)();

  return sub_10000C970(v2, v1);
}

Swift::Int sub_1000741CC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007422C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100074330(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }
  return result;
}

uint64_t sub_100074258(void *a1)
{
  return NANPMK.ID.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100074274(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

unint64_t sub_100074288()
{
  unint64_t result = qword_10047DEE8;
  if (!qword_10047DEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DEE8);
  }
  return result;
}

unint64_t sub_1000742DC()
{
  unint64_t result = qword_10047DEF0;
  if (!qword_10047DEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DEF0);
  }
  return result;
}

uint64_t sub_100074330(void *a1)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  v8[0]  = 0x1000000000;
  v8[1]  = __DataStorage.init(length:)();
  sub_100017300((int *)v8, 0);
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
    swift_release();
  }
  else
  {
    uint64_t v4 = v9;
    sub_100039448((uint64_t)v8, v9);
    uint64_t v3 = UnkeyedDecodingContainer.decodeData(with:)(16, v4);
    unint64_t v7 = v6;
    sub_100013D44(v3, v6);
    swift_release();
    sub_100010754((uint64_t)v8);
    sub_100010754((uint64_t)a1);
    sub_10000C970(v3, v7);
  }
  return v3;
}

uint64_t _s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(uint64_t a1, unint64_t a2)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  v9[0]  = 0x1000000000;
  v9[1]  = __DataStorage.init(length:)();
  sub_100017300((int *)v9, 0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100074568);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 16)
      {
LABEL_7:
        sub_10000C970(a1, a2);
        a1  = 0;
      }
      swift_release();
      return a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_100074578()
{
  unint64_t result = qword_100484470;
  if (!qword_100484470)
  {
    sub_100014434(&qword_10047DC10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484470);
  }
  return result;
}

unint64_t sub_1000745D4()
{
  unint64_t result = qword_10047DF00;
  if (!qword_10047DF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF00);
  }
  return result;
}

unint64_t sub_10007462C()
{
  unint64_t result = qword_10047DF08;
  if (!qword_10047DF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF08);
  }
  return result;
}

unint64_t sub_100074684()
{
  unint64_t result = qword_10047DF10;
  if (!qword_10047DF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF10);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPMK()
{
  return &type metadata for NANPMK;
}

uint64_t *initializeBufferWithCopyOfBuffer for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100013D44(*a2, v4);
  *a1  = v3;
  a1[1]  = v4;
  return a1;
}

uint64_t destroy for NANServiceName.Hash(uint64_t a1)
{
  return sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100013D44(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1  = v3;
  a1[1]  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t *assignWithTake for NANServiceName.Hash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1  = *a2;
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName.Hash(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANServiceName.Hash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8)  = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPMK.ID()
{
  return &type metadata for NANPMK.ID;
}

ValueMetadata *type metadata accessor for NANPMK.ID.CodingKeys()
{
  return &type metadata for NANPMK.ID.CodingKeys;
}

unsigned char *_s7CoreP2P6NANPMKV2IDV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100074928);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPMK.CodingKeys()
{
  return &type metadata for NANPMK.CodingKeys;
}

unint64_t sub_100074964()
{
  unint64_t result = qword_10047DF18;
  if (!qword_10047DF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF18);
  }
  return result;
}

unint64_t sub_1000749BC()
{
  unint64_t result = qword_10047DF20;
  if (!qword_10047DF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF20);
  }
  return result;
}

unint64_t sub_100074A14()
{
  unint64_t result = qword_10047DF28;
  if (!qword_10047DF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF28);
  }
  return result;
}

unint64_t sub_100074A6C()
{
  unint64_t result = qword_10047DF30;
  if (!qword_10047DF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF30);
  }
  return result;
}

unint64_t sub_100074AC4()
{
  unint64_t result = qword_10047DF38;
  if (!qword_10047DF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF38);
  }
  return result;
}

unint64_t sub_100074B1C()
{
  unint64_t result = qword_10047DF40;
  if (!qword_10047DF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF40);
  }
  return result;
}

unint64_t sub_100074B70()
{
  unint64_t result = qword_10047DF58;
  if (!qword_10047DF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF58);
  }
  return result;
}

uint64_t sub_100074BC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100074C2C(void *a1@<X8>)
{
  *a1  = &_swiftEmptyArrayStorage;
}

uint64_t sub_100074C40@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100074CD0(a1, (void (*)(uint64_t))sub_1000AD68C, a2);
}

uint64_t sub_100074C58@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E1988(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v6;
  return result;
}

uint64_t sub_100074CB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100074CD0(a1, (void (*)(uint64_t))sub_1001E1A54, a2);
}

uint64_t sub_100074CD0@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v8 = *v3;
  swift_bridgeObjectRetain();
  a2(v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3  = v8;
  return result;
}

BOOL sub_100074D48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E1988(v4);
  uint64_t v5 = v9;
  char v6 = sub_1000956AC(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1000AD68C(v7);
    uint64_t v5 = v4;
  }
  *a1  = v5;
  swift_bridgeObjectRelease();
  return (v6 & 1) == 0;
}

uint64_t sub_100074DE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001E1860(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_100074E14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E1988(v4);
  uint64_t v5 = v8;
  sub_1000AD68C(v4);
  char v6 = sub_1000956AC(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = 0;
  }
  *a2  = v5;
  return result;
}

uint64_t sub_100074EAC(uint64_t *a1)
{
  sub_1000AD68C(*a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100074EE8(uint64_t *a1)
{
  return sub_1001E1988(*a1);
}

uint64_t sub_100074EF0(uint64_t *a1)
{
  sub_1001E1A54(*a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100074F2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n();
  sub_1001E1A54(v4);
  sub_1001E1988(v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t sub_100074FAC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E1988(v2);
  char v4 = sub_1000956AC(v6, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_100075018(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E1988(v2);
  char v3 = sub_1000956AC(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_10007507C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  sub_1001E1988(v3);
  LOBYTE(v2)  = sub_1000956AC(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1000750E8()
{
  return sub_1000956AC(*v0, &_swiftEmptyArrayStorage);
}

uint64_t sub_1000750F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100075110(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E1A54(v2);
  sub_1001E1988(v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100075180@<X0>(void *a1@<X8>)
{
  *a1  = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007518C(void *a1, void *a2)
{
  return sub_1000956AC(*a1, *a2);
}

uint64_t sub_100075198@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10022B3EC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t sub_1000751D8()
{
  uint64_t result = sub_1001E1A6C(0);
  static WiFiDriverCapabilities.supportsNAN  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsNAN.unsafeMutableAddressor()
{
  if (qword_10047BF18 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsNAN;
}

uint64_t static WiFiDriverCapabilities.supportsNAN.getter()
{
  return sub_100075A04(&qword_10047BF18);
}

uint64_t sub_10007526C()
{
  uint64_t result = sub_1001E1A6C(1);
  static WiFiDriverCapabilities.supportsAWDL  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDL.unsafeMutableAddressor()
{
  if (qword_10047BF20 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsAWDL;
}

uint64_t static WiFiDriverCapabilities.supportsAWDL.getter()
{
  return sub_100075A04(&qword_10047BF20);
}

uint64_t sub_100075300()
{
  uint64_t result = sub_1001E1A6C(2);
  static WiFiDriverCapabilities.supportsDualBand  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor()
{
  if (qword_10047BF28 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsDualBand.getter()
{
  return sub_100075A04(&qword_10047BF28);
}

uint64_t sub_100075394()
{
  uint64_t result = sub_1001E1A6C(3);
  static WiFiDriverCapabilities.supportsSimultaneousDualBand  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor()
{
  if (qword_10047BF30 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsSimultaneousDualBand.getter()
{
  return sub_100075A04(&qword_10047BF30);
}

uint64_t sub_100075428()
{
  uint64_t result = sub_1001E1A6C(4);
  static WiFiDriverCapabilities.supportsAWDLSoloMode  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDLSoloMode.unsafeMutableAddressor()
{
  if (qword_10047BF38 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsAWDLSoloMode;
}

uint64_t static WiFiDriverCapabilities.supportsAWDLSoloMode.getter()
{
  return sub_100075A04(&qword_10047BF38);
}

uint64_t sub_1000754BC()
{
  uint64_t result = sub_1001E1A6C(5);
  static WiFiDriverCapabilities.isClmRestricted  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.isClmRestricted.unsafeMutableAddressor()
{
  if (qword_10047BF40 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.isClmRestricted;
}

uint64_t static WiFiDriverCapabilities.isClmRestricted.getter()
{
  return sub_100075A04(&qword_10047BF40);
}

uint64_t sub_100075550()
{
  uint64_t result = sub_1001E1A6C(6);
  static WiFiDriverCapabilities.peerCountryCodeLearningCapable  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.peerCountryCodeLearningCapable.unsafeMutableAddressor()
{
  if (qword_10047BF48 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
}

uint64_t static WiFiDriverCapabilities.peerCountryCodeLearningCapable.getter()
{
  return sub_100075A04(&qword_10047BF48);
}

uint64_t sub_1000755E4()
{
  uint64_t result = sub_1001E1A6C(7);
  static WiFiDriverCapabilities.supportsDFSProxy  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDFSProxy.unsafeMutableAddressor()
{
  if (qword_10047BF50 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.supportsDFSProxy;
}

uint64_t static WiFiDriverCapabilities.supportsDFSProxy.getter()
{
  return sub_100075A04(&qword_10047BF50);
}

uint64_t sub_100075678()
{
  sub_100010BCC(&qword_10047DF98);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_1003B2F80;
  if (qword_10047BF18 != -1) {
    swift_once();
  }
  *(void *)(inited + 32)  = static WiFiDriverCapabilities.supportsNAN;
  uint64_t v1 = qword_10047BF20;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(inited + 40)  = static WiFiDriverCapabilities.supportsAWDL;
  uint64_t v2 = qword_10047BF28;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  *(void *)(inited + 48)  = static WiFiDriverCapabilities.supportsDualBand;
  uint64_t v3 = qword_10047BF30;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  *(void *)(inited + 56)  = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
  uint64_t v4 = qword_10047BF38;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  *(void *)(inited + 64)  = static WiFiDriverCapabilities.supportsAWDLSoloMode;
  uint64_t v5 = qword_10047BF40;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  *(void *)(inited + 72)  = static WiFiDriverCapabilities.isClmRestricted;
  uint64_t v6 = qword_10047BF48;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  *(void *)(inited + 80)  = static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
  uint64_t v7 = qword_10047BF50;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)(inited + 88)  = static WiFiDriverCapabilities.supportsDFSProxy;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10022B6D0(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  static WiFiDriverCapabilities.all  = v8;
  return result;
}

uint64_t *WiFiDriverCapabilities.all.unsafeMutableAddressor()
{
  if (qword_10047BF58 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.all;
}

uint64_t static WiFiDriverCapabilities.all.getter()
{
  return sub_100075A04(&qword_10047BF58);
}

uint64_t sub_10007596C()
{
  uint64_t result = sub_10022B6D0((uint64_t)_swiftEmptyArrayStorage);
  static WiFiDriverCapabilities.none  = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.none.unsafeMutableAddressor()
{
  if (qword_10047BF60 != -1) {
    swift_once();
  }
  return &static WiFiDriverCapabilities.none;
}

uint64_t static WiFiDriverCapabilities.none.getter()
{
  return sub_100075A04(&qword_10047BF60);
}

uint64_t sub_100075A04(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

unint64_t sub_100075A50(uint64_t a1)
{
  unint64_t result = sub_100075A78();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_100075A78()
{
  unint64_t result = qword_10047DF70;
  if (!qword_10047DF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF70);
  }
  return result;
}

unint64_t sub_100075AD0()
{
  unint64_t result = qword_10047DF78;
  if (!qword_10047DF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF78);
  }
  return result;
}

unint64_t sub_100075B28()
{
  unint64_t result = qword_10047DF80;
  if (!qword_10047DF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF80);
  }
  return result;
}

unint64_t sub_100075B80()
{
  unint64_t result = qword_10047DF88;
  if (!qword_10047DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF88);
  }
  return result;
}

unint64_t sub_100075BD8()
{
  unint64_t result = qword_10047DF90;
  if (!qword_10047DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DF90);
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiDriverCapabilities()
{
  return &type metadata for WiFiDriverCapabilities;
}

unint64_t IEEE80211Status.description.getter(char a1)
{
  unint64_t result = 0x6673736563637553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
    case 10:
    case 14:
    case 21:
    case 31:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000023;
      break;
    case 6:
      unint64_t result = 0xD000000000000025;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x74756F656D6954;
      break;
    case 9:
      unint64_t result = 0x6C6C7566205041;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000015;
      break;
    case 13:
      unint64_t result = 0x5448206F4ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000016;
      break;
    case 19:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
    case 23:
      unint64_t result = 0x2064696C61766E49;
      break;
    case 22:
      unint64_t result = 0xD000000000000017;
      break;
    case 24:
      unint64_t result = 0xD000000000000017;
      break;
    case 25:
      unint64_t result = 0xD000000000000018;
      break;
    case 26:
      unint64_t result = 0xD000000000000015;
      break;
    case 27:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 28:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 29:
      unint64_t result = 0xD000000000000016;
      break;
    case 30:
      unint64_t result = 0xD000000000000011;
      break;
    case 32:
      unint64_t result = 0xD000000000000019;
      break;
    case 33:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 34:
      unint64_t result = 0x756C696166205854;
      break;
    case 35:
      unint64_t result = 0xD000000000000018;
      break;
    case 36:
      unint64_t result = 0xD000000000000026;
      break;
    case 37:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 38:
      unint64_t result = 0xD000000000000016;
      break;
    case 39:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 40:
      unint64_t result = 0xD000000000000019;
      break;
    case 41:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 42:
      unint64_t result = 0x20746F6E20535342;
      break;
    case 43:
      unint64_t result = 0xD000000000000017;
      break;
    case 44:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 45:
      unint64_t result = 0xD000000000000015;
      break;
    case 46:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 47:
      unint64_t result = 0x6620584D20504145;
      break;
    case 48:
      unint64_t result = 0xD000000000000020;
      break;
    case 49:
      unint64_t result = 0x697420656E696F4ALL;
      break;
    case 50:
      unint64_t result = 0x6F72726520564349;
      break;
    case 51:
      unint64_t result = 0x6F6261206E696F4ALL;
      break;
    case 52:
      unint64_t result = 0x736572206E696F4ALL;
      break;
    case 53:
      unint64_t result = 0x616C696176616E55;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t IEEE80211Status.rawValue.getter(char a1)
{
  return word_1003B433C[a1];
}

BOOL sub_100076284(char *a1, char *a2)
{
  return word_1003B433C[*a1] == word_1003B433C[*a2];
}

uint64_t sub_1000762A8@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1000762D4(_WORD *a1@<X8>)
{
  *a1  = word_1003B433C[*v1];
}

unint64_t sub_1000762EC()
{
  return IEEE80211Status.description.getter(*v0);
}

Swift::Int sub_1000762F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B433C[v1]);
  return Hasher._finalize()();
}

void sub_100076344()
{
  Hasher._combine(_:)(word_1003B433C[*v0]);
}

Swift::Int sub_10007637C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B433C[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000763C8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100076428()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t IEEE80211Reason.description.getter(char a1)
{
  unint64_t result = 0x6673736563637553;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6669636570736E55;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x6576697463616E49;
      break;
    case 5:
      unint64_t result = 0x6C7265766F205041;
      break;
    case 6:
      unint64_t result = 0x6874756120746F4ELL;
      break;
    case 7:
      unint64_t result = 0x6F73736120746F4ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 12:
    case 19:
      unint64_t result = 0x2064696C61766E49;
      break;
    case 13:
      unint64_t result = 0x6C6961662043494DLL;
      break;
    case 14:
      unint64_t result = 0x6974207961772D34;
      break;
    case 15:
      unint64_t result = 0xD000000000000011;
      break;
    case 16:
      unint64_t result = 0x6E65726566666944;
      break;
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
      unint64_t result = 0xD000000000000018;
      break;
    case 21:
      unint64_t result = 0xD000000000000018;
      break;
    case 22:
      unint64_t result = 0xD000000000000021;
      break;
    case 23:
      unint64_t result = 0xD000000000000015;
      break;
    case 24:
      unint64_t result = 0xD000000000000018;
      break;
    case 25:
    case 26:
    case 30:
      unint64_t result = 0xD000000000000016;
      break;
    case 27:
      unint64_t result = 0xD000000000000012;
      break;
    case 28:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 29:
      unint64_t result = 0xD000000000000010;
      break;
    case 31:
      unint64_t result = 0xD000000000000013;
      break;
    case 32:
      unint64_t result = 0x6D69742072656550;
      break;
    case 33:
      unint64_t result = 0xD000000000000026;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t IEEE80211Reason.rawValue.getter(char a1)
{
  return word_1003B43A8[a1];
}

BOOL sub_1000768B4(char *a1, char *a2)
{
  return word_1003B43A8[*a1] == word_1003B43A8[*a2];
}

uint64_t sub_1000768D8@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_100076904(_WORD *a1@<X8>)
{
  *a1  = word_1003B43A8[*v1];
}

unint64_t sub_10007691C()
{
  return IEEE80211Reason.description.getter(*v0);
}

Swift::Int sub_100076924()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B43A8[v1]);
  return Hasher._finalize()();
}

void sub_100076974()
{
  Hasher._combine(_:)(word_1003B43A8[*v0]);
}

Swift::Int sub_1000769AC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B43A8[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000769F8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100076A58()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AWDLThreadCoexistenceEvent.realTimeTrafficStarted.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t NonNANOperatingChannelInformation.channelNumber.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result;
  return result;
}

CoreP2P::AWDLThreadCoexistenceEvent __swiftcall AWDLThreadCoexistenceEvent.init(channelSequenceWith2GHz:realTimeTrafficStarted:)(Swift::UInt8 channelSequenceWith2GHz, Swift::UInt8 realTimeTrafficStarted)
{
  return (CoreP2P::AWDLThreadCoexistenceEvent)(channelSequenceWith2GHz | (realTimeTrafficStarted << 8));
}

void IEEE80211StatusAndReason.hash(into:)(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2 >> 8;
  Hasher._combine(_:)(word_1003B433C[(char)a2]);
  Hasher._combine(_:)(word_1003B43A8[(char)v2]);
}

BOOL static IEEE80211StatusAndReason.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return word_1003B433C[(char)a1] == word_1003B433C[(char)a2]
      && *(unsigned __int16 *)((char *)word_1003B43A8 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 55)) == *(unsigned __int16 *)((char *)word_1003B43A8 + ((uint64_t)((unint64_t)(a2 >> 8) << 56) >> 55));
}

Swift::Int IEEE80211StatusAndReason.hashValue.getter(unsigned int a1)
{
  char v1 = a1;
  unsigned int v2 = a1 >> 8;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B433C[v1]);
  Hasher._combine(_:)(word_1003B43A8[(char)v2]);
  return Hasher._finalize()();
}

Swift::Int sub_100076BD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B433C[v1]);
  Hasher._combine(_:)(word_1003B43A8[v2]);
  return Hasher._finalize()();
}

void sub_100076C48()
{
  uint64_t v1 = v0[1];
  Hasher._combine(_:)(word_1003B433C[*v0]);
  Hasher._combine(_:)(word_1003B43A8[v1]);
}

Swift::Int sub_100076C9C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1003B433C[v1]);
  Hasher._combine(_:)(word_1003B43A8[v2]);
  return Hasher._finalize()();
}

BOOL sub_100076D08(char *a1, char *a2)
{
  return word_1003B433C[*a1] == word_1003B433C[*a2] && word_1003B43A8[a1[1]] == word_1003B43A8[a2[1]];
}

uint64_t _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  if (a1 > 0x2Du) {
    return 34;
  }
  else {
    return byte_1003B43EC[(__int16)a1];
  }
}

uint64_t _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 36:
    case 38:
    case 39:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
LABEL_7:
      uint64_t result = 54;
      break;
    case 10:
      uint64_t result = 2;
      break;
    case 11:
      uint64_t result = 3;
      break;
    case 12:
      uint64_t result = 4;
      break;
    case 13:
      uint64_t result = 5;
      break;
    case 14:
      uint64_t result = 6;
      break;
    case 15:
      uint64_t result = 7;
      break;
    case 16:
      uint64_t result = 8;
      break;
    case 17:
      uint64_t result = 9;
      break;
    case 18:
      uint64_t result = 10;
      break;
    case 25:
      uint64_t result = 11;
      break;
    case 26:
      uint64_t result = 12;
      break;
    case 27:
      uint64_t result = 13;
      break;
    case 28:
      uint64_t result = 14;
      break;
    case 30:
      uint64_t result = 15;
      break;
    case 33:
      uint64_t result = 16;
      break;
    case 34:
      uint64_t result = 17;
      break;
    case 35:
      uint64_t result = 18;
      break;
    case 37:
      uint64_t result = 19;
      break;
    case 40:
      uint64_t result = 20;
      break;
    case 41:
      uint64_t result = 21;
      break;
    case 42:
      uint64_t result = 22;
      break;
    case 43:
      uint64_t result = 23;
      break;
    case 44:
      uint64_t result = 24;
      break;
    case 45:
      uint64_t result = 25;
      break;
    case 46:
      uint64_t result = 26;
      break;
    case 59:
      uint64_t result = 27;
      break;
    case 60:
      uint64_t result = 28;
      break;
    case 61:
      uint64_t result = 29;
      break;
    case 62:
      uint64_t result = 30;
      break;
    case 63:
      uint64_t result = 31;
      break;
    case 64:
      uint64_t result = 32;
      break;
    case 65:
      uint64_t result = 33;
      break;
    case 66:
      uint64_t result = 34;
      break;
    case 67:
      uint64_t result = 35;
      break;
    case 68:
      uint64_t result = 36;
      break;
    case 82:
      uint64_t result = 37;
      break;
    case 83:
      uint64_t result = 38;
      break;
    case 92:
      uint64_t result = 39;
      break;
    case 93:
      uint64_t result = 40;
      break;
    case 99:
      uint64_t result = 41;
      break;
    default:
      switch(v1)
      {
        case 1000:
          uint64_t result = 42;
          break;
        case 1001:
          uint64_t result = 43;
          break;
        case 1002:
          uint64_t result = 44;
          break;
        case 1003:
          uint64_t result = 45;
          break;
        case 1004:
          uint64_t result = 46;
          break;
        case 1005:
          uint64_t result = 47;
          break;
        case 1006:
          uint64_t result = 48;
          break;
        case 1007:
          uint64_t result = 49;
          break;
        case 1008:
          uint64_t result = 50;
          break;
        case 1009:
          uint64_t result = 51;
          break;
        case 1010:
          uint64_t result = 52;
          break;
        default:
          if (v1 != 0xFFFF) {
            goto LABEL_7;
          }
          uint64_t result = 53;
          break;
      }
      break;
  }
  return result;
}

unint64_t sub_10007715C()
{
  unint64_t result = qword_10047DFA0;
  if (!qword_10047DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFA0);
  }
  return result;
}

unint64_t sub_1000771B4()
{
  unint64_t result = qword_10047DFA8;
  if (!qword_10047DFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFA8);
  }
  return result;
}

unint64_t sub_10007720C()
{
  unint64_t result = qword_10047DFB0;
  if (!qword_10047DFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFB0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211Status(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xCB) {
    goto LABEL_17;
  }
  if (a2 + 53 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 53) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 53;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x36;
  int v8 = v6 - 54;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Status(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 53 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 53) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xCB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xCA)
  {
    unsigned int v6 = ((a2 - 203) >> 8) + 1;
    *unint64_t result = a2 + 53;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000773BCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 53;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Status()
{
  return &type metadata for IEEE80211Status;
}

uint64_t getEnumTagSinglePayload for IEEE80211Reason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 33 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 33) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 33;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x22;
  int v8 = v6 - 34;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 8) + 1;
    *unint64_t result = a2 + 33;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100077550);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Reason()
{
  return &type metadata for IEEE80211Reason;
}

uint64_t getEnumTagSinglePayload for IEEE80211StatusAndReason(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 65313 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65313 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65313;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65313;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65313;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 0x22;
  int v8 = v6 - 34;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211StatusAndReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65313 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65313 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 223;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        break;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000776E8);
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1)  = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211StatusAndReason()
{
  return &type metadata for IEEE80211StatusAndReason;
}

unint64_t sub_100077720()
{
  unint64_t result = qword_10047DFB8;
  if (!qword_10047DFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFB8);
  }
  return result;
}

unint64_t sub_100077774()
{
  unint64_t result = qword_10047DFC0;
  if (!qword_10047DFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFC0);
  }
  return result;
}

uint64_t sub_1000777D0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    type metadata accessor for SymmetricKey();
    _StringGuts._slowWithCString<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      int v2 = (unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      int v2 = (unsigned char *)_StringObject.sharedUTF8.getter();
    }
    sub_100079314(v2);
    return swift_bridgeObjectRelease();
  }
  __src[0]  = a1;
  __src[1]  = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v4 = String.count.getter();
  sub_100260F60(__src, v4);
  SymmetricKey.init<A>(data:)();
  return swift_bridgeObjectRelease();
}

uint64_t NANServiceName.string.getter(uint64_t a1)
{
  return a1;
}

CoreP2P::NANPassphrase __swiftcall NANPassphrase.init(_:)(CoreP2P::NANPassphrase result)
{
  uint64_t v1 = HIBYTE(result.string._object) & 0xF;
  if (((uint64_t)result.string._object & 0x2000000000000000) == 0) {
    uint64_t v1 = result.string._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v1) {
    __break(1u);
  }
  return result;
}

uint64_t NANPassphrase.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static NANPassphrase.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int NANPassphrase.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100077A34()
{
  return Hasher._finalize()();
}

uint64_t sub_100077A90()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100077AE8()
{
  return Hasher._finalize()();
}

uint64_t sub_100077B40(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t NANPassphrase.description.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "Passphrase: \"");
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits  = a1;
  v4._object  = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = 34;
  v5._object  = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t NANPassphrase.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  BOOL v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2]  = a1;
  void v12[3] = a2;
  v12[1]  = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100077DD8()
{
  uint64_t v1 = *v0;
  int v2 = (void *)v0[1];
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "Passphrase: \"");
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits  = v1;
  v3._object  = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits  = 34;
  v4._object  = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t sub_100077E7C()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  Swift::String v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  v11[2]  = v7;
  v11[3]  = v8;
  v11[1]  = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t NANPassphrase.pmk(for:serviceName:publisherAddress:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v21 = a4;
  uint64_t v7 = type metadata accessor for SHA256Digest();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA256();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v15 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v15._countAndFlagsBits, (uint64_t)v15._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v16 = v24;
  unint64_t v17 = v25;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (((1 << a1) & 0x55) != 0) {
    uint64_t v18 = sub_10007841C(v22, v23, a1, v16, v17, v21 & 0xFFFFFFFFFFFFLL, &qword_10047DF48, (unint64_t)&off_10044FFE0, (uint64_t)&type metadata accessor for SHA256, &qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  }
  else {
    uint64_t v18 = sub_10007841C(v22, v23, a1, v16, v17, v21 & 0xFFFFFFFFFFFFLL, &qword_10047DF60, (unint64_t)&off_100450008, (uint64_t)&type metadata accessor for SHA384, &qword_10047DF68, (void (*)(uint64_t))&type metadata accessor for SHA384, (uint64_t)&protocol conformance descriptor for SHA384);
  }
  uint64_t v19 = v18;
  sub_10000C970(v16, v17);
  return v19;
}

uint64_t NANPassphrase.pmk(for:serviceNameHash:publisherAddress:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (((1 << a1) & 0x55) != 0) {
    return sub_10007841C(a5, a6, a1, a2, a3, v7, &qword_10047DF48, (unint64_t)&off_10044FFE0, (uint64_t)&type metadata accessor for SHA256, &qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  }
  else {
    return sub_10007841C(a5, a6, a1, a2, a3, v7, &qword_10047DF60, (unint64_t)&off_100450008, (uint64_t)&type metadata accessor for SHA384, &qword_10047DF68, (void (*)(uint64_t))&type metadata accessor for SHA384, (uint64_t)&protocol conformance descriptor for SHA384);
  }
}

uint64_t sub_10007841C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t *a7, unint64_t a8, uint64_t a9, unint64_t *a10, void (*a11)(uint64_t), uint64_t a12)
{
  char v12 = a6;
  uint64_t v109 = a12;
  uint64_t v110 = a11;
  uint64_t v108 = a10;
  unint64_t v106 = a8;
  *(void *)&long long v107 = a9;
  unint64_t v101 = a6 >> 8;
  unint64_t v102 = a6 >> 16;
  uint64_t v103 = a6 >> 24;
  uint64_t v104 = HIDWORD(a6);
  uint64_t v105 = a6 >> 40;
  uint64_t v18 = sub_100010BCC(a7);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v99 = v18;
  uint64_t v100 = v19;
  __chkstk_darwin();
  uint64_t v98 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for SymmetricKey();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1000777D0(a1, a2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16)  = xmmword_1003B4420;
  *(unsigned char *)(v23 + 32)  = 0;
  *(unsigned char *)(v23 + 33)  = a3 + 1;
  uint64_t v24 = sub_1001265EC(v23);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  *(void *)&long long v112 = v24;
  *((void *)&v112 + 1)  = v26;
  sub_100013D44(a4, a5);
  sub_100013D44(v24, v26);
  sub_100125FAC(a4, a5);
  sub_10000C970(a4, a5);
  sub_10000C970(v24, v26);
  long long v27 = v112;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v28 + 32)  = v12;
  *(unsigned char *)(v28 + 33)  = v101;
  *(unsigned char *)(v28 + 34)  = v102;
  *(unsigned char *)(v28 + 35)  = v103;
  *(unsigned char *)(v28 + 36)  = v104;
  *(unsigned char *)(v28 + 37)  = v105;
  uint64_t v29 = sub_1001265EC(v28);
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  long long v111 = v27;
  sub_100013D44(v27, *((unint64_t *)&v27 + 1));
  sub_100125FAC(v29, v31);
  sub_10000C970(v29, v31);
  sub_10000C970(v27, *((unint64_t *)&v27 + 1));
  long long v32 = v111;
  uint64_t v33 = sub_1001265EC(v106);
  unint64_t v35 = v34;
  long long v112 = v32;
  sub_100013D44(v32, *((unint64_t *)&v32 + 1));
  sub_100125FAC(v33, v35);
  sub_10000C970(v33, v35);
  sub_10000C970(v32, *((unint64_t *)&v32 + 1));
  long long v36 = v112;
  long long v111 = v112;
  uint64_t v37 = ((uint64_t (*)(void))v107)(0);
  uint64_t v38 = sub_100079330(v108, v110);
  unint64_t v39 = sub_100074B70();
  unint64_t v40 = v98;
  uint64_t v97 = v22;
  uint64_t v96 = v37;
  uint64_t v95 = v38;
  unint64_t v94 = v39;
  static HMAC.authenticationCode<A>(for:using:)();
  sub_10000C970(v36, *((unint64_t *)&v36 + 1));
  uint64_t v41 = v99;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  unint64_t v102 = 0;
  unint64_t v42 = *(void (**)(unint64_t, uint64_t))(v100 + 8);
  v100 += 8;
  uint64_t v93 = v42;
  v42((unint64_t)v40, v41);
  unint64_t v106 = *((void *)&v112 + 1);
  uint64_t v43 = v112;
  sub_100013D44(v112, *((unint64_t *)&v112 + 1));
  uint64_t v44 = 2;
  long long v107 = xmmword_1003B2440;
LABEL_3:
  unint64_t v101 = v44;
  unint64_t v45 = v106;
  *(void *)&long long v111 = v43;
  *((void *)&v111 + 1)  = v106;
  unint64_t v46 = (unint64_t)v98;
  static HMAC.authenticationCode<A>(for:using:)();
  uint64_t v47 = v99;
  unint64_t v48 = v102;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  unint64_t v102 = v48;
  v93(v46, v47);
  sub_10000C970(v43, v45);
  unint64_t v106 = *((void *)&v111 + 1);
  uint64_t v43 = v111;
  uint64_t v110 = (void (*)(uint64_t))(*((void *)&v111 + 1) >> 62);
  switch(*((void *)&v111 + 1) >> 62)
  {
    case 1:
      uint64_t v49 = (unint64_t *)(int)v111;
      uint64_t v50 = (unint64_t *)((uint64_t)v111 >> 32);
      goto LABEL_7;
    case 2:
      uint64_t v49 = *(unint64_t **)(v111 + 16);
      uint64_t v50 = *(unint64_t **)(v111 + 24);
LABEL_7:
      if ((uint64_t)v50 >= (uint64_t)v49) {
        goto LABEL_8;
      }
      goto LABEL_102;
    case 3:
      goto LABEL_2;
    default:
      uint64_t v49 = 0;
      uint64_t v50 = (unint64_t *)BYTE6(v106);
LABEL_8:
      if (v49 == v50) {
        goto LABEL_2;
      }
      uint64_t v108 = v50;
      uint64_t v109 = v106 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v103 = (uint64_t)v111 >> 32;
      uint64_t v104 = BYTE6(v106);
      uint64_t v105 = (int)v111;
      break;
  }
  while (2)
  {
    if ((uint64_t)v49 >= (uint64_t)v50)
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      sub_10000C970(v47, v46);
      __break(1u);
    }
    uint64_t v52 = (uint64_t)v49;
    uint64_t v49 = (unint64_t *)((char *)v49 + 1);
    uint64_t v53 = *((void *)&v112 + 1);
    uint64_t v54 = v112;
    uint64_t v47 = *((void *)&v112 + 1) >> 62;
    switch(*((void *)&v112 + 1) >> 62)
    {
      case 1:
        if (v52 >= (uint64_t)v112 >> 32 || v52 < (int)v112) {
          goto LABEL_83;
        }
        unint64_t v46 = *((void *)&v112 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v63 = __DataStorage._bytes.getter();
        if (!v63) {
          goto LABEL_106;
        }
        uint64_t v59 = v63;
        uint64_t v64 = __DataStorage._offset.getter();
        uint64_t v61 = v52 - v64;
        if (!__OFSUB__(v52, v64)) {
          goto LABEL_32;
        }
        goto LABEL_85;
      case 2:
        if (v52 < *(void *)(v112 + 16)) {
          goto LABEL_82;
        }
        if (v52 >= *(void *)(v112 + 24)) {
          goto LABEL_84;
        }
        unint64_t v46 = *((void *)&v112 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v58 = __DataStorage._bytes.getter();
        if (!v58) {
          goto LABEL_107;
        }
        uint64_t v59 = v58;
        uint64_t v60 = __DataStorage._offset.getter();
        uint64_t v61 = v52 - v60;
        if (__OFSUB__(v52, v60)) {
          goto LABEL_87;
        }
LABEL_32:
        char v55 = *(unsigned char *)(v59 + v61);
        unint64_t v46 = v109;
        int v56 = (int)v110;
        if (v110)
        {
LABEL_33:
          if (v56 == 1)
          {
            if (v52 < v105 || v52 >= v103) {
              goto LABEL_89;
            }
            uint64_t v65 = __DataStorage._bytes.getter();
            if (!v65) {
              goto LABEL_108;
            }
            uint64_t v66 = v65;
            uint64_t v67 = __DataStorage._offset.getter();
            uint64_t v68 = v52 - v67;
            if (__OFSUB__(v52, v67)) {
              goto LABEL_90;
            }
          }
          else
          {
            if (v52 < *(void *)(v43 + 16)) {
              goto LABEL_88;
            }
            if (v52 >= *(void *)(v43 + 24)) {
              goto LABEL_91;
            }
            uint64_t v69 = __DataStorage._bytes.getter();
            if (!v69) {
              goto LABEL_109;
            }
            uint64_t v66 = v69;
            uint64_t v70 = __DataStorage._offset.getter();
            uint64_t v68 = v52 - v70;
            if (__OFSUB__(v52, v70)) {
              goto LABEL_93;
            }
          }
          char v57 = *(unsigned char *)(v66 + v68) ^ v55;
          if (!v47)
          {
LABEL_18:
            *(void *)&long long v111 = v54;
            WORD4(v111)  = v53;
            BYTE10(v111)  = BYTE2(v53);
            BYTE11(v111)  = BYTE3(v53);
            BYTE12(v111)  = BYTE4(v53);
            BYTE13(v111)  = BYTE5(v53);
            BYTE14(v111)  = BYTE6(v53);
            if (v52 >= BYTE6(v53)) {
              goto LABEL_92;
            }
            *((unsigned char *)&v111 + v52)  = v57;
            *(void *)&long long v112 = v111;
            *((void *)&v112 + 1)  = DWORD2(v111) | ((unint64_t)BYTE12(v111) << 32) | ((unint64_t)BYTE13(v111) << 40) | ((unint64_t)BYTE14(v111) << 48);
            goto LABEL_11;
          }
        }
        else
        {
LABEL_16:
          if (v52 >= v104) {
            goto LABEL_86;
          }
          *(void *)&long long v111 = v43;
          DWORD2(v111)  = v106;
          WORD6(v111)  = WORD2(v106);
          char v57 = *((unsigned char *)&v111 + v52) ^ v55;
          if (!v47) {
            goto LABEL_18;
          }
        }
        if (v47 == 1)
        {
          long long v112 = v107;
          if (v52 >= v54 >> 32 || v52 < (int)v54) {
            goto LABEL_95;
          }
          uint64_t v47 = v53 & 0x3FFFFFFFFFFFFFFFLL;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            if (__DataStorage._bytes.getter())
            {
              unint64_t v46 = v53 & 0x3FFFFFFFFFFFFFFFLL;
              if (__OFSUB__((int)v54, __DataStorage._offset.getter())) {
                goto LABEL_100;
              }
            }
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v76 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v47 = v76;
          }
          unint64_t v46 = v47;
          __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
          uint64_t v77 = __DataStorage._bytes.getter();
          if (!v77) {
            goto LABEL_110;
          }
          uint64_t v78 = v77;
          unint64_t v46 = v47;
          uint64_t v79 = __DataStorage._offset.getter();
          if (__OFSUB__(v52, v79)) {
            goto LABEL_97;
          }
          *(unsigned char *)(v78 + v52 - v79)  = v57;
          unint64_t v51 = v47 | 0x4000000000000000;
        }
        else
        {
          long long v112 = v107;
          if (v52 < *(void *)(v54 + 16)) {
            goto LABEL_94;
          }
          if (v52 >= *(void *)(v54 + 24)) {
            goto LABEL_96;
          }
          uint64_t v47 = v53 & 0x3FFFFFFFFFFFFFFFLL;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v71 = *(void *)(v54 + 16);
            uint64_t v72 = *(void *)(v54 + 24);
            uint64_t v73 = __DataStorage._bytes.getter();
            if (v73)
            {
              uint64_t v74 = v73;
              unint64_t v46 = v47;
              uint64_t v75 = __DataStorage._offset.getter();
              if (__OFSUB__(v71, v75)) {
                goto LABEL_101;
              }
              unint64_t v46 = v74 + v71 - v75;
              if (__OFSUB__(v72, v71)) {
                goto LABEL_99;
              }
            }
            else
            {
              unint64_t v46 = 0;
              if (__OFSUB__(v72, v71)) {
                goto LABEL_99;
              }
            }
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v80 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            swift_release();
            uint64_t v47 = v80;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v81 = *(void *)(v54 + 16);
            uint64_t v82 = *(void *)(v54 + 24);
            type metadata accessor for Data.RangeReference();
            uint64_t v83 = swift_allocObject();
            *(void *)(v83 + 16)  = v81;
            *(void *)(v83 + 24)  = v82;
            swift_release();
            uint64_t v54 = v83;
          }
          unint64_t v46 = v47;
          __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
          uint64_t v84 = __DataStorage._bytes.getter();
          if (!v84) {
            goto LABEL_111;
          }
          uint64_t v85 = v84;
          unint64_t v46 = v47;
          uint64_t v86 = __DataStorage._offset.getter();
          if (__OFSUB__(v52, v86)) {
            goto LABEL_98;
          }
          *(unsigned char *)(v85 + v52 - v86)  = v57;
          unint64_t v51 = v47 | 0x8000000000000000;
        }
        *(void *)&long long v112 = v54;
        *((void *)&v112 + 1)  = v51;
LABEL_11:
        uint64_t v50 = v108;
        if (v108 != v49) {
          continue;
        }
LABEL_2:
        uint64_t v44 = v101 + 1;
        if (v101 != 4096) {
          goto LABEL_3;
        }
        unint64_t v46 = *((void *)&v112 + 1);
        uint64_t v47 = v112;
        switch(*((void *)&v112 + 1) >> 62)
        {
          case 1:
            if (__OFSUB__(DWORD1(v112), v112)) {
              goto LABEL_103;
            }
            uint64_t v87 = DWORD1(v112) - (int)v112;
LABEL_77:
            sub_100013D44(v112, *((unint64_t *)&v112 + 1));
LABEL_78:
            if (v87 != 32) {
              goto LABEL_112;
            }
            (*(void (**)(char *, uint64_t))(v91 + 8))(v97, v92);
            sub_10000C970(v43, v106);
            sub_10000C970(v112, *((unint64_t *)&v112 + 1));
            return v47;
          case 2:
            uint64_t v89 = *(void *)(v112 + 16);
            uint64_t v88 = *(void *)(v112 + 24);
            uint64_t v87 = v88 - v89;
            if (!__OFSUB__(v88, v89)) {
              goto LABEL_77;
            }
            goto LABEL_104;
          case 3:
            goto LABEL_112;
          default:
            uint64_t v87 = BYTE14(v112);
            goto LABEL_78;
        }
      case 3:
        goto LABEL_105;
      default:
        if (v52 >= BYTE14(v112)) {
          goto LABEL_81;
        }
        LODWORD(v111)  = v112;
        WORD2(v111)  = WORD2(v112);
        *(void *)((char *)&v111 + 6)  = *(void *)((char *)&v112 + 6);
        char v55 = *((unsigned char *)&v111 + v52);
        unint64_t v46 = v109;
        int v56 = (int)v110;
        if (!v110) {
          goto LABEL_16;
        }
        goto LABEL_33;
    }
  }
}

uint64_t sub_100079020(unsigned char *a1)
{
  uint64_t v2 = String.count.getter();
  sub_100260F60(a1, v2);
  return SymmetricKey.init<A>(data:)();
}

uint64_t sub_100079094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000790AC(a1, a2, a3);
}

uint64_t sub_1000790AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3]  = &type metadata for UnsafeRawBufferPointer;
  v14[4]  = &protocol witness table for UnsafeRawBufferPointer;
  v14[0]  = a1;
  v14[1]  = a2;
  Swift::String v4 = sub_1000369C4(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_100013D9C(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1001264EC((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_100126568((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = sub_100010754((uint64_t)v14);
  *a3  = v8;
  a3[1]  = v9;
  return result;
}

unint64_t sub_10007917C()
{
  unint64_t result = qword_10047DFC8;
  if (!qword_10047DFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFC8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NANServiceName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NANServiceName()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for NANServiceName(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NANServiceName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANServiceName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPassphrase()
{
  return &type metadata for NANPassphrase;
}

uint64_t sub_100079314(unsigned char *a1)
{
  return sub_100079020(a1);
}

uint64_t sub_100079330(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RadioResources.SymbolicChannel.Resolver.infraChannel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 & 0xFFFFFFFFFFFFLL;
}

uint64_t NANDiscoveryWindowStartEvent.channel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4 & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiNetwork.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  strcpy((char *)v7, "WiFiNetwork[");
  v4._countAndFlagsBits  = Channel.description.getter(a4 & 0xFFFFFFFFFFFFLL);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = 93;
  v5._object  = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

void WiFiNetwork.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  Swift::UInt8 v6 = a4;
  unint64_t v7 = a4 >> 8;
  unint64_t v8 = a4 >> 16;
  unint64_t v9 = a4 >> 24;
  unint64_t v10 = HIDWORD(a4);
  unint64_t v11 = a4 >> 40;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a5);
  Hasher._combine(_:)(0x801004u >> ((a5 >> 29) & 0xF8));
  switch(BYTE5(a5))
  {
    case 2:
      Swift::UInt v12 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v12 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v12 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v12 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v12 = 5;
LABEL_8:
      Hasher._combine(_:)(v12);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a5) & 1);
      break;
  }
}

uint64_t static WiFiNetwork.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10007A198(a1, a2, a3 & 0xFFFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7 & 0xFFFFFFFFFFFFLL, a8 & 0xFFFFFFFFFFFFLL);
}

Swift::Int WiFiNetwork.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v5 = a3;
  unint64_t v6 = a3 >> 8;
  unint64_t v7 = a3 >> 16;
  unint64_t v8 = a3 >> 24;
  unint64_t v9 = HIDWORD(a3);
  unint64_t v10 = a3 >> 40;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(0x801004u >> ((a4 >> 29) & 0xF8));
  switch(BYTE5(a4))
  {
    case 2:
      Swift::UInt v11 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v11 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v11 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v11 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v11 = 5;
LABEL_8:
      Hasher._combine(_:)(v11);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a4) & 1);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_10007971C()
{
  return WiFiNetwork.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 21) << 40), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40));
}

void sub_10007974C(uint64_t a1)
{
  WiFiNetwork.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 21) << 40), *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 29) << 40));
}

Swift::Int sub_10007977C()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 24);
  char v10 = *(unsigned char *)(v0 + 28);
  int v11 = *(unsigned __int8 *)(v0 + 29);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 19);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 20);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 21);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(0x801004u >> (8 * v10));
  switch(v11)
  {
    case 2:
      Swift::UInt v8 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v8 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v8 = 5;
LABEL_8:
      Hasher._combine(_:)(v8);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v11 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_100079930()
{
  uint64_t v1 = *(unsigned int *)(v0 + 24);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 29);
  strcpy((char *)v7, "WiFiNetwork[");
  v4._countAndFlagsBits  = Channel.description.getter(v1 | (v2 << 32) | (v3 << 40));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = 93;
  v5._object  = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t sub_1000799B4(uint64_t a1, uint64_t a2)
{
  return sub_10007A198(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 40), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40), *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 40));
}

BOOL static NANInternetSharingStatistics.Status.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NANInternetSharingStatistics.Status.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NANInternetSharingStatistics.Status.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AWDLPeer.Reachability.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

unint64_t sub_100079AD8()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0x6669636570736E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

uint64_t sub_100079B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007B33C(a1, a2);
  *a3  = result;
  return result;
}

void sub_100079B68(unsigned char *a1@<X8>)
{
  *a1  = 3;
}

uint64_t sub_100079B74(uint64_t a1)
{
  unint64_t v2 = sub_10007A388();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079BB0(uint64_t a1)
{
  unint64_t v2 = sub_10007A388();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100079BEC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = 1;
  return result;
}

uint64_t sub_100079C1C(uint64_t a1)
{
  unint64_t v2 = sub_10007A484();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079C58(uint64_t a1)
{
  unint64_t v2 = sub_10007A484();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100079C94(uint64_t a1)
{
  unint64_t v2 = sub_10007A430();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079CD0(uint64_t a1)
{
  unint64_t v2 = sub_10007A430();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100079D0C(uint64_t a1)
{
  unint64_t v2 = sub_10007A3DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079D48(uint64_t a1)
{
  unint64_t v2 = sub_10007A3DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InfrastructureDisableReason.encode(to:)(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_100010BCC(&qword_10047DFD0);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010BCC(&qword_10047DFD8);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin();
  Swift::UInt8 v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_10047DFE0);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010BCC(&qword_10047DFE8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10007A388();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_10007A430();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_10007A3DC();
      Swift::String v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_10007A484();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

Swift::Int AWDLPeer.Reachability.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void *InfrastructureDisableReason.init(from:)(void *a1)
{
  return sub_10007A4D8(a1);
}

void *sub_10007A150@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007A4D8(a1);
  if (!v2) {
    *a2  = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10007A17C(void *a1)
{
  return InfrastructureDisableReason.encode(to:)(a1, *v1);
}

uint64_t sub_10007A198(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    LOWORD(v17)  = a3;
    BYTE2(v17)  = BYTE2(a3);
    HIBYTE(v17)  = BYTE3(a3);
    LOBYTE(v18)  = BYTE4(a3);
    HIBYTE(v18)  = BYTE5(a3);
    LOWORD(v15)  = a7;
    BYTE2(v15)  = BYTE2(a7);
    HIBYTE(v15)  = BYTE3(a7);
    LOBYTE(v16)  = BYTE4(a7);
    HIBYTE(v16)  = BYTE5(a7);
    BOOL v14 = v17 == v15 && v18 == v16;
    if (v14
      && a4 == a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0;
          }
          break;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0;
          }
          break;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0;
          }
          break;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0;
          }
          break;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0;
          }
          break;
        default:
          if (BYTE5(a8) - 2 < 5 || ((a4 & 0x10000000000) == 0) == ((a8 >> 40) & 1)) {
            return 0;
          }
          break;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10007A388()
{
  unint64_t result = qword_10047DFF0;
  if (!qword_10047DFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFF0);
  }
  return result;
}

unint64_t sub_10007A3DC()
{
  unint64_t result = qword_10047DFF8;
  if (!qword_10047DFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DFF8);
  }
  return result;
}

unint64_t sub_10007A430()
{
  unint64_t result = qword_10047E000;
  if (!qword_10047E000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E000);
  }
  return result;
}

unint64_t sub_10007A484()
{
  unint64_t result = qword_10047E008;
  if (!qword_10047E008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E008);
  }
  return result;
}

void *sub_10007A4D8(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047E070);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin();
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100010BCC(&qword_10047E078);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010BCC(&qword_10047E080);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010BCC(&qword_10047E088);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000369C4(a1, a1[3]);
  sub_10007A388();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  unint64_t v30 = a1;
  BOOL v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_100010BCC(&qword_10047E090);
    *uint64_t v11 = &type metadata for InfrastructureDisableReason;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1  = v30;
LABEL_7:
    sub_100010754((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_10007A430();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_10007A3DC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_10007A484();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_100010754((uint64_t)v30);
  return v11;
}

unint64_t sub_10007AA4C()
{
  unint64_t result = qword_10047E010;
  if (!qword_10047E010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E010);
  }
  return result;
}

unint64_t sub_10007AAA4()
{
  unint64_t result = qword_10047E018;
  if (!qword_10047E018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E018);
  }
  return result;
}

unint64_t sub_10007AAFC()
{
  unint64_t result = qword_10047E020;
  if (!qword_10047E020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E020);
  }
  return result;
}

uint64_t initializeWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28)  = *(_WORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19)  = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20)  = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21)  = *(unsigned char *)(a2 + 21);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28)  = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29)  = *(unsigned char *)(a2 + 29);
  return a1;
}

__n128 initializeWithCopy for NANDiscoveryWindowStartEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14)  = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28)  = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiNetwork(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 30)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiNetwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 30)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 30)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiNetwork()
{
  return &type metadata for WiFiNetwork;
}

unsigned char *storeEnumTagSinglePayload for AutoJoinState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007AE10);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoJoinState()
{
  return &type metadata for AutoJoinState;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason()
{
  return &type metadata for InfrastructureDisableReason;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreP2P27InfrastructureDisableReasonOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007AFBCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.CodingKeys()
{
  return &type metadata for InfrastructureDisableReason.CodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.LowLatencyRequiredCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.UnspecifiedCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys;
}

unint64_t sub_10007B028()
{
  unint64_t result = qword_10047E028;
  if (!qword_10047E028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E028);
  }
  return result;
}

unint64_t sub_10007B080()
{
  unint64_t result = qword_10047E030;
  if (!qword_10047E030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E030);
  }
  return result;
}

unint64_t sub_10007B0D8()
{
  unint64_t result = qword_10047E038;
  if (!qword_10047E038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E038);
  }
  return result;
}

unint64_t sub_10007B130()
{
  unint64_t result = qword_10047E040;
  if (!qword_10047E040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E040);
  }
  return result;
}

unint64_t sub_10007B188()
{
  unint64_t result = qword_10047E048;
  if (!qword_10047E048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E048);
  }
  return result;
}

unint64_t sub_10007B1E0()
{
  unint64_t result = qword_10047E050;
  if (!qword_10047E050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E050);
  }
  return result;
}

unint64_t sub_10007B238()
{
  unint64_t result = qword_10047E058;
  if (!qword_10047E058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E058);
  }
  return result;
}

unint64_t sub_10007B290()
{
  unint64_t result = qword_10047E060;
  if (!qword_10047E060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E060);
  }
  return result;
}

unint64_t sub_10007B2E8()
{
  unint64_t result = qword_10047E068;
  if (!qword_10047E068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E068);
  }
  return result;
}

uint64_t sub_10007B33C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001003DB260
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DB280 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6669636570736E75 && a2 == 0xEB00000000646569)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10007B4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v26 = a2;
  uint64_t v25 = sub_100010BCC(&qword_10047E098);
  __chkstk_darwin();
  unsigned int v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v8 = (char *)&v23 - v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v24 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(a1 + 56);
    char v18 = *(unsigned char *)(*(void *)(a1 + 48) + v16);
    uint64_t v19 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    sub_10008B420(v17 + *(void *)(*(void *)(v19 - 8) + 72) * v16, (uint64_t)&v8[*(int *)(v25 + 48)], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    *int v8 = v18;
    sub_10006EC68((uint64_t)v8, (uint64_t)v6, &qword_10047E098);
    sub_1000829E0(v6, v26, v27);
    uint64_t result = sub_1000380B4((uint64_t)v6, &qword_10047E098);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v14);
  if (v21)
  {
LABEL_19:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v14 << 6);
    goto LABEL_5;
  }
  int64_t v22 = v14 + 1;
  if (v14 + 1 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v14 + 2;
  if (v14 + 2 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v14 + 3;
  if (v14 + 3 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_18;
  }
  int64_t v22 = v14 + 4;
  if (v14 + 4 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
LABEL_18:
    int64_t v14 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v14 >= v24) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v23 + 8 * v14);
    ++v22;
    if (v21) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void *NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.all;
}

void *NANGenericServiceProtocol.AttributeFilter.customAttributes.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.customAttributes;
}

uint64_t sub_10007B760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v63 = a4;
  uint64_t v69 = a2;
  v62[1]  = type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v7 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)v62 - v8;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NWEndpoint.Port();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  unint64_t v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(sub_1000877C8(a1))
  {
    case 1u:
      uint64_t v19 = v69;
      uint64_t v20 = v64;
      char v21 = sub_100257954(v69, a3);
      if (v20) {
        goto LABEL_58;
      }
      if (v21 == 6)
      {
        char v22 = 0;
      }
      else
      {
        if (v21 != 17) {
          goto LABEL_55;
        }
        char v22 = 1;
      }
      sub_10000C970(v19, a3);
      *uint64_t v63 = v22;
      return swift_storeEnumTagMultiPayload();
    case 2u:
      unint64_t v23 = a3 >> 62;
      uint64_t v19 = v69;
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v24)  = HIDWORD(v69) - v69;
          if (__OFSUB__(HIDWORD(v69), v69)) {
            goto LABEL_68;
          }
          unint64_t v24 = (int)v24;
LABEL_25:
          if ((v24 & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v24 >> 16)
          {
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
LABEL_27:
          if (!v24) {
            goto LABEL_56;
          }
          if (!v23) {
            goto LABEL_53;
          }
          if (v23 == 1)
          {
            LODWORD(v43)  = HIDWORD(v69) - v69;
            if (__OFSUB__(HIDWORD(v69), v69))
            {
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            unint64_t v43 = (int)v43;
          }
          else
          {
            uint64_t v58 = *(void *)(v69 + 16);
            uint64_t v57 = *(void *)(v69 + 24);
            BOOL v42 = __OFSUB__(v57, v58);
            unint64_t v43 = v57 - v58;
            if (v42)
            {
LABEL_73:
              __break(1u);
              JUMPOUT(0x10007C020);
            }
          }
          if ((v43 & 0x8000000000000000) != 0) {
            goto LABEL_66;
          }
          if (v43 >> 16)
          {
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
          if (v43 <= 0xFF)
          {
LABEL_53:
            static String.Encoding.utf8.getter();
            uint64_t v59 = String.init(data:encoding:)();
            if (v60)
            {
              uint64_t v25 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(v59, v60);
              if (v26)
              {
LABEL_11:
                uint64_t v27 = v25;
                uint64_t v28 = v26;
                sub_10000C970(v19, a3);
                uint64_t v29 = v63;
                *(void *)uint64_t v63 = v27;
                *((void *)v29 + 1)  = v28;
                return swift_storeEnumTagMultiPayload();
              }
            }
LABEL_55:
            sub_10000F000();
            swift_allocError();
            *(_OWORD *)uint64_t v61 = xmmword_1003B00B0;
            goto LABEL_57;
          }
LABEL_56:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v61 = 0;
          *(void *)(v61 + 8)  = 0;
LABEL_57:
          *(unsigned char *)(v61 + 16)  = 2;
          swift_willThrow();
LABEL_58:
          uint64_t v18 = v19;
          return sub_10000C970(v18, a3);
        case 2uLL:
          uint64_t v41 = *(void *)(v69 + 16);
          uint64_t v40 = *(void *)(v69 + 24);
          BOOL v42 = __OFSUB__(v40, v41);
          unint64_t v24 = v40 - v41;
          if (!v42) {
            goto LABEL_25;
          }
          goto LABEL_69;
        case 3uLL:
          goto LABEL_56;
        default:
          unint64_t v24 = BYTE6(a3);
          goto LABEL_27;
      }
    case 3u:
      static String.Encoding.utf8.getter();
      uint64_t v19 = v69;
      uint64_t v25 = String.init(data:encoding:)();
      if (v26) {
        goto LABEL_11;
      }
      goto LABEL_55;
    case 4u:
      unint64_t v30 = v63;
      *(void *)uint64_t v63 = v69;
      *((void *)v30 + 1)  = a3;
      return swift_storeEnumTagMultiPayload();
    case 5u:
      uint64_t v31 = v69;
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v32)  = HIDWORD(v69) - v69;
          if (__OFSUB__(HIDWORD(v69), v69)) {
            goto LABEL_70;
          }
          uint64_t v32 = (int)v32;
LABEL_35:
          if (v32 == 16)
          {
            unint64_t v46 = v63;
            *(void *)uint64_t v63 = v69;
            *((void *)v46 + 1)  = a3;
            return swift_storeEnumTagMultiPayload();
          }
LABEL_37:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v47 = 0;
          *(void *)(v47 + 8)  = 0;
          *(unsigned char *)(v47 + 16)  = 2;
          swift_willThrow();
          uint64_t v18 = v31;
          break;
        case 2uLL:
          uint64_t v45 = *(void *)(v69 + 16);
          uint64_t v44 = *(void *)(v69 + 24);
          BOOL v42 = __OFSUB__(v44, v45);
          uint64_t v32 = v44 - v45;
          if (!v42) {
            goto LABEL_35;
          }
          goto LABEL_71;
        case 3uLL:
          goto LABEL_37;
        default:
          uint64_t v32 = BYTE6(a3);
          goto LABEL_35;
      }
      return sub_10000C970(v18, a3);
    case 6u:
      char v33 = v63;
      *(void *)uint64_t v63 = v69;
      *((void *)v33 + 1)  = a3;
      return swift_storeEnumTagMultiPayload();
    case 7u:
      uint64_t v35 = v69;
      sub_100013D44(v69, a3);
      unint64_t v36 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for BinaryDecoder();
      uint64_t v37 = (void *)swift_allocObject();
      v37[5]  = &_swiftEmptyDictionarySingleton;
      v37[2]  = v35;
      v37[3]  = a3;
      uint64_t v38 = 0;
      switch(a3 >> 62)
      {
        case 1uLL:
          uint64_t v38 = (int)v35;
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v35 + 16);
          break;
        default:
          break;
      }
      v37[4]  = v38;
      swift_beginAccess();
      v37[5]  = v36;
      swift_bridgeObjectRelease();
      uint64_t v67 = &type metadata for BinaryDecoder.UnkeyedContainer;
      unint64_t v68 = sub_10008B64C();
      v66[0]  = v37;
      sub_100039448((uint64_t)v66, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
      sub_10008B6A0();
      swift_retain();
      uint64_t v48 = v64;
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      if (v48)
      {
        uint64_t v49 = v35;
LABEL_47:
        sub_10000C970(v49, a3);
        swift_release();
        return sub_100010754((uint64_t)v66);
      }
      uint64_t v64 = 0;
      char v50 = v65;
      char v51 = BYTE1(v65);
      char v52 = BYTE2(v65);
      if (sub_10003916C(v65 | (BYTE1(v65) << 8) | (BYTE2(v65) << 16), 0xF21700u))
      {
        sub_100039448((uint64_t)v66, (uint64_t)v67);
        type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        sub_10008B75C((unint64_t *)&unk_100486410, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        uint64_t v53 = v64;
        UnkeyedDecodingContainer.inferredDecode<A>()();
        if (!v53)
        {
          sub_10000C970(v69, a3);
          swift_release();
          swift_storeEnumTagMultiPayload();
          uint64_t v54 = (uint64_t)v9;
          goto LABEL_63;
        }
      }
      else
      {
        sub_100039448((uint64_t)v66, (uint64_t)v67);
        sub_10008B6F4();
        uint64_t v56 = v64;
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        if (!v56)
        {
          sub_10000C970(v69, a3);
          swift_release();
          *uint64_t v7 = v50;
          v7[1]  = v51;
          v7[2]  = v52;
          *(_OWORD *)(v7 + 8)  = v65;
          swift_storeEnumTagMultiPayload();
          uint64_t v54 = (uint64_t)v7;
LABEL_63:
          sub_10008B488(v54, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
          return sub_100010754((uint64_t)v66);
        }
      }
      uint64_t v49 = v69;
      goto LABEL_47;
    case 8u:
      goto LABEL_21;
    default:
      uint64_t v16 = v69;
      uint64_t v17 = v64;
      sub_100257908(v69, a3);
      if (v17)
      {
        uint64_t v18 = v16;
        return sub_10000C970(v18, a3);
      }
      NWEndpoint.Port.init(rawValue:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        sub_10000C970(v69, a3);
        char v55 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v55(v15, v11, v12);
        v55(v63, v15, v12);
        return swift_storeEnumTagMultiPayload();
      }
      sub_1000380B4((uint64_t)v11, &qword_10047CEF0);
LABEL_21:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v39 = xmmword_1003B00B0;
      *(unsigned char *)(v39 + 16)  = 2;
      swift_willThrow();
      uint64_t v18 = v69;
      return sub_10000C970(v18, a3);
  }
}

uint64_t sub_10007C074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008B420(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_5;
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4u:
    case 5u:
    case 6u:
      sub_10000C970(*(void *)v5, *((void *)v5 + 1));
      goto LABEL_5;
    case 7u:
    case 8u:
      sub_10008B4F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
LABEL_5:
      uint64_t v6 = type metadata accessor for NWEndpoint.Port();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
      break;
    default:
      uint64_t v8 = type metadata accessor for NWEndpoint.Port();
      uint64_t v9 = *(void *)(v8 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      break;
  }
  return result;
}

uint64_t sub_10007C268()
{
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v2 = (unint64_t *)((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008B420(v0, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      return *(unsigned __int8 *)v2;
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      return 2;
    case 4u:
    case 5u:
    case 6u:
      sub_10000C970(*v2, v2[1]);
      return 2;
    default:
      sub_10008B4F0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 2;
  }
}

unint64_t sub_10007C390()
{
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v2 = (unint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008B420(v0, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t result = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      return result;
    case 2:
      return *v2;
    case 3:
      swift_bridgeObjectRelease();
      return 0;
    case 4:
    case 5:
    case 6:
      sub_10000C970(*v2, v2[1]);
      return 0;
    default:
      sub_10008B4F0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 0;
  }
}

unint64_t sub_10007C4C8()
{
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v2 = (unint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008B420(v0, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t result = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      return result;
    case 2:
      swift_bridgeObjectRelease();
      return 0;
    case 3:
      return *v2;
    case 4:
    case 5:
    case 6:
      sub_10000C970(*v2, v2[1]);
      return 0;
    default:
      sub_10008B4F0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 0;
  }
}

uint64_t sub_10007C600@<X0>(long long *a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v5 = (long long *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008B420(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t result = swift_getEnumCaseMultiPayload();
  long long v7 = xmmword_1003B4AC0;
  switch((int)result)
  {
    case 1:
      break;
    case 2:
    case 3:
      long long v8 = xmmword_1003B4AC0;
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
    case 5:
    case 6:
      long long v7 = *v5;
      break;
    default:
      long long v8 = xmmword_1003B4AC0;
      uint64_t result = sub_10008B4F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
LABEL_5:
      long long v7 = v8;
      break;
  }
  *a1  = v7;
  return result;
}

uint64_t sub_10007C73C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008B420(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_5;
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4u:
    case 5u:
    case 6u:
      sub_10000C970(*(void *)v5, *((void *)v5 + 1));
      goto LABEL_5;
    case 7u:
      sub_10008B488((uint64_t)v5, a1, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 0, 1, v8);
    default:
      sub_10008B4F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
LABEL_5:
      uint64_t v6 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
}

uint64_t sub_10007C8F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for NWEndpoint.Port();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10008B420(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v18 = *v10;
      uint64_t v32 = &type metadata for Layer3Protocol;
      LOBYTE(v29)  = v18;
      return Mirror.init(reflecting:)();
    case 2u:
      uint64_t v19 = *(void *)v10;
      uint64_t v20 = *((void *)v10 + 1);
      char v21 = &type metadata for NANServiceName;
      goto LABEL_7;
    case 3u:
      uint64_t v19 = *(void *)v10;
      uint64_t v20 = *((void *)v10 + 1);
      char v21 = (ValueMetadata *)&type metadata for String;
LABEL_7:
      uint64_t v32 = v21;
      uint64_t v29 = v19;
      uint64_t v30 = v20;
      return Mirror.init(reflecting:)();
    case 4u:
    case 5u:
    case 6u:
      uint64_t v11 = *(void *)v10;
      unint64_t v12 = *((void *)v10 + 1);
      sub_100013D44(*(void *)v10, v12);
      uint64_t v13 = sub_100036314(0, 0xE000000000000000, v11, v12);
      uint64_t v15 = v14;
      sub_10000C970(v11, v12);
      uint64_t v32 = (ValueMetadata *)&type metadata for String;
      uint64_t v29 = v13;
      uint64_t v30 = v15;
      goto LABEL_11;
    case 7u:
      sub_10008B488((uint64_t)v10, (uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      uint64_t v32 = (ValueMetadata *)v2;
      char v22 = sub_1000382F0(&v29);
      sub_10008B420((uint64_t)v4, (uint64_t)v22, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      Mirror.init(reflecting:)();
      return sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    case 8u:
      __int16 v23 = *(_WORD *)v10;
      char v24 = v10[2];
      uint64_t v11 = *((void *)v10 + 1);
      unint64_t v12 = *((void *)v10 + 2);
      uint64_t v32 = (ValueMetadata *)sub_100010BCC(&qword_10047E1A0);
      LOWORD(v29)  = v23;
      BYTE2(v29)  = v24;
      sub_100013D44(v11, v12);
      uint64_t v25 = sub_100036314(0, 0xE000000000000000, v11, v12);
      uint64_t v27 = v26;
      sub_10000C970(v11, v12);
      uint64_t v30 = v25;
      uint64_t v31 = v27;
LABEL_11:
      Mirror.init(reflecting:)();
      uint64_t result = sub_10000C970(v11, v12);
      break;
    default:
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v10, v5);
      uint64_t v32 = (ValueMetadata *)v5;
      uint64_t v16 = sub_1000382F0(&v29);
      (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v6 + 16))(v16, v8, v5);
      Mirror.init(reflecting:)();
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
      break;
  }
  return result;
}

uint64_t sub_10007CCA4(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWEndpoint.Port();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008B420(v2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      return swift_bridgeObjectRelease();
    case 2u:
      Hasher._combine(_:)(2uLL);
      String.lowercased()();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3u:
      Hasher._combine(_:)(3uLL);
      String.hash(into:)();
      return swift_bridgeObjectRelease();
    case 4u:
      uint64_t v13 = *(void *)v11;
      unint64_t v14 = *((void *)v11 + 1);
      Hasher._combine(_:)(4uLL);
      goto LABEL_11;
    case 5u:
      uint64_t v13 = *(void *)v11;
      unint64_t v14 = *((void *)v11 + 1);
      Hasher._combine(_:)(5uLL);
      goto LABEL_11;
    case 6u:
      uint64_t v13 = *(void *)v11;
      unint64_t v14 = *((void *)v11 + 1);
      Hasher._combine(_:)(6uLL);
      goto LABEL_11;
    case 7u:
      sub_10008B488((uint64_t)v11, (uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      Hasher._combine(_:)(7uLL);
      NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
      return sub_10008B4F0((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    case 8u:
      __int16 v15 = *(_WORD *)v11;
      char v16 = v11[2];
      uint64_t v13 = *((void *)v11 + 1);
      unint64_t v14 = *((void *)v11 + 2);
      Hasher._combine(_:)(8uLL);
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16)  = xmmword_1003B2760;
      *(_WORD *)(v17 + 32)  = v15;
      *(unsigned char *)(v17 + 34)  = v16;
      uint64_t v18 = sub_1001265EC(v17);
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      Data.hash(into:)();
      sub_10000C970(v18, v20);
LABEL_11:
      Data.hash(into:)();
      uint64_t result = sub_10000C970(v13, v14);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v11, v6);
      Hasher._combine(_:)(0);
      sub_10008B75C(&qword_10047E198, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      break;
  }
  return result;
}

Swift::Int sub_10007D09C()
{
  Hasher.init(_seed:)();
  sub_10007CCA4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10007D0E0()
{
  Hasher.init(_seed:)();
  sub_10007CCA4((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t sub_10007D124(char a1)
{
  unint64_t result = 1953656656;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x2065636976726553;
      break;
    case 3:
      unint64_t result = 0x65636E6174736E49;
      break;
    case 4:
      unint64_t result = 0x666E492074786554;
      break;
    case 5:
      unint64_t result = 1145656661;
      break;
    case 6:
      unint64_t result = 1651469378;
      break;
    case 7:
      unint64_t result = 0x5320726F646E6556;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10007D230(unsigned char *a1, unsigned char *a2)
{
  return (0xDD06050403020100 >> (8 * *a1)) == (0xDD06050403020100 >> (8 * *a2));
}

uint64_t sub_10007D26C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000877C8(*a1);
  *a2  = result;
  return result;
}

void sub_10007D298(unsigned char *a1@<X8>)
{
  *a1  = 0xDD06050403020100 >> (8 * *v1);
}

Swift::Int sub_10007D2BC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10007D318()
{
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * *v0));
}

Swift::Int sub_10007D35C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_10007D3B4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007D414()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10007D464()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *v0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t sub_10007D63C()
{
  return sub_10007D124(*v0);
}

BOOL NANGenericServiceProtocol.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

CoreP2P::NANGenericServiceProtocol __swiftcall NANGenericServiceProtocol.init()()
{
  return (CoreP2P::NANGenericServiceProtocol)sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t NANGenericServiceProtocol.port.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v14 - v7;
  if (*(void *)(a1 + 16) && (unint64_t v9 = sub_1000310AC(0), (v10 & 1) != 0))
  {
    sub_10008B420(*(void *)(a1 + 56) + *(void *)(v4 + 72) * v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10008B488((uint64_t)v6, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10007C074(a2);
    return sub_10008B4F0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  }
  else
  {
    uint64_t v12 = type metadata accessor for NWEndpoint.Port();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(a2, 1, 1, v12);
  }
}

uint64_t NANGenericServiceProtocol.port.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - v10;
  sub_1000136F4(a1, (uint64_t)v7, &qword_10047CEF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v11, v5, v2);
    uint64_t v13 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
  }
  sub_1000136F4((uint64_t)v11, (uint64_t)v9, &qword_10047CF68);
  sub_100027C1C((uint64_t)v9, 0);
  sub_1000380B4(a1, &qword_10047CEF0);
  return sub_1000380B4((uint64_t)v11, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.port.modify(uint64_t **a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CEF0) - 8) + 64);
  a1[1]  = (uint64_t *)malloc(v3);
  uint64_t v4 = (uint64_t *)malloc(v3);
  a1[2]  = v4;
  NANGenericServiceProtocol.port.getter(*v1, (uint64_t)v4);
  return sub_10007DB50;
}

void sub_10007DB50(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_1000136F4(*(void *)(a1 + 16), (uint64_t)v2, &qword_10047CEF0);
    NANGenericServiceProtocol.port.setter((uint64_t)v2);
    sub_1000380B4((uint64_t)v3, &qword_10047CEF0);
  }
  else
  {
    NANGenericServiceProtocol.port.setter(*(void *)(a1 + 16));
  }
  free(v3);

  free(v2);
}

uint64_t NANGenericServiceProtocol.transportProtocol.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - v5;
  if (!*(void *)(a1 + 16)) {
    return 2;
  }
  unint64_t v7 = sub_1000310AC(1);
  if ((v8 & 1) == 0) {
    return 2;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t v9 = sub_10007C268();
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v9;
}

uint64_t NANGenericServiceProtocol.transportProtocol.setter(unsigned __int8 a1)
{
  int v2 = a1;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  if (v2 == 2)
  {
    uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  }
  else
  {
    *uint64_t v6 = a1 & 1;
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  }
  sub_1000136F4((uint64_t)v6, (uint64_t)v4, &qword_10047CF68);
  sub_100027C1C((uint64_t)v4, 1);
  return sub_1000380B4((uint64_t)v6, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.transportProtocol.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  *uint64_t v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  v3[3]  = malloc(v4);
  *((unsigned char *)v3 + 32)  = NANGenericServiceProtocol.transportProtocol.getter(*v1);
  return sub_10007DF18;
}

void sub_10007DF18(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 32);
  if (a2)
  {
    size_t v4 = (unsigned char *)v2[1];
    if (v3 == 2)
    {
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    }
    else
    {
      *size_t v4 = v3 & 1;
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 0, 1, v8);
    }
    uint64_t v9 = (void *)v2[2];
    uint64_t v10 = (void *)v2[3];
    uint64_t v11 = v2[1];
    sub_1000136F4(v11, (uint64_t)v9, &qword_10047CF68);
    sub_100027C1C((uint64_t)v9, 1);
    uint64_t v12 = (void *)v11;
  }
  else
  {
    uint64_t v6 = (unsigned char *)v2[3];
    if (v3 == 2)
    {
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    }
    else
    {
      *uint64_t v6 = v3 & 1;
      uint64_t v13 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 0, 1, v13);
    }
    uint64_t v9 = (void *)v2[2];
    uint64_t v11 = v2[3];
    uint64_t v12 = (void *)v2[1];
    sub_1000136F4(v11, (uint64_t)v9, &qword_10047CF68);
    sub_100027C1C((uint64_t)v9, 1);
    uint64_t v10 = (void *)v11;
  }
  sub_1000380B4(v11, &qword_10047CF68);
  free(v10);
  free(v9);
  free(v12);

  free(v2);
}

unint64_t NANGenericServiceProtocol.serviceName.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  size_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - v5;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v7 = sub_1000310AC(2);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  unint64_t v9 = sub_10007C390();
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v9;
}

uint64_t NANGenericServiceProtocol.serviceName.setter(uint64_t a1, uint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2)
  {
    *unint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  }
  sub_1000136F4((uint64_t)v7, (uint64_t)v5, &qword_10047CF68);
  sub_100027C1C((uint64_t)v5, 2);
  return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.serviceName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  *uint64_t v3 = NANGenericServiceProtocol.serviceName.getter(*v1);
  v3[1]  = v5;
  return sub_10007E474;
}

void sub_10007E474(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    size_t v4 = (void *)v2[3];
    if (v3)
    {
      *size_t v4 = *v2;
      v4[1]  = v3;
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
    }
    else
    {
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
    }
    uint64_t v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000136F4((uint64_t)v11, (uint64_t)v10, &qword_10047CF68);
    swift_bridgeObjectRetain();
    sub_100027C1C((uint64_t)v10, 2);
    sub_1000380B4((uint64_t)v11, &qword_10047CF68);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = (void *)v2[5];
    if (v3)
    {
      *uint64_t v6 = *v2;
      v6[1]  = v3;
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
    }
    else
    {
      uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    uint64_t v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000136F4((uint64_t)v9, (uint64_t)v10, &qword_10047CF68);
    sub_100027C1C((uint64_t)v10, 2);
    sub_1000380B4((uint64_t)v9, &qword_10047CF68);
  }
  free(v9);
  free(v10);
  free(v11);

  free(v2);
}

unint64_t NANGenericServiceProtocol.instanceName.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  size_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - v5;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v7 = sub_1000310AC(3);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  unint64_t v9 = sub_10007C4C8();
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v9;
}

uint64_t NANGenericServiceProtocol.instanceName.setter(uint64_t a1, uint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2)
  {
    *unint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  }
  sub_1000136F4((uint64_t)v7, (uint64_t)v5, &qword_10047CF68);
  sub_100027C1C((uint64_t)v5, 3);
  return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.instanceName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  *uint64_t v3 = NANGenericServiceProtocol.instanceName.getter(*v1);
  v3[1]  = v5;
  return sub_10007E9E4;
}

void sub_10007E9E4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    size_t v4 = (void *)v2[3];
    if (v3)
    {
      *size_t v4 = *v2;
      v4[1]  = v3;
      uint64_t v5 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
    }
    else
    {
      uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
    }
    uint64_t v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000136F4((uint64_t)v11, (uint64_t)v10, &qword_10047CF68);
    swift_bridgeObjectRetain();
    sub_100027C1C((uint64_t)v10, 3);
    sub_1000380B4((uint64_t)v11, &qword_10047CF68);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = (void *)v2[5];
    if (v3)
    {
      *uint64_t v6 = *v2;
      v6[1]  = v3;
      uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
    }
    else
    {
      uint64_t v12 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    uint64_t v10 = (void *)v2[4];
    uint64_t v9 = (void *)v2[5];
    uint64_t v11 = (void *)v2[3];
    sub_1000136F4((uint64_t)v9, (uint64_t)v10, &qword_10047CF68);
    sub_100027C1C((uint64_t)v10, 3);
    sub_1000380B4((uint64_t)v9, &qword_10047CF68);
  }
  free(v9);
  free(v10);
  free(v11);

  free(v2);
}

uint64_t NANGenericServiceProtocol.textInfo.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  size_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v7 = sub_1000310AC(4);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10007C600(&v10);
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.textInfo.setter(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *unint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_1000136F4((uint64_t)v7, (uint64_t)v5, &qword_10047CF68);
  sub_100027C1C((uint64_t)v5, 4);
  return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.textInfo.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  *uint64_t v3 = NANGenericServiceProtocol.textInfo.getter(*v1);
  v3[1]  = v5;
  return sub_10007EF58;
}

void sub_10007EF58(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *uint64_t v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v13, (uint64_t)v12, &qword_10047CF68);
    sub_100038004(v3, v4);
    sub_100027C1C((uint64_t)v12, 4);
    sub_1000380B4((uint64_t)v13, &qword_10047CF68);
    sub_10000C95C(*v2, v2[1]);
  }
  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v11, (uint64_t)v12, &qword_10047CF68);
    sub_100027C1C((uint64_t)v12, 4);
    sub_1000380B4((uint64_t)v11, &qword_10047CF68);
  }
  free(v11);
  free(v12);
  free(v13);

  free(v2);
}

uint64_t NANGenericServiceProtocol.blob.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v7 = sub_1000310AC(6);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10007C600(&v10);
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.blob.setter(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *unint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_1000136F4((uint64_t)v7, (uint64_t)v5, &qword_10047CF68);
  sub_100027C1C((uint64_t)v5, 6);
  return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.blob.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  *uint64_t v3 = NANGenericServiceProtocol.blob.getter(*v1);
  v3[1]  = v5;
  return sub_10007F4E0;
}

void sub_10007F4E0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *uint64_t v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v13, (uint64_t)v12, &qword_10047CF68);
    sub_100038004(v3, v4);
    sub_100027C1C((uint64_t)v12, 6);
    sub_1000380B4((uint64_t)v13, &qword_10047CF68);
    sub_10000C95C(*v2, v2[1]);
  }
  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v11, (uint64_t)v12, &qword_10047CF68);
    sub_100027C1C((uint64_t)v12, 6);
    sub_1000380B4((uint64_t)v11, &qword_10047CF68);
  }
  free(v11);
  free(v12);
  free(v13);

  free(v2);
}

uint64_t NANGenericServiceProtocol.uuid.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v7 = sub_1000310AC(5);
  if ((v8 & 1) == 0) {
    return 0;
  }
  sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10008B488((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10007C600(&v10);
  sub_10008B4F0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.uuid.setter(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    uint64_t v8 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *unint64_t v7 = a1;
    v7[1]  = a2;
    uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_1000136F4((uint64_t)v7, (uint64_t)v5, &qword_10047CF68);
  sub_100027C1C((uint64_t)v5, 5);
  return sub_1000380B4((uint64_t)v7, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.uuid.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[2]  = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[3]  = malloc(v4);
  v3[4]  = malloc(v4);
  v3[5]  = malloc(v4);
  *uint64_t v3 = NANGenericServiceProtocol.uuid.getter(*v1);
  v3[1]  = v5;
  return sub_10007FA68;
}

void sub_10007FA68(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    uint64_t v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      uint64_t v6 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *uint64_t v5 = v3;
      v5[1]  = v4;
      uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v13, (uint64_t)v12, &qword_10047CF68);
    sub_100038004(v3, v4);
    sub_100027C1C((uint64_t)v12, 5);
    sub_1000380B4((uint64_t)v13, &qword_10047CF68);
    sub_10000C95C(*v2, v2[1]);
  }
  else
  {
    unint64_t v7 = v2[1];
    uint64_t v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *uint64_t v8 = *v2;
      v8[1]  = v7;
      uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    uint64_t v12 = (void *)v2[4];
    uint64_t v11 = (void *)v2[5];
    uint64_t v13 = (void *)v2[3];
    sub_1000136F4((uint64_t)v11, (uint64_t)v12, &qword_10047CF68);
    sub_100027C1C((uint64_t)v12, 5);
    sub_1000380B4((uint64_t)v11, &qword_10047CF68);
  }
  free(v11);
  free(v12);
  free(v13);

  free(v2);
}

uint64_t sub_10007FCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - v7;
  sub_100010BCC(&qword_10047E318);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_1000310AC(7), (v12 & 1) != 0))
  {
    sub_10008B420(*(void *)(a1 + 56) + *(void *)(v4 + 72) * v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10008B488((uint64_t)v6, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10007C73C((uint64_t)v10);
    sub_10008B4F0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v13 - 1) + 48))(v10, 1, v13) != 1) {
      return sub_10008B488((uint64_t)v10, a2, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    }
  }
  else
  {
    uint64_t v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    (*(void (**)(char *, uint64_t, uint64_t, int *))(*((void *)v13 - 1) + 56))(v10, 1, 1, v13);
  }
  *(_WORD *)a2  = 0;
  *(unsigned char *)(a2 + 2)  = 1;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v15 = a2 + v13[6];
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_OWORD *)(a2 + v13[7])  = xmmword_1003B4AC0;
  *(_OWORD *)(a2 + v13[8])  = xmmword_1003B4AC0;
  *(_OWORD *)(a2 + v13[9])  = xmmword_1003B4AC0;
  uint64_t v17 = a2 + v13[10];
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(void *)(a2 + v13[11])  = _swiftEmptyArrayStorage;
  uint64_t v19 = a2 + v13[12];
  uint64_t v20 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = a2 + v13[13];
  *(void *)uint64_t v21 = 0;
  *(void *)(v21 + 8)  = 0;
  *(void *)(v21 + 16)  = 0;
  *(unsigned char *)(v21 + 24)  = 1;
  return sub_1000380B4((uint64_t)v10, &qword_10047E318);
}

uint64_t sub_10008000C(char a1)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - v5;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(*v1, (uint64_t)v8);
  *uint64_t v8 = a1;
  sub_10008B420((uint64_t)v8, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
  sub_1000136F4((uint64_t)v6, (uint64_t)v4, &qword_10047CF68);
  sub_100027C1C((uint64_t)v4, 7);
  sub_10008B4F0((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000380B4((uint64_t)v6, &qword_10047CF68);
}

uint64_t sub_1000801B4(int a1, char a2)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v6 = (unsigned __int8 *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(*v2, (uint64_t)v6);
  int v7 = *v6;
  sub_10008B4F0((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((v7 & a1) != 0) {
    char v8 = ~(_BYTE)a1;
  }
  else {
    char v8 = -1;
  }
  char v9 = v8 & v7;
  if ((v7 & a1) == a1) {
    char v10 = 0;
  }
  else {
    char v10 = a1;
  }
  char v11 = v10 | v7;
  if (a2) {
    char v12 = v11;
  }
  else {
    char v12 = v9;
  }
  return sub_10008000C(v12);
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.getter(uint64_t a1)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v3 = (unsigned __int8 *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v3);
  LODWORD(a1)  = *v3;
  sub_10008B4F0((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return (a1 >> 2) & 1;
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.setter(char a1)
{
  return sub_1000801B4(4, a1);
}

void (*NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1  = v1;
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v4 = (char *)malloc(*(void *)(*(void *)(v3 - 8) + 64));
  *(void *)(a1 + 8)  = v4;
  sub_10007FCA4(*v1, (uint64_t)v4);
  char v5 = *v4;
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *(unsigned char *)(a1 + 16)  = (v5 & 4) != 0;
  return sub_1000803D0;
}

void sub_1000803D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  sub_1000801B4(4, *(unsigned char *)(a1 + 16));

  free(v1);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.getter(uint64_t a1)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v3);
  LODWORD(a1)  = v3[1];
  int v4 = v3[2];
  sub_10008B4F0((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return a1 | (v4 << 8);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.setter(__int16 a1)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  int v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - v5;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(*v1, (uint64_t)v8);
  v8[1]  = a1;
  v8[2]  = HIBYTE(a1) & 1;
  sub_10008B420((uint64_t)v8, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v9 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
  sub_1000136F4((uint64_t)v6, (uint64_t)v4, &qword_10047CF68);
  sub_100027C1C((uint64_t)v4, 7);
  sub_10008B4F0((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000380B4((uint64_t)v6, &qword_10047CF68);
}

void (*NANGenericServiceProtocol.datapathSubscribeID.modify(void *a1))(uint64_t ***a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  *uint64_t v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  uint64_t v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v3[3]  = v6;
  sub_10007FCA4(*v1, (uint64_t)v6);
  char v7 = v6[1];
  char v8 = v6[2];
  sub_10008B4F0((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *((unsigned char *)v3 + 32)  = v7;
  *((unsigned char *)v3 + 33)  = v8;
  return sub_100080760;
}

void sub_100080760(uint64_t ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[2];
  uint64_t v3 = (*a1)[3];
  size_t v4 = (*a1)[1];
  char v5 = *((unsigned char *)*a1 + 32);
  char v6 = *((unsigned char *)*a1 + 33);
  sub_10007FCA4(***a1, (uint64_t)v3);
  *((unsigned char *)v3 + 1)  = v5;
  *((unsigned char *)v3 + 2)  = v6;
  sub_10008B420((uint64_t)v3, (uint64_t)v2, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v7 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 0, 1, v7);
  sub_1000136F4((uint64_t)v2, (uint64_t)v4, &qword_10047CF68);
  sub_100027C1C((uint64_t)v4, 7);
  sub_10008B4F0((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000380B4((uint64_t)v2, &qword_10047CF68);
  free(v3);
  free(v2);
  free(v4);

  free(v1);
}

uint64_t NANGenericServiceProtocol.publicKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  char v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v6);
  sub_1000136F4((uint64_t)&v6[*(int *)(v4 + 32)], a2, (uint64_t *)&unk_1004852B0);
  return sub_10008B4F0((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANGenericServiceProtocol.publicKey.setter(uint64_t a1)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v6 = (char *)&v12 - v5;
  uint64_t v7 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(*v1, (uint64_t)v9);
  sub_100087760(a1, (uint64_t)&v9[*(int *)(v7 + 32)]);
  sub_10008B420((uint64_t)v9, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
  sub_1000136F4((uint64_t)v6, (uint64_t)v4, &qword_10047CF68);
  sub_100027C1C((uint64_t)v4, 7);
  sub_10008B4F0((uint64_t)v9, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000380B4((uint64_t)v6, &qword_10047CF68);
  return sub_1000380B4(a1, (uint64_t *)&unk_1004852B0);
}

void (*NANGenericServiceProtocol.publicKey.modify(void *a1))(uint64_t ***a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  *uint64_t v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_100010BCC(&qword_10047CF68) - 8) + 64);
  v3[1]  = malloc(v4);
  v3[2]  = malloc(v4);
  uint64_t v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v3[3]  = v5;
  char v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v3[4]  = v6;
  size_t v7 = *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_1004852B0) - 8) + 64);
  v3[5]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[6]  = v8;
  sub_10007FCA4(*v1, (uint64_t)v6);
  sub_1000136F4((uint64_t)v6 + *(int *)(v5 + 24), (uint64_t)v8, (uint64_t *)&unk_1004852B0);
  sub_10008B4F0((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100080C6C;
}

void sub_100080C6C(uint64_t ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[5];
  size_t v4 = (*a1)[6];
  char v6 = (*a1)[3];
  uint64_t v5 = (*a1)[4];
  size_t v7 = (*a1)[1];
  uint64_t v8 = (*a1)[2];
  uint64_t v9 = **a1;
  if (a2)
  {
    sub_1000136F4((uint64_t)(*a1)[6], (uint64_t)v3, (uint64_t *)&unk_1004852B0);
    sub_10007FCA4(*v9, (uint64_t)v5);
    sub_100087760((uint64_t)v3, (uint64_t)v5 + *((int *)v6 + 6));
    sub_10008B420((uint64_t)v5, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v10 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
    sub_1000136F4((uint64_t)v8, (uint64_t)v7, &qword_10047CF68);
    sub_100027C1C((uint64_t)v7, 7);
    sub_10008B4F0((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_1000380B4((uint64_t)v8, &qword_10047CF68);
    uint64_t v11 = (uint64_t)v3;
    uint64_t v12 = (uint64_t *)&unk_1004852B0;
  }
  else
  {
    sub_10007FCA4(*v9, (uint64_t)v5);
    sub_100087760((uint64_t)v4, (uint64_t)v5 + *((int *)v6 + 6));
    sub_10008B420((uint64_t)v5, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v13 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
    sub_1000136F4((uint64_t)v8, (uint64_t)v7, &qword_10047CF68);
    sub_100027C1C((uint64_t)v7, 7);
    sub_10008B4F0((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    uint64_t v11 = (uint64_t)v8;
    uint64_t v12 = &qword_10047CF68;
  }
  sub_1000380B4(v11, v12);
  sub_1000380B4((uint64_t)v4, (uint64_t *)&unk_1004852B0);
  free(v4);
  free(v3);
  free(v5);
  free(v8);
  free(v7);

  free(v2);
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  size_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 36)];
  uint64_t v6 = *(void *)v5;
  sub_100038004(*(void *)v5, *((void *)v5 + 1));
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.setter(uint64_t a1, unint64_t a2)
{
  sub_1000885FC(a1, a2);

  return sub_10000C95C(a1, a2);
}

void (*NANGenericServiceProtocol.publisherAuthenticationToken.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = (uint64_t)v1;
  uint64_t v3 = (int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8);
  size_t v4 = (char *)malloc(*(void *)(*(void *)v3 + 64));
  a1[3]  = (uint64_t)v4;
  sub_10007FCA4(*v1, (uint64_t)v4);
  uint64_t v5 = (uint64_t *)&v4[v3[9]];
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_100038004(*v5, v7);
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1  = v6;
  a1[1]  = v7;
  return sub_10008108C;
}

void sub_10008108C(uint64_t *a1, char a2)
{
}

uint64_t NANGenericServiceProtocol.encryptedSignature.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  size_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 40)];
  uint64_t v6 = *(void *)v5;
  sub_100038004(*(void *)v5, *((void *)v5 + 1));
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.encryptedSignature.setter(uint64_t a1, unint64_t a2)
{
  sub_1000887D4(a1, a2);

  return sub_10000C95C(a1, a2);
}

void (*NANGenericServiceProtocol.encryptedSignature.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = (uint64_t)v1;
  uint64_t v3 = (int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8);
  size_t v4 = (char *)malloc(*(void *)(*(void *)v3 + 64));
  a1[3]  = (uint64_t)v4;
  sub_10007FCA4(*v1, (uint64_t)v4);
  uint64_t v5 = (uint64_t *)&v4[v3[10]];
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_100038004(*v5, v7);
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1  = v6;
  a1[1]  = v7;
  return sub_100081260;
}

void sub_100081260(uint64_t *a1, char a2)
{
}

uint64_t NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  size_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FCA4(a1, (uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 44)];
  uint64_t v6 = *(void *)v5;
  sub_100038004(*(void *)v5, *((void *)v5 + 1));
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.setter(uint64_t a1, unint64_t a2)
{
  sub_1000889AC(a1, a2);

  return sub_10000C95C(a1, a2);
}

void (*NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = (uint64_t)v1;
  uint64_t v3 = (int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8);
  size_t v4 = (char *)malloc(*(void *)(*(void *)v3 + 64));
  a1[3]  = (uint64_t)v4;
  sub_10007FCA4(*v1, (uint64_t)v4);
  uint64_t v5 = (uint64_t *)&v4[v3[11]];
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_100038004(*v5, v7);
  sub_10008B4F0((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1  = v6;
  a1[1]  = v7;
  return sub_100081434;
}

void sub_100081434(uint64_t *a1, char a2)
{
}

void sub_10008144C(uint64_t *a1, char a2, void (*a3)(uint64_t, unint64_t))
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = (void *)a1[3];
  uint64_t v7 = *a1;
  if (a2)
  {
    sub_100038004(v7, v5);
    a3(v4, v5);
    sub_10000C95C(v4, v5);
  }
  else
  {
    a3(v7, v5);
  }
  sub_10000C95C(v4, v5);

  free(v6);
}

unint64_t NANGenericServiceProtocol.vendorSpecificData.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v4 = (unsigned __int16 *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v12 - v7;
  if (*(void *)(a1 + 16))
  {
    unint64_t v9 = sub_1000310AC(7);
    if (v10)
    {
      sub_10008B420(*(void *)(a1 + 56) + *(void *)(v2 + 72) * v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10008B488((uint64_t)v6, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10008B488((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      if (swift_getEnumCaseMultiPayload() == 8) {
        return *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 2) << 16);
      }
      sub_10008B4F0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    }
  }
  return 0;
}

uint64_t NANGenericServiceProtocol.description.getter(uint64_t a1)
{
  uint64_t v50 = sub_100010BCC(&qword_10047E098);
  __chkstk_darwin();
  uint64_t v49 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v48 = (uint64_t)&v41 - v3;
  __chkstk_darwin();
  uint64_t v47 = (char *)&v41 - v4;
  __chkstk_darwin();
  unint64_t v46 = (char *)&v41 - v5;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    char v52 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10008345C(0, v6, 0);
    uint64_t result = sub_100035BC0(a1);
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 64;
    char v14 = v13 & 1;
    uint64_t v41 = a1 + 80;
    int64_t v42 = v6;
    uint64_t v44 = a1 + 64;
    uint64_t v45 = a1;
    uint64_t v43 = v9;
    while ((v14 & 1) == 0)
    {
      if (v10 < 0 || v10 >= 1 << *(unsigned char *)(a1 + 32))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        break;
      }
      unint64_t v18 = (unint64_t)v10 >> 6;
      if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
        goto LABEL_27;
      }
      if (*(_DWORD *)(a1 + 36) != v9) {
        goto LABEL_28;
      }
      uint64_t v51 = v11;
      uint64_t v19 = v50;
      uint64_t v20 = v46;
      uint64_t v21 = (uint64_t)&v46[*(int *)(v50 + 48)];
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v23 = *(void *)(a1 + 56);
      char v24 = *(unsigned char *)(v22 + v10);
      uint64_t v25 = type metadata accessor for NANGenericServiceProtocol.Attribute();
      sub_10008B420(v23 + *(void *)(*(void *)(v25 - 8) + 72) * v10, v21, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      *uint64_t v20 = v24;
      uint64_t v26 = v47;
      *uint64_t v47 = v24;
      sub_10008B420(v21, (uint64_t)&v26[*(int *)(v19 + 48)], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v27 = (uint64_t)v26;
      uint64_t v28 = v48;
      sub_10006EC68(v27, v48, &qword_10047E098);
      sub_1000380B4((uint64_t)v20, &qword_10047E098);
      sub_10008B420(v28 + *(int *)(v19 + 48), (uint64_t)&v49[*(int *)(v19 + 48)], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v31 = v30;
      sub_1000380B4(v28, &qword_10047E098);
      uint64_t v7 = v52;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_10008345C(0, v7[2] + 1, 1);
        uint64_t v7 = v52;
      }
      unint64_t v33 = v7[2];
      unint64_t v32 = v7[3];
      if (v33 >= v32 >> 1)
      {
        uint64_t result = sub_10008345C(v32 > 1, v33 + 1, 1);
        uint64_t v7 = v52;
      }
      v7[2]  = v33 + 1;
      unint64_t v34 = &v7[2 * v33];
      v34[4]  = v29;
      v34[5]  = v31;
      a1  = v45;
      int64_t v15 = 1 << *(unsigned char *)(v45 + 32);
      if (v10 >= v15) {
        goto LABEL_29;
      }
      uint64_t v12 = v44;
      uint64_t v35 = *(void *)(v44 + 8 * v18);
      if ((v35 & (1 << v10)) == 0) {
        goto LABEL_30;
      }
      LODWORD(v9)  = v43;
      if (*(_DWORD *)(v45 + 36) != v43) {
        goto LABEL_31;
      }
      unint64_t v36 = v35 & (-2 << (v10 & 0x3F));
      if (v36)
      {
        int64_t v15 = __clz(__rbit64(v36)) | v10 & 0xFFFFFFFFFFFFFFC0;
        int64_t v16 = v42;
        uint64_t v17 = v51;
      }
      else
      {
        unint64_t v37 = v18 + 1;
        unint64_t v38 = (unint64_t)(v15 + 63) >> 6;
        int64_t v16 = v42;
        uint64_t v17 = v51;
        if (v18 + 1 < v38)
        {
          unint64_t v39 = *(void *)(v44 + 8 * v37);
          if (v39)
          {
LABEL_23:
            int64_t v15 = __clz(__rbit64(v39)) + (v37 << 6);
          }
          else
          {
            while (v38 - 2 != v18)
            {
              unint64_t v39 = *(void *)(v41 + 8 * v18++);
              if (v39)
              {
                unint64_t v37 = v18 + 1;
                goto LABEL_23;
              }
            }
          }
        }
      }
      char v14 = 0;
      uint64_t v11 = v17 + 1;
      uint64_t v10 = v15;
      if (v11 == v16)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_25:
    char v52 = v7;
    sub_100010BCC((uint64_t *)&unk_100488360);
    sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
    uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v40;
  }
  return result;
}

uint64_t NANGenericServiceProtocol.customMirror.getter()
{
  return Mirror.init(reflecting:)();
}

uint64_t NANGenericServiceProtocol.hash(into:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100081B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v34 - v6;
  sub_100010BCC(&qword_10047E310);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (char *)&v34 - v11;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v36 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  int64_t v38 = 0;
  int64_t v35 = v37 - 1;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v38 << 6);
LABEL_8:
      char v19 = *(unsigned char *)(*(void *)(a1 + 48) + v18);
      uint64_t v20 = *(void *)(a1 + 56) + *(void *)(v39 + 72) * v18;
      uint64_t v21 = sub_100010BCC(&qword_10047E098);
      sub_10008B420(v20, (uint64_t)&v9[*(int *)(v21 + 48)], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      *uint64_t v9 = v19;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 0, 1, v21);
      goto LABEL_27;
    }
    int64_t v22 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v22 < v37)
    {
      unint64_t v23 = *(void *)(v36 + 8 * v22);
      if (v23) {
        goto LABEL_12;
      }
      int64_t v24 = v38 + 2;
      ++v38;
      if (v22 + 1 < v37)
      {
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (v23) {
          goto LABEL_15;
        }
        int64_t v38 = v22 + 1;
        if (v22 + 2 < v37)
        {
          unint64_t v23 = *(void *)(v36 + 8 * (v22 + 2));
          if (v23)
          {
            v22 += 2;
            goto LABEL_12;
          }
          int64_t v24 = v22 + 3;
          int64_t v38 = v22 + 2;
          if (v22 + 3 < v37) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v25 = sub_100010BCC(&qword_10047E098);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 1, 1, v25);
    unint64_t v16 = 0;
LABEL_27:
    sub_10006EC68((uint64_t)v9, (uint64_t)v12, &qword_10047E310);
    uint64_t v26 = sub_100010BCC(&qword_10047E098);
    int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v12, 1, v26);
    BOOL v28 = v27 == 1;
    if (v27 == 1) {
      return v28;
    }
    uint64_t v29 = (uint64_t)&v12[*(int *)(v26 + 48)];
    char v30 = *v12;
    sub_10008B488(v29, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    unint64_t v31 = sub_1000310AC(v30);
    if ((v32 & 1) == 0)
    {
      sub_10008B4F0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 0;
    }
    sub_10008B420(*(void *)(a2 + 56) + *(void *)(v39 + 72) * v31, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    char v33 = sub_100086C18((uint64_t)v5, (uint64_t)v7);
    sub_10008B4F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t result = sub_10008B4F0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    if ((v33 & 1) == 0) {
      return v28;
    }
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23)
  {
LABEL_15:
    int64_t v22 = v24;
LABEL_12:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v38 = v22;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v37)
    {
      int64_t v38 = v35;
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10008200C(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v49 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v42 - v6;
  sub_100010BCC(&qword_10047E230);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (unsigned __int16 *)((char *)&v42 - v11);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v48 = 0;
  uint64_t v45 = a1;
  unint64_t v46 = v5;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = a1 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v43 = v14;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  int64_t v42 = v44 - 1;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v48 << 6);
LABEL_8:
      uint64_t v21 = *(void *)(v45 + 48) - v20 + 8 * v20;
      __int16 v22 = *(_WORD *)(v21 + 4);
      char v23 = *(unsigned char *)(v21 + 6);
      uint64_t v24 = *(void *)(v45 + 56) + *(void *)(v49 + 72) * v20;
      uint64_t v25 = sub_100010BCC(&qword_10047E238);
      LODWORD(v21)  = *(_DWORD *)v21;
      sub_10008B420(v24, (uint64_t)&v9[*(int *)(v25 + 48)], (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
      *(_DWORD *)uint64_t v9 = v21;
      *((_WORD *)v9 + 2)  = v22;
      v9[6]  = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
      goto LABEL_27;
    }
    int64_t v26 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v26 < v44)
    {
      unint64_t v27 = *(void *)(v43 + 8 * v26);
      if (v27) {
        goto LABEL_12;
      }
      int64_t v28 = v48 + 2;
      ++v48;
      if (v26 + 1 < v44)
      {
        unint64_t v27 = *(void *)(v43 + 8 * v28);
        if (v27) {
          goto LABEL_15;
        }
        int64_t v48 = v26 + 1;
        if (v26 + 2 < v44)
        {
          unint64_t v27 = *(void *)(v43 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_12;
          }
          int64_t v28 = v26 + 3;
          int64_t v48 = v26 + 2;
          if (v26 + 3 < v44) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v29 = sub_100010BCC(&qword_10047E238);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v9, 1, 1, v29);
    unint64_t v18 = 0;
LABEL_27:
    sub_10006EC68((uint64_t)v9, (uint64_t)v12, &qword_10047E230);
    uint64_t v30 = sub_100010BCC(&qword_10047E238);
    int v31 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v12, 1, v30);
    BOOL v32 = v31 == 1;
    if (v31 == 1) {
      return v32;
    }
    uint64_t v33 = *((unsigned __int8 *)v12 + 2);
    uint64_t v34 = *(unsigned int *)((char *)v12 + 3);
    uint64_t v35 = *v12;
    sub_10008B488((uint64_t)v12 + *(int *)(v30 + 48), (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    unint64_t v36 = sub_100031130(v35 | (v33 << 16) | (v34 << 24));
    if ((v37 & 1) == 0) {
      goto LABEL_34;
    }
    uint64_t v38 = (uint64_t)v46;
    sub_10008B420(*(void *)(a2 + 56) + *(void *)(v49 + 72) * v36, (uint64_t)v46, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0)
    {
      sub_10008B4F0(v38, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
LABEL_34:
      sub_10008B4F0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
      return 0;
    }
    uint64_t v39 = *(int *)(v47 + 20);
    int v40 = *(unsigned __int8 *)(v38 + v39);
    int v41 = v7[v39];
    sub_10008B4F0(v38, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t result = sub_10008B4F0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    if (v40 != v41) {
      return v32;
    }
  }
  unint64_t v27 = *(void *)(v43 + 8 * v28);
  if (v27)
  {
LABEL_15:
    int64_t v26 = v28;
LABEL_12:
    unint64_t v18 = (v27 - 1) & v27;
    unint64_t v20 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v48 = v26;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v44)
    {
      int64_t v48 = v42;
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_12;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

Swift::Int NANGenericServiceProtocol.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1000867E0((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100082578()
{
  return NANGenericServiceProtocol.description.getter(*v0);
}

uint64_t sub_100082580()
{
  return Mirror.init(reflecting:)();
}

Swift::Int sub_1000825D4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1000867E0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10008262C(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100082678()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1000867E0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000826CC(uint64_t *a1, uint64_t *a2)
{
  return sub_100081B6C(*a1, *a2);
}

uint64_t NANBeacon.Metadata.rssi.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void *NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.standardizedAttributes;
}

void sub_1000826EC(void *a1@<X8>)
{
  *a1  = 0;
}

void *sub_1000826F4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2  = *v2 | *result;
  return result;
}

void *sub_100082708@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2  = *v2 ^ *result;
  return result;
}

BOOL sub_10008271C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1  = v3;
  return v4 != v3;
}

void *sub_10008274C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2  = v3;
  *(unsigned char *)(a2 + 8)  = v3 == 0;
  return result;
}

uint64_t *sub_100082778@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2  = v5;
  *(unsigned char *)(a2 + 8)  = v5 == 0;
  return result;
}

void *sub_10008279C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000827B0(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000827C4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2  = *v2 & ~*result;
  return result;
}

BOOL sub_1000827D8(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000827EC()
{
  return *v0 == 0;
}

void *sub_1000827FC(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100082810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1001DB608(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t NANGenericServiceProtocol.packetData(for:)(uint64_t a1)
{
  unint64_t v2 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryEncoder();
  uint64_t v3 = (void *)swift_allocObject();
  *((_OWORD *)v3 + 1)  = xmmword_1003B2440;
  v3[4]  = v2;
  v9[3]  = &type metadata for BinaryEncoder.UnkeyedContainer;
  v9[4]  = sub_100088B84();
  v9[0]  = v3;
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10007B4AC(v4, a1, (uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v5 = v3[2];
  unint64_t v6 = v3[3];
  uint64_t v7 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      if ((int)v5 == v5 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v5 + 16) == *(void *)(v5 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v6 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_100013D44(v3[2], v3[3]);
        uint64_t v7 = v5;
      }
      else
      {
LABEL_7:
        uint64_t v7 = 0;
      }
LABEL_8:
      swift_release();
      sub_100010754((uint64_t)v9);
      return v7;
  }
}

uint64_t sub_1000829E0(unsigned char *a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v84 = a3;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v82 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NWEndpoint.Port();
  uint64_t v81 = *(unsigned char **)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v12 = (unsigned __int8 *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047E098);
  __chkstk_darwin();
  uint64_t v83 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t result = __chkstk_darwin();
  unint64_t v19 = (char *)&v80 - v18;
  if ((a2 & 1) == 0 || *a1 >= 7u)
  {
    if ((a2 & 2) == 0) {
      return result;
    }
    unsigned int v20 = *a1;
    if (v20 < 7) {
      return result;
    }
    uint64_t v85 = v17;
    uint64_t v21 = *(int *)(v17 + 48);
    __int16 v22 = a1;
    char v23 = (unsigned __int16 *)&v19[v21];
    uint64_t v24 = v22;
    uint64_t v25 = (uint64_t)&v22[v21];
    *unint64_t v19 = v20;
    sub_10008B420((uint64_t)&v22[v21], (uint64_t)&v19[v21], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      uint64_t v80 = v3;
      int v26 = *((unsigned __int8 *)v23 + 2);
      uint64_t v27 = *((void *)v23 + 1);
      unint64_t v28 = *((void *)v23 + 2);
      int v29 = *v23;
      sub_10000C970(v27, v28);
      unsigned int v30 = v29 | (v26 << 16);
      uint64_t v4 = v80;
      char v31 = sub_10003916C(0xF21700u, v30);
      a1  = v24;
      uint64_t v17 = v85;
      if (v31) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10008B4F0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v17 = v85;
    }
    uint64_t v32 = (uint64_t)&v15[*(int *)(v17 + 48)];
    *uint64_t v15 = *v24;
    sub_10008B420(v25, v32, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v34 = v32;
    a1  = v24;
    uint64_t result = sub_10008B4F0(v34, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v17 = v85;
    if (EnumCaseMultiPayload != 7) {
      return result;
    }
  }
LABEL_10:
  uint64_t v85 = v17;
  uint64_t v35 = (uint64_t)&a1[*(int *)(v17 + 48)];
  sub_10008B420(v35, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v48 = *v12;
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16)  = xmmword_1003B2450;
      if (v48) {
        char v50 = 17;
      }
      else {
        char v50 = 6;
      }
      *(unsigned char *)(v49 + 32)  = v50;
      uint64_t v36 = sub_1001265EC(v49);
      unint64_t v37 = v51;
      swift_bridgeObjectRelease();
      goto LABEL_22;
    case 2u:
    case 3u:
      uint64_t v36 = sub_10011A478(*(void *)v12, *((void *)v12 + 1));
      unint64_t v37 = v38;
      goto LABEL_22;
    case 4u:
    case 5u:
    case 6u:
      uint64_t v36 = *(void *)v12;
      unint64_t v37 = *((void *)v12 + 1);
      goto LABEL_22;
    case 7u:
      uint64_t v81 = a1;
      uint64_t v39 = v82;
      sub_10008B488((uint64_t)v12, v82, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      uint64_t v40 = sub_1001265EC((uint64_t)&off_10044DC30);
      unint64_t v42 = v41;
      unint64_t v43 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v44 = type metadata accessor for BinaryEncoder();
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16)  = xmmword_1003B2440;
      *(void *)(v45 + 32)  = v43;
      uint64_t v88 = v44;
      uint64_t v89 = sub_10008B75C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      __src  = v45;
      swift_retain();
      NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(&__src);
      if (v4)
      {
        sub_100010754((uint64_t)&__src);
        swift_release();
        sub_10000C970(v40, v42);
        uint64_t result = sub_10008B4F0(v39, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      }
      else
      {
        sub_100010754((uint64_t)&__src);
        swift_beginAccess();
        uint64_t v62 = v35;
        uint64_t v63 = *(void *)(v45 + 16);
        unint64_t v64 = *(void *)(v45 + 24);
        sub_100013D44(v63, v64);
        swift_release();
        uint64_t v90 = v40;
        unint64_t v91 = v42;
        sub_100013D44(v63, v64);
        sub_100013D44(v40, v42);
        sub_100125FAC(v63, v64);
        sub_10000C970(v63, v64);
        unint64_t v65 = v64;
        uint64_t v35 = v62;
        sub_10000C970(v63, v65);
        sub_10000C970(v40, v42);
        sub_10008B4F0(v39, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        uint64_t v36 = v90;
        unint64_t v37 = v91;
        a1  = v81;
LABEL_22:
        uint64_t v66 = v85;
        switch(v37 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v36), v36))
            {
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
            }
            uint64_t v67 = a1;
            uint64_t v68 = HIDWORD(v36) - (int)v36;
LABEL_26:
            sub_100013D44(v36, v37);
            BOOL v71 = v68 < 0x10000;
            a1  = v67;
            uint64_t v66 = v85;
            if (!v71) {
              goto LABEL_37;
            }
LABEL_28:
            uint64_t v72 = *(int *)(v66 + 48);
            uint64_t v73 = v4;
            uint64_t v74 = v83;
            uint64_t v75 = (uint64_t)&v83[v72];
            *uint64_t v83 = *a1;
            sub_10008B420(v35, (uint64_t)&v74[v72], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
            sub_100039448(v84, *(void *)(v84 + 24));
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            if (v73)
            {
              sub_10000C95C(v36, v37);
              sub_10000C95C(v36, v37);
              uint64_t result = sub_10008B4F0(v75, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
            }
            else
            {
              sub_10008B4F0(v75, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
              uint64_t v76 = v84;
              switch(v37 >> 62)
              {
                case 0uLL:
                case 3uLL:
                  goto LABEL_36;
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v36), v36)) {
                    goto LABEL_41;
                  }
                  unint64_t v77 = HIDWORD(v36) - (int)v36;
LABEL_34:
                  if ((v77 & 0x8000000000000000) != 0 || v77 >= 0x10000)
                  {
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x1000833B0);
                  }
LABEL_36:
                  sub_100039448(v84, *(void *)(v84 + 24));
                  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                  uint64_t v90 = v36;
                  unint64_t v91 = v37;
                  sub_100039448(v76, *(void *)(v76 + 24));
                  sub_1000742DC();
                  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                  break;
                case 2uLL:
                  uint64_t v79 = *(void *)(v36 + 16);
                  uint64_t v78 = *(void *)(v36 + 24);
                  unint64_t v77 = v78 - v79;
                  if (!__OFSUB__(v78, v79)) {
                    goto LABEL_34;
                  }
                  goto LABEL_42;
                default:
                  JUMPOUT(0);
              }
LABEL_37:
              sub_10000C95C(v36, v37);
              uint64_t result = sub_10000C95C(v36, v37);
            }
            break;
          case 2uLL:
            uint64_t v67 = a1;
            uint64_t v70 = *(void *)(v36 + 16);
            uint64_t v69 = *(void *)(v36 + 24);
            uint64_t v68 = v69 - v70;
            if (!__OFSUB__(v69, v70)) {
              goto LABEL_26;
            }
            goto LABEL_40;
          default:
            goto LABEL_28;
        }
      }
      break;
    case 8u:
      __int16 v52 = *(_WORD *)v12;
      uint64_t v53 = v35;
      unsigned __int8 v54 = v12[2];
      uint64_t v55 = *((void *)v12 + 1);
      unint64_t v56 = *((void *)v12 + 2);
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16)  = xmmword_1003B2760;
      *(_WORD *)(v57 + 32)  = v52;
      *(unsigned char *)(v57 + 34)  = v54;
      uint64_t v58 = sub_1001265EC(v57);
      unint64_t v60 = v59;
      swift_bridgeObjectRelease();
      __src  = v58;
      unint64_t v87 = v60;
      sub_100013D44(v58, v60);
      sub_100013D44(v55, v56);
      sub_100125FAC(v55, v56);
      sub_10000C970(v55, v56);
      uint64_t v61 = v58;
      uint64_t v35 = v53;
      sub_10000C970(v61, v60);
      sub_10000C970(v55, v56);
      uint64_t v36 = __src;
      unint64_t v37 = v87;
      goto LABEL_22;
    default:
      unint64_t v46 = (void (**)(char *, uint64_t))v81;
      (*((void (**)(char *, unsigned __int8 *, uint64_t))v81 + 4))(v10, v12, v8);
      LOWORD(__src)  = NWEndpoint.Port.rawValue.getter();
      uint64_t v36 = sub_100260F60(&__src, 2);
      unint64_t v37 = v47;
      v46[1](v10, v8);
      goto LABEL_22;
  }
  return result;
}

void *NANGenericServiceProtocol.init(from:)(void *a1)
{
  return sub_1000882D8(a1);
}

void *sub_100083410@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000882D8(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_10008343C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083878(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008345C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083A04(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10008347C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083B70(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008349C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083CFC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000834BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084BF8(a1, a2, a3, *v3, &qword_10047E280);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000834E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083FC4(a1, a2, a3, *v3, &qword_10047BEF8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10008350C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083E58(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10008352C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083FC4(a1, a2, a3, *v3, &qword_10047E220);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083554(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100083FC4(a1, a2, a3, *v3, &qword_10047E228);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10008357C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084110(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008359C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084358(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000835BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000844C4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000835DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084BF8(a1, a2, a3, *v3, &qword_10047E1E0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083604(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084614(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083624(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084780(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083644(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000848E0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083664(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084A60(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100083684(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084EB0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000836A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085010(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000836C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085190(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000836E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085308(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083704(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085AA0(a1, a2, a3, (void *)*v3, &qword_10047E268, (uint64_t (*)(void))&type metadata accessor for SymmetricKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100083740(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085AA0(a1, a2, a3, (void *)*v3, &qword_10047E1B8, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008377C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085468(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008379C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000855F4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000837BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085750(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000837DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000858F8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000837FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085AA0(a1, a2, a3, (void *)*v3, &qword_100485620, type metadata accessor for NANAttribute);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100083838(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085CE8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100083858(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100085E54(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100083878(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E2A8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2]  = v8;
    v10[3]  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2]  = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100010BCC(&qword_10047E2B0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083A04(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC((uint64_t *)&unk_100484BA0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083B70(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E1C0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2]  = v8;
    v10[3]  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2]  = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100010BCC(&qword_10047E1C8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083CFC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E200);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083E58(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E218);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100083FC4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = v8;
  }
  if (v10)
  {
    sub_100010BCC(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2)  = v9;
    *((void *)v11 + 3)  = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084110(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100010BCC(&qword_10047E300);
  uint64_t v10 = *(void *)(sub_100010BCC(&qword_10047CF68) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2]  = v8;
  v13[3]  = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100010BCC(&qword_10047CF68) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2]  = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084358(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_1004870C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * ((uint64_t)(v11 - 32) / 10);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 10 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000844C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E2B8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084614(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E270);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084780(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E250);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000848E0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E328);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * ((uint64_t)(v11 - 32) / 14);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[14 * v8]) {
      memmove(v12, v13, 14 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[14 * v8] || v12 >= &v13[14 * v8])
  {
    memcpy(v12, v13, 14 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084A60(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E208);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2]  = v8;
    v10[3]  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2]  = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100010BCC(&qword_10047E210);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084BEC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100084BF8(a1, a2, a3, a4, &qword_10047E2A0);
}

uint64_t sub_100084BF8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100010BCC(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2)  = v9;
    *((void *)v11 + 3)  = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  size_t v16 = 8 * v9;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084D50(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E298);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084EB0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E320);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085010(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E288);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * ((uint64_t)(v11 - 32) / 7);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[8 * v8 - v8]) {
      memmove(v12, v13, 7 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[7 * v8] || v12 >= &v13[7 * v8])
  {
    memcpy(v12, v13, 7 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085190(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E290);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * ((uint64_t)(v11 - 32) / 34);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[34 * v8]) {
      memmove(v12, v13, 34 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[34 * v8] || v12 >= &v13[34 * v8])
  {
    memcpy(v12, v13, 34 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085308(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E278);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085468(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E260);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2]  = v8;
    v10[3]  = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2]  = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100010BCC((uint64_t *)&unk_1004853E0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000855F4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E258);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085750(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E240);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2]  = v8;
    v10[3]  = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2]  = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100010BCC(&qword_10047E248);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000858F8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E1F0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2]  = v8;
    v10[3]  = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2]  = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_100010BCC(&qword_10047E1F8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085AA0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    size_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100010BCC(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  size_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  uint64_t v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2]  = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085CE8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E1E8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085E54(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E1D0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2]  = v8;
    v10[3]  = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2]  = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100010BCC(&qword_10047E1D8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100086000(long long *a1, uint64_t a2)
{
  BOOL v71 = a1;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (int64_t *)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v63 = *(void *)(v70 - 8);
  __chkstk_darwin();
  uint64_t v76 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047E230);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v72 = (Swift::UInt8 *)&v55 - v10;
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v60 = a2 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v77 = v13 & v11;
  uint64_t v68 = (uint64_t (**)(uint64_t *, uint64_t))(v4 + 88);
  uint64_t v69 = (void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16);
  int v67 = enum case for DispatchTimeInterval.seconds(_:);
  int v61 = enum case for DispatchTimeInterval.milliseconds(_:);
  int v59 = enum case for DispatchTimeInterval.microseconds(_:);
  int v58 = enum case for DispatchTimeInterval.nanoseconds(_:);
  int v57 = enum case for DispatchTimeInterval.never(_:);
  unint64_t v56 = (void (**)(uint64_t *, uint64_t))(v4 + 8);
  unint64_t v65 = (void (**)(uint64_t *, uint64_t))(v4 + 96);
  int64_t v62 = (unint64_t)(v12 + 63) >> 6;
  int64_t v55 = v62 - 1;
  uint64_t v64 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v14 = 0;
  int64_t v73 = 0;
  uint64_t v66 = v9;
  while (1)
  {
    if (v77)
    {
      unint64_t v24 = __clz(__rbit64(v77));
      v77 &= v77 - 1;
      unint64_t v25 = v24 | (v73 << 6);
      goto LABEL_14;
    }
    int64_t v32 = v73 + 1;
    if (__OFADD__(v73, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    char v31 = v72;
    if (v32 < v62)
    {
      unint64_t v33 = *(void *)(v60 + 8 * v32);
      if (v33) {
        goto LABEL_18;
      }
      int64_t v34 = v73 + 2;
      ++v73;
      if (v32 + 1 < v62)
      {
        unint64_t v33 = *(void *)(v60 + 8 * v34);
        if (v33)
        {
          ++v32;
          goto LABEL_18;
        }
        int64_t v35 = v32 + 2;
        int64_t v73 = v32 + 1;
        if (v32 + 2 < v62) {
          break;
        }
      }
    }
LABEL_30:
    uint64_t v36 = sub_100010BCC(&qword_10047E238);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v9, 1, 1, v36);
    unint64_t v77 = 0;
LABEL_31:
    sub_10006EC68((uint64_t)v9, (uint64_t)v31, &qword_10047E230);
    uint64_t v37 = sub_100010BCC(&qword_10047E238);
    if ((*(unsigned int (**)(Swift::UInt8 *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v31, 1, v37) == 1)
    {
      swift_release();
      Hasher._combine(_:)(v14);
      return;
    }
    Swift::UInt v74 = v14;
    uint64_t v38 = (uint64_t)&v31[*(int *)(v37 + 48)];
    Swift::UInt8 v39 = *v31;
    Swift::UInt8 v40 = v31[1];
    unint64_t v41 = v6;
    Swift::UInt8 v42 = v31[2];
    Swift::UInt8 v43 = v31[3];
    uint64_t v44 = v3;
    Swift::UInt8 v45 = v31[4];
    Swift::UInt8 v46 = v31[5];
    int v75 = v31[6];
    uint64_t v47 = v76;
    sub_10008B488(v38, v76, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    uint64_t v48 = *((void *)v71 + 8);
    long long v49 = v71[1];
    long long v78 = *v71;
    long long v79 = v49;
    long long v50 = v71[3];
    long long v80 = v71[2];
    long long v81 = v50;
    uint64_t v82 = v48;
    Hasher._combine(_:)(v39);
    Hasher._combine(_:)(v40);
    Swift::UInt8 v51 = v42;
    unint64_t v6 = v41;
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(v43);
    Swift::UInt8 v52 = v45;
    uint64_t v3 = v44;
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v46);
    Hasher._combine(_:)(v75);
    (*v69)(v41, v47, v44);
    int v53 = (*v68)(v41, v44);
    if (v53 == v67)
    {
      (*v65)(v41, v44);
      uint64_t v15 = *v41;
      uint64_t v16 = 1000000000;
LABEL_5:
      Swift::UInt64 v17 = v15 * v16;
      BOOL v18 = (unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63;
      BOOL v19 = v15 <= 0;
      unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      if (v19) {
        unint64_t v20 = 0x8000000000000000;
      }
      if (v18) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = v17;
      }
      uint64_t v9 = v66;
      Swift::UInt v22 = v74;
      goto LABEL_11;
    }
    if (v53 == v61)
    {
      (*v65)(v41, v44);
      uint64_t v15 = *v41;
      uint64_t v16 = 1000000;
      goto LABEL_5;
    }
    uint64_t v9 = v66;
    Swift::UInt v22 = v74;
    if (v53 == v59)
    {
      (*v65)(v6, v44);
      unint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
      if (*v6 <= 0) {
        unint64_t v54 = 0x8000000000000000;
      }
      if ((unsigned __int128)(*v6 * (__int128)1000) >> 64 == (1000 * *v6) >> 63) {
        Swift::UInt64 v21 = 1000 * *v6;
      }
      else {
        Swift::UInt64 v21 = v54;
      }
    }
    else if (v53 == v58)
    {
      (*v65)(v6, v44);
      Swift::UInt64 v21 = *v6;
    }
    else
    {
      if (v53 != v57) {
        (*v56)(v6, v44);
      }
      Swift::UInt64 v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_11:
    Hasher._combine(_:)(v21);
    uint64_t v23 = v76;
    Hasher._combine(_:)(*(unsigned char *)(v76 + *(int *)(v70 + 20)));
    sub_10008B4F0(v23, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    Swift::UInt v14 = Hasher._finalize()() ^ v22;
  }
  unint64_t v33 = *(void *)(v60 + 8 * v35);
  if (v33)
  {
    v32 += 2;
LABEL_18:
    unint64_t v77 = (v33 - 1) & v33;
    unint64_t v25 = __clz(__rbit64(v33)) + (v32 << 6);
    int64_t v73 = v32;
LABEL_14:
    uint64_t v26 = *(void *)(v64 + 48) - v25 + 8 * v25;
    __int16 v27 = *(_WORD *)(v26 + 4);
    char v28 = *(unsigned char *)(v26 + 6);
    uint64_t v29 = *(void *)(v64 + 56) + *(void *)(v63 + 72) * v25;
    uint64_t v30 = sub_100010BCC(&qword_10047E238);
    LODWORD(v26)  = *(_DWORD *)v26;
    sub_10008B420(v29, (uint64_t)&v9[*(int *)(v30 + 48)], (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    *(_DWORD *)uint64_t v9 = v26;
    *((_WORD *)v9 + 2)  = v27;
    v9[6]  = v28;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 0, 1, v30);
    char v31 = v72;
    goto LABEL_31;
  }
  while (1)
  {
    int64_t v32 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v32 >= v62)
    {
      int64_t v73 = v55;
      goto LABEL_30;
    }
    unint64_t v33 = *(void *)(v60 + 8 * v32);
    ++v35;
    if (v33) {
      goto LABEL_18;
    }
  }
LABEL_48:
  __break(1u);
}

void sub_1000867E0(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047E310);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v32 = a2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  int64_t v31 = v33 - 1;
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v14 = 0;
  int64_t v36 = 0;
  if (!v13) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  unint64_t v16 = v15 | (v36 << 6);
LABEL_5:
  char v17 = *(unsigned char *)(*(void *)(v35 + 48) + v16);
  uint64_t v18 = *(void *)(v35 + 56) + *(void *)(v34 + 72) * v16;
  uint64_t v19 = sub_100010BCC(&qword_10047E098);
  sub_10008B420(v18, (uint64_t)&v7[*(int *)(v19 + 48)], (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  *uint64_t v7 = v17;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 0, 1, v19);
  while (1)
  {
    sub_10006EC68((uint64_t)v7, (uint64_t)v9, &qword_10047E310);
    uint64_t v25 = sub_100010BCC(&qword_10047E098);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v9, 1, v25) == 1)
    {
      swift_release();
      Hasher._combine(_:)(v14);
      return;
    }
    uint64_t v26 = (uint64_t)&v9[*(int *)(v25 + 48)];
    char v27 = *v9;
    sub_10008B488(v26, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v28 = *(void *)(a1 + 64);
    long long v29 = *(_OWORD *)(a1 + 16);
    v37[0]  = *(_OWORD *)a1;
    v37[1]  = v29;
    long long v30 = *(_OWORD *)(a1 + 48);
    v37[2]  = *(_OWORD *)(a1 + 32);
    v37[3]  = v30;
    uint64_t v38 = v28;
    Hasher._combine(_:)(0xDD06050403020100 >> (8 * v27));
    sub_10007CCA4((uint64_t)v37);
    sub_10008B4F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    v14 ^= Hasher._finalize()();
    if (v13) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v20 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 < v33)
    {
      unint64_t v21 = *(void *)(v32 + 8 * v20);
      if (v21) {
        goto LABEL_9;
      }
      int64_t v22 = v36 + 2;
      ++v36;
      if (v20 + 1 < v33)
      {
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (v21)
        {
          ++v20;
LABEL_9:
          unint64_t v13 = (v21 - 1) & v21;
          unint64_t v16 = __clz(__rbit64(v21)) + (v20 << 6);
          int64_t v36 = v20;
          goto LABEL_5;
        }
        int64_t v23 = v20 + 2;
        int64_t v36 = v20 + 1;
        if (v20 + 2 < v33) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v24 = sub_100010BCC(&qword_10047E098);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
    unint64_t v13 = 0;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v23);
  if (v21)
  {
    v20 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v20 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v20 >= v33)
    {
      int64_t v36 = v31;
      goto LABEL_21;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v20);
    ++v23;
    if (v21) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_100086C18(uint64_t a1, uint64_t a2)
{
  unint64_t v91 = (char *)a1;
  *(void *)&long long v92 = a2;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v85 = (unsigned __int8 *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NWEndpoint.Port();
  uint64_t v88 = *(void *)(v3 - 8);
  uint64_t v89 = v3;
  __chkstk_darwin();
  uint64_t v84 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  __chkstk_darwin();
  uint64_t v87 = (uint64_t)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v90 = (unsigned __int8 *)&v84 - v6;
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v84 - v7);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v84 - v9);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v84 - v11);
  __chkstk_darwin();
  Swift::UInt v14 = (uint64_t *)((char *)&v84 - v13);
  __chkstk_darwin();
  unint64_t v16 = (char *)&v84 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v84 - v17;
  __chkstk_darwin();
  uint64_t v86 = (uint64_t)&v84 - v19;
  sub_100010BCC(&qword_10047E1A8);
  uint64_t v20 = __chkstk_darwin();
  int64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_10008B420((uint64_t)v91, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  uint64_t v24 = v92;
  *(void *)&long long v92 = v23;
  sub_10008B420(v24, v23, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10008B420((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      long long v49 = (unsigned char *)v92;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_45;
      }
      if (*v18) {
        uint64_t v50 = 7365749;
      }
      else {
        uint64_t v50 = 7365492;
      }
      if (*v49) {
        uint64_t v51 = 7365749;
      }
      else {
        uint64_t v51 = 7365492;
      }
      if (v50 == v51)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease_n();
        if ((v83 & 1) == 0) {
          goto LABEL_10;
        }
      }
      uint64_t v82 = (uint64_t)v22;
      goto LABEL_56;
    case 2u:
      sub_10008B420((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_22;
      }
      Swift::String v27 = String.lowercased()();
      Swift::String v28 = String.lowercased()();
      if (v27._countAndFlagsBits == v28._countAndFlagsBits && v27._object == v28._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0) {
          goto LABEL_10;
        }
      }
      uint64_t v82 = (uint64_t)v22;
      goto LABEL_56;
    case 3u:
      sub_10008B420((uint64_t)v22, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v32 = *v14;
      uint64_t v31 = v14[1];
      int64_t v33 = (void *)v92;
      if (swift_getEnumCaseMultiPayload() != 3)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      if (v32 == *v33 && v31 == v33[1])
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
        {
LABEL_10:
          sub_10008B4F0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
          goto LABEL_46;
        }
      }
      uint64_t v82 = (uint64_t)v22;
LABEL_56:
      sub_10008B4F0(v82, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      char v42 = 1;
      return v42 & 1;
    case 4u:
      sub_10008B420((uint64_t)v22, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v36 = *v12;
      unint64_t v37 = v12[1];
      uint64_t v38 = (uint64_t *)v92;
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_19;
      }
      goto LABEL_33;
    case 5u:
      sub_10008B420((uint64_t)v22, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v36 = *v10;
      unint64_t v37 = v10[1];
      uint64_t v38 = (uint64_t *)v92;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
LABEL_19:
        uint64_t v40 = *v38;
        unint64_t v39 = v38[1];
        uint64_t v41 = (uint64_t)v22;
        char v42 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v36, v37, v40, v39);
        sub_10000C970(v40, v39);
        uint64_t v43 = v36;
        unint64_t v44 = v37;
        goto LABEL_36;
      }
LABEL_33:
      uint64_t v52 = v36;
      goto LABEL_43;
    case 6u:
      sub_10008B420((uint64_t)v22, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v54 = *v8;
      unint64_t v53 = v8[1];
      int64_t v55 = (uint64_t *)v92;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        uint64_t v52 = v54;
        unint64_t v76 = v53;
        goto LABEL_44;
      }
      uint64_t v57 = *v55;
      unint64_t v56 = v55[1];
      uint64_t v41 = (uint64_t)v22;
      char v42 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v54, v53, v57, v56);
      sub_10000C970(v57, v56);
      uint64_t v43 = v54;
      unint64_t v44 = v53;
LABEL_36:
      sub_10000C970(v43, v44);
      sub_10008B4F0(v41, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      return v42 & 1;
    case 7u:
      Swift::UInt8 v45 = v90;
      sub_10008B420((uint64_t)v22, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v46 = v92;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v47 = v85;
        sub_10008B488(v46, (uint64_t)v85, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        uint64_t v48 = (uint64_t)v22;
        char v42 = _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0(v45, v47);
        sub_10008B4F0((uint64_t)v47, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        sub_10008B4F0((uint64_t)v45, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        goto LABEL_49;
      }
      sub_10008B4F0((uint64_t)v45, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      goto LABEL_45;
    case 8u:
      uint64_t v58 = v87;
      sub_10008B420((uint64_t)v22, v87, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v59 = *(void *)(v58 + 8);
      unint64_t v37 = *(void *)(v58 + 16);
      uint64_t v60 = (__int16 *)v92;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        uint64_t v52 = v59;
LABEL_43:
        unint64_t v76 = v37;
LABEL_44:
        sub_10000C970(v52, v76);
        goto LABEL_45;
      }
      unint64_t v91 = v22;
      char v61 = *(unsigned char *)(v58 + 2);
      __int16 v62 = *(_WORD *)v58;
      __int16 v63 = *v60;
      char v64 = *((unsigned char *)v60 + 2);
      uint64_t v65 = *((void *)v60 + 1);
      unint64_t v66 = *((void *)v60 + 2);
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v67 = swift_allocObject();
      long long v92 = xmmword_1003B2760;
      *(_OWORD *)(v67 + 16)  = xmmword_1003B2760;
      *(_WORD *)(v67 + 32)  = v62;
      *(unsigned char *)(v67 + 34)  = v61;
      uint64_t v68 = sub_1001265EC(v67);
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16)  = v92;
      *(_WORD *)(v71 + 32)  = v63;
      *(unsigned char *)(v71 + 34)  = v64;
      uint64_t v72 = sub_1001265EC(v71);
      unint64_t v74 = v73;
      swift_bridgeObjectRelease();
      char v75 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v68, v70, v72, v74);
      sub_10000C970(v72, v74);
      sub_10000C970(v68, v70);
      if (v75)
      {
        char v42 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v59, v37, v65, v66);
        sub_10000C970(v65, v66);
        sub_10000C970(v59, v37);
        sub_10008B4F0((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
        return v42 & 1;
      }
      sub_10000C970(v65, v66);
      sub_10000C970(v59, v37);
      sub_10008B4F0((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      goto LABEL_46;
    default:
      uint64_t v25 = v86;
      sub_10008B420((uint64_t)v22, v86, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      uint64_t v26 = v92;
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v25, v89);
LABEL_45:
        sub_1000380B4((uint64_t)v22, &qword_10047E1A8);
LABEL_46:
        char v42 = 0;
      }
      else
      {
        uint64_t v79 = v88;
        uint64_t v78 = v89;
        long long v80 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v84, v26, v89);
        sub_10008B75C(&qword_10047E1B0, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
        uint64_t v48 = (uint64_t)v22;
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        char v42 = v94 == v93;
        long long v81 = *(void (**)(char *, uint64_t))(v79 + 8);
        v81(v80, v78);
        v81((char *)v25, v78);
LABEL_49:
        sub_10008B4F0(v48, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      return v42 & 1;
  }
}

uint64_t type metadata accessor for NANGenericServiceProtocol.Attribute()
{
  uint64_t result = qword_10047E148;
  if (!qword_10047E148) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100087760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_1004852B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000877C8(uint64_t result)
{
  if (result == 221) {
    unsigned int v1 = 7;
  }
  else {
    unsigned int v1 = 8;
  }
  if (result >= 7u) {
    return v1;
  }
  else {
    return result;
  }
}

uint64_t sub_1000877E8(uint64_t a1, char a2, void *a3)
{
  uint64_t v55 = *(void *)(type metadata accessor for NANGenericServiceProtocol.Attribute() - 8);
  __chkstk_darwin();
  uint64_t v52 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v49 - v8;
  sub_100010BCC(&qword_10047CF70);
  uint64_t result = __chkstk_darwin();
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v49 = v3;
    uint64_t v15 = (uint64_t)&v13[*(int *)(result + 48)];
    unint64_t v50 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v51 = a1;
    uint64_t v16 = a1 + v50;
    uint64_t v54 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    sub_1000136F4(v16, (uint64_t)v13, &qword_10047CF70);
    char v17 = *v13;
    uint64_t v53 = v15;
    sub_10008B488(v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v18 = (void *)*a3;
    unint64_t v20 = sub_1000310AC(v17);
    uint64_t v21 = v18[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v24 = v19;
    if (v18[3] < v23)
    {
      sub_10016B264(v23, a2 & 1);
      unint64_t v25 = sub_1000310AC(v17);
      if ((v24 & 1) != (v26 & 1))
      {
LABEL_28:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v20 = v25;
      Swift::String v27 = (void *)*a3;
      if ((v24 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      unint64_t v28 = v50;
      uint64_t v29 = v52;
      sub_10008B488((uint64_t)v9, v52, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10008B5E8(v29, v27[7] + *(void *)(v55 + 72) * v20);
      uint64_t v30 = v14 - 1;
      if (v14 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      uint64_t v34 = v51 + v54 + v28;
      while (1)
      {
        sub_1000136F4(v34, (uint64_t)v13, &qword_10047CF70);
        char v36 = *v13;
        sub_10008B488(v53, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
        unint64_t v37 = (void *)*a3;
        unint64_t v39 = sub_1000310AC(v36);
        uint64_t v40 = v37[2];
        BOOL v41 = (v38 & 1) == 0;
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          goto LABEL_26;
        }
        char v43 = v38;
        if (v37[3] < v42)
        {
          sub_10016B264(v42, 1);
          unint64_t v44 = sub_1000310AC(v36);
          if ((v43 & 1) != (v45 & 1)) {
            goto LABEL_28;
          }
          unint64_t v39 = v44;
        }
        uint64_t v46 = (void *)*a3;
        if (v43)
        {
          uint64_t v35 = v52;
          sub_10008B488((uint64_t)v9, v52, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
          sub_10008B5E8(v35, v46[7] + *(void *)(v55 + 72) * v39);
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          *(unsigned char *)(v46[6] + v39)  = v36;
          sub_10008B488((uint64_t)v9, v46[7] + *(void *)(v55 + 72) * v39, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
          uint64_t v47 = v46[2];
          BOOL v32 = __OFADD__(v47, 1);
          uint64_t v48 = v47 + 1;
          if (v32) {
            goto LABEL_27;
          }
          v46[2]  = v48;
        }
        v34 += v54;
        if (!--v30) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    if (a2)
    {
      Swift::String v27 = (void *)*a3;
      if (v19) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100170E20();
      Swift::String v27 = (void *)*a3;
      if (v24) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v27[(v20 >> 6) + 8] |= 1 << v20;
    *(unsigned char *)(v27[6] + v20)  = v17;
    sub_10008B488((uint64_t)v9, v27[7] + *(void *)(v55 + 72) * v20, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    uint64_t v31 = v27[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    unint64_t v28 = v50;
    void v27[2] = v33;
    uint64_t v30 = v14 - 1;
    if (v14 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

void *sub_100087C88(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  uint64_t v2 = *(void *)(v35 - 8);
  __chkstk_darwin();
  uint64_t v36 = (uint64_t)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v5 = (char *)v32 - v4;
  sub_100010BCC(&qword_10047E2E0);
  __chkstk_darwin();
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100010BCC(&qword_10047CF70);
  uint64_t v8 = *(void *)(v42 - 8);
  __chkstk_darwin();
  uint64_t v41 = (uint64_t)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v34 = (uint64_t)v32 - v10;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)v32 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v18 = *(void *)(v13 + 72);
    unint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
    uint64_t v40 = v18;
    unint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    char v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v32[1]  = a1;
    swift_bridgeObjectRetain();
    char v19 = _swiftEmptyArrayStorage;
    uint64_t v20 = v35;
    uint64_t v33 = v8;
    do
    {
      sub_1000136F4(v17, (uint64_t)v15, &qword_10047CF68);
      sub_1000136F4((uint64_t)v15, (uint64_t)v12, &qword_10047CF68);
      uint64_t v21 = 1;
      if ((*v39)(v12, 1, v20) != 1)
      {
        sub_10008B488((uint64_t)v12, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
        sub_10008B420((uint64_t)v5, v36, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        char v23 = 1;
        switch(EnumCaseMultiPayload)
        {
          case 1:
            break;
          case 2:
            swift_bridgeObjectRelease();
            char v23 = 2;
            break;
          case 3:
            swift_bridgeObjectRelease();
            char v23 = 3;
            break;
          case 4:
            sub_10000C970(*(void *)v36, *(void *)(v36 + 8));
            char v23 = 4;
            break;
          case 5:
            sub_10000C970(*(void *)v36, *(void *)(v36 + 8));
            char v23 = 5;
            break;
          case 6:
            sub_10000C970(*(void *)v36, *(void *)(v36 + 8));
            char v23 = 6;
            break;
          case 7:
            sub_10008B4F0(v36, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
            goto LABEL_15;
          case 8:
            sub_10000C970(*(void *)(v36 + 8), *(void *)(v36 + 16));
LABEL_15:
            char v23 = 7;
            break;
          default:
            sub_10008B4F0(v36, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
            char v23 = 0;
            break;
        }
        uint64_t v24 = (uint64_t)&v7[*(int *)(v42 + 48)];
        *uint64_t v7 = v23;
        sub_10008B488((uint64_t)v5, v24, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
        uint64_t v21 = 0;
        uint64_t v8 = v33;
      }
      uint64_t v25 = v21;
      uint64_t v26 = v42;
      (*v38)(v7, v25, 1, v42);
      sub_1000380B4((uint64_t)v15, &qword_10047CF68);
      if ((*v37)(v7, 1, v26) == 1)
      {
        sub_1000380B4((uint64_t)v7, &qword_10047E2E0);
      }
      else
      {
        uint64_t v27 = v34;
        sub_10006EC68((uint64_t)v7, v34, &qword_10047CF70);
        sub_10006EC68(v27, v41, &qword_10047CF70);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v19 = (void *)sub_1000C58B8(0, v19[2] + 1, 1, (unint64_t)v19);
        }
        unint64_t v29 = v19[2];
        unint64_t v28 = v19[3];
        if (v29 >= v28 >> 1) {
          char v19 = (void *)sub_1000C58B8(v28 > 1, v29 + 1, 1, (unint64_t)v19);
        }
        v19[2]  = v29 + 1;
        sub_10006EC68(v41, (uint64_t)v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v29, &qword_10047CF70);
        uint64_t v20 = v35;
      }
      v17 += v40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease_n();
    if (v19[2]) {
      goto LABEL_24;
    }
LABEL_26:
    uint64_t v30 = &_swiftEmptyDictionarySingleton;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  char v19 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_26;
  }
LABEL_24:
  sub_100010BCC(&qword_10047CF78);
  uint64_t v30 = (void *)static _DictionaryStorage.allocate(capacity:)();
LABEL_27:
  char v43 = v30;
  sub_1000877E8((uint64_t)v19, 1, &v43);
  swift_bridgeObjectRelease();
  return v43;
}

void *sub_1000882D8(void *a1)
{
  uint64_t v3 = *(void *)(sub_100010BCC(&qword_10047CF68) - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_10047E2C0);
    sub_100039448((uint64_t)v21, v22);
    sub_10008B550();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v8 = v23;
    int64_t v9 = *(void *)(v23 + 16);
    if (v9)
    {
      char v19 = a1;
      uint64_t v20 = _swiftEmptyArrayStorage;
      sub_10008357C(0, v9, 0);
      uint64_t v10 = v20;
      uint64_t v18 = v8;
      uint64_t v11 = (unint64_t *)(v8 + 48);
      do
      {
        uint64_t v13 = *(v11 - 1);
        unint64_t v12 = *v11;
        uint64_t v14 = *((unsigned __int8 *)v11 - 16);
        sub_100013D44(v13, *v11);
        sub_100013D44(v13, v12);
        sub_10007B760(v14, v13, v12, v5);
        uint64_t v15 = type metadata accessor for NANGenericServiceProtocol.Attribute();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
        sub_10000C970(v13, v12);
        uint64_t v20 = v10;
        unint64_t v17 = v10[2];
        unint64_t v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          sub_10008357C(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v20;
        }
        v11 += 3;
        v10[2]  = v17 + 1;
        sub_10006EC68((uint64_t)v5, (uint64_t)v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v17, &qword_10047CF68);
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      a1  = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = _swiftEmptyArrayStorage;
    }
    uint64_t v6 = sub_100087C88((uint64_t)v10);
    sub_100010754((uint64_t)v21);
    sub_100010754((uint64_t)a1);
  }
  return v6;
}

uint64_t sub_1000885FC(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  sub_100038004(a1, a2);
  sub_10007FCA4(v12, (uint64_t)v11);
  uint64_t v13 = &v11[*(int *)(v9 + 36)];
  sub_10000C95C(*(void *)v13, *((void *)v13 + 1));
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1)  = a2;
  sub_10008B420((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_1000136F4((uint64_t)v8, (uint64_t)v6, &qword_10047CF68);
  sub_100027C1C((uint64_t)v6, 7);
  sub_10008B4F0((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000380B4((uint64_t)v8, &qword_10047CF68);
}

uint64_t sub_1000887D4(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  sub_100038004(a1, a2);
  sub_10007FCA4(v12, (uint64_t)v11);
  uint64_t v13 = &v11[*(int *)(v9 + 40)];
  sub_10000C95C(*(void *)v13, *((void *)v13 + 1));
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1)  = a2;
  sub_10008B420((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_1000136F4((uint64_t)v8, (uint64_t)v6, &qword_10047CF68);
  sub_100027C1C((uint64_t)v6, 7);
  sub_10008B4F0((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000380B4((uint64_t)v8, &qword_10047CF68);
}

uint64_t sub_1000889AC(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  sub_100038004(a1, a2);
  sub_10007FCA4(v12, (uint64_t)v11);
  uint64_t v13 = &v11[*(int *)(v9 + 44)];
  sub_10000C95C(*(void *)v13, *((void *)v13 + 1));
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1)  = a2;
  sub_10008B420((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v14 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_1000136F4((uint64_t)v8, (uint64_t)v6, &qword_10047CF68);
  sub_100027C1C((uint64_t)v6, 7);
  sub_10008B4F0((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_1000380B4((uint64_t)v8, &qword_10047CF68);
}

unint64_t sub_100088B84()
{
  unint64_t result = qword_10047E0A8;
  if (!qword_10047E0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0A8);
  }
  return result;
}

void *_s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(sub_100010BCC(&qword_10047CF68) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013D44(a1, a2);
  unint64_t v7 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = type metadata accessor for BinaryDecoder();
  uint64_t v9 = (void *)swift_allocObject();
  v9[5]  = &_swiftEmptyDictionarySingleton;
  void v9[2] = a1;
  v9[3]  = a2;
  unint64_t v40 = a2;
  uint64_t v10 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a1;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  uint64_t v39 = a1;
  v9[4]  = v10;
  swift_beginAccess();
  v9[5]  = v7;
  swift_bridgeObjectRelease();
  unint64_t v11 = v9[3];
  uint64_t v43 = v9[2];
  uint64_t v42 = v43 >> 32;
  uint64_t v12 = BYTE6(v11);
  unint64_t v13 = v11 >> 62;
  uint64_t v41 = _swiftEmptyArrayStorage;
  while (2)
  {
    uint64_t v14 = v9[4];
    uint64_t v15 = v12;
    switch(v13)
    {
      case 1uLL:
        uint64_t v15 = v42;
        goto LABEL_7;
      case 2uLL:
        if (v14 >= *(void *)(v43 + 24)) {
          goto LABEL_18;
        }
        goto LABEL_12;
      case 3uLL:
        if (v14 < 0) {
          goto LABEL_12;
        }
        goto LABEL_18;
      default:
LABEL_7:
        if (v14 < v15)
        {
LABEL_12:
          v44[3]  = v8;
          v44[4]  = sub_10008B75C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          v44[0]  = v9;
          swift_retain();
          sub_10024A500(v44, (uint64_t)v45);
          int v38 = LOBYTE(v45[0]);
          uint64_t v36 = v45[2];
          uint64_t v37 = v45[1];
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v16 = v41;
          }
          else {
            uint64_t v16 = sub_1000C64A0(0, v41[2] + 1, 1, v41);
          }
          unint64_t v18 = v16[2];
          unint64_t v17 = v16[3];
          char v19 = (void *)(v18 + 1);
          if (v18 >= v17 >> 1)
          {
            uint64_t v41 = (void *)(v18 + 1);
            unint64_t v35 = v18;
            uint64_t v22 = sub_1000C64A0((void *)(v17 > 1), v18 + 1, 1, v16);
            char v19 = v41;
            unint64_t v18 = v35;
            uint64_t v16 = v22;
          }
          void v16[2] = v19;
          uint64_t v41 = v16;
          uint64_t v20 = &v16[3 * v18];
          *((unsigned char *)v20 + 32)  = v38;
          uint64_t v21 = v36;
          v20[5]  = v37;
          v20[6]  = v21;
          continue;
        }
LABEL_18:
        swift_release();
        int64_t v23 = v41[2];
        if (v23)
        {
          v44[0]  = _swiftEmptyArrayStorage;
          uint64_t v24 = v41;
          sub_10008357C(0, v23, 0);
          uint64_t v25 = (void *)v44[0];
          uint64_t v26 = v24 + 6;
          do
          {
            uint64_t v27 = *(v26 - 1);
            unint64_t v28 = *v26;
            uint64_t v29 = *((unsigned __int8 *)v26 - 16);
            sub_100013D44(v27, *v26);
            sub_100013D44(v27, v28);
            sub_10007B760(v29, v27, v28, v6);
            uint64_t v30 = type metadata accessor for NANGenericServiceProtocol.Attribute();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v6, 0, 1, v30);
            sub_10000C970(v27, v28);
            v44[0]  = v25;
            unint64_t v32 = v25[2];
            unint64_t v31 = v25[3];
            if (v32 >= v31 >> 1)
            {
              sub_10008357C(v31 > 1, v32 + 1, 1);
              uint64_t v25 = (void *)v44[0];
            }
            v26 += 3;
            v25[2]  = v32 + 1;
            sub_10006EC68((uint64_t)v6, (uint64_t)v25+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v32, &qword_10047CF68);
            --v23;
          }
          while (v23);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v25 = _swiftEmptyArrayStorage;
        }
        uint64_t v33 = sub_100087C88((uint64_t)v25);
        sub_10000C970(v39, v40);
        return v33;
    }
  }
}

unint64_t sub_100089148()
{
  unint64_t result = qword_10047E0B0;
  if (!qword_10047E0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0B0);
  }
  return result;
}

unint64_t sub_1000891A0()
{
  unint64_t result = qword_10047E0B8;
  if (!qword_10047E0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0B8);
  }
  return result;
}

unint64_t sub_1000891F8()
{
  unint64_t result = qword_10047E0C0;
  if (!qword_10047E0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0C0);
  }
  return result;
}

unint64_t sub_100089250()
{
  unint64_t result = qword_10047E0C8;
  if (!qword_10047E0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0C8);
  }
  return result;
}

unint64_t sub_1000892A8()
{
  unint64_t result = qword_10047E0D0;
  if (!qword_10047E0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E0D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol()
{
  return &type metadata for NANGenericServiceProtocol;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol.AttributeFilter()
{
  return &type metadata for NANGenericServiceProtocol.AttributeFilter;
}

uint64_t getEnumTagSinglePayload for NANCipherSuite(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NANGenericServiceProtocol.AttributeID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100089478);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol.AttributeID()
{
  return &type metadata for NANGenericServiceProtocol.AttributeID;
}

char *sub_1000894B0(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for NWEndpoint.Port();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 3u:
        uint64_t v10 = *((void *)a2 + 1);
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = v10;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
      case 5u:
      case 6u:
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
        sub_100013D44(v12, v11);
        *(void *)a1  = v12;
        *((void *)a1 + 1)  = v11;
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        unint64_t v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        uint64_t v14 = v13[6];
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          uint64_t v19 = sub_100010BCC((uint64_t *)&unk_1004852B0);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        uint64_t v22 = v13[7];
        int64_t v23 = &a1[v22];
        uint64_t v24 = &a2[v22];
        unint64_t v25 = *((void *)v24 + 1);
        if (v25 >> 60 == 15)
        {
          *(_OWORD *)int64_t v23 = *(_OWORD *)v24;
        }
        else
        {
          uint64_t v26 = *(void *)v24;
          sub_100013D44(*(void *)v24, *((void *)v24 + 1));
          *(void *)int64_t v23 = v26;
          *((void *)v23 + 1)  = v25;
        }
        uint64_t v27 = v13[8];
        unint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        unint64_t v30 = *((void *)v29 + 1);
        if (v30 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
        }
        else
        {
          uint64_t v31 = *(void *)v29;
          sub_100013D44(*(void *)v29, *((void *)v29 + 1));
          *(void *)unint64_t v28 = v31;
          *((void *)v28 + 1)  = v30;
        }
        uint64_t v32 = v13[9];
        uint64_t v33 = &a1[v32];
        uint64_t v34 = &a2[v32];
        unint64_t v35 = *((void *)v34 + 1);
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
        }
        else
        {
          uint64_t v36 = *(void *)v34;
          sub_100013D44(*(void *)v34, *((void *)v34 + 1));
          *(void *)uint64_t v33 = v36;
          *((void *)v33 + 1)  = v35;
        }
        uint64_t v37 = v13[10];
        int v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        uint64_t v40 = type metadata accessor for UUID();
        uint64_t v41 = *(void *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          uint64_t v42 = sub_100010BCC(&qword_1004862B0);
          memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        *(void *)&a1[v13[11]]  = *(void *)&a2[v13[11]];
        uint64_t v54 = v13;
        uint64_t v43 = v13[12];
        unint64_t v44 = &a1[v43];
        char v45 = &a2[v43];
        uint64_t v46 = type metadata accessor for NANInternetSharingStatistics.Requester();
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
        swift_bridgeObjectRetain();
        if (v48(v45, 1, v46))
        {
          uint64_t v49 = sub_100010BCC((uint64_t *)&unk_100485B60);
          memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          uint64_t v50 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v44, v45, v50);
          v44[*(int *)(v46 + 20)]  = v45[*(int *)(v46 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        uint64_t v51 = v54[13];
        uint64_t v52 = &a1[v51];
        uint64_t v53 = &a2[v51];
        *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
        *(_OWORD *)(v52 + 9)  = *(_OWORD *)(v53 + 9);
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        *(_WORD *)a1  = *(_WORD *)a2;
        a1[2]  = a2[2];
        uint64_t v21 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        sub_100013D44(v21, v20);
        *((void *)a1 + 1)  = v21;
        *((void *)a1 + 2)  = v20;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100089AE4(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v5 = type metadata accessor for NWEndpoint.Port();
      goto LABEL_24;
    case 2:
    case 3:
      return swift_bridgeObjectRelease();
    case 4:
    case 5:
    case 6:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
      goto LABEL_20;
    case 7:
      uint64_t v6 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v7 = (char *)a1 + v6[6];
      uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      }
      uint64_t v10 = (uint64_t *)((char *)a1 + v6[7]);
      unint64_t v11 = v10[1];
      if (v11 >> 60 != 15) {
        sub_10000C970(*v10, v11);
      }
      uint64_t v12 = (uint64_t *)((char *)a1 + v6[8]);
      unint64_t v13 = v12[1];
      if (v13 >> 60 != 15) {
        sub_10000C970(*v12, v13);
      }
      uint64_t v14 = (uint64_t *)((char *)a1 + v6[9]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_10000C970(*v14, v15);
      }
      uint64_t v16 = (char *)a1 + v6[10];
      uint64_t v17 = type metadata accessor for UUID();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
      a1  = (uint64_t *)((char *)a1 + v6[12]);
      uint64_t v19 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(a1, 1, v19);
      if (!result)
      {
        uint64_t v5 = type metadata accessor for DispatchTimeInterval();
LABEL_24:
        unint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
        return v20(a1, v5);
      }
      return result;
    case 8:
      uint64_t v3 = a1[1];
      unint64_t v4 = a1[2];
LABEL_20:
      uint64_t result = sub_10000C970(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

char *sub_100089DF0(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for NWEndpoint.Port();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_26;
    case 2u:
    case 3u:
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1  = *(void *)a2;
      *((void *)a1 + 1)  = v7;
      swift_bridgeObjectRetain();
      goto LABEL_26;
    case 4u:
    case 5u:
    case 6u:
      uint64_t v9 = *(void *)a2;
      unint64_t v8 = *((void *)a2 + 1);
      sub_100013D44(v9, v8);
      *(void *)a1  = v9;
      *((void *)a1 + 1)  = v8;
      goto LABEL_26;
    case 7u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      uint64_t v10 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v11 = v10[6];
      uint64_t v12 = &a1[v11];
      unint64_t v13 = &a2[v11];
      uint64_t v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_100010BCC((uint64_t *)&unk_1004852B0);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v19 = v10[7];
      unint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      unint64_t v22 = *((void *)v21 + 1);
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
      }
      else
      {
        uint64_t v23 = *(void *)v21;
        sub_100013D44(*(void *)v21, *((void *)v21 + 1));
        *(void *)unint64_t v20 = v23;
        *((void *)v20 + 1)  = v22;
      }
      uint64_t v24 = v10[8];
      unint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      unint64_t v27 = *((void *)v26 + 1);
      if (v27 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
      }
      else
      {
        uint64_t v28 = *(void *)v26;
        sub_100013D44(*(void *)v26, *((void *)v26 + 1));
        *(void *)unint64_t v25 = v28;
        *((void *)v25 + 1)  = v27;
      }
      uint64_t v29 = v10[9];
      unint64_t v30 = &a1[v29];
      uint64_t v31 = &a2[v29];
      unint64_t v32 = *((void *)v31 + 1);
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
      }
      else
      {
        uint64_t v33 = *(void *)v31;
        sub_100013D44(*(void *)v31, *((void *)v31 + 1));
        *(void *)unint64_t v30 = v33;
        *((void *)v30 + 1)  = v32;
      }
      uint64_t v34 = v10[10];
      unint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      uint64_t v37 = type metadata accessor for UUID();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = sub_100010BCC(&qword_1004862B0);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      *(void *)&a1[v10[11]]  = *(void *)&a2[v10[11]];
      uint64_t v52 = v10;
      uint64_t v40 = v10[12];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      uint64_t v43 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t v44 = *(void *)(v43 - 8);
      char v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      if (v45(v42, 1, v43))
      {
        uint64_t v46 = sub_100010BCC((uint64_t *)&unk_100485B60);
        memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v47 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v41, v42, v47);
        v41[*(int *)(v43 + 20)]  = v42[*(int *)(v43 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      uint64_t v48 = v52[13];
      uint64_t v49 = &a1[v48];
      uint64_t v50 = &a2[v48];
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      *(_OWORD *)(v49 + 9)  = *(_OWORD *)(v50 + 9);
      goto LABEL_26;
    case 8u:
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[2]  = a2[2];
      uint64_t v18 = *((void *)a2 + 1);
      unint64_t v17 = *((void *)a2 + 2);
      sub_100013D44(v18, v17);
      *((void *)a1 + 1)  = v18;
      *((void *)a1 + 2)  = v17;
LABEL_26:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10008A3C4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008B4F0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for NWEndpoint.Port();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_27;
      case 2u:
      case 3u:
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_27;
      case 4u:
      case 5u:
      case 6u:
        uint64_t v8 = *(void *)a2;
        unint64_t v7 = *((void *)a2 + 1);
        sub_100013D44(v8, v7);
        *(void *)a1  = v8;
        *((void *)a1 + 1)  = v7;
        goto LABEL_27;
      case 7u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        uint64_t v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        uint64_t v10 = v9[6];
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        {
          uint64_t v15 = sub_100010BCC((uint64_t *)&unk_1004852B0);
          memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        }
        uint64_t v19 = v9[7];
        unint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        unint64_t v22 = *((void *)v21 + 1);
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
        }
        else
        {
          uint64_t v23 = *(void *)v21;
          sub_100013D44(*(void *)v21, *((void *)v21 + 1));
          *(void *)unint64_t v20 = v23;
          *((void *)v20 + 1)  = v22;
        }
        uint64_t v24 = v9[8];
        unint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        unint64_t v27 = *((void *)v26 + 1);
        if (v27 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
        }
        else
        {
          uint64_t v28 = *(void *)v26;
          sub_100013D44(*(void *)v26, *((void *)v26 + 1));
          *(void *)unint64_t v25 = v28;
          *((void *)v25 + 1)  = v27;
        }
        uint64_t v29 = v9[9];
        unint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        unint64_t v32 = *((void *)v31 + 1);
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
        }
        else
        {
          uint64_t v33 = *(void *)v31;
          sub_100013D44(*(void *)v31, *((void *)v31 + 1));
          *(void *)unint64_t v30 = v33;
          *((void *)v30 + 1)  = v32;
        }
        uint64_t v34 = v9[10];
        unint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        uint64_t v37 = type metadata accessor for UUID();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = sub_100010BCC(&qword_1004862B0);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        *(void *)&a1[v9[11]]  = *(void *)&a2[v9[11]];
        uint64_t v53 = v9;
        uint64_t v40 = v9[12];
        uint64_t v41 = &a1[v40];
        uint64_t v42 = &a2[v40];
        uint64_t v43 = type metadata accessor for NANInternetSharingStatistics.Requester();
        uint64_t v44 = *(void *)(v43 - 8);
        char v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
        swift_bridgeObjectRetain();
        if (v45(v42, 1, v43))
        {
          uint64_t v46 = sub_100010BCC((uint64_t *)&unk_100485B60);
          memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          uint64_t v47 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v41, v42, v47);
          v41[*(int *)(v43 + 20)]  = v42[*(int *)(v43 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        uint64_t v48 = v53[13];
        uint64_t v49 = &a1[v48];
        uint64_t v50 = &a2[v48];
        long long v51 = *(_OWORD *)v50;
        *(_OWORD *)(v49 + 9)  = *(_OWORD *)(v50 + 9);
        *(_OWORD *)uint64_t v49 = v51;
        goto LABEL_27;
      case 8u:
        __int16 v16 = *(_WORD *)a2;
        a1[2]  = a2[2];
        *(_WORD *)a1  = v16;
        uint64_t v18 = *((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        sub_100013D44(v18, v17);
        *((void *)a1 + 1)  = v18;
        *((void *)a1 + 2)  = v17;
LABEL_27:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_10008A9CC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    *a1  = *a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
    uint64_t v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[7]]  = *(_OWORD *)&a2[v8[7]];
    *(_OWORD *)&a1[v8[8]]  = *(_OWORD *)&a2[v8[8]];
    *(_OWORD *)&a1[v8[9]]  = *(_OWORD *)&a2[v8[9]];
    uint64_t v15 = v8[10];
    __int16 v16 = &a1[v15];
    unint64_t v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100010BCC(&qword_1004862B0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(void *)&a1[v8[11]]  = *(void *)&a2[v8[11]];
    uint64_t v21 = v8[12];
    unint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v22, v23, v27);
      v22[*(int *)(v24 + 20)]  = v23[*(int *)(v24 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v28 = v8[13];
    uint64_t v29 = &a1[v28];
    unint64_t v30 = &a2[v28];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 9)  = *(_OWORD *)(v30 + 9);
    goto LABEL_15;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for NWEndpoint.Port();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_10008ADC0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008B4F0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for NANGenericServiceProtocol.Attribute);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 7)
    {
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      uint64_t v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004852B0);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[7]]  = *(_OWORD *)&a2[v8[7]];
      *(_OWORD *)&a1[v8[8]]  = *(_OWORD *)&a2[v8[8]];
      *(_OWORD *)&a1[v8[9]]  = *(_OWORD *)&a2[v8[9]];
      uint64_t v15 = v8[10];
      __int16 v16 = &a1[v15];
      unint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for UUID();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = sub_100010BCC(&qword_1004862B0);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      *(void *)&a1[v8[11]]  = *(void *)&a2[v8[11]];
      uint64_t v21 = v8[12];
      unint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      uint64_t v24 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = sub_100010BCC((uint64_t *)&unk_100485B60);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v27 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v22, v23, v27);
        v22[*(int *)(v24 + 20)]  = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      uint64_t v28 = v8[13];
      uint64_t v29 = &a1[v28];
      unint64_t v30 = &a2[v28];
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 9)  = *(_OWORD *)(v30 + 9);
      goto LABEL_16;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for NWEndpoint.Port();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NANAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10008B22C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10008B23C()
{
  uint64_t result = type metadata accessor for NWEndpoint.Port();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008B32C()
{
  return sub_10008B75C(&qword_10047E180, (void (*)(uint64_t))type metadata accessor for NANGenericServiceProtocol.Attribute);
}

unint64_t sub_10008B378()
{
  unint64_t result = qword_10047E188;
  if (!qword_10047E188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E188);
  }
  return result;
}

unint64_t sub_10008B3CC()
{
  unint64_t result = qword_10047E190;
  if (!qword_10047E190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E190);
  }
  return result;
}

uint64_t sub_10008B420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008B488(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008B4F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10008B550()
{
  unint64_t result = qword_10047E2C8;
  if (!qword_10047E2C8)
  {
    sub_100014434(&qword_10047E2C0);
    sub_10000F9CC(&qword_10047E2D0, &qword_10047E2D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E2C8);
  }
  return result;
}

uint64_t sub_10008B5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008B64C()
{
  unint64_t result = qword_10047E2E8;
  if (!qword_10047E2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E2E8);
  }
  return result;
}

unint64_t sub_10008B6A0()
{
  unint64_t result = qword_10047E2F0;
  if (!qword_10047E2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E2F0);
  }
  return result;
}

unint64_t sub_10008B6F4()
{
  unint64_t result = qword_10047E2F8;
  if (!qword_10047E2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E2F8);
  }
  return result;
}

uint64_t sub_10008B748(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008B75C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_10008B7A8(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = result;
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (char *)sub_1000835BC(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = (char *)a2;
    if (a2 <= (uint64_t)v10) {
      uint64_t v6 = v10;
    }
    for (int64_t i = v6 - v10; ; --i)
    {
      sub_100039448(a3, *(void *)(a3 + 24));
      sub_1000A6AF8();
      uint64_t result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v3)
      {
        swift_release();
        return (char *)_swiftEmptyArrayStorage;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        uint64_t result = (char *)sub_1000835BC(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v9 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v9)  = v12;
      if (a2 < (uint64_t)v10) {
        break;
      }
      if (!i) {
        goto LABEL_17;
      }
      if (!--v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

char *sub_10008B90C(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = result;
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = v3;
  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (char *)sub_10008359C(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = (char *)a2;
    if (a2 <= (uint64_t)v14) {
      uint64_t v6 = v14;
    }
    int64_t v7 = v6 - v14;
    while (1)
    {
      sub_100039448(a3, *(void *)(a3 + 24));
      sub_1000A6B4C();
      uint64_t result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v5)
      {
        swift_release();
        return (char *)_swiftEmptyArrayStorage;
      }
      __int16 v8 = v19;
      char v9 = v20;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t result = (char *)sub_10008359C(v10 > 1, v11 + 1, 1);
        char v9 = v20;
        __int16 v8 = v19;
      }
      _swiftEmptyArrayStorage[2]  = v11 + 1;
      char v12 = (char *)_swiftEmptyArrayStorage + 10 * v11;
      v12[32]  = v16;
      *((_WORD *)v12 + 17)  = v17;
      v12[36]  = v18;
      *((_WORD *)v12 + 19)  = v8;
      v12[40]  = v9;
      if (a2 < (uint64_t)v14) {
        break;
      }
      if (!v7) {
        goto LABEL_17;
      }
      --v7;
      --v4;
      uint64_t v5 = 0;
      if (!v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void *NANBitmap.Band.tvWhiteSpaces.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.tvWhiteSpaces;
}

void *NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces;
}

void *NANBitmap.Band.ghz2_4.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz2_4;
}

void *NANBitmap.Band.ghz3_6.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz3_6;
}

uint64_t static NANBitmap.Band.ghz3_6.getter()
{
  return 8;
}

void *NANBitmap.Band.ghz_4_9_to_5_0.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_4_9_to_5_0;
}

void *NANBitmap.Band.ghz_60.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_60;
}

void *NANBitmap.Band.ghz_45.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_45;
}

uint64_t static NANBitmap.Band.ghz_45.getter()
{
  return 64;
}

void *NANBitmap.Band.ghz_6.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_6;
}

uint64_t static NANBitmap.Band.ghz_6.getter()
{
  return 128;
}

void *NANBitmap.Band.all.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.all;
}

uint64_t static NANBitmap.Band.all.getter()
{
  return 255;
}

CoreP2P::NANBitmap::Band_optional __swiftcall NANBitmap.Band.Iterator.next()()
{
  uint64_t v1 = *((void *)v0 + 1);
  if (v1 <= 7)
  {
    if (v1 >= -8)
    {
      int v10 = *v0;
      uint64_t v8 = 8;
      unint64_t v3 = *((void *)v0 + 1);
      if (v1 < 0) {
        goto LABEL_23;
      }
LABEL_19:
      if (v3 > 7)
      {
        unsigned __int8 v2 = 0;
LABEL_16:
        *((void *)v0 + 1)  = v8 + 1;
        return (CoreP2P::NANBitmap::Band_optional)(v2 | ((v1 > 7) << 8));
      }
      int v11 = 1 << v3;
      while ((v11 & ~v10) != 0)
      {
        *((void *)v0 + 1)  = ++v3;
        if ((v3 & 0x8000000000000000) == 0) {
          goto LABEL_19;
        }
LABEL_23:
        int v11 = 0;
        if (v3 <= 0xFFFFFFFFFFFFFFF8)
        {
          unsigned __int8 v2 = 0;
          uint64_t v8 = -8;
          goto LABEL_16;
        }
      }
    }
    else
    {
      unint64_t v3 = *((void *)v0 + 1);
    }
    unint64_t v4 = v3 - 9;
    int v5 = 1 << v3;
    uint64_t v6 = -8;
    if (v3 > 0xFFFFFFFFFFFFFFF8) {
      uint64_t v6 = v3;
    }
    if ((v3 & 0x8000000000000000) != 0) {
      LOBYTE(v5)  = 0;
    }
    else {
      uint64_t v6 = v3;
    }
    BOOL v7 = __CFADD__(v4, 18);
    if (v4 <= 0xFFFFFFFFFFFFFFEELL) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v6;
    }
    if (v3 != -9 && v7) {
      unsigned __int8 v2 = v5;
    }
    else {
      unsigned __int8 v2 = 0;
    }
    goto LABEL_16;
  }
  unsigned __int8 v2 = 0;
  return (CoreP2P::NANBitmap::Band_optional)(v2 | ((v1 > 7) << 8));
}

CoreP2P::NANBitmap::Band_optional sub_10008BC00@<W0>(Swift::UInt8 *a1@<X8>)
{
  CoreP2P::NANBitmap::Band_optional result = NANBitmap.Band.Iterator.next()();
  *a1  = result.value.rawValue;
  a1[1]  = result.is_nil;
  return result;
}

CoreP2P::NANBitmap::Band::Iterator __swiftcall NANBitmap.Band.makeIterator()()
{
  Swift::Int v0 = 0;
  result.currentIndex  = v0;
  return result;
}

uint64_t NANBitmap.Band.bands.getter(uint64_t result)
{
  uint64_t v1 = 0;
  int v2 = result;
  unint64_t v3 = _swiftEmptyArrayStorage;
  while (v1 >= -8)
  {
    while (v1 < 0)
    {
      int v4 = 0;
      if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8)
      {
        unsigned __int8 v6 = 0;
        uint64_t v1 = -7;
        if (__OFADD__(-8, 1)) {
          goto LABEL_49;
        }
        goto LABEL_34;
      }
LABEL_8:
      if ((v4 & ~v2) == 0) {
        goto LABEL_16;
      }
      uint64_t v5 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_49;
      }
      ++v1;
      if ((unint64_t)(v5 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v1 = v5;
        goto LABEL_16;
      }
    }
    if ((unint64_t)v1 < 8)
    {
      int v4 = 1 << v1;
      goto LABEL_8;
    }
    unsigned __int8 v6 = 0;
    uint64_t v1 = 9;
    if (__OFADD__(8, 1)) {
      goto LABEL_49;
    }
LABEL_34:
    switch(v6)
    {
      case 4u:
        char v13 = 0;
LABEL_40:
        CoreP2P::NANBitmap::Band::Iterator result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          CoreP2P::NANBitmap::Band::Iterator result = (uint64_t)sub_1000C65C8(0, v3[2] + 1, 1, v3);
          unint64_t v3 = (void *)result;
        }
        unint64_t v15 = v3[2];
        unint64_t v14 = v3[3];
        if (v15 >= v14 >> 1)
        {
          CoreP2P::NANBitmap::Band::Iterator result = (uint64_t)sub_1000C65C8((void *)(v14 > 1), v15 + 1, 1, v3);
          unint64_t v3 = (void *)result;
        }
        v3[2]  = v15 + 1;
        *((unsigned char *)v3 + v15 + 32)  = v13;
        break;
      case 0x80u:
        char v13 = 2;
        goto LABEL_40;
      case 0x10u:
        char v13 = 1;
        goto LABEL_40;
    }
    if (v1 >= 8) {
      return (uint64_t)v3;
    }
  }
LABEL_16:
  unint64_t v7 = v1 - 9;
  int v8 = 1 << v1;
  if ((unint64_t)v1 <= 7) {
    uint64_t v9 = v1;
  }
  else {
    uint64_t v9 = 8;
  }
  if ((unint64_t)v1 > 7) {
    LOBYTE(v8)  = 0;
  }
  if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8) {
    uint64_t v10 = -8;
  }
  else {
    uint64_t v10 = v1;
  }
  if (v1 >= 0)
  {
    unsigned __int8 v11 = v8;
  }
  else
  {
    uint64_t v9 = v10;
    unsigned __int8 v11 = 0;
  }
  if (v7 <= 0xFFFFFFFFFFFFFFEELL) {
    uint64_t v12 = v1;
  }
  else {
    uint64_t v12 = v9;
  }
  if (v7 <= 0xFFFFFFFFFFFFFFEELL) {
    unsigned __int8 v6 = 0;
  }
  else {
    unsigned __int8 v6 = v11;
  }
  uint64_t v1 = v12 + 1;
  if (!__OFADD__(v12, 1)) {
    goto LABEL_34;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10008BDF8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10008BE58()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10008BEA8(uint64_t a1@<X8>)
{
  *(unsigned char *)a1  = *v1;
  *(void *)(a1 + 8)  = 0;
}

uint64_t sub_10008BEB8()
{
  return sub_10009C0CC(*v0);
}

uint64_t sub_10008BEC0(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_1001B3210(a1, a2, a3, *v3);
}

uint64_t sub_10008BEC8()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void sub_10008BEEC(unsigned char *a1@<X8>)
{
  *a1  = 0;
}

uint64_t sub_10008BEF4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_1001DB60C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

unint64_t NANBitmap.Channel.channelBitmap.getter(unint64_t a1)
{
  return a1 >> 16;
}

uint64_t NANBitmap.Channel.channelBitmap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 2)  = result;
  return result;
}

uint64_t (*NANBitmap.Channel.channelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANBitmap.Channel.primaryChannelBitmap.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t NANBitmap.Channel.primaryChannelBitmap.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4)  = result;
  return result;
}

uint64_t (*NANBitmap.Channel.primaryChannelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANBitmap.Channel.auxiliaryChannelBitmap.getter(uint64_t a1, char a2)
{
  return HIWORD(a1) | ((a2 & 1) << 16);
}

uint64_t NANBitmap.Channel.auxiliaryChannelBitmap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6)  = result;
  *(unsigned char *)(v1 + 8)  = BYTE2(result) & 1;
  return result;
}

uint64_t (*NANBitmap.Channel.auxiliaryChannelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

CoreP2P::NANBitmap::Channel __swiftcall NANBitmap.Channel.init(operatingClass:channelBitmap:primaryChannelBitmap:auxiliaryChannelBitmap:)(Swift::UInt8 operatingClass, Swift::UInt16 channelBitmap, Swift::UInt8 primaryChannelBitmap, Swift::UInt16_optional auxiliaryChannelBitmap)
{
  unint64_t v4 = operatingClass | ((unint64_t)channelBitmap << 16) | ((unint64_t)primaryChannelBitmap << 32) | (*(void *)&auxiliaryChannelBitmap.value << 48);
  is_nil  = auxiliaryChannelBitmap.is_nil;
  result.operatingClass  = v4;
  result.gap1  = BYTE1(v4);
  result.channelBitmap  = WORD1(v4);
  result.primaryChannelBitmap  = BYTE4(v4);
  result.gap5  = BYTE5(v4);
  result.auxiliaryChannelBitmap.value  = HIWORD(v4);
  result.auxiliaryChannelBitmap.is_nil  = is_nil;
  return result;
}

void NANBitmap.Channel.hash(into:)(int a1, unint64_t a2, char a3)
{
  Swift::UInt16 v4 = HIWORD(a2);
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
}

uint64_t static NANBitmap.Channel.__derived_struct_equals(_:_:)(unint64_t a1, char a2, unint64_t a3, char a4)
{
  uint64_t result = 0;
  if (a1 == a3 && ((a1 >> 16) & 0xFFFFFF) == ((a3 >> 16) & 0xFFFFFF))
  {
    if (a2)
    {
      if (a4) {
        return 1;
      }
    }
    else if (HIWORD(a1) == HIWORD(a3) && (a4 & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_10008C0D8()
{
  unint64_t result = 0x6E6974617265706FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x426C656E6E616863;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10008C18C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A2A10(a1, a2);
  *a3  = result;
  return result;
}

void sub_10008C1B4(unsigned char *a1@<X8>)
{
  *a1  = 4;
}

uint64_t sub_10008C1C0(uint64_t a1)
{
  unint64_t v2 = sub_10009C078();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C1FC(uint64_t a1)
{
  unint64_t v2 = sub_10009C078();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANBitmap.Channel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047E330);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10009C078();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NANBitmap.Channel.hashValue.getter(unint64_t a1, char a2)
{
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1));
  }
  return Hasher._finalize()();
}

Swift::Int sub_10008C4A0()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 6);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_10008C54C()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 6);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_10008C5CC()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 6);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_10008C674@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A1718(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(_WORD *)(a2 + 6)  = HIWORD(result);
    *(unsigned char *)(a2 + 8)  = v5 & 1;
  }
  return result;
}

unint64_t NANBitmap.Channel.init(from:)(void *a1)
{
  return sub_1000A1718(a1) & 0xFFFF00FFFFFF00FFLL;
}

uint64_t sub_10008C6F4(void *a1)
{
  return NANBitmap.Channel.encode(to:)(a1);
}

uint64_t sub_10008C734(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1) || a1[4] != a2[4]) {
    return 0;
  }
  char v5 = a2[8];
  if (a1[8])
  {
    if (a2[8]) {
      return 1;
    }
  }
  else
  {
    if (*((unsigned __int16 *)a1 + 3) != *((unsigned __int16 *)a2 + 3)) {
      char v5 = 1;
    }
    if ((v5 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t NANBitmap.Time.control.setter(uint64_t result)
{
  *Swift::UInt16 v1 = result;
  return result;
}

uint64_t NANBitmap.Time.Control.bitDuration.getter(char a1)
{
  return _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(a1 & 7);
}

uint64_t NANBitmap.Time.Control.period.getter(__int16 a1)
{
  unint64_t v1 = sub_10008C940(3uLL, 3, a1);
  uint64_t result = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v1);
  if (result == 8) {
    return 0;
  }
  return result;
}

uint64_t NANBitmap.Time.Control.rawStartOffset.getter(unsigned int a1)
{
  return (a1 >> 6) & 0x1FF;
}

uint64_t sub_10008C80C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0) {
      return 0;
    }
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 16)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    return swift_willThrow();
  }
  if (a2 < 0) {
    goto LABEL_23;
  }
  a4  = result;
  if (a2)
  {
    uint64_t result = 0;
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 <= 0x3F) {
        result |= 1 << v5;
      }
      if (a2 - 1 == v5) {
        break;
      }
      if (a2 == ++v5)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40) {
        return 0;
      }
      return (unsigned __int16)(a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  uint64_t result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40) {
      return result;
    }
    return (unsigned __int16)(a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0) {
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  return result;
}

unint64_t sub_10008C940(unint64_t result, uint64_t a2, __int16 a3)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 16)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    swift_willThrow();
    return v5;
  }
  if (a2 < 0) {
    goto LABEL_25;
  }
  if (a2)
  {
    uint64_t v3 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 <= 0x3F) {
        v3 |= 1 << v6;
      }
      if (a2 - 1 == v6) {
        break;
      }
      if (a2 == ++v6)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (result >= 0x40) {
      return 0;
    }
LABEL_20:
    unint64_t v5 = (unsigned __int16)(a3 & (v3 << result)) >> result;
    while (v5 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0) {
        return 0;
      }
LABEL_29:
      uint64_t v3 = (unsigned __int16)(a3 & (v3 >> -(char)result));
      unint64_t v5 = v3 << -(char)result;
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v5;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0;
    if (result > 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_29;
    }
    return v5;
  }
  unint64_t v5 = 0;
  uint64_t v3 = 0;
  if (result < 0x40) {
    goto LABEL_20;
  }
  return v5;
}

unint64_t sub_10008CA90(unint64_t a1, uint64_t a2, __int16 a3)
{
  return sub_10008CAD8(a1, a2, a3);
}

unint64_t sub_10008CAA8(unint64_t a1, uint64_t a2, char a3)
{
  return sub_10008CFE8(a1, a2, a3);
}

uint64_t sub_10008CAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  return sub_10008CD6C(a1, a2, a3, a4);
}

unint64_t sub_10008CAD8(unint64_t result, uint64_t a2, __int16 a3)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 16)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    swift_willThrow();
    return v5;
  }
  if (a2 < 0) {
    goto LABEL_25;
  }
  if (a2)
  {
    uint64_t v3 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 < 0x40) {
        v3 |= 1 << v6;
      }
      if (a2 - 1 == v6) {
        break;
      }
      if (a2 == ++v6)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (result >= 0x40) {
      return 0;
    }
LABEL_20:
    unint64_t v5 = (unsigned __int16)(a3 & (v3 << result)) >> result;
    while (v5 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0) {
        return 0;
      }
LABEL_29:
      uint64_t v3 = (unsigned __int16)(a3 & (v3 >> -(char)result));
      unint64_t v5 = v3 << -(char)result;
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v5;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v3 = 0;
  if ((result & 0x8000000000000000) != 0)
  {
    if (result > 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_29;
    }
    return v5;
  }
  if (result < 0x40) {
    goto LABEL_20;
  }
  return v5;
}

uint64_t sub_10008CC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  return sub_10008CC38(a1, a2, a3, a4);
}

uint64_t sub_10008CC38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0) {
      return 0;
    }
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 16)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    return swift_willThrow();
  }
  if (a2 < 0) {
    goto LABEL_23;
  }
  a4  = result;
  if (a2)
  {
    uint64_t result = 0;
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 < 0x40) {
        result |= 1 << v5;
      }
      if (a2 - 1 == v5) {
        break;
      }
      if (a2 == ++v5)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40) {
        return 0;
      }
      return (unsigned __int16)(a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  uint64_t result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40) {
      return result;
    }
    return (unsigned __int16)(a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0) {
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  return result;
}

uint64_t sub_10008CD6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0) {
      return 0;
    }
    return (unint64_t)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 8)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    return swift_willThrow();
  }
  if (a2 < 0) {
    goto LABEL_23;
  }
  a4  = result;
  if (a2)
  {
    uint64_t result = 0;
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 < 0x40) {
        result |= 1 << v5;
      }
      if (a2 - 1 == v5) {
        break;
      }
      if (a2 == ++v5)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40) {
        return 0;
      }
      return (a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  uint64_t result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40) {
      return result;
    }
    return (a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0) {
    return (unint64_t)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  return result;
}

unint64_t sub_10008CEA0(unint64_t result, uint64_t a2, unsigned int a3)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 32)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    swift_willThrow();
    return v5;
  }
  if (a2 < 0) {
    goto LABEL_25;
  }
  if (a2)
  {
    uint64_t v3 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 < 0x40) {
        v3 |= 1 << v6;
      }
      if (a2 - 1 == v6) {
        break;
      }
      if (a2 == ++v6)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (result >= 0x40) {
      return 0;
    }
LABEL_20:
    uint64_t v7 = v3 << result;
    uint64_t v3 = a3;
    unint64_t v5 = (v7 & a3) >> result;
    while (v5 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0) {
        return 0;
      }
LABEL_29:
      uint64_t v3 = (v3 >> -(char)result) & a3;
      unint64_t v5 = v3 << -(char)result;
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v5;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v3 = 0;
  if ((result & 0x8000000000000000) != 0)
  {
    if (result > 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_29;
    }
    return v5;
  }
  if (result < 0x40) {
    goto LABEL_20;
  }
  return v5;
}

unint64_t sub_10008CFE8(unint64_t result, uint64_t a2, char a3)
{
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (result <= 0xFFFFFFFFFFFFFFC0) {
      return 0;
    }
    goto LABEL_27;
  }
  if ((uint64_t)(result + a2) > 8)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8)  = 0;
    *(unsigned char *)(v4 + 16)  = 2;
    swift_willThrow();
    return v5;
  }
  if (a2 < 0) {
    goto LABEL_23;
  }
  if (a2)
  {
    uint64_t v3 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 < 0x40) {
        v3 |= 1 << v6;
      }
      if (a2 - 1 == v6) {
        break;
      }
      if (a2 == ++v6)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((result & 0x8000000000000000) == 0)
    {
      if (result >= 0x40) {
        return 0;
      }
      return (a3 & (v3 << result)) >> result;
    }
    goto LABEL_24;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v3 = 0;
  if ((result & 0x8000000000000000) == 0)
  {
    if (result >= 0x40) {
      return v5;
    }
    return (a3 & (v3 << result)) >> result;
  }
  if (result <= 0xFFFFFFFFFFFFFFC0) {
    return v5;
  }
LABEL_27:
  unint64_t v5 = (unint64_t)(a3 & (v3 >> -(char)result)) << -(char)result;
  if ((v5 & 0x8000000000000000) != 0) {
    __break(1u);
  }
  if (v5 <= 0xFF) {
    return v5;
  }
  __break(1u);
  return result;
}

unint64_t NANBitmap.Time.Control.startOffset.getter(unsigned int a1)
{
  unint64_t v1 = (a1 >> 6) & 0x1FF;
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (is_mul_ok(v1, result)) {
    result *= v1;
  }
  else {
    __break(1u);
  }
  return result;
}

CoreP2P::NANBitmap::Time::Control __swiftcall NANBitmap.Time.Control.init(bitDuration:period:startOffset:)(CoreP2P::NANIntervalDuration bitDuration, CoreP2P::NANTimeUnit::SchedulePeriod period, CoreP2P::NANTimeUnit startOffset)
{
  unint64_t v6 = NANIntervalDuration.timeUnits.getter(0);
  if (!v6)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((startOffset.rawValue & 0xF) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Swift::UInt64 v7 = startOffset.rawValue / v6;
  if (v7 > 0x1FF)
  {
LABEL_13:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    result.rawValue  = swift_unexpectedError();
    __break(1u);
    return result;
  }
  __int16 v8 = sub_1001E1C94(bitDuration, 0, 3);
  unsigned __int16 v9 = sub_1001E1C94(period, 3uLL, 3);
  unsigned __int16 v10 = sub_1001E1CAC(v7, 6uLL, 9);
  if ((v9 & (unsigned __int16)~v8) != 0) {
    unsigned __int16 v11 = v9;
  }
  else {
    unsigned __int16 v11 = 0;
  }
  __int16 v12 = v11 | v8;
  if ((v10 & (unsigned __int16)~v12) != 0) {
    unsigned __int16 v13 = v10;
  }
  else {
    unsigned __int16 v13 = 0;
  }
  return (CoreP2P::NANBitmap::Time::Control)(v13 | v12);
}

CoreP2P::NANBitmap::Time::Control __swiftcall NANBitmap.Time.Control.offset(by:)(CoreP2P::NANTimeUnit by)
{
  unsigned int v2 = v1;
  unsigned __int8 v4 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v1 & 7);
  if (v4 == 4) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = v4;
  }
  unint64_t v6 = sub_10008C940(3uLL, 3, v2);
  unsigned __int8 v7 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v6);
  if (v7 == 8) {
    unsigned __int8 v7 = 0;
  }
  unint64_t v8 = (v2 >> 6) & 0x1FF;
  unint64_t v9 = NANIntervalDuration.timeUnits.getter(0);
  if (!is_mul_ok(v8, v9))
  {
    __break(1u);
    goto LABEL_19;
  }
  BOOL v10 = __CFADD__(v8 * v9, by.rawValue);
  Swift::UInt64 v11 = v8 * v9 + by.rawValue;
  if (v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v12 = NANIntervalDuration.timeUnits.getter(0);
  if (!v12)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v11 & 0xF) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v13 = v11 / v12;
  if (v13 > 0x1FF)
  {
LABEL_22:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    result.rawValue  = swift_unexpectedError();
    __break(1u);
    return result;
  }
  __int16 v14 = sub_1001E1C94(v5, 0, 3);
  unsigned __int16 v15 = sub_1001E1C94(v7, 3uLL, 3);
  unsigned __int16 v16 = sub_1001E1CAC(v13, 6uLL, 9);
  if ((v15 & (unsigned __int16)~v14) != 0) {
    unsigned __int16 v17 = v15;
  }
  else {
    unsigned __int16 v17 = 0;
  }
  __int16 v18 = v17 | v14;
  if ((v16 & (unsigned __int16)~v18) != 0) {
    unsigned __int16 v19 = v16;
  }
  else {
    unsigned __int16 v19 = 0;
  }
  return (CoreP2P::NANBitmap::Time::Control)(v19 | v18);
}

unint64_t sub_10008D444(uint64_t a1)
{
  return sub_10008D4D4(a1, 4u, &static NANBitmap.Time.Control.availability);
}

_WORD *NANBitmap.Time.Control.availability.unsafeMutableAddressor()
{
  if (qword_10047BF68 != -1) {
    swift_once();
  }
  return &static NANBitmap.Time.Control.availability;
}

uint64_t static NANBitmap.Time.Control.availability.getter()
{
  return sub_10008D654(&qword_10047BF68, &static NANBitmap.Time.Control.availability);
}

unint64_t sub_10008D4C4(uint64_t a1)
{
  return sub_10008D4D4(a1, 3u, &static NANBitmap.Time.Control.perDiscoveryWindow);
}

unint64_t sub_10008D4D4(uint64_t a1, unsigned __int8 a2, _WORD *a3)
{
  if (NANIntervalDuration.timeUnits.getter(0))
  {
    __int16 v5 = sub_1001E1C94(0, 0, 3);
    unsigned __int16 v6 = sub_1001E1C94(a2, 3uLL, 3);
    unint64_t result = sub_1001E1CAC(0, 6uLL, 9);
    if ((v6 & (unsigned __int16)~v5) != 0) {
      unsigned __int16 v8 = v6;
    }
    else {
      unsigned __int16 v8 = 0;
    }
    __int16 v9 = v8 | v5;
    if (((unsigned __int16)result & (unsigned __int16)~v9) != 0) {
      __int16 v10 = result;
    }
    else {
      __int16 v10 = 0;
    }
    *a3  = v10 | v9;
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    unint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

__int16 *NANBitmap.Time.Control.perDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_10047BF70 != -1) {
    swift_once();
  }
  return &static NANBitmap.Time.Control.perDiscoveryWindow;
}

uint64_t static NANBitmap.Time.Control.perDiscoveryWindow.getter()
{
  return sub_10008D654(&qword_10047BF70, (unsigned __int16 *)&static NANBitmap.Time.Control.perDiscoveryWindow);
}

uint64_t sub_10008D654(void *a1, unsigned __int16 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

uint64_t sub_10008D698()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10008D6F8()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10008D748(_WORD *a1@<X8>)
{
  *a1  = 0;
}

uint64_t sub_10008D750@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3 = sub_1001DB610(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t NANBitmap.Time.bitmapData.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a2;
}

uint64_t NANBitmap.Time.init(from:)(void *a1)
{
  return sub_1000A1AB0(a1);
}

uint64_t NANBitmap.Time.encode(to:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v11, v12);
  sub_1000A1C18();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v4)
  {
    sub_100013D44(a3, a4);
    uint64_t v7 = sub_10008D950(a3, a4);
    unint64_t v9 = v8;
    sub_100039448((uint64_t)v11, v12);
    sub_100010BCC(&qword_10047E210);
    sub_10000F9CC(&qword_10047E348, &qword_10047E210);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10000C970(v7, v9);
  }
  return sub_100010754((uint64_t)v11);
}

uint64_t sub_10008D950(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10008DA28);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 >= 255)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8)  = 0;
        *(unsigned char *)(v8 + 16)  = 2;
        swift_willThrow();
        sub_10000C970(a1, a2);
      }
      return a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      return a1;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10008DA38(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x10008DB0CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8)  = 0;
        *(unsigned char *)(v8 + 16)  = 2;
        swift_willThrow();
        sub_10000C970(a1, a2);
      }
      return a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      return a1;
  }
}

uint64_t NANBitmap.Time.description.getter(unsigned __int16 a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for Data.Iterator();
  __chkstk_darwin();
  uint64_t v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013D44(a2, a3);
  unint64_t v7 = sub_10009F7E4(a1, a2, a3);
  unint64_t v9 = v7;
  uint64_t v11 = v10;
  v28[0]  = 0;
  v28[1]  = 0xE000000000000000;
  if (v7 == v10) {
    return 0;
  }
  char v13 = v8;
  unint64_t v14 = v7 >> 7;
  uint64_t v26 = (char *)HIBYTE(v8);
  unint64_t v24 = v8 >> 40;
  *(void *)&long long v25 = HIWORD(v8);
  unint64_t v23 = HIDWORD(v8);
  long long v22 = xmmword_1003B2450;
  unint64_t v15 = v8 >> 24;
  unint64_t v16 = v8 >> 16;
  unint64_t v17 = v8 >> 8;
  do
  {
    v27[0]  = v13;
    v27[1]  = v17;
    void v27[2] = v16;
    v27[3]  = v15;
    v27[4]  = v23;
    v27[5]  = v24;
    v27[6]  = v25;
    v27[7]  = (_BYTE)v26;
    unint64_t v18 = v9 + 128;
    if (v9 >= 0xFFFFFFFFFFFFFF80)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      JUMPOUT(0x10008DFF8);
    }
    char v19 = v27[v14];
    sub_100010BCC((uint64_t *)&unk_10047CF90);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16)  = v22;
    *(void *)(v20 + 56)  = &type metadata for UInt8;
    *(void *)(v20 + 64)  = &protocol witness table for UInt8;
    *(unsigned char *)(v20 + 32)  = v19;
    v21._countAndFlagsBits  = String.init(format:_:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v9 += 128;
    ++v14;
  }
  while (v18 != v11);
  return v28[0];
}

uint64_t TimeBitmap.init(bitmap:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_10009F7E4(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t NANBitmap.Time.hash(into:)(int a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4)
{
  Hasher._combine(_:)(a2);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static NANBitmap.Time.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, unint64_t a3, __int16 a4, uint64_t a5, unint64_t a6)
{
  if (a1 == a4) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

Swift::Int NANBitmap.Time.hashValue.getter(Swift::UInt16 a1, uint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10008E144()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10008E1C0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_WORD *)v0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_10008E22C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10008E2A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A1AB0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_10008E2D4(void *a1)
{
  return NANBitmap.Time.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t sub_10008E2F4()
{
  return NANBitmap.Time.description.getter(*(_WORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_10008E300(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

void *TimeBitmap.bitDuration.unsafeMutableAddressor()
{
  return &static TimeBitmap.bitDuration;
}

uint64_t TimeBitmap.slotsView.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *Swift::UInt16 v3 = result;
  v3[1]  = a2;
  v3[2]  = a3;
  return result;
}

uint64_t TimeBitmap.init()()
{
  return 0;
}

void *TimeBitmap.zero.unsafeMutableAddressor()
{
  return &static TimeBitmap.zero;
}

void *TimeBitmap.Slot.FF.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.FF;
}

void *TimeBitmap.all.unsafeMutableAddressor()
{
  return &static TimeBitmap.all;
}

uint64_t static TimeBitmap.all.getter()
{
  return 0;
}

uint64_t _s7CoreP2P10TimeBitmapVyA2C4SlotV_A7EtcfC_0()
{
  return 0;
}

uint64_t TimeBitmap.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E61C(a1, a2, a3, (uint64_t (*)(void))TimeBitmap.SlotsView.formUnion(_:));
}

int8x8_t TimeBitmap.SlotsView.formUnion(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0]  = a3;
  v5.i32[1]  = a3 >> 8;
  int8x8_t result = vorr_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FE0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FF0)))));
  v3[2]  = result;
  return result;
}

uint64_t TimeBitmap.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E61C(a1, a2, a3, (uint64_t (*)(void))TimeBitmap.SlotsView.formIntersection(_:));
}

int8x8_t TimeBitmap.SlotsView.formIntersection(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0]  = a3;
  v5.i32[1]  = a3 >> 8;
  int8x8_t result = vand_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FE0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FF0)))));
  v3[2]  = result;
  return result;
}

uint64_t TimeBitmap.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E61C(a1, a2, a3, (uint64_t (*)(void))TimeBitmap.SlotsView.formSymmetricDifference(_:));
}

int8x8_t TimeBitmap.SlotsView.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0]  = a3;
  v5.i32[1]  = a3 >> 8;
  int8x8_t result = veor_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FE0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FF0)))));
  v3[2]  = result;
  return result;
}

uint64_t TimeBitmap.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008E61C(a1, a2, a3, (uint64_t (*)(void))TimeBitmap.SlotsView.subtract(_:));
}

uint64_t sub_10008E61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

int8x8_t TimeBitmap.SlotsView.subtract(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0]  = a3;
  v5.i32[1]  = a3 >> 8;
  int8x8_t result = vbic_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FE0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1003B4FF0)))));
  v3[2]  = result;
  return result;
}

Swift::Void __swiftcall TimeBitmap.SlotsView.invert()()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if (*v0 != v2)
  {
    Swift::UInt16 v3 = v0 + 2;
    for (unint64_t i = v1 >> 7; ; ++i)
    {
      unint64_t v5 = v1 + 128;
      if (v1 >= 0xFFFFFFFFFFFFFF80) {
        break;
      }
      uint64_t v6 = *v3;
      *((unsigned char *)v3 + i)  = ~*((unsigned char *)&v6 + i);
      v1 += 128;
      if (v5 == v2) {
        return;
      }
    }
    __break(1u);
  }
}

uint64_t TimeBitmap.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

unint64_t TimeBitmap.inverted()(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  if (result != a2)
  {
    unint64_t v3 = result >> 7;
    for (unint64_t i = result; ; i += 128)
    {
      unint64_t v5 = i + 128;
      if (i >= 0xFFFFFFFFFFFFFF80) {
        break;
      }
      uint64_t v6 = v7;
      *((unsigned char *)&v7 + v3)  = ~*((unsigned char *)&v6 + v3);
      ++v3;
      if (v5 == a2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t TimeBitmap.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((a1 / result) & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unsigned int v6 = *((unsigned __int8 *)&v7 + ((a1 / result) >> 3));
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (((a1 / result) & 0x8000000000000000) == 0) {
    return (v6 >> ((a1 / result) & 7)) & 1;
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t TimeBitmap.SlotsView.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((a1 / result) & 0x8000000000000000) == 0) {
      return *((unsigned __int8 *)&v6 + ((a1 / result) >> 3));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t TimeBitmap.subscript.setter(uint64_t a1, unint64_t a2)
{
  return sub_1000A2C08(a2);
}

uint64_t TimeBitmap.SlotsView.subscript.setter(uint64_t result, unint64_t a2)
{
  *(unsigned char *)(v2 + (a2 >> 7) + 16)  = result;
  return result;
}

unint64_t (*TimeBitmap.subscript.modify(uint64_t a1, unint64_t a2, uint64_t a3))(unint64_t *a1)
{
  *(void *)a1  = a2;
  *(void *)(a1 + 8)  = v3;
  *(unsigned char *)(a1 + 16)  = TimeBitmap.subscript.getter(a2, a2, a3, *(void *)(v3 + 16)) & 1;
  return sub_10008E8E8;
}

unint64_t sub_10008E8E8(unint64_t *a1)
{
  return sub_1000A2C08(*a1);
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(after:)(CoreP2P::NANTimeUnit after)
{
  BOOL v1 = __CFADD__(after.rawValue, 16);
  result.rawValue  = after.rawValue + 16;
  if (v1) {
    __break(1u);
  }
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(before:)(CoreP2P::NANTimeUnit before)
{
  BOOL v1 = before.rawValue >= 0x10;
  result.rawValue  = before.rawValue - 16;
  if (!v1) {
    __break(1u);
  }
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(_:offsetBy:)(CoreP2P::NANTimeUnit _, Swift::Int offsetBy)
{
  if (offsetBy < 0) {
    goto LABEL_7;
  }
  if ((unint64_t)offsetBy >> 60)
  {
    __break(1u);
    goto LABEL_6;
  }
  BOOL v2 = __CFADD__(_.rawValue, 16 * offsetBy);
  result.rawValue  = _.rawValue + 16 * offsetBy;
  if (v2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    result.rawValue  = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall TimeBitmap.distance(from:to:)(Swift::Int from, CoreP2P::NANTimeUnit to)
{
  if (to.rawValue >= from) {
    return (to.rawValue - from) >> 4;
  }
  __break(1u);
  return from;
}

uint64_t NANDataManagementFrameTransferCompleteEvent.status.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t TimeBitmap.description.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  if (result == a2) {
    return 0;
  }
  char v3 = a3;
  unint64_t v4 = result;
  unint64_t v5 = result >> 7;
  unint64_t v15 = HIWORD(a3);
  unint64_t v16 = HIBYTE(a3);
  unint64_t v14 = a3 >> 40;
  unint64_t v6 = HIDWORD(a3);
  unint64_t v7 = a3 >> 24;
  unint64_t v8 = a3 >> 16;
  unint64_t v9 = a3 >> 8;
  while (1)
  {
    v18[0]  = v3;
    v18[1]  = v9;
    v18[2]  = v8;
    v18[3]  = v7;
    v18[4]  = v6;
    v18[5]  = v14;
    v18[6]  = v15;
    v18[7]  = v16;
    unint64_t v10 = v4 + 128;
    if (v4 >= 0xFFFFFFFFFFFFFF80) {
      break;
    }
    char v11 = v18[v5];
    sub_100010BCC((uint64_t *)&unk_10047CF90);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16)  = xmmword_1003B2450;
    *(void *)(v12 + 56)  = &type metadata for UInt8;
    *(void *)(v12 + 64)  = &protocol witness table for UInt8;
    *(unsigned char *)(v12 + 32)  = v11;
    v13._countAndFlagsBits  = String.init(format:_:)();
    String.append(_:)(v13);
    CoreP2P::NANTimeUnit result = swift_bridgeObjectRelease();
    v4 += 128;
    ++v5;
    if (v10 == a2) {
      return v19;
    }
  }
  __break(1u);
  return result;
}

void *TimeBitmap.Slot.OO.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.OO;
}

void *TimeBitmap.Slot.FO.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.FO;
}

uint64_t static TimeBitmap.Slot.FO.getter()
{
  return 240;
}

void *TimeBitmap.Slot.OF.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.OF;
}

uint64_t static NANDiscoveryWindowIndex.last.getter()
{
  return 15;
}

Swift::Void __swiftcall TimeBitmap.Slot.setBit(_:)(Swift::UInt8 a1)
{
  if (a1 > 7u) {
    __break(1u);
  }
  else {
    *v1 |= 1 << a1;
  }
}

Swift::Void __swiftcall TimeBitmap.Slot.clearBit(_:)(Swift::UInt8 a1)
{
  if (a1 > 7u) {
    __break(1u);
  }
  else {
    *v1 &= (-1 << a1) - 1;
  }
}

void InfraScanCompleteEvent.hash(into:)(int a1, Swift::UInt8 a2)
{
}

Swift::Int InfraScanCompleteEvent.hashValue.getter(Swift::UInt8 a1)
{
  return Hasher._finalize()();
}

unint64_t TimeBitmap.SlotsView.subscript.modify(uint64_t a1, unint64_t a2)
{
  *(void *)a1  = a2;
  *(void *)(a1 + 8)  = v2;
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((a2 / result) & 0x8000000000000000) == 0)
    {
      *(unsigned char *)(a1 + 16)  = *((unsigned char *)&v6 + ((a2 / result) >> 3));
      return (unint64_t)sub_10008EC9C;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008EC9C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + (*(void *)result >> 7) + 16)  = *(unsigned char *)(result + 16);
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(after:)(CoreP2P::NANTimeUnit after)
{
  BOOL v1 = __CFADD__(after.rawValue, 128);
  result.rawValue  = after.rawValue + 128;
  if (v1) {
    __break(1u);
  }
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(_:offsetBy:)(CoreP2P::NANTimeUnit _, Swift::Int offsetBy)
{
  if (offsetBy < 0) {
    goto LABEL_7;
  }
  if ((unint64_t)offsetBy >> 57)
  {
    __break(1u);
    goto LABEL_6;
  }
  BOOL v2 = __CFADD__(_.rawValue, offsetBy << 7);
  result.rawValue  = _.rawValue + (offsetBy << 7);
  if (v2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    result.rawValue  = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(before:)(CoreP2P::NANTimeUnit before)
{
  BOOL v1 = before.rawValue >= 0x80;
  result.rawValue  = before.rawValue - 128;
  if (!v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall TimeBitmap.SlotsView.distance(from:to:)(Swift::Int from, CoreP2P::NANTimeUnit to)
{
  if (to.rawValue >= from) {
    return (to.rawValue - from) >> 7;
  }
  __break(1u);
  return from;
}

BOOL static TimeBitmap.SlotsView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 == a6;
}

void TimeBitmap.SlotsView.hash(into:)(int a1, int a2, int a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 8;
  unint64_t v5 = a4 >> 16;
  unint64_t v6 = a4 >> 24;
  unint64_t v7 = HIDWORD(a4);
  unint64_t v8 = a4 >> 40;
  unint64_t v9 = HIWORD(a4);
  unint64_t v10 = HIBYTE(a4);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

BOOL TimeBitmap.SlotsView.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 0;
}

Swift::Int TimeBitmap.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = a3 >> 8;
  unint64_t v5 = a3 >> 16;
  unint64_t v6 = a3 >> 24;
  unint64_t v7 = HIDWORD(a3);
  unint64_t v8 = a3 >> 40;
  unint64_t v9 = HIWORD(a3);
  unint64_t v10 = HIBYTE(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

uint64_t sub_10008EF6C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10008F61C(a1, a2, a3, sub_1000A2CB8, a4);
}

Swift::Int sub_10008EF88()
{
  Swift::UInt8 v1 = v0[16];
  Swift::UInt8 v2 = v0[17];
  Swift::UInt8 v3 = v0[18];
  Swift::UInt8 v4 = v0[19];
  Swift::UInt8 v5 = v0[20];
  Swift::UInt8 v6 = v0[21];
  Swift::UInt8 v7 = v0[22];
  Swift::UInt8 v8 = v0[23];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_10008F060()
{
  Swift::UInt8 v1 = v0[17];
  Swift::UInt8 v2 = v0[18];
  Swift::UInt8 v3 = v0[19];
  Swift::UInt8 v4 = v0[20];
  Swift::UInt8 v5 = v0[21];
  Swift::UInt8 v6 = v0[22];
  Swift::UInt8 v7 = v0[23];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_10008F100()
{
  Swift::UInt8 v1 = v0[16];
  Swift::UInt8 v2 = v0[17];
  Swift::UInt8 v3 = v0[18];
  Swift::UInt8 v4 = v0[19];
  Swift::UInt8 v5 = v0[20];
  Swift::UInt8 v6 = v0[21];
  Swift::UInt8 v7 = v0[22];
  Swift::UInt8 v8 = v0[23];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void *sub_10008F1D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result < 0x80uLL) {
    __break(1u);
  }
  else {
    *a2  = *result - 128;
  }
  return result;
}

void *sub_10008F1EC(void *result)
{
  if (*result < 0x80uLL) {
    __break(1u);
  }
  else {
    *result -= 128;
  }
  return result;
}

BOOL sub_10008F204(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void sub_10008F25C(void *a1@<X8>)
{
  *a1  = *(void *)(v1 + 8);
}

unint64_t sub_10008F268(unsigned char *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((v4 / result) & 0x8000000000000000) == 0)
    {
      *a1  = *((unsigned char *)&v6 + ((v4 / result) >> 3));
      return (unint64_t)NANBitmap.Channel.operatingClass.getter;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *sub_10008F2EC@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  if (v4 < *v2)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v5 = *result;
  if (*result < v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v6 = result[1];
  if (v4 >= v6)
  {
    unint64_t v7 = v2[2];
    a2[2]  = v3;
    a2[3]  = v4;
    a2[4]  = v7;
    *a2  = v5;
    a2[1]  = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_10008F330@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *((void *)v1 + 1);
  *(double *)a1  = *v1;
  *(void *)(a1 + 8)  = v3;
  double result = v1[2];
  *(double *)(a1 + 16)  = result;
  *(void *)(a1 + 24)  = v2;
  *(void *)(a1 + 32)  = v3;
  return result;
}

BOOL sub_10008F348()
{
  return *(void *)(v0 + 16) == 0;
}

void sub_10008F3A0(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(_WORD *)(a1 + 8)  = 256;
}

void *sub_10008F3B0@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 >> 57)
    {
      __break(1u);
    }
    else if (!__CFADD__(*result, a2 << 7))
    {
      *a3  = *result + (a2 << 7);
      return result;
    }
    __break(1u);
  }
  double result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10008F438(void *result, void *a2)
{
  if (*a2 >= *result) {
    return (void *)((*a2 - *result) >> 7);
  }
  __break(1u);
  return result;
}

void *sub_10008F460@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= 0xFFFFFFFFFFFFFF80) {
    __break(1u);
  }
  else {
    *a2  = *result + 128;
  }
  return result;
}

void *sub_10008F478(void *result)
{
  if (*result >= 0xFFFFFFFFFFFFFF80) {
    __break(1u);
  }
  else {
    *result += 128;
  }
  return result;
}

__n128 sub_10008F490@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1  = *v1;
  a1[1].n128_u64[0]  = v1[1].n128_u64[0];
  a1[1].n128_u64[1]  = result.n128_u64[0];
  return result;
}

unint64_t sub_10008F4A4()
{
  unint64_t v1 = v0[1];
  if (v1 >= *v0) {
    return (v1 - *v0) >> 7;
  }
  __break(1u);
  return result;
}

void *sub_10008F4BC()
{
  return sub_10009CBA8(*(void **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

unint64_t sub_10008F4C8(unint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_10009C3B4(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t sub_10008F4D8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10008F61C(a1, a2, a3, sub_1000A2D6C, a4);
}

unint64_t sub_10008F4F4()
{
  return TimeBitmap.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void *sub_10008F500@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result < 0x10uLL) {
    __break(1u);
  }
  else {
    *a2  = *result - 16;
  }
  return result;
}

void *sub_10008F518(void *result)
{
  if (*result < 0x10uLL) {
    __break(1u);
  }
  else {
    *result -= 16;
  }
  return result;
}

uint64_t (*sub_10008F530(unsigned char *a1, unint64_t *a2, uint64_t a3))(void)
{
  *a1  = TimeBitmap.subscript.getter(*a2, (uint64_t)a2, a3, *(void *)(v3 + 16)) & 1;
  return NANBitmap.Channel.operatingClass.getter;
}

BOOL sub_10008F580()
{
  return *v0 == v0[1];
}

void *sub_10008F594@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 >> 60)
    {
      __break(1u);
    }
    else if (!__CFADD__(*result, 16 * a2))
    {
      *a3  = *result + 16 * a2;
      return result;
    }
    __break(1u);
  }
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008F61C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3);
  *(void *)a5  = result;
  *(unsigned char *)(a5 + 8)  = v7 & 1;
  return result;
}

void *sub_10008F658(void *result, void *a2)
{
  if (*a2 >= *result) {
    return (void *)((*a2 - *result) >> 4);
  }
  __break(1u);
  return result;
}

void *sub_10008F674(void *result, void *a2)
{
  if (*result < *a2 || *result >= a2[1]) {
    __break(1u);
  }
  return result;
}

void *sub_10008F690(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_10008F6AC(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_10008F6C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= 0xFFFFFFFFFFFFFFF0) {
    __break(1u);
  }
  else {
    *a2  = *result + 16;
  }
  return result;
}

void *sub_10008F6E0(void *result)
{
  if (*result >= 0xFFFFFFFFFFFFFFF0) {
    __break(1u);
  }
  else {
    *result += 16;
  }
  return result;
}

unint64_t sub_10008F6F8()
{
  unint64_t v1 = v0[1];
  if (v1 >= *v0) {
    return (v1 - *v0) >> 4;
  }
  __break(1u);
  return result;
}

unint64_t *sub_10008F710()
{
  return sub_10009CC64(*(unint64_t **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

unint64_t *sub_10008F71C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10009C290(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t sub_10008F728(char a1)
{
  __int16 v1 = 2 * (a1 & 1);
  if ((a1 & 2) != 0) {
    v1 |= 0xCu;
  }
  if ((a1 & 4) != 0) {
    v1 |= 0x28u;
  }
  if ((a1 & 8) != 0) {
    v1 |= 0x8Cu;
  }
  if ((a1 & 0x10) != 0) {
    v1 |= 0x210u;
  }
  if ((a1 & 0x20) != 0) {
    v1 |= 0x814u;
  }
  if ((a1 & 0x40) != 0) {
    v1 |= 0x2018u;
  }
  if (a1 >= 0) {
    __int16 v2 = v1;
  }
  else {
    __int16 v2 = v1 | 0x801C;
  }
  __int16 v4 = v2;
  return sub_10011A3BC((uint64_t)&v4, (uint64_t)&v5);
}

uint64_t sub_10008F7F8(char a1)
{
  int v1 = 2 * (a1 & 1);
  if ((a1 & 2) != 0) {
    v1 |= 0x30u;
  }
  if ((a1 & 4) != 0) {
    v1 |= 0x220u;
  }
  if ((a1 & 8) != 0) {
    v1 |= 0x2030u;
  }
  if ((a1 & 0x10) != 0) {
    v1 |= 0x20040u;
  }
  if ((a1 & 0x20) != 0) {
    v1 |= 0x200050u;
  }
  if ((a1 & 0x40) != 0) {
    v1 |= 0x2000060u;
  }
  if (a1 >= 0) {
    int v2 = v1;
  }
  else {
    int v2 = v1 | 0x20000070;
  }
  int v4 = v2;
  return sub_10011A3BC((uint64_t)&v4, (uint64_t)&v5);
}

uint64_t TimeBitmap.nanBitmap.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = a1;
  if (a1 != a2)
  {
    unint64_t v8 = a1 >> 7;
    unint64_t v6 = a1;
    while (1)
    {
      long long v51 = (void *)a3;
      if (*((unsigned char *)&v51 + v8)) {
        break;
      }
      unint64_t v9 = v6 + 128;
      if (v6 >= 0xFFFFFFFFFFFFFF80)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v6 += 128;
      ++v8;
      if (v9 == a2)
      {
        unint64_t v6 = a2;
        break;
      }
    }
    unint64_t v10 = a2;
    while (1)
    {
      BOOL v11 = v10 >= 0x80;
      v10 -= 128;
      if (!v11)
      {
        __break(1u);
        goto LABEL_39;
      }
      long long v51 = (void *)a3;
      if (*((unsigned char *)&v51 + (v10 >> 7))) {
        break;
      }
      if (v10 == a1)
      {
        unint64_t v7 = a1;
        goto LABEL_14;
      }
    }
    unint64_t v7 = v10 + 128;
    if (v10 >= 0xFFFFFFFFFFFFFF80) {
      goto LABEL_49;
    }
  }
LABEL_14:
  unint64_t v12 = v6 - a1;
  if (v6 < a1) {
    goto LABEL_42;
  }
  unint64_t v43 = v7;
  unint64_t v13 = NANIntervalDuration.timeUnits.getter(0);
  if (!v13)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if ((v12 & 0xF) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v14 = v12 / v13;
  if (v12 / v13 > 0x1FF)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  int v15 = sub_1001E1C94(0, 0, 3);
  int v16 = sub_1001E1C94(4u, 3uLL, 3);
  int v17 = sub_1001E1CAC(v14, 6uLL, 9);
  int v18 = v17;
  unint64_t v19 = v43 - v6;
  if (v43 > v6)
  {
    if (a2 < a1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v6 < a1)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v43 > a2)
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      uint64_t result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    unint64_t v20 = _swiftEmptyArrayStorage;
    if (v19 >= 0x80)
    {
      int v41 = v17;
      int v42 = v15;
      unint64_t v21 = v19 >> 7;
      long long v51 = _swiftEmptyArrayStorage;
      sub_1000834E4(0, v19 >> 7, 0);
      unint64_t v22 = v43;
      unint64_t v20 = v51;
      unint64_t v23 = v6 >> 7;
      unint64_t v24 = HIBYTE(a3);
      unint64_t v25 = HIWORD(a3);
      unint64_t v26 = a3 >> 40;
      unint64_t v27 = HIDWORD(a3);
      unint64_t v28 = a3 >> 24;
      while (v6 < v22)
      {
        __int16 v44 = a3;
        char v45 = BYTE2(a3);
        char v46 = v28;
        char v47 = v27;
        char v48 = v26;
        char v49 = v25;
        char v50 = v24;
        unint64_t v30 = v20[2];
        unint64_t v29 = v20[3];
        char v31 = *((unsigned char *)&v44 + v23);
        long long v51 = v20;
        if (v30 >= v29 >> 1)
        {
          unint64_t v39 = v25;
          unint64_t v40 = v24;
          unint64_t v37 = v27;
          unint64_t v38 = v26;
          unint64_t v36 = v28;
          sub_1000834E4(v29 > 1, v30 + 1, 1);
          unint64_t v28 = v36;
          unint64_t v27 = v37;
          unint64_t v26 = v38;
          unint64_t v25 = v39;
          unint64_t v24 = v40;
          unint64_t v22 = v43;
          unint64_t v20 = v51;
        }
        v20[2]  = v30 + 1;
        *((unsigned char *)v20 + v30 + 32)  = v31;
        if (v6 >= 0xFFFFFFFFFFFFFF80) {
          goto LABEL_41;
        }
        ++v23;
        v6 += 128;
        if (!--v21)
        {
          int v15 = v42;
          int v18 = v41;
          goto LABEL_31;
        }
      }
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_31:
    sub_1001265EC((uint64_t)v20);
    swift_bridgeObjectRelease();
  }
  if (((unsigned __int16)v16 & (unsigned __int16)~(_WORD)v15) != 0) {
    int v32 = v16;
  }
  else {
    int v32 = 0;
  }
  int v33 = v32 | v15;
  if (((unsigned __int16)v18 & (unsigned __int16)~(_WORD)v33) != 0) {
    int v34 = v18;
  }
  else {
    int v34 = 0;
  }
  return v34 | v33;
}

uint64_t TimeBitmap.init(period:repeating:)(unsigned __int8 a1, uint64_t a2)
{
  if (!NANIntervalDuration.timeUnits.getter(0))
  {
    __break(1u);
    goto LABEL_18;
  }
  __int16 v5 = sub_1001E1C94(0, 0, 3);
  if (v2)
  {
LABEL_18:
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  __int16 v6 = v5;
  unsigned __int16 v7 = sub_1001E1C94(a1, 3uLL, 3);
  unsigned __int16 v8 = sub_1001E1CAC(0, 6uLL, 9);
  int64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    __int16 v22 = v6;
    sub_1000834E4(0, v9, 0);
    uint64_t v10 = 0;
    uint64_t v11 = _swiftEmptyArrayStorage[2];
    do
    {
      char v12 = *(unsigned char *)(a2 + v10 + 32);
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v11 + v10 >= v13 >> 1) {
        sub_1000834E4(v13 > 1, v11 + v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v11 + v10 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v11 + v10++)  = v12;
    }
    while (v9 != v10);
    swift_bridgeObjectRelease();
    __int16 v6 = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((v7 & (unsigned __int16)~v6) != 0) {
    unsigned __int16 v14 = v7;
  }
  else {
    unsigned __int16 v14 = 0;
  }
  __int16 v15 = v14 | v6;
  if ((v8 & (unsigned __int16)~v15) != 0) {
    unsigned __int16 v16 = v8;
  }
  else {
    unsigned __int16 v16 = 0;
  }
  unsigned __int16 v17 = v16 | v15;
  uint64_t v18 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  return sub_10009F7E4(v17, v18, v20);
}

uint64_t sub_10008FEB4()
{
  uint64_t result = _s7CoreP2P10TimeBitmapV14repeatingPerDWyA2C4SlotV_A3FtFZ_0(240, 0, 0, 0);
  static TimeBitmap.primaryDiscoveryWindow  = result;
  unk_100488480  = v1;
  LOWORD(qword_100488488)  = v2;
  BYTE2(qword_100488488)  = v3;
  BYTE3(qword_100488488)  = v4;
  BYTE4(qword_100488488)  = v5;
  BYTE5(qword_100488488)  = v6;
  BYTE6(qword_100488488)  = v7;
  HIBYTE(qword_100488488)  = v8;
  return result;
}

uint64_t *TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_10047BF78 != -1) {
    swift_once();
  }
  return &static TimeBitmap.primaryDiscoveryWindow;
}

uint64_t static TimeBitmap.primaryDiscoveryWindow.getter()
{
  if (qword_10047BF78 != -1) {
    swift_once();
  }
  return static TimeBitmap.primaryDiscoveryWindow;
}

uint64_t sub_10008FFC4()
{
  uint64_t result = _s7CoreP2P10TimeBitmapV14repeatingPerDWyA2C4SlotV_A3FtFZ_0(0, 240, 0, 0);
  static TimeBitmap.secondaryDiscoveryWindow  = result;
  *(void *)algn_100488498  = v1;
  LOWORD(qword_1004884A0)  = v2;
  BYTE2(qword_1004884A0)  = v3;
  BYTE3(qword_1004884A0)  = v4;
  BYTE4(qword_1004884A0)  = v5;
  BYTE5(qword_1004884A0)  = v6;
  BYTE6(qword_1004884A0)  = v7;
  HIBYTE(qword_1004884A0)  = v8;
  return result;
}

uint64_t *TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_10047BF80 != -1) {
    swift_once();
  }
  return &static TimeBitmap.secondaryDiscoveryWindow;
}

uint64_t static TimeBitmap.secondaryDiscoveryWindow.getter()
{
  if (qword_10047BF80 != -1) {
    swift_once();
  }
  return static TimeBitmap.secondaryDiscoveryWindow;
}

void *TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor()
{
  return &static TimeBitmap.twoGHzOutOfBoundActionFrameBitmap;
}

uint64_t static TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.getter()
{
  return 0;
}

void *TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor()
{
  return &static TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap;
}

uint64_t static TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.getter()
{
  return 0;
}

BOOL static InfrastructureQualityOfService.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t NANAvailabilityEntry.UsagePreference.rawValue.getter(uint64_t result)
{
  return result;
}

_UNKNOWN **static NANAvailabilityEntry.UsagePreference.allCases.getter()
{
  return &off_100450030;
}

unint64_t sub_100090134@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_100090160(void *a1@<X8>)
{
  *a1  = *v1;
}

void sub_10009016C(void *a1@<X8>)
{
  *a1  = &off_100450058;
}

BOOL sub_10009017C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100090190(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1000901A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1000901B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void *NANAvailabilityEntry.Control.committed.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.committed;
}

void *NANAvailabilityEntry.Control.potential.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.potential;
}

void *NANAvailabilityEntry.Control.conditional.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.conditional;
}

uint64_t NANAvailabilityEntry.Control.usagePreference.getter(unsigned int a1)
{
  return (a1 >> 3) & 3;
}

double NANAvailabilityEntry.Control.utilization.getter(unsigned int a1)
{
  return (double)((a1 >> 5) & 3) * 0.2;
}

uint64_t NANAvailabilityEntry.Control.rxNSS.getter(unsigned int a1)
{
  return (a1 >> 8) & 0xF;
}

uint64_t NANAvailabilityEntry.Control.init(from:)(void *a1)
{
  return sub_1000A1290(a1);
}

CoreP2P::NANAvailabilityEntry::Control __swiftcall NANAvailabilityEntry.Control.init(entryType:usagePreference:)(CoreP2P::NANAvailabilityEntry::Control entryType, CoreP2P::NANAvailabilityEntry::UsagePreference usagePreference)
{
  return (CoreP2P::NANAvailabilityEntry::Control)(entryType.rawValue | (8 * usagePreference));
}

_WORD *sub_10009023C@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *result;
  return result;
}

Swift::Int sub_100090248()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100090290()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000902BC()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100090300@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1000A1290(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_10009032C()
{
  return RawRepresentable<>.encode(to:)();
}

_WORD *sub_10009037C@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *v2 | *result;
  return result;
}

_WORD *sub_100090390@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *v2 & *result;
  return result;
}

_WORD *sub_1000903A4@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *v2 ^ *result;
  return result;
}

BOOL sub_1000903B8(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1  = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *sub_1000903E8@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_WORD)v3;
  }
  *(_WORD *)a2  = v5;
  *(unsigned char *)(a2 + 2)  = v5 == 0;
  return result;
}

unsigned __int16 *sub_100090414@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *(_WORD *)a2  = v5;
  *(unsigned char *)(a2 + 2)  = v5 == 0;
  return result;
}

_WORD *sub_100090438(_WORD *result)
{
  *v1 |= *result;
  return result;
}

_WORD *sub_10009044C(_WORD *result)
{
  *v1 &= *result;
  return result;
}

_WORD *sub_100090460(_WORD *result)
{
  *v1 ^= *result;
  return result;
}

_WORD *sub_100090474@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *v2 & ~*result;
  return result;
}

BOOL sub_100090488(unsigned __int16 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10009049C(_WORD *a1)
{
  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL sub_1000904B0(unsigned __int16 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000904C4()
{
  return *v0 == 0;
}

_WORD *sub_1000904D4(_WORD *result)
{
  *v1 &= ~*result;
  return result;
}

_WORD *sub_1000904E8@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2  = *result;
  *(unsigned char *)(a2 + 2)  = 0;
  return result;
}

void sub_1000904F8(_WORD *a1@<X8>)
{
  *a1  = *v1;
}

BOOL sub_100090504(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

CoreP2P::WiFiInterfaceLinkState_optional __swiftcall WiFiInterfaceLinkState.init(rawValue:)(Swift::UInt8 rawValue)
{
  if (rawValue == 1) {
    v1.value  = CoreP2P_WiFiInterfaceLinkState_linkUp;
  }
  else {
    v1.value  = CoreP2P_WiFiInterfaceLinkState_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t AWDLSoftAPChannelChangedEvent.enabled.getter(char a1)
{
  return a1 & 1;
}

unsigned char *sub_10009053C@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2  = v3;
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.entriesType.setter(char a1)
{
  uint64_t result = a1 & 1;
  unint64_t v3 = *v1;
  if (v3)
  {
    if (result) {
      return result;
    }
    goto LABEL_5;
  }
  if (result)
  {
LABEL_5:
    char v4 = sub_1001E1C7C(result, 0, 1);
    uint64_t result = sub_1001E1C64(v3 >> 4, 4, 4);
    *CoreP2P::WiFiInterfaceLinkState_optional v1 = v4 | v3 & 2 | result;
  }
  return result;
}

void *NANAvailabilityEntry.BandChannelEntries.Control.nonContiguousBandwidth.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.BandChannelEntries.Control.nonContiguousBandwidth;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.getter(unsigned __int8 a1)
{
  return a1 >> 4;
}

CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control_optional __swiftcall NANAvailabilityEntry.BandChannelEntries.Control.init(entriesType:nonContiguousBandwidth:numberOfEntries:)(CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control::EntriesType entriesType, Swift::Bool nonContiguousBandwidth, Swift::Int numberOfEntries)
{
  if (numberOfEntries > 15)
  {
    unsigned __int8 v7 = 0;
    __int16 v8 = 1;
  }
  else
  {
    char v5 = sub_1001E1C7C(entriesType & 1, 0, 1);
    char v6 = sub_1001E1C64(numberOfEntries, 4, 4);
    __int16 v8 = 0;
    if (nonContiguousBandwidth) {
      char v10 = 2;
    }
    else {
      char v10 = 0;
    }
    unsigned __int8 v7 = v5 | v10 | v6;
  }
  return (CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control_optional)(v7 | (unsigned __int16)(v8 << 8));
}

uint64_t (*NANAvailabilityEntry.BandChannelEntries.Control.entriesType.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1  = v1;
  *(unsigned char *)(a1 + 8)  = *v1 & 1;
  return sub_1000906DC;
}

uint64_t sub_1000906DC(uint64_t a1, char a2)
{
  char v2 = *(unsigned char **)a1;
  uint64_t result = *(unsigned __int8 *)(a1 + 8);
  unint64_t v4 = *v2;
  if (a2)
  {
    if (v4)
    {
      if (result) {
        return result;
      }
    }
    else if ((result & 1) == 0)
    {
      return result;
    }
    char v5 = sub_1001E1C7C(result, 0, 1);
    uint64_t result = sub_1001E1C64(v4 >> 4, 4, 4);
LABEL_12:
    *char v2 = v5 | v4 & 2 | result;
    return result;
  }
  if (v4)
  {
    if (result) {
      return result;
    }
    goto LABEL_11;
  }
  if (result)
  {
LABEL_11:
    char v5 = sub_1001E1C7C(result, 0, 1);
    uint64_t result = sub_1001E1C64(v4 >> 4, 4, 4);
    goto LABEL_12;
  }
  return result;
}

void *NANAvailabilityEntry.BandChannelEntries.Control.maximumNumberOfEntries.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.BandChannelEntries.Control.maximumNumberOfEntries;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.setter(uint64_t result)
{
  unint64_t v2 = *v1;
  if (result != v2 >> 4)
  {
    uint64_t v3 = result;
    if (v2)
    {
      if (result > 15) {
        goto LABEL_10;
      }
      unsigned __int8 v4 = 1;
    }
    else
    {
      if (result > 15)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        uint64_t result = swift_errorRelease();
        __break(1u);
        return result;
      }
      unsigned __int8 v4 = 0;
    }
    char v5 = sub_1001E1C7C(v4, 0, 1);
    uint64_t result = sub_1001E1C64(v3, 4, 4);
    *CoreP2P::WiFiInterfaceLinkState_optional v1 = v5 | result | v2 & 2;
  }
  return result;
}

uint64_t *(*NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.modify(unint64_t *a1))(uint64_t *result, char a2)
{
  *a1  = (unint64_t)*v1 >> 4;
  a1[1]  = (unint64_t)v1;
  return sub_1000908A4;
}

uint64_t *sub_1000908A4(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = (unsigned char *)result[1];
  unint64_t v4 = *v3;
  if (a2)
  {
    if (*result == v4 >> 4) {
      return result;
    }
    if (v4)
    {
      if (v2 > 15)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      unsigned __int8 v5 = 1;
    }
    else
    {
      if (v2 > 15)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      unsigned __int8 v5 = 0;
    }
  }
  else
  {
    if (*result == v4 >> 4) {
      return result;
    }
    if (v4)
    {
      if (v2 > 15)
      {
LABEL_19:
        __break(1u);
        uint64_t result = (uint64_t *)swift_errorRelease();
        __break(1u);
        return result;
      }
      unsigned __int8 v5 = 1;
    }
    else
    {
      if (v2 > 15) {
        goto LABEL_17;
      }
      unsigned __int8 v5 = 0;
    }
  }
  char v6 = sub_1001E1C7C(v5, 0, 1);
  uint64_t result = (uint64_t *)sub_1001E1C64(v2, 4, 4);
  *uint64_t v3 = v6 | result | v4 & 2;
  return result;
}

CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control __swiftcall NANAvailabilityEntry.BandChannelEntries.Control.init(entriesType:)(CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control::EntriesType entriesType)
{
  char v1 = sub_1001E1C7C(entriesType & 1, 0, 1);
  return (CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control)(sub_1001E1C64(1, 4, 4) | v1);
}

unsigned char *sub_100090A30@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *result;
  return result;
}

uint64_t sub_100090A3C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100090A9C()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *sub_100090AEC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 | *result;
  return result;
}

unsigned char *sub_100090B00@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 & *result;
  return result;
}

unsigned char *sub_100090B14@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 ^ *result;
  return result;
}

BOOL sub_100090B28(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1  = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_100090B58@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2  = v5;
  a2[1]  = v5 == 0;
  return result;
}

unsigned __int8 *sub_100090B84@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2  = v5;
  a2[1]  = v5 == 0;
  return result;
}

unsigned char *sub_100090BA8(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_100090BBC(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_100090BD0(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_100090BE4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 & ~*result;
  return result;
}

BOOL sub_100090BF8(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100090C0C(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100090C20(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100090C34()
{
  return *v0 == 0;
}

unsigned char *sub_100090C44(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_100090C58@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2  = *result;
  return result;
}

uint64_t sub_100090C68()
{
  uint64_t v1 = *((void *)v0 + 1);
  unsigned __int8 v2 = v0[16];
  unint64_t v3 = *v0;
  swift_bridgeObjectRetain();
  if (v2)
  {
    if ((v3 & 1) == 0)
    {
      char v4 = sub_1001E1C7C(1u, 0, 1);
      LOBYTE(v3)  = v4 | v3 & 2 | sub_1001E1C64(v3 >> 4, 4, 4);
      *uint64_t v0 = v3;
    }
    unint64_t v5 = *(void *)(v1 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 != v3 >> 4)
    {
      if (v3)
      {
        if (v5 <= 0xF)
        {
          unsigned __int8 v7 = 1;
          goto LABEL_18;
        }
        goto LABEL_22;
      }
      if (v5 <= 0xF)
      {
        unsigned __int8 v7 = 0;
LABEL_18:
        char v9 = sub_1001E1C7C(v7, 0, 1);
        uint64_t result = sub_1001E1C64(v5, 4, 4);
        *uint64_t v0 = v9 | v3 & 2 | result;
        return result;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
  }
  else
  {
    if (v3)
    {
      char v8 = sub_1001E1C7C(0, 0, 1);
      LOBYTE(v3)  = v8 | v3 & 2 | sub_1001E1C64(v3 >> 4, 4, 4);
      *uint64_t v0 = v3;
    }
    unint64_t v5 = *(void *)(v1 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 != v3 >> 4)
    {
      if (v3)
      {
        if (v5 <= 0xF)
        {
          unsigned __int8 v7 = 1;
          goto LABEL_18;
        }
LABEL_23:
        __break(1u);
        swift_errorRelease();
        __break(1u);
        swift_errorRelease();
        __break(1u);
        uint64_t result = swift_errorRelease();
        __break(1u);
        return result;
      }
      if (v5 <= 0xF)
      {
        unsigned __int8 v7 = 0;
        goto LABEL_18;
      }
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.entries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NANAvailabilityEntry.BandChannelEntries.entries.setter(uint64_t a1, char a2)
{
  swift_bridgeObjectRelease();
  *(void *)(v2 + 8)  = a1;
  *(unsigned char *)(v2 + 16)  = a2 & 1;

  return sub_100090C68();
}

uint64_t (*NANAvailabilityEntry.BandChannelEntries.entries.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  return sub_100090EE0;
}

uint64_t sub_100090EE0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_100090C68();
  }
  return result;
}

Swift::Void __swiftcall NANAvailabilityEntry.BandChannelEntries.add(channel:)(CoreP2P::NANBitmap::Channel channel)
{
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    is_nil  = channel.auxiliaryChannelBitmap.is_nil;
    uint64_t v3 = *(void *)&channel.operatingClass;
    char v4 = *(void **)(v1 + 8);
    swift_bridgeObjectRetain();
    unint64_t v5 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = sub_1000C66CC(0, v4[2] + 1, 1, v4);
    }
    unint64_t v7 = v5[2];
    unint64_t v6 = v5[3];
    if (v7 >= v6 >> 1) {
      unint64_t v5 = sub_1000C66CC((void *)(v6 > 1), v7 + 1, 1, v5);
    }
    Swift::UInt8 v5[2] = v7 + 1;
    char v8 = (char *)v5 + 10 * v7;
    v8[32]  = v3;
    *((_WORD *)v8 + 17)  = WORD1(v3);
    v8[36]  = BYTE4(v3);
    *((_WORD *)v8 + 19)  = HIWORD(v3);
    v8[40]  = is_nil;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8)  = v5;
    *(unsigned char *)(v1 + 16)  = 1;
    sub_100090C68();
  }
}

void NANAvailabilityEntry.BandChannelEntries.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4)
{
  Hasher._combine(_:)(a2);
  if (a4)
  {
    sub_10009EC30(a1, a3);
  }
  else
  {
    Swift::UInt v7 = *(void *)(a3 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      char v8 = (Swift::UInt8 *)(a3 + 32);
      do
      {
        Swift::UInt8 v9 = *v8++;
        Hasher._combine(_:)(v9);
        --v7;
      }
      while (v7);
    }
  }
}

uint64_t static NANAvailabilityEntry.BandChannelEntries.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a3)
  {
    if (a6 & 1) != 0 && (sub_100096104(a2, a5)) {
      return 1;
    }
  }
  else if ((a6 & 1) == 0 && sub_1000961BC(a2, a5))
  {
    return 1;
  }
  return 0;
}

Swift::Int NANAvailabilityEntry.BandChannelEntries.hashValue.getter(Swift::UInt8 a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (a3)
  {
    sub_10009EC30((uint64_t)v10, a2);
  }
  else
  {
    Swift::UInt v6 = *(void *)(a2 + 16);
    Hasher._combine(_:)(v6);
    if (v6)
    {
      Swift::UInt v7 = (Swift::UInt8 *)(a2 + 32);
      do
      {
        Swift::UInt8 v8 = *v7++;
        Hasher._combine(_:)(v8);
        --v6;
      }
      while (v6);
    }
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000911B8()
{
  return NANAvailabilityEntry.BandChannelEntries.hashValue.getter(*(unsigned char *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_1000911C8(uint64_t a1)
{
  NANAvailabilityEntry.BandChannelEntries.hash(into:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_1000911D8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  char v2 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v2)
  {
    sub_10009EC30((uint64_t)v8, v1);
  }
  else
  {
    Swift::UInt v4 = *(void *)(v1 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      unint64_t v5 = (Swift::UInt8 *)(v1 + 32);
      do
      {
        Swift::UInt8 v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
  }
  return Hasher._finalize()();
}

uint64_t sub_10009126C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A25C0(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 16)  = v6 & 1;
  }
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.init(from:)(void *a1)
{
  return sub_1000A25C0(a1);
}

uint64_t sub_1000912C8(void *a1)
{
  return NANAvailabilityEntry.BandChannelEntries.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t NANAvailabilityEntry.BandChannelEntries.encode(to:)(void *a1, char a2, uint64_t a3, char a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  LOBYTE(v14)  = a2;
  sub_100039448((uint64_t)v12, v13);
  sub_1000A3014();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    sub_100039448((uint64_t)v12, v13);
    if (a4)
    {
      Swift::UInt8 v8 = &qword_10047E358;
      sub_100010BCC(&qword_10047E358);
      Swift::UInt8 v9 = (unint64_t *)&unk_10047E360;
      char v10 = sub_1000A3068;
    }
    else
    {
      Swift::UInt8 v8 = &qword_10047E370;
      sub_100010BCC(&qword_10047E370);
      Swift::UInt8 v9 = (unint64_t *)&unk_10047E378;
      char v10 = sub_1000A30BC;
    }
    sub_1000A3FD0(v9, v8, (void (*)(void))v10);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v12);
}

uint64_t sub_100091478(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a2 + 1);
    int v6 = a2[16];
    if (a1[16])
    {
      if (v6 && (sub_100096104(v4, v5) & 1) != 0) {
        return 1;
      }
    }
    else if ((v6 & 1) == 0 && sub_1000961BC(v4, v5))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t IEEE80211InformationElement.RSNCapability.version.getter()
{
  return *v0;
}

uint64_t NANAvailabilityEntry.timeBitmap.getter()
{
  uint64_t v1 = v0[1];
  sub_10006E968(v1, v0[2], v0[3]);
  return v1;
}

uint64_t NANAvailabilityEntry.timeBitmap.setter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_10006E0D8(*((void *)v3 + 1), *((void *)v3 + 2), *((void *)v3 + 3));
  *((void *)v3 + 1)  = a1;
  *((void *)v3 + 2)  = a2;
  *((void *)v3 + 3)  = a3;
  __int16 v8 = *v3;
  if (a3 >> 60 == 15)
  {
    if ((*v3 & 0x1000) == 0) {
      return result;
    }
    __int16 v9 = v8 & 0xEFFF;
  }
  else
  {
    if ((*v3 & 0x1000) != 0) {
      return result;
    }
    __int16 v9 = v8 | 0x1000;
  }
  *Swift::UInt8 v3 = v9;
  return result;
}

__int16 **(*NANAvailabilityEntry.timeBitmap.modify(void *a1))(__int16 **result, char a2)
{
  *a1  = v1;
  return sub_1000915C4;
}

__int16 **sub_1000915C4(__int16 **result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *result;
    __int16 v3 = **result;
    if (*((void *)*result + 3) >> 60 == 15)
    {
      if ((**result & 0x1000) != 0) {
        *uint64_t v2 = v3 & 0xEFFF;
      }
    }
    else if ((**result & 0x1000) == 0)
    {
      *uint64_t v2 = v3 | 0x1000;
    }
  }
  return result;
}

uint64_t NANAvailabilityEntry.bandChannelEntries.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANAvailabilityEntry.bandChannelEntries.setter(char a1, uint64_t a2, char a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 32)  = a1;
  *(void *)(v3 + 40)  = a2;
  *(unsigned char *)(v3 + 48)  = a3 & 1;
  return result;
}

uint64_t (*IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAvailabilityEntry.init(control:timeBitmap:bandChannelEntries:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_WORD *)a8  = result & 0xEFFF | ((a4 >> 60 != 15) << 12);
  *(void *)(a8 + 8)  = a2;
  *(void *)(a8 + 16)  = a3;
  *(void *)(a8 + 24)  = a4;
  *(unsigned char *)(a8 + 32)  = a5;
  *(void *)(a8 + 40)  = a6;
  *(unsigned char *)(a8 + 48)  = a7 & 1;
  return result;
}

double static NANAvailabilityEntry.potentialEntry(on:with:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v8 = sub_1001E1C7C(1u, 0, 1);
  char v9 = sub_1001E1C64(1, 4, 4) | v8;
  sub_100010BCC(&qword_1004870C0);
  uint64_t v10 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v10 + 16)  = xmmword_1003B2450;
  *(unsigned char *)(v10 + 32)  = a1;
  *(_WORD *)(v10 + 34)  = WORD1(a1);
  *(unsigned char *)(v10 + 36)  = BYTE4(a1);
  *(_WORD *)(v10 + 38)  = HIWORD(a1);
  *(unsigned char *)(v10 + 40)  = a2 & 1;
  *(_WORD *)a4  = (8 * a3) | 2;
  *(void *)(a4 + 8)  = 0;
  *(void *)(a4 + 16)  = 0;
  *(void *)(a4 + 24)  = 0xF000000000000000;
  *(unsigned char *)(a4 + 32)  = v9;
  *(void *)(a4 + 40)  = v10;
  *(unsigned char *)(a4 + 48)  = 1;
  return result;
}